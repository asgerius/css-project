[{"tags": ["kotlin"], "comments": [{"owner": {"reputation": 40731, "user_id": 581205, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/2be517e3b51c48a1c514627a87a1dd53?s=128&d=identicon&r=PG&f=1", "display_name": "maaartinus", "link": "https://stackoverflow.com/users/581205/maaartinus"}, "edited": false, "score": 1, "creation_date": 1428903809, "post_id": 29596266, "comment_id": 47343474, "body": "In Java, [you can not](<a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.8.7.1_\" rel=\"nofollow noreferrer\">docs.oracle.com/javase/specs/jls/se7/html/&hellip;</a> do this. The reasons is probably that at the point nothing is initialized yet and maybe there&#39;s a JVM related reason, too. Anyway, it&#39;s risky to do such things."}], "answers": [{"tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": false, "score": 2, "last_activity_date": 1428921774, "creation_date": 1428921774, "answer_id": 29603370, "question_id": 29596266, "link": "https://stackoverflow.com/questions/29596266/kotlin-inheritance-pass-this-as-constructor-argument/29603370#29603370", "title": "Kotlin inheritance: pass this as constructor argument", "body": "<p>You can not use <code>this</code> on the JVM before the super-constructor finished working, so you can not pass it to the super-constructor.</p>\n\n<p>What you can do is use an object expression or a lambda for an error listener:</p>\n\n<pre><code>public class GsonRequest&lt;T&gt;(url: String, val clazz: Class&lt;T&gt;) : \n    Request&lt;T&gt;(Request.Method.GET, url, { &lt;handling code here&gt; } )\n</code></pre>\n\n<p>Alternatively, consider taking the listener as a parameter for constructor of class <code>GsonRequest</code></p>\n"}], "owner": {"reputation": 676, "user_id": 1721719, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/6409da60e857e1ac8226ce29ceb3bf0a?s=128&d=identicon&r=PG", "display_name": "Tim Mutton", "link": "https://stackoverflow.com/users/1721719/tim-mutton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1199, "favorite_count": 2, "answer_count": 1, "score": 1, "last_activity_date": 1428921774, "creation_date": 1428884979, "last_edit_date": 1428885440, "question_id": 29596266, "link": "https://stackoverflow.com/questions/29596266/kotlin-inheritance-pass-this-as-constructor-argument", "title": "Kotlin inheritance: pass this as constructor argument", "body": "<p>Im trying to create a GsonRequest class that extends a normal volley request, and also implements the error listener. The code I'm using to do this is </p>\n\n<pre><code>public class GsonRequest&lt;T&gt;(url: String, val clazz: Class&lt;T&gt;) : \n    Request&lt;T&gt;(Request.Method.GET, url, this), ErrorListener\n</code></pre>\n\n<p>However, I'm getting the following error: 'this' is not defined in this context. Is what I'm trying to do possible?</p>\n"}, {"tags": ["android", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451706911, "post_id": 29598574, "comment_id": 56868531, "body": "Issue K-6727 was marked duplicate of <a href=\"https://youtrack.jetbrains.com/issue/KT-3335\" rel=\"nofollow noreferrer\">youtrack.jetbrains.com/issue/KT-3335</a> which has been marked as fixed.  is this still a problem, or now resolved?"}], "tags": [], "owner": {"reputation": 4427, "user_id": 4706743, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64b05c3b09628ba8955d6d7a188271af?s=128&d=identicon&r=PG&f=1", "display_name": "D3xter", "link": "https://stackoverflow.com/users/4706743/d3xter"}, "is_accepted": false, "score": 1, "last_activity_date": 1428904049, "creation_date": 1428904049, "answer_id": 29598574, "question_id": 29596016, "link": "https://stackoverflow.com/questions/29596016/problems-inheriting-inner-java-class/29598574#29598574", "title": "Problems inheriting inner java class", "body": "<p>See <a href=\"https://youtrack.jetbrains.com/issue/KT-6727\" rel=\"nofollow\">KT-6727</a></p>\n\n<p>You can try the following workaround:</p>\n\n<pre><code>private inner class MyEngine : super.Engine() {\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 387, "user_id": 1113473, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/167bcd3832e2772c2184af0eb9d7ab8a?s=128&d=identicon&r=PG", "display_name": "carlospiles", "link": "https://stackoverflow.com/users/1113473/carlospiles"}, "is_accepted": false, "score": 1, "last_activity_date": 1443086272, "creation_date": 1443086272, "answer_id": 32757677, "question_id": 29596016, "link": "https://stackoverflow.com/questions/29596016/problems-inheriting-inner-java-class/32757677#32757677", "title": "Problems inheriting inner java class", "body": "<p>The best solution I have found is to use an intermediate Java class:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public class Intermediate extends WallpaperService.Engine {\n    public Intermediate(WatchfaceService outer) {\n        outer.super();\n    }\n}\n</code></pre>\n\n<p>Then the inner class in your Kotlin WallpaperService should inherit Intermediate, passing the outer class as parameter.</p>\n\n<pre><code>public class MyWallpaperService : WallpaperService() {\n    override fun onCreateEngine(): Engine = MyEngine()\n\u200b\n    private inner class MyEngine : Intermediate(this) {\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1647, "user_id": 771677, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b57c791f71262690c3fe920e25e463d2?s=128&d=identicon&r=PG", "display_name": "Travis Castillo", "link": "https://stackoverflow.com/users/771677/travis-castillo"}, "is_accepted": false, "score": 0, "last_activity_date": 1605557568, "creation_date": 1605557568, "answer_id": 64865050, "question_id": 29596016, "link": "https://stackoverflow.com/questions/29596016/problems-inheriting-inner-java-class/64865050#64865050", "title": "Problems inheriting inner java class", "body": "<p>For anyone else searching through this issue I'd like to point out that this now works in Kotlin\n( i'm using 1.4.10 I haven't verified what version this was fixed).</p>\n<p>Key to remember is that the Engine has to be marked an <strong>inner class</strong> or Kotlin won't know how to reference the Engine being inherited.</p>\n<pre><code>class SampleService : WallpaperService() {\n\n// region override\noverride fun onCreateEngine(): Engine {\n\n    return IntermediateEngine()\n}\n\n// endregion\n\n// region inner class\n\ninner class IntermediateEngine() : Engine() {\n\n    \n}\n\n// endregion\n</code></pre>\n<p>}</p>\n"}], "owner": {"reputation": 285, "user_id": 3307102, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/28ae672af562b5f2d79d2e28361b4dc8?s=128&d=identicon&r=PG&f=1", "display_name": "user3307102", "link": "https://stackoverflow.com/users/3307102/user3307102"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 440, "favorite_count": 1, "answer_count": 3, "score": 2, "last_activity_date": 1605557568, "creation_date": 1428882610, "question_id": 29596016, "link": "https://stackoverflow.com/questions/29596016/problems-inheriting-inner-java-class", "title": "Problems inheriting inner java class", "body": "<p>I'm creating an android live wallpaper using Kotlin. This requires a class that extends WallpaperService, which contains an inner class that extends WallpaperService.Engine.</p>\n\n<p>So I've written this:</p>\n\n<pre><code>import android.service.wallpaper.WallpaperService\nimport android.service.wallpaper.WallpaperService.Engine\n\npublic class MyWallpaperService : WallpaperService() {\n\n    override fun onCreateEngine(): Engine = MyEngine()\n\n    private inner class MyEngine : Engine() {\n\n    }\n}\n</code></pre>\n\n<p>The problem is that I'm getting the following 2 errors at compile time:</p>\n\n<pre><code>Error:java.lang.RuntimeException: Error generating constructors of class MyEngine with kind IMPLEMENTATION \n\nError:java.lang.UnsupportedOperationException: Don't know how to generate outer expression for lazy class MyWallpaperService\n</code></pre>\n\n<p>I cant figure out why this is happening so any help would be greatly appreciated.</p>\n"}, {"tags": ["kotlin", "reflection", "annotations", "data-class"], "answers": [{"comments": [{"owner": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "edited": false, "score": 0, "creation_date": 1428881459, "post_id": 29595867, "comment_id": 47338585, "body": "Interesting solution!  I personally wouldn&#39;t trade a few lines of boilerplate assignment, e.g. <code>val name: String = name</code>  in @bashor&#39;s example for inheritance from a <code>Base</code> class that serves to make up for a missing language feature."}, {"owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "reply_to_user": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "edited": false, "score": 1, "creation_date": 1428881562, "post_id": 29595867, "comment_id": 47338610, "body": "I agree, my solution is not very elegant. I just hacked it together for the fun of it and decided to share."}], "tags": [], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "is_accepted": false, "score": 3, "last_activity_date": 1428881228, "creation_date": 1428881228, "answer_id": 29595867, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/29595867#29595867", "title": "Property include/exclude on Kotlin data classes", "body": "<p>Here's a somewhat creative approach:</p>\n\n<pre><code>data class IncludedArgs(val args: Array&lt;out Any&gt;)\n\nfun includedArgs(vararg args: Any) = IncludedArgs(args)\n\n\nabstract class Base {\n    abstract val included : IncludedArgs\n\n    override fun equals(other: Any?) = when {\n        this identityEquals other -&gt; true\n        other is Base -&gt; included == other.included\n        else -&gt; false\n    }\n\n    override fun hashCode() = included.hashCode()\n\n    override fun toString() = included.toString()\n}\n\nclass Foo(val a: String, val b : String) : Base() {\n    override val included = includedArgs(a)\n}\n\nfun main(args : Array&lt;String&gt;) {\n    val foo1 = Foo(\"a\", \"b\")\n    val foo2 = Foo(\"a\", \"B\")\n\n    println(foo1 == foo2) //prints \"true\"\n    println(foo1)         //prints \"IncludedArgs(args=[a])\"\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 853, "user_id": 2922675, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/S4JUv.jpg?s=128&g=1", "display_name": "Nils-o-mat", "link": "https://stackoverflow.com/users/2922675/nils-o-mat"}, "edited": false, "score": 0, "creation_date": 1532679685, "post_id": 44414420, "comment_id": 90074381, "body": "I think my solution is also not perfect, but has some benefits. Take a look."}], "tags": [], "owner": {"reputation": 1470, "user_id": 1662412, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a037b4a3538b419a8382a880a184df6d?s=128&d=identicon&r=PG", "display_name": "Peti", "link": "https://stackoverflow.com/users/1662412/peti"}, "is_accepted": false, "score": 5, "last_activity_date": 1496842976, "creation_date": 1496842976, "answer_id": 44414420, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/44414420#44414420", "title": "Property include/exclude on Kotlin data classes", "body": "<p>I also don't know \"the idomatic way\" in Kotlin (1.1) to do this...</p>\n\n<p>I ended up overriding <code>equals</code> and <code>hashCode</code>:</p>\n\n<pre><code>data class Person(val id: String,\n                  val name: String) {\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other?.javaClass != javaClass) return false\n\n        other as Person\n\n        if (id != other.id) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        return id.hashCode()\n    }\n}\n</code></pre>\n\n<p>Isn't there a \"better\" way?</p>\n"}, {"comments": [{"owner": {"reputation": 626, "user_id": 5123022, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153018373549142/picture?type=large", "display_name": "Dmytro Karataiev", "link": "https://stackoverflow.com/users/5123022/dmytro-karataiev"}, "edited": false, "score": 0, "creation_date": 1537812072, "post_id": 46247234, "comment_id": 91911323, "body": "equals should override &quot;Any?&quot;"}, {"owner": {"reputation": 16077, "user_id": 97777, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/fb95aca1c80de718bbfa01447220633b?s=128&d=identicon&r=PG", "display_name": "Duncan McGregor", "link": "https://stackoverflow.com/users/97777/duncan-mcgregor"}, "edited": false, "score": 0, "creation_date": 1537943440, "post_id": 46247234, "comment_id": 91962463, "body": "Do you mean other should be Any? ? If so, maybe, but this way the compiler should use the Any.equals(any) when it knows that the rhs is not a Person. I suppose that there is an edge case where you have lost the type of the rhs..."}, {"owner": {"reputation": 115, "user_id": 9040498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10e017b3aad0d9740581906957ba1538?s=128&d=identicon&r=PG&f=1", "display_name": "Jay N", "link": "https://stackoverflow.com/users/9040498/jay-n"}, "edited": false, "score": 1, "creation_date": 1565300483, "post_id": 46247234, "comment_id": 101321198, "body": "This looks kind of cumbersome. Is this still the best solution up to date?"}, {"owner": {"reputation": 1481, "user_id": 119151, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/82be9b20db8604d271dcb156b0c25485?s=128&d=identicon&r=PG", "display_name": "dstibbe", "link": "https://stackoverflow.com/users/119151/dstibbe"}, "edited": false, "score": 3, "creation_date": 1573683771, "post_id": 46247234, "comment_id": 103966713, "body": "Improvent for the <code>equals</code> fun :  <code>override fun equals(other: Any?):Boolean{        if(other != Person) return false       return EssentialData(this) == EssentialData(other) } </code>"}, {"owner": {"reputation": 145, "user_id": 2536992, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d69b1602e209ca1e0f53bf2b185fa4ff?s=128&d=identicon&r=PG", "display_name": "Kristopher Noronha", "link": "https://stackoverflow.com/users/2536992/kristopher-noronha"}, "reply_to_user": {"reputation": 1481, "user_id": 119151, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/82be9b20db8604d271dcb156b0c25485?s=128&d=identicon&r=PG", "display_name": "dstibbe", "link": "https://stackoverflow.com/users/119151/dstibbe"}, "edited": false, "score": 1, "creation_date": 1584889198, "post_id": 46247234, "comment_id": 107572158, "body": "a more idiomatic way to write @dstibbe&#39;s improvement is: <code>override fun equals(other: Any?) = other is Person &amp;&amp; EssentialData(this) == EssentialData(other)</code>"}, {"owner": {"reputation": 1481, "user_id": 119151, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/82be9b20db8604d271dcb156b0c25485?s=128&d=identicon&r=PG", "display_name": "dstibbe", "link": "https://stackoverflow.com/users/119151/dstibbe"}, "reply_to_user": {"reputation": 145, "user_id": 2536992, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d69b1602e209ca1e0f53bf2b185fa4ff?s=128&d=identicon&r=PG", "display_name": "Kristopher Noronha", "link": "https://stackoverflow.com/users/2536992/kristopher-noronha"}, "edited": false, "score": 1, "creation_date": 1584992920, "post_id": 46247234, "comment_id": 107607626, "body": "Nice improvement @KristopherNoronha."}], "tags": [], "owner": {"reputation": 16077, "user_id": 97777, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/fb95aca1c80de718bbfa01447220633b?s=128&d=identicon&r=PG", "display_name": "Duncan McGregor", "link": "https://stackoverflow.com/users/97777/duncan-mcgregor"}, "is_accepted": true, "score": 18, "last_activity_date": 1505509937, "last_edit_date": 1505509937, "creation_date": 1505508304, "answer_id": 46247234, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/46247234#46247234", "title": "Property include/exclude on Kotlin data classes", "body": "<p>I've used this approach. </p>\n\n<pre><code>data class Person(val id: String, val name: String) {\n   override fun equals(other: Person) = EssentialData(this) == EssentialData(other)\n   override fun hashCode() = EssentialData(this).hashCode()\n   override fun toString() = EssentialData(this).toString().replaceFirst(\"EssentialData\", \"Person\")\n}\n\nprivate data class EssentialData(val id: String) {\n   constructor(person: Person) : this(id = person.id) \n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 853, "user_id": 2922675, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/S4JUv.jpg?s=128&g=1", "display_name": "Nils-o-mat", "link": "https://stackoverflow.com/users/2922675/nils-o-mat"}, "is_accepted": false, "score": 3, "last_activity_date": 1532679458, "creation_date": 1532679458, "answer_id": 51553742, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/51553742#51553742", "title": "Property include/exclude on Kotlin data classes", "body": "<p>This builds on @bashor's approach and uses a private primary and a public secondary constructor. Sadly the property to be ignored for equals cannot be a val, but one can hide the setter, so the result is equivalent from an external perspective.</p>\n\n<pre><code>data class ExampleDataClass private constructor(val important: String) {\n  var notSoImportant: String = \"\"\n    private set\n\n  constructor(important: String, notSoImportant: String) : this(important) {\n    this.notSoImportant = notSoImportant\n  }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 526, "user_id": 1437401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/401f7158207c4c0ffb34510916097f2f?s=128&d=identicon&r=PG&f=1", "display_name": "deepthought-64", "link": "https://stackoverflow.com/users/1437401/deepthought-64"}, "edited": false, "score": 0, "creation_date": 1608219356, "post_id": 56035137, "comment_id": 115521442, "body": "Interesting, thank you. will give that a try!"}], "tags": [], "owner": {"reputation": 4438, "user_id": 5427663, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9f9c9fe9199349793db217d3a9e9596?s=128&d=identicon&r=PG&f=1", "display_name": "TheOperator", "link": "https://stackoverflow.com/users/5427663/theoperator"}, "is_accepted": false, "score": 2, "last_activity_date": 1557299376, "last_edit_date": 1557299376, "creation_date": 1557298670, "answer_id": 56035137, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/56035137#56035137", "title": "Property include/exclude on Kotlin data classes", "body": "<p><strong>Reusable solution:</strong> to have an easy way to select which fields to include in <code>equals()</code> and <code>hashCode()</code>, I wrote a little helper called \"stem\" (essential core data, relevant for equality).</p>\n\n<p>Usage is straightforward, and the resulting code very small:</p>\n\n<pre><code>class Person(val id: String, val name: String) {\n    private val stem = Stem(this, { id })\n\n    override fun equals(other: Any?) = stem.eq(other)\n    override fun hashCode() = stem.hc()\n}\n</code></pre>\n\n<p>It's possible to trade off the backing field stored in the class with extra computation on-the-fly:</p>\n\n<pre><code>    private val stem get() = Stem(this, { id })\n</code></pre>\n\n<p>Since <code>Stem</code> takes any function, you are free to specify how the equality is computed. For more than one field to consider, just add one lambda expression per field (varargs):</p>\n\n<pre><code>    private val stem = Stem(this, { id }, { name })\n</code></pre>\n\n<hr>\n\n<p><strong>Implementation:</strong></p>\n\n<pre><code>class Stem&lt;T : Any&gt;(\n        private val thisObj: T,\n        private vararg val properties: T.() -&gt; Any?\n) {     \n    fun eq(other: Any?): Boolean {\n        if (thisObj === other)\n            return true\n\n        if (thisObj.javaClass != other?.javaClass)\n            return false\n\n        // cast is safe, because this is T and other's class was checked for equality with T\n        @Suppress(\"UNCHECKED_CAST\") \n        other as T\n\n        return properties.all { thisObj.it() == other.it() }\n    }\n\n    fun hc(): Int {\n        // Fast implementation without collection copies, based on java.util.Arrays.hashCode()\n        var result = 1\n\n        for (element in properties) {\n            val value = thisObj.element()\n            result = 31 * result + (value?.hashCode() ?: 0)\n        }\n\n        return result\n    }\n\n    @Deprecated(\"Not accessible; use eq()\", ReplaceWith(\"this.eq(other)\"), DeprecationLevel.ERROR)\n    override fun equals(other: Any?): Boolean = \n        throw UnsupportedOperationException(\"Stem.equals() not supported; call eq() instead\")\n\n    @Deprecated(\"Not accessible; use hc()\", ReplaceWith(\"this.hc(other)\"), DeprecationLevel.ERROR)\n    override fun hashCode(): Int = \n        throw UnsupportedOperationException(\"Stem.hashCode() not supported; call hc() instead\")\n}\n</code></pre>\n\n<p>In case you're wondering about the last two methods, their presence makes the following erroneous code fail at compile time:</p>\n\n<pre><code>override fun equals(other: Any?) = stem.equals(other)\noverride fun hashCode() = stem.hashCode()\n</code></pre>\n\n<p>The exception is merely a fallback if those methods are invoked implicitly or through reflection; can be argued if it's necessary.</p>\n\n<p>Of course, the <code>Stem</code> class could be further extended to include automatic generation of <code>toString()</code> etc. </p>\n"}, {"comments": [{"owner": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "edited": false, "score": 0, "creation_date": 1582553178, "post_id": 60354153, "comment_id": 106806372, "body": "It&#39;s creative, so +1 for that, but this is not a solution I would employ. You have the extra <code>.property</code> on any access to a field whose lack of participation in the equals/hashCode of its containing class is frankly solely an implementation detail of that class. You could of course override <code>get()&#47;set()</code> on that property to do this automatically, but ooof. Heavy for such a requirement."}, {"owner": {"reputation": 2638, "user_id": 2700239, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d88024aacd24a897083419abaedde261?s=128&d=identicon&r=PG", "display_name": "Fartab", "link": "https://stackoverflow.com/users/2700239/fartab"}, "reply_to_user": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "edited": false, "score": 0, "creation_date": 1582653422, "post_id": 60354153, "comment_id": 106849004, "body": "Yes, you are right. I just want to share my attempt."}], "tags": [], "owner": {"reputation": 2638, "user_id": 2700239, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d88024aacd24a897083419abaedde261?s=128&d=identicon&r=PG", "display_name": "Fartab", "link": "https://stackoverflow.com/users/2700239/fartab"}, "is_accepted": false, "score": 5, "last_activity_date": 1582388449, "creation_date": 1582388449, "answer_id": 60354153, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/60354153#60354153", "title": "Property include/exclude on Kotlin data classes", "body": "<p>This approach may be suitable for property exclusion:</p>\n\n<pre><code>class SkipProperty&lt;T&gt;(val property: T) {\n  override fun equals(other: Any?) = true\n  override fun hashCode() = 0\n}\n</code></pre>\n\n<p><code>SkipProperty.equals</code> simply returns true, which causes the embeded <code>property</code> to be skipped in <code>equals</code> of parent object.</p>\n\n<pre><code>data class Person(\n    val id: String, \n    val name: SkipProperty&lt;String&gt;\n)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 17453, "user_id": 5279996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cf8327567575d69a46bd8afe8db4466e?s=128&d=identicon&r=PG", "display_name": "Braian Coronel", "link": "https://stackoverflow.com/users/5279996/braian-coronel"}, "is_accepted": false, "score": 0, "last_activity_date": 1609269807, "last_edit_date": 1609269807, "creation_date": 1595819737, "answer_id": 63108202, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes/63108202#63108202", "title": "Property include/exclude on Kotlin data classes", "body": "<p>You can create an <a href=\"https://kotlinlang.org/docs/tutorials/kotlin-for-py/annotations.html\" rel=\"nofollow noreferrer\">annotation</a> that represents the exclusion of the property as <code>@ExcludeToString</code> or with <code>@ToString(Type.EXCLUDE)</code> parameters by defining enum.</p>\n<p>And then using <a href=\"https://stackoverflow.com/a/44653046/5279996\">reflection</a> format the value of the <code>getToString()</code>.</p>\n<pre><code>@Target(AnnotationTarget.FIELD)\n@Retention(AnnotationRetention.RUNTIME)\nannotation class ExcludeToString\n\ndata class Test(\n        var a: String = &quot;Test A&quot;,\n        @ExcludeToString var b: String = &quot;Test B&quot;\n) {\n    override fun toString(): String {\n        return ExcludeToStringUtils.getToString(this)\n    }\n}\n\nobject ExcludeToStringUtils {\n\n    fun getToString(obj: Any): String {\n        val toString = LinkedList&lt;String&gt;()\n        getFieldsNotExludeToString(obj).forEach { prop -&gt;\n            prop.isAccessible = true\n            toString += &quot;${prop.name}=&quot; + prop.get(obj)?.toString()?.trim()\n        }\n        return &quot;${obj.javaClass.simpleName}=[${toString.joinToString(&quot;, &quot;)}]&quot;\n    }\n\n    private fun getFieldsNotExludeToString(obj: Any): List&lt;Field&gt; {\n        val declaredFields = obj::class.java.declaredFields\n        return declaredFields.filterNot { field -&gt;\n            isFieldWithExludeToString(field)\n        }\n    }\n\n    private fun isFieldWithExludeToString(field: Field): Boolean {\n        field.annotations.forEach {\n            if (it.annotationClass == ExcludeToString::class) {\n                return true\n            }\n        }\n        return false\n    }\n\n}\n</code></pre>\n<p>GL</p>\n<p><a href=\"https://gist.github.com/Coronel-B/88ac762bee486eb83ded694a055da6d7\" rel=\"nofollow noreferrer\">Gist</a></p>\n"}], "owner": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13457, "favorite_count": 1, "accepted_answer_id": 46247234, "answer_count": 7, "score": 37, "last_activity_date": 1609269807, "creation_date": 1428877128, "last_edit_date": 1595819770, "question_id": 29595301, "link": "https://stackoverflow.com/questions/29595301/property-include-exclude-on-kotlin-data-classes", "title": "Property include/exclude on Kotlin data classes", "body": "<p>Suppose I only want one or two fields to be included in the generated equals and hashCode implementations (or perhaps exclude one or more fields).  For a simple class, e.g.:</p>\n<pre><code>data class Person(val id: String, val name: String)\n</code></pre>\n<p>Groovy has this:</p>\n<pre><code>@EqualsAndHashCode(includes = 'id')\n</code></pre>\n<p>Lombok has this:</p>\n<pre><code>@EqualsAndHashCode(of = &quot;id&quot;)\n</code></pre>\n<p>What is the idiomatic way of doing this in Kotlin?</p>\n<h3>My approach so far</h3>\n<pre><code>data class Person(val id: String) {\n   // at least we can guarantee it is present at access time\n   var name: String by Delegates.notNull()\n\n   constructor(id: String, name: String): this(id) {\n      this.name = name\n   }\n}\n</code></pre>\n<p>Just feels wrong though... I don't really want <code>name</code> to be mutable, and the extra constructor definition is ugly.</p>\n"}, {"tags": ["android", "system.reactive", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 12683, "user_id": 273119, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/6b7f0d7d95b3a1f9547274129582b434?s=128&d=identicon&r=PG", "display_name": "Daniel Gomez Rico", "link": "https://stackoverflow.com/users/273119/daniel-gomez-rico"}, "edited": false, "score": 0, "creation_date": 1429222786, "post_id": 29603420, "comment_id": 47510991, "body": "It&#39;s a good idea to use <code>Kotlin</code> just for Extensions over an existing <code>Android Java project</code>?"}, {"owner": {"reputation": 175, "user_id": 3807749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/M8eYM.jpg?s=128&g=1", "display_name": "Yoavst", "link": "https://stackoverflow.com/users/3807749/yoavst"}, "edited": false, "score": 0, "creation_date": 1429268238, "post_id": 29603420, "comment_id": 47530553, "body": "Yes. I suggest you to use my own <a href=\"https://github.com/yoavst/androidKotlin\" rel=\"nofollow noreferrer\">library</a> and <a href=\"http://kotlinlang.org/docs/tutorials/android-plugin.html\" rel=\"nofollow noreferrer\">kotlin&#39;s one</a>"}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": false, "score": 4, "last_activity_date": 1428921902, "creation_date": 1428921902, "answer_id": 29603420, "question_id": 29595223, "link": "https://stackoverflow.com/questions/29595223/kotlin-extension-overhead-for-android/29603420#29603420", "title": "Kotlin extension overhead for Android", "body": "<p>Extension functions in Kotlin are compiled to normal Java methods. For example, when you define a function in your package it turns into a static method in a Java class. There's no overhead compared to simply calling a static utility</p>\n"}, {"tags": [], "owner": {"reputation": 665, "user_id": 7900721, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-INZeIznIQTg/AAAAAAAAAAI/AAAAAAAAAAw/E9VciNY8wo4/photo.jpg?sz=128", "display_name": "Andrew Steinmetz", "link": "https://stackoverflow.com/users/7900721/andrew-steinmetz"}, "is_accepted": true, "score": 1, "last_activity_date": 1550650927, "creation_date": 1550650927, "answer_id": 54781751, "question_id": 29595223, "link": "https://stackoverflow.com/questions/29595223/kotlin-extension-overhead-for-android/54781751#54781751", "title": "Kotlin extension overhead for Android", "body": "<p>To expand a little bit more on Andrey Breslav's answer a bit, Kotlin extension functions do compile down to static java methods, so most general purpose extension functions carry no overhead. But there is one edge case you need to look out for that Jake Wharton calls out in the first few min of <a href=\"https://www.youtube.com/watch?v=st1XVfkDWqk\" rel=\"nofollow noreferrer\">this talk at Google IO</a>. </p>\n\n<p>That is when you pass in higher order functions (lambdas), as a parameter to the extension function like so:</p>\n\n<pre><code>fun View.doSomething(block: () -&gt; Unit) {\n    //do something \n}\n</code></pre>\n\n<p>This code would take a performance hit because lambda's under the hood have to create an anonymous class under the hood which can eat up methods and cause class loading. This is a very simple fix by adding the <code>inline</code> keyword to the function which will essentially <em>inline</em> your code into all of this call sites functions so you will not take a performance hit each time the extension function is called.</p>\n\n<pre><code>inline fun View.doSomething(block: () -&gt; Unit) {\n    //do something \n}\n</code></pre>\n"}], "owner": {"reputation": 12683, "user_id": 273119, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/6b7f0d7d95b3a1f9547274129582b434?s=128&d=identicon&r=PG", "display_name": "Daniel Gomez Rico", "link": "https://stackoverflow.com/users/273119/daniel-gomez-rico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 530, "favorite_count": 1, "accepted_answer_id": 54781751, "answer_count": 2, "score": 1, "last_activity_date": 1550650927, "creation_date": 1428876609, "question_id": 29595223, "link": "https://stackoverflow.com/questions/29595223/kotlin-extension-overhead-for-android", "title": "Kotlin extension overhead for Android", "body": "<p>It\u00b4s a good idea to use kotlin extensions all over the code?</p>\n\n<ol>\n<li><p>I miss a lot the extensions from iOS, but this is a good way to use those kind of things in android? \nRefering to <a href=\"http://antonioleiva.com/kotlin-android-extension-functions/\" rel=\"nofollow\">http://antonioleiva.com/kotlin-android-extension-functions/</a></p></li>\n<li><p>Is there a better solution for this?</p></li>\n</ol>\n"}, {"tags": ["kotlin"], "comments": [{"owner": {"reputation": 36698, "user_id": 145989, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d0edf9d0f312ec47d27046845580ba4f?s=128&d=identicon&r=PG", "display_name": "Ondra \u017di\u017eka", "link": "https://stackoverflow.com/users/145989/ondra-%c5%bdi%c5%beka"}, "edited": false, "score": 0, "creation_date": 1608166215, "post_id": 29565043, "comment_id": 115502991, "body": "I am trying to figure out the same, but for both base calss and a subclass: <a href=\"https://stackoverflow.com/questions/65333206/kotlin-how-to-return-self-type-in-a-subclass-without-an-extension-function\">here</a>"}], "answers": [{"comments": [{"owner": {"reputation": 406, "user_id": 1806772, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5f068e5d7dc8aec99096f191bda2b681?s=128&d=identicon&r=PG", "display_name": "joe1806772", "link": "https://stackoverflow.com/users/1806772/joe1806772"}, "edited": false, "score": 4, "creation_date": 1533567860, "post_id": 29566159, "comment_id": 90382377, "body": "Trait was deprecated in Kotlin M12, we shall use the keyword interface instead: <a href=\"https://blog.jetbrains.com/kotlin/2015/05/kotlin-m12-is-out/\" rel=\"nofollow noreferrer\">blog.jetbrains.com/kotlin/2015/05/kotlin-m12-is-out</a>"}, {"owner": {"reputation": 1561, "user_id": 1772342, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/pvNgt.jpg?s=128&g=1", "display_name": "breandan", "link": "https://stackoverflow.com/users/1772342/breandan"}, "edited": false, "score": 0, "creation_date": 1596595963, "post_id": 29566159, "comment_id": 111859079, "body": "Is there any way for the compiler to infer the correct behavior? Or, if it is absolutely necessary to cast, suppress the warning from the Kotlin IDE plugin: <code>Unchecked cast: Foo&lt;Me&gt; to Me</code>?"}, {"owner": {"reputation": 862, "user_id": 4036390, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ubSLc.jpg?s=128&g=1", "display_name": "Oz Shabat", "link": "https://stackoverflow.com/users/4036390/oz-shabat"}, "edited": false, "score": 0, "creation_date": 1610621463, "post_id": 29566159, "comment_id": 116192855, "body": "Bravo! Smart answer. I wonder if in 2021 there is a better one? Anyway, great answer"}, {"owner": {"reputation": 142, "user_id": 6325886, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/091f1feb1bb4ea1f30da7eba2cba78bc?s=128&d=identicon&r=PG&f=1", "display_name": "Warpspeed SCP", "link": "https://stackoverflow.com/users/6325886/warpspeed-scp"}, "reply_to_user": {"reputation": 862, "user_id": 4036390, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ubSLc.jpg?s=128&g=1", "display_name": "Oz Shabat", "link": "https://stackoverflow.com/users/4036390/oz-shabat"}, "edited": false, "score": 0, "creation_date": 1613474117, "post_id": 29566159, "comment_id": 117079980, "body": "it would be nice if Kotlin supported referencing the implementing type using something like <code>Self</code> a la Rust, but I suppose thats a pipe dream considering this is a JVM language we&#39;re talking about... @OzShabat, there really isn&#39;t any other way than this generic soup. Frankly, such code is no different from doing wacky stuff like implementing object orientation via vtables directly in C."}, {"owner": {"reputation": 142, "user_id": 6325886, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/091f1feb1bb4ea1f30da7eba2cba78bc?s=128&d=identicon&r=PG&f=1", "display_name": "Warpspeed SCP", "link": "https://stackoverflow.com/users/6325886/warpspeed-scp"}, "reply_to_user": {"reputation": 1561, "user_id": 1772342, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/pvNgt.jpg?s=128&g=1", "display_name": "breandan", "link": "https://stackoverflow.com/users/1772342/breandan"}, "edited": false, "score": 0, "creation_date": 1613474539, "post_id": 29566159, "comment_id": 117080153, "body": "@breandan nope, either kotlin isn&#39;t smart enough, or there are JVM considerations which prevent it from trying. if its the first case, things can get better. If its the latter, lament the fact that java continues to shoot itself in its foot since its inception."}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 33, "last_activity_date": 1428682695, "creation_date": 1428682695, "answer_id": 29566159, "question_id": 29565043, "link": "https://stackoverflow.com/questions/29565043/how-to-specify-own-type-as-return-type-in-kotlin/29566159#29566159", "title": "How to specify &quot;own type&quot; as return type in Kotlin", "body": "<p>There's no language feature supporting this, but you can always use recursive generics (which is the pattern many libraries use):</p>\n\n<pre><code>// Define a recursive generic parameter Me\ntrait Foo&lt;Me: Foo&lt;Me&gt;&gt; {\n    fun bar(): Me {\n        // Here we have to cast, because the compiler does not know that Me is the same as this class\n        return this as Me\n    }\n}\n\n// In subclasses, pass itself to the superclass as an argument:\nclass FooClassA : Foo&lt;FooClassA&gt; {\n    fun a() {}\n}\n\nclass FooClassB : Foo&lt;FooClassB&gt; {\n    fun b() {}\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4123, "user_id": 607050, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4d34c8a9b48010c6ac9a4db08cd9d103?s=128&d=identicon&r=PG", "display_name": "BobV", "link": "https://stackoverflow.com/users/607050/bobv"}, "is_accepted": false, "score": 7, "last_activity_date": 1442422066, "creation_date": 1442422066, "answer_id": 32614322, "question_id": 29565043, "link": "https://stackoverflow.com/questions/29565043/how-to-specify-own-type-as-return-type-in-kotlin/32614322#32614322", "title": "How to specify &quot;own type&quot; as return type in Kotlin", "body": "<p>You can use an <a href=\"http://kotlinlang.org/docs/reference/extensions.html\" rel=\"noreferrer\">extension method</a> to achieve the \"returns same type\" effect.  Here's a quick example that shows a base type with multiple type parameters and an extension method that takes a function which operates on an instance of said type:</p>\n\n<pre><code>public abstract class BuilderBase&lt;A, B&gt; {}\n\npublic fun &lt;B : BuilderBase&lt;*, *&gt;&gt; B.doIt(): B {\n  // Do something\n  return this\n}\n\npublic class MyBuilder : BuilderBase&lt;Int,String&gt;() {}\n\npublic fun demo() {\n  val b : MyBuilder = MyBuilder().doIt()\n}\n</code></pre>\n\n<p>Since extension methods are resolved statically (at least as of M12), you may need to have the extension delegate the actual implementation to its <code>this</code> should you need type-specific behaviors.</p>\n"}, {"tags": [], "owner": {"reputation": 825, "user_id": 2996119, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7862d510be3065497d35269b34c5c514?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick", "link": "https://stackoverflow.com/users/2996119/patrick"}, "is_accepted": false, "score": 15, "last_activity_date": 1499027854, "creation_date": 1499027854, "answer_id": 44875002, "question_id": 29565043, "link": "https://stackoverflow.com/questions/29565043/how-to-specify-own-type-as-return-type-in-kotlin/44875002#44875002", "title": "How to specify &quot;own type&quot; as return type in Kotlin", "body": "<p>You can return something's own type with <a href=\"https://kotlinlang.org/docs/reference/extensions.html\" rel=\"noreferrer\">extension functions</a>.</p>\n\n<pre><code>interface ExampleInterface\n// Everything that implements ExampleInterface will have this method.\nfun &lt;T : ExampleInterface&gt; T.doSomething(): T {\n    return this\n}\n\nclass ClassA : ExampleInterface {\n    fun classASpecificMethod() {}\n}\n\nclass ClassB : ExampleInterface {\n    fun classBSpecificMethod() {}\n}\n\nfun example() {\n    // doSomething() returns ClassA!\n    ClassA().doSomething().classASpecificMethod()\n    // doSomething() returns ClassB!\n    ClassB().doSomething().classBSpecificMethod()\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 15831, "user_id": 5925259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/89crf.jpg?s=128&g=1", "display_name": "Yogesh Umesh Vaity", "link": "https://stackoverflow.com/users/5925259/yogesh-umesh-vaity"}, "is_accepted": false, "score": 1, "last_activity_date": 1609605596, "creation_date": 1609605596, "answer_id": 65541540, "question_id": 29565043, "link": "https://stackoverflow.com/questions/29565043/how-to-specify-own-type-as-return-type-in-kotlin/65541540#65541540", "title": "How to specify &quot;own type&quot; as return type in Kotlin", "body": "<h2>Recursive Type Bound</h2>\n<p>The pattern you have shown in the question is known as <em>recursive type bound</em> in the JVM world. A recursive type is one that includes a function that uses that type itself as a type for its parameter or its return value. In your example, you are using the same type for the return value by saying <code>return this</code>.</p>\n<hr />\n<h2>Example</h2>\n<p>Let's understand this with a simple and real example. We'll replace <code>trait</code> from your example with <code>interface</code> because <code>trait</code> is now deprecated in Kotlin. In this example, the interface <code>VitaminSource</code> returns different implementations of the sources of different vitamins.</p>\n<p>In the following <code>interface</code>, you can see that its type parameter has itself as an upper bound. This is why it's known as recursive type bound:</p>\n<p><strong>VitaminSource.kt</strong></p>\n<pre><code>interface VitaminSource&lt;T: VitaminSource&lt;T&gt;&gt; {\n    fun getSource(): T {\n        @Suppress(&quot;UNCHECKED_CAST&quot;)\n        return this as T\n    }\n}\n</code></pre>\n<p>We suppress the <code>UNCHECKED_CAST</code> warning because the compiler can't possibly know whether we passed the same class name as a type argument.</p>\n<p>Then we extend the <code>interface</code> with concrete implementations:</p>\n<p><strong>Carrot.kt</strong></p>\n<pre><code>class Carrot : VitaminSource&lt;Carrot&gt; {\n    fun getVitaminA() = println(&quot;Vitamin A&quot;)\n}\n</code></pre>\n<p><strong>Banana.kt</strong></p>\n<pre><code>class Banana : VitaminSource&lt;Banana&gt; {\n    fun getVitaminB() = println(&quot;Vitamin B&quot;)\n}\n</code></pre>\n<p>While extending the classes, you must make sure to pass the same class to the interface otherwise you'll get <code>ClassCastException</code> at runtime:</p>\n<pre><code>class Banana : VitaminSource&lt;Banana&gt;    // OK\nclass Banana : VitaminSource&lt;Carrot&gt;    // No compiler error but exception at runtime\n</code></pre>\n<p><strong>Test.kt</strong></p>\n<pre><code>fun main() {\n    val carrot = Carrot().getSource()\n    carrot.getVitaminA()\n\n    val banana = Banana().getSource()\n    banana.getVitaminB()\n}\n</code></pre>\n<hr />\n<p>That's it! Hope that helps.</p>\n"}], "owner": {"reputation": 8046, "user_id": 188461, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/3dd915cd2083799a53e765dcf86594a8?s=128&d=identicon&r=PG", "display_name": "Alfonso", "link": "https://stackoverflow.com/users/188461/alfonso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5661, "favorite_count": 7, "accepted_answer_id": 29566159, "answer_count": 4, "score": 23, "last_activity_date": 1609605596, "creation_date": 1428679079, "question_id": 29565043, "link": "https://stackoverflow.com/questions/29565043/how-to-specify-own-type-as-return-type-in-kotlin", "title": "How to specify &quot;own type&quot; as return type in Kotlin", "body": "<p>Is there a way to specify the return type of a function to be the type of the called object?</p>\n\n<p>e.g.</p>\n\n<pre><code>trait Foo {\n    fun bar(): &lt;??&gt; /* what to put here? */ {\n        return this\n    }\n}\n\nclass FooClassA : Foo {\n    fun a() {}\n}\n\nclass FooClassB : Foo {\n    fun b() {}\n}\n\n// this is the desired effect:\nval a = FooClassA().bar() // should be of type FooClassA\na.a()                     // so this would work\n\nval b = FooClassB().bar() // should be of type FooClassB\nb.b()                     // so this would work\n</code></pre>\n\n<p>In effect, this would be roughly equivalent to <code>instancetype</code> in Objective-C or <code>Self</code> in Swift.</p>\n"}, {"tags": ["java", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "edited": false, "score": 0, "creation_date": 1428673170, "post_id": 29561745, "comment_id": 47275471, "body": "Java seems to treat arrays in annotations as varargs so that you can omit the curly braces for single values. Kotlin does not. As it seems, some recent progress has been made in that regard, though: <a href=\"https://youtrack.jetbrains.com/issue/KT-2576#tab=History\" rel=\"nofollow noreferrer\">youtrack.jetbrains.com/issue/KT-2576#tab=History</a>"}], "tags": [], "owner": {"reputation": 7500, "user_id": 159679, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/450f7e984216da4c72cd521fcbaf8316?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/159679/alex"}, "is_accepted": false, "score": 1, "last_activity_date": 1428669743, "creation_date": 1428669743, "answer_id": 29561745, "question_id": 29561395, "link": "https://stackoverflow.com/questions/29561395/java-interoperability-how-to-declare-a-compile-time-array-constant-in-kotlin/29561745#29561745", "title": "Java interoperability: how to declare a compile-time array constant in Kotlin?", "body": "<p>Sometimes the answer is very simple, once one discovers it accidently</p>\n\n<pre><code>array(\"-groups\")\n</code></pre>\n\n<p>Although the Kotlin converter gave me this code</p>\n\n<pre><code>@Parameter(names = \"-groups\", description = \"Comma-separated list of group names to be run\")\npublic String groups;\n</code></pre>\n\n<p>as I\u2019ve mentioned above.</p>\n"}, {"tags": [], "owner": {"reputation": 15009, "user_id": 1313268, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/65NwV.jpg?s=128&g=1", "display_name": "CorayThan", "link": "https://stackoverflow.com/users/1313268/coraythan"}, "is_accepted": false, "score": 6, "last_activity_date": 1507834241, "last_edit_date": 1507834241, "creation_date": 1458890368, "answer_id": 36215696, "question_id": 29561395, "link": "https://stackoverflow.com/questions/29561395/java-interoperability-how-to-declare-a-compile-time-array-constant-in-kotlin/36215696#36215696", "title": "Java interoperability: how to declare a compile-time array constant in Kotlin?", "body": "<p>You declare a constant in Kotlin like so:</p>\n\n<pre><code>const val LG_PACKAGE = \"com.myapp\"\n</code></pre>\n\n<p>However, the <a href=\"https://kotlinlang.org/docs/reference/properties.html#compile-time-constants\" rel=\"nofollow noreferrer\">kotlin documentation for compile-time constants</a> says that they can only be of type String or a primitive type. So the closest you can get if you want to use constants is this:</p>\n\n<pre><code>const val LG_PACKAGE = \"com.myapp\"\n\n@EnableJpaRepositories(basePackages = arrayOf(LG_PACKAGE))\n@EntityScan(basePackages = arrayOf(LG_PACKAGE))\nopen class LgApp {\n</code></pre>\n"}], "owner": {"reputation": 7500, "user_id": 159679, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/450f7e984216da4c72cd521fcbaf8316?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/159679/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6815, "favorite_count": 0, "answer_count": 2, "score": 11, "last_activity_date": 1507834241, "creation_date": 1428668686, "question_id": 29561395, "link": "https://stackoverflow.com/questions/29561395/java-interoperability-how-to-declare-a-compile-time-array-constant-in-kotlin", "title": "Java interoperability: how to declare a compile-time array constant in Kotlin?", "body": "<p>I\u2019ve got this <a href=\"https://github.com/cbeust/jcommander/blob/master/src/main/java/com/beust/jcommander/Parameter.java\" rel=\"noreferrer\">Java annotation declaration</a> and want to use it in Kotlin</p>\n\n<pre><code>class CurlCommand {\n    Parameter(names = \"-groups\", description = \"Comma-separated list of group names to be run\")\n    var groups: Array&lt;String&gt;? = null\n}\n</code></pre>\n\n<p>The compiler reports <em>TYPE_MISMATCH</em>\n   Required: kotlin.Array&lt;kotlin.String&gt;\n   Found: kotlin.String</p>\n\n<p>I\u2019ve tried </p>\n\n<pre><code>Parameter(names = Array&lt;String&gt;(1, {i-&gt; \"-groups\"}), description = \"Comma-separated list of group names to be run\")\nvar groups: Array&lt;String&gt;? = null\n</code></pre>\n\n<p>and got <em>\u201cError:(20, 23) Kotlin: An annotation parameter must be a compile-time constant\u201d</em></p>\n\n<p>How can I satisfy the Kotlin compiler?</p>\n\n<p>Java simply accepts </p>\n\n<pre><code>@Parameter(names = \"-groups\", description = \"Comma-separated list of group names to be run\")\npublic String groups;\n</code></pre>\n"}]