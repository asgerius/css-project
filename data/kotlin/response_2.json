[{"tags": ["kotlin"], "answers": [{"comments": [{"owner": {"reputation": 10942, "user_id": 18575, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/318654a786700455b96049d8ac9beb11?s=128&d=identicon&r=PG", "display_name": "Ilya Ryzhenkov", "link": "https://stackoverflow.com/users/18575/ilya-ryzhenkov"}, "edited": false, "score": 0, "creation_date": 1421837676, "post_id": 28065384, "comment_id": 44510877, "body": "Andrey, but Kotlin still cannot select proper overload based on return value only. At least not without specifying types explicitly in function literal. Or can it?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 10942, "user_id": 18575, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/318654a786700455b96049d8ac9beb11?s=128&d=identicon&r=PG", "display_name": "Ilya Ryzhenkov", "link": "https://stackoverflow.com/users/18575/ilya-ryzhenkov"}, "edited": false, "score": 0, "creation_date": 1421854000, "post_id": 28065384, "comment_id": 44520875, "body": "@ilya-ryzhenkov, no it can&#39;t if you use lambdas,  but if you pass already typed values, it can"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 1, "creation_date": 1451558133, "post_id": 28065384, "comment_id": 56831714, "body": "<code>platformName</code> was renamed to <code>JvmName</code>in later Kotlin"}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 1, "last_activity_date": 1421837593, "creation_date": 1421837593, "answer_id": 28065384, "question_id": 28057522, "link": "https://stackoverflow.com/questions/28057522/overloaded-methods-receiving-higher-order-functions-in-kotlin/28065384#28065384", "title": "Overloaded methods receiving higher order functions in Kotlin", "body": "<p>You can work around signature clashes in Kotlin using the <code>[platformName]</code> annotation:</p>\n\n<pre><code>import kotlin.platform.*\n\nclass A\nclass B\n\n[platformName(\"foo1\")]\nfun foo(a: () -&gt; A) { }\nfun foo(b: () -&gt; B) { }\n</code></pre>\n\n<p>See the docs <a href=\"http://kotlinlang.org/docs/reference/java-interop.html#handling-signature-clashes-with-platformname\" rel=\"nofollow\">here</a></p>\n"}], "owner": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 520, "favorite_count": 0, "accepted_answer_id": 28065384, "answer_count": 1, "score": 1, "last_activity_date": 1421837708, "creation_date": 1421799150, "last_edit_date": 1421837708, "question_id": 28057522, "link": "https://stackoverflow.com/questions/28057522/overloaded-methods-receiving-higher-order-functions-in-kotlin", "title": "Overloaded methods receiving higher order functions in Kotlin", "body": "<p>Is it possible to have overloaded methods, each accepting a function and nothing else, eg</p>\n\n<pre><code>fun foo(a: () -&gt; A) { }\nfun foo(b: () -&gt; B) { }\n</code></pre>\n\n<p>In Scala this is not possible, because the functions desugar to instances of <code>Function0</code>, and due to erasure these methods cannot be disambiguated. Is this the same case in Kotlin, and if so is there a workaround?</p>\n"}, {"tags": ["kotlin"], "comments": [{"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 1, "creation_date": 1421811204, "post_id": 28057493, "comment_id": 44499761, "body": "There&#39;s a <a href=\"https://youtrack.jetbrains.com/issue/KT-6249\" rel=\"nofollow noreferrer\">bug</a> in the current compiler that prevents you from importing anything from objects. It should allow importing nested classes and object, but should not allow importing member functions"}, {"owner": {"reputation": 1531, "user_id": 1516973, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/SaOq4.jpg?s=128&g=1", "display_name": "rolgalan", "link": "https://stackoverflow.com/users/1516973/rolgalan"}, "edited": false, "score": 0, "creation_date": 1450437468, "post_id": 28057493, "comment_id": 56450281, "body": "This bug has been fixed in October. I&#39;ve just tried and it works. So the question should be closed now."}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451561595, "post_id": 28057493, "comment_id": 56833202, "body": "It does work, and all forms of the imports are answered below."}], "answers": [{"tags": [], "owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "is_accepted": true, "score": 3, "last_activity_date": 1451561570, "creation_date": 1451561570, "answer_id": 34545870, "question_id": 28057493, "link": "https://stackoverflow.com/questions/28057493/import-nested-objects-object-functions-in-kotlin/34545870#34545870", "title": "Import nested objects / object functions in Kotlin", "body": "<p>For this definition:</p>\n\n\n\n<pre><code>package a.b.c\n\nobject Foo {\n    object Moo {\n        fun boo() = 4\n    }\n}\n</code></pre>\n\n<p>You would import and use this as:</p>\n\n<pre><code>import a.b.c.Foo\n\nval xyz = Foo.Moo.boo()\n</code></pre>\n\n<p>or as:</p>\n\n<pre><code>import a.b.c.Foo.Moo\n\nval xyz = Moo.boo()\n</code></pre>\n\n<p>or finally:</p>\n\n<pre><code>import a.b.c.Foo.Moo.boo\n\nval xyz = boo()\n</code></pre>\n\n<p>The last being allowed because they are all object expressions down to the final class holding the method.</p>\n"}], "owner": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 34545870, "answer_count": 1, "score": 1, "last_activity_date": 1451561570, "creation_date": 1421798945, "question_id": 28057493, "link": "https://stackoverflow.com/questions/28057493/import-nested-objects-object-functions-in-kotlin", "title": "Import nested objects / object functions in Kotlin", "body": "<p>Let's say I have,</p>\n\n<pre><code>object Foo {\n  object Moo {\n    fun boo = 4\n  }\n}\n</code></pre>\n\n<p>And I want to use Moo by importing Foo, in Scala I would do:</p>\n\n<pre><code>import Foo._\nmoo.boo\n</code></pre>\n\n<p>How can I do this in Kotlin?</p>\n"}, {"tags": ["lambda", "kotlin"], "comments": [{"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 11, "creation_date": 1421667148, "post_id": 28022388, "comment_id": 44432832, "body": "Capturing references are not supported yet, but will be supported in the future"}, {"owner": {"reputation": 2964, "user_id": 2246380, "user_type": "registered", "accept_rate": 61, "profile_image": "https://i.stack.imgur.com/piBvo.png?s=128&g=1", "display_name": "Ram", "link": "https://stackoverflow.com/users/2246380/ram"}, "edited": false, "score": 0, "creation_date": 1424994053, "post_id": 28022388, "comment_id": 45791348, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/16120697/kotlin-how-to-pass-a-function-as-parameter-to-another\">Kotlin: how to pass a function as parameter to another?</a>"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "reply_to_user": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 1, "creation_date": 1451561882, "post_id": 28022388, "comment_id": 56833323, "body": "Your option using a lambda is the current best method as-of 1.0, although it will change in the future to be supported as @AndreyBreslav mentions"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 1, "creation_date": 1451561920, "post_id": 28022388, "comment_id": 56833343, "body": "Watch this issue in YouTrack for updates:  <a href=\"https://youtrack.jetbrains.com/issue/KT-6947\" rel=\"nofollow noreferrer\">youtrack.jetbrains.com/issue/KT-6947</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4717, "user_id": 1990785, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/30ed15227ce48259bd51b3b1e515e81c?s=128&d=identicon&r=PG&f=1", "display_name": "Pragmatic geek", "link": "https://stackoverflow.com/users/1990785/pragmatic-geek"}, "edited": false, "score": 1, "creation_date": 1500661597, "post_id": 33805243, "comment_id": 77454869, "body": "Thanks for the proposal link. For a Companion object&#39;s function, only this syntax seems to work [with Kotlin 1.3]: <code>(ClassA)::function</code> or <code>ClassA.Companion::function</code>. The first one can only be used in Kotlin, so for consistency between Java and Kotlin code, better to use the second syntax if you need to reference it in Java as well."}], "tags": [], "owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "is_accepted": true, "score": 23, "last_activity_date": 1488233148, "last_edit_date": 1495539977, "creation_date": 1447939585, "answer_id": 33805243, "question_id": 28022388, "link": "https://stackoverflow.com/questions/28022388/reference-to-method-of-a-particular-instance-in-kotlin/33805243#33805243", "title": "Reference to method of a particular instance in Kotlin", "body": "<p>Since Kotlin 1.1, you can use <a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/bound-callable-references.md\" rel=\"noreferrer\">bound callable references</a> to do that:</p>\n\n<pre><code>val f = a::getItem\n</code></pre>\n\n<p></p>\n\n<pre><code>list.forEach(myObject::myMethod)\n</code></pre>\n\n<p>Earlier Kotlin versions don't have this feature and require you to make a lambda every time except for <a href=\"https://stackoverflow.com/questions/42496032/kotlin-function-reference/42496375#42496375\">these simple cases</a>.</p>\n"}], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7191, "favorite_count": 9, "accepted_answer_id": 33805243, "answer_count": 1, "score": 45, "last_activity_date": 1488233148, "creation_date": 1421662961, "question_id": 28022388, "link": "https://stackoverflow.com/questions/28022388/reference-to-method-of-a-particular-instance-in-kotlin", "title": "Reference to method of a particular instance in Kotlin", "body": "<p>In Java 8 we can have a reference to a method of a Class' instance. Here's an example</p>\n\n<pre><code>Function1&lt;Integer, Object&gt; ref = a::getItem;\n</code></pre>\n\n<p>a is an instance of the class <code>Adapter</code> that has the method <code>Object getItem(int i)</code>.</p>\n\n<p>Can we do the same in Kotlin? I tried the same syntax without success. So far I was only able to create an extension method reference like so:</p>\n\n<pre><code>val ref: Adapter.(Int) -&gt; Any = Adapter::getItem\n</code></pre>\n\n<p>But here I still need an instance of an <code>Adapter</code> to invoke it. The other alterantive I see is defining a lambda like this:</p>\n\n<pre><code>val ref: (Int) -&gt; Any = { a.getItem(it) }\n</code></pre>\n"}, {"tags": ["android", "gradle", "kotlin"], "comments": [{"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451562033, "post_id": 27987810, "comment_id": 56833388, "body": "In Beta 4 announcement it says &quot;Soon: same incremental compilation support is coming to Gradle! Stay tuned.&quot; so it is on the near horizon.  That announcement: <a href=\"http://blog.jetbrains.com/kotlin/2015/12/kotlin-1-0-beta-4-is-out/\" rel=\"nofollow noreferrer\">blog.jetbrains.com/kotlin/2015/12/kotlin-1-0-beta-4-is-out</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 13, "last_activity_date": 1494064500, "last_edit_date": 1494064500, "creation_date": 1421436924, "answer_id": 27991481, "question_id": 27987810, "link": "https://stackoverflow.com/questions/27987810/kotlin-incremental-compilation-with-gradle/27991481#27991481", "title": "Kotlin: Incremental compilation with Gradle", "body": "<p><strong>Update</strong>: as of Kotlin 1.1.1, <a href=\"https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1-1-is-out/\" rel=\"nofollow noreferrer\">Gradle incremental compilation is now enabled by default</a>.</p>\n\n<p>--- Old answer:</p>\n\n<p>For now incremental compilation only works in the IDE when you use the Make algorithm supported by IntelliJ IDEA. We are looking into extending this to other build systems, but we are not there yet.</p>\n"}, {"tags": [], "owner": {"reputation": 4199, "user_id": 971273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Wbg42.jpg?s=128&g=1", "display_name": "LukaCiko", "link": "https://stackoverflow.com/users/971273/lukaciko"}, "is_accepted": false, "score": 6, "last_activity_date": 1463751115, "creation_date": 1463751115, "answer_id": 37348061, "question_id": 27987810, "link": "https://stackoverflow.com/questions/27987810/kotlin-incremental-compilation-with-gradle/37348061#37348061", "title": "Kotlin: Incremental compilation with Gradle", "body": "<p>Incremental compilation in Gradle and IDE was added in <a href=\"https://blog.jetbrains.com/kotlin/2016/05/kotlin-1-0-2-is-here/\" rel=\"noreferrer\">Kotlin 1.0.2</a>. It is enabled in IDE is enabled by default. To enable it for Gradle you will need to add <code>kotlin.incremental=true</code> to your <code>gradle.properties</code> file.</p>\n"}], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4978, "favorite_count": 4, "accepted_answer_id": 27991481, "answer_count": 2, "score": 11, "last_activity_date": 1568610344, "creation_date": 1421423681, "question_id": 27987810, "link": "https://stackoverflow.com/questions/27987810/kotlin-incremental-compilation-with-gradle", "title": "Kotlin: Incremental compilation with Gradle", "body": "<p>In the <a href=\"http://blog.jetbrains.com/kotlin/2014/10/m9-is-here/\">M9</a> announcement it was said that incremental compilation is now supported. Does this also work with Gradle, especially Android? If yes, how to enable it?</p>\n"}]