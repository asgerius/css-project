[{"tags": ["gradle", "nosuchmethoderror", "kotlin", "source-sets"], "comments": [{"owner": {"reputation": 386, "user_id": 3836081, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000265489427/picture?type=large", "display_name": "Natalia Selezneva", "link": "https://stackoverflow.com/users/3836081/natalia-selezneva"}, "edited": false, "score": 2, "creation_date": 1432726440, "post_id": 30445974, "comment_id": 49041084, "body": "Do you have any top level functions/properties in ru.ifmo.ctddev.igushkin.dkvs package in tests?"}, {"owner": {"reputation": 7879, "user_id": 1269640, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/41b92fffd289939497f29809d146c59d?s=128&d=identicon&r=PG", "display_name": "Salomon BRYS", "link": "https://stackoverflow.com/users/1269640/salomon-brys"}, "edited": false, "score": 0, "creation_date": 1432805599, "post_id": 30445974, "comment_id": 49080990, "body": "How do you run the tests? Could you post your gradle config? It looks like the test package is compiled against the main package but is ran without it."}, {"owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "reply_to_user": {"reputation": 7879, "user_id": 1269640, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/41b92fffd289939497f29809d146c59d?s=128&d=identicon&r=PG", "display_name": "Salomon BRYS", "link": "https://stackoverflow.com/users/1269640/salomon-brys"}, "edited": false, "score": 0, "creation_date": 1432817468, "post_id": 30445974, "comment_id": 49089738, "body": "@SalomonBRYS, <a href=\"https://github.com/h0tk3y/dkvs/blob/master/build.gradle\" rel=\"nofollow noreferrer\">github.com/h0tk3y/dkvs/blob/master/build.gradle</a> -- here it is."}, {"owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "reply_to_user": {"reputation": 386, "user_id": 3836081, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000265489427/picture?type=large", "display_name": "Natalia Selezneva", "link": "https://stackoverflow.com/users/3836081/natalia-selezneva"}, "edited": false, "score": 0, "creation_date": 1432817894, "post_id": 30445974, "comment_id": 49090062, "body": "@NataliaUkhorskaya, yes. I have a top level property. I&#39;ll try to remove it a little bit later."}, {"owner": {"reputation": 7879, "user_id": 1269640, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/41b92fffd289939497f29809d146c59d?s=128&d=identicon&r=PG", "display_name": "Salomon BRYS", "link": "https://stackoverflow.com/users/1269640/salomon-brys"}, "edited": false, "score": 0, "creation_date": 1432818450, "post_id": 30445974, "comment_id": 49090481, "body": "@hotkey How do you run the tests ? Via an editor or via command line ? If the latter, which command ?"}, {"owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "reply_to_user": {"reputation": 386, "user_id": 3836081, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000265489427/picture?type=large", "display_name": "Natalia Selezneva", "link": "https://stackoverflow.com/users/3836081/natalia-selezneva"}, "edited": false, "score": 0, "creation_date": 1432835351, "post_id": 30445974, "comment_id": 49102464, "body": "@NataliaUkhorskaya, thanks, I removed the package-level property from <code>test</code> and it started working. I suggest you posting an answer with this solution. I would also be happy to know what is the exact reason of such a strange behaviour."}], "answers": [{"comments": [{"owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "edited": false, "score": 0, "creation_date": 1433191353, "post_id": 30523874, "comment_id": 49235572, "body": "Thanks. There&#39;s one more workaround which follows from what you said, I posted it as another answer."}, {"owner": {"reputation": 2590, "user_id": 584585, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HlVIS.jpg?s=128&g=1", "display_name": "Mark McKenna", "link": "https://stackoverflow.com/users/584585/mark-mckenna"}, "edited": false, "score": 0, "creation_date": 1440470790, "post_id": 30523874, "comment_id": 52274603, "body": "Another side note to this solution; at least in Gradle, you need to run a clean build, or the test runner will still find the generated Package class."}], "tags": [], "owner": {"reputation": 682, "user_id": 1861615, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c9508d7578bf53ccdb546f32b94f924?s=128&d=identicon&r=PG", "display_name": "Travis", "link": "https://stackoverflow.com/users/1861615/travis"}, "is_accepted": true, "score": 12, "last_activity_date": 1432885235, "creation_date": 1432885235, "answer_id": 30523874, "question_id": 30445974, "link": "https://stackoverflow.com/questions/30445974/kotlin-java-lang-nosuchmethoderror-in-tests/30523874#30523874", "title": "Kotlin: java.lang.NoSuchMethodError in tests", "body": "<p>For properties and methods outside of classes, Kotlin creates a java class named ${packagename}Package with the properties and methods implemented as static methods and variables.  With multiple source-sets, the java class will be created twice, once for each source-set.  Your issue is that the test source-set \"package class\" is hiding the class compiled in the main source-set.</p>\n\n<p>As mentioned in the comments above, avoid having any top-level properties or methods in the test source-set to prevent the Kotlin compiler from creating this package class in the test output directory.</p>\n"}, {"tags": [], "owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "is_accepted": false, "score": 4, "last_activity_date": 1433190650, "creation_date": 1433190650, "answer_id": 30582730, "question_id": 30445974, "link": "https://stackoverflow.com/questions/30445974/kotlin-java-lang-nosuchmethoderror-in-tests/30582730#30582730", "title": "Kotlin: java.lang.NoSuchMethodError in tests", "body": "<p>In addition to what was suggested earlier, I found another workaround: if you need package-level functions or properties in <code>test</code> just move the tests to different package, e.g. in your test sources:</p>\n\n<pre><code> package ru.ifmo.ctddev.igushkin.dkvs.tests\n</code></pre>\n\n<p>and then do </p>\n\n<pre><code> import ru.ifmo.ctddev.igushkin.dkvs.*\n</code></pre>\n\n<p>which is everything from your main package. This will make Kotlin compliler generate two non-conflicting Package classes, therefore both can have global members.</p>\n"}, {"tags": [], "owner": {"reputation": 64, "user_id": 3471194, "user_type": "registered", "profile_image": "https://graph.facebook.com/551753049/picture?type=large", "display_name": "user3471194", "link": "https://stackoverflow.com/users/3471194/user3471194"}, "is_accepted": false, "score": 0, "last_activity_date": 1543360554, "creation_date": 1543360554, "answer_id": 53509687, "question_id": 30445974, "link": "https://stackoverflow.com/questions/30445974/kotlin-java-lang-nosuchmethoderror-in-tests/53509687#53509687", "title": "Kotlin: java.lang.NoSuchMethodError in tests", "body": "<p>I faced similar issue when testing kotlin-native module, it was fixed by adding this dependencies:</p>\n\n<pre><code>testImplementation \"org.jetbrains.kotlin:kotlin-test:$kotlin_version\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version\"\n</code></pre>\n"}], "owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5358, "favorite_count": 2, "accepted_answer_id": 30523874, "answer_count": 3, "score": 12, "last_activity_date": 1543360554, "creation_date": 1432587780, "last_edit_date": 1435142989, "question_id": 30445974, "link": "https://stackoverflow.com/questions/30445974/kotlin-java-lang-nosuchmethoderror-in-tests", "title": "Kotlin: java.lang.NoSuchMethodError in tests", "body": "<p>Is it possible to use Kotlin package functions and package properties in different sourcesets? When I try to do so, I have <code>NoSuchMethodError</code> thrown.</p>\n\n<hr>\n\n<p><strong>Example</strong></p>\n\n<p>I have Gradle project with Kotlin code and two sourcesets in it, <code>main</code> and <code>test</code>.\nIn <code>main</code>, I have the following code in one of the files:</p>\n\n<pre><code>package ru.ifmo.ctddev.igushkin.dkvs\n...\npublic val payloadSplitter: String = \" ### \"\n</code></pre>\n\n<p>In <code>test</code> I try to access <code>payloadSplitter</code> with the following code:</p>\n\n<pre><code>package ru.ifmo.ctddev.igushkin.dkvs\n...\npublic class MessageTests {\n    ...\n    test fun testParsing() {\n        ...\n        checkParseAndToString(\"p1b 345 ${payloadSplitter} set a b c\")\n    }\n    ...\n}\n</code></pre>\n\n<p>And exactly in the first line where <code>payloadSplitter</code> is accessed, at runtime I get</p>\n\n<pre><code>java.lang.NoSuchMethodError: ru.ifmo.ctddev.igushkin.dkvs.DkvsPackage.getPayloadSplitter()Ljava/lang/String;\n</code></pre>\n\n<hr>\n\n<p>Other global variables and functions are also inaccessible in <code>test</code> with the same error.</p>\n\n<hr>\n\n<p><strong>UPD</strong> Kotlin team explained the issue and announced the fix <a href=\"http://blog.jetbrains.com/kotlin/2015/06/improving-java-interop-top-level-functions-and-properties/\" rel=\"noreferrer\">here</a>.</p>\n"}, {"tags": ["reflection", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 1094, "user_id": 45652, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/ae2b294e24fd2e472bfca45ab19050c5?s=128&d=identicon&r=PG", "display_name": "Yurii Rashkovskii", "link": "https://stackoverflow.com/users/45652/yurii-rashkovskii"}, "edited": false, "score": 0, "creation_date": 1467340233, "post_id": 30434109, "comment_id": 63703112, "body": "Alexander, is it still the same or has anything updated since (i.e. any chance for Java to be able to see Kotlin parameter names)?"}, {"owner": {"reputation": 25812, "user_id": 288456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cf294ff6d86cc587dec43e2af34a9532?s=128&d=identicon&r=PG", "display_name": "Alexander Udalov", "link": "https://stackoverflow.com/users/288456/alexander-udalov"}, "reply_to_user": {"reputation": 1094, "user_id": 45652, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/ae2b294e24fd2e472bfca45ab19050c5?s=128&d=identicon&r=PG", "display_name": "Yurii Rashkovskii", "link": "https://stackoverflow.com/users/45652/yurii-rashkovskii"}, "edited": false, "score": 0, "creation_date": 1467370271, "post_id": 30434109, "comment_id": 63716668, "body": "@YuriiRashkovskii We&#39;re adding support for target bytecode version 1.8 currently, but writing the <code>MethodParameters</code> attribute is not planned yet. Please create an issue in our tracker, if this would be useful to you!"}, {"owner": {"reputation": 3141, "user_id": 4111920, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/RCjK1.png?s=128&g=1", "display_name": "Gilbert", "link": "https://stackoverflow.com/users/4111920/gilbert"}, "edited": false, "score": 0, "creation_date": 1587659374, "post_id": 30434109, "comment_id": 108604777, "body": "@AlexanderUdalov what is the update on this? Any link with documentation?"}], "tags": [], "owner": {"reputation": 25812, "user_id": 288456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cf294ff6d86cc587dec43e2af34a9532?s=128&d=identicon&r=PG", "display_name": "Alexander Udalov", "link": "https://stackoverflow.com/users/288456/alexander-udalov"}, "is_accepted": true, "score": 10, "last_activity_date": 1440932281, "last_edit_date": 1440932281, "creation_date": 1432542698, "answer_id": 30434109, "question_id": 30425846, "link": "https://stackoverflow.com/questions/30425846/how-to-get-parameter-names-via-reflection-in-kotlin/30434109#30434109", "title": "How to get parameter names via reflection in kotlin?", "body": "<p><strong>Update</strong>: <em>Reflection API now supports obtaining parameter names: <code>KCallable.parameters</code> will give you a list of parameters, and <code>KParameter.name</code> will give you the name.</em></p>\n\n<p>The current solution is to use the <code>JetValueParameter</code> annotation, although it is deprecated.</p>\n\n<p>We're working on support for the parameter names in Kotlin reflection, which will be available shortly. At that point <code>JetValueParameter</code> will be dropped in favor of the new API.</p>\n\n<p>I'd like to note that Kotlin compiler currently only produces JVM bytecode compatible with Java 1.6, whereas the <code>MethodParameters</code> attribute corresponding to the <code>-parameters</code> of javac only appeared in bytecode of Java 1.8. So, you'll still be unable to get parameter names of Kotlin methods via <em>Java reflection</em>. We're considering the support for bytecode target 1.8 though, so that will likely work in the future.</p>\n"}], "owner": {"reputation": 180, "user_id": 4175039, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d73cf66f6bd23980e79d6fa0a96b6d46?s=128&d=identicon&r=PG&f=1", "display_name": "\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0421\u0430\u0432\u0438\u043d", "link": "https://stackoverflow.com/users/4175039/%d0%95%d0%b2%d0%b3%d0%b5%d0%bd%d0%b8%d0%b9-%d0%a1%d0%b0%d0%b2%d0%b8%d0%bd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1710, "favorite_count": 0, "accepted_answer_id": 30434109, "answer_count": 1, "score": 4, "last_activity_date": 1440932281, "creation_date": 1432485591, "question_id": 30425846, "link": "https://stackoverflow.com/questions/30425846/how-to-get-parameter-names-via-reflection-in-kotlin", "title": "How to get parameter names via reflection in kotlin?", "body": "<p>java8 has \"-parameters\" argument, passed to compiler, what about kotlin ? \nAs I can see, kotlin compiler add @JetValueParameter annotation with param names  to parameters, but one is depricated..</p>\n"}, {"tags": ["dynamic", "dispatch", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 2590, "user_id": 584585, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HlVIS.jpg?s=128&g=1", "display_name": "Mark McKenna", "link": "https://stackoverflow.com/users/584585/mark-mckenna"}, "edited": false, "score": 0, "creation_date": 1432394006, "post_id": 30409803, "comment_id": 48914667, "body": "Thanks for the feedback; I see the problem.  I modified the question code to hopefully be closer to sensible."}], "tags": [], "owner": {"reputation": 4427, "user_id": 4706743, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64b05c3b09628ba8955d6d7a188271af?s=128&d=identicon&r=PG&f=1", "display_name": "D3xter", "link": "https://stackoverflow.com/users/4706743/d3xter"}, "is_accepted": false, "score": 0, "last_activity_date": 1432363920, "last_edit_date": 1432363920, "creation_date": 1432363582, "answer_id": 30409803, "question_id": 30408010, "link": "https://stackoverflow.com/questions/30408010/what-are-the-limits-on-dynamic-double-dispatch-in-kotlin/30409803#30409803", "title": "What are the limits on dynamic/double dispatch in Kotlin?", "body": "<p>This code is not compilable at all, because Animal doesnt have any \"+\" operators.</p>\n\n<p>If they would allow to use Horse \"+\" methods on an Animal,\nthen you'd get runtime errors, which kotlin/java/etc. tries to prevent.</p>\n\n<p>Kotlin wont work with the runtime-type to resolve methods and stuff,\nbecause there are possibilities to produce runtime errors.</p>\n\n<p>What if another thread changes Animal to a Mule in the meantime, the exact line/time when the other thread changes the Animal is not deterministic, so this could lead up to runtime errors.</p>\n\n<p>Val or var doesnt change anything in this situtation.</p>\n"}, {"comments": [{"owner": {"reputation": 2590, "user_id": 584585, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HlVIS.jpg?s=128&g=1", "display_name": "Mark McKenna", "link": "https://stackoverflow.com/users/584585/mark-mckenna"}, "edited": false, "score": 0, "creation_date": 1432561235, "post_id": 30423272, "comment_id": 48962112, "body": "Thank you very much!  Makes a lot of sense.  I&#39;ll take this a bit further with my own exploration."}], "tags": [], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "is_accepted": true, "score": 7, "last_activity_date": 1432468931, "creation_date": 1432468931, "answer_id": 30423272, "question_id": 30408010, "link": "https://stackoverflow.com/questions/30408010/what-are-the-limits-on-dynamic-double-dispatch-in-kotlin/30423272#30423272", "title": "What are the limits on dynamic/double dispatch in Kotlin?", "body": "<p>So here's a version of your code that actually compiles:</p>\n\n<pre><code>fun main(vararg args: String) {\n    val h:Animal = Horse\n    val d:Animal = Donkey\n    val child = h + d\n    println(child)\n}\n\nopen class Animal {\n    fun plus(x:Animal) = Animal()\n}\n\nobject Horse : Animal()\nobject Donkey : Animal()\nobject Mule : Animal()\n\nfun Horse.plus(x:Horse) = Horse\nfun Horse.plus(x:Donkey) = Mule\n</code></pre>\n\n<p>The result is \"Animal@1906bcf8\".</p>\n\n<p>As far as I understand, extension methods, i.e. <code>Horse.plus(x:Horse)</code> and <code>Horse.plus(x:Donkey)</code>, are statically dispatched. That's because they are basicly compiled to the same byte code as the following Java code:</p>\n\n<pre><code>static Horse plus(Horse $receiver, Horse x) {\n    return Horse.INSTANCE;\n}\n</code></pre>\n\n<p>By the way, this is a big difference to default methods in Java 8 which are dynamically dispatched based on the runtime type and can be overriden.</p>\n"}], "owner": {"reputation": 2590, "user_id": 584585, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HlVIS.jpg?s=128&g=1", "display_name": "Mark McKenna", "link": "https://stackoverflow.com/users/584585/mark-mckenna"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1596, "favorite_count": 0, "accepted_answer_id": 30423272, "answer_count": 2, "score": 2, "last_activity_date": 1432468931, "creation_date": 1432344922, "last_edit_date": 1432393955, "question_id": 30408010, "link": "https://stackoverflow.com/questions/30408010/what-are-the-limits-on-dynamic-double-dispatch-in-kotlin", "title": "What are the limits on dynamic/double dispatch in Kotlin?", "body": "<p>I'm just starting to explore Kotlin, and I'm curious about how far it moves beyond Java's core dynamic binding/dispatch semantics.</p>\n\n<p>Let's say I write code that looks something like this:</p>\n\n<pre>\n    class Animal {\n        fun add(x:Animal) = Animal()\n    }\n\n    object Horse : Animal\n    object Donkey : Animal\n    object Mule : Animal\n\n    fun Horse.add(x:Horse) = Horse()\n    fun Horse.add(x:Donkey) = Mule()\n\n    fun main(args : Array) {\n        val h:Animal = Horse\n        val d:Animal = Donkey\n        val child = h + d\n    }\n</pre>\n\n<p>Based on the above code--what can I expect to happen?  Do I get a failure at runtime because Horse doesn't implement add(Animal)?  Can it accurately differentiate them in calls of the above nature, where the compile-time type of the values being compared was Animal (at least, as written) but their runtime types were more specific?  Does it change anything if we used var instead of val?</p>\n\n<p>Thanks in advance.</p>\n\n<p>EDIT: Modified core code--I see the problem the first responder highlighted, I wasn't thinking straight.  Clearly I haven't actually compiled this, I'm still kind of exploring at a conceptual level.</p>\n\n<p>Also, I will give it a shot in the actual compiler, but I'm concerned that there will be situations in which it works and others in which it doesn't based on some criteria that I don't fully understand.  I wasn't able to find reference docs on how dynamic dispatch is implemented in Kotlin (not sure about it for Java either, for that matter; I wrote something a few months ago that I thought would work based on JVM docs, but it didn't, and I never had a chance to explore exactly why).</p>\n\n<p>Anyhow thanks again!</p>\n"}]