[{"tags": ["hibernate", "jpa", "default-constructor", "kotlin"], "comments": [{"owner": {"reputation": 14274, "user_id": 2621917, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/2ecd16dbe555b9596651e94668f71466?s=128&d=identicon&r=PG", "display_name": "Michael Piefel", "link": "https://stackoverflow.com/users/2621917/michael-piefel"}, "edited": false, "score": 1, "creation_date": 1486978102, "post_id": 32038177, "comment_id": 71562701, "body": "<code>INFO -- org.hibernate.tuple.PojoInstantiator: HHH000182: No default (no-argument) constructor for class: Test (class must be instantiated by Interceptor)</code> \u2013 so, yes, Hibernate can work without the default constructor."}, {"owner": {"reputation": 3871, "user_id": 889053, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/3e26b08aa9c9bff40d6dab7b98680bf4?s=128&d=identicon&r=PG", "display_name": "Christian Bongiorno", "link": "https://stackoverflow.com/users/889053/christian-bongiorno"}, "edited": false, "score": 0, "creation_date": 1518076444, "post_id": 32038177, "comment_id": 84357566, "body": "The way it does it is with setters - aka: Mutability. It instantiates the default constructor and then looks for setters. I want immutable objects. The only way that can be done is if hibernates starts looking at the constructor. There is an open ticket on this <a href=\"https://hibernate.atlassian.net/browse/HHH-9440\" rel=\"nofollow noreferrer\">hibernate.atlassian.net/browse/HHH-9440</a>"}], "answers": [{"comments": [{"owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "edited": false, "score": 0, "creation_date": 1439765344, "post_id": 32038966, "comment_id": 51981934, "body": "So there&#39;s even no way to tell Hibernate to map columns to the constructor args? Well, may be, there&#39;s an ORM framework/library which doesn&#39;t require non-arg constructor? :)"}, {"owner": {"reputation": 4427, "user_id": 4706743, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64b05c3b09628ba8955d6d7a188271af?s=128&d=identicon&r=PG&f=1", "display_name": "D3xter", "link": "https://stackoverflow.com/users/4706743/d3xter"}, "reply_to_user": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "edited": false, "score": 0, "creation_date": 1439825961, "post_id": 32038966, "comment_id": 52007684, "body": "Not sure about that, haven&#39;t worked with Hibernate for a long time. But it should be possible somehow to implement with named parameters."}, {"owner": {"reputation": 3871, "user_id": 889053, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/3e26b08aa9c9bff40d6dab7b98680bf4?s=128&d=identicon&r=PG", "display_name": "Christian Bongiorno", "link": "https://stackoverflow.com/users/889053/christian-bongiorno"}, "edited": false, "score": 0, "creation_date": 1496554609, "post_id": 32038966, "comment_id": 75704366, "body": "I think hibernate could do this with a bit (not much) of work. In java 8 you can actually have you parameters named in the constructor and those could be mapped just like they are to fields now."}], "tags": [], "owner": {"reputation": 4427, "user_id": 4706743, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64b05c3b09628ba8955d6d7a188271af?s=128&d=identicon&r=PG&f=1", "display_name": "D3xter", "link": "https://stackoverflow.com/users/4706743/d3xter"}, "is_accepted": false, "score": 4, "last_activity_date": 1439752715, "creation_date": 1439752715, "answer_id": 32038966, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/32038966#32038966", "title": "Kotlin with JPA: default constructor hell", "body": "<p>There is no way to keep immutability like this.\nVals MUST be initialized when constructing the instance.</p>\n\n<p>One way to do it without immutability is:</p>\n\n<pre><code>class Entity() {\n    public constructor(name: String, age: Int): this() {        \n        this.name = name\n        this.age = age\n    }\n\n    public var name: String by Delegates.notNull()\n\n    public var age: Int by Delegates.notNull()\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1654, "user_id": 2138356, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5cfbdd95128b8feefe8c49299022af9?s=128&d=identicon&r=PG", "display_name": "fasth", "link": "https://stackoverflow.com/users/2138356/fasth"}, "edited": false, "score": 0, "creation_date": 1455016159, "post_id": 34640812, "comment_id": 58290662, "body": "Worth note that lateinit and Delegates.notNull() are the same."}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "reply_to_user": {"reputation": 1654, "user_id": 2138356, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5cfbdd95128b8feefe8c49299022af9?s=128&d=identicon&r=PG", "display_name": "fasth", "link": "https://stackoverflow.com/users/2138356/fasth"}, "edited": false, "score": 4, "creation_date": 1455037032, "post_id": 34640812, "comment_id": 58305673, "body": "similar but not the same.  If Delegate is used, it changes what is seen for serialization of the actual field by Java (it sees the delegate class).  Also, it is better to use <code>lateinit</code> when you have a well defined lifecycle guaranteeing initialization soon after construction, it is intended for those cases.  Whereas delegate is more intended for &quot;sometime before first use&quot;.  Although technically they have similar behavior and protection, they aren&#39;t identical."}, {"owner": {"reputation": 567, "user_id": 3287514, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/8x4Et.jpg?s=128&g=1", "display_name": "OzzyTheGiant", "link": "https://stackoverflow.com/users/3287514/ozzythegiant"}, "edited": false, "score": 0, "creation_date": 1568988128, "post_id": 34640812, "comment_id": 102462183, "body": "If you need to use primitive values, the only thing I could think of would be to use &quot;default values&quot; when instantiating an object, and by that I mean using 0 and <code>false</code> for Ints and Booleans respectively. Not sure how that would affect framework code though"}], "tags": [], "owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "is_accepted": false, "score": 12, "last_activity_date": 1452107276, "last_edit_date": 1495542881, "creation_date": 1452107276, "answer_id": 34640812, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/34640812#34640812", "title": "Kotlin with JPA: default constructor hell", "body": "<p>@D3xter has a good answer for one model, the other is a newer feature in Kotlin called <code>lateinit</code>:</p>\n\n<pre><code>class Entity() {\n    constructor(name: String, age: Date): this() {\n        this.name = name\n        this.birthdate = age\n    }\n\n    lateinit var name: String\n    lateinit var birthdate: Date\n}\n</code></pre>\n\n<p>You would use this when you are sure something will fill in the values at construction time or very soon after (and before first use of the instance).  </p>\n\n<p>You will note I changed <code>age</code> to <code>birthdate</code> because you cannot use primitive values with <code>lateinit</code> and they also for the moment must be <code>var</code> (restriction might be released in the future).</p>\n\n<p>So not a perfect answer for immutability, same problem as the other answer in that regard.  The solution for that is plugins to libraries that can handle understanding the Kotlin constructor and mapping properties to constructor parameters, instead of requiring a default constructor.  The <a href=\"https://github.com/FasterXML/jackson-module-kotlin\" rel=\"noreferrer\">Kotlin module for Jackson</a> does this, so it is clearly possible.</p>\n\n<p><strong>See also:</strong>  <a href=\"https://stackoverflow.com/a/34624907/3679676\">https://stackoverflow.com/a/34624907/3679676</a> for exploration of similar options.</p>\n"}, {"comments": [{"owner": {"reputation": 1225, "user_id": 1394698, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/q9uwI.jpg?s=128&g=1", "display_name": "snowe", "link": "https://stackoverflow.com/users/1394698/snowe"}, "edited": false, "score": 24, "creation_date": 1480634817, "post_id": 35841260, "comment_id": 69056616, "body": "you obviously didn&#39;t read his question, else you would have seen the part where he states that default arguments are bad looking, especially for more complex objects. Not to mention, adding default values for something hides other issues."}, {"owner": {"reputation": 1133, "user_id": 361929, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9dd499aff3af146ab5922580c5b6ebe?s=128&d=identicon&r=PG", "display_name": "Umesh Rajbhandari", "link": "https://stackoverflow.com/users/361929/umesh-rajbhandari"}, "edited": false, "score": 1, "creation_date": 1482288806, "post_id": 35841260, "comment_id": 69709346, "body": "Why is it bad idea to provide the default values? Even when using Java&#39;s no args consturctor, default values are assigned to the fields (e.g. null to reference types)."}, {"owner": {"reputation": 7735, "user_id": 300797, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/328e4d651b4e1c7a97bd86f3d7c84073?s=128&d=identicon&r=PG", "display_name": "thecoshman", "link": "https://stackoverflow.com/users/300797/thecoshman"}, "edited": false, "score": 3, "creation_date": 1486594482, "post_id": 35841260, "comment_id": 71418417, "body": "There are times for which you can not provide a sensible defaults. Take the given example of a person, you really should model it with a date of birth as that doesn&#39;t change (of course, exceptions apply somewhere somehow) but there is no sensible default to give to that. Hence form a pure code point of view, you must pass a DoB into the person constructor, thus ensuring you can never have a person that doesn&#39;t have a valid age. The problem is, the way JPA likes to work, it likes to make an object with a no-args constructor, then set everything."}, {"owner": {"reputation": 632, "user_id": 3346630, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qGviz.jpg?s=128&g=1", "display_name": "Mohammad Rafigh", "link": "https://stackoverflow.com/users/3346630/mohammad-rafigh"}, "edited": false, "score": 1, "creation_date": 1500387922, "post_id": 35841260, "comment_id": 77307184, "body": "I think this is the right way to do that, this answer works in other cases that you don&#39;t use JPA or hibernate too. also it&#39;s the suggested way according to documents as mentioned in the answer."}, {"owner": {"reputation": 186, "user_id": 386510, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/17e821983a7825c0473dcdc6f3959e86?s=128&d=identicon&r=PG", "display_name": "Stianhn", "link": "https://stackoverflow.com/users/386510/stianhn"}, "edited": false, "score": 2, "creation_date": 1586169858, "post_id": 35841260, "comment_id": 108019376, "body": "Also, you should not use data class with JPA: &quot;don\u2019t use data classes with val properties because JPA is not designed to work with immutable classes or the methods generated automatically by data classes.&quot; <a href=\"https://spring.io/guides/tutorials/spring-boot-kotlin/#_persistence_with_jpa\" rel=\"nofollow noreferrer\">spring.io/guides/tutorials/spring-boot-kotlin/&hellip;</a>"}, {"owner": {"reputation": 1035, "user_id": 2195847, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f880508a99a4e5f231dd29803f211d2e?s=128&d=identicon&r=PG", "display_name": "iolo", "link": "https://stackoverflow.com/users/2195847/iolo"}, "edited": false, "score": 0, "creation_date": 1588721683, "post_id": 35841260, "comment_id": 109007235, "body": "At this time, I&#39;m using general <code>class</code> not <code>data class</code>. It&#39;s JPA way."}], "tags": [], "owner": {"reputation": 1035, "user_id": 2195847, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f880508a99a4e5f231dd29803f211d2e?s=128&d=identicon&r=PG", "display_name": "iolo", "link": "https://stackoverflow.com/users/2195847/iolo"}, "is_accepted": false, "score": 34, "last_activity_date": 1457346289, "creation_date": 1457346289, "answer_id": 35841260, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/35841260#35841260", "title": "Kotlin with JPA: default constructor hell", "body": "<p>just provide default values for all arguments, Kotlin will make default constructor for you.</p>\n\n<pre><code>@Entity\ndata class Person(val name: String=\"\", val age: Int=0)\n</code></pre>\n\n<p>see the <code>NOTE</code> box below the following section:</p>\n\n<p><a href=\"https://kotlinlang.org/docs/reference/classes.html#secondary-constructors\">https://kotlinlang.org/docs/reference/classes.html#secondary-constructors</a></p>\n"}, {"tags": [], "owner": {"reputation": 937, "user_id": 1636762, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/efdca83a00cf3d3df7e7f99891c7161d?s=128&d=identicon&r=PG", "display_name": "pawelbial", "link": "https://stackoverflow.com/users/1636762/pawelbial"}, "is_accepted": false, "score": 3, "last_activity_date": 1462306498, "creation_date": 1462306498, "answer_id": 37013550, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/37013550#37013550", "title": "Kotlin with JPA: default constructor hell", "body": "<p>I have been working with Kotlin + JPA for quite a while and I have created my own idea how to write Entity classes.</p>\n\n<p>I just slightly extend your initial idea. As you said we can create private argumentless constructor and provide default values for <em>primitives</em>, but when we try need to use another classes it gets a little messy. My idea is to create static STUB object for entity class that you currently writes e.g:</p>\n\n<pre><code>@Entity\ndata class TestEntity(\n    val name: String,\n    @Id @GeneratedValue val id: Int? = null\n) {\n    private constructor() : this(\"\")\n\n    companion object {\n        val STUB = TestEntity()\n    }\n}\n</code></pre>\n\n<p>and when I have entity class that is related to <em>TestEntity</em> I can easily use stub I just have created. For example:</p>\n\n<pre><code>@Entity\ndata class RelatedEntity(\n        val testEntity: TestEntity,\n        @Id @GeneratedValue val id: Long? = null\n) {\n    private constructor() : this(TestEntity.STUB)\n\n    companion object {\n        val STUB = RelatedEntity()\n    }\n}\n</code></pre>\n\n<p>Of course this solution is not perfect. You still need to create some boilerplate code that should not be required. Also there is one case that cannot be solved nicely with stubbing - parent-child relation within one entity class - like this:</p>\n\n<pre><code>@Entity\ndata class TestEntity(\n        val testEntity: TestEntity,\n        @Id @GeneratedValue val id: Long? = null\n) {\n    private constructor() : this(STUB)\n\n    companion object {\n        val STUB = TestEntity()\n    }\n}\n</code></pre>\n\n<p>This code will produce <em>NullPointerException</em> due to chicken-egg issue - we need STUB to create STUB. Unfortunately we need to make this field nullable (or some similar solution) to make code works.</p>\n\n<p>Also in my opinion having <em>Id</em> as last field (and nullable) is quite optimal. We shouldn't assign it by hand and let database do it for us.</p>\n\n<p>I'm not saying that this is perfect solution, but I think that it leverages entity code readability and Kotlin features (e.g. null safety). I just hope future releases of JPA and/or Kotlin will make our code even more simpler and nicer.</p>\n"}, {"tags": [], "owner": {"reputation": 128, "user_id": 2533613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19d444a9e349f1888c6e0a5dd878f00e?s=128&d=identicon&r=PG", "display_name": "dan.jones", "link": "https://stackoverflow.com/users/2533613/dan-jones"}, "is_accepted": false, "score": 1, "last_activity_date": 1465246001, "creation_date": 1465246001, "answer_id": 37666627, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/37666627#37666627", "title": "Kotlin with JPA: default constructor hell", "body": "<p>Similar to @pawelbial I've used companion object to create a default instance, however instead of defining a secondary constructor, just use default constructor args like @iolo. This saves you having to define multiple constructors and keeps the code simpler (although granted, defining \"STUB\" companion objects isn't exactly keeping it simple)</p>\n\n\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\ndata class TestEntity(\n    val name: String = \"\",\n    @Id @GeneratedValue val id: Int? = null\n) {\n\n    companion object {\n        val STUB = TestEntity()\n    }\n}\n</code></pre>\n\n<p>And then for classes which relate to <code>TestEntity</code></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\ndata class RelatedEntity(\n    val testEntity: TestEntity = TestEntity:STUB,\n    @Id @GeneratedValue val id: Int? = null\n)\n</code></pre>\n\n<p>As @pawelbial has mentioned, this won't work where the <code>TestEntity</code> class \"has a\" <code>TestEntity</code> class since STUB won't have been initialised when the constructor is run. </p>\n"}, {"comments": [{"owner": {"reputation": 7735, "user_id": 300797, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/328e4d651b4e1c7a97bd86f3d7c84073?s=128&d=identicon&r=PG", "display_name": "thecoshman", "link": "https://stackoverflow.com/users/300797/thecoshman"}, "edited": false, "score": 5, "creation_date": 1486594596, "post_id": 41365380, "comment_id": 71418475, "body": "Could you perhaps expand a bit on how this would be used within your kotlin code, even if it&#39;s a case of &quot;your <code>data class foo(bar: String)</code> doesn&#39;t change&quot;. It&#39;d just be nice to see a more complete example of how this fits into place. Thanks"}, {"owner": {"reputation": 42524, "user_id": 936832, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/cc1da0368f0874a66bd771c4d57f94b0?s=128&d=identicon&r=PG", "display_name": "Ingo Kegel", "link": "https://stackoverflow.com/users/936832/ingo-kegel"}, "reply_to_user": {"reputation": 7735, "user_id": 300797, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/328e4d651b4e1c7a97bd86f3d7c84073?s=128&d=identicon&r=PG", "display_name": "thecoshman", "link": "https://stackoverflow.com/users/300797/thecoshman"}, "edited": false, "score": 0, "creation_date": 1486623664, "post_id": 41365380, "comment_id": 71427415, "body": "You don&#39;t have to do anything in your code. Classes that are annotated with <code>@Entity</code> will get a default constructor automatically with the above configuration."}, {"owner": {"reputation": 1053, "user_id": 737956, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/23b684798d060637e412878e52de3f45?s=128&d=identicon&r=PG", "display_name": "Dalibor Filus", "link": "https://stackoverflow.com/users/737956/dalibor-filus"}, "edited": false, "score": 5, "creation_date": 1494603150, "post_id": 41365380, "comment_id": 74915297, "body": "This is the blog post that introduced <code>kotlin-noarg</code> and <code>kotlin-jpa</code> with links detailing their purpose <a href=\"https://blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here/\" rel=\"nofollow noreferrer\">blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here</a>"}, {"owner": {"reputation": 102, "user_id": 4434686, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cafd4d840204961c4b17160e9c2a8ab4?s=128&d=identicon&r=PG&f=1", "display_name": "jannnik", "link": "https://stackoverflow.com/users/4434686/jannnik"}, "edited": false, "score": 1, "creation_date": 1514482064, "post_id": 41365380, "comment_id": 82991999, "body": "And what about a primary key class like CustomerEntityPK, which is not an entity but needs a default constructor?"}, {"owner": {"reputation": 42524, "user_id": 936832, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/cc1da0368f0874a66bd771c4d57f94b0?s=128&d=identicon&r=PG", "display_name": "Ingo Kegel", "link": "https://stackoverflow.com/users/936832/ingo-kegel"}, "edited": false, "score": 1, "creation_date": 1514499478, "post_id": 41365380, "comment_id": 82999174, "body": "There is also the <code>kotlin-noarg</code> compiler plugin that lets you specify annotations to mark classes that need a zero-argument constructor. See the blog post that is linked 3 comments above."}, {"owner": {"reputation": 1505, "user_id": 1149140, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/389ca4240b99c639b7ab54a2fbef8c6c?s=128&d=identicon&r=PG", "display_name": "Passiondroid", "link": "https://stackoverflow.com/users/1149140/passiondroid"}, "edited": false, "score": 1, "creation_date": 1532719747, "post_id": 41365380, "comment_id": 90095723, "body": "Missing part in the answer. Add this in build.gradle as well : noArg {     annotation(&quot;Entity&quot;) }"}, {"owner": {"reputation": 653, "user_id": 340225, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4dee7a92387ed097810ee2d1f9fae22f?s=128&d=identicon&r=PG", "display_name": "Eric", "link": "https://stackoverflow.com/users/340225/eric"}, "edited": false, "score": 1, "creation_date": 1541513774, "post_id": 41365380, "comment_id": 93237154, "body": "still didnt work for me. I am using a mono repo project."}, {"owner": {"reputation": 3677, "user_id": 1128668, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/35ca82b58da21315ee1650c8f4158adf?s=128&d=identicon&r=PG", "display_name": "GlenPeterson", "link": "https://stackoverflow.com/users/1128668/glenpeterson"}, "edited": false, "score": 0, "creation_date": 1546553564, "post_id": 41365380, "comment_id": 94897361, "body": "Here&#39;s a direct link to the documentation: <a href=\"https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin\" rel=\"nofollow noreferrer\">kotlinlang.org/docs/reference/&hellip;</a>"}, {"owner": {"reputation": 3677, "user_id": 1128668, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/35ca82b58da21315ee1650c8f4158adf?s=128&d=identicon&r=PG", "display_name": "GlenPeterson", "link": "https://stackoverflow.com/users/1128668/glenpeterson"}, "edited": false, "score": 0, "creation_date": 1546563285, "post_id": 41365380, "comment_id": 94899882, "body": "FYI, I had to put the &lt;dependency&gt; in my main dependencies section of my pom.xml file, not in the &lt;plugin&gt; section."}, {"owner": {"reputation": 29866, "user_id": 930450, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/se3CE.png?s=128&g=1", "display_name": "Ixx", "link": "https://stackoverflow.com/users/930450/ixx"}, "edited": false, "score": 3, "creation_date": 1559808535, "post_id": 41365380, "comment_id": 99537311, "body": "Not working for me. It only works if I make the constructor fields optionals. Which means that the plugin isn&#39;t working."}, {"owner": {"reputation": 213217, "user_id": 41071, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/0ec0f5be7749c8cc8ccda4a809103f36?s=128&d=identicon&r=PG", "display_name": "svick", "link": "https://stackoverflow.com/users/41071/svick"}, "reply_to_user": {"reputation": 102, "user_id": 4434686, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cafd4d840204961c4b17160e9c2a8ab4?s=128&d=identicon&r=PG&f=1", "display_name": "jannnik", "link": "https://stackoverflow.com/users/4434686/jannnik"}, "edited": false, "score": 3, "creation_date": 1570092374, "post_id": 41365380, "comment_id": 102807114, "body": "@jannnik You can mark the primary key class with the <code>@Embeddable</code> attribute even if you otherwise don&#39;t need it. That way, it will be picked up by <code>kotlin-jpa</code>."}, {"owner": {"reputation": 737, "user_id": 665744, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4a95766ccd884240b2387d64307eded8?s=128&d=identicon&r=PG&f=1", "display_name": "8bitme", "link": "https://stackoverflow.com/users/665744/8bitme"}, "edited": false, "score": 0, "creation_date": 1598430903, "post_id": 41365380, "comment_id": 112453593, "body": "I also had to add the following to my gradle file <code>noArg {     annotation(&quot;javax.persistence.Entity&quot;) }</code>"}], "tags": [], "owner": {"reputation": 42524, "user_id": 936832, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/cc1da0368f0874a66bd771c4d57f94b0?s=128&d=identicon&r=PG", "display_name": "Ingo Kegel", "link": "https://stackoverflow.com/users/936832/ingo-kegel"}, "is_accepted": true, "score": 166, "last_activity_date": 1482940099, "creation_date": 1482940099, "answer_id": 41365380, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/41365380#41365380", "title": "Kotlin with JPA: default constructor hell", "body": "<p><strong>As of Kotlin 1.0.6</strong>, the <code>kotlin-noarg</code> compiler plugin generates synthetic default construtors for classes that have been annotated with selected annotations.</p>\n\n<p>If you use gradle, applying the <code>kotlin-jpa</code> plugin is enough to generate default constructors for classes annotated with <code>@Entity</code>:</p>\n\n<pre><code>buildscript {\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-noarg:$kotlin_version\"\n    }\n}\n\napply plugin: \"kotlin-jpa\"\n</code></pre>\n\n<p>For Maven:</p>\n\n<pre><code>&lt;plugin&gt;\n    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n    &lt;version&gt;${kotlin.version}&lt;/version&gt;\n\n    &lt;configuration&gt;\n        &lt;compilerPlugins&gt;\n            &lt;plugin&gt;jpa&lt;/plugin&gt;\n        &lt;/compilerPlugins&gt;\n    &lt;/configuration&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-noarg&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/plugin&gt;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 10195, "user_id": 4390212, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/JrUii.jpg?s=128&g=1", "display_name": "DimaSan", "link": "https://stackoverflow.com/users/4390212/dimasan"}, "edited": false, "score": 2, "creation_date": 1490477936, "post_id": 43011297, "comment_id": 73131862, "body": "While this code snippet may solve the question, <a href=\"http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers\">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion."}, {"owner": {"reputation": 2213, "user_id": 1490636, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/FMa7z.jpg?s=128&g=1", "display_name": "Maksim Kostromin", "link": "https://stackoverflow.com/users/1490636/maksim-kostromin"}, "reply_to_user": {"reputation": 10195, "user_id": 4390212, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/JrUii.jpg?s=128&g=1", "display_name": "DimaSan", "link": "https://stackoverflow.com/users/4390212/dimasan"}, "edited": false, "score": 0, "creation_date": 1492386679, "post_id": 43011297, "comment_id": 73943460, "body": "@DimaSan, you are right, but that thread already have explanations in some posts..."}, {"owner": {"reputation": 10195, "user_id": 4390212, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/JrUii.jpg?s=128&g=1", "display_name": "DimaSan", "link": "https://stackoverflow.com/users/4390212/dimasan"}, "edited": false, "score": 1, "creation_date": 1492388634, "post_id": 43011297, "comment_id": 73943844, "body": "But your snippet is different and though may have a different description, anyway now it is much clearer."}], "tags": [], "owner": {"reputation": 2213, "user_id": 1490636, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/FMa7z.jpg?s=128&g=1", "display_name": "Maksim Kostromin", "link": "https://stackoverflow.com/users/1490636/maksim-kostromin"}, "is_accepted": false, "score": 5, "last_activity_date": 1492387838, "last_edit_date": 1492387838, "creation_date": 1490403016, "answer_id": 43011297, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/43011297#43011297", "title": "Kotlin with JPA: default constructor hell", "body": "<pre><code>@Entity data class Person(/*@Id @GeneratedValue var id: Long? = null,*/\n                          var name: String? = null,\n                          var age: Int? = null)\n</code></pre>\n\n<p>Initial values are requires if you want reuse constructor for different fields, kotlin doesn't allowed nulls. So whenever you planning omit field, use this form in constructor: <code>var field: Type? = defaultValue</code></p>\n\n<p>jpa required no argument constructor:</p>\n\n<pre><code>val entity = Person() // Person(name=null, age=null)\n</code></pre>\n\n<p>there is no code duplication. If you need construct entity and only setup age, use this form:</p>\n\n<pre><code>val entity = Person(age = 33) // Person(name=null, age=33)\n</code></pre>\n\n<p>there is no magic (just read documentation)</p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 1171959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64a65bcaa84c09d3a26703c222e94023?s=128&d=identicon&r=PG", "display_name": "souleyHype", "link": "https://stackoverflow.com/users/1171959/souleyhype"}, "is_accepted": false, "score": 5, "last_activity_date": 1495168998, "creation_date": 1495168998, "answer_id": 44061616, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/44061616#44061616", "title": "Kotlin with JPA: default constructor hell", "body": "<p>I'm a nub myself but seems you have to explicit initializer and fallback to null value like this</p>\n\n<pre><code>@Entity\nclass Person(val name: String? = null, val age: Int? = null)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 99, "user_id": 1617638, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lcGVA.jpg?s=128&g=1", "display_name": "allenjom", "link": "https://stackoverflow.com/users/1617638/allenjom"}, "is_accepted": false, "score": 1, "last_activity_date": 1506712575, "creation_date": 1506712575, "answer_id": 46495584, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/46495584#46495584", "title": "Kotlin with JPA: default constructor hell", "body": "<p>These Gradle build lines helped me:<br>\n<a href=\"https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.jpa/1.1.50\" rel=\"nofollow noreferrer\">https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.jpa/1.1.50</a>.<br>\nAt least, it builds in IntelliJ. It's failing on the command line at the moment. </p>\n\n<p>And I have a</p>\n\n<pre><code>class LtreeType : UserType\n</code></pre>\n\n<p>and</p>\n\n<pre><code>    @Column(name = \"path\", nullable = false, columnDefinition = \"ltree\")\n    @Type(type = \"com.tgt.unitplanning.data.LtreeType\")\n    var path: String\n</code></pre>\n\n<p>var path: LtreeType did not work.</p>\n"}, {"comments": [{"owner": {"reputation": 1571, "user_id": 4187837, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/797990d500303b57e9f9042f73ded007?s=128&d=identicon&r=PG&f=1", "display_name": "Gavin", "link": "https://stackoverflow.com/users/4187837/gavin"}, "edited": false, "score": 0, "creation_date": 1563557057, "post_id": 56961169, "comment_id": 100752770, "body": "I am working with Micronaut, and I got it to work with version 1.3.41.  Gradle says my Kotlin version is 1.3.21 and I didnt see any issues, all the other plugins (&#39;kapt/jvm/allopen&#39;) are on 1.3.21 Also I am using the plugins DSL format"}], "tags": [], "owner": {"reputation": 1735, "user_id": 1999083, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6f90d942609fbf3c575d75498a1af4fa?s=128&d=identicon&r=PG", "display_name": "Liang Zhou", "link": "https://stackoverflow.com/users/1999083/liang-zhou"}, "is_accepted": false, "score": 1, "last_activity_date": 1562710769, "creation_date": 1562710769, "answer_id": 56961169, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/56961169#56961169", "title": "Kotlin with JPA: default constructor hell", "body": "<p>If you added the gradle plugin <a href=\"https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.jpa\" rel=\"nofollow noreferrer\">https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.jpa</a> but did not work, chances are the version is out dated. I was on 1.3.30 and it didn't work for me. After I upgraded to 1.3.41(latest at time of writing), it worked.</p>\n\n<p>Note: kotlin version should be the same as this plugin, eg: this is how I added both:</p>\n\n<pre><code>buildscript {\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"org.jetbrains.kotlin:kotlin-noarg:$kotlin_version\"\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 31, "user_id": 11496858, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0cafa99c4bae6d4a0cc234d62b2c49a6?s=128&d=identicon&r=PG&f=1", "display_name": "desertfox94", "link": "https://stackoverflow.com/users/11496858/desertfox94"}, "is_accepted": false, "score": 3, "last_activity_date": 1571219584, "creation_date": 1571219584, "answer_id": 58410514, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/58410514#58410514", "title": "Kotlin with JPA: default constructor hell", "body": "<p>As stated above you have to use the no <code>no-arg</code> plugin provided by Jetbrains.</p>\n\n<p><strong>If you are using Eclispe</strong> you may have to edit the Kotlin Compiler Settings.</p>\n\n<p>Window > Preferences > Kotlin > Compiler</p>\n\n<p>Activate the <code>no-arg</code> Plugin in the Compiler Plugins section.</p>\n\n<p>See: <a href=\"https://discuss.kotlinlang.org/t/kotlin-allopen-plugin-doesnt-work-with-sts/13277/10\" rel=\"nofollow noreferrer\">https://discuss.kotlinlang.org/t/kotlin-allopen-plugin-doesnt-work-with-sts/13277/10</a></p>\n"}, {"tags": [], "owner": {"reputation": 3423, "user_id": 1820583, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/uo0dh.jpg?s=128&g=1", "display_name": "edubriguenti", "link": "https://stackoverflow.com/users/1820583/edubriguenti"}, "is_accepted": false, "score": 6, "last_activity_date": 1600641682, "creation_date": 1600641682, "answer_id": 63984320, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/63984320#63984320", "title": "Kotlin with JPA: default constructor hell", "body": "<p>Adding the JPA plugin in gradle worked for me:</p>\n<pre><code>plugins {\n   id(&quot;org.springframework.boot&quot;) version &quot;2.3.4.RELEASE&quot;\n   id(&quot;io.spring.dependency-management&quot;) version &quot;1.0.10.RELEASE&quot;\n   kotlin(&quot;jvm&quot;) version &quot;1.3.72&quot;\n   kotlin(&quot;plugin.spring&quot;) version &quot;1.3.72&quot;\n   kotlin(&quot;plugin.jpa&quot;) version &quot;1.3.72&quot;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 151, "user_id": 11091564, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-ugK_UjZU_s4/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQNqPpsgbu3390HAWkDUwGRu3Miu0Q/mo/photo.jpg?sz=128", "display_name": "Nishant ", "link": "https://stackoverflow.com/users/11091564/nishant"}, "is_accepted": false, "score": 0, "last_activity_date": 1608303295, "creation_date": 1608303295, "answer_id": 65359181, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell/65359181#65359181", "title": "Kotlin with JPA: default constructor hell", "body": "<p>Refer to the Interface method mentioned by @tin-ng in the following thread:</p>\n<p><a href=\"https://stackoverflow.com/questions/52149389/hibernate-jpa-projection-with-query\">hibernate jpa projection with @Query</a></p>\n<p>Convert <code>class Person(val name: String, val age: Int)</code> to <code>Interface Person{ val name: String val age: Int }</code></p>\n"}], "owner": {"reputation": 110088, "user_id": 2196460, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mAcQx.png?s=128&g=1", "display_name": "hotkey", "link": "https://stackoverflow.com/users/2196460/hotkey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52544, "favorite_count": 20, "accepted_answer_id": 41365380, "answer_count": 13, "score": 150, "last_activity_date": 1608303295, "creation_date": 1439747641, "question_id": 32038177, "link": "https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell", "title": "Kotlin with JPA: default constructor hell", "body": "<p>As JPA requires, <code>@Entity</code> classes should have a default (non-arg) constructor to instantiate the objects when retrieving them from the database.</p>\n\n<p>In Kotlin, properties are very convenient to declare within the primary constructor, as in the following example:</p>\n\n<pre><code>class Person(val name: String, val age: Int) { /* ... */ }\n</code></pre>\n\n<p>But when the non-arg constructor is declared as a secondary one it requires values for the primary constructor to be passed, so some valid values are needed for them, like here:</p>\n\n<pre><code>@Entity\nclass Person(val name: String, val age: Int) {\n    private constructor(): this(\"\", 0)\n}\n</code></pre>\n\n<p>In case when the properties have some more complex type than just <code>String</code> and <code>Int</code> and they're non-nullable, it looks totally bad to provide the values for them, especially when there's much code in primary constructor and <code>init</code> blocks and when the parameters are actively used -- when they're to be reassigned through reflection most of the code is going to be executed again.</p>\n\n<p>Moreover, <code>val</code>-properties cannot be reassigned after the constructor executes, so immutability is also lost.</p>\n\n<p>So the question is: how can Kotlin code be adapted to work with JPA without code duplication, choosing \"magic\" initial values and loss of immutability?</p>\n\n<p>P.S. Is it true that Hibernate aside of JPA can construct objects with no default constructor?</p>\n"}, {"tags": ["kotlin", "dagger-2"], "answers": [{"comments": [{"owner": {"reputation": 13065, "user_id": 794365, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c31788075acf2801187ed1c25bd797a2?s=128&d=identicon&r=PG", "display_name": "ademar111190", "link": "https://stackoverflow.com/users/794365/ademar111190"}, "edited": false, "score": 2, "creation_date": 1466973727, "post_id": 32034975, "comment_id": 63525909, "body": "Thank you, just an addendum In my case I need to use &#39;kaptTest`"}], "tags": [], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "is_accepted": true, "score": 19, "last_activity_date": 1439741417, "last_edit_date": 1439741417, "creation_date": 1439727488, "answer_id": 32034975, "question_id": 32029302, "link": "https://stackoverflow.com/questions/32029302/dagger-2-in-unit-tests-with-kotlin/32034975#32034975", "title": "Dagger 2 in Unit tests with Kotlin", "body": "<p>Make sure to add <code>kaptAndroidTest 'com.google.dagger:dagger-compiler:2.0'</code> to your dependencies.</p>\n"}], "owner": {"reputation": 8698, "user_id": 385219, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b827ab51bb27d9ca9f607dcd8fbedb96?s=128&d=identicon&r=PG", "display_name": "Martynas Jurkus", "link": "https://stackoverflow.com/users/385219/martynas-jurkus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1277, "favorite_count": 1, "accepted_answer_id": 32034975, "answer_count": 1, "score": 6, "last_activity_date": 1439741417, "creation_date": 1439672437, "question_id": 32029302, "link": "https://stackoverflow.com/questions/32029302/dagger-2-in-unit-tests-with-kotlin", "title": "Dagger 2 in Unit tests with Kotlin", "body": "<p>In <a href=\"http://blog.jetbrains.com/kotlin/2015/05/kapt-annotation-processing-for-kotlin/\" rel=\"noreferrer\">Kotlin Blog</a> there is explanation how to make Dagger 2 work with Kotlin.</p>\n\n<p>Everything worked like charm. So far\u2026 I just couldn\u2019t make it to work in tests.\n<code>DaggerTestSomeComponent</code> was not generated from <code>TestSomeComponent : SomeComponent</code>.<br>\nI\u2019ve tried various combinations. Including creating absolutely new component just in tests. Still nothing.<br>\nIs there any workaround or could I provide some other details?</p>\n"}, {"tags": ["kotlin"], "answers": [{"tags": [], "owner": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "is_accepted": true, "score": 3, "last_activity_date": 1439599768, "creation_date": 1439599768, "answer_id": 32020431, "question_id": 32019089, "link": "https://stackoverflow.com/questions/32019089/kotlin-overload-resolution-ambiguity-in-the-standard-library/32020431#32020431", "title": "Kotlin overload resolution ambiguity in the standard library", "body": "<p>This seems to be caused by multiple conflicting versions of the Kotlin stdlib on my classpath (caused by a long standing defect in Gradle IntelliJ integration).  Once they were version conflict resolved, the compiler no longer complains.</p>\n"}], "owner": {"reputation": 23746, "user_id": 510017, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acdea246313ec67505a196fff761e514?s=128&d=identicon&r=PG", "display_name": "jkschneider", "link": "https://stackoverflow.com/users/510017/jkschneider"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1193, "favorite_count": 0, "accepted_answer_id": 32020431, "answer_count": 1, "score": 3, "last_activity_date": 1439599768, "creation_date": 1439588649, "last_edit_date": 1439589666, "question_id": 32019089, "link": "https://stackoverflow.com/questions/32019089/kotlin-overload-resolution-ambiguity-in-the-standard-library", "title": "Kotlin overload resolution ambiguity in the standard library", "body": "<p>In Kotlin 0.12.1230 it appears that deprecated APIs are blocking the use of their replacements.</p>\n\n<p>For example, the compiler complains about the following snippet because it \"cannot choose among... candidates without completing type inference\"</p>\n\n<pre><code>val seq = sequenceOf(\"1\")\nval first = seq.firstOrNull()\n</code></pre>\n\n<p>The candidates are <code>Sequence&lt;T&gt;.firstOrNull</code> and <code>Stream&lt;T&gt;.firstOrNull</code> both of which have identical signatures and <code>Sequence&lt;T&gt;</code> extends <code>Stream&lt;T&gt;</code>.  Furthermore, <code>Stream&lt;T&gt;</code> is deprecated in favor of <code>Sequence&lt;T&gt;</code>.</p>\n\n<p>Attempting to resolve the type inference ambiguity, like you see below, results in the compiler complaining about \"overload resolution ambiguity\".</p>\n\n<pre><code>val seq = sequenceOf(\"1\")\nval first = seq.firstOrNull&lt;String?&gt;()\n</code></pre>\n\n<p>Is there any way to resolve the ambiguity while we wait for deprecated APIs to disappear entirely?</p>\n\n<p>It seems that casting to the least specific type, in this case the deprecated type <code>Stream&lt;T&gt;</code>, accomplishes it, but now my code explicitly depends on a deprecated type when I have no desire to do so:</p>\n\n<pre><code>val seq = sequenceOf(\"1\")\nval first = (seq as Stream&lt;String&gt;).firstOrNull()\n</code></pre>\n\n<p>Hopefully there is a better way?</p>\n"}, {"tags": ["android", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "edited": false, "score": 0, "creation_date": 1439587077, "post_id": 32018754, "comment_id": 51940068, "body": "Here&#39;s the relevant issue on the Kotlin bug tracker: <a href=\"https://youtrack.jetbrains.com/issue/KT-6029\" rel=\"nofollow noreferrer\">youtrack.jetbrains.com/issue/KT-6029</a>"}, {"owner": {"reputation": 825, "user_id": 1617914, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a810b804595dc07df9cd328d4f86d09?s=128&d=identicon&r=PG", "display_name": "pedronveloso", "link": "https://stackoverflow.com/users/1617914/pedronveloso"}, "edited": false, "score": 0, "creation_date": 1439591170, "post_id": 32018754, "comment_id": 51941438, "body": "Worked! Thank you :)  Up-voted the issue, this should be something supported with having to import the whole thing. Wish that at least the IDE would be smart enough in this case."}], "tags": [], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "is_accepted": true, "score": 5, "last_activity_date": 1439586888, "creation_date": 1439586888, "answer_id": 32018754, "question_id": 32016142, "link": "https://stackoverflow.com/questions/32016142/kotlin-accessing-constant-in-inner-class-from-java/32018754#32018754", "title": "Kotlin accessing constant in inner class from Java", "body": "<p>I can confirm, accessing <code>MediaRecorder.AudioSource.MIC</code> doesn't work. However, if you import <code>android.media.MediaRecorder.AudioSource</code> manually, you can access <code>AudioSource.MIC</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 825, "user_id": 1617914, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a810b804595dc07df9cd328d4f86d09?s=128&d=identicon&r=PG", "display_name": "pedronveloso", "link": "https://stackoverflow.com/users/1617914/pedronveloso"}, "edited": false, "score": 0, "creation_date": 1443810543, "post_id": 32890680, "comment_id": 53654954, "body": "That&#39;s good to hear. Currently on the M14, waiting for the next one :)"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1452097923, "post_id": 32890680, "comment_id": 57021196, "body": "The issue referenced in the other answer ([KT-6029](youtrack.jetbrains.com/issue/KT-6029)) appears to still be unresolved.  So not sure this made it in the Kotlin betas (M15+)"}], "tags": [], "owner": {"reputation": 4319, "user_id": 4874829, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-cfECAGc8huU/AAAAAAAAAAI/AAAAAAAAAJk/Pebw5H-quLo/photo.jpg?sz=128", "display_name": "Yoav Sternberg", "link": "https://stackoverflow.com/users/4874829/yoav-sternberg"}, "is_accepted": false, "score": 0, "last_activity_date": 1452187236, "last_edit_date": 1452187236, "creation_date": 1443711298, "answer_id": 32890680, "question_id": 32016142, "link": "https://stackoverflow.com/questions/32016142/kotlin-accessing-constant-in-inner-class-from-java/32890680#32890680", "title": "Kotlin accessing constant in inner class from Java", "body": "<p>I can confirm it works in Kotlin Beta 4, and probably on older versions.</p>\n\n<pre><code>ContactsContract.Contacts._ID\n</code></pre>\n"}], "owner": {"reputation": 825, "user_id": 1617914, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a810b804595dc07df9cd328d4f86d09?s=128&d=identicon&r=PG", "display_name": "pedronveloso", "link": "https://stackoverflow.com/users/1617914/pedronveloso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 744, "favorite_count": 0, "accepted_answer_id": 32018754, "answer_count": 2, "score": 3, "last_activity_date": 1452199301, "creation_date": 1439575323, "last_edit_date": 1452199301, "question_id": 32016142, "link": "https://stackoverflow.com/questions/32016142/kotlin-accessing-constant-in-inner-class-from-java", "title": "Kotlin accessing constant in inner class from Java", "body": "<p><strong>NOTE</strong>: This issue has been resolved since Kotlin 1.0 beta version (at least). Keeping the rest of the contents intact for historical reason.</p>\n\n<hr>\n\n<p>I'm using Kotlin with Android and I'm trying to use some constants from the SDK, like this one:</p>\n\n<pre><code>MediaRecorder.AudioSource.MIC;\n</code></pre>\n\n<p>It doesn't see AudioSource, so it doesn't see the MIC as well. I've tried changing the imports, cleaning the project. Nothing worked so far. I've temporarily solved it by importing it in a Java class, which worked just fine, and then I just refer to my Java class from my Kotlin file,but I would really like to know why this happens and how I can avoid having that Java class.</p>\n"}, {"tags": ["android", "ios", "swift", "kotlin"], "answers": [{"tags": [], "owner": {"reputation": 1122, "user_id": 2796939, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea7dc1f638552154e828d4cce7634864?s=128&d=identicon&r=PG", "display_name": "Sipty", "link": "https://stackoverflow.com/users/2796939/sipty"}, "is_accepted": true, "score": 6, "last_activity_date": 1439478674, "creation_date": 1439478674, "answer_id": 31992153, "question_id": 31991889, "link": "https://stackoverflow.com/questions/31991889/writing-apps-for-android-with-swift/31992153#31992153", "title": "Writing Apps for Android with Swift", "body": "<p>As far as I know, there is no way to write apps for iOS and directly port them to Android.</p>\n\n<p>What you can do is develop the bulk of the app in C++, while having calls to the GUI through JNI java functions.</p>\n\n<p>With that being said, Android isn't scary at all, just face it straight on and you can do it. </p>\n"}], "owner": {"reputation": 3512, "user_id": 989631, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/26399b291c327e3fbdac2e75e8705dd3?s=128&d=identicon&r=PG", "display_name": "B\u0142a\u017cej", "link": "https://stackoverflow.com/users/989631/b%c5%82a%c5%bcej"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 442, "favorite_count": 0, "closed_date": 1439481708, "accepted_answer_id": 31992153, "answer_count": 1, "score": -7, "last_activity_date": 1439478674, "creation_date": 1439478072, "question_id": 31991889, "link": "https://stackoverflow.com/questions/31991889/writing-apps-for-android-with-swift", "closed_reason": "Opinion-based", "title": "Writing Apps for Android with Swift", "body": "<p>First of all I'm focused on iOS but but I've done ~2 apps for android in Java and it was horrible. I can't explain it why. Was it Java or Android itself but I hate it so much that when now I have to write another app for Android so I'm looking every option for me. This is what I found:</p>\n\n<ul>\n<li><strong>Kotlin</strong> - people said this is \"Swift for android\" but I still stuck with Android libraries.</li>\n<li><strong>Silver</strong> - \"you can use Swift to write code directly against the .NET, Java, Android and Cocoa APIs. And you can also share a lot of non-UI code between platforms.\" But at this moment I've trouble with download it. </li>\n</ul>\n\n<p>What's your opinion in this matter? </p>\n\n<p>Do you have any experience with those two solutions?</p>\n"}]