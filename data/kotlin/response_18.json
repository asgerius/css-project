[{"tags": ["thread-safety", "singleton", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 3548, "user_id": 1185087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6afade4b139c906d08b90d8b2b36f7db?s=128&d=identicon&r=PG", "display_name": "user1185087", "link": "https://stackoverflow.com/users/1185087/user1185087"}, "edited": false, "score": 1, "creation_date": 1523972417, "post_id": 30190567, "comment_id": 86775059, "body": "<code>object MySingleton</code> is decompiled to public final <code>class MySingleton { public static final MySingleton INSTANCE; static { MySingleton var0 = new MySingleton(); INSTANCE = var0;}}</code> Is the <code>final</code> modifier really preventing the creation of multiple instances? Or will there occur an exception if two threads are entering the static block at the same time and try to create and assign the final variable. Cause there is no <code>synchronized</code>"}, {"owner": {"reputation": 4016, "user_id": 1460833, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bc4821b9c16457694f503b42831198f1?s=128&d=identicon&r=PG", "display_name": "Sergey Mashkov", "link": "https://stackoverflow.com/users/1460833/sergey-mashkov"}, "reply_to_user": {"reputation": 3548, "user_id": 1185087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6afade4b139c906d08b90d8b2b36f7db?s=128&d=identicon&r=PG", "display_name": "user1185087", "link": "https://stackoverflow.com/users/1185087/user1185087"}, "edited": false, "score": 3, "creation_date": 1525162093, "post_id": 30190567, "comment_id": 87243526, "body": "@user1185087 the answer is &quot;yes and no&quot;. Static initialization block is exeucted when a class is loaded by classloader (in class loader&#39;s native implementation). Classloader will never load a class concurrently so static init block is always &quot;synchonized&quot;. This is true not just for Kotlin but for any JVM language. From this point of view the answer is &quot;yes&quot;. However there could be multple class loaders present so you can load a class several times and get several singleton&#39;s instances. This is not bug but a feature."}, {"owner": {"reputation": 1715, "user_id": 910095, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/04e96728ed86fffbb7960da7fe34cd47?s=128&d=identicon&r=PG", "display_name": "Nikola Mihajlovi\u0107", "link": "https://stackoverflow.com/users/910095/nikola-mihajlovi%c4%87"}, "edited": false, "score": 0, "creation_date": 1537312887, "post_id": 30190567, "comment_id": 91736622, "body": "How about a global variable initializer? I assume it is the same"}], "tags": [], "owner": {"reputation": 4016, "user_id": 1460833, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bc4821b9c16457694f503b42831198f1?s=128&d=identicon&r=PG", "display_name": "Sergey Mashkov", "link": "https://stackoverflow.com/users/1460833/sergey-mashkov"}, "is_accepted": true, "score": 33, "last_activity_date": 1431518536, "last_edit_date": 1431518536, "creation_date": 1431432844, "answer_id": 30190567, "question_id": 30179793, "link": "https://stackoverflow.com/questions/30179793/are-kotlins-singletons-thread-safe/30190567#30190567", "title": "Are Kotlin&#39;s singletons thread safe?", "body": "<p>Kotlin \"object\" is thread-safe by construction. As you can see in any decompile/dumping tool, declared object is just final class with static instance initialization + language syntax sugar to simplify instance access</p>\n"}], "owner": {"reputation": 1863, "user_id": 867423, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5de270b3122db1bf95bf6f6de0cba9f9?s=128&d=identicon&r=PG", "display_name": "alfongj", "link": "https://stackoverflow.com/users/867423/alfongj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4364, "favorite_count": 1, "accepted_answer_id": 30190567, "answer_count": 1, "score": 24, "last_activity_date": 1431518536, "creation_date": 1431390582, "question_id": 30179793, "link": "https://stackoverflow.com/questions/30179793/are-kotlins-singletons-thread-safe", "title": "Are Kotlin&#39;s singletons thread safe?", "body": "<p>Are Kotlin singletons (more specifically, object declarations) thread-safe by construction? If not, what is the best practice to write thread safe singletons in Kotlin?</p>\n\n<p>I would guess they are, but I haven't been able to find any explicit statement about it in the docs.</p>\n"}]