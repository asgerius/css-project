[{"tags": ["traits", "kotlin"], "comments": [{"owner": {"reputation": 7879, "user_id": 1269640, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/41b92fffd289939497f29809d146c59d?s=128&d=identicon&r=PG", "display_name": "Salomon BRYS", "link": "https://stackoverflow.com/users/1269640/salomon-brys"}, "edited": false, "score": 1, "creation_date": 1431946307, "post_id": 28298152, "comment_id": 48698160, "body": "The &quot;required class in trait&quot; feature is beeing deprecated and will eventually be removed from Kotlin. Have a look at <a href=\"http://blog.jetbrains.com/kotlin/2015/04/upcoming-changes-and-more/\" rel=\"nofollow noreferrer\">blog.jetbrains.com/kotlin/2015/04/upcoming-changes-and-more</a>"}, {"owner": {"reputation": 3910, "user_id": 4103854, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-EUnmsdTd6P4/AAAAAAAAAAI/AAAAAAAAAGI/TBEWqWgj0wo/photo.jpg?sz=128", "display_name": "Logain", "link": "https://stackoverflow.com/users/4103854/logain"}, "reply_to_user": {"reputation": 7879, "user_id": 1269640, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/41b92fffd289939497f29809d146c59d?s=128&d=identicon&r=PG", "display_name": "Salomon BRYS", "link": "https://stackoverflow.com/users/1269640/salomon-brys"}, "edited": false, "score": 0, "creation_date": 1431946706, "post_id": 28298152, "comment_id": 48698433, "body": "oh, thanks for the update. Too bad, I was actually using that feature u__u I find it useful to explicitly declare the requirements my trait has."}], "answers": [{"tags": [], "owner": {"reputation": 3910, "user_id": 4103854, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-EUnmsdTd6P4/AAAAAAAAAAI/AAAAAAAAAGI/TBEWqWgj0wo/photo.jpg?sz=128", "display_name": "Logain", "link": "https://stackoverflow.com/users/4103854/logain"}, "is_accepted": true, "score": 1, "last_activity_date": 1433364802, "creation_date": 1433364802, "answer_id": 30630488, "question_id": 28298152, "link": "https://stackoverflow.com/questions/28298152/kotlin-superclass-is-not-accessible-from-trait/30630488#30630488", "title": "Kotlin: Superclass is not accessible from trait", "body": "<p>As @Salomon poited out on his comment, this feature will be removed on newer versions of Kotin, making this question no longer valid.</p>\n\n<blockquote>\n  <p>Required Classes</p>\n  \n  <p>Some of you might have heard of this feature: traits in Kotlin can\n  \u201cextend\u201d classes (we actually use the term \u201crequire\u201d).</p>\n  \n  <p>Technically it means that when a class extends such a trait, it must\n  (directly or indirectly) extend the required class as well. This\n  feature has very few use cases, so we are deprecating it.</p>\n</blockquote>\n\n<p>Source: <a href=\"http://blog.jetbrains.com/kotlin/2015/04/upcoming-changes-and-more/\" rel=\"nofollow\">http://blog.jetbrains.com/kotlin/2015/04/upcoming-changes-and-more/</a></p>\n"}], "owner": {"reputation": 3910, "user_id": 4103854, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-EUnmsdTd6P4/AAAAAAAAAAI/AAAAAAAAAGI/TBEWqWgj0wo/photo.jpg?sz=128", "display_name": "Logain", "link": "https://stackoverflow.com/users/4103854/logain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 0, "accepted_answer_id": 30630488, "answer_count": 1, "score": 2, "last_activity_date": 1433364802, "creation_date": 1422964080, "question_id": 28298152, "link": "https://stackoverflow.com/questions/28298152/kotlin-superclass-is-not-accessible-from-trait", "title": "Kotlin: Superclass is not accessible from trait", "body": "<p>In Kotlin, given some class:</p>\n\n<pre><code>public open class A {\n    open fun sayHi() = \"hi\"\n}\n</code></pre>\n\n<p>And a trait T that requires subclasses to extend A :</p>\n\n<pre><code>public trait T : A {\n    override fun sayHi() = super.sayHi() + \" John\"\n}\n</code></pre>\n\n<p>One would expect <code>T.sayHi</code> to be able to call <code>super.sayHi()</code> or the more explicit <code>super&lt;A&gt;.sayHi()</code>, since all the type information is there , but instead it yields <code>Superclass is not accessible from trait</code>.</p>\n\n<p><strong>Question:</strong> </p>\n\n<p>[How] can I override some method from within the trait?</p>\n\n<p><strong>Notes:</strong></p>\n\n<p>Of course, without overriding I could just do:</p>\n\n<pre><code>public trait T : A {\n    fun another() = sayHi() + \" John\"\n}\n</code></pre>\n\n<p>But I do want my trait to be able to \"intercept / be in the middle\".</p>\n\n<p>I had to use some delegate in order to achieve a similar behavior, but I'd like to know if it's possible to do this using traits.</p>\n"}, {"tags": ["java", "kotlin", "extension-function"], "comments": [{"owner": {"reputation": 14380, "user_id": 2102532, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fe51636ca4d4799fe8600414a3bc891b?s=128&d=identicon&r=PG", "display_name": "meskobalazs", "link": "https://stackoverflow.com/users/2102532/meskobalazs"}, "edited": false, "score": 0, "creation_date": 1422953014, "post_id": 28294509, "comment_id": 44941767, "body": "Please elaborate on <i>does not work</i>? Does it compile, throws an exception, or what? Also have you <code>import package com.test.extensions.MyModel</code>?"}, {"owner": {"reputation": 7351, "user_id": 1096567, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ateKI.jpg?s=128&g=1", "display_name": "Lovis", "link": "https://stackoverflow.com/users/1096567/lovis"}, "reply_to_user": {"reputation": 14380, "user_id": 2102532, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fe51636ca4d4799fe8600414a3bc891b?s=128&d=identicon&r=PG", "display_name": "meskobalazs", "link": "https://stackoverflow.com/users/2102532/meskobalazs"}, "edited": false, "score": 0, "creation_date": 1422953796, "post_id": 28294509, "comment_id": 44942171, "body": "@meskobalazs see my edited answer."}, {"owner": {"reputation": 7351, "user_id": 1096567, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ateKI.jpg?s=128&g=1", "display_name": "Lovis", "link": "https://stackoverflow.com/users/1096567/lovis"}, "reply_to_user": {"reputation": 14380, "user_id": 2102532, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fe51636ca4d4799fe8600414a3bc891b?s=128&d=identicon&r=PG", "display_name": "meskobalazs", "link": "https://stackoverflow.com/users/2102532/meskobalazs"}, "edited": false, "score": 0, "creation_date": 1422953825, "post_id": 28294509, "comment_id": 44942185, "body": "@meskobalazs also, I can&#39;t even import that. I can only import <code>com.test.extensions.ExtensionsPackage</code>"}], "answers": [{"comments": [{"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 3, "creation_date": 1451704509, "post_id": 28295149, "comment_id": 56868163, "body": "This answer is not correct, they can be accessed.  See accepted answer."}, {"owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "edited": false, "score": 0, "creation_date": 1460017554, "post_id": 28295149, "comment_id": 60551909, "body": "And the compiler isn&#39;t looking for static methods (especially not Java static methods). It&#39;s looking for extension methods that have been declared or imported in the same file."}], "tags": [], "owner": {"reputation": 744, "user_id": 145060, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/c350b8cb7af002bf12d2f5847a64b14f?s=128&d=identicon&r=PG", "display_name": "johnw188", "link": "https://stackoverflow.com/users/145060/johnw188"}, "is_accepted": false, "score": -3, "last_activity_date": 1422954841, "creation_date": 1422954841, "answer_id": 28295149, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/28295149#28295149", "title": "Accessing Kotlin extension functions from Java", "body": "<p>As far as I can tell this isn't possible. From my reading of the extensions docs, it appears that </p>\n\n<pre><code>public fun MyModel.bar(): Int {\n    return this.name.length()\n}\n</code></pre>\n\n<p>creates a new method with the signature</p>\n\n<pre><code>public static int MyModelBar(MyModel obj) {\n    return obj.name.length();\n}\n</code></pre>\n\n<p>Then, Kotlin maps that function to calls of the form <code>myModel.bar()</code>, where if <code>bar()</code> isn't found in the <code>MyModel</code> class it looks for static methods matching the signature and naming scheme it outputs. <strong>Note that this is just an assumption from their statements about extensions being statically imported and not overriding defined methods. I haven't gotten far enough in their source to know for sure.</strong></p>\n\n<p>So, assuming the above is true there's no way for Kotlin extensions to be called from plain old java code, as the compiler will just see an unknown method being called on an object and error out.</p>\n"}, {"comments": [{"owner": {"reputation": 9774, "user_id": 1150190, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/J2gpx.jpg?s=128&g=1", "display_name": "AbdulMomen \u0639\u0628\u062f\u0627\u0644\u0645\u0624\u0645\u0646", "link": "https://stackoverflow.com/users/1150190/abdulmomen-%d8%b9%d8%a8%d8%af%d8%a7%d9%84%d9%85%d8%a4%d9%85%d9%86"}, "edited": false, "score": 1, "creation_date": 1488010650, "post_id": 28364983, "comment_id": 72050461, "body": "I understood, it means I can&#39;t use extension from Kotlin to Java unless I write static functions?"}, {"owner": {"reputation": 6703, "user_id": 1797950, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/1KyYn.jpg?s=128&g=1", "display_name": "crgarridos", "link": "https://stackoverflow.com/users/1797950/crgarridos"}, "edited": false, "score": 16, "creation_date": 1499096247, "post_id": 28364983, "comment_id": 76756847, "body": "JFYI, You can also change the name of the class with @file:JvmName(&quot;&lt;TheNameThatYouWant&gt;Utils&quot;)."}, {"owner": {"reputation": 595, "user_id": 2980980, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Gn509.jpg?s=128&g=1", "display_name": "AmirG", "link": "https://stackoverflow.com/users/2980980/amirg"}, "edited": false, "score": 4, "creation_date": 1508937594, "post_id": 28364983, "comment_id": 80814040, "body": "what if i create an extension with parameters?"}, {"owner": {"reputation": 37983, "user_id": 1843331, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/aVX5R.jpg?s=128&g=1", "display_name": "Tim", "link": "https://stackoverflow.com/users/1843331/tim"}, "reply_to_user": {"reputation": 595, "user_id": 2980980, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Gn509.jpg?s=128&g=1", "display_name": "AmirG", "link": "https://stackoverflow.com/users/2980980/amirg"}, "edited": false, "score": 5, "creation_date": 1523265325, "post_id": 28364983, "comment_id": 86472365, "body": "@AmirG parameters will follow the instance. In this case it would be <code>bar(model, param1, param2);</code>"}, {"owner": {"reputation": 1505, "user_id": 4138572, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ReX3s.jpg?s=128&g=1", "display_name": "Vivek Gupta", "link": "https://stackoverflow.com/users/4138572/vivek-gupta"}, "edited": false, "score": 0, "creation_date": 1543304078, "post_id": 28364983, "comment_id": 93858976, "body": "This was really a quick help, Thanks a lot"}], "tags": [], "owner": {"reputation": 2951, "user_id": 916370, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0eea76e95785761bee36ffcc0bdd7b33?s=128&d=identicon&r=PG", "display_name": "goodwinnk", "link": "https://stackoverflow.com/users/916370/goodwinnk"}, "is_accepted": true, "score": 267, "last_activity_date": 1488148721, "last_edit_date": 1488148721, "creation_date": 1423222799, "answer_id": 28364983, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/28364983#28364983", "title": "Accessing Kotlin extension functions from Java", "body": "<p>All Kotlin functions declared in a file will be compiled by default to static methods in a class within the same package and with a name derived from the Kotlin source file (First letter capitalized and <em>\".kt\"</em> extension replaced with the <em>\"Kt\"</em> suffix). Methods generated for extension functions will have an additional first parameter with the extension function receiver type.</p>\n\n<p>Applying it to the original question, Java compiler will see Kotlin source file with the name <em>example.kt</em></p>\n\n<pre><code>package com.test.extensions\n\npublic fun MyModel.bar(): Int { /* actual code */ }\n</code></pre>\n\n<p>as if the following Java class was declared</p>\n\n<pre><code>package com.test.extensions\n\nclass ExampleKt {\n    public static int bar(MyModel receiver) { /* actual code */ }\n}\n</code></pre>\n\n<p>As nothing happens with the extended class from the Java point of view, you can't just use dot-syntax to access such methods. But they are still callable as normal Java static methods:</p>\n\n<pre><code>import com.test.extensions.ExampleKt;\n\nMyModel model = new MyModel();\nExampleKt.bar(model);\n</code></pre>\n\n<p>Static import can be used for ExampleKt class:</p>\n\n<pre><code>import static com.test.extensions.ExampleKt.*;\n\nMyModel model = new MyModel();\nbar(model);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 19204, "user_id": 1151521, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/aa1c3ce93537e4a6f189e2b1dd41a925?s=128&d=identicon&r=PG", "display_name": "Aleksandr Dubinsky", "link": "https://stackoverflow.com/users/1151521/aleksandr-dubinsky"}, "is_accepted": false, "score": 35, "last_activity_date": 1567388564, "last_edit_date": 1567388564, "creation_date": 1459948895, "answer_id": 36452456, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/36452456#36452456", "title": "Accessing Kotlin extension functions from Java", "body": "<p>Kotlin top-level extension function are compiled as Java static methods.</p>\n\n<p>Given Kotlin file <code>Extensions.kt</code> in package <code>foo.bar</code> containing:</p>\n\n<pre><code>fun String.bar(): Int {\n    ...\n}\n</code></pre>\n\n<p>The equivalent Java code would be:</p>\n\n<pre><code>package foo.bar;\n\nclass ExtensionsKt {\n    public static int bar(String receiver) { \n        ...\n    }\n}\n</code></pre>\n\n<p>Unless, that is, <code>Extensions.kt</code> contained the line</p>\n\n<pre><code>@file:JvmName(\"DemoUtils\")\n</code></pre>\n\n<p>In which case the Java static class would be named <code>DemoUtils</code></p>\n\n<p>In Kotlin, extension methods can be declared in other ways. (For example, as a member function or as an extension of a companion object.)</p>\n"}, {"comments": [{"owner": {"reputation": 1069, "user_id": 2172566, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17f5502f74c9d40b40cc238c9d0ca171?s=128&d=identicon&r=PG", "display_name": "forresthopkinsa", "link": "https://stackoverflow.com/users/2172566/forresthopkinsa"}, "edited": false, "score": 0, "creation_date": 1539638745, "post_id": 47929629, "comment_id": 92566983, "body": "Why the downvote? My answer is correct and original."}], "tags": [], "owner": {"reputation": 1069, "user_id": 2172566, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17f5502f74c9d40b40cc238c9d0ca171?s=128&d=identicon&r=PG", "display_name": "forresthopkinsa", "link": "https://stackoverflow.com/users/2172566/forresthopkinsa"}, "is_accepted": false, "score": -1, "last_activity_date": 1513875937, "creation_date": 1513875937, "answer_id": 47929629, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/47929629#47929629", "title": "Accessing Kotlin extension functions from Java", "body": "<p>The other answers here cover the case of calling an extension function located at the top level of a Kotlin package file.</p>\n\n<p>However, my case was that I needed to call an Extension function located inside a Class. Specifically, I was dealing with an Object.</p>\n\n<p>The solution is <em>incredibly simple</em>.</p>\n\n<p>All you have to do is annotate your extension function as <code>@JvmStatic</code>, and voila! Your Java code will be able to access it and use it.</p>\n"}, {"tags": [], "owner": {"reputation": 8237, "user_id": 2425851, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/fFyvZ.png?s=128&g=1", "display_name": "NickUnuchek", "link": "https://stackoverflow.com/users/2425851/nickunuchek"}, "is_accepted": false, "score": 0, "last_activity_date": 1515097610, "last_edit_date": 1515097610, "creation_date": 1515095863, "answer_id": 48102646, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/48102646#48102646", "title": "Accessing Kotlin extension functions from Java", "body": "<p>You need to duplicate your functions in the class files:</p>\n\n<p>Create Kotlin file , for ex Utils.kt</p>\n\n<p>Enter the code</p>\n\n<pre><code>  class Utils {\n                companion object {\n                    @JvmStatic\n                    fun String.getLength(): Int {//duplicate of func for java\n                        return this.length\n                    }\n                }\n            }\n\n        fun String.getLength(): Int {//kotlin extension function\n            return this.length\n        }\n</code></pre>\n\n<p><strong>OR</strong></p>\n\n<pre><code>class Utils {\n    companion object {\n\n        @JvmStatic\n        fun getLength(s: String): Int {//init func for java\n            return s.length\n        }\n    }\n}\n\nfun String.getLength(): Int {//kotlin extension function\n    return Utils.Companion.getLength(this)//calling java extension function in Companion\n}\n</code></pre>\n\n<p><strong>In kotlin use:</strong></p>\n\n<pre><code>val str = \"\"\nval lenth = str.getLength()\n</code></pre>\n\n<p><strong>In Java use this:</strong></p>\n\n<pre><code>String str = \"\";\n Integer lenth = Utils.getLength(str);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2546, "user_id": 2477084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8b306fbe92f324ae9717c03ec7651116?s=128&d=identicon&r=PG", "display_name": "Tomas Bjerre", "link": "https://stackoverflow.com/users/2477084/tomas-bjerre"}, "is_accepted": false, "score": -2, "last_activity_date": 1534863655, "creation_date": 1534863655, "answer_id": 51951547, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/51951547#51951547", "title": "Accessing Kotlin extension functions from Java", "body": "<p>When you extend a class like this:</p>\n\n<pre><code>fun String.concatenatedLength(str: String): Int {\n    return (this.length + str.length)\n}\n\nfun f() {\n    var len = \"one string\".concatenatedLength(\"another string\")\n    println(len)\n}\n</code></pre>\n\n<p>It will compile to this:</p>\n\n<pre><code>import kotlin.jvm.internal.Intrinsics;\nimport org.jetbrains.annotations.NotNull;\n\npublic final class ExampleKt {\n  public static final int concatenatedLength(@NotNull String $receiver, @NotNull String str) {\n    Intrinsics.checkParameterIsNotNull((Object) $receiver, (String) \"$receiver\");\n    Intrinsics.checkParameterIsNotNull((Object) str, (String) \"str\");\n    return $receiver.length() + str.length();\n  }\n\n  public static final void f() {\n    int len = ExampleKt.concatenatedLength(\"one string\", \"another string\");\n    System.out.println(len);\n  }\n}\n</code></pre>\n\n<p>There are more <a href=\"https://github.com/tomasbjerre/yet-another-kotlin-vs-java-comparison\" rel=\"nofollow noreferrer\">examples here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 10799, "user_id": 859742, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/04e2b9fa88968c46c7b53c84151843f6?s=128&d=identicon&r=PG", "display_name": "Ilker Baltaci", "link": "https://stackoverflow.com/users/859742/ilker-baltaci"}, "is_accepted": false, "score": 8, "last_activity_date": 1538402188, "last_edit_date": 1538402188, "creation_date": 1538401822, "answer_id": 52592641, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/52592641#52592641", "title": "Accessing Kotlin extension functions from Java", "body": "<p>I have a Kotlin file called NumberFormatting.kt that has the following function</p>\n\n<pre><code>fun Double.formattedFuelAmountString(): String? {\n    val format = NumberFormat.getNumberInstance()\n    format.minimumFractionDigits = 2\n    format.maximumFractionDigits = 2\n    val string = format.format(this)\n    return string\n}\n</code></pre>\n\n<p>In java  I simple access it over the file <strong>NumberFormattingKt</strong> in the following way after the required import    <code>import ....extensions.NumberFormattingKt;</code></p>\n\n<pre><code>String literString = NumberFormattingKt.formattedFuelAmountString(item.getAmount());\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 26106, "user_id": 485337, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/VAz9B.jpg?s=128&g=1", "display_name": "Adam Arold", "link": "https://stackoverflow.com/users/485337/adam-arold"}, "is_accepted": false, "score": 6, "last_activity_date": 1539180805, "creation_date": 1539180805, "answer_id": 52742253, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/52742253#52742253", "title": "Accessing Kotlin extension functions from Java", "body": "<p>You can always see the <strong>actual</strong> Java code which is getting generated from your Kotlin code by going to <code>Tools &gt; Kotlin &gt; Show Kotlin Bytecode</code>, then clicking <code>Decompile</code>. This can help you tremendously. In your case the Java code will look like this if you have <code>MyModelExtensions.kt</code></p>\n\n<pre><code>public final class MyModelExtensionsKt {\n   public static final int bar(@NotNull MyModel $receiver) {\n      Intrinsics.checkParameterIsNotNull($receiver, \"$receiver\");\n      return $receiver.getName().length();\n   }\n}\n</code></pre>\n\n<p>you can improve over this by using <code>@JvmName</code> on the file containing <code>bar</code>:</p>\n\n<pre><code>@file:JvmName(\"MyModels\")\npackage io.sspinc.datahub.transformation\n\npublic fun MyModel.bar(): Int {\n    return this.name.length\n}\n</code></pre>\n\n<p>and it will result in this code:</p>\n\n<pre><code>public final class MyModels {\n   public static final int bar(@NotNull MyModel $receiver) {\n      Intrinsics.checkParameterIsNotNull($receiver, \"$receiver\");\n      return $receiver.getName().length();\n   }\n}\n</code></pre>\n\n<p>Using <code>MyModels</code> is in line with what Effective Java suggests for utility classes. You can also rename your method like this:</p>\n\n<pre><code>public fun MyModel.extractBar(): Int {\n    return this.name.length\n}\n</code></pre>\n\n<p>then from the Java side it will look idiomatic:</p>\n\n<pre><code>MyModels.extractBar(model);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9, "user_id": 4829484, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iASin.png?s=128&g=1", "display_name": "Cristian D&#237;ez", "link": "https://stackoverflow.com/users/4829484/cristian-d%c3%adez"}, "is_accepted": false, "score": -1, "last_activity_date": 1586472971, "last_edit_date": 1586472971, "creation_date": 1586472607, "answer_id": 61131472, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/61131472#61131472", "title": "Accessing Kotlin extension functions from Java", "body": "<p>It works for me:</p>\n\n<p>Kotlin\n<a href=\"https://i.stack.imgur.com/t1YLs.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/t1YLs.png\" alt=\"kotlin\"></a></p>\n\n<p>Java code\n<a href=\"https://i.stack.imgur.com/koUIi.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/koUIi.png\" alt=\"enter image description here\"></a></p>\n\n<p>My project is an old android project created with Java; now I created the first kotlin file and added String extensions\nfun String.isNotNullOrEmpty(): Boolean {... }</p>\n\n<p>and I could call it from java file using:\nStringUtilsKt.isNotNullOrEmpty(thestring). </p>\n\n<p>My kotlin file name is StringUtils</p>\n"}, {"tags": [], "owner": {"reputation": 1072, "user_id": 6330489, "user_type": "registered", "accept_rate": 0, "profile_image": "https://graph.facebook.com/831813746924822/picture?type=large", "display_name": "Aziz", "link": "https://stackoverflow.com/users/6330489/aziz"}, "is_accepted": false, "score": 0, "last_activity_date": 1614450728, "creation_date": 1614450728, "answer_id": 66402134, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java/66402134#66402134", "title": "Accessing Kotlin extension functions from Java", "body": "<p>With newer <strong>KotlinEx</strong>, you can directly call extension in java</p>\n<pre><code>ExtensionFileName.foo(field1...)\n</code></pre>\n<p>Basically, what it does is, it makes the receiver as first arguement and other arguments remain being at the same place</p>\n<p>So For eg.</p>\n<p>You have extension(in file Extension.kt)</p>\n<pre><code>Context.showToast(message:String){ \n...\n}\n</code></pre>\n<p>In Java, you call it as</p>\n<pre><code>ExtensionKt.showToast(context, message);\n</code></pre>\n"}], "owner": {"reputation": 7351, "user_id": 1096567, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ateKI.jpg?s=128&g=1", "display_name": "Lovis", "link": "https://stackoverflow.com/users/1096567/lovis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 48186, "favorite_count": 19, "accepted_answer_id": 28364983, "answer_count": 10, "score": 185, "last_activity_date": 1614450728, "creation_date": 1422952676, "last_edit_date": 1422953746, "question_id": 28294509, "link": "https://stackoverflow.com/questions/28294509/accessing-kotlin-extension-functions-from-java", "title": "Accessing Kotlin extension functions from Java", "body": "<p>Is it possible to access extension functions from Java code?</p>\n\n<p>I defined the extension function in a Kotlin file.</p>\n\n<pre><code>package com.test.extensions\n\nimport com.test.model.MyModel\n\n/**\n *\n */\npublic fun MyModel.bar(): Int {\n    return this.name.length()\n}\n</code></pre>\n\n<p>Where <code>MyModel</code> is a (generated) java class.\nNow, I wanted to access it in my normal java code:</p>\n\n<pre><code>MyModel model = new MyModel();\nmodel.bar();\n</code></pre>\n\n<p>However, that doesn't work. <strong>The IDE won't recognize the <code>bar()</code> method and compilation fails.</strong> </p>\n\n<p>What does work is using with a static function from kotlin:</p>\n\n<pre><code>public fun bar(): Int {\n   return 2*2\n}\n</code></pre>\n\n<p>by using <code>import com.test.extensions.ExtensionsPackage</code> so my IDE seems to be configured correctly.</p>\n\n<p>I searched through the whole Java-interop file from the kotlin docs and also googled a lot, but I couldn't find it.</p>\n\n<p>What am I doing wrong? Is this even possible?</p>\n"}, {"tags": ["java", "kotlin"], "comments": [{"owner": {"reputation": 1253974, "user_id": 22656, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG", "display_name": "Jon Skeet", "link": "https://stackoverflow.com/users/22656/jon-skeet"}, "edited": false, "score": 1, "creation_date": 1422947330, "post_id": 28292893, "comment_id": 44939173, "body": "Not being a Kotlin developer, can your write your own method (in Java) which just calls the string constructor, and then call that from your Kotlin code?"}, {"owner": {"reputation": 64215, "user_id": 11238, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/BGDex.png?s=128&g=1", "display_name": "Randy Sugianto &#39;Yuku&#39;", "link": "https://stackoverflow.com/users/11238/randy-sugianto-yuku"}, "reply_to_user": {"reputation": 1253974, "user_id": 22656, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG", "display_name": "Jon Skeet", "link": "https://stackoverflow.com/users/22656/jon-skeet"}, "edited": false, "score": 0, "creation_date": 1422947915, "post_id": 28292893, "comment_id": 44939423, "body": "@JonSkeet That is possible, but I wanted to have all codes in Kotlin (not mixed with Java)."}, {"owner": {"reputation": 1253974, "user_id": 22656, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG", "display_name": "Jon Skeet", "link": "https://stackoverflow.com/users/22656/jon-skeet"}, "edited": false, "score": 0, "creation_date": 1422948260, "post_id": 28292893, "comment_id": 44939551, "body": "In that case, can you just create a copy of the relevant &quot;slice&quot; of the array instead?"}, {"owner": {"reputation": 64215, "user_id": 11238, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/BGDex.png?s=128&g=1", "display_name": "Randy Sugianto &#39;Yuku&#39;", "link": "https://stackoverflow.com/users/11238/randy-sugianto-yuku"}, "reply_to_user": {"reputation": 1253974, "user_id": 22656, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG", "display_name": "Jon Skeet", "link": "https://stackoverflow.com/users/22656/jon-skeet"}, "edited": false, "score": 0, "creation_date": 1422972151, "post_id": 28292893, "comment_id": 44952933, "body": "That is possible, but it has the consequences that array copy is done twice: once when making the slice, and once when creating the string. If possible I would like to prevent that, since this is called in a tight loop."}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451704702, "post_id": 28292893, "comment_id": 56868186, "body": "See answers below, you can call it directly."}], "answers": [{"tags": [], "owner": {"reputation": 29817, "user_id": 462604, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/7176c041527db5489a2181a0f87f57d9?s=128&d=identicon&r=PG", "display_name": "Jakob Bowyer", "link": "https://stackoverflow.com/users/462604/jakob-bowyer"}, "is_accepted": false, "score": 1, "last_activity_date": 1422962153, "creation_date": 1422962153, "answer_id": 28297570, "question_id": 28292893, "link": "https://stackoverflow.com/questions/28292893/how-to-call-javas-string-constructor-char-int-offset-int-length-from-kotl/28297570#28297570", "title": "How to call Java&#39;s String constructor (char[], int offset, int length) from Kotlin?", "body": "<p>If you have the char array coming from java, for example</p>\n\n<pre><code>public class Test {\n    public static char[] chars = {'a','b','c','d'};\n}\n</code></pre>\n\n<p>And you want to use the constructor in the format <code>(char[], int, int)</code></p>\n\n<p>Then you could do it this way.</p>\n\n<pre><code>var a = Test.chars.slice(0..i).toString()\n</code></pre>\n\n<p>This will take your char array, slice it in the range 0 up until i, then get it as a string.</p>\n\n<p>You could then just wrap that in a function and away you go</p>\n"}, {"tags": [], "owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "is_accepted": false, "score": 0, "last_activity_date": 1451704687, "creation_date": 1451704687, "answer_id": 34562257, "question_id": 28292893, "link": "https://stackoverflow.com/questions/28292893/how-to-call-javas-string-constructor-char-int-offset-int-length-from-kotl/34562257#34562257", "title": "How to call Java&#39;s String constructor (char[], int offset, int length) from Kotlin?", "body": "<p>You can just direct use the constructor.  This is valid in Kotlin:</p>\n\n<pre><code>val s = String(byteArrayOf(65,66,67,68,69), 0, 3)\n</code></pre>\n"}], "owner": {"reputation": 64215, "user_id": 11238, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/BGDex.png?s=128&g=1", "display_name": "Randy Sugianto &#39;Yuku&#39;", "link": "https://stackoverflow.com/users/11238/randy-sugianto-yuku"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 577, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1451704687, "creation_date": 1422945820, "last_edit_date": 1422948042, "question_id": 28292893, "link": "https://stackoverflow.com/questions/28292893/how-to-call-javas-string-constructor-char-int-offset-int-length-from-kotl", "title": "How to call Java&#39;s String constructor (char[], int offset, int length) from Kotlin?", "body": "<p>I am migrating some Java code to Kotlin, and I have trouble migrating a call to Java's String constructor <code>(char[], int, int)</code> as it is not available in Kotlin.</p>\n\n<p>Only <code>(char[])</code> constructor seem to be available. How do I overcome this?</p>\n\n<p><strong>P.S.</strong> I overcome this by writing: <code>(java.lang.String(buf, 0, i) as String)</code> and it seems that <code>java.lang.String</code> and <code>kotlin.String</code> are different. But it does not look so nice.</p>\n"}, {"tags": ["kotlin"], "answers": [{"comments": [{"owner": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "edited": false, "score": 0, "creation_date": 1422862976, "post_id": 28271639, "comment_id": 44901119, "body": "And upper bounds not supported with covariance?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "edited": false, "score": 0, "creation_date": 1422877734, "post_id": 28271639, "comment_id": 44908463, "body": "Upper bounds are unsound for covariance, thus not allowed"}, {"owner": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "edited": false, "score": 2, "creation_date": 1422878179, "post_id": 28271639, "comment_id": 44908711, "body": "How so, in the context of the example I gave that is common throughout Scala&#39;s SDK?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "edited": false, "score": 0, "creation_date": 1422952990, "post_id": 28271639, "comment_id": 44941747, "body": "The example I gave is a lower bound."}, {"owner": {"reputation": 41540, "user_id": 127013, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/5cfa38a7e54e6c6a850dc6169a699246?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/127013/matthias"}, "edited": false, "score": 2, "creation_date": 1476621406, "post_id": 28271639, "comment_id": 67413997, "body": "@AndreyBreslav In Scala, <code>Option[+A]</code> has a method <code>getOrElse(other: =&gt; B): B</code> where <code>B &gt;: A</code>. Why is this considered safe, considering that <code>B</code> could be an <code>A</code>, but not when the lower bound is removed? Moreover, are there plans to add lower type bounds to Kotlin to enable such methods? Any type constructor in Kotlin is currently doomed to either define its type parameter as covariant and forfeit methods such as the one above, or forfeit covariance, which prevents one from writing ADTs that have &quot;empty&quot; instances (Tree, Option, etc., since they won&#39;t compile when instantiated with <code>Nothing</code>)"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 41540, "user_id": 127013, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/5cfa38a7e54e6c6a850dc6169a699246?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/127013/matthias"}, "edited": false, "score": 5, "creation_date": 1476703456, "post_id": 28271639, "comment_id": 67442690, "body": "@Matthias &quot;Moreover, are there plans to add lower type bounds to Kotlin to enable such methods?&quot; \u2014 it&#39;s on the table, yes"}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": false, "score": 10, "last_activity_date": 1422855157, "creation_date": 1422855157, "answer_id": 28271639, "question_id": 28267721, "link": "https://stackoverflow.com/questions/28267721/kotlin-and-upper-type-bounds-with-covariance/28271639#28271639", "title": "Kotlin and Upper Type Bounds with Covariance", "body": "<p>Kotlin does not support lower bounds at this point. Sometimes you can get away with defining an extension function instead of a member:</p>\n\n<pre><code>fun &lt;T&gt; Foo&lt;T&gt;.or(other: T): T = ...\n</code></pre>\n"}], "owner": {"reputation": 14965, "user_id": 2048448, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9875a5906274bc61f9e3106537a601fc?s=128&d=identicon&r=PG", "display_name": "sksamuel", "link": "https://stackoverflow.com/users/2048448/sksamuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1356, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1441894343, "creation_date": 1422823900, "last_edit_date": 1441894343, "question_id": 28267721, "link": "https://stackoverflow.com/questions/28267721/kotlin-and-upper-type-bounds-with-covariance", "title": "Kotlin and Upper Type Bounds with Covariance", "body": "<p>Does Kotlin support upper / lower type bounds in a covariance setting. Eg, I want to say</p>\n\n<pre><code>class Foo&lt;out T&gt; {\n  fun or&lt;U of T or greater&gt;(other: U): &lt;U&gt; = ...\n}\n</code></pre>\n\n<p>which in Scala would be</p>\n\n<pre><code>class Foo[+T] {\n  def or[U &gt;: T](other: U): U = ...\n}\n</code></pre>\n\n<p>But the compiler doesn't seem to like this, it complains about the covarianceness of the type parameter T.</p>\n"}, {"tags": ["generics", "inheritance", "nullable", "kotlin"], "answers": [{"tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 2, "last_activity_date": 1422855037, "creation_date": 1422855037, "answer_id": 28271617, "question_id": 28264083, "link": "https://stackoverflow.com/questions/28264083/what-is-the-place-in-type-hierarchy-of-nullable-types/28271617#28271617", "title": "What is the place in type hierarchy of nullable types?", "body": "<p>This is a bug in the compiler. You should not be able to call a member of a <code>T</code> when <code>T</code> has a nullable upper bound. <code>X?</code> is a supertype of <code>X</code>.</p>\n"}], "owner": {"reputation": 15571, "user_id": 210342, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/7412dfe0e7374347dda68aff0c4943fa?s=128&d=identicon&r=PG", "display_name": "greenoldman", "link": "https://stackoverflow.com/users/210342/greenoldman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 1, "accepted_answer_id": 28271617, "answer_count": 1, "score": 1, "last_activity_date": 1422855037, "creation_date": 1422802843, "question_id": 28264083, "link": "https://stackoverflow.com/questions/28264083/what-is-the-place-in-type-hierarchy-of-nullable-types", "title": "What is the place in type hierarchy of nullable types?", "body": "<p>You can inherit type <code>A</code> from type <code>B</code>, but whenever you define type <code>A</code> you will get type <code>A?</code> (nullable on) for free. But where does it lie exactly in type hierarchy? <code>A?</code> inherits from <code>A</code> or other way around? </p>\n\n<p>I ask this because I am puzzled with such code:</p>\n\n<pre><code>open class Foo {\n  fun foo() : Int {\n    return 0;\n  }\n}\n\nfun test&lt;T : Foo?&gt;(x:T) : Int {\n  return x.foo() // (@)\n}\n\nfun main(args: Array&lt;String&gt;) {\n  println(test&lt;Foo?&gt;(null))\n} \n</code></pre>\n\n<p>I don't understand why line (@) is compiled? Or in other words I don't understand nullable types hierarchy then, because until now I though of <code>T</code> as <code>Foo?</code> or any type derived from it. Can you derive non-nullable type from nullable one and what it would mean then?</p>\n\n<p>Sorry if this is something obvious, I am just learning Kotlin.</p>\n\n<p><em>(@) for nullable types it should be <code>x!!.foo()</code>.</em></p>\n"}, {"tags": ["generics", "nullable", "kotlin"], "comments": [{"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451704890, "post_id": 28254721, "comment_id": 56868214, "body": "just type <code>T</code> is interpreted as <code>T: Any?</code> so there is not &quot;just type <code>T</code>&quot; because the compiler will see it as nullable.  You can use <code>T: Any</code> to define a different upper bounds that is not nullable."}], "answers": [{"comments": [{"owner": {"reputation": 15571, "user_id": 210342, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/7412dfe0e7374347dda68aff0c4943fa?s=128&d=identicon&r=PG", "display_name": "greenoldman", "link": "https://stackoverflow.com/users/210342/greenoldman"}, "edited": false, "score": 0, "creation_date": 1422799311, "post_id": 28263226, "comment_id": 44883856, "body": "Wow, if I could I would add more points for that link :-) Thank you very much. What&#39;s more -- you just discovered that explicit against null does not work really. Without generic you would have to write <code>!!.toString()</code> but with generics compiler does not know what <code>T</code> is and allow for implicit check."}, {"owner": {"reputation": 15571, "user_id": 210342, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/7412dfe0e7374347dda68aff0c4943fa?s=128&d=identicon&r=PG", "display_name": "greenoldman", "link": "https://stackoverflow.com/users/210342/greenoldman"}, "edited": false, "score": 1, "creation_date": 1422801789, "post_id": 28263226, "comment_id": 44884587, "body": "On the second check, this example is special case, because <code>toString</code> is defined in root type. That is why (probably) it compiles in the first place -- any other method like <code>length</code> would require to add constraint to generics, and that mean you have to decide in advance for what type you write generic class -- nullable or not."}, {"owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "reply_to_user": {"reputation": 15571, "user_id": 210342, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/7412dfe0e7374347dda68aff0c4943fa?s=128&d=identicon&r=PG", "display_name": "greenoldman", "link": "https://stackoverflow.com/users/210342/greenoldman"}, "edited": false, "score": 1, "creation_date": 1422801989, "post_id": 28263226, "comment_id": 44884638, "body": "You&#39;re right. If I set T to extend any type, I can&#39;t bind it to a nullable type at all because T? doesn&#39;t extend T. Here&#39;s an example that doesn&#39;t compile: <a href=\"http://kotlin-demo.jetbrains.com/?publicLink=1174338469563409828491677856014\" rel=\"nofollow noreferrer\">kotlin-demo.jetbrains.com/&hellip;</a>"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 2, "creation_date": 1451704918, "post_id": 28263226, "comment_id": 56868219, "body": "just type <code>T</code> is interpreted as <code>T: Any?</code> so there is not &quot;just type <code>T</code>&quot; because the compiler will see it as nullable.  You can use <code>T: Any</code> to define a different upper bounds that is not nullable."}], "tags": [], "owner": {"reputation": 35078, "user_id": 615306, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/5a11940d70233031c01ead6c0b62c990?s=128&d=identicon&r=PG", "display_name": "Kirill Rakhman", "link": "https://stackoverflow.com/users/615306/kirill-rakhman"}, "is_accepted": true, "score": 5, "last_activity_date": 1451732829, "last_edit_date": 1451732829, "creation_date": 1422797450, "answer_id": 28263226, "question_id": 28254721, "link": "https://stackoverflow.com/questions/28254721/are-nullable-operators-valid-within-generic-class/28263226#28263226", "title": "Are nullable operators valid within generic class?", "body": "<p>I just tried it in the <a href=\"http://try.kotlinlang.org/#/UserProjects/enmcn6prnabvedfep67ktdcn1m/uonpv0fhromhvdchi8c03vsig9\" rel=\"nofollow\">Web Demo</a>.</p>\n\n<pre><code>class MyClass&lt;T&gt;(val x: T) {\n  fun foo() {\n    println(x.toString())\n  }\n\n  fun fooSave() {\n    println(x?.toString())\n  }\n\n}\n\nfun main(args: Array&lt;String&gt;) {\n  MyClass&lt;String?&gt;(null).fooSave()\n  MyClass&lt;String?&gt;(null).foo()\n}\n</code></pre>\n\n<p>It seems you can always apply the null-safe operator <code>?.</code>, even if the type isn't necessarily nullable.</p>\n\n<p>On the other hand, you can bind the generic type parameter <code>T</code> to a nullable type, in my case <code>String?</code>, <strike>which in fact will produce a NullPointerException if you pass <code>null</code></strike>.</p>\n\n<p><strong>Edit</strong>: Since the question was asked, the semantics of generic types without upper bound have changed. <code>T</code> is now interpreted as <code>T : Any?</code>. However the code above doesn't crash anymore. The reason is that the call <code>x.toString()</code> will call the extension function <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/to-string.html\" rel=\"nofollow\"><code>Any?.toString()</code></a> which correctly handles <code>null</code>s.</p>\n\n<p>If we change the code as follows</p>\n\n<pre><code>class MyClass&lt;T : Any&gt;(val x: T) {\n  fun foo() {\n    println(x.toString())\n  }\n\n  fun fooSave() {\n    println(x?.toString())\n  }\n\n}\n\nfun main(args: Array&lt;String&gt;) {\n  MyClass&lt;String?&gt;(null).fooSave()\n  MyClass&lt;String?&gt;(null).foo()\n}\n</code></pre>\n\n<p>it now doesn't even compile, because we can't instantiate <code>T : Any</code> with <code>String?</code>. The call <code>x?.toString()</code> is also flagged with a warning, saying that the safe call is unnecessary.</p>\n"}], "owner": {"reputation": 15571, "user_id": 210342, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/7412dfe0e7374347dda68aff0c4943fa?s=128&d=identicon&r=PG", "display_name": "greenoldman", "link": "https://stackoverflow.com/users/210342/greenoldman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 0, "accepted_answer_id": 28263226, "answer_count": 1, "score": 2, "last_activity_date": 1451732829, "creation_date": 1422727020, "last_edit_date": 1422729842, "question_id": 28254721, "link": "https://stackoverflow.com/questions/28254721/are-nullable-operators-valid-within-generic-class", "title": "Are nullable operators valid within generic class?", "body": "<p>Kotlin has pretty features (<code>?.</code> and <code>!!.</code>) handling nullable types. But this one just stroke me -- what if you don't know if you are dealing with nullable or non-nullable type? What if you have generics class <code>MyClass&lt;T&gt;</code>, then you just have some type <code>T</code> and that's it.</p>\n\n<p>Does Kotlin allow to have \"nullable\" operators applied to generic type (<code>T</code> here), does the type can be made nullable <strong>inside</strong> class (like <code>T?</code>) and what if the class will be instantiated with nullable type -- like <code>MyClass&lt;String?&gt;</code>. Will it cause nullable of nullable (like pointer to pointer in C++ -- <code>**std::string</code>) type within <code>MyClass</code> type?</p>\n"}, {"tags": ["kotlin"], "answers": [{"comments": [{"owner": {"reputation": 7014, "user_id": 800334, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a070788360df4847afbf6797a1a5bcaf?s=128&d=identicon&r=PG", "display_name": "Amir Abiri", "link": "https://stackoverflow.com/users/800334/amir-abiri"}, "edited": false, "score": 0, "creation_date": 1422681824, "post_id": 28245311, "comment_id": 44857168, "body": "So that helps a little but I&#39;d still need to duplicate the whole trait. Plus this feels icky. How come Kotlin allows you to change the type in a subclass?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 7014, "user_id": 800334, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a070788360df4847afbf6797a1a5bcaf?s=128&d=identicon&r=PG", "display_name": "Amir Abiri", "link": "https://stackoverflow.com/users/800334/amir-abiri"}, "edited": false, "score": 0, "creation_date": 1422696450, "post_id": 28245311, "comment_id": 44859832, "body": "@AmirAbiri, you can read about covariant return types <a href=\"http://en.wikipedia.org/wiki/Covariant_return_type\" rel=\"nofollow noreferrer\">here</a>."}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 1, "last_activity_date": 1422655047, "creation_date": 1422655047, "answer_id": 28245311, "question_id": 28236013, "link": "https://stackoverflow.com/questions/28236013/kotlin-best-practice-for-parallel-nullable-null-safe-trait-or-interface/28245311#28245311", "title": "Kotlin: best practice for parallel nullable / null safe trait or interface?", "body": "<p>You can extend one trait with the other, overriding the types:</p>\n\n<pre><code>trait HasAgeN {\n  val date: LocalDate?\n  val age: Int?\n      get() = ...\n}\n\ntrait HasAge : HasAgeN {\n  override val date: LocalDate\n  override val age: Int\n      get() = ...\n}\n</code></pre>\n\n<p>Now, a function that takes <code>HasAgeN</code> can accept both traits</p>\n"}], "owner": {"reputation": 7014, "user_id": 800334, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a070788360df4847afbf6797a1a5bcaf?s=128&d=identicon&r=PG", "display_name": "Amir Abiri", "link": "https://stackoverflow.com/users/800334/amir-abiri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 155, "favorite_count": 0, "accepted_answer_id": 28245311, "answer_count": 1, "score": 0, "last_activity_date": 1422655047, "creation_date": 1422621113, "question_id": 28236013, "link": "https://stackoverflow.com/questions/28236013/kotlin-best-practice-for-parallel-nullable-null-safe-trait-or-interface", "title": "Kotlin: best practice for parallel nullable / null safe trait or interface?", "body": "<p>Consider the following simple trait:</p>\n\n<pre><code>trait HasAge {\n    val dateOfBirth: LocalDate\n    val age: Int\n        get() = ...\n}\n</code></pre>\n\n<p>Now assume that I have a person class like so:</p>\n\n<pre><code>class Person : HasAge {\n    ...\n    public override var dateOfBirth: LocalDate? = null\n}\n</code></pre>\n\n<p>If I build a library and I want to cater for both nullable and null-safe users, I'll end up with duplicates like these:</p>\n\n<pre><code>trait HasAge {\n    val dateOfBirth: LocalDate\n    val age: Int\n        get() = ...\n}\n\ntrait HasAgeN {\n    val dateOfBirth: LocalDate?\n    val age: Int?\n        get() = ...\n}\n</code></pre>\n\n<p>Is there a better way to achieve this? i.e a trait or library function that can handle both cases without duplicating everything?</p>\n"}, {"tags": ["generics", "kotlin"], "answers": [{"comments": [{"owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422548666, "post_id": 28219483, "comment_id": 44802464, "body": "Thanks, that worked. What genetic type parameter should I use if I want to pass in MainActivity.javaClass?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422563291, "post_id": 28219483, "comment_id": 44810979, "body": "If you mean the analog of Java&#39;s <code>MainActivity.class</code>, then use <code>javaClass&lt;MainActivity&gt;()</code> in Kotlin"}, {"owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422583309, "post_id": 28219483, "comment_id": 44819151, "body": "Andrey, that&#39;s right. I meant to ask, how to change the function signature for the above mentioned code to compile?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422622473, "post_id": 28219483, "comment_id": 44834013, "body": "You could remove the <code>: Activity</code> bound from <code>T</code>, but then you are passing the class object of <code>MainActivity</code> to <code>Intent</code>, so it must be a component capable of handling this intent."}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422622554, "post_id": 28219483, "comment_id": 44834056, "body": "To clarify: a class and its class object are not related by inheritance or any other type-like relation. A class object is associated with a class for convenience only, so I don&#39;t think it makes sense to pass a class object to <code>start()</code>"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1451705024, "post_id": 28219483, "comment_id": 56868234, "body": "This syntax has changed in current Kotlin, can you please update the answer to <code>MainActivity:class.java</code>"}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": false, "score": 3, "last_activity_date": 1422548244, "creation_date": 1422548244, "answer_id": 28219483, "question_id": 28218587, "link": "https://stackoverflow.com/questions/28218587/kotlin-generic-bounds-for-class/28219483#28219483", "title": "Kotlin generic bounds for Class", "body": "<p>Use <code>javaClass&lt;MainActivity&gt;()</code> instead of <code>MainActivity.javaClass</code></p>\n"}, {"comments": [{"owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422583202, "post_id": 28222758, "comment_id": 44819122, "body": "I like this better and I&#39;m going to use this +1. However Andrey&#39;s answer is more relevant to my question."}, {"owner": {"reputation": 1023, "user_id": 450110, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/9d4006a80c81c9d47fa06d7dbb18ccf0?s=128&d=identicon&r=PG", "display_name": "naixx", "link": "https://stackoverflow.com/users/450110/naixx"}, "reply_to_user": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1422651220, "post_id": 28222758, "comment_id": 44849532, "body": "Yes, thats right. This answer is just a &quot;nicier&quot; option"}, {"owner": {"reputation": 243, "user_id": 1479018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/04a89a8b8d0423c14f4d58cc9861edd6?s=128&d=identicon&r=PG", "display_name": "Alexey.Shilenkov", "link": "https://stackoverflow.com/users/1479018/alexey-shilenkov"}, "edited": false, "score": 0, "creation_date": 1432625808, "post_id": 28222758, "comment_id": 48985586, "body": "or you can use <code>intentFor&lt;MyActivity&gt;()</code> , if you are using anko, basically it&#39;s the same thing"}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 1, "creation_date": 1451705077, "post_id": 28222758, "comment_id": 56868241, "body": "This syntax has changed in current Kotlin, can you please update the answer using <code>javaClass&lt;T&gt;</code> to <code>T::class.java</code>"}], "tags": [], "owner": {"reputation": 1023, "user_id": 450110, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/9d4006a80c81c9d47fa06d7dbb18ccf0?s=128&d=identicon&r=PG", "display_name": "naixx", "link": "https://stackoverflow.com/users/450110/naixx"}, "is_accepted": false, "score": 3, "last_activity_date": 1422558949, "creation_date": 1422558949, "answer_id": 28222758, "question_id": 28218587, "link": "https://stackoverflow.com/questions/28218587/kotlin-generic-bounds-for-class/28222758#28222758", "title": "Kotlin generic bounds for Class", "body": "<p>Another option:</p>\n\n<pre><code>inline public fun &lt;reified T : Activity&gt; start() {\n    startActivity(Intent(this, javaClass&lt;T&gt;()))\n}\nstart&lt;MainActivity&gt;()\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 58167, "user_id": 1333975, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/G2aQ2.png?s=128&g=1", "display_name": "Ahmad", "link": "https://stackoverflow.com/users/1333975/ahmad"}, "is_accepted": true, "score": 4, "last_activity_date": 1449285158, "last_edit_date": 1449285158, "creation_date": 1448506622, "answer_id": 33929866, "question_id": 28218587, "link": "https://stackoverflow.com/questions/28218587/kotlin-generic-bounds-for-class/33929866#33929866", "title": "Kotlin generic bounds for Class", "body": "<p><code>javaClass</code> has been deprecated. Use this instead:</p>\n\n<pre><code>val i = Intent(this@Activity, Activity::class.java)\nstartActivity(i)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 13958, "user_id": 689723, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/rQNO2.jpg?s=128&g=1", "display_name": "cesards", "link": "https://stackoverflow.com/users/689723/cesards"}, "is_accepted": false, "score": 2, "last_activity_date": 1460159008, "creation_date": 1460159008, "answer_id": 36511020, "question_id": 28218587, "link": "https://stackoverflow.com/questions/28218587/kotlin-generic-bounds-for-class/36511020#36511020", "title": "Kotlin generic bounds for Class", "body": "<p>The only way it worked for me is doing this:</p>\n\n<pre><code>val intent = Intent(this, NextActivity::class.java)\nstartActivity(intent)\n</code></pre>\n\n<p>None of the other solutions have worked, including the usage of <code>javaClass</code></p>\n"}], "owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2474, "favorite_count": 0, "accepted_answer_id": 33929866, "answer_count": 4, "score": 5, "last_activity_date": 1460159008, "creation_date": 1422545851, "last_edit_date": 1422548404, "question_id": 28218587, "link": "https://stackoverflow.com/questions/28218587/kotlin-generic-bounds-for-class", "title": "Kotlin generic bounds for Class", "body": "<p>The following generics doesn't compile. What is semantically wrong here?</p>\n\n<p><strong>Function call</strong></p>\n\n<pre><code>start(MainActivity.javaClass) // &lt;== Doesn't compile\n</code></pre>\n\n<p><strong>Method Definition</strong></p>\n\n<pre><code>// Definition\npublic fun &lt;T : Activity&gt; start(activityClass: Class&lt;T&gt;) {\n    startActivity(Intent(this, activityClass))\n}\n</code></pre>\n\n<p><strong>Compiler Error</strong></p>\n\n<pre><code>Error:(43, 9) Type parameter bound for T in fun &lt;T : android.app.Activity&gt; \nstart(activityClass: java.lang.Class&lt;T&gt;): kotlin.Unit is not satisfied:  \ninferred type com.mobsandgeeks.hellokotlin.MainActivity.\n&lt;class-object-for-MainActivity&gt; is not a subtype of android.app.Activity\n</code></pre>\n"}, {"tags": ["static-methods", "kotlin"], "comments": [{"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 1, "creation_date": 1422524857, "post_id": 28210188, "comment_id": 44787123, "body": "What do you mean by &quot;static extension method&quot;?"}, {"owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "reply_to_user": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 3, "creation_date": 1422524920, "post_id": 28210188, "comment_id": 44787161, "body": "A method that I can call without an instance, but is still an extension of the class. (Regular Java static methods)"}, {"owner": {"reputation": 2478, "user_id": 1901532, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd1cbda04ce8b94557cce44c96a39338?s=128&d=identicon&r=PG", "display_name": "Dan", "link": "https://stackoverflow.com/users/1901532/dan"}, "edited": false, "score": 0, "creation_date": 1422534118, "post_id": 28210188, "comment_id": 44792737, "body": "I think it might not be the intended usage of the <a href=\"http://kotlinlang.org/docs/reference/extensions.html\" rel=\"nofollow noreferrer\">Kotlin extensions</a> good question, I thought about the same  thing while  trying to extrapolate the C# concept . But while in practice the usage is quite similar. Kotlin extensions ,while  they claim to be statically dispatched , they feel like dynamically  &quot;attached&quot;  , if there is such a thing, or late bounded  to the instance. If I&#39;m not mistaken ... or perhaps I got  it completely wrong :)"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 7, "creation_date": 1422539306, "post_id": 28210188, "comment_id": 44795910, "body": "Currently you can not write an extension method that would be called on a class name as opposed to class instance. Indeed, extension function take a <i>receiver parameter</i> that is an instance, so there&#39;s no way to skip this part. On the other hand, we are working on a way of writing extensions to class objects, so that you call it on a class name, but the receiver has the type of the class object"}, {"owner": {"reputation": 14366, "user_id": 543875, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e7740aae8e555ec733f3f47d04812802?s=128&d=identicon&r=PG", "display_name": "Lars Blumberg", "link": "https://stackoverflow.com/users/543875/lars-blumberg"}, "reply_to_user": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 0, "creation_date": 1448031826, "post_id": 28210188, "comment_id": 55424561, "body": "@AndreyBreslav Can you update us whether static extension functions will be allowed? I&#39;m missing it, too."}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 14366, "user_id": 543875, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e7740aae8e555ec733f3f47d04812802?s=128&d=identicon&r=PG", "display_name": "Lars Blumberg", "link": "https://stackoverflow.com/users/543875/lars-blumberg"}, "edited": false, "score": 0, "creation_date": 1448183558, "post_id": 28210188, "comment_id": 55470623, "body": "@LarsBlumberg I&#39;ve added an answer below"}, {"owner": {"reputation": 14366, "user_id": 543875, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e7740aae8e555ec733f3f47d04812802?s=128&d=identicon&r=PG", "display_name": "Lars Blumberg", "link": "https://stackoverflow.com/users/543875/lars-blumberg"}, "reply_to_user": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "edited": false, "score": 0, "creation_date": 1448221439, "post_id": 28210188, "comment_id": 55483056, "body": "Thank you @AndreyBreslav"}], "answers": [{"comments": [{"owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "edited": false, "score": 0, "creation_date": 1428551628, "post_id": 29529275, "comment_id": 47212675, "body": "I believe that is not actually static. Companion objects allow you to call using the class name, but still uses an instance of the class. Also, the question was about static extension functions, not just static functions. However to have static functions you can use the <code>platformStatic</code> annotation."}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 1, "creation_date": 1451557535, "post_id": 29529275, "comment_id": 56831428, "body": "<code>platformStatic</code> was renamed <code>JvmStatic</code> in current Kotlin."}], "tags": [], "owner": {"reputation": 93, "user_id": 2881657, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/459dddc6b6da835db23983bd56d13db0?s=128&d=identicon&r=PG&f=1", "display_name": "bbarm", "link": "https://stackoverflow.com/users/2881657/bbarm"}, "is_accepted": false, "score": 5, "last_activity_date": 1428550426, "creation_date": 1428550426, "answer_id": 29529275, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/29529275#29529275", "title": "Static extension methods in Kotlin", "body": "<p>You can create a static method with using Companion object like:</p>\n\n<pre><code>class Foo {\n    // ...\n    companion object {\n        public fun bar() {\n            // do anything\n        }\n    }\n}\n</code></pre>\n\n<p>and then you can call it like:</p>\n\n<pre><code>class Baz {\n    // ...\n    private fun callBar() {\n        Foo.bar()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 7656, "user_id": 1938929, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/OeAme.png?s=128&g=1", "display_name": "Jire", "link": "https://stackoverflow.com/users/1938929/jire"}, "edited": false, "score": 89, "creation_date": 1448771783, "post_id": 33853233, "comment_id": 55715099, "body": "This is nice but what if it&#39;s a Java class or a class without a companion?"}, {"owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "reply_to_user": {"reputation": 7656, "user_id": 1938929, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/OeAme.png?s=128&g=1", "display_name": "Jire", "link": "https://stackoverflow.com/users/1938929/jire"}, "edited": false, "score": 33, "creation_date": 1448789216, "post_id": 33853233, "comment_id": 55718346, "body": "@Jire for such cases, there&#39;s no support in Kotlin 1.0"}, {"owner": {"reputation": 838, "user_id": 1128600, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c57e379c176b460cf48ff3eb61a408da?s=128&d=identicon&r=PG", "display_name": "Steffen Funke", "link": "https://stackoverflow.com/users/1128600/steffen-funke"}, "edited": false, "score": 2, "creation_date": 1449310091, "post_id": 33853233, "comment_id": 55958526, "body": "I could see a usecase in extending JVM framework classes with default values, e.g. String.DEFAULT, or Int.DEFAULT, in case your domain logic requires this (mine does currently, in conjunction with empty data classes)."}, {"owner": {"reputation": 8055, "user_id": 706387, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/SiTPw.jpg?s=128&g=1", "display_name": "kosiara - Bartosz Kosarzycki", "link": "https://stackoverflow.com/users/706387/kosiara-bartosz-kosarzycki"}, "edited": false, "score": 38, "creation_date": 1457456087, "post_id": 33853233, "comment_id": 59410475, "body": "It only works as long as <b>Uber</b> is a <i>Kotlin</i> class. It would be good to have the possibility to statically extend <i>Java</i> classes as well"}, {"owner": {"reputation": 2825, "user_id": 1898527, "user_type": "registered", "accept_rate": 9, "profile_image": "https://i.stack.imgur.com/qCDPj.png?s=128&g=1", "display_name": "narko", "link": "https://stackoverflow.com/users/1898527/narko"}, "edited": false, "score": 6, "creation_date": 1516896299, "post_id": 33853233, "comment_id": 83886557, "body": "This is still not possible as you can see here: <a href=\"https://youtrack.jetbrains.com/issue/KT-11968\" rel=\"nofollow noreferrer\">youtrack.jetbrains.com/issue/KT-11968</a> There is a related SO thread here: <a href=\"https://stackoverflow.com/questions/33911457/how-can-one-add-static-methods-to-java-classes-in-kotlin\" title=\"how can one add static methods to java classes in kotlin\">stackoverflow.com/questions/33911457/&hellip;</a>"}], "tags": [], "owner": {"reputation": 20424, "user_id": 445715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3824489df267d3bf86bbc678b9745ac4?s=128&d=identicon&r=PG", "display_name": "Andrey Breslav", "link": "https://stackoverflow.com/users/445715/andrey-breslav"}, "is_accepted": true, "score": 158, "last_activity_date": 1448183533, "creation_date": 1448183533, "answer_id": 33853233, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/33853233#33853233", "title": "Static extension methods in Kotlin", "body": "<p>To achieve <code>Uber.doMagic(context)</code>, you can write an extension to the <a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects\">companion object</a> of <code>Uber</code> (the companion object declaration is required):</p>\n\n<pre><code>class Uber {\n    companion object {}\n}\n\nfun Uber.Companion.doMagic(context: Context) { }\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 5494, "user_id": 342947, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/a737f13056e480e90f1b8bb943bc3cb1?s=128&d=identicon&r=PG", "display_name": "Fabian Zeindl", "link": "https://stackoverflow.com/users/342947/fabian-zeindl"}, "edited": false, "score": 2, "creation_date": 1472467853, "post_id": 35873053, "comment_id": 65747889, "body": "The original question was about how a javaclass can be extended with a <i>static method</i>. In your case, that means being able to literally call <code>Activity.isDeviceOnline(...)</code> without having an instance of <code>Activity</code>."}], "tags": [], "owner": {"reputation": 8055, "user_id": 706387, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/SiTPw.jpg?s=128&g=1", "display_name": "kosiara - Bartosz Kosarzycki", "link": "https://stackoverflow.com/users/706387/kosiara-bartosz-kosarzycki"}, "is_accepted": false, "score": -3, "last_activity_date": 1457455417, "creation_date": 1457455417, "answer_id": 35873053, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/35873053#35873053", "title": "Static extension methods in Kotlin", "body": "<p>I'm also quite fond of having the possibility to add static extension methods in Kotlin. As a workaround for now I'm adding the exntension method to multiple classes instead of using one static extension method in all of them.</p>\n\n<pre><code>class Util    \n\nfun Util.isDeviceOnline(context: Context): Boolean {\n    val connMgr = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n    val networkInfo = connMgr.activeNetworkInfo\n    return networkInfo != null &amp;&amp; networkInfo.isConnected\n}\n\nfun Activity.isDeviceOnline(context: Context) = { Util().isDeviceOnline(context) }\nfun OkHttpClient.isDeviceOnline(context: Context) = { Util().isDeviceOnline(context) }\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1433, "user_id": 975493, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37c8R.jpg?s=128&g=1", "display_name": "lucasddaniel", "link": "https://stackoverflow.com/users/975493/lucasddaniel"}, "is_accepted": false, "score": 12, "last_activity_date": 1467835603, "creation_date": 1467835603, "answer_id": 38232841, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/38232841#38232841", "title": "Static extension methods in Kotlin", "body": "<p>This is what the official documentation says:</p>\n\n<blockquote>\n  <p>Kotlin generates static methods for package-level functions. Kotlin\n  can also generate static methods for functions defined in named\n  objects or companion objects if you annotate those functions as\n  @JvmStatic. For example:</p>\n</blockquote>\n\n<p><a href=\"https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#static-methods\" rel=\"noreferrer\">Kotlin static methods</a></p>\n\n<pre><code>class C {\n  companion object {\n    @JvmStatic fun foo() {}\n    fun bar() {}\n  }\n}\n</code></pre>\n\n<blockquote>\n  <p>Now, foo() is static in Java, while bar() is not:</p>\n</blockquote>\n\n<pre><code>C.foo(); // works fine\nC.bar(); // error: not a static method\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 306, "user_id": 4378731, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eJVay.jpg?s=128&g=1", "display_name": "Nisazh", "link": "https://stackoverflow.com/users/4378731/nisazh"}, "is_accepted": false, "score": 0, "last_activity_date": 1487256204, "creation_date": 1487256204, "answer_id": 42277109, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/42277109#42277109", "title": "Static extension methods in Kotlin", "body": "<p>Recomend you to look at <a href=\"http://freecontent.manning.com/making-functions-easier-to-call-in-kotlin/\" rel=\"nofollow noreferrer\">this</a> link. As you can see there, you just should declare method at the top-level of the package (file):</p>\n\n<pre><code>package strings\npublic fun joinToString(...): String { ... }\n</code></pre>\n\n<p>This is equal to</p>\n\n<pre><code>package strings;\n\npublic class JoinKt {\n    public static String joinToString(...) { ... }\n}\n</code></pre>\n\n<p>With constans everything are the same. This declaration</p>\n\n<pre><code>val UNIX_LINE_SEPARATOR = \"\\n\"\n</code></pre>\n\n<p>is equal to</p>\n\n<pre><code>public static final String UNIX_LINE_SEPARATOR = \"\\n\";\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 18850, "user_id": 999530, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/YGip7.png?s=128&g=1", "display_name": "Travis Griggs", "link": "https://stackoverflow.com/users/999530/travis-griggs"}, "edited": false, "score": 2, "creation_date": 1573363225, "post_id": 56554533, "comment_id": 103854680, "body": "Hacky this may is. But also clever cool. This is the most insightful response to the question. Kotlin&#39;s doing the best it can to fake providing first class extensions, so IMO, you use the best-you-can solutions to deal with its inanities. Nice."}], "tags": [], "owner": {"reputation": 667, "user_id": 5209185, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb523e6233de789cd2c9bf757578f30a?s=128&d=identicon&r=PG&f=1", "display_name": "kyay10", "link": "https://stackoverflow.com/users/5209185/kyay10"}, "is_accepted": false, "score": 8, "last_activity_date": 1560312482, "creation_date": 1560312482, "answer_id": 56554533, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/56554533#56554533", "title": "Static extension methods in Kotlin", "body": "<p>I actually had this exact question 30 minutes ago, so I started digging around and couldn't find any solution or workaround for this, BUT while searching I found <a href=\"https://kotlinlang.org/docs/reference/extensions.html#nullable-receiver\" rel=\"noreferrer\">this section</a> on the Kotlinglang website that states that: </p>\n\n<blockquote>\n  <p>Note that extensions can be defined with a nullable receiver type. Such extensions can be called on an object variable even if its value is null.</p>\n</blockquote>\n\n<p>So then I had the craziest idea ever, why not define an extension function with a nullable receiver (without actually using that receiver) and then call it on a null object!\nSo I tried that, and it worked pretty well, but it looked so ugly. It was like this:</p>\n\n<pre><code>(null as Type?).staticFunction(param1, param2)\n</code></pre>\n\n<p>So I went around that by creating a val in my extensions file of the receiver type that had a value of null and then use it in my other class.\nSo, as an example, here is how I implemented a \"static\" extension function for the <code>Navigation</code> class in Android:\nIn my NavigationExtensions.kt file:</p>\n\n<pre><code>val SNavigation: Navigation? = null\nfun Navigation?.createNavigateOnClickListener(@IdRes resId: Int, args: Bundle? = null, navOptions: NavOptions? = null,\n                                                navigationExtras: Navigator.Extras? = null) : (View) -&gt; Unit {\n    //This is just implementation details, don't worry too much about them, just focus on the Navigation? part in the method declaration\n    return { view: View -&gt; view.navigate(resId, args, navOptions, navigationExtras) }\n}\n</code></pre>\n\n<p>In the code that uses it:</p>\n\n<pre><code>SNavigation.createNavigateOnClickListener(R.id.action_gameWonFragment_to_gameFragment)\n</code></pre>\n\n<p>Obviously, this isn't a class name, it is just a variable of the class type that has a null value. This is obviously ugly on the extension maker side (because they have to create the variable) and on the developer side (because they have to use the <code>SType</code> format instead of the actual class name), but it is the closest that can be achieved right now compared to actual static functions. Hopefully, the Kotlin language makers will respond to the <a href=\"https://youtrack.jetbrains.com/issue/KT-11968\" rel=\"noreferrer\">issue</a> that was created and add that feature in the language.</p>\n"}, {"comments": [{"owner": {"reputation": 443, "user_id": 9378439, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-uRAIXKCAE-g/AAAAAAAAAAI/AAAAAAAAAJA/3p6Mreec-XI/photo.jpg?sz=128", "display_name": "daniel.jbatiz", "link": "https://stackoverflow.com/users/9378439/daniel-jbatiz"}, "reply_to_user": {"reputation": 2259, "user_id": 4254527, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/w1DSa.png?s=128&g=1", "display_name": "Saman Sattari", "link": "https://stackoverflow.com/users/4254527/saman-sattari"}, "edited": false, "score": 0, "creation_date": 1587683096, "post_id": 59400732, "comment_id": 108615360, "body": "Title\u2019s not even a question"}], "tags": [], "owner": {"reputation": 443, "user_id": 9378439, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-uRAIXKCAE-g/AAAAAAAAAAI/AAAAAAAAAJA/3p6Mreec-XI/photo.jpg?sz=128", "display_name": "daniel.jbatiz", "link": "https://stackoverflow.com/users/9378439/daniel-jbatiz"}, "is_accepted": false, "score": -4, "last_activity_date": 1576707456, "creation_date": 1576707456, "answer_id": 59400732, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/59400732#59400732", "title": "Static extension methods in Kotlin", "body": "<p>To create an extension method in kotlin you have to create a kotlin file(not a class) then declare your method in the file \nEg:</p>\n\n<pre><code>public fun String.toLowercase(){\n    // **this** is the string object\n}\n</code></pre>\n\n<p>Import the function in the class or file you are working on and use it.</p>\n"}, {"tags": [], "owner": {"reputation": 8441, "user_id": 763074, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5b034d4806a2bed77c8d84b035d56e8e?s=128&d=identicon&r=PG", "display_name": "Justin Warkentin", "link": "https://stackoverflow.com/users/763074/justin-warkentin"}, "is_accepted": false, "score": 1, "last_activity_date": 1605149609, "creation_date": 1605149609, "answer_id": 64797215, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/64797215#64797215", "title": "Static extension methods in Kotlin", "body": "<p>Since I keep coming across this when searching, here's a different approach I haven't seen anyone mention that works in a static way <em>and</em> it works with generics!</p>\n<p>Extension definitions:</p>\n<pre><code>// Extension function\nfun &lt;T&gt; KClass&lt;T&gt;.doSomething() = /* do something */\n\n// Extension Property\nval &lt;T&gt; KClass&lt;T&gt;.someVal get() = /* something */\n</code></pre>\n<p>Usage:</p>\n<pre><code>MyType::class.doSomething()\n\nMyType::class.someVal\n</code></pre>\n<p>As you can see, the trick is attaching the extension function to the <code>KClass</code> of the type instead since that can be referenced statically.</p>\n"}, {"tags": [], "owner": {"reputation": 3, "user_id": 6257473, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adad609d1f77f64fedd5f943743de0af?s=128&d=identicon&r=PG", "display_name": "Matthew Bates", "link": "https://stackoverflow.com/users/6257473/matthew-bates"}, "is_accepted": false, "score": 0, "last_activity_date": 1608011836, "creation_date": 1608011836, "answer_id": 65300730, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin/65300730#65300730", "title": "Static extension methods in Kotlin", "body": "<p>I also required the ability to extend a Java object with a static method and found the best solution for me was to create a Kotlin object that extended the Java class and add my method there.</p>\n<pre><code>object Colour: Color(){\n    fun parseColor(r: Int?, g: Int?, b: Int?) = parseColor(String.format(&quot;#%02x%02x%02x&quot;, r, g, b))\n}\n</code></pre>\n<p>invocation:</p>\n<pre><code>val colour = Colour.parseColor(62, 0, 100)\n</code></pre>\n"}], "owner": {"reputation": 18616, "user_id": 421372, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/c81e22a8a22d02e036ff00a9bbd2802b?s=128&d=identicon&r=PG", "display_name": "Ragunath Jawahar", "link": "https://stackoverflow.com/users/421372/ragunath-jawahar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 43157, "favorite_count": 10, "accepted_answer_id": 33853233, "answer_count": 9, "score": 153, "last_activity_date": 1608011836, "creation_date": 1422520524, "last_edit_date": 1507206806, "question_id": 28210188, "link": "https://stackoverflow.com/questions/28210188/static-extension-methods-in-kotlin", "title": "Static extension methods in Kotlin", "body": "<p>How do you define a static extension method in Kotlin? Is this even possible? I currently have an extension method as shown below.</p>\n\n<pre><code>public fun Uber.doMagic(context: Context) {\n    // ...\n}\n</code></pre>\n\n<p>The above extension can be invoked on an instance.</p>\n\n<pre><code>uberInstance.doMagic(context) // Instance method\n</code></pre>\n\n<p>but how do I make it static method like shown below.</p>\n\n<pre><code>Uber.doMagic(context)         // Static or class method\n</code></pre>\n"}]