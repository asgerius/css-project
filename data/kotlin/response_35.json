[{"tags": ["spring", "kotlin"], "comments": [{"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 0, "creation_date": 1452105491, "post_id": 32389720, "comment_id": 57026028, "body": "Other options now exist in Kotlin, I added an answer covering @JvmOverloads <a href=\"http://blog.jetbrains.com/kotlin/2015/05/kotlin-m12-is-out/\" rel=\"nofollow noreferrer\">added in M12</a>"}, {"owner": {"reputation": 2846, "user_id": 81252, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/3f6ee0f30cdb39ff28127a202b85711e?s=128&d=identicon&r=PG", "display_name": "Alexey Sviridov", "link": "https://stackoverflow.com/users/81252/alexey-sviridov"}, "edited": false, "score": 0, "creation_date": 1494827639, "post_id": 32389720, "comment_id": 74974532, "body": "actually it seems like side effect of JvmOverloads, because real problem in absence of constructor parameter names in Kotlin data classes. Actually seems like bug in kotlin"}], "answers": [{"comments": [{"owner": {"reputation": 3284, "user_id": 1098758, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dca1d5f8e92ef9d9ba7a2aa7d6257d0c?s=128&d=identicon&r=PG", "display_name": "Lionel Port", "link": "https://stackoverflow.com/users/1098758/lionel-port"}, "edited": false, "score": 0, "creation_date": 1441695126, "post_id": 32391505, "comment_id": 52764668, "body": "In the absence of any other answers, I&#39;m marking this as the accepted solution but still interested in other simpler options."}, {"owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "edited": false, "score": 1, "creation_date": 1452105177, "post_id": 32391505, "comment_id": 57025802, "body": "There is an answer to this supported by Kotlin, without having to do this workaround.  see the other answer posted."}], "tags": [], "owner": {"reputation": 3284, "user_id": 1098758, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dca1d5f8e92ef9d9ba7a2aa7d6257d0c?s=128&d=identicon&r=PG", "display_name": "Lionel Port", "link": "https://stackoverflow.com/users/1098758/lionel-port"}, "is_accepted": true, "score": 3, "last_activity_date": 1441348336, "creation_date": 1441348336, "answer_id": 32391505, "question_id": 32389720, "link": "https://stackoverflow.com/questions/32389720/spring-constructor-annotations-on-kotlin-data-class-with-default-values/32391505#32391505", "title": "Spring constructor annotations on Kotlin data class with default values", "body": "<p>At the moment my current answer is to define two constructors. One for me to use that has defaults and one for spring to use that doesn't have defaults. </p>\n\n<pre><code>data class MyData @PersistenceConstructor constructor(val a: Int?, val b:String, val c : Collection&lt;Int&gt;) {\n  constructor(a: Int? = null, b: String = \"\", c: Collection&lt;Int&gt; = emptyList()) : this(a,b,c)\n}\n</code></pre>\n\n<p>I don't like it as its duplication so it's not my preferred solution.</p>\n"}, {"comments": [{"owner": {"reputation": 1085, "user_id": 1646298, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/f4cbd3b26e9904b80405f7b2f27db2c9?s=128&d=identicon&r=PG", "display_name": "ZZ 5", "link": "https://stackoverflow.com/users/1646298/zz-5"}, "edited": false, "score": 0, "creation_date": 1599141334, "post_id": 34640224, "comment_id": 112686969, "body": "This won&#39;t work if you have field that&#39;s optional (having default value) marked as <code>@Transient</code>. The solution is create to constructor manually and add <code>@PersistenceConstructor</code> annotation"}], "tags": [], "owner": {"reputation": 73428, "user_id": 3679676, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c0faaf44a8922cf165ff73d9efd0dade?s=128&d=identicon&r=PG", "display_name": "Jayson Minard", "link": "https://stackoverflow.com/users/3679676/jayson-minard"}, "is_accepted": false, "score": 8, "last_activity_date": 1452105141, "creation_date": 1452105141, "answer_id": 34640224, "question_id": 32389720, "link": "https://stackoverflow.com/questions/32389720/spring-constructor-annotations-on-kotlin-data-class-with-default-values/34640224#34640224", "title": "Spring constructor annotations on Kotlin data class with default values", "body": "<p>You can use the <a href=\"https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#overloads-generation\"><code>@JvmOverloads</code> annotation</a> and this will automatically create permutations of the method that can be called by Java and also take advantage of the default values.  </p>\n\n<p>From the docs, this example:</p>\n\n<pre><code>@JvmOverloads fun f(a: String, b: Int = 0, c: String = \"abc\") {\n    ...\n}\n</code></pre>\n\n<p>will be seen from Java as:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>// Java\nvoid f(String a, int b, String c) { }\nvoid f(String a, int b) { } // will default c\nvoid f(String a) { } // will default b and c\n</code></pre>\n\n<p>Your case is a touch different where you have a defaulted parameter followed by one that is not.  Simplifying your example to:</p>\n\n<pre><code>data class MyData @JvmOverloads constructor(val id: Int? = null, val a:String)\n</code></pre>\n\n<p>produces this view from Java:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>// java\nMyData(Int id, String a)\nMyData(String a)  // defaults id\n</code></pre>\n\n<p>You can read more about <a href=\"https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html\">Java calling Kotlin interoperability</a> in the Kotlin reference.</p>\n"}], "owner": {"reputation": 3284, "user_id": 1098758, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dca1d5f8e92ef9d9ba7a2aa7d6257d0c?s=128&d=identicon&r=PG", "display_name": "Lionel Port", "link": "https://stackoverflow.com/users/1098758/lionel-port"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3473, "favorite_count": 0, "accepted_answer_id": 32391505, "answer_count": 2, "score": 4, "last_activity_date": 1452105141, "creation_date": 1441338196, "question_id": 32389720, "link": "https://stackoverflow.com/questions/32389720/spring-constructor-annotations-on-kotlin-data-class-with-default-values", "title": "Spring constructor annotations on Kotlin data class with default values", "body": "<p>To use spring persistence but maintain immutable types I've added the PersistenceConstructor annotation to my data classes. This tells spring to use that constructor when loading classes from the database.</p>\n\n<p>However, I'm having trouble getting spring to find the constructor. </p>\n\n<pre><code>data class MyData @PersistenceConstructor constructor(@Id val id: Int? = null, val a:String)\n</code></pre>\n\n<p>This works 100% of the time on my machine but when deployed to heroku it consistently fails. </p>\n\n<p>It looks like, by having default values for parameters kotlin generates more than one constructors but the problem is that each constructor get the annotation applied to them so it's just luck (or jdk implementation specific) which one spring picks up. The default one has no names for the parameters so Spring doesn't know what to do with it.</p>\n\n<p>My real constructors are larger than this so it would be a pain to not have default values. Is there a way to get the annotation to only apply to the constructor without default values? </p>\n"}]