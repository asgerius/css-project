[{"tags": ["unit-testing", "rust", "assert"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1493837628, "post_id": 43767856, "comment_id": 74577277, "body": "Right. Your test framework is supposed to help you. Simply saying &quot;a test failed&quot; is way less helpful than saying &quot;a test failed <i>because of these reasons</i>&quot;. There&#39;s also the whole aspect of why we create functions with names in the first place - to have readable and understandable code."}, {"owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493838334, "post_id": 43767856, "comment_id": 74577657, "body": "@Shepmaster I&#39;m not sure that assert_eq is more readable by itself but more informative error message is, of course, better."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "edited": false, "score": 1, "creation_date": 1493880068, "post_id": 43767856, "comment_id": 74591948, "body": "@Amomum: There is actually a RFC to improve assert_eq, in the mean time you may be interested in the <a href=\"https://crates.io/crates/pretty_assertions\" rel=\"nofollow noreferrer\">pretty_assertions</a> crate."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1493881353, "post_id": 43767856, "comment_id": 74592798, "body": "Now the question is: why explicitly say <code>assert_eq(&lt;expr&gt;, &lt;expr&gt;)</code>? Wouldn&#39;t it be possible to pattern match <code>assert!(&lt;expr&gt; == &lt;expr&gt;)</code> and to just do the right thing\u2122?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1493887787, "post_id": 43767856, "comment_id": 74596776, "body": "@LukasKalbertodt Arguably, there is no need for such complications when we have <code>assert_eq!</code>. :P"}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1554256680, "post_id": 43767856, "comment_id": 97680932, "body": "@LukasKalbertodt&#39;s comment resonates with me.  Assuming there is a way to generate equivalent output with <code>==</code> and <code>!=</code>, creating a new DSL for syntax which already exists in the language seems...  suboptimal.  Sometimes we also need <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, too, and these do not seem to exist in the assert_* macro DSL.  Puzzling."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 12, "last_activity_date": 1493837373, "last_edit_date": 1493837373, "creation_date": 1493837333, "answer_id": 43767856, "question_id": 43767552, "link": "https://stackoverflow.com/questions/43767552/why-do-assert-eq-and-assert-ne-exist-when-a-simple-assert-will-suffice/43767856#43767856", "title": "Why do `assert_eq` and `assert_ne` exist when a simple `assert` will suffice?", "body": "<blockquote>\n  <p>thread 'main' panicked at 'assertion failed: 1 == 2',</p>\n</blockquote>\n\n<p>Your example is too simple to see that there is a great advantage in the use of <code>assert_eq!</code>. Consider this code:</p>\n\n<pre><code>let s = \"Hello\".to_string();\nassert!(&amp;s == \"Bye\");\n</code></pre>\n\n<p>This is the resulting panic message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>'assertion failed: &amp;s == \"Bye\"'    \n</code></pre>\n\n<p>Now let's see what happens when we use <code>assert_eq!</code>:</p>\n\n<pre><code>let s = \"Hello\".to_string();\nassert_eq!(&amp;s, \"Bye\");\n</code></pre>\n\n<p>The message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>'assertion failed: `(left == right)` (left: `\"Hello\"`, right: `\"Bye\"`)'\n</code></pre>\n\n<p>This message provides much more insight than the former. Other unit testing systems often do the same.</p>\n"}], "owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1721, "favorite_count": 0, "accepted_answer_id": 43767856, "answer_count": 1, "score": 9, "last_activity_date": 1493837373, "creation_date": 1493836213, "last_edit_date": 1493837336, "question_id": 43767552, "link": "https://stackoverflow.com/questions/43767552/why-do-assert-eq-and-assert-ne-exist-when-a-simple-assert-will-suffice", "title": "Why do `assert_eq` and `assert_ne` exist when a simple `assert` will suffice?", "body": "<p><code>assert!(a == b)</code> takes less characters than <code>assert_eq!(a, b)</code> and, in my opinion, is more readable.</p>\n\n<p>The error messages are more or less the same:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `2`)', src\\main.rs:41\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'assertion failed: 1 == 2', src\\main.rs:41\n</code></pre>\n\n<p>Actually, this question is not only about Rust; I keep seeing these different assert macros or functions in unit testing frameworks: </p>\n\n<ul>\n<li>Cpputest has <code>CHECK</code> and <code>CHECK_FALSE</code> and <code>CHECK_EQUAL</code> and so on;</li>\n<li>Googletest has <code>EXPECT_GT</code> and <code>EXPECT_EQ</code> and so on;</li>\n<li>JUnit has <code>assertEquals</code> and <code>assertFalse</code> and do on.</li>\n</ul>\n\n<p>Frequently there is also assert for some specific type like string or array. What's the point?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1493824941, "post_id": 43764136, "comment_id": 74569609, "body": "From what I understand, the OP states that <code>GetIdentifier</code> is a local trait, and thus cannot be implemented from outside."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1493825015, "post_id": 43764136, "comment_id": 74569652, "body": "I think the trait is public, because otherwise one would not need to make a distinction between core types and custom types"}, {"owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1493825145, "post_id": 43764136, "comment_id": 74569768, "body": "@E_net4 I meant locally-defined, public trait -- I&#39;ll update the question"}, {"owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "edited": false, "score": 1, "creation_date": 1493825561, "post_id": 43764136, "comment_id": 74570069, "body": "This makes sense -- follow-up question:  if the trait is private, I <i>still</i> get the error.  Is there a reason for that, or is there some rule that says marking a <code>private</code> trait <code>public</code> shouldn&#39;t cause code not to compile?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1493825713, "post_id": 43764136, "comment_id": 74570177, "body": "visibility changes nothing, because through some indirection or another you might end up with the same problem. Rust doesn&#39;t do any global analyses. All the analyses are local in some sense or another."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "edited": false, "score": 0, "creation_date": 1493863847, "post_id": 43764136, "comment_id": 74586649, "body": "@user1935361: Also, if that blanket impl was allowed and you implemented <code>GetIdentifier</code> on a standard library type that already implements <code>Hash</code>, that type would end up with two impls of <code>Hash</code>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 1, "last_activity_date": 1493824965, "last_edit_date": 1493824965, "creation_date": 1493824865, "answer_id": 43764136, "question_id": 43763435, "link": "https://stackoverflow.com/questions/43763435/blanket-implementation-of-core-traits-constrained-by-locally-defined-public-trai/43764136#43764136", "title": "Blanket implementation of core traits constrained by locally-defined public trait", "body": "<p>Consumers of your crate might implement <code>GetIdentifier</code> for <code>TheirType</code> and simultaneously implement <code>Hash</code> for <code>TheirType</code>.</p>\n\n<p>Now you might say that's their problem, but imagine another crate with a trait <code>Foo</code> that also does <code>impl&lt;T: Foo&gt; Hash for T {}</code>, and <code>TheirType</code> implementing <code>Foo</code> and <code>GetIdentifier</code>. Suddenly they can't implement either trait.</p>\n\n<p>The reason the error occurs for <code>&amp;_</code> is that the stdlib impl says any type <code>T</code> implementing <code>Hash</code> causes <code>&amp;T</code> to also implement <code>Hash</code>.</p>\n"}], "owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 211, "favorite_count": 0, "accepted_answer_id": 43764136, "answer_count": 1, "score": 1, "last_activity_date": 1493825176, "creation_date": 1493823042, "last_edit_date": 1493825176, "question_id": 43763435, "link": "https://stackoverflow.com/questions/43763435/blanket-implementation-of-core-traits-constrained-by-locally-defined-public-trai", "title": "Blanket implementation of core traits constrained by locally-defined public trait", "body": "<p>I have the following code:</p>\n\n<pre><code>pub trait GetIdentifier {\n    //...\n}\nimpl&lt;T: GetIdentifier&gt; Hash for T {\n     fn hash(&amp;self) -&gt; //....\n}\n</code></pre>\n\n<p>I get the following error:   </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::hash::Hash` for type `&amp;_`:\n  --&gt; &lt;anon&gt;:18:1\n   |\n18 | / impl&lt;T: GetIdentifier&gt; Hash for T {\n19 | | }\n   | |_^\n   |\n   = note: conflicting implementation in crate `core`\n\nerror[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter\n  --&gt; &lt;anon&gt;:18:1\n   |\n18 | / impl&lt;T: GetIdentifier&gt; Hash for T {\n19 | | }\n   | |_^\n</code></pre>\n\n<p>Why?  I haven't implemented <code>GetIdentifier</code> for <code>&amp;_</code>, so the blanket <code>impl</code> shouldn't apply to <code>&amp;_</code>.  Consumers of my crate wouldn't be able to implement <code>GetIdentifier</code> for core types either, so no problem there.  What am I missing here?  Why is <code>&amp;_</code> even involved here -- I didn't put an <code>?Sized</code> bound on my trait so references shouldn't even be considered....right?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 18987, "user_id": 2470818, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c3e0df5ee75b18ce0c8aeadf4433e151?s=128&d=identicon&r=PG&f=1", "display_name": "vallentin", "link": "https://stackoverflow.com/users/2470818/vallentin"}, "edited": false, "score": 1, "creation_date": 1562102483, "post_id": 43753491, "comment_id": 100270251, "body": "For anyone interested, I&#39;ve made a self-contained tutorial with some snippets, about <a href=\"https://vallentin.io/2019/06/06/versioning\" rel=\"nofollow noreferrer\">generating version strings</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493817688, "post_id": 43753808, "comment_id": 74563734, "body": "I&#39;d love to see an example of the config flag version. A git hash only needs to be 40 characters though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1493817785, "post_id": 43753808, "comment_id": 74563820, "body": "<b>into other, non-child processes</b> I think that&#39;s the key thing to realize here.  The build script is run <i>before</i> the compilation of the library, not <i>around</i> it."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1493817900, "post_id": 43753808, "comment_id": 74563923, "body": "@Shepmaster: A flag only gives you one bit, though.  You have something like <code>#[cfg(bit_0)] const BIT_0: u8 = 1; #[cfg(not(bit_0))] const BIT_0: u8 = 0;</code> 160 times.  I <i>may</i> have done something similarly inadvisable in the past... **whistles**"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1493819689, "post_id": 43753808, "comment_id": 74565402, "body": "When <a href=\"https://github.com/rust-lang/cargo/pull/3929\" rel=\"nofollow noreferrer\">cargo#3929</a> is merged  you could simply write <code>println!(&quot;cargo:rustc-env=GIT_HASH=1fcc849&quot;);</code>"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1493903453, "post_id": 43753808, "comment_id": 74608047, "body": "@kennytm this deserves an answer I guess. Your comment contains information about one of future solutions. For people who will read this post later this information will be helpful I think."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1493906950, "post_id": 43753808, "comment_id": 74610856, "body": "@VictorPolevoy We could do so when the PR is actually merged, the details are sorted out and can really be used. For now this is too early to put as an answer."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1493817637, "last_edit_date": 1493817637, "creation_date": 1493796578, "answer_id": 43753808, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/43753808#43753808", "title": "Include git commit hash as string into Rust program", "body": "<blockquote>\n  <p>I can only think about writing data to some file, but I think this is overkill for this case.</p>\n</blockquote>\n\n<p>That's unfortunate, because that <em>is</em> the only way of doing it.  Environment variables can't work because changes to the environment can't \"leak\" into other, non-child processes.</p>\n\n<p>For simpler things, you <em>can</em> instruct Cargo to define conditional compilation flags, but those aren't powerful enough to communicate a string [1].</p>\n\n<p>The details of generating code from a build script is detailed in the <a href=\"http://doc.crates.io/build-script.html#case-study-code-generation\" rel=\"nofollow noreferrer\">code generation section of the Cargo documentation</a>.</p>\n\n<hr>\n\n<p>[1]: I mean, unless you feel like breaking the hash into 160 config flags and then re-assembling them in the source being compiled, but that's even <em>more</em> overkill.</p>\n"}, {"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 12, "last_activity_date": 1496824775, "last_edit_date": 1496824775, "creation_date": 1493805905, "answer_id": 43756981, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/43756981#43756981", "title": "Include git commit hash as string into Rust program", "body": "<p>There is already an existing crate <a href=\"https://docs.rs/vergen/0.1.1/vergen/fn.vergen.html\" rel=\"noreferrer\"><code>vergen</code></a> that can calculate the git commit in the build script. As <a href=\"https://stackoverflow.com/a/43753808\">@DK's answer</a> described, the build script cannot modify environment variable before Rust 1.19, so <code>vergen</code> still works by writing the result into OUT_DIR (i.e. <code>vergen</code> still won't solve OP's question, but it should be easier to use).</p>\n\n<hr>\n\n<p>Usage:</p>\n\n<pre class=\"lang-ini prettyprint-override\"><code># Cargo.toml\n...\n[build-dependencies]\nvergen = \"0.1\"\n</code></pre>\n\n<pre class=\"lang-rs prettyprint-override\"><code>// build.rs\nextern crate vergen;\nuse vergen::*;\nfn main() {\n    vergen(SHORT_SHA | COMMIT_DATE).unwrap();\n}\n</code></pre>\n\n<pre class=\"lang-rs prettyprint-override\"><code>mod version {\n    include!(concat!(env!(\"OUT_DIR\"), \"/version.rs\"));\n}\nfn main() {\n    println!(\"commit: {} {}\", version::commit_date(), version::short_sha());\n    // output something like:\n    //        commit: 2017-05-03 a29c7e5\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2089, "user_id": 1291118, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5347088e8b4e042e3ed3717051455f94?s=128&d=identicon&r=PG", "display_name": "vasilakisfil", "link": "https://stackoverflow.com/users/1291118/vasilakisfil"}, "edited": false, "score": 1, "creation_date": 1587552918, "post_id": 44407625, "comment_id": 108554086, "body": "the problem here is that if you use incremental build, that part will never be recompiled, leading to false result (in this case having an older GIT_HASH value). Cargo supports change detection using the <code>rerun-if</code> directives, but that&#39;s a chicken and egg problem: in order to figure out if you need to re-run the build.rs, you first need to run build.rs to fetch the git hash."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 2089, "user_id": 1291118, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5347088e8b4e042e3ed3717051455f94?s=128&d=identicon&r=PG", "display_name": "vasilakisfil", "link": "https://stackoverflow.com/users/1291118/vasilakisfil"}, "edited": false, "score": 2, "creation_date": 1587638809, "post_id": 44407625, "comment_id": 108592500, "body": "<a href=\"https://docs.rs/vergen/3.1.0/vergen/fn.generate_cargo_keys.html\" rel=\"nofollow noreferrer\"><code>vergen 3.1.0</code></a> emits <code>cargo:rustc-rerun-if-changed=.git&#47;HEAD</code>."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 34, "last_activity_date": 1496824715, "creation_date": 1496824715, "answer_id": 44407625, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/44407625#44407625", "title": "Include git commit hash as string into Rust program", "body": "<p>Since Rust 1.19 (cargo 0.20.0), thanks to <a href=\"https://github.com/rust-lang/cargo/pull/3929\" rel=\"noreferrer\">https://github.com/rust-lang/cargo/pull/3929</a>, you can now define a compile-time environment variable (<code>env!(\u2026)</code>) for <code>rustc</code> and <code>rustdoc</code> via:</p>\n\n<pre><code>println!(\"cargo:rustc-env=KEY=value\");\n</code></pre>\n\n<p>So OP's program can be written as:</p>\n\n<pre><code>// build.rs\nuse std::process::Command;\nfn main() {\n    // note: add error checking yourself.\n    let output = Command::new(\"git\").args(&amp;[\"rev-parse\", \"HEAD\"]).output().unwrap();\n    let git_hash = String::from_utf8(output.stdout).unwrap();\n    println!(\"cargo:rustc-env=GIT_HASH={}\", git_hash);\n}\n</code></pre>\n\n\n\n<pre><code>// main.rs\nfn main() {\n    println!(\"{}\", env!(\"GIT_HASH\"));\n    // output something like:\n    // 7480b50f3c75eeed88323ec6a718d7baac76290d\n}\n</code></pre>\n\n<p>Note that you still cannot use this if you still want to support 1.18 or below.</p>\n"}, {"tags": [], "owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "is_accepted": false, "score": 2, "last_activity_date": 1522111909, "creation_date": 1522111909, "answer_id": 49502807, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/49502807#49502807", "title": "Include git commit hash as string into Rust program", "body": "<p>Uh. (I do not recommend this in production or in testing or in public code or even in private code but I mean, it kinda does the job?)</p>\n\n<pre><code>const REF: &amp;str = include_str!(\"../.git/HEAD\");\nconst REF_MASTER: &amp;str = include_str!(\"../.git/refs/heads/master\");\n\n// (elsewhere)\nif REF == \"ref: refs/heads/master\" { REF_MASTER } else { REF }\n</code></pre>\n\n<p>(do not use this unless you're making some sort of codegolf. note that this is 100% untested.)</p>\n"}, {"tags": [], "owner": {"reputation": 2444, "user_id": 287761, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UZJAT.png?s=128&g=1", "display_name": "Enselic", "link": "https://stackoverflow.com/users/287761/enselic"}, "is_accepted": false, "score": 1, "last_activity_date": 1612040485, "last_edit_date": 1612040485, "creation_date": 1612035396, "answer_id": 65972328, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/65972328#65972328", "title": "Include git commit hash as string into Rust program", "body": "<p>There is an easy way to do this without the need for any <em>build.rs</em> logic or custom crates. You simply pass the current git hash directly to the build command as an environment variable, and read it in your program with <code>option_env!(&quot;PROJECT_VERSION&quot;)</code>, with a <code>env!(&quot;CARGO_PKG_VERSION&quot;)</code> fallback. These macros read environment variables during <em>build time</em>.</p>\n<p>Examples follow that builds this minimal <strong>src/main.rs</strong>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let version = option_env!(&quot;PROJECT_VERSION&quot;).unwrap_or(env!(&quot;CARGO_PKG_VERSION&quot;));\n    println!(&quot;This binary was built from {}&quot;, version);\n}\n</code></pre>\n<p>When you build the program and want an accurate git hash, e.g. in your CI/CD configuration, you prefix the cargo command with <code>PROJECT_VERSION=$(git rev-parse --short HEAD)</code>. Like this for <code>cargo run</code> (but also works for <code>cargo build</code> and others):</p>\n<pre class=\"lang-sh prettyprint-override\"><code>% PROJECT_VERSION=$(git rev-parse --short HEAD) cargo run\nThis binary was built from 6ca63b2\n</code></pre>\n<p>Personally I prefer <code>$(git describe)</code> over <code>$(git rev-parse)</code> since the former is more descriptive (using <code>cargo build</code> as example now just for variation):</p>\n<pre class=\"lang-sh prettyprint-override\"><code>% PROJECT_VERSION=$(git describe) cargo build \n% ./target/debug/your-program\nThis binary was built from v0.3.0-15-g6ca63b2    # or just 'v0.3.0' if current commit is tagged with that\n</code></pre>\n<p>Since you have a <code>CARGO_PKG_VERSION</code> fallback, your IDE can still build the files on-the-fly for you. Likewise, for development, you can skip passing <code>PROJECT_VERSION</code>. In that case, the version from your <code>Cargo.toml</code> will be used:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>% cargo run\nThis binary was built from 0.3.0\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3765, "favorite_count": 3, "accepted_answer_id": 43753808, "answer_count": 5, "score": 18, "last_activity_date": 1612040485, "creation_date": 1493795601, "last_edit_date": 1612036077, "question_id": 43753491, "link": "https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program", "title": "Include git commit hash as string into Rust program", "body": "<p>I host a Rust project in git repository and I want to make it print the version on some command. How can I include the version into the program? I thought that the build script could set environment variables which can be used while compiling the project itself, but it does not work:</p>\n\n<p><strong>build.rs</strong>:</p>\n\n<pre><code>use std::env;\n\nfn get_git_hash() -&gt; Option&lt;String&gt; {\n    use std::process::Command;\n\n    let branch = Command::new(\"git\")\n                         .arg(\"rev-parse\")\n                         .arg(\"--abbrev-ref\")\n                         .arg(\"HEAD\")\n                         .output();\n    if let Ok(branch_output) = branch {\n        let branch_string = String::from_utf8_lossy(&amp;branch_output.stdout);\n        let commit = Command::new(\"git\")\n                             .arg(\"rev-parse\")\n                             .arg(\"--verify\")\n                             .arg(\"HEAD\")\n                             .output();\n        if let Ok(commit_output) = commit {\n            let commit_string = String::from_utf8_lossy(&amp;commit_output.stdout);\n\n            return Some(format!(\"{}, {}\",\n                        branch_string.lines().next().unwrap_or(\"\"),\n                        commit_string.lines().next().unwrap_or(\"\")))\n        } else {\n            panic!(\"Can not get git commit: {}\", commit_output.unwrap_err());\n        }\n    } else {\n        panic!(\"Can not get git branch: {}\", branch.unwrap_err());\n    }\n    None\n}\n\nfn main() {\n    if let Some(git) = get_git_hash() {\n        env::set_var(\"GIT_HASH\", git);\n    }\n}\n</code></pre>\n\n<p><strong>src/main.rs:</strong></p>\n\n<pre><code>pub const GIT_HASH: &amp;'static str = env!(\"GIT_HASH\");\n\nfm main() {\n    println!(\"Git hash: {}\", GIT_HASH);\n}\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: environment variable `GIT_HASH` not defined\n  --&gt; src/main.rs:10:25\n   |\n10 | pub const GIT_HASH: &amp;'static str = env!(\"GIT_HASH\");\n   |   \n                                        ^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Is there a way to pass such data at compile time? How can I communicate between the build script and the source code if not with environment variables? I can only think about writing data to some file, but I think this is overkill for this case.</p>\n"}, {"tags": ["rust", "memory-safety"], "answers": [{"tags": [], "owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "is_accepted": false, "score": 1, "last_activity_date": 1493817271, "last_edit_date": 1493817271, "creation_date": 1493794481, "answer_id": 43753126, "question_id": 43753065, "link": "https://stackoverflow.com/questions/43753065/why-does-the-rust-documentation-say-that-sharing-a-reference-to-a-vector-would-c/43753126#43753126", "title": "Why does the Rust documentation say that sharing a reference to a vector would create an invalid vector even though the vector is on the heap?", "body": "<p>I guess I understand it. The key is to know that Rust has this internal pointer which is again a space on the stack that Rust uses to locate the address of the data on the heap!</p>\n\n<p>If <code>v2</code> changes this data on the heap, <code>v2</code>'s internal pointer gets updated with the new data allocation address, while <code>v1</code>'s internal pointer would still refer to the old data allocation address! </p>\n"}, {"tags": [], "owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "is_accepted": true, "score": 2, "last_activity_date": 1493818998, "creation_date": 1493818998, "answer_id": 43761855, "question_id": 43753065, "link": "https://stackoverflow.com/questions/43753065/why-does-the-rust-documentation-say-that-sharing-a-reference-to-a-vector-would-c/43761855#43761855", "title": "Why does the Rust documentation say that sharing a reference to a vector would create an invalid vector even though the vector is on the heap?", "body": "<p>What you're missing is that a <code>Vec</code> contains both a pointer to the heap and a <code>len</code>, or length of the heap's data.  If <code>v2</code> truncates the <code>Vec</code>, it's possible that the truncated data has been freed, and <code>v1</code> still believes that the truncated memory is still part of the vector.</p>\n"}], "owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 228, "favorite_count": 1, "accepted_answer_id": 43761855, "answer_count": 2, "score": 1, "last_activity_date": 1493818998, "creation_date": 1493794257, "last_edit_date": 1493817226, "question_id": 43753065, "link": "https://stackoverflow.com/questions/43753065/why-does-the-rust-documentation-say-that-sharing-a-reference-to-a-vector-would-c", "title": "Why does the Rust documentation say that sharing a reference to a vector would create an invalid vector even though the vector is on the heap?", "body": "<p>The following is an excerpt from <em>The Rust Programming Language</em> <a href=\"https://doc.rust-lang.org/stable/book/ownership.html\" rel=\"nofollow noreferrer\">chapter on ownership</a>:</p>\n\n<blockquote>\n  <p>Now consider the following code fragment:</p>\n\n<pre><code>let v = vec![1, 2, 3];\n\nlet mut v2 = v;\n</code></pre>\n  \n  <p>The first line allocates memory for the vector object <code>v</code> on the stack\n  like it does for <code>x</code> above. But in addition to that it also allocates\n  some memory on the heap for the actual data (<code>[1, 2, 3]</code>). Rust copies\n  the address of this heap allocation to an internal pointer, which is\n  part of the vector object placed on the stack (let's call it the data\n  pointer).</p>\n  \n  <p>It is worth pointing out (even at the risk of stating the obvious)\n  that the vector object and its data live in separate memory regions\n  instead of being a single contiguous memory allocation (due to reasons\n  we will not go into at this point of time). These two parts of the\n  vector (the one on the stack and one on the heap) must agree with each\n  other at all times with regards to things like the length, capacity,\n  etc.</p>\n  \n  <p>When we move <code>v</code> to <code>v2</code>, Rust actually does a bitwise copy of the vector\n  object <code>v</code> into the stack allocation represented by <code>v2</code>. This shallow\n  copy does not create a copy of the heap allocation containing the\n  actual data. Which means that there would be two pointers to the\n  contents of the vector both pointing to the same memory allocation on\n  the heap. It would violate Rust\u2019s safety guarantees by introducing a\n  data race if one could access both <code>v</code> and <code>v2</code> at the same time.</p>\n  \n  <p>For example if we truncated the vector to just two elements through\n  <code>v2</code>:</p>\n\n<pre><code>v2.truncate(2);\n</code></pre>\n  \n  <p>and <code>v</code> were still accessible we'd end up with an invalid vector since <code>v</code>\n  would not know that the heap data has been truncated. Now, the part of\n  the vector <code>v</code> on the stack does not agree with the corresponding part\n  on the heap. <code>v</code> still thinks there are three elements in the vector and\n  will happily let us access the non existent element <code>v[2]</code> but as you\n  might already know this is a recipe for disaster. Especially because\n  it might lead to a segmentation fault or worse allow an unauthorized\n  user to read from memory to which they don't have access.</p>\n</blockquote>\n\n<p>After truncating the vector using <code>v2</code>, the truncated values are updated on the heap memory. <code>v1</code> still sees the heap memory and after truncation, it sees the new values. So why does the book say</p>\n\n<blockquote>\n  <p>and <code>v</code> were still accessible we'd end up with an invalid vector since <code>v</code> would not know that the heap data has been truncated</p>\n</blockquote>\n"}, {"tags": ["rust", "overloading"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493796473, "post_id": 43746695, "comment_id": 74548997, "body": "Is the <code>extern &quot;rust-call&quot;</code> bit strictly necessary here?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493813088, "post_id": 43746695, "comment_id": 74560150, "body": "@MatthieuM. yep. The trait defines an <code>extern &quot;rust-call&quot;</code> function, and the implementation has to match the trait definition. More broadly, <code>rust-call</code> is what tells the compiler that <code>arg</code> is really multiple arguments to the function and to do the transformation such that each tuple value is a separate argument. Presumably a single large tuple passed to a function behaves differently than many separate values at the hardware level."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493815227, "post_id": 43746695, "comment_id": 74561754, "body": "@Shepmaster: It might be passed differently depending on the ABI indeed (for example, passing a single pointer instead of each element individually). I hadn&#39;t considered that, since in C++ it would be a variadic template call, which doesn&#39;t have this issue."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1493756953, "last_edit_date": 1495540025, "creation_date": 1493756953, "answer_id": 43746695, "question_id": 43746406, "link": "https://stackoverflow.com/questions/43746406/is-it-possible-to-avoid-a-pointless-definition-of-fnonce/43746695#43746695", "title": "Is it possible to avoid a pointless definition of `FnOnce`?", "body": "<blockquote>\n  <p>Which is kind of pointless since <code>call_once</code> will never be called</p>\n</blockquote>\n\n<p>That's not up to you to decide; that's up to the <em>caller</em>. They may decide to call the cache in a <code>FnOnce</code> context.</p>\n\n<p>The good news is that there's a perfectly reasonable implementation of <code>FnOnce</code> \u2014 just delegate to the <code>FnMut</code> implementation:</p>\n\n<pre><code>impl&lt;T, R&gt; FnOnce&lt;(T,)&gt; for Cache&lt;T,R&gt;\n    where T: Eq + Hash + Copy,\n          R: Copy\n{\n    type Output = R;\n\n    extern \"rust-call\" fn call_once(mut self, arg: (T,))\n        -&gt; Self::Output\n    {\n        self.call_mut(arg)\n    }\n}\n</code></pre>\n\n<p>This is what the compiler's automatic implementation of these traits does;  it also delegates <code>FnMut</code> to <code>Fn</code> if appropriate.</p>\n\n<p>See also </p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31190851/155423\">Why is Fn derived from FnMut (which is derived from FnOnce)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30177395/155423\">When does a closure implement Fn, FnMut and FnOnce?</a></li>\n</ul>\n"}], "owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 204, "favorite_count": 0, "accepted_answer_id": 43746695, "answer_count": 1, "score": 1, "last_activity_date": 1493756953, "creation_date": 1493755809, "last_edit_date": 1493756466, "question_id": 43746406, "link": "https://stackoverflow.com/questions/43746406/is-it-possible-to-avoid-a-pointless-definition-of-fnonce", "title": "Is it possible to avoid a pointless definition of `FnOnce`?", "body": "<p>In trying to experiment with overloading the call syntax, I introduced a simple cache that can cache the result of an expensive computation. I am a bit confused about the use of a piece of the syntax. I'll introduce the code step by step before the question.</p>\n\n<p>The cache is intended to be used like this:</p>\n\n<pre><code>fn fib(x: i32) -&gt; i32 {\n    if x &lt; 2 { x } else { fib(x-1) + fib(x-2) }\n}\n\nfn main() {\n    let mut cfib = Cache::new(fib);\n\n    // Loop that repeats computation and extracts it from the cache\n    // the second time.\n    for x in 1..200 {\n        let val = 5 * x % 40;\n        println!(\"fibc({}) = {}\", val, cfib(val));\n    }\n}\n</code></pre>\n\n<p>We first have the preamble to enable features that are not yet in stable:</p>\n\n<pre><code>#![feature(fn_traits, unboxed_closures)]\n\nuse std::collections::HashMap;\nuse std::hash::Hash;\n</code></pre>\n\n<p>We introduce the cache as a structure with a <code>HashMap</code> and a function to compute new values.</p>\n\n<pre><code>struct Cache&lt;T, R&gt; {\n    cache: HashMap&lt;T, R&gt;,\n    func: fn(T) -&gt; R,\n}\n\nimpl&lt;T, R&gt; Cache&lt;T, R&gt;\n    where T: Eq + Hash + Copy,\n          R: Copy\n{\n    fn new(func: fn(T) -&gt; R) -&gt; Cache&lt;T, R&gt; {\n        Cache { cache: HashMap::new(), func: func }\n    }\n\n    fn compute(&amp;mut self, x: T) -&gt; R {\n        let func = self.func;\n        let do_insert = || (func)(x);\n        *self.cache.entry(x).or_insert_with(do_insert)\n    }\n}\n</code></pre>\n\n<p>I create an implementation of the <code>FnMut</code> trait since the cache needs to be mutable.</p>\n\n<pre><code>impl&lt;T, R&gt; FnMut&lt;(T,)&gt; for Cache&lt;T, R&gt;\n    where T: Eq + Hash + Copy,\n          R: Copy\n{\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (T,))\n        -&gt; Self::Output\n    {\n        let (arg,) = args;\n        self.compute(arg)\n    }\n}\n</code></pre>\n\n<p>Even though I find the syntax <code>FnMut&lt;(T,)&gt;</code> quite strange, this is fine and safe and conveys the intentions quite clear. Since I need to define the return type of the function, I would like to write the beginning as:</p>\n\n<pre><code>impl&lt;T, R&gt; FnMut&lt;(T,), Output=R&gt; for Cache&lt;T, R&gt;\n    where T: Eq + Hash + Copy,\n          R: Copy\n{}\n</code></pre>\n\n<p>But that fails with an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0229]: associated type bindings are not allowed here\n  --&gt; src/main.rs:55:24\n   |\n55 | impl&lt;T, R&gt; FnMut&lt;(T,), Output=R&gt; for Cache&lt;T, R&gt;\n   |                        ^^^^^^^^ associate type not allowed here\n</code></pre>\n\n<p>I had to implement <code>FnOnce</code> like this:</p>\n\n<pre><code>impl&lt;T, R&gt; FnOnce&lt;(T,)&gt; for Cache&lt;T,R&gt;\n    where T: Eq + Hash + Copy,\n          R: Copy\n{\n    type Output = R;\n\n    extern \"rust-call\" fn call_once(self, _arg: (T,))\n        -&gt; Self::Output\n    {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>Which is kind of pointless since <code>call_once</code> will never be called, and from <a href=\"http://doc.rust-lang.org/book/associated-types.html\" rel=\"nofollow noreferrer\">Associated Types</a> it seems like this should be possible. However, it fails with an error that associated types are not allowed there.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/error-index.html\" rel=\"nofollow noreferrer\">Rust Compiler Error Index</a> mentions the syntax <code>Fn(T) -&gt; R</code> and also says that <code>Fn&lt;(T,), Output=U&gt;</code> should work, but I cannot make it work even though I am using nightly Rust compiler.</p>\n\n<p>Since it is desirable to catch as many errors as possible at compile time it would be good to avoid creating the \"unimplemented\" function in <code>FnOnce</code> since that will fail at runtime rather than compile time.</p>\n\n<p>Is it possible to implement only <code>FnMut</code> and provide the return type of the function in some manner?</p>\n"}, {"tags": ["windows", "compilation", "rust"], "answers": [{"comments": [{"owner": {"reputation": 221, "user_id": 2601064, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db3dd15032578ceb02ab34100da8dd94?s=128&d=identicon&r=PG", "display_name": "user2601064", "link": "https://stackoverflow.com/users/2601064/user2601064"}, "edited": false, "score": 1, "creation_date": 1493750758, "post_id": 43744494, "comment_id": 74533060, "body": "Sweet! it worked. The working code looks like this:      #![feature(windows_subsystem)]      #![cfg_attr(not(test), windows_subsystem = &quot;windows&quot;)]     #![cfg_attr(test, windows_subsystem = &quot;console&quot;)]"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1493748488, "creation_date": 1493748488, "answer_id": 43744494, "question_id": 43744379, "link": "https://stackoverflow.com/questions/43744379/can-i-conditionally-compile-my-rust-program-for-a-windows-subsystem/43744494#43744494", "title": "Can I conditionally compile my Rust program for a Windows subsystem?", "body": "<p>As described in <a href=\"https://doc.rust-lang.org/book/conditional-compilation.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, specifically the <a href=\"https://doc.rust-lang.org/book/conditional-compilation.html\" rel=\"nofollow noreferrer\">chapter on conditional compilation</a>:</p>\n\n<blockquote>\n  <p>You can also set another attribute based on a <code>cfg</code> variable with <code>cfg_attr</code>:</p>\n\n<pre><code>#[cfg_attr(a, b)]\n</code></pre>\n  \n  <p>Will be the same as <code>#[b]</code> if <code>a</code> is set by <code>cfg</code> attribute, and\n  nothing otherwise.</p>\n</blockquote>\n\n<p>In this case, it should be something like</p>\n\n<pre><code>#![cfg_attr(my_feature_name_i_made_up, windows_subsystem = \"windows\")]\n</code></pre>\n"}], "owner": {"reputation": 221, "user_id": 2601064, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db3dd15032578ceb02ab34100da8dd94?s=128&d=identicon&r=PG", "display_name": "user2601064", "link": "https://stackoverflow.com/users/2601064/user2601064"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 726, "favorite_count": 0, "accepted_answer_id": 43744494, "answer_count": 1, "score": 2, "last_activity_date": 1493748488, "creation_date": 1493748059, "last_edit_date": 1493748228, "question_id": 43744379, "link": "https://stackoverflow.com/questions/43744379/can-i-conditionally-compile-my-rust-program-for-a-windows-subsystem", "title": "Can I conditionally compile my Rust program for a Windows subsystem?", "body": "<p>I have a Rust program that I want to compile for the \"windows\" subsystem when I'm building it for distribution. Currently I am using this in my main.rs:</p>\n\n<pre><code>#![feature(windows_subsystem)]\n#![windows_subsystem = \"windows\"]\n</code></pre>\n\n<p>This works, but when I run the tests on a Windows machine, the Windows subsystem does not have access to the console so I cannot see the output. I need to comment out the above lines of code in order to see the result of my tests. </p>\n\n<p>Is there a way to conditionally compile which subsystem I'm running on in order to get the tests to work?</p>\n"}, {"tags": ["rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "edited": false, "score": 0, "creation_date": 1493752508, "post_id": 43743641, "comment_id": 74534082, "body": "I&#39;m having a very hard time fixing up my mental model here...what is wrong with your original version of <code>receive2</code>?  And why does the problem disappear when binding only a single struct field?  Does it have something to do with <code>Box&lt;&gt;</code> being special?  Also -- what special power are you referring to?  Thanks Shep"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "edited": false, "score": 1, "creation_date": 1493753286, "post_id": 43743641, "comment_id": 74534454, "body": "@user1935361 I added a little bit more text."}, {"owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "edited": false, "score": 0, "creation_date": 1493753488, "post_id": 43743641, "comment_id": 74534537, "body": "in regards to [1] -- because <code>Deref</code> always returns a reference, I think I get it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1529811081, "last_edit_date": 1529811081, "creation_date": 1493745066, "answer_id": 43743641, "question_id": 43742606, "link": "https://stackoverflow.com/questions/43742606/use-of-moved-value-when-pattern-matching-an-enum-with-multiple-values-after-down/43743641#43743641", "title": "Use of moved value when pattern matching an enum with multiple values after downcasting", "body": "<blockquote>\n  <p>I tried pattern matching on the same enum without downcasting before, and this works fine</p>\n</blockquote>\n\n<p>This is a good attempt at reducing the problem. The issue is that you reduced too far. Downcasting a <code>Box&lt;T&gt;</code> to a <code>Foo</code> doesn't return a <code>Foo</code>, <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\" rel=\"nofollow noreferrer\">it returns a <code>Box&lt;Foo&gt;</code></a>:</p>\n\n<pre><code>fn downcast&lt;T&gt;(self) -&gt; Result&lt;Box&lt;T&gt;, Box&lt;Any + 'static&gt;&gt; \n</code></pre>\n\n<p>You can reproduce the problem with:</p>\n\n<pre><code>#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Msg { param_a: String, param_b: usize },\n}\n\nfn receive2(message: Box&lt;ExampleMessage&gt;) {\n    match *message {\n        ExampleMessage::Msg { param_a, param_b } =&gt; println!(\"got message\"),\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<h3>The good news</h3>\n\n<p>This is a limitation of the current implementation of the borrow checker and your original code will work as-is when <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> are enabled:</p>\n\n<pre><code>#![feature(nll)]\n\n#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Msg { param_a: String, param_b: usize },\n}\n\nfn receive2(message: Box&lt;ExampleMessage&gt;) {\n    match *message {\n        ExampleMessage::Msg { param_a, param_b } =&gt; println!(\"got message\"),\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<h3>The current reality</h3>\n\n<p>Non-lexical lifetimes and the MIR-based borrow checker are not yet stable!</p>\n\n<p>When you match against a dereferenced value, the value is <em>not</em> normally moved. This <a href=\"https://stackoverflow.com/q/43370054/155423\">allows you to do something like</a>:</p>\n\n<pre><code>enum Foo {\n    One,\n    Two,\n}\n\nfn main() {\n    let f = &amp;Foo::One;\n    match *f {\n        Foo::One =&gt; {}\n        Foo::Two =&gt; {}\n    }\n}\n</code></pre>\n\n<p>In this case, you wish to take ownership of the thing inside the <code>Box</code><sup>1</sup> in order to take ownership of the fields when destructuring it in the <code>match</code>. You can accomplish this by moving the value out of the box <em>before</em> trying to match on it.</p>\n\n<p>The long way to do this is:</p>\n\n<pre><code>fn receive2(message: Box&lt;ExampleMessage&gt;) {\n    let message = *message;\n    match message {\n        ExampleMessage::Msg { param_a, param_b } =&gt; println!(\"got message\"),\n    }\n}\n</code></pre>\n\n<p>But you can also force the move by using curly braces:</p>\n\n<pre><code>fn receive2(message: Box&lt;ExampleMessage&gt;) {\n    match {*message} {\n        ExampleMessage::Msg { param_a, param_b } =&gt; println!(\"got message\"),\n    }\n}\n</code></pre>\n\n<p>I don't fully understand why a single field would work; it's certainly inconsistent. My only <em>guess</em> is that the ownership of the <code>Box</code> is moved to the first param, the param is extracted, then the compiler tries to move it again to the next parameter.</p>\n\n<hr>\n\n<p><strong>1</strong> \u2014 Moving the contained element out via <code>*</code> is a special power that only <code>Box</code> supports. For example, if you try to do this with a reference, you get the \"cannot move out of borrowed content\" error. You cannot implement the <code>Deref</code> trait to do this either; it's a hard-coded ability inside the compiler.</p>\n"}], "owner": {"reputation": 964, "user_id": 4200103, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f0044a7575ce0b9f34649eb380d58a5a?s=128&d=identicon&r=PG&f=1", "display_name": "Anton", "link": "https://stackoverflow.com/users/4200103/anton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 907, "favorite_count": 0, "accepted_answer_id": 43743641, "answer_count": 1, "score": 1, "last_activity_date": 1529811081, "creation_date": 1493741458, "last_edit_date": 1493746634, "question_id": 43742606, "link": "https://stackoverflow.com/questions/43742606/use-of-moved-value-when-pattern-matching-an-enum-with-multiple-values-after-down", "title": "Use of moved value when pattern matching an enum with multiple values after downcasting", "body": "<p>I can use pattern matching on an <code>enum</code> that has one <code>String</code> parameter:</p>\n\n<pre><code>extern crate robots;\n\nuse std::any::Any;\nuse robots::actors::{Actor, ActorCell};\n\n#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Msg { param_a: String },\n}\n\npub struct Dummy {}\n\nimpl Actor for Dummy {\n    // Using `Any` is required for actors in RobotS\n    fn receive(&amp;self, message: Box&lt;Any&gt;, _context: ActorCell) {\n        if let Ok(message) = Box::&lt;Any&gt;::downcast::&lt;ExampleMessage&gt;(message) {\n            match *message {\n                ExampleMessage::Msg { param_a } =&gt; println!(\"got message\"),\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>And yet I am unable to perform pattern matching on an enum with 2 parameters:</p>\n\n<pre><code>#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Msg { param_a: String, param_b: usize },\n}\n\nimpl Actor for Dummy {\n    // Using `Any` is required for actors in RobotS\n    fn receive(&amp;self, message: Box&lt;Any&gt;, _context: ActorCell) {\n        if let Ok(message) = Box::&lt;Any&gt;::downcast::&lt;ExampleMessage&gt;(message) {\n            match *message {\n                ExampleMessage::Msg { param_a, param_b } =&gt; println!(\"got message\"),\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This results in the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `message`\n  --&gt; src/example.rs:19:48\n   |\n19 |                 ExampleMessage::Msg { param_a, param_b } =&gt; {\n   |                                       -------  ^^^^^^^ value used here after move\n   |                                       |\n   |                                       value moved here\n   |\n   = note: move occurs because `message.param_a` has type `std::string::String`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I tried pattern matching on the same <code>enum</code> without downcasting before, and this works fine but I am required to downcast.\nThis just seems like very strange behavior to me and I don't know how to circumvent this error.</p>\n\n<p>I am using Rust 1.19.0-nightly (afa1240e5 2017-04-29) </p>\n"}, {"tags": ["rust", "memory-alignment"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1493730874, "post_id": 43735723, "comment_id": 74520564, "body": "I much prefer the new syntax, but it certainly is tricky when there&#39;s no hint that the &quot;documented&quot; syntax is actually not supported."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 7, "last_activity_date": 1493723277, "last_edit_date": 1493723277, "creation_date": 1493721185, "answer_id": 43735723, "question_id": 43735242, "link": "https://stackoverflow.com/questions/43735242/use-of-rust-alignment-feature-issue-33626/43735723#43735723", "title": "Use of Rust alignment feature (issue 33626)", "body": "<p>You can make that feature work when combined with\n <a href=\"https://github.com/rust-lang/rfcs/blob/6a46363a22fdf6c2a4f49d36862a7e15851ccef4/text/1559-attributes-with-literals.md\" rel=\"noreferrer\">attribute literals</a> (<a href=\"https://play.integer32.com/?gist=57937e012f199cba90e20cc77c8adf05&amp;version=undefined\" rel=\"noreferrer\">Playground</a>):</p>\n\n<pre><code>#![feature(repr_align)]\n#![feature(attr_literals)]\n\n#[repr(align(16))]\nstruct Foo {\n    bar: u32,\n}\n</code></pre>\n\n<p>This is known to work in the latest development version (<a href=\"https://github.com/rust-lang/rust/pull/41673\" rel=\"noreferrer\">PR #41673</a>). Searching <a href=\"https://github.com/rust-lang/rust/search?l=Rust&amp;q=repr+align&amp;type=&amp;utf8=%E2%9C%93\" rel=\"noreferrer\">\"repr align\"</a> in the Rust compiler's codebase, \nall occurrences rely on attribute literals, so it seems likely that the documented form <code>repr(align=\"N\")</code> is not yet supported.</p>\n"}], "owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 513, "favorite_count": 0, "accepted_answer_id": 43735723, "answer_count": 1, "score": 3, "last_activity_date": 1493727316, "creation_date": 1493719781, "last_edit_date": 1493727316, "question_id": 43735242, "link": "https://stackoverflow.com/questions/43735242/use-of-rust-alignment-feature-issue-33626", "title": "Use of Rust alignment feature (issue 33626)", "body": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1358-repr-align.md\" rel=\"nofollow noreferrer\">RFC 1358</a> suggested an alignment attribute <code>#[repr(align=\"N\")]</code> and it was accepted. <a href=\"https://github.com/rust-lang/rust/issues/33626\" rel=\"nofollow noreferrer\">Rust issue 33626</a> incorporated the feature into the nightly version.</p>\n\n<p>I'm unable to use this feature with <code>rustc 1.19.0-nightly (777ee2079 2017-05-01)</code>. If I compile <em>without</em> the feature gate (<code>#![feature(repr_align)]</code>):</p>\n\n<pre><code>#[repr(align=\"16\")]\nstruct Foo {\n    bar: u32,\n}\n</code></pre>\n\n<p>I get the following error statement:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n --&gt; foo.rs:3:1\n  |\n3 | / struct Foo {\n4 | |     bar: u32,\n5 | | }\n  | |_^\n  |\n  = help: add #![feature(repr_align)] to the crate attributes to enable\n</code></pre>\n\n<p>When I compile <em>with</em> the feature gate, the error message says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0552]: unrecognized representation hint\n --&gt; foo.rs:3:8\n  |\n3 | #[repr(align=\"16\")]\n  |        ^^^^^^^^^^\n</code></pre>\n\n<p>I also tried the version suggested by the first error message (even though it does not comply with the issue), but still without success. What is the correct way to use the alignment feature?</p>\n"}, {"tags": ["rust", "pattern-matching", "message-passing"], "answers": [{"comments": [{"owner": {"reputation": 964, "user_id": 4200103, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f0044a7575ce0b9f34649eb380d58a5a?s=128&d=identicon&r=PG&f=1", "display_name": "Anton", "link": "https://stackoverflow.com/users/4200103/anton"}, "edited": false, "score": 0, "creation_date": 1493715651, "post_id": 43733730, "comment_id": 74510719, "body": "I am implementing the Actor trait <code>impl Actor for Dummy</code>. Because I am implementing the trait, I can not make the reference mutable since this would result in an incompatible type error."}, {"owner": {"reputation": 964, "user_id": 4200103, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f0044a7575ce0b9f34649eb380d58a5a?s=128&d=identicon&r=PG&f=1", "display_name": "Anton", "link": "https://stackoverflow.com/users/4200103/anton"}, "edited": false, "score": 0, "creation_date": 1493722753, "post_id": 43733730, "comment_id": 74515226, "body": "I can&#39;t use RefCell because it does not satisfy the trait bound <code>std::marker::Sync</code>. I have found a <a href=\"https://github.com/gamazeps/RobotS/blob/master/test/test.rs\" rel=\"nofollow noreferrer\">test</a> in the github repo of robots. I have to use a Mutex, I will write up the answer myself later today."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 1, "last_activity_date": 1493715869, "last_edit_date": 1493715869, "creation_date": 1493714996, "answer_id": 43733730, "question_id": 43733518, "link": "https://stackoverflow.com/questions/43733518/save-vec-after-pattern-match/43733730#43733730", "title": "Save Vec after pattern match", "body": "<p>You are missing a simple point here: your method <code>receive()</code> gets <code>&amp;self</code> as parameter. You can't modify the <code>self</code> object via <code>&amp;self</code> as it is an <em>immutable</em> reference. In order to change any fields of <code>self</code>, accept a mutable reference (<code>&amp;mut self</code>) or -- if there is no way around it -- use interior mutability. Example:</p>\n\n<pre><code>fn receive(&amp;mut self, message: Box&lt;Any&gt;) {\n    // ...\n    self.data = data;  // works\n    // ...\n}\n</code></pre>\n\n<p>But this might not be possible in your case if you can't change the trait <code>Actor</code> which <code>Dummy</code> implements. In that case you <em>have</em> to use <a href=\"https://doc.rust-lang.org/stable/std/cell/index.html\" rel=\"nofollow noreferrer\">interior mutability</a>, e.g. <code>RefCell&lt;Vec&lt;u8&gt;&gt;</code>. But if you can change the trait, consider doing so. The method <code>receive()</code> already sounds like the <code>self</code> object should be changed to have any effect at all.</p>\n\n<p>If this isn't just a careless mistake on your side, be sure to read the chapters on <a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">Borrowing</a> and <a href=\"https://doc.rust-lang.org/book/mutability.html\" rel=\"nofollow noreferrer\">Mutability</a> in the Rust book, as this is very essential to Rust.</p>\n"}, {"tags": [], "owner": {"reputation": 964, "user_id": 4200103, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f0044a7575ce0b9f34649eb380d58a5a?s=128&d=identicon&r=PG&f=1", "display_name": "Anton", "link": "https://stackoverflow.com/users/4200103/anton"}, "is_accepted": true, "score": 0, "last_activity_date": 1493728713, "creation_date": 1493728713, "answer_id": 43738104, "question_id": 43733518, "link": "https://stackoverflow.com/questions/43733518/save-vec-after-pattern-match/43738104#43738104", "title": "Save Vec after pattern match", "body": "<p>I found a <a href=\"https://github.com/gamazeps/RobotS/blob/master/test/test.rs\" rel=\"nofollow noreferrer\">test</a> in the RobotS github repo that shows how to manage internal state for an <code>Actor</code>.\nThe state has to be encapsulated inside a <code>Mutex</code> for thread-safe access: </p>\n\n<pre><code>extern crate robots;    \n\nuse std::any::Any;\nuse std::sync::Mutex;\nuse robots::actors::{Actor, ActorCell};\n\n\n#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Test { data: Vec&lt;u8&gt; },\n}\n\npub struct Dummy {\n    data: Mutex&lt;Vec&lt;u8&gt;&gt;,\n}\n\nimpl Actor for Dummy {\n    // Using `Any` is required for actors in RobotS\n    fn receive(&amp;self, message: Box&lt;Any&gt;, _context: ActorCell) {\n        if let Ok(message) = Box::&lt;Any&gt;::downcast::&lt;ExampleMessage&gt;(message) {\n            match *message {\n                ExampleMessage::Test { data } =&gt; {\n                    let mut my_data = self.data.lock().unwrap();\n                    *my_data = data;\n                    println!(\"got message\")\n                }\n            }\n        }\n    }\n}\n\nimpl Dummy {\n    pub fn new(_: ()) -&gt; Dummy {\n        let data = Mutex::new(Vec::new());\n        Dummy { data }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 964, "user_id": 4200103, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f0044a7575ce0b9f34649eb380d58a5a?s=128&d=identicon&r=PG&f=1", "display_name": "Anton", "link": "https://stackoverflow.com/users/4200103/anton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 43738104, "answer_count": 2, "score": 0, "last_activity_date": 1493728713, "creation_date": 1493714263, "last_edit_date": 1493726865, "question_id": 43733518, "link": "https://stackoverflow.com/questions/43733518/save-vec-after-pattern-match", "title": "Save Vec after pattern match", "body": "<p>I'm using the <a href=\"http://gamazeps.github.io/RobotS/robots/actors/trait.Actor.html\" rel=\"nofollow noreferrer\"><code>Actor</code></a> trait from the robots crate: </p>\n\n<pre><code>extern crate robots;    \n\nuse std::any::Any;\nuse robots::actors::{Actor, ActorCell};\n\n\n#[derive(Clone, PartialEq)]\npub enum ExampleMessage {\n    Test { data: Vec&lt;u8&gt; },\n}\n\npub struct Dummy {\n    data: Vec&lt;u8&gt;,\n}\n\nimpl Actor for Dummy {\n    // Using `Any` is required for actors in RobotS\n    fn receive(&amp;self, message: Box&lt;Any&gt;, _context: ActorCell) {\n        if let Ok(message) = Box::&lt;Any&gt;::downcast::&lt;ExampleMessage&gt;(message) {\n            match *message {\n                ExampleMessage::Test { data } =&gt; {\n                    self.data = data; // cannot assign to immutable field\n                    println!(\"got message\")\n                }\n            }\n        }\n    }\n}\n\nimpl Dummy {\n    pub fn new(_: ()) -&gt; Dummy {\n        let data = Vec::new();\n        Dummy { data }\n    }\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot assign to immutable field `self.data`\n  --&gt; &lt;anon&gt;:18:21\n   |\n18 |                     self.data = data; // cannot assign to immutable field\n   |                     ^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I understand why my current code does not work, but I don't know what the best way would be to save the incoming data (<code>Vec</code>) so my <code>Dummy</code> can access it later. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493669388, "post_id": 43725671, "comment_id": 74495225, "body": "I was thinking of using a function pointer instead that points to the <code>Read::read</code> method, maybe that would be more efficient (and work for the String case as well)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 1, "creation_date": 1493669737, "post_id": 43725671, "comment_id": 74495388, "body": "@Renato you&#39;d need a pointer to the <i>implementation</i> of <code>Read::read</code> for the appropriate concrete type and you&#39;d need a pointer to the specific data for that concrete type. That would be two pointers, which Rust glues together and calls a <i>fat pointer</i>, and <a href=\"http://stackoverflow.com/q/27567849/155423\">a trait object <b>is that</b></a>. In the linked duplicate, there&#39;s an example of using a <i>trait object reference</i> (<code>&amp;Read</code>) which is what you are asking for. <code>Box&lt;Read&gt;</code> is a <i>boxed trait object</i>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 2, "creation_date": 1493669858, "post_id": 43725671, "comment_id": 74495447, "body": "@Renato Trait objects use so called <i>vtables</i> to achieve runtime polymorphism. These vtables contain function pointers to all the trait&#39;s methods! So you don&#39;t need to do it manually. Additionally, LLVM knows about the vtable and might perform optimizations. So using trait objects is encouraged. About your <code>String</code> problem: use <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>Cursor&lt;String&gt;</code></a> which implements <code>Read</code>."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493669900, "post_id": 43725671, "comment_id": 74495469, "body": "@Shepmaster I was reading that, very interesting... thanks... my code needs to run very fast, so I think I will use the ugly solution that doesn&#39;t require heap allocation."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493670146, "post_id": 43725671, "comment_id": 74495585, "body": "@LukasKalbertodt very good thanks... I must say I miss Java-style polymorphism in this case, though :) much easier to use."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 1, "creation_date": 1493670334, "post_id": 43725671, "comment_id": 74495663, "body": "@Renato Even though, it&#39;s kind of off topic by now, but: remember how to write fast programs. 1. correctness, 2. measure, 3. optimize bottlenecks. Specifically, this implies: don&#39;t think about micro-optimizations too early. Ready from a file or stdin will probably be much more expensive than a small heap allocation of the file descriptor. About Java-style polym.: trying to use Java thinking while writing Rust is very annoying, yes. But don&#39;t worry, you will get used to the Rust-way of thinking soon enough and then everything seems very nice and logical :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493671394, "post_id": 43725671, "comment_id": 74496145, "body": "In the realm of guessing about performance, I&#39;d avoid runtime polymorphism completely. Instead, I&#39;d write a function that takes a type implementing <code>Read</code> (<code>fn foo&lt;R: Read&gt;(rdr: R) { ... }</code> and then call it from each branch, passing in the object. Then the compiler can <i>monomorphize</i> the code."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493671626, "post_id": 43725671, "comment_id": 74496260, "body": "Thanks for the hints... I am only writing Rust to get the best performance I can... micro-optimising is what I am all-about with Rust :D specially in a tiny cli application where this is the main part of the code! But you are right in general, I agree!"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 1, "creation_date": 1493678216, "post_id": 43725671, "comment_id": 74498788, "body": "@Renato For what it&#39;s worth, &quot;Java-style polymorphism&quot; is not so different: in Java, every object is potentially a reference and every polymorphic method call always goes through a vtable. What Java primarily lacks is a distinction between <code>&amp;MyStruct</code> (pointer-to-data) and <code>&amp;MyTrait</code> (pointer-to-data-with-vtable). Rust just makes you deal with the extra indirection, more explicitly."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1493668896, "last_edit_date": 1495539193, "creation_date": 1493668896, "answer_id": 43725671, "question_id": 43725433, "link": "https://stackoverflow.com/questions/43725433/why-cant-a-struct-be-assigned-to-a-binding-with-a-trait-it-implements/43725671#43725671", "title": "Why can&#39;t a struct be assigned to a binding with a trait it implements", "body": "<p>You probably want to use <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\"><em>trait objects</em></a> here. You can use traits in basically two ways:</p>\n\n<ul>\n<li>The static dispatch way: <code>fn foo&lt;T: Trait&gt;(x: T)</code>. This reads \"for an arbitrary, <strong>but fixed</strong> <code>T</code> which implements <code>Trait</code>\".</li>\n<li>The dynamic dispatch way: <code>fn foo(x: &amp;Trait)</code>. This lifts the \"but fixed\" limitation from the first version by using trait objects.</li>\n</ul>\n\n<p>If you want to have a variable which could either hold a reference to <code>Stdin</code> or a <code>File</code> or anything else that implements <code>Read</code>, you can't go for the static dispatch solution, as your implementing type is not fixed.</p>\n\n<hr>\n\n<p>So what is the type of your variable then? <code>Read</code>? Sadly, it's not that easy. Trait objects are <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"nofollow noreferrer\"><em>unsized</em></a> and can't be used on the stack directly. Instead you can only interact with trait objects via references/pointers, like <code>&amp;Read</code>, <code>&amp;mut Read</code>, <code>Box&lt;Read&gt;</code> and so on. Now that we use borrowing-stuff, we might encounter more problems related to that. Luckily, you haven't been the first one encountering this issue: see <a href=\"https://stackoverflow.com/questions/26378842/how-do-i-overcome-match-arms-with-incompatible-types-for-structs-implementing-sa/32937869\">this question</a> for a detailed look at this specific use case.</p>\n\n<p>To simplify a bit, in most cases it's ok to use <code>Box&lt;Trait&gt;</code>. In your case, it would look like this:</p>\n\n<pre><code>use std::io::{stdin, Read};\n\nfn main() {\n    let r: Box&lt;Read&gt; = Box::new(stdin());\n    println!(\"ok\");\n}\n</code></pre>\n"}], "owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2044, "favorite_count": 0, "closed_date": 1493669401, "accepted_answer_id": 43725671, "answer_count": 1, "score": 5, "last_activity_date": 1493668977, "creation_date": 1493667915, "last_edit_date": 1493668977, "question_id": 43725433, "link": "https://stackoverflow.com/questions/43725433/why-cant-a-struct-be-assigned-to-a-binding-with-a-trait-it-implements", "closed_reason": "Duplicate", "title": "Why can&#39;t a struct be assigned to a binding with a trait it implements", "body": "<p>I am trying to understand Rust polymorphism. From my background in OOP, I would expect the following Rust code to work:</p>\n\n<pre><code>use std::io::{stdin, Read};\n\nfn main() {\n    let r: Read = stdin();\n    println!(\"ok\");\n}\n</code></pre>\n\n<p>But it doesn't:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>4 |     let r: Read = stdin();\n  |                   ^^^^^^^ expected trait std::io::Read, found struct `std::io::Stdin`\n</code></pre>\n\n<p>I know that there's a <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noreferrer\"><code>Read</code></a> impl for <code>StdIn</code>, so how can I make this (or whatever is the correct way to do this) work, ie. use <code>Stdin</code>, or a <code>File</code>, or even a <code>String</code> if possible (couldn't find a implementation for that) be used where a <code>Read</code> is expected?</p>\n\n<p>I don't think I can use generics here as I need to pass an instance of <code>r</code>, which can be whatever that implements <code>Read</code>, to another method later, but please tell me if I am wrong.</p>\n"}, {"tags": ["rust", "raw-pointer"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493667496, "post_id": 43725279, "comment_id": 74494318, "body": "<i>receives a pointer [...] <b>and the length</i></b> \u2014 your function only accepts a single argument. Did something get lost along the way?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493667597, "post_id": 43725279, "comment_id": 74494365, "body": "It would be <i>very useful</i> if you&#39;d include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> of the C function."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 3, "creation_date": 1493670362, "post_id": 43725279, "comment_id": 74495674, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/24759028/how-should-you-do-pointer-arithmetic-in-rust\">How should you do pointer arithmetic in Rust?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1493725903, "post_id": 43731929, "comment_id": 74517229, "body": "<code>print_next3</code> is what I would advertise as the &quot;proper&quot; solution, despite the OP not having asked for it. This is because it concentrates unsafety to a single spot: the call to <code>slice::from_raw_parts</code>. After that Rust will take care of the safety and, provided that the caller didn&#39;t lie about the location and length of the data, everything will be safe. The API suggested by the caller is influenced by the C design where pointer arithmetic is what comes naturally. In Rust you want to <i>first</i> get a proper checked slice, and then do everything else."}], "tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": true, "score": 2, "last_activity_date": 1493778479, "last_edit_date": 1493778479, "creation_date": 1493708353, "answer_id": 43731929, "question_id": 43725279, "link": "https://stackoverflow.com/questions/43725279/how-to-get-the-next-pointer/43731929#43731929", "title": "How to get the next pointer?", "body": "<p>As Shepmaster said, you probably need to provide the length of the slice.</p>\n\n<p>Most of the time you're working with pointers, your function will be unsafe (because you usually need to dereference it at some point). It might be a good idea to mark them unsafe to delegate the safety responsibility to the caller.</p>\n\n<p>Here are some examples using <code>offset</code> and <code>from_raw_slice</code>:</p>\n\n<pre><code>use std::mem;\nuse std::slice;\n\n// unsafe!\npub extern \"C\" fn print_next(i: *const u8) {\n    let mut ii = unsafe { mem::transmute::&lt;*const u8, i64&gt;(i) };\n    ii += 1;\n    let iii = unsafe { mem::transmute::&lt;i64, *const u8&gt;(ii) };\n    let jj = unsafe { *iii };\n    println!(\"{}\", jj); // jj is next value\n}\n\n// unsafe!\npub unsafe extern \"C\" fn print_next2(i: *const u8) {\n    let j = *i.offset(1);\n    println!(\"{}\", j);\n}\n\n// (less but still ...) unsafe!\npub unsafe extern \"C\" fn print_next3(i: *const u8, len: usize) {\n    let slice = slice::from_raw_parts(i, len);\n    // we are not checking the size ... so it may panic!\n    println!(\"{}\", slice[1]);\n}\n\nfn main() {\n    let a = [9u8, 4, 6, 7];\n    print_next(&amp;a as *const u8);\n    unsafe {\n        print_next2(&amp;a[1] as *const u8);\n        print_next3(&amp;a[2] as *const u8, 2);\n    }\n\n    // what if I print something not in a??\n    print_next(&amp;a[3] as *const u8); // BAD\n    unsafe { \n        print_next2(&amp;a[3] as *const u8); // BAD\n        print_next3(&amp;a[3] as *const u8, 2); // as bad as others, length is wrong\n\n        print_next3(&amp;a[3] as *const u8, 1); // panic! out of bounds\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 51, "user_id": 7948666, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/52f533ebec75c827c2e57c34be6062dd?s=128&d=identicon&r=PG&f=1", "display_name": "oquechy", "link": "https://stackoverflow.com/users/7948666/oquechy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 43731929, "answer_count": 1, "score": 0, "last_activity_date": 1493778479, "creation_date": 1493667172, "last_edit_date": 1493667384, "question_id": 43725279, "link": "https://stackoverflow.com/questions/43725279/how-to-get-the-next-pointer", "title": "How to get the next pointer?", "body": "<p>I have a function implemented in C, and I want to write a function in Rust with the same interface. The function receives a pointer to the beginning of the array (<code>win8_t *</code>) and the length of the array. I need to be able to run through the array.</p>\n\n<p>There must be a better way to get the next value, but now I can do this strange thing:</p>\n\n<pre><code>use std::mem;\npub extern \"C\" fn print_next(i: *const u8) {\n    let mut ii = unsafe { mem::transmute::&lt;*const u8, i64&gt;(i) };\n    ii += 1;\n    let iii = unsafe { mem::transmute::&lt;i64, *const u8&gt;(ii) };\n    let jj = unsafe { *iii };\n    println!(\"{}\", jj); // jj is next value\n}\n</code></pre>\n"}, {"tags": ["types", "rust", "capnproto"], "comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 0, "creation_date": 1493660550, "post_id": 43723489, "comment_id": 74490956, "body": "Do you care what the type argument is? <a href=\"https://docs.capnproto-rust.org/capnp/message/struct.Builder.html#method.new_default\" rel=\"nofollow noreferrer\">docs.capnproto-rust.org/capnp/message/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1493660974, "post_id": 43723489, "comment_id": 74491165, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Also include the <i>complete</i> error message. For example, those <code>^^^</code> <i>point at something important</i> but we can&#39;t tell what."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1493661434, "post_id": 43723489, "comment_id": 74491398, "body": "<i>coming from a C++ background</i> \u2014 you&#39;re trying to pass a <code>vector</code> instead of a <code>vector&lt;int&gt;</code> \u2014 does that help?"}, {"owner": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493664205, "post_id": 43723489, "comment_id": 74492750, "body": "@Shepmaster the ^^^s point at capnp::message::Builder.  Should I assume that by <code>vector</code> you mean that &#39;Builder&#39; is a template and needs further typing information?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493664277, "post_id": 43723489, "comment_id": 74492779, "body": "Please <a href=\"https://stackoverflow.com/posts/43723489/edit\">edit</a> your question to have the <i>complete error message</i>; comments are not for additional information."}, {"owner": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "edited": false, "score": 0, "creation_date": 1493664532, "post_id": 43723489, "comment_id": 74492910, "body": "See updated question"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493668094, "post_id": 43723489, "comment_id": 74494619, "body": "I think I figured out your problem (see my answer), but I also think you replaced the wrong error with your edit. Please reread it and make sure you&#39;re posting both error messages in their entirety"}], "answers": [{"comments": [{"owner": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "edited": false, "score": 0, "creation_date": 1493754866, "post_id": 43725070, "comment_id": 74535278, "body": "Could you clarify what you mean by bounds on A please?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "edited": false, "score": 1, "creation_date": 1493756946, "post_id": 43725070, "comment_id": 74536431, "body": "@JMzance I&#39;ll do that if you fix the error messages in your question. Deal? ;-)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "edited": false, "score": 1, "creation_date": 1493946804, "post_id": 43725070, "comment_id": 74630621, "body": "@JMzance Done. This actually isn&#39;t a great example of when to use trait bounds, but when I originally answered I couldn&#39;t access the capnproto documentation to know that so I guessed it might be desirable"}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 2, "last_activity_date": 1493946573, "last_edit_date": 1592644375, "creation_date": 1493666257, "answer_id": 43725070, "question_id": 43723489, "link": "https://stackoverflow.com/questions/43723489/why-do-i-get-the-error-expected-type-argument-when-i-annotate-a-type-in-a-rust/43725070#43725070", "title": "Why do I get the error &quot;expected type argument&quot; when I annotate a type in a Rust function?", "body": "<p>Rust <em>will not</em> infer types in function parameter position. This is by design, as the <a href=\"https://www.rust-lang.org/en-US/faq.html#why-arent-function-signatures-inferred\" rel=\"nofollow noreferrer\">Rust language FAQ</a> states:</p>\n<blockquote>\n<h2>Why aren't function signatures inferred?</h2>\n<p>In Rust, declarations tend to come with explicit types, while actual code has its types inferred. There are several reasons for this design:</p>\n<ul>\n<li><p>Mandatory declaration signatures help enforce interface stability at both the module and crate level.</p>\n</li>\n<li><p>Signatures improve code comprehension for the programmer, eliminating the need for an IDE running an inference algorithm across an entire crate to be able to guess at a function\u2019s argument types; it\u2019s always explicit and nearby.</p>\n</li>\n<li><p>Mechanically, it simplifies the inference algorithm, as inference only requires looking at one function at a time.</p>\n</li>\n</ul>\n</blockquote>\n<p>Since <code>capnp::message::Builder&lt;A&gt;</code> takes a type parameter <code>A</code>, you need to qualify the type of the parameter by giving <code>A</code> a value:</p>\n<pre><code>fn dump_capnp_to_file(message: capnp::message::Builder&lt;SomeType&gt;, filename: String) {\n//                                                    ^^^^^^^^^^\n</code></pre>\n<p>or else make your function also generic so it can accept any type <code>A</code>:</p>\n<pre><code>fn dump_capnp_to_file&lt;A&gt;(message: capnp::message::Builder&lt;A&gt;, filename: String) {\n//                   ^^^                                 ^^^\n</code></pre>\n<h3>Putting bounds on <code>A</code></h3>\n<p>If you take the last option, you might want additional <a href=\"https://doc.rust-lang.org/book/traits.html#trait-bounds-on-generic-functions\" rel=\"nofollow noreferrer\">trait bounds</a> to allow you to do different things with <code>message</code> inside the function. For example, you might want to send <code>message</code> to another thread, which requires that <code>Builder&lt;A&gt;</code> implement <code>Send</code>. <code>Builder</code> has the following impl (<a href=\"https://docs.capnproto-rust.org/capnp/message/struct.Builder.html\" rel=\"nofollow noreferrer\">reference</a>):</p>\n<pre><code>impl &lt;A&gt; Send for Builder&lt;A&gt; where A: Send + Allocator\n</code></pre>\n<p>which means that <code>Builder&lt;A&gt;</code> can implement <code>Send</code>, but only when <code>A</code> implements <code>Send</code> and <code>Allocator</code>. You can make that your own bound (requirement) on <code>A</code>:</p>\n<pre><code>fn dump_capnp_to_file&lt;A&gt;(message: capnp::message::Builder&lt;A&gt;, filename: String)\n    where A: Send + Allocator\n{\n    // multi-threaded code...\n}\n</code></pre>\n<p>Alternatively (and maybe slightly better), bound <code>Builder&lt;A&gt;</code> with <code>Send</code> directly:</p>\n<pre><code>fn dump_capnp_to_file&lt;A&gt;(message: capnp::message::Builder&lt;A&gt;, filename: String)\n    where capnp::message::Builder&lt;A&gt;: Send\n</code></pre>\n<p>Then you will only be able to call <code>dump_capnp_to_file</code> on a <code>Builder</code> that implements <code>Send</code>.</p>\n"}], "owner": {"reputation": 1477, "user_id": 406912, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/c9ab0e19036d6800c9d58a10b20def97?s=128&d=identicon&r=PG", "display_name": "JMzance", "link": "https://stackoverflow.com/users/406912/jmzance"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5702, "favorite_count": 1, "accepted_answer_id": 43725070, "answer_count": 1, "score": 3, "last_activity_date": 1493946573, "creation_date": 1493659772, "last_edit_date": 1493933349, "question_id": 43723489, "link": "https://stackoverflow.com/questions/43723489/why-do-i-get-the-error-expected-type-argument-when-i-annotate-a-type-in-a-rust", "title": "Why do I get the error &quot;expected type argument&quot; when I annotate a type in a Rust function?", "body": "<p>I am playing around with Rust's <a href=\"https://github.com/dwrensha/capnproto-rust\" rel=\"nofollow noreferrer\">capnproto library</a>. Because Rust can infer types in some situations, I can do things like this:</p>\n\n<pre><code>let mut message = ::capnp::message::Builder::new_default();\n</code></pre>\n\n<p>Without having to know the type of message. If I want to pass a reference to <code>message</code> into a function, I now need to know what message is to let the function know what to expect.</p>\n\n<p>Is there a convenient way to do this in general?</p>\n\n<p>So far I have done the following:</p>\n\n<pre><code>let testing: () = message;\n</code></pre>\n\n<p>which fails with the compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n   --&gt; src/main.rs:197:18\n    |\n197 |                 let temp: () = message;\n    |                           ^^^^^^^ expected (), found struct `capnp::message::Builder`\n</code></pre>\n\n<p>But when I type annotate my function as follows:</p>\n\n<pre><code>fn example_fn(message: capnp::message::Builder) {...}\n</code></pre>\n\n<p>I get an error like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected 1, found 0\n  --&gt; src/main.rs:72:32\n   |\n72 | fn dump_capnp_to_file(message: capnp::message::Builder, filename: &amp;str) {\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n</code></pre>\n\n<p>error: aborting due to previous error</p>\n\n<p>I'm very new to Rust coming from a C++ background; sorry if this a rookie question!</p>\n"}, {"tags": ["linker", "rust", "llvm", "avr", "relocation"], "answers": [{"tags": [], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "is_accepted": true, "score": 1, "last_activity_date": 1493726646, "last_edit_date": 1493726646, "creation_date": 1493704698, "answer_id": 43731046, "question_id": 43717408, "link": "https://stackoverflow.com/questions/43717408/linking-fails-with-relocation-truncated-to-fit-with-aggressive-inlining/43731046#43731046", "title": "Linking fails with &quot;relocation truncated to fit&quot; with aggressive inlining", "body": "<p>After looking at disassemblies in enough detail, it turns out that these relocation targets are all in offsets of branch instructions, not (short) jumps; e.g. at 0x08:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>00000000 &lt;_ZN12chip8_engine7opcodes6decode17haab3c6c935229a6aE&gt;:\n   0:   e8 2f           mov     r30, r24\n   2:   f9 2f           mov     r31, r25\n   4:   80 e0           ldi     r24, 0x00       ; 0\n   6:   61 30           cpi     r22, 0x01       ; 1\n   8:   01 f4           brne    .+0             ; 0xa &lt;_ZN12chip8_engine7opcodes6decode17haab3c6c935229a6aE+0xa&gt;\n   a:   81 83           std     Z+1, r24        ; 0x01\n   c:   82 83           std     Z+2, r24        ; 0x02\n   e:   81 e0           ldi     r24, 0x01       ; 1\n\n00000010 &lt;LBB0_2&gt;:\n  10:   80 83           st      Z, r24\n  12:   08 95           ret\n</code></pre>\n\n<p>The AVR fork of the Rust compiler currently generates these branches with empty (<code>.+0</code>) offsets, then tries to use the linker to fill them in. For large enough functions, these intra-function offsets can become larger than what fits into a single branch instruction. </p>\n\n<p>I've <a href=\"https://github.com/avr-rust/rust/issues/44\" rel=\"nofollow noreferrer\">reported this as a compiler bug</a> in the AVR fork of Rust. One potential solution that came up there was to get the linker to generate a two-step branch (a branch to a jump) for cases where the offset doesn't fit; the other is to not use the linker at all: since the branches in question are intra-function, the relative addresses should be known at compile time, allowing for generating a two-step branch when needed.</p>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 534, "favorite_count": 0, "accepted_answer_id": 43731046, "answer_count": 1, "score": 1, "last_activity_date": 1493726692, "creation_date": 1493633181, "last_edit_date": 1495542859, "question_id": 43717408, "link": "https://stackoverflow.com/questions/43717408/linking-fails-with-relocation-truncated-to-fit-with-aggressive-inlining", "title": "Linking fails with &quot;relocation truncated to fit&quot; with aggressive inlining", "body": "<p>To work around <a href=\"https://github.com/avr-rust/rust/issues/36\" rel=\"nofollow noreferrer\">a Rust compiler bug in the AVR backend</a>, I have marked a lot of my functions as <code>#[inline(always)]</code>, by just adding the annotations until enough case-of-case optimizations etc. would fire that I no longer run into the issue.</p>\n\n<p>However, with these annotations, linking now fails with lots of <code>relocation truncated to fit</code> messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>target/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_18':\nchip8_avr.cgu-0.rs:(.text.main+0x432): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\ntarget/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_23':\nchip8_avr.cgu-0.rs:(.text.main+0x45c): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\ntarget/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_31':\nchip8_avr.cgu-0.rs:(.text.main+0x4ae): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\ntarget/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_34':\nchip8_avr.cgu-0.rs:(.text.main+0x4d2): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\ntarget/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_146':\nchip8_avr.cgu-0.rs:(.text.main+0x58a): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\nchip8_avr.cgu-0.rs:(.text.main+0x58e): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\nchip8_avr.cgu-0.rs:(.text.main+0x592): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\ntarget/avr-atmega328p/release/deps/chip8_avr-41c427b8d446a439.o: In function `LBB5_153':\nchip8_avr.cgu-0.rs:(.text.main+0x59a): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\nchip8_avr.cgu-0.rs:(.text.main+0x59e): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\nchip8_avr.cgu-0.rs:(.text.main+0x5a6): relocation truncated to fit: R_AVR_7_PCREL against `no symbol'\nchip8_avr.cgu-0.rs:(.text.main+0x5aa): additional relocation overflows omitted from the output\ncollect2: error: ld returned 1 exit status\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/a/15782933/477476\">This SO answer</a> implies that large intra-function jumps are something that the compiler needs to be prepared for. What is the equivalent setting on Rust?</p>\n"}, {"tags": ["rust", "bitarray"], "comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1493632849, "post_id": 43717192, "comment_id": 74477908, "body": "<a href=\"https://crates.io/search?q=BitVec\" rel=\"nofollow noreferrer\">crates.io/search?q=BitVec</a>   ?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1493633199, "post_id": 43717192, "comment_id": 74478062, "body": "&quot;<i>Rust documentation tells about BitVec</i>&quot; -&gt; could you link to where the documentation says that? Maybe it&#39;s indeed a documentation bug."}, {"owner": {"reputation": 317, "user_id": 642028, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/01a34143f1e77d64578e8b4895c99307?s=128&d=identicon&r=PG", "display_name": "Vercetti", "link": "https://stackoverflow.com/users/642028/vercetti"}, "edited": false, "score": 0, "creation_date": 1493633336, "post_id": 43717192, "comment_id": 74478112, "body": "<a href=\"https://doc.rust-lang.org/1.2.0/std/collections/struct.BitVec.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.2.0/std/collections/struct.BitVec.html</a>"}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1493633365, "post_id": 43717192, "comment_id": 74478127, "body": "1.2.0... <i>Years</i> old. ;-]"}, {"owner": {"reputation": 317, "user_id": 642028, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/01a34143f1e77d64578e8b4895c99307?s=128&d=identicon&r=PG", "display_name": "Vercetti", "link": "https://stackoverflow.com/users/642028/vercetti"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1493633474, "post_id": 43717192, "comment_id": 74478166, "body": "@ildjarn, so the onliest way is to use it via Cargo.toml?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1493644458, "post_id": 43717192, "comment_id": 74482687, "body": "@Vercetti You can use crates without Cargo, FWIW. You&#39;re just advised not to."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1493644206, "post_id": 43717473, "comment_id": 74482571, "body": "<i><code>Vec&lt;bool&gt;</code> is not specialized like C++&#39;s <code>vector&lt;bool&gt;</code></i> \u2014 thankfully. That was not a great decision: let&#39;s have a <code>vector</code> that <i>behaves differently</i>."}, {"owner": {"reputation": 15126, "user_id": 1953800, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4173076e5187c82e74379de9aeb00aa4?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/1953800/alex"}, "edited": false, "score": 2, "creation_date": 1506914131, "post_id": 43717473, "comment_id": 79992142, "body": "Just a heads up: this crate &quot;is in maintenance mode, due to insufficient maintainer resources&quot;"}, {"owner": {"reputation": 8728, "user_id": 11797, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/15f2ffaf40ab4f0b1e10f1be1043e3c8?s=128&d=identicon&r=PG", "display_name": "Aleksandar Dimitrov", "link": "https://stackoverflow.com/users/11797/aleksandar-dimitrov"}, "edited": false, "score": 4, "creation_date": 1595877904, "post_id": 43717473, "comment_id": 111621212, "body": "There&#39;s also the confusingly named <code>bitvec</code> crate which I&#39;ve found to be somewhat more featureful. <a href=\"https://docs.rs/bitvec\" rel=\"nofollow noreferrer\">docs.rs/bitvec</a>"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 21, "last_activity_date": 1524838207, "last_edit_date": 1524838207, "creation_date": 1493633580, "answer_id": 43717473, "question_id": 43717192, "link": "https://stackoverflow.com/questions/43717192/what-is-the-proper-way-to-use-bit-array-in-rust/43717473#43717473", "title": "What is the proper way to use bit array in Rust?", "body": "<p>There does not exist a dedicated bit-vector in the standard library and <code>Vec&lt;bool&gt;</code> is not specialized like C++'s <code>vector&lt;bool&gt;</code>. Rust advocates the use of external crates instead of building a huge standard library. The de-facto crate for this use case is <a href=\"https://crates.io/crates/bit-vec\" rel=\"noreferrer\"><code>bit-vec</code></a>. </p>\n\n<p>You appear to have found a link to an old standard library documentation: <code>https://doc.rust-lang.org/1.2.0/std/collections/struct.BitVec.html</code>. Note the <code>1.2.0</code> in the url! The current version of Rust is 1.25 (as of April 2018), which means that <code>1.2</code> is already more than two years old. Apart from that, <code>BitVec</code> is marked as unstable in the 1.2 docs; it was removed later.</p>\n"}], "owner": {"reputation": 317, "user_id": 642028, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/01a34143f1e77d64578e8b4895c99307?s=128&d=identicon&r=PG", "display_name": "Vercetti", "link": "https://stackoverflow.com/users/642028/vercetti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8201, "favorite_count": 0, "accepted_answer_id": 43717473, "answer_count": 1, "score": 9, "last_activity_date": 1524838207, "creation_date": 1493632079, "last_edit_date": 1493644290, "question_id": 43717192, "link": "https://stackoverflow.com/questions/43717192/what-is-the-proper-way-to-use-bit-array-in-rust", "title": "What is the proper way to use bit array in Rust?", "body": "<p>I need a class with functionality equal to <code>vector&lt;bool&gt;</code> in C++. <a href=\"https://doc.rust-lang.org/1.2.0/std/collections/struct.BitVec.html\" rel=\"noreferrer\">The Rust documentation tells about <code>BitVec</code></a>, but <code>use std::collections::BitVec</code> causes <em>Unresolved import</em> error during compiling. According to <a href=\"https://github.com/rust-lang/rust/pull/27998\" rel=\"noreferrer\">a pull request</a>, <code>BitVec</code> has been removed. Is there any adequate replacement for it?</p>\n"}, {"tags": ["rust", "traits", "api-design"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493648150, "post_id": 43714388, "comment_id": 74484578, "body": "Are you sure you need two traits, and not just one trait with a <a href=\"https://doc.rust-lang.org/book/traits.html#default-methods\" rel=\"nofollow noreferrer\">default implementation</a> of <code>children_with_cull</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1493678526, "post_id": 43714388, "comment_id": 74498883, "body": "@trentcl: Those types that would rather implement <code>RawState</code> directly would still have to implement <code>children</code>, even though <code>children</code> is not used directly."}], "answers": [{"comments": [{"owner": {"reputation": 7066, "user_id": 94102, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/622606bdd7ad08e2d2e177a8a8bb507a?s=128&d=identicon&r=PG", "display_name": "Jeremy Salwen", "link": "https://stackoverflow.com/users/94102/jeremy-salwen"}, "edited": false, "score": 0, "creation_date": 1493621342, "post_id": 43715156, "comment_id": 74474250, "body": "Very cool! Exactly what I&#39;m looking for.  I will need to read up on object-safety, but I think my code works fine because my library uses templated functions instead of trait-objects."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1493619798, "creation_date": 1493619798, "answer_id": 43715156, "question_id": 43714388, "link": "https://stackoverflow.com/questions/43714388/rust-trait-with-simple-and-advanced-versions/43715156#43715156", "title": "Rust trait with &quot;simple&quot; and &quot;advanced&quot; versions", "body": "<p>Considering that both <code>RawState</code> and <code>State</code> are not <a href=\"https://huonw.github.io/blog/2015/01/object-safety/\" rel=\"noreferrer\">object-safe</a> (because they use <code>Self</code> in return types), I'll assume that you don't intend to create trait objects for these traits (i.e. no <code>&amp;RawState</code>).</p>\n\n<p>The supertrait bound <code>State: RawState</code> is mostly important when dealing with trait objects, because trait objects can only specify one trait (plus a select few whitelisted traits from the standard library that have no methods, like <code>Copy</code>, <code>Send</code> and <code>Sync</code>). The vtable that the trait object refers to only contains pointers to the methods defined in that trait. But if the trait has supertrait bounds, then the methods from those traits are also included in the vtable. Thus, a <code>&amp;State</code> (if it was legal) would give you access to <code>children_with_cull</code>.</p>\n\n<p>Another situation where the supertrait bound is important is when the subtrait provides default implementations for some methods. The default implementation can make use of the supertrait bound to access methods from another trait.</p>\n\n<p>Since you can't use trait objects, and since you don't have default implementations for the methods in <code>State</code>, I think that you should simply not declare the supertrait bound <code>State: RawState</code>, because it adds nothing (and indeed, causes issues).</p>\n\n<p>With this approach, it becomes necessary to copy the members from <code>RawState</code> that we need to implement <code>State</code>, as you suggested. <code>State</code> would thus be defined like this:</p>\n\n<pre><code>pub trait State: Sized {\n    type Cost: std::cmp::Ord + std::ops::Add&lt;Output = Self::Cost&gt; + std::marker::Copy;\n    type ChildrenIterator: Iterator&lt;Item = (Self, Self::Cost)&gt;;\n\n    fn cull(&amp;self) -&gt; Option&lt;Self::Cost&gt;;\n    fn children(&amp;self) -&gt; Self::ChildrenIterator;\n}\n</code></pre>\n\n<p>(Note that the bound <code>State: Sized</code> is required because we use <code>Self</code> in <code>ChildrenIterator</code>. <code>RawState</code> also need the bound <code>RawState: Sized</code>.)</p>\n\n<p>Finally, we can provide a blanket <code>impl</code> of <code>RawState</code> for all types that implement <code>State</code>. With this <code>impl</code>, any type that implements <code>State</code> will automatically implement <code>RawState</code>.</p>\n\n<pre><code>impl&lt;T&gt; RawState for T\nwhere\n    T: State\n{\n    type Cost = &lt;Self as State&gt;::Cost;\n    type CulledChildrenIterator = std::iter::Empty&lt;(Self, Self::Cost)&gt;; // placeholder\n\n    fn cull(&amp;self) -&gt; Option&lt;Self::Cost&gt; { &lt;Self as State&gt;::cull(self) }\n    fn children_with_cull(&amp;self) -&gt; Self::CulledChildrenIterator {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>Note the syntax to disambiguate the conflicting names: <code>&lt;Self as State&gt;</code>. It's used on the two members we duplicated so that <code>RawState</code> defers to <code>State</code>.</p>\n"}], "owner": {"reputation": 7066, "user_id": 94102, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/622606bdd7ad08e2d2e177a8a8bb507a?s=128&d=identicon&r=PG", "display_name": "Jeremy Salwen", "link": "https://stackoverflow.com/users/94102/jeremy-salwen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 43715156, "answer_count": 1, "score": 3, "last_activity_date": 1493622730, "creation_date": 1493613917, "last_edit_date": 1493622730, "question_id": 43714388, "link": "https://stackoverflow.com/questions/43714388/rust-trait-with-simple-and-advanced-versions", "title": "Rust trait with &quot;simple&quot; and &quot;advanced&quot; versions", "body": "<p>I have two traits which are basically equivalent, but one provides a lower level interface than the other.  Given the higher level trait, one can easily implement the lower level trait.  I want to write a library which accepts an implementation of either trait.</p>\n\n<p>My specific case is a trait for traversing a tree:</p>\n\n<pre><code>// \"Lower level\" version of the trait\npub trait RawState {\n    type Cost: std::cmp::Ord + std::ops::Add&lt;Output = Self::Cost&gt; + std::marker::Copy;\n    type CulledChildrenIterator: Iterator&lt;Item = (Self, Self::Cost)&gt;;\n    fn cull(&amp;self) -&gt; Option&lt;Self::Cost&gt;;\n    fn children_with_cull(&amp;self) -&gt; Self::CulledChildrenIterator;\n}\n// \"Higher level\" version of the trait\npub trait State: RawState {\n    type ChildrenIterator: Iterator&lt;Item = (Self, Self::Cost)&gt;;\n    fn children(&amp;self) -&gt; Self::ChildrenIterator;\n}\n\n// Example of how RawState could be implemented using State\nfn state_children_with_cull&lt;S: State&gt; (s: S)\n     -&gt; impl Iterator&lt;Item = (S, S::Cost)&gt; \n{\n    s.children()\n      .filter_map(move |(state, transition_cost)|\n         state.cull().map(move |emission_cost|\n            (state, transition_cost + emission_cost)\n         )\n      )\n}\n</code></pre>\n\n<p>Here, State trait provides an interface where you define the .children() function to list the children, and the <code>.cull()</code> function to potentially cull a state.  </p>\n\n<p>The <code>RawState</code> trait provides an interface where you define a function <code>.children_with_cull()</code> instead, which iterates through the children and culls them in a single function call.  This allows an implementation of <code>RawState</code> to never even generate children that it knows will be culled.</p>\n\n<p>I would like to allow most users to only implement the <code>State</code> trait, and have the <code>RawState</code> implementation be automatically generated based on their State implementation.  However, when implementing <code>State</code>, some parts of the trait are still a part of <code>RawState</code>, e.g.</p>\n\n<pre><code>#[derive(Clone, Eq, PartialEq, Hash, Debug)]\nstruct DummyState {}\n\nimpl State for DummyState {\n    type Cost = u32;\n    type ChildrenIterator = DummyIt;\n    fn emission(&amp;self) -&gt; Option&lt;Self::Cost&gt; {\n        Some(0u32)\n    }\n    fn children(&amp;self) -&gt; DummyIt {\n        return DummyIt {};\n    }\n}\n</code></pre>\n\n<p>Will give errors, because the type \"Cost\" is defined in RawState, not in State.  On potential workaround, to redefine all the relevant parts of the RawState inside State, i.e. define State as </p>\n\n<pre><code>pub trait State: RawState {\n    type Cost: std::cmp::Ord + std::ops::Add&lt;Output = Self::Cost&gt; + std::marker::Copy;\n    type ChildrenIterator: Iterator&lt;Item = (Self, Self::Cost)&gt;;\n    fn cull(&amp;self) -&gt; Option&lt;Self::Cost&gt;;\n    fn children(&amp;self) -&gt; Self::ChildrenIterator;\n}\n</code></pre>\n\n<p>But then the compiler will complain about the ambiguous duplicate definitions. For example in the <code>DummyState</code> implementation for <code>State</code>, it will complain that <code>Self::Cost</code> is ambiguous, since it can't tell whether you are referring to <code>&lt;Self as State&gt;::Cost</code>, or <code>&lt;Self as RawState&gt;::Cost</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493601491, "post_id": 43712979, "comment_id": 74470048, "body": "Why would an <i>executable</i> want to export a symbol?"}, {"owner": {"reputation": 3753, "user_id": 451641, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/811b28e7b085e2e493fd32c5913a1ae8?s=128&d=identicon&r=PG", "display_name": "Frederik Deweerdt", "link": "https://stackoverflow.com/users/451641/frederik-deweerdt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493602022, "post_id": 43712979, "comment_id": 74470155, "body": "I want it to emulate an existing C binary that loads plugins, and part of the interface is that the binary makes symbols available to the plugin."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493602377, "post_id": 43712979, "comment_id": 74470218, "body": "Rust 1.17 is the current stable version, you should probably include the beta / nightly date and git hash if you are using 1.18."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493603339, "post_id": 43713209, "comment_id": 74470378, "body": "<code>cargo rustc</code> is also available."}, {"owner": {"reputation": 3753, "user_id": 451641, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/811b28e7b085e2e493fd32c5913a1ae8?s=128&d=identicon&r=PG", "display_name": "Frederik Deweerdt", "link": "https://stackoverflow.com/users/451641/frederik-deweerdt"}, "edited": false, "score": 0, "creation_date": 1493603583, "post_id": 43713209, "comment_id": 74470429, "body": "Awesome, thank you. Is there a way to record this in Cargo.toml, by any chance?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1493629099, "post_id": 43713209, "comment_id": 74476592, "body": "Now I&#39;m curious: why doesn&#39;t Rust export those symbols by default? Could you elaborate on that? :)"}, {"owner": {"reputation": 218, "user_id": 7942375, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wEv8ZqQLssg/AAAAAAAAAAI/AAAAAAAAAFg/A9YxZ2kc-OQ/photo.jpg?sz=128", "display_name": "Evin Robertson", "link": "https://stackoverflow.com/users/7942375/evin-robertson"}, "edited": false, "score": 0, "creation_date": 1493633322, "post_id": 43713209, "comment_id": 74478104, "body": "There may be a performance impact or other problems when exporting symbols <a href=\"https://blog.flameeyes.eu/2008/02/why-would-an-executable-export-symbols/\" rel=\"nofollow noreferrer\">blog.flameeyes.eu/2008/02/&hellip;</a>"}], "tags": [], "owner": {"reputation": 218, "user_id": 7942375, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wEv8ZqQLssg/AAAAAAAAAAI/AAAAAAAAAFg/A9YxZ2kc-OQ/photo.jpg?sz=128", "display_name": "Evin Robertson", "link": "https://stackoverflow.com/users/7942375/evin-robertson"}, "is_accepted": false, "score": 3, "last_activity_date": 1493604236, "last_edit_date": 1493604236, "creation_date": 1493603075, "answer_id": 43713209, "question_id": 43712979, "link": "https://stackoverflow.com/questions/43712979/how-to-export-a-symbol-from-a-rust-executable/43713209#43713209", "title": "How to export a symbol from a Rust executable?", "body": "<p>You can pass linker options to rustc, like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc src/main.rs --crate-type bin -C link-args=-Wl,-export-dynamic\n$ nm main|grep export\n00000000000d79c4 R exported_symbol\n</code></pre>\n\n<p>You'll probably want to put this in your rustflags in your <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow noreferrer\">.cargo/config</a> something like:</p>\n\n<pre><code>[target.x86_64-unknown-linux-gnu]\nrustflags = [ \"-C\", \"link-args=-Wl,-export-dynamic\" ]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1378, "user_id": 953439, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LgYlS.jpg?s=128&g=1", "display_name": "Frank Denis", "link": "https://stackoverflow.com/users/953439/frank-denis"}, "is_accepted": true, "score": 2, "last_activity_date": 1566413262, "last_edit_date": 1566413262, "creation_date": 1566403954, "answer_id": 57595625, "question_id": 43712979, "link": "https://stackoverflow.com/questions/43712979/how-to-export-a-symbol-from-a-rust-executable/57595625#57595625", "title": "How to export a symbol from a Rust executable?", "body": "<p>I'd recommend this in the <code>.cargo/config</code> file instead of the above:</p>\n\n<pre><code>[build]\nrustflags = [\"-C\", \"link-args=-rdynamic\"]\n</code></pre>\n\n<p><code>-rdynamic</code> is more portable. In particular, it works both on Linux and MacOS.</p>\n\n<p>Also, in current Rust/LLVM versions, unless a symbol is actually used, the linker is very likely to remove it.</p>\n\n<p>In order to avoid this, a dummy function referencing the exported functions should be called (at any point in time, such as in the <code>main</code> function).</p>\n\n<p>An example of such a function could be:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn init() {\n    let funcs: &amp;[*const extern \"C\" fn()] = &amp;[\n        exported_function_1 as _,\n        exported_function_2 as _,\n        exported_function_3 as _      \n    ];\n    std::mem::forget(funcs);\n}\n</code></pre>\n\n<p>And of course, the exported functions should have the <code>#[no_mangle]</code> property:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub extern \"C\" fn exported_function_1() {\n  // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 3753, "user_id": 451641, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/811b28e7b085e2e493fd32c5913a1ae8?s=128&d=identicon&r=PG", "display_name": "Frederik Deweerdt", "link": "https://stackoverflow.com/users/451641/frederik-deweerdt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1518, "favorite_count": 1, "accepted_answer_id": 57595625, "answer_count": 2, "score": 6, "last_activity_date": 1566413262, "creation_date": 1493600729, "last_edit_date": 1493602398, "question_id": 43712979, "link": "https://stackoverflow.com/questions/43712979/how-to-export-a-symbol-from-a-rust-executable", "title": "How to export a symbol from a Rust executable?", "body": "<p>I'm trying to export a symbol from a Rust executable:</p>\n\n<pre><code>#[allow(non_upper_case_globals)]\n#[no_mangle]\npub static exported_symbol: [u8; 1] = *b\"\\0\";\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p><code>exported_symbol</code> doesn't appear to be exported by the resulting binary:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build\n$ nm ./target/debug/test_export| grep exported_symbol\n</code></pre>\n\n<p>On the other hand, if I build a library with the same source, the symbol does get exported:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc --crate-type cdylib src/main.rs\n$ nm libmain.so| grep exported_symbol\n0000000000016c10 R exported_symbol\n</code></pre>\n\n<p>I'm using Rust 1.18.0 on Linux x86-64.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493594327, "post_id": 43712228, "comment_id": 74468611, "body": "See also <a href=\"http://stackoverflow.com/q/43330616/155423\">How do I fix a missing lifetime specifier?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1493594353, "last_edit_date": 1493594353, "creation_date": 1493593837, "answer_id": 43712299, "question_id": 43712228, "link": "https://stackoverflow.com/questions/43712228/compiler-asking-for-lifetime-in-struct-when-lifetime-is-given/43712299#43712299", "title": "Compiler asking for lifetime in struct when lifetime is given", "body": "<blockquote>\n  <p>Why is it asking for a lifetime if I have given it one?</p>\n</blockquote>\n\n<p>Because you haven't given it the lifetime where it's needed. Look closely at the error message. It's telling you that <code>CircleShape</code> is missing a lifetime, not the <em>reference</em> to <code>CircleShape</code> (although that's also needed). </p>\n\n<p>Review the definition of <code>CircleShape</code>:</p>\n\n<pre><code>pub struct CircleShape&lt;'s&gt; { /* fields omitted */ }\n</code></pre>\n\n<p>It has been parameterized by a lifetime, so you need to provide one:</p>\n\n<pre><code>pub struct Game&lt;'s&gt; {\n    mWindow: RenderWindow,\n    mPlayer: &amp;'s CircleShape&lt;'s&gt;,\n}\n</code></pre>\n\n<p>Whether that's <em>correct</em> for your case, I can't say, but it should compile.</p>\n"}], "owner": {"reputation": 67, "user_id": 2489376, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dd9c61afef77c8d10e46992a712f386d?s=128&d=identicon&r=PG", "display_name": "hilias", "link": "https://stackoverflow.com/users/2489376/hilias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 116, "favorite_count": 0, "accepted_answer_id": 43712299, "answer_count": 1, "score": 0, "last_activity_date": 1493594353, "creation_date": 1493593241, "last_edit_date": 1493593668, "question_id": 43712228, "link": "https://stackoverflow.com/questions/43712228/compiler-asking-for-lifetime-in-struct-when-lifetime-is-given", "title": "Compiler asking for lifetime in struct when lifetime is given", "body": "<p>I'm trying to write the examples in the book \"SFML Game Development\" but I'm having a problem with the lifetimes for the struct that's supposed to represent the game world. The error is as follows:</p>\n\n<pre><code>extern crate sfml;\n\nuse self::sfml::window::*;\nuse self::sfml::graphics::*;\n\npub struct Game&lt;'s&gt; {\n    mWindow: RenderWindow,\n    mPlayer: &amp;'s CircleShape,\n}\n</code></pre>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; src/game.rs:8:18\n  |\n8 |     mPlayer: &amp;'s CircleShape,\n  |                  ^^^^^^^^^^^ expected lifetime parameter\n</code></pre>\n\n<p>Why is it asking for a lifetime if I have given it one?</p>\n"}, {"tags": ["windows", "rust"], "answers": [{"comments": [{"owner": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 1, "creation_date": 1493595571, "post_id": 43712271, "comment_id": 74468883, "body": "resolved by (as @Shepmaster advised) adding path to VS link.exe to <code>%PATH%</code> (before GNU link.exe, part of Git Bash package in my case) and setting <code>%LIB%</code> to <code>c:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.14393.0\\um\\x64\\;c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.10.25017\\lib\\x64\\;c:\\&zwnj;&#8203;Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.14393.0\\ucrt\\x64\\;</code> in my particular case (<code>c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat</code> didn&#39;t help)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1493594221, "last_edit_date": 1493594221, "creation_date": 1493593613, "answer_id": 43712271, "question_id": 43712096, "link": "https://stackoverflow.com/questions/43712096/cant-link-hello-world-program-on-windows-usr-bin-link-extra-operand/43712271#43712271", "title": "Can&#39;t link hello_world program on Windows: /usr/bin/link: extra operand", "body": "<p>As the <a href=\"https://github.com/rust-lang-nursery/rustup.rs#working-with-rust-on-windows\" rel=\"nofollow noreferrer\">rustup documentation</a> says:</p>\n\n<blockquote>\n  <p>As mentioned on the Rust download page, there are two ABIs in use on Windows: the native (MSVC) ABI used by Visual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust you need depends largely on what C/C++ libraries you want to interoperate with: for interop with software produced by Visual Studio use the MSVC build of Rust; for interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU build.</p>\n</blockquote>\n\n<p>You have installed the MSVC toolchain. However, you are running the the compiler in a command shell where <code>link.exe</code> does <em>not</em> point to the MSVC linker, but instead to a GNU toolchain \u2014\u00a0MSVC does not call its linker <code>/usr/bin/link</code> or use options like <code>--help</code>!</p>\n\n<p>You should configure your shell so the MSVC linker is foremost in the PATH or switch to the GNU ABI if that's your goal.</p>\n\n<p>Compare the help output of the two:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ link --help\n    Usage: link FILE1 FILE2\n      or:  link OPTION\n    Call the link function to create a link named FILE2 to an existing FILE1.\n\n          --help     display this help and exit\n          --version  output version information and exit\n\n    GNU coreutils online help: &lt;http://www.gnu.org/software/coreutils/&gt;\n    Full documentation at: &lt;http://www.gnu.org/software/coreutils/link&gt;\n    or available locally via: info '(coreutils) link invocation'\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; link /help\nMicrosoft (R) Incremental Linker Version 14.10.25017.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n   For help on Linker, type `link /link' or `link'\n   For help on Library Manager, type `link /lib' or `lib'\n   For help on Dumper, type `link /dump' or `dumpbin'\n   For help on Editor, type `link /edit' or `editbin'\n   For help on CvtCIL, type `link /cvtcil'\n</code></pre>\n\n<blockquote>\n  <p>I assumed Rust doesn't support VS2017 yet </p>\n</blockquote>\n\n<p>It <em>supports</em> VS2017 just fine; as described in <a href=\"https://blog.rust-lang.org/2017/04/27/Rust-1.17.html\" rel=\"nofollow noreferrer\">the 1.17 release notes</a>, the problem is that it <a href=\"https://github.com/rust-lang/rust/issues/38584\" rel=\"nofollow noreferrer\">cannot automatically find the MSVC installation due to changes in where MSVC installs</a>. Running the Rust compiler from inside a shell that has the proper environment works fine.</p>\n"}], "owner": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3102, "favorite_count": 2, "accepted_answer_id": 43712271, "answer_count": 1, "score": 6, "last_activity_date": 1493594221, "creation_date": 1493592127, "last_edit_date": 1493593242, "question_id": 43712096, "link": "https://stackoverflow.com/questions/43712096/cant-link-hello-world-program-on-windows-usr-bin-link-extra-operand", "title": "Can&#39;t link hello_world program on Windows: /usr/bin/link: extra operand", "body": "<p>I installed Rust on a Windows 10 machine with <a href=\"https://win.rustup.rs/\" rel=\"noreferrer\">rustup-init.exe</a> - the method recommended in the <a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\">Rust Book</a>. The installer told me that Rust needs C-runtime of VS2013 or newer. I have VS2017 installed, I assumed Rust doesn't support VS2017 yet and so agreed to install C-runtime. Installation finished successfully.</p>\n\n<p><code>main.rs</code>:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>Compiling:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; rustc main.rs\nerror: linking with `link.exe` failed: exit code: 1\n  |\n  = note: \"link.exe\" \"/NOLOGO\" \"/NXCOMPAT\" \"/LIBPATH:C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"main.0.o\" \"/OUT:main.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/LIBPATH:C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libstd-0a78323911070f99.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\librand-c279a51d66700350.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcollections-d7bf31a4ca1ea637.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libstd_unicode-d367c3ba0db49600.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libpanic_unwind-2d4bf02140c11dcb.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libunwind-add7a84d7e82d084.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liblibc-84688accbc86d6b7.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liballoc-fe2e68b21f0bdd7a.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liballoc_system-7fc0381594c93f56.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcore-ea9d77e7c23fe65c.rlib\" \"C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcompiler_builtins-91b619d34dd1f5aa.rlib\" \"advapi32.lib\" \"ws2_32.lib\" \"userenv.lib\" \"shell32.lib\" \"msvcrt.lib\"\n  = note: /usr/bin/link: extra operand '/LIBPATH:C:\\\\Users\\\\***\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib'\n          Try '/usr/bin/link --help' for more information.\n\nerror: aborting due to previous error\n</code></pre>\n\n<p><code>link.exe</code> <code>LIBPATH</code> arg is specified twice.</p>\n\n<p>What's going on?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; rustc --version\nrustc 1.17.0 (56124baa9 2017-04-24)\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1493569004, "post_id": 43708422, "comment_id": 74461023, "body": "What is the lifetime of <code>sreq</code>; or more specifically, what makes you think that a reference into <code>sreq</code> will outlive <code>call</code> (which is necessary since you send a reference to another thread of execution)?"}, {"owner": {"reputation": 1987, "user_id": 371141, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4cc03baa6fbb880e246ce5c9c8e247ce?s=128&d=identicon&r=PG", "display_name": "Ning Sun", "link": "https://stackoverflow.com/users/371141/ning-sun"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493607435, "post_id": 43708422, "comment_id": 74471144, "body": "@MatthieuM. The sreq is just a typical Tokio request. It turns out I need to wrap the closure into an <code>Arc</code> and clone it before sending to another thread."}], "answers": [{"tags": [], "owner": {"reputation": 1987, "user_id": 371141, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4cc03baa6fbb880e246ce5c9c8e247ce?s=128&d=identicon&r=PG", "display_name": "Ning Sun", "link": "https://stackoverflow.com/users/371141/ning-sun"}, "is_accepted": false, "score": 0, "last_activity_date": 1493644370, "last_edit_date": 1493644370, "creation_date": 1493607584, "answer_id": 43713702, "question_id": 43708422, "link": "https://stackoverflow.com/questions/43708422/lifetime-issue-with-cpupool/43713702#43713702", "title": "Lifetime issue with CpuPool", "body": "<p>It turns out I need to wrap the closure into an <code>Arc</code> by declaring the <code>RcpFnSync</code> like this:</p>\n\n<pre><code>pub type RpcFnSync&lt;T&gt; = Arc&lt;Fn(&amp;Vec&lt;T&gt;) -&gt; T + Send + Sync + 'static&gt;;\n</code></pre>\n\n<p>Then clone it before sending to another thread:</p>\n\n<pre><code>fn call(&amp;self, req: Self::Request) -&gt; Self::Future {\n    match req {\n        SlackerPacket::Request(sreq) =&gt; {\n            debug!(\"getting request: {:?}\", sreq.fname);\n            if let Some(fi) = self.functions.get(&amp;sreq.fname) {\n                let f = fi.clone();\n\n                self.pool\n                    .spawn_fn(move || -&gt; FutureResult&lt;Self::Response, Self::Error&gt; {\n                        let result = f(&amp;sreq.arguments);\n                        ok(SlackerPacket::Response(SlackerResponse {\n                                                       version: sreq.version,\n                                                       code: RESULT_CODE_SUCCESS,\n                                                       content_type: sreq.content_type,\n                                                       serial_id: sreq.serial_id,\n                                                       result: result,\n                                                   }))\n                    })\n                    .boxed()\n            } else {\n                let error = SlackerError {\n                    version: sreq.version,\n                    code: RESULT_CODE_NOT_FOUND,\n                    serial_id: sreq.serial_id,\n                };\n                ok(SlackerPacket::Error(error)).boxed()\n            }\n        }\n        SlackerPacket::Ping(ref ping) =&gt; {\n            ok(SlackerPacket::Pong(SlackerPong { version: ping.version })).boxed()\n        }\n        _ =&gt; err(io::Error::new(io::ErrorKind::InvalidInput, \"Unsupported packet\")).boxed(),\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1987, "user_id": 371141, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4cc03baa6fbb880e246ce5c9c8e247ce?s=128&d=identicon&r=PG", "display_name": "Ning Sun", "link": "https://stackoverflow.com/users/371141/ning-sun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 90, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1493644370, "creation_date": 1493568364, "last_edit_date": 1493570889, "question_id": 43708422, "link": "https://stackoverflow.com/questions/43708422/lifetime-issue-with-cpupool", "title": "Lifetime issue with CpuPool", "body": "<p>I'm writing a simple RPC server with tokio and futures-cpupool. The server holds a <code>BTreeMap</code> of boxed closures, with the function name as key. The current implementation is pretty straight-forward:</p>\n\n<pre><code>pub struct SlackerServiceSync&lt;T&gt;\n    where T: Send + Sync + 'static\n{\n    functions: Arc&lt;BTreeMap&lt;String, RpcFnSync&lt;T&gt;&gt;&gt;,\n    pool: CpuPool,\n}\n\nimpl&lt;T&gt; SlackerServiceSync&lt;T&gt;\n    where T: Send + Sync + 'static\n{\n    pub fn new(functions: Arc&lt;BTreeMap&lt;String, RpcFnSync&lt;T&gt;&gt;&gt;,\n               threads: usize)\n               -&gt; SlackerServiceSync&lt;T&gt; {\n        let pool = CpuPool::new(threads);\n        SlackerServiceSync { functions, pool }\n    }\n}\n\nimpl&lt;T&gt; Service for SlackerServiceSync&lt;T&gt;\n    where T: Send + Sync + 'static\n{\n    type Request = SlackerPacket&lt;T&gt;;\n    type Response = SlackerPacket&lt;T&gt;;\n    type Error = io::Error;\n    type Future = BoxFuture&lt;Self::Response, Self::Error&gt;;\n\n    fn call(&amp;self, req: Self::Request) -&gt; Self::Future {\n        match req {\n            SlackerPacket::Request(sreq) =&gt; {\n                debug!(\"getting request: {:?}\", sreq.fname);\n                if let Some(f) = self.functions.get(&amp;sreq.fname) {\n                    self.pool\n                        .spawn_fn(move || -&gt; FutureResult&lt;T, Self::Error&gt; {\n                                      ok(f(&amp;sreq.arguments))\n                                  })\n                        .and_then(move |result| {\n                            debug!(\"getting results\");\n                            ok(SlackerPacket::Response(SlackerResponse {\n                                                           version: sreq.version,\n                                                           code: RESULT_CODE_SUCCESS,\n                                                           content_type: sreq.content_type,\n                                                           serial_id: sreq.serial_id,\n                                                           result: result,\n                                                       }))\n                        })\n                        .map_err(|_| io::Error::new(io::ErrorKind::Other, \"Oneshot canceled\"))\n                        .boxed()\n                } else {\n                    let error = SlackerError {\n                        version: sreq.version,\n                        code: RESULT_CODE_NOT_FOUND,\n                        serial_id: sreq.serial_id,\n                    };\n                    ok(SlackerPacket::Error(error)).boxed()\n                }\n            }\n            SlackerPacket::Ping(ref ping) =&gt; {\n                ok(SlackerPacket::Pong(SlackerPong { version: ping.version })).boxed()\n            }\n            _ =&gt; err(io::Error::new(io::ErrorKind::InvalidInput, \"Unsupported packet\")).boxed(),\n        }\n    }\n}\n</code></pre>\n\n<p>I'm currently blocked by this lifetime issue on <code>self.functions.get(&amp;sreq.fname)</code>. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n   --&gt; src/service.rs:103:49\n    |\n103 |                 if let Some(f) = self.functions.get(&amp;sreq.fname) {\n    |                                                 ^^^\n    |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 99:55...\n   --&gt; src/service.rs:99:56\n    |\n99  |       fn call(&amp;self, req: Self::Request) -&gt; Self::Future {\n    |  ________________________________________________________^\n100 | |         match req {\n101 | |             SlackerPacket::Request(sreq) =&gt; {\n102 | |                 debug!(\"getting request: {:?}\", sreq.fname);\n...   |\n133 | |         }\n134 | |     }\n    | |_____^\nnote: ...so that reference does not outlive borrowed content\n   --&gt; src/service.rs:103:34\n    |\n103 |                 if let Some(f) = self.functions.get(&amp;sreq.fname) {\n    |                                  ^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/service.rs:105:35: 107:36 f:&amp;std::boxed::Box&lt;for&lt;'r&gt; std::ops::Fn(&amp;'r std::vec::Vec&lt;T&gt;) -&gt; T + std::marker::Send + std::marker::Sync&gt;, sreq:packets::SlackerRequest&lt;T&gt;]` will meet its required lifetime bounds\n   --&gt; src/service.rs:105:26\n    |\n105 |                         .spawn_fn(move || -&gt; FutureResult&lt;T, Self::Error&gt; {\n    |                          ^^^^^^^^\n</code></pre>\n\n<p><a href=\"https://github.com/sunng87/slacker-rust/blob/master/src/service.rs#L28\" rel=\"nofollow noreferrer\">Similar code works without CpuPool</a>. I cannot fully understand the error reported by compiler.</p>\n\n<p><a href=\"https://github.com/sunng87/slacker-rust/blob/a1d5dbb125ccf25bdb3770200fe17e80b26996fc/src/service.rs#L91\" rel=\"nofollow noreferrer\">Full code is here</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1493545528, "post_id": 43705010, "comment_id": 74454513, "body": "You may want an async event-loop; <code>tokio-process</code> handles this beautifully, but requires full code refactor."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1493545687, "post_id": 43705010, "comment_id": 74454555, "body": "<a href=\"https://github.com/alexcrichton/wait-timeout\" rel=\"nofollow noreferrer\"><code>wait-timeout</code></a> could help. Also: <a href=\"http://stackoverflow.com/questions/35093869/kill-child-process-while-waiting-for-it\">maybe related</a>."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1493546772, "post_id": 43705010, "comment_id": 74454829, "body": "wait-timeout is perfect! Thanks.. @TatsuyukiIshi tokio looks nice, but all I need now is a timeout waiting, that seems overkill."}], "answers": [{"comments": [{"owner": {"reputation": 110, "user_id": 5200516, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06fb1b7ab4eae5b26dfc33ea79a53a6f?s=128&d=identicon&r=PG&f=1", "display_name": "thouger", "link": "https://stackoverflow.com/users/5200516/thouger"}, "edited": false, "score": 0, "creation_date": 1618495572, "post_id": 43705548, "comment_id": 118622686, "body": "Err(e) =&gt; println!(&quot;Error waiting: {}&quot;, e); should be Err(e) =&gt; println!(&quot;Error waiting: {}&quot;, e),"}], "tags": [], "owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "is_accepted": false, "score": 1, "last_activity_date": 1493550711, "last_edit_date": 1493550711, "creation_date": 1493549210, "answer_id": 43705548, "question_id": 43705010, "link": "https://stackoverflow.com/questions/43705010/how-to-query-a-child-process-status-regularly/43705548#43705548", "title": "How to query a child process status regularly", "body": "<p>Currently, if you don't want to use the nightly channel, there's a crate called <a href=\"https://docs.rs/wait-timeout/0.1.5/wait_timeout/\" rel=\"nofollow noreferrer\">wait-timeout</a> (thanks to @lukas-kalbertodt for the suggestion) that adds the <code>wait_timeout</code> function to the <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html\" rel=\"nofollow noreferrer\"><code>std::process::Child</code></a> trait.</p>\n\n<p>It can be used like this:</p>\n\n<pre><code>let cmd = Command::new(\"my_command\")\n    .spawn();\n\nmatch cmd {\n    Ok(mut child) =&gt; {\n        let timeout = Duration::from_secs(1);\n\n        match child.wait_timeout(timeout) {\n            Ok(Some(status)) =&gt; println!(\"Exited with status {}\", status),\n            Ok(None) =&gt; println!(\"timeout, process is still alive\"),\n            Err(e) =&gt; println!(\"Error waiting: {}\", e),\n        }\n    }\n    Err(err) =&gt; println!(\"Process did not even start: {}\", err);\n}\n</code></pre>\n\n<p>To keep monitoring the child process, just wrap this into a loop.</p>\n\n<p>Notice that using Rust's nightly <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait\" rel=\"nofollow noreferrer\"><code>try_wait()</code></a>, the code would looks nearly identical (so once it makes into the release branch, assuming no further changes, it should be very easy to move to that), but it will block for the given <code>timeout</code> even if the process dies earlier than that, unlike with the above solution:</p>\n\n<pre><code>let cmd = Command::new(\"my_command\")\n    .spawn();\n\nmatch cmd {\n    Ok(mut child) =&gt; {\n        let timeout = Duration::from_secs(1);\n        sleep(timeout); // try_wait will not block, so we need to wait here\n        match child.try_wait() {\n            Ok(Some(status)) =&gt; println!(\"Exited with status {}\", status),\n            Ok(None) =&gt; println!(\"timeout, process is still alive\"),\n            Err(e) =&gt; println!(\"Error waiting: {}\", e),\n        }\n    }\n    Err(err) =&gt; println!(\"Process did not even start: {}\", err);\n}\n</code></pre>\n"}], "owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 331, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1493550711, "creation_date": 1493545228, "question_id": 43705010, "link": "https://stackoverflow.com/questions/43705010/how-to-query-a-child-process-status-regularly", "title": "How to query a child process status regularly", "body": "<p>I have spawned a child process using Rust's <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow noreferrer\">Command</a> API.</p>\n\n<p>Now, I need to watch this process for a few seconds before moving on because the process may die early. On success, it should run \"forever\", so I can't just wait.</p>\n\n<p>There's a nightly feature called <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait\" rel=\"nofollow noreferrer\">try_wait</a> which does what I want, but I really don't think I should run Rust nightly just for this!</p>\n\n<p>I think I could start a new thread and keep it waiting forever or until the process dies... but I would like to not hang my process with that thread, so maybe run the thread as a daemon might be a solution...</p>\n\n<p>Is this the way to go or is there a nicer solution? </p>\n"}, {"tags": ["types", "rust", "type-conversion"], "comments": [{"owner": {"reputation": 520, "user_id": 9823455, "user_type": "registered", "profile_image": "https://graph.facebook.com/10160339510600006/picture?type=large", "display_name": "Kevin Wang", "link": "https://stackoverflow.com/users/9823455/kevin-wang"}, "edited": false, "score": 0, "creation_date": 1589676574, "post_id": 43704758, "comment_id": 109388195, "body": "What are some common use cases for converting <code>usize</code> to <code>u32</code>, and vice versa?"}], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 1290383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9877c5f4661827d6254702180668c8be?s=128&d=identicon&r=PG", "display_name": "obraunsdorf", "link": "https://stackoverflow.com/users/1290383/obraunsdorf"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1619014267, "post_id": 43705031, "comment_id": 118777332, "body": "To protect people who blindly copy&amp;paste this answer: I think the answer from @Shepmaster (<a href=\"https://stackoverflow.com/a/55769098/1290383\">stackoverflow.com/a/55769098/1290383</a>) should be the &quot;accepted&quot; answer. Someone might stumble across this answer here thinking that using <code>as</code> is save for numeric casts but it&#39;s not."}], "tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": true, "score": 42, "last_activity_date": 1493559353, "last_edit_date": 1493559353, "creation_date": 1493545452, "answer_id": 43705031, "question_id": 43704758, "link": "https://stackoverflow.com/questions/43704758/how-to-idiomatically-convert-between-u32-and-usize/43705031#43705031", "title": "How to idiomatically convert between u32 and usize?", "body": "<p>The <code>as</code> operator works for all number types:</p>\n\n<pre><code>let ch = s.chars().nth(n as usize).unwrap();\n</code></pre>\n\n<p>Rust forces you to cast integers to make sure you're aware of signedness or overflows.</p>\n\n<p>Integer constants can have a type suffix:</p>\n\n<pre><code>let n = 1u32;\n</code></pre>\n\n<p>However, note that negative constants, such as <code>-1i32</code> is internally <code>-</code> <code>1i32</code>.</p>\n\n<p>Integer variables declared without an explicit type specification are shown as <code>{integer}</code> and will be properly inferred from one of the method calls.</p>\n"}, {"comments": [{"owner": {"reputation": 61, "user_id": 1290383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9877c5f4661827d6254702180668c8be?s=128&d=identicon&r=PG", "display_name": "obraunsdorf", "link": "https://stackoverflow.com/users/1290383/obraunsdorf"}, "edited": false, "score": 0, "creation_date": 1619016765, "post_id": 55769098, "comment_id": 118778595, "body": "I think before using <code>TryFrom</code>, FOR SOME CASES, a developer could also use the <code>From</code> trait (e.g. <code>u32::from(n)</code>. This should issue an error at compile-time if the cast is not implemented in the Rust-Compiler.  HOWEVER: As far as i can see, the <code>From</code> trait for <code>isize</code> and <code>usize</code> is only implemented for u8 and u16 but are not checked depending on the platform (see <a href=\"https://doc.rust-lang.org/src/core/convert/num.rs.html#44\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/core/convert/num.rs.html#44</a> and <a href=\"https://doc.rust-lang.org/src/core/convert/num.rs.html#135\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/core/convert/num.rs.html#135</a>). This could be an issue for 8-bit microcontrollers (not sure if Rust supports them)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 61, "user_id": 1290383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9877c5f4661827d6254702180668c8be?s=128&d=identicon&r=PG", "display_name": "obraunsdorf", "link": "https://stackoverflow.com/users/1290383/obraunsdorf"}, "edited": false, "score": 0, "creation_date": 1619113471, "post_id": 55769098, "comment_id": 118813289, "body": "@obraunsdorf linked to an existing answer that covers that, thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 34, "last_activity_date": 1619113439, "last_edit_date": 1619113439, "creation_date": 1555718790, "answer_id": 55769098, "question_id": 43704758, "link": "https://stackoverflow.com/questions/43704758/how-to-idiomatically-convert-between-u32-and-usize/55769098#55769098", "title": "How to idiomatically convert between u32 and usize?", "body": "<p>The most cautious thing you can do is to use <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\" rel=\"nofollow noreferrer\"><code>TryFrom</code></a> and panic when the value cannot fit within a <code>usize</code>:</p>\n<pre><code>use std::convert::TryFrom;\n\nfn main() {\n    let s = &quot;abc&quot;;\n    let n: u32 = 1;\n    let n_us = usize::try_from(n).unwrap();\n    let ch = s.chars().nth(n_us).unwrap();\n    println!(&quot;{}&quot;, ch);\n}\n</code></pre>\n<p>By blindly using <code>as</code>, your code will fail in mysterious ways when run on a platform where <code>usize</code> is smaller than 32-bits. For example, some microcontrollers use 16-bit integers as the native size:</p>\n<pre><code>fn main() {\n    let n: u32 = 0x1_FF_FF;\n    // Pretend that `usize` is 16-bit\n    let n_us: u16 = n as u16;\n    \n    println!(&quot;{}, {}&quot;, n, n_us); // 131071, 65535\n}\n</code></pre>\n<p>For broader types of numeric conversion beyond <code>u32</code> &lt;-&gt; <code>usize</code>, refer to <a href=\"https://stackoverflow.com/q/28273169/155423\">How do I convert between numeric types safely and idiomatically?</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1569848546, "post_id": 58167869, "comment_id": 102718217, "body": "This is effectively already covered by an <a href=\"https://stackoverflow.com/a/55769098/155423\">existing answer</a>, as <code>TryFrom</code> / <code>TryInto</code> are mirrors of each other."}], "tags": [], "owner": {"reputation": 931, "user_id": 1781470, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pcxHe.jpg?s=128&g=1", "display_name": "Alexandro de Oliveira", "link": "https://stackoverflow.com/users/1781470/alexandro-de-oliveira"}, "is_accepted": false, "score": 1, "last_activity_date": 1569848509, "last_edit_date": 1569848509, "creation_date": 1569846300, "answer_id": 58167869, "question_id": 43704758, "link": "https://stackoverflow.com/questions/43704758/how-to-idiomatically-convert-between-u32-and-usize/58167869#58167869", "title": "How to idiomatically convert between u32 and usize?", "body": "<p>We now have a pretty different answer when we try to compile your code, replacing the number <code>1</code> with a variable of type <code>i32</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:28\n  |\n5 |     let ch = s.chars().nth(n).unwrap();\n  |                            ^ expected usize, found i32\nhelp: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n  |\n5 |     let ch = s.chars().nth(n.try_into().unwrap()).unwrap();\n  |    \n</code></pre>\n\n<p>It means that now the compiler recommends you to use <code>n.try_into().unwrap()</code> that makes use of the trait <a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html\" rel=\"nofollow noreferrer\"><code>TryInto</code></a> which in turn relies on <code>TryFrom</code> and returns a <code>Result&lt;T, T::Error&gt;</code>. That's why we need to extract the result with a <code>.unwrap()</code></p>\n\n<p><a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html\" rel=\"nofollow noreferrer\"><code>TryInto</code> documentation</a></p>\n"}], "owner": {"reputation": 1611, "user_id": 7526319, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/aUMpl.jpg?s=128&g=1", "display_name": "Sajuuk", "link": "https://stackoverflow.com/users/7526319/sajuuk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 31100, "favorite_count": 5, "accepted_answer_id": 43705031, "answer_count": 3, "score": 40, "last_activity_date": 1619113439, "creation_date": 1493543376, "last_edit_date": 1555718474, "question_id": 43704758, "link": "https://stackoverflow.com/questions/43704758/how-to-idiomatically-convert-between-u32-and-usize", "title": "How to idiomatically convert between u32 and usize?", "body": "<p>This code works and prints \"b\":</p>\n\n<pre><code>fn main() {\n    let s = \"abc\";\n    let ch = s.chars().nth(1).unwrap();\n    println!(\"{}\", ch);\n}\n</code></pre>\n\n<p>On the other hand, this code results in a mismatch type error.</p>\n\n<pre><code>fn main() {\n    let s = \"abc\";\n    let n: u32 = 1;\n    let ch = s.chars().nth(n).unwrap();\n    println!(\"{}\", ch);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:28\n  |\n5 |     let ch = s.chars().nth(n).unwrap();\n  |                            ^ expected usize, found u32\n</code></pre>\n\n<p>For some external reason, I have to use the <code>u32</code> type for variable <code>n</code>. How can I convert <code>u32</code> to <code>usize</code> and use it in <code>nth()</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 4, "creation_date": 1493545822, "post_id": 43704630, "comment_id": 74454582, "body": "Why do you stick without crates?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1493545898, "post_id": 43704630, "comment_id": 74454614, "body": "Since this can be done in a few lines in other languages, I&#39;d like to know how to do primitive operations without introducing middle-ware."}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1493550364, "creation_date": 1493550364, "answer_id": 43705692, "question_id": 43704630, "link": "https://stackoverflow.com/questions/43704630/how-to-convert-hex-string-to-a-float-in-rust/43705692#43705692", "title": "How to convert hex string to a float in Rust?", "body": "<p>This is quite easy without external crates:</p>\n\n<pre><code>fn main() {\n    // Hex string to 4-bytes, aka. u32\n    let bytes = u32::from_str_radix(\"41973333\", 16).unwrap();\n\n    // Reinterpret 4-bytes as f32:\n    let float = unsafe { std::mem::transmute::&lt;u32, f32&gt;(bytes) };\n\n    // Print 18.9\n    println!(\"{}\", float);\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=276fc42cb7c81031c5241f0b8079eb38&amp;version=undefined\" rel=\"noreferrer\">Playground link.</a></p>\n"}, {"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1493574629, "post_id": 43708483, "comment_id": 74462878, "body": "The endianness issue can easily be dealt with with <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_be\" rel=\"nofollow noreferrer\"><code>{from,to}_{be,le}</code></a>. <code>f32::from_bits</code> also has the advantage to deal with NaN values correctly."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1493579425, "post_id": 43708483, "comment_id": 74464498, "body": "@mcarton It&#39;s not entirely certain that <code>from_bits</code> handles NaN more correctly; it&#39;s just more conservative. Whether signalling NaNs can actually cause unsafe behaviour is still under debate."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1512096694, "post_id": 43708483, "comment_id": 82129530, "body": "@mcarton <code>from_bits</code> is now exactly equivalent to a <code>transmute</code>. <a href=\"https://github.com/rust-lang/rust/pull/46012\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/46012</a>"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 4, "last_activity_date": 1507834598, "last_edit_date": 1507834598, "creation_date": 1493568720, "answer_id": 43708483, "question_id": 43704630, "link": "https://stackoverflow.com/questions/43704630/how-to-convert-hex-string-to-a-float-in-rust/43708483#43708483", "title": "How to convert hex string to a float in Rust?", "body": "<p>There's <a href=\"https://doc.rust-lang.org/std/primitive.f32.html#method.from_bits\" rel=\"nofollow noreferrer\"><code>f32::from_bits</code></a> which performs the <code>transmute</code> in safe code. Note that transmuting is not the same as <code>struct.unpack</code>, since <code>struct.unpack</code> lets you specify endianness and has a well-defined IEEE representation.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1428, "favorite_count": 0, "accepted_answer_id": 43705692, "answer_count": 2, "score": 0, "last_activity_date": 1507834598, "creation_date": 1493542502, "last_edit_date": 1495535483, "question_id": 43704630, "link": "https://stackoverflow.com/questions/43704630/how-to-convert-hex-string-to-a-float-in-rust", "title": "How to convert hex string to a float in Rust?", "body": "<p>What's the most straightforward way to convert a hex string into a float? <em>(without using 3rd party crates)</em>.</p>\n\n<p>Does Rust provide some equivalent to Python's <code>struct.unpack('!f', bytes.fromhex('41973333'))</code></p>\n\n<hr>\n\n<p>See this question for <a href=\"https://stackoverflow.com/questions/1592158\">Python</a> &amp; <a href=\"https://stackoverflow.com/questions/1071904\">Java</a>, mentioning for reference.</p>\n"}, {"tags": ["linker", "rust", "avr", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "edited": false, "score": 0, "creation_date": 1493528504, "post_id": 43702805, "comment_id": 74450873, "body": "With your <code>.json</code> file (removing the <code>interrupt_vector.S</code> dependency that I don&#39;t need), <code>cargo build</code> finishes without error, but the resulting <code>.elf</code> file is only 701 bytes, compared to a hand-linked <code>.elf</code> which is 4002 bytes. <code>avr-objdump -S</code> shows the short <code>.elf</code> file not to contain any code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "edited": false, "score": 0, "creation_date": 1493566016, "post_id": 43702805, "comment_id": 74460065, "body": "@Cactus please check again. The compiler always adds <code>-Wl,--gc-sections</code>, which removes everything. <code>post-link-args</code> is supposed to undo that, but the structure of it was wrong before, and I&#39;ve now changed it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1493565937, "last_edit_date": 1493565937, "creation_date": 1493525111, "answer_id": 43702805, "question_id": 43702724, "link": "https://stackoverflow.com/questions/43702724/linking-avr-programs-with-cargo/43702805#43702805", "title": "Linking AVR programs with Cargo", "body": "<p>A word of warning: development on <a href=\"https://github.com/avr-rust/rust\" rel=\"nofollow noreferrer\">avr-rust</a> can politely be said to be <em>cutting edge</em>. It's very likely something that works one day may not the next, so answers like this are likely to go out of date quickly. We welcome all contributors to the project to help make it more usable.</p>\n\n<hr>\n\n<p>You need to specify a target JSON file and the full set of linker arguments. Here's an example from an older project of mine (some of the exact values may now be incorrect):</p>\n\n<pre><code>{\n  \"llvm-target\": \"avr-atmel-none\",\n  \"target-endian\": \"little\",\n  \"target-pointer-width\": \"16\",\n  \"os\": \"none\",\n  \"target-env\": \"gnu\",\n  \"target-vendor\": \"unknown\",\n  \"arch\": \"avr\",\n  \"data-layout\": \"e-p:16:16:16-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n8\",\n\n  \"executables\": true,\n\n  \"linker\": \"avr-gcc\",\n  \"linker-flavor\": \"gcc\",\n  \"pre-link-args\": {\n    \"gcc\": [\"-mmcu=atmega328p\", \"-nostartfiles\", \"../interrupt_vector.S\"]\n  },\n  \"exe-suffix\": \".elf\",\n  \"post-link-args\": {\n    \"gcc\": [\"-Wl,--no-gc-sections\"]\n  },\n\n  \"no-compiler-rt\": true\n}\n</code></pre>\n\n<p>For a full example see <a href=\"https://github.com/shepmaster/rust-arduino-blink-led-no-core-with-cargo\" rel=\"nofollow noreferrer\">my example repository</a>. This project used to work (see my <a href=\"http://jakegoulding.com/blog/2016/05/27/rust-on-an-arduino-uno-part-6/\" rel=\"nofollow noreferrer\">blog series</a>). I have recently updated it so it compiles against the master branch of avr-rust, but haven't tested the compiled code on a real device.</p>\n\n<hr>\n\n<p>There's an open RFC for having <a href=\"https://github.com/rust-lang/rfcs/pull/1777\" rel=\"nofollow noreferrer\">Cargo post build scripts</a>, but it doesn't seem likely to be merged. I continue to use a Makefile. <a href=\"https://github.com/japaric/xargo\" rel=\"nofollow noreferrer\">xargo</a> might be an alternative. There were also rumbles about a cargo subcommand that could be created.</p>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 409, "favorite_count": 0, "accepted_answer_id": 43702805, "answer_count": 1, "score": 0, "last_activity_date": 1499348790, "creation_date": 1493524178, "last_edit_date": 1499348790, "question_id": 43702724, "link": "https://stackoverflow.com/questions/43702724/linking-avr-programs-with-cargo", "title": "Linking AVR programs with Cargo", "body": "<p>I have a Rust project which I am currently compiling and linking by hand:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc --target=avr-atmel-none src/main.rs  --emit=obj -o _build/main.rs.o -C opt-level=3\navr-gcc -Os -Wl,--gc-sections -mmcu=atmega328p -o _build/image.elf _build/main.rs.o \navr-objcopy -Oihex -R.eeprom _build/image.elf _build/image.hex\n</code></pre>\n\n<p>I would like to automate this with Cargo, so I started by setting <code>avr-gcc</code> as the linker, by adding the following to <code>.cargo/config</code>:</p>\n\n<pre><code>[build]\ntarget = \"avr-atmel-none\"\n\n[target.avr-atmel-none]\nlinker = \"avr-gcc\"\n</code></pre>\n\n<p>However, it seems <code>cargo</code> passes some extra arguments to the linker that <code>avr-gcc</code> cannot handle:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>11:47:10 [cactus@galaxy interrupt-bug]$ cargo build --release\n   Compiling hello-avr v0.1.0 (file:///home/cactus/prog/rust/avr/interrupt-bug)\nerror: linking with `avr-gcc` failed: exit code: 1\n  |\n  = note: \"avr-gcc\" \"-Wl,--as-needed\" \"-L\" \"/home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmel-none/lib\" \"/home/cactus/prog/rust/avr/interrupt-bug/target/avr-atmel-none/release/deps/hello_avr-8bce8eb24807f5a8.0.o\" \"-o\" \"/home/cactus/prog/rust/avr/interrupt-bug/target/avr-atmel-none/release/deps/hello_avr-8bce8eb24807f5a8\" \"-Wl,--gc-sections\" \"-pie\" \"-Wl,-O1\" \"-nodefaultlibs\" \"-L\" \"/home/cactus/prog/rust/avr/interrupt-bug/target/avr-atmel-none/release/deps\" \"-L\" \"/home/cactus/prog/rust/avr/interrupt-bug/target/release/deps\" \"-L\" \"/home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmel-none/lib\"\n  = note: /usr/lib/gcc/avr/4.8.2/../../../avr/bin/ld: -pie not supported\n          collect2: error: ld returned 1 exit status\n</code></pre>\n\n<p>How do I remove these extra arguments from the <code>avr-gcc</code> invocation? Moreover, is there a way to integrate the third step, i.e. the <code>avr-objcopy</code> call, into the Cargo workflow?</p>\n"}, {"tags": ["rust", "zero-copy", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493520360, "post_id": 43702185, "comment_id": 74449646, "body": "Welcome to Stack Overflow! It&#39;s expected that questions here <a href=\"https://meta.stackoverflow.com/q/261592/155423\">show a lot of effort</a> and, where possible, provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Your question is introduced talking about futures/hyper/tokio/serde, but the code presented uses only serde and rental; is this trying to be a minimized repro? If so, you should show how it is used. Have you read <a href=\"http://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> to understand the limitations around having self-references?"}], "answers": [{"comments": [{"owner": {"reputation": 218, "user_id": 7942375, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wEv8ZqQLssg/AAAAAAAAAAI/AAAAAAAAAFg/A9YxZ2kc-OQ/photo.jpg?sz=128", "display_name": "Evin Robertson", "link": "https://stackoverflow.com/users/7942375/evin-robertson"}, "edited": false, "score": 0, "creation_date": 1493600020, "post_id": 43707940, "comment_id": 74469775, "body": "Awesome! I hadn&#39;t thought of stepping back to make my ChunkHolder for a specific type; that makes the lifetime parameter make more sense. Also, thanks for pointing out the #[serde(borrow)]. Now I have this, which works fine: <a href=\"https://gist.github.com/anonymous/6e1fadd47ff1b8df4f84975334749095\" rel=\"nofollow noreferrer\">gist.github.com/anonymous/6e1fadd47ff1b8df4f84975334749095</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1493565389, "creation_date": 1493565389, "answer_id": 43707940, "question_id": 43702185, "link": "https://stackoverflow.com/questions/43702185/how-do-i-store-a-result-using-serde-zero-copy-deserialization-of-a-futures-enabl/43707940#43707940", "title": "How do I store a result using Serde Zero-copy deserialization of a Futures-enabled Hyper Chunk?", "body": "<p>When trying to solve a complicated programming problem, it's very useful to remove as much as you can. Take your code and remove what you can until the problem goes away. Tweak your code a bit and keep removing until you can't any more. Then, turn the problem around and build from the smallest piece and work back to the error. Doing both of these will show you where the problem lies.</p>\n\n<p>First, let's make sure we deserialize correctly:</p>\n\n<pre><code>extern crate serde;\nextern crate serde_json;\n#[macro_use]\nextern crate serde_derive;\n\nuse std::borrow::Cow;\n\n#[derive(Debug, Deserialize)]\npub struct Example&lt;'a&gt; {\n    #[serde(borrow)]\n    name: Cow&lt;'a, str&gt;,\n    key: bool,\n}\n\nimpl&lt;'a&gt; Example&lt;'a&gt; {\n    fn info(&amp;self) {\n        println!(\"{:?}\", self);\n        match self.name {\n            Cow::Borrowed(_) =&gt; println!(\"Is borrowed\"),\n            Cow::Owned(_) =&gt; println!(\"Is owned\"),\n        }\n    }\n}\n\nfn main() {\n    let data: Vec&lt;_&gt; = br#\"{\"key\": true, \"name\": \"alice\"}\"#.to_vec();\n\n    let decoded: Example = serde_json::from_slice(&amp;data).expect(\"Couldn't deserialize\");\n    decoded.info();\n}\n</code></pre>\n\n<p>Here, I forgot to add the <code>#[serde(borrow)]</code> attribute, so I'm glad I did this test!</p>\n\n<p>Next, we can introduce the rental crate:</p>\n\n<pre><code>#[macro_use]\nextern crate rental;\n\nrental! {\n    mod holding {\n        use super::*;\n\n        #[rental]\n        pub struct VecHolder {\n            data: Vec&lt;u8&gt;,\n            parsed: Example&lt;'data&gt;,\n        }\n    }\n}\n\nfn main() {\n    let data: Vec&lt;_&gt; = br#\"{\"key\": true, \"name\": \"alice\"}\"#.to_vec();\n\n    let holder = holding::VecHolder::try_new(data, |data| {\n        serde_json::from_slice(data)\n    });\n    let holder = match holder {\n        Ok(holder) =&gt; holder,\n        Err(_) =&gt; panic!(\"Unable to construct rental\"),\n    };\n\n    holder.rent(|example| example.info());\n\n    // Make sure we can move the data and it's still valid\n    let holder2 = { holder };\n    holder2.rent(|example| example.info());\n}\n</code></pre>\n\n<p>Next we try to create a rental of <code>Chunk</code>:</p>\n\n<pre><code>#[rental]\npub struct ChunkHolder {\n    data: Chunk,\n    parsed: Example&lt;'data&gt;,\n}\n</code></pre>\n\n<p>Unfortunately, this fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  --&gt; src/main.rs:29:1\n   |\n29 | rental! {\n   | ^\n   |\n   = help: message: Field `data` must have an angle-bracketed type parameter or be `String`.\n</code></pre>\n\n<p>Oops! Checking <a href=\"https://docs.rs/rental/0.4.8/rental/\" rel=\"noreferrer\">the docs for rental</a>, we can add <code>#[target_ty_hack=\"[u8]\"]</code> to the <code>data</code> field. This leads to:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `hyper::Chunk: rental::__rental_prelude::StableDeref` is not satisfied\n  --&gt; src/main.rs:29:1\n   |\n29 | rental! {\n   | ^ the trait `rental::__rental_prelude::StableDeref` is not implemented for `hyper::Chunk`\n   |\n   = note: required by `rental::__rental_prelude::static_assert_stable_deref`\n</code></pre>\n\n<p>That's annoying; since we can't implement that trait for <code>Chunk</code>, we just need to box <code>Chunk</code>, proving that it has a stable address:</p>\n\n<pre><code>#[rental]\npub struct ChunkHolder {\n    data: Box&lt;Chunk&gt;,\n    parsed: Example&lt;'data&gt;,\n}\n</code></pre>\n\n<p>I also looked to see if there is a way to get a <code>Vec&lt;u8&gt;</code> back out of <code>Chunk</code>, but it doesn't appear to exist. That would have been another solution with less allocation and indirection.</p>\n\n<p>At this point, \"all\" that's left is to integrate this back into the futures code. It's a lot of work for anyone but you to recreate that, but I don't foresee any obvious problems in doing so.</p>\n"}], "owner": {"reputation": 218, "user_id": 7942375, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wEv8ZqQLssg/AAAAAAAAAAI/AAAAAAAAAFg/A9YxZ2kc-OQ/photo.jpg?sz=128", "display_name": "Evin Robertson", "link": "https://stackoverflow.com/users/7942375/evin-robertson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1514, "favorite_count": 0, "accepted_answer_id": 43707940, "answer_count": 1, "score": 4, "last_activity_date": 1493565389, "creation_date": 1493517517, "last_edit_date": 1493561624, "question_id": 43702185, "link": "https://stackoverflow.com/questions/43702185/how-do-i-store-a-result-using-serde-zero-copy-deserialization-of-a-futures-enabl", "title": "How do I store a result using Serde Zero-copy deserialization of a Futures-enabled Hyper Chunk?", "body": "<p>I'm using futures, tokio, hyper, and serde_json to request and deserialize some data that I need to hold until my next request. My initial thought was to make a struct containing the <code>hyper::Chunk</code> and the deserialized data that borrows from the <code>Chunk</code>, but couldn't get the lifetimes right. I tried using the <a href=\"https://crates.io/crates/rental\" rel=\"nofollow noreferrer\">rental crate</a>, but I can't get this to work either. Perhaps I'm using the <code>'buffer</code> lifetime before declaring the buffer <code>Vec</code>, but maybe I've messed something else up:</p>\n\n<pre><code>#[rental]\npub struct ChunkJson&lt;T: serde::de::Deserialize&lt;'buffer&gt;&gt; {\n    buffer: Vec&lt;u8&gt;,\n    json: T\n}\n</code></pre>\n\n<p>Is there some way to make the lifetimes right or should I just use <code>DeserializeOwned</code> and give up on zero-copy?</p>\n\n<p>For more context, the following code works (periodically deserializing JSON from two URLs, retaining the results so we can do something with them both). I'd like to change my <code>X</code> and <code>Y</code> types to use <code>Cow&lt;'a, str&gt;</code> for their fields, changing from <code>DeserializeOwned</code> to <code>Deserialize&lt;'a&gt;</code>. For this to work, I need to store the slice that has been deserialized for each, but I don't know how to do this. I'm looking for examples that use Serde's zero-copy deserialization and retain the result, or some idea for restructuring my code that would work.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\n\nextern crate serde;\nextern crate serde_json;\nextern crate futures;\nextern crate tokio_core;\nextern crate tokio_periodic;\nextern crate hyper;\n\nuse std::collections::HashMap;\nuse std::error::Error;\n\nuse futures::future;\nuse futures::Future;\nuse futures::stream::Stream;\nuse hyper::Client;\n\n\nfn stream_json&lt;'a, T: serde::de::DeserializeOwned + Send + 'a&gt;\n    (handle: &amp;tokio_core::reactor::Handle,\n     url: String,\n     period: u64)\n     -&gt; Box&lt;Stream&lt;Item = T, Error = Box&lt;Error&gt;&gt; + 'a&gt; {\n    let client = Client::new(handle);\n    let timer = tokio_periodic::PeriodicTimer::new(handle).unwrap();\n    timer\n        .reset(::std::time::Duration::new(period, 0))\n        .unwrap();\n    Box::new(futures::Stream::zip(timer.from_err::&lt;Box&lt;Error&gt;&gt;(), futures::stream::unfold( (), move |_| {\n            let uri = url.parse::&lt;hyper::Uri&gt;().unwrap();\n            let get = client.get(uri).from_err::&lt;Box&lt;Error&gt;&gt;().and_then(|res| {\n                res.body().concat().from_err::&lt;Box&lt;Error&gt;&gt;().and_then(|chunks| {\n                    let p: Result&lt;T, Box&lt;Error&gt;&gt; = serde_json::from_slice::&lt;T&gt;(chunks.as_ref()).map_err(|e| Box::new(e) as Box&lt;Error&gt;);\n                    match p {\n                        Ok(json) =&gt; future::ok((json, ())),\n                        Err(err) =&gt; future::err(err)\n                    }\n                })\n            });\n            Some(get)\n        })).map(|x| { x.1 }))\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct X {\n    foo: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct Y {\n    bar: String,\n}\n\nfn main() {\n\n    let mut core = tokio_core::reactor::Core::new().unwrap();\n    let handle = core.handle();\n\n    let x_stream = stream_json::&lt;HashMap&lt;String, X&gt;&gt;(&amp;handle, \"http://localhost/X\".to_string(), 2);\n    let y_stream = stream_json::&lt;HashMap&lt;String, Y&gt;&gt;(&amp;handle, \"http://localhost/Y\".to_string(), 5);\n    let mut xy_stream = x_stream.merge(y_stream);\n\n    let mut last_x = HashMap::new();\n    let mut last_y = HashMap::new();\n\n    loop {\n        match core.run(futures::Stream::into_future(xy_stream)) {\n            Ok((Some(item), stream)) =&gt; {\n                match item {\n                    futures::stream::MergedItem::First(x) =&gt; last_x = x,\n                    futures::stream::MergedItem::Second(y) =&gt; last_y = y,\n                    futures::stream::MergedItem::Both(x, y) =&gt; {\n                        last_x = x;\n                        last_y = y;\n                    }\n                }\n                println!(\"\\nx = {:?}\", &amp;last_x);\n                println!(\"y = {:?}\", &amp;last_y);\n                // Do more stuff with &amp;last_x and &amp;last_y\n\n                xy_stream = stream;\n            }\n            Ok((None, stream)) =&gt; xy_stream = stream,\n            Err(_) =&gt; {\n                panic!(\"error\");\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["generics", "types", "numbers", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493509440, "post_id": 43700398, "comment_id": 74447980, "body": "Thank you for linking those questions; I&#39;ve updated them appropriately."}, {"owner": {"reputation": 1043, "user_id": 2246784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c421d12fefea6cfc6b002520efc3b5fa?s=128&d=identicon&r=PG", "display_name": "AManOfScience", "link": "https://stackoverflow.com/users/2246784/amanofscience"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493724739, "post_id": 43700398, "comment_id": 74516428, "body": "Good rewording. Thank <i>you</i> for answering random internet people&#39;s questions."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1493507490, "post_id": 43700751, "comment_id": 74447582, "body": "A strong emphasis on the fact that the <i>standard libraries</i> <code>Zero</code> and <code>One</code> where <i>never</i> stabilized and it&#39;s always been recommended to use the <code>num</code> crate."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1493524420, "post_id": 43700751, "comment_id": 74450266, "body": "Using <a href=\"https://crates.io/crates/num-traits\" rel=\"nofollow noreferrer\"><code>num-traits</code></a> is better (less dependencies), unless you want everything provided by <code>num</code> (big integer, complex, rational, ...)."}, {"owner": {"reputation": 1043, "user_id": 2246784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c421d12fefea6cfc6b002520efc3b5fa?s=128&d=identicon&r=PG", "display_name": "AManOfScience", "link": "https://stackoverflow.com/users/2246784/amanofscience"}, "edited": false, "score": 0, "creation_date": 1493724745, "post_id": 43700751, "comment_id": 74516433, "body": "Thank you; I clearly need to keep hammering on getting my traits down. And since I have you here: I&#39;m assuming that the <code>.map.sum</code> will lead to iterating over the list twice, where as <code>fold</code> only uses a single pass?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1493726501, "post_id": 43700751, "comment_id": 74517648, "body": "Not really, <code>map</code> will yield a new lazy iterator that wraps the original iterator without consuming it immediately. It&#39;s more like Java&#39;s Stream#map, and unlike JavaScript&#39;s map."}, {"owner": {"reputation": 1043, "user_id": 2246784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c421d12fefea6cfc6b002520efc3b5fa?s=128&d=identicon&r=PG", "display_name": "AManOfScience", "link": "https://stackoverflow.com/users/2246784/amanofscience"}, "edited": false, "score": 0, "creation_date": 1493727080, "post_id": 43700751, "comment_id": 74518092, "body": "Cool. I&#39;ll add for future folks: the reason being <code>.map</code> creates a <code>Map::Iterator</code> whose <code>.next()</code> lazily computes the next value from the Iterator it&#39;s wrapping, as seen in the std lib source code <a href=\"https://doc.rust-lang.org/src/core/iter/mod.rs.html\" rel=\"nofollow noreferrer\">here</a> (search for <code>fn next</code>)."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1493548565, "last_edit_date": 1493548565, "creation_date": 1493501938, "answer_id": 43700751, "question_id": 43700398, "link": "https://stackoverflow.com/questions/43700398/how-should-providing-a-one-or-zero-be-done-now-that-numzero-and-one-are-deprec/43700751#43700751", "title": "How should providing a one or zero be done now that num::Zero and One are deprecated?", "body": "<p>Asking for how your function <em>should</em> be done can become opinion-based: there are multiple good ways of achieving this. Nevertheless, it is answerable if we narrow down to these two approaches, which I would consider typical and idiomatic:</p>\n\n<hr>\n\n<p><code>Zero</code> and <code>One</code> were deprecated (never even stabilized, in fact!) from the standard library mostly because there is a more generalized means of making products and sums from iterators: the <a href=\"https://doc.rust-lang.org/std/iter/trait.Sum.html\" rel=\"nofollow noreferrer\"><code>Sum</code></a> and <a href=\"https://doc.rust-lang.org/std/iter/trait.Product.html\" rel=\"nofollow noreferrer\"><code>Product</code></a> traits are relied upon by iterators when calling methods <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum\" rel=\"nofollow noreferrer\"><code>sum()</code></a> and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.product\" rel=\"nofollow noreferrer\"><code>product()</code></a>, and can even yield a result of a type other than the items'.</p>\n\n<pre><code>use std::iter::{Iterator, Sum};\n\nfn sigma&lt;I, T, F&gt;(iter: I, func: F) -&gt; T\n    where I: Iterator&lt;Item = T&gt;,\n          T: Sum,\n          F: Fn(T) -&gt; T\n{\n\n    iter.map(func).sum::&lt;T&gt;()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3496290bd5ce10d3f1addc3ff28ca53d&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>. I took the liberty of moving the element transformation to a <code>map</code> in the iterator definition chain, thus enabling the use of <code>sum()</code> as a terminal operation.</p>\n\n<hr>\n\n<p>The trait <a href=\"http://rust-num.github.io/num/num/trait.Zero.html\" rel=\"nofollow noreferrer\"><code>Zero</code></a> and <a href=\"http://rust-num.github.io/num/num/trait.One.html\" rel=\"nofollow noreferrer\"><code>One</code></a> are still available in crate <code>num</code> (or <code>num-traits</code>), so you can use that instead.</p>\n\n<pre><code>extern crate num;\n\nuse std::ops::Add;\nuse std::iter::Iterator;\nuse num::Zero;\n\nfn sigma&lt;I, T, F&gt;(iter: I, func: F) -&gt; T\n    where I: Iterator&lt;Item = T&gt;,\n          T: Zero + Add&lt;Output = T&gt;,\n          F: Fn(T) -&gt; T\n{\n    iter.map(func).fold(T::zero(), |a, b| a + b)\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?gist=9149680972e4a520ee4328153c541a8f&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 1043, "user_id": 2246784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c421d12fefea6cfc6b002520efc3b5fa?s=128&d=identicon&r=PG", "display_name": "AManOfScience", "link": "https://stackoverflow.com/users/2246784/amanofscience"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 43700751, "answer_count": 1, "score": 1, "last_activity_date": 1493548565, "creation_date": 1493499433, "last_edit_date": 1495542862, "question_id": 43700398, "link": "https://stackoverflow.com/questions/43700398/how-should-providing-a-one-or-zero-be-done-now-that-numzero-and-one-are-deprec", "title": "How should providing a one or zero be done now that num::Zero and One are deprecated?", "body": "<p>In writing my own generic sigma summation function to get practice with Rust, I've hit an issue with providing a seed value of zero as the accumulator.</p>\n\n<pre><code>fn sigma&lt;I, T, F&gt;(iter: I, func: F) -&gt; T\n    where I: Iterator&lt;Item=T&gt;,\n          T: Add&lt;Output=T&gt;,\n          F: Fn(T) -&gt; T\n{\n    iter.fold(0, |acc, x| acc + func(x))\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=85b64294b5d2080974d405c23aa27ce7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground Link</a></p>\n\n<p>I understand that it's wrong, as 0 is a concrete type, and thus not <code>T</code>. Other answers (like <a href=\"https://stackoverflow.com/a/27952112/2246784\">this</a> and <a href=\"https://stackoverflow.com/a/28565674/2246784\">this one</a>) rely on constructs like <code>Int::zero</code>, which are <a href=\"https://doc.rust-lang.org/std/num/trait.Zero.html#tymethod.zero\" rel=\"nofollow noreferrer\">deprecated</a> as of 1.11. </p>\n\n<p>There are other ways of doing this, but I am particularly interested in how it <em>should</em> be done, as testing for one, zero, or negativity is a common operation in numeric procedures that I'll hit again soon enough. Plus, now I'm curious.</p>\n\n<p>My Rust version is 1.16.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 2, "creation_date": 1493493731, "post_id": 43699551, "comment_id": 74444169, "body": "The type of <code>T</code> is chosen by the caller yet your code will only work if it&#39;s <code>Sigmoid</code>."}, {"owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "reply_to_user": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1493493813, "post_id": 43699551, "comment_id": 74444197, "body": "@Lee sure, but can I somehow tell the compiler that T should exactly be an Activation?"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1493493920, "post_id": 43699551, "comment_id": 74444231, "body": "What do you mean by &#39;exactly an <code>Activation</code>&#39;? If it&#39;s a trait then there could be any number of implementations."}, {"owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "reply_to_user": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1493494029, "post_id": 43699551, "comment_id": 74444259, "body": "@Lee I see...but is there any solutions to define a default for that <code>activation</code> input? maybe using a match and see if it&#39;s None and then set a default value?"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1493494243, "post_id": 43699551, "comment_id": 74444323, "body": "There&#39;s a <a href=\"https://doc.rust-lang.org/1.6.0/core/default/\" rel=\"nofollow noreferrer\"><code>default</code> trait</a> so you could add an additional constraint on <code>T</code>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1493913579, "last_edit_date": 1493913579, "creation_date": 1493498580, "answer_id": 43700280, "question_id": 43699551, "link": "https://stackoverflow.com/questions/43699551/using-unwrap-or-with-generic-types/43700280#43700280", "title": "Using unwrap_or with generic types", "body": "<p>When you have a type parameter, the <em>caller</em> decides what type it is. However, you're trying to force <code>T</code> to be <code>Sigmoid</code> when <code>activation</code> is <code>None</code>. Yet, the caller could call <code>MainStruct::new</code> with <code>None::&lt;Widgetoid&gt;</code>, and the signature says it should return a <code>MainStruct&lt;Widgetoid&gt;</code>. Indeed, <code>None</code> is not just one constant, but an infinity of constants, one for each <code>T</code>.</p>\n\n<p>Instead of using an <code>Option</code> here, you should have two distinct constructors: a generic one that takes an <code>Activation</code> directly (no <code>Option</code> anymore), and a default one that takes no parameters.</p>\n\n<pre><code>// Generic impl, generic constructor\nimpl&lt;T: Activation&gt; MainStruct&lt;T&gt; {\n    pub fn new(activation: T) -&gt; MainStruct&lt;T&gt;\n        where T: Activation\n    {\n        MainStruct {\n            activation: activation,\n        }\n    }\n}\n\n// Specific impl, specific constructor\nimpl MainStruct&lt;Sigmoid&gt; {\n    pub fn default() -&gt; MainStruct&lt;Sigmoid&gt; {\n        Self::new(Sigmoid {}) // delegate to generic constructor\n    }\n}\n</code></pre>\n\n<p>Instead of making <code>default</code> an inherent static method, you may want to implement the <a href=\"https://doc.rust-lang.org/stable/std/default/trait.Default.html\" rel=\"nofollow noreferrer\"><code>Default</code></a> trait instead. (<a href=\"https://doc.rust-lang.org/stable/std/prelude/v1/\" rel=\"nofollow noreferrer\"><code>Default</code> is in the prelude</a>, so you don't need to import it in order to be able to call <code>MainStruct::default()</code>.)</p>\n\n<pre><code>impl Default for MainStruct&lt;Sigmoid&gt; {\n    fn default() -&gt; MainStruct&lt;Sigmoid&gt; {\n        Self::new(Sigmoid {})\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 0, "accepted_answer_id": 43700280, "answer_count": 1, "score": 0, "last_activity_date": 1493913579, "creation_date": 1493493389, "question_id": 43699551, "link": "https://stackoverflow.com/questions/43699551/using-unwrap-or-with-generic-types", "title": "Using unwrap_or with generic types", "body": "<p>This is what I have: </p>\n\n<pre><code>use activation::Activation;\nuse activation::Sigmoid;\n\npub struct MainStruct&lt;T&gt; {\n    activation: T\n}\n\nimpl&lt;T: Activation&gt; MainStruct&lt;T&gt; {\n    pub fn new(activation: Option&lt;T&gt;) -&gt; MainStruct&lt;T&gt;\n        where T: Activation\n    {\n        // default\n        let activation_fn = activation.unwrap_or(Sigmoid {});\n\n        MainStruct {\n            activation: activation_fn,\n        }\n    }\n}\n</code></pre>\n\n<p>Where <code>activation::Activation</code> is a trait and <code>Sigmoid</code> implements the <code>Activation</code> trait. What I'm trying to do is accepting this trait as input and be able to assign a default value when it's <code>None</code> but I receive this error:</p>\n\n<pre><code>expected type parameter, found struct `activation::Sigmoid`\n</code></pre>\n\n<p>Not sure what is the problem or maybe I need to somehow tell the compiler that Sigmoid implements type <code>T</code> (which is our trait)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1493484985, "post_id": 43698191, "comment_id": 74441321, "body": "Does the type of <code>z</code> implement <code>Add&lt;usize&gt;</code>? If so, I think you just need to do <code>(&#39;a&#39;..(&#39;z&#39;+1))</code> due to operator precedence."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1493485045, "post_id": 43698191, "comment_id": 74441346, "body": "@bright-star no, it does not: <i>binary operation `+` cannot be applied to type `char`</i>"}, {"owner": {"reputation": 4498, "user_id": 58768, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9bbffd2d873441279b4661070e8add4b?s=128&d=identicon&r=PG", "display_name": "bohdan_trotsenko", "link": "https://stackoverflow.com/users/58768/bohdan-trotsenko"}, "edited": false, "score": 0, "creation_date": 1493485209, "post_id": 43698191, "comment_id": 74441419, "body": "Wow, as I just found out, <code>(&#39;a&#39;..&#39;z&#39;).collect();</code> doesn&#39;t work either. rust 1.17. It seems I used this, but I&#39;m unsure."}], "answers": [{"comments": [{"owner": {"reputation": 4498, "user_id": 58768, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9bbffd2d873441279b4661070e8add4b?s=128&d=identicon&r=PG", "display_name": "bohdan_trotsenko", "link": "https://stackoverflow.com/users/58768/bohdan-trotsenko"}, "edited": false, "score": 0, "creation_date": 1493486944, "post_id": 43698252, "comment_id": 74441932, "body": "Thanks! With the hint of yours I ended up with <code>let abc: Vec&lt;char&gt; = (b&#39;a&#39;..b&#39;z&#39; + 1).map(|c| c as char).collect();</code> because there&#39;s not <code>std::iter::Step</code>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1493625131, "post_id": 43698252, "comment_id": 74475376, "body": "More generally: <code>(start as u32..end as u32 + 1).flat_map(std::char::from_u32)</code>."}, {"owner": {"reputation": 5632, "user_id": 923846, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/09e0e62acac2bdbd44edb763d8566df4?s=128&d=identicon&r=PG", "display_name": "obe", "link": "https://stackoverflow.com/users/923846/obe"}, "edited": false, "score": 0, "creation_date": 1594573382, "post_id": 43698252, "comment_id": 111166658, "body": "Why did they decide to make the end of the range exclusive? It feels very unintuitive..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1546113725, "last_edit_date": 1546113725, "creation_date": 1493484989, "answer_id": 43698252, "question_id": 43698191, "link": "https://stackoverflow.com/questions/43698191/how-do-i-include-the-end-value-in-a-range/43698252#43698252", "title": "How do I include the end value in a range?", "body": "<h3>Rust 1.26</h3>\n\n<p><a href=\"https://blog.rust-lang.org/2018/05/10/Rust-1.26.html\" rel=\"noreferrer\">As of Rust 1.26</a>, you can use \"inclusive ranges\":</p>\n\n<pre><code>fn main() {\n    for i in 0..=26 {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<h3>Rust 1.0 through 1.25</h3>\n\n<p>You need to add one to your end value:</p>\n\n<pre><code>fn main() {\n    for i in 0..(26 + 1) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>This will not work if you need to include all the values:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32296410/155423\">How to iterate over all byte values (overflowing_literals in `0..256`)</a></li>\n</ul>\n\n<hr>\n\n<p>However, you cannot iterate over a range of characters:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `char: std::iter::Step` is not satisfied\n --&gt; src/main.rs:2:14\n  |\n2 |     for i in 'a'..='z'  {\n  |              ^^^^^^^^^ the trait `std::iter::Step` is not implemented for `char`\n  |\n  = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::RangeInclusive&lt;char&gt;`\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/q/53971954/155423\">Why can&#39;t a range of char be collected?</a> for solutions.</p>\n\n<p>I would just specify the set of characters you are interested in:</p>\n\n<pre><code>static ALPHABET: &amp;str = \"abcdefghijklmnopqrstuvwxyz\";\n\nfor c in ALPHABET.chars() {\n    println!(\"{}\", c);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 961, "user_id": 1282369, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LjubZ.jpg?s=128&g=1", "display_name": "tsatiz", "link": "https://stackoverflow.com/users/1282369/tsatiz"}, "is_accepted": false, "score": 2, "last_activity_date": 1529425294, "creation_date": 1529425294, "answer_id": 50932913, "question_id": 43698191, "link": "https://stackoverflow.com/questions/43698191/how-do-i-include-the-end-value-in-a-range/50932913#50932913", "title": "How do I include the end value in a range?", "body": "<p>Inclusive range feature stabilised and released as part of version <a href=\"https://blog.rust-lang.org/2018/05/10/Rust-1.26.html\" rel=\"nofollow noreferrer\">1.26</a>. Below is valid syntax for inclusive range</p>\n\n<pre><code>for i in 1..=3 {\n    println!(\"i: {}\", i);\n}\n</code></pre>\n"}], "owner": {"reputation": 4498, "user_id": 58768, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9bbffd2d873441279b4661070e8add4b?s=128&d=identicon&r=PG", "display_name": "bohdan_trotsenko", "link": "https://stackoverflow.com/users/58768/bohdan-trotsenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3965, "favorite_count": 0, "accepted_answer_id": 43698252, "answer_count": 2, "score": 15, "last_activity_date": 1546113725, "creation_date": 1493484675, "last_edit_date": 1493485010, "question_id": 43698191, "link": "https://stackoverflow.com/questions/43698191/how-do-i-include-the-end-value-in-a-range", "title": "How do I include the end value in a range?", "body": "<p>I wanted to create a vector with 'a'..'z' values (inclusive).</p>\n\n<p>This doesn't compile:</p>\n\n<pre><code>let vec: Vec&lt;char&gt; = ('a'..'z'+1).collect();\n</code></pre>\n\n<p>What's the idiomatic way to have <code>'a'..'z'</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1493472508, "post_id": 43695527, "comment_id": 74437283, "body": "<code>HashMap</code> exposes an interface that would be unsafe if this were possible; <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>get_mut</code></a> is an example (if you can call this method and values own their keys, it will be possible to invalidate the map). A solution that exposes a safe interface would have to prevent that somehow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1493473318, "post_id": 43695527, "comment_id": 74437507, "body": "@trentcl pedantic nit, but it wouldn&#39;t be <i>unsafe</i> (using the Rust definition), just a logic error."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493473784, "post_id": 43695527, "comment_id": 74437633, "body": "@Shepmaster too late to edit, but you&#39;re absolutely right. Maybe &quot;unsound&quot; would have been better -- I&#39;m shaky on the semantics of that term"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1493490325, "last_edit_date": 1495540009, "creation_date": 1493472711, "answer_id": 43696277, "question_id": 43695527, "link": "https://stackoverflow.com/questions/43695527/whats-the-idiomatic-way-to-make-a-lookup-table-which-uses-field-of-the-item-as/43696277#43696277", "title": "What&#39;s the idiomatic way to make a lookup table which uses field of the item as the key?", "body": "<blockquote>\n  <p>Apparently, it is not possible without redesigning <code>Foo</code> by introducing <code>Rc</code> or clone/copy the <code>k</code>.</p>\n</blockquote>\n\n<p>That's correct, it is not possible to have <code>HashMap&lt;&amp;K, V&gt;</code> where the key points to some component of the value. </p>\n\n<p>The <code>HashMap</code> owns the key and the value, conceptually storing both in big vectors. When a new value is added to the <code>HashMap</code>, these existing values might need to be moved around due to hash collisions <em>or</em> the vectors might need to be reallocated to hold more items. Both of these operations would invalidate the address of any existing key, leaving it pointing at invalid memory. This would break Rust's safety guarantees, thus it is disallowed.</p>\n\n<p>Read <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> for a thorough discussion.</p>\n\n<p>Additionally, <a href=\"https://stackoverflow.com/questions/43695527/whats-the-idiomatic-way-to-make-a-lookup-table-which-uses-field-of-the-item-as/43696277#comment74437283_43695527\">trentcl points out</a> that <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>HashMap::get_mut</code></a> would allow you to get a mutable reference to the <em>key</em>, which would allow you to change the key without the map knowing. As the documentation states:</p>\n\n<blockquote>\n  <p>It is a logic error for a key to be modified in such a way that the key's hash, as determined by the Hash trait, or its equality, as determined by the Eq trait, changes while it is in the map.</p>\n</blockquote>\n\n<hr>\n\n<p>Workarounds include:</p>\n\n<ul>\n<li><p>Remove the key from the struct and store it separately. Instead of <code>HashMap&lt;&amp;K, V&gt;</code> where V is <code>(K, Data)</code>, store <code>HashMap&lt;K, Data&gt;</code>. You can return a struct which glues references to the key and value together (<a href=\"https://stackoverflow.com/a/43566310/155423\">example</a>)</p></li>\n<li><p>Share ownership of the key using <code>Rc</code> (<a href=\"https://stackoverflow.com/a/43656695/155423\">example</a>) </p></li>\n<li><p>Create duplicate keys using <code>Clone</code> or <code>Copy</code>.</p></li>\n<li><p>Use a <code>HashSet</code> as you have done, enhanced by <a href=\"https://stackoverflow.com/a/43696278/155423\">Sebastian Redl's suggestion</a>. A <code>HashSet&lt;K&gt;</code> is actually just a <code>HashMap&lt;K, ()&gt;</code>, so this works by transferring all ownership to the key.</p></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493473920, "post_id": 43696278, "comment_id": 74437658, "body": "I also usually advocate for creating a <code>key</code> inherent method that is called from <code>Eq</code> and <code>Ord</code> and friends, to reduce the chance of them getting out of sync."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 3, "last_activity_date": 1493473384, "last_edit_date": 1493473384, "creation_date": 1493472714, "answer_id": 43696278, "question_id": 43695527, "link": "https://stackoverflow.com/questions/43695527/whats-the-idiomatic-way-to-make-a-lookup-table-which-uses-field-of-the-item-as/43696278#43696278", "title": "What&#39;s the idiomatic way to make a lookup table which uses field of the item as the key?", "body": "<p>You can introduce a wrapper type for the item stored in the set.</p>\n\n<pre><code>struct FooByK(Foo);\n</code></pre>\n\n<p>Then implement the various traits needed for the set for this struct instead. This lets you choose a different wrapper type if you need a set that indexes by a different member.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1578, "favorite_count": 2, "accepted_answer_id": 43696277, "answer_count": 2, "score": 5, "last_activity_date": 1493490325, "creation_date": 1493467668, "last_edit_date": 1493472433, "question_id": 43695527, "link": "https://stackoverflow.com/questions/43695527/whats-the-idiomatic-way-to-make-a-lookup-table-which-uses-field-of-the-item-as", "title": "What&#39;s the idiomatic way to make a lookup table which uses field of the item as the key?", "body": "<p>I have a collection of <code>Foo</code>.</p>\n\n<pre><code>struct Foo {\n    k: String,\n    v: String,\n}\n</code></pre>\n\n<p>I want a <code>HashMap</code> which has the key <code>&amp;foo.k</code> and the value <code>foo</code>.</p>\n\n<p>Apparently, it is not possible without redesigning <code>Foo</code> by introducing <code>Rc</code> or clone/copy the <code>k</code>.</p>\n\n<pre><code>fn t1() {\n    let foo = Foo { k: \"k\".to_string(), v: \"v\".to_string() };\n    let mut a: HashMap&lt;&amp;str, Foo&gt; = HashMap::new();\n    a.insert(&amp;foo.k, foo); // Error\n}\n</code></pre>\n\n<p>There seems to be a workaround by abusing <code>get()</code> from <code>HashSet</code> (<a href=\"https://play.rust-lang.org/?gist=c3a884d5761736dab76abd8af38ebe13&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>use std::collections::{HashMap, HashSet};\nuse std::hash::{Hash, Hasher, BuildHasher};\nuse std::collections::hash_map::Entry::*;\n\nstruct Foo {\n    k: String,\n    v: String,\n}\n\nimpl PartialEq for Foo {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool { self.k == other.k }\n}\n\nimpl Eq for Foo {}\n\nimpl Hash for Foo {\n    fn hash&lt;H: Hasher&gt;(&amp;self, h: &amp;mut H) { self.k.hash(h); }\n}\n\nimpl ::std::borrow::Borrow&lt;str&gt; for Foo {\n    fn borrow(&amp;self) -&gt; &amp;str {\n        self.k.as_str()\n    }\n}\n\nfn t2() {\n    let foo = Foo { k: \"k\".to_string(), v: \"v\".to_string() };\n    let mut a: HashSet&lt;Foo&gt; = HashSet::new();\n    a.insert(foo);\n    let bar = Foo { k: \"k\".to_string(), v: \"v\".to_string() };\n    let foo = a.get(\"k\").unwrap();\n    println!(\"{}\", foo.v);\n}\n</code></pre>\n\n<p>This is pretty tedious. What if a <code>Foo</code> has multiple fields and different collections of <code>Foo</code> to key on different fields?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1493464297, "post_id": 43694632, "comment_id": 74434939, "body": "This is not a function pointer; it&#39;s a reference to a <i>closure</i>. Do you actually need an environment?"}], "answers": [{"comments": [{"owner": {"reputation": 372, "user_id": 253595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fb994a9a8d1f434afb026494d172ed?s=128&d=identicon&r=PG", "display_name": "Paul Rayner", "link": "https://stackoverflow.com/users/253595/paul-rayner"}, "edited": false, "score": 0, "creation_date": 1493470625, "post_id": 43695159, "comment_id": 74436785, "body": "Thank you - that is a very clear and helpful answer. Much appreciated."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1493465485, "creation_date": 1493465485, "answer_id": 43695159, "question_id": 43694632, "link": "https://stackoverflow.com/questions/43694632/lifetime-issue-adding-a-function-pointer-to-a-struct/43695159#43695159", "title": "Lifetime issue adding a function pointer to a struct", "body": "<p>The type <code>Fn(u64) -&gt; u64</code> is not a function pointer, but a trait (-object). Function pointers in Rust are written <code>fn(u64) -&gt; u64</code>, with a <strong>lowercase <code>f</code></strong>! Also note that <code>fn(u64) -&gt; u64</code> is <em>already</em> a function <em>pointer</em>, no need to say <code>&amp;fn(u64) -&gt; u64</code>! </p>\n\n<p>So one way to make it work is by using function pointers (<a href=\"https://play.rust-lang.org/?gist=98a48e75ad6e70a8cef8637ab6af82a0&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>struct Ure {\n    num: u64,\n    func: Option&lt;fn(u64) -&gt; u64&gt;,\n    //           ^^^^^^^^^^^^^^\n}\n\nimpl Ure {\n    fn g42_ure(n: u64) -&gt; Ure {\n        Ure {\n            num: n,\n            func: Some(Ure::g42),\n            //         ^^^^^^^^\n        }\n    }\n    // ...\n}\n</code></pre>\n\n<p>Function pointers have limitations, though. Specifically, they can't have environments like closures have. That's there the <code>Fn</code> trait comes in which (together with its siblings <code>FnMut</code> and <code>FnOnce</code>) abstracts over callable things in general (including function pointers and closures). </p>\n\n<p>The problem is that you can't use trait objects that easily. Probably the easiest is to use a <code>Box</code> to store and own a trait object on the heap. It would look like this (<a href=\"https://play.rust-lang.org/?gist=7e97d3f265c131fd6a7bad8c75c65ae9&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>struct Ure {\n    num: u64,\n    func: Option&lt;Box&lt;Fn(u64) -&gt; u64&gt;&gt;,\n    //           ^^^^^^^^^^^^^^^^^^^\n}\n\nimpl Ure {\n    fn g42_ure(n: u64) -&gt; Ure {\n        Ure {\n            num: n,\n            func: Some(Box::new(Ure::g42)),\n            //         ^^^^^^^^^^^^^^^^^^\n        }\n    }   \n    // ...\n} \n</code></pre>\n"}], "owner": {"reputation": 372, "user_id": 253595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fb994a9a8d1f434afb026494d172ed?s=128&d=identicon&r=PG", "display_name": "Paul Rayner", "link": "https://stackoverflow.com/users/253595/paul-rayner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 43695159, "answer_count": 1, "score": 0, "last_activity_date": 1493465485, "creation_date": 1493462575, "last_edit_date": 1493464277, "question_id": 43694632, "link": "https://stackoverflow.com/questions/43694632/lifetime-issue-adding-a-function-pointer-to-a-struct", "title": "Lifetime issue adding a function pointer to a struct", "body": "<p>I'm trying to add a function pointer to a struct, and can't figure out how to do it. Here is a simple example:</p>\n\n<pre><code>struct Ure&lt;'a&gt; {\n    num: u64,\n    func: Option&lt;&amp;'a Fn(u64) -&gt; u64&gt;,\n}\n\nimpl&lt;'a&gt; Ure&lt;'a&gt; {\n    fn g42_ure(n: u64) -&gt; Ure&lt;'a&gt; {\n        Ure {\n          num: n,\n          func: Some(&amp;Ure::g42),\n        }\n    }\n\n    fn g42(u: u64) -&gt; u64 {\n        if u &gt; 42 { u } else { 42 }\n    }\n}\n</code></pre>\n\n<p>This leads to the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:10:23\n   |\n10 |           func: Some(&amp;Ure::g42),\n   |                       ^^^^^^^^ does not live long enough\n11 |         }\n12 |     }\n   |     - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the body at 7:34...\n  --&gt; &lt;anon&gt;:7:35\n   |\n7  |       fn g42_ure(n: u64) -&gt; Ure&lt;'a&gt; {\n   |  ___________________________________^ starting here...\n8  | |         Ure {\n9  | |           num: n,\n10 | |           func: Some(&amp;Ure::g42),\n11 | |         }\n12 | |     }\n   | |_____^ ...ending here\n</code></pre>\n\n<p>Is there a way to get a reference to function <code>g42</code> in this example to live long enough without passing it as an argument to <code>g42_ure</code>? It does not matter to me where <code>g42</code> is defined (whether it is inside <code>impl Ure</code>, <code>g42_ure()</code> or neither), but coming from an OOP background it seems neater inside <code>impl Ure</code>. </p>\n\n<p>I'm just learning Rust (and very much enjoying it), so any help would be appreciated, thanks.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493463040, "post_id": 43694366, "comment_id": 74434654, "body": "My guess: Rust needs all heap allocations to live until the end of every function scope, so that it knows what to free when the function invocation goes out of scope?"}], "answers": [{"comments": [{"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493462919, "post_id": 43694603, "comment_id": 74434628, "body": "so, <code>as_bytes()</code> returns a reference to the result of that expression, but the expression&#39;s value itself does not live after that line, so that what <code>as_bytes()</code> returns is referencing something dead?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1493464007, "post_id": 43694603, "comment_id": 74434868, "body": "@Renato (assuming you are talking about the example the produces the compiler error) yes!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493476525, "post_id": 43694603, "comment_id": 74438466, "body": "If you want to really minimize the amount of code at the calling location, you can <a href=\"https://play.integer32.com/?gist=51ca86397489276026406f2f56bdb6ba&amp;version=stable\" rel=\"nofollow noreferrer\">get it down to 2 lines</a> (and reduce the number of allocations too)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1493462412, "last_edit_date": 1495535482, "creation_date": 1493462412, "answer_id": 43694603, "question_id": 43694366, "link": "https://stackoverflow.com/questions/43694366/what-is-the-difference-between-assigning-an-expression-to-a-variable-vs-just-inl/43694603#43694603", "title": "What is the difference between assigning an expression to a variable VS just inlining the variable into another expression?", "body": "<p>As the compiler tells you:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>= note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>... a <code>let</code> binding can increase the lifetime of values. Your expression <code>args[1..].join(\" \") + \"\\nEND\\n\"</code> creates a value of type <code>String</code>. Values which are created within a statement don't outlive that statement unless they are named (with a let binding) or are being <a href=\"https://stackoverflow.com/questions/42311825/what-is-exactly-lvalue-context-in-rust/42313956#42313956\">rvalue promoted</a>. The latter case doesn't apply here and since you're not naming your value, it won't outlive the parent statement. Often, this is not really problematic, but if you want to <em>reference</em> said value later, you would reference something dead. Hence the complains by the borrow checker.</p>\n\n<p><strong>In your case, there are two possibilities</strong>:</p>\n\n<ol>\n<li><p>Inline expression enough such that you don't reference values outside of your statement:</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().collect();\nsend_message(&amp;(args[1..].join(\" \") + \"\\nEND\\n\").as_bytes());\n</code></pre>\n\n<p>As you can see: we still have the temporary string inside our statement, but it's fine since we only reference it inside of that statement.</p></li>\n<li><p>Use a <code>let</code> binding to increase the value's lifetime, as you've done in your first example. You could still shorten your code by one line like so:</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().collect();\nlet string_message = args[1..].join(\" \") + \"\\nEND\\n\";\n\nsend_message(string_message.as_bytes());\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 43694603, "answer_count": 1, "score": 2, "last_activity_date": 1493462412, "creation_date": 1493460861, "last_edit_date": 1493462223, "question_id": 43694366, "link": "https://stackoverflow.com/questions/43694366/what-is-the-difference-between-assigning-an-expression-to-a-variable-vs-just-inl", "title": "What is the difference between assigning an expression to a variable VS just inlining the variable into another expression?", "body": "<p>I have the following code in Rust:</p>\n\n<pre><code>fn send_message(_: &amp;[u8]) {}\n\nlet args: Vec&lt;String&gt; = std::env::args().collect();\nlet string_message = args[1..].join(\" \") + \"\\nEND\\n\";\nlet socket_message = string_message.as_bytes();\n\nsend_message(&amp;socket_message);\n</code></pre>\n\n<p>This works. However, I wanted to avoid having the <code>string_message</code> variable there, so I just inlined that expression in the declaration of socket_message:</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().collect();\nlet socket_message = (args[1..].join(\" \") + \"\\nEND\\n\").as_bytes();\n\nsend_message(&amp;socket_message);\n</code></pre>\n\n<p>Rust doesn't think these two snippets are the same, though!</p>\n\n<p>It gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:7:70\n   |\n7  |     let socket_message = (args[1..].join(\" \") + \"\\nEND\\n\").as_bytes();\n   |                          ---------------------------------           ^ temporary value dropped here while still borrowed\n   |                          |\n   |                          temporary value created here\n...\n10 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>I believe I am missing something related to the borrow checker, but cannot even understand what it might be, because I expected a temporary value that does not even get assigned directly wouldn't have anything to do with borrowing?!</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493458895, "post_id": 43693759, "comment_id": 74433618, "body": "Sounds like a problem with <code>return</code> not correctly ending the scope."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493475354, "post_id": 43693759, "comment_id": 74438092, "body": "FYI, it&#39;s more idiomatic to do <code>let vec = &amp;mut container.vec;</code> and <code>for element in &amp;mut vec</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1493475773, "post_id": 43693759, "comment_id": 74438240, "body": "As a workaround, <a href=\"https://play.integer32.com/?gist=9406b51a0503c37e2de9a5a4b048d117&amp;version=stable\" rel=\"nofollow noreferrer\">you can use the index of the item in the array instead</a>."}], "owner": {"reputation": 531, "user_id": 1129180, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b019579587da874e2910428d2c23c63c?s=128&d=identicon&r=PG", "display_name": "Flaise", "link": "https://stackoverflow.com/users/1129180/flaise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 53, "favorite_count": 0, "closed_date": 1493472777, "answer_count": 0, "score": 2, "last_activity_date": 1493474938, "creation_date": 1493456665, "last_edit_date": 1493474938, "question_id": 43693759, "link": "https://stackoverflow.com/questions/43693759/rust-borrow-checker-prevents-reuse-after-end-of-scope", "closed_reason": "Duplicate", "title": "Rust borrow checker prevents reuse after end of scope", "body": "<p>Here's some code that I'm having trouble getting to compile:</p>\n\n<pre><code>struct HasVec {\n    vec: Vec&lt;u8&gt;,\n}\n\nfn get_or_make&lt;'a&gt;(container: &amp;'a mut HasVec) -&gt; &amp;'a mut u8 {\n    let ref mut vec = container.vec;\n    {\n        for element in vec.iter_mut() {\n            if *element &gt; 9 {\n                return element;\n            }\n        }\n    }\n    vec.push(10);\n    vec.last_mut().unwrap()\n}\n</code></pre>\n\n<p>The output from the compiler is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*vec` as mutable more than once at a time\n   |\n8  |             for element in vec.iter_mut() {\n   |                            --- first mutable borrow occurs here\n...\n14 |         vec.push(10);\n   |         ^^^ second mutable borrow occurs here\n15 |         vec.last_mut().unwrap()\n16 |     }\n   |     - first borrow ends here\n\n\nerror[E0499]: cannot borrow `*vec` as mutable more than once at a time\n   |\n8  |             for element in vec.iter_mut() {\n   |                            --- first mutable borrow occurs here\n...\n15 |         vec.last_mut().unwrap()\n   |         ^^^ second mutable borrow occurs here\n16 |     }\n   |     - first borrow ends here\n\nerror[E0499]: cannot borrow `*vec` as mutable more than once at a time\n   |\n8  |             for element in vec.iter_mut() {\n   |                            --- first mutable borrow occurs here\n...\n15 |         vec.last_mut().unwrap()\n   |         ^^^ second mutable borrow occurs here\n16 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>Isn't the borrow supposed to end at the end of the scope on line 13? I haven't found any way to refactor that code that will satisfy the borrow checker. Putting <code>let ref mut vec = container.vec;</code> inside of the code block with the for loop and another right after that block doesn't work and neither does accessing <code>container.vec</code> directly without a ref variable.</p>\n\n<p>I'm using Rust 1.16.0.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1493447380, "post_id": 43692500, "comment_id": 74430933, "body": "We have powerful iterators and <code>collect()</code>, for all your FP need. What do you mean by inplace map?"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 1, "creation_date": 1493447878, "post_id": 43692500, "comment_id": 74431019, "body": "@TatsuyukiIshi: In Haskell, you can just <code>fmap</code> and keep the structure.  For example, if you have a hash table, none of the keys have to be rehashed if you <code>fmap</code> to change the values."}, {"owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1493449943, "post_id": 43692500, "comment_id": 74431465, "body": "@TatsuyukiIshi: I did not realize that I should be looking in the iterator for the map function.  Thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "edited": false, "score": 0, "creation_date": 1493449785, "post_id": 43692632, "comment_id": 74431426, "body": "Ah, thank you so much.  TIL that in Rust the map function is part of the iterator, not the collection."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1493453121, "post_id": 43692632, "comment_id": 74432258, "body": "Besides <code>for x in vec.iter_mut()</code>, you could also write it as <code>for x in &amp;mut vec</code>."}], "tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": true, "score": 3, "last_activity_date": 1493454874, "last_edit_date": 1493454874, "creation_date": 1493448160, "answer_id": 43692632, "question_id": 43692500, "link": "https://stackoverflow.com/questions/43692500/are-there-collections-supporting-a-map-function-like-haskell-in-rust/43692632#43692632", "title": "Are there collections supporting a &quot;map&quot; function (like Haskell) in Rust?", "body": "<p>To map container to container, iterate and <code>collect()</code> them:</p>\n\n<pre><code>vec.iter().map(|x| x * 2).collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>To alter items in-place, use a for loop and <code>iter_mut()</code>. Using iterator chaining in this case is discouraged, since modifying values introduce side-effects.</p>\n\n<pre><code>for x in vec.iter_mut() { \n    x *= 2; \n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "edited": false, "score": 0, "creation_date": 1493488771, "post_id": 43693689, "comment_id": 74442581, "body": "Wow @Lukas, thank you for the super-detailed reply!  Please don&#39;t think me ungrateful for having previously accepted Tatsuyuki&#39;s answer.  In the end, all I was missing was the fact that, in Rustland, map is something you  do to iterators rather than to the collections they come from.  Thank you!!"}, {"owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "edited": false, "score": 0, "creation_date": 1493489101, "post_id": 43693689, "comment_id": 74442692, "body": "Also thanks for the comment about Traits being like Haskell type classes.  I had figured that out already although I do wish the Rust manual would briefly mention this (and the equivalent feature in the dozen or so most popular languages, e.g. interfaces in Java).  As it&#39;s currently written the Rust documentation makes traits seem like some novel and powerful thing which, as far as I can tell they really aren&#39;t.  Contrast this with, say, the borrow checker which has nothing even remotely close in any production language/compiler besides Clean and Mercury."}, {"owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "edited": false, "score": 0, "creation_date": 1493489360, "post_id": 43693689, "comment_id": 74442773, "body": "<i>Rust&#39;s type system can&#39;t compare the sizes of two types at compile time</i> Hrm, I thought being able to determine the size of every type (where the size of a Boxed type is the size of a pointer of course) was a major driver for many of the decisions in Rust&#39;s type system.  Is there a description of the Rust type system for people with a PL background?  Not necessarily expecting sequents and deductions, I realize Rust is still evolving quickly and the kind of formalism that ML has comes at the cost of slow evolution."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "edited": false, "score": 0, "creation_date": 1493489584, "post_id": 43693689, "comment_id": 74442844, "body": "@user4718 &quot;<i>... can&#39;t compare the sizes ...</i>&quot; -&gt; my formulation was rather vague. What I mean by that is, that you (as a normal user) can&#39;t write a function with two type parameters and assert at compile time that the types&#39; sizes are equal. You can of course check it at run time and <code>panic!()</code>, but that&#39;s not as good. This all has to do with the ability to play with integers on a type level which is currently not possible. Of course the compiler knows about sizes, the user just can&#39;t &quot;use&quot; them at compile time. Hope it&#39;s clearer now."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1493456178, "creation_date": 1493456178, "answer_id": 43693689, "question_id": 43692500, "link": "https://stackoverflow.com/questions/43692500/are-there-collections-supporting-a-map-function-like-haskell-in-rust/43693689#43693689", "title": "Are there collections supporting a &quot;map&quot; function (like Haskell) in Rust?", "body": "<p>Rust has a <code>map()</code> function, but it's not part of every individual container, but rather of the trait <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> (Rust traits are <em>very</em> similar to Haskell's type classes): <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>Iterator:map()</code></a>. The trait contains <em>many</em> more useful methods, many of which should sound familiar to FP programmers. </p>\n\n<p>Let's see <code>map()</code> in action:</p>\n\n<pre><code>let result: Vec&lt;_&gt; = vec![2, 3, 5, 7]\n    .into_iter()      // we have to get an iterator over the vector \n    .map(|i| i * i)   // next we map each element\n    .collect();       // finally we collect all elements into a new vector\n</code></pre>\n\n<p>The type of <code>map()</code> is what you would expect:</p>\n\n<pre><code>:: Iterator a -&gt; (a -&gt; b) -&gt; Iterator b\n</code></pre>\n\n<p>Or in Rust syntax:</p>\n\n<pre><code>trait Iterator {\n    type Item;\n    fn map&lt;B, F&gt;(self, f: F) -&gt; Map&lt;Self, F&gt; \n        where F: FnMut(Self::Item) -&gt; B;\n}\n</code></pre>\n\n<p>Which first looks way more complicated, but it actually makes sense and it will probably be better in the future. The signature is <code>(self, f: F) -&gt; Map&lt;Self, F&gt;</code>. And:</p>\n\n<ul>\n<li><code>self</code> is an <code>Iterator</code> over <code>Self::Item</code> <em>[compare: <code>Iterator a</code>]</em></li>\n<li><code>F</code> is an <code>FnMut(Self::Item) -&gt; B</code> <em>[compare: <code>(a -&gt; b)</code>]</em></li>\n<li><code>Map&lt;Self, F&gt;</code> is an <code>Iterator</code> over whatever <code>F</code> returns (<code>B</code>) <em>[compare <code>Iterator b</code>]</em></li>\n</ul>\n\n<hr>\n\n<p>If you want to do an in-place <code>a -&gt; a</code> map (meaning: without chaning the type), you can just obtain a mutable reference to each element and change it. Example:</p>\n\n<pre><code>let mut v = vec![2, 3, 5, 7];\nfor e in &amp;mut v {\n    e *= 2;\n}\n\nlet mut m = HashMap::new();\nm.insert(\"anna\", 5);\nm.insert(\"peter\", 3);\nfor v in m.values_mut() {\n    v *= 2;\n}\n</code></pre>\n\n<p>Doing an in-place map that changes the type is currently not possible without unsafe code. In part because Rust's type system can't compare the sizes of two types at compile time (but it will change).</p>\n"}], "owner": {"reputation": 90, "user_id": 990076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b93bc4034929a6d812ece7698de6345?s=128&d=identicon&r=PG&f=1", "display_name": "user4718", "link": "https://stackoverflow.com/users/990076/user4718"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 728, "favorite_count": 1, "closed_date": 1493474598, "accepted_answer_id": 43692632, "answer_count": 2, "score": 2, "last_activity_date": 1493472171, "creation_date": 1493447077, "last_edit_date": 1493472171, "question_id": 43692500, "link": "https://stackoverflow.com/questions/43692500/are-there-collections-supporting-a-map-function-like-haskell-in-rust", "closed_reason": "Duplicate", "title": "Are there collections supporting a &quot;map&quot; function (like Haskell) in Rust?", "body": "<p>In functional programming languages, the most primitive/basic operation on a collection is the homomorphism <code>map</code>; it is (roughly) <code>Collection[A] -&gt; (A-&gt;B) -&gt; Collection[B]</code></p>\n\n<p>The Rust collections don't seem to support this.  I suppose that's because they are mutable collections; if you're already using mutable collections an in-place update is more efficient.</p>\n\n<p>Is there a separate \"immutable collections\" library (like with Scala) that I missed?</p>\n\n<p>What about an \"in-place map\" operation that uses an <code>A-&gt;B</code> to mutate a <code>Collection[A]</code> into a <code>Collection[B]</code> (unlike ML and Haskell it's actually possible do to this safely because of affine types!)  Or even the special case where <code>A=B</code> and the in-place map takes an <code>A-&gt;A</code>?</p>\n\n<p>It's hard to use search engines to answer this question because all the hits involve \"map\" the noun (as in <code>HashMap</code>).</p>\n"}, {"tags": ["compiler-errors", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1493417476, "creation_date": 1493417476, "answer_id": 43689570, "question_id": 43688721, "link": "https://stackoverflow.com/questions/43688721/converting-a-boxstream-into-boxfuture/43689570#43689570", "title": "Converting a BoxStream into BoxFuture", "body": "<p>You are calling <a href=\"https://docs.rs/futures/0.1.13/futures/future/trait.IntoFuture.html#tymethod.into_future\" rel=\"nofollow noreferrer\"><code>futures::future::IntoFuture::into_future</code></a>, not <a href=\"https://docs.rs/futures/0.1.13/futures/stream/trait.Stream.html#method.into_future\" rel=\"nofollow noreferrer\"><code>futures::stream::Stream::into_future</code></a>. You need to import the trait:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::Stream; // This\nuse futures::stream::BoxStream;\nuse std::io;\n\npub fn foo() -&gt; BoxStream&lt;(), io::Error&gt; {\n    unimplemented!()\n}\n\nfn main() {\n    let a = foo().into_future();\n}\n</code></pre>\n\n<p>You can validate the difference with</p>\n\n<pre><code>fn main() {\n    let a = futures::future::IntoFuture::into_future(foo());\n    let a = futures::Stream::into_future(foo());\n}\n</code></pre>\n"}], "owner": {"reputation": 3123, "user_id": 273348, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/35ugZ.jpg?s=128&g=1", "display_name": "Peter Jankuliak", "link": "https://stackoverflow.com/users/273348/peter-jankuliak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 43689570, "answer_count": 1, "score": 3, "last_activity_date": 1493417476, "creation_date": 1493412784, "last_edit_date": 1493415151, "question_id": 43688721, "link": "https://stackoverflow.com/questions/43688721/converting-a-boxstream-into-boxfuture", "title": "Converting a BoxStream into BoxFuture", "body": "<p>I have a function which returns a <code>BoxStream&lt;(), io::Error&gt;</code> and would like to convert this stream into a <code>Future</code> (or <code>BoxFuture</code>) but I'm having some compiler issues:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::stream::BoxStream;\nuse std::io;\n\npub fn foo() -&gt; BoxStream&lt;(), io::Error&gt; {\n    unimplemented!()\n}\n\nfn main() {\n    let a = foo().into_future();\n}\n</code></pre>\n\n<p>And the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `futures::Stream&lt;Error=std::io::Error, Item=()&gt; + std::marker::Send + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:23:19\n   |\n23 |     let a = foo().into_future();\n   |                   ^^^^^^^^^^^ the trait `std::marker::Sized` is not implemented for `futures::Stream&lt;Error=std::io::Error, Item=()&gt; + std::marker::Send + 'static`\n   |\n   = note: `futures::Stream&lt;Error=std::io::Error, Item=()&gt; + std::marker::Send + 'static` does not have a constant size known at compile-time\n</code></pre>\n\n<p>Is there a way around this?</p>\n"}, {"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493415769, "post_id": 43688709, "comment_id": 74424732, "body": "TL;DR: You don&#39;t and cannot do that. Either your object needs to own the <code>String</code> instead of the <code>&amp;str</code> or you have to pass the <code>&amp;str</code> into the constructor of the object."}, {"owner": {"reputation": 3, "user_id": 5646947, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45b5c791dec6385b50a9014bd073943b?s=128&d=identicon&r=PG", "display_name": "Valentin", "link": "https://stackoverflow.com/users/5646947/valentin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493417599, "post_id": 43688709, "comment_id": 74425420, "body": "I read the article you linked and I&#39;m not sure it solves my problem. I wouldn&#39;t mind returning an owned String, but since the keyring library only accepts &amp;str as parameter, which is normal behaviour I believe, I have to create a reference somehow, right? So it&#39;s not possible to call the function without parameters and still returning the keyring?  So I can&#39;t create a reference living in the scope of the new object which gets returned instead of the scope of the function it is created in, right?  But even then I can&#39;t copy the value of the <code>whoami</code>, because it too is created in the scope"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493417816, "post_id": 43688709, "comment_id": 74425496, "body": "<i>So it&#39;s not possible to call the function without parameters and still returning the keyring</i> \u2014 that&#39;s sounds like you understand completely. <code>Keyring::new</code> accepts a <code>&amp;str</code> which must be valid and cannot change its memory address while the <code>Keyring</code> still exists."}, {"owner": {"reputation": 3, "user_id": 5646947, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45b5c791dec6385b50a9014bd073943b?s=128&d=identicon&r=PG", "display_name": "Valentin", "link": "https://stackoverflow.com/users/5646947/valentin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493418242, "post_id": 43688709, "comment_id": 74425629, "body": "Okay, at least I understood the ownership and scope concept better, now. Thank you! I will try to find another solution then"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493418372, "post_id": 43688709, "comment_id": 74425666, "body": "It could be worth asking the crate maintainer if there&#39;s a large benefit to keeping the reference. Perhaps the crate could change to store a <code>String</code> instead."}], "owner": {"reputation": 3, "user_id": 5646947, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45b5c791dec6385b50a9014bd073943b?s=128&d=identicon&r=PG", "display_name": "Valentin", "link": "https://stackoverflow.com/users/5646947/valentin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 15, "favorite_count": 0, "closed_date": 1493415701, "answer_count": 0, "score": 0, "last_activity_date": 1493415678, "creation_date": 1493412711, "last_edit_date": 1493415678, "question_id": 43688709, "link": "https://stackoverflow.com/questions/43688709/return-an-object-built-upon-str", "closed_reason": "Duplicate", "title": "Return an Object built upon &amp;str", "body": "<p>When I want to return an object, I just specify it, but what do I do when the created object is based on a reference of a string? My example:</p>\n\n<pre><code>fn init_keychain() -&gt; keyring::Keyring&lt;'a&gt; {\n\n    // Gets the username of the current user to save it in the right keychain\n    let mut username = Command::new(\"whoami\")\n                        .output()\n                        .expect(\"Failed to get current user\");\n\n    // Check for newline sequence in Command Output and strip it\n    if username.stdout[username.stdout.len()-1] == 10 {\n        username.stdout.pop();\n    }\n\n    let user = String::from_utf8_lossy(&amp;username.stdout);\n\n    // Create a new Keychain attribute to save the passord to\n    keyring::Keyring::new(\"Service\", &amp;user.into_owned())\n}\n</code></pre>\n\n<p>Which raises the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; controller.rs:44:44\n   |\n44 |             keyring::Keyring::new(\"Service\", &amp;user.into_owned())\n   |                                              ^^^^^^^^^^^^^^^ does \nnot live long enough\n...\n49 |         }\n   |         - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on \nthe body at 30:29...\n</code></pre>\n\n<p>I understand why the error occurs - the reference <code>&amp;user</code> gets out of scope as soon as <code>init_keychain()</code> ends.</p>\n\n<p>How do I create an object where I need a <code>&amp;str</code> and then return it? Is there some Rusty magic I completely missed? I tried with <code>into_owned()</code> and <code>clone()</code>, but that doesn't change anything about the lifetime of user. So that's where my knowledge ends.</p>\n\n<p>I am confused with Rust's ownership concept, and I can't find information in the docs, Google, or Stack Overflow. But maybe I'm just really bad at figuring this out.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493396971, "post_id": 43684768, "comment_id": 74415902, "body": "Why have you placed the generic types (<code>&#39;a, K, V</code>) on the <i>trait</i> instead of the function? Why do you have an explicit lifetime at all?"}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493397029, "post_id": 43684768, "comment_id": 74415962, "body": "@Shepmaster Sry. I was used to other languages which encourage code snippets without <code>import &#47; using</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493397210, "post_id": 43684768, "comment_id": 74416082, "body": "It&#39;s fine, but including the imports (but minimizing them!) reduces the amount of guessing that the answerer has to do to reproduce the same problem. There&#39;s no guarantee that you are using the standard <code>HashMap</code>, for example; it could be one from a crate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1493397455, "post_id": 43684768, "comment_id": 74416231, "body": "I think what @ildjarn is trying to ask is: could you add a small <code>main</code> method that shows how these structs / traits would be used? I have a potential solution, but I don&#39;t know if it actually works in your case."}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1493398037, "post_id": 43684768, "comment_id": 74416538, "body": "@ildjarn I think you answered quite a few my F# questions years ago! E.g. (<a href=\"http://stackoverflow.com/questions/12521841/is-there-any-way-to-simplify-this-line/12522040#12522040\" title=\"is there any way to simplify this line\">stackoverflow.com/questions/12521841/&hellip;</a>)"}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1493398183, "post_id": 43684768, "comment_id": 74416594, "body": "Aha, I knew your name was familiar... ;-D"}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493398492, "post_id": 43684768, "comment_id": 74416755, "body": "@Shepmaster I updated the question, hope it makes a bit clearer"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1493426687, "last_edit_date": 1495542358, "creation_date": 1493426687, "answer_id": 43690704, "question_id": 43684768, "link": "https://stackoverflow.com/questions/43684768/unused-type-parameters-when-binding-a-generic-type-to-a-trait-that-takes-lifetim/43690704#43690704", "title": "Unused type parameters when binding a generic type to a trait that takes lifetime", "body": "<p>You can get rid of the error by using a <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">higher-rank trait bound</a> instead of a lifetime parameter:</p>\n\n<pre><code>struct Watchable&lt;K, V, W: for&lt;'a&gt; Watcher&lt;'a, K, V&gt;&gt; {\n    data: HashMap&lt;K, V&gt;,\n    watchers: Vec&lt;W&gt;,\n}\n</code></pre>\n\n<p>That doesn't solve your problem though. <code>IndexWatcher</code> will not satisfy the bound <code>for&lt;'a&gt; Watcher&lt;'a, K, V&gt;</code> because a <code>IndexWatcher&lt;'a, I, V&gt;</code> only implements <code>Watcher&lt;'a, K, V&gt;</code> for <em>one</em> specific lifetime, not for all possible lifetimes.</p>\n\n<p>Fundamentally, the problem is that <a href=\"https://stackoverflow.com/q/32300132/234590\">you're trying to put a value and a reference to that value in the same struct</a> (indirectly). That is, your idea is that the watchers are expected to borrow data from the <code>Watchable</code>, but the <code>Watchable</code> also owns the watchers. Please take the time to <a href=\"https://stackoverflow.com/q/32300132/234590\">read this question</a> and Shepmaster's answer to understand why that idea is not going to work.</p>\n\n<p>In particular, be aware that inserting an entry in or removing an entry from the <code>Watchable</code>'s <code>HashMap</code> might invalidate the references in any of the watchers due to <code>HashMap</code> needing to reallocate storage, which may cause the address of the keys and values to change.</p>\n\n<p>What I would do instead is wrap the keys and values in an <code>Rc</code> (or an <code>Arc</code> if you want to share a <code>Watchable</code> across threads). Getting a shared index value out of a <code>Rc&lt;V&gt;</code> might be problematic though. Consider changing your index function to <code>fn(&amp;V) -&gt; I</code>, and have the index functions return clones (they can be clones of an <code>Rc</code> if cloning the index value is too expensive) or handles.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 268, "favorite_count": 0, "accepted_answer_id": 43690704, "answer_count": 1, "score": 0, "last_activity_date": 1493426687, "creation_date": 1493396396, "last_edit_date": 1493418624, "question_id": 43684768, "link": "https://stackoverflow.com/questions/43684768/unused-type-parameters-when-binding-a-generic-type-to-a-trait-that-takes-lifetim", "title": "Unused type parameters when binding a generic type to a trait that takes lifetime", "body": "<pre><code>use std::collections::HashMap;\nuse std::hash::Hash;\n\nstruct Watchable&lt;'a, K, V, W: Watcher&lt;'a, K, V&gt;&gt; {\n    data: HashMap&lt;K, V&gt;,\n    watchers: Vec&lt;W&gt;,\n}\n\ntrait Watcher&lt;'a, K, V&gt; {\n    fn before_new(&amp;mut self, key: &amp;'a K, value: &amp;'a V);\n}\n\nstruct IndexWatcher&lt;'a, I: 'a, V: 'a&gt; {\n    data: HashMap&lt;&amp;'a I, &amp;'a V&gt;,\n    indexer: fn(&amp;V) -&gt; &amp;I,\n}\n\nimpl&lt;'a, K, V, I&gt; Watcher&lt;'a, K, V&gt; for IndexWatcher&lt;'a, I, V&gt;\n    where I: Eq + Hash\n{\n    fn before_new(&amp;mut self, key: &amp;'a K, value: &amp;'a V) {\n        let index = (self.indexer)(value);\n        self.data.insert(index, value);\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `'a` is never used\n --&gt; src/main.rs:4:18\n  |\n4 | struct Watchable&lt;'a, K, V, W: Watcher&lt;'a, K, V&gt;&gt; {\n  |                  ^^ unused type parameter\n  |\n  = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>Is there any way to remove some lifetime annotation? It seems everything has the same lifetime <code>a</code>.</p>\n\n<p>At first, I didn't put any specific lifetime:</p>\n\n<pre><code>struct IndexWatcher&lt;I, V&gt; {\n    data: HashMap&lt;&amp;I, &amp;V&gt;,\n    indexer: fn(&amp;V) -&gt; &amp;I,\n}\n</code></pre>\n\n<p>The compiler complained about lifetimes, so I added it:</p>\n\n<pre><code>struct IndexWatcher&lt;'a, I: 'a, V: 'a&gt; {\n    data: HashMap&lt;&amp;'a I, &amp;'a V&gt;,\n    indexer: fn(&amp;V) -&gt; &amp;I,\n}\n</code></pre>\n\n<p>When I tried to implement the trait without lifetimes:</p>\n\n<pre><code>trait Watcher&lt;K, V&gt; {\n    fn before_new(&amp;mut self, key: &amp;K, value: &amp;V);\n}\n\nimpl&lt;'a, K, V, I&gt; Watcher&lt;K, V&gt; for IndexWatcher&lt;'a, I, V&gt;\n    where I: Eq + Hash\n{\n    fn before_new(&amp;mut self, key: &amp;K, value: &amp;V) {\n        let index = (self.indexer)(value);\n        self.data.insert(index, value);\n    }\n}\n</code></pre>\n\n<p>I got the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n  --&gt; &lt;anon&gt;:18:33\n   |\n18 |         self.data.insert(index, value);\n   |                                 ^^^^^\n   |\n\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; &lt;anon&gt;:17:21\n   |\n17 |         let index = (self.indexer)(value);\n   |                     ^^^^^^^^^^^^^^^^^^^^^\n   |\n</code></pre>\n\n<p>Hence my final version with lifetimes everywhere.</p>\n\n<p>Ideally, I would like to use the trait in <code>Watchable</code> like the following:</p>\n\n<pre><code>impl&lt;K, V, W: Watcher&lt;K, V&gt;&gt; Watchable&lt;K, V, W&gt;\n    where K: Eq + Hash {\n\n    fn insert(&amp;mut self, k: K, v: V) -&gt; Option&lt;V&gt; {\n        match self.data.entry(k) {\n            Occupied(mut occupied) =&gt; {\n                {\n                    let k = occupied.key();\n                    let old = occupied.get();\n                    for watcher in &amp;mut self.watchers {\n                        watcher.before_change(k, &amp;v, old);\n                    }\n                }\n                let old = occupied.insert(v);\n                Some(old)\n            },\n            Vacant(vacant) =&gt; {\n                {\n                    let k = vacant.key();\n                    for watcher in &amp;mut self.watchers {\n                        watcher.before_new(k, &amp;v);\n                    }\n                }\n                vacant.insert(v);\n                None\n            }\n        }\n    }\n}\n\ntrait Watcher&lt;K, V&gt; {\n    fn before_new(&amp;mut self, key: &amp;K, value: &amp;V);\n    fn before_change(&amp;mut self, key: &amp;K, value: &amp;V, old: &amp;V);\n}\n</code></pre>\n"}, {"tags": ["oop", "design-patterns", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493397608, "post_id": 43684757, "comment_id": 74416312, "body": "What does <code>Dispatcher</code> even <i>do</i>? The only way I can make sense of this is that you have multiple state machines with different <code>Uid</code>s and the dispatcher picks one to handle each event. Why do you keep all the &quot;used&quot; states in the <code>HashMap</code> -- will a state ever be re-entered? How?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493398131, "post_id": 43684757, "comment_id": 74416571, "body": "All of the pain is because the overall technique is not panic-safe. In-between the time that you&#39;ve moved out the old state and moved in the new state, the program could panic. If it did, the container of the state would be in an unknown condition, which means that running the destructor could have access to memory it shouldn&#39;t; breaking a core component of Rust&#39;s safety."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493399248, "post_id": 43684757, "comment_id": 74417115, "body": "@trentcl Dispatcher is just the normal event queue mechanism. Consider something like mio tokens. So mio will give you the readiness event (readable, writable etc) and the token for which it was invoked. You map that token (Uid here) to your state implementation. There are no &quot;used&quot; states in HashMap. When the state transitions it removes itself - where do you see that in the code ?"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493399406, "post_id": 43684757, "comment_id": 74417200, "body": "@Shepmaster I couldn&#39;t fully grasp what you meant - what dtor will have access to memory it shouldn&#39;t ? Also there is no <code>unsafe</code> code here so what safety has been broken ? Also how do you suggest tackling this problem ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493400967, "post_id": 43684757, "comment_id": 74417937, "body": "The destructor of <code>S0</code> will call the destructor of <code>MOF</code>. If you&#39;ve moved <code>MOF</code> out of <code>S0</code> but not yet replaced it, that destructor <i>would have</i> access to undefined memory. That&#39;s why the compiler disallows it. I&#39;m not saying you <i>have</i> unsafety, just explaining why that field always has to be valid otherwise there would be unsafety. There&#39;s no universal answer. See <a href=\"https://github.com/rust-lang/rfcs/pull/1736\" rel=\"nofollow noreferrer\">the closed RFC for <i>lots</i> of discussion</a>"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493401518, "post_id": 43684757, "comment_id": 74418183, "body": "@Shepmaster Ah i get you now, thought you were saying the code as it is is unsafe. Ok - i would think this state transition pattern with <code>Rc&lt;RefCell</code> is common in single threaded event based mechanisms. So which would be your preferred approach (or if none then what would you replace this way of doing things with)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493402214, "post_id": 43684757, "comment_id": 74418542, "body": "You don&#39;t have any code that removes the old state on transition; I didn&#39;t realize it was supposed to be there."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493402715, "post_id": 43684757, "comment_id": 74418778, "body": "@trentcl Ofcourse it does - it&#39;s not a multimap - just a normal rust std HashMap. Re-read the insert logic in the code - that&#39;s going to displace the previous stuff (that&#39;s what inserts normally do). And in case you missed that logic, the else branch also explicitly calls <code>remove_state</code> which is assumed to be complementary to <code>insert_state</code> which is already coded."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1493413202, "post_id": 43684757, "comment_id": 74423824, "body": "Of course, I overlooked that you&#39;re always re-inserting with the same <code>state_id</code>"}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 1, "last_activity_date": 1493468417, "last_edit_date": 1493468417, "creation_date": 1493467162, "answer_id": 43695438, "question_id": 43684757, "link": "https://stackoverflow.com/questions/43684757/preferable-pattern-for-getting-around-the-moving-out-of-borrowed-self-checker/43695438#43695438", "title": "Preferable pattern for getting around the &quot;moving out of borrowed self&quot; checker", "body": "<blockquote>\n  <ol start=\"5\">\n  <li>Let the function handle_event take self by move as <code>fn handle_event(mut self, ...) -&gt; Option&lt;Self&gt;</code>: Now instead of <code>Rc&lt;RefCell&lt;&gt;&gt;</code> you will need to have <code>Box&lt;State&gt;</code> and move it out each time in the dispatcher and if the return is Some you put it back.</li>\n  </ol>\n</blockquote>\n\n<p>This is what I would do. However, you don't need to switch from <code>Rc</code> to <code>Box</code> if there is only one strong reference: <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html#method.try_unwrap\" rel=\"nofollow noreferrer\"><code>Rc::try_unwrap</code></a> can move out of an <code>Rc</code>.</p>\n\n<p>Here's part of how you might rewrite <code>Dispatcher</code>:</p>\n\n<pre><code>struct Dispatcher {\n    states: HashMap&lt;Uid, Rc&lt;State&gt;&gt;,\n}\nimpl Dispatcher {\n    fn dispatch(&amp;mut self, state_id: Uid, event: Event) {\n        if let Some(state_ref) = self.states.remove(&amp;state_id) {\n            let state = state_ref.try_unwrap()\n                .expect(\"Unique strong reference required\");\n            if let Some(next_state) = state.handle_event(event) {\n                self.states.insert(state_id, next_state);\n            }\n        } else {\n            // handle state_id not found\n        }\n    }\n}\n</code></pre>\n\n<p>(Note: <code>dispatch</code> takes <code>state_id</code> by value. In the original version, this wasn't necessary -- it could have been changed to pass by reference. In this version, it is necessary, since <code>state_id</code> gets passed to <code>HashMap::insert</code>. It looks like <code>Uid</code> is <code>Copy</code> though, so it makes little difference.)</p>\n\n<p>It's not clear whether <code>state_id</code> actually needs to be a member of the struct that implements <code>State</code> anymore, since you don't need it inside <code>handle_event</code> -- all the insertion and removal happens inside <code>impl Dispatcher</code>, which makes sense and reduces coupling between <code>State</code> and <code>Dispatcher</code>.</p>\n\n<pre><code>impl State for S0 {\n    fn handle_event(self, event: Event) -&gt; Option&lt;Rc&lt;State&gt;&gt; {\n        if event == Event::SomeEvent {\n            // Do some work\n            let next_state = Rc::new(S0 {\n                state_id: self.state_id,\n                move_only_field: self.mof,\n            });\n            Some(next_state)\n        } else {\n            // Do some other work\n        }\n    }\n}\n</code></pre>\n\n<p>Now you don't have to handle a weird, should-be-impossible corner case where the Option is None.</p>\n\n<blockquote>\n  <p>This almost feels like a sledgehammer and makes many other idioms impossible, for instance if I wanted to share self further in some registered closure/callback I would normally put a <code>Weak&lt;RefCell&lt;&gt;&gt;</code> previously but now sharing self in callbacks etc is impossible.</p>\n</blockquote>\n\n<p>Because you can move out of an <code>Rc</code> if you have the only strong reference, you don't have to sacrifice this technique.</p>\n\n<p>\"Feels like a sledgehammer\" might be subjective, but to me, what a signature like <code>fn handle_event(mut self, ...) -&gt; Option&lt;Self&gt;</code> does is encode an invariant. With the original version, each <code>impl State for ...</code> had to know when to insert and remove itself from the dispatcher, and whether it did or not was uncheckable. For example, if somewhere deep in the logic you forgot to call <code>dispatcher.insert(state_id, next_state)</code>, the state machine wouldn't transition, and might get stuck or worse. When <code>handle_event</code> takes <code>self</code> by-value, that's not possible anymore -- you <em>have</em> to return the next state, or the code simply won't compile.</p>\n\n<p>(Aside: both the original version and mine do at least two hashtable lookups each time <code>dispatch</code> is called: once to get the current state, and again to insert the new state. If you wanted to get rid of the second lookup, you could combine approaches: store <code>Option&lt;Rc&lt;State&gt;&gt;</code> in the <code>HashMap</code>, and <code>take</code> from the <code>Option</code> instead of removing it from the map entirely.)</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1493468417, "creation_date": 1493396382, "last_edit_date": 1493397740, "question_id": 43684757, "link": "https://stackoverflow.com/questions/43684757/preferable-pattern-for-getting-around-the-moving-out-of-borrowed-self-checker", "title": "Preferable pattern for getting around the &quot;moving out of borrowed self&quot; checker", "body": "<p>Consider the pattern where there are several states registered with a dispatcher and each state knows what state to transition to when it receives an appropriate event. This is a simple state transition pattern.</p>\n\n<pre><code>struct Dispatcher {\n    states: HashMap&lt;Uid, Rc&lt;RefCell&lt;State&gt;&gt;&gt;,\n}\nimpl Dispatcher {\n    pub fn insert_state(&amp;mut self, state_id: Uid, state: Rc&lt;RefCell&lt;State&gt;&gt;) -&gt; Option&lt;Rc&lt;RefCell&lt;State&gt;&gt;&gt; {\n        self.states.insert(state_id, state)\n    }\n    fn dispatch(&amp;mut self, state_id: Uid, event: Event) {\n        if let Some(mut state) = states.get_mut(&amp;state_id).cloned() {\n            state.handle_event(self, event);\n        }\n    }\n}\n\ntrait State {\n    fn handle_event(&amp;mut self, &amp;mut Dispatcher, Event);\n}\n\nstruct S0 {\n    state_id: Uid,\n    move_only_field: Option&lt;MOF&gt;,\n    // This is pattern that concerns me.\n}\nimpl State for S0 {\n    fn handle_event(&amp;mut self, dispatcher: &amp;mut Dispatcher, event: Event) {\n        if event == Event::SomeEvent {\n            // Do some work\n            if let Some(mof) = self.mof.take() {\n                let next_state = Rc::new(RefCell::new(S0 {\n                    state_id: self.state_id,\n                    move_only_field: mof,\n                }));\n                let _ = dispatcher.insert(self.state_id, next_state);\n            } else {\n                // log an error: BUGGY Logic somewhere\n                let _ = dispatcher.remove_state(&amp;self.state_id);\n            }\n        } else {\n            // Do some other work, maybe transition to State S2 etc.\n        }\n    }\n}\n\nstruct S1 {\n    state_id: Uid,\n    move_only_field: MOF,\n}\nimpl State for S1 {\n    fn handle_event(&amp;mut self, dispatcher: &amp;mut Dispatcher, event: Event) {\n        // Do some work, maybe transition to State S2/S3/S4 etc.\n    }\n}\n</code></pre>\n\n<p>With reference to the inline comment above saying:</p>\n\n<pre><code>// This is pattern that concerns me.\n</code></pre>\n\n<p><code>S0::move_only_field</code> needs to be an <code>Option</code> in this pattern because <code>self</code> is borrowed in <code>handle_event</code>, but I am not sure that this is best way to approach it.</p>\n\n<p>Here are the ways I can think of with demerits of each one:</p>\n\n<ol>\n<li>Put it into an <code>Option</code> as I have done: this feels hacky and every time I need\nto check the invariant that the <code>Option</code> is always <code>Some</code> otherwise\n<code>panic!</code> or make it a NOP with <code>if let Some() =</code> and ignore\nthe else clause, but this causes code-bloat. Doing an <code>unwrap</code>\nor bloating the code with <code>if let Some()</code> feels a bit off.</li>\n<li>Get it into a shared ownership <code>Rc&lt;RefCell&lt;&gt;&gt;</code>: Need to heap allocate\nall such variables or construct another struct called <code>Inner</code> or\nsomething that has all these non-clonable types and put that into an\n<code>Rc&lt;RefCell&lt;&gt;&gt;</code>.</li>\n<li>Pass stuff back to <code>Dispatcher</code> indicating it to basically remove us\nfrom the map and then move things out of us to the next <code>State</code> which\nwill also be indicated via our return value: Too much coupling,\nbreaks OOP, does not scale as <code>Dispatcher</code> needs to know about all the\n<code>State</code>s and needs frequent updating. I don't think this is a good\nparadigm, but could be wrong.</li>\n<li>Implement <code>Default</code> for MOF above: Now we can <code>mem::replace</code> it with\nthe default while moving out the old value. The burden of panicking OR\nreturning an error OR doing a NOP is now hidden in implementation of\n<code>MOF</code>. The problem here is we don't always have the access to MOF\ntype and for those that we do, it again takes the point of bloat\nfrom user code to the code of MOF.</li>\n<li>Let the function <code>handle_event</code> take <code>self</code> by move as <code>fn handle_event(mut self, ...) -&gt; Option&lt;Self&gt;</code>: Now instead of <code>Rc&lt;RefCell&lt;&gt;&gt;</code> you will need to have <code>Box&lt;State&gt;</code> and move it out each time in the dispatcher and if the return is <code>Some</code> you put it back. This almost feels like a sledgehammer and makes many other idioms impossible, for instance if I wanted to share self further in some registered closure/callback I would normally put a <code>Weak&lt;RefCell&lt;&gt;&gt;</code> previously but now sharing self in callbacks etc is impossible.</li>\n</ol>\n\n<p>Are there any other options? Is there any that is considered the \"<strong><em>most idiomatic</em></strong>\" way of doing this in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1493387277, "post_id": 43681409, "comment_id": 74409722, "body": "It happens because you have already lost your <code>vacant</code> object by calling <code>insert</code> method and it consumes <code>Self</code>. What about getting <code>key</code> at first and then inserting the value? And I don&#39;t quite understand why do you need it? You already have <code>k</code> which is the key."}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1493387468, "post_id": 43681409, "comment_id": 74409862, "body": "Not work either. The original <code>k</code> was consumed by <code>entry</code>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1493388745, "last_edit_date": 1495535482, "creation_date": 1493387884, "answer_id": 43682013, "question_id": 43681409, "link": "https://stackoverflow.com/questions/43681409/how-can-i-get-a-reference-to-the-key-and-value-immediately-after-inserting-into/43682013#43682013", "title": "How can I get a reference to the key and value immediately after inserting into a `HashMap`?", "body": "<p>TL;DR: You cannot (right now?)</p>\n\n<hr>\n\n<p>The compiler <em>tells you why it doesn't work</em>. Don't hesitate to read Rust compiler messages; they aren't scary and a lot of effort has gone into them!</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `vacant`\n  --&gt; src/main.rs:16:21\n   |\n15 |             let v = vacant.insert(v);\n   |                     ------ value moved here\n16 |             let k = vacant.key();\n   |                     ^^^^^^ value used here after move\n   |\n   = note: move occurs because `vacant` has type `std::collections::hash_map::VacantEntry&lt;'_, std::string::String, std::string::String&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>This is just normal Rust code. <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.VacantEntry.html#method.insert\" rel=\"nofollow noreferrer\"><code>VacantEntry::insert</code></a> consumes <code>self</code>by value, returning a reference to the inserted value: </p>\n\n<pre><code>fn insert(self, value: V) -&gt; &amp;'a mut V\n</code></pre>\n\n<p>There are <a href=\"https://stackoverflow.com/search?q=%5Brust%5D+use+of+moved+value+is%3Aq\">over 100 other question/answer pairs</a> that ask about this error message, so I'll assume you've read enough of them to understand the problem; that's why we answer questions on Stack Overflow after all!</p>\n\n<hr>\n\n<p>So <em>why</em> is it this way? That's tougher to answer. When you insert into a <code>HashMap</code>, it takes ownership of the key and the value. When you use the <code>entry</code> API, there's an intermediate step - you've given ownership of the key to the entry. The entry <em>also</em> has a mutable reference to the <code>HashMap</code>; a \"bookmark\" of where the value is.</p>\n\n<p>When the value is missing and then you insert a value, the key is transferred out of the entry and into the <code>HashMap</code>. This means that the reference to the key inside the entry would be invalidated. That's why you can't reorder the two lines.</p>\n\n<p>However, thinking about it a bit deeper, the <em>value</em> returned from <code>insert</code> refers to the underlying <code>HashMap</code>, after the value has been inserted. I can't see any reason preventing a function from being added that returns a reference to the key and the value. However, such a function doesn't exist now.</p>\n\n<p>See also <a href=\"https://stackoverflow.com/q/32401857/155423\">How can I keep a reference to a key after it has been inserted into a HashMap?</a></p>\n\n<hr>\n\n<p>I'm pretty sure in <em>this</em> case you don't need the functionality though.</p>\n\n<p>If you want to call it for the <em>new</em> value, just do all of this before the insertion:</p>\n\n<pre><code>hook(&amp;k, &amp;v);\na.insert(k, v);\n</code></pre>\n\n<p>If you want to do it only for the old value, doing nothing when there wasn't previously a value, you can:</p>\n\n<pre><code>Occupied(mut occupied) =&gt; {\n    let old = occupied.insert(v);\n    hook(occupied.key(), &amp;old);\n    Some(old)\n}\n</code></pre>\n\n<p>If you want to call the hook with the <strong>old</strong> value if there was one and the <strong>new</strong> value if inserting (which seems inconsistent), you can call it <em>before</em> adding, the <code>hook</code> function will be none the wiser as the arguments are just references:</p>\n\n<pre><code>Vacant(vacant) =&gt; {\n    hook(vacant.key(), &amp;v);\n    let v = vacant.insert(v);\n    None\n}\n</code></pre>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1065, "favorite_count": 1, "accepted_answer_id": 43682013, "answer_count": 1, "score": 5, "last_activity_date": 1493389182, "creation_date": 1493386105, "last_edit_date": 1493389182, "question_id": 43681409, "link": "https://stackoverflow.com/questions/43681409/how-can-i-get-a-reference-to-the-key-and-value-immediately-after-inserting-into", "title": "How can I get a reference to the key and value immediately after inserting into a `HashMap`?", "body": "<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry::*;\n\nfn hook(k: &amp;str, v: &amp;str) {}\n\nfn tt(k: String, v: String) -&gt; Option&lt;String&gt; {\n    let mut a: HashMap&lt;String, String&gt; = HashMap::new();\n    match a.entry(k) {\n        Occupied(mut occupied) =&gt; {\n            let old = occupied.insert(v);\n            //hook(&amp;k, &amp;old);\n            Some(old)\n        }\n        Vacant(vacant) =&gt; {\n            let v = vacant.insert(v);\n            let k = vacant.key(); // Why doesn't it work?\n            //hook(&amp;k, v);\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>I would like to call <code>hook</code> immediately after a key is inserted into the <code>HashMap</code>. It seems I have to use <code>Entry</code>. However, I am unable to call <code>vacant.key()</code> right after <code>vacant.insert</code>.</p>\n"}, {"tags": ["rust", "language-lawyer", "grammar", "chomsky-hierarchy"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1493395667, "post_id": 43677722, "comment_id": 74415112, "body": "Given that an <a href=\"https://github.com/jbclements/rust-antlr\" rel=\"nofollow noreferrer\">Antlr grammar exists for Rust</a> and that <a href=\"http://stackoverflow.com/a/35631300/493729\">Antlr is restricted to context-free grammars</a>, it looks like Rust&#39;s grammar has to be context-free."}, {"owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1493397796, "post_id": 43677722, "comment_id": 74416409, "body": "@peter (1) as ira baxter says in your link, ANTLR allows arbitrary predicates in a production, so it most certainly can recognize some non-CF grammars. (2) The fact that someone writes a file with the name <code>rust.g4</code> is not prima facie evidence that its contents actually correspond to the language commonly known as rust. Particularly when the file is 4 years old, and the language is infamous for its repeated syntax changes."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1493397831, "post_id": 43677722, "comment_id": 74416439, "body": "Except for the license, this project has not been updated in 4 years. Rust changed a lot before 1.0, I don&#39;t think this is a good enough argument :]"}], "answers": [{"tags": [], "owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "is_accepted": true, "score": 4, "last_activity_date": 1493452288, "creation_date": 1493452288, "answer_id": 43693194, "question_id": 43677722, "link": "https://stackoverflow.com/questions/43677722/is-rusts-syntactical-grammar-context-free-or-context-sensitive/43693194#43693194", "title": "Is Rust&#39;s syntactical grammar context-free or context-sensitive?", "body": "<p>Rust includes a macro processor, whose operation is highly context-sensitive.</p>\n\n<p>You could attempt to skate around this issue by only doing syntactic analysis up to but not including macro expansion -- possible, but not particularly useful -- or by assuming that the macro expansion is done by some intermediate tool which is given a free pass to allow it to be Turing complete.</p>\n\n<p>But I'm inclined to say that it simply means that the Rust language is recursively enumerable.</p>\n\n<p>There are a number of restrictions on the validity of macro definitions which probably make the language (at least) context-sensitive, even if you settle for not performing the macro expansions as part of syntactic analysis.</p>\n\n<p>This doesn't mean that a context-free grammar cannot be useful as part of the syntactic analysis of Rust. It's probably essential, and it could even be useful to use a parser generator such as bison or Antlr (and examples of both exist). Like most programming languages, there is a simple superset of Rust which is context-free, and which can be usefully analysed with context-free grammar tools; however, in the end there are texts which will need to be rejected at compile-time as invalid even though they are part of the CF superset.</p>\n"}, {"tags": [], "owner": {"reputation": 292, "user_id": 5603346, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aa59f395534522ac7ab21e34d75e2852?s=128&d=identicon&r=PG&f=1", "display_name": "TheRobotCarlson", "link": "https://stackoverflow.com/users/5603346/therobotcarlson"}, "is_accepted": false, "score": 2, "last_activity_date": 1561870082, "creation_date": 1561870082, "answer_id": 56822459, "question_id": 43677722, "link": "https://stackoverflow.com/questions/43677722/is-rusts-syntactical-grammar-context-free-or-context-sensitive/56822459#56822459", "title": "Is Rust&#39;s syntactical grammar context-free or context-sensitive?", "body": "<p>Answer straight from the source code for <a href=\"https://github.com/rust-lang/rust/blob/master/src/grammar/raw-string-literal-ambiguity.md\" rel=\"nofollow noreferrer\">Rust</a>: </p>\n\n<blockquote>\n  <p>Rust's lexical grammar is not context-free. Raw string literals are\n  the source of the problem. Informally, a raw string literal is an r,\n  followed by N hashes (where N can be zero), a quote, any characters,\n  then a quote followed by N hashes. Critically, once inside the first\n  pair of quotes, another quote cannot be followed by N consecutive\n  hashes. e.g. r###\"\"###\"### is invalid.</p>\n</blockquote>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 836, "favorite_count": 0, "accepted_answer_id": 43693194, "answer_count": 2, "score": 4, "last_activity_date": 1561870082, "creation_date": 1493374393, "last_edit_date": 1504446372, "question_id": 43677722, "link": "https://stackoverflow.com/questions/43677722/is-rusts-syntactical-grammar-context-free-or-context-sensitive", "title": "Is Rust&#39;s syntactical grammar context-free or context-sensitive?", "body": "<p>The syntactical grammar of hardly any programming language is regular, as they allow arbitrarily deeply nested parenthesis. Rust does, too:</p>\n\n<pre><code>let x = ((((()))));\n</code></pre>\n\n<p>But is Rust's syntactical grammar at least context-free? If not, what element makes the grammar context-sensitive? Or is the grammar even recursively enumerable, like <a href=\"https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive\">C++'s syntactical grammar</a>?</p>\n\n<hr>\n\n<p><em>Related</em>: <a href=\"https://stackoverflow.com/questions/43677628/is-rusts-lexical-grammar-regular-context-free-or-context-sensitive\">Is Rust&#39;s lexical grammar regular, context-free or context-sensitive?</a></p>\n"}, {"tags": ["rust", "language-lawyer", "grammar", "chomsky-hierarchy"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1493388243, "post_id": 43677628, "comment_id": 74410350, "body": "<a href=\"https://github.com/rust-lang/rust/blob/master/src/grammar/raw-string-literal-ambiguity.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/grammar/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1493466183, "post_id": 43693150, "comment_id": 74435454, "body": "&quot;<i>for any <code>j\u2260k</code></i>&quot; -- I think you meant to say <code>j &lt; k</code>? At least, <a href=\"https://play.rust-lang.org/?gist=44d45d331826b253609a4a7ffcff2884&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a> doesn&#39;t compile. (apart from that: thanks a lot for the answer!)"}, {"owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1493473522, "post_id": 43693150, "comment_id": 74437566, "body": "@lukas: thanks for the experiment; I changed it to <code>&lt;</code>. One of the difficulties answering questions like this is that Rust has no formal specification (and the informal specification often leaves out details). So you never know whether the result of an experiment reflects a design decision or a bug in the parsing code. But this one makes some sense, so I&#39;ll take it as a decision."}, {"owner": {"reputation": 11117, "user_id": 1554020, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/49118fbd7e64a00bc99b19d41e5e28e0?s=128&d=identicon&r=PG", "display_name": "yuri kilochek", "link": "https://stackoverflow.com/users/1554020/yuri-kilochek"}, "edited": false, "score": 0, "creation_date": 1504447962, "post_id": 43693150, "comment_id": 79007960, "body": "C++ raw string literals are actually regular, because <a href=\"http://eel.is/c++draft/lex.string#2\" rel=\"nofollow noreferrer\">the delimiter length is limited to at most 16 charaters</a>."}, {"owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "reply_to_user": {"reputation": 11117, "user_id": 1554020, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/49118fbd7e64a00bc99b19d41e5e28e0?s=128&d=identicon&r=PG", "display_name": "yuri kilochek", "link": "https://stackoverflow.com/users/1554020/yuri-kilochek"}, "edited": false, "score": 1, "creation_date": 1504456793, "post_id": 43693150, "comment_id": 79010607, "body": "@yuri: indeed, although I wouldn&#39;t recommend trying to construct the FSA. :-) I&#39;ll fix the text."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1530033371, "post_id": 43693150, "comment_id": 89087702, "body": "I guess the number of hashes in Rust&#39;s raw strings <a href=\"https://github.com/rust-lang/rust/pull/50296\" rel=\"nofollow noreferrer\">has now been limited to 2^16</a>. So I guess the grammar is regular now. @rici How many regex patterns do we need for this? ;-)"}, {"owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1530035163, "post_id": 43693150, "comment_id": 89088611, "body": "@lukas: just one but it will have a lot of alternatives in it -- about 2**17 -- and probably more states than you want to think about. But it&#39;s true that it becomes finite."}], "tags": [], "owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "is_accepted": true, "score": 9, "last_activity_date": 1504498781, "last_edit_date": 1592644375, "creation_date": 1493451984, "answer_id": 43693150, "question_id": 43677628, "link": "https://stackoverflow.com/questions/43677628/is-rusts-lexical-grammar-regular-context-free-or-context-sensitive/43693150#43693150", "title": "Is Rust&#39;s lexical grammar regular, context-free or context-sensitive?", "body": "<p>The raw string literal syntax is not context-free.</p>\n<p>If you think of it as a string surrounded by <code>r#<sup>k</sup>&quot;\u2026&quot;#<sup>k</sup></code> (using the superscript <code>k</code> as a count operator), then you might expect it to be context-free:</p>\n<pre><code>raw_string_literal\n   : 'r' delimited_quoted_string\ndelimited_quoted_string\n   : quoted_string\n   | '#' delimited_quoted_string '#'\n</code></pre>\n<p>But that is not actually the correct syntax, because the <code>quoted_string</code> is not allowed to contain <code>&quot;#<sup>k</sup></code> although it can contain <code>&quot;#<sup>j</sup></code> for any <code>j&lt;k</code></p>\n<p>Excluding the terminating sequence without excluding any other similar sequence of a different length cannot be accomplished with a context-free grammar because it involves <em>three</em> (or more) uses of the <code>k</code>-repetition in a single production, and stack automata can only handle two. (The proof that the grammar is not context-free is surprisingly complicated, so I'm not going to attempt it here for lack of MathJax. The best proof I could come up with uses Ogden's lemma and the uncommonly cited (but highly useful) property that context-free grammars are closed under the application of a finite-state transducer.)</p>\n<p>C++ raw string literals are also context-sensitive [or would be if the delimiter length were not limited, see Note 1], and pretty well all whitespace-sensitive languages (like Python and Haskell) are context-sensitive. None of these lexical analysis tasks is particularly complicated so the context-sensitivity is not a huge problem, although most standard scanner generators don't provide as much assistance as one might like. But there it is.</p>\n<p>Rust's lexical grammar offers a couple of other complications for a scanner generator. One issue is the double meaning of <kbd>'</kbd>, which is used both to create character literals and to mark lifetime variables and loop labels. Apparently it is possible to determine which of these applies by considering the previously recognized token. That could be solved with a lexical scanner which is capable of generating two consecutive tokens from a single pattern, or it could be accomplished with a scannerless parser; the latter solution would be context-free but not regular. (C++'s use of <kbd>'</kbd> as part of numeric literals does not cause the same problem; the C++ tokens can be recognized with regular expressions, because the <kbd>'</kbd> can not be used as the first character of a numeric literal.)</p>\n<p>Another slightly context-dependent lexical issue is that the range operator, <code>..</code>, takes precedence over floating point values, so that <code>2..3</code> must be lexically analysed as three tokens: <kbd>2</kbd> <kbd>..</kbd> <kbd>3</kbd>, rather than two floating point numbers <kbd>2.</kbd> <kbd>.3</kbd>, which is how it would be analysed in most languages which use the maximal munch rule. Again, this might or might not be considered a deviation from regular expression tokenisation, since it depends on trailing context. But since the lookahead is at most one character, it could certainly be implemented with a DFA.</p>\n<h3>Postscript</h3>\n<p>On reflection, I am not sure that it is meaningful to ask about a &quot;lexical grammar&quot;. Or, at least, it is ambiguous: the &quot;lexical grammar&quot; might refer to the combined grammar for all of the languages &quot;tokens&quot;, or it might refer to the act of separating a sentence into tokens. The latter is really a transducer, not a parser, and suggests the question of whether the language can be tokenised with a finite-state transducer. (The answer, again, is no, because raw strings cannot be recognized by a FSA, or even a PDA.)</p>\n<p>Recognizing individual tokens and tokenising an input stream are not necessarily equivalent. It is possible to imagine a language in which the individual tokens are all recognized by regular expressions but an input stream cannot be handled with a finite-state transducer. That will happen if there are two regular expressions <code>T</code> and <code>U</code> such that some string matching <code>T</code> is the longest token which is a strict prefix of an infinite set of strings in <code>U</code>. As a simple (and meaningless) example, take a language with tokens:</p>\n<pre><code>a\na*b\n</code></pre>\n<p>Both of these tokens are clearly regular, but the input stream cannot be tokenized with a finite state transducer because it must examine any sequence of <code>a</code>s (of any length) before deciding whether to fallback to the first <code>a</code> or to accept the token consisting of all the <code>a</code>s and the following <code>b</code> (if present).</p>\n<p>Few languages show this pathology (and, as far as I know, Rust is not one of them), but it is technically present in some languages in which keywords are multiword phrases.</p>\n<h3>Notes</h3>\n<ol>\n<li>Actually, C++ raw string literals are, in a technical sense, regular (and therefore context free) because their delimiters are limited to strings of maximum length 16 drawn from an alphabet of 88 characters. That means that it is (theoretically) possible to create a regular expression consisting of 13,082,362,351,752,551,144,309,757,252,761 patterns, each matching a different possible raw string delimiter.</li>\n</ol>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 926, "favorite_count": 0, "accepted_answer_id": 43693150, "answer_count": 1, "score": 6, "last_activity_date": 1504498781, "creation_date": 1493374153, "last_edit_date": 1504446388, "question_id": 43677628, "link": "https://stackoverflow.com/questions/43677628/is-rusts-lexical-grammar-regular-context-free-or-context-sensitive", "title": "Is Rust&#39;s lexical grammar regular, context-free or context-sensitive?", "body": "<p>The lexical grammar of most programming languages is fairly non-expressive in order to quickly lex it. I'm not sure what category Rust's lexical grammar belongs to. Most of it seems regular, probably with the exception of <a href=\"https://doc.rust-lang.org/reference/tokens.html#raw-string-literals\" rel=\"nofollow noreferrer\">raw string literals</a>:</p>\n\n<pre><code>let s = r##\"Hi lovely \"\\\" and \"#\", welcome to Rust\"##;\nprintln!(\"{}\", s);\n</code></pre>\n\n<p>Which prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hi lovely \"\\\" and \"#\", welcome to Rust\n</code></pre>\n\n<p>As we can add arbitrarily many <code>#</code>, it seems like it can't be regular, right? But is the grammar  at least context-free? Or is there something non-context free about Rust's <em>lexical</em> grammar?</p>\n\n<hr>\n\n<p><em>Related</em>: <a href=\"https://stackoverflow.com/questions/43677722/is-rusts-syntactical-grammar-context-free-or-context-sensitive\">Is Rust&#39;s syntactical grammar context-free or context-sensitive?</a></p>\n"}, {"tags": ["struct", "rust", "memory-alignment", "memory-layout"], "answers": [{"comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1493384512, "post_id": 43678175, "comment_id": 74407861, "body": "Possibly worth noting that while memory layout optimization has always been theoretically possible, it wasn&#39;t actually implemented until this year (thanks to <a href=\"http://camlorn.net/posts/April%202017/rust-struct-field-reordering.html\" rel=\"nofollow noreferrer\">some really awesome work by Austin Hicks</a>)."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1493472428, "post_id": 43678175, "comment_id": 74437258, "body": "Also worth noting that the size of a struct will always be a multiple of its alignment, so that sequentially laid out elements of an array stay aligned. So even if you put the char first and the u8 second, you&#39;d still have padding. Rearranging elements is interesting if you have multiple u8s in the struct; the compiler can group them together."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1497018720, "last_edit_date": 1497018720, "creation_date": 1493375836, "answer_id": 43678175, "question_id": 43676928, "link": "https://stackoverflow.com/questions/43676928/why-is-size-ofmystruct-not-equal-to-the-sum-of-the-sizes-of-its-fields/43678175#43678175", "title": "Why is size_of::&lt;MyStruct&gt;() not equal to the sum of the sizes of its fields?", "body": "<p>The difference is due to <a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment#Data_structure_padding\" rel=\"nofollow noreferrer\"><em>padding</em></a> in order to satisfy a types <a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment\" rel=\"nofollow noreferrer\"><em>alignment</em></a> requirements. Values of specific types  don't want to live at arbitrary addresses, but only at <strong>addresses divisible by the types' <em>alignment</em></strong>. For example, take <code>char</code>: it has an alignment of <code>4</code> so it only wants to live at addresses divisible by 4, like <code>0x4</code>, <code>0x8</code> or <code>0x7ffd463761bc</code>, and not at addresses like <code>0x6</code> or <code>0x7ffd463761bd</code>.</p>\n\n<p>The alignment of a type is platform dependent, but it's usually true that types of size <code>1</code>, <code>2</code> or <code>4</code> have an alignment of <code>1</code>, <code>2</code> and <code>4</code> respectively, too. An alignment of <code>1</code> means that a value of that type feels comfortable at any address (since any address is divisible by <code>1</code>).</p>\n\n<p>So what about your struct now? In Rust,</p>\n\n<blockquote>\n  <p>composite structures will have an alignment equal to the maximum of their fields' alignment.</p>\n</blockquote>\n\n<p>This means that the alignment of your <code>MyStruct</code> type is also <code>4</code>. We can check that with <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.align_of.html\" rel=\"nofollow noreferrer\"><code>mem::align_of()</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.align_of_val.html\" rel=\"nofollow noreferrer\"><code>mem::align_of_val()</code></a>:</p>\n\n<pre><code>// prints \"4\"\nprintln!(\"{}\", mem::align_of::&lt;MyStruct&gt;());\n</code></pre>\n\n<p>Now suppose a value of your struct lives at <code>0x4</code> (which satisfies the struct's direct alignment requirements):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x4:   [obj.foo]\n0x5:   [obj.bar's first byte]\n0x6:   [obj.bar's second byte]\n0x7:   [obj.bar's third byte]\n0x8:   [obj.bar's fourth byte]\n</code></pre>\n\n<p><strong>Oops</strong>, <code>obj.bar</code> now lives at <code>0x5</code>, although its alignment is 4! That's bad! </p>\n\n<p>To fix this, the Rust compiler inserts so called <em>padding</em> -- unused bytes -- into the struct. In memory it now looks like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x4:   [obj.foo]\n0x5:   padding (unused)\n0x6:   padding (unused)\n0x7:   padding (unused)\n0x8:   [obj.bar's first byte]\n0x9:   [obj.bar's second byte]\n0xA:   [obj.bar's third byte]\n0xB:   [obj.bar's fourth byte]\n</code></pre>\n\n<p>For this reason, the size of <code>MyStruct</code> is 8, because the compiler added 3 padding bytes. Now everything is fine again! </p>\n\n<p>... except maybe the wasted space? Indeed, this is unfortunate. A solution would be to swap the struct's fields. Fortunately for this purpose, the memory layout of a struct in Rust is unspecified, unlike in C or C++. In particular, the Rust compiler is allowed to change the order of fields. You cannot assume that <code>obj.foo</code> has a lower address than <code>obj.bar</code>! </p>\n\n<p>And since <strong>Rust 1.18</strong>, this optimization is performed by the compiler.</p>\n\n<hr>\n\n<p>But even with a Rust compiler newer or equal to 1.18, your struct is still 8 bytes in size. Why?</p>\n\n<p>There is another rule for memory layout: a struct's size must always be a multiple of its alignment. This is useful to be able to densely layout those structs in an array. Suppose the compiler will reorder our struct fields and the memory layout looks like this:</p>\n\n<pre><code>0x4:   [obj.bar's first byte]\n0x5:   [obj.bar's second byte]\n0x6:   [obj.bar's third byte]\n0x7:   [obj.bar's fourth byte]\n0x8:   [obj.foo]\n</code></pre>\n\n<p>Looks like 5 bytes, right? Nope! Imagine having an array <code>[MyStruct]</code>. In an array all elements are next to each other in the memory:</p>\n\n<pre><code>0x4:   [[0].bar's first byte]\n0x5:   [[0].bar's second byte]\n0x6:   [[0].bar's third byte]\n0x7:   [[0].bar's fourth byte]\n0x8:   [[0].foo]\n0x9:   [[1].bar's first byte]\n0xA:   [[1].bar's second byte]\n0xB:   [[1].bar's third byte]\n0xC:   [[1].bar's fourth byte]\n0xD:   [[1].foo]\n0xE:   ...\n</code></pre>\n\n<p>Oops, now the array's second element's <code>bar</code> starts at <code>0x9</code>! So in fact, the arrays size needs to be a multiple of its alignment. Thus, our memory looks like this:</p>\n\n<pre><code>0x4:   [[0].bar's first byte]\n0x5:   [[0].bar's second byte]\n0x6:   [[0].bar's third byte]\n0x7:   [[0].bar's fourth byte]\n0x8:   [[0].foo]\n0x9:   [[0]'s padding byte]\n0xA:   [[0]'s padding byte]\n0xB:   [[0]'s padding byte]\n0xC:   [[1].bar's first byte]\n0xD:   [[1].bar's second byte]\n0xE:   [[1].bar's third byte]\n0xF:   [[1].bar's fourth byte]\n0x10:  [[1].foo]\n0x11:  [[1]'s padding byte]\n0x12:  [[1]'s padding byte]\n0x13:  [[1]'s padding byte]\n0x14:  ...\n</code></pre>\n\n<hr>\n\n<p><em>Related</em>:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nomicon/repr-rust.html\" rel=\"nofollow noreferrer\">Chapter about memory layout in the Rustonomicon</a></li>\n<li><a href=\"https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member\">Similar question on the C++ tag</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1493471825, "last_edit_date": 1493471825, "creation_date": 1493435841, "answer_id": 43691443, "question_id": 43676928, "link": "https://stackoverflow.com/questions/43676928/why-is-size-ofmystruct-not-equal-to-the-sum-of-the-sizes-of-its-fields/43691443#43691443", "title": "Why is size_of::&lt;MyStruct&gt;() not equal to the sum of the sizes of its fields?", "body": "<p>In addition to the default <code>#[repr(Rust)]</code> layout, there are other options available, <a href=\"https://doc.rust-lang.org/nomicon/other-reprs.html\" rel=\"nofollow noreferrer\">as explained in the Rustonomicon</a>.</p>\n\n<p>You can make your representation more tightly packed, using <code>#[repr(packed)]</code>:</p>\n\n<pre><code>#[repr(packed)]\nstruct MyStruct {\n    foo: u8,\n    bar: char,\n}\n</code></pre>\n\n<p>This will align all the fields to the nearest byte, regardless of their preferred alignment. So the output would be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>MyStruct: 5\nobj:      5\nobj.foo:  1\nobj.bar:  4\n</code></pre>\n\n<p>This may be less performant than the default Rust representation and many CPUs just don't support it at all, in particular older CPUs or those on smartphones. There is <a href=\"http://lemire.me/blog/2012/05/31/data-alignment-for-speed-myth-or-reality/\" rel=\"nofollow noreferrer\">evidence</a> that there is little or no performance penalty for at least <em>some</em> use cases on at least <em>some</em> modern CPUs (but you should also read the article's comments, as they contain a lot of counterexamples).</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 0, "accepted_answer_id": 43678175, "answer_count": 2, "score": 3, "last_activity_date": 1551269082, "creation_date": 1493372225, "last_edit_date": 1551269082, "question_id": 43676928, "link": "https://stackoverflow.com/questions/43676928/why-is-size-ofmystruct-not-equal-to-the-sum-of-the-sizes-of-its-fields", "title": "Why is size_of::&lt;MyStruct&gt;() not equal to the sum of the sizes of its fields?", "body": "<p>I tried to measure the size of a struct and its fields (<a href=\"https://play.rust-lang.org/?gist=e0f5e963715939302755d5b92632f587&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>use std::mem;\n\nstruct MyStruct {\n    foo: u8,\n    bar: char,\n}\n\nprintln!(\"MyStruct: {}\", mem::size_of::&lt;MyStruct&gt;());\n\nlet obj = MyStruct { foo: 0, bar: '0' };\nprintln!(\"obj:      {}\", mem::size_of_val(&amp;obj));\nprintln!(\"obj.foo:  {}\", mem::size_of_val(&amp;obj.foo));\nprintln!(\"obj.bar:  {}\", mem::size_of_val(&amp;obj.bar));\n</code></pre>\n\n<p>This program prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>MyStruct: 8\nobj:      8\nobj.foo:  1\nobj.bar:  4\n</code></pre>\n\n<p>So the size of the struct is bigger than the sum of its field's sizes (which would be <code>5</code>). Why is that?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1493341419, "post_id": 43670027, "comment_id": 74387382, "body": "What does <code>{10,20,10,20}.swap(10, 20)</code> yield? How about <code>{10,10,10,20}.swap(10, 20)</code>"}, {"owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493341830, "post_id": 43670027, "comment_id": 74387481, "body": "This is an exercise on matching inner structs which is all I really care about, but that would keep switching all the matches all the way down."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493341883, "post_id": 43670027, "comment_id": 74387489, "body": "Are you already aware that <code>match</code> takes one and only one arm?"}, {"owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493341948, "post_id": 43670027, "comment_id": 74387506, "body": "I was not, but that is ideal. I am admittedly a complete novice. Actually that is the only thing that makes sense or _ =&gt; would always evaluate."}], "answers": [{"comments": [{"owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "edited": false, "score": 0, "creation_date": 1493343428, "post_id": 43670520, "comment_id": 74387827, "body": "Awesome.  I knew my method was not the way to do it but I was curious if you could do it. I keep thinking of matches as a Switch Case but I guess it is slightly different."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "edited": false, "score": 0, "creation_date": 1493345646, "post_id": 43670520, "comment_id": 74388321, "body": "@MitchellIngram thinking of it as a C <code>switch</code> isn&#39;t a bad first approximation.  However, C&#39;s <code>switch</code> doesn&#39;t allow a <code>case</code> with a dynamic value, so perhaps I&#39;m misunderstanding you?"}, {"owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "edited": false, "score": 0, "creation_date": 1493346669, "post_id": 43670520, "comment_id": 74388555, "body": "Like this: <a href=\"https://www.w3schools.com/code/tryit.asp?filename=FF37RNWZZH5E\" rel=\"nofollow noreferrer\">w3schools.com/code/tryit.asp?filename=FF37RNWZZH5E</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "edited": false, "score": 0, "creation_date": 1493347052, "post_id": 43670520, "comment_id": 74388645, "body": "@MitchellIngram ah, a JS <code>switch</code>; yes, Rust is reasonably different from that because the matched patterns have to be statically checked."}, {"owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "edited": false, "score": 0, "creation_date": 1493347326, "post_id": 43670520, "comment_id": 74388713, "body": "Makes sense, just going to take a bit to get used to. Always excited to learn. Thanks for the help!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1493343205, "creation_date": 1493343205, "answer_id": 43670520, "question_id": 43670027, "link": "https://stackoverflow.com/questions/43670027/pattern-matching-inside-of-struct/43670520#43670520", "title": "Pattern matching inside of struct", "body": "<p>Technically, there is a way to do this with pattern matching, but you'd likely never see this in practice. The missing piece is to use a <a href=\"https://doc.rust-lang.org/beta/book/second-edition/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\" rel=\"nofollow noreferrer\">match guard</a>:</p>\n\n<pre><code>match first {\n    v if v == self.r =&gt; {\n        match second {\n            v if v == self.b =&gt; {\n                self.r = second;\n                self.b = first;\n            },\n            v if v == self.g =&gt; {\n                self.r = second;\n                self.g = first;\n            },\n            v if v == self.a =&gt; {\n                self.r = second;\n                self.a = first;\n            },\n            _ =&gt; {},\n        }\n    },\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>But this isn't really using any useful part of pattern matching; it's just a bunch of if else clauses:</p>\n\n<pre><code>if first == self.r {\n    if second == self.b {\n        self.r = second;\n        self.b = first;\n    } else if second == self.g {\n        self.r = second;\n        self.g = first;\n    } else if second == self.a {\n        self.r = second;\n        self.a = first;\n    }\n}\n</code></pre>\n\n<p>You could choose to shoehorn in some patterns though:</p>\n\n<pre><code>let x1 = (first == self.r, first == self.g, first == self.b, first == self.a);\nlet x2 = (second == self.r, second == self.g, second == self.b, second == self.a);\n\nmatch (x1, x2) {\n    ((true, _, _, _), (_, true, _, _)) =&gt; {\n        self.r = second;\n        self.b = first;\n        }\n    ((true, _, _, _), (_, _, true, _)) =&gt; {\n        self.r = second;\n        self.g = first;\n        }\n    ((true, _, _, _), (_, _, _, true)) =&gt; {\n        self.r = second;\n        self.a = first;\n    }\n    _ =&gt; {}\n}\n</code></pre>\n"}], "owner": {"reputation": 674, "user_id": 866376, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/1175553f0c746b7a2711465792aefe42?s=128&d=identicon&r=PG", "display_name": "Mitchell Ingram", "link": "https://stackoverflow.com/users/866376/mitchell-ingram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 482, "favorite_count": 0, "accepted_answer_id": 43670520, "answer_count": 1, "score": 3, "last_activity_date": 1493343205, "creation_date": 1493339269, "last_edit_date": 1493341332, "question_id": 43670027, "link": "https://stackoverflow.com/questions/43670027/pattern-matching-inside-of-struct", "title": "Pattern matching inside of struct", "body": "<p>I want to use a pattern match to check the inside of a struct without building a new struct. I am trying to swap value of the struct as an exercise (I know <code>mem::swap</code> exists). </p>\n\n<p>Swapping means matching a value of the struct and then swapping the matching values. Like let <code>x = {10,20,30}; x.swap(10,30)</code> should yield <code>{30,20,10}</code>.</p>\n\n<p>What I want to be able to, but can't</p>\n\n<pre><code>#[derive(Debug, Clone, Copy)]\nstruct Color {\n    r: u8,\n    g: u8,\n    b: u8,\n    a: u8,\n}\n\nimpl Color {\n    fn swap(mut self, first: u8, second: u8) -&gt; Color {\n        match (first) {\n            self.r =&gt; {\n                match (second) {\n                    self.b =&gt; {\n                        self.r = second;\n                        self.b = first;\n                    },\n                    self.g =&gt; {\n                        self.r = second;\n                        self.g = first;\n                    },\n                    self.a =&gt; {\n                        self.r = second;\n                        self.a = first;\n                    },\n                    _ =&gt; {},\n                }\n            },\n            _ =&gt; {}\n        }\n\n        Color {\n            r: self.r,\n            g: self.g,\n            b: self.b,\n            a: self.a,\n        }\n    }\n}\nfn main() {\n    let c = Color {\n        r: 255,\n        g: 200,\n        b: 10,\n        a: 30,\n    };\n\n    let color = c.swap(c.r, c.a);\n\n    println!(\"{:?}\", color);\n}\n</code></pre>\n\n<p>The code is not valid, it is what I would like to accomplish. Is there a way to do this? I assume I am way off base on this approach. </p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 1653, "user_id": 12722, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/idSY9.jpg?s=128&g=1", "display_name": "Nissan", "link": "https://stackoverflow.com/users/12722/nissan"}, "edited": false, "score": 1, "creation_date": 1591973072, "post_id": 43667316, "comment_id": 110265710, "body": "One thing I&#39;d add is if you&#39;re creating a subdirectory inside an existing git repository it won&#39;t generate the .gitignore file automatically"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 19, "last_activity_date": 1493325661, "last_edit_date": 1493325661, "creation_date": 1493324775, "answer_id": 43667316, "question_id": 43667176, "link": "https://stackoverflow.com/questions/43667176/what-files-in-a-cargo-project-should-be-in-my-gitignore/43667316#43667316", "title": "What files in a Cargo project should be in my .gitignore?", "body": "<h1>Summary</h1>\n\n<h3><code>.gitignore</code> for library crates</h3>\n\n<pre class=\"lang-none prettyprint-override\"><code># Generated files\n/target/\n\n# The library shouldn't decide about the exact versions of \n# its dependencies, but let the downstream crate decide.\nCargo.lock\n</code></pre>\n\n<h3><code>.gitignore</code> for executable crates</h3>\n\n<pre class=\"lang-none prettyprint-override\"><code># Generated files\n/target/\n</code></pre>\n\n<hr>\n\n<h1>Details</h1>\n\n<p>You need one or two entries in your <code>.gitignore</code>, depending on what kind of crate you're building. The <code>target/</code> folder can be ignore completely regardless of crate type; it only contains generated files (e.g. compile artifacts).</p>\n\n<p>The <code>Cargo.lock</code> file should be included in the repository <em>if</em> you're writing an executable, and should be ignored if you're writing a library. You can read more about this <a href=\"http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries\" rel=\"noreferrer\">in the FAQ</a>. To quote the most important part:</p>\n\n<blockquote>\n  <p>The purpose of a <code>Cargo.lock</code> is to describe the state of the world at the time of a successful build. [...]</p>\n  \n  <p>This property is most desirable from applications and projects which are at the very end of the dependency chain (binaries). As a result, it is recommended that all binaries check in their <code>Cargo.lock</code>.</p>\n  \n  <p>For libraries the situation is somewhat different. [...] If a library ends up being used transitively by several dependencies, it\u2019s likely that just a single copy of the library is desired (based on semver compatibility). If all libraries were to check in their <code>Cargo.lock</code>, then multiple copies of the library would be used, and perhaps even a version conflict.</p>\n</blockquote>\n\n<hr>\n\n<p>Also, please note that <code>cargo new</code> and <code>cargo init</code> <strong>automatically generates a <code>.gitignore</code> file</strong> in the project, unless the parameter <code>--vcs none</code> is passed.</p>\n"}], "owner": {"reputation": 12132, "user_id": 528383, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/XkRKs.png?s=128&g=1", "display_name": "labyrinth", "link": "https://stackoverflow.com/users/528383/labyrinth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4781, "favorite_count": 2, "accepted_answer_id": 43667316, "answer_count": 1, "score": 13, "last_activity_date": 1493325661, "creation_date": 1493324239, "last_edit_date": 1493325394, "question_id": 43667176, "link": "https://stackoverflow.com/questions/43667176/what-files-in-a-cargo-project-should-be-in-my-gitignore", "title": "What files in a Cargo project should be in my .gitignore?", "body": "<p>I created a \"hello world\" Rust app using <code>cargo new</code>. When I executed <code>git status</code> it showed a bunch of files:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>A  rust/welcomec/Cargo.lock\nA  rust/welcomec/Cargo.toml\nA  rust/welcomec/src/main.rs\nA  rust/welcomec/target/debug/.cargo-lock\nA  rust/welcomec/target/debug/.fingerprint/welcomec-2d68725c8fae6fd1/bin-welcome-2d68725c8fae6fd1\nA  rust/welcomec/target/debug/.fingerprint/welcomec-2d68725c8fae6fd1/bin-welcome-2d68725c8fae6fd1.json\nA  rust/welcomec/target/debug/.fingerprint/welcomec-2d68725c8fae6fd1/dep-bin-welcome-2d68725c8fae6fd1\nA  rust/welcomec/target/debug/deps/welcome-2d68725c8fae6fd1\nA  rust/welcomec/target/debug/welcome\nA  rust/welcomec/target/debug/welcome.d\n</code></pre>\n\n<p>Can I safely ignore any of these files and/or directories?</p>\n"}, {"tags": ["function", "rust", "closures", "traits", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493305408, "post_id": 43661262, "comment_id": 74369881, "body": "<code>fn outer&lt;&#39;a, F&gt;(f1: &amp;&#39;a F, f2: &amp;&#39;a F) -&gt; Box&lt;Fn(&amp;Real) -&gt; Real + &#39;a&gt;</code> or <code>fn outer&lt;F&gt;(f1: &amp;&#39;static F, f2: &amp;&#39;static F) -&gt; Box&lt;Fn(&amp;Real) -&gt; Real&gt;</code>"}, {"owner": {"reputation": 31, "user_id": 7931975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/85ac889cf64f4491b485c0096f2acdd6?s=128&d=identicon&r=PG&f=1", "display_name": "Yi Zhang", "link": "https://stackoverflow.com/users/7931975/yi-zhang"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493307957, "post_id": 43661262, "comment_id": 74371650, "body": "Thank you, @Shepmaster. Please close it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493308719, "post_id": 43661262, "comment_id": 74372154, "body": "There&#39;s no reason to close duplicates - they will help future people searching for the same thing find the right answer. Glad you got your problem solved!"}], "owner": {"reputation": 31, "user_id": 7931975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/85ac889cf64f4491b485c0096f2acdd6?s=128&d=identicon&r=PG&f=1", "display_name": "Yi Zhang", "link": "https://stackoverflow.com/users/7931975/yi-zhang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 29, "favorite_count": 0, "closed_date": 1493305118, "answer_count": 0, "score": 1, "last_activity_date": 1493305014, "creation_date": 1493304883, "last_edit_date": 1493305014, "question_id": 43661262, "link": "https://stackoverflow.com/questions/43661262/passing-in-functions-and-returning-a-boxed-closure-in-rust", "closed_reason": "Duplicate", "title": "Passing in functions and returning a boxed closure in Rust", "body": "<p>I'm trying to make this work:</p>\n\n<pre><code>type Real = f64;\n\npub fn outer&lt;F&gt;(f1: &amp;F, f2: &amp;F) -&gt; Box&lt;Fn(&amp;Real) -&gt; Real&gt;\n    where F: Fn(&amp;Real) -&gt; Real\n{\n    Box::new(move |x| f1(x) + f2(x))\n}\n</code></pre>\n\n<p>The compiler keeps complaining:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0477]: the type `[closure@src/main.rs:6:14: 6:36 f1:&amp;F, f2:&amp;F]` does not fulfill the required lifetime\n --&gt; src/main.rs:6:5\n  |\n6 |     Box::new(move |x| f1(x) + f2(x))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: type must outlive the static lifetime\n</code></pre>\n\n<p>How do I get this to work?</p>\n"}, {"tags": ["c++", "templates", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1493304447, "post_id": 43660931, "comment_id": 74369189, "body": "Last I heard, C++ does not have a stable ABI, so you cannot call <i>any</i> C++ library from another language. You need to create a C shim, like projects such as LLVM do."}, {"owner": {"reputation": 480272, "user_id": 1968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fdd630f72eef3790bfb4ef38d08c7f85?s=128&d=identicon&r=PG", "display_name": "Konrad Rudolph", "link": "https://stackoverflow.com/users/1968/konrad-rudolph"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1493304752, "post_id": 43660931, "comment_id": 74369412, "body": "@Shepmaster \u201cC++ does not have a stable ABI\u201d doesn\u2019t mean that individual compilers don\u2019t provide (maybe even stable) ABIs that support templates. It might be entirely possible to call clang-compiled C++ code from Rust, for instance. For now, <code>rustc</code> uses LLVM as the backend so this should in principle be feasible."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1493307006, "post_id": 43660931, "comment_id": 74370986, "body": "You have a totally different problem: even if you get the ABI problems resolved, rustc couldn&#39;t monomorphize a C++ function that isn&#39;t already monomorphized by the C++ compiler without invoking the C++ compiler."}, {"owner": {"reputation": 32027, "user_id": 2104697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/22ba5a5469953d6ab315e6c2c02a1ee2?s=128&d=identicon&r=PG", "display_name": "Guillaume Racicot", "link": "https://stackoverflow.com/users/2104697/guillaume-racicot"}, "edited": false, "score": 1, "creation_date": 1493309120, "post_id": 43660931, "comment_id": 74372436, "body": "templates works by instancing peices of C++ code with different c++ type/values. You&#39;ll literally need a C++ compiler inside your rust compiler and something in between that understands both language so it can translate the code on the fly. Some construct in C++ don&#39;t exist in rust (eg, variadic templates) so there is little change of this happening."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1493309097, "creation_date": 1493309097, "answer_id": 43662740, "question_id": 43660931, "link": "https://stackoverflow.com/questions/43660931/is-it-possible-to-use-a-c-library-from-rust-when-the-library-uses-templates-g/43662740#43662740", "title": "Is it possible to use a C++ library from Rust when the library uses templates (generics)?", "body": "<p><strong>Yes</strong>, but it may not be <em>practical</em>.</p>\n\n<hr>\n\n<p>The D programming language is one of the very few providing some degree of C++ interoperability; you can read more about it on <a href=\"https://dlang.org/spec/cpp_interface.html\" rel=\"noreferrer\">dlang</a>.</p>\n\n<p>Note the limitation for the template section:</p>\n\n<blockquote>\n  <p>Note that all instantiations used in D code must be provided by linking to C++ object code or shared libraries containing the instantiations.</p>\n</blockquote>\n\n<p>which essentially means that you must use C++ code to cause the instantiation of the templates with the right types, and then the D compiler will link against those instantiations.</p>\n\n<hr>\n\n<p>You could do the same for Rust. Without compiler support, this means mangling the names manually. In the FFI section, you will find the <a href=\"https://doc.rust-lang.org/book/ffi.html#linking\" rel=\"noreferrer\">link attribute</a>:</p>\n\n<pre><code>#[link(name = \"snappy\")]\nextern {\n    fn snappy_max_compressed_length(source_length: size_t) -&gt; size_t;\n}\n</code></pre>\n\n<p>which tells the compiler which linked library will provide the symbol, you will also support for <a href=\"https://doc.rust-lang.org/book/ffi.html#foreign-calling-conventions\" rel=\"noreferrer\">various calling conventions</a> and the <a href=\"https://doc.rust-lang.org/book/ffi.html#calling-rust-code-from-c\" rel=\"noreferrer\">no_mangle attribute</a>.</p>\n\n<p>You may need to apply <code>#[allow(non_snake_case)]</code> as appropriate.</p>\n\n<hr>\n\n<p><em>Servo uses <a href=\"https://crates.io/crates/bindgen\" rel=\"noreferrer\">bindgen</a> to generate Rust bindings for C and C++ code; I am unclear on the level of C++ support, and somewhat doubtful that it can handle templates.</em></p>\n"}], "owner": {"reputation": 13608, "user_id": 2587904, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/31ZTY.jpg?s=128&g=1", "display_name": "Georg Heiler", "link": "https://stackoverflow.com/users/2587904/georg-heiler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3377, "favorite_count": 0, "accepted_answer_id": 43662740, "answer_count": 1, "score": 5, "last_activity_date": 1493309097, "creation_date": 1493303997, "last_edit_date": 1493307385, "question_id": 43660931, "link": "https://stackoverflow.com/questions/43660931/is-it-possible-to-use-a-c-library-from-rust-when-the-library-uses-templates-g", "title": "Is it possible to use a C++ library from Rust when the library uses templates (generics)?", "body": "<p>Is it possible to use a C++ library from Rust when the library (e.g. <a href=\"http://www.boost.org\" rel=\"noreferrer\">Boost</a>) uses templates (generics)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1493296266, "post_id": 43657570, "comment_id": 74363036, "body": "<a href=\"https://play.rust-lang.org/?gist=88c575973531ddf9f41d143ef54e3e22&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Compilable example</a> for experimentation."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493300088, "post_id": 43657570, "comment_id": 74365979, "body": "See also <a href=\"http://stackoverflow.com/q/29316582/155423\">Destructuring a vector (without taking a slice)</a> and <a href=\"http://stackoverflow.com/q/32324645/155423\">How can I unpack (destructure) elements from a vector?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1493299099, "post_id": 43658004, "comment_id": 74365210, "body": "Could <code>Vec::drain()</code> be combined with slice destructuring to provide the move+destructure semantics?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1493299778, "post_id": 43658004, "comment_id": 74365723, "body": "@user4815162342 you cannot move out of a slice because the data structure itself has no way to track that there&#39;s a &quot;hole&quot; where it was moved out of. Since <code>drain</code> provides an iterator, you could use it with my answer, if you wanted to keep the <code>Vec</code> around."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493303660, "post_id": 43658004, "comment_id": 74368627, "body": "@Shepmaster I was responding to the part of the answer that says that you can&#39;t move out of a slice. Since <code>drain()</code> is specifically made to move elements out of a collection, I was curious about the possibility of combining <code>drain()</code> and slice destructuring, maybe with an intermediate type sitting between them. Your answer is of course fine, but it doesn&#39;t use slice destructuring."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1493303878, "post_id": 43658004, "comment_id": 74368778, "body": "@user4815162342 gotcha. My point is that <i>slice destructuring</i> works on <i>slices</i> and you can&#39;t move out of slices as they always represent a borrowed value, regardless of which route you&#39;d take to get there. It sounds like you&#39;d need some other destructuring technique (&quot;vec destructuring&quot;?)."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1493314770, "post_id": 43658004, "comment_id": 74376041, "body": "@Shepmaster Yeah, I guess I hoped that <i>slice destructuring</i> was in fact a misnomer and that it can work on more than just slices. :) The name being correct means that you can only ever use <code>ref x</code> inside <code>&amp;[...]</code>, at least for non-<code>Copy</code> types, right?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1493314909, "post_id": 43658004, "comment_id": 74376137, "body": "@user4815162342 that certainly sounds believable. If it&#39;s always <code>ref</code>, that  might fit with the ergonomics initiative <a href=\"https://github.com/rust-lang/rust-roadmap/issues/24\" rel=\"nofollow noreferrer\">around <code>match</code> and references</a>."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 1, "last_activity_date": 1493296901, "last_edit_date": 1493296901, "creation_date": 1493296610, "answer_id": 43658004, "question_id": 43657570, "link": "https://stackoverflow.com/questions/43657570/destructure-a-vector-into-variables-and-give-away-ownership/43658004#43658004", "title": "Destructure a vector into variables and give away ownership?", "body": "<p>Destructuring slices isn't stable, and you can't move out of a slice because it's just a borrow \u2014 if you moved out, what would the <code>Vec</code>'s destructor do?</p>\n\n<p>Mutating the vector is the way to go here:</p>\n\n<pre><code>let mut x = vec![\"a\".to_string(), \"b\".to_string(), \"c\".to_string(), \"d\".to_string()];\nlet foo = Foo {\n    foo4: x.pop().unwrap(),\n    foo3: x.pop().unwrap(),\n    foo2: x.pop().unwrap(),\n    foo1: x.pop().unwrap(),\n};\n\nprintln!(\"{:?}\", foo);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a51433d7c88651be87ec988dcf41587c&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1578074843, "last_edit_date": 1578074843, "creation_date": 1493296628, "answer_id": 43658017, "question_id": 43657570, "link": "https://stackoverflow.com/questions/43657570/destructure-a-vector-into-variables-and-give-away-ownership/43658017#43658017", "title": "Destructure a vector into variables and give away ownership?", "body": "<blockquote>\n  <p>Do I have to copy the strings?</p>\n</blockquote>\n\n<p>Not if you are willing to give up destructuring. I'm a big fan of itertools:</p>\n\n<pre><code>use itertools::Itertools; // 0.8.2\n\nfn main() {\n    let x = vec![\n        \"a\".to_string(),\n        \"b\".to_string(),\n        \"c\".to_string(),\n        \"d\".to_string(),\n    ];\n\n    if let Some((foo1, foo2, foo3, foo4)) = x.into_iter().tuples().next() {\n        let foo = Foo {\n            foo1,\n            foo2,\n            foo3,\n            foo4,\n        };\n    }\n}\n</code></pre>\n\n<p>This transfers ownership of the vector (and thus the members) to an iterator, then the <code>tuples</code> adapter chunks up the values into a tuple. We take the first one of those and construct the value.</p>\n\n<p>You could also use <code>drain</code> if you didn't want to give up ownership of the entire vector:</p>\n\n<pre><code>if let Some((foo1, foo2, foo3, foo4)) = x.drain(..4).tuples().next() {\n</code></pre>\n\n<blockquote>\n  <p>Is there any better way to destructure the vector into <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> as well as transferring the ownership?</p>\n</blockquote>\n\n<p>No, there is no mechanism to take ownership of a part of a <code>Vec</code> without creating another <code>Vec</code> (or another type that has the same limits) except for an iterator.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 845, "favorite_count": 0, "accepted_answer_id": 43658017, "answer_count": 2, "score": 3, "last_activity_date": 1578074843, "creation_date": 1493295390, "last_edit_date": 1493299408, "question_id": 43657570, "link": "https://stackoverflow.com/questions/43657570/destructure-a-vector-into-variables-and-give-away-ownership", "title": "Destructure a vector into variables and give away ownership?", "body": "<p>I have a struct</p>\n\n<pre><code>struct Foo {\n    foo1: String,\n    foo2: String,\n    foo3: String,\n    foo4: String,\n    // ...\n}\n</code></pre>\n\n<p>I would like to create an instance of <code>Foo</code> from a vector.</p>\n\n<pre><code>let x = vec![\"a\".to_string(), \"b\".to_string(), \"c\".to_string(), \"d\".to_string()];\nmatch x.as_slice() {\n    &amp;[ref a, ref b, ref c, ref d] =&gt; {\n        let foo = Foo {\n            foo1: a.to_string(),\n            foo2: b.to_string(),\n            foo3: c.to_string(),\n            foo4: d.to_string(),\n        };\n\n    },\n    _ =&gt; unreachable!(),\n}\n</code></pre>\n\n<p>Do I have to copy the strings? Is there any better way to destructure the vector into <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> as well as transferring the ownership?</p>\n\n<p>Actually, I don't mind <code>x</code> is completely destroyed after the destructuring. So I hope there is a pattern match for vectors apart from slices as well. For now it seems we can only destructure slices.</p>\n"}, {"tags": ["memory", "struct", "rust", "heap-memory"], "answers": [{"comments": [{"owner": {"reputation": 93, "user_id": 1552674, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/616fbf622dc84d86e672c176698dd732?s=128&d=identicon&r=PG", "display_name": "cundd", "link": "https://stackoverflow.com/users/1552674/cundd"}, "edited": false, "score": 0, "creation_date": 1493284418, "post_id": 43652418, "comment_id": 74354359, "body": "Thank you for the answer. I learned a lot. I&#39;m starting with Rust and my workday language is PHP :)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 10, "last_activity_date": 1493281408, "creation_date": 1493281408, "answer_id": 43652418, "question_id": 43651942, "link": "https://stackoverflow.com/questions/43651942/create-a-factory-class-that-returns-an-empty-struct-implementation/43652418#43652418", "title": "Create a factory class that returns an empty-struct implementation", "body": "<blockquote>\n  <p>Since the Formatter implementations are empty structs, allocating heap memory for a <code>Box</code> doesn't make sense.</p>\n</blockquote>\n\n<p>And since it doesn't make any sense, heap memory won't be allocated at all. Let's try it (<a href=\"https://play.rust-lang.org/?gist=45f7ae4c87125f826779293b0f23a667&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>):</p>\n\n<pre><code>// `()` doesn't occupy any space, like e.g. your `JsonFormatter`\nlet b1 = Box::new(());\nlet b2 = Box::new(());\n\nprintln!(\"{:p}\\n{:p}\", &amp;*b1, &amp;*b2);\n</code></pre>\n\n<p>This produces the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x1\n0x1\n</code></pre>\n\n<p>ZSTs (zero sized types) are often treated in a special way. So at least you know you aren't paying for heap allocations here. Note however, that the memory layout of your <code>Box&lt;Formatter&gt;</code> is a fat pointer and looks like this: <code>(*mut Formatter, *mut VTable)</code>. The first pointer always being <code>0x1</code>, the second one pointing to a statically allocated dispatch table which contains function pointer (<a href=\"https://en.wikipedia.org/wiki/Virtual_method_table\" rel=\"noreferrer\">vtable - Wikipedia</a>). This is probably fine in your situation.</p>\n\n<hr>\n\n<p>Another possibility is to create an enum like this:</p>\n\n<pre><code>enum FormatterSd {\n    Json(JsonFormatter),\n    Xml(XmlFormatter),\n}\n</code></pre>\n\n<p>And now you can implement <code>Formatter for FormatterSd</code>; in this implementation you will use simple <code>match</code> blocks to do dispatch. That way you don't need to use <code>Box</code>.</p>\n\n<hr>\n\n<p>Lastly: you don't need to have a factory type! It seems a bit like you are trying to bring ideas from a strongly OO programming language into Rust. Often, this is not the best or most idiomatic solution. For example, there are free functions in Rust. So you can simply write:</p>\n\n<pre><code>fn get_formatter(format: &amp;str) -&gt; Result&lt;Box&lt;Formatter&gt;, Error&gt; {\n    // ...\n}\n</code></pre>\n\n<p>Yes, without the <code>Factory</code> type! Empty types are a lot less common in Rust than empty classes (meaning: without any fields). You can just use free function for this kind of stuff, there is no need to associate it with a type.</p>\n\n<p>And lastly lastly: you don't need to manually obtain a reference from a <code>Box</code>:</p>\n\n<pre><code>let formatter = &amp;*formatter_box as &amp;Formatter;\n</code></pre>\n\n<p>You can simple say <code>formatter_box.format_information(...);</code>, thanks to deref coercions. </p>\n"}], "owner": {"reputation": 93, "user_id": 1552674, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/616fbf622dc84d86e672c176698dd732?s=128&d=identicon&r=PG", "display_name": "cundd", "link": "https://stackoverflow.com/users/1552674/cundd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 43652418, "answer_count": 1, "score": 3, "last_activity_date": 1493281408, "creation_date": 1493280059, "question_id": 43651942, "link": "https://stackoverflow.com/questions/43651942/create-a-factory-class-that-returns-an-empty-struct-implementation", "title": "Create a factory class that returns an empty-struct implementation", "body": "<p>I'd like to create a common interface for formatters, that will take the input and format it according to their purpose.</p>\n\n<p>Currently I'm returning a Box containing the formatter implementation (wrapped into a Result). But I don't think this is the best way to do it. Since the Formatter implementations are empty structs, allocating heap memory for a Box doesn't make sense.</p>\n\n<pre><code>pub trait Formatter {\n    fn format_information(&amp;self, information: Result&lt;Information, Error&gt;) -&gt; Result&lt;String, Error&gt;;\n    fn format_information_collection(&amp;self, information: InformationCollection) -&gt; Result&lt;String, Error&gt;;\n}\n\npub struct JsonFormatter;\nimpl Formatter for JsonFormatter {...}\n\npub struct XmlFormatter;\nimpl Formatter for XmlFormatter {...}\n\n\n// Factory to create a formatter\npub struct Factory;\nimpl Factory {\n    pub fn get_formatter(format: &amp;str) -&gt; Result&lt;Box&lt;Formatter&gt;, Error&gt; {\n        match format {\n            \"json\" =&gt; Ok(Box::new(JsonFormatter {})),\n            \"xml\" =&gt; Ok(Box::new(XmlFormatter {})),\n            _ =&gt; Err(Error::new(format!(\"No formatter found for format {}\", format)))\n        }\n    }\n}\n\n// Use the factory\nlet formatter_box = Factory::get_formatter(format).unwrap();\nlet formatter = &amp;*formatter_box as &amp;Formatter;\n</code></pre>\n\n<p>What's the correct way to do this in Rust?</p>\n"}, {"tags": ["hashmap", "rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "edited": false, "score": 0, "creation_date": 1493273848, "post_id": 43649480, "comment_id": 74347681, "body": "I&#39;m not sure of the end goal here. But you should be able to create a wrapper object and wrap the value returned by <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>get_mut()</code></a>"}, {"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "reply_to_user": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "edited": false, "score": 0, "creation_date": 1493275475, "post_id": 43649480, "comment_id": 74348524, "body": "Well... this is, sort of, what I&#39;m trying to do (<code>Handler</code> is the wrapper object). Problem is again how to release the mutable borrow once you&#39;ve used it to locate the <code>Record</code> that you want to wrap."}, {"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "edited": false, "score": 0, "creation_date": 1493299663, "post_id": 43649480, "comment_id": 74365631, "body": "Sorry, but I do not really follow how the question you reference provide an answer. The mutable borrow <i>is</i> wrapped in a block (that return a mutable reference to a record) but it still does not end the mutable borrow (of the map)."}, {"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "edited": false, "score": 0, "creation_date": 1493299862, "post_id": 43649480, "comment_id": 74365792, "body": "Also, it is hard to split this example up any further since the problem is really about lifetimes. The real question is the last bullet, the first two are just extracting parts of the problem, but I can rewrite the post so that it contain a single question."}, {"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "edited": false, "score": 0, "creation_date": 1493301184, "post_id": 43649480, "comment_id": 74366837, "body": "Rewrote the text and the title. See if you think it is clearer."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1493589315, "post_id": 43649480, "comment_id": 74467502, "body": "What do you need the <code>Map</code> reference for in the handle? Why is returning a reference to the <code>Record</code> not enough?"}, {"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "edited": false, "score": 0, "creation_date": 1493700890, "post_id": 43649480, "comment_id": 74503945, "body": "The example is a simplified version of an Active Record with lazy evaluation. The idea is that we want to populate the record from a backing store only if it is required. Note, however, that this is me trying to push the bounds of the language to develop good strategies and see where the language is lacking. I&#39;m not just looking to solve the current issue."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1493776019, "post_id": 43649480, "comment_id": 74542229, "body": "Lazy evaluation/initialization is a good use case for cells: usually, you want to pretend the object is immutable externally when in fact it has interior mutability."}], "answers": [{"comments": [{"owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "edited": false, "score": 0, "creation_date": 1493581672, "post_id": 43696430, "comment_id": 74465226, "body": "Thanks for the suggestion. Even though hash table lookups are quite fast (compared to other data structures) I don&#39;t find the necessity to perform two lookups to handle quirks of a language a very good solution. I think I am probably missing something, but I think that it should be possible to create some sort of temporary handle in the manner above and capture any misuse of the handle at compile time."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1493588672, "last_edit_date": 1493588672, "creation_date": 1493473745, "answer_id": 43696430, "question_id": 43649480, "link": "https://stackoverflow.com/questions/43649480/enforcing-lifetimes-on-temporary-values-containing-references/43696430#43696430", "title": "Enforcing lifetimes on temporary values containing references", "body": "<p>On this line:</p>\n\n<pre><code>let record = map.entry(key.clone()).or_insert(Record::new(key));\n</code></pre>\n\n<p><code>record</code> is of type <code>&amp;'a mut Record</code>, because <a href=\"https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert\" rel=\"nofollow noreferrer\"><code>or_insert</code></a> returns a mutable reference to the value stored in the <code>HashMap</code>. This keeps the borrow on <code>map</code> active; that's why you get the error.</p>\n\n<p>One solution is to lookup the value using <code>get</code> after the insertion in order to obtain an immutable borrow.</p>\n\n<pre><code>pub fn get_or_insert&lt;'a, S&gt;(map: &amp;'a mut Map, name: S) -&gt; Handle&lt;'a&gt;\n    where S: Into&lt;String&gt;\n{\n    let key = name.into();\n    map.entry(key.clone()).or_insert(Record::new(key.clone()));\n    let record = map.get(&amp;key).unwrap();\n    Handle::new(record, map)\n}\n</code></pre>\n\n<hr>\n\n<p>Note that this still doesn't let you implement <code>Handle::mut_record</code> with the signature you gave; <code>Handle</code> only has immutable references to the map and to the record, and you can't obtain a mutable reference to a record with those.</p>\n"}], "owner": {"reputation": 1565, "user_id": 758801, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/2xIHo.png?s=128&g=1", "display_name": "Mats Kindahl", "link": "https://stackoverflow.com/users/758801/mats-kindahl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1493701743, "creation_date": 1493271859, "last_edit_date": 1495540937, "question_id": 43649480, "link": "https://stackoverflow.com/questions/43649480/enforcing-lifetimes-on-temporary-values-containing-references", "title": "Enforcing lifetimes on temporary values containing references", "body": "<p>I am using <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a> but I'm stumbling over how to \"release\" a mutable borrow of the <code>HashMap</code> and cannot find a good explanation of how to do this.</p>\n\n<p>This is just an example and that the goal is not to \"solve the problem\" but rather to understand how to accomplish this and/or why it should not be done this way.</p>\n\n<p>The example consists of a <code>HashMap</code> storing some simple <code>Record</code>s:</p>\n\n<pre><code>type Map = HashMap&lt;String, Record&gt;;\n\npub struct Record {\n    pub count: u32,\n    pub name: String,\n}\n\nimpl Record {\n    fn new&lt;S: Into&lt;String&gt;&gt;(name: S) -&gt; Record {\n        Record { name: name.into(), count: 0 }\n    }\n\n    pub fn add&lt;'a&gt;(&amp;'a mut self, inc: u32) -&gt; &amp;'a mut Record {\n        self.count += inc;\n        self\n     }\n }\n</code></pre>\n\n<p>The <code>add</code> function is there to have a mutable function on the record but is not the real culprit here.</p>\n\n<p>We now want to implement a function that returns a reference to a <code>Record</code> in the <code>HashMap</code> so that we can modify it in-place. In addition to this, we want to be able to have control over the returned reference so that we can do some side effects (for this example it is sufficient that we assume that we want to print out what is happening, but it could be some other action to handle statistics and/or accessing some other storage or do lazy evaluation). To handle this, we introduce a <code>Handle</code> struct that keeps a reference to the <code>Record</code> as well as a reference to the <code>HashMap</code> that the record is coming from.</p>\n\n<pre><code>pub struct Handle&lt;'a&gt; {\n    map: &amp;'a Map,\n    record: &amp;'a Record,\n}\n\nimpl&lt;'a&gt; Handle&lt;'a&gt; {\n    fn new(record: &amp;'a Record, map: &amp;'a Map) -&gt; Handle&lt;'a&gt; {\n         println!(\"Retrieving record\");\n         Handle { record: record, map: map }\n    }\n\n    fn mut_record(&amp;mut self) -&gt; &amp;mut Record {\n        println!(\"Modifying record\");\n        self.record\n    }\n}\n</code></pre>\n\n<p>Let's assume that we need both references for some reason and note that we are fine with retaining an immutable borrow to the <code>HashMap</code> while the handle is in existence, so no modifications of the <code>HashMap</code> should happen.</p>\n\n<p>The <code>Handle</code> is just temporary and we expect that it can be used roughly like this:</p>\n\n<pre><code>let mut map = HashMap::new();\nlet foo = get_or_insert(&amp;mut map, \"foo\");\nfoo.mut_record().do_something(|record| record.add(3))\n</code></pre>\n\n<p>The first implementation of <code>get_or_insert</code> is this:</p>\n\n<pre><code>pub fn get_or_insert&lt;'a, S&gt;(map: &amp;'a mut Map, name: S) -&gt; Handle&lt;'a&gt;\n    where S: Into&lt;String&gt;\n{\n    let key = name.into();\n    let record = map.entry(key.clone()).or_insert(Record::new(key));\n    Handle::new(record, map)\n}\n</code></pre>\n\n<p>This gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*map` as immutable because it is also borrowed as mutable\n  --&gt; hashmap.rs:65:29\n   |\n64 |         let record = map.entry(key.clone()).or_insert(Record::new(key));\n   |                      --- mutable borrow occurs here\n65 |         Handle::new(record, map)\n   |                             ^^^ immutable borrow occurs here\n66 |     }\n   |     - mutable borrow ends here\n</code></pre>\n\n<p>There are two references to the <code>HashMap</code> with the first one being a mutable borrow. We need to \"release\" the first mutable borrow of the map before we can grab an immutable borrow. I tried to write the code in this manner and added a scope around the first mutable borrow expecting it to be \"released\" when the scope ends:</p>\n\n<pre><code>pub fn get_or_insert&lt;'a, S&gt;(map: &amp;'a mut Map, name: S) -&gt; Handle&lt;'a&gt;\n    where S: Into&lt;String&gt;\n{\n    let key = name.into();\n    let record = {\n        map.entry(key.clone()).or_insert(Record::new(key))\n    };\n    Handle::new(record, map)\n}\n</code></pre>\n\n<p>But the error remains.</p>\n\n<p>It is very strange that the mutable borrow remain even after the scope has finished. According to <a href=\"http://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">References and Borrowing</a> the borrow should end at the end of the scope, and according to <a href=\"http://rustbyexample.com/variable_bindings/scope.html\" rel=\"nofollow noreferrer\">Scope and shadowing</a> scopes are controlled by blocks, which are collections of statements enclosed in braces, so superficially, it appears that the later function definition should end the scope with the mutable borrow of the reference to the map.</p>\n\n<p>How do you implement a <code>Handle</code> like this in reasonable way so that the lifetime of <code>Handle</code> does not exceed that of the <code>HashMap</code> and capture this at compile time? I'm looking at a good way to create a <code>Handle</code> that</p>\n\n<ul>\n<li><p>Abstract away the access to the underlying storage by using the temporary <code>Handle</code> as the abstraction provided by the implementation.</p></li>\n<li><p>Capture misuses at compile time rather than runtime, which disqualifies <code>RefCell</code> and <code>Rc</code>.</p></li>\n<li><p>Perform a single lookup in the underlying structure.</p></li>\n</ul>\n\n<p>I looked at <code>RefCell</code> but that moves the checks from compile time to runtime, and it would be beneficial to be able to catch misuses of <code>Handle</code> at compile time.</p>\n\n<p>The question in <a href=\"https://stackoverflow.com/questions/25190063/rust-borrowing-issues-with-attempted-caching\">Rust: Borrowing issues with attempted caching</a> is similar to this one but the answer is using <code>UnsafeCell</code>, which work around the checks rather than solve them.</p>\n\n<p>To me the problem seems to be that there need to be a way to transform a mutable reference to a immutable reference and release the mutable borrow (with the restriction that it should be permitted by the code), but still not sure if I have misunderstood something.</p>\n\n<p><strong>Update:</strong> There were originally three bullets for this question in an attempt to make it more structured, but it's been rewritten to just pose a single question to make it clear what the goal is.</p>\n"}]