[{"tags": ["regex", "rust"], "answers": [{"comments": [{"owner": {"reputation": 385, "user_id": 518479, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/57e72fee919179ad2fd6ef55a3adca8d?s=128&d=identicon&r=PG", "display_name": "qdwang", "link": "https://stackoverflow.com/users/518479/qdwang"}, "edited": false, "score": 1, "creation_date": 1426778398, "post_id": 29140265, "comment_id": 46519160, "body": "But the &quot;find the first <code>Some</code>&quot; step still takes O(n) time to get the index at the worst case. Is there a way to just get the index in O(1) time? Why didn&#39;t the regex remember the index when matching the group and then return to user?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 385, "user_id": 518479, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/57e72fee919179ad2fd6ef55a3adca8d?s=128&d=identicon&r=PG", "display_name": "qdwang", "link": "https://stackoverflow.com/users/518479/qdwang"}, "edited": false, "score": 0, "creation_date": 1426778567, "post_id": 29140265, "comment_id": 46519264, "body": "I don&#39;t know the reason why regex API does not have such feature. My guess is, unless your regex contains thousands of groups, I don&#39;t think it really matters. You can always submit a feature request to the regex <a href=\"https://github.com/rust-lang/regex/issues\" rel=\"nofollow noreferrer\">issue tracker</a>."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1426779476, "post_id": 29140265, "comment_id": 46519960, "body": "Yes, please submit an issue. Please also explain the <i>problem you&#39;re trying to solve</i>. (Which I don&#39;t see described anywhere in this question.)"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1426779724, "post_id": 29140265, "comment_id": 46520128, "body": "(Note that I have fixed the code to handle the situation when no group has matched except the whole regex (could happen if the matched alternative does not have a group))"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1426779636, "last_edit_date": 1426779636, "creation_date": 1426755053, "answer_id": 29140265, "question_id": 29126533, "link": "https://stackoverflow.com/questions/29126533/how-to-get-the-index-of-matching-group-in-the-regex-crate/29140265#29140265", "title": "How to get the index of matching group in the regex crate?", "body": "<p>I think your code is almost as close as you can get. Here is a slightly more idiomatic version:</p>\n\n<pre><code>let re = Regex::new(r\"([a-zA-Z_][a-zA-Z0-9]*)|([0-9]+)|(\\.)|(=)\").unwrap();\n\nfor cap in re.captures_iter(\"asdf.aeg = 34\") {\n    let index = cap.iter().enumerate()\n        .skip(1)                  // skip the first group\n        .find(|t| t.1.is_some())  // find the first `Some`\n        .map(|t| t.0)             // extract the index\n        .unwrap_or(0);            // get the index\n    println!(\"group {:?}, match {:?}\", index, cap.at(index).unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 385, "user_id": 518479, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/57e72fee919179ad2fd6ef55a3adca8d?s=128&d=identicon&r=PG", "display_name": "qdwang", "link": "https://stackoverflow.com/users/518479/qdwang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 982, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1426779636, "creation_date": 1426693654, "last_edit_date": 1426748086, "question_id": 29126533, "link": "https://stackoverflow.com/questions/29126533/how-to-get-the-index-of-matching-group-in-the-regex-crate", "title": "How to get the index of matching group in the regex crate?", "body": "<p>I only find one way is that using a Captures iter to check which index is Some(..).</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let re = Regex::new(r\"([a-zA-Z_][a-zA-Z0-9]*)|([0-9]+)|(\\.)|(=)\").unwrap();\n\nfor cap in re.captures_iter(\"asdf.aeg = 34\") {\n    let mut index = 0;\n    for (i, name) in cap.iter().enumerate() {\n        if i == 0 {continue}\n        if let Some(_) = name {index = i; break;}\n    }\n    println!(\"group {:?}, match {:?}\", index, cap.at(index).unwrap());\n}\n</code></pre>\n\n<p>Is there a proper way?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1426683074, "creation_date": 1426683074, "answer_id": 29122590, "question_id": 29121993, "link": "https://stackoverflow.com/questions/29121993/trait-encodable-is-private/29122590#29122590", "title": "Trait `Encodable` is private", "body": "<p>The <code>Encodable</code> and <code>Decodable</code> traits are only public relative to the <code>serialize</code> module. <a href=\"https://github.com/rust-lang/rustc-serialize/blob/master/src/lib.rs#L26\">That module is private though</a>. As you can see in the <a href=\"https://github.com/rust-lang/rustc-serialize/blob/master/src/lib.rs#L23-24\"><code>mod.rs</code> file</a>, <code>Encodable</code> and <code>Decodable</code> are re-exported directly in the <code>rustc_serialize</code> crate. You can therefor use the <code>Encodable</code> and <code>Decodable</code> traits as follows:</p>\n\n<pre><code>use rustc_serialize::{Encodable,Decodable};\n</code></pre>\n"}], "owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 0, "accepted_answer_id": 29122590, "answer_count": 1, "score": 4, "last_activity_date": 1451255560, "creation_date": 1426681489, "last_edit_date": 1451255560, "question_id": 29121993, "link": "https://stackoverflow.com/questions/29121993/trait-encodable-is-private", "title": "Trait `Encodable` is private", "body": "<p>I have problem making my generic <code>InMemoryColumn&lt;T&gt;</code> serializable. It complains that the 'Encodable' and 'Decodable' trait is private but I see it's public <a href=\"https://github.com/rust-lang/rustc-serialize/blob/master/src/serialize.rs\" rel=\"nofollow\">here</a>. How can I implement these traits so I can encode and decode the underlying <code>Vec&lt;T&gt;</code>.</p>\n\n<p>Here's the code with the import:</p>\n\n<pre><code>extern crate bincode;\nextern crate libc;\nextern crate \"rustc-serialize\" as rustc_serialize;\n\nuse rustc_serialize::serialize::{Encodable,Decodable};\n//import other libs\n\npub struct InMemoryColumn&lt;T&gt; {\n    name: String,\n    data: Vec&lt;T&gt;,\n}\n\nimpl&lt;T: Eq + Ord + Hash + Encodable + Decodable&gt; InMemoryColumn&lt;T&gt; {\n    fn save(&amp;self, tbl_name: &amp;str) {\n        //encode self.data and write to disk \n    }\n\n    fn load(path: &amp;str, name: &amp;str) -&gt; Result&lt;InMemoryColumn&lt;T&gt;,String&gt; {\n        //decode from disk and populate InMemoryColumn&lt;T&gt;\n    }\n}\n</code></pre>\n"}, {"tags": ["file", "io", "rust", "tempdir"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1426679355, "post_id": 29120804, "comment_id": 46469026, "body": "What&#39;s the question? (e.g. what output do you get?)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1426685163, "post_id": 29120804, "comment_id": 46472909, "body": "Welcome to Stack Overflow! To help you get better answers, please take the time to <a href=\"http://stackoverflow.com/help/how-to-ask\">produce better questions</a>. Also review how to create a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, which in this case means that you should create an example that reproduces the specific compiler error you are seeing. You should also <b>include</b> that error message in your question, to be sure other people see the same thing."}], "answers": [{"comments": [{"owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426685767, "post_id": 29123258, "comment_id": 46473303, "body": "Hi @shepmaster, can you help me out with this one, I am trying to open a file path and then transform the path into a vector, that&#39;s the get function up there, can you help?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426687306, "post_id": 29123258, "comment_id": 46474368, "body": "@Lexka oops, I forgot to add how to actually get rid of that single error. I&#39;ve updated with that, but you are going to have a lot more errors to address! ^_^ Have fun!"}, {"owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426687723, "post_id": 29123258, "comment_id": 46474688, "body": "HI@sepmaster I had already figured the type was TempDir way before you replied, I just didnt want to say if I am honest, as I wanted to get more input. But I am a bit annoyed. I am trying to simply read in a path (get method) and then turn the path read in into a vector, but that doesn&#39;t seem to work, it&#39;s frustrating"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426706048, "post_id": 29123258, "comment_id": 46487188, "body": "@Lexka Perhaps try simplifying your problem \u2014 remove code that isn&#39;t relevant to your problem, then either you will understand the issue or have another specific question you can search for or ask on SO. Posting code with a compilation error and then saying <i>&quot;I had already figured [the error], I just didnt want to say&quot;</i> is not a very friendly way to interact with people who are trying to help you! If you figured out the error, that&#39;s great! You can post it yourself and help others who come along after you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426706102, "post_id": 29123258, "comment_id": 46487216, "body": "@Lexka As an aside, you don&#39;t have to at-mention the poster of thing you are commenting on - they are automatically notified. That&#39;s why the autocomplete doesn&#39;t work (and thus why you misspelled my username ^_^)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1426687243, "last_edit_date": 1426687243, "creation_date": 1426684961, "answer_id": 29123258, "question_id": 29120804, "link": "https://stackoverflow.com/questions/29120804/initialise-struct-field-as-temporary-directory-and-read-from-directory/29123258#29123258", "title": "Initialise struct field as temporary directory and read from directory", "body": "<p>After fixing the indentation (Rust uses 4 spaces per level), removing the <code>Storage for</code> since you didn't provide that trait, removing commented-out code, and adding a <code>main</code>, you are left with this:</p>\n\n<pre><code>extern crate rustc_back;\nuse std::path::Path;\nuse std::fs::File;\nuse rustc_back::tempdir::TempDir as TempDir;\n\npub struct MyStorage {\n    temp_dir : Result&lt;TempDir&gt;\n}\n\nimpl MyStorage {\n    pub fn new() -&gt; MyStorage { \n        let store = match TempDir::new(\"encrypt_storage\") {\n            Ok(dir) =&gt; dir,\n            Err(e) =&gt; panic!(\"couldn't create temporary directory: {}\", e)\n        };\n\n        MyStorage { temp_dir: store }\n    }\n}\n\nimpl MyStorage {\n    fn get(&amp;self, name: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n        let mut f = std::fs::File::open(self.temp_dir.path() / name);\n        let mut s = String::new();\n        f.read_to_string(&amp;mut s);\n        s.to_vec()\n     }\n\n    fn put(&amp;mut self, name: Vec&lt;u8&gt;, data: Vec&lt;u8&gt;) {\n        let mut f = File::create(self.temp_dir.path() / name);\n        f.write_all(data);\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Compiling that has this error:</p>\n\n<pre><code>error: wrong number of type arguments: expected 2, found 1 [E0243]\ntemp_dir : Result&lt;TempDir&gt;\n           ^~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Which nicely points to the problematic type. Let's look at <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow\">the docs for <code>Result</code></a>, which includes the definition:</p>\n\n<pre><code>pub enum Result&lt;T, E&gt; {\n    Ok(T),\n    Err(E),\n} \n</code></pre>\n\n<p>So <code>Result</code> has two type parameters - <code>T</code> is used for the success case, and <code>E</code> is used for the failure case. Your code is only specifying one of them. My guess is that you looked at the <a href=\"http://doc.rust-lang.org/rustc_back/tempdir/struct.TempDir.html\" rel=\"nofollow\">docs for <code>TempDir</code></a> and copy-and-pasted:</p>\n\n<pre><code>fn new(prefix: &amp;str) -&gt; Result&lt;TempDir&gt;\n</code></pre>\n\n<p>However, if you click on the <code>Result</code> there, you'll see it goes to <a href=\"http://doc.rust-lang.org/std/io/type.Result.html\" rel=\"nofollow\"><code>io::Result</code></a>, which is simply a type alias that binds <code>E</code> to <a href=\"http://doc.rust-lang.org/std/io/struct.Error.html\" rel=\"nofollow\"><code>io::Error</code></a>:</p>\n\n<pre><code>type Result&lt;T&gt; = Result&lt;T, Error&gt;; \n</code></pre>\n\n<p>With all that exposition out of the way, you can \"fix\" your problem by changing your <code>MyStorage</code> struct:</p>\n\n<pre><code>pub struct MyStorage {\n    temp_dir: std::io::Result&lt;TempDir&gt;,\n}\n</code></pre>\n\n<p>And then you will get another compiler error, as you are <em>already dealing with the <code>Result</code></em> via the <code>match</code> in <code>MyStorage::new</code>. You aren't storing a <code>io::Result&lt;TempDir&gt;</code>, you are just storing a <code>TempDir</code>! Changing your struct further:</p>\n\n<pre><code>pub struct MyStorage {\n    temp_dir: TempDir,\n}\n</code></pre>\n\n<p>unlocks a whole new set of errors for you to figure out; but now you have gotten past that first hurdle!</p>\n"}], "owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1426687243, "creation_date": 1426678026, "last_edit_date": 1426686307, "question_id": 29120804, "link": "https://stackoverflow.com/questions/29120804/initialise-struct-field-as-temporary-directory-and-read-from-directory", "title": "Initialise struct field as temporary directory and read from directory", "body": "<p>I am trying to have a struct which has a field which I assume should be of type <code>Result&lt;TempDir&gt;</code>. When I initialise an implementation of the field with <code>new()</code>, I would like that particular field to be initialised by the creation of a new temp directory. Later, I want to implement a method to read from that directory.</p>\n\n<p>Here's the code, I am more worried about the syntax and proper use of libraries (why exactly are there over four libraries for read/write buffering in Rust, this is insane) as the logic should be right. Dont worry too much about the trait implementations, I just need directions in the syntax. Please don't be too harsh, as I know it doesn't compile, but with just two changes it should.</p>\n\n<pre><code>    extern crate rustc_back;\n    use std::path::Path;\n    use std::fs::File;\n    use rustc_back::tempdir::TempDir as TempDir;\n    pub struct MyStorage {\n\n      temp_dir : Result&lt;TempDir&gt;\n    }\n\n    impl MyStorage {\n      pub fn new() -&gt; MyStorage { \n        //tempo = match TempDir::new(\"encrypt_storage\");\n        let store = match TempDir::new(\"encrypt_storage\") {\n          Ok(dir) =&gt; dir,\n            Err(e) =&gt; panic!(\"couldn't create temporary directory: {}\", e)\n        };\n\n        MyStorage { temp_dir: store }\n        //MyStorage { temp_dir: TempDir::new(\"encrypt_storage\") }\n      }\n    }\n\n    impl Storage for MyStorage {\n      fn get(&amp;self, name: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n    //let mut f = std::fs::File::open(self.temp_dir.path() / name);\n    let mut f = std::fs::File::open(&amp;self.temp_dir){\n        // The `desc` field of `IoError` is a string that describes the error\n        Err(why) =&gt; panic!(\"couldn't open: {}\", why.description()),\n        Ok(file) =&gt; file,\n    };\n    let mut s = String::new();\n    //f.read_to_string(&amp;mut s);\n    match f.read_to_string(&amp;mut s){\n        Err(why) =&gt; panic!(\"couldn't read: {}\", why.description()),\n        Ok(_) =&gt; print!(\"contains:\\n{}\", s),\n    }\n    s.to_vec()\n  }\n\n  fn put(&amp;mut self, name: Vec&lt;u8&gt;, data: Vec&lt;u8&gt;) {\n    // self.entries.push(Entry { name : name, data : data })\n    let mut f = File::create(self.temp_dir.path() / name);\n    f.write_all(data);\n  }\n\n      fn put(&amp;mut self, name: Vec&lt;u8&gt;, data: Vec&lt;u8&gt;) {\n        // self.entries.push(Entry { name : name, data : data })\n        let mut f = File::create(self.temp_dir.path() / name);\n        f.write_all(data);\n      }\n    }\n</code></pre>\n"}, {"tags": ["types", "reference", "compiler-errors", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 4, "last_activity_date": 1426633825, "creation_date": 1426633825, "answer_id": 29111423, "question_id": 29111317, "link": "https://stackoverflow.com/questions/29111317/how-to-pass-the-self-value-of-a-method-to-another-method/29111423#29111423", "title": "How to pass the &#39;self&#39; value of a method to another method?", "body": "<p>There is a 1-character fix for your code:</p>\n\n<pre><code>struct Vec2 {\n    x: f32,\n    y: f32,\n}\n\nimpl Vec2 {\n    // Other stuff\n\n    fn get_dot(&amp;self, right: &amp;Vec2) -&gt; f32 { // note the type of right\n        self.x * right.x + self.y * right.y\n    }\n\n    fn get_magnitude(&amp;self) -&gt; f32 {\n        (self.get_dot(self)).sqrt()\n    }\n}\n</code></pre>\n\n<p>The problem is that your <code>get_dot</code> method takes its second argument by value instead of by reference. This is unnecessary (since the method does not need to own that argument, just be able to access it) and it cannot actually work if you want to call it like you do in <code>get_magnitude</code>.</p>\n"}], "owner": {"reputation": 623, "user_id": 3170577, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f727fbe1dc113a0d2150a9e5062c907a?s=128&d=identicon&r=PG", "display_name": "HarrisonG16", "link": "https://stackoverflow.com/users/3170577/harrisong16"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "accepted_answer_id": 29111423, "answer_count": 1, "score": 1, "last_activity_date": 1426635308, "creation_date": 1426633242, "last_edit_date": 1426635308, "question_id": 29111317, "link": "https://stackoverflow.com/questions/29111317/how-to-pass-the-self-value-of-a-method-to-another-method", "title": "How to pass the &#39;self&#39; value of a method to another method?", "body": "<p>I'm looking to do something similar to the following: pass the 'self' value in hope of getting the method I'm calling (<code>get_dot</code>) to access the values <code>x</code> and <code>y</code>. However, there is a type mismatch and I'm unsure whether I need to dereference it or something else. Here's an example in which I pass <code>@</code> or <code>this</code> in CoffeeScript and the other method is able to access its values properly:</p>\n\n<pre><code>class Testing\n  constructor: -&gt; @x = 10\n\n  doSomething: (value) -&gt;\n    return @x * value.x\n\n  doSomething2: () -&gt;\n    @doSomething(@)\n\ny = new Testing()\nalert(y.doSomething2()) //100\n</code></pre>\n\n<p>My actual Rust code looks like:</p>\n\n<pre><code>struct Vec2 {\n    x: f32,\n    y: f32,\n} \n\nimpl Vec2 {\n    // Other stuff\n\n    fn get_dot(&amp;self, right: Vec2) -&gt; f32 {\n        self.x * right.x + self.y * right.y\n    }\n\n    fn get_magnitude(&amp;self) -&gt; f32 {\n        (self.get_dot(self)).sqrt() // Problematic line!\n    }\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre><code>src/vec2.rs:86:23: 86:27 error: mismatched types:\n  expected `Vec2`,\n    found `&amp;Vec2`\n  (expected struct `Vec2`,\n    found &amp;-ptr) [E0308]\nsrc/vec2.rs:86         (self.get_dot(self)).sqrt()\n                                 ^~~~\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["rust", "deriving"], "answers": [{"comments": [{"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 2, "creation_date": 1426627604, "post_id": 29109951, "comment_id": 46449477, "body": "More important question, should it be considered a bug (incomplete feature)?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1426632780, "post_id": 29109951, "comment_id": 46451635, "body": "Off-hand I wouldn&#39;t know how to automate the implementation . The code would have to be <code>[self[0].clone(), self[1].clone(), ..., self[N-1].clone()]</code> which is kind of hard to generate with macros."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1426634986, "post_id": 29109951, "comment_id": 46452338, "body": "@delnan : I think it&#39;s possible to do something out of this : <a href=\"http://is.gd/CQAIDd\" rel=\"nofollow noreferrer\">is.gd/CQAIDd</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1426635737, "post_id": 29109951, "comment_id": 46452544, "body": "@Levans Clever! I never thought it impossible, but I&#39;m pleasantly surprised that it&#39;s so simple. Well, for certain values of &quot;simple&quot;. Of course, that&#39;s completely unsafe for <code>A</code> that aren&#39;t fixed-size arrays, but it would be private anyway."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1426675134, "post_id": 29109951, "comment_id": 46466374, "body": "@JanHudec: The implementations of traits for arrays and tuples are quite limited today due to the lack of support for <i>value generic parameters</i> and <i>variadic generics</i> respectively. As a result there are &quot;hacks&quot; (generally macro abuses) to implement the traits for a small number of arities... so I would not be surprised if the implementation as it is was simply a quick attempt at moving on and not a fully thought out solution. So... a WIP. I would encourage you to raise a bug, and even better provide a patch; it could be a nice to have for 1.0!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1426627284, "creation_date": 1426627284, "answer_id": 29109951, "question_id": 29109590, "link": "https://stackoverflow.com/questions/29109590/derive-clone-for-array-of-something-that-is-clone/29109951#29109951", "title": "Derive Clone for array of something that is Clone?", "body": "<p>The issue is in the <a href=\"http://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow\">implementation of the <code>Clone</code> trait</a>:</p>\n\n<pre><code>impl&lt;T&gt; Clone for [T; 4] where T: Copy\n</code></pre>\n\n<p>That makes the <em>real</em> question: why do we require <code>Copy</code> to clone an array? <a href=\"https://github.com/rust-lang/rust/blob/bfac337daab9b86971bcb3db61382ac44f94621c/src/libcore/array.rs#L31-L35\" rel=\"nofollow\">That implementation</a> says:</p>\n\n<pre><code>fn clone(&amp;self) -&gt; [T; $N] {\n    *self\n}\n</code></pre>\n\n<p>So currently, a clone of an array is simply a bit-for-bit copy of the source array. A deeper <em>why</em> may be forthcoming from someone more knowledgeable.</p>\n"}], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 238, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1426627284, "creation_date": 1426626085, "question_id": 29109590, "link": "https://stackoverflow.com/questions/29109590/derive-clone-for-array-of-something-that-is-clone", "title": "Derive Clone for array of something that is Clone?", "body": "<p>This code (<a href=\"http://is.gd/C5YLyR\" rel=\"nofollow\">also on play</a>)</p>\n\n<pre><code>use std::sync::Arc;\n\nstruct Foo {\n    x: isize, // Something complex in actual code, implements Drop\n}\n\n#[derive(Clone)]\nstruct Good {\n    a: Option&lt;Arc&lt;Foo&gt;&gt;,\n    b: Option&lt;Arc&lt;Foo&gt;&gt;,\n    c: Option&lt;Arc&lt;Foo&gt;&gt;,\n}\n\n#[derive(Clone)]\nstruct Bad {\n    x: [Option&lt;Arc&lt;Foo&gt;&gt;; 3],\n}\n\nfn main() {\n    println!(\"See?\");\n}\n</code></pre>\n\n<p>fails for <code>Bad</code> with</p>\n\n<pre><code>&lt;anon&gt;:16:5: 16:29 error: the trait `core::marker::Copy` is not implemented for the type `alloc::arc::Arc&lt;Foo&gt;` [E0277]\n&lt;anon&gt;:16     x: [Option&lt;Arc&lt;Foo&gt;&gt;; 3],\n              ^~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:14:10: 14:15 note: in expansion of #[derive_Clone]\n</code></pre>\n\n<p>but it has no problem with <code>Good</code>.</p>\n\n<ul>\n<li>Why is this and,</li>\n<li>is there any workaround? I am not exactly keen on handling 12 independent fields.</li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1426627472, "post_id": 29109774, "comment_id": 46449411, "body": "That&#39;s the obvious solution, of course. It&#39;s also not exactly nice when there is 15 or so of those enums."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1426626640, "creation_date": 1426626640, "answer_id": 29109774, "question_id": 29109354, "link": "https://stackoverflow.com/questions/29109354/trait-for-enums-convertible-to-isize/29109774#29109774", "title": "Trait for enums convertible to isize", "body": "<p>Add a method to your trait that coerces it to a <code>isize</code>. Then the compiler can verify that the objects meet the required criteria:</p>\n\n<pre><code>enum Foo {\n    A = 1,\n    B = 2,\n    C = 3,\n}\n\nenum Bar {\n    D = 4,\n    E = 5,\n    F = 6,\n}\n\ntrait Process: {\n    fn as_isize(self) -&gt; isize;\n    fn process(v: isize) -&gt; String;\n}\n\nimpl Process for Foo {\n    fn as_isize(self) -&gt; isize { self as isize }\n    fn process(v: isize) -&gt; String { format!(\"foo{}\", v) }\n}\n\nimpl Process for Bar {\n    fn as_isize(self) -&gt; isize { self as isize }\n    fn process(v: isize) -&gt; String { format!(\"bar{}\", v) }\n}\n\n// just for sake of argument; something more complex in reality, of course\nfn extern_call(v: isize) -&gt; isize { 2 * v + 211 }\n\nfn process&lt;T: Process&gt;(v: T) -&gt; String {\n    T::process(extern_call(v.as_isize()))\n}\n\nfn main() {\n    println!(\"a: {}\", process(Foo::A));\n}\n</code></pre>\n\n<p>FYI, <code>MarkerTrait</code> isn't needed here (and is un-idiomatic):</p>\n\n<blockquote>\n  <p>MarkerTrait is intended to be used as the supertrait for traits that don't have any methods</p>\n</blockquote>\n"}], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 535, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1426626640, "creation_date": 1426625249, "question_id": 29109354, "link": "https://stackoverflow.com/questions/29109354/trait-for-enums-convertible-to-isize", "title": "Trait for enums convertible to isize", "body": "<p>I have several enums. Each of them has numeric tags and can be converted to integer (<code>isize</code>). I have a trait that all of them define. But instances of that trait are not convertible to integer any more, because the compiler can't prove all implementations are actually parameterless enums.</p>\n\n<p>Is there any trait that would mean a type is a parameterless enum or that it is convertible to integer (by any means) that I could use as constraint in the generics that need to get the numeric value?</p>\n\n<hr>\n\n<p>To be more specific, here is a code-sample (<a href=\"http://is.gd/BHHR8u\" rel=\"nofollow\">also on play</a>):</p>\n\n<pre><code>enum Foo {\n    a = 1,\n    b = 2,\n    c = 3,\n}\n\nenum Bar {\n    d = 4,\n    e = 5,\n    f = 6,\n}\n\ntrait Process : std::marker::MarkerTrait {\n    fn process(v: isize) -&gt; String;\n}\n\nimpl Process for Foo {\n    fn process(v: isize) -&gt; String { format!(\"foo{}\", v) }\n}\n\nimpl Process for Bar {\n    fn process(v: isize) -&gt; String { format!(\"bar{}\", v) }\n}\n\n// just for sake of argument; something more complex in reality, of course\nfn extern_call(v: isize) -&gt; isize { 2 * v + 211 }\n\nfn process&lt;T: Process&gt;(v: T) -&gt; String {\n    T::process(extern_call(v as isize))\n}\n\nfn main() {\n    println!(\"a: {}\", process(Foo::a));\n}\n</code></pre>\n\n<p>Obviously the problem is in <code>process</code>, <code>v as isize</code> fails to compile with</p>\n\n<blockquote>\n  <p>error: non-scalar cast: <code>T</code> as <code>isize</code></p>\n</blockquote>\n\n<p>So I would like to do something like</p>\n\n<pre><code>process&lt;T: Process + scalar&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>process&lt;T: Process + ToPrimitive&gt;\n</code></pre>\n\n<p>or something that would tell the compiler that only types that can be cast to isize are permitted, but I don't know what that could be.</p>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426614176, "post_id": 29105612, "comment_id": 46442000, "body": "Is it safe to assume that the original data can&#39;t be changed to avoid the conflict?"}, {"owner": {"reputation": 381, "user_id": 1148266, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/120ab1b6201bbab8beacf79b623e2604?s=128&d=identicon&r=PG", "display_name": "rking788", "link": "https://stackoverflow.com/users/1148266/rking788"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426617272, "post_id": 29105612, "comment_id": 46443838, "body": "yes, it would be best if i didn&#39;t have to change the source data. I guess maybe creating a new struct field with a different name and writing a custom <code>impl Decodable</code> is the only way?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426618643, "post_id": 29105612, "comment_id": 46444587, "body": "I can see either manually implementing it or using <code>Json::from_str</code> and then poking into its result value."}], "answers": [{"comments": [{"owner": {"reputation": 381, "user_id": 1148266, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/120ab1b6201bbab8beacf79b623e2604?s=128&d=identicon&r=PG", "display_name": "rking788", "link": "https://stackoverflow.com/users/1148266/rking788"}, "edited": false, "score": 0, "creation_date": 1426690926, "post_id": 29118271, "comment_id": 46477043, "body": "Seems like exactly what i was looking for. It says it does some lookahead, do you know if it is possible to parse an attribute that could be one of a few different types? so a field called msg could be either a JSON string or an array."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 381, "user_id": 1148266, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/120ab1b6201bbab8beacf79b623e2604?s=128&d=identicon&r=PG", "display_name": "rking788", "link": "https://stackoverflow.com/users/1148266/rking788"}, "edited": false, "score": 0, "creation_date": 1426693715, "post_id": 29118271, "comment_id": 46479169, "body": "That is one of the main reasons serde was invented, because the old deserializer couldn&#39;t read an enum without having read a tag beforehand."}, {"owner": {"reputation": 381, "user_id": 1148266, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/120ab1b6201bbab8beacf79b623e2604?s=128&d=identicon&r=PG", "display_name": "rking788", "link": "https://stackoverflow.com/users/1148266/rking788"}, "edited": false, "score": 0, "creation_date": 1426701010, "post_id": 29118271, "comment_id": 46484105, "body": "Awesome. Thanks for your help."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 24, "last_activity_date": 1485847742, "last_edit_date": 1485847742, "creation_date": 1426670894, "answer_id": 29118271, "question_id": 29105612, "link": "https://stackoverflow.com/questions/29105612/how-to-decode-json-object-with-rust-keyword-attribute-name/29118271#29118271", "title": "How to decode JSON object with Rust keyword attribute name?", "body": "<p>You can use the <a href=\"https://crates.io/crates/serde\" rel=\"noreferrer\"><code>serde</code></a> crate. It supports renaming of fields <a href=\"https://github.com/erickt/rust-serde/pull/22\" rel=\"noreferrer\">since February 2015</a></p>\n\n<p>Your example could then look like this:</p>\n\n<pre><code>#[derive(Deserialize)]\nstruct MyObj {\n    #[serde(rename = \"type\")] \n    type_name: String\n}\n</code></pre>\n"}], "owner": {"reputation": 381, "user_id": 1148266, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/120ab1b6201bbab8beacf79b623e2604?s=128&d=identicon&r=PG", "display_name": "rking788", "link": "https://stackoverflow.com/users/1148266/rking788"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2284, "favorite_count": 1, "accepted_answer_id": 29118271, "answer_count": 1, "score": 16, "last_activity_date": 1485847742, "creation_date": 1426612735, "question_id": 29105612, "link": "https://stackoverflow.com/questions/29105612/how-to-decode-json-object-with-rust-keyword-attribute-name", "title": "How to decode JSON object with Rust keyword attribute name?", "body": "<p>I was wondering if it is possible to decode a JSON object in Rust that has an attribute name which is also a Rust keyword. I am working with the rustc-serialize crate and my struct definition looks like this:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct MyObj {\n  type: String\n}\n</code></pre>\n\n<p>The compiler throws an error because type is a keyword. The exact compiler error message is:</p>\n\n<pre><code>error: expected identifier, found keyword `type`\nsrc/mysrc.rs:23     type: String,\n                           ^~~~\n</code></pre>\n\n<p>Sorry for the rookie question, I have just started trying out Rust.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1426574943, "post_id": 29088774, "comment_id": 46417377, "body": "You could also keep the original type and directly give quantity to increase / decrease, since the variant information already has been extracted by the match."}, {"owner": {"reputation": 739, "user_id": 845762, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/da8c63db24d7e098f7b06185e8d1dbbb?s=128&d=identicon&r=PG", "display_name": "xudifsd", "link": "https://stackoverflow.com/users/845762/xudifsd"}, "edited": false, "score": 0, "creation_date": 1458320272, "post_id": 29088774, "comment_id": 59824549, "body": "are there any reasons for &quot;An enum is one type only; its variants are purely that\u2014variants, not types.&quot;? IMO, it&#39;s perfectly implementable to treat variants as types."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 739, "user_id": 845762, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/da8c63db24d7e098f7b06185e8d1dbbb?s=128&d=identicon&r=PG", "display_name": "xudifsd", "link": "https://stackoverflow.com/users/845762/xudifsd"}, "edited": false, "score": 0, "creation_date": 1458511520, "post_id": 29088774, "comment_id": 59880484, "body": "@xudifsd: at first glance it seems so, but when you get to thinking about type layout you realise that doing so would actually introduce a few rather important problems. Not insurmountable problems, but it would certainly cause surprising behaviour, where the layout of a variant by itself and a variant in the enum were substantially different."}, {"owner": {"reputation": 739, "user_id": 845762, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/da8c63db24d7e098f7b06185e8d1dbbb?s=128&d=identicon&r=PG", "display_name": "xudifsd", "link": "https://stackoverflow.com/users/845762/xudifsd"}, "edited": false, "score": 0, "creation_date": 1458539687, "post_id": 29088774, "comment_id": 59887683, "body": "@ChrisMorgan can you name some?"}, {"owner": {"reputation": 4465, "user_id": 4093378, "user_type": "registered", "accept_rate": 73, "profile_image": "https://lh3.googleusercontent.com/-fQvO8M4nxAQ/AAAAAAAAAAI/AAAAAAAAB-E/YauVVLfKB5U/photo.jpg?sz=128", "display_name": "Indiana Kernick", "link": "https://stackoverflow.com/users/4093378/indiana-kernick"}, "edited": false, "score": 0, "creation_date": 1606541529, "post_id": 29088774, "comment_id": 114996658, "body": "Five years later, is there a better way? I&#39;m having precisely the same problem as OP and using a trait is not a solution for me."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 4465, "user_id": 4093378, "user_type": "registered", "accept_rate": 73, "profile_image": "https://lh3.googleusercontent.com/-fQvO8M4nxAQ/AAAAAAAAAAI/AAAAAAAAB-E/YauVVLfKB5U/photo.jpg?sz=128", "display_name": "Indiana Kernick", "link": "https://stackoverflow.com/users/4093378/indiana-kernick"}, "edited": false, "score": 0, "creation_date": 1606894447, "post_id": 29088774, "comment_id": 115097826, "body": "@IndianaKernick: there is no better way, and it\u2019s unlikely that there ever will be."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 10, "last_activity_date": 1426548700, "creation_date": 1426548700, "answer_id": 29088774, "question_id": 29088633, "link": "https://stackoverflow.com/questions/29088633/grouping-structs-with-enums/29088774#29088774", "title": "Grouping structs with enums", "body": "<p>Yes, this is the best you will get along this line of implementation. An enum is one type only; its variants are purely that\u2014variants, not types.</p>\n\n<p>Another alternative is to use a trait and generics:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Increment {\n    quantity: u32,\n}\n\nstruct Decrement {\n    quantity: u32,\n}\n\ntrait Command {\n    fn process(self);\n}\n\nimpl Command for Increment {\n    fn process(self) {\n        println!(\"Increasing by {}\", self.quantity);\n    }\n}\n\nimpl Command for Decrement {\n    fn process(self) {\n        println!(\"Decreasing by {}\", self.quantity);\n    }\n}\n</code></pre>\n\n<p>Of course, it\u2019s not a direct parallel; if you want to store a <code>command</code> of potentially differing types you\u2019ll need to change <code>process</code> to take <code>self: Box&lt;Self&gt;</code> or <code>&amp;self</code>, and you\u2019ll need to work with either <code>Box&lt;Command&gt;</code> or <code>&amp;Command</code>, but it\u2019s another way of doing things that may suit your requirements. And as far as the definitions are concerned, it\u2019s purer.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1426585388, "post_id": 29094387, "comment_id": 46422461, "body": "That&#39;s less attractive if the variant has lots of fields, doubly so if the enum has methods you&#39;d want to use in <code>increase</code> or <code>decrease</code>."}, {"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1426588495, "post_id": 29094387, "comment_id": 46424268, "body": "If you have multiple fields, you&#39;ll need to have the same number of <code>Impl</code> of the corresponding struct anyway. I agree it is less flexible than a struct. I think it is a question of having a centralized <code>process_command</code> or several decentralized implementations. Both scenario have pros and cons"}], "tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 3, "last_activity_date": 1426581031, "creation_date": 1426581031, "answer_id": 29094387, "question_id": 29088633, "link": "https://stackoverflow.com/questions/29088633/grouping-structs-with-enums/29094387#29094387", "title": "Grouping structs with enums", "body": "<p>What about this one, I am not sure I really understood your issue</p>\n\n<pre><code>enum Command {\n    Increment (u32),\n    Decrement (u32),\n}\n\nfn process_command(command: Command) {\n    match command {\n        Command::Increment(quantity) =&gt; increase(quantity),\n        Command::Decrement(quantity) =&gt; decrease(quantity),\n    };\n}\n\nfn increase(quantity: u32) {\n    println!(\"Increasing by: {}.\", quantity);\n}\n\nfn decrease(quantity: u32) {\n    println!(\"Decreasing by: {}.\", quantity);\n}\n\nfn main() {\n    let input = \"Add\";\n    let quantity = 4;\n\n    let command: Command = match input {\n        \"Add\" =&gt; Command::Increment (quantity),\n        \"Subtract\" =&gt; Command::Decrement (quantity),\n        _ =&gt; unreachable!(),\n    };\n\n    process_command(command);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1426600919, "creation_date": 1426600919, "answer_id": 29101091, "question_id": 29088633, "link": "https://stackoverflow.com/questions/29088633/grouping-structs-with-enums/29101091#29101091", "title": "Grouping structs with enums", "body": "<p>I may be misunderstanding your simple example, but remember that you can implement methods on enums directly:</p>\n\n<pre><code>enum Command {\n    Increment {quantity: u32},\n    Decrement {quantity: u32},\n}\n\nimpl Command {\n    fn process(self) {\n        match self {\n            Command::Increment { quantity } =&gt; {\n                println!(\"Increasing by: {}.\", quantity)\n            },\n            Command::Decrement { quantity } =&gt; {\n                println!(\"Decreasing by: {}.\", quantity)\n            },\n        };\n    }\n}\n\nfn main() {\n    let input = \"Add\";\n    let quantity = 4;\n\n    let command: Command = match input {\n        \"Add\" =&gt; Command::Increment { quantity: quantity },\n        \"Subtract\" =&gt; Command::Decrement { quantity: quantity },\n        _ =&gt; unreachable!(),\n    };\n\n    command.process();\n}\n</code></pre>\n\n<p>I happen to like this version because it eliminates the redundancy of <code>process_command(command)</code>.</p>\n"}], "owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9155, "favorite_count": 2, "accepted_answer_id": 29088774, "answer_count": 3, "score": 12, "last_activity_date": 1426600919, "creation_date": 1426547852, "question_id": 29088633, "link": "https://stackoverflow.com/questions/29088633/grouping-structs-with-enums", "title": "Grouping structs with enums", "body": "<p>In Rust, how should one go about grouping related structs so that a function signature can accept multiple different types while refering to the concrete type inside the method body?</p>\n\n<p>The following example is contrived for simplicity:</p>\n\n<pre><code>enum Command {\n    Increment {quantity: u32},\n    Decrement {quantity: u32},\n}\n\nfn process_command(command: Command) {\n    match command {\n        Command::Increment =&gt; increase(command),\n        Command::Decrement =&gt; decrease(command),\n    };\n}\n\nfn increase(increment: Command::Increment) {\n    println!(\"Increasing by: {}.\", increment.quantity);\n}\n\nfn decrease(decrement: Command::Decrement) {\n    println!(\"Decreasing by: {}.\", decrement.quantity);\n}\n\nfn main() {\n    let input = \"Add\";\n    let quantity = 4;\n\n    let command: Command = match input {\n        \"Add\" =&gt; Command::Increment { quantity: quantity },\n        \"Subtract\" =&gt; Command::Decrement { quantity: quantity },\n        _ =&gt; unreachable!(),\n    };\n\n    process_command(command);\n}\n</code></pre>\n\n<p>Compiling results in the following two errors:</p>\n\n<pre><code>src/main.rs:13:24: 13:42 error: found value name used as a type: DefVariant(DefId { krate: 0, node: 4 }, DefId { krate: 0, node: 5 }, true) [E0248]\nsrc/main.rs:13 fn increase(increment: Command::Increment) {\n                                      ^~~~~~~~~~~~~~~~~~\nsrc/main.rs:17:24: 17:42 error: found value name used as a type: DefVariant(DefId { krate: 0, node: 4 }, DefId { krate: 0, node: 8 }, true) [E0248]\nsrc/main.rs:17 fn decrease(decrement: Command::Decrement) {\n                                      ^~~~~~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>If I declare the structs seperately, and wrap the structs within a tuple struct (correct terminology?) each within the enum then I get the expected result, but with the verbosity and similar type names all over the place I suspect that I've misunderstood someting:</p>\n\n<pre><code>struct Increment {\n    quantity: u32,\n}\n\nstruct Decrement {\n    quantity: u32,\n}\n\nenum Command {\n    Increment(Increment),\n    Decrement(Decrement),\n}\n\nfn process_command(command: Command) {\n    match command {\n        Command::Increment(increment) =&gt; increase(increment),\n        Command::Decrement(decrement) =&gt; decrease(decrement),\n    };\n}\n\nfn increase(increment: Increment) {\n    println!(\"Increasing by: {}.\", increment.quantity);\n}\n\nfn decrease(decrement: Decrement) {\n    println!(\"Decreasing by: {}.\", decrement.quantity);\n}\n\nfn main() {\n    let input = \"Add\";\n    let quantity = 4;\n\n    let command: Command = match input {\n        \"Add\" =&gt; Command::Increment(Increment { quantity: quantity }),\n        \"Subtract\" =&gt; Command::Decrement(Decrement { quantity: quantity }),\n        _ =&gt; unreachable!(),\n    };\n\n    process_command(command);\n}\n</code></pre>\n\n<p>Running outputs:</p>\n\n<pre><code>Increasing by: 4.\n</code></pre>\n\n<p>Is wrapping the struct within an enum type (terminology?) sharing the same name really the best solution? <code>Command::Increment(Increment { quantity: 7 })</code></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1426510713, "post_id": 29077211, "comment_id": 46388091, "body": "What is this *data_ptr.offset(i) = b business? Wouldn&#39;t data_ptr[i] = b do the trick?"}, {"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1426511844, "post_id": 29077211, "comment_id": 46388852, "body": "Good question but, no, as you cannot index a <code>*mut u8</code>."}, {"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1426513572, "post_id": 29077211, "comment_id": 46390038, "body": "I tried using &#39;ptr::copy_memory&#39; instead but still doesn&#39;t write so looks like there&#39;s something that&#39;s blocking it from writing it to the file."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1426514563, "post_id": 29077211, "comment_id": 46390737, "body": "Unrelated: <code>v.iter().enumerate()</code> let you iterate over tuples <code>(i, e)</code> avoiding the manual book-keeping required with <code>i</code> here."}, {"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "edited": false, "score": 0, "creation_date": 1426514729, "post_id": 29077211, "comment_id": 46390831, "body": "Thanks Matthieu :) That will simplify my code a lot. I think I&#39;ve got the problem now; it looks like it is not writing because it is passing MAP_PRIVATE by default."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426515459, "post_id": 29077211, "comment_id": 46391368, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28516996/how-to-create-and-write-to-memory-mapped-files\">How to create and write to memory mapped files?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "edited": false, "score": 0, "creation_date": 1426515262, "post_id": 29078985, "comment_id": 46391210, "body": "I won&#39;t accept this in case someone has a better answer"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1426544342, "post_id": 29078985, "comment_id": 46408803, "body": "Incidentally, everything in <code>libc</code> is exported at the top level, so <code>libc::MAP_SHARED</code> should work."}], "tags": [], "owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "is_accepted": true, "score": 2, "last_activity_date": 1426515203, "creation_date": 1426515203, "answer_id": 29078985, "question_id": 29077211, "link": "https://stackoverflow.com/questions/29077211/cannot-write-to-memory-mapped-file/29078985#29078985", "title": "Cannot write to memory mapped file", "body": "<p>Ok I found out what the problem is. It passes MAP_PRIVATE by default so that's why it was not writing to it so I then ensured I added this to my 'mmap_options'</p>\n\n<pre><code>MapOption::MapNonStandardFlags(libc::consts::os::posix88::MAP_SHARED)\n</code></pre>\n"}], "owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 351, "favorite_count": 0, "accepted_answer_id": 29078985, "answer_count": 1, "score": 1, "last_activity_date": 1426519853, "creation_date": 1426510063, "last_edit_date": 1426519853, "question_id": 29077211, "link": "https://stackoverflow.com/questions/29077211/cannot-write-to-memory-mapped-file", "title": "Cannot write to memory mapped file", "body": "<p>I am trying to write a byte vector, <code>Vec&lt;u8&gt;</code> to a memory-mapped file but I am stumped why it is not writing to the file. I have simplified the code to clearly show the method how I am writing to the memory mmapped file.</p>\n\n<pre><code>fn main() {\n    let v : Vec&lt;u8&gt; = vec![0,0,0,1,0,0,0,2];\n    let n = v.len();\n\n    let f = OpenOptions::new()\n        .read(true)\n        .write(true)\n        .truncate(true)\n        .create(true)\n        .open(\"test.dat\")\n        .unwrap();\n    f.set_len(n as u64);\n\n    let fd = f.as_raw_fd();\n\n    let mmap = MemoryMap::new(n, &amp;[MapReadable, MapWritable, MapFd(fd)]).unwrap();\n\n    let mut data_ptr = mmap.data();\n\n    unsafe { ptr::copy_memory(data_ptr, v.as_ptr(), n); }\n}\n</code></pre>\n\n<p>It looks like it is the last line but don't know why it is not working nor how to fix it. :(</p>\n"}, {"tags": ["internationalization", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1426509286, "post_id": 29076709, "comment_id": 46387215, "body": "This is an area of Rust that is definitely not mature yet."}, {"owner": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "edited": false, "score": 0, "creation_date": 1426609075, "post_id": 29076709, "comment_id": 46438560, "body": "I have been experimenting with that and have some early version <a href=\"https://github.com/pzol/r18n\" rel=\"nofollow noreferrer\">github.com/pzol/r18n</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426961732, "post_id": 29076709, "comment_id": 46587678, "body": "If I&#39;m reading your question correctly, you may wish to reword it. I think that people are getting hung up on the internationalization part of your question, and missing that you are basically asking <i>&quot;how can I have a dynamic format string?&quot;</i> Including that you want to do i18n is useful for context, though."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1426581436, "creation_date": 1426581436, "answer_id": 29094500, "question_id": 29076709, "link": "https://stackoverflow.com/questions/29076709/formatting-strings-from-i18n/29094500#29094500", "title": "Formatting strings from i18n", "body": "<p>Rust explicitly chose NOT to attempt to address the problem for now.</p>\n\n<p>The issue of internationalization and localization is hairy; there are lots of quirks in natural languages:</p>\n\n<ul>\n<li>in English, you use the <code>th</code> suffix after a number to form a literal, except when it's <code>st</code> (after 1 or 21 but not after 11) or <code>nd</code> or <code>rd</code></li>\n<li>in Polish, you have relatively complex rules for <a href=\"http://en.wikipedia.org/wiki/Polish_grammar#Numbers_and_quantifiers\" rel=\"nofollow\">plural forms</a></li>\n</ul>\n\n<p>To the best of my knowledge, no library today addresses the full complexity of what would be needed for a \"complete\" solution to internationalization in any language. Rust investigation can be <a href=\"https://github.com/rust-lang/rfcs/issues/822\" rel=\"nofollow\">followed here</a>.</p>\n"}], "owner": {"reputation": 13337, "user_id": 441899, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/368fb99f86e2264ceec0539a3746b9d3?s=128&d=identicon&r=PG", "display_name": "Jules", "link": "https://stackoverflow.com/users/441899/jules"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 749, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1426581436, "creation_date": 1426508525, "last_edit_date": 1495541574, "question_id": 29076709, "link": "https://stackoverflow.com/questions/29076709/formatting-strings-from-i18n", "title": "Formatting strings from i18n", "body": "<p>Rust's string formatting macros (e.g. \"println!\" and \"format!\") require their format string argument to be a string literal (as <a href=\"https://stackoverflow.com/questions/27734708/println-error-format-argument-must-be-a-string-literal\">observed here</a>). Given this, what approach should I use for formatting messages where the text (which will need a additional data embedded into it) needs to come from an external source, e.g. a database of message translations, like a .po file or similar?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1426503415, "post_id": 29075022, "comment_id": 46383805, "body": "Thank you ! I have fixed my comment (&#39;RefCell&#39; -&gt; &#39;RefMut&#39;) as well. Also I think I should have figured this out myself, but on the other hand, it&#39;s probably good to have the question here too."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1426503531, "post_id": 29075022, "comment_id": 46383863, "body": "Autoref and autoderef can certainly get painful to figure out in extreme situations like this one of yours. Fortunately it\u2019s almost always not an issue."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1426503483, "last_edit_date": 1426503483, "creation_date": 1426503107, "answer_id": 29075022, "question_id": 29074573, "link": "https://stackoverflow.com/questions/29074573/how-to-use-borrowmut-contained-within-refcell/29075022#29075022", "title": "How to use `BorrowMut` contained within `RefCell`?", "body": "<p>You\u2019re running into an unfortunate side-effect of auto-borrowing rules where what is almost always what is wanted (and almost always unambiguous) has wound up being ambiguous for this particular case and it\u2019s chosen what to you is the wrong way. If you pull apart the expression and inspect the type at each step it becomes more obvious.</p>\n\n<p>The first <code>borrow_mut</code> is interpreted as a method on <code>RefCell</code> which yields the <code>core::cell::RefMut&lt;'_, C&gt;</code> that is desired. (The fact that it has such an intrinsic method overrides the fact that it could otherwise construct a <code>borrow_mut</code> call by automatically taking a reference to <code>self.hub.client</code>, if <code>self</code> was in a mutable slot, as is shown later in this answer.) The problem is that the second one <em>isn\u2019t calling the <code>borrow_mut</code> of the <code>BorrowMut</code> implementation that you want</em>.</p>\n\n<p>There are two things that can happen at this stage when you want to call a method: automatic taking of references and automatic dereferencing. In this particular case, <em>both</em> of these yield a <code>borrow_mut</code> method that you can call:</p>\n\n<ul>\n<li><p>If it takes a mutable reference to the <code>RefMut</code>, then it has <code>&amp;mut RefMut&lt;'_, C&gt;</code>, and <code>&amp;mut T</code> implements the in-scope trait <code>BorrowMut</code> which provides a method <code>borrow_mut</code>, and so you just get another <code>&amp;mut RefMut&lt;'_, C&gt;</code>, which solidifies this as the choice to use.</p></li>\n<li><p>If it dereferences the <code>RefMut</code> then it can get at a <code>C</code>, which it can then use the <code>BorrowMut&lt;Client&gt;</code> implementation of to satisfy the requested <code>borrow_mut</code> method call, yielding a <code>&amp;mut Client</code>.</p></li>\n</ul>\n\n<p>Which does it take? I\u2019m not sure if the rules are defined anywhere (though they definitely will need to be soon if they are not), but what one can observe happening is that the first path is taken: it tries autoreferencing before it tries dereferencing, and so <code>ref_cell_borrow.borrow_mut()</code> returns a <code>&amp;mut RefMut&lt;'_, C&gt;</code> rather than a <code>&amp;mut Client</code>.</p>\n\n<p>If you wish to get it to use the other behaviour, you need to explicitly dereference the <code>RefMut</code>; then the automatic taking of a mutable reference can only get at the <code>C</code>, which is what you need.</p>\n\n<p>Here\u2019s the rough expansion with type annotations of what it needs to be; you can play around with things like assigning the type <code>()</code> to examine the error messages when you compile it:</p>\n\n<pre><code>let mut ref_cell_borrow: std::cell::RefMut&lt;C&gt; = self.hub.client.borrow_mut();\nlet client: &amp;mut Client = (*ref_cell_borrow).borrow_mut();\nclient.doit();\n</code></pre>\n\n<p>Back in compact form, it\u2019s <code>(*self.hub.client.borrow_mut()).borrow_mut().doit()</code>.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1503, "favorite_count": 2, "accepted_answer_id": 29075022, "answer_count": 1, "score": 2, "last_activity_date": 1426503483, "creation_date": 1426501855, "last_edit_date": 1426503176, "question_id": 29074573, "link": "https://stackoverflow.com/questions/29074573/how-to-use-borrowmut-contained-within-refcell", "title": "How to use `BorrowMut` contained within `RefCell`?", "body": "<p>I am a big fan of <code>BorrowMut</code> as it allows me to provide APIs that allow to take ownership of arguments, or to take references as well. This makes them easier to use, but a little harder to implement for me - an acceptable tradeoff as the needs of the many outweigh the needs of the few :).</p>\n\n<p>Now I am trying to use <code>BorrowMut</code> with <code>RefCell</code> and fail as <code>borrow_mut()</code> is implemented both by <code>RefMut</code> as well as <code>BorrowMut</code>. However, <code>RefMut</code> will take precedence, preventing my to drill down to the actual value contained within <code>BorrowMut</code>.</p>\n\n<h1>Example</h1>\n\n<p>The following code allows you to reproduce the issue - the goal is to call <code>doit()</code> on the <code>Client</code> type:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::borrow::BorrowMut;\n\nstruct Hub&lt;C&gt; {\n    client: RefCell&lt;C&gt;\n}\n\nimpl&lt;C&gt; Hub&lt;C&gt; \n    where C: BorrowMut&lt;Client&gt; {\n\n    fn new(client: C) -&gt; Hub&lt;C&gt; {\n        Hub {\n            client: RefCell::new(client)\n        }\n    }\n\n    fn builder&lt;'a&gt;(&amp;'a self) -&gt; Builder&lt;'a, C&gt; {\n        Builder {\n            hub: self\n        }\n    }\n}\n\nstruct Builder&lt;'a, C: 'a&gt; {\n    hub: &amp;'a Hub&lt;C&gt;\n}\n\nimpl&lt;'a, C&gt; Builder&lt;'a, C&gt;\n    where C: BorrowMut&lt;Client&gt; {\n    fn use_client(self) {\n        // 1: borrow_mut() of RefCell\n        // 2: borrow_mut() of BorrowMut()\n        // but doesn't work, as RefMut returned by 1) always yields RefMut\n        self.hub.client.borrow_mut().borrow_mut().doit()\n    }\n}\n\nstruct Client;\nimpl Client {\n    fn doit(&amp;mut self) {\n        println!(\"DID IT!!\")\n    }\n}\n\n\n// HUB USAGE\n{\n    let h = Hub::new(Client);\n    h.builder().use_client();\n}\n\n{\n    let mut c = Client;\n    let h = Hub::new(&amp;mut c);\n    h.builder().use_client();\n}\n</code></pre>\n\n<p>This produces the following error:</p>\n\n<pre><code>tests/lang.rs:1076:55: 1076:61 error: type `&amp;mut core::cell::RefMut&lt;'_, C&gt;` does not implement any method in scope named `doit`\ntests/lang.rs:1076             self.hub.client.borrow_mut().borrow_mut().doit()\n</code></pre>\n\n<p><strong>Can you point out how I would make this call ?</strong> Is it possible at all ?</p>\n\n<h1>Meta</h1>\n\n<pre><code>\u2717 rustc --version --verbose\nrustc 1.0.0-nightly (3e4be02b8 2015-03-13) (built 2015-03-13)\nbinary: rustc\ncommit-hash: 3e4be02b80a3dd27bce20870958fe0aef7e7336d\ncommit-date: 2015-03-13\nbuild-date: 2015-03-13\nhost: x86_64-apple-darwin\nrelease: 1.0.0-nightly\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 2, "creation_date": 1426475186, "post_id": 29068926, "comment_id": 46373308, "body": "That works inline, but when I try it using files, it doesn&#39;t seem to; have a look at this trivial example <a href=\"https://github.com/shadowmint/rust-starter\" rel=\"nofollow noreferrer\">github.com/shadowmint/rust-starter</a>; it errors with &quot;src/module1/blah.rs:2:15: 2:18 error: macro undefined: &#39;fmt!&#39;&quot;, but <a href=\"https://raw.githubusercontent.com/shadowmint/rust-starter/master/src/lib.rs\" rel=\"nofollow noreferrer\">raw.githubusercontent.com/shadowmint/rust-starter/master/src&zwnj;&#8203;/&hellip;</a> does exactly what you&#39;ve said."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1426475524, "post_id": 29068926, "comment_id": 46373386, "body": "There&#39;s no <code>mod module1;</code> in the code you link, maybe the error is coming from something else?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1426475591, "post_id": 29068926, "comment_id": 46373404, "body": "(See also: <a href=\"http://doc.rust-lang.org/nightly/book/advanced-macros.html#scoping-and-macro-import/export.\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/book/&hellip;</a>)"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1426475767, "post_id": 29068926, "comment_id": 46373436, "body": "@huon-dbaupp ah, right you are, it needed to be in main.rs"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1525372827, "post_id": 29068926, "comment_id": 87341608, "body": "Might it be worth noting that <code>mod macros {}</code> must appear before other <code>mod</code> declarations depending on the macros?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 27, "last_activity_date": 1525372751, "last_edit_date": 1525372751, "creation_date": 1426474158, "answer_id": 29068926, "question_id": 29068716, "link": "https://stackoverflow.com/questions/29068716/how-do-you-use-a-macro-from-inside-its-own-crate/29068926#29068926", "title": "How do you use a macro from inside its own crate?", "body": "<p>You need to mark your macro with <code>#[macro_export]</code> and then mark the module with <code>#[macro_use]</code>:</p>\n\n<pre><code>#[macro_use]\nmod macros {\n    #[macro_export]\n    macro_rules! my_macro(() =&gt; (42));\n}\n\npub mod foo {\n    pub mod junk {\n        pub fn usage() -&gt; u8 {\n            my_macro!()\n        }\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", foo::junk::usage());\n}\n</code></pre>\n\n<p>Technically, you only need to use <code>#[macro_export]</code> if you want the macro to be available to users of your crate.</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d871cd1d4fb7a488f62073ee144bd43f&amp;version=stable&amp;mode=debug\" rel=\"noreferrer\">Playground link</a>)</p>\n"}, {"comments": [{"owner": {"reputation": 5076, "user_id": 909579, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6c5e950fdb55c2c4592e1be5e4c0d998?s=128&d=identicon&r=PG", "display_name": "Tomas Tomecek", "link": "https://stackoverflow.com/users/909579/tomas-tomecek"}, "edited": false, "score": 2, "creation_date": 1490776331, "post_id": 29069165, "comment_id": 73258351, "body": "This was exactly my issue! I wish it was highlighted in the book."}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 69, "last_activity_date": 1426475935, "creation_date": 1426475935, "answer_id": 29069165, "question_id": 29068716, "link": "https://stackoverflow.com/questions/29068716/how-do-you-use-a-macro-from-inside-its-own-crate/29069165#29069165", "title": "How do you use a macro from inside its own crate?", "body": "<p>The accepted answer is correct, but for anyone else who finds this question in the future, I'd like to add that the <em>order</em> in which modules are loaded is important.</p>\n\n<p>For example, in this sequence:</p>\n\n<pre><code>pub mod terminal;\npub mod terminals;\npub mod graphics;\n\n#[macro_use]\nmod macros;\n</code></pre>\n\n<p>If terminal uses a macro from macros, it will <em>not</em> work; the <code>#[macro_use]</code> must occur above any other module that uses the macro:</p>\n\n<pre><code>#[macro_use]\nmod macros;\n\npub mod terminal;\npub mod terminals;\npub mod graphics;\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10433, "favorite_count": 4, "closed_date": 1533164718, "accepted_answer_id": 29068926, "answer_count": 2, "score": 25, "last_activity_date": 1525372751, "creation_date": 1426472523, "question_id": 29068716, "link": "https://stackoverflow.com/questions/29068716/how-do-you-use-a-macro-from-inside-its-own-crate", "closed_reason": "Duplicate", "title": "How do you use a macro from inside its own crate?", "body": "<p>I'm sure this is trivial to do, but I can't seem to make it work.</p>\n\n<p>I've looked at <a href=\"http://doc.rust-lang.org/book/advanced-macros.html#scoping-and-macro-import/export\" rel=\"noreferrer\">http://doc.rust-lang.org/book/advanced-macros.html#scoping-and-macro-import/export</a>, and I appreciate, that in general, the way to use macros is to define them using:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! background(($token:expr) =&gt; (($token &gt;&gt; (32 + 8)) &amp; $crate::graphics::mask::Color));\n</code></pre>\n\n<p>...and then import them into another context that uses them using:</p>\n\n<pre><code>#[macro_use]\nextern crate terminal;\n...\n</code></pre>\n\n<p>However, I what I want to do is use the macros from within the crate where they are defined.</p>\n\n<p>If my file structure is:</p>\n\n<pre><code>- lib.rs\n- macros.rs\n- foo\n- foo/mod.rs\n- foo/junk.rs\n</code></pre>\n\n<p>How do I use the macros in macros.rs from junk.rs?</p>\n\n<p>I've tried various combinations of <code>#[macro_use] mod macros</code>, etc. with no luck. The documentation suggests that if a macro is defined in some scope, then it is available in all child modules... does that mean I have to define my macros in lib.rs?</p>\n"}, {"tags": ["parsing", "rust", "peg"], "comments": [{"owner": {"reputation": 11369, "user_id": 507762, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/811b3da6d82df046814093ec0f3d6561?s=128&d=identicon&r=PG", "display_name": "U2EF1", "link": "https://stackoverflow.com/users/507762/u2ef1"}, "edited": false, "score": 0, "creation_date": 1426397127, "post_id": 29057443, "comment_id": 46351896, "body": "While you could do this in one pass, you won&#39;t be able to use constants declared later than a function that uses them (if you wanted that), and probably if you make this any more complicated (custom types, whatever) you&#39;re going to have even more passes. I&#39;d just use multiple passes."}, {"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "reply_to_user": {"reputation": 11369, "user_id": 507762, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/811b3da6d82df046814093ec0f3d6561?s=128&d=identicon&r=PG", "display_name": "U2EF1", "link": "https://stackoverflow.com/users/507762/u2ef1"}, "edited": false, "score": 0, "creation_date": 1426400086, "post_id": 29057443, "comment_id": 46352388, "body": "@U2EF1 I&#39;m not concerned with constants declared after their first use. You make a good point about custom types and such, but could you demonstrate how you would do this in one pass?"}], "answers": [{"comments": [{"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1426404396, "post_id": 29058109, "comment_id": 46353139, "body": "Very well, let me rephrase  - <i>&quot;how would I handle previously declared constants in a <a href=\"http://en.wikipedia.org/wiki/One-pass_compiler\" rel=\"nofollow noreferrer\">one-pass compiler</a> when parsing using a parser expression grammar&quot;</i>?"}, {"owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "reply_to_user": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1426404665, "post_id": 29058109, "comment_id": 46353191, "body": "Depends on what you mean by &quot;one pass&quot;, and what you want to do.  The way I have defined it, there is only &quot;one pass&quot; of parsing.   If you insist on <i>compiling</i> in one pass, you will have to build symbol tables as you parse, and you will have to interpret symbol that the parser encounters as it encounters them, to check that their usage is valid, and then you will have to generate code.  It is pretty hard to do this well, this way. See <a href=\"http://stackoverflow.com/a/28970385/120163\">stackoverflow.com/a/28970385/120163</a>  It is especially hard to handle forward references; imagine your example invoked foo first, and declared bar later?"}, {"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1426405654, "post_id": 29058109, "comment_id": 46353360, "body": "<i>&quot;If you insist on compiling in one pass, you will have to build symbol tables as you parse, and you will have to interpret symbol that the parser encounters as it encounters them, to check that their usage is valid&quot;</i> That is exactly what I want to do, only I cannot see a way to do that while still parsing using a peg implementation, or at least not using rust-peg. I do not intend to implement forward references."}, {"owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "reply_to_user": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 1, "creation_date": 1426405911, "post_id": 29058109, "comment_id": 46353404, "body": "I don&#39;t know a lot about peg parsers (except they backtrack) let alone rust-peg.  In general decent parsers provide points in the parsing process where you can attach arbitrary actions (&quot;procedural attachment&quot;); you&#39;d have to implement the semantic actions (symbol table capture, checking, code generation) using such procedural attachments.  Here is were backtracking is NOT your friend:  imagine you call a semantic action when some grammar rule triggers... then later, the parser backtracks across the semantic action.  How are you going to undo it?  For me this means &quot;stay away from peg&quot;"}], "tags": [], "owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "is_accepted": false, "score": 4, "last_activity_date": 1426404325, "last_edit_date": 1426404325, "creation_date": 1426402975, "answer_id": 29058109, "question_id": 29057443, "link": "https://stackoverflow.com/questions/29057443/how-can-i-handle-previously-declared-constants-with-a-parser-expression-grammar/29058109#29058109", "title": "How can I handle previously declared constants with a parser expression grammar?", "body": "<p>You are confusing \"parsing\" (the recognition of a valid program, perhaps including capture of a representation of it [e.g, as an AST]) and semantic analysis and/or execution.</p>\n\n<p>Your parser should define what is <em>legal</em> to say, syntactically, in the language.  Nothing less, and nothing more.  You might be able to write some programs that are semantic nonsense that the parser will not complain about.</p>\n\n<p>Having parsed the text, you now need \"other passes\" over the parsed data (not the source text) to build classic compiler structures such as symbol tables, and to check that all uses of symbols are valid.  To do those other passes, you could arguably reparse the text but you've done that already once by assumption.  The standard solution here is to have the first parse build an abstract syntax tree (AST) representing the essential details of the program.   Those \"other passes\" operate by walking the AST rather than parsing the source text again.</p>\n\n<p>This is all classic and taught in standard compiler classes and books.  If you are serious about building a programming language, you will need this background.</p>\n"}], "owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 141, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1426404325, "creation_date": 1426396154, "last_edit_date": 1426396868, "question_id": 29057443, "link": "https://stackoverflow.com/questions/29057443/how-can-i-handle-previously-declared-constants-with-a-parser-expression-grammar", "title": "How can I handle previously declared constants with a parser expression grammar?", "body": "<p>Say I have the following, in a toy DSL:</p>\n\n<pre><code>int foo(int bar = 0);\n</code></pre>\n\n<p>With a tool such as <a href=\"https://github.com/kevinmehall/rust-peg\" rel=\"nofollow\">rust-peg</a>, I could define some simple parser expression grammar (PEG) rules to match it  (assume appropriate structs <code>FnProto</code> and 'Arg'):</p>\n\n<pre><code>function -&gt; FnProto\n  = t:type \" \" n:name \"(\" v:arglist \");\"\n  { FnProto { return_type:t, name:n, args:v } }\n\narglist -&gt; Vec&lt;Arg&gt;\n  = arg ** \",\"\n\narg -&gt; Arg\n  = t:type \" \" n:name \" = \" z:integer { Arg { typename:t, name:n, value:z } }\n\ntype -&gt; String\n  = \"int\" { match_str.to_string() }\n\nname -&gt; String\n  = [a-zA-Z_]+[a-zA-Z0-9_] { match_str.to_string() }\n\ninteger -&gt; i64\n  = \"-\"? [0-9]+ { match_str.parse().unwrap() }\n</code></pre>\n\n<p>In practice such simple rules are insufficient, but they will serve to illustrate my point.</p>\n\n<p>Now consider the following situation, where the default value of <code>bar</code> is a constant defined previously in the same file: </p>\n\n<pre><code>int BAZ = 0xDEADBEEF;\n\nint foo(int bar = BAZ);\n</code></pre>\n\n<p>Now the rule for parsing functions needs to accept not only integer literals as default argument values, but also any previously declared constants.</p>\n\n<p>I could do one pass to parse constants and substitute the appropriate values in a second pass, but do I really have to resort to two passes? Is there some way I can refer to previously parsed data from within a rule?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1426358114, "post_id": 29052558, "comment_id": 46343009, "body": "Weird, mine is compiling every time. Is the behavior different when you also have internal modules?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1426358189, "post_id": 29052558, "comment_id": 46343040, "body": "By &quot;<i>internal modules</i>&quot;, do you mean just other source files, with a corresponding <code>mod</code> statement? Or do you mean something else? If the former, then I can say that also does not cause recompilations. Perhaps your editor or something else is falsely updating the modification times?"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1426364099, "post_id": 29052558, "comment_id": 46344936, "body": "Hm, pretty sure VIM isn&#39;t touching them. Closed it just to be sure and it&#39;s still rebuilding every time. I ran <code>stat</code> to be sure. I edited my question to include my tree if that helps at all."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1426364375, "post_id": 29052558, "comment_id": 46345020, "body": "I just confirmed that I see the same behavior with a brand new project created with <code>cargo new --bin test</code>. Every time I run <code>cargo run</code> it compiles and runs. Rust version is <code>rustc 1.0.0-nightly (b0746ff19 2015-03-05) (built 2015-03-06)</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 1, "creation_date": 1426365478, "post_id": 29052558, "comment_id": 46345340, "body": "I&#39;d suggest updating to the newest lately, just to rule out any recent changes to Rust or Cargo. You could also try a <code>cargo clean</code> or <code>git clean</code>."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1426371090, "post_id": 29052558, "comment_id": 46347003, "body": "Yep, fixed on nightly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1426358539, "last_edit_date": 1426358539, "creation_date": 1426357404, "answer_id": 29052558, "question_id": 29052462, "link": "https://stackoverflow.com/questions/29052462/does-cargo-have-the-ability-to-detect-source-changes/29052558#29052558", "title": "Does cargo have the ability to detect source changes?", "body": "<p>Cargo does this by default.</p>\n\n<p>Create a new project:</p>\n\n<pre><code>$ cargo new --bin foo\n$ cd foo/\n</code></pre>\n\n<p>Run it:</p>\n\n<pre><code>$ cargo run\n   Compiling foo v0.0.1 (file:///private/tmp/foo)\n     Running `target/foo`\nHello, world!\n</code></pre>\n\n<p>Run it a second time, without changing anything:</p>\n\n<pre><code>$ cargo run\n     Running `target/foo`\nHello, world!\n</code></pre>\n\n<p>And update the file and run it again:</p>\n\n<pre><code>$ touch src/main.rs\n$ cargo run\n   Compiling foo v0.0.1 (file:///private/tmp/foo)\n     Running `target/foo`\nHello, world!\n</code></pre>\n\n<p>Note the lack of <code>Compiling foo...</code> in the second run. When the file is modified (here using <code>touch</code>), it is recompiled.</p>\n\n<p>For what it's worth, I'm using <code>cargo 0.0.1-pre-nightly (66849de 2015-03-10) (built 2015-03-11)</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "is_accepted": false, "score": 0, "last_activity_date": 1435695121, "creation_date": 1435695121, "answer_id": 31147634, "question_id": 29052462, "link": "https://stackoverflow.com/questions/29052462/does-cargo-have-the-ability-to-detect-source-changes/31147634#31147634", "title": "Does cargo have the ability to detect source changes?", "body": "<p>To answer the question you put in the title, \"Does cargo have the ability to detect source changes?\", the answer is yes, <code>cargo watch</code>. It's an extension to <code>cargo</code>, so you'll have to download it and compile it before you can use it. <a href=\"https://github.com/passcod/cargo-watch\" rel=\"nofollow\">https://github.com/passcod/cargo-watch</a></p>\n\n<p>Of course, from your detailed question it's clear that's not the question you meant to ask, but others who see the title and click the link probably do want the answer to that question.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 294, "favorite_count": 0, "accepted_answer_id": 29052558, "answer_count": 2, "score": 0, "last_activity_date": 1435695121, "creation_date": 1426356927, "last_edit_date": 1426364042, "question_id": 29052462, "link": "https://stackoverflow.com/questions/29052462/does-cargo-have-the-ability-to-detect-source-changes", "title": "Does cargo have the ability to detect source changes?", "body": "<p>Is there a way to do the equivalent of <code>cargo run</code> but only recompile if there are changes to the source files, like <code>make</code>?</p>\n\n<p><code>\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 input.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 dna.rs\n    \u251c\u2500\u2500 dynamic.rs\n    \u251c\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 main.rs\n</code></p>\n\n<p>EDIT: Added <code>tree</code> output.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 4, "creation_date": 1426359231, "post_id": 29050360, "comment_id": 46343394, "body": "that fact that &quot;calling the function is safe in all cases&quot; should be the precise criterion."}], "answers": [{"tags": [], "owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "is_accepted": true, "score": 15, "last_activity_date": 1428534802, "last_edit_date": 1428534802, "creation_date": 1426345711, "answer_id": 29050417, "question_id": 29050360, "link": "https://stackoverflow.com/questions/29050360/how-do-i-decide-when-to-mark-a-function-as-unsafe/29050417#29050417", "title": "How do I decide when to mark a function as unsafe?", "body": "<p>Mark a function as <code>unsafe</code> iff the function's safety depends on its parameters or on global state. If the function is safe regardless of arguments and global state, don't mark it as <code>unsafe</code>. Whether you consider a function that uses <code>unsafe</code> internally safe is the same as whether you consider a C program safe.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 5, "last_activity_date": 1426465815, "last_edit_date": 1426465815, "creation_date": 1426399303, "answer_id": 29057728, "question_id": 29050360, "link": "https://stackoverflow.com/questions/29050360/how-do-i-decide-when-to-mark-a-function-as-unsafe/29057728#29057728", "title": "How do I decide when to mark a function as unsafe?", "body": "<p><code>unsafe</code> is designed as a local mechanism to step around the type system when the compiler is unable to prove safety. If the behaviour encapsulated by the <code>unsafe</code> is safe, i.e. there is no way to call it that will cause memory unsafety, then there is no need to label the overall function unsafe. The user doesn't need to care if the function internals are implemented entirely with safe code or with <code>unsafe</code>, as long as the exposed interface is correct.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1002, "favorite_count": 1, "accepted_answer_id": 29050417, "answer_count": 2, "score": 7, "last_activity_date": 1428534802, "creation_date": 1426345349, "last_edit_date": 1495542224, "question_id": 29050360, "link": "https://stackoverflow.com/questions/29050360/how-do-i-decide-when-to-mark-a-function-as-unsafe", "title": "How do I decide when to mark a function as unsafe?", "body": "<p>When is it appropriate to mark a function as <code>unsafe</code> versus just using an <code>unsafe</code> block? I saw this function while reading <a href=\"https://stackoverflow.com/a/29042896/155423\">another answer</a>: </p>\n\n<pre><code>unsafe fn as_u8_slice(xs: &amp;[i32]) -&gt; &amp;[u8] {\n    std::slice::from_raw_parts(v.as_ptr() as *const u8, \n                               v.len() * std::mem::size_of::&lt;i32&gt;())\n}\n</code></pre>\n\n<p>I probably would have written the function as:</p>\n\n<pre><code>fn as_u8_slice(xs: &amp;[i32]) -&gt; &amp;[u8] {\n    unsafe {\n        std::slice::from_raw_parts(v.as_ptr() as *const u8, \n                                   v.len() * std::mem::size_of::&lt;i32&gt;())\n    }\n}\n</code></pre>\n\n<p>That is, I feel like <em>calling the function</em> is safe in all cases, but what the function does <em>internally</em> cannot be verified by the compiler. However, I don't have any rules for when it is appropriate to use one or the other.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426346704, "post_id": 29050285, "comment_id": 46339199, "body": "Potentially useful information in this older question: <a href=\"http://stackoverflow.com/q/28516996/155423\">How to create and write to memory mapped files</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1514132075, "last_edit_date": 1514132075, "creation_date": 1426346106, "answer_id": 29050486, "question_id": 29050285, "link": "https://stackoverflow.com/questions/29050285/fd-not-available-for-reading-or-writing-when-memory-mapping-a-file/29050486#29050486", "title": "&quot;fd not available for reading or writing&quot; when memory-mapping a file", "body": "<p>Files created with <a href=\"http://doc.rust-lang.org/std/fs/struct.File.html#method.create\" rel=\"nofollow noreferrer\"><code>File::create</code></a> are in write-only mode, but you are attempting to map the file for both reading and writing. Use <a href=\"http://doc.rust-lang.org/std/fs/struct.OpenOptions.html\" rel=\"nofollow noreferrer\"><code>OpenOptions</code></a> to get a file with both modes:</p>\n\n<pre><code>#![feature(os, std_misc)]\n\nuse std::fs::OpenOptions;\nuse std::os::MemoryMap;\nuse std::os::unix::prelude::AsRawFd;\nuse std::os::MapOption::{MapFd, MapReadable, MapWritable};\n\nfn main() {\n    let n = 100;\n\n    let f = OpenOptions::new()\n        .read(true)\n        .write(true)\n        .truncate(true)\n        .create(true)\n        .open(\"test.dat\")\n        .unwrap();\n\n    f.set_len(n as u64).unwrap();\n\n    let fd = f.as_raw_fd();\n\n    let mmap = MemoryMap::new(n, &amp;[MapReadable, MapWritable, MapFd(fd)]);\n\n    match mmap {\n        Ok(_) =&gt; println!(\"mmap success\"),\n        Err(err) =&gt; println!(\"mmap err = {}\", err),\n    }\n}\n</code></pre>\n\n<p>I figured this out by</p>\n\n<ol>\n<li><p>Grepping the code for \"fd not available for reading or writing\", which leads to <a href=\"https://github.com/rust-lang/rust/blob/3e4be02b80a3dd27bce20870958fe0aef7e7336d/src/libstd/os.rs#L888\" rel=\"nofollow noreferrer\">this line</a>, which aligns to <code>ErrFdNotAvail</code> (could also have changed <code>mmap err = {}</code> to <code>mmap err = {:?}</code>).</p></li>\n<li><p>Searching for that enum variant leads to <a href=\"https://github.com/rust-lang/rust/blob/3e4be02b80a3dd27bce20870958fe0aef7e7336d/src/libstd/os.rs#L979\" rel=\"nofollow noreferrer\">this line</a>, which maps the underlying <code>libc::EACCES</code> error.</p></li>\n<li><p>Checked out the <a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/mmap.2.html\" rel=\"nofollow noreferrer\">man page for <code>mmap</code></a> to see what <code>EACCES</code> says:</p></li>\n</ol>\n\n<blockquote>\n  <p>The flag PROT_READ was specified as part of the prot argument and fd was not open for reading. The flags MAP_SHARED and PROT_WRITE were specified as part of the flags and prot argument and fd was not open for writing.</p>\n</blockquote>\n"}], "owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 154, "favorite_count": 0, "accepted_answer_id": 29050486, "answer_count": 1, "score": 1, "last_activity_date": 1514132075, "creation_date": 1426344828, "last_edit_date": 1426346551, "question_id": 29050285, "link": "https://stackoverflow.com/questions/29050285/fd-not-available-for-reading-or-writing-when-memory-mapping-a-file", "title": "&quot;fd not available for reading or writing&quot; when memory-mapping a file", "body": "<p>I am trying to write data to a memory-mapped file in Rust but it won't memory map the specified file as it states the given fd is not available. </p>\n\n<p>I can see it on the filesystem so it does exist with correct privileges. I suspect this is either a bug or I am not using the new IO API in the correct way.</p>\n\n<p><code>mmap err = fd not available for reading or writing</code></p>\n\n<p>Here's the code</p>\n\n<pre><code>use std::fs::File;\nuse std::os::MemoryMap;\nuse std::os::unix::prelude::AsRawFd;\nuse std::os::MapOption::{MapFd, MapWritable, MapReadable};\n\nfn main() {\n    let f = File::create(\"test.dat\").unwrap();\n    f.set_len(n as u64);\n\n    let fd = f.as_raw_fd();\n\n    let mmap = MemoryMap::new(n, &amp;[MapReadable, MapWritable, MapFd(fd)]);\n\n    match mmap {\n        Ok(_) =&gt; println!(\"mmap success\"),\n        Err(ref err) =&gt; println!(\"mmap err = {}\", err),\n    }\n}\n</code></pre>\n"}, {"tags": ["pattern-matching", "rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1520058636, "last_edit_date": 1520058636, "creation_date": 1426335972, "answer_id": 29048898, "question_id": 29048833, "link": "https://stackoverflow.com/questions/29048833/how-do-i-match-a-string-in-a-struct-with-a-constant-value/29048898#29048898", "title": "How do I match a String in a struct with a constant value?", "body": "<p>It is not currently possible to do this in a single pattern, though at some time it is likely to become possible. For now, it\u2019s probably easiest to replace the pattern with a pattern and <a href=\"https://doc.rust-lang.org/book/second-edition/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\" rel=\"nofollow noreferrer\">match guard</a>, like this:</p>\n\n<pre><code>match s {\n    SomeStruct { ref a } if a == \"Test\" =&gt; {\n        println!(\"Match\");\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1529280583, "last_edit_date": 1529280583, "creation_date": 1520017397, "answer_id": 49075732, "question_id": 29048833, "link": "https://stackoverflow.com/questions/29048833/how-do-i-match-a-string-in-a-struct-with-a-constant-value/49075732#49075732", "title": "How do I match a String in a struct with a constant value?", "body": "<p>Thinking out of the box a bit, you can create a parallel type that has <code>&amp;str</code> instead of <code>String</code> and add a method to convert between them:</p>\n\n<pre><code>struct SomeStruct {\n    a: String,\n}\n\nimpl SomeStruct {\n    fn as_ref(&amp;self) -&gt; SomeStructRef {\n        SomeStructRef { a: &amp;self.a }\n    }\n}\n\nstruct SomeStructRef&lt;'a&gt; {\n    a: &amp;'a str,\n}\n\nfn main() {\n    let s = SomeStruct {\n        a: \"Test\".to_string(),\n    };\n    match s.as_ref() {\n        SomeStructRef { a: \"Test\" } =&gt; {\n            println!(\"Match\");\n        }\n        _ =&gt; panic!(),\n    }\n}\n</code></pre>\n\n<p>You can then also create a constant for the value you'd like to match against:</p>\n\n<pre><code>#[derive(PartialEq, Eq)]\nstruct SomeStructRef&lt;'a&gt; {\n    a: &amp;'a str,\n}\n\nconst TEST_STRUCT: SomeStructRef = SomeStructRef { a: \"Test\" };\n\nfn main() {\n    let s = SomeStruct {\n        a: \"Test\".to_string(),\n    };\n    match s.as_ref() {\n        TEST_STRUCT =&gt; {\n            println!(\"Match\");\n        }\n        _ =&gt; panic!(),\n    }\n}\n</code></pre>\n\n<p>There's nothing specific to structs here, the same concept works for enums:</p>\n\n<pre><code>enum SomeEnum {\n    One(String),\n    Two(String),\n}\n\nimpl SomeEnum {\n    fn as_ref(&amp;self) -&gt; SomeEnumRef {\n        match self {\n            SomeEnum::One(v) =&gt; SomeEnumRef::One(v),\n            SomeEnum::Two(v) =&gt; SomeEnumRef::Two(v),\n        }\n    }\n}\n\nenum SomeEnumRef&lt;'a&gt; {\n    One(&amp;'a str),\n    Two(&amp;'a str),\n}\n\nfn main() {\n    let s = SomeEnum::Two(\"Test\".to_string());\n    match s.as_ref() {\n        SomeEnumRef::Two(\"Test\") =&gt; {\n            println!(\"Match\");\n        }\n        _ =&gt; panic!(),\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1068, "user_id": 410238, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/523739b5cb268a2d00d3061c993f1707?s=128&d=identicon&r=PG", "display_name": "David Roe", "link": "https://stackoverflow.com/users/410238/david-roe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1219, "favorite_count": 1, "accepted_answer_id": 29048898, "answer_count": 2, "score": 4, "last_activity_date": 1529280583, "creation_date": 1426335560, "last_edit_date": 1520016025, "question_id": 29048833, "link": "https://stackoverflow.com/questions/29048833/how-do-i-match-a-string-in-a-struct-with-a-constant-value", "title": "How do I match a String in a struct with a constant value?", "body": "<p>Is it possible to match against a <code>String</code> in a struct in Rust with a static <code>str</code> value? Here is a minimal example:</p>\n\n<pre><code>struct SomeStruct {\n    a: String,\n}\n\nfn main() {\n    let s = SomeStruct {\n        a: \"Test\".to_string(),\n    };\n    match s {\n        SomeStruct { a: \"Test\" } =&gt; {\n            println!(\"Match\");\n        }\n    }\n}\n</code></pre>\n\n<p>This won't compile because the static <code>str</code> reference can't be matched against the <code>String</code> member. Can it be made to work without destructuring <code>a</code> and then adding a nested if statement in the match?</p>\n"}, {"tags": ["recursion", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426344757, "post_id": 29045790, "comment_id": 46338549, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27750985/cannot-move-out-of-dereference-of-mut-pointer-while-building-a-sorted-linke\">`cannot move out of dereference of `&amp;mut`-pointer` while building a sorted linked list</a>"}], "answers": [{"comments": [{"owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1426333935, "post_id": 29048134, "comment_id": 46335388, "body": "Ah, <code>take()</code> did the trick. I updated my question to show in more detail why taking a reference to the node as the first arg didn&#39;t seem to work (as well as make the intent of the code clearer), so I&#39;ll update your answer to show the fixed version using <code>take()</code> to suit."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 0, "last_activity_date": 1426335097, "last_edit_date": 1426335097, "creation_date": 1426330847, "answer_id": 29048134, "question_id": 29045790, "link": "https://stackoverflow.com/questions/29045790/avoid-partially-moved-value-when-taking-ownership-of-a-recursive-data-structure/29048134#29048134", "title": "Avoid partially moved value when taking ownership of a recursive data structure?", "body": "<p>Take the Option's value using <code>take()</code> (which itself uses <code>mem::replace()</code> under the covers):</p>\n\n\n\n<pre><code>fn put_after_node(maybe_node: Option&lt;Box&lt;Node&gt;&gt;, val: i32) -&gt; Box&lt;Node&gt; {\n    match maybe_node {\n        None =&gt; Box::new(Node { next: None, val: val }),\n        Some(mut node) =&gt; {\n            // note the node.next.take()\n            node.next = Some(put_after_node(node.next.take(), val));\n            node\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 197, "favorite_count": 0, "accepted_answer_id": 29048134, "answer_count": 1, "score": 4, "last_activity_date": 1426382081, "creation_date": 1426310942, "last_edit_date": 1495539804, "question_id": 29045790, "link": "https://stackoverflow.com/questions/29045790/avoid-partially-moved-value-when-taking-ownership-of-a-recursive-data-structure", "title": "Avoid partially moved value when taking ownership of a recursive data structure?", "body": "<p>Say I have a recursive data structure like a singly-linked list, and I want to write a recursive function to insert a value after the last node*:</p>\n\n<pre><code>struct Node {\n    next: Option&lt;Box&lt;Node&gt;&gt;,\n    val: i32,\n}\n\nfn put_after_node(maybe_node: Option&lt;Box&lt;Node&gt;&gt;, val: i32) -&gt; Box&lt;Node&gt; {\n    match maybe_node {\n        None =&gt; Box::new(Node { next: None, val: val }),\n        Some(mut node) =&gt; {\n            // compile error on next line: use of partially moved value: `node`\n            node.next = Some(put_after_node(node.next, val));\n            node\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Q: How do I avoid the compile error complaining that <code>node</code> has been partially moved?</strong></p>\n\n<p><em>Failed fix #1:</em> Avoiding taking ownership of the function's arguments, by taking <code>maybe_node: &amp;mut Option&lt;Box&lt;Node&gt;&gt;</code> instead. Failed because I need to add a new node and pass that back up the stack, and if I only have a mutable reference then I need to dereference it, which causes an illegal move out of borrowed value:</p>\n\n<pre><code>fn put_after_node(maybe_node: &amp;mut Option&lt;Box&lt;Node&gt;&gt;, val: i32) -&gt; Box&lt;Node&gt; {\n    match maybe_node {\n        &amp;mut None =&gt; Box::new(Node { next: None, val: val }),\n        &amp;mut Some(ref mut node) =&gt; {\n            node.next = Some(put_after_node(&amp;mut node.next, val));\n            *node // compile error: cannot move out of borrowed content\n        }\n    }\n}\n</code></pre>\n\n<p><em>Failed fix #2:</em> Return a reference to a new node instead (<code>fn ... -&gt; &amp;Box&lt;Node&gt;</code>). Failed because the new node doesn't live long enough (or at least, I can't work out how to specify the lifetime for the new node such that it does live at least as long as the reference to it that'd be returned from the function).</p>\n\n<pre><code>fn put_after_node(maybe_node: &amp;mut Option&lt;Box&lt;Node&gt;&gt;, val: i32) -&gt; &amp;Box&lt;Node&gt; {\n    match maybe_node {\n        // compile error on next line: borrowed value does not live long enough\n        &amp;mut None =&gt; &amp;Box::new(Node { next: None, val: val }),\n        &amp;mut Some(ref mut node) =&gt; {\n            // compile error on next line: cannot move out of borrowed content\n            node.next = Some(*put_after_node(&amp;mut node.next, val));\n            node\n        }\n    }\n}\n</code></pre>\n\n<p>(* The original snippet is a simplified version of a Rust transliteration that I'm attempting to do of <a href=\"http://algs4.cs.princeton.edu/33balanced/RedBlackBST.java.html\" rel=\"nofollow noreferrer\">this red black tree implementation</a>'s <code>put()</code>. I realise that the minimal example I've outlined here would be better as a loop, but that isn't the case for the code I'm actually trying to write.)</p>\n\n<p><strong>Update:</strong> I don't think this is a dup of <a href=\"https://stackoverflow.com/questions/27750985\">`cannot move out of dereference of `&amp;mut`-pointer` while building a sorted linked list</a> because a) I'm trying to deal with a different error message &amp; b) my <code>fn</code> takes <code>self</code> - not <code>&amp;mut self</code>. Having said that, I will probably try to rewrite it to take <code>&amp;mut self</code>, so thanks for the pointer @shepmaster.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 15, "last_activity_date": 1426272831, "creation_date": 1426272831, "answer_id": 29039875, "question_id": 29039450, "link": "https://stackoverflow.com/questions/29039450/why-are-tuples-not-destructured-when-iterating-over-an-array-of-tuples/29039875#29039875", "title": "Why are tuples not destructured when iterating over an array of tuples?", "body": "<p>The problem is that your pattern <code>(a, b)</code> is a tuple of type <code>(usize, usize)</code>, while your iterator returns references to tuples (i.e. <code>&amp;(usize, usize)</code>), so the typechecker rightly complains.</p>\n\n<p>You can solve this by adding an <code>&amp;</code> in your pattern, like this:</p>\n\n<pre><code>for &amp;(a,b) in x.iter() {\n</code></pre>\n"}], "owner": {"reputation": 1743, "user_id": 1056805, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/4db27c7d2549e64d21216f812ce84a4f?s=128&d=identicon&r=PG", "display_name": "user1056805", "link": "https://stackoverflow.com/users/1056805/user1056805"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1992, "favorite_count": 0, "accepted_answer_id": 29039875, "answer_count": 1, "score": 6, "last_activity_date": 1426274001, "creation_date": 1426271339, "last_edit_date": 1426274001, "question_id": 29039450, "link": "https://stackoverflow.com/questions/29039450/why-are-tuples-not-destructured-when-iterating-over-an-array-of-tuples", "title": "Why are tuples not destructured when iterating over an array of tuples?", "body": "<p>When iterating over an array of tuples, why does Rust not destructure the tuples? For example:</p>\n\n<pre><code>let x: &amp;[(usize, usize)] = &amp;[...];\n\nfor (a,b) in x.iter() {\n    ...\n}\n</code></pre>\n\n<p>leads to the error:</p>\n\n<pre><code>error: type mismatch resolving `&lt;core::slice::Iter&lt;'_, (usize, usize)&gt; as core::iter::Iterator&gt;::Item == (_, _)`:\nexpected &amp;-ptr,\nfound tuple [E0271]\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "edited": false, "score": 0, "creation_date": 1426264952, "post_id": 29037033, "comment_id": 46315772, "body": "I tried using mem::transmute but that didn&#39;t work."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1426265398, "post_id": 29037033, "comment_id": 46316036, "body": "If you want to write data to a file, you should use an encoding. Either <a href=\"https://github.com/TyOverby/bincode\" rel=\"nofollow noreferrer\"><code>bincode</code></a> or my own <a href=\"https://github.com/BurntSushi/cbor\" rel=\"nofollow noreferrer\"><code>cbor</code></a> would do nicely."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1426267108, "post_id": 29037033, "comment_id": 46317090, "body": "Are you worried about endianness or portability of this data across machines or versions of your software?"}, {"owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "edited": false, "score": 0, "creation_date": 1426268382, "post_id": 29037033, "comment_id": 46317869, "body": "I&#39;m not worried portability as it will always be on a fixed little-endian linux x86 servers"}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1426328649, "post_id": 29042896, "comment_id": 46334021, "body": "Wrap this in a function and have the return value borrow the input vec, so that you use the borrow checker as far as possible. <code>unsafe fn as_u8_slice(xs: &amp;[i32]) -&gt; &amp;[u8] { ... </code>"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1426335124, "post_id": 29042896, "comment_id": 46335705, "body": "You should really be constraining the slice&#39;s lifetime parameter somehow. The suggestion by the previous commenter looks like the best approach."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1426368940, "post_id": 29042896, "comment_id": 46346368, "body": "Your function should not be marked <code>unsafe</code>, for it exposes a completely safe interface."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1426370617, "post_id": 29042896, "comment_id": 46346875, "body": "No problem, I&#39;ve fixed it."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 12, "last_activity_date": 1523021378, "last_edit_date": 1523021378, "creation_date": 1426285065, "answer_id": 29042896, "question_id": 29037033, "link": "https://stackoverflow.com/questions/29037033/how-to-slice-a-large-veci32-as-u8/29042896#29042896", "title": "How to slice a large Vec&lt;i32&gt; as &amp;[u8]?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"noreferrer\"><code>std::slice::from_raw_parts</code></a>:</p>\n\n<pre><code>let v_bytes: &amp;[u8] = unsafe {\n    std::slice::from_raw_parts(\n        v.as_ptr() as *const u8,\n        v.len() * std::mem::size_of::&lt;i32&gt;(),\n    )\n};\n</code></pre>\n\n<p>Following the comments on this answer, you should wrap this code in a function and have the return value borrow the input, so that you use the borrow checker as far as possible:</p>\n\n<pre><code>fn as_u8_slice(v: &amp;[i32]) -&gt; &amp;[u8] {\n    unsafe {\n        std::slice::from_raw_parts(\n            v.as_ptr() as *const u8,\n            v.len() * std::mem::size_of::&lt;i32&gt;(),\n        )\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1562770657, "last_edit_date": 1562770657, "creation_date": 1426448675, "answer_id": 29065350, "question_id": 29037033, "link": "https://stackoverflow.com/questions/29037033/how-to-slice-a-large-veci32-as-u8/29065350#29065350", "title": "How to slice a large Vec&lt;i32&gt; as &amp;[u8]?", "body": "<p>Since Rust 1.30, the best solution is to use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\" rel=\"nofollow noreferrer\"><code>slice::align_to</code></a>:</p>\n\n<pre><code>fn main() {\n    let v: Vec&lt;i32&gt; = vec![1; 8];\n\n    let (head, body, tail) = unsafe { v.align_to::&lt;u8&gt;() };\n    assert!(head.is_empty());\n    assert!(tail.is_empty());\n\n    println!(\"{:#x?}\", body);\n}\n</code></pre>\n\n<p>This properly handles the cases where the alignment of the first type and the second type do not match. In this example, I ensure that the alignment of the <code>i32</code> is greater than that of the <code>u8</code> via the <code>assert!</code> statements.</p>\n\n<hr>\n\n<p>I took <a href=\"https://stackoverflow.com/a/29042896/155423\">@swizards answer</a> and ran with it a bit to get the other side of the coin - reading the vector back in:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{Read, Write};\nuse std::{mem, slice};\n\nfn as_u8_slice(v: &amp;[i32]) -&gt; &amp;[u8] {\n    let element_size = mem::size_of::&lt;i32&gt;();\n    unsafe { slice::from_raw_parts(v.as_ptr() as *const u8, v.len() * element_size) }\n}\n\nfn from_u8(v: Vec&lt;u8&gt;) -&gt; Vec&lt;i32&gt; {\n    let data = v.as_ptr();\n    let len = v.len();\n    let capacity = v.capacity();\n    let element_size = mem::size_of::&lt;i32&gt;();\n\n    // Make sure we have a proper amount of capacity (may be overkill)\n    assert_eq!(capacity % element_size, 0);\n    // Make sure we are going to read a full chunk of stuff\n    assert_eq!(len % element_size, 0);\n\n    unsafe {\n        // Don't allow the current vector to be dropped\n        // (which would invalidate the memory)\n        mem::forget(v);\n\n        Vec::from_raw_parts(\n            data as *mut i32,\n            len / element_size,\n            capacity / element_size,\n        )\n    }\n}\n\nfn do_write(filename: &amp;str, v: &amp;[i32]) {\n    let mut f = File::create(filename).unwrap();\n    f.write_all(as_u8_slice(v)).unwrap();\n}\n\nfn do_read(filename: &amp;str) -&gt; Vec&lt;i32&gt; {\n    let mut f = File::open(filename).unwrap();\n    let mut bytes = Vec::new();\n\n    f.read_to_end(&amp;mut bytes).unwrap();\n\n    from_u8(bytes)\n}\n\nfn main() {\n    let v = vec![42; 10];\n    do_write(\"vector.dump\", &amp;v);\n    let v2 = do_read(\"vector.dump\");\n\n    assert_eq!(v, v2);\n    println!(\"{:?}\", v2)\n}\n</code></pre>\n"}], "owner": {"reputation": 1406, "user_id": 1854658, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/3b07d0a414b016337c53121936ca9afb?s=128&d=identicon&r=PG", "display_name": "jimjampez", "link": "https://stackoverflow.com/users/1854658/jimjampez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3033, "favorite_count": 0, "accepted_answer_id": 29042896, "answer_count": 2, "score": 4, "last_activity_date": 1562770657, "creation_date": 1426263154, "last_edit_date": 1523021264, "question_id": 29037033, "link": "https://stackoverflow.com/questions/29037033/how-to-slice-a-large-veci32-as-u8", "title": "How to slice a large Vec&lt;i32&gt; as &amp;[u8]?", "body": "<p>I don't know how to convert a <code>Vec&lt;i32&gt;</code> into a <code>&amp;[u8]</code> slice.</p>\n\n<pre><code>fn main() {\n    let v: Vec&lt;i32&gt; = vec![1; 100_000_000];\n    let v_bytes: &amp;[u8] = /* ... */;\n}\n</code></pre>\n\n<p>I want to write a large <code>Vec&lt;i32&gt;</code> to a file so I can read it back at a future time.</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1426260240, "post_id": 29026565, "comment_id": 46312760, "body": "However, the second form is nice if it doesn&#39;t need a type ascription, i.e., in contexts where the <code>&amp;str</code> can be inferred, such as when passing arguments to non-generic functions."}, {"owner": {"reputation": 522, "user_id": 153612, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba347a31bc66bb2654de01850e914021?s=128&d=identicon&r=PG", "display_name": "Ta Thanh Dinh", "link": "https://stackoverflow.com/users/153612/ta-thanh-dinh"}, "edited": false, "score": 0, "creation_date": 1556446119, "post_id": 29026565, "comment_id": 98435461, "body": "&quot;... <code>&amp;</code> is not a pure reference operator: it also allows dereferencing to take place first.&quot;   Do you mean in the second case, it&#39;s really <code>let string_slice2: &amp;str = &amp;(*string);</code>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 12, "last_activity_date": 1576603299, "last_edit_date": 1576603299, "creation_date": 1426230108, "answer_id": 29026565, "question_id": 29026066, "link": "https://stackoverflow.com/questions/29026066/what-is-the-idiomatic-way-to-convert-a-string-to-str/29026565#29026565", "title": "What is the idiomatic way to convert a String to &amp;str?", "body": "<p>There are two important things here that <code>String</code> implements:</p>\n\n<ul>\n<li><p><code>Index&lt;RangeFull, Output = str&gt;</code>: this makes <code>string[..]</code> be of type <code>str</code>, though you need to take a reference to it (either by calling a method, allowing autoref to happen, or explicitly as <code>&amp;string[..]</code>). This explains the <code>string_slice1</code>.</p></li>\n<li><p><code>Deref&lt;Target = str&gt;</code>: this makes <code>*string</code> be of type <code>str</code>, with the same considerations on unsized types as in indexing. This is why <code>string_slice3</code> works and in a bit of hidden behaviour why <code>string_slice2</code> works.</p></li>\n</ul>\n\n<p>Unlike in C++, <code>&amp;</code> is not a pure reference operator: it also allows dereferencing to take place first. <code>&amp;string</code> will therefore normally be of type <code>&amp;String</code>, but it is possible for it to be of type <code>&amp;str</code> if necessary also. If, for example, you were to pass it to a method that took a <code>&amp;str</code>, it would work, or if you try to bind it to a variable of type <code>&amp;str</code>. This is why the <code>: &amp;str</code> is necessary for this case.</p>\n\n<p>General consensus is that type ascription is to be avoided where feasible, so the second form is not desirable. Between the first and third, there is no consensus as to which is more desirable yet.</p>\n\n<p>There's also <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.as_str\" rel=\"nofollow noreferrer\"><code>String::as_str</code></a>, which some prefer:</p>\n\n<pre><code>let string_slice4 = string.as_str();\n</code></pre>\n"}], "owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6662, "favorite_count": 1, "accepted_answer_id": 29026565, "answer_count": 1, "score": 5, "last_activity_date": 1576603299, "creation_date": 1426227721, "last_edit_date": 1576602935, "question_id": 29026066, "link": "https://stackoverflow.com/questions/29026066/what-is-the-idiomatic-way-to-convert-a-string-to-str", "title": "What is the idiomatic way to convert a String to &amp;str?", "body": "<p>I've found a number of ways to convert <code>String</code> to <code>&amp;str</code>. Which one is correct/idiomatic today?</p>\n\n<pre><code>let string = \"hello\".to_string();\n\nlet string_slice1 = &amp;string[..];\nlet string_slice2: &amp;str = &amp;string;\nlet string_slice3 = &amp;*string;\n</code></pre>\n\n<p>How would I make the second method work without specifying type in variable declaration? Something like <code>&amp;string as &amp;str</code> (but it doesn't work). I see that <code>&amp;string</code> has <code>&amp;String</code> type but when it is implicitly cast to <code>&amp;str</code>, it will perform implicit conversion. How do I make that conversion explicit?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426230270, "post_id": 29025811, "comment_id": 46295050, "body": "Why do you want it as a separate function? <code>v as u8</code> does what you desire just fine, and if you need it as a function then <code>|v| v as u8</code> will work fine."}, {"owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426232655, "post_id": 29025811, "comment_id": 46295947, "body": "@Chris: The function above is of course only the essence of what I want to do \u2013 or should I have posted 2000+ lines of code? I cannot write <code>v as u8</code> because <code>u8</code> was just an example. Trust me, I need a cast to a generic type, not to a specific type."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426250561, "post_id": 29025811, "comment_id": 46305866, "body": "With the request given, it\u2019s tricky to perceive the <i>purpose</i> of the whole question, why the function can be needed. Something a little more would probably be helpful."}, {"owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426264449, "post_id": 29025811, "comment_id": 46315469, "body": "The exact context of my problem would go beyond the scope of the question and isn&#39;t really needed for a solution. But if you&#39;re interested: I develop software for formal verification and want to simulate boolean functions using lookup-tables. For this, I have a template of 6 u64 values which have to be truncated to the length needed for the respective number of boolean inputs (e.g., u16 for 4 inputs)."}], "answers": [{"comments": [{"owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "edited": false, "score": 0, "creation_date": 1426263983, "post_id": 29032520, "comment_id": 46315193, "body": "Thanks, that is a very idomatic solution!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1426250489, "creation_date": 1426250489, "answer_id": 29032520, "question_id": 29025811, "link": "https://stackoverflow.com/questions/29025811/how-do-i-cast-a-u64-value-to-a-generic-numeric-type/29032520#29032520", "title": "How do I cast a u64 value to a generic numeric type?", "body": "<p>One way to do this particularly efficiently is to define your own trait with the desired effect; especially if you are getting to something more complex, this will often be what you desire (though definitely not always). For this case, you might go for something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait FromU64 {\n    fn from_u64(v: u64) -&gt; Self;\n}\n\nmacro_rules! impl_from_u64 {\n    ($($ty:ty)*) =&gt; {\n        $(\n            impl FromU64 for $ty {\n                #[inline]\n                fn from_u64(v: u64) -&gt; $ty {\n                    v as $ty\n                }\n            }\n        )*\n    }\n}\n\nimpl_from_u64!(u8 u16 u32 u64 usize);\n</code></pre>\n\n<p>Your original <code>f::&lt;T&gt;</code> would then be <code>&lt;T as FromU64&gt;::from_u64</code>, or alternatively</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn f&lt;T: FromU64&gt;(v: u64) -&gt; T {\n    FromU64::from_u64(T)\n}\n</code></pre>\n"}], "owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1131, "favorite_count": 0, "accepted_answer_id": 29032520, "answer_count": 1, "score": 1, "last_activity_date": 1426251985, "creation_date": 1426226500, "last_edit_date": 1426251985, "question_id": 29025811, "link": "https://stackoverflow.com/questions/29025811/how-do-i-cast-a-u64-value-to-a-generic-numeric-type", "title": "How do I cast a u64 value to a generic numeric type?", "body": "<p>I would like to cast a u64 value to a generic numeric type, something like</p>\n\n<pre><code>fn f&lt;T: AppropriateTrait&gt;(v: u64) -&gt; T {\n    v as T\n}\n</code></pre>\n\n<p>and have it behave semantically like, e.g., <code>259u64 as u8</code>, i.e., it should just take the least significant bits. Unfortunately, the <code>FromPrimitive::from_u64</code> function returns an <code>Option&lt;T&gt;</code>, with <code>None</code> if the input value doesn't fit.</p>\n\n<p>This here works:</p>\n\n<pre><code>fn f&lt;T: FromPrimitive + Int + ToPrimitive&gt;(v: u64) -&gt; T {\n    T::from_u64(v &amp; T::max_value().to_u64().unwrap()).unwrap()\n}\n</code></pre>\n\n<p>But it's very verbose and inelegant. Is there a better way?</p>\n\n<p><em>Edit</em>: I'm only interested in casting to integer types like u8, u16, etc., no funky stuff.</p>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1426252250, "post_id": 29024019, "comment_id": 46307058, "body": "Is there a reason you are unable to use <code>String</code> or <code>Vec</code>?"}], "answers": [{"comments": [{"owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "edited": false, "score": 0, "creation_date": 1426262969, "post_id": 29024427, "comment_id": 46314594, "body": "<code>String</code> was exactly what I needed. Thanks."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1426217398, "creation_date": 1426217398, "answer_id": 29024427, "question_id": 29024019, "link": "https://stackoverflow.com/questions/29024019/how-can-i-create-an-owning-pointer-to-an-unsized-type/29024427#29024427", "title": "How can I create an owning pointer to an unsized type?", "body": "<p><code>Box&lt;T&gt;</code> works for an unsized <code>T</code>; thus <code>Box&lt;str&gt;</code>, <code>Box&lt;[T]&gt;</code> and so forth. The important distinction to note between <code>Box&lt;str&gt;</code> and <code>String</code> is that the latter has a capacity member as well, increasing its memory usage by one word but allowing for efficient appending as it may not need to reallocate for every push, whereas a similar method on a <code>Box&lt;str&gt;</code> would need to. The same is true of <code>Box&lt;[T]&gt;</code> versus <code>Vec&lt;T&gt;</code>, with the former being a fixed-size slice while the latter is conveniently growable. Unlike <code>Box&lt;str&gt;</code>, <code>Box&lt;[T]&gt;</code> <em>is</em> actually used in real life; the <code>vec!</code> macro uses it for efficiency, as a <code>Box&lt;[T]&gt;</code> can be written out literally and then converted to a <code>Vec&lt;T&gt;</code> at no cost.</p>\n"}], "owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 344, "favorite_count": 0, "accepted_answer_id": 29024427, "answer_count": 1, "score": 0, "last_activity_date": 1426253190, "creation_date": 1426214463, "last_edit_date": 1426253190, "question_id": 29024019, "link": "https://stackoverflow.com/questions/29024019/how-can-i-create-an-owning-pointer-to-an-unsized-type", "title": "How can I create an owning pointer to an unsized type?", "body": "<p>Dealing with values of type <code>str</code> in Rust is clumsy because they do not implement the trait <code>Sized</code>. Therefore, they can only be accessed by pointer.</p>\n\n<p>For my application, using ordinary pointers with lifetimes is not very helpful. Rather, I want an owning fat pointer that guarantees that the contained object will last as long as the pointer does (and no longer), but allows holding values of unknown size.</p>\n"}, {"tags": ["macos", "linker", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1426210728, "post_id": 29023305, "comment_id": 46289641, "body": "What does <code>which cc</code> return?"}, {"owner": {"reputation": 209, "user_id": 4088160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/854a537d34921413fc7777aab0ea9b04?s=128&d=identicon&r=PG&f=1", "display_name": "abips", "link": "https://stackoverflow.com/users/4088160/abips"}, "reply_to_user": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1426230836, "post_id": 29023305, "comment_id": 46295277, "body": "Currently I have made an <code>alias</code> in my <code>.bash_profile</code> as <code>alias cc=gcc</code>. Hence it returns nothing."}], "answers": [{"comments": [{"owner": {"reputation": 209, "user_id": 4088160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/854a537d34921413fc7777aab0ea9b04?s=128&d=identicon&r=PG&f=1", "display_name": "abips", "link": "https://stackoverflow.com/users/4088160/abips"}, "edited": false, "score": 1, "creation_date": 1426263543, "post_id": 29034767, "comment_id": 46314954, "body": "I reinstalled <code>llvm</code> and <code>gcc</code> through OSX Command Line Tools and it worked fine."}, {"owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "reply_to_user": {"reputation": 209, "user_id": 4088160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/854a537d34921413fc7777aab0ea9b04?s=128&d=identicon&r=PG&f=1", "display_name": "abips", "link": "https://stackoverflow.com/users/4088160/abips"}, "edited": false, "score": 1, "creation_date": 1429750538, "post_id": 29034767, "comment_id": 47751195, "body": "As @abips did in OSX, I installed gcc in LInux and it resolved this problem."}, {"owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "edited": false, "score": 4, "creation_date": 1509675336, "post_id": 29034767, "comment_id": 81124628, "body": "For posterity, the problem was fixed on debian by <code>sudo apt-get install gcc</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1541515348, "last_edit_date": 1541515348, "creation_date": 1426256784, "answer_id": 29034767, "question_id": 29023305, "link": "https://stackoverflow.com/questions/29023305/could-not-exec-the-linker-cc-error-when-running-cargo-build/29034767#29034767", "title": "Could not exec the linker `cc` error when running &quot;cargo build&quot;", "body": "<p>It looks like you have installed GCC and LLVM/clang via Homebrew. Checking out the <a href=\"https://github.com/rust-lang/rust/blob/dd077d5decbc3e462a9fe2feb1a0af0486897acb/src/librustc_back/target/apple_base.rs#L18\" rel=\"nofollow noreferrer\">shared macOS configurations</a>, the linker defaults to <code>cc</code>. I have installed the macOS developer tools:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ clang --version\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin13.4.0\nThread model: posix\n\n$ gcc --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin13.4.0\nThread model: posix\n\n$ cc --version\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin13.4.0\nThread model: posix\n</code></pre>\n\n<p>This is potentially something that Rust itself could fix, but you'd have to file a bug report / enhancement request. It's possible that you might be able to work around this by symlinking <code>clang</code> as <code>cc</code>, instead of just aliasing it, as aliases probably don't exist in the environment that Rust is calling out from. </p>\n"}], "owner": {"reputation": 209, "user_id": 4088160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/854a537d34921413fc7777aab0ea9b04?s=128&d=identicon&r=PG&f=1", "display_name": "abips", "link": "https://stackoverflow.com/users/4088160/abips"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5942, "favorite_count": 0, "accepted_answer_id": 29034767, "answer_count": 1, "score": 12, "last_activity_date": 1541515348, "creation_date": 1426209869, "last_edit_date": 1509676782, "question_id": 29023305, "link": "https://stackoverflow.com/questions/29023305/could-not-exec-the-linker-cc-error-when-running-cargo-build", "title": "Could not exec the linker `cc` error when running &quot;cargo build&quot;", "body": "<p>I just installed Rust on my Mac and <code>rustc --version --verbose</code> displays</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.0.0-nightly (91bdf23f5 2015-03-09) (built 2015-03-08)\nbinary: rustc\ncommit-hash: 91bdf23f504f79ed59617cde3dfebd3d5e39a476\ncommit-date: 2015-03-09\nbuild-date: 2015-03-08\nhost: x86_64-apple-darwin\nrelease: 1.0.0-nightly\n</code></pre>\n\n<p>I cloned a couple of repositories (<a href=\"https://github.com/thehydroimpulse/postgres-extension.rs\" rel=\"noreferrer\">postgres-extension</a> and <a href=\"https://github.com/lavrin/erlang-rust-nif\" rel=\"noreferrer\">erlang-rust-nif</a>) and ran <code>cargo build</code> upon both of them. Both reported the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: could not exec the linker `cc`: No such file or directory (os error 2)\nerror: aborting due to previous error\n</code></pre>\n\n<p>Additionally, I wasn't able to compile a simple Rust file printing <code>\"hello world\"</code> using rustc.  I was only able to compile them by passing the flags <code>rustc -C linker=gcc hello_world.rs</code>.</p>\n\n<p><code>clang --version</code> displays</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>clang version 3.4.2  (http://llvm.org/git/llvm.git 5c6aa738fb3325ae499454877f1e2926d2368135)\nTarget: x86_64-apple-darwin12.2.1\nThread model: posix\n</code></pre>\n\n<p><code>gcc --version</code> displays</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>gcc (Homebrew gcc49 4.9.2_1) 4.9.2\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1426231372, "post_id": 29022991, "comment_id": 46295501, "body": "you might be interested in the <code>?</code> postfix operator: <a href=\"https://github.com/rust-lang/rust/pull/23040\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/23040</a>"}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1426261138, "post_id": 29022991, "comment_id": 46313354, "body": "@ker Interesting, I hadn&#39;t seen that. That operator seems to just be syntactic sugar for <code>try!</code>, which interrupts control flow to return if you see an error value, while the <code>wrap_err</code> method that I describe propagates the error through the chained method calls. That may be what is more useful in a wider variety of cases, but there are cases where getting a <code>Result</code> from chained method calls without interrupting your control flow may also be useful."}], "answers": [{"comments": [{"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1426209073, "post_id": 29023079, "comment_id": 46289267, "body": "That&#39;s true, this would become even more convenient if <code>and_then</code> did this automatically. I think you would need to call <code>op(t).map_err(FromError::from_error)</code> in the <code>Ok</code> case as well."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1426210064, "post_id": 29023079, "comment_id": 46289479, "body": "Actually, would it be backwards incompatible? There&#39;s a catch-all <code>impl&lt;E&gt; FromError&lt;E&gt; for E</code> so that all types implement <code>from_error</code> to themselves as the identity function, so for all existing code that uses <code>and_then</code> where both error types are the same, the types would work out and the <code>FromError</code> calls would just do nothing (and hopefully be optimized out). Is there a way in which that would not be considered backwards-compatible?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1426211742, "post_id": 29023079, "comment_id": 46289915, "body": "It would be slightly incompatible because some generic combinations that can be resolved uniquely at present would no longer be able to be resolved uniquely."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1426208760, "last_edit_date": 1426208760, "creation_date": 1426208356, "answer_id": 29023079, "question_id": 29022991, "link": "https://stackoverflow.com/questions/29022991/equivalent-of-map-err-that-uses-from-error-automatically/29023079#29023079", "title": "Equivalent of map_err that uses from_error automatically", "body": "<p>There is no such method at least at present. I believe that in practical situations <code>try!</code> is used somewhat more commonly than the method chaining approach (and it tends to yield nicer code in my opinion), so it\u2019s not been such an important consideration.</p>\n\n<p>Potentially more interesting as a design consideration would be changing <code>and_then</code> et al. to use <code>FromError</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn and_then&lt;U, E2: FromError&lt;E&gt;, F: FnOnce(T) -&gt; Result&lt;U, E2&gt;&gt;\n               (self, op: F) -&gt; Result&lt;U, E2&gt; {\n    match self {\n        Ok(t) =&gt; op(t),\n        Err(e) =&gt; Err(FromError::from_error(e)),\n    }\n}\n</code></pre>\n\n<p>\u2026 but I don\u2019t believe this will happen, because they\u2019re marked stable and it would be a just slightly backwards-incompatible change.</p>\n"}], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1111, "favorite_count": 1, "accepted_answer_id": 29023079, "answer_count": 1, "score": 3, "last_activity_date": 1426208760, "creation_date": 1426207757, "last_edit_date": 1495542740, "question_id": 29022991, "link": "https://stackoverflow.com/questions/29022991/equivalent-of-map-err-that-uses-from-error-automatically", "title": "Equivalent of map_err that uses from_error automatically", "body": "<p><code>Result</code> has an <code>map_err</code> function that allows you to map <code>Result&lt;T, E&gt;</code> to a <code>Result&lt;T, F&gt;</code> by applying a function to the error value.</p>\n\n<p>For types that implement <code>FromError</code>, the most natural function to apply would just be <code>FromError::from_error</code>, leading to something like the following:</p>\n\n<pre><code>foo()\n  .map_err(FromError::from_error)\n  .and_then(|val| {\n      val.do_something().map_err(FromError::from_err)\n  })\n</code></pre>\n\n<p>It seems that for this kind of use case, there should be a less cumbersome method defined on <code>Result&lt;T, E&gt; where E: Error</code> that calls <code>FromError::from_error</code> less verbosely, something like the following but with a better name:</p>\n\n<pre><code>foo()\n  .wrap_err()\n  .and_then(|val| {\n      val.do_something().wrap_err()\n  })\n</code></pre>\n\n<p>This would just be equivalent to <code>.map_err(FromError::from_error)</code>, simply shorter and more convenient for when you're doing this kind of method chaining.</p>\n\n<p>Is there something like this defined anywhere? I could not find it, though I'm not sure if I was looking in all of the right places in the documentation.</p>\n\n<p>This question was inspired my my answer to <a href=\"https://stackoverflow.com/a/29022330/69755\">this one</a>, in which I described both <code>FromError</code> for use with <code>try!</code> but realized it didn't help with the method-chaining style being used there.</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426205575, "post_id": 29022016, "comment_id": 46288373, "body": "You may find <a href=\"http://stackoverflow.com/a/28912145/497043\">stackoverflow.com/a/28912145/497043</a> to be of value."}], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1426234241, "post_id": 29022330, "comment_id": 46296644, "body": "Enum variants can be used as functions, so there is no need to create closures explicitly: <code>.map_err(MyError::Io)</code> and <code>.map_err(MyError::Utf8)</code> should work as well."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1426260380, "post_id": 29022330, "comment_id": 46312863, "body": "@VladimirMatveev Ah, I was wondering if that would work but hadn&#39;t checked. Thanks!"}], "tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": false, "score": 3, "last_activity_date": 1426260315, "last_edit_date": 1426260315, "creation_date": 1426203303, "answer_id": 29022330, "question_id": 29022016, "link": "https://stackoverflow.com/questions/29022016/how-to-get-resultt-e1-aligned-with-resultt-e2/29022330#29022330", "title": "How to get Result&lt;T, E1&gt; aligned with Result&lt;T,E2&gt;?", "body": "<p>The problem is that the closure passed to the <code>and_then</code> needs to return a <code>Result</code> with the same error type as the <code>Result</code> that <code>and_then</code> was called on; otherwise, there's no single type that <code>and_then</code> could return; <code>and_then</code> maps one <code>Ok</code> type to another, but keeps the error type the same.</p>\n\n<p>Since you are just throwing away the error value by converting it to an option with <code>ok()</code> that you unwrap anyhow, you can do that before calling <code>and_then</code>, and within the closure, as the <code>Option</code> type returned by <code>and_then</code> on an <code>Option</code> only depends on the value returned by the closure:</p>\n\n<pre><code>fn get_last_commit () -&gt; String {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .output()\n            .ok()\n            .and_then(|output| {\n                String::from_utf8(output.stdout).ok()\n            })\n            .expect(\"error invoking git rev-parse\")\n}\n</code></pre>\n\n<p>If you actually cared about the error value, you would need to define your own error type that could contain either of the two types of errors, and wrap either of the errors up. The <code>FromError</code> trait and <code>try!</code> macro offer a convenient way to is wrap up the value and return it from one of several places in your function, though in this case <code>map_err</code> would probably be a better way to do that as you are doing it all via chained method calls rather than separate statements.</p>\n\n<pre><code>enum MyError {\n    Io(IoError),\n    Utf8(FromUtf8Error)\n}\n\nfn get_last_commit () -&gt; Result&lt;String,MyError&gt; {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .output()\n            .map_err(MyError::Io)\n            .and_then(|output| {\n                String::from_utf8(output.stdout)\n                       .map_err(MyError::Utf8)\n            })\n}\n</code></pre>\n\n<p>If you notice, this parallels the earlier solution fairly closely, coercing both of the result types into a single common type; in the first solution, it just throws away the error value by using <code>ok()</code>, while in the second, it preserves the error value so you can return it, but you now need the extra machinery of a type that could wrap either.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 213, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1426260315, "creation_date": 1426201582, "last_edit_date": 1426202691, "question_id": 29022016, "link": "https://stackoverflow.com/questions/29022016/how-to-get-resultt-e1-aligned-with-resultt-e2", "title": "How to get Result&lt;T, E1&gt; aligned with Result&lt;T,E2&gt;?", "body": "<p>I have this code</p>\n\n<pre><code>fn get_last_commit () -&gt; String {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .output()\n            .map(|output| {\n                String::from_utf8(output.stdout).ok().expect(\"error reading into string\")\n            })\n            .ok().expect(\"error invoking git rev-parse\")\n}\n</code></pre>\n\n<p>I'd like to be able to cut the <code>ok().expect(..)</code> a bit down so that I ideally have something like that:</p>\n\n<pre><code>fn get_last_commit () -&gt; String {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .output()\n            .and_then(|output| {\n                String::from_utf8(output.stdout)\n            })\n            .ok().expect(\"error invoking git rev-parse\")\n}\n</code></pre>\n\n<p>However, that doesn't work because the errors don't line up leaving me with: </p>\n\n<pre><code>    mismatched types:\n     expected `core::result::Result&lt;_, std::io::error::Error&gt;`,\n        found `core::result::Result&lt;collections::string::String, collections::string::FromUtf8Error&gt;`\n    (expected struct `std::io::error::Error`,\n        found struct `collections::string::FromUtf8Error`)\n</code></pre>\n\n<p>I know the error handling changed quite a bit within the last month and I have the feeling there should be away to get them aligned without too much hassle. I seem unable to figure it out though.</p>\n"}, {"tags": ["rust", "chaining"], "answers": [{"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1426201673, "post_id": 29021667, "comment_id": 46287112, "body": "OK, I promise to write one. Not sure if still today because it&#39;s midnight already but I promise I will. I&#39;m still scratching my head over this one ;) <a href=\"http://stackoverflow.com/questions/29022016/how-to-get-resultt-e1-aligned-with-resultt-e2-in-rust\" title=\"how to get resultt e1 aligned with resultt e2 in rust\">stackoverflow.com/questions/29022016/&hellip;</a>"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1426202615, "post_id": 29021667, "comment_id": 46287426, "body": "I actually even started writing it ;)"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 2, "creation_date": 1426204073, "post_id": 29021667, "comment_id": 46287918, "body": "Here it is <a href=\"https://github.com/cburgdorf/rfcs/blob/read_to_string/text/0841-read_to_string_without_buffer.md\" rel=\"nofollow noreferrer\">github.com/cburgdorf/rfcs/blob/read_to_string/text/&hellip;</a>"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1426200071, "creation_date": 1426200071, "answer_id": 29021667, "question_id": 29021089, "link": "https://stackoverflow.com/questions/29021089/how-to-create-chaining-api-after-read-to-string-was-changed-to-take-a-buffer/29021667#29021667", "title": "How to create chaining API after read_to_string was changed to take a buffer?", "body": "<p>This API was changed so that you didn't have to re-allocate a new <code>String</code> each time. However, as you've noticed, there's some convenience loss if you don't care about allocation. It might be a good idea to suggest re-adding this back in, like what happened with <code>Vec::from_elem</code>. Maybe open a small RFC?</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1426203140, "creation_date": 1426203140, "answer_id": 29022296, "question_id": 29021089, "link": "https://stackoverflow.com/questions/29021089/how-to-create-chaining-api-after-read-to-string-was-changed-to-take-a-buffer/29022296#29022296", "title": "How to create chaining API after read_to_string was changed to take a buffer?", "body": "<p>While it may make sense to try to add this back to the standard library, here's a version of <code>read_to_string</code> that allocates on its own that you can use today:</p>\n\n<pre><code>#![feature(io)]\n\nuse std::io::{self,Read,Cursor};\n\ntrait MyRead: Read {\n    fn read_full_string(&amp;mut self) -&gt; io::Result&lt;String&gt; {\n        let mut s = String::new();\n        let r = self.read_to_string(&amp;mut s);\n        r.map(|_| s)\n    }\n}\n\nimpl&lt;T&gt; MyRead for T where T: Read {}\n\nfn main() {\n    let bytes = b\"hello\";\n    let mut input = Cursor::new(bytes);\n    let s = input.read_full_string();\n    println!(\"{}\", s.unwrap());\n}\n</code></pre>\n\n<p>This should allow you to use the chaining style you had before.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 2, "last_activity_date": 1426203668, "creation_date": 1426203668, "answer_id": 29022381, "question_id": 29021089, "link": "https://stackoverflow.com/questions/29021089/how-to-create-chaining-api-after-read-to-string-was-changed-to-take-a-buffer/29022381#29022381", "title": "How to create chaining API after read_to_string was changed to take a buffer?", "body": "<p>As others have said, this was changed to allow reusing buffers/avoiding allocations.</p>\n\n<p>Another alternative is to use <code>read_to_string</code> and manually provide the buffer:</p>\n\n<pre><code>pub fn get_last_commit () -&gt; String {\n    let mut string = String::new();\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .spawn()\n            .ok().expect(\"failed to invoke rev-parse\")\n            .stdout.as_mut().unwrap()\n            .read_to_string(&amp;mut string)\n            .ok().expect(\"failed to get last commit\");\n\n    string\n}\n</code></pre>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 222, "favorite_count": 0, "answer_count": 3, "score": 0, "last_activity_date": 1426203668, "creation_date": 1426197707, "last_edit_date": 1426199371, "question_id": 29021089, "link": "https://stackoverflow.com/questions/29021089/how-to-create-chaining-api-after-read-to-string-was-changed-to-take-a-buffer", "title": "How to create chaining API after read_to_string was changed to take a buffer?", "body": "<p>I'm trying to port my library <a href=\"https://github.com/thoughtram/clog\" rel=\"nofollow\">clog</a> to the latest Rust version.</p>\n\n<p>Rust changed a lot in the previous month and so I'm scratching my head over this code asking myself if there's really no way anymore to write this in a completely chained way?</p>\n\n<pre><code>fn get_last_commit () -&gt; String {\n\n    let output = Command::new(\"git\")\n                    .arg(\"rev-parse\")\n                    .arg(\"HEAD\")\n                    .output()\n                    .ok().expect(\"error invoking git rev-parse\");\n\n    let encoded = String::from_utf8(output.stdout).ok().expect(\"error parsing output of git rev-parse\");\n\n    encoded\n}\n</code></pre>\n\n<p>In an older version of Rust the code could be written like that</p>\n\n<pre><code>pub fn get_last_commit () -&gt; String {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .spawn()\n            .ok().expect(\"failed to invoke rev-parse\")\n            .stdout.as_mut().unwrap().read_to_string()\n            .ok().expect(\"failed to get last commit\")\n}\n</code></pre>\n\n<p>It seems there is no <code>read_to_string()</code> method anymore that doesn't take a buffer which makes it hard to implement a chaining API unless I'm missing something.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Ok, I figured I can use <code>map</code> to get it chaining.</p>\n\n<pre><code>fn get_last_commit () -&gt; String {\n\n    Command::new(\"git\")\n            .arg(\"rev-parse\")\n            .arg(\"HEAD\")\n            .output()\n            .map(|output| {\n                String::from_utf8(output.stdout).ok().expect(\"error reading into string\")\n            })\n            .ok().expect(\"error invoking git rev-parse\")\n}\n</code></pre>\n\n<p>Actually I wonder if I could use <code>and then</code> but it seems the errors don't line up correctly ;)</p>\n"}, {"tags": ["namespaces", "rust", "std", "using"], "answers": [{"tags": [], "owner": {"reputation": 2821, "user_id": 3071928, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/exR74.jpg?s=128&g=1", "display_name": "Binkan Salaryman", "link": "https://stackoverflow.com/users/3071928/binkan-salaryman"}, "is_accepted": false, "score": -1, "last_activity_date": 1426175305, "last_edit_date": 1426175305, "creation_date": 1426173817, "answer_id": 29013753, "question_id": 29013617, "link": "https://stackoverflow.com/questions/29013617/rust-use-vs-c-using-namespace/29013753#29013753", "title": "Rust &quot;use&quot; vs. C++ &quot;using namespace&quot;", "body": "<p><code>using System;</code> in C# is totally normal and in Java, you even don't need to write <code>import java.lang.*;</code> as it is already imported by default. And I don't see any flaw in writing multiple statements - if you need to call something with the same name, you can always call identifiers with their full name, as you did in your second code example.</p>\n\n<p>P.S.: Sorry for writing an opinion driven answer^^</p>\n"}, {"comments": [{"owner": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 9, "creation_date": 1426177510, "post_id": 29014147, "comment_id": 46274947, "body": "Note that C++ also has single-name <code>using</code>, e.g. <code>using std::cout;</code> works just fine in C++. So no, <code>using</code> is not a glob import statement. <code>using namespace</code> on the other hand, is, and it is quite self-explanatory in its effect."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 0, "creation_date": 1426177745, "post_id": 29014147, "comment_id": 46275123, "body": "Ah, sorry, you&#39;re right. I don&#39;t work much with C++, so I certainly could be mistaken."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 21, "last_activity_date": 1444753874, "last_edit_date": 1444753874, "creation_date": 1426174896, "answer_id": 29014147, "question_id": 29013617, "link": "https://stackoverflow.com/questions/29013617/rust-use-vs-c-using-namespace/29014147#29014147", "title": "Rust &quot;use&quot; vs. C++ &quot;using namespace&quot;", "body": "<p>You are probably confused by the similarly looked names (<code>use</code> and <code>using namespace</code>). In fact they are very different in semantics.</p>\n\n<p><code>using namespace</code> in C++ includes the whole contents of a namespace into the current scope, so, for example, you can use <code>cout</code> instead of <code>std::cout</code>:</p>\n\n<pre><code>using namespace std;\n\ncout &lt;&lt; \"Hello!\\n\";\n</code></pre>\n\n<p><code>use</code> in Rust, however, includes only the specified name, so you still have to qualify which item you are actually referring to:</p>\n\n<pre><code>use std::mem;\nuse std::fmt::Debug;\n\nfn do_something&lt;T: Debug&gt;(t: T) { ... }\n\nfn main() {\n    let (mut x, mut y) = ...;\n    mem::swap(&amp;mut x, &amp;mut y);\n}\n</code></pre>\n\n<p>Note how <code>Debug</code> is used without qualifiers but <code>swap</code> still requires a module qualifier, so <code>use</code> in Rust is more like <code>using</code> (without <code>namespace</code>) in C++. Because <code>use</code> is very specific in what it imports, it is considered a good style to use it almost always, so your first example is the idiomatic one.</p>\n\n<p>In fact, <code>using namespace</code> is more like glob imports in Rust:</p>\n\n<pre><code>use std::*;\n</code></pre>\n\n<p>And glob imports indeed are somewhat discouraged. However, Rust structuring conventions are more flexible that the ones used by C++ (in particular, in the std library), so <code>use std::*</code> won't give you the whole standard library, only the top-level modules. Glob imports are also useful in a couple of other situations, e.g. when reexporing names from another module or assembling all library extension traits in one module.</p>\n\n<p>And no, conventions do not change regardless of if you're writing a library or an executable. Rust does not have anything like C/C++'s headers with literal inclusions, so each compilation unit is completely independent and can have any imports you like - it won't affect its users (unless these are <code>pub use</code>'s, of course).</p>\n"}], "owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3315, "favorite_count": 2, "accepted_answer_id": 29014147, "answer_count": 2, "score": 12, "last_activity_date": 1444753874, "creation_date": 1426173512, "last_edit_date": 1444753715, "question_id": 29013617, "link": "https://stackoverflow.com/questions/29013617/rust-use-vs-c-using-namespace", "title": "Rust &quot;use&quot; vs. C++ &quot;using namespace&quot;", "body": "<p>Is it considered bad style to declare multiple \"use\" statements in Rust? I am a C++ programmer that recently began trying out Rust. One thing I've noticed as I review Rust code is that in many Rust programs there will be a bunch of <code>use</code> statements at the top of the program. Coming from C++, it was discouraged to use <code>using namespace std</code> especially when making header files, but that doesn't seem to be the case in most of the Rust programs I've seen. So which of the following trivial examples is considered to be better Rust programming style? Does it change if you're making a binary program vs. a module? And why?</p>\n\n<pre><code>use std::sync::Arc;\nuse std::sync::Mutex;\nuse std::thread::Thread;\nuse std::rand::random;\n\nfn main() {\n    let mut vec: Vec&lt;char&gt; = (0u8..10).map(|i| i as char).collect();\n\n    let mut data = Arc::new(Mutex::new(vec));\n    for i in 1usize..10 {\n        let data = data.clone();\n        let thread = Thread::spawn(move || {\n            let mut data = match data.lock() {\n                Ok(guard)   =&gt; guard,\n                Err(e)      =&gt; panic!(\"{}, was poisoned\", e)\n            };\n            data.push(random::&lt;char&gt;());\n        });\n    }\n}\n</code></pre>\n\n<p>Or this...</p>\n\n<pre><code>fn main() {\n    let mut vec: Vec&lt;char&gt; = (0u8..10).map(|i| i as char).collect();\n\n    let mut data = std::sync::Arc::new(\n                            std::sync::Mutex::new(vec)\n                                        );\n    for i in 1usize..10 {\n        let data = data.clone();\n        let thread = std::thread::Thread::spawn(move || {\n            let mut data = match data.lock() {\n                Ok(guard)   =&gt; guard,\n                Err(e)      =&gt; panic!(\"{}, was poisoned\", e)\n            };\n            data.push(std::rand::random::&lt;char&gt;());\n        });\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 921, "user_id": 4514581, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Bujy0.png?s=128&g=1", "display_name": "Andrei Nikolaenko", "link": "https://stackoverflow.com/users/4514581/andrei-nikolaenko"}, "edited": false, "score": 8, "creation_date": 1426158708, "post_id": 29008127, "comment_id": 46261698, "body": "I think 3Mb contains not only Hello World, but also all the needed environment for the platform. The same thing can be seen with Qt. That does not mean if you write a 6-line program the size will become 6 Mb. It will stay at 3Mb and will grow very slowly after that."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 921, "user_id": 4514581, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Bujy0.png?s=128&g=1", "display_name": "Andrei Nikolaenko", "link": "https://stackoverflow.com/users/4514581/andrei-nikolaenko"}, "edited": false, "score": 12, "creation_date": 1426159099, "post_id": 29008127, "comment_id": 46261958, "body": "@AndreiNikolaenko I am aware of that. But this hints that either they do not handle libraries as C does, adding only what is required to an image or that something else is going on."}, {"owner": {"reputation": 3612, "user_id": 2422013, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/VwKps.jpg?s=128&g=1", "display_name": "AStopher", "link": "https://stackoverflow.com/users/2422013/astopher"}, "edited": false, "score": 1, "creation_date": 1426159223, "post_id": 29008127, "comment_id": 46262033, "body": "@user2225104 See my answer, RUST handles libraries in the same (or similar) way as C does, but by default C does not compile static libraries into your program (at least, on C++)."}, {"owner": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 2, "creation_date": 1426166947, "post_id": 29008127, "comment_id": 46267119, "body": "Very related: <a href=\"http://stackoverflow.com/questions/26064673/do-dlls-built-with-rust-require-libgcc-dll-on-run-time\">Do DLLs built with Rust require libgcc.dll on run time?</a>."}, {"owner": {"reputation": 226, "user_id": 1939703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edafe3f4aa257c95954a81243bc1b5d2?s=128&d=identicon&r=PG", "display_name": "Sorayuki", "link": "https://stackoverflow.com/users/1939703/sorayuki"}, "edited": false, "score": 0, "creation_date": 1443609792, "post_id": 29008127, "comment_id": 53560287, "body": "the strip.exe tool from MinGW seems working on EXE that rust generated. But I heard that rustc is build on llvm, not sure if there is any compatible problem."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1443612069, "post_id": 29008127, "comment_id": 53561617, "body": "Not a fan of mingw, cygwin etc. If I program on windows, I program on windows not on poor mans linux substitutes. If rust claims to be a systems programming language they should not have trouble to support various platforms."}, {"owner": {"reputation": 226, "user_id": 1939703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edafe3f4aa257c95954a81243bc1b5d2?s=128&d=identicon&r=PG", "display_name": "Sorayuki", "link": "https://stackoverflow.com/users/1939703/sorayuki"}, "edited": false, "score": 0, "creation_date": 1444273643, "post_id": 29008127, "comment_id": 53836447, "body": "@BitTickler would you like to try parameter -C link-args=-s to reduce the size (you said &quot;strip command&quot;, I tried and it works). and parameter -C link-args=-static-libgcc will remove the dependency to libgcc_xxxx.dll for x86-32 platform. I don&#39;t like too many DLL denpendency, too. C/C++ has relative simpler runtime so generated exe size is not that large even for static linking. In case of file size, MSVC seems to do a good job. (mingw-g++ generated megabytes of exe for static linking as well)"}, {"owner": {"reputation": 4311, "user_id": 1317564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf1e12a76e72dcbae8e6e0f8c2ea73ed?s=128&d=identicon&r=PG", "display_name": "Learn OpenGL ES", "link": "https://stackoverflow.com/users/1317564/learn-opengl-es"}, "edited": false, "score": 0, "creation_date": 1450979707, "post_id": 29008127, "comment_id": 56654479, "body": "I found that -C opt-level=3 -C lto helps to reduce the size significantly for static libraries."}, {"owner": {"reputation": 3908, "user_id": 1398841, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/s8gQQ.png?s=128&g=1", "display_name": "phoenix", "link": "https://stackoverflow.com/users/1398841/phoenix"}, "edited": false, "score": 0, "creation_date": 1550927976, "post_id": 29008127, "comment_id": 96457396, "body": "See <a href=\"https://github.com/johnthagen/min-sized-rust\" rel=\"nofollow noreferrer\"><code>min-sized-rust</code></a> for an overview all of all of the different techniques to minimize binary size of Rust applications."}, {"owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 4, "creation_date": 1561736853, "post_id": 29008127, "comment_id": 100173920, "body": "Is this outdated now? With rustc version 1.35.0 and no cli options I get an exe that is 137kb in size. Does it automatically compile dynamically linked now or did something else happen in the meantime?"}], "answers": [{"comments": [{"owner": {"reputation": 3612, "user_id": 2422013, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/VwKps.jpg?s=128&g=1", "display_name": "AStopher", "link": "https://stackoverflow.com/users/2422013/astopher"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1426159355, "post_id": 29008355, "comment_id": 46262122, "body": "Compile as <code>rustc -C prefer-dynamic [file name].rs</code>."}, {"owner": {"reputation": 3612, "user_id": 2422013, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/VwKps.jpg?s=128&g=1", "display_name": "AStopher", "link": "https://stackoverflow.com/users/2422013/astopher"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 4, "creation_date": 1426159620, "post_id": 29008355, "comment_id": 46262264, "body": "@user2225104 Unsure about Cargo, but according to <a href=\"https://github.com/rust-lang/cargo/issues/60\" rel=\"nofollow noreferrer\">this bug report on GitHub</a>, this isn&#39;t yet possible unfortunately."}, {"owner": {"reputation": 5864, "user_id": 429091, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a8defe14b1c80bc2bd59a1fab3848cfb?s=128&d=identicon&r=PG", "display_name": "binki", "link": "https://stackoverflow.com/users/429091/binki"}, "edited": false, "score": 2, "creation_date": 1470616652, "post_id": 29008355, "comment_id": 65006465, "body": "But as soon as you have more than 2 rust executables on a system, dynamic linking will start saving you space\u2026"}, {"owner": {"reputation": 9601, "user_id": 1937197, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/cg7w6.jpg?s=128&g=1", "display_name": "bobcat", "link": "https://stackoverflow.com/users/1937197/bobcat"}, "edited": false, "score": 23, "creation_date": 1472448092, "post_id": 29008355, "comment_id": 65737994, "body": "I don&#39;t think static linking explains the huge HELLO-WORLD. Shouldn&#39;t it only link in the parts of the libraries that are actually used, and HELLO-WORLD uses virtually nothing?"}, {"owner": {"reputation": 2779, "user_id": 1904754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a898b39b60a946cecb867dc2447ed007?s=128&d=identicon&r=PG", "display_name": "Zoey Mertes", "link": "https://stackoverflow.com/users/1904754/zoey-mertes"}, "edited": false, "score": 11, "creation_date": 1473875714, "post_id": 29008355, "comment_id": 66311057, "body": "BitTickler <code>cargo rustc [--debug or --release] -- -C prefer-dynamic </code>"}, {"owner": {"reputation": 6367, "user_id": 4451732, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/UQN4l.jpg?s=128&g=1", "display_name": "Franklin Yu", "link": "https://stackoverflow.com/users/4451732/franklin-yu"}, "edited": false, "score": 1, "creation_date": 1495053480, "post_id": 29008355, "comment_id": 75095394, "body": "Is it possible to install the Rust runtime library without the Rust compiler? Like installing glibc without GCC?"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "reply_to_user": {"reputation": 6367, "user_id": 4451732, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/UQN4l.jpg?s=128&g=1", "display_name": "Franklin Yu", "link": "https://stackoverflow.com/users/4451732/franklin-yu"}, "edited": false, "score": 1, "creation_date": 1508386238, "post_id": 29008355, "comment_id": 80592765, "body": "@FranklinYu It&#39;s not currently possible - and probably won&#39;t be anytime soon. The main limitation is that rust releases are not binary compatible, and rust does not have a stable ABI. With dynamic linking, you&#39;d need to do synchronized updates of all libraries and binaries at the same time; and do this each 6 weeks when a new compiler is released."}, {"owner": {"reputation": 6367, "user_id": 4451732, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/UQN4l.jpg?s=128&g=1", "display_name": "Franklin Yu", "link": "https://stackoverflow.com/users/4451732/franklin-yu"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 3, "creation_date": 1508389059, "post_id": 29008355, "comment_id": 80593411, "body": "@daboross Thank you very much. I have been tracking <a href=\"https://github.com/rust-lang/rfcs/issues/600\" rel=\"nofollow noreferrer\">this related RFC</a>. It&#39;s really a pity since Rust also targets system programming."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1508449657, "post_id": 29008355, "comment_id": 80626585, "body": "Yeah - I&#39;m hoping in 2-5 years there will be confidence in the language&#39;s optimization and binary format, and a stabilized ABI will exist. Hoping is about all I can do though :/."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1521537646, "post_id": 29008355, "comment_id": 85761286, "body": "@daboross: I hope the ABI doesn&#39;t get stabilized. An unstable ABI is necessary to pull off optimizations such as the &quot;niche&quot; optimization, changing struct layout, etc..."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 1, "creation_date": 1521562774, "post_id": 29008355, "comment_id": 85780055, "body": "@MattheiM We could always have a versioned ABI with a clear spec written if we don&#39;t go &#39;fully&#39; stable, though. I imagine that would have at least 90% of the benefits."}, {"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1541802595, "post_id": 29008355, "comment_id": 93354943, "body": "is Rust&#39;s executable larger tha Golang&#39;s executables?"}, {"owner": {"reputation": 107137, "user_id": 364696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/7eBCp.jpg?s=128&g=1", "display_name": "ShadowRanger", "link": "https://stackoverflow.com/users/364696/shadowranger"}, "reply_to_user": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 6, "creation_date": 1582311123, "post_id": 29008355, "comment_id": 106747044, "body": "@Nulik: Yes, by default, but that&#39;s because Rust defaults to static builds (all dependencies, including runtime, included), while Go links its runtime dynamically. On my CentOS 7 system, Go&#39;s <code>helloworld</code> compiles to ~76K, but on top of standard stuff, it takes a runtime dynamic dependency on <code>libgo.so</code>, which is over 47M. The default Rust <code>helloworld</code> (as made with <code>cargo new</code>) doesn&#39;t have any unique dynamic dependencies, holding everything but basic C runtime stuff in a 1.6M executable; with tweaks (optimize for size, using LTO, aborting on panic), it drops to 0.6M."}, {"owner": {"reputation": 107137, "user_id": 364696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/7eBCp.jpg?s=128&g=1", "display_name": "ShadowRanger", "link": "https://stackoverflow.com/users/364696/shadowranger"}, "edited": false, "score": 5, "creation_date": 1582311596, "post_id": 29008355, "comment_id": 106747220, "body": "The <code>-C prefer-dynamic</code> option gets the release builds (with only optimize for size enabled; it wouldn&#39;t let me use LTO or abort on panic) down to 8.8K, albeit with a new 4.7M dynamic dependency. So apples-to-apples, Rust is smaller; it&#39;s a tenth the size dynamically linked, relying on a runtime that&#39;s a tenth the size as well."}, {"owner": {"reputation": 732, "user_id": 1007605, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2007453909aa470a1a681c5959d50a90?s=128&d=identicon&r=PG", "display_name": "purefanatic", "link": "https://stackoverflow.com/users/1007605/purefanatic"}, "edited": false, "score": 0, "creation_date": 1614089441, "post_id": 29008355, "comment_id": 117273881, "body": "Downvoting because this is wrong: Static linking does not necessarily imply obscenely obese binaries. Needless symbols can be stripped. Visual C++ 2017 x64 for example yields 219 kiB for <code>int main(){std::cout&lt;&lt;&quot;hello world\\n&quot;;}</code> with /EHsc /O2 /MT. Or Mingw-w64 g++ 10.2 914 kiB, passing -s -O2 -static. And this is with C++ Iostreams which are rather bloaty themselves and need to carry around formatting state, exceptions, locales and what not. Replacing with <code>std::printf</code> I get 117 kiB (cl) or 41 kiB (g++). Rust could improve on those 41 kiB as Rust I/O does not have locales yet it&#39;s way worse."}, {"owner": {"reputation": 732, "user_id": 1007605, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2007453909aa470a1a681c5959d50a90?s=128&d=identicon&r=PG", "display_name": "purefanatic", "link": "https://stackoverflow.com/users/1007605/purefanatic"}, "edited": false, "score": 0, "creation_date": 1614089521, "post_id": 29008355, "comment_id": 117273927, "body": "Fwiw, on my machine the asker&#39;s Rust example produces 4092 kiB by default (x86_64-pc-windows-gnu). Adding lto = true to Cargo.toml makes for 1406 kiB. Adding panic = &quot;abort&quot;, opt-level = &quot;z&quot;, codegen-units = 1 makes for 1264 kiB. The nightly setting strip = &quot;symbols&quot; reduces that to 220 kiB. This number might be reasonable for C++ but in my opinion there&#39;s no reason for Rust to produce such needlessly large executables. Rust has much less implied overhead compared to C++ as far as I can tell. It could do much better if people actually cared."}, {"owner": {"reputation": 3612, "user_id": 2422013, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/VwKps.jpg?s=128&g=1", "display_name": "AStopher", "link": "https://stackoverflow.com/users/2422013/astopher"}, "reply_to_user": {"reputation": 732, "user_id": 1007605, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2007453909aa470a1a681c5959d50a90?s=128&d=identicon&r=PG", "display_name": "purefanatic", "link": "https://stackoverflow.com/users/1007605/purefanatic"}, "edited": false, "score": 0, "creation_date": 1614179629, "post_id": 29008355, "comment_id": 117307436, "body": "@purefanatic This answer was correct at the time of writing. If that&#39;s changed, please edit the answer or add your own."}, {"owner": {"reputation": 732, "user_id": 1007605, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2007453909aa470a1a681c5959d50a90?s=128&d=identicon&r=PG", "display_name": "purefanatic", "link": "https://stackoverflow.com/users/1007605/purefanatic"}, "edited": false, "score": 0, "creation_date": 1614188390, "post_id": 29008355, "comment_id": 117311771, "body": "@AStopher I stand by my opinion: Your answer implies that static linking always comes with a huge binary size toll but you fail to point out that this is merely an issue with Rust&#39;s current implementation and default settings. It sounds to me as if static linking is a general problem which is not true. This is why I find your answer misleading."}], "tags": [], "owner": {"reputation": 3612, "user_id": 2422013, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/VwKps.jpg?s=128&g=1", "display_name": "AStopher", "link": "https://stackoverflow.com/users/2422013/astopher"}, "is_accepted": true, "score": 174, "last_activity_date": 1451915800, "last_edit_date": 1451915800, "creation_date": 1426159087, "answer_id": 29008355, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/29008355#29008355", "title": "Why are Rust executables so huge?", "body": "<p>Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest <code>Hello world!</code> program will be compiled into your executable. This also includes the Rust runtime.</p>\n\n<p>To force Rust to dynamically link programs, use the command-line arguments <code>-C prefer-dynamic</code>; this will result in a much smaller file size <strong><em>but</em></strong> will also require the Rust libraries (including its runtime) to be available to your program at runtime.\nThis essentially means you will need to provide them if the computer does not have them, taking up <em>more</em> space than your original statically linked program takes up.</p>\n\n<p>For portability I'd recommend you statically link the Rust libraries and runtime in the way you have been doing if you were to ever distribute your programs to others.</p>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 37, "creation_date": 1432898987, "post_id": 29461455, "comment_id": 49130242, "body": "gcc is smart enough to do exactly the printf -&gt; puts substitution itself, that&#39;s why results are identical."}, {"owner": {"reputation": 58628, "user_id": 227267, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b03410a67ad6b9cf3fce7b0bf45084c8?s=128&d=identicon&r=PG", "display_name": "Matti Virkkunen", "link": "https://stackoverflow.com/users/227267/matti-virkkunen"}, "edited": false, "score": 13, "creation_date": 1530430046, "post_id": 29461455, "comment_id": 89227809, "body": "As of 2018 if you want a fair comparison do remember to &quot;strip&quot; the executables, as a hello world Rust executable on my system is a whopping 5.3MB but drops down to less than 10% of that when you remove all the debug symbols and such."}, {"owner": {"reputation": 107137, "user_id": 364696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/7eBCp.jpg?s=128&g=1", "display_name": "ShadowRanger", "link": "https://stackoverflow.com/users/364696/shadowranger"}, "reply_to_user": {"reputation": 58628, "user_id": 227267, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b03410a67ad6b9cf3fce7b0bf45084c8?s=128&d=identicon&r=PG", "display_name": "Matti Virkkunen", "link": "https://stackoverflow.com/users/227267/matti-virkkunen"}, "edited": false, "score": 0, "creation_date": 1582312063, "post_id": 29461455, "comment_id": 106747411, "body": "@MattiVirkkunen: Still the case in 2020; the natural size seems smaller (nowhere near 5.3M), but the ratio of symbols to code is still pretty extreme. The debug build, purely default options on Rust 1.34.0 on CentOS 7, stripped with <code>strip -s</code>, drops from 1.6M to 190K. The release build (defaults plus <code>opt-level=&#39;s&#39;</code>, <code>lto = true</code>, and <code>panic = &#39;abort&#39;</code> to minimize size) drops from 623K to 158K."}], "tags": [], "owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "is_accepted": false, "score": 74, "last_activity_date": 1428262935, "creation_date": 1428262935, "answer_id": 29461455, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/29461455#29461455", "title": "Why are Rust executables so huge?", "body": "<p>I don't have any Windows systems to try on, but on Linux, a statically compiled Rust hello world is actually smaller than the equivalent C. If you are seeing a huge difference in size, it is probably because you are linking the Rust executable statically and the C one dynamically.</p>\n\n<p>With dynamic linking, you need to take the size of all the dynamic libraries into account too, not just the executable.</p>\n\n<p>So, if you want to compare apples to apples, you need to make sure either both are dynamic or both are static. Different compilers will have different defaults, so you can't just rely on the compiler defaults to produce the same result.</p>\n\n<p>If you're interested, here are my results:</p>\n\n<pre>\n-rw-r--r-- 1 aij aij     63 Apr  5 14:26 printf.c\n-rwxr-xr-x 1 aij aij   6696 Apr  5 14:27 printf.dyn\n-rwxr-xr-x 1 aij aij 829344 Apr  5 14:27 printf.static\n-rw-r--r-- 1 aij aij     59 Apr  5 14:26 puts.c\n-rwxr-xr-x 1 aij aij   6696 Apr  5 14:27 puts.dyn\n-rwxr-xr-x 1 aij aij 829344 Apr  5 14:27 puts.static\n-rwxr-xr-x 1 aij aij   8712 Apr  5 14:28 rust.dyn\n-rw-r--r-- 1 aij aij     46 Apr  5 14:09 rust.rs\n-rwxr-xr-x 1 aij aij 661496 Apr  5 14:28 rust.static\n</pre>\n\n<p>These were compiled with gcc (Debian 4.9.2-10) 4.9.2 and rustc 1.0.0-nightly (d17d6e7f1 2015-04-02) (built 2015-04-03), both with default options and with <code>-static</code> for gcc and <code>-C prefer-dynamic</code> for rustc.</p>\n\n<p>I had two versions of the C hello world because I thought using <code>puts()</code> might link in fewer compilation units.</p>\n\n<p>If you want to try reproducing it on Windows, here are the sources I used:</p>\n\n<p>printf.c:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main() {\n  printf(\"Hello, world!\\n\");\n}\n</code></pre>\n\n<p>puts.c:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main() {\n  puts(\"Hello, world!\");\n}\n</code></pre>\n\n<p>rust.rs </p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>Also, keep in mind that different amounts of debugging information, or different optimization levels would also make a difference. But I expect if you are seeing a huge difference it is due to static vs. dynamic linking.</p>\n"}, {"comments": [{"owner": {"reputation": 15897, "user_id": 11722, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/b0124a12d060a036500e83ec44972492?s=128&d=identicon&r=PG", "display_name": "Zitrax", "link": "https://stackoverflow.com/users/11722/zitrax"}, "edited": false, "score": 12, "creation_date": 1495666281, "post_id": 35106100, "comment_id": 75355190, "body": "Just some stats, default release version of hello world (linux x86_64). 3.5 M, with prefer-dynamic 8904 B, stripped 6392 B."}, {"owner": {"reputation": 643, "user_id": 9654083, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a07542057c32fa0ec484a700420bd141?s=128&d=identicon&r=PG", "display_name": "TheTechRobo36414519", "link": "https://stackoverflow.com/users/9654083/thetechrobo36414519"}, "edited": false, "score": 0, "creation_date": 1615161003, "post_id": 35106100, "comment_id": 117598919, "body": "should add a note saying that its bad for distributing."}], "tags": [], "owner": {"reputation": 381, "user_id": 5841975, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-3hdhesFxHLw/AAAAAAAAAAI/AAAAAAAADHE/6rRoYOKA40Y/photo.jpg?sz=128", "display_name": "Casper Skern Wilstrup", "link": "https://stackoverflow.com/users/5841975/casper-skern-wilstrup"}, "is_accepted": false, "score": 37, "last_activity_date": 1454254018, "last_edit_date": 1454254018, "creation_date": 1454182088, "answer_id": 35106100, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/35106100#35106100", "title": "Why are Rust executables so huge?", "body": "<p>When compiling with Cargo, you can use dynamic linking:</p>\n\n<pre><code>cargo rustc --release -- -C prefer-dynamic\n</code></pre>\n\n<p>This will dramatically reduce the size of the binary, as it is now dynamically linked. </p>\n\n<p>On Linux, at least, you can also strip the binary of symbols using the <code>strip</code> command:</p>\n\n<pre><code>strip target/release/&lt;binary&gt;\n</code></pre>\n\n<p>This will approximately halve the size of most binaries.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 12, "creation_date": 1518705611, "post_id": 48800249, "comment_id": 84622841, "body": "<i>specify the library versions [...] requires that the specific library be statically linked</i> \u2014 no, it doesn&#39;t. Plenty of code exists where exact versions of libraries are dynamically linked."}], "tags": [], "owner": {"reputation": 17, "user_id": 5863092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e6b399e2d3aefdc333215701287ab7d?s=128&d=identicon&r=PG", "display_name": "NPHighview", "link": "https://stackoverflow.com/users/5863092/nphighview"}, "is_accepted": false, "score": -11, "last_activity_date": 1518671035, "creation_date": 1518671035, "answer_id": 48800249, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/48800249#48800249", "title": "Why are Rust executables so huge?", "body": "<p>This is a feature, not a bug!  </p>\n\n<p>You can specify the library versions (in the <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\" rel=\"nofollow noreferrer\">project's associated Cargo.toml file</a>) used in the program (even the implicit ones) to ensure library version compatibility.  This, on the other hand, requires that the specific library be statically linked to the executable, generating large run-time images.  </p>\n\n<p>Hey, it's not 1978 any more - many people have more than 2 MB RAM in their computers :-)</p>\n"}, {"tags": [], "owner": {"reputation": 3908, "user_id": 1398841, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/s8gQQ.png?s=128&g=1", "display_name": "phoenix", "link": "https://stackoverflow.com/users/1398841/phoenix"}, "is_accepted": false, "score": 54, "last_activity_date": 1550928245, "creation_date": 1550928245, "answer_id": 54842093, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/54842093#54842093", "title": "Why are Rust executables so huge?", "body": "<p>For an overview of all of the ways to reduce the size of a Rust binary, see the <a href=\"https://github.com/johnthagen/min-sized-rust\" rel=\"noreferrer\"><code>min-sized-rust</code></a> repository.</p>\n\n<p>The current high level steps to reduce binary size are:</p>\n\n<ol>\n<li>Use Rust 1.32.0 or newer (which doesn't include <code>jemalloc</code> by default)</li>\n<li>Add the following to <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html\" rel=\"noreferrer\"><code>Cargo.toml</code></a></li>\n</ol>\n\n<pre><code>[profile.release]\nopt-level = 'z'     # Optimize for size.\nlto = true          # Enable Link Time Optimization\ncodegen-units = 1   # Reduce number of codegen units to increase optimizations.\npanic = 'abort'     # Abort on panic\n</code></pre>\n\n<ol start=\"3\">\n<li>Build in release mode using <code>cargo build --release</code></li>\n<li>Run <a href=\"https://linux.die.net/man/1/strip\" rel=\"noreferrer\"><code>strip</code></a> on the resulting binary.</li>\n</ol>\n\n<p>There is more that can be done using <code>nightly</code> Rust, but I'll leave that information in <a href=\"https://github.com/johnthagen/min-sized-rust\" rel=\"noreferrer\"><code>min-sized-rust</code></a> as it changes over time due to the use of unstable features.</p>\n\n<p>You can also use <code>#![no_std]</code> to remove Rust's <code>libstd</code>. See <a href=\"https://github.com/johnthagen/min-sized-rust\" rel=\"noreferrer\"><code>min-sized-rust</code></a> for details.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1605016828, "post_id": 64768984, "comment_id": 114519617, "body": "This is already mentioned in the accepted answer; this answer provides no new value."}], "tags": [], "owner": {"reputation": 34, "user_id": 14605175, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QlhG9.png?s=128&g=1", "display_name": "TANDEX", "link": "https://stackoverflow.com/users/14605175/tandex"}, "is_accepted": false, "score": -4, "last_activity_date": 1605011445, "creation_date": 1605011445, "answer_id": 64768984, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/64768984#64768984", "title": "Why are Rust executables so huge?", "body": "<p>if you are using &quot;rustc&quot; command to compile just write command &quot;rustc -C prefer-dynamic=yes main.rs&quot;</p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 38516, "favorite_count": 45, "protected_date": 1518705540, "accepted_answer_id": 29008355, "answer_count": 6, "score": 190, "last_activity_date": 1605011445, "creation_date": 1426158465, "last_edit_date": 1426165130, "question_id": 29008127, "link": "https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge", "title": "Why are Rust executables so huge?", "body": "<p>Just having found Rust and having read the first two chapters of the documentation, I find the approach and the way they defined the language particularly interesting. So I decided to get my fingers wet and started out with Hello world... </p>\n\n<p>I did so on Windows 7 x64, btw.</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>Issuing <code>cargo build</code> and looking at the result in <code>targets\\debug</code> I found the resulting <code>.exe</code> being 3MB. After some searching (documentation of cargo command line flags is hard to find...) I found <code>--release</code> option and created the release build. To my surprise, the .exe size has only become smaller by an insignificant amount: 2.99MB instead of 3MB.</p>\n\n<p>So, confessing I am a newbie to Rust and its ecosystem, my expectation would have been that a Systems Programming language would produce something compact.</p>\n\n<p>Can anyone elaborate on what Rust is compiling to, how it can be possible it produces such huge images from a 3 liner program? Is it compiling to a virtual machine? Is there a strip command I missed (debug info inside the release build?)? Anything else which might allow to understand what is going on?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426147415, "post_id": 29004506, "comment_id": 46255535, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28999226/str-string-and-lifetime\">&amp;str String and lifetime</a>"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1426147264, "creation_date": 1426147264, "answer_id": 29004560, "question_id": 29004506, "link": "https://stackoverflow.com/questions/29004506/error-mismatched-types-when-indexing-a-str/29004560#29004560", "title": "&quot;error: mismatched types&quot; when indexing a &amp;str", "body": "<p><code>self.text[i .. self.text.len()]</code> is of type <code>str</code>; you need to re-borrow the result to get a <code>&amp;str</code>.  Also note that you can omit the upper bound on the range.  That gets you:</p>\n\n<pre><code>let slice: &amp;str = &amp;self.text[i..];\n</code></pre>\n\n<p><strong>Edit</strong>: To note the <em>why</em>: this is because slicing is just a special case of indexing, which behaves the same way (if you want a borrowed reference to the thing you've indexed, you need to borrow from it).  I can't really get into more detail without going into Dynamically Sized Types, which is perhaps best left for a different discussion.</p>\n"}], "owner": {"reputation": 2849, "user_id": 1431255, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/6ac58ecb70f5b8dc7a3e2801d4750a8a?s=128&d=identicon&r=PG", "display_name": "wirrbel", "link": "https://stackoverflow.com/users/1431255/wirrbel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 137, "favorite_count": 0, "accepted_answer_id": 29004560, "answer_count": 1, "score": 0, "last_activity_date": 1426252614, "creation_date": 1426147042, "last_edit_date": 1426252614, "question_id": 29004506, "link": "https://stackoverflow.com/questions/29004506/error-mismatched-types-when-indexing-a-str", "title": "&quot;error: mismatched types&quot; when indexing a &amp;str", "body": "<p>I have a <code>struct MyStruct&lt;'a&gt;</code> where <code>self.text</code> is of type <code>&amp;'a str</code></p>\n\n<p>I assumed that this would give me a substring of this str:</p>\n\n<pre><code>let slice: &amp;str  = self.text[i .. self.text.len()];\n</code></pre>\n\n<p>However I get the following error:</p>\n\n<pre>\nsrc/lexer.rs:67:28: 67:59 error: mismatched types:\n expected `&str`,\n    found `str`\n(expected &-ptr,\n    found str) [E0308]\nsrc/lexer.rs:67         let slice: &str  = self.text[i .. self.text.len()];\n\n</pre>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1426146304, "post_id": 29001667, "comment_id": 46255051, "body": "<code>Box&lt;Trait&gt;</code> is sugar for <code>Box&lt;Trait + &#39;static&gt;</code>, which explains the first error completely. <code>&amp;&#39;a Trait</code> is sugar for <code>&amp;&#39;a (Trait + &#39;a)</code>, incidentally."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1426146683, "creation_date": 1426146683, "answer_id": 29004401, "question_id": 29001667, "link": "https://stackoverflow.com/questions/29001667/how-do-i-store-a-list-of-callbacks-on-a-struct/29004401#29004401", "title": "How do I store a list of callbacks on a struct?", "body": "<p><code>'a</code> on <code>ComplexThing</code> is a generic lifetime parameter and needs to be defined just as much as a generic type parameter. If you had a <code>struct Foo&lt;T&gt;</code>, you would not be able to write <code>impl Foo&lt;T&gt;</code> because there is no concrete type <code>T</code> in scope; if you want it to be generic, you need to define it, <code>impl&lt;T&gt; Foo&lt;T&gt;</code>. This allows you to write constraints too, such as <code>impl&lt;T: Clone&gt; Foo&lt;T&gt;</code> to implement methods on <code>Foo&lt;T&gt;</code> only where <code>T</code> is a type that implements <code>Clone</code>.</p>\n\n<p>So then, the answer is simply that you need to define the lifetime <code>'a</code> as generic:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; ComplexThing&lt;'a&gt; { \u2026 }\n</code></pre>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1456, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1426146683, "creation_date": 1426133038, "last_edit_date": 1495541292, "question_id": 29001667, "link": "https://stackoverflow.com/questions/29001667/how-do-i-store-a-list-of-callbacks-on-a-struct", "title": "How do I store a list of callbacks on a struct?", "body": "<p>This is a follow-up to my question on <a href=\"https://stackoverflow.com/questions/28956195/how-do-i-create-use-a-list-of-callback-functions\">how to create &amp; use a list of callbacks</a>.</p>\n\n<p>I'm trying to create (and store, near an event loop) a list of callback functions that will be called at some indeterminate point in the future.</p>\n\n<pre><code>struct ComplexThing {\n    calls: Vec&lt;Box&lt;FnMut()&gt;&gt;,\n}\n\n\nimpl ComplexThing {\n    fn call&lt;'a, T: FnMut() + 'a&gt;(&amp;'a mut self, func: T) {\n        self.calls.push(Box::new(func));\n    }\n}\n</code></pre>\n\n<p>Errors with:</p>\n\n<pre><code>calls.rs:30:25: 30:39 error: the parameter type `T` may not live long enough [E0310]\ncalls.rs:30         self.calls.push(Box::new(func));\n                                    ^~~~~~~~~~~~~~\ncalls.rs:30:39: 30:39 help: consider adding an explicit lifetime bound `T: 'static`...\ncalls.rs:30:25: 30:39 note: ...so that the type `T` will meet its required lifetime bounds\ncalls.rs:30         self.calls.push(Box::new(func));\n                                    ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>I tried adding it to the <code>struct</code>, which fixed the error about lifetimes on the call to <code>push</code>,</p>\n\n<pre><code>struct ComplexThing&lt;'a&gt; {\n    calls: Vec&lt;Box&lt;FnMut() + 'a&gt;&gt;,\n}\n\n\nimpl ComplexThing {\n    fn call&lt;'a, T: FnMut() + 'a&gt;(&amp;'a mut self, func: T) {\n        self.calls.push(Box::new(func));\n    }\n}\n</code></pre>\n\n<p>\u2026 but gets me:</p>\n\n<pre><code>calls.rs:28:6: 28:18 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\ncalls.rs:28 impl ComplexThing {\n                 ^~~~~~~~~~~~\n</code></pre>\n\n<p>Which, yes, I suppose the struct has a <code>&lt;'a&gt;</code>, and I'm not specifying it. If I add it,</p>\n\n<pre><code>impl ComplexThing&lt;'a&gt; {\n</code></pre>\n\n<p>I get,</p>\n\n<pre><code>calls.rs:28:19: 28:21 error: use of undeclared lifetime name `'a` [E0261]\ncalls.rs:28 impl ComplexThing&lt;'a&gt; {\n</code></pre>\n\n<p>I don't know if I should be specifying it on the <code>struct ComplexThing</code> or not. If I leave it off (and I would greatly prefer to, I think),</p>\n\n<p>I think there's something crucial about how Rust notates lifetimes that I'm not getting here. The <code>FnMut</code> that <code>ComplexThing</code> is (presently) trying to store in a <code>Box</code> is (in the design in my head) <em>owned</em> by the instance of <code>ComplexThing</code>; it's lifetime should be less than that of <code>.ComplexThing</code> \u2014 i.e., one of two things would happen:</p>\n\n<ol>\n<li>What will be a private function of the <code>ComplexThing</code> will end up removing the <code>Box&lt;FnMut&gt;</code> from the <code>Vec</code> (and thus, take ownership of it), run the <code>FnMut</code>, and then exit, thus freeing the <code>FnMut</code>.</li>\n<li>The <code>ComplexThing</code> is deallocated, in which case the <code>Vec</code> and any <code>Box&lt;FnMut&gt;</code>'s are deallocated with it.</li>\n</ol>\n\n<p>The question <a href=\"https://stackoverflow.com/questions/27831944/how-do-i-store-a-closure-in-rust/27832320#27832320\">\"How do I store a closure in Rust?\"</a>'s answer made me think a <code>Box&lt;FnMut&gt;</code> wouldn't need lifetime annotations, but the answer I got on <a href=\"https://stackoverflow.com/questions/28956195/how-do-i-create-use-a-list-of-callback-functions\">how to create &amp; use a list of callbacks</a> makes me think I do.</p>\n\n<p>My best guess is that <code>Box</code> is just storing a pointer to an object that I don't really own, and that I need to either create a copy of the <code>FnMut</code> on the heap, or move-construct one there, and then that copy is the one I can own. (Otherwise, if it's like a closure that's on the stack, I need to make sure that closure doesn't go out of scope before my <code>Box</code> does, which is why Rust is having me annotate lifetimes.)</p>\n"}]