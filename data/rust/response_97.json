[{"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "edited": false, "score": 0, "creation_date": 1479331454, "post_id": 40642569, "comment_id": 68517223, "body": "Exactly what I was hoping for!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "edited": false, "score": 2, "creation_date": 1479338057, "post_id": 40642569, "comment_id": 68520110, "body": "@PureW Not worth a full answer, but I have a <a href=\"https://github.com/DanielKeep/rust-script-toolbox/blob/master/test-matrix.py\" rel=\"nofollow noreferrer\"><code>test-matrix.py</code></a> script that does this for (simple) Travis CI configs."}, {"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "edited": false, "score": 0, "creation_date": 1576794835, "post_id": 40642569, "comment_id": 105022770, "body": "Regarding your edited answer: Using CARGO_TARGET_DIR to specify a separate dir for clippy still seems to avoid recompilation."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1548984734, "last_edit_date": 1548984734, "creation_date": 1479331284, "answer_id": 40642569, "question_id": 40642456, "link": "https://stackoverflow.com/questions/40642456/how-difficult-is-it-to-allow-parallel-compilation-of-code-with-the-rust-stable-a/40642569#40642569", "title": "How difficult is it to allow parallel compilation of code with the Rust stable and nightly channels?", "body": "<h1>Modern Rust</h1>\n\n<p>I believe that your <em>main</em> problem of rebuilding dependencies no longer exists:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo +nightly build\n    Updating crates.io index\n   Compiling either v1.5.0\n   Compiling itertools v0.8.0\n   Compiling example v0.1.0 (/private/tmp/example)\n    Finished dev [unoptimized + debuginfo] target(s) in 5.87s\n$ cargo +stable build\n   Compiling either v1.5.0\n   Compiling itertools v0.8.0\n   Compiling example v0.1.0 (/private/tmp/example)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.67s\n$ cargo +nightly build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.17s\n$ cargo +stable build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.16s\n</code></pre>\n\n<p>I <em>believe</em> that this is a side-effect of the work done for incremental compilation: the compiler version (or something equivalent) is used as part of the hashing algorithm used for build artifacts. Thus, artifacts from multiple toolchains can coexist. </p>\n\n<p>This does <em>not</em> cover the final artifact, which has a fixed name and will be overridden. Keep on reading if you really need to keep both in parallel.</p>\n\n<h1>Original answer</h1>\n\n<p>As explained in <a href=\"https://stackoverflow.com/q/38640858/155423\">Is it possible to deactivate file locking in cargo?</a>, you can set the environment variable <code>CARGO_TARGET_DIR</code> for each channel you are interested in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ CARGO_TARGET_DIR=$PWD/stable rustup run stable cargo build\n   Compiling many v0.1.0 (file:///private/tmp/many)\n    Finished debug [unoptimized + debuginfo] target(s) in 0.89 secs\n$ CARGO_TARGET_DIR=$PWD/nightly rustup run nightly cargo build\n   Compiling many v0.1.0 (file:///private/tmp/many)\n    Finished debug [unoptimized + debuginfo] target(s) in 0.62 secs\n$ ./stable/debug/many\nHello, world!\n$ ./nightly/debug/many\nHello, world!\n</code></pre>\n"}], "owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 800, "favorite_count": 0, "accepted_answer_id": 40642569, "answer_count": 1, "score": 9, "last_activity_date": 1548984734, "creation_date": 1479330917, "last_edit_date": 1479331352, "question_id": 40642456, "link": "https://stackoverflow.com/questions/40642456/how-difficult-is-it-to-allow-parallel-compilation-of-code-with-the-rust-stable-a", "title": "How difficult is it to allow parallel compilation of code with the Rust stable and nightly channels?", "body": "<p>The default file-tree created by Cargo allows parallel compilation of release and debug builds as they are located in their own directories; <code>target/release</code> and <code>target/debug</code>, respectively.</p>\n\n<p>How difficult is it to also allow parallel compilation of <code>stable</code>/<code>nightly</code>-compiler. For example using the directories </p>\n\n<ul>\n<li><code>target/debug/stable</code></li>\n<li><code>target/debug/nightly</code></li>\n</ul>\n\n<p>I am aware it can be done with jails/containers, but I was hoping for a somewhat more Cargo-ish solution.</p>\n"}, {"tags": ["rust", "ffi", "memory-alignment"], "answers": [{"tags": [], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "is_accepted": true, "score": 2, "last_activity_date": 1530818139, "creation_date": 1530818139, "answer_id": 51198423, "question_id": 40625324, "link": "https://stackoverflow.com/questions/40625324/can-rust-struct-alignment-be-controlled-on-the-stable-compiler/51198423#51198423", "title": "Can Rust struct alignment be controlled on the stable compiler?", "body": "<p>As of now, the answer is yes, you may specify a type's alignment in stable Rust. This was <a href=\"https://github.com/rust-lang/rust/pull/47006\" rel=\"nofollow noreferrer\">stabilized in 1.25.0</a>. It is documented under <a href=\"https://doc.rust-lang.org/reference/type-layout.html#the-align-representation\" rel=\"nofollow noreferrer\">the reference's Type Layout section</a>. Note that the alignment must be a power of 2, you may not mix <code>align</code> and <code>packed</code> representations, and aligning a type may add extra padding to the type. <a href=\"https://play.rust-lang.org/?gist=a8f3adbedb562a6ad68e7ad68adcd6ea&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Here's an example of how to use the feature</a>:</p>\n\n<pre><code>#[repr(align(64))]\nstruct S(u8);\n\nfn main() {\n    println!(\"size of S: {}\", std::mem::size_of::&lt;S&gt;());\n    println!(\"align of S: {}\", std::mem::align_of::&lt;S&gt;());\n}\n</code></pre>\n"}], "owner": {"reputation": 171, "user_id": 3614352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d66be3e50da03736e4af8f902511239d?s=128&d=identicon&r=PG&f=1", "display_name": "mfarrugi", "link": "https://stackoverflow.com/users/3614352/mfarrugi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 568, "favorite_count": 0, "closed_date": 1530819175, "accepted_answer_id": 51198423, "answer_count": 1, "score": 4, "last_activity_date": 1530818139, "creation_date": 1479277225, "last_edit_date": 1511458678, "question_id": 40625324, "link": "https://stackoverflow.com/questions/40625324/can-rust-struct-alignment-be-controlled-on-the-stable-compiler", "closed_reason": "Duplicate", "title": "Can Rust struct alignment be controlled on the stable compiler?", "body": "<p>I want to write a Rust FFI for a C struct using the <code>aligned</code> attribute.</p>\n\n<p>On nightly, one can use <code>#[feature(repr_simd)]</code> as in <a href=\"https://stackoverflow.com/questions/32428153/how-can-i-align-a-struct-to-a-specifed-byte-boundary\">this question</a>. The same technique without <code>#[repr(simd)]</code> appears to be restricted to a maximum alignment of 8 bytes.</p>\n\n<p>There are various issues and RFCs open for both alignment and SIMD, and the compiler points to <a href=\"https://github.com/rust-lang/rust/issues/27731\" rel=\"nofollow noreferrer\">tracking issue #27731</a> which seems to be stalled. </p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/issues/325\" rel=\"nofollow noreferrer\">RFC #325</a> points pretty clearly to no, but it is somewhat old.</p>\n\n<p>Is it possible to do this with the stable compiler, in pure (unsafe?) Rust as of version 1.22?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 6, "creation_date": 1479253065, "post_id": 40621408, "comment_id": 68477311, "body": "Not only that. You also can change mutability (which is common usecase): <code>let mut foo = Foo::new(); &#47;* build foo *&#47; let foo = foo; &#47;&#47; make foo immutable</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 1, "creation_date": 1479281872, "post_id": 40621408, "comment_id": 68486253, "body": "@\u0141ukaszNiemier: Note that you can simply use block expressions for that, <code>let foo = { let mut foo = Foo::new(); ...; foo };</code>"}], "tags": [], "owner": {"reputation": 287, "user_id": 4480093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8d91b56823dec49f7e945f0ed0ca094b?s=128&d=identicon&r=PG&f=1", "display_name": "Roman Polach", "link": "https://stackoverflow.com/users/4480093/roman-polach"}, "is_accepted": false, "score": 10, "last_activity_date": 1479257654, "last_edit_date": 1479257654, "creation_date": 1479251701, "answer_id": 40621408, "question_id": 40621325, "link": "https://stackoverflow.com/questions/40621325/why-do-i-need-rebinding-shadowing-when-i-can-have-mutable-variable-binding/40621408#40621408", "title": "Why do I need rebinding/shadowing when I can have mutable variable binding?", "body": "<p>One answer I found myself: shadowing can change variable type.</p>\n\n<pre><code>let x = get_some_string();\nlet x = x.smart_parse_int();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 1, "creation_date": 1515931183, "post_id": 40628035, "comment_id": 83481183, "body": "A wonderful answer that made the light bulb finally switch on. Shouldn&#39;t <code>x = y;</code> within the function <code>fn main() {     let x;     {         let y = hello();         x = y;     }     println!(&quot;{}&quot;, x); }</code> be <code>let x = y;</code> Also, can you please clarify to newbies like me why value created by &#39;b&#39; is dropped before the value created by &#39;a&#39;. Trying to make sure I absorb this fully."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 1, "creation_date": 1515936740, "post_id": 40628035, "comment_id": 83482702, "body": "@Kayote: (1) no I really mean <code>x = y;</code>. <code>let x;</code> is a way to declare a binding in advance without actually binding it (yet). This is used here to have the value assigned to <code>y</code> <i>escape</i> its scope. (2) at the end of a lexical scope, the variables are destroyed in <i>reverse order</i> of their creation; this is necessary so that a variable can <i>refer</i> to one declared before it safely. For example, consider <code>let vec = vec!(1, 2); let x = &amp;vec[0];</code>: if <code>vec</code> were destroyed first, <code>x</code> would point to freed memory!"}, {"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 0, "creation_date": 1515963273, "post_id": 40628035, "comment_id": 83490677, "body": "Prefect &amp; makes sense. Thank you again."}, {"owner": {"reputation": 1014, "user_id": 2447860, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/ce99f307eeddec0a6912d7b9b73e91e2?s=128&d=identicon&r=PG&f=1", "display_name": "Eric Zheng", "link": "https://stackoverflow.com/users/2447860/eric-zheng"}, "edited": false, "score": 1, "creation_date": 1525711041, "post_id": 40628035, "comment_id": 87454457, "body": "Does it mean that shadowing could lead to some kind of memory leak? In the snippet <code>fn main() { let x = a(); let x = b(); }</code>, the value created by <code>a()</code> could last till the end of the process, while there is no other place using it at all."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1014, "user_id": 2447860, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/ce99f307eeddec0a6912d7b9b73e91e2?s=128&d=identicon&r=PG&f=1", "display_name": "Eric Zheng", "link": "https://stackoverflow.com/users/2447860/eric-zheng"}, "edited": false, "score": 0, "creation_date": 1525713079, "post_id": 40628035, "comment_id": 87455565, "body": "@EricZheng: Yes and no. The value created by <code>a()</code> will live until the end of the lexical scope, I&#39;ll leave it up to you to decide whether this constitute a memory leak or not in your case. To reason about, you can use the idea of <i>frame slots</i> and rewrite the code above to <code>fn main() {</code>, <code>frame [0] = a();</code>, <code>x = 0;</code>, <code>frame[1] = b();</code>, <code>x = 1;</code>, <code>}</code>. <code>x</code> is just the name of the frame slot in which the value lives; if you reassign the name you may not be able to access the value any longer, but the compiler still can, because it&#39;s got access to the stack frame itself."}, {"owner": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "edited": false, "score": 1, "creation_date": 1557696078, "post_id": 40628035, "comment_id": 98841568, "body": "Maybe it&#39;s just me, but this answer shows how the two are different and how they work; I&#39;m no closer to understanding <b><i>why</i></b> the feature was built into the language in the first place, especially when you could&#39;ve easily said <code>let x = a(); let y = b();</code> instead of using shadowing to re-bind <code>x</code> twice."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "edited": false, "score": 1, "creation_date": 1557733904, "post_id": 40628035, "comment_id": 98849348, "body": "@code_dredd: This answer assumes having the same name is desirable, since in the OP the same name is reused. The question of whether shadowing is desirable instead of just using a different name is a separate question that all language designers have to think about; although I&#39;m not sure how it would be received on StackOverflow, it&#39;s certainly a question that interests me."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 21, "last_activity_date": 1479287553, "creation_date": 1479287553, "answer_id": 40628035, "question_id": 40621325, "link": "https://stackoverflow.com/questions/40621325/why-do-i-need-rebinding-shadowing-when-i-can-have-mutable-variable-binding/40628035#40628035", "title": "Why do I need rebinding/shadowing when I can have mutable variable binding?", "body": "<p><strong>Because the two have totally different effects.</strong></p>\n\n<hr>\n\n<p>To really understand what is going on, we need to start at the beginning: what is a binding? What does binding mean?</p>\n\n<p>Let's consider a simple function: <code>fn hello() -&gt; String;</code>.</p>\n\n<p>When invoking this function like so:</p>\n\n<pre><code>fn main() {\n    hello();\n}\n</code></pre>\n\n<p>What happens?</p>\n\n<p>The function returns a <code>String</code>, which is promptly discarded (executing <code>Drop</code> as it is thereby freeing its memory).</p>\n\n<p>The result is dropped because it was not bound to a variable name, and the rules of the language say that if not bound then it can be promptly dropped<sup>1</sup>.</p>\n\n<p>If we bind this result, however, we prolong the life of this value, and we can access it via this binding... for a while.</p>\n\n<pre><code>fn main() {\n    let value = hello();\n\n    std::mem::drop(value);\n\n    println!(\"{}\", value); // Error: moved out of value\n}\n</code></pre>\n\n<p><strong>This</strong> is the issue at hand: in Rust, the lifetime of a value is independent from the scope of a binding.</p>\n\n<p>A value need not even be dropped before its binding exits its scope: it can be transferred to another (similar to returning from a function).</p>\n\n<pre><code>fn main() {\n    let x;\n    {\n        let y = hello();\n        x = y;\n    }\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p><sup>1</sup> <em>the same happens if binding to <code>_</code></em>.</p>\n\n<hr>\n\n<p>So, now we armed with the fact that bindings and values differ, let's examine the two snippets.</p>\n\n<p>A first shadowing snippet, differing from yours:</p>\n\n<pre><code>fn main() {\n    let x = a();\n    let x = b();\n}\n</code></pre>\n\n<p>Steps, in order:</p>\n\n<ul>\n<li>The expression <code>a()</code> creates a value, which is bound to <code>x</code></li>\n<li>The expression <code>b()</code> creates a value, which is bound to <code>x</code></li>\n<li>The value created by <code>b()</code> is dropped</li>\n<li>The value created by <code>a()</code> is dropped</li>\n</ul>\n\n<p>Note that the fact that <code>x</code> is re-bound does not affect the lifetime of the value that was previously bound.</p>\n\n<p>Technically, it behaves exactly as if the result of <code>b()</code> was bound to <code>y</code>, with the sole exception that the previous <code>x</code> binding is not accessible while <code>y</code> is in scope.</p>\n\n<p>Now, the mutable snippet:</p>\n\n<pre><code>fn main() {\n    let mut x = a();\n    x = b();\n}\n</code></pre>\n\n<p>Steps, in order:</p>\n\n<ul>\n<li>The expression <code>a()</code> creates a value, which is bound to <code>x</code></li>\n<li>The expression <code>b()</code> creates a value, which is bound to <code>x</code>, and the previous value (created by <code>a()</code>) is dropped</li>\n<li>The value created by <code>b()</code> is dropped</li>\n</ul>\n\n<p>Once again, accessing the previous value is impossible, however whilst with shadowing it's impossible temporarily (if shadowing in a smaller scope), with assignment it's impossible forever since the value is dropped.</p>\n"}], "owner": {"reputation": 287, "user_id": 4480093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8d91b56823dec49f7e945f0ed0ca094b?s=128&d=identicon&r=PG&f=1", "display_name": "Roman Polach", "link": "https://stackoverflow.com/users/4480093/roman-polach"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2156, "favorite_count": 5, "accepted_answer_id": 40628035, "answer_count": 2, "score": 13, "last_activity_date": 1479287553, "creation_date": 1479251249, "question_id": 40621325, "link": "https://stackoverflow.com/questions/40621325/why-do-i-need-rebinding-shadowing-when-i-can-have-mutable-variable-binding", "title": "Why do I need rebinding/shadowing when I can have mutable variable binding?", "body": "<p>Why do I need rebinding/shadowing when I can have mutable variable binding? Consider:</p>\n\n<pre><code>let x = a();\nlet x = b(x);\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>let mut x = a();\nx = b(x);\n</code></pre>\n\n<p>Mutable variable binding allows a mutable borrow of that variable over this.\nBut does shadowing have some advantages over mutable bindings?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1479251387, "post_id": 40621042, "comment_id": 68476819, "body": "It looks like you don&#39;t need to get it out of that scope, you can do <code>Ok(de) =&gt; { &#47;* do something with de *&#47; },</code>"}, {"owner": {"reputation": 1234, "user_id": 554893, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/9b1773b46fd3a2032dd8007949ec0314?s=128&d=identicon&r=PG", "display_name": "IdontCareAboutReputationPoints", "link": "https://stackoverflow.com/users/554893/idontcareaboutreputationpoints"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1479252678, "post_id": 40621042, "comment_id": 68477199, "body": "I know I could do this but I would like to avoid nesting as much as possible."}], "answers": [{"comments": [{"owner": {"reputation": 1234, "user_id": 554893, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/9b1773b46fd3a2032dd8007949ec0314?s=128&d=identicon&r=PG", "display_name": "IdontCareAboutReputationPoints", "link": "https://stackoverflow.com/users/554893/idontcareaboutreputationpoints"}, "edited": false, "score": 0, "creation_date": 1479296914, "post_id": 40622033, "comment_id": 68495242, "body": "Thank you for your help, I see now the necessity of <code>continue</code> here."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1479255528, "creation_date": 1479255528, "answer_id": 40622033, "question_id": 40621042, "link": "https://stackoverflow.com/questions/40621042/handling-ioresultdirentry-without-return-on-err/40622033#40622033", "title": "Handling io::Result&lt;DirEntry&gt; without return on Err", "body": "<p>Your attempt declaring a variable outside the <code>match</code> is on the right track. You're getting an error about a possibly uninitialized variable because you're not forcing the flow of execution to progress to the next iteration on the <code>Err</code> branch. You can do so by adding <code>continue</code> to the <code>Err</code> branch. Then the variable can be initialized in the same way as the <code>files</code> variable, by assigning the result of the <code>match</code> expression directly to the variable.</p>\n\n<pre><code>for item in files {\n    let file = match item {\n        Ok(de) =&gt; de,\n        Err(_) =&gt; {\n            println!(\"{:?} cannot be accessed\", item);\n            continue;\n        }\n    };\n    // do something with file\n    file;\n}\n</code></pre>\n"}], "owner": {"reputation": 1234, "user_id": 554893, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/9b1773b46fd3a2032dd8007949ec0314?s=128&d=identicon&r=PG", "display_name": "IdontCareAboutReputationPoints", "link": "https://stackoverflow.com/users/554893/idontcareaboutreputationpoints"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 150, "favorite_count": 0, "accepted_answer_id": 40622033, "answer_count": 1, "score": 2, "last_activity_date": 1479265229, "creation_date": 1479249808, "last_edit_date": 1479265229, "question_id": 40621042, "link": "https://stackoverflow.com/questions/40621042/handling-ioresultdirentry-without-return-on-err", "title": "Handling io::Result&lt;DirEntry&gt; without return on Err", "body": "<p>I am trying to handle <code>io::Result&lt;DirEntry&gt;</code> returned from iterating on <code>items</code> of <code>std::fs::read_dir()</code> function. My concern is how to get the value of <code>DirEntry</code> when applying <code>match</code> from <code>Result</code> when <code>Ok</code></p>\n\n<pre><code>let files = match fs::read_dir(&amp;dir_path) {\n    Ok(items) =&gt; items,\n    //I actually want to leave function if there is an error here\n    Err(_) =&gt; return Err(\"Cannot read directory items\".to_string()),\n};\nfor item in files { // item: io::Result&lt;DirEntry&gt;\n    match item {\n      Ok(de) =&gt; de,// how to get `de` out of this scope??\n      //here I just want to print error and loop for next item\n      Err(_) =&gt; println!(\"{:?} cannot be accessed\", item),\n    };\n    //do something with `de`\n}\n</code></pre>\n\n<p>I tried also the following</p>\n\n<pre><code>  let files = match fs::read_dir(&amp;dir_path) {\n    Ok(items) =&gt; items,\n    Err(_) =&gt; return Err(\"Cannot read directory items\".to_string()),\n  };\n\n  for item in files {\n    let file: DirEntry; // I get compile error for use of possibly uninitialized `file`\n    match item {\n      Ok(de) =&gt; file = de,\n      Err(_) =&gt; println!(\"{:?} cannot be accessed\", item),\n    };\n    //do somthing with file\n  }\n</code></pre>\n\n<p>Maybe there is a better way for handling <code>Result</code> without using <code>match</code> in cases like this?</p>\n"}, {"tags": ["rust", "structure"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479227974, "post_id": 40615054, "comment_id": 68464286, "body": "See also <a href=\"http://stackoverflow.com/q/31233938/155423\">stackoverflow.com/q/31233938/155423</a> and the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\">function declaration for <code>unwrap</code></a>."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1479227995, "post_id": 40615054, "comment_id": 68464300, "body": "<code>as_ref()</code> would probably be better here than the duplicate&#39;s suggestion, since you want a <code>&amp;str</code> not a <code>&amp;mut str</code> or <code>&amp;mut String</code>."}, {"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1479228433, "post_id": 40615054, "comment_id": 68464589, "body": "@Aurora0001 I tried to add <code>as_ref()</code> but it still does not work (maybe I misunderstood something) <a href=\"http://play.integer32.com/?gist=d6399128af86ae76f2b880dd711f7849&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1479229068, "post_id": 40615500, "comment_id": 68465049, "body": "I think it&#39;s probably easier just to put it all in one line, like <a href=\"https://play.rust-lang.org/?gist=d0e5c2a66513613d5136deab406793d1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a> (<code>Self::b(self.p.as_ref().unwrap())</code>) to avoid the rather ugly block."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1479229190, "post_id": 40615500, "comment_id": 68465145, "body": "@Aurora0001 good point! The block is more versatile and so it&#39;s good to know."}, {"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "edited": false, "score": 0, "creation_date": 1479229276, "post_id": 40615500, "comment_id": 68465216, "body": "@Shepmaster &quot;the code is pretty strange&quot; Yes! It&#39;s because, it&#39;s oversimplified to just display the problem I was encountering. Anyway, thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1479229134, "last_edit_date": 1495540373, "creation_date": 1479228980, "answer_id": 40615500, "question_id": 40615054, "link": "https://stackoverflow.com/questions/40615054/reference-to-unwrapped-property-fails-use-of-partially-moved-value-self/40615500#40615500", "title": "Reference to unwrapped property fails: use of partially moved value: `self`", "body": "<p>As discussed in <a href=\"https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content\">Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)</a>, you can't call <code>unwrap</code> on a borrowed value because <code>unwrap</code> takes ownership of the value.</p>\n\n<p>Changing to <code>as_ref</code> borrows from the value <code>self</code>. You are not allowed to move a value (which includes returning that value) while any references to it are outstanding. That means you need to constrain the life of the borrow to end before the value needs to be moved:</p>\n\n<pre><code>fn a(self) -&gt; Self {\n    {\n        let c = self.p.as_ref().unwrap();\n        Self::b(c);\n    }\n    self\n}\n</code></pre>\n\n<hr>\n\n<p>It may be an artifact of your example, but the code is pretty strange. I'd have written it as </p>\n\n<pre><code>impl A {\n    fn a(self) -&gt; Self {\n        self.b();\n        self\n    }\n\n    fn b(&amp;self) {\n        print!(\"b: {}\", self.p.as_ref().unwrap())\n    }\n}\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>impl A {\n    fn a(&amp;self) {\n        print!(\"a: {}\", self.p.as_ref().unwrap())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1051, "favorite_count": 0, "accepted_answer_id": 40615500, "answer_count": 1, "score": 2, "last_activity_date": 1479229134, "creation_date": 1479227612, "last_edit_date": 1495542274, "question_id": 40615054, "link": "https://stackoverflow.com/questions/40615054/reference-to-unwrapped-property-fails-use-of-partially-moved-value-self", "title": "Reference to unwrapped property fails: use of partially moved value: `self`", "body": "<p>I try to send an unwrapped string reference to a static method implemented for a struct. Here is a simplified code:</p>\n\n<pre><code>fn main() {\n    let a = A {p: Some(\"p\".to_string())};\n    a.a();\n}\n\nstruct A {\n    p: Option&lt;String&gt;\n}\n\nimpl A {\n    fn a(self) -&gt; Self {\n        Self::b(&amp;self.p.unwrap());\n        self\n    }\n    fn b(b: &amp;str) {\n        print!(\"b: {}\", b)\n    }\n}\n</code></pre>\n\n<p>It fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of partially moved value: `self`\n  --&gt; src/main.rs:14:13\n   |\n13 |             Self::b(&amp;self.p.unwrap());\n   |                      ------ value moved here\n14 |             self\n   |             ^^^^ value used here after move\n   |\n   = note: move occurs because `self.p` has type `std::option::Option&lt;std::string::String&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I think implementing the <code>Copy</code> trait is not a solution. <strong>How can I unwrap <code>p</code> and pass it as a <code>&amp;str</code> to <code>b</code> in that context?</strong></p>\n\n<p>I changed my code as suggested in <a href=\"https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content\">Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)</a>:</p>\n\n<pre><code>fn main() {\n    let a = A {p: Some(\"p\".to_string())};\n    a.a();\n}\n\nstruct A {\n    p: Option&lt;String&gt;\n}\n\nimpl A {\n    fn a(self) -&gt; Self {\n        let c = self.p.as_ref().unwrap();\n        Self::b(&amp;c);\n        self\n    }\n    fn b(b: &amp;str) {\n        print!(\"b: {}\", b)\n    }\n}\n</code></pre>\n\n<p>Which results in a different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0505]: cannot move out of `self` because it is borrowed\n  --&gt; src/main.rs:15:13\n   |\n13 |             let c = self.p.as_ref().unwrap();\n   |                     ------ borrow of `self.p` occurs here\n14 |             Self::b(&amp;c);\n15 |             self\n   |             ^^^^ move out of `self` occurs here\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 0, "creation_date": 1479224461, "post_id": 40613839, "comment_id": 68461826, "body": "This is not as memory efficient as Lukas&#39; answer. Additionally, <code>slice</code> isn&#39;t mutable, so while the iterator might be consumed, <code>slice</code> itself won&#39;t be so cloning isn&#39;t needed."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 3, "creation_date": 1479224620, "post_id": 40613839, "comment_id": 68461944, "body": "@EliSadoff Actually, both of our solutions will probably result in the same optimized assembly output. Not the complete slice or iterator is cloned, but each element that is yielded."}, {"owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1479224673, "post_id": 40613839, "comment_id": 68461986, "body": "@LukasKalbertodt You&#39;re right. I also didn&#39;t think about the <code>Clone</code> vs. <code>Copy</code> thing which this accounts for."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 24, "last_activity_date": 1612984119, "last_edit_date": 1612984119, "creation_date": 1479224170, "answer_id": 40613839, "question_id": 40613725, "link": "https://stackoverflow.com/questions/40613725/iterating-over-a-slices-values-instead-of-references-in-rust/40613839#40613839", "title": "Iterating over a slice&#39;s values instead of references in Rust?", "body": "<p>In some cases you can iterate directly on values if you can consume the iterable, e.g. using <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator-1\" rel=\"nofollow noreferrer\"><code>Vec::into_iter()</code></a>.</p>\n<p>With slices, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow noreferrer\"><code>cloned</code></a> or <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied\" rel=\"nofollow noreferrer\"><code>copied</code></a> on the iterator:</p>\n<pre><code>fn main() {\n    let v = vec![1, 2, 3];\n    let slice = &amp;v[..];\n    for u in slice.iter().cloned() {\n        let u: usize = u; // prove it's really usize, not &amp;usize\n        println!(&quot;{}&quot;, u);\n    }\n}\n</code></pre>\n<p>This relies on the item implementing <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\"><code>Clone</code></a> or <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a>, but if it doesn't you probably do want references after all.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 39, "last_activity_date": 1612983963, "last_edit_date": 1612983963, "creation_date": 1479224235, "answer_id": 40613870, "question_id": 40613725, "link": "https://stackoverflow.com/questions/40613725/iterating-over-a-slices-values-instead-of-references-in-rust/40613870#40613870", "title": "Iterating over a slice&#39;s values instead of references in Rust?", "body": "<p>You can remove the reference by destructuring in <a href=\"https://doc.rust-lang.org/book/patterns.html\" rel=\"noreferrer\">the pattern</a>:</p>\n<pre><code>//  |\n//  v\nfor &amp;var in slice {\n    other_fn(var);\n}\n</code></pre>\n<p><em>However</em>, this only works <strong>for <code>Copy</code>-types</strong>! If you have a type that doesn't implement <code>Copy</code> but does implement <code>Clone</code>, you could use the <code>cloned()</code> iterator adapter; see <a href=\"https://stackoverflow.com/a/40613839/155423\">Chris Emerson's answer</a> for more information.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7811, "favorite_count": 1, "accepted_answer_id": 40613870, "answer_count": 2, "score": 26, "last_activity_date": 1612984119, "creation_date": 1479223835, "last_edit_date": 1479226192, "question_id": 40613725, "link": "https://stackoverflow.com/questions/40613725/iterating-over-a-slices-values-instead-of-references-in-rust", "title": "Iterating over a slice&#39;s values instead of references in Rust?", "body": "<p>When looping over a slice of structs, the value I get is a reference (which is fine), however in some cases it's annoying to have to write <code>var</code> as <code>(*var)</code> in many places.</p>\n\n<p>Is there a better way to avoid re-declaring the variable?</p>\n\n<pre><code>fn my_fn(slice: &amp;[MyStruct]) {\n    for var in slice {\n        let var = *var;  // &lt;-- how to avoid this?\n\n        // Without the line above, errors in comments occur:\n\n        other_fn(var);  // &lt;-- expected struct `MyStruct`, found reference\n\n        if var != var.other {\n            // ^^ trait `&amp;MyStruct: std::cmp::PartialEq&lt;MyStruct&gt;&gt;` not satisfied\n            foo();\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>See: <a href=\"https://bitbucket.org/snippets/ideasman42/eeepa\" rel=\"noreferrer\">actual error output</a> (more cryptic).</p>\n"}, {"tags": ["function", "arguments", "rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1479205676, "post_id": 40605704, "comment_id": 68449485, "body": "Another aspect to consider: if you could call a function with &quot;too many&quot; arguments without complaint, how would you ever know some of the arguments you <i>meant</i> to pass were just being discarded?"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1479218349, "last_edit_date": 1479218349, "creation_date": 1479200515, "answer_id": 40605704, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w/40605704#40605704", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>Short answer: a function with zero arguments has a different API and ABI from a function with one argument.</p>\n\n<p>Long answer:</p>\n\n<p>The Iron handler expects a function with one argument. If you were able to pass a function with no arguments, how would Iron know about that? It's specifying that there should be one argument, so that's the API requirement. The fact that you throw away the argument changes nothing, Iron will still pass that one argument to the function.</p>\n\n<p>If you would (unsafely) pass a function that has zero arguments, then Iron will still pass that one argument, but the function's code doesn't expect an argument and you thus would have introduced undefined behaviour.</p>\n\n<p>That said, Iron could supply some helper trait magic that allows you to pass zero argument functions, but all that would do is introduce a second layer that you don't see:</p>\n\n<pre><code>fn short_add() -&gt; i32 {\n    add(42) // or another dummy value\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1479205710, "creation_date": 1479205710, "answer_id": 40607482, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w/40607482#40607482", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>Functions with different signatures are not interchangeable, as the ABI is different.</p>\n\n<p>While you might think it doesn't make a difference if you're ignoring the parameter, you can't rely on that; and there are certainly cases where it does matter.  For example, anything with a destructor would expect the called function to destroy the parameter before returning.</p>\n\n<p>One of Rust's strengths is its strong type system which disallows incorrect uses like this by default (similarly integer conversions, etc.); and in this particular case it's pretty easy to add the unnamed/unused parameter so not really significantly inconvenient.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 1, "last_activity_date": 1479212622, "creation_date": 1479212622, "answer_id": 40609784, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w/40609784#40609784", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>In Rust, you can pass function pointers and closures around, but functions with different arguments and returns have different types.</p>\n\n<p>Example:</p>\n\n<pre><code>fn test_no_args(f0: fn() -&gt; i32) {\n    println!(\"{}\", f0())\n} \n\nfn test_1_arg(f1: fn(i32) -&gt; i32) {\n    println!(\"{}\", f1(3))\n}\n\nfn main() {\n    // test function with no args\n    fn t0() -&gt; i32 {\n        42\n    }\n\n    // test func with 1 arg\n    // we're discarding the arg\n    // but we need this signature to call test_1_arg\n    fn t1(_: i32) -&gt; i32 {\n        3\n    }\n\n    test_no_args(t0);\n    test_1_arg(t1);\n    // test_no_args(t1); doesn't compile, test_no_args expects a fn() -&gt; i32\n}\n</code></pre>\n\n<p>Note how <code>test_1_arg</code> expects a <code>fn(i32)-&gt; i32</code>, but we want to feed it our t1 function that does not really need the input.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1479226693, "creation_date": 1479226693, "answer_id": 40614751, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w/40614751#40614751", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>A function signature is a contract between the caller and the callee:</p>\n\n<ul>\n<li>it allows the caller to ensure that the arguments it passes are the one specified by the contract</li>\n<li>it allows the callee to be assured that the arguments it received are the one specified by the contract</li>\n</ul>\n\n<p>And, maybe more importantly, it enforces <strong>an encapsulation boundary</strong>: the caller has no idea which arguments are read or modified by the callee, all it knows is what the contract requires.</p>\n\n<p>This encapsulation is the driving factor here. The API was designed because <em>some</em> clients may make use of this value, so it is passed around. Whether a <em>particular</em> client uses it or not, is an <strong>implementation detail</strong> of the client, and the caller does not (and should not) care.</p>\n"}, {"tags": [], "owner": {"reputation": 37, "user_id": 319672, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/74701ee28b836819f23f5bfed53e8dd4?s=128&d=identicon&r=PG", "display_name": "reeze", "link": "https://stackoverflow.com/users/319672/reeze"}, "is_accepted": false, "score": -1, "last_activity_date": 1479266206, "creation_date": 1479266206, "answer_id": 40623497, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w/40623497#40623497", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>The first function means I have function <code>add</code> but the function itself says I don't care what it is. </p>\n\n<p>but the second one means I don't need any parameters. they are not compatible with each other.</p>\n\n<p>The iron framework need a function it will feed a argument to it. The framework didn't care you use the parameter or not.</p>\n"}], "owner": {"reputation": 153, "user_id": 6644576, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-3oGGkFkFz3M/AAAAAAAAAAI/AAAAAAAABLo/nsh_QGAB8JI/photo.jpg?sz=128", "display_name": "Adityo Pratomo", "link": "https://stackoverflow.com/users/6644576/adityo-pratomo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 441, "favorite_count": 0, "accepted_answer_id": 40614751, "answer_count": 5, "score": 1, "last_activity_date": 1479303739, "creation_date": 1479200104, "last_edit_date": 1479303739, "question_id": 40605565, "link": "https://stackoverflow.com/questions/40605565/what-is-the-difference-between-a-rust-function-with-no-argument-and-a-function-w", "title": "What is the difference between a Rust function with no argument and a function with one unused argument?", "body": "<p>What's the difference between making a function like this:</p>\n\n<pre><code>fn add(_: i32) -&gt; i32 {\n    10 + 25\n}\n</code></pre>\n\n<p>And this one:</p>\n\n<pre><code>fn add() -&gt; i32 {\n    10 + 25\n}\n</code></pre>\n\n<p>I realize that the first function requires an argument when being called, even though it's not used, so I reckon that the second version should okay in that case. </p>\n\n<p>Is there any reason why I'm allowed to use the first version? I'm seeing this in the example of Iron when implementing a handler to a certain route. I'm confused as to why it has to be that way when supplying an empty argument should work.</p>\n"}, {"tags": ["rust", "environment-variables", "rust-cargo"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1479194253, "post_id": 40604084, "comment_id": 68443028, "body": "Just to be sure: <code>you&#39;llneverknow</code> is just a replacement for this question? Are there any non-ASCII characters in the real bot token?"}, {"owner": {"reputation": 12672, "user_id": 1927206, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/434140a485dca639d56237db0fbeef54?s=128&d=identicon&r=PG", "display_name": "Bill Woodger", "link": "https://stackoverflow.com/users/1927206/bill-woodger"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1479194432, "post_id": 40604084, "comment_id": 68443104, "body": "@LukasKalbertodt Are you saying there non-ASCII characters in you&#39;llneverknow?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 12672, "user_id": 1927206, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/434140a485dca639d56237db0fbeef54?s=128&d=identicon&r=PG", "display_name": "Bill Woodger", "link": "https://stackoverflow.com/users/1927206/bill-woodger"}, "edited": false, "score": 1, "creation_date": 1479194633, "post_id": 40604084, "comment_id": 68443202, "body": "@BillWoodger No, that&#39;s fine. But if it&#39;s an replacement, the real token might contain non-ASCII chars."}, {"owner": {"reputation": 12672, "user_id": 1927206, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/434140a485dca639d56237db0fbeef54?s=128&d=identicon&r=PG", "display_name": "Bill Woodger", "link": "https://stackoverflow.com/users/1927206/bill-woodger"}, "edited": false, "score": 1, "creation_date": 1479194679, "post_id": 40604084, "comment_id": 68443220, "body": "@abcde13 Can you show the code which takes the snapshot?"}, {"owner": {"reputation": 12672, "user_id": 1927206, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/434140a485dca639d56237db0fbeef54?s=128&d=identicon&r=PG", "display_name": "Bill Woodger", "link": "https://stackoverflow.com/users/1927206/bill-woodger"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1479194722, "post_id": 40604084, "comment_id": 68443239, "body": "@LukasKalbertodt Thanks, understand now."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1479195353, "post_id": 40604084, "comment_id": 68443539, "body": "Does it work if you run directly (target/debug/appname) instead of cargo run?"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 3, "creation_date": 1479206414, "post_id": 40604084, "comment_id": 68449975, "body": "Do you run you project in the terminal where this is set?  Did you try to run it like <code>DISCORD_TOKEN=yourtoken cargo run</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1479218768, "post_id": 40604084, "comment_id": 68457777, "body": "<i>none of the <code>CARGO</code> variables exist, but they are printed in the Rust code</i> \u2014 That&#39;s because <code>cargo run</code> sets them."}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1479221857, "post_id": 40604084, "comment_id": 68460046, "body": "@LukasKalbertodt That&#39;s just a replacement string. But the real string is all ASCII characters."}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1479221952, "post_id": 40604084, "comment_id": 68460108, "body": "@ChrisEmerson You are right. It does work if I run it from target/debug/appname"}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1479221960, "post_id": 40604084, "comment_id": 68460117, "body": "@VictorPolevoy I&#39;ve run it in the terminal where, just before, I source my bashrc and grep to make sure that environment variable exists."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479222238, "post_id": 40604084, "comment_id": 68460307, "body": "<code>echo &#39;fn main() { println!(&quot;{:?}&quot;, ::std::env::var(&quot;FOO&quot;)); }&#39; &gt; src&#47;main.rs &amp;&amp; FOO=bar cargo run</code> results in <code>Ok(&quot;bar&quot;)</code>. Cargo shouldn&#39;t be removing any environment variables."}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479265755, "post_id": 40604084, "comment_id": 68480765, "body": "@Shepmaster your code returned <code>Ok(&quot;bar&quot;)</code>. So how does that reflect what I should do in my code? And why does running the actual executable in the target dir work?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479265908, "post_id": 40604084, "comment_id": 68480803, "body": "@abcde13 are you saying that if you use your environment variable with my code, suitably modified, you get the value of your key? You really need to produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> to narrow down your problem."}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479266232, "post_id": 40604084, "comment_id": 68480880, "body": "@Shepmaster yes. If I run your code as main.rs with <code>&quot;DISCORD_TOKEN&quot;</code>  as the key and remove the part FOO=bar, it gets the token. And I concur. I will get a testcase up in a sec."}, {"owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "edited": false, "score": 0, "creation_date": 1479266529, "post_id": 40604084, "comment_id": 68480935, "body": "And I don&#39;t know what happened. I reran it just now, and it worked. Opened and closed the terminal, and it still worked.  Sorry for wasting everyone&#39;s time. Gonna upvote you all for helping regardless."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1479282566, "post_id": 40604084, "comment_id": 68486572, "body": "I think it is better to delete this question because there was not a real problem, so it will not be helpful for others who read it."}], "answers": [{"comments": [{"owner": {"reputation": 12807, "user_id": 936, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/yZigI.png?s=128&g=1", "display_name": "Patrik Svensson", "link": "https://stackoverflow.com/users/936/patrik-svensson"}, "edited": false, "score": 4, "creation_date": 1521390376, "post_id": 40647034, "comment_id": 85700058, "body": "You could also call sudo with the <code>-E</code> parameter to &quot;transfer&quot; environment variables to the sudo profile."}], "tags": [], "owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "is_accepted": true, "score": 1, "last_activity_date": 1479358695, "last_edit_date": 1495535559, "creation_date": 1479358695, "answer_id": 40647034, "question_id": 40604084, "link": "https://stackoverflow.com/questions/40604084/cant-access-environment-variable-in-rust/40647034#40647034", "title": "Can&#39;t access environment variable in Rust", "body": "<p>Undeleted this question because I got the answer. But it's because I didn't examine all the factors before asking the question.</p>\n\n<p>It worked when I ran <code>cargo run</code>, but didn't work when I ran <code>sudo cargo run</code>.  I was running it in sudo because I was trying to read memory of another process. The <code>sudo</code> profile has it's own set of env vars, and it resets the environment before going sudo.</p>\n\n<p>To fix this, I ran <code>sudo visudo</code> and inserted this line</p>\n\n<p><code>Defaults env_keep += \"DISCORD_TOKEN'</code></p>\n\n<p>From there, it worked.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/8633461/how-to-keep-environment-variables-when-using-sudo\">This link</a> got me the answer.</p>\n"}], "owner": {"reputation": 408, "user_id": 2766706, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d5e52e5b7d797b9fe670f266399d31df?s=128&d=identicon&r=PG", "display_name": "chr0nikler", "link": "https://stackoverflow.com/users/2766706/chr0nikler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3243, "favorite_count": 1, "accepted_answer_id": 40647034, "answer_count": 1, "score": 4, "last_activity_date": 1479358695, "creation_date": 1479194135, "last_edit_date": 1479274473, "question_id": 40604084, "link": "https://stackoverflow.com/questions/40604084/cant-access-environment-variable-in-rust", "title": "Can&#39;t access environment variable in Rust", "body": "<p>The piece of code is as follows:</p>\n\n<pre><code>// Log in to Discord using a bot token from the environment                  \nlet discord = Discord::from_bot_token(                                       \n    &amp;env::var(\"DISCORD_TOKEN\").unwrap()                                      \n).expect(\"login failed\");\n</code></pre>\n\n<p>I get an error saying it is unable to find the environment variable <code>DISCORD_TOKEN</code>. </p>\n\n<p>My environment does show the variable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>myawesomename$env | grep DISCORD\nDISCORD_TOKEN=you'llneverknow\n</code></pre>\n\n<p>If I print all the keys and values that Rust knows:</p>\n\n<pre><code>for (key, value) in env::vars() {                                            \n    println!(\"{}: {}\", key, value);                                      \n}\n</code></pre>\n\n<p>It doesn't show the environment variable.</p>\n\n<p>On a similar note, when I do <code>env | grep CARGO</code>, none of the CARGO variables exist, but they are printed in the Rust code.</p>\n\n<p>There is something I fundamentally doesn't understand about the profile/system env variables Rust is looking at (which, I assumed, are the variables in the environment in which the process is launched).</p>\n\n<p><strong>UPDATE</strong>: I don't know what I change, but it works now. I apologize for intruding on everyone's time. Thank you for helping me look into this though.</p>\n"}, {"tags": ["rust", "dynamic-linking", "dynamic-library", "rust-cargo", "ldd"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1479210482, "post_id": 40602708, "comment_id": 68452482, "body": "Does adding the path to <code>&#47;etc&#47;ld.so.conf</code> and running <code>ldconfig</code> not work for you? (Or failing that, setting the <code>LD_LIBRARY_PATH</code> environment variable?)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1479218943, "post_id": 40602708, "comment_id": 68457897, "body": "<i>Is there a way to get Rust to look for .so files</i> \u2014 this isn&#39;t something about Rust once the binary is created; it&#39;s up to the OS and executable loaders. Setting the <code>rpath</code> <i>is</i> something that Rust can control (more accurately that Rust instructs the linker to deal with)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479219705, "post_id": 40602708, "comment_id": 68458451, "body": "<i>is there a way to at least get Rust to insert the absolute path of the library it was linked with</i> \u2014 that&#39;s what rpath is supposed to be. Can you try <a href=\"http://stackoverflow.com/a/6348364/155423\">printing the rpath of the executable</a>? You may also want to try a <code>cargo clean</code> and <code>cargo build --verbose</code>. Then see if an <code>rpath</code> option is  passed when the executable is linked."}], "answers": [{"comments": [{"owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "edited": false, "score": 0, "creation_date": 1479436538, "post_id": 40644750, "comment_id": 68567766, "body": "Thanks for this incredibly informative response!  You simplified and clarified what took me several hours of trawling the internet into a single well-written format.  Just one question: Is <code>$ORIGIN</code> relative to the location of the binary or the location of the source code being compiled?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "edited": false, "score": 1, "creation_date": 1479436878, "post_id": 40644750, "comment_id": 68567822, "body": "@Ameo <code>$ORIGIN</code> is relative to the executable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 25, "last_activity_date": 1479342796, "last_edit_date": 1495540986, "creation_date": 1479342335, "answer_id": 40644750, "question_id": 40602708, "link": "https://stackoverflow.com/questions/40602708/linking-rust-application-with-a-dynamic-library-not-in-the-runtime-linker-search/40644750#40644750", "title": "Linking Rust application with a dynamic library not in the runtime linker search path", "body": "<p>Here's a complete solution...</p>\n\n<p>I created a C library exporting a simple addition function. I also created a Cargo project to use this function.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/scratch\n\u251c\u2500\u2500 executable\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.lock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.rs\n\u2514\u2500\u2500 library\n    \u251c\u2500\u2500 awesome_math.c\n    \u2514\u2500\u2500 libawesome_math.so\n</code></pre>\n\n<p><strong>awesome_math.c</strong></p>\n\n<pre><code>#include &lt;stdint.h&gt;\n\nuint8_t from_the_library(uint8_t a, uint8_t b) {\n  return a + b;\n}\n</code></pre>\n\n<p>The library was compiled as <code>gcc -g -shared awesome_math.c -o libawesome_math.so</code>.</p>\n\n<p><strong>src.rs</strong></p>\n\n<pre><code>extern crate libc;\n\nextern {\n    fn from_the_library(a: libc::uint8_t, b: libc::uint8_t) -&gt; libc::uint8_t;\n}\n\nfn main() {\n    unsafe {\n        println!(\"Adding: {}\", from_the_library(1, 2));\n    }\n}\n</code></pre>\n\n<p><strong>build.rs</strong></p>\n\n<pre><code>fn main() {\n    println!(\"cargo:rustc-link-lib=dylib=awesome_math\");\n    println!(\"cargo:rustc-link-search=native=/scratch/library\");\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"executable\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\nbuild = \"build.rs\"\n\n[dependencies]\nlibc = \"*\"\n\n[profile.dev]\nrpath = true\n</code></pre>\n\n<p>Doing all of this exhibits the same problem that you experienced. <strong>This is called a <a href=\"https://stackoverflow.com/help/mcve\">Minimal, Complete, and Verifiable Example</a> and you should provide one when asking a question</strong>. If this were provided, this answer might have been created 12 hours earlier.</p>\n\n<p>Investigating further, I asked the Rust compiler to print out the linker args it was going to use:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo rustc -- -Z print-link-args\n</code></pre>\n\n<p>This printed out a bunch of stuff, but the two important lines were</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\"-Wl,-rpath,$ORIGIN/../../../../root/.multirust/toolchains/stable-2016-11-08-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\"\n\"-Wl,-rpath,/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib\"\n</code></pre>\n\n<p>These are directives to the linker to add specific values to the rpath of the finished binary. Missing is any reference to the dynamic library that we are linking to. In retrospect, this probably makes sense, as how would the compiler know that we want to include it in the rpath?</p>\n\n<p>A workaround is to add another directive to the linker. There are interesting options (like <code>$ORIGIN</code>), but for simplicity, we will just use an absolute path:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo rustc -- -C link-args=\"-Wl,-rpath,/scratch/library/\"\n</code></pre>\n\n<p>And the resulting binary prints the right thing for <code>ldd</code> and runs without setting <code>LD_LIBRARY_PATH</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ldd target/debug/executable | grep awesome\n    libawesome_math.so =&gt; /scratch/library/libawesome_math.so (0x00007fe859085000)\n$ ./target/debug/executable\nAdding: 3\n</code></pre>\n\n<hr>\n\n<p>Turning to making it relative, we can use <code>$ORIGIN</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo rustc -- -C link-args='-Wl,-rpath,$ORIGIN/../../../library/'\n</code></pre>\n\n<p>Be careful to escape <code>$ORIGIN</code> properly for your shell, and remember that the path is relative to the <em>executable</em>, not the current working directory.</p>\n"}, {"tags": [], "owner": {"reputation": 261, "user_id": 3760486, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a8c1e07fa7b842954e4b84d0eee0493a?s=128&d=identicon&r=PG", "display_name": "Peter", "link": "https://stackoverflow.com/users/3760486/peter"}, "is_accepted": false, "score": 6, "last_activity_date": 1507767963, "creation_date": 1507767963, "answer_id": 46699544, "question_id": 40602708, "link": "https://stackoverflow.com/questions/40602708/linking-rust-application-with-a-dynamic-library-not-in-the-runtime-linker-search/46699544#46699544", "title": "Linking Rust application with a dynamic library not in the runtime linker search path", "body": "<p>Adding to <a href=\"https://stackoverflow.com/a/40644750/3760486\">what Shepmaster said</a> (apparently I don't have enough reputation to comment): I'm not sure when this feature was added, but as of <em>at least</em> Rust 1.20, you can achieve the same effect by setting the environment variable <code>RUSTFLAGS</code>:</p>\n\n<pre><code>$ RUSTFLAGS=\"-C link-args=-Wl,-rpath,/the/lib/path\" cargo build\n</code></pre>\n\n<p>This can be more convenient than the <code>cargo rustc</code> option if, for instance, you're using build scripts that just invoke <code>cargo build</code>.</p>\n"}], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8823, "favorite_count": 6, "accepted_answer_id": 40644750, "answer_count": 2, "score": 13, "last_activity_date": 1507767963, "creation_date": 1479187988, "last_edit_date": 1479342505, "question_id": 40602708, "link": "https://stackoverflow.com/questions/40602708/linking-rust-application-with-a-dynamic-library-not-in-the-runtime-linker-search", "title": "Linking Rust application with a dynamic library not in the runtime linker search path", "body": "<p>I have a shared library that I'd like to dynamically link into several separate binary Cargo applications.  I include its location in the linker using the <code>-- -L /path/to/dir</code> format and the application compiles correctly with the significant decrease in binary size I expect.  However, when checking the generated binary using <code>ldd</code>, I get a message saying that the library couldn't be found:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>casey@Gilthar-II:~/bot4/backtester/target/release$ ldd backtester \n    linux-vdso.so.1 =&gt;  (0x00007ffc642f7000)\n    libalgobot_util.so =&gt; not found\n</code></pre>\n\n<p>If I add the library to the <code>/lib/x86_64-linux-gnu</code> directory, the application runs without issue.</p>\n\n<p>Is there a way to get Rust to look for .so files in the same directory as the binary or in a directory like lib in the binary's directory to be loaded at runtime?  If that's not possible, is there a way to at least get Rust to insert the absolute path of the library it was linked with?</p>\n\n<p>I've tried setting <code>rpath = true</code> with no effect.  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 4, "creation_date": 1479185333, "post_id": 40601780, "comment_id": 68439516, "body": "You need to supply the <code>where T: std::fmt::Display</code> type constraint to your types all the way down. That said, there are quite a few other issues with your code. The obvious one is that the <code>write!</code> lines end in a semi colon and so those methods don&#39;t return the result from the <code>write!</code> calls. You&#39;re also going to hit ownership issues and so you&#39;ll need to either <code>#[derive(Clone)]</code>, <code>clone()</code> and <code>+ std::clone::Clone</code> the type constraints in all of the places that happens. Containers like this aren&#39;t trivial in Rust and require a deep understanding of the type system to pull off."}], "answers": [{"comments": [{"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 0, "creation_date": 1479186549, "post_id": 40602351, "comment_id": 68439906, "body": "Is it the same fix for <code>std::fmt::Debug</code>? rustc is also giving me the error E0277"}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 0, "creation_date": 1479189186, "post_id": 40602351, "comment_id": 68440833, "body": "Yes. It&#39;s the same fix any time you get error 0277."}, {"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 0, "creation_date": 1479238406, "post_id": 40602351, "comment_id": 68470406, "body": "<code>impl&lt;T: std::fmt::Debug&gt; std::fmt::Debug for Node&lt;T&gt;</code> doesn&#39;t seems to be working. <code>error[E0277]: the trait bound &#39;T: std::fmt::Display&#39; is not satisfied</code>"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 0, "creation_date": 1479239996, "post_id": 40602351, "comment_id": 68471334, "body": "@Bl4ckb0ne You likely need both. I prefer a <code>where</code> clause in this instance: <code>...for Node&lt;T&gt; where T: std::fmt::Debug + std::fmt::Display</code>."}, {"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1479240335, "post_id": 40602351, "comment_id": 68471519, "body": "@SimonWhitehead so I only need 1 fmt for both <code>Debug</code> and <code>Display</code> ?"}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 0, "creation_date": 1479241571, "post_id": 40602351, "comment_id": 68472289, "body": "@Bl4ckb0ne In your <code>Debug</code> implementation, you still call out to <code>self.data</code>&#39;s <code>Display</code> implementation. So, for what you have, you&#39;d need <code>impl&lt;T: std::fmt::Display&gt; std::fmt::Debug for Node&lt;T&gt;</code>. I have tried to make this more clear in my answer."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 9, "last_activity_date": 1479241455, "last_edit_date": 1495540415, "creation_date": 1479185949, "answer_id": 40602351, "question_id": 40601780, "link": "https://stackoverflow.com/questions/40601780/the-trait-bound-t-stdfmtdisplay-is-not-satisfied/40602351#40602351", "title": "The trait bound `T: std::fmt::Display` is not satisfied", "body": "<p>Here is a <a href=\"https://stackoverflow.com/help/mcve\">minimal</a> version of this issue:</p>\n\n<pre><code>struct Bob&lt;T&gt;(T);\n\nimpl&lt;T&gt; std::fmt::Display for Bob&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \"Bob: {}\", self.0)\n    }\n}\n\nfn main() {\n    let x = Bob(4);\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<hr>\n\n<p>Let's take a look at our <code>fmt</code> function:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n    write!(f, \"Bob: {}\", self.0)\n}\n</code></pre>\n\n<p>We can rewrite it as follows for better clarity:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n    write!(f, \"Bob: \")?;\n    std::fmt::Display::fmt(&amp;self.0, f)\n}\n</code></pre>\n\n<p>Calling one of the formatting macros (<code>write!</code>, <code>format!</code>, <code>println!</code>, etc.) with double brackets in quotes, <code>\"{}\"</code>, says to call the <code>fmt</code> function from the <code>Display</code> trait for that argument (<code>self.0</code> in this case).</p>\n\n<p>The problem is that we have some generic type <code>T</code>, so the compiler has no idea whether <code>Display</code> is implemented for it or not.</p>\n\n<p>There are two ways to fix this.</p>\n\n<p>First, we could add the constraint <code>T: std::fmt::Display</code> to our implementation of <code>Display</code> for <code>Bob</code>. This will let us use the struct with non-<code>Display</code> types, but <code>Display</code> will only be implemented when we use it with <code>Display</code> types.</p>\n\n<p>That fix looks like this:</p>\n\n<pre><code>impl&lt;T: std::fmt::Display&gt; std::fmt::Display for Bob&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \"Bob: {}\", self.0)\n    }\n}\n</code></pre>\n\n<p>Second, we could add that constraint to the struct definition, like this:</p>\n\n<pre><code>struct Bob&lt;T: std::fmt::Display&gt;(T);\n</code></pre>\n\n<p>This will mean that <code>Bob</code> is only generic with regards to types that are <code>Display</code>. It is more limiting and restricts the flexibility of <code>Bob</code>, but there may be cases where that is desired.</p>\n\n<hr>\n\n<p>There are other traits similar to <code>Display</code> that can be called by putting different tokens in the brackets. The full list can be found in the <a href=\"https://doc.rust-lang.org/std/fmt/index.html\" rel=\"nofollow noreferrer\">documentation</a>, but, for example, we could use the <code>Debug</code> trait with</p>\n\n<pre><code>write!(f, \"Bob: {:?}\", self.0)\n</code></pre>\n\n<p>only then we would need to be sure that <code>T</code> is <code>std::fmt::Debug</code>.</p>\n"}], "owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3025, "favorite_count": 0, "accepted_answer_id": 40602351, "answer_count": 1, "score": 1, "last_activity_date": 1479241455, "creation_date": 1479182386, "last_edit_date": 1479218677, "question_id": 40601780, "link": "https://stackoverflow.com/questions/40601780/the-trait-bound-t-stdfmtdisplay-is-not-satisfied", "title": "The trait bound `T: std::fmt::Display` is not satisfied", "body": "<p>I am writing a basic binary tree structure and I want to display a node. It seems that Rust has trouble displaying a generic type, and I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `T: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:55:60\n   |\n55 |         write!(f, \"Node data: {} left: {:?}, right: {:?}\", self.data, self.left, self.right);\n   |                                                            ^^^^^^^^^ trait `T: std::fmt::Display` not satisfied\n   |\n   = help: consider adding a `where T: std::fmt::Display` bound\n   = note: required by `std::fmt::Display::fmt`\n\nerror[E0277]: the trait bound `T: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:62:60\n   |\n62 |         write!(f, \"Node data: {} left: {:?}, right: {:?}\", self.data, self.left, self.right);\n   |                                                            ^^^^^^^^^ trait `T: std::fmt::Display` not satisfied\n   |\n   = help: consider adding a `where T: std::fmt::Display` bound\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>Here's the full code, including the iterators</p>\n\n<pre><code>struct Node&lt;T&gt; {\n    data: T,\n    left: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    right: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nstruct NodeIterator&lt;T&gt; {\n    nodes: Vec&lt;Node&lt;T&gt;&gt;,\n}\n\nstruct Tree&lt;T&gt; {\n    root: Option&lt;Node&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; {\n    pub fn new(value: Option&lt;T&gt;,\n               left: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n               right: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;)\n               -&gt; Node&lt;T&gt; {\n        Node {\n            data: value.unwrap(),\n            left: left,\n            right: right,\n        }\n    }\n\n    pub fn insert(&amp;mut self, value: T) {\n        println!(\"Node insert\");\n        match self.left {\n            Some(ref mut l) =&gt; {\n                match self.right {\n                    Some(ref mut r) =&gt; {\n                        r.insert(value);\n                    } \n                    None =&gt; {\n                        self.right = Some(Box::new(Node::new(Some(value), None, None)));\n                    }\n                }\n            }\n            None =&gt; {\n                self.left = Some(Box::new(Node::new(Some(value), None, None)));\n            }\n        }\n    }\n}\n\nimpl&lt;T&gt; std::fmt::Display for Node&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f,\n               \"Node data: {} left: {:?}, right: {:?}\",\n               self.data,\n               self.left,\n               self.right);\n    }\n}\n\nimpl&lt;T&gt; std::fmt::Debug for Node&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f,\n               \"Node data: {} left: {:?}, right: {:?}\",\n               self.data,\n               self.left,\n               self.right);\n    }\n}\n\nimpl&lt;T&gt; Iterator for NodeIterator&lt;T&gt; {\n    type Item = Node&lt;T&gt;;\n    fn next(&amp;mut self) -&gt; Option&lt;Node&lt;T&gt;&gt; {\n        if self.nodes.len() == 0 {\n            None\n        } else {\n            let current: Option&lt;Node&lt;T&gt;&gt; = self.nodes.pop();\n            for it in current.iter() {\n                for n in it.left.iter() {\n                    self.nodes.push(**n);\n                }\n                for n in it.right.iter() {\n                    self.nodes.push(**n);\n                }\n            }\n            return current;\n        }\n    }\n}\n\nimpl&lt;T&gt; Tree&lt;T&gt; {\n    pub fn new() -&gt; Tree&lt;T&gt; {\n        Tree { root: None }\n    }\n\n    pub fn insert(&amp;mut self, value: T) {\n        match self.root {\n            Some(ref mut n) =&gt; {\n                println!(\"Root is not empty, insert in node\");\n                n.insert(value);\n            }\n            None =&gt; {\n                println!(\"Root is empty\");\n                self.root = Some(Node::new(Some(value), None, None));\n            }\n        }\n    }\n\n    fn iter(&amp;self) -&gt; NodeIterator&lt;T&gt; {\n        NodeIterator { nodes: vec![self.root.unwrap()] }\n    }\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let mut tree: Tree&lt;i32&gt; = Tree::new();\n    tree.insert(42);\n    tree.insert(43);\n\n    for it in tree.iter() {\n        println!(\"{}\", it);\n    }\n}\n</code></pre>\n"}, {"tags": ["mysql", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1479175579, "post_id": 40600826, "comment_id": 68437258, "body": "I am unsure exactly.. but <a href=\"http://blackbeam.org/doc/src/mysql/src/value.rs.html#1041-1046\" rel=\"nofollow noreferrer\">it looks to me like the source code</a> wants at least two tuple items. Can you try doing: <code>stmt.execute((name, ))</code> (note the extra comma)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479176121, "post_id": 40600826, "comment_id": 68437372, "body": "FWIW, you don&#39;t need to write that code quite so imperatively; you can <a href=\"http://play.integer32.com/?gist=63dccde566d577619a97159902fda123&amp;version=stable\" rel=\"nofollow noreferrer\">treat it as an iterator</a> (untested, but shows the right idea)."}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1479175728, "post_id": 40600901, "comment_id": 68437292, "body": "Heh, I missed that. Probably easier to read the documentation than trawl through the macro definitions!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1479175770, "post_id": 40600901, "comment_id": 68437302, "body": "@SimonWhitehead assuming that documentation is good is a risky bet usually. At least the code won&#39;t lie to you (usually)."}], "tags": [], "owner": {"reputation": 9139, "user_id": 773228, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/baaecdda322cf4462a0dd018d7959b1e?s=128&d=identicon&r=PG&f=1", "display_name": "Justin Wood", "link": "https://stackoverflow.com/users/773228/justin-wood"}, "is_accepted": true, "score": 1, "last_activity_date": 1479175659, "creation_date": 1479175659, "answer_id": 40600901, "question_id": 40600826, "link": "https://stackoverflow.com/questions/40600826/cannot-execute-a-mysql-prepared-statement-when-using-the-mysql-crate-the-parame/40600901#40600901", "title": "Cannot execute a MySQL prepared statement when using the mysql crate; the parameter is not replaced", "body": "<p>Directly from the <a href=\"http://blackbeam.org/doc/mysql/struct.Stmt.html#method.execute\" rel=\"nofollow noreferrer\">documentation you linked</a>.</p>\n\n<pre><code>let mut stmt1 = pool.prepare(\"SELECT ?\").unwrap();\n\n// just do not forget about trailing comma in case of arity = 1\nfor row in stmt1.execute((42,)).unwrap() {\n    let cell = from_row::&lt;u8&gt;(row.unwrap());\n    assert_eq!(cell, 42u8);\n}\n</code></pre>\n\n<p>Make sure that you have the trailing comma in <code>execute</code> if you have only one parameter.</p>\n"}], "owner": {"reputation": 493, "user_id": 6502802, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c8105f9fd1eac6dc7a532a0a65a7fb62?s=128&d=identicon&r=PG&f=1", "display_name": "plailopo", "link": "https://stackoverflow.com/users/6502802/plailopo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 846, "favorite_count": 0, "accepted_answer_id": 40600901, "answer_count": 1, "score": 0, "last_activity_date": 1479175659, "creation_date": 1479175024, "last_edit_date": 1479175534, "question_id": 40600826, "link": "https://stackoverflow.com/questions/40600826/cannot-execute-a-mysql-prepared-statement-when-using-the-mysql-crate-the-parame", "title": "Cannot execute a MySQL prepared statement when using the mysql crate; the parameter is not replaced", "body": "<p>I tried using <a href=\"http://blackbeam.org/doc/mysql/struct.Conn.html#method.prep_exec\" rel=\"nofollow noreferrer\"><code>prep_exec</code></a> with the <a href=\"http://blackbeam.org/doc/mysql/macro.params!.html\" rel=\"nofollow noreferrer\"><code>params!</code></a> macro like in the examples for <a href=\"http://blackbeam.org/doc/mysql/struct.Conn.html\" rel=\"nofollow noreferrer\"><code>Conn</code></a>, and also with <code>prepare</code> and then <a href=\"http://blackbeam.org/doc/mysql/struct.Stmt.html#method.execute\" rel=\"nofollow noreferrer\"><code>execute</code></a> from <a href=\"http://blackbeam.org/doc/mysql/struct.Stmt.html\" rel=\"nofollow noreferrer\"><code>Stmt</code></a>.</p>\n\n<p>This function works:</p>\n\n<pre><code>pub fn get(DB: Pool, name: &amp;str) -&gt; Option&lt;Settings&gt; {\n    let mut ret: Option&lt;Settings&gt; = None;\n    let mut stmt = DB.prepare(\"SELECT * FROM settings\").unwrap();\n    for row in stmt.execute().unwrap() {\n        let mut row = row.unwrap();\n        ret = Some(Settings {\n            id: row.take(\"id\").unwrap(),\n            host: row.take(\"host\"),\n            name: row.take(\"name\").unwrap(),\n            value: row.take(\"value\"),\n        });\n        break;\n    }\n\n    ret\n}\n</code></pre>\n\n<p>But this does not work, the parameter is not replaced:</p>\n\n<pre><code>pub fn get(DB: Pool, name: &amp;str) -&gt; Option&lt;Settings&gt; {\n    let mut ret: Option&lt;Settings&gt; = None;\n    let mut stmt = DB.prepare(\"SELECT * FROM settings WHERE name=?\").unwrap();\n    for row in stmt.execute((name)).unwrap() {\n        let mut row = row.unwrap();\n        ret = Some(Settings {\n            id: row.take(\"id\").unwrap(),\n            host: row.take(\"host\"),\n            name: row.take(\"name\").unwrap(),\n            value: row.take(\"value\"),\n        });\n        break;\n    }\n\n    ret\n}\n</code></pre>\n\n<p>The error is</p>\n\n<blockquote>\n  <p>thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: MySqlError { ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ' WHERE name=?' at line 1 }'</p>\n</blockquote>\n"}, {"tags": ["algorithm", "data-structures", "rust"], "comments": [{"owner": {"reputation": 46273, "user_id": 574479, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/79f682361ccbe900f8846a1098d13921?s=128&d=identicon&r=PG", "display_name": "biziclop", "link": "https://stackoverflow.com/users/574479/biziclop"}, "edited": false, "score": 1, "creation_date": 1479145705, "post_id": 40594665, "comment_id": 68425141, "body": "So basically you want something that can pay Scrabble? :)"}, {"owner": {"reputation": 3370, "user_id": 2819650, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd1c2520461767f78a63e6cfb6431b1c?s=128&d=identicon&r=PG&f=1", "display_name": "coredump", "link": "https://stackoverflow.com/users/2819650/coredump"}, "reply_to_user": {"reputation": 46273, "user_id": 574479, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/79f682361ccbe900f8846a1098d13921?s=128&d=identicon&r=PG", "display_name": "biziclop", "link": "https://stackoverflow.com/users/574479/biziclop"}, "edited": false, "score": 0, "creation_date": 1479145956, "post_id": 40594665, "comment_id": 68425283, "body": "@biziclop not exactly, but something that can play scrabble i thik can do what I want."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1479147863, "post_id": 40594665, "comment_id": 68426252, "body": "@coredump: Oh! So you want a full on scrabble solver? You may not be able to build the full-on mapping in memory then..."}, {"owner": {"reputation": 121669, "user_id": 56778, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/34b152ef95a49568ce45df38cd87e54b?s=128&d=identicon&r=PG", "display_name": "Jim Mischel", "link": "https://stackoverflow.com/users/56778/jim-mischel"}, "edited": false, "score": 1, "creation_date": 1479157084, "post_id": 40594665, "comment_id": 68430808, "body": "How would an input of &quot;ccta&quot; give you &quot;cat&quot; or &quot;act&quot;? Do you propose that duplicated letters be ignored? So that if the user input &quot;ot&quot;, you&#39;d get &quot;to&quot;, &quot;too&quot;, &quot;toot&quot;, &quot;tot&quot;, and &quot;<a href=\"http://www.merriam-webster.com/dictionary/otto\" rel=\"nofollow noreferrer\">otto</a>&quot;?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1479312549, "post_id": 40594665, "comment_id": 68505923, "body": "Can this be done with transducers? It seems it&#39;s pretty similar to the Levenshtein automaton <a href=\"http://blog.burntsushi.net/transducers/\" rel=\"nofollow noreferrer\">blog.burntsushi.net/transducers</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479151489, "post_id": 40595303, "comment_id": 68428052, "body": "Could you expand on your answer to show how you&#39;d go from an input of <b>ccta</b> and arrive at <b>cat</b>?"}], "tags": [], "owner": {"reputation": 36328, "user_id": 5483526, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ec50563f80bacd2a7fed69bd31d0c810?s=128&d=identicon&r=PG&f=1", "display_name": "Matt Timmermans", "link": "https://stackoverflow.com/users/5483526/matt-timmermans"}, "is_accepted": false, "score": 0, "last_activity_date": 1479181189, "last_edit_date": 1479181189, "creation_date": 1479147729, "answer_id": 40595303, "question_id": 40594665, "link": "https://stackoverflow.com/questions/40594665/data-structure-for-fast-searching-words-consisting-of-given-letters/40595303#40595303", "title": "Data structure for fast searching words consisting of given letters", "body": "<p>1) Sort the unique letters in each word.  Then make a dictionary that maps each sorted-letter-string to the list of words contain exactly the same letters.</p>\n\n<p>2) Make a Patricia trie (<a href=\"https://en.wikipedia.org/wiki/Radix_tree\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Radix_tree</a>) containing all the sorted-letter-strings.</p>\n\n<p>To do a search, first make a set of the valid letters.  Then you can do a depth-first search on the Patricia trie to find all the entries containing only those letters, and expand the associated lists of words.  This is a normal depth-first search, except you stop following a path when it contains a letter that's not in the valid set.</p>\n\n<p>When you sort the word strings, use an ordering that puts the least-common letters first.  That way the trie will be shallower and your DFS will have to search fewer branches on average.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479147903, "post_id": 40595320, "comment_id": 68426269, "body": "Any reason for a <code>HashMap</code> vs <code>BTreeMap</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479150469, "post_id": 40595320, "comment_id": 68427546, "body": "@Shepmaster: more compact representation, less pointer indirection, in short more CPU-cache-friendly which should help given how many words there are in a dictionary."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479151495, "post_id": 40595320, "comment_id": 68428058, "body": "Could you expand on your answer to show how you&#39;d go from an input of <b>ccta</b> and arrive at <b>cat</b>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479195705, "post_id": 40595320, "comment_id": 68443707, "body": "@Shepmaster: That wasn&#39;t a requirement when I answered :/ I fear that it&#39;s much more complicated. There are 26 combinations of <b>act</b> + any letter that leads to <b>cat</b>, 26 * 26 combinations of <b>act</b> + 2 any letters that lead to <b>cat</b>, ... I am afraid there&#39;s not enough memory on the computer for every single input (unless you really limit the upper size), so you have to go the other way around. I would expect to start from the input, build the key, search for it, then iterate over any combination of input - 1 letter, build the key, search for it, ..."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 0, "last_activity_date": 1479195849, "last_edit_date": 1479195849, "creation_date": 1479147765, "answer_id": 40595320, "question_id": 40594665, "link": "https://stackoverflow.com/questions/40594665/data-structure-for-fast-searching-words-consisting-of-given-letters/40595320#40595320", "title": "Data structure for fast searching words consisting of given letters", "body": "<p>In terms of algorithms, having a way to reduce each word into a key which:</p>\n\n<ul>\n<li>equals the key of another word with the same letters (shuffled)</li>\n<li>differs from the key of another word with at least one different letter</li>\n</ul>\n\n<p>and then using a dictionary <code>key -&gt; [word]</code> seems like a reasonable choice.</p>\n\n<p>For the key I would propose using a sorted <code>Vec&lt;char&gt;</code>as it is likely more efficient than a <code>BTreeMap</code>. Most notably, the vector only has a single memory allocation and its comparison is a straightforward <code>memcmp</code>.</p>\n\n<p>For the dictionary, I would propose using a <code>HashMap</code>: <code>HashMap&lt;FreqMap, Vec&lt;String&gt;&gt;</code>.</p>\n\n<hr>\n\n<p>How to go from <strong>actt</strong> to <strong>act</strong> and <strong>cat</strong>?</p>\n\n<ul>\n<li>Search for <strong>actt</strong>, find <strong>tact</strong> (and maybe others).</li>\n<li>Search for <strong>act</strong>, <strong>att</strong> and <strong>ctt</strong> (removing one letter each time) and find <strong>act</strong>, <strong>cat</strong> and <strong>tat</strong>.</li>\n<li>...</li>\n</ul>\n\n<p>Not the most efficient, but you don't have any way to store every possible input in memory.</p>\n\n<hr>\n\n<p><em>Remark: <code>char</code> are unicode code points, but not graphemes. Depending on the languages/strings you process this may matter; for example if the letters <code>\u00e1</code> <code>\u00e9</code> are encoded as <code>a</code> + <code>\u00b4</code> and <code>e</code> + <code>\u00b4</code> respectively, then <code>a\u00e9</code> and <code>\u00e1e</code> would both yield the same key (<code>a</code>: 1, <code>e</code>: 1, <code>\u00b4</code>: 1) even though they differ.</em></p>\n"}, {"tags": [], "owner": {"reputation": 2076, "user_id": 1866196, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/TrCUq.png?s=128&g=1", "display_name": "skrtbhtngr", "link": "https://stackoverflow.com/users/1866196/skrtbhtngr"}, "is_accepted": false, "score": 2, "last_activity_date": 1479156462, "last_edit_date": 1479156462, "creation_date": 1479148311, "answer_id": 40595445, "question_id": 40594665, "link": "https://stackoverflow.com/questions/40594665/data-structure-for-fast-searching-words-consisting-of-given-letters/40595445#40595445", "title": "Data structure for fast searching words consisting of given letters", "body": "<p>For the dictionary part, I think you may use Trie data structure.\nYou can know more about it <a href=\"https://en.wikipedia.org/wiki/Trie\" rel=\"nofollow noreferrer\">here</a> and a good implementation (in C, though) and tutorial <a href=\"http://www.geeksforgeeks.org/trie-insert-and-search/\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>It is essentially a search tree which can store strings, or rather string prefixes, making it perfect for implementing dictionaries.</p>\n\n<p>You can first build Tries for the words in your dictionary. For instance, one trie for each alphabet so that all the words starting with that letter are stored together.</p>\n\n<p>For the searching part, a solution (somewhat inefficient, though) might be to generate all the permutations of your given string, and search them in the created tries. If a match is found for any prefix of the permuted string, it can also be returned.</p>\n"}], "owner": {"reputation": 3370, "user_id": 2819650, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd1c2520461767f78a63e6cfb6431b1c?s=128&d=identicon&r=PG&f=1", "display_name": "coredump", "link": "https://stackoverflow.com/users/2819650/coredump"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 205, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1479195849, "creation_date": 1479145131, "last_edit_date": 1479150615, "question_id": 40594665, "link": "https://stackoverflow.com/questions/40594665/data-structure-for-fast-searching-words-consisting-of-given-letters", "title": "Data structure for fast searching words consisting of given letters", "body": "<p>Given a random string, I want to find every word in a dictionary that consists of only those letters. Input characters can be ignored, so for the string \"ccta\" we could find \"act\" or \"cat\".</p>\n\n<p>How should I implement a data structure to accomplish this goal? </p>\n\n<p>It could be just a plain text file, but that would be slow and not interesting. My thoughts are to first build a frequency map for the given string:</p>\n\n<pre><code>pub trait FreqMap {\n    type Content;\n    type Count;\n\n    fn frequency_map(&amp;self) -&gt; BTreeMap&lt;Self::Content, Self::Count&gt;;\n}\n\nimpl FreqMap for str {\n    type Content = char;\n    type Count = usize;\n\n    fn frequency_map(&amp;self) -&gt; BTreeMap&lt;char, usize&gt; {\n        let mut freqmap = BTreeMap::new();\n        for c in self.chars() {\n            *freqmap.entry(c).or_insert(0) += 1;\n        }\n        freqmap\n    }\n}\n</code></pre>\n\n<p>Then I would build some data structure which could be \"indexed\" by such frequency maps. I could convert a dictionary into such structure and searching will be very fast.</p>\n\n<p>What is the best way for indexing a dictionary by such a frequency map? </p>\n"}, {"tags": ["rust", "rust-macros"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1576489608, "last_edit_date": 1576489608, "creation_date": 1479140572, "answer_id": 40593331, "question_id": 40593165, "link": "https://stackoverflow.com/questions/40593165/unable-to-use-self-in-macro-because-the-macro-expansion-ignores-token-self/40593331#40593331", "title": "Unable to use self in macro because the macro expansion ignores token `self`", "body": "<p>There are two errors in a row, let's fix the first one.</p>\n\n<p>The syntax for a macro arm is:</p>\n\n<pre><code>(...) =&gt; {\n    ...\n}\n</code></pre>\n\n<p>which means that what your macro expands to is:</p>\n\n<pre><code>println!(\"OK\");\nself\n</code></pre>\n\n<p>which is not OK (two statements).</p>\n\n<p>Instead, it should expand to an expression (in this case), which you get by enclosing it within <code>{}</code>:</p>\n\n<pre><code>macro_rules! print_ok_and_return_self {\n    () =&gt; {\n        {\n            println!(\"OK\");\n            self\n        }\n    }\n}\n</code></pre>\n\n<p>This leads to the second error:</p>\n\n<pre><code>error[E0424]: `self` is not available in a static method\n  --&gt; &lt;anon&gt;:4:9\n   |\n4  |         self\n   |         ^^^^ not available in static method\n...\n17 |         print_ok_and_return_self!()\n   |         --------------------------- in this macro invocation\n   |\n   = note: maybe a `self` argument is missing?\n</code></pre>\n\n<p>A macro cannot assume the existence of a variable in its scope, so you need to pass <code>self</code> as an argument:</p>\n\n<pre><code>macro_rules! print_ok_and_return_value {\n    ($v:expr) =&gt; {{\n        println!(\"OK\");\n        $v\n    }}\n}\n</code></pre>\n\n<p>and the invocation becomes:</p>\n\n<pre><code>impl A {\n    fn a(self) -&gt; Self {\n        print_ok_and_return_value!(self)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2582, "favorite_count": 1, "accepted_answer_id": 40593331, "answer_count": 1, "score": 9, "last_activity_date": 1576489608, "creation_date": 1479140057, "last_edit_date": 1479141038, "question_id": 40593165, "link": "https://stackoverflow.com/questions/40593165/unable-to-use-self-in-macro-because-the-macro-expansion-ignores-token-self", "title": "Unable to use self in macro because the macro expansion ignores token `self`", "body": "<p>I want to write a macro that prints \"OK\" then returns self in a method. It's my first macro, so I tried this, thinking it will just make something like a text replacement, but it fails:</p>\n\n<pre><code>macro_rules! print_ok_and_return_self {\n    () =&gt; {\n        println!(\"OK\");\n        self\n    }\n}\n\nfn main() {\n    let a = A{};\n    a.a().a();\n}\n\nstruct A {}\n\nimpl A {\n    fn a(self) -&gt; Self {\n        print_ok_and_return_self!()\n    }\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: macro expansion ignores token `self` and any following\n --&gt; src/main.rs:4:13\n  |\n4 |             self\n  |             ^^^^\n  |\nnote: caused by the macro expansion here; the usage of `print_ok_and_return_self!` is likely invalid in expression context\n --&gt; src/main.rs:17:13\n  |\n17|             print_ok_and_return_self!()\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>After a quick look at the documentation, I know it's not just text replacement, but I still don't know how to make it work.</p>\n"}, {"tags": ["rust", "dynamic-sizing"], "answers": [{"comments": [{"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1479090623, "post_id": 40581016, "comment_id": 68397902, "body": "I gave an explicit type for <code>b</code>. Does that not determine the type at which Box is instantiated?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 3, "creation_date": 1479091037, "post_id": 40581016, "comment_id": 68397981, "body": "@apt1002 That type constraint causes <code>Box&lt;[f32; 3]&gt;</code> to coerce to <code>Box&lt;[f32]&gt;</code>.  You can prove this by trying to use an obviously incorrect type: <code>let b: () = Box::new([1.0, 2.0, 3.0]);</code> will produce an error telling you that the right-hand side is <code>Box&lt;[{float}; 3]&gt;</code> (because float literals aren&#39;t of any specific float type at this point)."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1479109203, "post_id": 40581016, "comment_id": 68403016, "body": "<i>Its size is that of a reference</i> -&gt; no, it&#39;s a fat pointer, so the size is twice the size of a pointer."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1479109777, "post_id": 40581016, "comment_id": 68403242, "body": "@LukasKalbertodt I did actually mean that but failed to convey it. I will rephrase now that I am home."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 9, "last_activity_date": 1479110441, "last_edit_date": 1479110441, "creation_date": 1479089860, "answer_id": 40581016, "question_id": 40580978, "link": "https://stackoverflow.com/questions/40580978/why-cant-i-write-a-function-with-the-same-type-as-boxnew/40581016#40581016", "title": "Why can&#39;t I write a function with the same type as Box::new?", "body": "<p><code>[f32]</code> is unsized. However, <code>[1.0, 2.0, 3.0]</code> is sized... its type is <code>[f32; 3]</code>.</p>\n\n<p>That's what <code>T</code> will be when compiled with the standard library code, an <code>[f32; 3]</code> sized array.</p>\n\n<p>To accept a sized array yourself, you can do the same:</p>\n\n<pre><code>fn my_func(array: [f32; 3]) {\n    // Implementation here\n}\n\nmy_func([1.0, 0.0, 0.0]);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=99f8bf433687c971656119c916adde04&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Click here to see a working sample</a> on the Playground</p>\n\n<p>An <code>&amp;[f32]</code> slice is sized too.. which is why it is allowed also.</p>\n\n<p>As Lukas points out in the comments, slices are a \"fat pointer\" (<a href=\"https://doc.rust-lang.org/nomicon/exotic-sizes.html\" rel=\"noreferrer\">You can read about Dynamically Sized Types in the Nomicon</a>). Slice fat pointers consist of a pointer to a piece of data and a value representing how big that data is.</p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 131, "favorite_count": 1, "accepted_answer_id": 40581016, "answer_count": 1, "score": 4, "last_activity_date": 1479110441, "creation_date": 1479089508, "question_id": 40580978, "link": "https://stackoverflow.com/questions/40580978/why-cant-i-write-a-function-with-the-same-type-as-boxnew", "title": "Why can&#39;t I write a function with the same type as Box::new?", "body": "<p>If I write a function that takes one argument of type <code>[f32]</code> (as opposed to e.g. <code>&amp;[f32]</code>), I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `[f32]: std::marker::Sized` is not satisfied\n</code></pre>\n\n<p>The docs say this is because <code>[f32]</code> does not have a compile-time-known size. A reasonable limitation. Fair enough.</p>\n\n<p>However, there is at least one function in the standard library with this type. Here's me calling it:</p>\n\n<pre><code>let b: Box&lt;[f32]&gt; = Box::new([1.0, 2.0, 3.0]);\n</code></pre>\n\n<p>How come this is allowed in the standard library and not in my code? What is the relevant difference? (There's no obvious magic in <a href=\"https://doc.rust-lang.org/src/alloc/up/src/liballoc/boxed.rs.html#225-236\" rel=\"nofollow noreferrer\">the source</a>).</p>\n"}, {"tags": ["initialization", "rust", "visibility", "declaration"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1479083757, "post_id": 40580250, "comment_id": 68396485, "body": "I don&#39;t believe something like this exists in... any language? You want selective visibility without having any method that encapsulates the value? Short of a reflection feature that lets you forcefully set even hidden fields (like C#/.NET has, for example) I imagine you won&#39;t find much similar in many other languages? I&#39;m honestly confused by the requirement: &quot;I want this to not be accessed at all but actually I do want it to be accessible&quot;."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1479083910, "post_id": 40580250, "comment_id": 68396519, "body": "I was hoping there might be some way to override &amp; implement what runs when calling <code>SomeStruct(some_value)</code> - so having the value kept as hidden wouldn&#39;t be prevented."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1479083991, "post_id": 40580250, "comment_id": 68396540, "body": "Well, in most languages you do this via a constructor overload which accepts a default parameter for an encapsulated field. I&#39;d say that points you directly to the <code>new</code> approach."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479085022, "post_id": 40580403, "comment_id": 68396724, "body": "This makes sense, though in my use case, its only a single variable and the struct only exists to wrap a single type, so allowing <code>Struct(value)</code> isn&#39;t exposing internals in the same way it would for many struct members. - added note to the original question"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479119419, "post_id": 40580403, "comment_id": 68408400, "body": "In that case you may consider making the member public (answer updated). Either way, I cannot think of a sufficient reason for a &quot;shorter-hand&quot; constructor to be integrated into the language at this point."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1479125574, "post_id": 40580403, "comment_id": 68412159, "body": "Another reason is invariants. <code>struct Even(i64)</code> guarantees that its inner member is always even, it people can initialize it to any value..."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 2, "last_activity_date": 1479126104, "last_edit_date": 1479126104, "creation_date": 1479083867, "answer_id": 40580403, "question_id": 40580250, "link": "https://stackoverflow.com/questions/40580250/is-it-possible-to-declare-a-tuple-struct-whose-members-are-private-except-for-i/40580403#40580403", "title": "Is it possible to declare a tuple struct whose members are private, except for initialization?", "body": "<p>I'm afraid that such a concept is not possible, but for a good reason. Each member of a struct, unless marked with <code>pub</code>, is admitted as an implementation detail that should not raise to the surface of the public API, regardless of when and how the object is currently being used. Under this point of view, the question's goal reaches a conundrum: wishing to keep members private while letting the API user define them arbitrarily is not only uncommon but also not very sensible.</p>\n\n<p>As you mentioned, having a method named <code>new</code> is the recommended approach of doing that. It's not like you're compromising code readability with the extra characters you have to type. Alternatively, for the case where the struct is known to wrap around an item, making the member public can be a possible solution. That, on the other hand, would allow any kind of mutations through a mutable borrow (thus possibly breaking the struct's invariants, as mentioned by @MatthieuM). This decision depends on the intended API.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479670587, "post_id": 40700063, "comment_id": 68644914, "body": "This works very well from what I can tell, interestingly function name shadowing doesn&#39;t seem to cause any problems with existing references to the type."}], "tags": [], "owner": {"reputation": 366, "user_id": 3412986, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z7SMm.png?s=128&g=1", "display_name": "SpaceManiac", "link": "https://stackoverflow.com/users/3412986/spacemaniac"}, "is_accepted": true, "score": 8, "last_activity_date": 1594560657, "last_edit_date": 1594560657, "creation_date": 1479608946, "answer_id": 40700063, "question_id": 40580250, "link": "https://stackoverflow.com/questions/40580250/is-it-possible-to-declare-a-tuple-struct-whose-members-are-private-except-for-i/40700063#40700063", "title": "Is it possible to declare a tuple struct whose members are private, except for initialization?", "body": "<p>Strictly speaking this isn't possible in Rust.</p>\n<p>However the desired outcome can be achieved using a normal <code>struct</code> with a like-named function <em>(yes, this works!)</em></p>\n<pre><code>pub struct MyStruct {\n    value: usize,\n}\n\n#[allow(non_snake_case)]\npub fn MyStruct(value: usize) -&gt; MyStruct {\n    MyStruct { value }\n}\n</code></pre>\n<p>Now, you can write <code>MyStruct(5)</code> but not access the internals of <code>MyStruct</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 896, "favorite_count": 1, "accepted_answer_id": 40700063, "answer_count": 2, "score": 5, "last_activity_date": 1594560657, "creation_date": 1479082259, "last_edit_date": 1481519753, "question_id": 40580250, "link": "https://stackoverflow.com/questions/40580250/is-it-possible-to-declare-a-tuple-struct-whose-members-are-private-except-for-i", "title": "Is it possible to declare a tuple struct whose members are private, except for initialization?", "body": "<p>Is it possible to declare a tuple struct where the members are hidden for all intents and purposes, except for declaring?</p>\n\n<pre><code>// usize isn't public since I don't want users to manipulate it directly\nstruct MyStruct(usize); \n\n// But now I can't initialize the struct using an argument to it.\nlet my_var = MyStruct(0xff)\n//                    ^^^^\n//                    How to make this work?\n</code></pre>\n\n<p>Is there a way to keep the member private but still allow new structs to be initialized with an argument as shown above?</p>\n\n<p>As an alternative, a method such as <code>MyStruct::new</code> can be implemented, but I'm still interested to know if its possible to avoid having to use a method on the type since it's shorter, and nice for types that wrap a single variable.</p>\n\n<hr>\n\n<h3>Background</h3>\n\n<p>Without going into too many details, the only purpose of this type is to wrap a single type <em>(a helper which hides some details, adds some functionality and is optimized away completely when compiled)</em>, in this context it's not exactly exposing hidden internals to use the <code>Struct(value)</code> style initializing.\nFurther, since the wrapper is zero overhead, its a little misleading to use the <code>new</code> method which is often associated with allocation/creation instead of casting.</p>\n\n<p>Just as it's convenient type <code>(int)v</code> or <code>int(v)</code>, instead of <code>int::new(v)</code>,  I'd like to do this for my own type.</p>\n\n<p>It's used often, so the ability to use short expression is very convenient. Currently I'm using a macro which calls a <code>new</code> method, its OK but a little awkward/indirect, hence this question.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1479067610, "post_id": 40578224, "comment_id": 68392084, "body": "Welcome to Stack Overflow! When asking a question, you are expected <a href=\"http://meta.stackoverflow.com/q/261592/155423\">to perform a good amount of research <i>before</i> asking a quesiton</a>. For example, there are <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+immutable+because+it+is+also+borrowed+as+mutable+is%3Aq\"><b>77 existing questions with the same error message</b></a>. Perhaps you could further <a href=\"https://stackoverflow.com/posts/40578224/edit\">edit</a> your question to explain why this question is different than all of those?"}, {"owner": {"reputation": 55, "user_id": 5491774, "user_type": "registered", "profile_image": "https://graph.facebook.com/864291173639352/picture?type=large", "display_name": "Zarkoix", "link": "https://stackoverflow.com/users/5491774/zarkoix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479069127, "post_id": 40578224, "comment_id": 68392568, "body": "The question is why the pure function calls act as mutuable borrow,  and why the borrow&#39;s lifetime extends past just that one line. I&#39;ll edit the question to reflect that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479069653, "post_id": 40578224, "comment_id": 68392732, "body": "I&#39;m not sure you&#39;ve read the error message thoroughly. It says that <code>game_map</code> is borrowed mutably because of the call to <code>get_site</code>, which you didn&#39;t include in the code (and I&#39;ve edited in). See <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> for further information about how to present code in a question. I&#39;m not sure how to answer the question &quot;Why does Rust borrow [a method that requires a mutable reference to <code>self</code>] mutably&quot; in a meaningful way."}, {"owner": {"reputation": 55, "user_id": 5491774, "user_type": "registered", "profile_image": "https://graph.facebook.com/864291173639352/picture?type=large", "display_name": "Zarkoix", "link": "https://stackoverflow.com/users/5491774/zarkoix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479069914, "post_id": 40578224, "comment_id": 68392817, "body": "First, you&#39;re absolutely incredible for finding the method and adding it. Second, and more importantly, why wouldn&#39;t the lifetime of the borrow end at the end of the function call? So it would be available to borrow afterwards?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1479125638, "post_id": 40578224, "comment_id": 68412192, "body": "@Zarkoix: I agree, he&#39;s incredible ;)"}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1479072713, "post_id": 40578842, "comment_id": 68393809, "body": "This answer would have helped me immensely had I seen it about 9 months ago! Great answer yet again Shepmaster (thumbsup)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1551019961, "last_edit_date": 1551019961, "creation_date": 1479071373, "answer_id": 40578842, "question_id": 40578224, "link": "https://stackoverflow.com/questions/40578224/why-doesnt-the-lifetime-of-a-mutable-borrow-end-when-the-function-call-is-compl/40578842#40578842", "title": "Why doesn&#39;t the lifetime of a mutable borrow end when the function call is complete?", "body": "<blockquote>\n  <p>Editor's note: This specific problem has been solved by the introduction of <a href=\"https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes\">non-lexical lifetimes</a>.</p>\n</blockquote>\n\n<p>Let's look at a tiny reproduction:</p>\n\n<pre><code>struct Site {\n    owner: u8,\n}\n\nstruct GameMap {\n    site: Site,\n}\n\nimpl GameMap {\n    fn do_anything(&amp;self) {}\n\n    fn get_site(&amp;mut self) -&gt; &amp;mut Site {\n        &amp;mut self.site\n    }\n}\n\nfn main() {\n    let mut game_map = GameMap {\n        site: Site { owner: 0 },\n    };\n    let site = game_map.get_site();\n    game_map.do_anything();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `game_map` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:22:5\n   |\n21 |     let site = game_map.get_site();\n   |                -------- mutable borrow occurs here\n22 |     game_map.do_anything(); // Compiler error!\n   |     ^^^^^^^^ immutable borrow occurs here\n23 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>Our <code>GameMap</code> only owns a single <code>Site</code>, but that's enough. The call to <code>get_site</code> <strong>returns a reference</strong> (in this case it happens to be mutable):</p>\n\n<pre><code>fn get_site(&amp;mut self) -&gt; &amp;mut Site\n</code></pre>\n\n<p>Thanks to <a href=\"https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision</a>, this is the same as</p>\n\n<pre><code>fn get_site&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut Site\n</code></pre>\n\n<p>This means that the returned reference is allowed to point to something inside of <code>GameMap</code> (which it does). Then we keep that reference in a variable - <code>site</code>!</p>\n\n<p>That means that we can no longer use any immutable references to <code>game_map</code> as they might have been (or will in the future be) invalidated by the changes that can be made to the map through the mutable reference:</p>\n\n<blockquote>\n  <ul>\n  <li>At any given time, you can have either one mutable reference or any number of immutable references.</li>\n  <li>References must always be valid.</li>\n  </ul>\n</blockquote>\n\n<p>\u2014 <a href=\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"nofollow noreferrer\">The Rust Programming Language chapter on references and borrowing</a></p>\n\n<blockquote>\n  <p>Why does Rust borrow the function mutably, and even if it is borrowing the function would it not return the borrow (ending the lifetime) when returning the result, so it would be available to borrow afterwards?</p>\n</blockquote>\n\n<p>Rust borrows your <strong>struct</strong> mutably because you are calling a method that requires a mutable reference (<code>&amp;mut self</code>). That method then returns a mutable reference, transferring the borrow of the struct to the returned value. The borrow ends when the returned value goes out of scope.</p>\n\n<hr>\n\n<p>So, how do you fix it? Probably the most flexible solution is to introduce a <em>scope</em> to constrain the mutable borrow:</p>\n\n<pre><code>let zhu_li_do_the_thing = {\n    let site = game_map.get_site();\n    site.owner == 5 || site.owner == 42\n};\n\nif zhu_li_do_the_thing {\n    game_map.do_anything();\n}\n</code></pre>\n\n<p>Another is the same idea, but requires that you never store the borrow in a variable at all. Thus the mutable borrow doesn't last beyond that statement:</p>\n\n<pre><code>if game_map.get_site().owner == 42 {\n    game_map.do_anything();\n}\n</code></pre>\n\n<p>It's common for idiomatic Rust code to have <code>foo</code> and <code>foo_mut</code> variants of a method, for when you don't need mutability. This may not help if you need to mutate <code>game_map</code> while the immutable borrow of <code>site</code> is still outstanding.</p>\n\n<pre><code>fn get_site(&amp;self) -&gt; &amp;Site {\n    &amp;self.site\n}\n\nfn get_site_mut(&amp;mut self) -&gt; &amp;mut Site {\n    &amp;mut self.site\n}\n</code></pre>\n\n\n\n<pre><code>let site = game_map.get_site();\nif site.owner == 5 || site.owner == 42 {\n    game_map.do_anything();\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38023871/155423\">Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it&#39;s in?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50251487/155423\">What are non-lexical lifetimes?</a></li>\n</ul>\n"}], "owner": {"reputation": 55, "user_id": 5491774, "user_type": "registered", "profile_image": "https://graph.facebook.com/864291173639352/picture?type=large", "display_name": "Zarkoix", "link": "https://stackoverflow.com/users/5491774/zarkoix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1431, "favorite_count": 0, "accepted_answer_id": 40578842, "answer_count": 1, "score": 4, "last_activity_date": 1551019961, "creation_date": 1479067314, "last_edit_date": 1479069979, "question_id": 40578224, "link": "https://stackoverflow.com/questions/40578224/why-doesnt-the-lifetime-of-a-mutable-borrow-end-when-the-function-call-is-compl", "title": "Why doesn&#39;t the lifetime of a mutable borrow end when the function call is complete?", "body": "<p>I'm writing a bot for halite.io, and am having issues understanding some of the effects of borrowing. Here is the code that will not compile:</p>\n\n<pre><code>let scanLoc = hlt::types::Location {\n    x: oflow(coord.0 + l.x as i32, game_map.width),\n    y: oflow(coord.1 + l.y as i32, game_map.width),\n};\nlet scan = game_map.get_site(scanLoc, types::STILL);\nif (&amp;scan.owner != id) | (scan.owner != 0u8) {\n    let ang = game_map.get_angle(l, scanLoc);\n    debug!(\"angle b/w: {}\", ang);\n    return (l, 2);\n}\n</code></pre>\n\n<p>This is the compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*game_map` as immutable because it is also borrowed as mutable\n   --&gt; src/MyBot.rs:112:27\n      |\n  110 |             let scan = game_map.get_site(scanLoc, types::STILL);\n      |                        -------- mutable borrow occurs here\n  111 |             if (&amp;scan.owner != id) | (scan.owner != 0u8) {\n  112 |                 let ang = game_map.get_angle(l, scanLoc);\n      |                           ^^^^^^^^ immutable borrow occurs here\n  ...\n  116 |         }\n      |         - mutable borrow ends here\n</code></pre>\n\n<p>This is the code for the <code>GameMap</code> functions and struct:</p>\n\n<pre><code>#[derive(Clone, Debug)]\npub struct GameMap {\n    pub width: u16, // Number of columns.\n    pub height: u16, // Number of rows.\n    pub contents: Vec&lt;Vec&lt;Site&gt;&gt;,\n}\n\nimpl GameMap {\n    pub fn in_bounds(&amp;self, l: Location) -&gt; bool {\n        // ...\n    }\n    pub fn get_distance(&amp;self, l1: Location, l2: Location) -&gt; u16 {\n        // ...\n    }\n    pub fn get_angle(&amp;self, l1: Location, l2: Location) -&gt; f64 {\n        // ...\n    }\n    pub fn get_location(&amp;self, l: Location, d: u8) -&gt; Location {\n        // ...\n    }\n    pub fn get_site(&amp;mut self, l: Location, d: u8) -&gt; &amp;mut Site {\n        // ...\n    }\n}\n</code></pre>\n\n<p>Why does Rust borrow the function mutably, and even if it is borrowing the function would it not return the borrow (ending the lifetime) when returning the result, so it would be available to borrow afterwards?</p>\n"}, {"tags": ["rust", "ssl-certificate", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479059249, "post_id": 40576235, "comment_id": 68389251, "body": "By my searching, SLES 11 <a href=\"https://en.wikipedia.org/wiki/SUSE_Linux_Enterprise_Server\" rel=\"nofollow noreferrer\">appears to be pretty old</a> (<i>In February 2012, SLES 11 SP2 was released</i>). My guess is that the CA bundle you have is older as well. I&#39;d suggest looking at how to update your system CA bundle as appropriate for your distro."}, {"owner": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479116587, "post_id": 40576235, "comment_id": 68406622, "body": "Yes, it is quite ancient. Unfortunately I am bound to it for a system (also got Haskell working on it). Ok, will have a look at updating the CA bundle."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1479140826, "post_id": 40576235, "comment_id": 68422270, "body": "@MichaelO: Cargo attempts to contact <code>crates.io</code>, have you checked navigating to the site with your browser of choice on this system? Or using Curl with SSL validation toward it?"}, {"owner": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "edited": false, "score": 0, "creation_date": 1479141304, "post_id": 40576235, "comment_id": 68422580, "body": "Yes, curl can access the site, as well as git and Firefox (old version). It&#39;s only cargo, that has these problems."}], "answers": [{"tags": [], "owner": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "is_accepted": true, "score": 0, "last_activity_date": 1485699388, "last_edit_date": 1485699388, "creation_date": 1485698741, "answer_id": 41921753, "question_id": 40576235, "link": "https://stackoverflow.com/questions/40576235/cargo-fails-because-the-peer-certificate-cannot-be-authenticated-with-given-ca-c/41921753#41921753", "title": "Cargo fails because the peer certificate cannot be authenticated with given CA certificates on SLES11", "body": "<p>I updated the local certificates and now I can download code using Cargo on SLES11.</p>\n"}], "owner": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 601, "favorite_count": 0, "accepted_answer_id": 41921753, "answer_count": 1, "score": 1, "last_activity_date": 1485699388, "creation_date": 1479055071, "last_edit_date": 1479056198, "question_id": 40576235, "link": "https://stackoverflow.com/questions/40576235/cargo-fails-because-the-peer-certificate-cannot-be-authenticated-with-given-ca-c", "title": "Cargo fails because the peer certificate cannot be authenticated with given CA certificates on SLES11", "body": "<p>I'm trying to get Rust and Cargo working on a VM running SUSE Linux Enterprise Server 11 (SLES11) and get SSL errors when trying to compile the rust-by-example programs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo --version\ncargo 0.13.0-nightly (109cb7c 2016-08-19)\n\ncargo build --verbose\nDownloading rustc-serialize v0.3.19\nerror: unable to get packages from source\n\nCaused by:\n[60] Peer certificate cannot be authenticated with given CA certificates\n</code></pre>\n\n<p>Git and curl work normally on the machine. Any idea what the problem could be? </p>\n\n<p>This seems to have been an issue with Cargo but should be already solved (?). I did an strace as recommended to see where it looks for certificates and got this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>stat64(\"/etc/ssl/certs/3513523f.0\", 0xbffebe9c) = -1 ENOENT (No such file or directory)\nstat64(\"/etc/ssl/certs/85cf5865.0\", 0xbffebe9c) = -1 ENOENT (No such file or directory)\n</code></pre>\n\n<p>and the two it searches are not there. I have no idea where to start with this, and which certificates would be valid/good ones, so any help would be nice.</p>\n"}, {"tags": ["winapi", "rust", "user32"], "comments": [{"owner": {"reputation": 131, "user_id": 3419031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0960f7469cfa39c201b7acdfa9c8bb02?s=128&d=identicon&r=PG&f=1", "display_name": "stubiklaus", "link": "https://stackoverflow.com/users/3419031/stubiklaus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479055007, "post_id": 40575774, "comment_id": 68387785, "body": "Using ptr::null_mut() was the solution. The casts could be removed, too. :)"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1479054736, "creation_date": 1479054736, "answer_id": 40576162, "question_id": 40575774, "link": "https://stackoverflow.com/questions/40575774/cast-a-ptrnull-to-a-windows-handle/40576162#40576162", "title": "Cast a ptr::null() to a Windows handle", "body": "<p><a href=\"https://docs.rs/winapi/0.2.8/x86_64-pc-windows-msvc/winapi/windef/type.HBITMAP.html\" rel=\"noreferrer\">Here is how <code>HBITMAP</code> is defined in winapi</a>:</p>\n\n<pre><code>type HBITMAP = *mut HBITMAP__;\n</code></pre>\n\n<p>This makes <code>HBITMAP</code> a mutable raw pointer. <a href=\"https://doc.rust-lang.org/stable/std/ptr/fn.null.html\" rel=\"noreferrer\"><code>ptr::null()</code></a> returns a const raw pointer. You should use <a href=\"https://doc.rust-lang.org/stable/std/ptr/fn.null_mut.html\" rel=\"noreferrer\"><code>ptr::null_mut()</code></a> instead, as it returns a mutable raw pointer, so the compiler will be able to infer the correct type.</p>\n"}], "owner": {"reputation": 131, "user_id": 3419031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0960f7469cfa39c201b7acdfa9c8bb02?s=128&d=identicon&r=PG&f=1", "display_name": "stubiklaus", "link": "https://stackoverflow.com/users/3419031/stubiklaus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 673, "favorite_count": 0, "accepted_answer_id": 40576162, "answer_count": 1, "score": 1, "last_activity_date": 1479054736, "creation_date": 1479052514, "last_edit_date": 1479053162, "question_id": 40575774, "link": "https://stackoverflow.com/questions/40575774/cast-a-ptrnull-to-a-windows-handle", "title": "Cast a ptr::null() to a Windows handle", "body": "<p>I'm trying to use the winapi crate to create a GUI for my <a href=\"https://en.wikipedia.org/wiki/Virtual_Studio_Technology\" rel=\"nofollow noreferrer\">VST plugin</a>. Functions like <code>user32::SetMenu</code> need some handles, some of which can be <code>NULL</code>.</p>\n\n<p>The following method is called when the plugin is loaded:</p>\n\n<pre><code>fn open(&amp;mut self, window: *mut c_void) {\n    unsafe {\n        let menu = user32::CreateMenu();\n        let sub_menu = user32::CreateMenu();\n        let hwnd: HWND = window as HWND;\n        user32::SetMenu(hwnd, menu);\n        let mut data = OsString::from(\"heee\");\n        let raw = &amp;mut data as *mut _ as LPWSTR;\n        let mut menu_item = MENUITEMINFOW {\n            cbSize: 0,\n            fMask: 0o0000_0020 | 0o0000_0040,\n            fType: 0,\n            fState: 0,\n            wID: MENUITEM_ID,\n            hSubMenu: sub_menu,\n            hbmpChecked: ptr::null() as HBITMAP,\n            hbmpUnchecked: ptr::null() as HBITMAP,\n            dwItemData: 0,\n            dwTypeData: raw,\n            cch: 0,\n            hbmpItem: ptr::null() as *mut _,\n        };\n        menu_item.cbSize = mem::size_of_val(&amp;menu_item) as u32;\n        user32::InsertMenuItemW(menu, MENUITEM_ID, 0, &amp;menu_item);\n    }\n\n    self.open = true;\n}\n</code></pre>\n\n<p>However, I can't pass <code>NULL</code> for the handles:</p>\n\n<pre><code>hbmpChecked: ptr::null() as HBITMAP,\n</code></pre>\n\n<p>I get the error message </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>hbmpChecked: ptr::null() as HBITMAP,\n             ^^^^^^^^^ cannot infer type for `_`\n</code></pre>\n\n<p>I can't find a solution in the docs of winapi/user32.</p>\n"}, {"tags": ["casting", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1479045832, "creation_date": 1479045832, "answer_id": 40574670, "question_id": 40574512, "link": "https://stackoverflow.com/questions/40574512/non-scalar-cast-t-as-f64-when-doing-generic-multiplication/40574670#40574670", "title": "Non-scalar cast: `T` as `f64` when doing generic multiplication", "body": "<blockquote>\n  <p>Can I, not using unsafe blocks, cast <code>T</code> to <code>f64</code>?</p>\n</blockquote>\n\n<p><strong>No,</strong> and there are many good reasons for that. <code>T</code> could be any type, so it doesn't need to be compatible with or similar to <code>f64</code> <em>at all</em>. The only thing you know about your <code>T</code> is, that it implements <code>std::ops::Mul&lt;Output=T&gt;</code>. But that doesn't help, because that trait doesn't say anything about <code>f64</code> either.</p>\n\n<p>So what you <em>could</em> do, is to bound <code>T</code> to be <code>std::ops::Mul&lt;Output=f64&gt;</code>. This means that multiplying two <code>T</code>s will result in an <code>f64</code>. Your function then works (even without the <code>as f64</code> cast), but you make your impl way less generic.</p>\n\n<hr>\n\n<p>The proper way to solve this problem, is to abstract over multiple kinds of numbers. Thankfully, the <a href=\"https://crates.io/crates/num-traits\" rel=\"nofollow noreferrer\"><code>num-traits</code> crate</a> has already done that. In particular, you are probably interested in the <a href=\"http://rust-num.github.io/num/num_traits/cast/trait.ToPrimitive.html\" rel=\"nofollow noreferrer\"><code>ToPrimitive</code> trait</a>. Your impl should then probably look somewhat like:</p>\n\n<pre><code>use num_traits::ToPrimitive;\n\nimpl&lt;T&gt; Area for Rectangle&lt;T&gt;\n    where T: std::ops::Mul\n          &lt;T as std::ops::Mul&gt;::Output: ToPrimitive\n\n{\n    fn area(&amp;self) -&gt; f64 {\n        let t_area = self.height * self.width;\n        t_area.to_f64().unwrap()\n    }\n}\n</code></pre>\n\n<p>Minor problem: we have this <code>unwrap()</code> here which panics when the multiplication result can't be converted into an <code>f64</code>. I'm not quite sure why this can happen, but we need to be aware of that. Maybe there is a better solution without such an <code>unwrap()</code>.</p>\n\n<hr>\n\n<p>You can of course also create your own trait. Something like:</p>\n\n<pre><code>trait AsF64 {\n    fn cast(self) -&gt; f64;\n}\n\nimpl AsF64 for i32 {\n    fn cast(self) -&gt; f64 { self as f64 }\n}\n\n// more impls for u32, u16, i16, ...\n</code></pre>\n\n<p>And then impl for <code>&lt;T as std::ops::Mul&gt;::Output: AsF64</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1479046156, "post_id": 40574678, "comment_id": 68384819, "body": "It should be noted, that <code>Into</code> just represents conversions into a subtype of the original type (those that can never loose precision). But I&#39;d say that in this case the programmer probably doesn&#39;t care if <code>u64</code> or <code>i64</code> areas are being cast to <code>f64</code> with possible precision loss... Maybe they do, though."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1479051712, "post_id": 40574678, "comment_id": 68386619, "body": "@LukasKalbertodt: I can&#39;t know for sure. If <a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html\" rel=\"nofollow noreferrer\"><code>TryInto</code></a> was stable I would advised it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1479045892, "creation_date": 1479045892, "answer_id": 40574678, "question_id": 40574512, "link": "https://stackoverflow.com/questions/40574512/non-scalar-cast-t-as-f64-when-doing-generic-multiplication/40574678#40574678", "title": "Non-scalar cast: `T` as `f64` when doing generic multiplication", "body": "<blockquote>\n  <p>Can I, not using unsafe blocks, cast <code>T</code> to <code>f64</code>?</p>\n</blockquote>\n\n<p>What's <code>T</code>? The code to convert <code>u8</code> to <code>f64</code> is certainly not the same as the code to convert <code>u64</code> to <code>f64</code> (the latter can fail, after all).</p>\n\n<p>As I see it, you have two paths ahead of you:</p>\n\n<ul>\n<li>make <code>Area</code> generic over <code>T</code>, and thus return a <code>T</code></li>\n<li>constrain <code>T</code> to types that can be converted into a <code>f64</code></li>\n</ul>\n\n<p>I'll demonstrate the latter:</p>\n\n<pre><code>impl&lt;T&gt; Area for Rectangle&lt;T&gt;\n    where T: std::ops::Mul&lt;Output=T&gt; + Clone + std::convert::Into&lt;f64&gt;\n{\n    fn area(&amp;self) -&gt; f64 {\n        self.height.clone().into() * self.width.clone().into()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 3971898, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1db3200f3a92e12b10df8d90bb5cd498?s=128&d=identicon&r=PG&f=1", "display_name": "C&#225;ssio", "link": "https://stackoverflow.com/users/3971898/c%c3%a1ssio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 913, "favorite_count": 3, "accepted_answer_id": 40574678, "answer_count": 2, "score": 2, "last_activity_date": 1479046439, "creation_date": 1479044740, "last_edit_date": 1479046439, "question_id": 40574512, "link": "https://stackoverflow.com/questions/40574512/non-scalar-cast-t-as-f64-when-doing-generic-multiplication", "title": "Non-scalar cast: `T` as `f64` when doing generic multiplication", "body": "<p>I want to implement a trait for a generic-type struct. A method inside the trait block must return a non-generic type. I'm having problems while trying to cast:</p>\n\n<pre><code>struct Rectangle&lt;T&gt; {\n    x: T,\n    y: T,\n    width: T,\n    height: T,\n}\n\ntrait Area {\n    fn area(&amp;self) -&gt; f64;\n}\n\nimpl&lt;T&gt; Area for Rectangle&lt;T&gt;\n    where T: std::ops::Mul&lt;Output=T&gt; \n{\n    fn area(&amp;self) -&gt; f64 {\n        let t_area = self.height * self.width;\n        let f_area = t_area as f64;\n        f_area\n    }\n}\n\nfn main() {\n    let sq = Rectangle { x: 0, y: 0, height: 1, width: 1 };\n    println!(\"{}\", sq.area());\n}\n</code></pre>\n\n<p>And the compiler output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: non-scalar cast: `T` as `f64`\n  --&gt; src/main.rs:22:22\n   |\n22 |         let f_area = t_area as f64;\n   |                      ^^^^^^^^^^^^^\n</code></pre>\n\n<p>Can I cast <code>T</code> to <code>f64</code> without using unsafe blocks?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479035761, "post_id": 40573055, "comment_id": 68381935, "body": "Comment from @keepr, this could be handled by <code>custom_derive</code> see: <a href=\"https://docs.rs/custom_derive/\" rel=\"nofollow noreferrer\">docs.rs/custom_derive</a>*/custom_derive/index.html"}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479035687, "post_id": 40573155, "comment_id": 68381916, "body": "Doesn&#39;t this hard code public/private for both the struct and its internal member? eg, you might want to do <code>struct Peter(pub u8)</code> or <code>pub struct Peter(u8)</code>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479036022, "post_id": 40573155, "comment_id": 68382020, "body": "@ideasman42 Absolutely, this is very hardcoded for a specific case. If you want the flexibility of <code>pub</code> and non-<code>pub</code> you can add more macro &quot;arms&quot;...  let me try to build a nicer version and link it in the question. Please stand by ;-)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479039080, "post_id": 40573155, "comment_id": 68382914, "body": "Great, updated my code to use this style of macro <a href=\"https://gitlab.com/ideasman42/bmesh-rs/blob/master/bmesh/src/bitflag_macros.rs\" rel=\"nofollow noreferrer\">gitlab.com/ideasman42/bmesh-rs/blob/master/bmesh/src/&hellip;</a>  - still not sure how <code>Peter(u8)</code> and <code>Peter(pub u8)</code> would be done though."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1479047114, "post_id": 40573155, "comment_id": 68385152, "body": "Update, both struct visibility and inner variable visibility can be pattern matched, edited; <a href=\"https://gitlab.com/ideasman42/bmesh-rs/blob/master/bmesh/src/bitflag_macros.rs\" rel=\"nofollow noreferrer\">gitlab.com/ideasman42/bmesh-rs/blob/master/bmesh/src/&hellip;</a>"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1479061280, "last_edit_date": 1479061280, "creation_date": 1479035508, "answer_id": 40573155, "question_id": 40573055, "link": "https://stackoverflow.com/questions/40573055/is-it-possible-to-access-the-type-of-a-struct-member-for-function-signatures-or/40573155#40573155", "title": "Is it possible to access the type of a struct member for function signatures or declarations?", "body": "<p>No, a general <code>typeof(Type::field)</code> that can be used in type position does not exist.</p>\n\n<hr>\n\n<p>Regarding the example in the question, it looks like you are expecting a special kind of item: a tuple-struct with only one field. So, instead of accepting an <code>$item</code> fragment, you can simulate the syntax yourself:</p>\n\n<pre><code>macro_rules! foo {\n    (pub struct $name:ident ( $ty:ident ) ) =&gt; {\n        pub struct $name($ty);\n\n        impl $name {\n            pub fn bar() { \n                println!(\"{}\", stringify!($ty)); \n            }\n        }\n    }\n}\n\nfoo!(\n    pub struct Peter(u8)\n);\n\nfn main() {\n    Peter::bar();\n}\n</code></pre>\n\n<p>That way you only have to specify everything once. However, this obviously only works with one kind of tuple-struct definition, not all kinds of items. But your use case suggests that you are more or less only interested in this special case.</p>\n\n<p>If you want to allow different kinds of struct definitions, you just need to add more macro-rules to the macro to allow for different syntax. To see an example, <a href=\"https://play.rust-lang.org/?gist=34f0c0d3b29503d32c342ffdc95b3f9f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here is code to allow for <code>pub</code> and non-<code>pub</code> tuple-struct definitions</a>. But this could be expanded even more.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 667, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1479061280, "creation_date": 1479034643, "last_edit_date": 1495540407, "question_id": 40573055, "link": "https://stackoverflow.com/questions/40573055/is-it-possible-to-access-the-type-of-a-struct-member-for-function-signatures-or", "title": "Is it possible to access the type of a struct member for function signatures or declarations?", "body": "<p>When defining implementations in macros, it might be useful to access a struct members type to avoid having to pass it as an extra argument. (see <a href=\"https://stackoverflow.com/a/40336386/432509\">this question</a>)</p>\n\n<pre><code>impl PartialEq&lt;u32&gt; for MyStruct { ... }\n</code></pre>\n\n<p>Is there a way to access the type of a struct member without knowing in advance which type it is?</p>\n\n<pre><code>impl PartialEq&lt;typeof(MyStruct.member)&gt; for MyStruct { ... }\n</code></pre>\n\n<hr>\n\n<p>In case it's helpful, this is an abbreviated example of why I'm interested to do this:</p>\n\n<pre><code>struct_bitflag_impl!(\n    pub struct MyFlag(u8);,\n    MyFlag, u8);\n\n//          ^^ how to avoid having this extra arg?\n//             (Used by ``impl PartialEq&lt;$t_internal&gt; for $p``)\n//             couldn't it be discovered from `MyFlag.0` ?\n\n// the macro\n\nmacro_rules! struct_bitflag_impl {\n    ($struct_p_def: item, $p:ident, $t_internal:ty) =&gt; {\n\n        #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n        $struct_p_def\n\n        impl ::std::ops::BitAnd for $p {\n            type Output = $p;\n            fn bitand(self, _rhs: $p) -&gt; $p { $p(self.0 &amp; _rhs.0) }\n        }\n        impl ::std::ops::BitOr for $p {\n            type Output = $p;\n            fn bitor(self, _rhs: $p) -&gt; $p { $p(self.0 | _rhs.0) }\n        }\n        impl ::std::ops::BitXor for $p {\n            type Output = $p;\n            fn bitxor(self, _rhs: $p) -&gt; $p { $p(self.0 ^ _rhs.0) }\n        }\n\n        impl ::std::ops::Not for $p {\n            type Output = $p;\n            fn not(self) -&gt; $p { $p(!self.0) }\n        }\n\n        // support comparison with the base-type.\n        impl PartialEq&lt;$t_internal&gt; for $p {\n            fn eq(&amp;self, other: &amp;t_internal) -&gt; bool {\n                self.0 == *other\n            }\n        }\n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        //       How to avoid using 't_internal' here?\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "display"], "answers": [{"comments": [{"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1479009873, "post_id": 40570202, "comment_id": 68376965, "body": "thanks so much for guiding me see the essence. I totally agree I should learn how to look deep in the error reports and make MCVE case. I am both struggling and learning a lot in Rust these days."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 1, "creation_date": 1479046556, "post_id": 40570202, "comment_id": 68384948, "body": "@enaJ keep up the hard work! Producing a reduced case that repeats an error is something that will help you throughout your programming career."}, {"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1479068489, "post_id": 40570202, "comment_id": 68392374, "body": "Definitely! I came from a python background, and started to learn Rust 6 weeks ago. They are quite different in many aspects. But I DO feel each language helps to see deeper/further of the other one."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1479046503, "last_edit_date": 1495535569, "creation_date": 1479007011, "answer_id": 40570202, "question_id": 40569944, "link": "https://stackoverflow.com/questions/40569944/mismatched-types-when-displaying-a-matrix-with-a-for-loop/40570202#40570202", "title": "Mismatched types when displaying a matrix with a for loop", "body": "<p>When programming, it's useful to create a <a href=\"https://stackoverflow.com/help/mcve\">Minimal, Complete, and Verifiable Example</a>. This means you remove everything that's not relevant to the error or problem you are having, boiling it down to the pure essence. Generally, you will find that doing so greatly narrows down the potential location of the problem. Often, this allows you to answer the question yourself, and other times it increases the chances of being able to ask an insightful question.</p>\n\n<p>Here's an MCVE for this problem:</p>\n\n<pre><code>fn foo() -&gt; u8 {\n    for i in 0..1u8 {\n        i\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Pretty small, isn't it? It produces these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:3:9\n  |\n3 |         i\n  |         ^ expected (), found u8\n  |\n  = note: expected type `()`\n  = note:    found type `u8`\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:2:5\n  |\n2 |     for i in 0..1u8 {\n  |     ^ expected u8, found ()\n  |\n  = note: expected type `u8`\n  = note:    found type `()`\n</code></pre>\n\n<p>Which should look familiar.</p>\n\n<p>Now the question you can ask yourself: what type and value does a <code>for</code> loop evaluate to? (Hint: the compiler messages actually tell you if you read them the right way)</p>\n\n<p>We <em>know</em> that the function must return a <code>u8</code>, but the compiler tells us that we are actually returning a <code>()</code> \u2014 this is the second error. That means that a <code>for</code> loop evaluates to <code>()</code>! Since a <code>for</code> loop evaluates to <code>()</code>, what could possibly happen to the value that the <code>for</code> loop's block evaluates to? As you can guess, the answer is that the block <em>cannot</em> return a value!</p>\n\n<p>Think about <em>this</em> example:</p>\n\n<pre><code>fn foo() -&gt; u8 {\n    for i in 0..0u8 {\n        //\n    }\n}\n</code></pre>\n\n<p>What would <em>this</em> return? Yeah, probably nothing good.</p>\n\n<hr>\n\n<p>Returning from our MCVE back to the original problem, you need to explicitly return inner failures and explicitly return success at the end of the loop:</p>\n\n<pre><code>for /* ... */ {\n    // ...\n\n    try!(write!(f, \"{}\", each_row))\n}\n\nOk(())\n</code></pre>\n\n<p>This just opens the door to other errors in the code, but you are capable of figuring those out!</p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 418, "favorite_count": 0, "accepted_answer_id": 40570202, "answer_count": 1, "score": 0, "last_activity_date": 1479532408, "creation_date": 1479004182, "last_edit_date": 1495542402, "question_id": 40569944, "link": "https://stackoverflow.com/questions/40569944/mismatched-types-when-displaying-a-matrix-with-a-for-loop", "title": "Mismatched types when displaying a matrix with a for loop", "body": "<p>Inspired by the code provided by evilone in the post <a href=\"https://stackoverflow.com/questions/30320083/how-to-print-a-vec\">How to print a Vec?</a>. To display a matrix, I wrote code as following: </p>\n\n<pre><code>use std::{ops, fmt};\n\n#[derive(PartialEq, Debug)]\npub struct Matrix&lt;T&gt; {\n    data: Vec&lt;T&gt;,\n    row: usize,\n    col: usize,\n}\n\nimpl&lt;T: Copy&gt; Matrix&lt;T&gt; {       \n    pub fn new(row: usize, col: usize, values: &amp;[T]) -&gt; Matrix&lt;T&gt; {\n        Matrix {\n            data: values.to_vec(), \n            row: row,\n            col: col,\n        }\n    }\n}    \n\n//// Display\nimpl&lt;T: fmt::Display&gt; fmt::Display for Matrix&lt;T&gt; {\n\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let n_row = self.row;\n        let n_col = self.col;\n        let data = self.data;\n\n        for i in 0.. n_row {\n            let mut each_row = String::new(); \n\n            for j in 0.. n_col {\n                let idx = i * n_col + j;  \n                let each_element = data[idx];\n                each_row.push_str(&amp;each_element.to_string());\n                each_row.push_str(\" \");  // seperated by space \n            }\n            write!(f, \"{}\", each_row)   \n        }\n    }\n}    \n\nfn main() {\n    let x = Matrix::new(2, 3, &amp;[-6, -5, 0, 1, 2, 3]);\n    println!(\"{}\", x);\n\n}\n</code></pre>\n\n<p>I got the errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.13.0 (2c6933acc 2016-11-07)\nerror[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:40:13\n   |\n40 |             write!(f, \"{}\", each_row)   \n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n   |\n   = note: expected type `()`\n   = note:    found type `std::result::Result&lt;(), std::fmt::Error&gt;`\n   = note: this error originates in a macro outside of the current crate\n\nerror[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:31:9\n   |\n31 |         for i in 0.. n_row {\n   |         ^ expected enum `std::result::Result`, found ()\n   |\n   = note: expected type `std::result::Result&lt;(), std::fmt::Error&gt;`\n   = note:    found type `()`\n</code></pre>\n\n<p>1) I don't understand why I get <code>expected (), found enum `std::result::Result`</code></p>\n\n<p>2) For the second error, I thought it was caused by the failure to implement line 40. So if fix line 40, it won't be a problem anymore. </p>\n\n<p>Any suggestions to fix this?  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478988755, "post_id": 40568179, "comment_id": 68373024, "body": "Related: <a href=\"http://stackoverflow.com/q/28252038/155423\">stackoverflow.com/q/28252038/155423</a>. Also, note that you can access inner members with <code>x.0</code>, <code>x.1</code> syntax: <code>let mut map = vec![vec![0; width.0 as usize]; height.0 as usize];</code>"}, {"owner": {"reputation": 23, "user_id": 5065366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d48a342bc5a323d99ec30fbc48700226?s=128&d=identicon&r=PG&f=1", "display_name": "StyMaar", "link": "https://stackoverflow.com/users/5065366/stymaar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478989279, "post_id": 40568179, "comment_id": 68373175, "body": "Thanks for the link and for the reactivity. It explains the state of Rust on the &#171;Even better&#187; part of my question, but not really about the traits I need to implement (even if I understand I need to implement them manually) for ranges or casting to usize."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478989599, "post_id": 40568179, "comment_id": 68373284, "body": "That&#39;s a pretty good reason <a href=\"http://meta.stackexchange.com/q/39223/281829\">you are only supposed to ask <b>one</b> question per post</a>. I&#39;d suggest reviewing <a href=\"http://stackoverflow.com/help/how-to-ask\">how to ask a good question</a>. This question is <b>too broad</b> and probably <b>opinion based</b>. Prefer to ask <i>narrowly focused</i> questions, such as &quot;{can I,how do I} implement a trait to allow {using my type as a range,casting a type to usize}&quot;. These narrow questions allow <i>you</i> and other people to find these questions <i>before</i> asking them again \u2014 you <b>did</b> search first, right?"}, {"owner": {"reputation": 23, "user_id": 5065366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d48a342bc5a323d99ec30fbc48700226?s=128&d=identicon&r=PG&f=1", "display_name": "StyMaar", "link": "https://stackoverflow.com/users/5065366/stymaar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478989801, "post_id": 40568179, "comment_id": 68373342, "body": "I understand. I will edit it to rephrase the title and remove the second question, thanks !"}, {"owner": {"reputation": 23, "user_id": 5065366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d48a342bc5a323d99ec30fbc48700226?s=128&d=identicon&r=PG&f=1", "display_name": "StyMaar", "link": "https://stackoverflow.com/users/5065366/stymaar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478990101, "post_id": 40568179, "comment_id": 68373425, "body": "And since I actually have two different questions : the one about the Trait of ranges and the one about the casting to usize, do you think I should split it in two different post, even though I need to copy-paste the context in the two posts ? Sorry if I&#39;m bothering you, I&#39;m pretty new to StackOverflow :/"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478992004, "post_id": 40568179, "comment_id": 68373913, "body": "I wouldn&#39;t worry about editing this one; but you can / should ask separate new question(s). You <i>might</i> be able to combine them, however. Something like &quot;How can I use my newtype as if it were a usize?&quot; and then have the concrete cases of using it in a range or in the <code>vec!</code> macro. Note that <i>any</i> type can be used in a <code>Range</code>; what&#39;s important is if the thing you are calling accepts a Range with your type in it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478992090, "post_id": 40568179, "comment_id": 68373926, "body": "And it&#39;s no bother; we all were new to Stack Overflow at some point. Although some rules feel arbitrary at times, generally they all serve a purpose, usually towards keeping the site useful to the vast population of programmers (and not just one)."}, {"owner": {"reputation": 23, "user_id": 5065366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d48a342bc5a323d99ec30fbc48700226?s=128&d=identicon&r=PG&f=1", "display_name": "StyMaar", "link": "https://stackoverflow.com/users/5065366/stymaar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478993298, "post_id": 40568179, "comment_id": 68374181, "body": "I totally understand your remarks and the &#171;rules&#187; don&#39;t feel arbitrary at all in this case. I realize my question is formulated in a way that might be good to start an open discussion on Reddit, but not in a useful way for other developers to look for in the future, which is what SO is made for. Thanks for showing me that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478993364, "post_id": 40568179, "comment_id": 68374199, "body": "<a href=\"https://www.reddit.com/r/rust/\" rel=\"nofollow noreferrer\">Reddit</a> and <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">the users forum</a> are indeed great places for open-ended discussion and best practices that evolve as the language does. FWIW, my hope for solving this type of problem is via <a href=\"https://github.com/rust-lang/rfcs/pull/1406\" rel=\"nofollow noreferrer\">delegation</a>."}], "owner": {"reputation": 23, "user_id": 5065366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d48a342bc5a323d99ec30fbc48700226?s=128&d=identicon&r=PG&f=1", "display_name": "StyMaar", "link": "https://stackoverflow.com/users/5065366/stymaar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 188, "favorite_count": 0, "closed_date": 1478988663, "answer_count": 0, "score": 1, "last_activity_date": 1478993456, "creation_date": 1478988360, "last_edit_date": 1478993456, "question_id": 40568179, "link": "https://stackoverflow.com/questions/40568179/how-to-efficiently-use-a-tuple-struct-as-a-newtype", "closed_reason": "Duplicate", "title": "How to efficiently use a tuple struct as a newtype?", "body": "<p>I need a representation for 2D coordinates on a grid. I'm aware of the \u00abnewtype\u00bb pattern that helps avoid mistakes between width and height.</p>\n\n<pre><code>#[derive(Copy, Clone, Debug)]\npub struct Width(u8);\n#[derive(Copy, Clone, Debug)]\npub struct Height(u8);\n\n#[derive(Copy, Clone, Debug)]\npub struct Location {\n    pub x: Width,\n    pub y: Height,\n}\n</code></pre>\n\n<p>I really like this pattern that usesthe type system to avoid mistakes such as inadvertently swapping width and height in function parameters.</p>\n\n<p>However, this approach adds verbosity to my code; I end up destructuring a lot to access the inner data since I can't really work with my newtype value:</p>\n\n<pre><code>let Width(w) = width;\nlet Height(h) = height;\n\nfor a in 0..h {\n    for b in 0..w {\n        //DO SOMETHING HERE\n    }\n}\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>let Width(w) = width;\nlet Height(h) = height;\nlet mut map = vec![vec![0; w as usize]; h as usize];\n</code></pre>\n\n<p>I found how I could easily use arithmetic operators with my newtypes using the <code>Add</code> and <code>Sub</code> traits (even though it also has a verbosity burden) and I would like to know if there is a trait I can implement on my newtype to be able to use it in a range or to be casted as <code>usize</code>.</p>\n\n<p>Even better, is there a way to tell the compiler that I want my newtype to behave exactly as its content, without needing to manually implement every trait by myself? Something like this maybe:</p>\n\n<pre><code>#[derive(everything_from_inner)]\nstruct Height(u8)\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478989342, "post_id": 40568130, "comment_id": 68373197, "body": "Relevant: <a href=\"http://stackoverflow.com/q/31374051/155423\">stackoverflow.com/q/31374051/155423</a>; near duplicates: <a href=\"http://stackoverflow.com/q/28776630/155423\">stackoverflow.com/q/28776630/155423</a>, <a href=\"http://stackoverflow.com/q/23969191/155423\">stackoverflow.com/q/23969191/155423</a>, <a href=\"http://play.integer32.com/?gist=feb39ad6c2bd1641dcf463b65d560986&amp;version=stable\" rel=\"nofollow noreferrer\">working code</a>; TL;DR: you probably want to use <code>by_ref</code>."}, {"owner": {"reputation": 1467, "user_id": 2799191, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3ca5cf536711d6b854613a57c8fa9a2?s=128&d=identicon&r=PG", "display_name": "gib", "link": "https://stackoverflow.com/users/2799191/gib"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478992750, "post_id": 40568130, "comment_id": 68374050, "body": "@Shepmaster I guess what I was trying to ask is how to clone an Iterator (before I got confused by the error message). So how would I do <a href=\"https://play.rust-lang.org/?gist=a8f4f33423f100f857ffe2ce4f0263a8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a> for example (I know this isn&#39;t the best way to do it)."}], "answers": [{"comments": [{"owner": {"reputation": 1467, "user_id": 2799191, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3ca5cf536711d6b854613a57c8fa9a2?s=128&d=identicon&r=PG", "display_name": "gib", "link": "https://stackoverflow.com/users/2799191/gib"}, "edited": false, "score": 0, "creation_date": 1478993851, "post_id": 40568855, "comment_id": 68374311, "body": "Yeah, sorry, what happened is I originally had something like <a href=\"https://play.rust-lang.org/?gist=080f87f21823940bb52e92bc55a1299c&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a>, but then I ended up with the <code>&amp;|c: &amp;char|</code> trying to appease the compiler. This is just me trying to get to an MCVE, I know this isn&#39;t the best way to do it.  This is really enlightening though!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1478993698, "last_edit_date": 1592644375, "creation_date": 1478993279, "answer_id": 40568855, "question_id": 40568130, "link": "https://stackoverflow.com/questions/40568130/borrow-in-filter-closure-does-not-live-long-enough/40568855#40568855", "title": "Borrow in filter closure does not live long enough", "body": "<blockquote>\n<p>but why exactly is this necessary?</p>\n</blockquote>\n<p>I don't really know how to explain it much better than the error messages:</p>\n<blockquote>\n<pre class=\"lang-none prettyprint-override\"><code>temporary value only lives until here\ntemporary value created here\n</code></pre>\n</blockquote>\n<p>You are creating a temporary value (the closure itself) in a statement and then taking a reference to it. When the statement ends, the value is destroyed \u2014 nothing owns it! The problem is that the code tries to keep the <em>reference</em> to the now-destroyed value. If the compiler allowed this, then when it went to use that reference, who knows what random data would be accessed.</p>\n<blockquote>\n<p>the closure has to contain two references</p>\n</blockquote>\n<p>Well, it doesn't <em>have</em> to. <code>filter(|c| c.is_digit(10))</code> works just fine; type inference allows <code>c</code> to be automatically typed as <code>&amp;char</code>. The <code>&amp;c</code> only pattern-matches and automatically dereferences the value. That's redundant because method calls <a href=\"https://stackoverflow.com/q/28519997/155423\">automatically dereference</a>.</p>\n<p>The bigger issue is that the code is attempting to clone an iterator containing a closure, which you cannot do (<a href=\"https://stackoverflow.com/q/27883509/155423\">1</a>, <a href=\"https://stackoverflow.com/q/28011803/155423\">2</a>, <a href=\"https://stackoverflow.com/q/39803231/155423\">3</a>, <a href=\"https://stackoverflow.com/q/21933892/155423\">4</a> (goodness, people refuse to search before asking a question)). The clever way that you've chosen to work around this is by cloning a <em>reference</em> to a closure, which is fine.</p>\n<p>The problem loops back to taking a reference to something that is destroyed at the end of the statement.</p>\n<hr />\n<p><strong>If</strong> the goal is to ignore all non-digits, skip over the first 3 digits and then collect the rest of the digits, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip\" rel=\"nofollow noreferrer\"><code>Iterator::skip</code></a>:</p>\n<pre><code>let iter = &quot;abc123&quot;.chars().filter(|c| c.is_digit(10));\nlet together: String = iter.skip(3).collect();\nprintln!(&quot;{}&quot;, together);\n</code></pre>\n<p><strong>If</strong> the goal is to take only the first 3 digits if and only if there were three digits, then I might always collect those digits, and check to see if that was the end:</p>\n<pre><code>let mut iter = &quot;abc123&quot;.chars().filter(|c| c.is_digit(10));\nlet together: String = iter.by_ref().take(3).collect();\n\nif iter.next().is_none() {\n    println!(&quot;{}&quot;, together);\n}\n</code></pre>\n<p>This uses <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>Iterator::by_ref</code></a>. Instead of <em>consuming</em> the iterator, <code>by_ref</code> creates a mutable reference to it. Mutable references to iterators <em>also</em> implement <code>Iterator</code>, so calling <code>take</code> and <code>collect</code> work fine. When those are done, however, <code>iter</code> remains valid.</p>\n"}], "owner": {"reputation": 1467, "user_id": 2799191, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3ca5cf536711d6b854613a57c8fa9a2?s=128&d=identicon&r=PG", "display_name": "gib", "link": "https://stackoverflow.com/users/2799191/gib"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1363, "favorite_count": 0, "accepted_answer_id": 40568855, "answer_count": 1, "score": 2, "last_activity_date": 1478993698, "creation_date": 1478988109, "last_edit_date": 1478992221, "question_id": 40568130, "link": "https://stackoverflow.com/questions/40568130/borrow-in-filter-closure-does-not-live-long-enough", "title": "Borrow in filter closure does not live long enough", "body": "<p>When I try to compile this code (<a href=\"https://play.rust-lang.org/?gist=a06dc16f4149afd0c31d960b05fa958b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>fn main() {\n    let iter = \"abc123\".chars().filter(&amp;|&amp;c: &amp;char| c.is_digit(10));\n    match iter.clone().take(3).count() {\n        3 =&gt; println!(\"{}\", iter.collect::&lt;String&gt;()),\n        _ =&gt; {}\n    }\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n --&gt; test.rs:2:41\n  |\n2 |     let iter = \"abc123\".chars().filter(&amp;|c: &amp;char| c.is_digit(10));\n  |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value only lives until here\n  |                                         |\n  |                                         temporary value created here\n...\n7 | }\n  | - temporary value needs to live until here\n  |\n  = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>I understand that the error is helpfully telling me to declare the closure in the line above with <code>let f = &amp;|c: &amp;char| c.is_digit(10);</code> (<a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20let%20f%20%3D%20%26%7Cc%3A%20%26char%7C%20c.is_digit(10)%3B%0A%20%20%20%20let%20iter%20%3D%20%22abc123%22.chars().filter(f)%3B%0A%20%20%20%20match%20iter.clone().take(3).count()%20%7B%0A%20%20%20%20%20%20%20%203%20%3D%3E%20println!(%22%7B%7D%22%2C%20iter.collect%3A%3A%3CString%3E())%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%7D%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">working code</a>), but why exactly is this necessary? </p>\n\n<p>I'm also not sure why the closure has to contain two references - <code>&amp;|c: &amp;char|</code>. Doesn't <code>\"abc123\".chars()</code> simply create an iterator of chars?</p>\n"}, {"tags": ["rust", "variable-assignment"], "answers": [{"tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": false, "score": 2, "last_activity_date": 1478996764, "last_edit_date": 1478996764, "creation_date": 1478996173, "answer_id": 40569171, "question_id": 40567538, "link": "https://stackoverflow.com/questions/40567538/how-to-avoid-repetition-re-declaring-variables-by-calling-their-methods-in-rust/40569171#40569171", "title": "How to avoid repetition re-declaring variables by calling their methods in Rust?", "body": "<p>Sure, you can do this with a recursive macro:</p>\n\n<pre><code>macro_rules! expand_into {\n    () =&gt; ();\n    ($head:ident $(, $tail:ident)*) =&gt; (\n        let $head = $head.into();\n        expand_into!($($tail),*);\n    );\n}\n</code></pre>\n\n<p>And to test it:</p>\n\n<pre><code>fn main() {\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    let d = 4;\n\n    expand_into!(a, b, c, d);\n\n    // Need to do something that reveals types so the compiler knows\n    // which `into()` functions to call.\n    if let (Some(x), Some(y), Some(z), Some(w)) = (a, b, c, d) {\n        println!(\"{}, {}, {}, {}\", x, y, z, w);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1479007134, "post_id": 40569658, "comment_id": 68376532, "body": "This is the better answer. I&#39;ve been working on some pretty intricate macros lately, so I guess I&#39;ve got recursion on the mind."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1479001264, "creation_date": 1479001264, "answer_id": 40569658, "question_id": 40567538, "link": "https://stackoverflow.com/questions/40567538/how-to-avoid-repetition-re-declaring-variables-by-calling-their-methods-in-rust/40569658#40569658", "title": "How to avoid repetition re-declaring variables by calling their methods in Rust?", "body": "<p>As @paholg noted, you can do this easily with a macro.  However, you <em>do not</em> need to use recursion, which will be a little slower and a little less useful (you can only recurse a limited number of times before the compiler just gives up).</p>\n\n<p>I also took the liberty of using the fully-qualified name of the <code>Into::into</code> method, to avoid name collision issues:</p>\n\n<pre><code>macro_rules! expand_into {\n    ($($names:ident),*) =&gt; {\n        $(let $names = ::std::convert::Into::into($names);)*\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 40569658, "answer_count": 2, "score": 1, "last_activity_date": 1479001264, "creation_date": 1478983945, "last_edit_date": 1478987822, "question_id": 40567538, "link": "https://stackoverflow.com/questions/40567538/how-to-avoid-repetition-re-declaring-variables-by-calling-their-methods-in-rust", "title": "How to avoid repetition re-declaring variables by calling their methods in Rust?", "body": "<p>I am using <code>Into</code> for multiple arguments in Rust and want to avoid many assignments and stupid mistakes. </p>\n\n<pre><code>pub fn my_fancy_function&lt;T&gt;(v: T, u: T, i: T, l: T, j: T)\n    where T: Into&lt;MyStruct&gt;\n{\n    let v = v.into();\n    let u = u.into();\n    let i = l.into(); // Oops, I transposed these!\n    let l = i.into();\n    let j = j.into();\n    // some code\n}\n</code></pre>\n\n<p>Is there a way to avoid writing out large blocks of assignments? A macro might be able to do this:</p>\n\n<pre><code>expand_into!(v, u, i, l, j);\n</code></pre>\n\n<p>There is nothing special about the <code>into()</code> method, it's just an example where you might often re-declare many arguments at the start of a function in a way that could be easily de-duplicated.</p>\n"}, {"tags": ["rust", "function-pointers", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478981230, "post_id": 40567119, "comment_id": 68370945, "body": "There&#39;s a small possibility I read another question completely backwards and wanted to post the answer I worked on anyway..."}], "answers": [{"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1478981888, "post_id": 40567120, "comment_id": 68371141, "body": "What&#39;s janky about it? It looks exactly like I would expect! :-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1478982811, "post_id": 40567120, "comment_id": 68371399, "body": "@BurntSushi5 mostly around having to take the reference. I spent so much time thinking I did my &quot;normal&quot; function pointer mistake, which is having too many layers of references. It took me a while to realize I didn&#39;t have <i>enough</i>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1479033521, "post_id": 40567120, "comment_id": 68381398, "body": "I don&#39;t quite understand why you&#39;re getting the same address for the table and function.  Are you being fooled by an auto-deref in println!()?  I compiled your C code with <code>gcc -fPIC -shared funcref.c -o funcref.so</code>, and looking at the .so with <code>objdump -t</code> has the two at different addresses, and in different sections."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1479040873, "post_id": 40567120, "comment_id": 68383407, "body": "@BurntSushi5: The type of <code>INITIAL_VLOG_STARTUP_ROUTINE</code> seems janky; <code>vlog_startup_routines</code> is a pointer to a function pointer, not a function pointer itself. Faking it and then taking it address to start iterating seems like a round-about way to go about things."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1479046224, "post_id": 40567120, "comment_id": 68384841, "body": "@ChrisEmerson yep, my objdump says the same; I compiled with <code>clang library.c -c -g -o libc_library.a</code> FWIW. I don&#39;t think that the <a href=\"https://doc.rust-lang.org/std/fmt/trait.Pointer.html\" rel=\"nofollow noreferrer\"><code>Pointer</code> trait</a> has any automatic dereferencing, otherwise it would be pretty useless."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1479048032, "post_id": 40567120, "comment_id": 68385431, "body": "@MatthieuM.: <code>vlog_startup_routines</code> is not a pointer to a function pointer, it&#39;s an array of function pointers. When you use the name <code>vlog_startup_routines</code> in C code, the array lvalue is coerced to a pointer. That doesn&#39;t mean that the variable stores a pointer! The expression <code>&amp;INITIAL_VLOG_STARTUP_ROUTINE</code> in Rust code yields the same value as the expression <code>vlog_startup_routines</code> in C code."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1479051429, "post_id": 40567120, "comment_id": 68386521, "body": "@FrancisGagn&#233;: Ah! I had forgotten about this implicit conversion occurring in C, and of course in Rust it would have to be explicit. Now it makes much more sense."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1479051651, "post_id": 40567120, "comment_id": 68386599, "body": "@Shepmaster: I think that Francis nailed it; <code>INITIAL_VLOG_START_ROUTINE</code> is a misleading name, because it really is an <i>array</i> of routines (of unknown size) and you need to make it a pointer to be iterate over it. In Rust, the type really should be <code>[VlogStartupRoutine; 1]</code>; it&#39;s a bit of a lie, but since the array has at least one element as per its semantics, it seems better than pretending it&#39;s directly a pointer to function."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1478981198, "creation_date": 1478981198, "answer_id": 40567120, "question_id": 40567119, "link": "https://stackoverflow.com/questions/40567119/how-do-i-access-a-zero-terminated-array-of-function-pointers-declared-in-c-from/40567120#40567120", "title": "How do I access a zero-terminated array of function pointers declared in C from Rust?", "body": "<p>You can call a <em>single</em> function pointer easily enough:</p>\n\n<pre><code>extern crate libc;\n\n// Or whatever argument types\ntype VlogStartupRoutine = extern \"C\" fn();\n\nextern \"C\" {\n    static vlog_startup_routines: VlogStartupRoutine;\n}\n\nfn main() {\n    unsafe {\n        let routine = vlog_startup_routines;\n        println!(\"Calling startup\");\n        routine();\n    }\n}\n</code></pre>\n\n<p>However, note that we and the C compiler are doing some trickery here: the array and the first element of the array have the same value:</p>\n\n<pre><code>extern \"C\" {\n    static vlog_startup_routines: VlogStartupRoutine;\n    fn hello_register();\n}\n\nfn main() {\n    unsafe {\n        println!(\"{:p}\", vlog_startup_routines);\n        println!(\"{:p}\", hello_register as *const ());\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x1029bf750\n0x1029bf750\n</code></pre>\n\n<p>To work around this, we grab a reference to the initial function and then use that to iterate though each of the function pointers. I've renamed <code>vlog_startup_routines</code> just to prevent any accidental misuse of it.</p>\n\n<pre><code>extern crate libc;\n\n// Or whatever appropriate argument types\ntype VlogStartupRoutine = extern \"C\" fn();\n\nextern \"C\" {\n    #[link_name = \"vlog_startup_routines\"]\n    static INITIAL_VLOG_STARTUP_ROUTINE: VlogStartupRoutine;\n}\n\nfn main() {\n    unsafe {\n        let startup_routines: *const VlogStartupRoutine = &amp;INITIAL_VLOG_STARTUP_ROUTINE;\n\n        for i in 0.. {\n            let routine = *startup_routines.offset(i);\n\n            let routine_as_ptr = routine as *const ();\n            if routine_as_ptr.is_null() { break }\n\n            println!(\"Calling startup routine #{}\", i);\n            routine();\n        }\n    }\n}\n</code></pre>\n\n<p>This all feels pretty janky, so I wouldn't be surprised if there were a better solution available, but this does work.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1479125296, "post_id": 40575615, "comment_id": 68412008, "body": "The only work-around I have to offer for the unknown size is to give it a size of <code>1</code> (because that&#39;s the minimum size), and then ignore it when looping... but I am not sure whether the compiler can do weird optimizations on this."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479125419, "post_id": 40575615, "comment_id": 68412071, "body": "Or zero as in @Shepmaster&#39;s answer."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 3, "last_activity_date": 1479314557, "last_edit_date": 1479314557, "creation_date": 1479051636, "answer_id": 40575615, "question_id": 40567119, "link": "https://stackoverflow.com/questions/40567119/how-do-i-access-a-zero-terminated-array-of-function-pointers-declared-in-c-from/40575615#40575615", "title": "How do I access a zero-terminated array of function pointers declared in C from Rust?", "body": "<p>The problem here is that <code>vlog_startup_routines</code> is not a pointer.  If you declare it as a pointer; it is an array.  The symbol resolves to the address of the first item of the array.  In C, if you have:</p>\n\n<pre><code>int i = 7;\nint a[1] = { 8 };\nint *p = &amp;i;\n</code></pre>\n\n<p>then at the linker level, the symbol <code>i</code> is the address of the location containing the value 7, <code>a</code> is <em>also</em> the address of a location containing an integer value (8), and <code>p</code> is the address of a location containing a pointer to an integer.  Another way of saying it is that the linker symbol is always the address of the variable.</p>\n\n<p>If you declare it as:</p>\n\n<pre><code>// Or whatever argument types\ntype VlogStartupRoutine = extern \"C\" fn();\n\nextern \"C\" {\n    static vlog_startup_routines: VlogStartupRoutine;\n}\n</code></pre>\n\n<p>you're saying that <code>vlog_startup_routines</code> is a variable containing a function pointer, more like the C <code>void *vlog_startup_routines</code>.</p>\n\n<pre><code>unsafe {\n    println!(\"{:p}\", vlog_startup_routines);\n    println!(\"{:p}\", hello_register as *const ());\n}\n</code></pre>\n\n<p>it's dereferencing taking the value stored at the address <code>vlog_startup_routines</code>, which is indeed the first pointer.</p>\n\n<p>The correct (nearly) code is:</p>\n\n<pre><code>type VlogStartupRoutine = Option&lt;extern \"C\" fn()&gt;;\n\n#[link(name = \"funcref\")]\nextern \"C\" {\n    static vlog_startup_routines: [VlogStartupRoutine;10];\n    fn hello_register();\n}\n\nfn main() {\n    unsafe {\n        println!(\"{:p}\", vlog_startup_routines.as_ptr());\n        println!(\"{:p}\", hello_register as *const ());\n    }\n    unsafe {\n        let routine = vlog_startup_routines[0].unwrap();\n        println!(\"Calling startup\");\n        routine();\n        assert!(vlog_startup_routines[1].is_none());\n    }\n}\n</code></pre>\n\n<p>Note that I use <code>Option&lt;extern \"C\" fn()&gt;</code> for the nullable function pointer as <a href=\"https://doc.rust-lang.org/book/ffi.html#the-nullable-pointer-optimization\" rel=\"nofollow noreferrer\">described here</a>.</p>\n\n<p>This outputs, for me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x7efc27d37030\n0x7efc27b366f0\nCalling startup\nhello_register called\n</code></pre>\n\n<p>The reason I say \"nearly\" is that I'm not sure how to say it's an unknown-sized array.  :-)</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1479052837, "last_edit_date": 1479052837, "creation_date": 1479052311, "answer_id": 40575740, "question_id": 40567119, "link": "https://stackoverflow.com/questions/40567119/how-do-i-access-a-zero-terminated-array-of-function-pointers-declared-in-c-from/40575740#40575740", "title": "How do I access a zero-terminated array of function pointers declared in C from Rust?", "body": "<p>A combination of the previous two answers looks nicer:</p>\n\n<pre><code>extern crate libc;\n\ntype VlogStartupRoutine = Option&lt;extern \"C\" fn()&gt;;\n\nextern \"C\" {\n    // This array is NULL-terminated; set the length to zero to\n    // prevent any uncontrolled access.\n    static vlog_startup_routines: [VlogStartupRoutine; 0];\n}\n\nfn main() {\n    unsafe {\n        let routines = vlog_startup_routines.as_ptr();\n\n        for i in 0.. {\n            match *routines.offset(i) {\n                Some(routine) =&gt; {\n                    println!(\"Calling startup routine #{}\", i);\n                    routine();\n                }\n                None =&gt; break,\n            }\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>The symbol <code>vlog_startup_routines</code> is not a pointer to a function pointer, it's an array of function pointers. When you use the name <code>vlog_startup_routines</code> in C code, the array lvalue is coerced to a pointer. That doesn't mean that the variable stores a pointer! </p>\n\n<p>To most closely express this in Rust, we can define <code>vlog_startup_routines</code> as an array. The problem is that we don't know how many elements are in the array because it's NULL-terminated. To prevent any accidental misuse, we set the length to zero and only access elements though offsets of the raw pointer.</p>\n\n<p>We use <code>Option&lt;extern \"C\" fn()&gt;</code> for the nullable function pointer as described in the <a href=\"https://doc.rust-lang.org/book/ffi.html#the-nullable-pointer-optimization\" rel=\"nofollow noreferrer\">FFI chapter of <em>The Rust Programming Language</em></a>.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 181, "favorite_count": 0, "accepted_answer_id": 40575740, "answer_count": 3, "score": 2, "last_activity_date": 1479314557, "creation_date": 1478981198, "last_edit_date": 1479053450, "question_id": 40567119, "link": "https://stackoverflow.com/questions/40567119/how-do-i-access-a-zero-terminated-array-of-function-pointers-declared-in-c-from", "title": "How do I access a zero-terminated array of function pointers declared in C from Rust?", "body": "<p>I have the following C code with a zero-terminated array of function pointers:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid hello_register(void) {\n  printf(\"hello_register called\\n\");\n}\n\nvoid (*vlog_startup_routines[])() = {\n    hello_register,\n    0\n};\n</code></pre>\n\n<p>This code is compiled and linked to my Rust program using a Cargo build script. How can I call each of the function pointers in the array from Rust?</p>\n"}, {"tags": ["path", "macros", "rust", "filepath"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1548879072, "last_edit_date": 1548879072, "creation_date": 1478981825, "answer_id": 40567215, "question_id": 40567020, "link": "https://stackoverflow.com/questions/40567020/what-is-a-macro-for-concatenating-an-arbitrary-number-of-components-to-build-a-p/40567215#40567215", "title": "What is a macro for concatenating an arbitrary number of components to build a path in Rust?", "body": "<p>Once you read past the macro syntax, it's not too bad. Basically, we take require at least two arguments, and the first one needs to be convertible to a <code>PathBuf</code> via <code>Into</code>. Each subsequent argument is <code>push</code>ed on the end, which accepts anything that can be turned into a reference to a <code>Path</code>.</p>\n\n<pre><code>macro_rules! build_from_paths {\n    ($base:expr, $($segment:expr),+) =&gt; {{\n        let mut base: ::std::path::PathBuf = $base.into();\n        $(\n            base.push($segment);\n        )*\n        base\n    }}\n}\n\nfn main() {\n    use std::{\n        ffi::OsStr,\n        path::{Path, PathBuf},\n    };\n\n    let a = build_from_paths!(\"a\", \"b\", \"c\");\n    println!(\"{:?}\", a);\n\n    let b = build_from_paths!(PathBuf::from(\"z\"), OsStr::new(\"x\"), Path::new(\"y\"));\n    println!(\"{:?}\", b);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479045718, "post_id": 40572835, "comment_id": 68384705, "body": "The tradeoff is that you cannot have multiple types in the single call."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 3, "last_activity_date": 1548879005, "last_edit_date": 1548879005, "creation_date": 1479032948, "answer_id": 40572835, "question_id": 40567020, "link": "https://stackoverflow.com/questions/40567020/what-is-a-macro-for-concatenating-an-arbitrary-number-of-components-to-build-a-p/40572835#40572835", "title": "What is a macro for concatenating an arbitrary number of components to build a path in Rust?", "body": "<p>A normal function which takes an iterable (e.g. a slice) can solve the problem in many contexts:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nfn join_all&lt;P, Ps&gt;(parts: Ps) -&gt; PathBuf\nwhere\n    Ps: IntoIterator&lt;Item = P&gt;,\n    P: AsRef&lt;Path&gt;,\n{\n    parts.into_iter().fold(PathBuf::new(), |mut acc, p| {\n        acc.push(p);\n        acc\n    })\n}\n\nfn main() {\n    let parts = vec![\"/usr\", \"bin\", \"man\"];\n    println!(\"{:?}\", join_all(&amp;parts));\n    println!(\"{:?}\", join_all(&amp;[\"/etc\", \"passwd\"]));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e149a533406fbf3cbef8ab6c8323bc02&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 0, "creation_date": 1608290608, "post_id": 48949906, "comment_id": 115544252, "body": "This is nice. What is the <code>r</code> before &quot;C:\\&quot;? I can see that without it the code doesn&#39;t compile, so I suppose it has to do with escaping the &quot;\\&quot; character."}, {"owner": {"reputation": 2678, "user_id": 3387223, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/370iy.png?s=128&g=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/3387223/codemonkey"}, "reply_to_user": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 1, "creation_date": 1610371120, "post_id": 48949906, "comment_id": 116103333, "body": "@PaulRazvanBerg It makes it a <a href=\"https://rahul-thakoor.github.io/rust-raw-string-literals/\" rel=\"nofollow noreferrer\">raw string literal</a>. Which exactly as you said, makes it so you don&#39;t need to write two slashes &quot;\\\\&quot; in order to get a single slash."}], "tags": [], "owner": {"reputation": 2678, "user_id": 3387223, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/370iy.png?s=128&g=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/3387223/codemonkey"}, "is_accepted": false, "score": 7, "last_activity_date": 1524940166, "last_edit_date": 1524940166, "creation_date": 1519395546, "answer_id": 48949906, "question_id": 40567020, "link": "https://stackoverflow.com/questions/40567020/what-is-a-macro-for-concatenating-an-arbitrary-number-of-components-to-build-a-p/48949906#48949906", "title": "What is a macro for concatenating an arbitrary number of components to build a path in Rust?", "body": "<p>There's a reasonably simple example in the <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"noreferrer\">documentation for <code>PathBuf</code></a>:</p>\n\n<pre><code>use std::path::PathBuf;\nlet path: PathBuf = [r\"C:\\\", \"windows\", \"system32.dll\"].iter().collect();\n</code></pre>\n"}], "owner": {"reputation": 388, "user_id": 3549270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1a4f7b5ad4e34ec42f3dfeb6961f911a?s=128&d=identicon&r=PG&f=1", "display_name": "konstin", "link": "https://stackoverflow.com/users/3549270/konstin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1607, "favorite_count": 2, "accepted_answer_id": 40567215, "answer_count": 3, "score": 8, "last_activity_date": 1548879072, "creation_date": 1478980549, "last_edit_date": 1548878894, "question_id": 40567020, "link": "https://stackoverflow.com/questions/40567020/what-is-a-macro-for-concatenating-an-arbitrary-number-of-components-to-build-a-p", "title": "What is a macro for concatenating an arbitrary number of components to build a path in Rust?", "body": "<p>In Python, a function called <code>os.path.join()</code> allows concatenating multiple strings into one path using the path separator of the operating system. In Rust, there is only a function <code>join()</code> that appends a string or a path to an existing path. This problem can't be solved with a normal function as a normal function needs to have a fixed number of arguments.</p>\n\n<p>I'm looking for a macro that takes an arbitrary number of strings and paths and returns the joined path.</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478976805, "post_id": 40565889, "comment_id": 68369643, "body": "Interesting. An array is nothing more than a pointer, and being 0 terminated is a run-time property. However I am not sure how to pass pointer to functions across the FFI boundary; have you checked the existing Rust documentation?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478977675, "post_id": 40565889, "comment_id": 68369888, "body": "@MatthieuM. and the array pointer basically doesn&#39;t exist here; <code>(void *)hello_register == (void *)vlog_startup_routines</code>, right?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478982018, "post_id": 40565889, "comment_id": 68371186, "body": "I&#39;d suggest working on your wording when asking questions. Providing C code makes it look like you <i>want to call that code</i>. It would have been better to provide C code that uses an <code>extern</code> to highlight that you want to implement that symbol in Rust. Additionally, when you have a library, there&#39;s nothing to drive the program, so nothing would get called. A C executable would better express the problem."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478988361, "post_id": 40565889, "comment_id": 68372913, "body": "@Shepmaster: Note quite; <code>*hello_register == vlog_startup_routines</code>, as the array contains a pointer to the function, not the function itself, which matters if one wishes to have multiple functions I suppose. So in Rust, <code>hello_register</code> will be something like <code>*const fn()</code> I suppose, allowing arithmetic."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478988433, "post_id": 40565889, "comment_id": 68372936, "body": "@MatthieuM. perhaps you can help me figure out why <a href=\"http://stackoverflow.com/questions/40567119/how-do-i-access-an-array-of-function-pointers-declared-in-c-from-rust\">my code says they are the same</a>?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479049532, "post_id": 40575229, "comment_id": 68385937, "body": "<code>None</code>; of course! I couldn&#39;t figure out how to make a <code>NULL</code> with the appropriate type. Sigh."}, {"owner": {"reputation": 1608, "user_id": 586104, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d11fc00b653bded5903bb936bd1fb55d?s=128&d=identicon&r=PG", "display_name": "jck", "link": "https://stackoverflow.com/users/586104/jck"}, "edited": false, "score": 0, "creation_date": 1479224772, "post_id": 40575229, "comment_id": 68462053, "body": "Thanks, I thought about option but i figured there could be a better alternative since only the last element should be 0. I guess there isn&#39;t yet."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1479052707, "last_edit_date": 1479052707, "creation_date": 1479049270, "answer_id": 40575229, "question_id": 40565889, "link": "https://stackoverflow.com/questions/40565889/exposing-a-c-symbol-containing-a-zero-terminated-array-of-function-pointers-from/40575229#40575229", "title": "Exposing a C symbol containing a zero terminated array of function pointers from Rust to C", "body": "<p>You need to define a <code>static</code> item whose type is an array. When defining a <code>static</code> item, unfortunately, we need to specify the size of that array (as of Rust 1.13.0).</p>\n\n<p>Function pointers in Rust are not considered unsafe to call (unless you have an <code>unsafe fn</code>). However, a null pointer would not be safe to call, so Rust doesn't allow creating a null function pointer. But there's a trick: when <code>T</code> is a pointer (whichever kind of pointer, including fat pointers and function pointers), <a href=\"https://doc.rust-lang.org/book/ffi.html#the-nullable-pointer-optimization\" rel=\"nofollow noreferrer\"><code>Option&lt;T&gt;</code> has the same size as <code>T</code><sup>1</sup>, and <code>None</code> is simply represented as a null pointer</a>. Thus, we can define an array of <code>Option&lt;fn()&gt;</code> values to get the desired result.</p>\n\n<p><sup>1</sup> For other types, <code>Option&lt;T&gt;</code> would be larger than <code>T</code> to store the discriminant.</p>\n\n<pre><code>#[no_mangle]\n#[allow(non_upper_case_globals)]\npub static vlog_startup_routines: [Option&lt;fn()&gt;; 2] = [\n    Some(hello_register),\n    None\n];\n</code></pre>\n\n<p>If having to specify the array size annoys you, then you can use a macro that computes it for you. As a bonus, this macro adds the trailing <code>None</code> and wraps each function in <code>Some</code>.</p>\n\n<pre><code>macro_rules! one_for {\n    ($_x:tt) =&gt; (1)\n}\n\nmacro_rules! vlog_startup_routines {\n    ($($func:expr,)*) =&gt; {\n        #[no_mangle]\n        #[allow(non_upper_case_globals)]\n        pub static vlog_startup_routines: [Option&lt;fn()&gt;; $(one_for!($func) +)* 1] = [\n            $(Some($func),)*\n            None\n        ];\n    }\n}\n\nvlog_startup_routines! {\n    hello_register,\n}\n</code></pre>\n\n<p><em>Note: the <code>one_for</code> macro exists because we need to reference one of the parameter symbols in a repeating pattern (you can have multiple distinct repetitions, so the compiler needs to know which one you're referring to) but we don't care about its value.</em></p>\n"}], "owner": {"reputation": 1608, "user_id": 586104, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d11fc00b653bded5903bb936bd1fb55d?s=128&d=identicon&r=PG", "display_name": "jck", "link": "https://stackoverflow.com/users/586104/jck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 40575229, "answer_count": 1, "score": 4, "last_activity_date": 1479052707, "creation_date": 1478973122, "last_edit_date": 1478975635, "question_id": 40565889, "link": "https://stackoverflow.com/questions/40565889/exposing-a-c-symbol-containing-a-zero-terminated-array-of-function-pointers-from", "title": "Exposing a C symbol containing a zero terminated array of function pointers from Rust to C", "body": "<p>I have the following C code which is compiled as a <code>.so</code>:</p>\n\n<pre><code>void (*vlog_startup_routines[])() = {\n    hello_register,\n    0\n};\n</code></pre>\n\n<p>In Rust, I can declare functions with <code>#[no_mangle]</code>. How would I expose a symbol called <code>vlog_startup_routines</code> which is an array containing function pointers and also zero terminated?</p>\n"}, {"tags": ["function", "rust", "structure"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 11, "last_activity_date": 1478962302, "creation_date": 1478962302, "answer_id": 40564041, "question_id": 40563950, "link": "https://stackoverflow.com/questions/40563950/is-defining-structure-inside-a-function-a-good-way-to-conceal-the-structure-from/40564041#40564041", "title": "Is defining structure inside a function a good way to conceal the structure from other functions?", "body": "<p>I think this is a perfectly reasonable way to define a type only used within a function.</p>\n\n<p>Types are defined at compile time; there's no \"defining\" going on at runtime when functions are called.</p>\n"}], "owner": {"reputation": 146, "user_id": 6908424, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gDemT.png?s=128&g=1", "display_name": "vaartis", "link": "https://stackoverflow.com/users/6908424/vaartis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1228, "favorite_count": 1, "accepted_answer_id": 40564041, "answer_count": 1, "score": 5, "last_activity_date": 1478969260, "creation_date": 1478961677, "last_edit_date": 1478969260, "question_id": 40563950, "link": "https://stackoverflow.com/questions/40563950/is-defining-structure-inside-a-function-a-good-way-to-conceal-the-structure-from", "title": "Is defining structure inside a function a good way to conceal the structure from other functions?", "body": "<p>You can define a structure inside a function like this:</p>\n\n<pre><code>fn user_status() -&gt; bool {\n    struct UserStatus {\n        logined: bool,\n        name: Option&lt;String&gt;,\n    }\n    // ...\n    true\n}\n</code></pre>\n\n<p>Is this a good way to conceal structure from other functions and is structure defined every time something calls the function or it is created just once?</p>\n"}, {"tags": ["vector", "type-conversion", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 1, "creation_date": 1478983199, "post_id": 40560930, "comment_id": 68371499, "body": "I see. Since enum are of the same size. Thanks so much!"}, {"owner": {"reputation": 408, "user_id": 10259813, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-alOmMsQB0es/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM6E8TX6-Nv7lZ0WMNh4LP5r2ZbEA/mo/photo.jpg?sz=128", "display_name": "sam", "link": "https://stackoverflow.com/users/10259813/sam"}, "edited": false, "score": 0, "creation_date": 1611768925, "post_id": 40560930, "comment_id": 116559127, "body": "Note that an enum takes on the size of its largest option. If your Thing also had an option that was a large array each instance of Thing in your vector would have a memory footprint of the large array."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 15, "last_activity_date": 1478938664, "creation_date": 1478938664, "answer_id": 40560930, "question_id": 40559931, "link": "https://stackoverflow.com/questions/40559931/vector-store-mixed-types-of-data-in-rust/40560930#40560930", "title": "Vector store mixed types of data in Rust", "body": "<p>There's no need to use references; just store the numbers and <code>Operator</code>s directly in an enum:</p>\n\n<pre><code>enum Thing {\n    Op(Operator),\n    Number(i32),\n}\n\nfn main() {\n    let mut output: Vec&lt;Thing&gt; = Vec::new();\n    let a = 2;\n    let b = Operator::Add;\n    let c = 3;\n    output.push(Thing::Number(a));\n    output.push(Thing::Op(b));\n    output.push(Thing::Number(c));\n}\n</code></pre>\n\n<p>And then <code>match</code> on them when taking them out.</p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3990, "favorite_count": 1, "closed_date": 1513295616, "accepted_answer_id": 40560930, "answer_count": 1, "score": 7, "last_activity_date": 1478958998, "creation_date": 1478928996, "last_edit_date": 1478958998, "question_id": 40559931, "link": "https://stackoverflow.com/questions/40559931/vector-store-mixed-types-of-data-in-rust", "closed_reason": "Duplicate", "title": "Vector store mixed types of data in Rust", "body": "<p>In the context of converting a infix expression to a postfix one, using the Shunting-yard algorithm. I want to use a vector to store the output, which would store both operator and numeric type data. </p>\n\n<pre><code>#[derive(Clone, Copy, Debug, PartialEq)]\npub enum Operator {\n    Add,\n    Sub,\n    Mul,\n    Div,\n}\n\nfn main() {\n    let mut output: Vec&lt;String&gt; = Vec::new();  // create an output vector\n    let a = 2;\n    let b = Operator::Add;\n    let c = 3;\n    output.push(a.to_string());\n    output.push(b.to_string());\n    output.push(c.to_string());\n}\n</code></pre>\n\n<p>This above code of course doesn't compile, since the <code>to_string()</code> method is not defined for <code>Operator</code>. I see two ways to fix it:</p>\n\n<ol>\n<li>Define a <code>to_string()</code> method</li>\n<li>Create a vector to store references to numbers and <code>Operator</code>. </li>\n</ol>\n\n<p>I think the second is the preferred choice, though I don't know if creating a vector of references will introduce lots of complexity.</p>\n"}, {"tags": ["docker", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1478965336, "post_id": 40555215, "comment_id": 68365913, "body": "Did you try just using rustup to install a cross compiler rather than bothering with Docker? (I don&#39;t have an OS X machine, I&#39;m just curious if that works)."}], "answers": [{"tags": [], "owner": {"reputation": 1315, "user_id": 4069345, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27a9f29823840e2542fd1796e6f5b1ea?s=128&d=identicon&r=PG", "display_name": "joelnb", "link": "https://stackoverflow.com/users/4069345/joelnb"}, "is_accepted": true, "score": 2, "last_activity_date": 1478953463, "creation_date": 1478953463, "answer_id": 40562801, "question_id": 40555215, "link": "https://stackoverflow.com/questions/40555215/how-can-i-get-the-rust-executable-once-it-is-built-inside-the-docker-container/40562801#40562801", "title": "How can I get the Rust executable once it is built inside the Docker container?", "body": "<p>I think you are overcomplicating things here by having a Dockerfile (I could be wrong if your needs are actually more complex than what you have shown, if so please provide further information and I will edit this answer). When you run ADD in the Dockerfile you are copying your code into the built image but you never copy the built object out again (and in fact there is no way I know to do that using a Dockerfile). There is no 'nice' way to get the resulting binary out of the image.</p>\n\n<p>I think something simpler like this command will suit your needs better (run it after changing to the directory containing your code):</p>\n\n<pre><code>docker run -it -v \"$(pwd):/source\" jimmycuadra/rust cargo build --release --target=x86_64-unknown-linux-gnu\n</code></pre>\n\n<p>This mounts the current directory as <code>/source</code> in the container (which is the default WORKDIR for the image you are using) and then builds your code, meaning the resulting executable will end up in the current folder:</p>\n\n<pre><code>ls target/x86_64-unknown-linux-gnu/release/\n</code></pre>\n\n<p>There is a slight problem with this - everything in the container runs as root and therefore the build artifacts get created with the owner set to the root user. This may cause issues for you trying to modify/remove them on your host later. To get around that you may be able to use something like this:</p>\n\n<pre><code>docker run -it -v \"$(pwd):/source\" jimmycuadra/rust sh -c \"cargo build --release --target=x86_64-unknown-linux-gnu &amp;&amp; chown -R $(id -u):$(id -g) .\"\n</code></pre>\n\n<p>I say 'may' because I'm not sure if that will work on a Mac. I'm sure there is a way to achieve the same thing though.</p>\n"}, {"tags": [], "owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "is_accepted": false, "score": 0, "last_activity_date": 1513892429, "last_edit_date": 1513892429, "creation_date": 1513379662, "answer_id": 47841010, "question_id": 40555215, "link": "https://stackoverflow.com/questions/40555215/how-can-i-get-the-rust-executable-once-it-is-built-inside-the-docker-container/47841010#47841010", "title": "How can I get the Rust executable once it is built inside the Docker container?", "body": "<p>You can directly run the images provided by the Rust development team on Docker Hub, and mount your source directory inside the image. You just need to be careful to also mount the directories that Cargo will use as cache, otherwise it will end up downloading packages and/or checking out source repositories for the dependencies with every new container run. Note that you should't bind-mount the entire <code>/usr/local/cargo</code> directory, because this is where the official images put the binaries and other stuff.</p>\n\n<p>Here's the little shell script that I put in my executable path as <code>cargo</code>, and also symlinked as <code>nightly-cargo</code>:</p>\n\n<pre><code>#!/bin/sh\n\nif [ $(basename \"$0\") = nightly-cargo ]; then\n    rust_image=rustlang/rust:nightly\nelse\n    rust_image=rust:latest\nfi\n\necho \"Running cargo in $rust_image\"\n\ndocker run -t --rm --user $(id -u):$(id -g) \\\n    -v \"$HOME\"/.cargo/registry:/usr/local/cargo/registry \\\n    -v \"$HOME\"/.cargo/git:/usr/local/cargo/git \\\n    -v \"$PWD\":/mnt/crate --workdir /mnt/crate \\\n    $rust_image cargo \"$@\"\n</code></pre>\n\n<p><strong>Updated:</strong> I have set up an automatically rebuilt <a href=\"https://hub.docker.com/r/mzabaluev/rust/\" rel=\"nofollow noreferrer\">image repository</a> which allows the user to bind-mount the entire <code>/usr/local/cargo</code>. The caveat is that running rustup inside a container running one of these images with <code>/usr/local/cargo</code> bind-mounted may produce surprising results.</p>\n"}], "owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 640, "favorite_count": 0, "accepted_answer_id": 40562801, "answer_count": 2, "score": 2, "last_activity_date": 1513892429, "creation_date": 1478893901, "last_edit_date": 1513438285, "question_id": 40555215, "link": "https://stackoverflow.com/questions/40555215/how-can-i-get-the-rust-executable-once-it-is-built-inside-the-docker-container", "title": "How can I get the Rust executable once it is built inside the Docker container?", "body": "<p>I'm working on an macOS machine but I plan to run my executable on a Linux machine. I've found the <a href=\"https://hub.docker.com/r/jimmycuadra/rust/\" rel=\"nofollow noreferrer\">jimmycuadra/rust</a> Docker image which seems to suit my needs.</p>\n\n<p>I do <code>docker build .</code> with the following Dockerfile in the current directory.</p>\n\n<pre><code>FROM jimmycuadra/rust\n\nADD my_project /my_project\nWORKDIR /my_project\nRUN cargo build --release --target=x86_64-unknown-linux-gnu\n</code></pre>\n\n<p>This seems to build the project properly, but once Docker exits, there is no <code>target</code> directory and there is no running container to <code>docker cp</code> from either.</p>\n\n<p>How can I get the Rust executable once it is built inside the Docker container?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478885628, "post_id": 40553023, "comment_id": 68344793, "body": "Please consider creating a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> in the future. It was very difficult to guess at what your <code>impl</code> block contained."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1478885573, "creation_date": 1478885573, "answer_id": 40553280, "question_id": 40553023, "link": "https://stackoverflow.com/questions/40553023/check-for-equal-associated-types-in-where-clause/40553280#40553280", "title": "Check for equal Associated Types in where clause", "body": "<p>Reference one trait from the other trait constraint:</p>\n\n<pre><code>struct PeekableSeekable&lt;I&gt;\n    where I: Iterator\n{\n    iter: I,\n    peeked: Option&lt;I::Item&gt;,\n}\n\nimpl&lt;I&gt; PeekableSeekable&lt;I&gt;\n    where I: Iterator&lt;Item = &lt;I as SeekingIterator&gt;::Item&gt; + SeekingIterator\n{\n    // Implement\n}\n</code></pre>\n"}], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 278, "favorite_count": 0, "accepted_answer_id": 40553280, "answer_count": 1, "score": 2, "last_activity_date": 1478885573, "creation_date": 1478884556, "last_edit_date": 1478885384, "question_id": 40553023, "link": "https://stackoverflow.com/questions/40553023/check-for-equal-associated-types-in-where-clause", "title": "Check for equal Associated Types in where clause", "body": "<p>Consider these two traits:</p>\n\n<pre><code>trait Iterator {\n   type Item;\n\n   fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>trait SeeekingIterator {\n    type Item;\n\n    fn next(&amp;mut self, other: &amp;Self::Item) -&gt; Option&lt;Self::Item&gt;;\n}\n</code></pre>\n\n<p>Now assume, I wanted to implement something like <code>std::iter::Peekable</code> for structs that implement both <code>Iterator</code> and <code>SeekingIterator</code>.</p>\n\n<p>This would look a bit like:</p>\n\n<pre><code>struct PeekableSeekable&lt;I&gt;  where\n    I: Iterator + SeekingIterator\n{\n    iter: I,\n    peeked: Option&lt;&lt;I as Iterator&gt;::Item&gt;        \n}\n</code></pre>\n\n<p>It would implement </p>\n\n<pre><code>fn peek(&amp;mut self) -&gt; Option&lt;&amp;&lt;I as Iterator&gt;::Item&gt;;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn peek_seek(&amp;mut self, other: &amp;&lt;I as SeekingIterator&gt;::Item) -&gt; Option&lt;&amp;&lt;I as SeekingIterator&gt;::Item&gt;   \n</code></pre>\n\n<p>The problem now is, that this would only work if <code>&lt;I as Iterator&gt;::Item == &lt;I as SeekingIterator&gt;::Item</code>.</p>\n\n<p>I don't know of a way to express this inside a <code>where</code> clause. \nI'm faking it by using </p>\n\n<pre><code>Option&lt;&lt;I as Iterator&gt;::Item&gt;: From&lt;Option&lt;&lt;I as SeekingIterator&gt;::Item&gt;&gt;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>Option&lt;&lt;I as SeekingIterator&gt;::Item&gt;: From&lt;Option&lt;&lt;I as Iterator&gt;::Item&gt;&gt;\n</code></pre>\n\n<p>And then calling <code>Option::from</code> when a transformation is needed. This seems a bit ugly and I am wondering if this problem could be solved more concisely.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478879305, "post_id": 40551411, "comment_id": 68341330, "body": "Note: using the <code>try!</code> macro, or since you are on 1.13 the <code>?</code> operator requires the function in which it is invoked to return a <code>Result</code>; this is what <code>expected (), found enum...</code> is telling you."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478879932, "post_id": 40551411, "comment_id": 68341695, "body": "@Shepmaster: If I am getting this right, <code>read_dir</code> returns a result, which implements <code>IntoIterator</code> yielding the actual <code>ReadDir</code> instance, which is what the OP is iterating on instead of the directory entries."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478881001, "post_id": 40551411, "comment_id": 68342330, "body": "@MatthieuM. yep"}], "answers": [{"comments": [{"owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1478881626, "post_id": 40552000, "comment_id": 68342700, "body": "Thanks, this really clears up quite a lot. I didn&#39;t know about <code>expect</code> vs. <code>unwrap</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1579527632, "last_edit_date": 1579527632, "creation_date": 1478880843, "answer_id": 40552000, "question_id": 40551411, "link": "https://stackoverflow.com/questions/40551411/read-one-level-of-directory-structure/40552000#40552000", "title": "Read one level of directory structure", "body": "<p>Let's read the compiler error messages together!</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error: no method named `path` found for type `std::fs::ReadDir` in the current scope\n --&gt; src/main.rs:5:26\n  |\n5 |         let path = entry.path();\n  |                          ^^^^\n</code></pre>\n</blockquote>\n\n<p>This means that the type of <code>entry</code> is a <code>ReadDir</code>, but how did that happen? We are supposed to be iterating over a <code>ReadDir</code>!</p>\n\n<p>If we look at the <a href=\"https://doc.rust-lang.org/std/fs/fn.read_dir.html\" rel=\"nofollow noreferrer\">documentation for <code>read_dir</code></a>, we can see that it returns a <code>Result</code>:</p>\n\n<pre><code>pub fn read_dir&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Result&lt;ReadDir&gt;\n</code></pre>\n\n<p>This means that the process of reading a directory can fail, which is entirely believable \u2014 what if the directory doesn't exist? However, the presented code doesn't handle that error. It instead passes the <code>Result</code> to the <code>for</code> loop. <code>for</code> loops work by calling <code>IntoIterator</code>, and <code>Result</code> implements that, yielding the <code>Ok</code> case or nothing at all. <code>Option</code> has a similar implementation.</p>\n\n<p>So, you added <code>try!</code> to the code...</p>\n\n<pre><code>for entry in try!(fs::read_dir(\"/etc\"))\n</code></pre>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:18\n  |\n4 |     for entry in try!(fs::read_dir(\"/etc\")) {\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n  |\n  = note: expected type `()`\n  = note:    found type `std::result::Result&lt;_, _&gt;`\n  = note: this error originates in a macro outside of the current crate\n</code></pre>\n</blockquote>\n\n<p>As has been <a href=\"https://stackoverflow.com/q/30555477/155423\">discussed previously</a> and is mentioned in the <a href=\"https://doc.rust-lang.org/std/macro.try.html\" rel=\"nofollow noreferrer\">documentation for <code>try!</code></a>:</p>\n\n<blockquote>\n  <p>Because of the early return, <code>try!</code> can only be used in functions that return <code>Result</code>.</p>\n</blockquote>\n\n<p>You have to handle the error somehow, and for whatever reason, your current function states that it <em>cannot fail</em> \u2014 it doesn't return a <code>Result</code>! Instead, let's just kill the entire program by panicking by adding <code>expect</code> to the call:</p>\n\n<pre><code>for entry in fs::read_dir(\"/etc\").expect(\"I told you this directory exists\")\n</code></pre>\n\n<p>(Some people use <code>unwrap</code>, but I will <strong>always</strong> advocate for <code>expect</code> as it has a higher chance of providing useful information for the poor soul that experiences the eventual failure)</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error: no method named `path` found for type `std::result::Result&lt;std::fs::DirEntry, std::io::Error&gt;` in the current scope\n --&gt; src/main.rs:5:26\n  |\n5 |         let path = entry.path();\n  |                          ^^^^\n</code></pre>\n</blockquote>\n\n<p>Yes, there are even <em>more</em> failure cases possible. Specifically, reading each entry may fail for some reason. That's why the <code>ReadDir</code> iterator says</p>\n\n<pre><code>type Item = Result&lt;DirEntry&gt;\n</code></pre>\n\n<p>Again, your function still states it cannot fail, so we have to panic again:</p>\n\n<pre><code>let entry = entry.expect(\"I couldn't read something inside the directory\");\n</code></pre>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::fs::DirEntry: std::fmt::Display` is not satisfied\n --&gt; src/main.rs:9:26\n  |\n9 |             print!(\"{}\", entry);\n  |                          ^^^^^ trait `std::fs::DirEntry: std::fmt::Display` not satisfied\n  |\n  = note: `std::fs::DirEntry` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n  = note: required by `std::fmt::Display::fmt`\n</code></pre>\n</blockquote>\n\n<p>As stated well in the error message, change <code>{}</code> to <code>{:?}</code> because <code>DirEntry</code> has no proper way to be formatted for end-users. Programmers can deal with the debugging format.</p>\n\n<hr>\n\n<pre><code>use std::fs;\n\nfn main() {\n    for entry in fs::read_dir(\"/etc\").expect(\"I told you this directory exists\") {\n        let entry = entry.expect(\"I couldn't read something inside the directory\");\n        let path = entry.path();\n\n        if path.is_dir() {\n            print!(\"{:?}\", entry);\n        }\n    }\n}\n</code></pre>\n\n<p>I'd highly recommend re-reading the <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"nofollow noreferrer\">error handling chapter</a> of <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>. I'd also advocate for basically memorizing the methods and traits implemented for <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow noreferrer\"><code>Result</code></a> and <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a>, seeing as how core they are to the Rust experience.</p>\n\n<p>Here's a version that returns an error from main and uses the try operator (<code>?</code>):</p>\n\n<pre><code>use std::{error::Error, fs};\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    for entry in fs::read_dir(\"/etc\")? {\n        let entry = entry?;\n        let path = entry.path();\n\n        if path.is_dir() {\n            print!(\"{:?}\", entry);\n        }\n    }\n\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 707, "favorite_count": 0, "accepted_answer_id": 40552000, "answer_count": 1, "score": 0, "last_activity_date": 1579527632, "creation_date": 1478879055, "last_edit_date": 1478879748, "question_id": 40551411, "link": "https://stackoverflow.com/questions/40551411/read-one-level-of-directory-structure", "title": "Read one level of directory structure", "body": "<p>I am trying to list all of the directories (not recursively) in a directory using Rust. I am mostly following the example code <a href=\"https://doc.rust-lang.org/std/fs/fn.read_dir.html\" rel=\"nofollow noreferrer\">from the <code>read_dir</code></a> docs, but I am trying to make it simpler since I know what the directory is ahead of time and I don't need to recurse.</p>\n\n<p>I have it down to:</p>\n\n<pre><code>for entry in read_dir(Path::new(\"known-directory\")) {\n    let path = entry.path();\n\n    if path.is_dir() {\n        print!(\"{}\", entry);\n    }\n}\n</code></pre>\n\n<p>This doesn't work since I get complaints of</p>\n\n<blockquote>\n  <p><code>no method named `path` found for type `std::fs::ReadDir` in the current scope</code></p>\n</blockquote>\n\n<p>It seems like <code>for</code> is not actually iterating over the entries of <code>ReadDir</code>.</p>\n\n<p>I have also tried <code>try!(read_dir(Path::new(\"DefinitelyTyped\")))</code> similar to what is in the docs, but this yields</p>\n\n<blockquote>\n  <p><code>expected (), found enum `std::result::Result`</code></p>\n</blockquote>\n\n<p>Using <code>let entry = try!(entry)</code> does not work either.</p>\n\n<p>Ultimately I would like to push these directory entries to an array, sort it, and JSON-stringify it but of course first I have to be able iterate through the entries properly. How can I do this?</p>\n\n<p>Version: <code>rustc 1.13.0</code><br>\nRunning with: <code>cargo 0.13.0</code></p>\n"}, {"tags": ["visual-studio", "compiler-errors", "linker", "rust", "ffi"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478868526, "post_id": 40548334, "comment_id": 68334991, "body": "Please mention the OS (you appear to be using Windows), your Cargo.toml and however you compile <code>MyLib</code>. I seem to remember from my VC++ days that VC++ would require a <code>__declspec(dllexport)</code> to be placed in front of exported symbols..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478868657, "post_id": 40548334, "comment_id": 68335073, "body": "Can you try the <code>__declspec(dllexport)</code>?"}, {"owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478868667, "post_id": 40548334, "comment_id": 68335081, "body": "@MatthieuM. Even for compiling a <code>.lib</code>, not a <code>.dll</code>?. And same problem"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478869424, "post_id": 40548334, "comment_id": 68335520, "body": "Probably not; do you have a tool to check the symbols contained in your <code>.lib</code>? There might be name mangling/decoration at play too."}, {"owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478870037, "post_id": 40548334, "comment_id": 68335878, "body": "Turns out that nothing was exported in the .lib..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478871786, "post_id": 40548334, "comment_id": 68336888, "body": "Great! If you can write an answer on how to check whether a symbol is exported and how to export it, it&#39;ll make a good contribution for people attempting FFI on Windows :)"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478876338, "post_id": 40549605, "comment_id": 68339613, "body": "Well, that was painful... I hope someone comes along with a way of streamlining this oO"}, {"owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478885279, "post_id": 40549605, "comment_id": 68344641, "body": "@MatthieuM. If it counts, I wrote a quick python script to generate the <code>.def</code> file as long as I put an <code>MY_LIB_API</code> macro before each function I want. So just gonna say that that&#39;s possible and nice"}], "tags": [], "owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "is_accepted": true, "score": 4, "last_activity_date": 1530480599, "last_edit_date": 1530480599, "creation_date": 1478872928, "answer_id": 40549605, "question_id": 40548334, "link": "https://stackoverflow.com/questions/40548334/rust-code-cannot-link-with-a-c-library-compiled-on-windows-because-there-is-an-u/40549605#40549605", "title": "Rust code cannot link with a C library compiled on Windows because there is an unresolved external symbol", "body": "<p>Did you check to see that your <code>.lib</code> file has any symbols / exported functions?:</p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; dumpbin /exports /symbols MyLib.lib\nMicrosoft (R) COFF/PE Dumper Version 14.00.24215.1\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file MyLib.lib\n\nFile Type: LIBRARY\n</code></pre>\n\n<p>This means that your <code>.lib</code> file does not have any exported symbols. You might have thought to use <code>__declspec(dllexport)</code>, but that does not seem to work for static <code>.lib</code> files.</p>\n\n<p>Visual Studio is a bit of a pain to work with, but here's how you get it working in VS 2015:</p>\n\n<ol>\n<li>Create a new \"Module-Definition File\" (.def)</li>\n<li><p>Fill in the details:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>LIBRARY MyLib\nEXPORTS\n    my_func  @1\n    my_func2 @2\n</code></pre></li>\n<li><p>Right click on your project, click on properties, and make sure your project's configurations are correct:</p>\n\n<p><a href=\"https://i.stack.imgur.com/MxprV.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/MxprV.png\" alt=\"Configuration Type: Static library (.lib)\"></a></p></li>\n<li><p>Under Librarian, make sure you set the <code>.def</code> file:</p>\n\n<p><a href=\"https://i.stack.imgur.com/RBay0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/RBay0.png\" alt=\"Module Definition File Name: test.def\"></a></p></li>\n<li><p>Build the <code>.lib</code> file. If you did this correctly, running <code>dumpbin</code> again should look something like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; dumpbin /exports /symbols MyLib.lib\nMicrosoft (R) COFF/PE Dumper Version 14.00.24215.1\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file MyLib.lib\n\nFile Type: LIBRARY\n\nCOFF SYMBOL TABLE\n000 01015E97 ABS    notype       Static       | @comp.id\n001 00000000 SECT2  notype       External     | __IMPORT_DESCRIPTOR_MyLib\n002 C0000040 SECT2  notype       Section      | .idata$2\n003 00000000 SECT3  notype       Static       | .idata$6\n004 C0000040 UNDEF  notype       Section      | .idata$4\n005 C0000040 UNDEF  notype       Section      | .idata$5\n006 00000000 UNDEF  notype       External     | __NULL_IMPORT_DESCRIPTOR\n007 00000000 UNDEF  notype       External     | MyLib_NULL_THUNK_DATA\n\nString Table Size = 0x5C bytes\n\nCOFF SYMBOL TABLE\n000 01015E97 ABS    notype       Static       | @comp.id\n001 00000000 SECT2  notype       External     | __NULL_IMPORT_DESCRIPTOR\n\nString Table Size = 0x1D bytes\n\nCOFF SYMBOL TABLE\n000 01015E97 ABS    notype       Static       | @comp.id\n001 00000000 SECT2  notype       External     | MyLib_NULL_THUNK_DATA\n\nString Table Size = 0x22 bytes\n\n     Exports\n\n       ordinal    name\n\n             1    my_func\n             2    my_func2\n\n  Summary\n\n          D2 .debug$S\n          14 .idata$2\n          14 .idata$3\n           8 .idata$4\n           8 .idata$5\n          12 .idata$6\n</code></pre></li>\n<li><p>Copy the generated <code>.lib</code> file (ensuring you do so from the correct directory; note that 64 bit and 32 bit compile to different folders) to your Rust project's root directory:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+ MyRustProject/\n \\\n  + src/\n  + Cargo.toml\n  + MyLib.lib\n</code></pre></li>\n<li><p>Go back to the build configurations and build a <code>.dll</code>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0PQqk.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/0PQqk.png\" alt=\"Configuration Type: Dynamic Library (.dll)\"></a></p></li>\n<li><p>Copy that <code>.dll</code> in the same place as the <code>.lib</code></p></li>\n</ol>\n\n<p>Now when you build your Rust project, it should work. Note that you must build your VS project for the same platform as the Rust one, so, in my case, that meant x64, rather than x86.</p>\n\n<p>For more information on <code>.def</code> files, see <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/module-definition-dot-def-files\" rel=\"nofollow noreferrer\">Microsoft's official documentation.</a></p>\n"}], "owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2258, "favorite_count": 0, "accepted_answer_id": 40549605, "answer_count": 1, "score": 3, "last_activity_date": 1530480599, "creation_date": 1478868340, "last_edit_date": 1478874151, "question_id": 40548334, "link": "https://stackoverflow.com/questions/40548334/rust-code-cannot-link-with-a-c-library-compiled-on-windows-because-there-is-an-u", "title": "Rust code cannot link with a C library compiled on Windows because there is an unresolved external symbol", "body": "<p>I've been trying to get Rust to link with a C library on Windows, but Rust is unable to find the functions I need. It seems like my function signature is wrong, but Rust can find the <code>.lib</code> file.</p>\n\n<p>I narrowed it down to very simple C and Rust code, but still can't figure out how to get it to work:</p>\n\n<p><strong>test.c</strong> -- compiled with Visual Studio 2015</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n#include &lt;stdint.h&gt;\n\ntypedef struct MyStruct {\n    int32_t i;\n} MyStruct;\n\nMyStruct my_func(const MyStruct *s) {\n    MyStruct result;\n    result.i = s-&gt;i + 1;\n    return result;\n}\n\nint32_t my_func2() {\n    return 42;\n}\n\n#ifdef __cplusplus\n}\n#endif\n</code></pre>\n\n<p><strong>lib.rs</strong></p>\n\n<pre><code>extern crate libc;\n\nuse libc::int32_t;\n\n#[link(name = \"MyLib\")]\nextern {\n    pub fn my_func2() -&gt; int32_t;\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        unsafe {\n            assert_eq!(42, my_func2());\n        }\n    }\n}\n</code></pre>\n\n<p>Alternatively <strong>lib.rs</strong>:</p>\n\n<pre><code>extern crate libc;\n\nuse libc::int32_t;\n\n#[repr(C)]\npub struct MyStruct {\n    i: int32_t\n}\n\n#[link(name = \"MyLib\")]\nextern {\n    pub fn my_func(s: *mut MyStruct) -&gt; MyStruct;\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        unsafe {\n            let mut s = MyStruct{ i: 10 };\n            let s = my_func(&amp;mut s as *mut MyStruct);\n            assert_eq!(11, s.i);\n        }\n    }\n}\n</code></pre>\n\n<p>This is the error message I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling test v0.1.0\nerror: linking with `link.exe` failed: exit code: 1120\n  |\n// snip (but the MyLib.lib is in here)\n  = note: test-01aaa83d15a1dde3.0.o : error LNK2019: unresolved external symbol my_func referenced in function _ZN8test5tests8it_works17h52c29448f9d86a1aE\nC:\\&lt;--omitted--&gt;-01aaa83d15a1dde3.exe : fatal error LNK1120: 1 unresolved externals\n\nerror: aborting due to previous error\n\nerror: Could not compile `test`.\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"test\"\nversion = \"0.1.0\"\nauthors = [\"&lt;-- omitted --&gt;\"]\n\n[dependencies]\nlibc = \"0.2.17\"\n</code></pre>\n"}, {"tags": ["python", "rust", "ctypes", "ffi"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1478861077, "post_id": 40546150, "comment_id": 68330948, "body": "Don&#39;t have time to write up a full answer: <code>&amp;[i32]</code> is <i>ABSOLUTELY NOT</i> the same thing as a <code>*c_int32</code> in C/ctypes.  You <i>must</i> use <code>*const i32</code> Rust-side, and reconstruct the slice using <code>std::slice::from_raw_parts</code> or somesuch."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1478864732, "post_id": 40546150, "comment_id": 68332987, "body": "@DK: you already had the time, and you already wrote up that answer"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1478900045, "post_id": 40546150, "comment_id": 68351146, "body": "@ker There&#39;s a difference between a <i>good</i> answer and <i>an</i> answer... and secondly, I totally forgot I wrote that.  It&#39;s hard to keep track :P"}], "owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1478866087, "answer_count": 0, "score": 0, "last_activity_date": 1478860593, "creation_date": 1478860593, "question_id": 40546150, "link": "https://stackoverflow.com/questions/40546150/c-int32-not-passed-correctly-to-c-function", "closed_reason": "Duplicate", "title": "c_int32 not passed correctly to c function", "body": "<p>I have the following code in rust that merely checks whether an array contains a value below one:</p>\n\n<pre><code>// src/lib.rs\nextern crate libc;\nuse self::libc::int32_t;\n\n#[no_mangle]\npub extern \"C\" fn rle_find_zero_lengths(array: &amp;[int32_t], size: int32_t) -&gt; int32_t {\n\n    println!(\"Rust (C extern): {:?}\", size);\n    return find_zero_lengths(array, size);\n\n}\n\npub fn find_zero_lengths(lengths: &amp;[i32], size: int32_t) -&gt; i32 {\n\n    println!(\"Rust (pub fn): {:?}\", size);\n    for i in 0..(size - 1) {\n        println!(\"{:?}, {:?}\", i, lengths[i as usize]);\n        if lengths[i as usize] &lt; 1 {\n            return 1;\n        };\n    }\n\n    return 0;\n\n}\n\n#[cfg(test)]\nmod rle_tests {\n    use super::find_zero_lengths;\n\n    #[test]\n    fn test_find_zero_lengths() {\n\n        let lengths = [0; 3];\n        println!(\"{:?}\", lengths);\n\n        let actual_result = find_zero_lengths(&amp;lengths, 3);\n\n        assert_eq!(1, actual_result);\n    }\n\n\n    #[test]\n    fn test_find_zero_lengths2() {\n\n        let lengths = [1, 1, 2, 3];\n        println!(\"{:?}\", lengths);\n\n        let actual_result = find_zero_lengths(&amp;lengths, 3);\n\n        assert_eq!(0, actual_result);\n\n    }\n}\n</code></pre>\n\n<p>This is my <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"c_int_strange\"\nversion = \"0.1.0\"\nauthors = [\"Karl Dilkington\"]\n\n[dependencies]\nlibc = \"0.2.17\"\n\n[lib]\ncrate-type = [\"rlib\", \"dylib\"]\n</code></pre>\n\n<p>This is the Python code I use to call the library:</p>\n\n<pre><code># c_int_strange.py\nimport sys, ctypes, os\nfrom ctypes import c_char_p, c_uint32, Structure, POINTER, c_int32, c_size_t, pointer\n\n\nprefix = {'win32': ''}.get(sys.platform, 'lib')\nextension = {'darwin': '.dylib', 'win32': '.dll'}.get(sys.platform, '.so')\nlibpath = os.environ.get(\"LD_LIBRARY_PATH\", \"target/debug\") + \"/\"\nlibpath = libpath + prefix + \"c_int_strange\" + extension\ntry:\n    lib = ctypes.cdll.LoadLibrary(libpath)\nexcept OSError:\n    print(\"Library not found at \" + libpath)\n\n\nlib.rle_find_zero_lengths.argtypes = (POINTER(c_int32), c_int32, )\nlib.rle_find_zero_lengths.restype = c_int32\n\n\nlengths = [1, 2, 3, 4]\nlengths_array = (c_int32 * len(lengths))(*lengths)\n\nprint(\"Python: len(lengths_array)): \", len(lengths_array))\n\ncontains_zero = lib.rle_find_zero_lengths(lengths_array, c_int32(len(lengths_array)))\n</code></pre>\n\n<p>Now, when I run this, I get the following output:</p>\n\n<pre><code>Python: len(lengths_array)):  4\nRust (extern C): 17583168\nRust (pub fn): 17583168\n0, 1\n1, 2\n2, 3\n3, 4\nthread '&lt;unnamed&gt;' panicked at 'index out of bounds: the len is 4 but the index is 4', src/lib.rs:16\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nfatal runtime error: failed to initiate panic, error 5\nfish: 'python strange_c_int.py' terminated by signal SIGABRT (Abort)\n</code></pre>\n\n<p>What am I doing wrong that makes the int I send into the C function become some random other value?</p>\n"}, {"tags": ["rust", "operators"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478859478, "post_id": 40545445, "comment_id": 68329981, "body": "I seem to remember there were limitations, compared to the macro, in the conversion of errors; was it finally solved?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1478860237, "post_id": 40545445, "comment_id": 68330420, "body": "@MatthieuM. according to the RFC, it does the same error conversion: &#39;Like the current try!() macro, the ? operator will also perform an implicit &quot;upcast&quot; on the exception type.&#39;  But it&#39;ll be nice, given that only part of the RFC has been implemented, to have definitive documentation on what&#39;s actually now in the language.  :-)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1478999113, "post_id": 40545445, "comment_id": 68375301, "body": "<code>?</code> uses the carrier trait, and for that reason, its type inference is slightly different than when using <code>try!()</code>; the latter is <code>Result</code>-specific."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 0, "creation_date": 1523848729, "post_id": 40545445, "comment_id": 86712961, "body": "In case of errors, the <code>?</code> operator tends to have much better error messages."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 41, "last_activity_date": 1518215502, "last_edit_date": 1518215502, "creation_date": 1478858303, "answer_id": 40545445, "question_id": 40545332, "link": "https://stackoverflow.com/questions/40545332/is-the-question-mark-operator-equivalent-to-the-try-macro/40545445#40545445", "title": "Is the question mark operator ? equivalent to the try! macro?", "body": "<p>Yes, the <code>?</code> operator is equivalent to <code>try!()</code>. <code>?</code> is now in stable Rust 1.13, <a href=\"https://blog.rust-lang.org/2016/11/10/Rust-1.13.html\" rel=\"noreferrer\">released on November 10, 2016</a>.</p>\n\n<p>The best source of documentation at the moment seems to be <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md\" rel=\"noreferrer\">RFC 0243</a>.  Note that the <code>catch</code> described in the RFC is not yet implemented at this writing (<a href=\"https://github.com/rust-lang/rust/issues/31436\" rel=\"noreferrer\">issue</a>).</p>\n"}], "owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8903, "favorite_count": 2, "accepted_answer_id": 40545445, "answer_count": 1, "score": 29, "last_activity_date": 1518215502, "creation_date": 1478858004, "last_edit_date": 1518215433, "question_id": 40545332, "link": "https://stackoverflow.com/questions/40545332/is-the-question-mark-operator-equivalent-to-the-try-macro", "title": "Is the question mark operator ? equivalent to the try! macro?", "body": "<p>I am looking for a way to chain the usage of the <code>try!</code> macro in Rust and found <a href=\"https://github.com/rust-lang/rust/pull/31954\" rel=\"noreferrer\">this pull request that implements the <code>?</code> operator</a>.</p>\n\n<p>It seems like it has been merged, but I cannot seem to find any documentation on it yet. Is it equivalent to the <code>try!</code> macro or are there important differences?</p>\n"}, {"tags": ["rust", "closures", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478854275, "post_id": 40544225, "comment_id": 68327166, "body": "Is it me or this <code>&lt;&#39;a&gt;</code> should be adorn <code>get</code> and not <code>impl</code>?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478855036, "post_id": 40544225, "comment_id": 68327574, "body": "@MatthieuM. You&#39;re right, it should. It happens to not make a difference here because the <code>&#39;a</code> doesn&#39;t occur anywhere else, but it&#39;s really the wrong place for the quantifier."}, {"owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "edited": false, "score": 0, "creation_date": 1478859163, "post_id": 40544225, "comment_id": 68329763, "body": "@ Matthieu M. I&#39;ve checked both ways, the results are the same."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 9, "last_activity_date": 1529348573, "last_edit_date": 1529348573, "creation_date": 1478854114, "answer_id": 40544225, "question_id": 40544020, "link": "https://stackoverflow.com/questions/40544020/how-do-i-return-a-boxed-closure-from-a-method-that-has-a-reference-to-the-struct/40544225#40544225", "title": "How do I return a boxed closure from a method that has a reference to the struct?", "body": "<p>In general, you can specify the lifetime of a boxed trait object by writing <code>Box&lt;Trait + 'a&gt;</code> and analogously for trait objects behind other kinds of pointers (if it's omitted, it defaults to <code>'static</code> at least in the case of <code>Box</code>). So in this specific case you want the return type <code>Box&lt;(Fn(i32) -&gt; i32) + 'a&gt;</code>.</p>\n\n<p>However, when you do that you will see another error about <code>self</code> not living long enough. The reason is that (without <code>move</code>) the closure will capture <em>a reference to the local variable <code>self</code></em>. The solution is to use <code>move</code>. This does not move the <code>Returner</code> object, it moves <code>self</code> which is a <em>reference</em> to the <code>Returner</code> object.</p>\n\n<p>In summary:</p>\n\n<pre><code>struct Returner {\n    val: i32,\n}\n\nimpl&lt;'a&gt; Returner {\n    fn get(&amp;'a self) -&gt; Box&lt;Fn(i32) -&gt; i32 + 'a&gt; {\n        Box::new(move |x| x + self.val)\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1529348901, "creation_date": 1529348901, "answer_id": 50916009, "question_id": 40544020, "link": "https://stackoverflow.com/questions/40544020/how-do-i-return-a-boxed-closure-from-a-method-that-has-a-reference-to-the-struct/50916009#50916009", "title": "How do I return a boxed closure from a method that has a reference to the struct?", "body": "<p>As said <a href=\"https://stackoverflow.com/a/40544225/155423\">in an existing answer</a>:</p>\n\n<ol>\n<li>Add a lifetime that ties the lifetime of <code>self</code> to the lifetime of the returned value.</li>\n<li>Move the reference to <code>self</code> into the closure.</li>\n</ol>\n\n<p>Since Rust 1.26, you no longer <em>need</em> to return a boxed closure if you are only returning a single type. Instead, you can use <code>impl Trait</code>:</p>\n\n<pre><code>impl Returner {\n    fn get&lt;'a&gt;(&amp;'a self) -&gt; impl Fn(i32) -&gt; i32 + 'a {\n        move |x| x + self.val\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/42028470/155423\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/25445761/155423\">Returning a closure from a function</a></li>\n<li><a href=\"https://stackoverflow.com/q/29760668/155423\">Conditionally iterate over one of several possible iterators</a></li>\n</ul>\n"}], "owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 999, "favorite_count": 2, "accepted_answer_id": 40544225, "answer_count": 2, "score": 4, "last_activity_date": 1529348901, "creation_date": 1478853211, "last_edit_date": 1529348504, "question_id": 40544020, "link": "https://stackoverflow.com/questions/40544020/how-do-i-return-a-boxed-closure-from-a-method-that-has-a-reference-to-the-struct", "title": "How do I return a boxed closure from a method that has a reference to the struct?", "body": "<p>I have a structure that contains a value and I want to obtain a function that operates on this value:</p>\n\n<pre><code>struct Returner {\n    val: i32,\n}\n\nimpl&lt;'a&gt; Returner {\n    fn get(&amp;'a self) -&gt; Box&lt;Fn(i32) -&gt; i32&gt; {\n        Box::new(|x| x + self.val)\n    }\n}\n</code></pre>\n\n<p>This fails compilation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n --&gt; src/main.rs:7:18\n  |\n7 |         Box::new(|x| x + self.val)\n  |                  ^^^^^^^^^^^^^^^^\n  |\nnote: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 5:1...\n --&gt; src/main.rs:5:1\n  |\n5 | impl&lt;'a&gt; Returner {\n  | ^^^^^^^^^^^^^^^^^\n  = note: ...so that the types are compatible:\n          expected &amp;&amp;Returner\n             found &amp;&amp;'a Returner\n  = note: but, the lifetime must be valid for the static lifetime...\n  = note: ...so that the expression is assignable:\n          expected std::boxed::Box&lt;std::ops::Fn(i32) -&gt; i32 + 'static&gt;\n             found std::boxed::Box&lt;std::ops::Fn(i32) -&gt; i32&gt;\n</code></pre>\n\n<p>This is because the closure borrows <code>self</code>, which is fine by me, because I don't intend to use the obtained function after the struct is destroyed. From what I've gathered so far, there's two ways to make it possible:</p>\n\n<ol>\n<li><p>Use the <code>move</code> keyword. I don't want to use it because it will take ownership on the object, and want I to use it after it has returned this function.</p></li>\n<li><p>Explicitly specify the lifetime of the closure to tell the compiler that it has the same lifetime as the struct it was called from. </p></li>\n</ol>\n\n<p>I think that 2 is the correct way in my situation, but I've not been able to find out how to specify the closure's lifetime. Is there a direct way to do it or I've got it all wrong and it contradicts Rust lifetime logic?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478854181, "post_id": 40544013, "comment_id": 68327116, "body": "Note: it is more idiomatic (and flexible) to take a <code>&amp;[T]</code> argument rather than a <code>&amp;Vec&lt;T&gt;</code> argument. The only difference between a <code>Vec</code> and slice is that the latter, when mutable, allows adding/removing elements. Since when immutable there is no difference, using the lowest common denominator allows more code to call into the function."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478873636, "post_id": 40544013, "comment_id": 68337962, "body": "@MatthieuM. It&#39;s like we <a href=\"http://stackoverflow.com/q/40006219/155423\">made a question</a> so we didn&#39;t have to repeat that all the time ^_^"}, {"owner": {"reputation": 2809, "user_id": 6720987, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/0TSHr.png?s=128&g=1", "display_name": "Jan-Fokke", "link": "https://stackoverflow.com/users/6720987/jan-fokke"}, "edited": false, "score": 0, "creation_date": 1478874197, "post_id": 40544013, "comment_id": 68338318, "body": "why the dislike ?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478874264, "post_id": 40544013, "comment_id": 68338358, "body": "@CodeJoy: A mystery of StackOverflow; don&#39;t worry too much about a single vote."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1478873678, "post_id": 40544094, "comment_id": 68338000, "body": "And Clippy will warn you that you&#39;ve typed something silly."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1478853603, "creation_date": 1478853603, "answer_id": 40544094, "question_id": 40544013, "link": "https://stackoverflow.com/questions/40544013/why-can-i-call-a-function-that-accepts-a-reference-with-a-reference-of-a-referen/40544094#40544094", "title": "Why can I call a function that accepts a reference with a reference of a reference?", "body": "<p>Yes and No. Rust will create a reference to a reference (since you asked explicitly for it with the <code>&amp;</code> operator), and then immediately \"autoderef\" it again to fit the target type. The optimizer will then eliminate that intermediate reference.</p>\n"}], "owner": {"reputation": 2809, "user_id": 6720987, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/0TSHr.png?s=128&g=1", "display_name": "Jan-Fokke", "link": "https://stackoverflow.com/users/6720987/jan-fokke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "accepted_answer_id": 40544094, "answer_count": 1, "score": 0, "last_activity_date": 1478873711, "creation_date": 1478853194, "last_edit_date": 1478873711, "question_id": 40544013, "link": "https://stackoverflow.com/questions/40544013/why-can-i-call-a-function-that-accepts-a-reference-with-a-reference-of-a-referen", "title": "Why can I call a function that accepts a reference with a reference of a reference?", "body": "<p>As far as I know, the <code>&amp;</code> symbol creates a reference. But using <code>sum_vec</code> with or without <code>&amp;</code> will both compile. I just want to know what is happening when I do <code>let s1 = sum_vec(&amp;v1);</code>. will this create a reference of a reference ? </p>\n\n<pre><code>fn main() {\n    // Don't worry if you don't understand how `fold` works, the point here is that an immutable reference is borrowed.\n    fn sum_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n        return v.iter().fold(0, |a, &amp;b| a + b);\n    }\n    // Borrow two vectors and sum them.\n    // This kind of borrowing does not allow mutation to the borrowed.\n    fn foo(v1: &amp;Vec&lt;i32&gt;, v2: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n        // do stuff with v1 and v2\n        let s1 = sum_vec(v1);//This wil also complile with &amp;. Is this optional?.\n        let s2 = sum_vec(v2);\n        // return the answer\n        s1 + s2\n    }\n\n    let v1 = vec![1, 2, 3];\n    let v2 = vec![4, 5, 6];\n\n    let answer = foo(&amp;v1, &amp;v2);\n    println!(\"{}\", answer);\n    println!(\"{}\", v1.len());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Don%27t%20worry%20if%20you%20don%27t%20understand%20how%20%60fold%60%20works%2C%20the%20point%20here%20is%20that%20an%20immutable%20reference%20is%20borrowed.%0A%20%20%20%20fn%20sum_vec(v%3A%20%26Vec%3Ci32%3E)%20-%3E%20i32%20%7B%0A%20%20%20%20%20%20%20%20return%20v.iter().fold(0%2C%20%7Ca%2C%20%26b%7C%20a%20%2B%20b)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20Borrow%20two%20vectors%20and%20sum%20them.%0A%20%20%20%20%2F%2F%20This%20kind%20of%20borrowing%20does%20not%20allow%20mutation%20to%20the%20borrowed.%0A%20%20%20%20fn%20foo(v1%3A%20%26Vec%3Ci32%3E%2C%20v2%3A%20%26Vec%3Ci32%3E)%20-%3E%20i32%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20do%20stuff%20with%20v1%20and%20v2%0A%20%20%20%20%20%20%20%20let%20s1%20%3D%20sum_vec(v1)%3B%0A%20%20%20%20%20%20%20%20let%20s2%20%3D%20sum_vec(v2)%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20return%20the%20answer%0A%20%20%20%20%20%20%20%20s1%20%2B%20s2%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20v1%20%3D%20vec!%5B1%2C%202%2C%203%5D%3B%0A%20%20%20%20let%20v2%20%3D%20vec!%5B4%2C%205%2C%206%5D%3B%0A%0A%20%20%20%20let%20answer%20%3D%20foo(%26v1%2C%20%26v2)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20answer)%3B%0A%7D%0A\" rel=\"nofollow noreferrer\">playground</a>)</p>\n"}, {"tags": ["rust", "atom-editor"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1478853289, "post_id": 40542394, "comment_id": 68326629, "body": "there&#39;s no such option, you can file a bug report at <a href=\"https://github.com/AtomBuild/atom-build-cargo\" rel=\"nofollow noreferrer\">github.com/AtomBuild/atom-build-cargo</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478874389, "post_id": 40542394, "comment_id": 68338439, "body": "It&#39;s &quot;fibonacci&quot;, by the way."}], "owner": {"reputation": 402, "user_id": 3809903, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/9e1c36e71e453b8ecea77f2e8127942b?s=128&d=identicon&r=PG&f=1", "display_name": "kai", "link": "https://stackoverflow.com/users/3809903/kai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 286, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1484752848, "creation_date": 1478846085, "last_edit_date": 1484752848, "question_id": 40542394, "link": "https://stackoverflow.com/questions/40542394/how-to-build-or-run-a-specific-rust-binary-project-in-atom", "title": "How to build or run a specific Rust binary project in Atom?", "body": "<p>I am using multiple main files using a single Cargo.toml:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"rust_example\"\nversion = \"0.1.0\"\nauthors = [\"\"]\n\n[dependencies]\n\n[[bin]]\nname = \"main\"\npath = \"src/main.rs\"\n\n[[bin]]\nname = \"fibonachi\"\npath = \"src/fibonachi/main.rs\"\n</code></pre>\n\n<p>I tested on console</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo run --bin main` and `cargo run --bin fibonachi\n</code></pre>\n\n<p>And it compiles correctly.</p>\n\n<p>I installed Atom along with several plugins (build, build-cargo, busy, language-rust, linter). When I compile with Atom, it shows these lines:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `cargo run` requires that a project only have one executable; use the `--bin` option to specify which one to run\nerror: `cargo run` requires that a project only have one executable; use the `--bin` option to specify which one to run\n</code></pre>\n\n<p>I can't find how to specify which binary I'd like to build from within Atom.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 673, "user_id": 5008381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/2395a2ebca93cd49b689c3d9245f491f?s=128&d=identicon&r=PG&f=1", "display_name": "vlad4378", "link": "https://stackoverflow.com/users/5008381/vlad4378"}, "edited": false, "score": 0, "creation_date": 1478838741, "post_id": 40540868, "comment_id": 68321333, "body": "and no, <code>Peekable</code> doesn&#39;t suit, I need to have an ability to <b>put one character back to stream</b> but not <b>get next char without advancing interator</b>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1478883937, "post_id": 40540868, "comment_id": 68343992, "body": "Ah, that&#39;s what itertools&#39; putback adaptor does actually."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1478884234, "post_id": 40540868, "comment_id": 68344155, "body": "@bluss my gut tells me that they are isomorphic, but one might suit a particular coding style more than another. Is one more &quot;powerful&quot; than the other?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1478914007, "post_id": 40540868, "comment_id": 68354868, "body": "I&#39;ve only ever used them in a way that&#39;s equivalent, but isn&#39;t put back more powerful since you can put \u201cback\u201d any value, not just the most recent one?"}, {"owner": {"reputation": 673, "user_id": 5008381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/2395a2ebca93cd49b689c3d9245f491f?s=128&d=identicon&r=PG&f=1", "display_name": "vlad4378", "link": "https://stackoverflow.com/users/5008381/vlad4378"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1478927221, "post_id": 40540868, "comment_id": 68357032, "body": "@bluss I need put back just one symbol anyway. Of course itertools is more powerful but in this way I haven&#39;t a chance to reinventing the wheel :)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1478970625, "post_id": 40540868, "comment_id": 68367684, "body": "Your LexIter is equivalent, so it and PutBack are both more powerful than peekable. (It&#39;s mostly a matter of curiosity.)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1478884350, "last_edit_date": 1478884350, "creation_date": 1478836589, "answer_id": 40540868, "question_id": 40540636, "link": "https://stackoverflow.com/questions/40540636/how-do-i-implement-an-iterator-adapter-only-for-iterators-with-a-specific-item/40540868#40540868", "title": "How do I implement an Iterator adapter only for iterators with a specific Item?", "body": "<p>Specify a value for the <em>associated type</em> <code>Item</code> in your trait bounds:</p>\n\n<pre><code>impl&lt;Iter&gt; Iterator for LexIter&lt;Iter&gt;\n    where Iter: Iterator&lt;Item = char&gt;\n{\n    // ...\n}\n</code></pre>\n\n<hr>\n\n<p>Additionally:</p>\n\n<ol>\n<li><p>I believe your implementation can be simplified to </p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n    self.last_char.take().or_else(|| self.iter.next())\n}\n</code></pre></li>\n<li><p>It looks like you are implementing something very close to the <a href=\"https://doc.rust-lang.org/std/iter/struct.Peekable.html\" rel=\"nofollow noreferrer\"><code>Peekable</code></a> adapter; perhaps you can use that instead.</p></li>\n<li><p>If not, you can use <a href=\"https://docs.rs/itertools/0.5.5/itertools/fn.put_back.html\" rel=\"nofollow noreferrer\"><code>put_back</code></a> from the awesome Itertools crate.</p></li>\n</ol>\n"}], "owner": {"reputation": 673, "user_id": 5008381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/2395a2ebca93cd49b689c3d9245f491f?s=128&d=identicon&r=PG&f=1", "display_name": "vlad4378", "link": "https://stackoverflow.com/users/5008381/vlad4378"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 976, "favorite_count": 0, "accepted_answer_id": 40540868, "answer_count": 1, "score": 3, "last_activity_date": 1478884350, "creation_date": 1478834570, "last_edit_date": 1478836523, "question_id": 40540636, "link": "https://stackoverflow.com/questions/40540636/how-do-i-implement-an-iterator-adapter-only-for-iterators-with-a-specific-item", "title": "How do I implement an Iterator adapter only for iterators with a specific Item?", "body": "<p>I'm trying to write a custom adapter for <code>Iterator</code>:</p>\n\n<pre><code>use std::iter::Iterator;\n\nstruct LexIter&lt;Iter&gt; {\n    last_char: Option&lt;char&gt;,\n    iter: Iter,\n}\n\nimpl&lt;Iter&gt; LexIter&lt;Iter&gt; {\n    fn put_back(&amp;mut self, ch: char) {\n        self.last_char = Some(ch);\n    }\n}\n\nimpl&lt;Iter: Iterator&gt; Iterator for LexIter&lt;Iter&gt; {\n    type Item = char;\n\n    fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n        match self.last_char {\n            Some(ch) =&gt; {\n                let res = ch;\n                self.last_char = None;\n                Some(res)\n            }\n            None =&gt; self.iter.next(),\n        }\n    }\n}\n\nimpl&lt;Iter: Iterator&gt; std::convert::From&lt;Iter&gt; for LexIter&lt;Iter&gt; {\n    fn from(it: Iter) -&gt; Self {\n        LexIter {\n            last_char: None,\n            iter: it,\n        }\n    }\n}\n</code></pre>\n\n<p>When I compile, I get this error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src/main.rs:18:9\n   |\n18 |         match self.last_char {\n   |         ^ expected char, found associated type\n   |\n   = note: expected type `std::option::Option&lt;char&gt;`\n   = note:    found type `std::option::Option&lt;&lt;Iter as std::iter::Iterator&gt;::Item&gt;`\nnote: match arm with an incompatible type\n  --&gt; src/main.rs:24:21\n   |\n24 |             None =&gt; self.iter.next(),\n   |                     ^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I understand that <code>self.iter.next()</code> returns <code>Option&lt;Iter::Item&gt;</code>, but I just want to make an adapter for those iterators which has <code>Iterator::Item</code> as <code>char</code>. </p>\n\n<p>Is there way to specify the type explicitly in the function's signature?</p>\n"}, {"tags": ["pattern-matching", "rust"], "comments": [{"owner": {"reputation": 35578, "user_id": 3000206, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/BK1fo.jpg?s=128&g=1", "display_name": "Carcigenicate", "link": "https://stackoverflow.com/users/3000206/carcigenicate"}, "edited": false, "score": 0, "creation_date": 1478819163, "post_id": 40538554, "comment_id": 68316548, "body": "Idk Rust, but I would expect that each clause of the match would need to be of the same type. Try making them all part of the same superclass / interface"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1478820531, "post_id": 40538554, "comment_id": 68316992, "body": "The closest thing you can get may be a tagged union such as the example <a href=\"https://doc.rust-lang.org/book/enums.html\" rel=\"nofollow noreferrer\">here</a>."}], "answers": [{"comments": [{"owner": {"reputation": 325, "user_id": 3316756, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7b621e5b38d20189b2ef97c8e0dd8fd0?s=128&d=identicon&r=PG&f=1", "display_name": "randyrand", "link": "https://stackoverflow.com/users/3316756/randyrand"}, "edited": false, "score": 0, "creation_date": 1478823238, "post_id": 40538795, "comment_id": 68317789, "body": "Thank you for your answer."}, {"owner": {"reputation": 325, "user_id": 3316756, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7b621e5b38d20189b2ef97c8e0dd8fd0?s=128&d=identicon&r=PG&f=1", "display_name": "randyrand", "link": "https://stackoverflow.com/users/3316756/randyrand"}, "edited": false, "score": 0, "creation_date": 1478824114, "post_id": 40538795, "comment_id": 68318037, "body": "My question was inspired from a Racket interpreter I wrote where Match could branch on different types. Lisp is of course dynamically typed, though, so it makes sense in Rust this is not typically useful. I feel there there could be niche cases where having a function return types dynamically could be useful (though not idomatic) - std::any seems to mostly cover this use case though. Thanks!"}, {"owner": {"reputation": 325, "user_id": 3316756, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7b621e5b38d20189b2ef97c8e0dd8fd0?s=128&d=identicon&r=PG&f=1", "display_name": "randyrand", "link": "https://stackoverflow.com/users/3316756/randyrand"}, "edited": false, "score": 0, "creation_date": 1478824644, "post_id": 40538795, "comment_id": 68318161, "body": "Lisp being dynamically typed is where my initial confusion came from."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 325, "user_id": 3316756, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7b621e5b38d20189b2ef97c8e0dd8fd0?s=128&d=identicon&r=PG&f=1", "display_name": "randyrand", "link": "https://stackoverflow.com/users/3316756/randyrand"}, "edited": false, "score": 0, "creation_date": 1478825383, "post_id": 40538795, "comment_id": 68318362, "body": "<i>return types dynamically</i> \u2014 but even then you want to <i>do</i> something with those returned types. That means there is a set of methods that you want to be able to call; that&#39;s what a trait implies. It can be returned as a trait object."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1478888575, "post_id": 40538795, "comment_id": 68346181, "body": "@Shepmaster What if the match goes over a reference, a trait implementation, trying to downcast it (<code>let x: &amp;Display = ...; match x {&amp;String =&gt; ...}</code>), and happens some place where the compiler doesn&#39;t know the exact type? Wouldn&#39;t that be useful?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1478888861, "post_id": 40538795, "comment_id": 68346311, "body": "@ArtemGr it does know the exact type \u2014 <code>&amp;Display</code> ;-) It sounds like you are asking about <i>trait object downcasting</i> (see <a href=\"http://stackoverflow.com/q/25246443/155423\">1</a>, <a href=\"http://stackoverflow.com/q/27892375/155423\">2</a>), which is provided by <code>Any</code>. There&#39;s no ability to <code>match</code> though, as <code>match</code> would need to statically know all the possibilities, as I understand it."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1478889027, "post_id": 40538795, "comment_id": 68346385, "body": "@Shepmaster I knows about anys and it&#39;s not very ergonomics, don&#39;t you sees? And wouldn&#39;t blanks (<code>_</code>) save the match from needsing to know too much?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1478889135, "post_id": 40538795, "comment_id": 68346425, "body": "There&#39;s even a room to implement something like the Scala typeful Duck Typing, methinks. Wich is a different route from downcasting but interesting nevertheless."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1525980949, "last_edit_date": 1525980949, "creation_date": 1478820452, "answer_id": 40538795, "question_id": 40538554, "link": "https://stackoverflow.com/questions/40538554/is-it-possible-to-pattern-match-in-rust-with-multiple-types/40538795#40538795", "title": "Is it possible to pattern match in Rust with multiple types?", "body": "<p>No one can say with 100% accuracy that a feature will or won't <strong>ever</strong> be implemented, but I can say with 100% belief that this will never be implemented. </p>\n\n<p>Why is that? Because there's zero benefit to the proposed syntax. Rust is a <em>statically-typed</em> language. That means that the compiler <em>knows</em> what the type of a variable is. There's no way\u00a0that any branch besides <code>Bus</code> would ever be executed. There's no way that a variable can have more than one type! Why would the language change to allow you to add code that could never be used? That wouldn't be very useful.</p>\n\n<p>A match statement, and pattern matching in general, is really only useful when there are multiple possible variants of something. That's why Rust has <code>enum</code>s; to allow a fixed set of dynamic choices (a.k.a. made at runtime).</p>\n\n<p>If you need an open set of dynamic decisions, that's what traits (and maybe specialization) are for. There's even a trait that allows for <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"noreferrer\">any concrete type</a>.</p>\n\n<hr>\n\n<p>As <a href=\"https://stackoverflow.com/questions/40538554/is-it-possible-to-pattern-match-in-rust-with-multiple-types#comment68346311_40538795\">mentioned in the comments</a>, you can use <em>trait object downcasting</em> which is provided by <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"noreferrer\"><code>Any</code></a>, but there's no ability to use <code>match</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27892375/155423\">Can I do type introspection with trait objects and then downcast it?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 126, "user_id": 2243043, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/a967363454d6d0a60de945a14ba682e7?s=128&d=identicon&r=PG", "display_name": "Marek Counts", "link": "https://stackoverflow.com/users/2243043/marek-counts"}, "is_accepted": false, "score": 1, "last_activity_date": 1526004216, "last_edit_date": 1526004216, "creation_date": 1525979142, "answer_id": 50279877, "question_id": 40538554, "link": "https://stackoverflow.com/questions/40538554/is-it-possible-to-pattern-match-in-rust-with-multiple-types/50279877#50279877", "title": "Is it possible to pattern match in Rust with multiple types?", "body": "<p>Check out <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow noreferrer\"><code>std::any::Any</code></a> and Andrew Johnson's link. I think you will be able to do something close to what you wanted to do using <code>Any</code>. <code>fn get_type_id(&amp;self) -&gt; TypeId</code> is only in the nightly builds though, so if you have the stable version of Rust you may be unable to use it yet.</p>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause%20std%3A%3Aany%3A%3AAny%3B%0A%0Afn%20is_string(s%3A%20%26(Any%20%2B%20Send))%20%7B%0A%20%20%20%20if%20s.is%3A%3A%3CString%3E()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22It%27s%20a%20string!%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22Not%20a%20string...%22)%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20is_string(%260)%3B%0A%20%20%20%20is_string(%26%22cookie%20monster%22.to_string())%3B%0A%7D\" rel=\"nofollow noreferrer\">This</a> example is close to what you want, just with <code>if let</code> instead of <code>match</code>.</p>\n\n<p>I wrote three examples to demonstrate how you might accomplish this, Although none are usable with <code>match</code> sadly... They can be found be found and run <a href=\"https://play.rust-lang.org/?gist=8ab4c0a8b56de5e45d37b7cd9e0af57c&amp;version=undefined&amp;mode=undefined\" rel=\"nofollow noreferrer\">here</a>. The following is my favorite way of doing it:</p>\n\n<pre><code>fn run_example_one() {\n    let unknown_type = gen_rand_any();\n\n    if let Some(string) = unknown_type.downcast_ref::&lt;String&gt;() {\n       println!(\"It's a string!\");\n    } else if let Some(my_struct) = unknown_type.downcast_ref::&lt;MyStruct&gt;() {\n        println!(\"my struct! name = {:?}\", my_struct.my_name);\n    } else if let Some(int) = unknown_type.downcast_ref::&lt;i32&gt;() {\n       println!(\"something singed 32 bit int.\");\n   }\n}\n</code></pre>\n"}], "owner": {"reputation": 325, "user_id": 3316756, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7b621e5b38d20189b2ef97c8e0dd8fd0?s=128&d=identicon&r=PG&f=1", "display_name": "randyrand", "link": "https://stackoverflow.com/users/3316756/randyrand"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6178, "favorite_count": 1, "accepted_answer_id": 40538795, "answer_count": 2, "score": 9, "last_activity_date": 1526004216, "creation_date": 1478819034, "last_edit_date": 1525962286, "question_id": 40538554, "link": "https://stackoverflow.com/questions/40538554/is-it-possible-to-pattern-match-in-rust-with-multiple-types", "title": "Is it possible to pattern match in Rust with multiple types?", "body": "<p>It seems as though you can't. If not, is there any planned support to add it or run-time type information (RTTI)?</p>\n\n<pre><code>struct Bus;\nstruct Car;\nstruct Person;\n\nfn main() {\n    let x = Bus;\n    //or more realistically, let x = function_with_multiple_return_types();\n\n    match x {\n        Car =&gt; {\n            // ...\n        }\n        Bus =&gt; {\n            // this gets executed\n        }\n        Person =&gt; {\n            // ...\n        }\n    }\n}\n</code></pre>\n\n<p>This example is trivial. In real life, it would only be useful if <code>x</code> could be multiple types. e.g. <code>let x = function_with_multiple_return_types();</code>. </p>\n"}, {"tags": ["for-loop", "filter", "rust"], "answers": [{"tags": [], "owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "is_accepted": true, "score": 4, "last_activity_date": 1478811874, "creation_date": 1478811874, "answer_id": 40536972, "question_id": 40536789, "link": "https://stackoverflow.com/questions/40536789/idiomatic-way-to-use-filter/40536972#40536972", "title": "Idiomatic way to use filter()", "body": "<p>In short <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\">yes</a>. Although in your particular example you can use <code>into_iter</code> to get an iterator that does return ownership.</p>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 40536972, "answer_count": 1, "score": 1, "last_activity_date": 1478813047, "creation_date": 1478811160, "last_edit_date": 1478813047, "question_id": 40536789, "link": "https://stackoverflow.com/questions/40536789/idiomatic-way-to-use-filter", "title": "Idiomatic way to use filter()", "body": "<p>When using <code>filter</code>, you receive a reference because <a href=\"https://doc.rust-lang.org/book/iterators.html\" rel=\"nofollow noreferrer\"><code>filter</code> does not return ownership</a>. However <code>iter()</code> already references what you are iterating over so you get code that looks like this:</p>\n\n<pre><code>fn main() {\n    let mut vec: Vec&lt;(bool, i32)&gt; = Vec::new();\n    vec.push((true, 1));\n    vec.push((false, 2));\n    vec.push((true, 3));\n    for &amp;(_, x) in vec.iter().filter(|&amp;&amp;(exists, _)| exists) {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n\n<p>That seems like a lot of <code>&amp;</code> to me. Is this considered the idiomatic way to implement <code>filter()</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 0, "creation_date": 1478812086, "post_id": 40535543, "comment_id": 68313547, "body": "I&#39;m sorry but I can&#39;t get it to run in the playground. What output did you get?"}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 0, "creation_date": 1478812378, "post_id": 40535543, "comment_id": 68313685, "body": "I was having issues with the playground earlier also. I&#39;ve added the error output to my question."}, {"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 0, "creation_date": 1478812625, "post_id": 40535543, "comment_id": 68313819, "body": "so you don&#39;t get the error with the direct_into_box? grrr... don&#39;t know."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479056095, "post_id": 40576086, "comment_id": 68388145, "body": "Should your impressive writeup be added to / used to create a new issue?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479057036, "post_id": 40576086, "comment_id": 68388468, "body": "Sure, if there&#39;s not already an issue about this problem yet (I didn&#39;t search thoroughly, which is why I linked to an issue search page :P), otherwise maybe it can be added to an existing issue."}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 0, "creation_date": 1479135581, "post_id": 40576086, "comment_id": 68418798, "body": "@FrancisGagn&#233;, thanks for the detailed explanation! Thanks also for the link to the issue search\u2014I looked around a little bit and I think <a href=\"https://github.com/rust-lang/rust/issues/24680\" rel=\"nofollow noreferrer\">Incomprehensible error message when inference fails for closure</a> and <a href=\"https://github.com/rust-lang/rust/issues/26937\" rel=\"nofollow noreferrer\">Incorrect lifetime inferred for closure</a> describe my issue here. Edit: actually the latter may not be exactly the same issue, but seems related."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1479163119, "post_id": 40576086, "comment_id": 68433621, "body": "<a href=\"https://github.com/rust-lang/rust/issues/24680#issuecomment-260486263\" rel=\"nofollow noreferrer\">Added a comment on issue 24680</a> with my analysis. Also edited the link in my answer to link directly to issue 24680."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1479163070, "last_edit_date": 1479163070, "creation_date": 1479054323, "answer_id": 40576086, "question_id": 40535543, "link": "https://stackoverflow.com/questions/40535543/force-coerce-evaluation-of-closure-signature/40576086#40576086", "title": "Force/coerce evaluation of closure signature", "body": "<p>Sounds like <a href=\"https://github.com/rust-lang/rust/issues/24680\" rel=\"nofollow noreferrer\">an inference bug in the compiler</a>. What seems to happen is that the compiler implements <code>Fn(Foo&lt;'x&gt;)</code> <em>for one specific lifetime <code>'x</code></em> instead of <code>Fn(Foo&lt;'a&gt;)</code> <em>for any lifetime <code>'a</code></em> on your closure.</p>\n\n<p>Let's see if we can replicate the error by defining a struct by hand (this requires a nightly compiler), so we can better understand what's going on. First, let's define the struct the correct way:</p>\n\n<pre><code>#![feature(fn_traits)]\n#![feature(unboxed_closures)]\n\n// Foo and IntoBox unchanged\n\nstruct Func;\n\nimpl&lt;'a&gt; FnOnce&lt;(Foo&lt;'a&gt;,)&gt; for Func {\n    type Output = String;\n\n    extern \"rust-call\" fn call_once(self, args: (Foo&lt;'a&gt;,)) -&gt; String {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a&gt; FnMut&lt;(Foo&lt;'a&gt;,)&gt; for Func {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (Foo&lt;'a&gt;,)) -&gt; String {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a&gt; Fn&lt;(Foo&lt;'a&gt;,)&gt; for Func {\n    extern \"rust-call\" fn call(&amp;self, (i,): (Foo&lt;'a&gt;,)) -&gt; String {\n        format!(\"{:?}\", i)\n    }\n}\n\nfn main() {\n    let x = IntoBox::into_box(Func);\n}\n</code></pre>\n\n<p>This <code>Func</code> struct compiles fine and behaves just like your original closure.</p>\n\n<p>Now, let's break it:</p>\n\n<pre><code>impl FnOnce&lt;(Foo&lt;'static&gt;,)&gt; for Func {\n    type Output = String;\n\n    extern \"rust-call\" fn call_once(self, args: (Foo&lt;'static&gt;,)) -&gt; String {\n        self.call(args)\n    }\n}\n\nimpl FnMut&lt;(Foo&lt;'static&gt;,)&gt; for Func {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (Foo&lt;'static&gt;,)) -&gt; String {\n        self.call(args)\n    }\n}\n\nimpl Fn&lt;(Foo&lt;'static&gt;,)&gt; for Func {\n    extern \"rust-call\" fn call(&amp;self, (i,): (Foo&lt;'static&gt;,)) -&gt; String {\n        format!(\"{:?}\", i)\n    }\n}\n</code></pre>\n\n<p>What I've done here is that I've removed the <code>&lt;'a&gt;</code> on each <code>impl</code>, so that the impls are no longer generic over a lifetime, and I've replaced <code>Foo&lt;'a&gt;</code> with <code>Foo&lt;'static&gt;</code>. This means that now, the traits are only implemented when the \"closure\"'s argument is a <code>Foo&lt;'static&gt;</code>.</p>\n\n<p>This fails to compile with the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;Func as std::ops::FnOnce&lt;(Foo&lt;'r&gt;,)&gt;&gt;::Output == std::string::String`\n  --&gt; &lt;anon&gt;:51:13\n   |\n51 |     let x = IntoBox::into_box(Func);\n   |             ^^^^^^^^^^^^^^^^^ expected bound lifetime parameter , found concrete lifetime\n   |\n   = note: concrete lifetime that was found is the static lifetime\n   = note: required because of the requirements on the impl of `IntoBox` for `Func`\n   = note: required by `IntoBox::into_box`\n\nerror[E0277]: the trait bound `for&lt;'r&gt; Func: std::ops::Fn&lt;(Foo&lt;'r&gt;,)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:51:13\n   |\n51 |     let x = IntoBox::into_box(Func);\n   |             ^^^^^^^^^^^^^^^^^ the trait `for&lt;'r&gt; std::ops::Fn&lt;(Foo&lt;'r&gt;,)&gt;` is not implemented for `Func`\n   |\n   = help: the following implementations were found:\n   = help:   &lt;Func as std::ops::Fn&lt;(Foo&lt;'static&gt;,)&gt;&gt;\n   = note: required because of the requirements on the impl of `IntoBox` for `Func`\n   = note: required by `IntoBox::into_box`\n</code></pre>\n\n<p>The first error is the same, but instead of an internal name like <code>'_#29r</code>, the compiler mentions the static lifetime, because that's what I used here. I <em>suspect</em> that what the compiler is doing with the closure that doesn't compile in your code is similar to my second set of impls, just that instead of <code>'static</code>, it's some other concrete lifetime that we can't name in Rust. The second error is different but means pretty much the same thing.</p>\n"}], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 1, "accepted_answer_id": 40576086, "answer_count": 1, "score": 4, "last_activity_date": 1479163070, "creation_date": 1478806186, "last_edit_date": 1478813095, "question_id": 40535543, "link": "https://stackoverflow.com/questions/40535543/force-coerce-evaluation-of-closure-signature", "title": "Force/coerce evaluation of closure signature", "body": "<p>Here is a contrived example of what I am trying to do:</p>\n\n<pre><code>use std::boxed::Box;\n\n#[derive(Debug)]\npub struct Foo&lt;'a&gt;(pub &amp;'a str);\n\npub trait IntoBox {\n    fn into_box&lt;'a&gt;(self) -&gt; Box&lt;Fn(Foo) -&gt; String&gt;;\n}\n\nimpl&lt;B&gt; IntoBox for B where B: Fn(Foo) -&gt; String + 'static {\n    fn into_box(self) -&gt; Box&lt;Fn(Foo) -&gt; String&gt; { Box::new(self) }\n}\n\nfn direct_into_box&lt;B: Fn(Foo) -&gt; String + 'static&gt;(b: B) -&gt; Box&lt;Fn(Foo) -&gt; String&gt; {\n    Box::new(b)\n}\n\nfn main() {\n    // Doesn't work\n    let x = IntoBox::into_box(|i| format!(\"{:?}\", i) );\n\n    // Works\n    let y = IntoBox::into_box(|i: Foo| format!(\"{:?}\", i) );\n\n    // Also works\n    let z = direct_into_box(|i| format!(\"{:?}\", i) );\n}\n</code></pre>\n\n<p>How do I get my trait impl to do the same evaluation of the closure as is done by my <code>direct_into_box</code>? I would have expected <code>direct_into_box</code> and my trait impl to behave in the same way.</p>\n\n<p>The error on <code>x</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;[closure@&lt;anon&gt;:20:31: 20:53] as std::ops::FnOnce&lt;(Foo&lt;'r&gt;,)&gt;&gt;::Output == std::string::String`\n  --&gt; &lt;anon&gt;:20:13\n   |\n20 |     let x = IntoBox::into_box(|i| format!(\"{:?}\", i) );\n   |             ^^^^^^^^^^^^^^^^^ expected bound lifetime parameter , found concrete lifetime\n   |\n   = note: concrete lifetime that was found is lifetime '_#29r\n   = note: required because of the requirements on the impl of `IntoBox` for `[closure@&lt;anon&gt;:20:31: 20:53]`\n   = note: required by `IntoBox::into_box`\n\nerror[E0281]: type mismatch: the type `[closure@&lt;anon&gt;:20:31: 20:53]` implements the trait `std::ops::Fn&lt;(_,)&gt;`, but the trait `for&lt;'r&gt; std::ops::Fn&lt;(Foo&lt;'r&gt;,)&gt;` is required (expected concrete lifetime, found bound lifetime parameter )\n  --&gt; &lt;anon&gt;:20:13\n   |\n20 |     let x = IntoBox::into_box(|i| format!(\"{:?}\", i) );\n   |             ^^^^^^^^^^^^^^^^^\n   |\n   = note: required because of the requirements on the impl of `IntoBox` for `[closure@&lt;anon&gt;:20:31: 20:53]`\n   = note: required by `IntoBox::into_box`\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478797542, "post_id": 40532847, "comment_id": 68306248, "body": "None I&#39;m aware of; you can always make your own though."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 3, "creation_date": 1478799530, "post_id": 40532847, "comment_id": 68307361, "body": "I don&#39;t know of any type that implements <code>Index</code> and has <code>len</code> except for slices. (<code>Vec</code> and similar collections all get indexing and length by <code>Deref</code>&#39;ing to <code>[T]</code>.)"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1478800931, "post_id": 40532847, "comment_id": 68308121, "body": "No a subtrait (why would it be a subtrait?), but there is <a href=\"https://doc.rust-lang.org/std/iter/trait.ExactSizeIterator.html\" rel=\"nofollow noreferrer\"><code>ExactSizeIterator</code></a>."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1479062762, "post_id": 40532847, "comment_id": 68390478, "body": "@delnan, on the contrary, here is Vec&#39;s <code>len</code> method: <a href=\"https://doc.rust-lang.org/src/collections/up/src/libcollections/vec.rs.html#945-957\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/collections/up/src/libcollections/&hellip;</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1479063090, "post_id": 40532847, "comment_id": 68390577, "body": "@apt1002 That&#39;s not a method of <code>Vec</code>, as I said you can only call <code>len</code> on <code>Vec</code> because of <code>Deref</code> coercions."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1479207002, "post_id": 40532847, "comment_id": 68450342, "body": "That is a method on Vec."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 0, "creation_date": 1478848280, "post_id": 40535385, "comment_id": 68324428, "body": "@Jacob: I&#39;ve added the link."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 1, "creation_date": 1479062481, "post_id": 40535385, "comment_id": 68390387, "body": "No such misconception! I even used the word &quot;subtrait&quot;."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 1, "last_activity_date": 1478848247, "last_edit_date": 1478848247, "creation_date": 1478805574, "answer_id": 40535385, "question_id": 40532847, "link": "https://stackoverflow.com/questions/40532847/is-there-a-subtrait-of-index-that-specifies-the-len-method/40535385#40535385", "title": "Is there a subtrait of `Index` that specifies the `len` method?", "body": "<blockquote>\n  <p>Is there a subtrait of <code>Index</code> that specifies the <code>len</code> method or in some other way reveals what range of indices is allowed?</p>\n</blockquote>\n\n<p>To the best of my knowledge, not in the standard library.</p>\n\n<hr>\n\n<p>I would note, though, that you seem to be under the misconception that:</p>\n\n<ol>\n<li><code>Index</code> necessarily returns a result for a contiguous range of keys</li>\n<li><code>Index</code> this contiguous range starts at 0</li>\n</ol>\n\n<p>Both assumptions are necessary for <code>len</code> to be useful here (since I suppose that you are interested in checking <em>before</em> calling <code>[]</code> where the key is in present).</p>\n\n<p>So, in essence, you are asking for a hierarchy of traits:</p>\n\n<ul>\n<li><code>Index</code>, which allows querying for an element by key</li>\n<li><code>RangeIndex</code>, which allows querying for an element by key, and guarantees that the valid keys form a contiguous range; <code>RangeIndex</code> could have a <code>range</code> method returning a <code>Range</code> of valid keys</li>\n<li><code>ZeroBasedRangeIndex</code>, which allows querying for an element by numeric keys, and guarantees that the valid form a contiguous range starting from <code>0</code>; <code>ZeroBasedRangeIndex</code> could have a <code>len</code> method returning the number of valid keys</li>\n</ul>\n\n<p>And of course those would have to be duplicated for <code>IndexMut</code>.</p>\n\n<p><em>Note: for example, one could implement <code>Index&lt;K, Output=V&gt;</code> for <a href=\"https://doc.rust-lang.org/nightly/std/collections/struct.BTreeMap.html#implementations\" rel=\"nofollow noreferrer\"><code>BTreeMap&lt;K, V&gt;</code></a>...</em></p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 40535385, "answer_count": 1, "score": 1, "last_activity_date": 1478848247, "creation_date": 1478796283, "last_edit_date": 1478796905, "question_id": 40532847, "link": "https://stackoverflow.com/questions/40532847/is-there-a-subtrait-of-index-that-specifies-the-len-method", "title": "Is there a subtrait of `Index` that specifies the `len` method?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>std::ops::Index</code></a> trait is implemented by types that support array subscript notation. It appears that most types that implement <code>Index</code> also have a <code>len</code> method, but it is not part of the trait so you can't assume it exists. Therefore, I find myself writing code specialized for slices (which do have a <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.len\" rel=\"nofollow noreferrer\"><code>len</code></a> method), but I would prefer to be more general.</p>\n\n<p>Is there a subtrait of <code>Index</code> that specifies the <code>len</code> method or in some other way reveals what range of indices is allowed?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 4, "creation_date": 1478794767, "post_id": 40531912, "comment_id": 68304463, "body": "Possibly worth a read: <a href=\"http://stackoverflow.com/documentation/rust/2574/auto-dereferencing#t=201611101618367290575\">Auto-dereferencing</a> (from the Rust documentation section on this site), which explains some of the cases where <code>*</code> is not needed."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478795307, "post_id": 40532427, "comment_id": 68304811, "body": "Would it be possible to add an implementation of <code>AddAssign</code> for <code>&amp;mut i32</code>? It seems to be like this would be quite logical, but maybe I&#39;m missing a pitfall."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478795699, "post_id": 40532427, "comment_id": 68305088, "body": "@MatthieuM. I do believe it&#39;s <i>possible</i>, and the <code>Add</code> trait does have some precedent. I have a feeling that there&#39;s some good reason, but the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0953-op-assign.md#unresolved-questions\" rel=\"nofollow noreferrer\">RFC lists it under unresolved questions</a>. Also you might be interested in <a href=\"https://github.com/rust-lang/rust/pull/36380\" rel=\"nofollow noreferrer\">this</a> ^_^"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478801478, "post_id": 40532427, "comment_id": 68308382, "body": "Ah! Didn&#39;t even think to check whether the quote was exact or not :P"}, {"owner": {"reputation": 13693, "user_id": 352708, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/68dcad0efb04cad998822cc57112eb7c?s=128&d=identicon&r=PG", "display_name": "Slava Semushin", "link": "https://stackoverflow.com/users/352708/slava-semushin"}, "edited": false, "score": 0, "creation_date": 1478862309, "post_id": 40532427, "comment_id": 68331617, "body": "@Shepmaster <a href=\"https://github.com/rust-lang/rust/pull/36380\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/36380</a> is pointing to the PR which fixes typo in word. Why this could be interesting?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13693, "user_id": 352708, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/68dcad0efb04cad998822cc57112eb7c?s=128&d=identicon&r=PG", "display_name": "Slava Semushin", "link": "https://stackoverflow.com/users/352708/slava-semushin"}, "edited": false, "score": 0, "creation_date": 1478874556, "post_id": 40532427, "comment_id": 68338549, "body": "@SlavaSemushin you&#39;ll note that I directed that comment at Matthieu M., who correctly realized that the quote in OP contained a mistyped word. However, the original source that the quote was from contained the typo (thus why I added <code>[sic]</code> to the quote) and then I pointed out to them that the typo has been fixed in upstream, just not published yet."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1478795094, "last_edit_date": 1495535423, "creation_date": 1478795094, "answer_id": 40532427, "question_id": 40531912, "link": "https://stackoverflow.com/questions/40531912/what-is-the-usage-of-the-asterisk-symbol-in-rust/40532427#40532427", "title": "What is the usage of the asterisk symbol in Rust?", "body": "<blockquote>\n  <p>If <code>*y</code> is a reference</p>\n</blockquote>\n\n<p><code>*y</code> is <strong>not</strong> a reference. <code>y</code> is a reference; <code>*y</code> <em>dereferences</em> <code>y</code>, allowing you access to the referred-to value.</p>\n\n<blockquote>\n  <p>what is the difference [between <code>+=</code> and <code>println!</code>]</p>\n</blockquote>\n\n<p><code>println!</code> is a macro that <a href=\"https://stackoverflow.com/questions/30450399/does-println-borrow-or-own-the-variable\">automatically references the arguments given to it</a>. In addition, the <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code> trait</a> (used via <code>{}</code> in the format string) is implemented for all references to types that themselves implement <code>Display</code> (<code>impl&lt;'a, T&gt; Display for &amp;'a T where T: Display + ?Sized</code>).</p>\n\n<p>Thus, <code>println!(\"{}\", y);</code> is actually printing out a reference to a reference to a value. Those intermediate references are automatically dereferenced due to the implementation of <code>Display</code>.</p>\n\n<p><code>+=</code>, on the other hand, is implemented via the <a href=\"https://doc.rust-lang.org/std/ops/trait.AddAssign.html\" rel=\"noreferrer\"><code>AddAssign</code> trait</a>. The standard library only implements adding an integer type to itself (<code>impl AddAssign&lt;i32&gt; for i32</code>). That means that you have to add an appropriate level of dereferencing in order to get both sides to an integer.</p>\n"}], "owner": {"reputation": 2809, "user_id": 6720987, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/0TSHr.png?s=128&g=1", "display_name": "Jan-Fokke", "link": "https://stackoverflow.com/users/6720987/jan-fokke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4743, "favorite_count": 1, "accepted_answer_id": 40532427, "answer_count": 1, "score": 14, "last_activity_date": 1478795094, "creation_date": 1478793667, "last_edit_date": 1478794553, "question_id": 40531912, "link": "https://stackoverflow.com/questions/40531912/what-is-the-usage-of-the-asterisk-symbol-in-rust", "title": "What is the usage of the asterisk symbol in Rust?", "body": "<p>I'm new to Rust and I don't understand the following piece of code:</p>\n\n<pre><code>let mut x = 5;\n{\n    let y = &amp;mut x;\n    *y += 1;\n}\nprintln!(\"{}\", x);\n</code></pre>\n\n<p>Explanation from the <a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html#mut-references\" rel=\"noreferrer\">Rust site</a>:</p>\n\n<blockquote>\n  <p>You'll also notice we added an asterisk (<code>*</code>) in front of <code>y</code>, making it <code>*y</code>, this is because <code>y</code> is a <code>&amp;mut</code> reference. You'll need to use astrisks [sic] to access the contents of a reference as well.</p>\n</blockquote>\n\n<p>If <code>*y</code> is a reference, why does the following code work </p>\n\n<pre><code>fn main() {\n    let mut x = 5;\n    {\n        let y = &amp;mut x;\n        println!(\"{}\", y);\n    }\n}\n</code></pre>\n\n<p>I know I'm not modifying the value here, but what is the difference and why\nwould <code>y += 1;</code> not work?</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1478772091, "creation_date": 1478772091, "answer_id": 40524713, "question_id": 40524165, "link": "https://stackoverflow.com/questions/40524165/how-to-write-generic-functions-that-take-types-which-are-themselves-generic/40524713#40524713", "title": "How to write generic functions that take types which are themselves generic?", "body": "<p>The solution is to make your trait generic over the pointee type:</p>\n\n<pre><code>pub trait PtrAny&lt;T&gt;: ...\n\nimpl&lt;T, TPtr&gt; PtrAny&lt;T&gt; for TPtr where TPtr: ...\n</code></pre>\n\n<p>Note that this doesn't fix your linked code example, because Rust can't abstract over (non-)mutability.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1478774899, "last_edit_date": 1478774899, "creation_date": 1478773059, "answer_id": 40525063, "question_id": 40524165, "link": "https://stackoverflow.com/questions/40524165/how-to-write-generic-functions-that-take-types-which-are-themselves-generic/40525063#40525063", "title": "How to write generic functions that take types which are themselves generic?", "body": "<p>Thanks to help from @futile &amp; @oli_obk_ on IRC, here is a working example of the code in the question.</p>\n\n<ul>\n<li><code>PtrAny</code> and <code>PtrAnyFuncs</code> needed to take a type.</li>\n<li><code>PtrAnyFuncs</code> needed to use assosiated types so the argument to <code>new</code> could be made generic across <code>*mut</code> and <code>*const</code>.</li>\n<li><code>Deref</code> needed to declare the type that it de-references to <code>Deref&lt;Target=T&gt;</code></li>\n</ul>\n\n<p>Working code:</p>\n\n<pre><code>pub trait PtrAnyFuncs&lt;T&gt; {\n    type InnerPtr;\n\n    fn new(ptr: Self::InnerPtr) -&gt; Self;\n    fn is_null(&amp;self) -&gt; bool;\n}\n\npub trait PtrAny&lt;T&gt;:\n    Deref&lt;Target=T&gt; +\n    Copy +\n    Clone +\n    PartialEq +\n    PtrAnyFuncs&lt;T&gt; +\n    {}\n\nimpl&lt;TPtr, T&gt; PtrAny&lt;T&gt; for TPtr where TPtr:\n    Deref&lt;Target=T&gt; +\n    Copy +\n    Clone +\n    PartialEq +\n    PtrAnyFuncs&lt;T&gt; +\n    {}\n\nfn generic_test&lt;T: PtrAny&lt;MyStruct&gt;&gt;(a: T) {\n    if a.is_null() {\n        println!(\"Test: NULL\");\n    } else {\n        println!(\"Test: {} {}\", a.my_val_a, a.my_val_b);\n    }\n}\n\n\n// ---------------------------------------------------------------------------\n// Attempt to use generic function\n\nstruct MyStruct {\n    pub my_val_a: usize,\n    pub my_val_b: usize,\n}\n\nfn main() {\n    let mut a: MyStruct = MyStruct { my_val_a: 10, my_val_b: 2, };\n    let b: MyStruct = MyStruct { my_val_a: 4, my_val_b: 4, };\n\n    let a_ptr = PtrMut::new(&amp;mut a as *mut MyStruct);\n    let b_ptr = PtrConst::new(&amp;b as *const MyStruct);\n\n    generic_test(a_ptr);\n    generic_test(b_ptr);\n}\n\n\n// ---------------------------------------------------------------------------\n// PtrMut\n\nuse std::ops::{\n    Deref,\n    DerefMut,\n};\n\n#[repr(C)]\n#[derive(Hash)]\npub struct PtrMut&lt;T&gt; {\n    ptr: *mut T,\n}\n\nimpl&lt;T&gt; PtrAnyFuncs&lt;T&gt; for PtrMut&lt;T&gt; {\n    type InnerPtr = *const T;\n\n    #[inline(always)]\n    fn new(ptr: Self::InnerPtr) -&gt; PtrMut&lt;T&gt; {\n        PtrMut { ptr: ptr as *mut T }\n    }\n\n    #[inline(always)]\n    fn is_null(&amp;self) -&gt; bool {\n        self.ptr == ::std::ptr::null_mut()\n    }\n}\n\nimpl&lt;T&gt; PtrMut&lt;T&gt; {\n\n    #[inline(always)]\n    pub fn null() -&gt; PtrMut&lt;T&gt; {\n        PtrMut { ptr: ::std::ptr::null_mut() }\n    }\n\n    #[inline(always)]\n    pub fn as_pointer(&amp;self) -&gt; *mut T {\n        self.ptr\n    }\n\n    // only for 'PtrMut'\n    #[inline(always)]\n    pub fn as_const(&amp;self) -&gt; PtrConst&lt;T&gt; {\n        PtrConst::new(self.ptr as *const T)\n    }\n}\n\nimpl&lt;T&gt; Copy for PtrMut&lt;T&gt; { }\nimpl&lt;T&gt; Clone for PtrMut&lt;T&gt; {\n    #[inline(always)]\n    fn clone(&amp;self) -&gt; PtrMut&lt;T&gt; { *self }\n}\n\nimpl&lt;T&gt; Deref for PtrMut&lt;T&gt; {\n    type Target = T;\n\n    #[inline(always)]\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.ptr }\n    }\n}\n\nimpl&lt;T&gt; DerefMut for PtrMut&lt;T&gt; {\n    #[inline(always)]\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {\n        unsafe { &amp;mut *self.ptr }\n    }\n}\n\nimpl&lt;T&gt; PartialEq for PtrMut&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;PtrMut&lt;T&gt;) -&gt; bool {\n        self.ptr == other.ptr\n    }\n}\n\n// ---------------------------------------------------------------------------\n// PtrConst\n\n#[repr(C)]\n#[derive(Hash)]\npub struct PtrConst&lt;T&gt; {\n    ptr: *const T,\n}\n\nimpl&lt;T&gt; PtrAnyFuncs&lt;T&gt; for PtrConst&lt;T&gt; {\n    type InnerPtr = *const T;\n\n    #[inline(always)]\n    fn new(ptr: Self::InnerPtr) -&gt; PtrConst&lt;T&gt; {\n        PtrConst { ptr: ptr as *const T }\n    }\n\n    #[inline(always)]\n    fn is_null(&amp;self) -&gt; bool {\n        self.ptr == ::std::ptr::null_mut()\n    }\n}\n\nimpl&lt;T&gt; PtrConst&lt;T&gt; {\n    #[inline(always)]\n    pub fn null() -&gt; PtrConst&lt;T&gt; {\n        PtrConst { ptr: ::std::ptr::null_mut() }\n    }\n\n    #[inline(always)]\n    pub fn as_pointer(&amp;self) -&gt; *const T {\n        self.ptr\n    }\n}\n\nimpl&lt;T&gt; Copy for PtrConst&lt;T&gt; { }\nimpl&lt;T&gt; Clone for PtrConst&lt;T&gt; {\n    #[inline(always)]\n    fn clone(&amp;self) -&gt; PtrConst&lt;T&gt; { *self }\n}\n\nimpl&lt;T&gt; Deref for PtrConst&lt;T&gt; {\n    type Target = T;\n\n    #[inline(always)]\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.ptr }\n    }\n}\n\n// no DerefMut for PtrConst, only PtrMut\nimpl&lt;T&gt; PartialEq for PtrConst&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;PtrConst&lt;T&gt;) -&gt; bool {\n        self.ptr == other.ptr\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 656, "favorite_count": 0, "accepted_answer_id": 40524713, "answer_count": 2, "score": 0, "last_activity_date": 1478774899, "creation_date": 1478770510, "last_edit_date": 1478771556, "question_id": 40524165, "link": "https://stackoverflow.com/questions/40524165/how-to-write-generic-functions-that-take-types-which-are-themselves-generic", "title": "How to write generic functions that take types which are themselves generic?", "body": "<p>I'm looking to write a function that takes different types which primarily differ in (<code>const</code> / <code>mut</code>) of a member, which themselves take a generic type.</p>\n\n<p>To simplify the question, I'm looking to write a function which takes either a constant or mutable struct. eg:</p>\n\n<pre><code>pub struct PtrConst&lt;T&gt; {\n    ptr: *const T,\n}\npub struct PtrMut&lt;T&gt; {\n    ptr: *mut T,\n}\n</code></pre>\n\n<p>How could I write a function that takes either a <code>PtrConst&lt;SomeType&gt;</code> or <code>PtrMut&lt;SomeType&gt;</code>?</p>\n\n<hr>\n\n<p>This snippet is rather long, but I've attempted to simplify it.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=878012d5e50141931ead2cfa459471b8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playbook link.</a></p>\n\n<pre><code>// ---------------------------------------------------------------------------\n// Test Case: This isn't working!\n\n// How to make a generic function?\n// See below for 'PtrConst' &amp; 'PtrMut'.\n\npub trait PtrAnyFuncs {\n    fn new() -&gt; Self;\n    fn is_null(&amp;self) -&gt; bool;\n}\n\npub trait PtrAny:\n    Deref +\n    Copy +\n    Clone +\n    PartialEq +\n    PtrAnyFuncs +\n    {}\n\nimpl&lt;TPtr&gt; PtrAny for TPtr where TPtr:\n    Deref +\n    Copy +\n    Clone +\n    PartialEq +\n    PtrAnyFuncs +\n    {}\n\n\nfn generic_test&lt;T: PtrAny&lt;MyStruct&gt;&gt;(a: T) {\n    if a.is_null() {\n        println!(\"Test: NULL\");\n    } else {\n        println!(\"Test: {} {}\", a.my_val_a, a.my_val_b);\n    }\n}\n\n\n// ---------------------------------------------------------------------------\n// Attempt to use generic function\n\nstruct MyStruct {\n    pub my_val_a: usize,\n    pub my_val_b: usize,\n}\n\nfn main() {\n    let mut a: MyStruct = MyStruct { my_val_a: 10, my_val_b: 2, };\n    let b: MyStruct = MyStruct { my_val_a: 4, my_val_b: 4, };\n\n    let a_ptr = PtrMut::new(&amp;mut a as *mut MyStruct);\n    let b_ptr = PtrConst::new(&amp;a as *const MyStruct);\n\n    generic_test(a_ptr);\n    generic_test(b_ptr);\n}\n\n\n// ---------------------------------------------------------------------------\n// PtrMut\n\nuse std::ops::{\n    Deref,\n    DerefMut,\n};\n\n#[repr(C)]\n#[derive(Hash)]\npub struct PtrMut&lt;T&gt; {\n    ptr: *mut T,\n}\n\nimpl&lt;T&gt; PtrAnyFuncs for PtrMut&lt;T&gt; {\n    #[inline(always)]\n    fn new(ptr: *mut T) -&gt; PtrMut&lt;T&gt; {\n        PtrMut { ptr: ptr as *mut T }\n    }\n\n    #[inline(always)]\n    fn is_null(&amp;self) -&gt; bool {\n        self.ptr == ::std::ptr::null_mut()\n    }\n}\n\nimpl&lt;T&gt; PtrMut&lt;T&gt; {\n    #[inline(always)]\n    pub fn null() -&gt; PtrMut&lt;T&gt; {\n        PtrMut { ptr: ::std::ptr::null_mut() }\n    }\n\n    #[inline(always)]\n    pub fn as_pointer(&amp;self) -&gt; *mut T {\n        self.ptr\n    }\n\n    // only for 'PtrMut'\n    #[inline(always)]\n    pub fn as_const(&amp;self) -&gt; PtrConst&lt;T&gt; {\n        PtrConst::new(self.ptr as *const T)\n    }\n}\n\nimpl&lt;T&gt; Copy for PtrMut&lt;T&gt; { }\nimpl&lt;T&gt; Clone for PtrMut&lt;T&gt; {\n    #[inline(always)]\n    fn clone(&amp;self) -&gt; PtrMut&lt;T&gt; { *self }\n}\n\nimpl&lt;T&gt; Deref for PtrMut&lt;T&gt; {\n    type Target = T;\n\n    #[inline(always)]\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.ptr }\n    }\n}\n\nimpl&lt;T&gt; DerefMut for PtrMut&lt;T&gt; {\n    #[inline(always)]\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {\n        unsafe { &amp;mut *self.ptr }\n    }\n}\n\nimpl&lt;T&gt; PartialEq for PtrMut&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;PtrMut&lt;T&gt;) -&gt; bool {\n        self.ptr == other.ptr\n    }\n}\n\n// ---------------------------------------------------------------------------\n// PtrConst\n\n#[repr(C)]\n#[derive(Hash)]\npub struct PtrConst&lt;T&gt; {\n    ptr: *const T,\n}\n\nimpl&lt;T&gt; PtrAnyFuncs for PtrConst&lt;T&gt; {\n    #[inline(always)]\n    fn new(ptr: *const T) -&gt; PtrConst&lt;T&gt; {\n        PtrConst { ptr: ptr as *const T }\n    }\n\n    #[inline(always)]\n    fn is_null(&amp;self) -&gt; bool {\n        self.ptr == ::std::ptr::null_mut()\n    }\n}\n\nimpl&lt;T&gt; PtrConst&lt;T&gt; {\n\n    #[inline(always)]\n    pub fn null() -&gt; PtrConst&lt;T&gt; {\n        PtrConst { ptr: ::std::ptr::null_mut() }\n    }\n\n    #[inline(always)]\n    pub fn as_pointer(&amp;self) -&gt; *const T {\n        self.ptr\n    }\n}\n\nimpl&lt;T&gt; Copy for PtrConst&lt;T&gt; { }\nimpl&lt;T&gt; Clone for PtrConst&lt;T&gt; {\n    #[inline(always)]\n    fn clone(&amp;self) -&gt; PtrConst&lt;T&gt; { *self }\n}\n\nimpl&lt;T&gt; Deref for PtrConst&lt;T&gt; {\n    type Target = T;\n\n    #[inline(always)]\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.ptr }\n    }\n}\n\n// no DerefMut for PtrConst, only PtrMut\nimpl&lt;T&gt; PartialEq for PtrConst&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;PtrConst&lt;T&gt;) -&gt; bool {\n        self.ptr == other.ptr\n    }\n}\n</code></pre>\n"}, {"tags": ["image-processing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1478763051, "post_id": 40522070, "comment_id": 68284758, "body": "Thank you, I understand now. This was quite confusing, I thought <code>channel_count</code> would be a method for the <code>Pixel</code> instance."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 1, "last_activity_date": 1478762827, "creation_date": 1478762827, "answer_id": 40522070, "question_id": 40518713, "link": "https://stackoverflow.com/questions/40518713/how-to-read-pixel-values-from-image-in-rust/40522070#40522070", "title": "How to read pixel values from image in Rust", "body": "<p>The function you're trying to call, <code>channel_count()</code>, is a static method. It is defined for a type, not for an object of that type. You call it with </p>\n\n<pre><code>Rgba::channel_count()\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;Rgba&lt;u8&gt; as Pixel&gt;::channel_count()\n</code></pre>\n\n<p>as the first form will likely fail (in this instance) due to lack of type information.</p>\n\n<p>However, I don't think it will give you what you want. It should just return the number <code>4</code> as that is the number of channels that <code>Rgba</code> has.</p>\n\n<p>To get what you want, the RGB values, take a look at the documentation for the type you have, <a href=\"http://www.piston.rs/image/image/struct.Rgba.html\" rel=\"nofollow noreferrer\"><code>Rgba</code></a>.</p>\n\n<p>It has a public member, <code>data</code>, which is a 4-element array, and it implements <code>Index</code>.</p>\n\n<p>If <code>pixel</code> is of type <code>Rgba&lt;u8&gt;</code> (corresponding to your <code>p.2</code>), you can get the values you seek either by calling <code>pixel.data</code> which will give them to you as an array, or by indexing. For example, <code>pixel[0]</code> will give you the red value.</p>\n"}], "owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3652, "favorite_count": 1, "accepted_answer_id": 40522070, "answer_count": 1, "score": 3, "last_activity_date": 1478762827, "creation_date": 1478741649, "last_edit_date": 1478754123, "question_id": 40518713, "link": "https://stackoverflow.com/questions/40518713/how-to-read-pixel-values-from-image-in-rust", "title": "How to read pixel values from image in Rust", "body": "<p>I am using the <a href=\"https://github.com/PistonDevelopers/image\" rel=\"nofollow noreferrer\">piston Rust image library</a> (version 0.10.3) like so:</p>\n\n<pre><code>extern crate image;\n\nuse std::f32;\nuse std::fs::File;\nuse std::path::Path;\n\n\nuse image::GenericImage;\nuse image::Pixels;\nuse image::Pixel;\n\nfn init(input_path: &amp;str) {\n    let mut img = image::open(&amp;Path::new(input_path)).unwrap();\n\n    let img_width = img.dimensions().0;\n    let img_height = img.dimensions().1;\n\n    for p in img.pixels() { println!(\"pixel: {}\", p.2.channel_count()); }\n}\n\nfn main() {\n    init(\"file.png\");\n}\n</code></pre>\n\n<p>This example fails with an error message</p>\n\n<pre><code>error: no method named `channel_count` found for type `image::Rgba&lt;u8&gt;` in the current scope\n  --&gt; src/main.rs:20:55\n   |\n20 |     for p in img.pixels() { println!(\"pixel: {}\", p.2.channel_count()); }\n   |                                                       ^^^^^^^^^^^^^\n&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!\n&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)\nsrc/main.rs:20:29: 20:72 note: in this expansion of println! (defined in &lt;std macros&gt;)\n   |\n   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\nnote: candidate #1 is defined in the trait `image::Pixel`\n  --&gt; src/main.rs:20:55\n   |\n20 |     for p in img.pixels() { println!(\"pixel: {}\", p.2.channel_count()); }\n   |                                                       ^^^^^^^^^^^^^\n&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!\n&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)\nsrc/main.rs:20:29: 20:72 note: in this expansion of println! (defined in &lt;std macros&gt;)\n</code></pre>\n\n<p>Which i understand is true, because the documentation mentions that the method I want to have is part of the <a href=\"http://www.piston.rs/image/image/trait.Pixel.html#tymethod.channel_count\" rel=\"nofollow noreferrer\">Pixel trait</a> - the documentation doesn't really make it clear how to access a single pixel in a buffer loaded from an existing image, it mostly talks about getting pixels from <code>ImageBuffer</code>.</p>\n\n<p>How can I iterate over all pixels in an image and get rgb/other values from it?</p>\n\n<p>EDIT: After reading the source code, I worked around this by calling <code>Pixel::channels(&amp;self)</code> which takes <code>&amp;self</code>, therefore I figured out this must be a method added via the trait to objects that implement Pixel. </p>\n\n<p>So the signature of <code>channel_count()</code> has neither parameters nor <code>&amp;self</code>. How am I supposed to call this method?</p>\n"}, {"tags": ["rust", "clippy"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1478740092, "post_id": 40518446, "comment_id": 68278676, "body": "Thanks @Shepmaster I didn&#39;t know about the &lt;!-- language: --&gt; markers. I learned something!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478740147, "post_id": 40518446, "comment_id": 68278686, "body": "Too bad I can&#39;t actually help with the real problem :-)"}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1478783993, "post_id": 40523177, "comment_id": 68297290, "body": "Thanks. I actually never thought to check for an update. I converted to an asterisk for the versions of all of the Piston crates and ran <code>cargo update</code> and ... wouldn&#39;t you know it... <code>rustup run nightly cargo clippy</code> is now returning actual clippy results. Thanks for the tip!"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1588167994, "post_id": 40523177, "comment_id": 108796029, "body": "Maybe it could <i>build</i> all the dependencies it needed, but have an option to NOT flag warnings/errors outside the project code that you cannot fix?"}, {"owner": {"reputation": 143, "user_id": 10087197, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8bb2dce8b46248b37e70f4224753e0b9?s=128&d=identicon&r=PG&f=1", "display_name": "danda", "link": "https://stackoverflow.com/users/10087197/danda"}, "reply_to_user": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1612825342, "post_id": 40523177, "comment_id": 116883003, "body": "@AndrewMackenzie that&#39;s the way I assumed it would work, but I can&#39;t find any such flag/option for cargo check or cargo clippy, so a 3rd party issue prevents clippy from even checking my local code.   afaict"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 143, "user_id": 10087197, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8bb2dce8b46248b37e70f4224753e0b9?s=128&d=identicon&r=PG&f=1", "display_name": "danda", "link": "https://stackoverflow.com/users/10087197/danda"}, "edited": false, "score": 0, "creation_date": 1616089444, "post_id": 40523177, "comment_id": 117900885, "body": "@danda - yep, that seems to be the way it is and we just have to live with it."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1478767179, "creation_date": 1478767179, "answer_id": 40523177, "question_id": 40518446, "link": "https://stackoverflow.com/questions/40518446/exclude-dependencies-when-running-clippy/40523177#40523177", "title": "Exclude dependencies when running Clippy", "body": "<blockquote>\n  <p>How can I tell clippy to not build Piston and/or lint it?</p>\n</blockquote>\n\n<p>You can't.</p>\n\n<p>Clippy needs to build all dependencies to be able to lint your project. This is because only a few lints run solely on the AST. Most lints run on the HIR and also require type information.</p>\n\n<p>Unfortunately I cannot reproduce your error on <code>piston_window v0.57.0</code>, but that version pulls in <code>piston2d-gfx_graphics v0.33.1</code>, which is newer than the <code>0.31.2</code> that you are using. Maybe updating will solve your issues.</p>\n"}], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1394, "favorite_count": 1, "accepted_answer_id": 40523177, "answer_count": 1, "score": 10, "last_activity_date": 1478767179, "creation_date": 1478739405, "last_edit_date": 1478740233, "question_id": 40518446, "link": "https://stackoverflow.com/questions/40518446/exclude-dependencies-when-running-clippy", "title": "Exclude dependencies when running Clippy", "body": "<p>I'm trying to run clippy for the first time (I know.. I really should have done it by now eh?) and I am facing some errors.</p>\n\n<p>The project I'm trying to lint depends on Piston and it compiles and runs successfully. However, when I run clippy <a href=\"https://github.com/Manishearth/rust-clippy#as-a-cargo-subcommand-cargo-clippy\" rel=\"noreferrer\">as described in the README</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustup run nightly cargo clippy\n</code></pre>\n\n<p>It looks like it starts trying to build Piston and reports errors like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0433]: failed to resolve. Use of undeclared type or module `gfx`\n  --&gt; /Users/Simon/.cargo/registry/src/github.com-    1ecc6299db9ec823/piston2d-gfx_graphics-0.31.2/src/back_end.rs:31:10\n   |\n31 |     pos: gfx::VertexBuffer&lt;PositionFormat&gt;,\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `gfx`\n\nerror[E0433]: failed to resolve. Use of undeclared type or module     `gfx`\n  --&gt; /Users/Simon/.cargo/registry/src/github.com-    1ecc6299db9ec823/piston2d-gfx_graphics-0.31.2/src/back_end.rs:32:12\n   |\n32 |     color: gfx::VertexBuffer&lt;ColorFormat&gt;,\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `gfx`\n\nerror[E0433]: failed to resolve. Use of undeclared type or module `gfx`\n  --&gt; /Users/Simon/.cargo/registry/src/github.com-1ecc6299db9ec823/piston2d-gfx_graphics-0.31.2/src/back_end.rs:33:19\n   |\n33 |     blend_target: gfx::BlendTarget&lt;gfx::format::Srgba8&gt;,\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `gfx`\n\nerror[E0433]: failed to resolve. Use of undeclared type or module `gfx`\n  --&gt; /Users/Simon/.cargo/registry/src/github.com-1ecc6299db9ec823/piston2d-gfx_graphics-0.31.2/src/back_end.rs:33:36\n   |\n33 |     blend_target: gfx::BlendTarget&lt;gfx::format::Srgba8&gt;,\n   |                                    ^^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `gfx`\n\nerror[E0433]: failed to resolve. Use of undeclared type or module `gfx`\n  --&gt; /Users/Simon/.cargo/registry/src/github.com-1ecc6299db9ec823/piston2d-gfx_graphics-0.31.2/src/back_end.rs:34:21\n   |\n34 |     stencil_target: gfx::StencilTarget&lt;gfx::format::DepthStencil&gt;,\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `gfx`\n</code></pre>\n\n<p>How can I tell clippy to not build Piston and/or lint it? How can I just have it build my project and lint my code?</p>\n\n<p><code>cargo build</code> builds the project successfully from the same folder.</p>\n\n<p>I haven't dug deep into clippy's code, but I assumed it worked off an AST and didn't actually build the binaries... it seems I was incorrect?</p>\n"}]