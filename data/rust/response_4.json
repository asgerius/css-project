[{"tags": ["string-formatting", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 35, "last_activity_date": 1604501099, "last_edit_date": 1604501099, "creation_date": 1423093401, "answer_id": 28333723, "question_id": 28333612, "link": "https://stackoverflow.com/questions/28333612/how-can-i-append-a-formatted-string-to-an-existing-string/28333723#28333723", "title": "How can I append a formatted string to an existing String?", "body": "<p>I see now that <code>String</code> <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Write\" rel=\"nofollow noreferrer\">implements</a> <code>Write</code>, so we can use <a href=\"https://doc.rust-lang.org/std/macro.write.html\" rel=\"nofollow noreferrer\"><code>write!</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt::Write;\n\npub fn main() {\n    let mut a = &quot;hello &quot;.to_string();\n    write!(a, &quot;{}&quot;, 5).unwrap();\n\n    println!(&quot;{}&quot;, a);\n    assert_eq!(&quot;hello 5&quot;, a);\n}\n</code></pre>\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=31daf860b6bf06c8bc05890d27e399ca\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n<p>It <a href=\"https://github.com/rust-lang/rust/blob/1.47.0/library/alloc/src/string.rs#L2414-L2427\" rel=\"nofollow noreferrer\">is impossible for this <code>write!</code> call to return an <code>Err</code></a>, at least as of Rust 1.47, so the <code>unwrap</code> should not cause concern.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3543, "favorite_count": 2, "accepted_answer_id": 28333723, "answer_count": 1, "score": 30, "last_activity_date": 1604501099, "creation_date": 1423092767, "last_edit_date": 1507471740, "question_id": 28333612, "link": "https://stackoverflow.com/questions/28333612/how-can-i-append-a-formatted-string-to-an-existing-string", "title": "How can I append a formatted string to an existing String?", "body": "<p>Using <a href=\"http://doc.rust-lang.org/std/macro.format!.html\" rel=\"noreferrer\"><code>format!</code></a>, I can create a <code>String</code> from a format string, but what if I already have a <code>String</code> that I'd like to append to? I would like to avoid allocating the second string just to copy it and throw away the allocation.</p>\n\n<pre><code>let s = \"hello \".to_string();\nappend!(s, \"{}\", 5); // Doesn't exist\n</code></pre>\n\n<p>A close equivalent in C/C++ would be <a href=\"http://www.cplusplus.com/reference/cstdio/snprintf/\" rel=\"noreferrer\"><code>snprintf</code></a>. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1423061321, "post_id": 28323968, "comment_id": 44996222, "body": "<code>self.updater.update(self);</code> You should not even need to do this. Rust take a lot of inspiration from functional programming, I don&#39;t think you would like to have this design even in OO-heavy langauge like Java."}, {"owner": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1423061543, "post_id": 28323968, "comment_id": 44996380, "body": "Why do you need updater to be inside updatee."}, {"owner": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1423061688, "post_id": 28323968, "comment_id": 44996483, "body": "Also... you need to use explicit lifetimes... for such setup."}, {"owner": {"reputation": 284, "user_id": 646603, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa68f8225cd1ca525975e6c15c3885a1?s=128&d=identicon&r=PG", "display_name": "Moinonime", "link": "https://stackoverflow.com/users/646603/moinonime"}, "reply_to_user": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 1, "creation_date": 1423062767, "post_id": 28323968, "comment_id": 44997188, "body": "1) I need the updater to be inside the updatee because I iterator over them and call the <code>Updatee.update()</code> method. They update &quot;themselves&quot;, but I need the update mechanism (the updater) to be swappable i.e. some updatee have different update strategy.      2) I don&#39;t think you&#39;d need lifetimes for this, since updatee own the updater."}], "answers": [{"comments": [{"owner": {"reputation": 284, "user_id": 646603, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa68f8225cd1ca525975e6c15c3885a1?s=128&d=identicon&r=PG", "display_name": "Moinonime", "link": "https://stackoverflow.com/users/646603/moinonime"}, "edited": false, "score": 0, "creation_date": 1423068656, "post_id": 28326698, "comment_id": 45001359, "body": "Didn&#39;t think of using a wrapper, sure it&#39;s better than unsafe, but it still is ugly. It means I need a &quot;public&quot; <code>Updatee</code> and a &quot;private&quot; <code>_Updatee</code>. However if I want to allow external implementation of custom updaters, I would have to make both public... It&#39;s a good idea but it&#39;s a bummer that I have to go to this length to implement such a simple thing. Thanks!"}], "tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": true, "score": 4, "last_activity_date": 1423067968, "creation_date": 1423067968, "answer_id": 28326698, "question_id": 28323968, "link": "https://stackoverflow.com/questions/28323968/having-a-child-modify-its-parent/28326698#28326698", "title": "Having a child modify its parent", "body": "<p>The reason you are getting the \"already borrowed\" error is because you are trying to pass the <code>Updater</code> to its <code>update</code> method twice, once as <code>self</code>, and once embedded inside of <code>updatee</code>. For memory safety reasons, Rust doesn't allow that.</p>\n\n<p>The simplest solution would be to pass to <code>update</code> a reference to the field in <code>Updatee</code> that needs to be updated rather than the entire <code>Updatee</code>:</p>\n\n<pre><code>impl Updater {\n    fn update(&amp;mut self, updatee_value: &amp;mut u64) {\n        self.value = self.value + 1;\n        *updatee_value = self.value;\n    }\n}\n</code></pre>\n\n<p>If multiple fields need to be updated, <code>Updatee</code> could be transformed into a wrapper around the <code>Updater</code> and another struct that holds the fields with the actual data, which could be safely passed to <code>update</code>.</p>\n"}], "owner": {"reputation": 284, "user_id": 646603, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa68f8225cd1ca525975e6c15c3885a1?s=128&d=identicon&r=PG", "display_name": "Moinonime", "link": "https://stackoverflow.com/users/646603/moinonime"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "accepted_answer_id": 28326698, "answer_count": 1, "score": 1, "last_activity_date": 1423067968, "creation_date": 1423060481, "last_edit_date": 1423061002, "question_id": 28323968, "link": "https://stackoverflow.com/questions/28323968/having-a-child-modify-its-parent", "title": "Having a child modify its parent", "body": "<p>I want to have a child struct modify its parent struct.\nExample:</p>\n\n<pre><code>// Problem: Having a struct's field modify the struct in which the field is.\n\n// MUST NOT be copyable nor clonable\nstruct Updatee {\n    value: u64,\n    updater: Updater\n}\n\nimpl Updatee {\n    fn update(&amp;mut self) {\n        // ERROR: cannot borrow `*self` as mutable more than once at a time\n        self.updater.update(self);\n    }\n}\n\n// MUST NOT be copyable nor clonable\nstruct Updater {\n    value: u64\n}\n\nimpl Updater {\n    fn update(&amp;mut self, updatee: &amp;mut Updatee) {\n        self.value = self.value + 1;\n        updatee.value = self.value;\n    }\n}\n\nfn main() {\n    let updater = Updater { value: 0 };\n    let updatee = Updatee { value: 0, updater: updater };\n\n    updatee.update();\n    updatee.update();\n\n    assert_eq!(2, updatee.value);\n}\n</code></pre>\n\n<p>I'm sure it can be done with unsafe blocks, but is there an alternative?<br>\nPerhaps my code is not idiomatic?</p>\n"}, {"tags": ["coding-style", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 4, "creation_date": 1423046967, "post_id": 28318886, "comment_id": 44987536, "body": "You haven&#39;t clearly defined what&#39;s going on; what happens to <code>B</code>s that aren&#39;t preceeded by <code>A</code>s?  What about <code>AandB</code>s that are already there?  Also, do you want the transformation to happen <i>within</i> the <code>Vec</code>, or is allocating a new one OK?"}, {"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1423055235, "post_id": 28318886, "comment_id": 44992168, "body": "sorry! I just want to combine A followed by B. AandBs should be ignored if already present. the transformation should work on the vector directly!"}, {"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1423131159, "post_id": 28318886, "comment_id": 45027289, "body": "done! thank you for your huge time investment into my problem!"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 3, "last_activity_date": 1423064069, "last_edit_date": 1423064069, "creation_date": 1423053778, "answer_id": 28321719, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place/28321719#28321719", "title": "How do I partially fold a Vec in place?", "body": "<p>Not sure if this counts as idiomatic, but the <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow\">itertools</a> library has the <code>batching()</code> function for all iterators. Combined with <code>peek()</code> from the standard library, you get your result in one iteration instead of two.</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\nuse Thing::*;\n\n#[derive(PartialEq, Debug)]\nenum Thing { A, B, AandB }\nfn combine(v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    v.into_iter().peekable().batching(|mut it| {\n        match it.next() {\n            Some(A) =&gt; {\n                if Some(&amp;B) == it.peek() {\n                    it.next();\n                    Some(AandB)\n                } else {\n                    Some(A)\n                }\n            }\n            x =&gt; x,\n        }\n    }).collect()\n}\n\nfn main() {\n    let v = vec![A, B, A, A, A, B, B, A];\n    assert_eq!(\n        vec![AandB, A, A, AandB, B, A],\n        combine(v)\n    );\n}\n</code></pre>\n\n<p>obviously <code>collect()</code> <a href=\"http://doc.rust-lang.org/src/collections/vec.rs.html#1396-1406\" rel=\"nofollow\">will allocate a new buffer</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1423060753, "post_id": 28322705, "comment_id": 44995850, "body": "thank you very much! this will surely work and be fast, but it&#39;s not idiomatic rust in any way :p thanks anyway!!"}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1423056693, "creation_date": 1423056693, "answer_id": 28322705, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place/28322705#28322705", "title": "How do I partially fold a Vec in place?", "body": "<p>I suspect there is no easy way to do that with iterators, but nobody lays embargo on plain old c-style:</p>\n\n<pre><code>#[derive(PartialEq, Debug, Copy)]\nenum Thing { A, B, AandB }\nfn combine(mut v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    let mut prev: Option&lt;Thing&gt; = None;\n    let mut end = 0;\n    for i in 0 .. v.len() {\n        let el = v[i];\n        match (el, prev) {\n            (Thing::B, Some(Thing::A)) =&gt; {\n                end = end - 1;\n                v[end] = Thing::AandB\n            },\n            _ =&gt; \n                v[end] = el\n        };\n        prev = Some(el);\n        end = end + 1;\n    }\n\n    v.truncate(end);\n    v\n}\n\nfn main() {\n     let v = vec![Thing::A, Thing::A, Thing::B, Thing::AandB, Thing::B, Thing::A];\n     assert_eq!(vec![Thing::A, Thing::AandB, Thing::AandB, Thing::B, Thing::A], combine(v));\n}\n</code></pre>\n\n<p>Here is one pass with direct transformations.</p>\n"}, {"comments": [{"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 2, "creation_date": 1423077959, "post_id": 28324807, "comment_id": 45006743, "body": "this is very beautiful rust code, thank you! I really like how elegant the language is sometimes!"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423222877, "post_id": 28324807, "comment_id": 45071215, "body": "you can get rid of the mutable variable r by making inner return a Vec&lt;Thing&gt; and passing res by mutable value. Playpen: <a href=\"http://is.gd/4cMULe\" rel=\"nofollow noreferrer\">is.gd/4cMULe</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1423252774, "post_id": 28324807, "comment_id": 45087964, "body": "@ker turns out that pair code-golfing is the best kind of code-golfing! ^_^ Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1423252745, "last_edit_date": 1423252745, "creation_date": 1423062916, "answer_id": 28324807, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place/28324807#28324807", "title": "How do I partially fold a Vec in place?", "body": "<p>Here's a solution that uses recursion and pattern-matching. I'm pretty sure the recursion is tail-recursion, and so could be turned into iteration.</p>\n\n<pre><code>use Thing::*;\n\n#[derive(Copy,Clone,PartialEq,Debug)]\nenum Thing { A, B, AandB }\n\nfn combine(v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    fn inner(mut res: Vec&lt;Thing&gt;, s: &amp;[Thing]) -&gt; Vec&lt;Thing&gt; {\n        match s {\n            [A, B, tail..] =&gt; {\n                res.push(AandB);\n                inner(res, tail)\n            },\n            [a, tail..] =&gt; {\n                res.push(a);\n                inner(res, tail)\n            },\n            [] =&gt; res,\n        }\n    };\n\n    inner(Vec::new(), &amp;v)\n}\n\nfn main() {\n    let v = vec![A, A, B, AandB, B, A];\n    assert_eq!(vec![A, AandB, AandB, B, A], combine(v));\n\n    let v = vec![A, A, B, AandB, B, A, B, A, B];\n    assert_eq!(vec![A, AandB, AandB, B, AandB, AandB], combine(v));\n\n    let v = vec![A, A, B, AandB, B, A, B, A, A];\n    assert_eq!(vec![A, AandB, AandB, B, AandB, A, A], combine(v));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1423077910, "post_id": 28326123, "comment_id": 45006725, "body": "impressive! this meets the requirements by 100%! thank you very much!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1423672164, "last_edit_date": 1423672164, "creation_date": 1423066489, "answer_id": 28326123, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place/28326123#28326123", "title": "How do I partially fold a Vec in place?", "body": "<p>I merged swizard's answer and Shepmaster's answer and ended up with an in-place solution that runs through the vector recursively, has only the vector as a mutable and never moves anything twice. No guarantees on runtime or idiomaticity ;)</p>\n\n<pre><code>use Thing::*;\nuse std::cmp::min;\n\n#[derive(Copy,Clone,PartialEq,Debug)]\nenum Thing { A, B, AandB}\n\nfn combine(mut v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    fn inner(res: &amp;mut Vec&lt;Thing&gt;, i: usize, backshift: usize) {\n        match &amp;res[i..min(i+2, res.len())] {\n            [A, B] =&gt; {\n                res[i - backshift] = AandB;\n                inner(res, i + 2, backshift + 1);\n            },\n            [a, ..] =&gt; {\n                res[i - backshift] = a;\n                inner(res, i + 1, backshift);\n            },\n            [] =&gt; res.truncate(i - backshift),\n        }\n    };\n\n    inner(&amp;mut v, 0, 0);\n    v\n}\n\nfn main() {\n     let v = vec![A, A, B, AandB, B, A, B, A, B];\n     assert_eq!(vec![A, AandB, AandB, B, AandB, AandB], combine(v));\n     let v = vec![A, A, B, AandB, B, A, B, A, A];\n     assert_eq!(vec![A, AandB, AandB, B, AandB, A, A], combine(v));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1423079122, "creation_date": 1423079122, "answer_id": 28330081, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place/28330081#28330081", "title": "How do I partially fold a Vec in place?", "body": "<p>Okay, here is an idiomatic version then without explicit for-loops and recursion :)</p>\n\n<pre><code>#[derive(PartialEq, Debug, Copy)]\nenum Thing { A, B, AandB }\nfn combine(mut v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    let (_, total) = (0 .. v.len()).fold((None, 0), |&amp;mut: (prev, end), i| {\n        let el = v[i];\n        let (next, item) = match (el, prev) {\n            (Thing::B, Some(Thing::A)) =&gt; (end, Thing::AandB),\n            _ =&gt; (end + 1, el),\n        };\n        v[next - 1] = item;\n        (Some(el), next)\n    });\n\n    v.truncate(total);\n    v\n}\n\nfn main() {\n     let v = vec![Thing::A, Thing::A, Thing::B, Thing::AandB, Thing::B, Thing::A];\n     assert_eq!(vec![Thing::A, Thing::AandB, Thing::AandB, Thing::B, Thing::A], combine(v));\n}\n</code></pre>\n"}], "owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 167, "favorite_count": 0, "accepted_answer_id": 28326123, "answer_count": 5, "score": 3, "last_activity_date": 1423687928, "creation_date": 1423045315, "last_edit_date": 1423687928, "question_id": 28318886, "link": "https://stackoverflow.com/questions/28318886/how-do-i-partially-fold-a-vec-in-place", "title": "How do I partially fold a Vec in place?", "body": "<p>I would like to walk through a Vec and combine some elements of it. How do I do that in <strong>idiomatic</strong> Rust?</p>\n\n<h3>Example:</h3>\n\n<pre><code>#[derive(PartialEq, Debug)]\nenum Thing { A, B, AandB }\nfn combine(v: Vec&lt;Thing&gt;) -&gt; Vec&lt;Thing&gt; {\n    // idiomatic code here\n}\n\nfn main() {\n     let v = vec![Thing::A, Thing::B];\n     assert_eq!(vec![Thing::AandB], combine(v));\n}\n</code></pre>\n\n<h3>How I would do it:</h3>\n\n<p>Traverse the Vec with Iterator::scan and replace all occurrences of Thing::B with Thing::AandB if Thing::A was the element before. Then I would traverse it again and remove all Thing::As before Thing::AandB.</p>\n\n<p>This seems super complicated and inelegant.</p>\n"}, {"tags": ["generics", "recursion", "rust", "traits", "associated-types"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1423040385, "post_id": 28316788, "comment_id": 44983440, "body": "I believe the problem is that the compiler has no way of determining the type of <code>N</code> in the call to <code>inputs</code>.  You&#39;ve told it that it has to implement <code>Node</code>, but I can&#39;t see any way for it to work out an actual <i>concrete</i> type.  I tried adding an <code>N</code> parameter to <code>output_requested</code>, but then it can&#39;t unify the two different <code>Output</code>s this creates.  Honestly, without a more concrete idea of what you&#39;re trying to do, I don&#39;t know how to fix it."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1423041053, "post_id": 28316788, "comment_id": 44983844, "body": "To further clarify: the problem I can&#39;t find a way around is convincing the compiler that the result of the addition is the same type as <code>*a</code>.  This is <i>much</i> easier to see if you change <code>type Output</code> to something else, say <code>type NodeOut</code>.  Then, the <code>Output</code> you see in the error is talking about <code>Add::Output</code>."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423042206, "post_id": 28316788, "comment_id": 44984564, "body": "could it have something todo with object safety? <a href=\"http://is.gd/SFNNCM\" rel=\"nofollow noreferrer\">is.gd/SFNNCM</a>"}, {"owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1423046199, "post_id": 28316788, "comment_id": 44987060, "body": "@DK. Ahhh. First, to clarify, all inputs should have the same <code>Output</code> type as <code>Self</code>. I was under the impression that the <code>N: Node&lt;Output = &lt;Self as Node&gt;::Output&gt;</code> is equivalent to saying that <code>N</code>&#39;s <code>Output</code> type must be the same as <code>Self</code>&#39;s <code>Output</code> type (and considering that type is constrained by <code>Float</code> it should be fine to add and assign)? Perhaps what I&#39;m really after is <code>where &lt;N as Node&gt;::Buffer = &lt;Self as Node&gt;::Buffer</code> which is still unimplemented?   Btw, <code>output_requested</code> can be overridden to mutate the <code>output</code> arg in different ways, however by default it just sums all inputs."}, {"owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423046445, "post_id": 28316788, "comment_id": 44987221, "body": "@ker I don&#39;t think that&#39;s the case, as <code>self.inputs()</code> returns a vector of generic type <code>N: Node</code> (not trait objects)."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1423051782, "creation_date": 1423051782, "answer_id": 28321025, "question_id": 28316788, "link": "https://stackoverflow.com/questions/28316788/error-when-writing-a-recursive-trait-method-with-an-associated-type-as-an-argume/28321025#28321025", "title": "Error when writing a recursive trait method with an associated type as an argument", "body": "<p>First of all: given an object <code>x</code> implementing <code>Node</code>, <code>x.inputs()</code> takes a generic parameter <code>N</code> and returns <code>Vec&lt;&amp;mut N&gt;</code>.</p>\n\n<p>Now let\u2019s write out a more explicitly typed version of what\u2019s happening in <code>output_requested</code>.</p>\n\n<p>(Incidentally, with the fancy new <code>IntoIterator</code> basis of the <code>for</code> loop, the <code>.into_iter()</code> is no longer necessary.)</p>\n\n<pre><code>fn output_requested(&amp;mut self, output: &amp;mut &lt;Self as Node&gt;::Output) {\n    let inputs: Vec&lt;&amp;mut N&gt; = self.inputs();\n    for input in inputs {  // input: &amp;mut N\n        let mut working: &lt;Self as Node&gt;::Output = Default::default();\n        input.output_requested(&amp;mut working);\n        *output = *output + working;\n    }\n}\n</code></pre>\n\n<p>Well, then; what can we figure about this type <code>N</code>? Can we resolve it?</p>\n\n<ul>\n<li><p>It came from <code>self.inputs()</code>, introducing the constraint that it implements <code>Node&lt;Output = &lt;Self as Node&gt;::Output&gt;</code>;</p></li>\n<li><p>On the object, you called the method <code>self.output_requested(&amp;mut &lt;Self as Node&gt;::Output)</code>, which only confirms the previous point.</p></li>\n</ul>\n\n<p>So all we know about this <code>N</code> is that it implements <code>Node</code> with the same <code>Output</code> as our type. But that could be two completely different types, like this:</p>\n\n<pre><code>impl Node for A {\n    type Output = Out;\n    \u2026\n}\n\nimpl Node for B {\n    type Output = Out;\n    \u2026\n}\n</code></pre>\n\n<p>Thus you can see that it is not possible to determine what <code>N</code> is; it can always be <code>Self</code>, but there may be other possibilities as well, and so it cannot be resolved statically and is forbidden.</p>\n"}], "owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 213, "favorite_count": 0, "accepted_answer_id": 28321025, "answer_count": 1, "score": 1, "last_activity_date": 1423051782, "creation_date": 1423038729, "question_id": 28316788, "link": "https://stackoverflow.com/questions/28316788/error-when-writing-a-recursive-trait-method-with-an-associated-type-as-an-argume", "title": "Error when writing a recursive trait method with an associated type as an argument", "body": "<p>I've been updating a library to use Rust's new associated types. The library offers a <code>Node</code> trait for constructing a DSP graph. Below is a simplified version of the trait that produces the same error I'm running into in my library.</p>\n\n<pre><code>use std::default::Default;\nuse std::num::Float;\n\ntrait Node {\n    type Output: Default + Float;\n\n    fn inputs&lt;N&gt;(&amp;mut self) -&gt; Vec&lt;&amp;mut N&gt;\n        where\n            N: Node&lt;Output = &lt;Self as Node&gt;::Output&gt;;\n\n    fn output_requested(&amp;mut self, output: &amp;mut &lt;Self as Node&gt;::Output) {\n        for input in self.inputs().into_iter() {\n            let mut working: &lt;Self as Node&gt;::Output = Default::default();\n            input.output_requested(&amp;mut working);\n            //    ^~~~~ ERROR\n            *output = *output + working;\n        }\n    }\n\n}\n\nfn main() {}\n</code></pre>\n\n<p>Here's the error message</p>\n\n<pre><code>&lt;anon&gt;:15:19: 15:49 error: the type of this value must be known in this context\n&lt;anon&gt;:15             input.output_requested(&amp;mut working);\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p><a href=\"http://is.gd/xm0wvS\" rel=\"nofollow\">Playpen link - http://is.gd/xm0wvS</a></p>\n\n<p>Considering that <code>self.inputs()</code> returns <code>N</code> where <code>N: Node&lt;Output = &lt;Self as Node&gt;::Output&gt;</code>, I'm under the impression rustc should have enough type information about <code>input</code> to satisfy the call to the <code>output_requested</code> method?</p>\n\n<p>Any help greatly appreciated!</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 7, "creation_date": 1499651918, "post_id": 28312049, "comment_id": 76979603, "body": "Perhaps this has changed, but <code>SliceConcatExt</code> is nightly-only."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 5, "creation_date": 1501258189, "post_id": 28312049, "comment_id": 77717481, "body": "@Evert The trait is marked unstable, but its methods are stable so you can use them. You don&#39;t need to explicitly <code>use</code> the trait because it&#39;s in the prelude."}, {"owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516296763, "post_id": 28312049, "comment_id": 83639708, "body": "@shepmaster Is there an iterator equivalent that doesn&#39;t require me to collect the vector first?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "edited": false, "score": 1, "creation_date": 1516297271, "post_id": 28312049, "comment_id": 83640011, "body": "@StevePowell <a href=\"https://stackoverflow.com/q/36941851/155423\">What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?</a>."}, {"owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516561847, "post_id": 28312049, "comment_id": 83727972, "body": "@shepmaster If I read your &#39;reply&#39; correctly, there is a <code>join</code> in <code>itertools</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "edited": false, "score": 1, "creation_date": 1516562007, "post_id": 28312049, "comment_id": 83728040, "body": "@StevePowell yes. Comments are ephemeral, Q&amp;A are not. Linking to an answer with examples is better for the site and all future visitors instead of putting random answers in a comment that will be deleted. Q&amp;A can be upvoted to let future people know that an answer was useful and encourage more participation in the site.."}, {"owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1516660350, "post_id": 28312049, "comment_id": 83770616, "body": "Thank you @shepmaster.  Unfortunately, your unadorned reference to another answer was rather cryptic, so it was not at all clear which part of that answer was relevant.  Though your comments, corrections and answers are invariably excellent your style is condescending and off-putting."}, {"owner": {"reputation": 2384, "user_id": 102315, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/c8b935f2e5d916f361ffe33fe94a3d10?s=128&d=identicon&r=PG", "display_name": "Alper", "link": "https://stackoverflow.com/users/102315/alper"}, "edited": false, "score": 0, "creation_date": 1608366377, "post_id": 28312049, "comment_id": 115566034, "body": "<code>join</code> does not work on the empty char literal?"}], "tags": [], "owner": {"reputation": 6154, "user_id": 3447502, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/G5H93.png?s=128&g=1", "display_name": "MatthewG", "link": "https://stackoverflow.com/users/3447502/matthewg"}, "is_accepted": true, "score": 206, "last_activity_date": 1593658647, "last_edit_date": 1593658647, "creation_date": 1423013936, "answer_id": 28312049, "question_id": 28311868, "link": "https://stackoverflow.com/questions/28311868/what-is-the-equivalent-of-the-join-operator-over-a-vector-of-strings/28312049#28312049", "title": "What is the equivalent of the join operator over a vector of Strings?", "body": "<p>In Rust 1.3.0 and later, <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.join\" rel=\"noreferrer\"><code>join</code></a> is available:</p>\n<pre><code>fn main() {\n    let string_list = vec![&quot;Foo&quot;.to_string(),&quot;Bar&quot;.to_string()];\n    let joined = string_list.join(&quot;-&quot;);\n    assert_eq!(&quot;Foo-Bar&quot;, joined);\n}\n</code></pre>\n<p>Before 1.3.0 this method was called <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.connect\" rel=\"noreferrer\"><code>connect</code></a>:</p>\n<pre><code>let joined = string_list.connect(&quot;-&quot;);\n</code></pre>\n<p>Note that you do not need to import anything since the methods are automatically imported by the <a href=\"https://doc.rust-lang.org/std/prelude/index.html\" rel=\"noreferrer\">standard library prelude</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 15722, "user_id": 284318, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1e0588e345236881aff23040eb1d5dc3?s=128&d=identicon&r=PG", "display_name": "Danilo Bargen", "link": "https://stackoverflow.com/users/284318/danilo-bargen"}, "is_accepted": false, "score": 25, "last_activity_date": 1497274907, "last_edit_date": 1497274907, "creation_date": 1448494078, "answer_id": 33928203, "question_id": 28311868, "link": "https://stackoverflow.com/questions/28311868/what-is-the-equivalent-of-the-join-operator-over-a-vector-of-strings/33928203#33928203", "title": "What is the equivalent of the join operator over a vector of Strings?", "body": "<p>As mentioned by Wilfred, <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.connect\" rel=\"noreferrer\"><code>SliceConcatExt::connect</code></a> has been deprecated since version 1.3.0 in favour of <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.join\" rel=\"noreferrer\"><code>SliceConcatExt::join</code></a>:</p>\n\n<pre><code>let joined = string_list.join(\"-\");\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1530794647, "post_id": 51191466, "comment_id": 89364787, "body": "Users of this code should be aware that it allocates a potentially large string just to throw it away. It is more efficient to write the strings directly to the output. See also <a href=\"https://stackoverflow.com/q/36941851/155423\">What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?</a>, <a href=\"https://stackoverflow.com/q/26644486/155423\">In Rust, what is the best way to print something between each value in a container?</a>."}, {"owner": {"reputation": 845, "user_id": 5066426, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6FyRF.jpg?s=128&g=1", "display_name": "Nick Linker", "link": "https://stackoverflow.com/users/5066426/nick-linker"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1530795144, "post_id": 51191466, "comment_id": 89365148, "body": "Understandable, although the question was about the <code>join</code>, not the ways how to optimize the formatting algorithm, no?"}, {"owner": {"reputation": 95, "user_id": 1587961, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/55b0b385d1db6be95aa4832815970e3a?s=128&d=identicon&r=PG", "display_name": "murlakatamenka", "link": "https://stackoverflow.com/users/1587961/murlakatamenka"}, "edited": false, "score": 6, "creation_date": 1569257425, "post_id": 51191466, "comment_id": 102529891, "body": "<code>collect</code> + <code>join</code> is faster and adds no dependencies, see this <a href=\"https://gist.github.com/green-s/fbd0d374b290781ac9b3f8ff03e3245d\" rel=\"nofollow noreferrer\">gist</a> for a benchmark"}], "tags": [], "owner": {"reputation": 845, "user_id": 5066426, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6FyRF.jpg?s=128&g=1", "display_name": "Nick Linker", "link": "https://stackoverflow.com/users/5066426/nick-linker"}, "is_accepted": false, "score": 11, "last_activity_date": 1530796122, "last_edit_date": 1530796122, "creation_date": 1530794097, "answer_id": 51191466, "question_id": 28311868, "link": "https://stackoverflow.com/questions/28311868/what-is-the-equivalent-of-the-join-operator-over-a-vector-of-strings/51191466#51191466", "title": "What is the equivalent of the join operator over a vector of Strings?", "body": "<p>There is a function from the <a href=\"https://crates.io/crates/itertools/\" rel=\"noreferrer\"><code>itertools</code></a> crate also called <a href=\"https://docs.rs/itertools/0.7.8/itertools/fn.join.html\" rel=\"noreferrer\"><code>join</code></a> which joins an iterator:</p>\n\n<pre><code>extern crate itertools; // 0.7.8\n\nuse itertools::free::join;\nuse std::fmt;\n\npub struct MyScores {\n    scores: Vec&lt;i16&gt;,\n}\n\nimpl fmt::Display for MyScores {\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        fmt.write_str(\"MyScores(\")?;\n        fmt.write_str(&amp;join(&amp;self.scores[..], &amp;\",\"))?;\n        fmt.write_str(\")\")?;\n        Ok(())\n    }\n}\n\nfn main() {\n    let my_scores = MyScores {\n        scores: vec![12, 23, 34, 45],\n    };\n    println!(\"{}\", my_scores); // outputs MyScores(12,23,34,45)\n}\n</code></pre>\n"}], "owner": {"reputation": 4348, "user_id": 173787, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0d59a32fa490017d6457aec0e917aced?s=128&d=identicon&r=PG", "display_name": "Davide Aversa", "link": "https://stackoverflow.com/users/173787/davide-aversa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87902, "favorite_count": 10, "accepted_answer_id": 28312049, "answer_count": 3, "score": 159, "last_activity_date": 1593658647, "creation_date": 1423012799, "last_edit_date": 1559130900, "question_id": 28311868, "link": "https://stackoverflow.com/questions/28311868/what-is-the-equivalent-of-the-join-operator-over-a-vector-of-strings", "title": "What is the equivalent of the join operator over a vector of Strings?", "body": "<p>I wasn't able to find the Rust equivalent for the \"join\" operator over a vector of <code>String</code>s. I have a <code>Vec&lt;String&gt;</code> and I'd like to join them as a single <code>String</code>:</p>\n\n<pre><code>let string_list = vec![\"Foo\".to_string(),\"Bar\".to_string()];\nlet joined = something::join(string_list,\"-\");\nassert_eq!(\"Foo-Bar\", joined);\n</code></pre>\n\n<p>Related:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust\">What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?</a></li>\n</ul>\n"}, {"tags": ["parsing", "rust", "interpreter", "lexical-analysis"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422988484, "post_id": 28306185, "comment_id": 44963414, "body": "Welcome to Stack Overflow! While interesting, this question has a very <b>broad</b> set of answers that might hinge on the <b>opinion</b> of the answerer. You should read through <a href=\"http://stackoverflow.com/help/how-to-ask\">how to ask a question</a> to get a sense of what is and is not a good fit for this site. For this specific question, I&#39;d suggest showing us <b>example code</b> that you have with concrete questions about why it doesn&#39;t do what you want."}], "owner": {"reputation": 21, "user_id": 4525398, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c5f667919c9217a32e957cdd2e912b1d?s=128&d=identicon&r=PG", "display_name": "rookwood101", "link": "https://stackoverflow.com/users/4525398/rookwood101"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 610, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1466410973, "creation_date": 1422988224, "last_edit_date": 1466410973, "question_id": 28306185, "link": "https://stackoverflow.com/questions/28306185/data-structure-to-store-token-properties", "title": "Data Structure to store Token Properties", "body": "<p>I am writing an interpreter for a mathematical language in Rust which is intended to be used to solve mathematical expressions.</p>\n\n<p>When <strong>lexing</strong>, the program needs to know based on the characters used in a token, what type of token it is (for example is it a function or an operator).</p>\n\n<p>Currently I use an enumeration to represent a type of token:</p>\n\n<pre><code>pub enum IdentifierType {\n    Function,\n    Variable,\n    Operator,\n    Integer,\n}\n</code></pre>\n\n<p>To check the type of a token I use a function which takes an <code>IdentifierType</code> as input and matches based on input to return a <code>bool</code>. The data structures that could be used in this case are relatively simple as tokens only have a single property: allowed characters.</p>\n\n<p>When <strong>parsing</strong> to an Abstract Syntax Tree (AST), I would like to know what specific operator or function is being used based on a token and to be able to add a reference to that operator and its associated functions to the AST.</p>\n\n<p>When <strong>interpreting</strong>, I would like to be able to call execute on a node and have it know how to perform its own function.</p>\n\n<p>I have tried to come up with a solution to store all of these related items, but none that I have encountered as felt satisfactory.</p>\n\n<p>For example I stored all of the operators in a TOML file (a type of configuration file that maps to a hash table) but storing enumerations (values that are constrained) is difficult and there is no way to store an operators function. I also want to be able to search by multiple keys, such as operator associativity (e.g. get all operators that are right associative), which means storing within source code is not very satisfactory.</p>\n\n<p>Other possible ideas I have had are using some kind of SQL hybrid system, however that seems tough to implement</p>\n"}, {"tags": ["casting", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422986907, "post_id": 28305478, "comment_id": 44962641, "body": "Please create an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, ideally one that runs on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playpen</a>. This lets us help you with very little friction, making it more likely that you will get a timely and good response."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422987239, "post_id": 28305478, "comment_id": 44962820, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27441224/dividing-a-const-by-a-generic-in-rust\">Dividing a const by a generic in Rust</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422987536, "post_id": 28305478, "comment_id": 44962955, "body": "Here&#39;s <a href=\"http://is.gd/g4ZXKh\" rel=\"nofollow noreferrer\">an example of a <b>M</b>CVE</a>"}], "answers": [{"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1566557805, "creation_date": 1566557805, "answer_id": 57624916, "question_id": 28305478, "link": "https://stackoverflow.com/questions/28305478/avoid-casting-floating-point-constant/57624916#57624916", "title": "Avoid casting floating point constant", "body": "<p>When you have a generic function with a type parameter, such as <code>T</code>, <em>you don't get to choose the type</em>. The type is forced on you by the caller of the function.</p>\n\n<p>The error here is that you're trying to assign a specific <code>f32</code>/<code>f64</code> type to a type <code>T</code>, which could be <em>anything</em> that implements <code>Float</code>. </p>\n\n<p>You know in practice it's going to be either one of the floating-point types, but theoretically the type system won't stop someone from implementing <code>Float</code> on a string or an array, or a tuple of two function pointers, or any other bizarre thing that can't be assigned a float. When the compiler can't guarantee it'll always work, including in theory in the future, then it won't accept it.</p>\n\n<p>If you want to assign a float value to <code>T</code>, you have to declare that this operation is possible, e.g. by adding <code>f32: Into&lt;T&gt;</code>, and using <code>180f32.into()</code>. </p>\n"}], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 129, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1566557805, "creation_date": 1422985857, "last_edit_date": 1422987341, "question_id": 28305478, "link": "https://stackoverflow.com/questions/28305478/avoid-casting-floating-point-constant", "title": "Avoid casting floating point constant", "body": "<p>I'm creating cargo that (among other things) will implement idiomatic angle measurment. When creating methods to convert between angle units I've found problem:</p>\n\n<pre><code>impl&lt;T&gt; Angle&lt;T&gt;\nwhere T: Float {\n    pub fn to_deg(self) -&gt; Self {\n        Deg(match self {\n            Rad(v) =&gt;  v * cast(180.0 / f64::consts::PI).unwrap(),\n            Deg(v) =&gt;  v,\n            Grad(v) =&gt; v * cast(180.0 / 200.0).unwrap() // how to get rid of this cast?\n        })\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/AIg28a\" rel=\"nofollow\">Runnable</a></p>\n\n<p>The cast of <code>180.0 / 200.0</code> seem really unneded for me? Is there any way to get rid of this?</p>\n\n<p>When I delete cast then I get:</p>\n\n<pre><code>src/angles.rs:42:28: 42:33 error: mismatched types:\n expected `T`,\n    found `_`\n(expected type parameter,\n    found floating-point variable) [E0308]\nsrc/angles.rs:42             Grad(v) =&gt; v * 180.0 / 200.0\n                                            ^~~~~\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422974592, "post_id": 28300742, "comment_id": 44954499, "body": "Why do you need to share the socket between the threads? Could you get away with just transferring the read lines between threads?"}, {"owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423003579, "post_id": 28300742, "comment_id": 44971369, "body": "@Shepmaster   \t  \t In reality I&#39;m just trying to share a socket between a thread and a function. Could I just share the ownership of the socket using an Arc?"}, {"owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423012092, "post_id": 28300742, "comment_id": 44974118, "body": "I have a working example. I just made a thread for each function and passed the sockets. Seems to work fairly well. :)"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1422974805, "creation_date": 1422974805, "answer_id": 28301708, "question_id": 28300742, "link": "https://stackoverflow.com/questions/28300742/how-do-i-share-a-socket-between-a-thread-and-a-function/28301708#28301708", "title": "How do I &quot;share&quot; a socket between a thread and a function?", "body": "<p>It depends on what you're actually doing with the socket and the standard input and how you interleave them.</p>\n\n<p>The cleanest way is to use channels to pass the data between threads:</p>\n\n<pre><code>use std::old_io as io;\nuse std::old_io::net::tcp::TcpStream;\nuse std::sync::mpsc::channel;\nuse std::thread::Thread;\n\nfn main() {\n    let (tx, rx) = channel::&lt;Vec&lt;u8&gt;&gt;();\n    let g = Thread::scoped(move || {\n        let mut s = TcpStream::connect(\"example.com:80\").unwrap();\n        println!(\"&gt; Opened connection, waiting for input\");\n        let query = rx.recv().unwrap();\n        s.write(&amp;query).unwrap();\n        s.close_write();\n\n        let r = String::from_utf8(s.read_to_end().unwrap()).unwrap();\n        println!(\"Response:\\n{}\", r);\n    });\n\n    let mut data = Vec::new();\n    for line in io::stdin().lock().lines() {\n        let line = line.unwrap();\n        if line.trim().is_empty() { break; }\n        data.push_all(line.trim().as_bytes());\n        data.push_all(b\"\\r\\n\");\n    }\n    data.push_all(b\"\\r\\n\");\n    tx.send(data).unwrap();\n\n    println!(\"Waiting for response...\");\n}\n</code></pre>\n\n<p>There is a <a href=\"http://doc.rust-lang.org/std/old_io/net/tcp/struct.TcpStream.html#method.clone\" rel=\"nofollow\"><code>clone()</code></a> method on <code>TcpStream</code> which \"splits\" the socket into two. You can pass them into different threads. Consider using channels first, however.</p>\n"}], "owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1178, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1423008210, "creation_date": 1422971939, "last_edit_date": 1423008210, "question_id": 28300742, "link": "https://stackoverflow.com/questions/28300742/how-do-i-share-a-socket-between-a-thread-and-a-function", "title": "How do I &quot;share&quot; a socket between a thread and a function?", "body": "<p>I'm trying to get user input from stdin whilst receiving data from a socket. Then I want to send the user input to the socket. How can I pass the socket to a thread that is able to send and read whilst having the main function reading from stdin and sending it to the socket. This function does not need to be able to read from the socket. \nI would prefer being able to use a BufferedStream as my socket reader. <br>\nThread receives and sends -(while)- function gets input from stdin and sends to socket.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1422972749, "post_id": 28300888, "comment_id": 44953281, "body": "Your answer is wrong: <code>c</code> stores an alias to <code>a</code>.  <code>*b</code> is <b>not</b> a stack temporary, it&#39;s an rvalue alias to <code>a</code>.  This can be verified with a short program: <a href=\"http://is.gd/CLu5WQ\" rel=\"nofollow noreferrer\">is.gd/CLu5WQ</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1422972767, "post_id": 28300888, "comment_id": 44953298, "body": "&quot;c borrows a temporary stack allocated object&quot; This really surprised me and I went to check it out. See <a href=\"http://is.gd/fmergJ\" rel=\"nofollow noreferrer\">here</a>. It means that no, <code>c</code> borrows <code>a</code> and not the copy of <code>a</code>. Otherwise it would be quite confusing."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1422972931, "post_id": 28300888, "comment_id": 44953393, "body": "i forgot about rvalue references :/"}, {"owner": {"reputation": 2910, "user_id": 1329147, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/bb27892c2e4adec367d862a16db8389c?s=128&d=identicon&r=PG", "display_name": "Amos", "link": "https://stackoverflow.com/users/1329147/amos"}, "edited": false, "score": 0, "creation_date": 1422973773, "post_id": 28300888, "comment_id": 44953946, "body": "In my second issue I was asking why Box can be mutated without something like Box::new_mut(8us);"}, {"owner": {"reputation": 2910, "user_id": 1329147, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/bb27892c2e4adec367d862a16db8389c?s=128&d=identicon&r=PG", "display_name": "Amos", "link": "https://stackoverflow.com/users/1329147/amos"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1422973835, "post_id": 28300888, "comment_id": 44953984, "body": "@DK Does the rvalue aliase c borrow b?"}, {"owner": {"reputation": 2910, "user_id": 1329147, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/bb27892c2e4adec367d862a16db8389c?s=128&d=identicon&r=PG", "display_name": "Amos", "link": "https://stackoverflow.com/users/1329147/amos"}, "edited": false, "score": 0, "creation_date": 1422974855, "post_id": 28300888, "comment_id": 44954686, "body": "@ker Yes. I get a deeper understanding of Box&#39;s deref op. I&#39;m still confused about the rvalue aliase mutation."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 0, "last_activity_date": 1422974332, "last_edit_date": 1422974332, "creation_date": 1422972420, "answer_id": 28300888, "question_id": 28300423, "link": "https://stackoverflow.com/questions/28300423/does-dereference-equal-to-a-function-call/28300888#28300888", "title": "Does dereference equal to a function call?", "body": "<p>Quick answer: It depends.</p>\n\n<p>Long answer: keep reading...</p>\n\n<blockquote>\n  <p>What happens if I borrow a dereferenced pointer?\n  If you check out the LLVM-IR that rust generates, you can see everything in fine detail:</p>\n</blockquote>\n\n<pre><code>let a = 8us;\nlet b = &amp;a;\nlet c = &amp;*b;\n</code></pre>\n\n<p>gets expanded to</p>\n\n<pre><code>let a;\n// %a = alloca i64\nlet b;\n// %b = alloca i64*\nlet c;\n// %c = alloca i64*\na = 8us;\n// store i64 8, i64* %a\nb = &amp;a;\n// store i64* %a, i64** %b\nlet tmp = *b;\n// %0 = load i64** %b\nc = tmp;\n// store i64* %0, i64** %c\n</code></pre>\n\n<p>now, llvm can easily optimize this stuff out. It gets more complicated once you implement traits like <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow\">Deref</a> on your own types. Then obviously a function call is involved, but most likely optimized out again, since you shouldn't be doing complicated stuff in the deref function.</p>\n\n<blockquote>\n  <p>What object has c borrowed?</p>\n</blockquote>\n\n<p><code>c</code> borrows <code>a</code></p>\n\n<blockquote>\n  <p>Does the dereferencing op create a temporary object like a function's return value?</p>\n</blockquote>\n\n<p>Nope, see above</p>\n\n<blockquote>\n  <p>How does it obey the borrowing rules.</p>\n</blockquote>\n\n<p><code>*b</code> behaves as if it were <code>a</code>. If you take a reference to it you get a reference to <code>a</code>.</p>\n\n<hr>\n\n<p>To answer your second issue: </p>\n\n<p>A <code>Box</code> owns the object it points to. Since you declared your <code>Box</code> to be mutable, you can take eithe a mutable reference or any number of non-mutable references to your object. This means when you dereference the <code>Box</code> rust decides, depending the situation, whether to automatically create a mutable box. In the case of the assignment, your deref'd box is on the left side of the assignment operator, therefor rust tries to get a mutable reference to the object.</p>\n\n<p>If you give your variables types, this becomes more obvious:</p>\n\n<pre><code>let mut x = Box::new(8us);\n{\n    let y : &amp;usize = &amp;*x;\n}\n{\n    let y : &amp;mut usize = &amp;mut *x;\n    *x = 99; // cannot assign to `*x` because it is borrowed\n}\n</code></pre>\n"}], "owner": {"reputation": 2910, "user_id": 1329147, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/bb27892c2e4adec367d862a16db8389c?s=128&d=identicon&r=PG", "display_name": "Amos", "link": "https://stackoverflow.com/users/1329147/amos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "accepted_answer_id": 28300888, "answer_count": 1, "score": 3, "last_activity_date": 1422974332, "creation_date": 1422971026, "last_edit_date": 1422974277, "question_id": 28300423, "link": "https://stackoverflow.com/questions/28300423/does-dereference-equal-to-a-function-call", "title": "Does dereference equal to a function call?", "body": "<p>What happens if I borrow a dereferenced pointer?</p>\n\n<pre><code>let a = some object;\nlet b = &amp;a;\nlet c = &amp;*b;\n</code></pre>\n\n<p>What object has c borrowed? Does the dereferencing op create a temporary object like a function's return value? How does it obey the borrowing rules.</p>\n\n<p>I'm also confused about Box's mutable semantic.</p>\n\n<pre><code>let mut a = Box::new(8us)\n*a = 1;\n</code></pre>\n\n<p>This code works just fine without something like Box::new_mut(). But</p>\n\n<pre><code>let mut a = &amp;8us;\n*a = 1;\n</code></pre>\n\n<p>An error occurs.</p>\n"}, {"tags": ["arrays", "vector", "rust", "slice"], "comments": [{"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "edited": false, "score": 1, "creation_date": 1547121008, "post_id": 28294735, "comment_id": 95087358, "body": "<i>&quot;It could be done manually, as usual&quot;</i> ... on <code>Copy</code> types - otherwise it will result in a &quot;cannot move out of indexed content&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422953908, "post_id": 28294764, "comment_id": 44942225, "body": "There is no magic inside - just unsafe block - what a pitty!)"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1422955335, "post_id": 28294764, "comment_id": 44943023, "body": "There is, in ptr mod: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/ptr.rs#L164\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/libcore/ptr.rs#L16&zwnj;&#8203;4</a>"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422955577, "post_id": 28294764, "comment_id": 44943184, "body": "@FominArseniy, it can be implemented with some &quot;magic&quot; to avoid <code>unsafe</code> (I&#39;ve edited my answer to include an example implementation)."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422959856, "post_id": 28294764, "comment_id": 44945822, "body": "It can also be implemented with using temp variable either, I don&#39;t see why there is need in such complex implementation. Problem with double borrowing arises from function call syntax swap(mut &amp; x, mut &amp; y), when x, y point to the same data slice. If function syntax is swap(&amp; mut[], i, j), there is no problem to swap inside of it using temp variable."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "reply_to_user": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1422960502, "post_id": 28294764, "comment_id": 44946198, "body": "@swizard, this is really dramatical implementation of swap, but it&#39;s pointer version."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 2, "creation_date": 1422963774, "post_id": 28294764, "comment_id": 44948024, "body": "@FominArseniy, it only works with a temp variable if the type is <code>Copy</code>. If the contained types moves (e.g. <code>data: &amp;mut [String]</code>), it is not possible to use the code you give in your question, while the careful one I give does work."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1422966313, "post_id": 28294764, "comment_id": 44949458, "body": "I think the index <code>&amp;mut tail[hi]</code> is wrong, shouldn&#39;t it be <code>&amp;mut tail[0]</code> ?"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 1, "creation_date": 1422990702, "post_id": 28294764, "comment_id": 44964590, "body": "@FominArseniy, yes, it is pointer version which is the slice proc implemented via: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/slice.rs#L352\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/libcore/slice.rs#L&zwnj;&#8203;352</a>"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 29, "last_activity_date": 1513141225, "last_edit_date": 1513141225, "creation_date": 1422953523, "answer_id": 28294764, "question_id": 28294735, "link": "https://stackoverflow.com/questions/28294735/how-to-swap-the-elements-of-an-array-slice-or-vec/28294764#28294764", "title": "How to swap the elements of an array, slice, or Vec?", "body": "<p>There's a <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.swap\" rel=\"noreferrer\"><code>swap</code> method</a> on slices: <code>data.swap(i, j)</code>.</p>\n\n<p>The original code doesn't work because the language requires that <code>&amp;mut</code>s do not alias, that is, if a piece of data is accessible via an <code>&amp;mut</code>, then there must be no other way to use that data. In general, for successive indexes <code>data[i]</code>, <code>data[j]</code>, the compiler cannot guarantee that <code>i</code> and <code>j</code> are different. If they are the same then the indexing is referring to the same memory and so <code>&amp;mut data[i]</code> and <code>&amp;mut data[j]</code> would be two pointers to the same data: illegal!</p>\n\n<p><code>.swap</code> uses a bit of <code>unsafe</code> code internally, being sure to handle the <code>i == j</code> case correctly, avoiding aliasing <code>&amp;mut</code> pointers. That said, it doesn't <em>have</em> to use <code>unsafe</code>, it is only to ensure this \"primitive\" operation has high-performance (and I could definitely imagine future language/library improvements that reduce the need for unsafe here by making the require invariants easier to express), e.g. the following is a safe implementation:</p>\n\n<pre><code>use std::cmp::Ordering;\nuse std::mem;\n\nfn swap&lt;T&gt;(x: &amp;mut [T], i: usize, j: usize) {\n    let (lo, hi) = match i.cmp(&amp;j) {\n        // no swapping necessary\n        Ordering::Equal =&gt; return,\n\n        // get the smallest and largest of the two indices\n        Ordering::Less =&gt; (i, j),\n        Ordering::Greater =&gt; (j, i),\n    };\n\n    let (init, tail) = x.split_at_mut(hi);\n    mem::swap(&amp;mut init[lo], &amp;mut tail[0]);\n}\n</code></pre>\n\n<p>The key here is <code>split_at_mut</code> which separates the slice into two disjoint halves (this is done using <code>unsafe</code> internally, but Rust's standard library is built on <code>unsafe</code>: the language provides \"primitive\" features and the libraries build the rest on top of them).</p>\n"}], "owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5597, "favorite_count": 1, "accepted_answer_id": 28294764, "answer_count": 1, "score": 21, "last_activity_date": 1601343378, "creation_date": 1422953439, "last_edit_date": 1601343378, "question_id": 28294735, "link": "https://stackoverflow.com/questions/28294735/how-to-swap-the-elements-of-an-array-slice-or-vec", "title": "How to swap the elements of an array, slice, or Vec?", "body": "<p>I want to swap elements of slice <code>data</code> using library function, but it doesn't work because of multiple borrowing:</p>\n<pre><code>use std::mem;\n\nfn example() {\n    let mut data = [1, 2, 3];\n    let i = 0;\n    let j = 1;\n    \n    mem::swap(&amp;mut data[i], &amp;mut data[j]);\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `data[_]` as mutable more than once at a time\n --&gt; src/lib.rs:8:29\n  |\n8 |     mem::swap(&amp;mut data[i], &amp;mut data[j]);\n  |     --------- ------------  ^^^^^^^^^^^^ second mutable borrow occurs here\n  |     |         |\n  |     |         first mutable borrow occurs here\n  |     first borrow later used by call\n  |\n</code></pre>\n<p>It could be done manually, but I don't think using this code every time is great:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let temp = data[i];\ndata[i] = data[j];\ndata[j] = temp;\n</code></pre>\n<p>Is there any other solution to swap elements in slices?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1422954838, "post_id": 28294105, "comment_id": 44942727, "body": "Whoops, you&#39;re right."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1422965119, "post_id": 28294105, "comment_id": 44948754, "body": "Can you show a minimally reproducible example with enough information for someone else to reproduce your problem?"}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1423034083, "post_id": 28294105, "comment_id": 44980422, "body": "Good idea. I&#39;ll try to see if I can come up with a minimal example. I noticed it when compiling my project (<a href=\"https://github.com/ujh/iomrascalai\" rel=\"nofollow noreferrer\">github.com/ujh/iomrascalai</a>), but that one is already quite big and of course isn&#39;t suitable for debugging."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1423051563, "post_id": 28294105, "comment_id": 44990055, "body": "Try using <code>#[plugin] #[no_link] extern crate regex_macros;</code>."}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1423053963, "post_id": 28294105, "comment_id": 44991360, "body": "Yes, it was right there in the documentation ... Thank you! :)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423125014, "post_id": 28294105, "comment_id": 45023854, "body": "does this help at all? From the text it seems that you could force all dependencies to be linked in your preference. <a href=\"http://doc.crates.io/manifest.html#building-dynamic-or-static-libraries\" rel=\"nofollow noreferrer\">doc.crates.io/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1423034030, "post_id": 28303813, "comment_id": 44980394, "body": "When I do it with my project (<a href=\"https://github.com/ujh/iomrascalai\" rel=\"nofollow noreferrer\">github.com/ujh/iomrascalai</a>) I get a lot of output where you only get that one line. I will try to come up with a minimal example ..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1422980595, "creation_date": 1422980595, "answer_id": 28303813, "question_id": 28294105, "link": "https://stackoverflow.com/questions/28294105/statically-linking-a-binary-that-uses-regex-macros/28303813#28303813", "title": "Statically linking a binary that uses regex_macros", "body": "<p>I think you are mistaken that binaries are dynamically linked (at least not by default).</p>\n\n<p>I just created a brand new binary project with Cargo (<code>cargo new --bin foo</code>), added the <a href=\"https://crates.io/crates/regex\" rel=\"nofollow\">regex crate</a> and used it in the source. I compiled the binary, I then used <code>otool</code> to list the dynamic libraries (I'm on OS X):</p>\n\n<pre><code>$ otool -L target/statik\ntarget/statik:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1)\n</code></pre>\n\n<p>This seems to indicate that the only dynamic linking is to core system libraries (on Linux, I believe it is glibc).</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423100897, "post_id": 28322596, "comment_id": 45016148, "body": "&quot;link the regex_macros crate statically&quot; - Shouldn&#39;t an attribute called <code>#[no_link]</code> not link it at all?"}], "tags": [], "owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "is_accepted": false, "score": 3, "last_activity_date": 1423056330, "last_edit_date": 1495542118, "creation_date": 1423056330, "answer_id": 28322596, "question_id": 28294105, "link": "https://stackoverflow.com/questions/28294105/statically-linking-a-binary-that-uses-regex-macros/28322596#28322596", "title": "Statically linking a binary that uses regex_macros", "body": "<p>They tiny detail that is missing here is <code>#[no_link]</code> as mentioned in a comment by <a href=\"https://stackoverflow.com/users/619216/burntsushi5\">BurntSushi5</a>. So changing the code to:</p>\n\n<pre><code>#![feature(plugin)]\n#[plugin] #[no_link] extern crate regex_macros;\n\n\nfn main() {}\n</code></pre>\n\n<p>Will link the regex_macros crate statically.</p>\n"}], "owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1423100976, "creation_date": 1422950935, "last_edit_date": 1423100976, "question_id": 28294105, "link": "https://stackoverflow.com/questions/28294105/statically-linking-a-binary-that-uses-regex-macros", "title": "Statically linking a binary that uses regex_macros", "body": "<p>I just realised that Rust binaries created via Cargo are dynamically linked when I use the <code>regex_macros</code> crate. This is a bit problematic as the created binary will cease to work when I update to a newer version of <code>regex_macros</code>.</p>\n\n<p>Is there a way around that?</p>\n\n<p>Here's a minimal example:</p>\n\n<pre><code>#![feature(plugin)]\n#[plugin]\nextern crate regex_macros;\n\n\nfn main() {}\n</code></pre>\n\n<p>Compiling this and looking at what is linked reveals this:</p>\n\n<pre><code>uh@macaron:~/linking-test (master)$ otool -L target/linking-test\ntarget/linking-test:\n    /Users/uh/linking-test/target/deps/libregex_macros-bdbdbfedad0748ac.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librustc-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libflate-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libgetopts-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librustc_back-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libsyntax-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libfmt_macros-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libarena-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libterm-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libgraphviz-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librbml-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libserialize-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liblog-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librustc_llvm-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libstd-4e7c5e5c.dylib (compatibility version 0.0.0, current version 0.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1213.0.0)\n    /usr/lib/libedit.3.dylib (compatibility version 2.0.0, current version 3.0.0)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.0.0)\n</code></pre>\n\n<p>As you can see, the first linked dylib has an absolute path into the directory where the project lives and even doing a <code>cargo clean</code> will probably break the executable.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "edited": false, "score": 0, "creation_date": 1422953172, "post_id": 28293944, "comment_id": 44941846, "body": "Thank you for taking the time to correct my misconception and explain why it is wrong. I come from a C background where the concepts of 0 and default are more or less interchangeable."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 12, "last_activity_date": 1422950264, "creation_date": 1422950264, "answer_id": 28293944, "question_id": 28293743, "link": "https://stackoverflow.com/questions/28293743/can-i-determine-the-zero-value-of-generic-types/28293944#28293944", "title": "Can I determine the zero value of generic types?", "body": "<p>No, because it doesn't make sense in general.  In fact, there are several types where \"zero\" is <em>very specifically</em> <strong>not</strong> valid at all.  For example, if you were to take an appropriately-sized zero value and transmute it into a <code>Box</code>, that would violate memory safety!</p>\n\n<p>There's an alternative to \"zero\", which is the <a href=\"http://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"noreferrer\"><code>Default</code></a> trait.  It allows you to say <code>Default::default()</code> to get a type's \"default\" value, whatever that happens to be.  However, there's no consistent, sensible definition of \"default\" for all types.  As such, you can only use it for types which <em>explicitly</em> implement it.</p>\n"}], "owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1260, "favorite_count": 1, "accepted_answer_id": 28293944, "answer_count": 1, "score": 7, "last_activity_date": 1422974878, "creation_date": 1422949485, "last_edit_date": 1422974878, "question_id": 28293743, "link": "https://stackoverflow.com/questions/28293743/can-i-determine-the-zero-value-of-generic-types", "title": "Can I determine the zero value of generic types?", "body": "<p>The closest I managed to find was the <code>std::num::Int</code> and <code>std::num::Float</code>  traits, which define <code>zero()</code>. However, they are specific to primitive types.</p>\n"}, {"tags": ["networking", "rust", "alpha", "beta"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423036835, "post_id": 28293677, "comment_id": 44981589, "body": "I guess you should delete this question in a few days since it is now outdated and won&#39;t help anyone that gets a nightly from now on"}], "answers": [{"comments": [{"owner": {"reputation": 732, "user_id": 3418761, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/e9efde55eea7dcb2aa0bd22fa9efa7be?s=128&d=identicon&r=PG&f=1", "display_name": "Lord Windy", "link": "https://stackoverflow.com/users/3418761/lord-windy"}, "edited": false, "score": 0, "creation_date": 1423035340, "post_id": 28293749, "comment_id": 44980948, "body": "And a day after I ask, the new nightly has been released without old_io. Thanks for letting me know Ker!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1422969829, "last_edit_date": 1422969829, "creation_date": 1422949510, "answer_id": 28293749, "question_id": 28293677, "link": "https://stackoverflow.com/questions/28293677/rust-alpha-and-old-io/28293749#28293749", "title": "Rust Alpha and Old_IO", "body": "<p>The new <code>io</code> module is being implemented right now in <a href=\"https://github.com/rust-lang/rust/pull/21835\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/21835</a></p>\n\n<p>You can use <code>old_io</code> until then, but expect it to be removed soon. Once removed, moving to the new <code>io</code> will be a breaking change.</p>\n"}], "owner": {"reputation": 732, "user_id": 3418761, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/e9efde55eea7dcb2aa0bd22fa9efa7be?s=128&d=identicon&r=PG&f=1", "display_name": "Lord Windy", "link": "https://stackoverflow.com/users/3418761/lord-windy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 164, "favorite_count": 0, "accepted_answer_id": 28293749, "answer_count": 1, "score": 1, "last_activity_date": 1422969829, "creation_date": 1422949272, "question_id": 28293677, "link": "https://stackoverflow.com/questions/28293677/rust-alpha-and-old-io", "title": "Rust Alpha and Old_IO", "body": "<p>I've been looking into learning Rust because it seems like a cool upcoming language but I have some concerns with Alpha apparently being feature complete and the std library network code all being in 'old_io'.</p>\n\n<p>I've been wanting to do a small MUD from a book for awhile now and I thought the two would go hand in hand. </p>\n\n<p>My question is this, has the net code moved and I can't find it, are they not replacing the old_io to something else or is a new IO just coming in and I am an idiot for not seeing it?</p>\n\n<p>I'll go ahead with it regardless, I just can't find the answer.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "edited": false, "score": 0, "creation_date": 1422949355, "post_id": 28293376, "comment_id": 44940010, "body": "Excellent! I wasn&#39;t aware of the Self keyword! Thank you! Well described!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1422947964, "creation_date": 1422947964, "answer_id": 28293376, "question_id": 28293228, "link": "https://stackoverflow.com/questions/28293228/returning-a-trait-type-with-static-dispatch/28293376#28293376", "title": "Returning a trait type with static dispatch", "body": "<p>The compiler's in the right here.  What you've told it is that you're implementing a function <code>trade</code> which, for any <code>M</code> the caller cares to use (so long as it implements <code>Money</code>), you will return an instance of that <code>M</code>.  And then you go and try to return a <code>Dollar</code>.  What if <code>M</code> isn't <code>Dollar</code>?</p>\n\n<p>What you probably want here, from context, is the following:</p>\n\n<pre><code>trait Money {\n    fn trade(&amp;self) -&gt; Self;\n}\n\nstruct Dollar {\n    amount: usize,\n}\n\nimpl Money for Dollar {\n    fn trade(&amp;self) -&gt; Dollar\n    {\n        Dollar { amount: self.amount / 2 }\n    }\n}\n\nfn main() {\n    let x = Dollar { amount: 10 };\n    println!(\"{}\", x.trade().amount);\n}\n</code></pre>\n\n<p>Here, the <code>trade</code> function is changed to always return the type it's implemented for; within the <code>Money</code> trait definition, that's <code>Self</code>.  When you're talking about a <em>specific</em> implementation, it's the implementation type (so it's <code>Dollar</code> when you're implementing <code>Money</code> for <code>Dollar</code>).</p>\n"}], "owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "accepted_answer_id": 28293376, "answer_count": 1, "score": 2, "last_activity_date": 1422947964, "creation_date": 1422947387, "question_id": 28293228, "link": "https://stackoverflow.com/questions/28293228/returning-a-trait-type-with-static-dispatch", "title": "Returning a trait type with static dispatch", "body": "<p>I'm trying to return a statically dispatched trait in a function declared in the same trait, but the compiler seems unable to map between the trait type and the concrete type.</p>\n\n<p>Example:</p>\n\n<pre><code>trait Money {\n    fn trade&lt;M&gt;(&amp;self) -&gt; M\n        where M: Money;\n}\n\nimpl Money for Dollar {\n    fn trade&lt;M&gt;(&amp;self) -&gt; M\n        where M: Money\n    {\n        Dollar { amount: self.amount / 2 }\n    }\n}\n</code></pre>\n\n<p>You can try out the complete example here: <a href=\"http://is.gd/alQGv0\" rel=\"nofollow\">http://is.gd/alQGv0</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422941934, "post_id": 28291349, "comment_id": 44937291, "body": "Many <code>impl</code>s are allowed, but only one definition of any given method."}], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 4, "last_activity_date": 1422941853, "creation_date": 1422941853, "answer_id": 28292062, "question_id": 28291349, "link": "https://stackoverflow.com/questions/28291349/can-you-implement-a-generic-struct-for-multiple-types/28292062#28292062", "title": "Can you implement a generic struct for multiple types?", "body": "<p>I don't think that it is possible to solve your task with such syntax (at least, I cannot find any examples in the rust reference book).</p>\n\n<p>But there are some working constructions like:</p>\n\n<pre><code>impl&lt;T&gt; Dit&lt;T&gt; where T: Float {\n</code></pre>\n\n<p>or: </p>\n\n<pre><code>trait DitTrait {\n    fn new(n: usize) -&gt; Result&lt;Self, FFTError&gt;;\n}\n\nimpl DitTrait for Dit&lt;f32&gt; { ... }\nimpl DitTrait for Dit&lt;f64&gt; { ... }\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2229, "favorite_count": 0, "accepted_answer_id": 28292062, "answer_count": 1, "score": 2, "last_activity_date": 1520695473, "creation_date": 1422937462, "last_edit_date": 1520695473, "question_id": 28291349, "link": "https://stackoverflow.com/questions/28291349/can-you-implement-a-generic-struct-for-multiple-types", "title": "Can you implement a generic struct for multiple types?", "body": "<p>I have a generic struct <code>Dit&lt;T&gt;</code> that implements the FFT for T:</p>\n\n<pre><code>struct Dit&lt;T&gt; {\n    n: usize,\n    exponents: Bin&lt;f32, Complex&lt;T&gt;&gt;,\n    tmp: Option&lt;Vec&lt;Complex&lt;T&gt;&gt;&gt;,\n}\n\nimpl Dit&lt;f32&gt; {\n    /// Create a new instance\n    ///\n    /// Notice that the number of samples that will be processed by an instance\n    /// is always fixed, because the exponent values are precalculated.\n    ///\n    /// # Parameters\n    /// - `n` The number of samples this operator can process, eg. 1024\n    pub fn new(n: usize) -&gt; Result&lt;Dit&lt;f32&gt;, FFTError&gt; {\n        if 2.pow((n as f64).log2() as usize) != n {\n            return Err(FFTError::InvalidLength);\n        }\n\n        let rtn = Dit {\n            n: n,\n            exponents: Bin::new(),\n            tmp: None,\n        }.pregen();\n\n        return Ok(rtn);\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>I started to add the implementation for <code>f64</code>:</p>\n\n<pre><code>impl Dit&lt;f64&gt; {\n    pub fn new(n: usize) -&gt; Result&lt;Dit&lt;f64&gt;, FFTError&gt; {\n        unimplemented!()\n    }\n    // ...\n}\n</code></pre>\n\n<p>...and I'm getting these sorts of errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/impls/dit.rs:186:7: 196:4 error: duplicate definition of value `new`\nsrc/impls/dit.rs:186   pub fn new(n:usize) -&gt; Result&lt;Dit&lt;f64&gt;, FFTError&gt; {\nsrc/impls/dit.rs:187     if 2.pow((n as f64).log2() as usize) != n {\nsrc/impls/dit.rs:188       return Err(FFTError::InvalidLength);\nsrc/impls/dit.rs:189     }\nsrc/impls/dit.rs:190     let rtn = Dit {\nsrc/impls/dit.rs:191       n: n,\n                     ...\nsrc/impls/dit.rs:110:7: 120:4 note: first definition of value `new` here\nsrc/impls/dit.rs:110   pub fn new(n:usize) -&gt; Result&lt;Dit&lt;f32&gt;, FFTError&gt; {\nsrc/impls/dit.rs:111     if 2.pow((n as f64).log2() as usize) != n {\nsrc/impls/dit.rs:112       return Err(FFTError::InvalidLength);\nsrc/impls/dit.rs:113     }\nsrc/impls/dit.rs:114     let rtn = Dit {\nsrc/impls/dit.rs:115       n: n,\n</code></pre>\n\n<p>I am confused. My impression was that for the generic <code>Foo&lt;T&gt;</code>, the implementation <code>Foo&lt;Bar1&gt;</code> is a different concrete instance to the implementation of <code>Foo&lt;Bar2&gt;</code>. As such, I was under the impression that I could have different instances of methods for each concrete instance.</p>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422934145, "post_id": 28290758, "comment_id": 44935152, "body": "I don&#39;t really think this qualifies as &quot;recursive&quot; - perhaps there&#39;s a better word you can find?"}], "answers": [{"comments": [{"owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "edited": false, "score": 0, "creation_date": 1469153349, "post_id": 28290850, "comment_id": 64430651, "body": "Strange example.  You are assigning to <code>obytes</code> and then immediately overriding it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1422933942, "creation_date": 1422933942, "answer_id": 28290850, "question_id": 28290758, "link": "https://stackoverflow.com/questions/28290758/how-can-i-have-a-recursive-mutable-borrow/28290850#28290850", "title": "How can I have a recursive mutable borrow?", "body": "<p>This is an annoyance of the current borrow checker. You can work around it by clearly transferring the mutable borrow using an temporary intermediate variable:</p>\n\n<pre><code>pub fn main() {\n    let mut ibytes = \"stump\".as_bytes();\n    let mut obytes: &amp;mut[u8] = &amp;mut [0u8; 1024];\n\n    while ibytes.len() &gt;= 2 {\n        obytes[0] = ibytes[0] &gt;&gt; 2;\n        obytes[1] = ibytes[0] &amp; 0x03 &lt;&lt; 4 | ibytes[1] &gt;&gt; 4;\n\n        ibytes = &amp;ibytes[2..];\n        let tmp = obytes;\n        obytes = &amp;mut tmp[2..];\n    }\n}\n</code></pre>\n\n<p>I'm pretty sure there's a Rust issue for this, but some quick searching didn't find it right away.</p>\n"}], "owner": {"reputation": 65, "user_id": 2288954, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9dd5229e76f45a34776016424f5d6c86?s=128&d=identicon&r=PG", "display_name": "user2288954", "link": "https://stackoverflow.com/users/2288954/user2288954"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1231, "favorite_count": 0, "closed_date": 1520887413, "accepted_answer_id": 28290850, "answer_count": 1, "score": 3, "last_activity_date": 1422933942, "creation_date": 1422933395, "last_edit_date": 1422933757, "question_id": 28290758, "link": "https://stackoverflow.com/questions/28290758/how-can-i-have-a-recursive-mutable-borrow", "closed_reason": "Duplicate", "title": "How can I have a recursive mutable borrow?", "body": "<p>Here is a minimal example for some behavior I stumbled on:</p>\n\n<pre><code>pub fn main() {\n    let mut ibytes = \"stump\".as_bytes();\n    let mut obytes: &amp;mut[u8] = &amp;mut [0u8; 1024];\n\n    while ibytes.len() &gt;= 2 {\n        obytes[0] = ibytes[0] &gt;&gt; 2;\n        obytes[1] = ibytes[0] &amp; 0x03 &lt;&lt; 4 | ibytes[1] &gt;&gt; 4;\n\n        ibytes = &amp;ibytes[2..];\n        obytes = &amp;mut obytes[2..];\n    }\n}\n</code></pre>\n\n<p>The following code doesn't compile, because the slice view operation on \"obytes\" do borrowing recursively, while the similar operation on \"ibytes\" is OK.</p>\n\n<p>The error message is shown as bellow:</p>\n\n<pre><code>&lt;anon&gt;:6:9: 6:35 error: cannot assign to `obytes[..]` because it is borrowed\n&lt;anon&gt;:6         obytes[0] = ibytes[0] &gt;&gt; 2;\n                 ^~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:10:23: 10:29 note: borrow of `obytes[..]` occurs here\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n                                ^~~~~~\n&lt;anon&gt;:7:9: 7:59 error: cannot assign to `obytes[..]` because it is borrowed\n&lt;anon&gt;:7         obytes[1] = ibytes[0] &amp; 0x03 &lt;&lt; 4 | ibytes[1] &gt;&gt; 4;\n                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:10:23: 10:29 note: borrow of `obytes[..]` occurs here\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n                                ^~~~~~\n&lt;anon&gt;:10:9: 10:34 error: cannot assign to `obytes` because it is borrowed\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:10:23: 10:29 note: borrow of `obytes` occurs here\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n                                ^~~~~~\n&lt;anon&gt;:10:23: 10:29 error: cannot borrow `*obytes` as mutable more than once at a time\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n                                ^~~~~~\n&lt;anon&gt;:10:23: 10:29 note: previous borrow of `*obytes` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `*obytes` until the borrow ends\n&lt;anon&gt;:10         obytes = &amp;mut obytes[2..];\n</code></pre>\n\n<p>How can I do recursive borrow for mutable \"obytes\" like what has done for immutable \u201cibytes\"?</p>\n"}, {"tags": ["static", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422912528, "post_id": 28286960, "comment_id": 44928100, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28272739/how-do-i-provide-type-annotations-inline-when-calling-a-non-generic-function\">How do I provide type annotations inline when calling a non-generic function?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": false, "score": 3, "last_activity_date": 1422912760, "last_edit_date": 1495540903, "creation_date": 1422912760, "answer_id": 28287166, "question_id": 28286960, "link": "https://stackoverflow.com/questions/28286960/rust-type-hint-for-static-trait-function/28287166#28287166", "title": "Rust type hint for static trait function", "body": "<p>See <a href=\"https://stackoverflow.com/questions/28272739/how-do-i-provide-type-annotations-inline-when-calling-a-non-generic-function\">How do I provide type annotations inline when calling a non-generic function?</a>. In your case, it would look like this:</p>\n\n<pre><code>match &lt;i32 as MyTrait&gt;::maybe_new() {\n    Some(x) =&gt; ...,\n    None =&gt; ...,\n}\n</code></pre>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 760, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1422912760, "creation_date": 1422911932, "question_id": 28286960, "link": "https://stackoverflow.com/questions/28286960/rust-type-hint-for-static-trait-function", "title": "Rust type hint for static trait function", "body": "<p>Consider this example:</p>\n\n<pre><code>trait MyTrait {\n    fn maybe_new() -&gt; Option&lt;Self&gt;;\n}\n\nimpl MyTrait for i32 {...}\n\nfn hello() {\n    match MyTrait::maybe_new() {\n        Some(x) =&gt; ...,\n        None =&gt; ...,\n    }\n}\n</code></pre>\n\n<p>This fails to compile because there is no way to infer the type of x.  Is there some way to add a type annotation to make this work without having to break the maybe_new() into a let statement like this?:</p>\n\n<pre><code>let p:Option&lt;i32&gt; = MyTrait::maybe_new();\nmatch p {\n    Some(x) =&gt; ...,\n    None =&gt; ...,\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422906158, "post_id": 28285085, "comment_id": 44924896, "body": "See also <a href=\"http://stackoverflow.com/q/28272739/155423\">How do I provide type annotations inline when calling a non-generic function?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422971180, "post_id": 28285257, "comment_id": 44952327, "body": "This answer is referenced in <a href=\"http://youtu.be/fg63ZcMnXQE\" rel=\"nofollow noreferrer\">Trace Quest 5: Episode 03</a>."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422971655, "post_id": 28285257, "comment_id": 44952621, "body": "Please note that the referenced issue was fixed on github, but the issue I describe here isn&#39;t resolved by that. I tried it with <code>rustc 1.0.0-dev (7858cb432 2015-02-03 03:44:05 +0000)</code>, which definitely contains the fix in the referenced issue at least."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422972101, "post_id": 28285257, "comment_id": 44952897, "body": "Information <a href=\"https://github.com/rust-lang/rust/issues/21634#issuecomment-72654510\" rel=\"nofollow noreferrer\">added to issue on github</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422981280, "post_id": 28285257, "comment_id": 44959213, "body": "@Byron thanks for keeping us appraised. I added another solution that is probably even better and understandable."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1423032999, "post_id": 28285257, "comment_id": 44979955, "body": "You are so welcome ! Besides, the <code>.recip()</code>  method truly is what we want here - after all, it&#39;s easy to read and gets rid of the hopefully soon to be superfluous type hint."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1422981252, "last_edit_date": 1422981252, "creation_date": 1422905368, "answer_id": 28285257, "question_id": 28285085, "link": "https://stackoverflow.com/questions/28285085/how-to-use-numone-in-a-generic-type/28285257#28285257", "title": "How to use `Num::one()` in a generic type?", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rust/issues/21634\" rel=\"nofollow\">bug in type inference</a>. Until the bug is fixed, you can use the fully-specified UFCS form:</p>\n\n<pre><code>fn normalized(&amp;self) -&gt; Vector&lt;T&gt; {\n    self.mulfed(&lt;T as Float&gt;::one() / self.dot(self).sqrt())\n}\n</code></pre>\n\n<p>Even better, you can use <a href=\"http://doc.rust-lang.org/std/num/trait.Float.html#tymethod.recip\" rel=\"nofollow\"><code>Float::recip</code></a>:</p>\n\n<pre><code>fn normalized(&amp;self) -&gt; Vector&lt;T&gt; {\n    self.mulfed(self.dot(self).sqrt().recip())\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 204, "favorite_count": 0, "accepted_answer_id": 28285257, "answer_count": 1, "score": 0, "last_activity_date": 1422981252, "creation_date": 1422904673, "question_id": 28285085, "link": "https://stackoverflow.com/questions/28285085/how-to-use-numone-in-a-generic-type", "title": "How to use `Num::one()` in a generic type?", "body": "<p>I am trying to implement the <code>normalize</code> functionality of a generic vector, which requires me to use something equivalent to <code>self.mulf(1.0 / self.length())</code>.</p>\n\n<p>However, I was unable to generically specify I need 'one' of a any possible type of float using <code>Float::one()</code>.</p>\n\n<p>The latter works fine if used in a generic function, but not in a generic type.</p>\n\n<p><strong>How can I use <code>Num::one()</code> within a generic type ?</strong></p>\n\n<h3>The Code</h3>\n\n<p>The following code should serve as an example to show what I tried already. Also I believe to have seen code that uses <code>Float::one()</code> from within a generic trait implementation, but I don't want to 'traitify' my vector to keep it as simple as possible.</p>\n\n<pre><code>use std::num::Float;\n\n#[derive(Debug, PartialEq, Eq, Copy)]\npub struct Vector&lt;T: Float&gt; {\n    x: T,\n    y: T,\n    z: T,\n}\n\nimpl&lt;T: Float&gt; Vector&lt;T&gt; {\n    #[inline(always)]\n    fn mulfed(&amp;self, m: T) -&gt; Vector&lt;T&gt; {\n        Vector { x: self.x * m, y: self.y * m, z: self.z * m }\n    }\n\n    fn dot(&amp;self, r: &amp;Vector&lt;T&gt;) -&gt; T {\n        self.x * r.x + self.y * r.y + self.z * r.z\n    }\n\n    // \"the type of this value must be known in this context\"\n    // fn normalized(&amp;self) -&gt; Vector&lt;T&gt; {\n    //     self.mulfed(Float::one() / self.dot(self).sqrt())\n    // }\n    // \"the type of this value must be known in this context\"\n    // fn normalized(&amp;self) -&gt; Vector&lt;T&gt; {\n    //     self.mulfed(Float::one() as T / self.dot(self).sqrt())\n    // }\n\n    // \"too many type parameters provided: expected at most 0 parameter(s), found 1 parameter(s)\"\n    // As Float is a trait, this can be expected to not work I guess. It should be able to \n    // use Float::one() from within another trait though.\n    // fn normalized(&amp;self) -&gt; Vector&lt;T&gt; {\n    //     self.mulfed(Float::one::&lt;T&gt;() / self.dot(self).sqrt())\n    // }\n}\n\nfn gimme_one&lt;T: Float&gt;() -&gt; T {\n    Float::one()\n}\n\n#[test]\nfn one() {\n    // But this works !!\n    let v: f32 = gimme_one();\n    assert_eq!(v, 1.0f32);\n}\n</code></pre>\n\n<p>I am using <code>rustc 1.0.0-nightly (458a6a2f6 2015-01-25 21:20:37 +0000)</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422899524, "post_id": 28283641, "comment_id": 44921479, "body": "Personally I think the compiler should be able to do a better job when using &#39;owned&#39; values as it can move them around at will. My fear usually is that unnecessary copies are created, but maybe rust can be different in that regard."}], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422904009, "post_id": 28284167, "comment_id": 44923742, "body": "As I thought, Rust types include their &#39;modifiers&#39;, like <code>mut</code> or <code>&amp;</code>. <code>Add</code> is defined as <code>pub trait Add&lt;RHS = Self&gt; </code>, so I assumed that the type of Self must always be the same as the type of RHS in all aspects. Maybe it has to do with lifetimes as well ... ."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422904115, "post_id": 28284167, "comment_id": 44923795, "body": "<code>SomeType&lt;T=U&gt;</code> just defines a default type argument, that is, if it is not specified, it is assumed to be this. This allows writing e.g. <code>T: Add</code> which translates to <code>T: Add&lt;T&gt;</code>."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422904227, "post_id": 28284167, "comment_id": 44923854, "body": "Thank you ! I have many eureka moments now that I (attempt) to learn the ins and outs of rust ! Just a few moments ago I have seen code like this and correctly assumed it is a default type. In my case for some reasons, I was confused. Will have to call it a day, as things don&#39;t get better anymore ;)"}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422971325, "post_id": 28284167, "comment_id": 44952409, "body": "This answer is referenced in <a href=\"http://youtu.be/fg63ZcMnXQE\" rel=\"nofollow noreferrer\">Trace Quest 5: Episode 03</a>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1422903980, "last_edit_date": 1422903980, "creation_date": 1422901202, "answer_id": 28284167, "question_id": 28283641, "link": "https://stackoverflow.com/questions/28283641/what-is-the-preferred-way-to-implement-the-add-trait-efficiently-for-vector-type/28284167#28284167", "title": "What is the preferred way to implement the Add trait efficiently for Vector type", "body": "<p>Since your <code>Vector</code> only contains three values implementing <code>Float</code> trait (which means that they are either <code>f64</code> or <code>f32</code>) you shouldn't really bother that they are copied unless you have profiled your program and determined that multiple copies cause performance drop.</p>\n\n<p>If your type was not copyable and required allocations on construction (like big integers and big floats, for example), you could implement all possible combinations of by-value and by-reference invocations:</p>\n\n<pre><code>impl Add&lt;YourType&gt; for YourType { ... }\nimpl&lt;'r&gt; Add&lt;YourType&gt; for &amp;'r YourType { ... }\nimpl&lt;'a&gt; Add&lt;&amp;'a YourType&gt; for YourType { ... }\nimpl&lt;'r, 'a&gt; Add&lt;&amp;'a YourType&gt; for &amp;'r YourType { ... }\n</code></pre>\n\n<p>and reuse the allocated storage in implementations which accept at least one argument by value. In that case, however, you <em>will</em> need to use <code>&amp;</code> operator if you don't want to move your values into the call. Rust prefers explicit over implicit; if you need reference semantics, you have to write it explicitly.</p>\n\n<p>FWIW, you can take a look at <a href=\"http://is.gd/MFdImi\" rel=\"nofollow\">this</a> program and especially its assembly output. This piece of assembly, I believe, is responsible for all arithmetic operations:</p>\n\n<pre><code>shrq    $11, %r14\ncvtsi2sdq   %r14, %xmm0\nmulsd   .LCPI0_0(%rip), %xmm0\nshrq    $11, %r15\ncvtsi2sdq   %r15, %xmm1\nmulsd   .LCPI0_0(%rip), %xmm1\nshrq    $11, %rbx\ncvtsi2sdq   %rbx, %xmm2\nmulsd   .LCPI0_0(%rip), %xmm2\nmovaps  %xmm0, %xmm3\naddsd   %xmm1, %xmm3\nmovaps  %xmm1, %xmm4\naddsd   %xmm2, %xmm4\nmovaps  %xmm0, %xmm5\naddsd   %xmm2, %xmm5\naddsd   %xmm2, %xmm3\naddsd   %xmm0, %xmm4\naddsd   %xmm1, %xmm5\nmovsd   %xmm3, 24(%rsp)\nmovsd   %xmm4, 32(%rsp)\nmovsd   %xmm5, 40(%rsp)\nleaq    (%rsp), %rdi\nleaq    24(%rsp), %rsi\ncallq   _ZN13Vec3$LT$T$GT$9to_string20h7039822990634233867E\n</code></pre>\n\n<p>Looks neat to me - the compiler has inlined all operations very nicely.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1219, "favorite_count": 0, "accepted_answer_id": 28284167, "answer_count": 1, "score": 2, "last_activity_date": 1422903980, "creation_date": 1422899278, "question_id": 28283641, "link": "https://stackoverflow.com/questions/28283641/what-is-the-preferred-way-to-implement-the-add-trait-efficiently-for-vector-type", "title": "What is the preferred way to implement the Add trait efficiently for Vector type", "body": "<p>The <code>Add</code> trait is defined as <a href=\"http://doc.rust-lang.org/core/ops/trait.Add.html\" rel=\"nofollow\">seen in the documentation</a>.</p>\n\n<p>When implementing it for a Vector, it was required to copy it into the add method to allow syntax like <code>v1 + v2</code>. If the <code>add</code> implementation is changed to support borrowed references and thus prevent a copy, one has to write <code>&amp;v1 + &amp;v2</code> which is undesirable.</p>\n\n<p><strong>What is the preferred or best performing way of doing this ?</strong> </p>\n\n<p>(In C++, self would be a <code>const Vector&lt;T&gt;&amp;</code>, as well as <code>rhs</code>, but still allow the desired <code>v1 + v2</code> semantics.)</p>\n\n<h3>The Code</h3>\n\n<p>For completeness, an excerpt of the code I am using right now</p>\n\n<pre><code>use std::num::Float;\nuse std::ops::Add;\n\n#[derive(Debug, PartialEq, Eq, Copy)]\npub struct Vector&lt;T: Float&gt; {\n    x: T,\n    y: T,\n    z: T,\n}\n\nimpl&lt;T: Float&gt; Add for Vector&lt;T&gt; {\n    type Output = Vector&lt;T&gt;;\n\n    // Probably it will be optimized to not actually copy self and rhs for each call !\n    #[inline(always)]\n    fn add(self, rhs: Vector&lt;T&gt;) -&gt; Vector&lt;T&gt; {\n      Vector {  x: self.x + rhs.x,\n                y: self.y + rhs.y, \n                z: self.z + rhs.z }\n    }\n}\n\n\n#[cfg(test)]\n#[test]\nfn basics() {\n    let v32 = Vector { x: 5.0f32, y: 4.0f32, z: 0.0f32 };\n    let v32_2 = v32 + v32;\n    assert_eq!(v32_2.x, v32.x + v32.x);\n    assert_eq!(v32_2.y, v32.y + v32.y);\n    assert_eq!(v32_2.z, v32.z + v32.z);\n}\n</code></pre>\n"}, {"tags": ["vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1574273191, "post_id": 28280093, "comment_id": 104176711, "body": "<code>f64</code> is <code>Copy</code>, so the <code>&amp;</code>&#39;s in the return type and the <code>n</code> arm of the <code>match</code> are not necessary, either."}], "tags": [], "owner": {"reputation": 14360, "user_id": 35189, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6010464aba06865d7a982c3a1456d377?s=128&d=identicon&r=PG", "display_name": "Dave Vogt", "link": "https://stackoverflow.com/users/35189/dave-vogt"}, "is_accepted": true, "score": 15, "last_activity_date": 1429790081, "last_edit_date": 1429790081, "creation_date": 1422887736, "answer_id": 28280093, "question_id": 28280035, "link": "https://stackoverflow.com/questions/28280035/accessing-the-last-element-of-a-vec-or-a-slice/28280093#28280093", "title": "Accessing the last element of a Vec or a slice", "body": "<p>And just after posting the question, the answer appears to be obvious:</p>\n\n<pre><code>fn top (&amp;mut self) -&gt; Option&lt;&amp;f64&gt; {\n    match self.len() {\n        0 =&gt; None,\n        n =&gt; Some(&amp;self[n-1])\n    }\n}\n</code></pre>\n\n<p>I.e. the <code>usize</code> was never the problem - the return type of <code>top()</code> was.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 37, "last_activity_date": 1585058571, "last_edit_date": 1585058571, "creation_date": 1422888407, "answer_id": 28280282, "question_id": 28280035, "link": "https://stackoverflow.com/questions/28280035/accessing-the-last-element-of-a-vec-or-a-slice/28280282#28280282", "title": "Accessing the last element of a Vec or a slice", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.last\" rel=\"noreferrer\"><code>slice::last</code></a>:</p>\n\n<pre><code>fn top(&amp;mut self) -&gt; Option&lt;f64&gt; {\n    self.last().copied()\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.copied\" rel=\"noreferrer\"><code>Option::copied</code></a> (and <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned\" rel=\"noreferrer\"><code>Option::cloned</code></a>) can be used to convert from an <code>Option&lt;&amp;f64&gt;</code> to an <code>Option&lt;f64&gt;</code>, matching the desired function signature. </p>\n\n<p>You can also remove the <code>mut</code> from both the implementation and the trait definition.</p>\n"}], "owner": {"reputation": 14360, "user_id": 35189, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6010464aba06865d7a982c3a1456d377?s=128&d=identicon&r=PG", "display_name": "Dave Vogt", "link": "https://stackoverflow.com/users/35189/dave-vogt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 27593, "favorite_count": 1, "accepted_answer_id": 28280093, "answer_count": 2, "score": 23, "last_activity_date": 1585058571, "creation_date": 1422887586, "last_edit_date": 1507730607, "question_id": 28280035, "link": "https://stackoverflow.com/questions/28280035/accessing-the-last-element-of-a-vec-or-a-slice", "title": "Accessing the last element of a Vec or a slice", "body": "<p>I have some code that looks like this:</p>\n\n<pre><code>trait Stack {\n    fn top(&amp;mut self) -&gt; Option&lt;f64&gt;;\n}\n\nimpl Stack for Vec&lt;f64&gt; {\n    fn top(&amp;mut self) -&gt; Option&lt;f64&gt; {\n        match self.pop() {\n            None =&gt; None,\n            Some(v) =&gt; {\n                self.push(v);\n                Some(v)\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut stack: Vec&lt;f64&gt; = Vec::new();\n    stack.push(5.3);\n    stack.push(2.3);\n    stack.push(1.3);\n\n    match stack.top() {\n        Some(v) =&gt; println!(\"Top of the stack: {}\", v),\n        None =&gt; println!(\"The stack is empty\"),\n    }\n}\n</code></pre>\n\n<p>Right now, the <code>top()</code> method is modifying <code>self</code>, but I think that this should not be necessary. The obvious way to do it didn't really work:</p>\n\n<pre><code>fn top(&amp;mut self) -&gt; Option&lt;f64&gt; {\n    match self.len() {\n        0 =&gt; None,\n        n =&gt; self[n - 1],\n    }\n}\n</code></pre>\n\n<p>I've toyed around a bit with converting <code>usize</code> to <code>i32</code> and back, but none of what I'm writing looks as short and readable as I think it should.</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1422884389, "post_id": 28278546, "comment_id": 44912024, "body": "<code>&amp;mut T</code> to <code>*mut T</code> does not require transmutation; a simple <code>as *mut _</code> will do."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1422887972, "post_id": 28278546, "comment_id": 44914245, "body": "Why the asymmetry? <code>create</code> returns a <code>*mut Dramatic</code> but <code>destroy</code> takes a <code>&amp;mut *mut Dramatic</code> whereas in C you would expect similar types <code>Dramatic*</code> for both."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1422888571, "post_id": 28278546, "comment_id": 44914669, "body": "@MatthieuM. &quot;I am going to null out the <code>ptr</code> so the calling code is less likely to accidentally re-use the pointer&quot;. It&#39;s a convention I&#39;ve seen in C, but I&#39;ve never really liked it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422888615, "post_id": 28278546, "comment_id": 44914692, "body": "@Shepmaster: Neither have I, it&#39;s a false sense of security since any copy of the pointer is unchanged anyway."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1422889837, "post_id": 28278546, "comment_id": 44915490, "body": "@ChrisMorgan: When I tried that, the borrow checker complained that I couldn&#39;t forget <code>obj</code> while it was borrowed... until I thought to insert a <code>: *mut _</code> constraint on the variable."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1422889969, "post_id": 28278546, "comment_id": 44915566, "body": "@MatthieuM.: It&#39;s true that it&#39;s far from fool-proof, but it makes it a <i>little</i> clearer that the pointer your passing is going to be destroyed."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1422895523, "post_id": 28278546, "comment_id": 44919259, "body": "@DK.: at the cost of having a signature that is incompatible with <code>free</code> which is what most APIs expect."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1585773186, "last_edit_date": 1585773186, "creation_date": 1422882757, "answer_id": 28278546, "question_id": 28278213, "link": "https://stackoverflow.com/questions/28278213/how-to-lend-a-rust-object-to-c-code-for-an-arbitrary-lifetime/28278546#28278546", "title": "How to lend a Rust object to C code for an arbitrary lifetime?", "body": "<p>Actually, you <em>haven't</em> managed to leak an object to C; you've managed to leak a reference to a (shortly) non-existent stack frame.  :D</p>\n\n<p>Here's a full example that should work correctly.  I've tried to comment it as appropriate to explain what I'm doing and why.</p>\n\n<pre><code>pub struct Dramatic(String);\n\n// Implement a destructor just so we can see when the object is destroyed.\nimpl Drop for Dramatic {\n    fn drop(&amp;mut self) {\n        println!(\"And lo, I, {}, meet a most terrible fate!\", self.0);\n    }\n}\n\npub extern \"C\" fn create() -&gt; *mut Dramatic {\n    // We **must** heap-allocate the object!  Returning a reference to a local\n    // will **almost certainly** break your program!\n    let mut obj = Box::new(Dramatic(\"Roger\".to_string()));\n\n    // into_raw turns the Box into a *mut Dramatic, which the borrow checker\n    // ignores, without calling its destructor.\n    Box::into_raw(obj)\n}\n\npub extern \"C\" fn destroy(ptr: &amp;mut *mut Dramatic) {\n    // First, we **must** check to see if the pointer is null.\n    if ptr.is_null() {\n        // Do nothing.\n        return;\n    }\n\n    // Now we know the pointer is non-null, we can continue. from_raw is the\n    // inverse of into_raw: it turns the *mut Dramatic back into a\n    // Box&lt;Dramatic&gt;. You must only call from_raw once per pointer.\n    let obj: Box&lt;Dramatic&gt; = unsafe { Box::from_raw(*ptr) };\n\n    // We don't *have* to do anything else; once obj goes out of scope, it will\n    // be dropped.  I'm going to drop it explicitly, however, for clarity.\n    drop(obj);\n\n    // I am, however, going to null out the `ptr` we were passed just so the\n    // calling code is less likely to accidentally re-use the pointer.\n    *ptr = ::std::ptr::null_mut();\n}\n\nfn main() {\n    let mut ptr = create();\n    println!(\"ptr = {:?}\", ptr);\n    destroy(&amp;mut ptr);\n    println!(\"ptr = {:?}\", ptr);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 600, "user_id": 8028981, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ce2cd63034a741083a9ca961917c3c93?s=128&d=identicon&r=PG&f=1", "display_name": "Amos Egel", "link": "https://stackoverflow.com/users/8028981/amos-egel"}, "edited": false, "score": 0, "creation_date": 1537966168, "post_id": 46677043, "comment_id": 91975822, "body": "Doesn&#39;t one need to put an <code>unsafe</code> block around <code>foo.as_ref().unwrap()</code>?"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 600, "user_id": 8028981, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ce2cd63034a741083a9ca961917c3c93?s=128&d=identicon&r=PG&f=1", "display_name": "Amos Egel", "link": "https://stackoverflow.com/users/8028981/amos-egel"}, "edited": false, "score": 0, "creation_date": 1538142591, "post_id": 46677043, "comment_id": 92052170, "body": "@AmosEgel Indeed. I&#39;ve marked these whole functions with the <code>unsafe</code> keyword, because it&#39;s caller&#39;s responsibility to ensure these pointers are safe to use."}, {"owner": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 0, "creation_date": 1544339548, "post_id": 46677043, "comment_id": 94236494, "body": "Given that it&#39;s the caller&#39;s responsibility to ensure that pointers passed to <code>do</code> are safe to use, could one not simply define its parameter to be <code>&amp;mut Foo</code>?  Or does Rust not guarantee that references are internally represented as pointers?  If so, do similar guarantees exist for <code>Box</code> such that <code>free_foo</code>&#39;s parameter could be <code>Box&lt;Foo&gt;</code> and then the function need merely call <code>::std::mem::drop</code>?  Then <code>null</code>-safety might even be added to either signature with <code>Option</code>?"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 0, "creation_date": 1544371667, "post_id": 46677043, "comment_id": 94243674, "body": "@eggyal In this case you might use <code>&amp;mut</code> to borrow from C, if the C side promises to never pass <code>NULL</code>. Rust&#39;s references can never be allowed to be <code>null</code> or point to uninitialized memory at any time. Rust&#39;s references and <code>Box</code>es may sometimes be a &quot;fat&quot; pointer, i.e. a 2-usize struct, but that is never allowed in C FFI, so not a problem here."}, {"owner": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 0, "creation_date": 1544381523, "post_id": 46677043, "comment_id": 94246478, "body": "@Kornel: but if I\u2019ve understood correctly <code>Option&lt;&amp;mut Foo&gt;</code> would translate directly to/from a nullable pointer?  I haven\u2019t read enough how Boxes are implemented though."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 0, "creation_date": 1544446835, "post_id": 46677043, "comment_id": 94266899, "body": "@eggyal It does have the same binary representation. I think it&#39;s guaranteed to be FFI-compatible for <code>Option&lt;fn()&gt;</code>, but I don&#39;t remember if that&#39;s also guaranteed for references. See <a href=\"https://doc.rust-lang.org/nomicon/\" rel=\"nofollow noreferrer\">nomicon</a>."}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 11, "last_activity_date": 1538142555, "last_edit_date": 1538142555, "creation_date": 1507674919, "answer_id": 46677043, "question_id": 28278213, "link": "https://stackoverflow.com/questions/28278213/how-to-lend-a-rust-object-to-c-code-for-an-arbitrary-lifetime/46677043#46677043", "title": "How to lend a Rust object to C code for an arbitrary lifetime?", "body": "<p>To send a Rust object to C:</p>\n\n<pre>\n#[no_mangle]\npub extern \"C\" fn create_foo() -> *mut Foo {\n    <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw\" rel=\"noreferrer\">Box::into_raw</a>(Box::new(Foo))\n}\n</pre>\n\n<p>To borrow (and not free) from C:</p>\n\n<pre>\n#[no_mangle]\npub unsafe extern \"C\" fn do(foo: *mut Foo) -> *mut Foo {\n    let foo = foo.<a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\" rel=\"noreferrer\">as_ref()</a>.unwrap(); // That's <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\" rel=\"noreferrer\">ptr::as_ref</a>\n}\n</pre>\n\n<p>To take over/destroy Rust object previously given to C:</p>\n\n<pre>\n#[no_mangle]\npub unsafe extern \"C\" fn free_foo(foo: *mut Foo) {\n    assert!(!foo.is_null());\n    <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.from_raw\" rel=\"noreferrer\">Box::from_raw</a>(foo); // Rust auto-drops it\n}\n</pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1223, "favorite_count": 0, "accepted_answer_id": 28278546, "answer_count": 2, "score": 8, "last_activity_date": 1585773186, "creation_date": 1422881658, "last_edit_date": 1507674911, "question_id": 28278213, "link": "https://stackoverflow.com/questions/28278213/how-to-lend-a-rust-object-to-c-code-for-an-arbitrary-lifetime", "title": "How to lend a Rust object to C code for an arbitrary lifetime?", "body": "<p>I'm writing a library in Rust that has a C interface. C side must be able to create and destroy Rust objects (C side owns them and controls their lifetime).</p>\n\n<p>I've managed to \"leak\" an object to C, but I'm not sure how to properly free it:</p>\n\n<pre>\npub extern \"C\" fn create() -> *mut Foo {\n   let obj = Foo; // oops, a bug\n   let ptr = std::mem::transmute(&mut obj); // bad \n   std::mem::forget(obj); // not needed\n   return ptr;\n}\n\npub extern \"C\" fn destroy(handle: *mut Foo) {\n   // get Foo back and Drop it??? \n}\n</pre>\n\n<p>I'm not sure how can I turn pointer back to an object that Rust will call Drop on. Simply dereferencing <code>*handle</code> doesn't compile.</p>\n"}, {"tags": ["scope", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422886005, "post_id": 28277230, "comment_id": 44912936, "body": "In addition to <a href=\"http://doc.rust-lang.org/book\" rel=\"nofollow noreferrer\">The Rust Programming Language</a> (specifically the chapter on <a href=\"http://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow noreferrer\">ownership</a>), there&#39;s a <i>bunch</i> of questions about &quot;use of moved value&quot; here on SO. It&#39;d be a good idea if you linked to these references and state what you didn&#39;t understand about them. That lets us know that you&#39;ve done appropriate research and could let us improve the references as well."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422886165, "post_id": 28277363, "comment_id": 44913031, "body": "&quot;it makes no difference&quot; - sure it does. ^_^ Try compiling <code>fn foo(mut a: u8) { a += 1; }</code> without the <code>mut</code>. It&#39;s not <i>necessary</i>, because you can always reassign it with the <code>mut</code> modifier, and I think it&#39;s better practice to <i>not</i> have it, but it certainly changes things."}, {"owner": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422886770, "post_id": 28277363, "comment_id": 44913422, "body": "@Shepmaster but it seems you can compile <code>trait Stack { fn dump(self); }</code> with <code>impl Stack for SomeType { fn dump(mut self) {...} }</code>. So really &quot;no difference&quot; in the <i>trait</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 0, "creation_date": 1422886969, "post_id": 28277363, "comment_id": 44913564, "body": "@Micha\u0142Politowski interesting - it also compiles if you switch it the other way around, putting the <code>mut</code> on the trait declaration. I suppose this is just a convenience for the implementer of the trait then."}, {"owner": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422887235, "post_id": 28277363, "comment_id": 44913764, "body": "@Shepmaster not sure - the other way around it doesn&#39;t compile for me if I really use mutability in the impl (unless I rebind with <code>mut</code> inside the method body, of course)."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 2, "last_activity_date": 1422878584, "creation_date": 1422878584, "answer_id": 28277363, "question_id": 28277230, "link": "https://stackoverflow.com/questions/28277230/error-use-of-moved-value/28277363#28277363", "title": "Error: &quot;use of moved value&quot;", "body": "<p>The function signature <code>fn dump(mut self)</code> (or <code>fn dump(self)</code>, it makes no difference and frankly I'm surprised that the <code>mut</code> is permitted in the trait) means that the method takes the <code>Stack</code> by value, i.e. moves it.</p>\n\n<p>There is no reason to take ownership. Make the signature <code>fn dump(&amp;self)</code> to be able to call it without moving.</p>\n\n<p>If \"moving\" is is all Greek to you, see the <a href=\"http://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">Ownership</a> chapter in TRPL.</p>\n"}], "owner": {"reputation": 14360, "user_id": 35189, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6010464aba06865d7a982c3a1456d377?s=128&d=identicon&r=PG", "display_name": "Dave Vogt", "link": "https://stackoverflow.com/users/35189/dave-vogt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1054, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1422885739, "creation_date": 1422878135, "last_edit_date": 1422885739, "question_id": 28277230, "link": "https://stackoverflow.com/questions/28277230/error-use-of-moved-value", "title": "Error: &quot;use of moved value&quot;", "body": "<p>I'm currently learning Rust, and am toying around with a simple calculator. When refactoring, I ended up with some code like the following:</p>\n\n<pre><code>enum OptionalToken {\n    Foo,\n    Bar\n}\n\nfn next_token() -&gt; OptionalToken {\n    // Read input, classify, return\n    OptionalToken::Foo\n}\n\n\ntrait Stack {\n    // ...\n    fn dump (mut self);\n}\n\nimpl Stack for Vec&lt;f64&gt; {\n    // ...\n    fn dump (mut self) {\n        println!(\"Stack: size={} [\", self.len());\n        for x in self.iter() {\n            println!(\"   {}\", x);\n        };\n        println!(\"]\");\n    }\n}\n\nfn main() {\n    let mut stack: Vec&lt;f64&gt; = Vec::new();\n\n    loop {\n        let tok = next_token();\n        match tok {\n            OptionalToken::Foo =&gt; { stack.dump(); }\n            OptionalToken::Bar =&gt; { stack.pop(); }\n        }\n    }\n}\n</code></pre>\n\n<p>The compiler (nightly build) fails with the following error (same error is actually printed twice as I'm doing the same mistake twice):</p>\n\n<pre><code>src/test.rs:38:37: 38:42 error: use of moved value: `stack`\nsrc/test.rs:38             OptionalToken::Foo =&gt; { stack.dump(); }\n                                                   ^~~~~\nsrc/test.rs:38:37: 38:42 note: `stack` moved here because it has type `collections::vec::Vec&lt;f64&gt;`, which is non-copyable\nsrc/test.rs:38             OptionalToken::Foo =&gt; { stack.dump(); }\n</code></pre>\n\n<p>What am I doing wrong here? What would I have to modify to get code structured like this to work?</p>\n"}, {"tags": ["data-structures", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1422864863, "post_id": 28273252, "comment_id": 44901846, "body": "It\u2019s OK to post something like this as a question and then answer it, but you need to follow the appropriate forms for this site: <a href=\"http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/\">blog.stackoverflow.com/2011/07/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 0, "last_activity_date": 1562424055, "last_edit_date": 1562424055, "creation_date": 1422869181, "answer_id": 28274485, "question_id": 28273252, "link": "https://stackoverflow.com/questions/28273252/how-to-reverse-a-singly-linked-list-and-convert-it-to-a-vector/28274485#28274485", "title": "How to reverse a singly-linked list and convert it to a vector?", "body": "<p>Fill the vector, then reverse it using <code>.as_mut_slice().reverse()</code>.</p>\n\n<pre><code>fn rev1&lt;A&gt;(fel: &amp;Rc&lt;FrontierElem&lt;A&gt;&gt;) -&gt; Vec&lt;A&gt;\nwhere\n    A: Clone,\n{\n    let mut cur = fel;\n    let mut ret = Vec::new();\n    while let Some(ref prev) = cur.prev {\n        ret.push(cur.action.clone());\n        cur = prev;\n    } // First action (where cur.prev==None) is ignored by design\n    ret.as_mut_slice().reverse();\n    ret\n}\n</code></pre>\n"}], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 28274485, "answer_count": 1, "score": 1, "last_activity_date": 1562424055, "creation_date": 1422863828, "last_edit_date": 1562423996, "question_id": 28273252, "link": "https://stackoverflow.com/questions/28273252/how-to-reverse-a-singly-linked-list-and-convert-it-to-a-vector", "title": "How to reverse a singly-linked list and convert it to a vector?", "body": "<p>While writing the A* algorithm, I tried to reverse a singly-linked list of actions and pack it into <code>Vec</code>.</p>\n\n<p>Here's the structure for my singly-linked list:</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct FrontierElem&lt;A&gt; {\n    prev: Option&lt;Rc&lt;FrontierElem&lt;A&gt;&gt;&gt;,\n    action: A,\n}\n</code></pre>\n\n<p>My first thought was to <code>push</code> actions into <code>Vec</code> then reverse the vector:</p>\n\n<pre><code>fn rev1&lt;A&gt;(fel: &amp;Rc&lt;FrontierElem&lt;A&gt;&gt;) -&gt; Vec&lt;A&gt;\nwhere\n    A: Clone,\n{\n    let mut cur = fel;\n    let mut ret = Vec::new();\n    while let Some(ref prev) = cur.prev {\n        ret.push(cur.action.clone());\n        cur = prev;\n    } // First action (where cur.prev==None) is ignored by design\n    ret.as_mut_slice().reverse();\n    ret\n}\n</code></pre>\n\n<p>I didn't find the <code>SliceExt::reverse</code> method at the time, so I proceeded to the second plan: fill the vector from the end to the start. I didn't find a way to do that safely.</p>\n\n<pre><code>/// Copies action fields from single-linked list to vector in reverse order.\n/// `fel` stands for first element\nfn rev2&lt;A&gt;(fel: &amp;Rc&lt;FrontierElem&lt;A&gt;&gt;) -&gt; Vec&lt;A&gt;\nwhere\n    A: Clone,\n{\n    let mut cnt = 0usize;\n    // First pass. Let's find a length of list `fel`\n    {\n        let mut cur = fel;\n        while let Some(ref prev) = cur.prev {\n            cnt = cnt + 1;\n            cur = prev;\n        }\n    } // Lexical scoping to unborrow `fel`\n\n    // Second pass. Create and fill `ret` vector\n    let mut ret = Vec::&lt;A&gt;::with_capacity(cnt);\n    {\n        let mut idx = cnt - 1;\n        let mut cur = fel;\n        // I didn't find safe and fast way to populate vector from the end to the beginning.\n        unsafe {\n            ret.set_len(cnt); //unsafe. vector values aren't initialized\n            while let Some(ref prev) = cur.prev {\n                ret[idx] = cur.action.clone();\n                idx = idx - 1;\n                cur = prev;\n            }\n        }\n        assert_eq!(idx, std::usize::MAX);\n    } // Lexical scoping to make `fel` usable again\n    ret\n}\n</code></pre>\n\n<p>While I was writing this, it occurred to me that I can also implement <code>Iterator</code> for the linked list and then use <code>rev</code> and <code>from_iter</code> to create a vector. Alas, this requires significant overhead, as I must implement <code>DoubleEndedIterator</code> trait for <code>rev</code> to work. </p>\n\n<p>At this point my question seems trivial, but I post it in hope that it will be of some use.</p>\n\n<p>Benchmark:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>running 2 tests\ntest bench_rev1 ... bench:   1537061 ns/iter (+/- 14466)\ntest bench_rev2 ... bench:   1556088 ns/iter (+/- 17165)\n</code></pre>\n"}, {"tags": ["casting", "rust", "numbers"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422887128, "post_id": 28273169, "comment_id": 44913683, "body": "Be careful using <code>isize</code> / <code>usize</code> - the range of numbers they can represent <a href=\"http://doc.rust-lang.org/std/usize/index.html\" rel=\"nofollow noreferrer\">changes based on the platform</a> you are compiling for! Your example might be better expressed using <code>u64</code> instead."}], "answers": [{"comments": [{"owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1422923339, "post_id": 28280042, "comment_id": 44932418, "body": "Re how to fit 2 things in a space meant for 1: exactly, hence an API that returns an <code>Option&lt;u32&gt;</code> seems like exactly what I want - is there no replacement for <code>ToPrimitive</code>? That&#39;s the type of answer I was expecting (though your snippet is also useful)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1422924195, "post_id": 28280042, "comment_id": 44932675, "body": "@Caspar I can&#39;t point to a straight replacement, but did amend my answer to include some more pointers about what to do."}, {"owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "reply_to_user": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1485018254, "post_id": 28280042, "comment_id": 70754256, "body": "@Caspar I needed the same and packaged into an own crate: <a href=\"https://crates.io/crates/as_num\" rel=\"nofollow noreferrer\">crates.io/crates/as_num</a>"}, {"owner": {"reputation": 128, "user_id": 4012426, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000105441681/picture?type=large", "display_name": "Hutch Moore", "link": "https://stackoverflow.com/users/4012426/hutch-moore"}, "edited": false, "score": 0, "creation_date": 1596324510, "post_id": 28280042, "comment_id": 111776569, "body": "I thought <code>as</code> panics in debug mode, and only silently overflows in release mode?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 128, "user_id": 4012426, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000105441681/picture?type=large", "display_name": "Hutch Moore", "link": "https://stackoverflow.com/users/4012426/hutch-moore"}, "edited": false, "score": 1, "creation_date": 1596458517, "post_id": 28280042, "comment_id": 111808687, "body": "@HutchMoore <code>as</code> never panics, AFAIK. Only mathematical operations (e.g. addition, subtraction) panic. While usually thought of as debug/release, it&#39;s separately controllable. See <a href=\"https://stackoverflow.com/q/34054669/155423\">How to compile and run an optimized Rust program with overflow checking enabled</a>"}, {"owner": {"reputation": 408, "user_id": 10259813, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-alOmMsQB0es/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM6E8TX6-Nv7lZ0WMNh4LP5r2ZbEA/mo/photo.jpg?sz=128", "display_name": "sam", "link": "https://stackoverflow.com/users/10259813/sam"}, "edited": false, "score": 0, "creation_date": 1611763762, "post_id": 28280042, "comment_id": 116556713, "body": "Example of where using as can go wrong... <code>println!(&quot;{}&quot;, (-1i32) as u32)</code> will output <code>4294967196</code> with no error"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 75, "last_activity_date": 1581436822, "last_edit_date": 1581436822, "creation_date": 1422887607, "answer_id": 28280042, "question_id": 28273169, "link": "https://stackoverflow.com/questions/28273169/how-do-i-convert-between-numeric-types-safely-and-idiomatically/28280042#28280042", "title": "How do I convert between numeric types safely and idiomatically?", "body": "<h1>Converting values</h1>\n\n<h2>From a type that fits completely within another</h2>\n\n<p>There's no problem here. Use the <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"noreferrer\"><code>From</code></a> trait to be explicit that there's no loss occurring:</p>\n\n<pre><code>fn example(v: i8) -&gt; i32 {\n    i32::from(v) // or v.into()\n}\n</code></pre>\n\n<p>You could choose to use <code>as</code>, but it's recommended to avoid it when you don't need it (see below):</p>\n\n<pre><code>fn example(v: i8) -&gt; i32 {\n    v as i32\n}\n</code></pre>\n\n<h2>From a type that doesn't fit completely in another</h2>\n\n<p>There isn't a single method that makes general sense - you are asking how to fit two things in a space meant for one. One good initial attempt is to use an <code>Option</code> \u2014 <code>Some</code> when the value fits and <code>None</code> otherwise. You can then fail your program or substitute a default value, depending on your needs.</p>\n\n<p>Since Rust 1.34, you can use <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\" rel=\"noreferrer\"><code>TryFrom</code></a>:</p>\n\n<pre><code>use std::convert::TryFrom;\n\nfn example(v: i32) -&gt; Option&lt;i8&gt; {\n    i8::try_from(v).ok()\n}\n</code></pre>\n\n<p>Before that, you'd have to write similar code yourself:</p>\n\n<pre><code>fn example(v: i32) -&gt; Option&lt;i8&gt; {\n    if v &gt; std::i8::MAX as i32 {\n        None\n    } else {\n        Some(v as i8)\n    }\n}\n</code></pre>\n\n<h1>What <code>as</code> does</h1>\n\n<blockquote>\n  <p>but <code>4294967296us as u32</code> will silently overflow and give a result of 0</p>\n</blockquote>\n\n<p>When converting to a smaller type, <code>as</code> just takes the lower bits of the number, disregarding the upper bits, including the sign:</p>\n\n<pre><code>fn main() {\n    let a: u16 = 0x1234;\n    let b: u8 = a as u8;\n    println!(\"0x{:04x}, 0x{:02x}\", a, b); // 0x1234, 0x34\n\n    let a: i16 = -257;\n    let b: u8 = a as u8;\n    println!(\"0x{:02x}, 0x{:02x}\", a, b); // 0xfeff, 0xff\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/48795329/155423\">What is the difference between From::from and as in Rust?</a></li>\n</ul>\n\n<h1>About <code>ToPrimitive</code> / <code>FromPrimitive</code></h1>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/621fcafd533d3d823727dd7f6e3d2a17286f34df/text/0369-num-reform.md#fromprimitive-and-friends\" rel=\"noreferrer\">RFC 369, Num Reform, states</a>:</p>\n\n<blockquote>\n  <p>Ideally [...] <code>ToPrimitive</code> [...] would all be removed in favor of a more principled way of working with C-like enums</p>\n</blockquote>\n\n<p>In the meantime, these traits live on in the <a href=\"https://crates.io/crates/num\" rel=\"noreferrer\">num crate</a>:</p>\n\n<ul>\n<li><a href=\"https://docs.rs/num/0.2.1/num/trait.ToPrimitive.html\" rel=\"noreferrer\"><code>ToPrimitive</code></a></li>\n<li><a href=\"https://docs.rs/num/0.2.1/num/trait.FromPrimitive.html\" rel=\"noreferrer\"><code>FromPrimitive</code></a></li>\n</ul>\n"}], "owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50211, "favorite_count": 13, "accepted_answer_id": 28280042, "answer_count": 1, "score": 76, "last_activity_date": 1581436822, "creation_date": 1422863433, "last_edit_date": 1592644375, "question_id": 28273169, "link": "https://stackoverflow.com/questions/28273169/how-do-i-convert-between-numeric-types-safely-and-idiomatically", "title": "How do I convert between numeric types safely and idiomatically?", "body": "<blockquote>\n<p>Editor's note: This question is from a version of Rust prior to 1.0 and references some items that are not present in Rust 1.0. The answers still contain valuable information.</p>\n</blockquote>\n<p>What's the idiomatic way to convert from (say) a <code>usize</code> to a <code>u32</code>?</p>\n<p>For example, casting using <code>4294967295us as u32</code> works and the <a href=\"https://doc.rust-lang.org/0.12.0/reference.html#type-cast-expressions\" rel=\"noreferrer\">Rust 0.12 reference docs on type casting</a> say</p>\n<blockquote>\n<p>A numeric value can be cast to any numeric type. A raw pointer value can be cast to or from any integral type or raw pointer type. Any other cast is unsupported and will fail to compile.</p>\n</blockquote>\n<p>but <code>4294967296us as u32</code> will silently overflow and give a result of 0.</p>\n<p>I found <a href=\"https://doc.rust-lang.org/0.12.0/std/num/trait.ToPrimitive.html\" rel=\"noreferrer\"><code>ToPrimitive</code></a> and <a href=\"https://doc.rust-lang.org/0.12.0/std/num/trait.FromPrimitive.html\" rel=\"noreferrer\"><code>FromPrimitive</code></a> which provide nice functions like <code>to_u32() -&gt; Option&lt;u32&gt;</code>, but they're marked as unstable:</p>\n<blockquote>\n<p><code>#[unstable(feature = &quot;core&quot;, reason = &quot;trait is likely to be removed&quot;)]</code></p>\n</blockquote>\n<p>What's the idiomatic (and safe) way to convert between numeric (and pointer) types?</p>\n<p>The platform-dependent size of <code>isize</code> / <code>usize</code> is one reason why I'm asking this question - the original scenario was I wanted to convert from <code>u32</code> to <code>usize</code> so I could represent a tree in a <code>Vec&lt;u32&gt;</code> (e.g. <code>let t = Vec![0u32, 0u32, 1u32]</code>, then to get the grand-parent of node 2 would be <code>t[t[2us] as usize]</code>), and I wondered how it would fail if <code>usize</code> was less than 32 bits.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1422861634, "creation_date": 1422861634, "answer_id": 28272802, "question_id": 28272739, "link": "https://stackoverflow.com/questions/28272739/how-do-i-provide-type-annotations-inline-when-calling-a-non-generic-function/28272802#28272802", "title": "How do I provide type annotations inline when calling a non-generic function?", "body": "<p>Like so:</p>\n\n<pre><code>fn main() {\n    use std::num::Int;\n    println!(\"Max usize: {}\", &lt;usize as Int&gt;::max_value());\n}\n</code></pre>\n"}], "owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1222, "favorite_count": 0, "accepted_answer_id": 28272802, "answer_count": 1, "score": 6, "last_activity_date": 1422886209, "creation_date": 1422861410, "last_edit_date": 1422886209, "question_id": 28272739, "link": "https://stackoverflow.com/questions/28272739/how-do-i-provide-type-annotations-inline-when-calling-a-non-generic-function", "title": "How do I provide type annotations inline when calling a non-generic function?", "body": "<p>One way I know is to provide the type annotations in Rust is by declaring an intermediate variable so the compiler knows the return type:</p>\n\n<pre><code>use std::num::Int\nlet max_usize: usize = Int::max_value();\nprintln!(\"Max usize: {}\", max_usize);\n</code></pre>\n\n<p>But how can I provide the type annotation \"inline\"?</p>\n\n<p>For example, I don't expect the following to work unmodified because there's no type annotation at all, but this is the kind of thing I'm after:</p>\n\n<pre><code>use std::num::Int\nprintln!(\"Max usize: {}\", Int::max_value());\n</code></pre>\n\n<p>I tried <code>Int::max_value::&lt;usize&gt;()</code>, which gives <code>error: too many type parameters provided: expected at most 0 parameter(s), found 1 parameter(s)</code> - and that makes sense because <code>max_value()</code> isn't generic.</p>\n\n<p>In Scala I would write <code>myFunction(someDog: Animal)</code> instead of writing </p>\n\n<pre><code>val someAnimal: Animal = someDog\nmyFunction(someAnimal)\n</code></pre>\n\n<p>Is there equivalent syntax in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1455760327, "post_id": 28265036, "comment_id": 58638071, "body": "I have a crate (<code>range_check</code>) that provides <code>Contains</code> and <code>Within</code> traits for this."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422811063, "post_id": 28265424, "comment_id": 44887431, "body": "Do you think a PR to add this (to all the <code>Range*</code> structs) would be welcomed?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1422824484, "post_id": 28265424, "comment_id": 44891779, "body": "Not without an RFC. Frankly, nonessential feature expansion is unlikely before 1.0. That said, an RFC is relatively easy to write."}, {"owner": {"reputation": 3647, "user_id": 353178, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/28b6612d548d24ff57361dac58ac3fee?s=128&d=identicon&r=PG", "display_name": "mkirk", "link": "https://stackoverflow.com/users/353178/mkirk"}, "edited": false, "score": 0, "creation_date": 1465006783, "post_id": 28265424, "comment_id": 62733847, "body": "What about negative numbers?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 3647, "user_id": 353178, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/28b6612d548d24ff57361dac58ac3fee?s=128&d=identicon&r=PG", "display_name": "mkirk", "link": "https://stackoverflow.com/users/353178/mkirk"}, "edited": false, "score": 0, "creation_date": 1465123257, "post_id": 28265424, "comment_id": 62761755, "body": "@mkirk: what about negative numbers? If you\u2019re using signed integers there\u2019s nothing special about negative numbers."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 9, "last_activity_date": 1422810953, "creation_date": 1422810953, "answer_id": 28265424, "question_id": 28265036, "link": "https://stackoverflow.com/questions/28265036/how-can-i-test-if-a-value-lies-within-a-range/28265424#28265424", "title": "How can I test if a value lies within a Range?", "body": "<p>There is nothing on <code>Range</code> itself (at present, anyway), but it is not difficult to do this; after all, it just takes a couple of comparisons:</p>\n\n<pre><code>4 &gt;= a.start &amp;&amp; 4 &lt; a.end\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 30, "last_activity_date": 1558702864, "last_edit_date": 1558702864, "creation_date": 1518912769, "answer_id": 48847196, "question_id": 28265036, "link": "https://stackoverflow.com/questions/28265036/how-can-i-test-if-a-value-lies-within-a-range/48847196#48847196", "title": "How can I test if a value lies within a Range?", "body": "<p>As of Rust 1.35, the original code will <em>almost</em><sup>1</sup> compile as-is using <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains\" rel=\"noreferrer\"><code>Range::contains</code></a>:</p>\n\n<pre><code>fn main() {\n    let a = 3..5;\n    assert!(a.contains(&amp;4));\n}\n</code></pre>\n\n<p><sup>1</sup> Passing <code>&amp;4</code> instead of <code>4</code> to <code>contains()</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 793, "user_id": 1542878, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/f7c200986d36c773fa33c5b96c124d70?s=128&d=identicon&r=PG", "display_name": "Robert Jaskowski", "link": "https://stackoverflow.com/users/1542878/robert-jaskowski"}, "edited": false, "score": 0, "creation_date": 1617992637, "post_id": 56193733, "comment_id": 118476479, "body": "According to rustc version 1.51.0 the ... (range pattern) is <b>deprected</b>. Use ..= (inclusive range) instead. See also <a href=\"https://github.com/rust-lang/rust/issues/37854\" rel=\"nofollow noreferrer\">Tracking issue for exclusive range patterns</a>."}], "tags": [], "owner": {"reputation": 141, "user_id": 9158081, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7ba96392acd41a289c1801c9b078231c?s=128&d=identicon&r=PG&f=1", "display_name": "Ruben Kostandyan", "link": "https://stackoverflow.com/users/9158081/ruben-kostandyan"}, "is_accepted": false, "score": 8, "last_activity_date": 1558140221, "last_edit_date": 1558140221, "creation_date": 1558128207, "answer_id": 56193733, "question_id": 28265036, "link": "https://stackoverflow.com/questions/28265036/how-can-i-test-if-a-value-lies-within-a-range/56193733#56193733", "title": "How can I test if a value lies within a Range?", "body": "<p>You can use <code>match</code> too:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let v = 132;\n    match v {\n        1...100 =&gt; println!(\"Inside\"),\n        _ =&gt; println!(\"Outside\")\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7540, "favorite_count": 0, "accepted_answer_id": 48847196, "answer_count": 3, "score": 19, "last_activity_date": 1603216804, "creation_date": 1422808781, "last_edit_date": 1498579670, "question_id": 28265036, "link": "https://stackoverflow.com/questions/28265036/how-can-i-test-if-a-value-lies-within-a-range", "title": "How can I test if a value lies within a Range?", "body": "<p>I'd like to be able to create a <a href=\"http://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"noreferrer\"><code>Range</code></a> and then test if a variable is contained in that range. Something that looks like this: </p>\n\n<pre><code>fn main() {\n    let a = 3..5;\n    assert!(a.contains(4));\n}\n</code></pre>\n\n<p>Right now, the only obvious thing I see is to use <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.any\" rel=\"noreferrer\"><code>Iterator::any</code></a>. This is ugly because it would take an O(1) operation and make it O(n):</p>\n\n<pre><code>fn main() {\n    let mut a = 3..5;\n    assert!(a.any(|v: i32| v == 4));\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422804694, "post_id": 28264349, "comment_id": 44885429, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed\">Are polymorphic variables allowed?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422804733, "post_id": 28264349, "comment_id": 44885447, "body": "Specifically <a href=\"http://stackoverflow.com/a/28220053/155423\">this answer</a> to that question."}, {"owner": {"reputation": 51, "user_id": 350633, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b9b810a70c235336dc2437f28644326?s=128&d=identicon&r=PG", "display_name": "JakeK", "link": "https://stackoverflow.com/users/350633/jakek"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422805285, "post_id": 28264349, "comment_id": 44885622, "body": "Yes, thank you @Shepmaster"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422805736, "post_id": 28264349, "comment_id": 44885769, "body": "No problem, and welcome to Stack Overflow! Make sure to upvote questions and answers that you find useful. This helps other people (and future you) find high-quality answers."}], "answers": [{"tags": [], "owner": {"reputation": 11, "user_id": 4190270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ede6160e1346589c7405579dd07bcdfc?s=128&d=identicon&r=PG&f=1", "display_name": "Wendell", "link": "https://stackoverflow.com/users/4190270/wendell"}, "is_accepted": false, "score": 1, "last_activity_date": 1426535325, "last_edit_date": 1495541039, "creation_date": 1426535325, "answer_id": 29085689, "question_id": 28264349, "link": "https://stackoverflow.com/questions/28264349/can-i-select-a-trait-object-at-runtime-without-using-a-boxtrait/29085689#29085689", "title": "Can I select a trait object at runtime without using a Box&lt;Trait&gt;?", "body": "<p>As pointed out by @Shepmaster, there is a way to do this similar to <a href=\"https://stackoverflow.com/a/28220053/155423\">this answer</a> from a <a href=\"https://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed\">previous question</a>.</p>\n\n<p>The way to solve this is to predeclare the <em>two</em> necessary variables: a <code>File</code>, and a <code>BufReader</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn poly_read(from_file: bool) {\n    // These two variables are predeclared so that they are in scope as\n    // long as `reader` is\n    let mut file_reader;\n    let mut buf_reader;\n\n    let mut reader = if from_file {\n        file_reader = File::open(&amp;Path::new(PATH)).unwrap();\n        &amp;mut file_reader as &amp;mut Reader\n    } else {\n        buf_reader = BufReader::new(BYTES);\n        &amp;mut buf_reader as &amp;mut Reader\n    };\n\n    read(&amp;mut reader);\n}\n</code></pre>\n\n<p>Also see <a href=\"http://is.gd/ZfSlC1\" rel=\"nofollow noreferrer\">this code on the Rust playpen.</a>.</p>\n"}], "owner": {"reputation": 51, "user_id": 350633, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b9b810a70c235336dc2437f28644326?s=128&d=identicon&r=PG", "display_name": "JakeK", "link": "https://stackoverflow.com/users/350633/jakek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 274, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1426535325, "creation_date": 1422804484, "question_id": 28264349, "link": "https://stackoverflow.com/questions/28264349/can-i-select-a-trait-object-at-runtime-without-using-a-boxtrait", "title": "Can I select a trait object at runtime without using a Box&lt;Trait&gt;?", "body": "<p>I would like to branch and decide on a Trait implementation to use within a function at runtime (see <code>poly_read</code> in the code sample below). The trait object is constructed inside of the branch arms of an if expression and only needs to live for the life of <code>poly_read</code> yet I need to <code>Box</code> it because the trait can't be borrowed from within the expression arm, up to the binding that I'm attempting to assign it to.</p>\n\n<p>I understand logically why the borrow ends too early, but it seems like the borrow checker should be able to extend the borrow up to the surrounding scope when the if expression's value is bound. I realize this is probably a naive notion, but I'd like to understand more about why it's not possible.</p>\n\n<p>I'm a bit unhappy with the solution I have now because it requires a heap allocation even though I feel like I shouldn't need one, since I only hold onto the box for the life of the function. I suppose this is because we don't know the size of <code>reader</code> that would be required on the stack until the branch is taken, but couldn't it just be represented as a union in the compiler, since we at least know the maximum size.</p>\n\n<p>As an aside, I actually don't know how valid my concern about the <code>Box</code> being heap allocated is to begin with. In general how expensive is boxing the value?</p>\n\n<pre><code>#![feature(io)]\n#![feature(path)]\n\nconst BYTES: &amp;'static [u8] = &amp;[1u8, 2, 3, 4, 5];\nconst PATH: &amp;'static str = \"/usr/share/dict/words\";\n\nuse std::old_io::{File, Reader, BufReader};\n\n\nfn read(r: &amp;mut Reader) {\n    let some_bytes = r.read_exact(5).unwrap();\n    assert!(some_bytes.len() == 5);\n    println!(\"{:?}\", some_bytes);\n}\n\nfn poly_read(from_file: bool) {\n    // Is there any way to extend the lifetime of the ``&amp;mut Reader`` in these branch arms without\n    // boxing them as I'm doing now. It seems wasteful to do a heap allocation when the actual\n    // borrow only needs to happen for body of poly_read?\n    let mut reader = if from_file {\n        Box::new(File::open(&amp;Path::new(PATH)).unwrap()) as Box&lt;Reader&gt;\n        // Would like to say:\n        // File::open(&amp;Path::new(FILE)).unwrap() as &amp;mut Reader\n    } else {\n        Box::new(BufReader::new(BYTES)) as Box&lt;Reader&gt;\n        // Would like to say:\n        // BufReader::new(BYTES) as &amp;mut Reader\n    };\n    // It feels like I'd like the lifetime of values returned from if expressions to be of the\n    // surrounding scope, rather than the branch arms.\n    read(&amp;mut reader);\n}\n\nfn main() {\n    poly_read(true);\n    poly_read(false);\n}\n</code></pre>\n"}, {"tags": ["posix", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 1, "user_id": 4516821, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-YcTDGmT7k5M/AAAAAAAAAAI/AAAAAAAAAR8/JjqAZ0eXlCw/photo.jpg?sz=128", "display_name": "Neil Dunbar", "link": "https://stackoverflow.com/users/4516821/neil-dunbar"}, "edited": false, "score": 0, "creation_date": 1422882233, "post_id": 28263247, "comment_id": 44910853, "body": "Thanks for this - the res usize thing was a brain fart from me. It compiles well now - although I&#39;m getting the wrong user details for the inputs now (the details are valid, just not for the specified user; probably a system configuration/SELinux thing). But I understand the foreign pointer voodoo a little better now."}, {"owner": {"reputation": 1, "user_id": 4516821, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-YcTDGmT7k5M/AAAAAAAAAAI/AAAAAAAAAR8/JjqAZ0eXlCw/photo.jpg?sz=128", "display_name": "Neil Dunbar", "link": "https://stackoverflow.com/users/4516821/neil-dunbar"}, "edited": false, "score": 0, "creation_date": 1422884781, "post_id": 28263247, "comment_id": 44912243, "body": "Actually, found the error. Looks like the AsNTStr is a bit unstable. If I replace <code>use posix::AsNTStr</code> with <code>use posix::ToNTStr</code>, and the <code>uname.as_bytes().as_nt_str()</code> by <code>uname.to_nt_str</code>, it returns correctly, repeatably."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 0, "last_activity_date": 1422797586, "creation_date": 1422797586, "answer_id": 28263247, "question_id": 28262485, "link": "https://stackoverflow.com/questions/28262485/extracting-pw-dir-from-posixpwdgetpwnam-r/28263247#28263247", "title": "Extracting pw_dir from posix::pwd::getpwnam_r", "body": "<p>Here is a working example:</p>\n\n<pre><code>extern crate posix;\n\nuse std::ffi;\nuse std::str;\n\nuse posix::AsNTStr;\n\nfn main() {\n    let uname = \"root\";\n\n    let mut pwbuf = [0u8; 4096];\n    let mut res: usize = 0;\n    let mut pwd = posix::pwd::passwd::new();\n    let rv = posix::pwd::getpwnam_r(&amp;uname.as_bytes().as_nt_str(), &amp;mut pwd, &amp;mut pwbuf, &amp;mut res);\n\n    let p = pwd.pw_dir as *const _;\n    let hd = unsafe{ ffi::c_str_to_bytes(&amp;p) };\n    let hd_str = str::from_utf8(hd).unwrap();\n    if rv == 0 {\n        println!(\"root home dir is {}\", hd_str);\n    } else {\n        println!(\"getpwnam_r error {}\", res);\n    }\n}\n</code></pre>\n\n<p>First, I've fixed several type-related errors. For example, <code>getpwnam_r</code> expects a reference to something which implements <code>NTStr</code> trait, so there is an <code>&amp;</code> before <code>uname.as_bytes().as_nt_str()</code>. You also need to obtain <code>&amp;[u8]</code> from <code>&amp;str</code> before calling <code>as_nt_str()</code> because <code>AsNTStr</code> trait is implemented for <code>&amp;[u8]</code> but not for <code>&amp;str</code>. I've also extracted the cast to <code>*const i8</code> and added the conversion from <code>&amp;[u8]</code> to <code>&amp;str</code>.</p>\n\n<p>Second, <code>res</code> argument is not the value you should check for errors. I'm not sure why the author of <code>posix</code> chose to represent it as <code>usize</code>, but <code>res</code> is in fact a pointer to the resulting <code>passwd</code> structure. You can find it in <code>man getpwnam_r</code> man page. You need to check the actual return value of <code>getpwnam_r</code> call in order to determine if any errors happened.</p>\n\n<p>The above code prints the correct <code>/root</code> directory for me.</p>\n"}], "owner": {"reputation": 1, "user_id": 4516821, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-YcTDGmT7k5M/AAAAAAAAAAI/AAAAAAAAAR8/JjqAZ0eXlCw/photo.jpg?sz=128", "display_name": "Neil Dunbar", "link": "https://stackoverflow.com/users/4516821/neil-dunbar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 171, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1422801935, "creation_date": 1422792256, "last_edit_date": 1422801935, "question_id": 28262485, "link": "https://stackoverflow.com/questions/28262485/extracting-pw-dir-from-posixpwdgetpwnam-r", "title": "Extracting pw_dir from posix::pwd::getpwnam_r", "body": "<p>Trying to read an arbitrary user's home directory inside a Rust fn, and using the posix::pwd crate.</p>\n\n<p>Unfortunately, I can't find any good example of that FFI use, and keep banging into various type errors on mutability of pointers and types.</p>\n\n<p>My (non-compiling) example code is here:</p>\n\n<pre><code>let uname = \"root\";\nlet mut pwbuf = [0u8;4096];\nlet mut res : usize = 0;\nlet mut pwd = posix::pwd::passwd::new();\nposix::pwd::getpwnam_r(uname.as_nt_str(), &amp;mut pwd, &amp;mut pwbuf, &amp;mut res);\nlet hd = unsafe{ ffi::c_str_to_bytes(&amp;pwd.pw_dir as &amp;*const i8) };\nif res == 0 {\n    println!(\"root home dir is {}\", hd);\n} else {\n    println!(\"getpwnam_r error {}\", res);\n}\n</code></pre>\n\n<p>Anyone got a bit of example code which can extract the homedir into a &amp;str value?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1422862372, "post_id": 28261325, "comment_id": 44900878, "body": "We really need someone with Mj&#246;lnir in the Rust tag..."}], "answers": [{"comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 2, "creation_date": 1422791169, "post_id": 28261372, "comment_id": 44881580, "body": "Use <code>let i: i64 = &quot;123&quot;.parse();</code> instead of ugly template syntax if possible."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 3, "creation_date": 1422796094, "post_id": 28261372, "comment_id": 44882901, "body": "@hauleth, <code>.parse()</code> returns <code>Option&lt;T&gt;</code>, so that would have to be <code>let i: Option&lt;i64&gt; = &quot;123&quot;.parse();</code>."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1422796175, "post_id": 28261372, "comment_id": 44882916, "body": "Yes. Of course. I&#39;ve forgotten."}, {"owner": {"reputation": 594, "user_id": 664179, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9fba17c3c51f978433142182ff3e5a?s=128&d=identicon&r=PG", "display_name": "Keeper Hood", "link": "https://stackoverflow.com/users/664179/keeper-hood"}, "edited": false, "score": 0, "creation_date": 1562252800, "post_id": 28261372, "comment_id": 100328045, "body": "update: nowadays it returns <code>Result&lt;F, &lt;F as FromStr&gt;::Err&gt;</code> so simple <code>.parse()</code> won&#39;t work, or am I wrong?"}, {"owner": {"reputation": 5760, "user_id": 1863564, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XU4XS.png?s=128&g=1", "display_name": "Fund Monica&#39;s Lawsuit", "link": "https://stackoverflow.com/users/1863564/fund-monicas-lawsuit"}, "reply_to_user": {"reputation": 594, "user_id": 664179, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9fba17c3c51f978433142182ff3e5a?s=128&d=identicon&r=PG", "display_name": "Keeper Hood", "link": "https://stackoverflow.com/users/664179/keeper-hood"}, "edited": false, "score": 0, "creation_date": 1569379967, "post_id": 28261372, "comment_id": 102573943, "body": "@KeeperHood A simple parse will still work; you just need to handle the error like you used to handle the <code>Option</code>."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 19, "last_activity_date": 1608464835, "last_edit_date": 1608464835, "creation_date": 1422783431, "answer_id": 28261372, "question_id": 28261325, "link": "https://stackoverflow.com/questions/28261325/how-to-parse-i64-from-a-string/28261372#28261372", "title": "How to parse i64 from a string?", "body": "<p>Your import fails because the <code>FromStr</code> trait is now <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"nofollow noreferrer\"><code>std::str::FromStr</code></a>. Also, <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html#tymethod.from_str\" rel=\"nofollow noreferrer\"><code>from_str</code></a> is no longer in the <code>prelude</code>. The preferred way to convert strings to integers is <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\"><code>str::parse</code></a></p>\n<pre><code>fn main() {\n    let i = &quot;123&quot;.parse::&lt;i64&gt;();\n    println!(&quot;{:?}&quot;, i);\n}\n</code></pre>\n<p>prints</p>\n<pre class=\"lang-none prettyprint-override\"><code>Ok(123)\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main%28%29%20%7B%0A%20%20%20%20let%20i%20%3D%20%22123%22.parse%3A%3A%3Ci64%3E%28%29%3B%0A%20%20%20%20println!%28%22%7B%3A%3F%7D%22%2C%20i%29%3B%0A%7D\" rel=\"nofollow noreferrer\">Demo</a></p>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 16256, "favorite_count": 0, "closed_date": 1484679194, "accepted_answer_id": 28261372, "answer_count": 1, "score": 6, "last_activity_date": 1608464835, "creation_date": 1422783085, "last_edit_date": 1422801922, "question_id": 28261325, "link": "https://stackoverflow.com/questions/28261325/how-to-parse-i64-from-a-string", "closed_reason": "Duplicate", "title": "How to parse i64 from a string?", "body": "<p>Apparently, something has changed and thus I can't parse i64 from string:</p>\n\n<pre><code>use std::from_str::FromStr;\n\nlet tree1: BTreeMap&lt;String, String&gt; = //....\nlet my_i64: i64 = from_str(tree1.get(\"key1\").unwrap().as_slice()).unwrap();\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>16:27 error: unresolved import `std::from_str::FromStr`. Could not find `from_str` in `std`\n\n$ rustc -V\nrustc 1.0.0-nightly (4be79d6ac 2015-01-23 16:08:14 +0000)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 1, "last_activity_date": 1422775422, "last_edit_date": 1422775422, "creation_date": 1422774734, "answer_id": 28260394, "question_id": 28259925, "link": "https://stackoverflow.com/questions/28259925/convert-enum-to-btreemap/28260394#28260394", "title": "Convert enum to BTreeMap?", "body": "<p><strong>Edit</strong>: Actually, here's a better version that should be much more efficient and general.  Plus, you can re-use the macro for other enumerations (<a href=\"http://is.gd/Wtx29b\" rel=\"nofollow\">playpen link</a>).</p>\n\n<pre><code>#![feature(core)] // IO is currently in flux.\n\nuse std::collections::BTreeMap;\n\nmacro_rules! symbolic_enum {\n    ($enum_name:ident { $($variant:ident,)* }) =&gt; {\n        #[derive(Copy, Clone, Debug)]\n        enum $enum_name {\n            $($variant,)*\n        }\n\n        impl $enum_name {\n            pub fn values() -&gt; &amp;'static /*'*/ [$enum_name] {\n                use self::$enum_name::*;\n                const VALUES: &amp;'static /*'*/ [$enum_name] = &amp;[$($variant),*];\n                VALUES\n            }\n\n            pub fn names() -&gt; &amp;'static /*'*/ [&amp;'static /*'*/ str] {\n                const NAMES: &amp;'static /*'*/ [&amp;'static /*'*/ str] = &amp;[$(stringify!($variant)),*];\n                NAMES\n            }\n\n            pub fn items() -&gt; &amp;'static /*'*/ [(&amp;'static /*'*/ str, $enum_name)] {\n                use self::$enum_name::*;\n                const ITEMS: &amp;'static /*'*/ [(&amp;'static /*'*/ str, $enum_name)] = &amp;[\n                    $((stringify!($variant), $variant)),*\n                ];\n                ITEMS\n            }\n        }\n    }\n}\n\nsymbolic_enum! {\n    En1 {\n        Val1,\n        Val2,\n        Val3,\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", En1::values());\n    println!(\"{:?}\", En1::names());\n    println!(\"{:?}\", En1::items());\n    let map: BTreeMap&lt;_, _&gt; = En1::items().iter().cloned().collect();\n    println!(\"{:?}\", map);\n}\n</code></pre>\n\n<p><strong>Original</strong>: This is the shortest I can think of (<a href=\"http://is.gd/KNyaA7\" rel=\"nofollow\">playpen link</a>):</p>\n\n<pre><code>#![feature(core)] // IO is currently in flux.\n\nuse std::collections::BTreeMap;\n\n#[derive(Copy, Clone, Debug)]\nenum En1 {\n    Val1, \n    Val2, \n    Val3,\n}\n\n// /*'*/ is to fix syntax highlighting\nconst EN1_VALUES: &amp;'static /*'*/ [En1] = &amp;[En1::Val1, En1::Val2, En1::Val3];\n\nimpl En1 {\n    pub fn values() -&gt; &amp;'static /*'*/ [En1] {\n        EN1_VALUES\n    }\n\n    pub fn as_map() -&gt; BTreeMap&lt;String, En1&gt; {\n        En1::values().iter().cloned().map(|e| (format!(\"{:?}\", e), e)).collect()\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", En1::as_map());\n}\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1422775422, "creation_date": 1422769832, "question_id": 28259925, "link": "https://stackoverflow.com/questions/28259925/convert-enum-to-btreemap", "title": "Convert enum to BTreeMap?", "body": "<p>Can I convert an enum into a TreeMap?</p>\n\n<pre><code>enum En1 {\n  val1, \n  val2, \n  val3\n}\n\nfn fn1() -&gt; BTreeMap&lt;String, En1&gt; {\n  let mut map = BTreeMap::new();\n   //iterate through En1 somehow\n\n   // now map is: \"val1\" -&gt; val1, \"val2\" -&gt; val2, \"val3\" -&gt; val3\n   map\n}\n</code></pre>\n\n<p>I mean, the easiest way, with DRY.</p>\n"}, {"tags": ["reference", "rust", "move-semantics", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422755032, "post_id": 28258548, "comment_id": 44875057, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27750985/cannot-move-out-of-dereference-of-mut-pointer-while-building-a-sorted-linke\">`cannot move out of dereference of `&amp;mut`-pointer` while building a sorted linked list</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4599, "user_id": 153797, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/74030f885dd10e2d9ddfa5c980911c3c?s=128&d=identicon&r=PG", "display_name": "Gilles", "link": "https://stackoverflow.com/users/153797/gilles"}, "edited": false, "score": 0, "creation_date": 1422890617, "post_id": 28268208, "comment_id": 44915979, "body": "Which of the two solutions would you say is more idiomatic code?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4599, "user_id": 153797, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/74030f885dd10e2d9ddfa5c980911c3c?s=128&d=identicon&r=PG", "display_name": "Gilles", "link": "https://stackoverflow.com/users/153797/gilles"}, "edited": false, "score": 1, "creation_date": 1422890927, "post_id": 28268208, "comment_id": 44916177, "body": "Since you have a <code>Node</code> and a wrapper <code>List</code>, I&#39;d probably use the version with <code>take</code>; I think people understand <code>&amp;mut self</code> more than <code>self</code>. If the list was just composed of the <code>Node</code>s, you&#39;d have to use the <code>self</code> version. I&#39;d probably annotate it as <code>#[must_use]</code> as well, to help guide users."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 43, "last_activity_date": 1525290244, "last_edit_date": 1525290244, "creation_date": 1422826516, "answer_id": 28268208, "question_id": 28258548, "link": "https://stackoverflow.com/questions/28258548/cannot-move-out-of-borrowed-content-when-trying-to-transfer-ownership/28268208#28268208", "title": "Cannot move out of borrowed content when trying to transfer ownership", "body": "<blockquote>\n  <p>Cannot move out of borrowed content when trying to transfer ownership</p>\n</blockquote>\n\n<p>At a high-level, this is against-the-grain for Rust. You cannot transfer ownership of something borrowed <em>because you don't own it</em>. You shouldn't borrow my car  (<code>&amp;Car</code>) and then give it to the first person you see on the street! This is still true even if I lend you my car and allow you to make changes to it (<code>&amp;mut Car</code>).</p>\n\n<p>You cannot move <code>head</code> out of a <code>&amp;self</code> at all because you cannot mutate the value.</p>\n\n<p>You cannot move <code>head</code> out of a <code>&amp;mut self</code> because this would leave the <code>LinkedList</code> struct in an inconsistent state - one of the fields would have an undefined value. This is a core measure of Rust's safety guarantees.</p>\n\n<p>In general, you will need to follow something from <a href=\"https://stackoverflow.com/q/27098694/155423\">How can I swap in a new value for a field in a mutable reference to a structure?</a> to replace the existing value.</p>\n\n<p>In this case, you can use <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"noreferrer\"><code>Option::take</code></a>. This will leave the variable where it is, changing it in-place to a <code>None</code> and returning the previous value. You can then use that value to build the new head of the list:</p>\n\n<pre><code>pub fn prepend_value(&amp;mut self) {\n    let head = self.head.take();\n    self.head = Some(Box::new(LinkedListNode { next: head }));\n}\n</code></pre>\n\n<p>A more generic solution is to take ownership of the struct instead of borrowing it. This allows you to do whatever you want to it. Note that we take <code>self</code> by-value, not by-reference:</p>\n\n<pre><code>pub fn prepend_value(mut self) -&gt; LinkedList {\n    self.head = Some(Box::new(LinkedListNode { next: self.head }));\n    self\n} \n</code></pre>\n"}], "owner": {"reputation": 4599, "user_id": 153797, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/74030f885dd10e2d9ddfa5c980911c3c?s=128&d=identicon&r=PG", "display_name": "Gilles", "link": "https://stackoverflow.com/users/153797/gilles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14294, "favorite_count": 6, "accepted_answer_id": 28268208, "answer_count": 1, "score": 23, "last_activity_date": 1566909893, "creation_date": 1422754675, "last_edit_date": 1566909893, "question_id": 28258548, "link": "https://stackoverflow.com/questions/28258548/cannot-move-out-of-borrowed-content-when-trying-to-transfer-ownership", "title": "Cannot move out of borrowed content when trying to transfer ownership", "body": "<p>I'm writing a linked list to wrap my head around Rust lifetimes, ownership and references. I have the following code:</p>\n\n<pre><code>pub struct LinkedList {\n    head: Option&lt;Box&lt;LinkedListNode&gt;&gt;,\n}\n\npub struct LinkedListNode {\n    next: Option&lt;Box&lt;LinkedListNode&gt;&gt;,\n}\n\nimpl LinkedList {\n    pub fn new() -&gt; LinkedList {\n        LinkedList { head: None }\n    }\n\n    pub fn prepend_value(&amp;mut self) {\n        let mut new_node = LinkedListNode { next: None };\n\n        match self.head {\n            Some(ref head) =&gt; new_node.next = Some(*head),\n            None =&gt; new_node.next = None,\n        };\n\n        self.head = Some(Box::new(new_node));\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>But I am getting the following compilation error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:18:52\n   |\n18 |             Some(ref head) =&gt; new_node.next = Some(*head),\n   |                                                    ^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>Newer versions of Rust have a slightly different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of `*head` which is behind a shared reference\n  --&gt; src/main.rs:18:52\n   |\n18 |             Some(ref head) =&gt; new_node.next = Some(*head),\n   |                                                    ^^^^^ move occurs because `*head` has type `std::boxed::Box&lt;LinkedListNode&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I'm thinking that the <code>head</code> node must currently be owned by <code>self</code>, which is the linked list. When I assign it to <code>new_node.next</code>, there is probably a change of ownership that will happen. </p>\n\n<p>I would rather not clone the value if possible as that seems wasteful. I don't want to just \"borrow\" it for the duration of the function. I really want to transfer its ownership. </p>\n\n<p>How do I do that?</p>\n\n<p>I have already looked at <a href=\"https://stackoverflow.com/questions/28194335/error-cannot-move-out-of-borrowed-content-on-mut-self\">cannot move out of borrowed content when unwrapping a member variable in a &amp;mut self method</a> and <a href=\"https://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content\">Cannot move out of borrowed content / cannot move out of behind a shared reference</a>.</p>\n\n<p>I tried removing the match arm as suggested in the accepted answer in one of those questions and defining <code>next</code> in the creation of the new <code>LinkedListNode</code>, but I get the same error message.</p>\n\n<p>I have successfully added an <code>append</code> method which takes a <code>LinkedListNode</code> to add to the end of the list.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "edited": false, "score": 0, "creation_date": 1422751910, "post_id": 28257249, "comment_id": 44874567, "body": "Thank you. Now if I may extend upon the question, how would one pass a socket to a function within a thread :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "edited": false, "score": 0, "creation_date": 1422755981, "post_id": 28257249, "comment_id": 44875209, "body": "@user3746744 I&#39;m not sure exactly what you mean, but I would just <code>move</code> the entire socket into the thread at thread creation time. The thread then owns the socket, similar to how the <code>GameService</code> struct owns it in the answer. If that doesn&#39;t clear it up, you should read the <a href=\"http://doc.rust-lang.org/book/threads.html\" rel=\"nofollow noreferrer\">threads chapter in The Rust Programming Language</a> and then ask new clarifying questions, as needed."}, {"owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "edited": false, "score": 0, "creation_date": 1422758844, "post_id": 28257249, "comment_id": 44875645, "body": "Now that I really think about it I may be able to just use that struct to access the socket from a thread."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1500653580, "last_edit_date": 1500653580, "creation_date": 1422743247, "answer_id": 28257249, "question_id": 28257119, "link": "https://stackoverflow.com/questions/28257119/how-can-i-pass-a-socket-as-an-argument-to-a-function-being-called-within-a-threa/28257249#28257249", "title": "How can I pass a socket as an argument to a function being called within a thread?", "body": "<h1>Answer for updated question</h1>\n\n<p>We can use <a href=\"http://doc.rust-lang.org/std/net/struct.TcpStream.html#method.try_clone\" rel=\"nofollow noreferrer\"><code>TcpStream::try_clone</code></a>:</p>\n\n<pre><code>use std::io::Read;\nuse std::net::{TcpStream, Shutdown};\nuse std::thread;\n\nfn main() {\n    let mut stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\n    let stream2 = stream.try_clone().unwrap();\n\n    let _t = thread::spawn(move || {\n        // close this stream after one second\n        thread::sleep_ms(1000);\n        stream2.shutdown(Shutdown::Read).unwrap();\n    });\n\n    // wait for some data, will get canceled after one second\n    let mut buf = [0];\n    stream.read(&amp;mut buf).unwrap();\n}\n</code></pre>\n\n<h1>Original answer</h1>\n\n<p>It's usually (let's say 99.9% of the time) a bad idea to have <em>any</em> global mutable state, if you can help it. Just do as you said: pass the socket to the functions that need it.</p>\n\n<pre><code>use std::io::{self, Write};\nuse std::net::TcpStream;\n\nfn send_name(stream: &amp;mut TcpStream) -&gt; io::Result&lt;()&gt; {\n    stream.write(&amp;[42])?;\n    Ok(())\n}\n\nfn send_number(stream: &amp;mut TcpStream) -&gt; io::Result&lt;()&gt; {\n    stream.write(&amp;[1, 2, 3])?;\n    Ok(())\n}\n\nfn main() {\n    let mut stream = TcpStream::connect(\"127.0.0.1:31337\").unwrap();\n\n    let r = send_name(&amp;mut stream).and_then(|_| send_number(&amp;mut stream));\n\n    match r {\n        Ok(..) =&gt; println!(\"Yay, sent!\"),\n        Err(e) =&gt; println!(\"Boom! {}\", e),\n    }\n}\n</code></pre>\n\n<p>You could also pass the <code>TcpStream</code> to a struct that manages it, and thus gives you a place to put similar methods.</p>\n\n<pre><code>use std::io::{self, Write};\nuse std::net::TcpStream;\n\nstruct GameService {\n    stream: TcpStream,\n}\n\nimpl GameService {\n    fn send_name(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        self.stream.write(&amp;[42])?;\n        Ok(())\n    }\n\n    fn send_number(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        self.stream.write(&amp;[1, 2, 3])?;\n        Ok(())\n    }\n}\n\nfn main() {\n    let stream = TcpStream::connect(\"127.0.0.1:31337\").unwrap();\n    let mut service = GameService { stream: stream };\n\n    let r = service.send_name().and_then(|_| service.send_number());\n\n    match r {\n        Ok(..) =&gt; println!(\"Yay, sent!\"),\n        Err(e) =&gt; println!(\"Boom! {}\", e),\n    }\n}\n</code></pre>\n\n<p>None of this is really Rust-specific, these are generally-applicable programming practices. </p>\n"}], "owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1128, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1500653580, "creation_date": 1422742403, "last_edit_date": 1422759426, "question_id": 28257119, "link": "https://stackoverflow.com/questions/28257119/how-can-i-pass-a-socket-as-an-argument-to-a-function-being-called-within-a-threa", "title": "How can I pass a socket as an argument to a function being called within a thread?", "body": "<p>I'm going to have multiple functions that all need access to one main socket.</p>\n\n<p>Would it better to:</p>\n\n<ol>\n<li>Pass this socket to each function that needs access to it</li>\n<li>Have a globally accessible socket</li>\n</ol>\n\n<p>Can someone provide an example of the best way to do this?</p>\n\n<p>I come from a Python/Nim background where things like this are easily done.</p>\n\n<p><strong>Edit:</strong>\nHow can I pass a socket as an arg to a function being called within a thread.\nEx.</p>\n\n<pre><code>fn main() {\n   let mut s = BufferedStream::new((TcpStream::connect(server).unwrap()));\n   let thread = Thread::spawn(move || {\n       func1(s, arg1, arg2);\n   });\n\n   while true {\n       func2(s, arg1);\n   }\n}  \n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 22, "last_activity_date": 1544551213, "last_edit_date": 1544551213, "creation_date": 1422734232, "answer_id": 28255903, "question_id": 28255861, "link": "https://stackoverflow.com/questions/28255861/convert-string-to-socketaddr/28255903#28255903", "title": "Convert String to SocketAddr", "body": "<p><code>from_str</code> was renamed to <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"noreferrer\"><code>parse</code></a> and is now a method you can call on strings:</p>\n\n<pre><code>use std::net::SocketAddr;\n\nfn main() {\n    let server_details = \"127.0.0.1:80\";\n    let server: SocketAddr = server_details\n        .parse()\n        .expect(\"Unable to parse socket address\");\n    println!(\"{:?}\", server);\n}\n</code></pre>\n\n<p>If you'd like to be able to <strong>resolve DNS entries</strong> to IPv{4,6} addresses, you may want to use <a href=\"https://doc.rust-lang.org/std/net/trait.ToSocketAddrs.html\" rel=\"noreferrer\"><code>ToSocketAddrs</code></a>:</p>\n\n<pre><code>use std::net::{TcpStream, ToSocketAddrs};\n\nfn main() {\n    let server_details = \"stackoverflow.com:80\";\n    let server: Vec&lt;_&gt; = server_details\n        .to_socket_addrs()\n        .expect(\"Unable to resolve domain\")\n        .collect();\n    println!(\"{:?}\", server);\n\n    // Even easier, if you want to connect right away:\n    TcpStream::connect(server_details).expect(\"Unable to connect to server\");\n}\n</code></pre>\n\n<p><code>to_socket_addrs</code> returns an iterator as a single DNS entry can expand to <em>multiple</em> IP addresses! Note that this code won't work in the <a href=\"https://play.rust-lang.org/\" rel=\"noreferrer\">playground</a> as network access is disabled there; you'll need to try it out locally.</p>\n"}, {"comments": [{"owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "edited": false, "score": 0, "creation_date": 1422889090, "post_id": 28261860, "comment_id": 44915002, "body": "The string is a host:port combo from stdin. The address would change each time. I&#39;m quite sure it needs to be converted."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "edited": false, "score": 0, "creation_date": 1422889332, "post_id": 28261860, "comment_id": 44915164, "body": "Sorry, but I don&#39;t understand what you mean. You don&#39;t need to call <code>to_socket_addr()</code> manually when you just want to connect to something. And what do you mean about address changing each time?"}, {"owner": {"reputation": 466, "user_id": 1524794, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9bc2c3567516749bf35f08300cc48aa9?s=128&d=identicon&r=PG", "display_name": "HerbM", "link": "https://stackoverflow.com/users/1524794/herbm"}, "edited": false, "score": 0, "creation_date": 1617615085, "post_id": 28261860, "comment_id": 118344163, "body": "@vladimir-matveev ToSocketAddr expects (among other things) Name:Port or Address:Port when converting strings &quot;www.example.com&quot;.to_socketaddr &quot;192.168.0.1:80&quot;.to_socketaddr &quot;192.168.0.1:80&quot;.to_socketaddr"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 7, "last_activity_date": 1422787760, "creation_date": 1422787760, "answer_id": 28261860, "question_id": 28255861, "link": "https://stackoverflow.com/questions/28255861/convert-string-to-socketaddr/28261860#28261860", "title": "Convert String to SocketAddr", "body": "<p>I'll expand on \"if you want to connect right away\" comment in Shepmaster's answer.</p>\n\n<p>Note that you don't really need to convert a string to a <code>SocketAddr</code> in advance in order to connect to something. <code>TcpStream::connect()</code> and other functions which take addresses are defined to accept an instance of <code>ToSocketAddr</code> trait:</p>\n\n<pre><code>fn connect&lt;T: ToSocketAddr&gt;(addr: T) -&gt; TcpStream { ... }\n</code></pre>\n\n<p>It means that you can just pass a string to <code>connect()</code> without any conversions:</p>\n\n<pre><code>TcpStream::connect(\"stackoverflow.com:80\")\n</code></pre>\n\n<p>Moreover, it is <em>better</em> not to convert the string to the <code>SocketAddr</code> in advance because domain names can resolve to multiple addresses, and <code>TcpStream</code> has special logic to handle this.</p>\n"}], "owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7875, "favorite_count": 3, "accepted_answer_id": 28255903, "answer_count": 2, "score": 17, "last_activity_date": 1544551213, "creation_date": 1422733964, "last_edit_date": 1470798390, "question_id": 28255861, "link": "https://stackoverflow.com/questions/28255861/convert-string-to-socketaddr", "title": "Convert String to SocketAddr", "body": "<p>In versions of Rust before 1.0, I was able to use <code>from_str()</code> to convert a <code>String</code> to <code>SocketAddr</code>, but that function no longer exists. How can I do this in Rust 1.0.?</p>\n\n<pre><code>let server_details = reader.read_line().ok().expect(\"Something went wrong\").as_slice().trim();\n\nlet server: SocketAddr = from_str(server_details);\n\nlet mut s = BufferedStream::new((TcpStream::connect(server).unwrap()));\n</code></pre>\n"}, {"tags": ["opengl", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422733046, "post_id": 28255598, "comment_id": 44869643, "body": "&quot;how are these libraries compatible with the OpenGL API?&quot; Your cgmath-rs link is dead, but I don&#39;t see anything on nalgebra&#39;s site that says that it claims to be OpenGL-compatible. Could you link to something that indicates that they are supposed to be?"}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422733335, "post_id": 28255598, "comment_id": 44869734, "body": "Thanks. I fixed the link. No, I don&#39;t see anything explicitly saying they&#39;re OpenGL-compatible. However, both explicitly bill themselves as for &quot;graphics.&quot; Further, nalgebra <a href=\"http://nalgebra.org/doc/nalgebra/#&lt;strong&gt;nalgebra&lt;/strong&gt;-in-use\" rel=\"nofollow noreferrer\">cites its usage in kiss3d</a>, an OpenGL-based engine. So at least nalgebra is very strongly implying compatibility."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1422746448, "post_id": 28255598, "comment_id": 44873430, "body": "Just report a bug against that repository, IMO. No need to ask us about it :)"}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1422765294, "post_id": 28255598, "comment_id": 44876662, "body": "I&#39;m not convinced it&#39;s a bug, actually. I&#39;m asking because I&#39;m new to Rust, and I&#39;m not confident I know better than the authors of these libraries. Thus, I&#39;m asking whether my analysis is correct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422850861, "post_id": 28255598, "comment_id": 44897639, "body": "You may wish to rephrase your question to be more generic. You have specific examples that use the OpenGL API, but conceptually your question is closer to &quot;is it safe to transmute a non-repr(c) struct and pass it to c functions&quot;. That might nab some people who aren&#39;t familiar with OpenGL, but are with FFI in general."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1422892991, "post_id": 28255598, "comment_id": 44917593, "body": "Edited per your suggestion. Thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1422973420, "post_id": 28291530, "comment_id": 44953700, "body": "Perfect. That was my hunch. I&#39;ll see if I can get repr(C) added to some of these libraries in the wild."}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": true, "score": 2, "last_activity_date": 1423131916, "last_edit_date": 1423131916, "creation_date": 1422938711, "answer_id": 28291530, "question_id": 28255598, "link": "https://stackoverflow.com/questions/28255598/safe-to-pass-struct-without-reprc-to-c-api/28291530#28291530", "title": "Safe to pass struct without repr(C) to C API?", "body": "<blockquote>\n  <p>I've seen some libraries do this. In my experience, they use mem::transmute when it's time to pass the struct to a C function. Does transmute somehow eliminate the need for #[repr(C)]?</p>\n</blockquote>\n\n<p>No.</p>\n\n<p>...but it's complicated.</p>\n\n<p>If you have a &amp;Foo, and you pass it to C and <em>do not edit it at all</em>, then it's perfectly valid to convert your &amp;Foo to a *const c_void and pass it to a c call, something like:</p>\n\n<pre><code>let fp = &amp;foo as *const Foo as *const c_void\n</code></pre>\n\n<p>You may see people doing this as one step, using transmute;</p>\n\n<pre><code>unsafe { ffi_call(transmute(&amp;foo), ...) }\n</code></pre>\n\n<p>...but it's important to understand the transmute call does not modify the memory layout; but it does <em>consume values</em>. </p>\n\n<p>So for example, this code may result in a segfault later:</p>\n\n<pre><code>{\n  let foo = Foo { ... }\n  unsafe { ffi_call(&amp;foo as _ as *const c_void); }\n}\n</code></pre>\n\n<p>This is because the pointer &amp;foo points to foo; but foo stops existing after the scope ends; so if it gets used later (eg. ffi call keeps a reference) a segfault will result.</p>\n\n<p>You might think that boxing (ie. move to the heap) fixes this:</p>\n\n<pre><code>let foo = Box::new(Foo { ... })\nunsafe { ffi_call(&amp;*foo as *const c_void); }\n</code></pre>\n\n<p>...but it does not; because when the Box leaves scope it is dropped. However, because transmute moves values; this code safely moves the foo instance into the ffi call for use at any later time; note though that this is a memory leak if you don't recover the value later:</p>\n\n<pre><code>let foo = Box::new(Foo { ... })\nunsafe { ffi_call(transmute(foo)); }\n</code></pre>\n\n<p>...but no use of transmute() will solve the absence of repr(C), and yes, you can expect rust to mess around with your struct layout; this is usually to do with drop flags, and <em>may</em> be resolved as part of <a href=\"https://github.com/rust-lang/rfcs/pull/320\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/pull/320</a>, since drop flags are currently the only tangible different in memory layout to structs; but since it's not explicitly covered in that RFC, I wouldn't hold my breath.</p>\n\n<p>ie. tldr; If you need to pass a struct and modify it in C, it needs repr(C); if it doesn't, it won't work**.</p>\n\n<p>Transmute is used for other reasons, totally unrelated to this.</p>\n\n<p>** --> well, it may work, but what you're really hitting is undefined behaviour. If the libraries you're using work, it's probably because it happens to work. This is true of many things in rust; eg. mutable aliasing in certain circumstances... but it really means broken code.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 454, "favorite_count": 0, "accepted_answer_id": 28291530, "answer_count": 1, "score": 3, "last_activity_date": 1423131916, "creation_date": 1422732327, "last_edit_date": 1422892977, "question_id": 28255598, "link": "https://stackoverflow.com/questions/28255598/safe-to-pass-struct-without-reprc-to-c-api", "title": "Safe to pass struct without repr(C) to C API?", "body": "<p><strong>New question per Shepmaster's advice in comments</strong></p>\n\n<p>Suppose a library defines a struct without <code>#[repr(C)]</code>. If the struct needs to be passed to a C API, is there a safe way to do it? Should I be worried that the Rust compiler will change the memory layout of the struct in a way the C API doesn't expect?</p>\n\n<p>I've seen some libraries do this. In my experience, <a href=\"https://github.com/sebcrozet/kiss3d/blob/d6cc2f022cc0a78e3d810da78b6116c1b4994a37/src/resource/gl_primitive.rs#L172\" rel=\"nofollow\">they use <code>mem::transmute</code></a> when it's time to pass the struct to a C function. Does <code>transmute</code> somehow eliminate the need for <code>#[repr(C)]</code>?</p>\n\n<p>If I were the one defining the structs, I wouldn't be asking. I'd just add <code>#[repr(C)]</code>. The problem is that I want to use structs from libraries I don't control.</p>\n\n<p><strong>Old question</strong></p>\n\n<p>I've been using <a href=\"https://github.com/bjz/cgmath-rs\" rel=\"nofollow\">cgmath-rs</a>, and I might switch to <a href=\"https://github.com/sebcrozet/nalgebra\" rel=\"nofollow\">nalgebra</a> if cgmath is <a href=\"https://github.com/bjz/cgmath-rs/issues/144\" rel=\"nofollow\">being abandoned</a>.</p>\n\n<p>In the source of these two libraries, I don't see <code>#[repr(C)]</code> on the vector and matrix structs. So how are these libraries compatible with the OpenGL API? OpenGL expects a certain memory layout when you pass it pointers to vectors and matrices. It's my understanding that without <code>#[repr(C)]</code>, the memory layout of Rust structs is undefined.</p>\n\n<p>In <a href=\"https://github.com/sebcrozet/kiss3d/blob/d6cc2f022cc0a78e3d810da78b6116c1b4994a37/src/resource/gl_primitive.rs#L172\" rel=\"nofollow\">at least one example</a>, I've seen <code>mem::transmute</code> being applied to these structs just before handing them to OpenGL. I could be misunderstanding <code>transmute</code>, but that function would seem to preserve the memory layout of the struct. So if the layout is wrong to begin with, it's still wrong after <code>transmute</code>, correct?</p>\n\n<p>I've also considered <a href=\"https://github.com/PistonDevelopers/vecmath\" rel=\"nofollow\">vecmath</a>. But it appears that, by design, vecmath lacks helper functions to generate rotation matrices and such. True, I could implement those, but it would be nice not to have to. In any case, does vecmath's design avoid the problem of memory layout by using arrays instead of structs?</p>\n"}, {"tags": ["rust", "newtype"], "answers": [{"comments": [{"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1422713452, "post_id": 28252132, "comment_id": 44863965, "body": "That actually makes a lot of sense. It&#39;s a shame there&#39;s no shorter way to derive things."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 1, "creation_date": 1570803223, "post_id": 28252132, "comment_id": 103041315, "body": "As of Mar. 28, 2016, the crate <code>derive_more</code> will do this for many common traits like <code>Add</code>, <code>Sub</code>, <code>MulAssign</code>, etc.  <a href=\"https://crates.io/crates/derive_more\" rel=\"nofollow noreferrer\">crates.io/crates/derive_more</a>"}], "tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": true, "score": 11, "last_activity_date": 1422728032, "last_edit_date": 1422728032, "creation_date": 1422710953, "answer_id": 28252132, "question_id": 28252038, "link": "https://stackoverflow.com/questions/28252038/why-dont-newtypes-use-the-traits-from-the-inner-type/28252132#28252132", "title": "Why don&#39;t newtypes use the traits from the inner type?", "body": "<p>The reason newtypes work this way is generally because you <em>want</em> to avoid the traits defined on the underlying type. For example, you could have <code>Metres</code> and <code>Feet</code> which both wrap <code>f64</code> but define addition of <code>Metres</code> and <code>Feet</code> to do unit conversion, which plain <code>f64</code> addition doesn't give you.</p>\n\n<p>Of course, sometimes you do want the underlying trait implementation. Currently, you'd have to write a wrapper implementation yourself, but there is an RFC for the ability to generate these automatically: <a href=\"https://github.com/rust-lang/rfcs/issues/479\" rel=\"noreferrer\">https://github.com/rust-lang/rfcs/issues/479</a></p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1422862996, "creation_date": 1422862996, "answer_id": 28273088, "question_id": 28252038, "link": "https://stackoverflow.com/questions/28252038/why-dont-newtypes-use-the-traits-from-the-inner-type/28273088#28273088", "title": "Why don&#39;t newtypes use the traits from the inner type?", "body": "<p>As mentioned by Scott Olson, it is actually voluntary that newtypes do not \"degenerate\" in their only attribute. They are here to introduce a new type, after all.</p>\n\n<p>If all you want is a synonym, which is slightly different, then you can use a type alias instead:</p>\n\n<pre><code>type Metres = f64;\n</code></pre>\n\n<p>However, you then lose the benefits of a new type:</p>\n\n<pre><code>type Grams = f64;\n\nfn main() {\n    let m = 10 as Metres;\n    let g = 5 as Grams;\n    println!(\"{}\", m + g); // prints 15, see http://is.gd/IdYOEg\n}\n</code></pre>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2136, "favorite_count": 0, "accepted_answer_id": 28252132, "answer_count": 2, "score": 7, "last_activity_date": 1422862996, "creation_date": 1422710326, "last_edit_date": 1495541837, "question_id": 28252038, "link": "https://stackoverflow.com/questions/28252038/why-dont-newtypes-use-the-traits-from-the-inner-type", "title": "Why don&#39;t newtypes use the traits from the inner type?", "body": "<p>In rust 1.0.0-nightly, this code works fine:</p>\n\n<pre><code>fn main() {\n    let x = 10f64;\n    let y = 20f64;\n    let z = x + y;\n    println!(\"z = {}\", z);\n}\n</code></pre>\n\n<p>But if I try to use a newtype (according to the <a href=\"http://doc.rust-lang.org/book/compound-data-types.html#tuple-structs-and-newtypes\" rel=\"nofollow noreferrer\">rust book</a>):</p>\n\n<pre><code>struct Metres(f64);\n\nfn main() {\n    let x = Metres(10f64);\n    let y = Metres(20f64);\n    let z = x + y;\n    println!(\"z = {}\", z);\n}\n</code></pre>\n\n<p>I get this compiler error:</p>\n\n<pre><code>test.rs:6:13: 6:18 error: binary operation `+` cannot be applied to type `Metres`\ntest.rs:6     let z = x + y;\n                      ^~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Since <code>Metres</code> is basically a <code>f64</code>, why can't the compiler use the same <code>+</code> operator, and create a new <code>Metres</code> object for <code>z</code>?</p>\n\n<p>How can I use newtypes if I can't do simple things like adding and such? How are they \"very useful\" (as the book calls them)?</p>\n\n<p><em>(There is an <a href=\"https://stackoverflow.com/questions/24831573/automatically-implement-traits-of-enclosed-type-for-rust-newtypes-tuple-struc\">old question</a> about this, but rust changes a lot, hence I'm reasking)</em></p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "edited": false, "score": 0, "creation_date": 1422705965, "post_id": 28249923, "comment_id": 44862137, "body": "thanks. <a href=\"https://github.com/eliovir/rust-examples/blob/master/api-collections-hashmap.rs\" rel=\"nofollow noreferrer\">github.com/eliovir/rust-examples/blob/master/&hellip;</a> give me wrong example :("}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "edited": false, "score": 0, "creation_date": 1422715326, "post_id": 28249923, "comment_id": 44864432, "body": "@GigihAjiIbrahim Rust is changing rapidly in the runup to 1.0. Your best bet is to refer to the <a href=\"http://doc.rust-lang.org/\" rel=\"nofollow noreferrer\">official documentation site</a>. Most (if not all) of the code examples there are compiled and tested against the current state of the language, so it&#39;s a good bet they will be correct."}], "tags": [], "owner": {"reputation": 136, "user_id": 4514171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0f8a112207a96b318a36712ff81204f0?s=128&d=identicon&r=PG&f=1", "display_name": "defyrlt", "link": "https://stackoverflow.com/users/4514171/defyrlt"}, "is_accepted": true, "score": 8, "last_activity_date": 1543426609, "last_edit_date": 1543426609, "creation_date": 1422695049, "answer_id": 28249923, "question_id": 28249778, "link": "https://stackoverflow.com/questions/28249778/vacantentry-does-not-implement-any-method-in-scope-named-set/28249923#28249923", "title": "VacantEntry does not implement any method in scope named set", "body": "<p><a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.VacantEntry.html\" rel=\"nofollow noreferrer\"><code>VacantEntry</code></a> doesn't implement any method named <code>set</code>, but there is a method named <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.VacantEntry.html#method.insert\" rel=\"nofollow noreferrer\"><code>insert</code></a>:</p>\n\n<pre><code>use std::collections::hash_map::Entry::{Occupied, Vacant};\nuse std::collections::HashMap;\n\nfn main() {\n    let mut vars = HashMap::&lt;i32, f64&gt;::new();\n    let key = 10;\n    // vars.insert(key, 25.0);\n    let val = match vars.entry(key) {\n        Vacant(entry) =&gt; entry.insert(0.0),\n        Occupied(entry) =&gt; entry.into_mut(),\n    };\n\n    *val += 3.4;\n    println!(\"{}\", val);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=e4293371e8ab1eadcb7caa7912878971\" rel=\"nofollow noreferrer\">playground</a>)</p>\n"}], "owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1880, "favorite_count": 1, "accepted_answer_id": 28249923, "answer_count": 1, "score": 3, "last_activity_date": 1543426609, "creation_date": 1422693666, "last_edit_date": 1543426470, "question_id": 28249778, "link": "https://stackoverflow.com/questions/28249778/vacantentry-does-not-implement-any-method-in-scope-named-set", "title": "VacantEntry does not implement any method in scope named set", "body": "<p>This snippet of code:</p>\n\n<pre><code>use std::collections::hash_map::Entry::{Occupied, Vacant};\nuse std::collections::HashMap;\n\nfn main() {\n    let mut vars = HashMap::&lt;i32, f64&gt;::new();\n    let key = 10;\n    let val = match vars.entry(key) {\n        Vacant(entry) =&gt; entry.set(0.0),\n        Occupied(entry) =&gt; entry.into_mut(),\n    };\n\n    *val += 3.4;\n    println!(\"{}\", val);\n}\n</code></pre>\n\n<p>Gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `set` found for type `std::collections::hash_map::VacantEntry&lt;'_, i32, f64&gt;` in the current scope\n --&gt; src/main.rs:8:32\n  |\n8 |         Vacant(entry) =&gt; entry.set(0.0),\n  |                                ^^^\n</code></pre>\n"}, {"tags": ["rust", "heap-memory", "dynamic-memory-allocation"], "comments": [{"owner": {"reputation": 537, "user_id": 9084915, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ff65e99963b96ac06f17208e71f37db?s=128&d=identicon&r=PG&f=1", "display_name": "chub500", "link": "https://stackoverflow.com/users/9084915/chub500"}, "edited": false, "score": 0, "creation_date": 1587129385, "post_id": 28249292, "comment_id": 108394604, "body": "I should shamelessly plug a crate I built to solve this particular issue: <a href=\"https://crates.io/crates/arr\" rel=\"nofollow noreferrer\">crates.io/crates/arr</a> - I was wrestling with a clean solution to this problem for a long time."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422715792, "post_id": 28249396, "comment_id": 44864550, "body": "Checking out the LLVM IR for a <a href=\"http://is.gd/7J2u9G\" rel=\"nofollow noreferrer\">smaller example</a> shows this: <code>alloca [10000000 x double], align 8</code>, so I believe you are correct - the array is allocated on the stack first."}], "tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": true, "score": 4, "last_activity_date": 1546267563, "last_edit_date": 1546267563, "creation_date": 1422689881, "answer_id": 28249396, "question_id": 28249292, "link": "https://stackoverflow.com/questions/28249292/thread-main-has-overflowed-its-stack-when-allocating-a-large-array-using-box/28249396#28249396", "title": "Thread &#39;&lt;main&gt;&#39; has overflowed its stack when allocating a large array using Box", "body": "<p>As far as I can tell, it seems like that code is still trying to allocate the array on the stack first, and then move it into the box after.</p>\n\n<p>It works for me if I switch to <code>Vec&lt;f64&gt;</code> in place of <code>Box&lt;[f64]&gt;</code> like this:</p>\n\n<pre><code>fn new_gap(gap: usize) -&gt; usize {\n    let ngap = ((gap as f64) / 1.3) as usize;\n    if ngap == 9 || ngap == 10 {\n        return 11;\n    }\n    if ngap &lt; 1 {\n        return 1;\n    }\n    return ngap;\n}\n\nfn comb_sort(a: &amp;mut [f64]) {\n    // previously: [f64]\n    let xlen = a.len();\n    let mut gap = xlen;\n    let mut swapped: bool;\n    let mut temp: f64;\n    loop {\n        swapped = false;\n        gap = new_gap(gap);\n        for i in 0..(xlen - gap) {\n            if a[i] &gt; a[i + gap] {\n                swapped = true;\n                temp = a[i];\n                a[i] = a[i + gap];\n                a[i + gap] = temp;\n            }\n        }\n        if !(gap &gt; 1 || swapped) {\n            break;\n        }\n    }\n}\n\nconst N: usize = 10000000;\n\nfn main() {\n    let mut arr: Vec&lt;f64&gt; = std::iter::repeat(0.0).take(N).collect();\n    //let mut arr: Box&lt;[f64]&gt; = Box::new([0.0; N]); // previously: [f64; N] = [0.0; N];\n    for z in 0..(N) {\n        arr[z] = (N - z) as f64;\n    }\n    comb_sort(arr.as_mut_slice());\n    for z in 1..(N) {\n        if arr[z] &lt; arr[z - 1] {\n            print!(\"!\")\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1480809732, "creation_date": 1480809732, "answer_id": 40953927, "question_id": 28249292, "link": "https://stackoverflow.com/questions/28249292/thread-main-has-overflowed-its-stack-when-allocating-a-large-array-using-box/40953927#40953927", "title": "Thread &#39;&lt;main&gt;&#39; has overflowed its stack when allocating a large array using Box", "body": "<p>In the future, the <code>box</code> syntax will be stabilized. When it is, it will support this large allocation, as no function call to <code>Box::new</code> will be needed, thus the array will never be placed on the stack. For example:</p>\n\n<pre><code>#![feature(box_syntax)]\n\nfn main() {\n    let v = box [0i32; 5_000_000];\n    println!(\"{}\", v[1_000_000])\n}\n</code></pre>\n"}], "owner": {"reputation": 20389, "user_id": 1620210, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8f130b2fa9903fca10a10b31ed3f7b94?s=128&d=identicon&r=PG", "display_name": "Kokizzu", "link": "https://stackoverflow.com/users/1620210/kokizzu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1379, "favorite_count": 0, "accepted_answer_id": 28249396, "answer_count": 2, "score": 2, "last_activity_date": 1546267563, "creation_date": 1422689045, "last_edit_date": 1546267381, "question_id": 28249292, "link": "https://stackoverflow.com/questions/28249292/thread-main-has-overflowed-its-stack-when-allocating-a-large-array-using-box", "title": "Thread &#39;&lt;main&gt;&#39; has overflowed its stack when allocating a large array using Box", "body": "<p>I'm implementing <a href=\"http://kokizzu.blogspot.com/2015/01/c-java-phphhvm-ruby-nodejs-go-combsort.html\" rel=\"nofollow noreferrer\">combsort</a>. I'd like to create fixed-size array on the stack, but it shows <code>stack overflow</code>. When I change it to be on the heap (Rust by Example says <a href=\"https://rustbyexample.com/std/box.html\" rel=\"nofollow noreferrer\">to allocate in the heap we must use <code>Box</code></a>), it still shows <code>stack overflow</code>.</p>\n\n<pre><code>fn new_gap(gap: usize) -&gt; usize {\n    let ngap = ((gap as f64) / 1.3) as usize;\n    if ngap == 9 || ngap == 10 {\n        return 11;\n    }\n    if ngap &lt; 1 {\n        return 1;\n    }\n    return ngap;\n}\n\nfn comb_sort(a: &amp;mut Box&lt;[f64]&gt;) {\n    // previously: [f64]\n    let xlen = a.len();\n    let mut gap = xlen;\n    let mut swapped: bool;\n    let mut temp: f64;\n    loop {\n        swapped = false;\n        gap = new_gap(gap);\n        for i in 0..(xlen - gap) {\n            if a[i] &gt; a[i + gap] {\n                swapped = true;\n                temp = a[i];\n                a[i] = a[i + gap];\n                a[i + gap] = temp;\n            }\n        }\n        if !(gap &gt; 1 || swapped) {\n            break;\n        }\n    }\n}\n\nconst N: usize = 10000000;\n\nfn main() {\n    let mut arr: Box&lt;[f64]&gt; = Box::new([0.0; N]); // previously: [f64; N] = [0.0; N];\n    for z in 0..(N) {\n        arr[z] = (N - z) as f64;\n    }\n    comb_sort(&amp;mut arr);\n    for z in 1..(N) {\n        if arr[z] &lt; arr[z - 1] {\n            print!(\"!\")\n        }\n    }\n}\n</code></pre>\n\n<p>The output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread '&lt;main&gt;' has overflowed its stack\nIllegal instruction (core dumped)\n</code></pre>\n\n<p>Or</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre>\n\n<p>I know that my stack size is not enough, the same as C++ when creating a non-heap array that is too big inside a function, but this code is using heap but still shows stack overflow. What's really wrong with this code? </p>\n"}, {"tags": ["scope", "rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1422688243, "creation_date": 1422688243, "answer_id": 28249190, "question_id": 28249168, "link": "https://stackoverflow.com/questions/28249168/why-does-rustc-say-that-the-variable-totalsplitinv-is-out-of-scope/28249190#28249190", "title": "Why does rustc say that the variable &quot;totalSplitInv&quot; is out of scope?", "body": "<p>I think the error is pointing to the <code>return totalSplitInv</code> in <code>sortAndCountInv_</code>, not <code>mergeAndCountSplitInv</code>.</p>\n\n<pre><code>fn sortAndCountInv_(arr: &amp;mut [i64], start: i64, finish: i64) {\n    let lengthOfSubarray = finish - start + 1;\n    if (lengthOfSubarray == 0) || (lengthOfSubarray == 1) {\n        return totalSplitInv // here\n...\n</code></pre>\n"}], "owner": {"reputation": 431, "user_id": 1176201, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beb984b561cadab3416310f48c7e8429?s=128&d=identicon&r=PG", "display_name": "11Kilobytes", "link": "https://stackoverflow.com/users/1176201/11kilobytes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 34, "favorite_count": 0, "accepted_answer_id": 28249190, "answer_count": 1, "score": -2, "last_activity_date": 1422688243, "creation_date": 1422687926, "question_id": 28249168, "link": "https://stackoverflow.com/questions/28249168/why-does-rustc-say-that-the-variable-totalsplitinv-is-out-of-scope", "title": "Why does rustc say that the variable &quot;totalSplitInv&quot; is out of scope?", "body": "<p>I ran the following program past rustc:</p>\n\n<pre><code>#![feature(slicing_syntax)]\nfn sortAndCountInv(arr: &amp;mut [i64]) -&gt; i64 {\n    return sortAndCountInv_(arr, 0, arr.length - 1)\n}\n\nfn sortAndCountInv_(arr: &amp;mut [i64], start: i64, finish: i64) {\n    let lengthOfSubarray = finish - start + 1;\n    if (lengthOfSubarray == 0) || (lengthOfSubarray == 1) {\n        return totalSplitInv\n    }\n    else {\n        let half = (start + finish) / 2;\n        let leftInv = sortAndCountInv_(arr, start, half);\n        let rightInv = sortAndCountInv_(arr, half + 1, finish);\n        let splitInv = mergeAndCountSplitInv(arr, start, finish, half);\n        return leftInv + rightInv + splitInv\n    }\n}\nfn mergeAndCountSplitInv(arr: &amp;mut [i64], start: i64, finish: i64, half: i64) -&gt; i64 {\n    let aux = arr[start..finish + 1];\n    let divider = half - start;\n    let mut i = 0;\n    let mut j = divider + 1;\n    let mut totalSplitInv = 0;\n    let lastIndex = aux.length - 1;\n    for k in range(start, finish + 1) {\n        if i &gt; divider {\n            arr[k] = aux[j];\n            j += 1\n        } else if j &gt; lastIndex {\n            arr[k] = aux[i];\n            i += 1\n        } else if aux[i] &lt; aux[j] {\n            arr[k] = aux[i];\n            i += 1\n        } else {\n            arr[k] = aux[j];\n            j += 1;\n            totalSplitInv += (divider - i) + 1; \n        }\n    }\n    return totalSplitInv\n}\n</code></pre>\n\n<p>When I try to compile it with rustc v-0.12.0-dev, I get the following scope error:</p>\n\n<pre><code>inversions.rs:9:16: 9:29 error: unresolved name `totalSplitInv`.\ninversions.rs:9         return totalSplitInv\n</code></pre>\n\n<p>Which is to say, in the function <code>mergeAndCountSplitInv</code>, the line <code>return totalSplitInv</code> is invalid because totalSplitInv is out of scope? Why is this the case?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 8, "creation_date": 1422679815, "post_id": 28248065, "comment_id": 44856822, "body": "One of the slice extension methods is <code>binary_search_by</code>, which you could use. <code>f32</code>/<code>f64</code> implement <code>PartialOrd</code>, so if you know they can never be <code>NaN</code>, you can unwrap the result of <code>partial_cmp</code>: <a href=\"http://doc.rust-lang.org/std/slice/trait.SliceExt.html#tymethod.binary_search_by\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/slice/&hellip;</a>"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462898910, "post_id": 28248065, "comment_id": 61827127, "body": "One can use the <a href=\"https://crates.io/crates/ordered-float\" rel=\"nofollow noreferrer\">ordered_float</a> or <a href=\"https://crates.io/crates/ord_subset\" rel=\"nofollow noreferrer\">ord_subset</a> crate.  See <a href=\"http://stackoverflow.com/a/37144472/5189607\">stackoverflow.com/a/37144472/5189607</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 31, "last_activity_date": 1432686739, "last_edit_date": 1495535469, "creation_date": 1422677460, "answer_id": 28248065, "question_id": 28247990, "link": "https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats/28248065#28248065", "title": "How to do a binary search on a Vec of floats?", "body": "<blockquote>\n  <p>for reasons I don't understand, f32 and f64 do not implement Ord.</p>\n</blockquote>\n\n<p>Because <a href=\"http://floating-point-gui.de/\" rel=\"noreferrer\">floating point is hard</a>! The short version is that floating point numbers have a special value NaN - Not a Number. The IEEE spec for floating point numbers states that <code>1 &lt; NaN</code>, <code>1 &gt; NaN</code>, and <code>NaN == NaN</code> are all <code>false</code>.</p>\n\n<p><a href=\"http://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noreferrer\"><code>Ord</code></a> says:</p>\n\n<blockquote>\n  <p>Trait for types that form a <a href=\"https://en.wikipedia.org/wiki/Total_order\" rel=\"noreferrer\">total order</a>.</p>\n</blockquote>\n\n<p>This means that the comparisons need to have <em>totality</em>:</p>\n\n<blockquote>\n  <p>a \u2264 b or b \u2264 a </p>\n</blockquote>\n\n<p>but we just saw that floating points do not have this property.</p>\n\n<p>So yes, you will need to create a wrapper type that somehow deals with comparing the <a href=\"https://stackoverflow.com/q/19800415/155423\">large number of NaN values</a>. Maybe your case you can just assert that the float value is never NaN and then call out to the regular <a href=\"http://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"noreferrer\"><code>PartialOrd</code></a> trait. Here's an example:</p>\n\n<pre><code>use std::cmp::Ordering;\n\n#[derive(PartialEq,PartialOrd)]\nstruct NonNan(f64);\n\nimpl NonNan {\n    fn new(val: f64) -&gt; Option&lt;NonNan&gt; {\n        if val.is_nan() {\n            None\n        } else {\n            Some(NonNan(val))\n        }\n    }\n}\n\nimpl Eq for NonNan {}\n\nimpl Ord for NonNan {\n    fn cmp(&amp;self, other: &amp;NonNan) -&gt; Ordering {\n        self.partial_cmp(other).unwrap()\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;_&gt; = [2.0, 1.0, 3.0].iter().map(|v| NonNan::new(*v).unwrap()).collect();\n    v.sort();\n    let r = v.binary_search(&amp;NonNan::new(2.0).unwrap());\n    println!(\"{:?}\", r);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 10, "last_activity_date": 1462591420, "creation_date": 1462591420, "answer_id": 37084168, "question_id": 28247990, "link": "https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats/37084168#37084168", "title": "How to do a binary search on a Vec of floats?", "body": "<p>One of the slice methods is <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.binary_search_by\" rel=\"noreferrer\"><code>binary_search_by</code></a>, which you could use. <code>f32</code>/<code>f64</code> implement <code>PartialOrd</code>, so if you know they can <strong>never</strong> be <code>NaN</code>, you can unwrap the result of <code>partial_cmp</code>:</p>\n\n<pre><code>fn main() {\n    let values = [1.0, 2.0, 3.0, 4.0, 5.0];\n    let location = values.binary_search_by(|v| {\n        v.partial_cmp(&amp;3.14).expect(\"Couldn't compare values\")\n    });\n\n    match location {\n        Ok(i) =&gt; println!(\"Found at {}\", i),\n        Err(i) =&gt; println!(\"Not found, could be inserted at {}\", i),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4209, "user_id": 1478093, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/b7d1619c18114c85f71c6ad7d630b676?s=128&d=identicon&r=PG", "display_name": "TBieniek", "link": "https://stackoverflow.com/users/1478093/tbieniek"}, "is_accepted": false, "score": 1, "last_activity_date": 1517878371, "creation_date": 1517878371, "answer_id": 48633860, "question_id": 28247990, "link": "https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats/48633860#48633860", "title": "How to do a binary search on a Vec of floats?", "body": "<p><a href=\"https://github.com/emerentius/ord_subset\" rel=\"nofollow noreferrer\">https://github.com/emerentius/ord_subset</a> implements a <code>ord_subset_binary_search()</code> method that you can use for this.</p>\n\n<p>from their README:</p>\n\n<pre><code>let mut s = [5.0, std::f64::NAN, 3.0, 2.0];\ns.ord_subset_sort();\nassert_eq!(&amp;s[0..3], &amp;[2.0, 3.0, 5.0]);\nassert_eq!(s.ord_subset_binary_search(&amp;5.0), Ok(2));\n\nassert_eq!(s.iter().ord_subset_max(), Some(&amp;5.0));\nassert_eq!(s.iter().ord_subset_min(), Some(&amp;2.0));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 5376992, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c18d6f6f0a87de440f9f8c8ee9cea19d?s=128&d=identicon&r=PG&f=1", "display_name": "Venkat Arun", "link": "https://stackoverflow.com/users/5376992/venkat-arun"}, "is_accepted": false, "score": 2, "last_activity_date": 1554222417, "last_edit_date": 1554222417, "creation_date": 1553869978, "answer_id": 55419688, "question_id": 28247990, "link": "https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats/55419688#55419688", "title": "How to do a binary search on a Vec of floats?", "body": "<p>If you are sure that your floating point values will never be NaN, you can express this semantic with the wrappers in <a href=\"https://docs.rs/decorum/0.1.3/decorum/\" rel=\"nofollow noreferrer\">decorum</a>. Specifically, the type <a href=\"https://docs.rs/decorum/0.1.3/decorum/type.Ordered.html\" rel=\"nofollow noreferrer\"><code>Ordered</code></a> implements <code>Ord</code> and panics whenever the program tries to do something invalid:</p>\n\n<pre><code>use decorum::Ordered;\n\nfn foo() {\n    let ordered = Ordered&lt;f32&gt;::from_inner(10.);\n    let normal = ordered.into()\n}\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8250, "favorite_count": 5, "accepted_answer_id": 28248065, "answer_count": 4, "score": 19, "last_activity_date": 1554222417, "creation_date": 1422676513, "last_edit_date": 1462590962, "question_id": 28247990, "link": "https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats", "title": "How to do a binary search on a Vec of floats?", "body": "<p>If you have a <code>Vec&lt;u32&gt;</code> you would use the <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.binary_search\" rel=\"noreferrer\"><code>slice::binary_search</code></a> method.</p>\n\n<p>For reasons I don't understand, <code>f32</code> and <code>f64</code> do not implement <code>Ord</code>. Since the primitive types are from the standard library, you cannot implement <code>Ord</code> on them yourself, so it does not appear you can use this method.</p>\n\n<p>How can you effectively do this? </p>\n\n<p>Do I really have to wrap <code>f64</code> in a wrapper struct and implement <code>Ord</code> on it? It seems extremely painful to have to do this, and involves a great deal of <code>transmute</code> to cast blocks of data back and forth unsafely for effectively no reason.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1422630388, "post_id": 28238491, "comment_id": 44838534, "body": "&quot;Doctor, it hurts when I do this.&quot;  &quot;So stop doing it.&quot;  &quot;But you told me to!&quot;  &quot;Ah, well, I changed my mind.&quot;  &quot;...&quot;  &quot;Here, have a lollipop.&quot;"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 4, "last_activity_date": 1422629689, "creation_date": 1422629689, "answer_id": 28238491, "question_id": 28238283, "link": "https://stackoverflow.com/questions/28238283/warning-on-unstable-directive/28238491#28238491", "title": "Warning on &quot;unstable&quot; directive", "body": "<p>The unstable lint was removed in <a href=\"https://github.com/rust-lang/rust/commit/a530cc9706324ad44dba464d541a807eb5afdb08\" rel=\"nofollow\">a530cc9706324ad44dba464d541a807eb5afdb08</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1422635799, "creation_date": 1422635799, "answer_id": 28240465, "question_id": 28238283, "link": "https://stackoverflow.com/questions/28238283/warning-on-unstable-directive/28240465#28240465", "title": "Warning on &quot;unstable&quot; directive", "body": "<p>As Steve points out, the unstable lint was removed. You can find more information in the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md\" rel=\"nofollow\">Release Channels RFC</a>, specifically the section <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md#merging-stability-attributes-and-feature-gates\" rel=\"nofollow\">Merging stability attributes and feature gates</a>:</p>\n\n<blockquote>\n  <p>As a simplifying measure stability attributes are unified with feature gates, and thus tied to release channels and Rust language versions.</p>\n</blockquote>\n\n<p>And</p>\n\n<blockquote>\n  <p>With these modifications, new API surface area becomes a new \"language feature\" which is controlled via the #[feature] attribute just like other normal language features. The compiler will disallow all usage of #[staged_unstable(feature = \"foo\")] APIs unless the current crate declares #![feature(foo)]. This enables crates to declare what API features of the standard library they rely on without opting in to all unstable API features.</p>\n</blockquote>\n"}], "owner": {"reputation": 23, "user_id": 4391144, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba1e0e2808f3810aa8da4243b6d2040?s=128&d=identicon&r=PG&f=1", "display_name": "DedRain", "link": "https://stackoverflow.com/users/4391144/dedrain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 365, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1422635799, "creation_date": 1422628973, "last_edit_date": 1422629575, "question_id": 28238283, "link": "https://stackoverflow.com/questions/28238283/warning-on-unstable-directive", "title": "Warning on &quot;unstable&quot; directive", "body": "<p>Why does Rust gives me a warning when I add the <code>#![allow(unstable)]</code> directive?</p>\n\n<blockquote>\n  <p>unknown <code>allow</code> attribute: <code>unstable</code>, #[warn(unknown_lints)] on by default</p>\n</blockquote>\n\n<p><a href=\"http://is.gd/tIIk7j\" rel=\"nofollow\">Playpen example</a></p>\n"}, {"tags": ["type-conversion", "rust"], "answers": [{"comments": [{"owner": {"reputation": 53, "user_id": 4511152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/881de2d2d239ec676237b04542ef5cc4?s=128&d=identicon&r=PG&f=1", "display_name": "Artem Mamonov", "link": "https://stackoverflow.com/users/4511152/artem-mamonov"}, "edited": false, "score": 0, "creation_date": 1422617105, "post_id": 28234727, "comment_id": 44831291, "body": "Thank you! I spent half a day on this :)"}, {"owner": {"reputation": 185247, "user_id": 135589, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dbd98f264c64096af168747c3ae71a7d?s=128&d=identicon&r=PG", "display_name": "Jesper", "link": "https://stackoverflow.com/users/135589/jesper"}, "edited": false, "score": 1, "creation_date": 1594326199, "post_id": 28234727, "comment_id": 111095493, "body": "Things have changed since this answer was given; this now returns a <code>std::result::Result&lt;f32, std::num::ParseFloatError&gt;</code> instead of an <code>Option&lt;f32&gt;</code> (using Rust 1.44.1)."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 10, "last_activity_date": 1594627256, "last_edit_date": 1594627256, "creation_date": 1422616554, "answer_id": 28234727, "question_id": 28234518, "link": "https://stackoverflow.com/questions/28234518/how-do-i-convert-a-string-to-f32/28234727#28234727", "title": "How do I convert a string to f32?", "body": "<p>you can use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\">parse</a>, now.</p>\n<pre><code>let f = &quot;0.11&quot;.parse::&lt;f32&gt;(); // returns a Result&lt;f32, std::num::ParseFloatError&gt;`\n</code></pre>\n"}], "owner": {"reputation": 53, "user_id": 4511152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/881de2d2d239ec676237b04542ef5cc4?s=128&d=identicon&r=PG&f=1", "display_name": "Artem Mamonov", "link": "https://stackoverflow.com/users/4511152/artem-mamonov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3516, "favorite_count": 1, "accepted_answer_id": 28234727, "answer_count": 1, "score": 5, "last_activity_date": 1594627256, "creation_date": 1422615894, "last_edit_date": 1422627122, "question_id": 28234518, "link": "https://stackoverflow.com/questions/28234518/how-do-i-convert-a-string-to-f32", "title": "How do I convert a string to f32?", "body": "<p>I'm just started to learn rust and have problem with conversion from string to f32.\nIn nightly 0.11 was function \"from_str\" and i use it like this:</p>\n\n<pre><code>let f = std::f32::from_str(\"0.11\", 10);\n</code></pre>\n\n<p>In current 1.0.0 alpha function not exists.\nHow to convert from str to f32 now?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1422617065, "post_id": 28233640, "comment_id": 44831275, "body": "The thing is <code>slice.split</code> returns an <code>iterator</code>, which gets consumed and destroyed when you call <code>count()</code>. So... better <code>collect</code> the iterator into a <code>Vector</code>. As suggested by this answer by @Paolo"}, {"owner": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1422617140, "post_id": 28233640, "comment_id": 44831307, "body": "This is not a case of ownership-transfer but a case of lifetime-expiry."}, {"owner": {"reputation": 693, "user_id": 1135613, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/1a6dea1153e8aad5b60f0e917e047339?s=128&d=identicon&r=PG&f=1", "display_name": "std", "link": "https://stackoverflow.com/users/1135613/std"}, "reply_to_user": {"reputation": 10394, "user_id": 1151929, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/922d81e934a0f2e3eb8b2c2d18022830?s=128&d=identicon&r=PG", "display_name": "sarveshseri", "link": "https://stackoverflow.com/users/1151929/sarveshseri"}, "edited": false, "score": 0, "creation_date": 1422626118, "post_id": 28233640, "comment_id": 44836041, "body": "thanks for your comment! @SarveshKumarSingh, I think the <code>count()</code> method is something like <code>count(parts: parts-type)</code>, when <code>parts</code> passes into <code>count</code>, it&#39;s owership is also be transfered.Am I thinking it right?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 4, "creation_date": 1422626937, "post_id": 28233640, "comment_id": 44836498, "body": "@std, you&#39;re absolutely correct. <code>count()</code> is defined like <code>fn count(self)</code>, which means that its target is moved into it, rendering the original variable invalid. This indeed is an ownership transfer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422627404, "post_id": 28233640, "comment_id": 44836767, "body": "I&#39;ve updated your title to more clearly reflect that you aren&#39;t having issues with <i>splitting</i> a slice, but wanting to use the iterator <i>and</i> <code>count</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465331056, "post_id": 28234661, "comment_id": 62854396, "body": "Hello again! 18 months later, I have more suggestions! ^_^ Instead of checking the length and then calling <code>unwrap</code>, you could instead <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.get\" rel=\"nofollow noreferrer\">use slice::get</a>: <a href=\"https://play.rust-lang.org/?gist=a6ab3f2dc6c9b7ad7a120d96cf7099b8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">example</a>. That leads nicely to <a href=\"https://play.rust-lang.org/?gist=7baa74d673cbb590df100d9b998977af&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">a simplification</a> that&#39;s very close to Vladimir Matveev&#39;s solution."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 2, "last_activity_date": 1422628122, "last_edit_date": 1422628122, "creation_date": 1422616352, "answer_id": 28234661, "question_id": 28233640, "link": "https://stackoverflow.com/questions/28233640/how-to-call-count-on-an-iterator-and-still-use-the-iterators-items/28234661#28234661", "title": "How to call count on an iterator and still use the iterator&#39;s items?", "body": "<p>One thing you can do is <code>collect</code> the results of the split in a new owned <code>Vec</code>, like this:</p>\n\n<pre><code>fn split(slice: &amp;[u8], splitter: &amp;[u8]) -&gt; Option&lt;Vec&lt;u8&gt;&gt; {\n    let parts: Vec&lt;&amp;[u8]&gt; = slice.split(|b| splitter.contains(b)).collect();\n\n    let len = parts.len();\n\n    if len &gt;= 2 {\n        Some(parts.iter().nth(1).unwrap().to_vec())\n    } else if len &gt;= 1 {\n        Some(parts.iter().nth(0).unwrap().to_vec())\n    } else {\n        None\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 0, "creation_date": 1422630522, "post_id": 28235022, "comment_id": 44838627, "body": "But this is strictly OK only because <code>split</code> never returns an empty iterator, isn&#39;t it?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 0, "creation_date": 1422632102, "post_id": 28235022, "comment_id": 44839549, "body": "No. If <code>split()</code> returns an empty iterator, the program will return <code>None</code>, just as your original one does. In this case both <code>first</code> and <code>second</code> will be <code>None</code>, and so <code>second.or(first)</code> will result to <code>None</code> as well."}, {"owner": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 1, "creation_date": 1422632382, "post_id": 28235022, "comment_id": 44839748, "body": "Ah, but it seems it is not guaranteed by the <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">Iterator</a> protocol: &quot;The Iterator protocol does not define behavior after None is returned. A concrete Iterator implementation may choose to behave however it wishes, either by returning None infinitely, or by doing something else.&quot; So the <code>Split</code> iterator does return <code>None</code> infinitely at the moment, but it could as well explode, couldn&#39;t it?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 0, "creation_date": 1422632507, "post_id": 28235022, "comment_id": 44839827, "body": "Ah, that&#39;s what you meant. You&#39;re absolutely correct, very nice catch. I&#39;ve updated my answer."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1465330672, "last_edit_date": 1465330672, "creation_date": 1422617646, "answer_id": 28235022, "question_id": 28233640, "link": "https://stackoverflow.com/questions/28233640/how-to-call-count-on-an-iterator-and-still-use-the-iterators-items/28235022#28235022", "title": "How to call count on an iterator and still use the iterator&#39;s items?", "body": "<p>It is also possible to avoid unnecessary allocations of <code>Vec</code> if you only need to use the first or the second part:</p>\n\n<pre><code>fn split&lt;'a&gt;(slice: &amp;'a [u8], splitter: &amp;[u8]) -&gt; Option&lt;&amp;'a [u8]&gt; {\n    let mut parts = slice.split(|b| splitter.contains(b)).fuse();\n\n    let first = parts.next();\n    let second = parts.next();\n\n    second.or(first)\n}\n</code></pre>\n\n<p>Then if you actually need a <code>Vec</code> you can map on the result:</p>\n\n<pre><code>split(&amp;[1u8, 2u8, 3u8], &amp;[2u8]).map(|s| s.to_vec())\n</code></pre>\n\n<p>Of course, if you want, you can move <code>to_vec()</code> conversion to the function:</p>\n\n<pre><code>second.or(first).map(|s| s.to_vec())\n</code></pre>\n\n<p>I'm calling <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fuse\" rel=\"nofollow\"><code>fuse()</code></a> on the iterator in order to guarantee that it will always return <code>None</code> after the first <code>None</code> is returned (which is not guaranteed by the general iterator protocol).</p>\n"}, {"comments": [{"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465285275, "post_id": 28237951, "comment_id": 62824088, "body": "Is this recommended solution? I&#39;m asking because I would suspect that each split creates iterators on heap. And one iterator will be used just for counting and then can be forgotten.."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465297692, "post_id": 28237951, "comment_id": 62832247, "body": "@stej nothing in this code should create anything on the heap. However, you are right that one iterator is used just for counting and thrown away. For the case presented by the OP, I&#39;d use <a href=\"http://stackoverflow.com/a/28235022/155423\">Vladimir Matveev&#39;s</a> solution, but this solution may apply in similar but different situations."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465330395, "post_id": 28237951, "comment_id": 62854061, "body": "Ok, I got it. Honestly, I sometimes have hard time how to learn what is on heap and what on stack. I didn&#39;t look more closely into doc, it was just a gut feeling."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 1, "creation_date": 1465330548, "post_id": 28237951, "comment_id": 62854132, "body": "@stej no worries! I also spoke a little hastily; I should have said &quot;nothing about creating the <b>iterators</b> creates items on the heap&quot;. The <code>to_vec</code> calls will indeed create things on the heap. However, there&#39;s not really a way to avoid that if the OP wants to make <code>Vec</code>s ^_^."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1422627919, "creation_date": 1422627919, "answer_id": 28237951, "question_id": 28233640, "link": "https://stackoverflow.com/questions/28233640/how-to-call-count-on-an-iterator-and-still-use-the-iterators-items/28237951#28237951", "title": "How to call count on an iterator and still use the iterator&#39;s items?", "body": "<p>The other answers are good suggestions to answer your problem, but I'd like to point out another general solution: create multiple iterators:</p>\n\n<pre><code>fn split(slice: &amp;[u8], splitter: &amp;[u8]) -&gt; Option&lt;Vec&lt;u8&gt;&gt; {\n    let mut parts = slice.split(|b| splitter.contains(b));\n    let parts2 = slice.split(|b| splitter.contains(b));\n\n    let len = parts2.count();\n\n    if len &gt;= 2 {\n        Some(parts.nth(1).unwrap().to_vec())\n    } else if len &gt;= 1 {\n        Some(parts.nth(0).unwrap().to_vec())\n    } else {\n        None\n    }\n}\n\nfn main() {\n    split(&amp;[1u8, 2u8, 3u8], &amp;[2u8]);\n}\n</code></pre>\n\n<p>You can usually create multiple read-only iterators. Some iterators even implement <a href=\"http://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow\"><code>Clone</code></a>, so you could just say <code>iter.clone().count()</code>. Unfortunately, <a href=\"http://doc.rust-lang.org/std/slice/struct.Split.html\" rel=\"nofollow\"><code>Split</code></a> isn't one of them because it owns the passed-in closure.</p>\n"}], "owner": {"reputation": 693, "user_id": 1135613, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/1a6dea1153e8aad5b60f0e917e047339?s=128&d=identicon&r=PG&f=1", "display_name": "std", "link": "https://stackoverflow.com/users/1135613/std"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6847, "favorite_count": 1, "accepted_answer_id": 28235022, "answer_count": 3, "score": 8, "last_activity_date": 1465330672, "creation_date": 1422613049, "last_edit_date": 1422627097, "question_id": 28233640, "link": "https://stackoverflow.com/questions/28233640/how-to-call-count-on-an-iterator-and-still-use-the-iterators-items", "title": "How to call count on an iterator and still use the iterator&#39;s items?", "body": "<p><code>parts.count()</code> leads to ownership transfer, so <code>parts</code> can't be used any more.</p>\n\n<pre><code>fn split(slice: &amp;[u8], splitter: &amp;[u8]) -&gt; Option&lt;Vec&lt;u8&gt;&gt; {\n    let mut parts = slice.split(|b| splitter.contains(b));\n\n    let len = parts.count(); //ownership transfer\n\n    if len &gt;= 2 {\n        Some(parts.nth(1).unwrap().to_vec())\n    } else if len &gt;= 1 {\n        Some(parts.nth(0).unwrap().to_vec())\n    } else {\n        None\n    }\n}\n\nfn main() {\n    split(&amp;[1u8, 2u8, 3u8], &amp;[2u8]);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1422580464, "post_id": 28225958, "comment_id": 44818395, "body": "If <code>max_column</code> was a constant, it would work, but patterns only work statically."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "edited": false, "score": 7, "creation_date": 1422574921, "post_id": 28226030, "comment_id": 44816743, "body": "@MikeVella Well, the alternative is that a <code>x =&gt; &#47;* the default case, using x *&#47;</code> match arm stops becoming a default case when a name <code>x</code> is introduced in any visible scope. That&#39;s inconsistent and, to me, counter-intuitive as well."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 4, "creation_date": 1422578353, "post_id": 28226030, "comment_id": 44817813, "body": "<code>_</code> is a separate special case, it&#39;s not a variable binding at all, but it is the absence of one! Matching against <code>_x</code> moves the value into <code>_x</code>, <code>_</code> does no such thing. (The difference is observable.)"}, {"owner": {"reputation": 696, "user_id": 6433062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8uIqX.jpg?s=128&g=1", "display_name": "richardpringle", "link": "https://stackoverflow.com/users/6433062/richardpringle"}, "edited": false, "score": 1, "creation_date": 1587995882, "post_id": 28226030, "comment_id": 108721132, "body": "Would be nice if there was a way to &quot;pin&quot; a variable <a href=\"https://elixir-lang.org/getting-started/pattern-matching.html#the-pin-operator\" rel=\"nofollow noreferrer\">as in Elixir</a>. In this case, <code>^ MAX_COLUMN =&gt;</code> would mean, &quot;match against this variable&quot; instead of &quot;assign value to this variable name&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 696, "user_id": 6433062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8uIqX.jpg?s=128&g=1", "display_name": "richardpringle", "link": "https://stackoverflow.com/users/6433062/richardpringle"}, "edited": false, "score": 0, "creation_date": 1587999566, "post_id": 28226030, "comment_id": 108723505, "body": "@richardpringle that doesn&#39;t make sense with the semantics of <code>match</code>. Match patterns must be verified at <b>compile time</b>, so having a variable cannot work as it would need to be checked at runtime. That&#39;s why a <code>const</code> works \u2014 it&#39;s known at compile time. <code>static</code> and <code>let</code> variables can change during program execution. The match guard syntax calls out that the check is moving from compile time to runtime."}, {"owner": {"reputation": 696, "user_id": 6433062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8uIqX.jpg?s=128&g=1", "display_name": "richardpringle", "link": "https://stackoverflow.com/users/6433062/richardpringle"}, "edited": false, "score": 0, "creation_date": 1588092912, "post_id": 28226030, "comment_id": 108765421, "body": "I&#39;m saying that a little syntactic sugar would be nice. <code>^x =&gt; {}</code> would desugar to <code>y if y == x =&gt; {}</code>. This new syntax would also call out that the check is moving from compile-time to runtime. It would cut down on boilerplate at the cost of adding another operator. Not sure if you could accomplish the same thing with a macro..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 20, "last_activity_date": 1584488524, "last_edit_date": 1584488524, "creation_date": 1422571206, "answer_id": 28226030, "question_id": 28225958, "link": "https://stackoverflow.com/questions/28225958/why-is-this-match-pattern-unreachable-when-using-non-literal-patterns/28226030#28226030", "title": "Why is this match pattern unreachable when using non-literal patterns?", "body": "<p><a href=\"https://doc.rust-lang.org/book/second-edition/ch06-02-match.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> explains how a <code>match</code> expression is processed, emphasis mine:</p>\n\n<blockquote>\n  <p>When the <code>match</code> expression executes, it compares the resulting value against the pattern of each arm, <strong>in order</strong>. </p>\n</blockquote>\n\n<p>In your example, <code>max_column</code> is the name of the variable to be bound to, <strong>not</strong> a constant or an outside variable. When the compiler reaches <code>max_column</code>, any remaining values will be assigned to that match arm, making subsequent arms unreachable.</p>\n\n<p>In your case, you want to make <code>max_column</code> a real constant:</p>\n\n<pre><code>let current_column = 1;\nconst MAX_COLUMN: i32 = 7;\nedge = match current_column {\n    0          =&gt; Edge::Left,\n    MAX_COLUMN =&gt; Edge::Right,\n    _          =&gt; Edge::NotAnEdge\n};\n</code></pre>\n\n<p>Or if that's not possible, you want a <em>match guard</em>:</p>\n\n<pre><code>let current_column = 1;\nlet max_column = 7;\nedge = match current_column {\n    0                    =&gt; Edge::Left,\n    a if a == max_column =&gt; Edge::Right,\n    _                    =&gt; Edge::NotAnEdge\n};\n</code></pre>\n\n<p>Note that, as a first approximation, <code>a</code> and <code>_</code> are the same thing in this case! In both cases, the matched variable will be bound to a name (<code>a</code> or <code>_</code> respectively), but any identifier prefixed with <code>_</code> is special-cased to be used as an unused variable placeholder.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/28225958/unreachable-pattern-which-should-be-reachable/28226030?noredirect=1#comment44817813_28226030\">bluss clarifies and corrects this approximation</a>:</p>\n\n<blockquote>\n  <p><code>_</code> is a separate special case, it's not a variable binding at all, but it is the absence of one! Matching against <code>_x</code> moves the value into <code>_x</code>, <code>_</code> does no such thing. (The difference is observable.)</p>\n</blockquote>\n"}], "owner": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3245, "favorite_count": 3, "accepted_answer_id": 28226030, "answer_count": 1, "score": 23, "last_activity_date": 1584488524, "creation_date": 1422570880, "last_edit_date": 1566477154, "question_id": 28225958, "link": "https://stackoverflow.com/questions/28225958/why-is-this-match-pattern-unreachable-when-using-non-literal-patterns", "title": "Why is this match pattern unreachable when using non-literal patterns?", "body": "<p>The following code (<a href=\"https://play.rust-lang.org/?gist=c1ee7efa123ed8240557c2d086006479&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre><code>let max_column = 7;\nedge = match current_column {\n    0 =&gt; Edge::Left,\n    max_column =&gt; Edge::Right,\n    _ =&gt; Edge::NotAnEdge\n};\n</code></pre>\n\n<p>results in the following warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unreachable pattern\n  --&gt; src/main.rs:10:9\n   |\n9  |         max_column =&gt; Edge::Right,\n   |         ---------- matches any value\n10 |         _ =&gt; Edge::NotAnEdge\n   |         ^ unreachable pattern\n   |\n   = note: #[warn(unreachable_patterns)] on by default\n</code></pre>\n\n<p>Replacing the variable <code>max_column</code> with the literal works fine:</p>\n\n<pre><code>let max_column = 7;\nedge = match current_column {\n    0 =&gt; Edge::Left,\n    7 =&gt; Edge::Right,\n    _ =&gt; Edge::NotAnEdge\n};\n</code></pre>\n\n<p>Why is <code>_</code> unreachable in the first example when it can be reached for any values where <code>current_column != max_column</code>?</p>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422563465, "post_id": 28223830, "comment_id": 44811089, "body": "I&#39;d highly recommend creating a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a> to help us help you better. My guess is that you could remove many of the struct&#39;s methods and still reproduce the same problem."}, {"owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422563737, "post_id": 28223830, "comment_id": 44811228, "body": "I&#39;ll try to figure out a shorter version. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422563975, "post_id": 28223830, "comment_id": 44811364, "body": "Although some cursory poking at it seems to indicate that I could be wrong ;-). I think you can remove <code>T</code> and <code>&#39;a</code> (replacing it with <code>&#39;static</code>) to make it a tiny bit smaller."}, {"owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422565799, "post_id": 28223830, "comment_id": 44812376, "body": "Doesn&#39;t making it static push it to the global scope? I&#39;m not sure I&#39;ve entirely understood that lifetime yet. Need to read up, I guess. ;)"}], "answers": [{"comments": [{"owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "edited": false, "score": 0, "creation_date": 1422565901, "post_id": 28224448, "comment_id": 44812439, "body": "Perfect understanding of the problem. :) I really feel I start understanding the lifetimes concept better. But do you have any suggestions on how to solve it? I&#39;ve updated the question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "edited": false, "score": 0, "creation_date": 1422566533, "post_id": 28224448, "comment_id": 44812789, "body": "@Emanuel not a great one, I used a pretty big hammer, but I&#39;ve updated."}, {"owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "edited": false, "score": 0, "creation_date": 1422598783, "post_id": 28224448, "comment_id": 44823066, "body": "Excellent explanation and working solution. I&#39;ve got lots to think about. I&#39;m marking this question as solved. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1422566513, "last_edit_date": 1422566513, "creation_date": 1422564989, "answer_id": 28224448, "question_id": 28223830, "link": "https://stackoverflow.com/questions/28223830/conflicting-lifetime-requirements-when-storing-closure-capturing-returned-value/28224448#28224448", "title": "Conflicting lifetime requirements when storing closure capturing returned value", "body": "<p>Here's my understanding of the problem, slightly slimmed down:</p>\n\n<pre><code>fn filter&lt;F&gt;(&amp;mut self, f: F) -&gt; Keeper\n    where F: Fn() -&gt; bool + 'static //'\n{\n    let mut k = Keeper::new();\n    self.subscribe(|| {\n        if f() { k.publish() }\n    });\n    k\n}\n</code></pre>\n\n<p>In this method, <code>f</code> is a value that has been passed in by-value, which means that <code>filter</code> owns it. Then, we create another closure that captures <code>f</code> <em>by-reference</em>. We are then trying to save that closure somewhere, so all the references in the closure need to outlive the lifetime of our struct (I picked <code>'static</code> for convenience).</p>\n\n<p>However, <code>f</code> only lives until the end of the method, so it definitely won't live long enough. We need to make the closure own <code>f</code>. It would be ideal if we could use the <code>move</code> keyword, but that causes the closure to also move in <code>k</code>, so we wouldn't be able to return it from the function.</p>\n\n<p>Trying to solve that led to this version:</p>\n\n<pre><code>fn filter&lt;F&gt;(&amp;mut self, f: F) -&gt; Keeper\n    where F: Fn() -&gt; bool + 'static //'\n{\n    let mut k = Keeper::new();\n    let k2 = &amp;mut k;\n    self.subscribe(move || {\n        if f() { k2.publish() }\n    });\n    k\n}\n</code></pre>\n\n<p>which has a useful error message:</p>\n\n<pre><code>error: `k` does not live long enough\nlet k2 = &amp;mut k;\n              ^\nnote: reference must be valid for the static lifetime...\n...but borrowed value is only valid for the block\n</code></pre>\n\n<p>Which leads to another problem: you are trying to keep a reference to <code>k</code> in the closure, but that reference will become invalid as soon as <code>k</code> is returned from the function. When items are moved by-value, their address will change, so references are no longer valid.</p>\n\n<p>One potential solution is to use <a href=\"http://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> and <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a>:</p>\n\n<pre><code>fn filter&lt;F&gt;(&amp;mut self, f: F) -&gt; Rc&lt;RefCell&lt;Keeper&gt;&gt;\n    where F: Fn() -&gt; bool + 'static //'\n{\n    let mut k = Rc::new(RefCell::new(Keeper::new()));\n    let k2 = k.clone();\n    self.subscribe(move || {\n        if f() { k2.borrow_mut().publish() }\n    });\n    k\n}\n</code></pre>\n"}], "owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 720, "favorite_count": 0, "accepted_answer_id": 28224448, "answer_count": 1, "score": 2, "last_activity_date": 1422634713, "creation_date": 1422562719, "last_edit_date": 1422634713, "question_id": 28223830, "link": "https://stackoverflow.com/questions/28223830/conflicting-lifetime-requirements-when-storing-closure-capturing-returned-value", "title": "Conflicting lifetime requirements when storing closure capturing returned value", "body": "<p><strong>EDIT:</strong></p>\n\n<p>I'm trying to create a vector of closures inside a function, add a standard closure to the vector, and then return the vector from the function. I'm getting an error about conflicting lifetimes.</p>\n\n<p>Code can be executed <a href=\"http://is.gd/M07mm3\" rel=\"nofollow\">here</a>.</p>\n\n<pre><code>fn vec_with_closure&lt;'a, T&gt;(f: Box&lt;FnMut(T) + 'a&gt;) -&gt; Vec&lt;Box&lt;FnMut(T) + 'a&gt;&gt;\n{\n    let mut v = Vec::&lt;Box&lt;FnMut(T)&gt;&gt;::new();\n    v.push(Box::new(|&amp;mut: t: T| {\n        f(t);\n    }));\n    v\n}\n\nfn main() {\n    let v = vec_with_closure(Box::new(|t: usize| {\n        println!(\"{}\", t);\n    }));\n    for c in v.iter_mut() {\n        c(10);\n    }\n}\n</code></pre>\n\n<p><strong>EDIT 2:</strong></p>\n\n<p>Using <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> together with <code>move ||</code> and the <code>Fn()</code> trait as opposed to the <code>FnMut()</code>m as suggested by Shepmaster, helped me produce a working version of the above code. Rust playpen version <a href=\"http://is.gd/oQyl5B\" rel=\"nofollow\">here</a>.</p>\n"}, {"tags": ["oop", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1422550152, "post_id": 28219911, "comment_id": 44803412, "body": "While writing out accessor methods for struct members is tedious, it&#39;s important to note that the optimizer is likely to remove the function call, making it equally as efficient."}, {"owner": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "edited": false, "score": 3, "creation_date": 1422550481, "post_id": 28219911, "comment_id": 44803616, "body": "Your edit is basically what I was talking about. But when I can&#39;t have fields in a default implementation, Rust really doesn&#39;t allow to use classical inheritance patterns, does it? Like, here is an example: C# has a class FileStream which inherits from Stream. How would you do something like that using rust when you aren&#39;t able to access the fields of the struct?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422551139, "post_id": 28219911, "comment_id": 44804034, "body": "That&#39;s correct - Rust does <i>not</i> have classical inheritance. There are very good composition abilities, as structs live inside other structs with no extra overhead."}, {"owner": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "edited": false, "score": 1, "creation_date": 1422560310, "post_id": 28219911, "comment_id": 44809213, "body": "So how would that look like? Just having a field of another struct, or is there some kind of syntactic sugar as we have in Go (virtual fields) to access the members of the field directly?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "edited": false, "score": 0, "creation_date": 1422570161, "post_id": 28219911, "comment_id": 44814733, "body": "@Reignbeaux sadly, there isn&#39;t a nice way of accessing a nested structs field directly, pretending that the nesting doesn&#39;t exist. You have to say <code>foo.nested.field</code>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 27, "last_activity_date": 1526145620, "last_edit_date": 1526145620, "creation_date": 1422549543, "answer_id": 28219911, "question_id": 28219730, "link": "https://stackoverflow.com/questions/28219730/is-it-possible-to-access-struct-fields-from-within-a-trait/28219911#28219911", "title": "Is it possible to access struct fields from within a trait?", "body": "<p>This sounds like you're misunderstanding how traits work.  Traits can't have fields.  If you want to provide access to a field from a trait, you need to define a method in that trait (like, say, <code>get_blah</code>).</p>\n\n<p>If you're asking whether you can access fields of a struct from within that struct's <em>implementation</em> of a trait, then yes.  The struct knows it's own type, so there's no problem.</p>\n\n<pre><code>trait Pet {\n    fn is_smelly(&amp;self) -&gt; bool;\n}\n\nstruct Dog {\n    washed_recently: bool,\n}\n\nimpl Pet for Dog {\n    fn is_smelly(&amp;self) -&gt; bool {\n        !self.washed_recently\n    }\n}\n</code></pre>\n\n<p>If you're writing a <em>default</em> implementation of a trait (<em>i.e.</em> defining a method body within the trait), then no, you can't access fields.  A default implementation can only use methods that are defined on the trait or in a super trait.</p>\n"}, {"tags": [], "owner": {"reputation": 353, "user_id": 5511614, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-xv0rjc16kws/AAAAAAAAAAI/AAAAAAAAACs/nWA8_8vHvhk/photo.jpg?sz=128", "display_name": "Fuujin", "link": "https://stackoverflow.com/users/5511614/fuujin"}, "is_accepted": false, "score": 18, "last_activity_date": 1517012726, "last_edit_date": 1517012726, "creation_date": 1517004532, "answer_id": 48470287, "question_id": 28219730, "link": "https://stackoverflow.com/questions/28219730/is-it-possible-to-access-struct-fields-from-within-a-trait/48470287#48470287", "title": "Is it possible to access struct fields from within a trait?", "body": "<p>It would be useful to define fields in a trait's default implementation, so a struct implementing the trait would always have the same fields.</p>\n\n<p>Apparently, the Rust team thinks the same but it is still a work in progress according to <a href=\"https://github.com/rust-lang/rfcs/pull/1546\" rel=\"noreferrer\">this RFC</a>. It's a big change and it has been postponed, so I think the short answer is: you can't do it yet, but you might be able to do it in the future. </p>\n\n<p>For now, you'll have to make do with less powerful traits. </p>\n"}, {"comments": [{"owner": {"reputation": 81, "user_id": 7324205, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Wvr4o.jpg?s=128&g=1", "display_name": "Meet Sinojia", "link": "https://stackoverflow.com/users/7324205/meet-sinojia"}, "edited": false, "score": 0, "creation_date": 1597862171, "post_id": 57666149, "comment_id": 112274596, "body": "This seems like a good workaround. Default implementations of traits can&#39;t access struct fields directly (since traits can&#39;t have member variables unlike Java and many other OOP languages), but they can access getters/setters if you put their declaration in the trait itself, and it provides the same functionality as accessing struct fields IMO."}], "tags": [], "owner": {"reputation": 11, "user_id": 11981072, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b4e6dd3f27c2ded3a347c8fb4a6647ba?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey V. Litvinov", "link": "https://stackoverflow.com/users/11981072/aleksey-v-litvinov"}, "is_accepted": false, "score": 1, "last_activity_date": 1566863716, "creation_date": 1566863716, "answer_id": 57666149, "question_id": 28219730, "link": "https://stackoverflow.com/questions/28219730/is-it-possible-to-access-struct-fields-from-within-a-trait/57666149#57666149", "title": "Is it possible to access struct fields from within a trait?", "body": "<p>You can make accessor function in default trait implementation, that must return field value/ref in child implementations, returning default value. Use it in other fn's in default implementation, and redefine accessor's in child implementation. Default implementation fn's will use redefined accessors as it's virtual fn's.  </p>\n"}], "owner": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11737, "favorite_count": 2, "accepted_answer_id": 28219911, "answer_count": 3, "score": 25, "last_activity_date": 1566863716, "creation_date": 1422548996, "last_edit_date": 1526145752, "question_id": 28219730, "link": "https://stackoverflow.com/questions/28219730/is-it-possible-to-access-struct-fields-from-within-a-trait", "title": "Is it possible to access struct fields from within a trait?", "body": "<p>Traits are used to group some functions to be implemented from a struct, but is it possible to access struct fields from within the trait?</p>\n\n<p>I could imagine declaring fields inside the trait so that the fields are abstracted as well. I haven't found such a syntax; is there any other solution? Otherwise, it wouldn't be possible to have non-static methods using a trait, would it?</p>\n\n<p>I know object oriented programming from C# and I'm playing around with Rust, trying to adapt the OOP functionality I already know from C#. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1422549651, "post_id": 28219847, "comment_id": 44803111, "body": "Thanks! You mentioned I could use plain references. How might that work?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422550009, "post_id": 28219847, "comment_id": 44803323, "body": "See my answer for plain references."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 23, "last_activity_date": 1613497955, "last_edit_date": 1613497955, "creation_date": 1422549307, "answer_id": 28219847, "question_id": 28219519, "link": "https://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed/28219847#28219847", "title": "Are polymorphic variables allowed?", "body": "<p>Yes, but not that easily.  What you've written there is that <code>animal</code> should be a variable of type <code>Barks</code>, but <code>Barks</code> is a trait; a description of an interface.  Traits don't have a statically-defined size, since a type of any size could come along and <code>impl Barks</code>. The compiler has no idea how big to make <code>animal</code>.</p>\n<p>What you need to do is add a layer of indirection.  In this case, you can use <code>Box</code>, although you can also use things like <code>Rc</code> or plain references:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let animal: Box&lt;dyn Barks&gt;;\n    \n    if 1 == 2 {\n        animal = Box::new(Dog);\n    } else {\n        animal = Box::new(Wolf);\n    }\n    \n    animal.bark();\n}\n</code></pre>\n<p>Here, I'm allocating the <code>Dog</code> or <code>Wolf</code> on the heap, then casting that up to a <code>Box&lt;dyn Barks&gt;</code>.  This is <em>kind of</em> like casting an object to an interface in something like C# or Java, or casting a <code>Dog*</code> to a <code>Barks*</code> in C++.</p>\n<p>An entirely different approach you could also use would be enums.  You could have <code>enum Animal { Dog, Wolf }</code> then define an <code>impl Animal { fn bark(&amp;self) { ... } }</code>.  Depends on whether you need a completely open-ended set of animals and/or multiple traits.</p>\n<p>Finally, note that &quot;kind of&quot; above.  There are various things that don't work as they would in Java/C#/C++.  For example, Rust doesn't have downcasting (you can't go from <code>Box&lt;dyn Barks&gt;</code> back to <code>Box&lt;Dog&gt;</code>, or from one trait to another).  Also, this only works if the trait is &quot;object safe&quot; (no generics, no using <code>self</code> or <code>Self</code> by-value).</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 18, "last_activity_date": 1613497791, "last_edit_date": 1613497791, "creation_date": 1422549931, "answer_id": 28220053, "question_id": 28219519, "link": "https://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed/28220053#28220053", "title": "Are polymorphic variables allowed?", "body": "<p>DK has a good explanation, I'll just chime in with an example where we allocate the <code>Dog</code> or <code>Wolf</code> on the stack, avoiding a heap allocation:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let dog;\n    let wolf;\n    \n    let animal: &amp;dyn Barks = if 1 == 2 {\n        dog = Dog;\n        &amp;dog\n    } else {\n        wolf = Wolf;\n        &amp;wolf\n    };\n    \n    animal.bark();\n}\n</code></pre>\n<p>It's a bit ugly, but the references accomplish the same indirection as a <code>Box</code> with a smidge less overhead.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/58559969/155423\">How can I conditionally provide a default reference without performing unnecessary computation when it isn&#39;t used?</a></li>\n<li><a href=\"https://stackoverflow.com/q/54222905/155423\">How do I make format! return a &amp;str from a conditional expression?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 3, "creation_date": 1495623861, "post_id": 28271165, "comment_id": 75329389, "body": "I think that <code>Canine</code> would be better name for enum."}], "tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": false, "score": 5, "last_activity_date": 1422851587, "creation_date": 1422851587, "answer_id": 28271165, "question_id": 28219519, "link": "https://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed/28271165#28271165", "title": "Are polymorphic variables allowed?", "body": "<p>Defining a custom enumeration is the most efficient way to do this. This will allow you to allocate on the stack exactly the amount of space you need, i.e. the size of the largest option, plus 1 extra byte to track which option is stored. It also allows direct access without a level of indirection, unlike solutions using a <code>Box</code> or a trait reference.</p>\n\n<p>Unfortunately, it does require more boiler-plate:</p>\n\n<pre><code>enum WolfOrDog {\n    IsDog(Dog),\n    IsWolf(Wolf)\n}\nuse WolfOrDog::*;\n\nimpl Barks for WolfOrDog {\n    fn bark(&amp;self) {\n        match *self {\n            IsDog(ref d) =&gt; d.bark(),\n            IsWolf(ref w) =&gt; w.bark()\n        }\n    }\n}\n\nfn main() {\n    let animal: WolfOrDog;\n    if 1 == 2 {\n        animal = IsDog(Dog);\n    } else {\n        animal = IsWolf(Wolf);\n    }\n    animal.bark();\n}\n</code></pre>\n\n<p>In <code>main</code> we use only a single stack allocated variable, holding an instance of our custom enumeration.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1106, "favorite_count": 3, "accepted_answer_id": 28219847, "answer_count": 3, "score": 19, "last_activity_date": 1613497955, "creation_date": 1422548350, "last_edit_date": 1485646808, "question_id": 28219519, "link": "https://stackoverflow.com/questions/28219519/are-polymorphic-variables-allowed", "title": "Are polymorphic variables allowed?", "body": "<p>I have various structs that all implement the same trait. I want to branch on some condition, deciding at runtime which of those structs to instantiate. Then, regardless of which branch I followed, I want to call methods from that trait.</p>\n\n<p>Is this possible in Rust? I'm hoping to achieve something like the following (which does not compile):</p>\n\n<pre><code>trait Barks {\n    fn bark(&amp;self);\n}\n\nstruct Dog;\n\nimpl Barks for Dog {\n    fn bark(&amp;self) {\n        println!(\"Yip.\");\n    }\n}\n\nstruct Wolf;\n\nimpl Barks for Wolf {\n    fn bark(&amp;self) {\n        println!(\"WOOF!\");\n    }\n}\n\nfn main() {\n    let animal: Barks;\n    if 1 == 2 {\n        animal = Dog;\n    } else {\n        animal = Wolf;\n    }\n    animal.bark();\n}\n</code></pre>\n"}, {"tags": ["rust", "slice"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422550404, "post_id": 28219231, "comment_id": 44803560, "body": "Could you expand a bit on why you want to copy data in slices around? I&#39;d usually expect to either just take a reference to the original <i>or</i> to be copying the data to something that owns the copy."}], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1422550980, "post_id": 28219891, "comment_id": 44803940, "body": "Your approach is correct. Your initial version didn&#39;t work because dereference patterns (like <code>&amp;mut d</code>) creates a new variable (<code>d</code> in this case) and assigns it to a dereference of the pointer. It does not provide an ability to modify the original value, it just copies the original value; if you used it with non-<code>Copy</code> type, your program won&#39;t even compile."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1422551014, "post_id": 28219891, "comment_id": 44803961, "body": "BTW, you can also keep <code>&amp;s</code> in place and write <code>*d = s</code> afterwards."}], "tags": [], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "is_accepted": false, "score": 6, "last_activity_date": 1422549480, "creation_date": 1422549480, "answer_id": 28219891, "question_id": 28219231, "link": "https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice/28219891#28219891", "title": "How to idiomatically copy a slice?", "body": "<p>This code works, even though I am not sure if it the best way to do it.</p>\n\n<pre><code>fn copy_slice(dst: &amp;mut [u8], src: &amp;[u8]) -&gt; usize {\n    let mut c = 0;\n    for (d, s) in dst.iter_mut().zip(src.iter()) {\n        *d = *s;\n        c += 1;\n    }\n    c \n}\n</code></pre>\n\n<p>Apparently not specifying access permissions explicitly did the trick. However, I am still confused about this and my mental model doesn't yet cover what's truly going on there.\nMy solutions are mostly trial and error when it comes to these things, and I'd rather like to truly understand instead.</p>\n"}, {"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422603208, "post_id": 28224758, "comment_id": 44824685, "body": "Thank you ! This was what I was initially looking for, but couldn&#39;t find as I was searching for anything related to <code>copy</code>. In rust-speak, clone might be the appropriate term though ... I am still getting used to it all."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 64, "last_activity_date": 1490492961, "last_edit_date": 1490492961, "creation_date": 1422566245, "answer_id": 28224758, "question_id": 28219231, "link": "https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice/28224758#28224758", "title": "How to idiomatically copy a slice?", "body": "<p>Yes, use the method <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice\" rel=\"noreferrer\"><code>clone_from_slice()</code></a>, it is generic over any element type that implements <code>Clone</code>.</p>\n\n<pre><code>fn main() {\n    let mut x = vec![0; 8];\n    let y = [1, 2, 3];\n    x[..3].clone_from_slice(&amp;y);\n    println!(\"{:?}\", x);\n    // Output:\n    // [1, 2, 3, 0, 0, 0, 0, 0]\n}\n</code></pre>\n\n<p>The destination <code>x</code> is either a <code>&amp;mut [T]</code> slice, or anything that derefs to that, like a mutable <code>Vec&lt;T&gt;</code> vector. You need to slice the destination and source so that their lengths match.</p>\n\n<hr>\n\n<p>As of Rust 1.9, you can also use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.copy_from_slice\" rel=\"noreferrer\"><code>copy_from_slice()</code></a>. This works the same way but uses the <code>Copy</code> trait instead of <code>Clone</code>, and is a direct wrapper of <code>memcpy</code>. The compiler can optimize <code>clone_from_slice</code> to be equivalent to <code>copy_from_slice</code> when applicable, but it can still be useful.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490485478, "post_id": 43023205, "comment_id": 73133709, "body": "This is not idiomatic Rust. Iterators should generally not have side-effects, and the usage of <code>map</code> here doubly non-idomatic. If that&#39;s what you want, a <code>for</code> loop is the correct choice."}, {"owner": {"reputation": 928, "user_id": 5924630, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-dXM_U4iuN40/AAAAAAAAAAI/AAAAAAAAABI/cayI6h8ZfvA/photo.jpg?sz=128", "display_name": "Yasammez", "link": "https://stackoverflow.com/users/5924630/yasammez"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490489579, "post_id": 43023205, "comment_id": 73134514, "body": "I admit this is kind of a hack, but the <code>for</code> loop requires manual tracking of the number of iterations. Instead of <code>map</code> one could probably use <code>inspect</code> to make it clearer that the \u201eresult\u201c will get discarded."}, {"owner": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1585078046, "post_id": 43023205, "comment_id": 107638124, "body": "@Shepmaster You may want to consider the following example that&#39;s included in the official Rust docs for <code>collect()</code>, which shows the following: <code>let hello: String = chars.iter().map(|&amp;x| x as u8).map(|x| (x + 1) as char).collect();</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "edited": false, "score": 0, "creation_date": 1585078179, "post_id": 43023205, "comment_id": 107638191, "body": "@code_dredd thanks, but this isn&#39;t my answer \u2014 I&#39;m only an editor here."}, {"owner": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1585078622, "post_id": 43023205, "comment_id": 107638406, "body": "@Shepmaster No worries. I&#39;m not defending this implementation either, or anything. I just wanted to note the detail w.r.t. the lack of side-effects for iterators and/or maps."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "edited": false, "score": 0, "creation_date": 1585079150, "post_id": 43023205, "comment_id": 107638611, "body": "@code_dredd oh, I see what you are saying now (I thought you were saying to put that example in the answer). The example you cite does not have side effects \u2014 it only operates on the values provided to the closures and those values are not mutable references."}, {"owner": {"reputation": 91, "user_id": 14628496, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0581d185eeb355e6c1f6a2e4334a0cbe?s=128&d=identicon&r=PG&f=1", "display_name": "Eliatiscom", "link": "https://stackoverflow.com/users/14628496/eliatiscom"}, "edited": false, "score": 0, "creation_date": 1616157026, "post_id": 43023205, "comment_id": 117920991, "body": "Just as an extension on Shepmaster&#39;s first comment, here&#39;s a quote from the Rust reference on the Iterator trait: <code>map() is conceptually similar to a for loop. However, as map() is lazy, it is best used when you&#39;re already working with other iterators. If you&#39;re doing some sort of looping for a side effect, it&#39;s considered more idiomatic to use for than map().</code>."}], "tags": [], "owner": {"reputation": 928, "user_id": 5924630, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-dXM_U4iuN40/AAAAAAAAAAI/AAAAAAAAABI/cayI6h8ZfvA/photo.jpg?sz=128", "display_name": "Yasammez", "link": "https://stackoverflow.com/users/5924630/yasammez"}, "is_accepted": false, "score": -2, "last_activity_date": 1490485370, "last_edit_date": 1490485370, "creation_date": 1490484966, "answer_id": 43023205, "question_id": 28219231, "link": "https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice/43023205#43023205", "title": "How to idiomatically copy a slice?", "body": "<p>Another variant would be</p>\n\n<pre><code>fn copy_slice(dst: &amp;mut [u8], src: &amp;[u8]) -&gt; usize {\n    dst.iter_mut().zip(src).map(|(x, y)| *x = *y).count()\n}\n</code></pre>\n\n<p>Note that you have to use <code>count</code> in this case, since <code>len</code> would use the <code>ExactSizeIterator</code> shortcut and thus never call <code>next</code>, resulting in a no-op.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 37774, "favorite_count": 3, "accepted_answer_id": 28224758, "answer_count": 3, "score": 47, "last_activity_date": 1561580718, "creation_date": 1422547518, "last_edit_date": 1561580718, "question_id": 28219231, "link": "https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice", "title": "How to idiomatically copy a slice?", "body": "<p>In Go, copying slices is standard-fare and looks like this:</p>\n\n<pre class=\"lang-golang prettyprint-override\"><code># It will figure out the details to match slice sizes\ndst = copy(dst[n:], src[:m])\n</code></pre>\n\n<p>In Rust, I couldn't find a similar method as replacement. Something I came up with looks like this:</p>\n\n<pre><code>fn copy_slice(dst: &amp;mut [u8], src: &amp;[u8]) -&gt; usize {\n    let mut c = 0;\n    for (&amp;mut d, &amp;s) in dst.iter_mut().zip(src.iter()) {\n        d = s;\n        c += 1;\n    }\n    c\n}\n</code></pre>\n\n<p>Unfortunately, I get this compile-error that I am unable to solve:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0384]: re-assignment of immutable variable `d`\n --&gt; src/main.rs:4:9\n  |\n3 |     for (&amp;mut d, &amp;s) in dst.iter_mut().zip(src.iter()) {\n  |               - first assignment to `d`\n4 |         d = s;\n  |         ^^^^^ re-assignment of immutable variable\n</code></pre>\n\n<p>How can I set <code>d</code>? Is there a better way to copy a slice?</p>\n"}, {"tags": ["linux", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422560171, "post_id": 28217865, "comment_id": 44809143, "body": "Welcome to Stack Overflow! To get better quality answers, you should strive to make high-quality questions. In this example, including the pertinent parts of your errors here, and stating your Rust version would go a long way to helping us help you!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1422560452, "creation_date": 1422560452, "answer_id": 28223185, "question_id": 28217865, "link": "https://stackoverflow.com/questions/28217865/cant-install-condrod-in-rust-on-linux/28223185#28223185", "title": "Can&#39;t install condrod in Rust on Linux", "body": "<p>Rust is currently in an alpha version, working hard on releasing 1.0. Currently, a lot of things are in flux, and APIs may disappear with little to no warning.</p>\n\n<p>In this case, <a href=\"https://github.com/rust-lang/rust/pull/21543\" rel=\"nofollow\">the current <code>io</code> namespace has been renamed to <code>old_io</code></a>:</p>\n\n<blockquote>\n  <p>In preparation for the I/O rejuvination of the standard library, this commit\n  renames the current io module to old_io in order to make room for the new\n  I/O modules. It is expected that the I/O RFCs will land incrementally over time\n  instead of all at once, and this provides a fresh clean path for new modules to\n  enter into as well as guaranteeing that all old infrastructure will remain in\n  place for some time.</p>\n  \n  <p>As each old_io module is replaced it will be deprecated in-place for new\n  structures in std::{io, fs, net} (as appropriate).</p>\n</blockquote>\n\n<p>As a workaround until the parts of <code>std::io</code> are available, you can change references of <code>std::io</code> to <code>std::old_io</code>.</p>\n"}], "owner": {"reputation": 1, "user_id": 4507872, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e4f4876f9e405bf14f9912c75a3bfce4?s=128&d=identicon&r=PG&f=1", "display_name": "d0tr4ck3t33r", "link": "https://stackoverflow.com/users/4507872/d0tr4ck3t33r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1422560452, "creation_date": 1422543900, "last_edit_date": 1422560256, "question_id": 28217865, "link": "https://stackoverflow.com/questions/28217865/cant-install-condrod-in-rust-on-linux", "title": "Can&#39;t install condrod in Rust on Linux", "body": "<p>I installed freetype but its still not working. I'm using Ubuntu 14.10.</p>\n\n<p>The error is:</p>\n\n<pre><code>unresolved import `std::io::timer::sleep`. Could not find `io` in `std`\nuse std::io::timer::sleep;\n    ^~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>(<a href=\"http://pastebin.com/sBnAdeax\" rel=\"nofollow\">full log here</a>)</p>\n"}, {"tags": ["python", "go", "rust", "docopt"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1422539299, "post_id": 28210260, "comment_id": 44795903, "body": "Can you add more examples of what you want? It seems I may have misinterpreted your question."}, {"owner": {"reputation": 2244, "user_id": 664196, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/bbfb56212931fc5d7e92867fb3bf3050?s=128&d=identicon&r=PG", "display_name": "jkgeyti", "link": "https://stackoverflow.com/users/664196/jkgeyti"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1422544174, "post_id": 28210260, "comment_id": 44799262, "body": "Sorry for the ambiguity. I&#39;ve edited my question, and hope it&#39;s clearer now."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1422547445, "post_id": 28210260, "comment_id": 44801629, "body": "Neat request. Rust&#39;s Docopt does indeed drop this information on the floor. Unfortunately, I don&#39;t know if any other Docopt parser makes it available. I opened a new feature request: <a href=\"https://github.com/docopt/docopt.rs/issues/88\" rel=\"nofollow noreferrer\">github.com/docopt/docopt.rs/issues/88</a>"}, {"owner": {"reputation": 2244, "user_id": 664196, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/bbfb56212931fc5d7e92867fb3bf3050?s=128&d=identicon&r=PG", "display_name": "jkgeyti", "link": "https://stackoverflow.com/users/664196/jkgeyti"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1422547875, "post_id": 28210260, "comment_id": 44801929, "body": "Cheers. I&#39;m not convinced adding &quot;non-standard&quot; features to any docopt parser is the right way to go, as the goal must be to have all docopt parsers to behave the same? Maybe some sort of functionality that allows the user to traverse/inspect the parsed docopt document would be the right way to go about it? Anyway, that&#39;s probably a discussion best left for the feature request."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1422549995, "post_id": 28210260, "comment_id": 44803312, "body": "I&#39;ve already added some &quot;non-standard&quot; features to docopt.rs. (It&#39;s a superset.) And there&#39;s some special functionality for type based decoding. I&#39;m not convinced either that adding special introspection features is worthwhile, but I figured I&#39;d file the issue anyway."}, {"owner": {"reputation": 2244, "user_id": 664196, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/bbfb56212931fc5d7e92867fb3bf3050?s=128&d=identicon&r=PG", "display_name": "jkgeyti", "link": "https://stackoverflow.com/users/664196/jkgeyti"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1422616509, "post_id": 28210260, "comment_id": 44830990, "body": "Ah, didn&#39;t realise you were the author of the rust docopt library. Thanks for your good work - it&#39;s a neat library :)"}, {"owner": {"reputation": 3042, "user_id": 789308, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/c02ac9795923a7eca30c73e9bbbabf4e?s=128&d=identicon&r=PG", "display_name": "con-f-use", "link": "https://stackoverflow.com/users/789308/con-f-use"}, "edited": false, "score": 0, "creation_date": 1424868374, "post_id": 28210260, "comment_id": 45725602, "body": "See <a href=\"https://github.com/docopt/docopt.rs/issues/88\" rel=\"nofollow noreferrer\">github.com/docopt/docopt.rs/issues/88</a>"}], "answers": [{"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1422539267, "post_id": 28214541, "comment_id": 44795888, "body": "Maybe I misinterpreted the question? The OP just wants the string of the argument?"}, {"owner": {"reputation": 2244, "user_id": 664196, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/bbfb56212931fc5d7e92867fb3bf3050?s=128&d=identicon&r=PG", "display_name": "jkgeyti", "link": "https://stackoverflow.com/users/664196/jkgeyti"}, "edited": false, "score": 0, "creation_date": 1422544278, "post_id": 28214541, "comment_id": 44799324, "body": "Yes, I think we mean the same thing. I am indeed looking for determine that the options are DIR and FILE. For future readers: Note that I&#39;ve simplified the original example, hence why BurntSushi5&#39;s example does not correspond 100% to the question."}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": false, "score": 1, "last_activity_date": 1422533738, "creation_date": 1422533738, "answer_id": 28214541, "question_id": 28210260, "link": "https://stackoverflow.com/questions/28210260/parsing-docopt-argument-types-any-language/28214541#28214541", "title": "Parsing docopt argument types (any language)", "body": "<p>This is pretty easy with <a href=\"https://github.com/docopt/docopt.rs\" rel=\"nofollow\">Rust's Docopt</a>:</p>\n\n<pre><code>#![allow(unstable)]\n\nextern crate docopt;\n\nuse docopt::Docopt;\n\nstatic USAGE: &amp;'static str = \"\nNaval Fate.\n\nUsage:\n    naval_fate ship --dir=FILE [--speed &lt;kn&gt;]\n    naval_fate (-h | --help)\n\nOptions:\n    -h --help     Show this screen.\n    --speed &lt;kn&gt;  Speed in knots [default: 10].\n    --dir=FILE    Moored (anchored) mine.\n\";\n\nfn main() {\n    let args = Docopt::new(USAGE)\n                      .and_then(|d| d.parse())\n                      .unwrap_or_else(|e| e.exit());\n    println!(\"Type of 'ship': {:?}\", args.find(\"ship\"));\n    println!(\"Type of '--dir': {:?}\", args.find(\"--dir\"));\n    println!(\"Type of '--speed': {:?}\", args.find(\"--speed\"));\n}\n</code></pre>\n\n<p>Which outputs:</p>\n\n<pre><code>$ ./target/scratch ship --dir /tmp --speed 1234                                        \nType of 'ship': Some(Switch(true))                                                                       \nType of '--dir': Some(Plain(Some(\"/tmp\")))                                                               \nType of '--speed': Some(Plain(Some(\"1234\"))) \n</code></pre>\n\n<p>The key is that the return type of <code>find</code> is <code>Value</code>, which is an algebraic data type: <a href=\"http://burntsushi.net/rustdoc/docopt/enum.Value.html\" rel=\"nofollow\">http://burntsushi.net/rustdoc/docopt/enum.Value.html</a> --- So by construction, you get the \"type\" of the argument for free.</p>\n\n<p>Note that this will work for any \"argument\" in the Docopt usage string, even if it isn't passed into the argument list.</p>\n"}], "owner": {"reputation": 2244, "user_id": 664196, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/bbfb56212931fc5d7e92867fb3bf3050?s=128&d=identicon&r=PG", "display_name": "jkgeyti", "link": "https://stackoverflow.com/users/664196/jkgeyti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 767, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1422544135, "creation_date": 1422520766, "last_edit_date": 1422544135, "question_id": 28210260, "link": "https://stackoverflow.com/questions/28210260/parsing-docopt-argument-types-any-language", "title": "Parsing docopt argument types (any language)", "body": "<p>I have a use case where users provide a docopt string, and based on it, I generate some code. So I do not know my docopt string up front.</p>\n\n<p>For certain \"argument types\" (not datatypes), I wish to generate various code. </p>\n\n<p>In the following, I will distinguish between \"types\" and \"datatypes\". For the docopt argument <code>--arg=DEGREES</code> and the argv input <code>--arg=10</code>, the \"type\" of <code>--arg</code> is <code>DEGREES</code>, while the datatype is <code>integer</code>. The value is <code>10</code>.</p>\n\n<p>A user may give me the following docopt string:</p>\n\n<pre><code>Naval Fate.\n\nUsage:\n  naval_fate --dir=FILE [--speed=ABC]\n\nOptions:\n  --dir=FILE   Moored (anchored) mine.\n  --speed=ABC  Speed in knots [default: 10].\n</code></pre>\n\n<p>Besides parsing this docopt string as usual, I'm trying to also figure out what \"type\" of argument <code>dir</code> and <code>speed</code> asks for. I want to know that <code>dir</code> is of type <code>FILE</code> and <code>speed</code> is of type <code>ABC</code>.</p>\n\n<p><strong>Example:</strong></p>\n\n<p>Given the above docopt string, and an argv string <code>naval_fate --dir=/tmp --speed 1234</code>, I hope to access not just the value and datatype (<code>&lt;key&gt; =&gt; &lt;value,datatype&gt;</code>), but also the \"config type\" (<code>&lt;key&gt; =&gt; &lt;value,datatype,argtype&gt;</code>, i.e. something along the lines of:</p>\n\n<p><code>dir</code> => val: <code>/tmp</code>, datatype: <code>String</code>, <strong>type: <code>FILE</code></strong><br>\n<code>speed</code> => val: <code>1234</code>, datatype: <code>Integer</code>, <strong>type: <code>ABC</code></strong></p>\n\n<p>Any (managed) implementation of docopt is acceptable, including Python's, though preferably I'm looking for a solution in a compiled language, be it C, Go, Rust etc.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422512429, "post_id": 28208037, "comment_id": 44781174, "body": "Are you trying to fill it with zeros, or have a vector preallocated to a certain length, or have a vector preallocated to a certain sized allocation (i.e. no elements)?"}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1422513189, "post_id": 28208037, "comment_id": 44781439, "body": "I want to have a vector with certain length but rubbish in elements."}], "answers": [{"comments": [{"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422513520, "post_id": 28208182, "comment_id": 44781580, "body": "What I need is portion of memory with access to it. let v : Vec&lt;u32&gt;  = &lt;vec with size x&gt;; means for me that I can write to any index from 0 to size - 1 without segmentation fault: v[0] = ..., ... v[size -1] = ... operations should be valid. But I can&#39;t waste time to pre initialize that memory with values I don&#39;t even need! Analogue in C++ is int * v = new int[size];"}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422514027, "post_id": 28208182, "comment_id": 44781798, "body": "According to &quot;with_capacity&quot; doc: &quot;this function does not specify the length of the returned vector, but only the capacity&quot;, so it doesn&#39;t suit for me. It is clear that I can use it to improve perfomance by excluding reallocation issues, however I still forced to push elements in vector one by one instead of just writing directly to memory."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1422514100, "post_id": 28208182, "comment_id": 44781834, "body": "In order to do this, you need to have some sort of default value for the elements, which is the &#39;vector of zeroes&#39; part of Chris&#39; example."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 1, "creation_date": 1422514406, "post_id": 28208182, "comment_id": 44781939, "body": "Default values are always slower than not defined values at all. I can&#39;t imagine that language positioned as system language doesn&#39;t have method to just allocate vector in memory without any element initialization."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 4, "creation_date": 1422517530, "post_id": 28208182, "comment_id": 44783390, "body": "@FominArseniy <code>new T[n]</code> in C++ performs default initialization, which for primitives like <code>int</code> means no initialization but calls the default constructor for user-defined types. And C++ <code>std::vector</code> doesn&#39;t allow uninitialized values either (it doesn&#39;t do bounds checking, so you can write into reserved memory, but that&#39;s UB and in any case the vector won&#39;t acknowledge those elements as its size will remain 0)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422534474, "post_id": 28208182, "comment_id": 44792913, "body": "@FominArseniy: I would not surprised if it was slightly slower, but have you checked?"}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422609223, "post_id": 28208182, "comment_id": 44827221, "body": "No, I haven&#39;t checked already - still didn&#39;t understand how to work with bench module."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 15, "last_activity_date": 1422512484, "creation_date": 1422512484, "answer_id": 28208182, "question_id": 28208037, "link": "https://stackoverflow.com/questions/28208037/how-to-make-a-vector-of-received-size/28208182#28208182", "title": "How to make a vector of received size?", "body": "<p>The recommended way of doing this is in fact to form an iterator and collect it to a vector. What you want is not precisely clear, however; if you want <code>[0, 1, 2, \u2026, size - 1]</code>, you would create a range and collect it to a vector:</p>\n\n<pre><code>let x = (0..size).collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>(<code>range(0, size)</code> is better written <code>(0..size)</code> now; the <code>range</code> function will be disappearing from the prelude soon.)</p>\n\n<p>If you wish a vector of zeroes, you would instead write it thus:</p>\n\n<pre><code>let x = std::iter::repeat(0).take(size).collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>If you merely want to preallocate the appropriate amount of space but not push values onto the vector, <code>Vec::with_capacity(capacity)</code> is what you want.</p>\n\n<p>You should also consider whether you need it to be a vector or whether you can work directly with the iterator.</p>\n"}, {"comments": [{"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517083, "post_id": 28209155, "comment_id": 44783199, "body": "I see now why it can&#39;t be done without &quot;unsafe&quot;. With not initialized variable Rust compiler can find in code is there any usage of it before initialization. But in array case compiler can&#39;t provide this checking because array indexing can also be unknown at compile time."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517230, "post_id": 28209155, "comment_id": 44783255, "body": "I think without unsafe code the most fast variant can be just cloning original data to new array, something like let v: Vec&lt;u32&gt; = data.clone(); ?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517234, "post_id": 28209155, "comment_id": 44783258, "body": "Well, this particular function (<code>set_len()</code>) is <code>unsafe</code> because it may be used to cause memory corruption: if you call it with an argument greater than the capacity of the vector, you may cause buffer overflow when writing beyond the allocated capacity."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517356, "post_id": 28209155, "comment_id": 44783311, "body": "@FominArseniy, cloning the vector involves copying all of the elements. If that&#39;s what you need, go for it. BTW, preallocating a vector (even with <code>set_len()</code>) and then manually copying data to it from another vector with index assignments is going to be inefficient due to bounds checking. Using <code>zip()</code> on iterators will help, though, but <code>clone()</code> is much simpler."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517587, "post_id": 28209155, "comment_id": 44783424, "body": "Bounds checking? We can write let v : Vec&lt;u32&gt; = vec![]; v[100500] = x; and panic, is it bounds checking?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422517745, "post_id": 28209155, "comment_id": 44783506, "body": "Yes, that&#39;s exactly what it is. Each indexed access with <code>[]</code> involves a test that the index is inside the vector boundaries; if it isn&#39;t, a panic occurs. If you need indexing without bounds checking, there is <code>get_unchecked()</code> and <code>get_unchecked_mut()</code> functions, but they are <code>unsafe</code>, naturally."}, {"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422518336, "post_id": 28209155, "comment_id": 44783793, "body": "The idea to clone vector instead of creating new one with the size of original is in that I&#39;m forced to put some values in new vector and moreover I&#39;m forced to put them one by one. It seems to me that cloning (with copying all elements at once) is faster than putting one by one, am I right?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422518411, "post_id": 28209155, "comment_id": 44783837, "body": "Yes, you&#39;re right, if copying the data stored in a vector is what you need."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 4, "creation_date": 1422518915, "post_id": 28209155, "comment_id": 44784082, "body": "<code>set_len</code> can cause memory corruption even without setting it too large: the data is uninitialised and interacting with it (other than just writing to it, with <code>std::ptr::write</code>) is likely to cause undefined behaviour. (For <code>u32</code> it&#39;s mostly OK, but using <code>=</code> with any type with a destructor will cause the destructor to run on the &quot;random&quot; uninitialised memory.)"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422519963, "post_id": 28209155, "comment_id": 44784568, "body": "Yes, I should probably mention that it would only work fine with <code>Copy</code> data."}, {"owner": {"reputation": 2483, "user_id": 108172, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5158ef35eb18f64c72c8633e050fddb8?s=128&d=identicon&r=PG&f=1", "display_name": "diapir", "link": "https://stackoverflow.com/users/108172/diapir"}, "edited": false, "score": 0, "creation_date": 1439554436, "post_id": 28209155, "comment_id": 51921874, "body": "It should also be noted that <code>set_len</code> just assigns the new length, nothing more, allowing <code>len()</code> to be greater than <code>capacity()</code> thus giving access to unallocated memory."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 16, "last_activity_date": 1422520019, "last_edit_date": 1422520019, "creation_date": 1422516545, "answer_id": 28209155, "question_id": 28208037, "link": "https://stackoverflow.com/questions/28208037/how-to-make-a-vector-of-received-size/28209155#28209155", "title": "How to make a vector of received size?", "body": "<p>You can use <code>Vec::with_capacity()</code> constructor followed by an unsafe <code>set_len()</code> call:</p>\n\n<pre><code>let n = 128;\nlet v: Vec&lt;u32&gt; = Vec::with_capacity(n);\nunsafe { v.set_len(n); }\nv[12] = 64;  // won't panic\n</code></pre>\n\n<p>This way the vector will \"extend\" over the uninitialized memory. If you're going to use it as a buffer it is a valid approach, as long as the type of elements is <code>Copy</code> (primitives are ok, but it will break horribly if the type has a destructor).</p>\n"}], "owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4727, "favorite_count": 0, "accepted_answer_id": 28209155, "answer_count": 2, "score": 8, "last_activity_date": 1422520019, "creation_date": 1422511892, "last_edit_date": 1422513133, "question_id": 28208037, "link": "https://stackoverflow.com/questions/28208037/how-to-make-a-vector-of-received-size", "title": "How to make a vector of received size?", "body": "<p>I have a vector <code>data</code> with size unknown at compile time. I want to create a new vector of the exact that size. These variants don't work:</p>\n\n<pre><code>let size = data.len();\n\nlet mut try1: Vec&lt;u32&gt; = vec![0 .. size]; //ah, you need compile-time constant\nlet mut try2: Vec&lt;u32&gt; = Vec::new(size); //ah, there is no constructors with arguments\n</code></pre>\n\n<p>I'm a bit frustrated - there is no any information in Rust API, book, reference or rustbyexample.com about how to do such simple base task with vector.\nThis solution works but I don't think it is good to do so, it is strange to generate elements one by one and I don't have need in any exact values of elements:</p>\n\n<pre><code>let mut temp: Vec&lt;u32&gt; = range(0u32, data.len() as u32).collect();\n</code></pre>\n"}]