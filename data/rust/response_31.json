[{"tags": ["shared-libraries", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 2430, "user_id": 1762493, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/pEEmF.jpg?s=128&g=1", "display_name": "Mikeumus", "link": "https://stackoverflow.com/users/1762493/mikeumus"}, "edited": false, "score": 0, "creation_date": 1594346863, "post_id": 32055245, "comment_id": 111100901, "body": "\ud83d\udcd6 See the Rust Docs here on <code>crate-type</code>: <a href=\"https://doc.rust-lang.org/reference/linkage.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/linkage.html</a>"}], "tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": true, "score": 9, "last_activity_date": 1439838133, "last_edit_date": 1439838133, "creation_date": 1439828610, "answer_id": 32055245, "question_id": 31976215, "link": "https://stackoverflow.com/questions/31976215/choosing-shared-or-static-library-with-cargo/32055245#32055245", "title": "Choosing shared or static library with Cargo", "body": "<p><code>bin</code> is not a valid <code>crate-type</code> value.  The valid values are <code>rlib</code>, <code>lib</code>, <code>staticlib</code>, and <code>dylib</code>.  Changing the crate type to</p>\n\n<pre><code>crate-type = [\"dylib\", \"rlib\"]\n</code></pre>\n\n<p>will cause the behavior you're after.</p>\n\n<p>The reason that only an rlib is emitted with <code>[\"dylib\", \"bin\"]</code> is because there is currently a Cargo bug that causes invalid values for <code>crate-type</code> to only produce an rlib.  I've filed a <a href=\"https://github.com/rust-lang/cargo/pull/1914\" rel=\"noreferrer\">pull request</a> to fix the issue.</p>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3797, "favorite_count": 1, "accepted_answer_id": 32055245, "answer_count": 1, "score": 6, "last_activity_date": 1439838133, "creation_date": 1439417157, "question_id": 31976215, "link": "https://stackoverflow.com/questions/31976215/choosing-shared-or-static-library-with-cargo", "title": "Choosing shared or static library with Cargo", "body": "<p>I am attempting to modify <a href=\"https://github.com/phildawes/racer\">Racer</a> to emit a shared library instead of an rlib.</p>\n\n<p>To do this, I added <code>crate-type = [\"dylib\"]</code> to the <code>[lib]</code> section of the Cargo manifest, then ran <code>cargo build --lib</code>.  This worked great, and <code>libracer.so</code> was emitted.</p>\n\n<p>Unfortunately, now I could not build the Racer binary, which depends on a static version of the library.  Running <code>cargo build</code> complains:</p>\n\n<pre><code>   Compiling racer v1.0.0 (file:///home/georgev/dotfiles/vim/bundle/racer)\nerror: cannot satisfy dependencies so `std` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `core` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `collections` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `rustc_unicode` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `alloc` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `libc` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: cannot satisfy dependencies so `rand` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\nerror: aborting due to 7 previous errors\nCould not compile `racer`.\n</code></pre>\n\n<p>I changed the <code>crate-type</code> to <code>[\"dylib\", \"bin\"]</code>, which allowed the compilation to succeed.  However, <code>cargo build --lib</code> will not emit a shared library anymore (only an rlib).</p>\n\n<p>How can I specify which type of library I would like to build, while still allowing said library to be built statically for inclusion in an executable?</p>\n"}, {"tags": ["iterator", "rust", "mutable"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439394146, "post_id": 31969710, "comment_id": 51846646, "body": "Not one that works with <code>for</code>. Using a little setup and a <code>while let</code> might be nice enough, though."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 6, "creation_date": 1439395306, "post_id": 31969710, "comment_id": 51847457, "body": "This is sometimes called a <i>streaming iterator</i> and it has many more applications. (Your example trait does not do that though. I&#39;m not sure what it does but it looks strange.). But, as Veedrac said, no language support."}], "answers": [{"comments": [{"owner": {"reputation": 18225, "user_id": 152580, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/34b114b30616ba935061582133cceeb8?s=128&d=identicon&r=PG", "display_name": "Eloff", "link": "https://stackoverflow.com/users/152580/eloff"}, "edited": false, "score": 0, "creation_date": 1594317120, "post_id": 33922606, "comment_id": 111091409, "body": "Suppose you&#39;re passing a &amp;[u8] to this closure though, and the slice is invalidated between calls to the closure. Aren&#39;t we back at the original problem again? How do we give a lifetime to &amp;[u8] such that it&#39;s only valid for the duration of the function call, and can&#39;t have a reference saved by the closure?"}, {"owner": {"reputation": 18225, "user_id": 152580, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/34b114b30616ba935061582133cceeb8?s=128&d=identicon&r=PG", "display_name": "Eloff", "link": "https://stackoverflow.com/users/152580/eloff"}, "edited": false, "score": 0, "creation_date": 1594324431, "post_id": 33922606, "comment_id": 111094747, "body": "Nevermind, it seems to work: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=14a2eacbfeecd5e946ea074f5c5362d0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 2, "last_activity_date": 1485288355, "last_edit_date": 1485288355, "creation_date": 1448471734, "answer_id": 33922606, "question_id": 31969710, "link": "https://stackoverflow.com/questions/31969710/is-there-an-iterator-like-trait-which-returns-references-that-must-fall-out-of-s/33922606#33922606", "title": "Is there an Iterator-like trait which returns references that must fall out of scope before the next access?", "body": "<p>The standard iterators can't do this as far as I can see. The very definition of an iterator is that the outside has control over the elements while the inside has control over what produces the elements.</p>\n\n<p>From what I understand of what you are trying to do, I'd flip the concept around and instead of returning elements from an iterator to a surrounding environment, pass the environment to the iterator. That is, you create a struct with a constructor function that accepts a closure and implements the iterator trait. On each call to <code>next</code>, the passed-in closure is called with the next element and the return value of that closure or modifications thereof are returned as the current element. That way, <code>next</code> can handle the lifetime of whatever would otherwise be returned to the surrounding environment.</p>\n"}, {"comments": [{"owner": {"reputation": 18225, "user_id": 152580, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/34b114b30616ba935061582133cceeb8?s=128&d=identicon&r=PG", "display_name": "Eloff", "link": "https://stackoverflow.com/users/152580/eloff"}, "edited": false, "score": 0, "creation_date": 1594319386, "post_id": 34709560, "comment_id": 111092478, "body": "Isn&#39;t the return value valid as long as the iterator though? How do you get the return value to be valid only until the next call to next()?"}], "tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": false, "score": 1, "last_activity_date": 1485288304, "last_edit_date": 1485288304, "creation_date": 1452452496, "answer_id": 34709560, "question_id": 31969710, "link": "https://stackoverflow.com/questions/31969710/is-there-an-iterator-like-trait-which-returns-references-that-must-fall-out-of-s/34709560#34709560", "title": "Is there an Iterator-like trait which returns references that must fall out of scope before the next access?", "body": "<p>The <code>std::iter::Iterator</code> trait can not do this, but you can write a different trait:</p>\n\n<pre><code>trait StreamingIterator {\n    type Item;\n    fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;&amp;'a mut Self::Item&gt;;\n}\n</code></pre>\n\n<p>Note that the return value of <code>next</code> borrows the iterator itself, whereas in <code>Vec::iter</code> for example it only borrows the vector.</p>\n\n<p>The downside is that <code>&amp;mut</code> is hard-coded. Making it generic would require higher-kinded types (so that <code>StreamingIterator::Item</code> could itself be generic over a lifetime parameter).</p>\n\n<p>Alexis Beingessner gave a talk about this and more titled <em>Who Owns This Stream of Data?</em> at <a href=\"http://rustcamp.com/schedule.html\" rel=\"nofollow noreferrer\">RustCamp</a>.</p>\n\n<p>As to <code>for</code> loops, they\u2019re really tied to <code>std::iter::IntoIterator</code> which is tied to <code>std::iter::Iterator</code>. You\u2019d just have to implement both.</p>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1485288490, "creation_date": 1439393684, "last_edit_date": 1485288490, "question_id": 31969710, "link": "https://stackoverflow.com/questions/31969710/is-there-an-iterator-like-trait-which-returns-references-that-must-fall-out-of-s", "title": "Is there an Iterator-like trait which returns references that must fall out of scope before the next access?", "body": "<p>This would make it possible to safely iterate over the same element twice, or to hold some state for the global thing being iterated over in the item type.</p>\n\n<p>Something like:</p>\n\n<pre><code>trait IterShort&lt;Iter&gt;\n    where Self: Borrow&lt;Iter&gt;,\n{\n    type Item;\n\n    fn next(self) -&gt; Option&lt;Self::Item&gt;;\n}\n</code></pre>\n\n<p>then an implementation could look like:</p>\n\n<pre><code>impl&lt;'a, MyIter&gt; IterShort&lt;MyIter&gt; for &amp;'a mut MyIter {\n    type Item = &amp;'a mut MyItem;\n\n    fn next(self) -&gt; Option&lt;Self::Item&gt; {\n        // ...\n    }\n}\n</code></pre>\n\n<p>I realize I could write my own (I just did), but I'd like one that works with the <code>for</code>-loop notation. Is that possible?</p>\n"}, {"tags": ["callback", "gtk", "rust", "idioms", "rust-gnome"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439386959, "post_id": 31966497, "comment_id": 51841071, "body": "Because of auto-deref, I&#39;m pretty sure all instances of <code>(*val.borrow())</code> and <code>(*val.borrow_mut())</code> can be replaced with <code>val.borrow()</code> and <code>val.borrow_mut()</code>."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439387236, "post_id": 31966497, "comment_id": 51841282, "body": "&quot;Given that GTK may keep a reference to these closures around for an unspecified amount of time&quot; --- To me, this is the tip-off that you&#39;re going to need to use <code>Rc</code> if multiple closures need to access the same location in memory."}, {"owner": {"reputation": 148, "user_id": 5218603, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-3zKUkMU0gZk/AAAAAAAAAAI/AAAAAAAABfE/FuJclbD5A44/photo.jpg?sz=128", "display_name": "Geoff French", "link": "https://stackoverflow.com/users/5218603/geoff-french"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439388413, "post_id": 31966497, "comment_id": 51842205, "body": "Thanks for the tip; the <code>(*val.borrow())</code> occurrences have been replaced by <code>val.borrow()</code>. This makes things slightly prettier! :)"}], "answers": [{"comments": [{"owner": {"reputation": 148, "user_id": 5218603, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-3zKUkMU0gZk/AAAAAAAAAAI/AAAAAAAABfE/FuJclbD5A44/photo.jpg?sz=128", "display_name": "Geoff French", "link": "https://stackoverflow.com/users/5218603/geoff-french"}, "edited": false, "score": 0, "creation_date": 1439390393, "post_id": 31967816, "comment_id": 51843902, "body": "Thanks! That improves matters significantly! :)"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "reply_to_user": {"reputation": 148, "user_id": 5218603, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-3zKUkMU0gZk/AAAAAAAAAAI/AAAAAAAABfE/FuJclbD5A44/photo.jpg?sz=128", "display_name": "Geoff French", "link": "https://stackoverflow.com/users/5218603/geoff-french"}, "edited": false, "score": 0, "creation_date": 1439395173, "post_id": 31967816, "comment_id": 51847368, "body": "@GeoffFrench It looks like you&#39;re new to StackOverflow, but if you think I&#39;ve adequately answered your question then you should mark it as accepted. :-) Thanks!"}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 13, "last_activity_date": 1439397892, "last_edit_date": 1439397892, "creation_date": 1439388936, "answer_id": 31967816, "question_id": 31966497, "link": "https://stackoverflow.com/questions/31966497/howto-idiomatic-rust-for-callbacks-with-gtk-rust-gnome/31967816#31967816", "title": "HOWTO: Idiomatic Rust for callbacks with gtk (rust-gnome)", "body": "<p>Here's a working version that I came up with:</p>\n\n<pre><code>#![cfg_attr(not(feature = \"gtk_3_10\"), allow(unused_variables, unused_mut))]\n\nextern crate gtk;\nextern crate cairo;\n\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse gtk::traits::*;\nuse gtk::signal::Inhibit;\nuse cairo::{Context, RectangleInt};\n\n\nstruct RenderingAPITestWindow {\n    window: gtk::Window,\n    drawing_area: gtk::DrawingArea,\n    state: RefCell&lt;RenderingState&gt;,\n}\n\nstruct RenderingState {\n    width: i32,\n    height: i32,\n}\n\nimpl RenderingAPITestWindow {\n    fn new(width: i32, height: i32) -&gt; Rc&lt;RenderingAPITestWindow&gt; {\n        let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n        let drawing_area = gtk::DrawingArea::new().unwrap();\n        drawing_area.set_size_request(width, height);\n        window.set_title(\"Cairo API test\");\n        window.add(&amp;drawing_area);\n\n        let instance = Rc::new(RenderingAPITestWindow {\n            window: window,\n            drawing_area: drawing_area,\n            state: RefCell::new(RenderingState {\n                width: width,\n                height: height,\n            }),\n        });\n\n        {\n            let instance2 = instance.clone();\n            instance.drawing_area.connect_draw(move |widget, cairo_context| {\n                instance2.state.borrow().on_draw(cairo_context);\n                instance2.drawing_area.queue_draw();\n                Inhibit(true)\n            });\n        }\n        {\n            let instance2 = instance.clone();\n            instance.drawing_area.connect_size_allocate(move |widget, rect| {\n                instance2.state.borrow_mut().on_size_allocate(rect);\n            });\n        }\n        instance.window.show_all();\n        instance\n    }\n\n    fn exit_on_close(&amp;self) {\n        self.window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(true)\n        });\n    }\n}\n\nimpl RenderingState {\n    fn on_draw(&amp;self, cairo_ctx: Context) {\n        cairo_ctx.save();\n        cairo_ctx.move_to(50.0, (self.height as f64) * 0.5);\n        cairo_ctx.set_font_size(18.0);\n        cairo_ctx.show_text(\"The only curse they could afford to put on a tomb these days was 'Bugger Off'. --PTerry\");\n        cairo_ctx.restore();\n    }\n\n    fn on_size_allocate(&amp;mut self, rect: &amp;RectangleInt) {\n        self.width = rect.width as i32;\n        self.height = rect.height as i32;\n    }\n}\n\nfn main() {\n    gtk::init().unwrap_or_else(|_| panic!(\"Failed to initialize GTK.\"));\n    println!(\"Major: {}, Minor: {}\", gtk::get_major_version(), gtk::get_minor_version());\n\n    let window = RenderingAPITestWindow::new(800, 500);\n    window.exit_on_close();\n    gtk::main();\n}\n</code></pre>\n\n<p>I arrived at this through a few observations:</p>\n\n<ul>\n<li>The instance is being shared across multiple closures for an undetermined amount of time. <code>Rc</code> is the <em>right</em> answer to that scenario because it provides shared ownership. <code>Rc</code> is very ergonomic to use; it works like any other pointer type.</li>\n<li>The only part of <code>instance</code> that is actually mutated is your state. Since your instance is being shared, it cannot be borrowed mutably using the standard <code>&amp;mut</code> pointer. Therefore, you must use interior mutability. This is what <code>RefCell</code> provides. Note though, that you only need to use <code>RefCell</code> on the state you're mutating. So this still separates out the state into a separate struct, but it works nicely IMO.</li>\n<li>A possible modification to this code is to add <code>#[derive(Clone, Copy)]</code> to the definition of the <code>RenderingState</code> struct. Since it can be <code>Copy</code> (because all of its component types are <code>Copy</code>), you can use <a href=\"http://doc.rust-lang.org/stable/std/cell/struct.Cell.html\" rel=\"noreferrer\"><code>Cell</code></a> instead of <code>RefCell</code>.</li>\n</ul>\n"}], "owner": {"reputation": 148, "user_id": 5218603, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-3zKUkMU0gZk/AAAAAAAAAAI/AAAAAAAABfE/FuJclbD5A44/photo.jpg?sz=128", "display_name": "Geoff French", "link": "https://stackoverflow.com/users/5218603/geoff-french"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2036, "favorite_count": 1, "accepted_answer_id": 31967816, "answer_count": 1, "score": 12, "last_activity_date": 1439397892, "creation_date": 1439385727, "last_edit_date": 1439388328, "question_id": 31966497, "link": "https://stackoverflow.com/questions/31966497/howto-idiomatic-rust-for-callbacks-with-gtk-rust-gnome", "title": "HOWTO: Idiomatic Rust for callbacks with gtk (rust-gnome)", "body": "<p>I am currently learning Rust and looking to use it for developing a GUI\nbased application with GTK+. My problem relates to registering callbacks to\nrespond to GTK events/signals and mutating state within those callbacks.\nI have a working but inelegant solution, so I would like to ask if there\nis a cleaner, more idiomatic solution.</p>\n\n<p>I have implemented my code as a struct with method implementations, where\nthe struct maintains references to the GTK widgets along with other state\nthat it needs. It constructs a closure that is passed to the\n<code>GtkWidget::connect*</code> functions in order to receive events, draw to a\ncanvas, etc. This can cause problems with the borrow checker, as I will now\nexplain. I have some <em>working</em> but (IMHO) <em>non-ideal</em> code that I will\nshow.</p>\n\n<p><strong>Initial, non-working solution:</strong></p>\n\n<pre><code>#![cfg_attr(not(feature = \"gtk_3_10\"), allow(unused_variables, unused_mut))]\n\nextern crate gtk;\nextern crate cairo;\n\nuse gtk::traits::*;\nuse gtk::signal::Inhibit;\nuse cairo::{Context, RectangleInt};\n\n\nstruct RenderingAPITestWindow {\n    window: gtk::Window,\n    drawing_area: gtk::DrawingArea,\n    width: i32,\n    height: i32\n}\n\nimpl RenderingAPITestWindow {\n    fn new(width: i32, height: i32) -&gt; RenderingAPITestWindow {\n        let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n        let drawing_area = gtk::DrawingArea::new().unwrap();\n        drawing_area.set_size_request(width, height);\n        window.set_title(\"Cairo API test\");\n        window.add(&amp;drawing_area);\n\n        let instance = RenderingAPITestWindow{window: window,\n            drawing_area: drawing_area,\n            width: width,\n            height: height,\n        };\n\n        instance.drawing_area.connect_draw(|widget, cairo_context| {\n            instance.on_draw(cairo_context);\n            instance.drawing_area.queue_draw();\n            Inhibit(true)\n        });\n\n        instance.drawing_area.connect_size_allocate(|widget, rect| {\n            instance.on_size_allocate(rect);\n        });\n\n        instance.window.show_all();\n\n        return instance;\n    }\n\n    fn exit_on_close(&amp;self) {\n        self.window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(true)\n        });\n    }\n\n\n    fn on_draw(&amp;mut self, cairo_ctx: Context) {\n        cairo_ctx.save();\n        cairo_ctx.move_to(50.0, (self.height as f64) * 0.5);\n        cairo_ctx.set_font_size(18.0);\n        cairo_ctx.show_text(\"The only curse they could afford to put on a tomb these days was 'Bugger Off'. --PTerry\");\n        cairo_ctx.restore();\n    }\n\n    fn on_size_allocate(&amp;mut self, rect: &amp;RectangleInt) {\n        self.width = rect.width as i32;\n        self.height = rect.height as i32;\n    }\n}\n\n\nfn main() {\n    gtk::init().unwrap_or_else(|_| panic!(\"Failed to initialize GTK.\"));\n    println!(\"Major: {}, Minor: {}\", gtk::get_major_version(), gtk::get_minor_version());\n\n    let window = RenderingAPITestWindow::new(800, 500);\n    window.exit_on_close();\n    gtk::main();\n}\n</code></pre>\n\n<p>The above fails to compile as the closures with\n<code>RenderingAPITestWindow::new</code> that are created and passed to calls to\n<code>GtkWidget::connect*</code> methods attempt to borrow <code>instance</code>. The\ncompiler states that the closures may outlive the function in which\nthey are declared and that <code>instance</code> is owned by the outer function,\nhence the problem. Given that GTK may keep a reference to these closures\naround for an unspecified amount of time, we need an approach in which the\nlifetime can be determined at runtime, hence my next stab at the problem\nin which the <code>RenderingAPITestWindow</code> instance is wrapped in\n<code>Rc&lt;RefCell&lt;...&gt;&gt;</code>.</p>\n\n<p><strong>Wrapping the <code>RenderingAPITestWindow</code> instance compiles but dies at runtime:</strong></p>\n\n<pre><code>#![cfg_attr(not(feature = \"gtk_3_10\"), allow(unused_variables, unused_mut))]\n\nextern crate gtk;\nextern crate cairo;\n\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse gtk::traits::*;\nuse gtk::signal::Inhibit;\nuse cairo::{Context, RectangleInt};\n\n\nstruct RenderingAPITestWindow {\n    window: gtk::Window,\n    drawing_area: gtk::DrawingArea,\n    width: i32,\n    height: i32\n}\n\nimpl RenderingAPITestWindow {\n    fn new(width: i32, height: i32) -&gt; Rc&lt;RefCell&lt;RenderingAPITestWindow&gt;&gt; {\n        let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n        let drawing_area = gtk::DrawingArea::new().unwrap();\n        drawing_area.set_size_request(width, height);\n        window.set_title(\"Cairo API test\");\n        window.add(&amp;drawing_area);\n\n        let instance = RenderingAPITestWindow{window: window,\n            drawing_area: drawing_area,\n            width: width,\n            height: height,\n        };\n        let wrapped_instance = Rc::new(RefCell::new(instance));\n\n        let wrapped_instance_for_draw = wrapped_instance.clone();\n        wrapped_instance.borrow().drawing_area.connect_draw(move |widget, cairo_context| {\n            wrapped_instance_for_draw.borrow_mut().on_draw(cairo_context);\n\n            wrapped_instance_for_draw.borrow().drawing_area.queue_draw();\n            Inhibit(true)\n        });\n\n        let wrapped_instance_for_sizealloc = wrapped_instance.clone();\n        wrapped_instance.borrow().drawing_area.connect_size_allocate(move |widget, rect| {\n            wrapped_instance_for_sizealloc.borrow_mut().on_size_allocate(rect);\n        });\n\n        wrapped_instance.borrow().window.show_all();\n\n        return wrapped_instance;\n    }\n\n    fn exit_on_close(&amp;self) {\n        self.window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(true)\n        });\n    }\n\n\n    fn on_draw(&amp;mut self, cairo_ctx: Context) {\n        cairo_ctx.save();\n        cairo_ctx.move_to(50.0, (self.height as f64) * 0.5);\n        cairo_ctx.set_font_size(18.0);\n        cairo_ctx.show_text(\"The only curse they could afford to put on a tomb these days was 'Bugger Off'. --PTerry\");\n        cairo_ctx.restore();\n    }\n\n    fn on_size_allocate(&amp;mut self, rect: &amp;RectangleInt) {\n        self.width = rect.width as i32;\n        self.height = rect.height as i32;\n    }\n}\n\n\nfn main() {\n    gtk::init().unwrap_or_else(|_| panic!(\"Failed to initialize GTK.\"));\n    println!(\"Major: {}, Minor: {}\", gtk::get_major_version(), gtk::get_minor_version());\n\n    let wrapped_window = RenderingAPITestWindow::new(800, 500);\n    wrapped_window.borrow().exit_on_close();\n    gtk::main();\n}\n</code></pre>\n\n<p>The above solution compiles but its not particularly pretty:</p>\n\n<ul>\n<li><code>RenderingAPITestWindow::new</code> returns an\n<code>Rc&lt;RefCell&lt;RenderingAPITestWindow&gt;&gt;</code> rather than a\n<code>RenderingAPITestWindow</code></li>\n<li>Accessing fields and methods of <code>RenderingAPITestWindow</code> is complicated\nby the fact that the <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> must be opened up; it now requires\n<code>wrapped_instance.borrow().some_method(...)</code> rather than just\n<code>instance.some_method(...)</code></li>\n<li>Each closure requires it's own clone of <code>wrapped_instance</code>; attempting\nto use <code>wrapped_instance</code> would attempt to borrow an object -- the\nwrapper rather than the <code>RenderingAPITestWindow</code> this time -- that is\nowned by <code>RenderingAPITestWindow::new</code> as before</li>\n</ul>\n\n<p>While the above compiles, it dies at runtime with:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'RefCell&lt;T&gt; already borrowed', ../src/libcore/cell.rs:442\nAn unknown error occurred\n</code></pre>\n\n<p>This is due to the fact that the call to <code>window.show_all()</code> causes GTK to\ninitialise the widget hierarchy, resulting in the drawing area widget\nreceiving a <code>size-allocate</code> event. Accessing the window to call\n<code>show_all()</code> required that the <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> is opened (hence\n<code>wrapped_instance.borrow().window.show_all();</code>) and the instance\nborrowed. Before the borrow ends when <code>show_all()</code> returns, GTK invokes the\ndrawing area's <code>size-allocate</code> event handler, which causes the closure\nconnected to it (4 lines above) to be invoked. The closure attempts to\nborrow a mutable reference to the <code>RenderingAPITestWindow</code> instance\n(<code>wrapped_instance_for_sizealloc.borrow_mut().on_size_allocate(rect);</code>)\nin order to invoke the <code>on_size_allocate</code> method. This attempts to borrow a\nmutable reference, while the first immutable reference is still in scope.\nThis second borrow causes the run-time panic.</p>\n\n<p>The <em>working</em> but - IMHO - inelegant solution that I have managed to get\nworking so far is to split <code>RenderingAPITestWindow</code> into two structs, with\nthe mutable state that is to modified by the callbacks moved into a\nseparate struct.</p>\n\n<p><strong>Working but inelegant solution that splits the <code>RenderingAPITestWindow</code> struct:</strong></p>\n\n<pre><code>#![cfg_attr(not(feature = \"gtk_3_10\"), allow(unused_variables, unused_mut))]\n\nextern crate gtk;\nextern crate cairo;\n\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse gtk::traits::*;\nuse gtk::signal::Inhibit;\nuse cairo::{Context, RectangleInt};\n\n\nstruct RenderingAPITestWindowState {\n    width: i32,\n    height: i32\n}\n\nimpl RenderingAPITestWindowState {\n    fn new(width: i32, height: i32) -&gt; RenderingAPITestWindowState {\n        return RenderingAPITestWindowState{width: width, height: height};\n    }\n\n    fn on_draw(&amp;mut self, cairo_ctx: Context) {\n        cairo_ctx.save();\n        cairo_ctx.move_to(50.0, (self.height as f64) * 0.5);\n        cairo_ctx.set_font_size(18.0);\n        cairo_ctx.show_text(\"The only curse they could afford to put on a tomb these days was 'Bugger Off'. --PTerry\");\n        cairo_ctx.restore();\n    }\n\n    fn on_size_allocate(&amp;mut self, rect: &amp;RectangleInt) {\n        self.width = rect.width as i32;\n        self.height = rect.height as i32;\n    }\n}\n\n\nstruct RenderingAPITestWindow {\n    window: gtk::Window,\n    drawing_area: gtk::DrawingArea,\n    state: Rc&lt;RefCell&lt;RenderingAPITestWindowState&gt;&gt;\n}\n\nimpl RenderingAPITestWindow {\n    fn new(width: i32, height: i32) -&gt; Rc&lt;RefCell&lt;RenderingAPITestWindow&gt;&gt; {\n        let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n        let drawing_area = gtk::DrawingArea::new().unwrap();\n        drawing_area.set_size_request(width, height);\n        window.set_title(\"Cairo API test\");\n        window.add(&amp;drawing_area);\n\n        let wrapped_state = Rc::new(RefCell::new(RenderingAPITestWindowState::new(width, height)))\n        ;\n\n        let instance = RenderingAPITestWindow{window: window,\n            drawing_area: drawing_area,\n            state: wrapped_state.clone()\n        };\n        let wrapped_instance = Rc::new(RefCell::new(instance));\n\n        let wrapped_state_for_draw = wrapped_state.clone();\n        let wrapped_instance_for_draw = wrapped_instance.clone();\n        wrapped_instance.borrow().drawing_area.connect_draw(move |widget, cairo_context| {\n            wrapped_state_for_draw.borrow_mut().on_draw(cairo_context);\n\n            wrapped_instance_for_draw.borrow().drawing_area.queue_draw();\n            Inhibit(true)\n        });\n\n        let wrapped_state_for_sizealloc = wrapped_state.clone();\n        wrapped_instance.borrow().drawing_area.connect_size_allocate(move |widget, rect| {\n            wrapped_state_for_sizealloc.borrow_mut().on_size_allocate(rect);\n        });\n\n        wrapped_instance.borrow().window.show_all();\n\n        return wrapped_instance;\n    }\n\n    fn exit_on_close(&amp;self) {\n        self.window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(true)\n        });\n    }\n}\n\n\nfn main() {\n    gtk::init().unwrap_or_else(|_| panic!(\"Failed to initialize GTK.\"));\n    println!(\"Major: {}, Minor: {}\", gtk::get_major_version(), gtk::get_minor_version());\n\n    let wrapped_window = RenderingAPITestWindow::new(800, 500);\n    wrapped_window.borrow().exit_on_close();\n    gtk::main();\n}\n</code></pre>\n\n<p>While the above code works as required, I would like to find a better way\nfor going forward; I would like to ask if anyone knows a better approach as\nthe above complicates the programming process a fair bit, with the need to\nuse <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> and split structs to satisfy Rust's borrowing rules.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 25272, "user_id": 1695163, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/85ffb58dc3ed0067128804ef843245a6?s=128&d=identicon&r=PG", "display_name": "ddavison", "link": "https://stackoverflow.com/users/1695163/ddavison"}, "is_accepted": false, "score": 1, "last_activity_date": 1439384306, "last_edit_date": 1439384306, "creation_date": 1439384217, "answer_id": 31965922, "question_id": 31965832, "link": "https://stackoverflow.com/questions/31965832/how-to-fix-unresolved-imports/31965922#31965922", "title": "How to fix unresolved imports?", "body": "<p>The <code>net</code> package is actually an adjacent package to <code>io</code></p>\n\n<p>You need:</p>\n\n<pre><code>std::net::SocketAddr;\n</code></pre>\n\n<p>(see <a href=\"https://doc.rust-lang.org/std/net/enum.SocketAddr.html\" rel=\"nofollow\">the api</a>)</p>\n\n<p>instead of </p>\n\n<pre><code>std::io::net ...\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1010, "user_id": 596201, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/b9303df6702760b32b7c10fb1340cf22?s=128&d=identicon&r=PG", "display_name": "Nick W.", "link": "https://stackoverflow.com/users/596201/nick-w"}, "edited": false, "score": 2, "creation_date": 1439385470, "post_id": 31965933, "comment_id": 51839874, "body": "Thanks for clarifying, hopefully this saves someone else a silly misunderstanding!"}, {"owner": {"reputation": 5817, "user_id": 4742108, "user_type": "registered", "accept_rate": 49, "profile_image": "https://i.stack.imgur.com/GvE0m.jpg?s=128&g=1", "display_name": "Velkan", "link": "https://stackoverflow.com/users/4742108/velkan"}, "edited": false, "score": 0, "creation_date": 1493586514, "post_id": 31965933, "comment_id": 74466647, "body": "Is there an automatic tool like <code>goimports</code> for golang?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1439384240, "creation_date": 1439384240, "answer_id": 31965933, "question_id": 31965832, "link": "https://stackoverflow.com/questions/31965832/how-to-fix-unresolved-imports/31965933#31965933", "title": "How to fix unresolved imports?", "body": "<p>You need to <a href=\"http://doc.rust-lang.org/std/\" rel=\"nofollow\">read the docs</a> and figure out where that type is defined.</p>\n\n<ol>\n<li>Visit the <a href=\"http://doc.rust-lang.org/std/\" rel=\"nofollow\">documentation for the standard library</a></li>\n<li>Enter <code>SocketAddr</code> in the search box</li>\n<li>Click on the <a href=\"http://doc.rust-lang.org/std/net/enum.SocketAddr.html\" rel=\"nofollow\">correct result</a></li>\n<li>Note that <code>SocketAddr</code> is under <code>std::net::SocketAddr</code>.</li>\n</ol>\n"}], "owner": {"reputation": 1010, "user_id": 596201, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/b9303df6702760b32b7c10fb1340cf22?s=128&d=identicon&r=PG", "display_name": "Nick W.", "link": "https://stackoverflow.com/users/596201/nick-w"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 778, "favorite_count": 0, "accepted_answer_id": 31965933, "answer_count": 2, "score": 1, "last_activity_date": 1439384306, "creation_date": 1439384011, "last_edit_date": 1439384100, "question_id": 31965832, "link": "https://stackoverflow.com/questions/31965832/how-to-fix-unresolved-imports", "title": "How to fix unresolved imports?", "body": "<p>I realise this is a total newbie question, but I can't seem to find an answer in the docs (poor google-fu I guess).  It's my first time trying Rust and I can't figure out how to fix an unresolved import?</p>\n\n<p>Currently I'm doing this in the code:</p>\n\n<p><code>use std::io::net::ip::SocketAddr;</code></p>\n\n<p>And getting this error:</p>\n\n<pre><code>unresolved import `std::io::net::ip::SocketAddr`. Could not find `net` in `std::io`\n</code></pre>\n\n<p>What am I missing?  Do I need to add a dependency in Cargo.toml or something?</p>\n"}, {"tags": ["rust", "ownership-semantics"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1439385706, "last_edit_date": 1439385706, "creation_date": 1439348540, "answer_id": 31955329, "question_id": 31955165, "link": "https://stackoverflow.com/questions/31955165/when-is-the-storage-reclaimed-for-a-resource-that-is-no-longer-owned/31955329#31955329", "title": "When is the storage reclaimed for a resource that is no longer owned?", "body": "<blockquote>\n  <p>when does [an unowned resource] get reclaimed?</p>\n</blockquote>\n\n<p>In Rust terms, an item is <em>dropped</em> when it goes out of scope, which often (but not always) corresponds to the end of a block. When it is dropped, any resources that are part of the item are also released.</p>\n\n<p><em>Resources</em> can mean memory, as in the vector example, but it can also correspond to other things like a file handle or a lock. This is commonly referred to as Resource Acquisition Is Initialization (RAII).</p>\n\n<blockquote>\n  <p>convince a programmer that this resource is indeed reclaimed?</p>\n</blockquote>\n\n<p>You can never convince someone who truly doesn't want to believe ^_^. However, you can implement <a href=\"http://doc.rust-lang.org/std/ops/trait.Drop.html\" rel=\"nofollow noreferrer\"><code>Drop</code></a> yourself to see when an item is being dropped:</p>\n\n<pre><code>struct NoisyDrop(u8);\n\nimpl Drop for NoisyDrop {\n    fn drop(&amp;mut self) {\n        println!(\"Number {} being dropped\", self.0);\n    }\n}\n\nfn main() {\n    println!(\"step 1\");\n    let mut nd = NoisyDrop(1);\n    println!(\"step 2\");\n    nd = NoisyDrop(2);\n    println!(\"step 3\");\n}\n</code></pre>\n\n<p>This will have the output</p>\n\n<pre><code>step 1\nstep 2\nNumber 1 being dropped\nstep 3\nNumber 2 being dropped\n</code></pre>\n\n<p>You can see that the first variable is dropped when its binding is replaced as there's no longer any way to get to the <code>NoisyDrop(1)</code> value. The second variable is dropped when it goes out of scope due to the method ending.</p>\n\n<blockquote>\n  <p>ownership semantics and lifetimes</p>\n</blockquote>\n\n<p>Consider this example:</p>\n\n<pre><code>fn main() {\n    let mut v = vec![1];\n    v = vec![2];\n}\n</code></pre>\n\n<p>Conceptually, it could be written as</p>\n\n<pre><code>fn main() {\n    {\n        let v = vec![1];\n    }\n    {\n        v = vec![2];\n    }\n}\n</code></pre>\n\n<p>And this example</p>\n\n<pre><code>fn main() {\n    let v1 = vec![1];\n    let v2 = vec![2];\n}\n</code></pre>\n\n<p>Could be rewritten as</p>\n\n<pre><code>fn main() {\n    {\n        let v1 = vec![1];\n        {\n            let v2 = vec![2];\n        }\n    }\n}\n</code></pre>\n\n<p>These rewritings show the <em>lifetime</em> of each variable. Whenever you call a method with a <em>generic lifetime parameter</em>, the lifetime of the block will be the concrete value that gets substituted for the <code>'a</code> generic.</p>\n"}], "owner": {"reputation": 581, "user_id": 764197, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fe697fb354661dbbf107df34fd6fecd?s=128&d=identicon&r=PG", "display_name": "Anthony Maida", "link": "https://stackoverflow.com/users/764197/anthony-maida"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "accepted_answer_id": 31955329, "answer_count": 1, "score": 6, "last_activity_date": 1439385706, "creation_date": 1439347157, "last_edit_date": 1439348958, "question_id": 31955165, "link": "https://stackoverflow.com/questions/31955165/when-is-the-storage-reclaimed-for-a-resource-that-is-no-longer-owned", "title": "When is the storage reclaimed for a resource that is no longer owned?", "body": "<p>There is a vector resource that is allocated in line 2 of the program below.\nWhen the program ends, the vector resource is not owned.  If a resource is not owned at all, when does it get reclaimed? Is there an explanation using the terminology of Rust ownership semantics and lifetimes that could convince a programmer that this resource is indeed reclaimed?</p>\n\n<pre><code>fn main() {\n    let mut v = vec![1,2];\n    v = vec![3, 4];\n}\n</code></pre>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 5378, "user_id": 817978, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NX1dl.jpg?s=128&g=1", "display_name": "TorelTwiddler", "link": "https://stackoverflow.com/users/817978/toreltwiddler"}, "edited": false, "score": 0, "creation_date": 1439336995, "post_id": 31953224, "comment_id": 51816848, "body": "Thanks, this worked! Still not used to traits. Here is <a href=\"http://doc.rust-lang.org/core/cmp/trait.PartialEq.html\" rel=\"nofollow noreferrer\">PartialEq</a> if someone wants to look at it."}], "tags": [], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "is_accepted": true, "score": 3, "last_activity_date": 1439337639, "last_edit_date": 1439337639, "creation_date": 1439332938, "answer_id": 31953224, "question_id": 31952478, "link": "https://stackoverflow.com/questions/31952478/how-do-you-test-functions-that-return-result/31953224#31953224", "title": "How do you test functions that return Result?", "body": "<p>How about </p>\n\n<pre><code>assert_eq!(Ok(()), result_function());\n</code></pre>\n\n<p>this needs </p>\n\n<pre><code>#[derive(PartialEq,Debug)]\nenum MyError{Error1, Error2}\n</code></pre>\n\n<p>to work and will tell you </p>\n\n<pre><code>`(left == right)` (left: `Ok(())`, right: `Err(Error1)`)'\n</code></pre>\n\n<p>when testing when your <code>result_function</code> returns an <code>Error1</code> when the test says it should return <code>Ok(())</code>.</p>\n"}], "owner": {"reputation": 5378, "user_id": 817978, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NX1dl.jpg?s=128&g=1", "display_name": "TorelTwiddler", "link": "https://stackoverflow.com/users/817978/toreltwiddler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 31953224, "answer_count": 1, "score": 2, "last_activity_date": 1439337639, "creation_date": 1439329413, "question_id": 31952478, "link": "https://stackoverflow.com/questions/31952478/how-do-you-test-functions-that-return-result", "title": "How do you test functions that return Result?", "body": "<p>I have a function that returns <code>Result&lt;(), MyError&gt;</code> where: </p>\n\n<pre><code>enum MyError {Error1, Error2}\n</code></pre>\n\n<p>I am currently doing the following:</p>\n\n<pre><code>#[test]\nfn test_result_function() {\n    assert_eq!((), result_function().unwrap());\n}\n</code></pre>\n\n<p>This works but seems awkward. At first I was going to do:</p>\n\n<pre><code>assert!(result_function().is_ok());\n</code></pre>\n\n<p>but when it wasn't ok, the test result didn't give the error anywhere. How should I go about testing this function?</p>\n"}, {"tags": ["pointers", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 5, "last_activity_date": 1518712195, "last_edit_date": 1518712195, "creation_date": 1439324584, "answer_id": 31951278, "question_id": 31949579, "link": "https://stackoverflow.com/questions/31949579/understanding-and-relationship-between-box-ref-and/31951278#31951278", "title": "Understanding and relationship between Box, ref, &amp; and *", "body": "<p>References and raw pointers are the same thing at the implementation level. The difference from the programmer perspective is that references are safe (in Rust terms), but raw pointers are not. </p>\n\n<p>The borrow checker guarantees that references are always valid (lifetime management), that you can have only one mutable reference at time, etc.</p>\n\n<p>These type of constraint can be too strict for many use cases, so raw pointers (which do not have any constraints, like in C/C++) are useful to implement low-level data structures, and in general low-level stuff. However, you can only dereference raw pointers or do operations on them inside an <code>unsafe</code> block.</p>\n\n<p>The containers in the standard library are implemented using raw pointers, <code>Box</code> and <code>Rc</code> too.</p>\n\n<p><code>Box</code> and <code>Rc</code> are what smart pointers are in C++, that is wrappers around raw pointers.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 11, "last_activity_date": 1439327038, "creation_date": 1439327038, "answer_id": 31951898, "question_id": 31949579, "link": "https://stackoverflow.com/questions/31949579/understanding-and-relationship-between-box-ref-and/31951898#31951898", "title": "Understanding and relationship between Box, ref, &amp; and *", "body": "<p><code>Box</code> is logically a newtype around a raw pointer (<code>*const T</code>). However, it allocates and deallocates its data during construction and destruction, so does not have to borrow data from some other source.</p>\n\n<p>The same thing is true of other pointer types, like <code>Rc</code> - a reference counted pointer. These are structs containing private raw pointers which they allocate into and deallocate from.</p>\n\n<p>A raw pointer has exactly the same layout as a a normal pointer, so are not compatible with C pointers in several cases. Importantly, <code>*const str</code> and <code>*const [T]</code> are <em>fat pointers</em>, which means they contain extra information about the value's length.</p>\n\n<p>However, raw pointers makes absolutely no guarantees as to their validity. For example, I can safely do</p>\n\n<pre><code>123 as *const String\n</code></pre>\n\n<p>This pointer is invalid, since the memory location <code>123</code> does not point to a valid <code>String</code>. Thus, when dereferencing one, an <code>unsafe</code> block is required.</p>\n\n<p>Further, whereas borrows are required to respect certain laws - namely that you cannot have multiple borrows if one is mutable - raw pointers do not have to respect this. <a href=\"http://llvm.org/docs/LangRef.html#pointer-aliasing-rules\">There are other, weaker, laws that must be obeyed,</a> but you're less likely to run afoul of these.</p>\n\n<p>There is no logical difference between <code>*mut</code> and <code>*const</code>, although they may need to be casted to the other to do certain operations - the difference is documentative.</p>\n"}, {"comments": [{"owner": {"reputation": 1342, "user_id": 3033123, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bfb390ac1abb471ac1090039109d14a0?s=128&d=identicon&r=PG&f=1", "display_name": "zrneely", "link": "https://stackoverflow.com/users/3033123/zrneely"}, "edited": false, "score": 3, "creation_date": 1439388506, "post_id": 31953048, "comment_id": 51842283, "body": "Awesome answer, thanks. I was able to do a bit more research on my own, and I found out that the way to overload the dereference operation is to implement the <code>Deref</code> trait. (Leaving this here for anyone else who reads the answer and is curious)."}, {"owner": {"reputation": 363, "user_id": 4334680, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/9b476e9ef1dd19513621f371386d5cf9?s=128&d=identicon&r=PG&f=1", "display_name": "Alex M.", "link": "https://stackoverflow.com/users/4334680/alex-m"}, "edited": false, "score": 2, "creation_date": 1543772174, "post_id": 31953048, "comment_id": 94029026, "body": "Concerning the last paragraphs, where you claim that in some cases <code>ref</code> is indispensable, I guess that the line <code>Some(ref v) =&gt; ...</code> should be compared to the line <code>Some(&amp; v) =&gt; ...</code>, not to <code>Some(v) =&gt; ...</code> (as you do). In other terms, is <code>&amp;</code> <i>always</i> a synonym of <code>ref</code> (thus allowing <code>ref</code> to be dropped), or are there different use cases for them?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 363, "user_id": 4334680, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/9b476e9ef1dd19513621f371386d5cf9?s=128&d=identicon&r=PG&f=1", "display_name": "Alex M.", "link": "https://stackoverflow.com/users/4334680/alex-m"}, "edited": false, "score": 2, "creation_date": 1543865339, "post_id": 31953048, "comment_id": 94063515, "body": "@AlexM., no, the comparison is correct. <code>Some(&amp;v)</code> is completely different from <code>Some(v)</code> or <code>Some(ref v)</code> - it would only work for <code>Option&lt;&amp;T&gt;</code>, and it would attempt to dereference the reference kept in <code>Some</code> and assign <code>v</code> the dereferenced value. In other words, <code>Some(&amp;v)</code> is direct opposite of <code>Some(ref v)</code>."}, {"owner": {"reputation": 594, "user_id": 664179, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9fba17c3c51f978433142182ff3e5a?s=128&d=identicon&r=PG", "display_name": "Keeper Hood", "link": "https://stackoverflow.com/users/664179/keeper-hood"}, "edited": false, "score": 0, "creation_date": 1562327464, "post_id": 31953048, "comment_id": 100349725, "body": "@VladimirMatveev Why would it attempt to dereference and assign to <code>v</code>? So that it&#39;s actual value can be accessed in the Some block?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 594, "user_id": 664179, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9fba17c3c51f978433142182ff3e5a?s=128&d=identicon&r=PG", "display_name": "Keeper Hood", "link": "https://stackoverflow.com/users/664179/keeper-hood"}, "edited": false, "score": 0, "creation_date": 1562390133, "post_id": 31953048, "comment_id": 100366772, "body": "@KeeperHood I&#39;m not sure I understand the question. The <code>Some(&amp;v)</code> syntax is intended to do precisely this - dereference the reference inside the option being matched on, and assign the dereferenced value to <code>v</code>, so it could be used in the respective match arm. That&#39;s the sole purpose of this syntax."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 125, "last_activity_date": 1529970509, "last_edit_date": 1529970509, "creation_date": 1439331954, "answer_id": 31953048, "question_id": 31949579, "link": "https://stackoverflow.com/questions/31949579/understanding-and-relationship-between-box-ref-and/31953048#31953048", "title": "Understanding and relationship between Box, ref, &amp; and *", "body": "<p>First of all, all of the items you listed are really different things, even if they are related to pointers. <code>Box</code> is a library-defined smart pointer type; <code>ref</code> is a syntax for pattern matching; <code>&amp;</code> is a reference operator, doubling as a sigil in reference types; <code>*</code> is a dereference operator, doubling as a sigil in raw pointer types. See below for more explanation.</p>\n\n<p>There are four basic pointer types in Rust which can be divided in two groups - references and raw pointers:</p>\n\n<pre><code>&amp;T        - immutable (shared) reference\n&amp;mut T    - mutable (exclusive) reference\n\n*const T  - immutable raw pointer\n*mut T    - mutable raw pointer\n</code></pre>\n\n<p>The difference between the last two is very thin, because either can be cast to another without any restrictions, so <code>const</code>/<code>mut</code> distinction there serves mostly as a lint. Raw pointers can be created freely to anything, and they also can be created out of thin air from integers, for example.</p>\n\n<p>Naturally, this is not so for references - reference types and their interaction define one of the key feature of Rust: borrowing. References have a lot of restrictions on how and when they could be created, how they could be used and how they interact with each other. In return, they can be used without <code>unsafe</code> blocks. What borrowing is exactly and how it works is out of scope of this answer, though.</p>\n\n<p>Both references and raw pointers can be created using <code>&amp;</code> operator:</p>\n\n<pre><code>let x: u32 = 12;\n\nlet ref1: &amp;u32 = &amp;x;\nlet raw1: *const u32 = &amp;x;\n\nlet ref2: &amp;mut u32 = &amp;mut x;\nlet raw2: *mut u32 = &amp;mut x;\n</code></pre>\n\n<p>Both references and raw pointers can be dereferenced using <code>*</code> operator, though for raw pointers it requires an <code>unsafe</code> block:</p>\n\n<pre><code>*ref1; *ref2;\n\nunsafe { *raw1; *raw2; }\n</code></pre>\n\n<p>The dereference operator is often omitted, because another operator, the \"dot\" operator (i.e., <code>.</code>), automatically references or dereferences its left argument. So, for example, if we have these definitions:</p>\n\n<pre><code>struct X { n: u32 };\n\nimpl X {\n    fn method(&amp;self) -&gt; u32 { self.n }\n}\n</code></pre>\n\n<p>then, despite that <code>method()</code> takes <code>self</code> by reference, <code>self.n</code> automatically dereferences it, so you won't have to type <code>(*self).n</code>. Similar thing happens when <code>method()</code> is called:</p>\n\n<pre><code>let x = X { n: 12 };\nlet n = x.method();\n</code></pre>\n\n<p>Here, the compiler automatically references <code>x</code> in <code>x.method()</code>, so you won't have to write <code>(&amp;x).method()</code>.</p>\n\n<p>The next to last piece of code also demonstrated the special <code>&amp;self</code> syntax. It means just <code>self: &amp;Self</code>, or, more specifically, <code>self: &amp;X</code> in this example. <code>&amp;mut self</code>, <code>*const self</code>, <code>*mut self</code> also work.</p>\n\n<p>So, references are the main pointer kind in Rust and should be used almost always. Raw pointers, which don't have restrictions of references, should be used in low-level code implementing high-level abstractions (collections, smart pointers, etc.) and in FFI (interacting with C libraries).</p>\n\n<p>Rust also has <a href=\"http://doc.rust-lang.org/book/unsized-types.html\" rel=\"noreferrer\">dynamically-sized (or unsized) types</a>. These types do not have a definite statically-known size and therefore can only be used through a pointer/reference. However, only a pointer is not enough - additional information is needed, for example, length for slices or a pointer to a virtual methods table for trait objects. This information is \"embedded\" in pointers to unsized types, making these pointers \"fat\".</p>\n\n<p>A fat pointer is basically a structure which contains the actual pointer to the piece of data and some additional information (length for slices, pointer to vtable for trait objects). What's important here is that Rust handles these details about pointer contents absolutely transparently for the user - if you pass <code>&amp;[u32]</code> or <code>*mut SomeTrait</code> values around, corresponding internal information will be automatically passed along.</p>\n\n<p><code>Box&lt;T&gt;</code> is one of the smart pointers in the Rust standard library. It provides a way to allocate enough memory on the heap to store a value of the corresponding type, and then it serves as a handle, a pointer to that memory. <code>Box&lt;T&gt;</code> owns the data it points to; when it is dropped, the corresponding piece of memory on the heap is deallocated.</p>\n\n<p>A very useful way to think of boxes is to consider them as regular values, but with a fixed size. That is, <code>Box&lt;T&gt;</code> is equivalent to just <code>T</code>, except it always takes a number of bytes which correspond to the pointer size of your machine. We say that (owned) boxes provide <em>value semantics</em>. Internally, they are implemented using raw pointers, like almost any other high-level abstraction.</p>\n\n<p><code>Box</code>es (in fact, this is true for almost all of the other smart pointers, like <code>Rc</code>) can also be borrowed: you can get a <code>&amp;T</code> out of <code>Box&lt;T&gt;</code>. This can happen automatically with the <code>.</code> operator or you can do it explicitly by dereferencing and referencing it again:</p>\n\n<pre><code>let x: Box&lt;u32&gt; = Box::new(12);\nlet y: &amp;u32 = &amp;*x;\n</code></pre>\n\n<p>In this regard, <code>Box</code>es are similar to built-in pointers - you can use dereference operator to reach their contents. This is possible because the dereference operator in Rust is overloadable, and it is overloaded for most (if not all) of the smart pointer types. This allows easy borrowing of these pointers contents.</p>\n\n<p>And, finally, <code>ref</code> is just a syntax in patterns to obtain a variable of the reference type instead of a value. For example:</p>\n\n<pre><code>let x: u32 = 12;\n\nlet y = x;           // y: u32, a copy of x\nlet ref z = x;       // z: &amp;u32, points to x\nlet ref mut zz = x;  // zz: &amp;mut u32, points to x\n</code></pre>\n\n<p>While the above example can be rewritten with reference operators:</p>\n\n<pre><code>let z = &amp;x;\nlet zz = &amp;mut x;\n</code></pre>\n\n<p>(which would also make it more idiomatic), there are cases when <code>ref</code>s are indispensable, for example, when taking references into enum variants:</p>\n\n<pre><code>let x: Option&lt;Vec&lt;u32&gt;&gt; = ...;\n\nmatch x {\n    Some(ref v) =&gt; ...\n    None =&gt; ...\n}\n</code></pre>\n\n<p>In the above example, <code>x</code> is only borrowed inside the whole <code>match</code> statement, which allows using <code>x</code> after this <code>match</code>. If we write it as such:</p>\n\n<pre><code>match x {\n    Some(v) =&gt; ...\n    None =&gt; ...\n}\n</code></pre>\n\n<p>then <code>x</code> will be consumed by this <code>match</code> and will become unusable after it.</p>\n"}], "owner": {"reputation": 1342, "user_id": 3033123, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bfb390ac1abb471ac1090039109d14a0?s=128&d=identicon&r=PG&f=1", "display_name": "zrneely", "link": "https://stackoverflow.com/users/3033123/zrneely"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13606, "favorite_count": 41, "accepted_answer_id": 31953048, "answer_count": 3, "score": 69, "last_activity_date": 1529970509, "creation_date": 1439318540, "last_edit_date": 1518712466, "question_id": 31949579, "link": "https://stackoverflow.com/questions/31949579/understanding-and-relationship-between-box-ref-and", "title": "Understanding and relationship between Box, ref, &amp; and *", "body": "<p>I'm a bit confused about how pointers work in Rust. There's <code>ref</code>, <code>Box</code>, <code>&amp;</code>, <code>*</code>, and I'm not sure how they work together.</p>\n\n<p>Here's how I understand it currently:</p>\n\n<ol>\n<li><code>Box</code> isn't really a pointer - it's a way to allocate data on the heap, and pass around unsized types (traits especially) in function arguments.</li>\n<li><p><code>ref</code> is used in pattern matching to borrow something that you match on, instead of taking it. For example,</p>\n\n<pre><code>let thing: Option&lt;i32&gt; = Some(4);\nmatch thing {\n    None =&gt; println!(\"none!\"),\n    Some(ref x) =&gt; println!(\"{}\", x), // x is a borrowed thing\n}\nprintln!(\"{}\", x + 1); // wouldn't work without the ref since the block would have taken ownership of the data\n</code></pre></li>\n<li><p><code>&amp;</code> is used to make a borrow (borrowed pointer). If I have a function <code>fn foo(&amp;self)</code> then I'm taking a reference to myself that will expire after the function terminates, leaving the caller's data alone. I can also pass data that I want to retain ownership of by doing <code>bar(&amp;mydata)</code>.</p></li>\n<li><code>*</code> is used to make a raw pointer: for example, <code>let y: i32 = 4; let x = &amp;y as *const i32</code>. I understand pointers in C/C++ but I'm not sure how this works with Rust's type system, and how they can be safely used. I'm also not sure what the use cases are for this type of pointer. Additionally, the <code>*</code> symbol can be used to dereference things (what things, and why?).</li>\n</ol>\n\n<p>Could someone explain the 4th type of pointer to me, and verify that my understanding of the other types is correct? I'd also appreciate anyone pointing out any common use cases that I haven't mentioned.</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 3, "creation_date": 1439325563, "post_id": 31941401, "comment_id": 51812379, "body": "First of all, make sure you&#39;ve read <a href=\"http://blog.burntsushi.net/rust-error-handling\" rel=\"nofollow noreferrer\">Error Handling in Rust</a>."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439360332, "post_id": 31941401, "comment_id": 51823210, "body": "That article is simply brilliant and should go straight into the official book!"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1439298655, "creation_date": 1439298655, "answer_id": 31942765, "question_id": 31941401, "link": "https://stackoverflow.com/questions/31941401/am-i-forced-to-create-my-own-error-type/31942765#31942765", "title": "Am I forced to create my own Error type?", "body": "<p>Usually yes, using your own error type is the way to go. There are even several crates (of which I was able to find only <a href=\"https://crates.io/crates/wrapped_enum\">this</a> one now) which help you to remove the boilerplate. This approach should also be used when you're writing a library, as opposed to an application.</p>\n\n<p>There is an option, however, of using <a href=\"http://doc.rust-lang.org/std/error/trait.Error.html\"><code>Box&lt;Error&gt;</code></a> trait object as your error type. Lots of error types in Rust and in third-party libraries implement this trait; therefore, using <code>Result&lt;..., Box&lt;Error&gt;&gt;</code> as a return type should work almost always.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 470, "favorite_count": 0, "accepted_answer_id": 31942765, "answer_count": 1, "score": 3, "last_activity_date": 1439298655, "creation_date": 1439294911, "question_id": 31941401, "link": "https://stackoverflow.com/questions/31941401/am-i-forced-to-create-my-own-error-type", "title": "Am I forced to create my own Error type?", "body": "<p>I want to write a <code>get_members</code> function that returns members from a GitHub team.</p>\n\n<pre><code>pub fn get_members(group_id: &amp;str) -&gt; Result&lt;Vec&lt;User&gt;, Error&gt; {\n    let client = Client::new();\n    let query = format!(\"https://api.github.com/teams/{}/members?access_token={}\",\n                    group_id,\n                    config::get_env(config::ENV_TOKEN));\n\n    println!(\"{}\", query);\n\n    let mut res = try!(client\n                    .get(&amp;query)\n                    .header(UserAgent(\"my/app\".to_owned()))\n                    .send());\n\n    let mut body = String::new();\n    try!(res.read_to_string(&amp;mut body));\n    try!(json::decode(&amp;body));\n}\n</code></pre>\n\n<p>There are two different types of errors into play. One is <code>hyper::error::Error</code> and the other is <code>rustc_serialize::json::DecoderError</code>.</p>\n\n<p>I thought I could just use implement <code>From&lt;::hyper::error::Error&gt; for Error</code> and <code>From&lt;rustc_serialize::json::DecoderError&gt;</code>. But since neither <code>io::Error</code> nor one of the other two errors is in my crate I'm not allowed to follow that approach.</p>\n\n<p>I wonder what's the way to go here. Do I need to come up with my own <code>AppError</code> Type and then implement the <code>From&lt;&gt;</code> trait for that? Is that the way to go?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 51006, "user_id": 742, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c690634d340d85fb40ac03668259ff1c?s=128&d=identicon&r=PG", "display_name": "Lorin Hochstein", "link": "https://stackoverflow.com/users/742/lorin-hochstein"}, "is_accepted": true, "score": 3, "last_activity_date": 1439276717, "creation_date": 1439276717, "answer_id": 31935277, "question_id": 31934844, "link": "https://stackoverflow.com/questions/31934844/why-does-this-example-iron-code-seem-to-block/31935277#31935277", "title": "Why does this example iron code seem to block?", "body": "<p>The answer occurred to me after I wrote the question.</p>\n\n<p>The http function returns an <code>HttpResult&lt;Listening&gt;</code> The Listening type has a destructor that calls join on a thread, which blocks.</p>\n\n<p>In the first case, the returned object's lifetime is complete after the unwrap call, so the destructor gets called which joins the thread. If I assign it to a variable, the destructor doesn't get invoked until after unwrap is called.</p>\n"}], "owner": {"reputation": 51006, "user_id": 742, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c690634d340d85fb40ac03668259ff1c?s=128&d=identicon&r=PG", "display_name": "Lorin Hochstein", "link": "https://stackoverflow.com/users/742/lorin-hochstein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "accepted_answer_id": 31935277, "answer_count": 1, "score": 3, "last_activity_date": 1439276717, "creation_date": 1439275164, "last_edit_date": 1439275501, "question_id": 31934844, "link": "https://stackoverflow.com/questions/31934844/why-does-this-example-iron-code-seem-to-block", "title": "Why does this example iron code seem to block?", "body": "<p>I'm running this hello world example code from the <a href=\"http://ironframework.io\" rel=\"nofollow\">http://ironframework.io</a> homepage:</p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\n\nfn main() {\n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"Hello World!\")))\n    }\n\n    Iron::new(hello_world).http(\"localhost:3000\").unwrap();\n    println!(\"On 3000\");\n}\n</code></pre>\n\n<p>I expected to see \"On 3000\" appear on standard out, but it never appears. My guess is that the main thread is being blocked before it executes the println. Why is that happening?</p>\n\n<p>If I use a temporary and call unwrap afterwards, I get the expected output:</p>\n\n<pre><code>fn main() {\n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"Hello World!\")))\n    }\n\n    let result = Iron::new(hello_world).http(\"localhost:3000\");\n    println!(\"On 3000\");\n    result.unwrap();\n}\n</code></pre>\n\n<p>Why is it that the behavior changes when unwrap is called on the return value?</p>\n\n<p>I'm running rust 1.1.0 and iron 0.1.20.</p>\n"}, {"tags": ["makefile", "android-ndk", "linker", "rust", "cross-compiling"], "answers": [{"comments": [{"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1439298426, "post_id": 31933657, "comment_id": 51795184, "body": "Does not help, see edit above for adjustments. Same error occurs."}], "tags": [], "owner": {"reputation": 8554, "user_id": 632035, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8ed69ad748c440a055502c1b213757e5?s=128&d=identicon&r=PG", "display_name": "Dan Albert", "link": "https://stackoverflow.com/users/632035/dan-albert"}, "is_accepted": false, "score": 1, "last_activity_date": 1439269738, "creation_date": 1439269738, "answer_id": 31933657, "question_id": 31932902, "link": "https://stackoverflow.com/questions/31932902/undefined-reference-to-unwind-getip/31933657#31933657", "title": "Undefined reference to &#39;_Unwind_GetIP&#39;", "body": "<p>LOCAL_LDLIBS is meaningless for a static library (static libraries don't get linked). You need to add those libraries whenever you use that library in a real binary (like a shared library or executable).</p>\n"}, {"comments": [{"owner": {"reputation": 4596, "user_id": 3743145, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/680680d82143e4d33dc569913e5ef8c5?s=128&d=identicon&r=PG", "display_name": "kyb", "link": "https://stackoverflow.com/users/3743145/kyb"}, "edited": false, "score": 1, "creation_date": 1551889408, "post_id": 31979659, "comment_id": 96808100, "body": "nice:) Could you detalize the answer with commands and or Linker/Compiler flags?"}], "tags": [], "owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "is_accepted": true, "score": -1, "last_activity_date": 1439440954, "creation_date": 1439440954, "answer_id": 31979659, "question_id": 31932902, "link": "https://stackoverflow.com/questions/31932902/undefined-reference-to-unwind-getip/31979659#31979659", "title": "Undefined reference to &#39;_Unwind_GetIP&#39;", "body": "<p>The solution happened to be building unwind and including some portability headers. See module example <a href=\"https://github.com/skligys/rusty-cardboard/tree/fc999e0385de7ab5d32a319ca523225a7e0d673f/jni\" rel=\"nofollow\">here</a></p>\n"}], "owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1511, "favorite_count": 1, "accepted_answer_id": 31979659, "answer_count": 2, "score": 2, "last_activity_date": 1439440954, "creation_date": 1439265147, "last_edit_date": 1439298403, "question_id": 31932902, "link": "https://stackoverflow.com/questions/31932902/undefined-reference-to-unwind-getip", "title": "Undefined reference to &#39;_Unwind_GetIP&#39;", "body": "<p>I'm having a bit of trouble getting a <code>rustc</code> compiled <code>staticlib</code> for triple, <code>arm-linux-androideabi</code>, to link up nicely within Android Studio.</p>\n\n<p>Steps taken...</p>\n\n<ol>\n<li>Install Rust via <a href=\"https://github.com/brson/multirust\" rel=\"nofollow\" title=\"multi rust\">multirust</a></li>\n<li>Build a rustc for Android API v14</li>\n<li>Build lib with <code>--target=arm-linux-androideabi</code></li>\n<li>Add to <code>jniLibs/</code> within Android Studio</li>\n<li>Create a little C++ shim for hooks to/from JNI</li>\n<li>Build and link (almost)</li>\n</ol>\n\n<p>When building my crate, I get the following output:</p>\n\n<pre><code>note: link against the following native artifacts when linking \n      against this static library\nnote: the order and any duplication can be significant on some platforms, \n      and so may need to be preserved\nnote: library: c\nnote: library: m\nnote: library: dl\nnote: library: log\nnote: library: gcc\nnote: library: c\nnote: library: m\n</code></pre>\n\n<p>So naturally, my Android.mk includes these libs when using the staticlib.</p>\n\n<p><strong>Android.mk</strong></p>\n\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := hydrogen\nLOCAL_SRC_FILES := ../jniLibs/$(TARGET_ARCH_ABI)/libhydrogen.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := hydrogen-android\nLOCAL_SRC_FILES := shim.cpp\nLOCAL_STATIC_LIBRARIES := hydrogen\nLOCAL_LDLIBS := -lc -lm -ldl -llog -lgcc -lc -lm\ninclude $(BUILD_SHARED_LIBRARY)\n</code></pre>\n\n<p>Building in Android Studio gives me the following output:</p>\n\n<pre><code>:app:buildCppShim\nAndroid NDK: WARNING:/Android.mk:hydrogen: non-system libraries in linker flags: -lgcc -lgccunwind    \nAndroid NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    \nAndroid NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    \nAndroid NDK:     current module    \n\n[armeabi] Compile++ thumb: hydrogen-android &lt;= shim.cpp\n[armeabi] SharedLibrary  : libhydrogen-android.so\n[snipped]function sync::rwlock::StaticRwLock::read::ha5ec9717ccd1ed83Lxp: error: undefined reference to 'pthread_rwlock_rdlock'\n[snipped]function sys_common::rwlock::RWLock::read::h7f3d472c79e2e1e2Z1q: error: undefined reference to 'pthread_rwlock_rdlock'\n[snipped]function sys_common::rwlock::RWLock::read_unlock::hd7d67e9c5c47b9f5B2q: error: undefined reference to 'pthread_rwlock_unlock'\n[snipped]function sync::rwlock::StaticRwLock::try_read::hddd396186cced62f8xp: error: undefined reference to 'pthread_rwlock_tryrdlock'\n[snipped]function sys_common::rwlock::RWLock::try_read::ha5aede723e91a3c881q: error: undefined reference to 'pthread_rwlock_tryrdlock'\n[snipped]function sync::rwlock::StaticRwLock::write::h787666bb30e75d28Ryp: error: undefined reference to 'pthread_rwlock_wrlock'\n[snipped]function sys_common::rwlock::RWLock::write::h0273da9a7ade68c0i2q: error: undefined reference to 'pthread_rwlock_wrlock'\n[snipped]function sync..rwlock..RwLockWriteGuard$LT$$LP$$RP$$GT$::drop.34348::h4c8fbe45843b9a01: error: undefined reference to 'pthread_rwlock_unlock'\n[snipped]function sync::rwlock::StaticRwLock::try_write::h5d30a7fdd53c86b4ezp: error: undefined reference to 'pthread_rwlock_trywrlock'\n[snipped]function sys_common::rwlock::RWLock::try_write::h0ec4bcc0cb460718r2q: error: undefined reference to 'pthread_rwlock_trywrlock'\n[snipped]function sync::rwlock::StaticRwLock::destroy::ha1e9f51e62905aedXzp: error: undefined reference to 'pthread_rwlock_destroy'\n[snipped]function sys_common::rwlock::RWLock::destroy::h602ce773ff2356e6T2q: error: undefined reference to 'pthread_rwlock_destroy'\n[snipped]function sys::rwlock::RWLock::read::h241f5fdff06a76ab00u: error: undefined reference to 'pthread_rwlock_rdlock'\n[snipped]function sys::rwlock::RWLock::write::h48034b52e6491ea4h3u: error: undefined reference to 'pthread_rwlock_wrlock'\n\n~/bin/rust/src/compiler-rt/lib/builtins/gcc_personality_v0.c\nError:(206) undefined reference to '_Unwind_GetIP'\nError:(273) undefined reference to '_Unwind_SetGR'\nError:(274) undefined reference to '_Unwind_SetGR'\nError:(275) undefined reference to '_Unwind_SetIP'\n</code></pre>\n\n<p><strong>pthread errors</strong>\nI'm not sure why I received the errors about pthread, because I have <code>#include &lt;pthread.h&gt;</code> in my shim, and these functions are defined in <a href=\"https://android.googlesource.com/platform/prebuilts/ndk/+/5b02cc4c4e80fd6a9ee30e0ad4642122e08a007b/android-ndk-r7/platforms/android-14/arch-arm/usr/include/pthread.h#240\" rel=\"nofollow\" title=\"android bionic pthread\">Android's <code>pthread</code></a>.</p>\n\n<p><strong>unwind errors</strong>\nFor this, I've tried including <code>unwind.h</code> in the shim and <code>libgccunwind.a</code> in the <code>Android.mk</code>, but still throws the same errors. I found <a href=\"https://www.reddit.com/r/rust/comments/2ef7ku/trying_to_compile_an_android_ndk_project_in_an_apk/\" rel=\"nofollow\">this thread</a> where a hack-solution was to just declare the prototypes in the shim, but when I do this, I receive the following errors about <code>unwind.h</code></p>\n\n<p><code>Error:(231, 3) error: previous declaration 'void _Unwind_SetGR(_Unwind_Context*, int, _Unwind_Word)' here</code></p>\n\n<p>So, it is able to find their declarations when I declare them, because they conflict, but has no idea where they are if I do not? I'm assuming it has to be something wrong with my linking order, but unsure of how to solve it, because the required libs are linked against after pulling in the rust created lib.</p>\n\n<p>Any help would be greatly appreciated!</p>\n\n<p><strong>Edit 1</strong>\nAdjusted makefile to link during Shared Library creation.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1439289628, "post_id": 31932006, "comment_id": 51789174, "body": "@BenjaminLindley FWIW, you should probably do <code>ret.0 = ret.0 + rhs.0;</code> instead, since <code>+=</code> isn&#39;t generic yet, <a href=\"http://is.gd/ApfWLf\" rel=\"nofollow noreferrer\">so arbitrary addables fail</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1439258323, "creation_date": 1439258323, "answer_id": 31932006, "question_id": 31931643, "link": "https://stackoverflow.com/questions/31931643/using-a-macro-type-argument-inside-a-generated-function/31932006#31932006", "title": "Using a macro type argument inside a generated function", "body": "<p>You've stumbled on a subtle bit of Rust's type system. <code>Length</code> is a type, but <code>Length()</code> is a <em>function</em>. These exist in different namespaces.</p>\n\n<p>One work around is to extend your macro to accept a type <strong>and</strong> a function:</p>\n\n<pre><code>macro_rules! implement_add {\n    ($t:ty, $c:ident) =&gt; {\n        impl std::ops::Add for $t {\n            type Output = $t;\n            fn add(self, rhs: $t) -&gt; $t {\n                $c(self.0 + rhs.0)        // error on this line\n            }\n        }\n    }\n}\n\npub struct Length(f64);\n\nimplement_add!(Length, Length);\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 371, "favorite_count": 0, "accepted_answer_id": 31932006, "answer_count": 1, "score": 5, "last_activity_date": 1439258323, "creation_date": 1439255594, "question_id": 31931643, "link": "https://stackoverflow.com/questions/31931643/using-a-macro-type-argument-inside-a-generated-function", "title": "Using a macro type argument inside a generated function", "body": "<p>I'm trying to implement a macro which implements the Add trait for a struct, like so:</p>\n\n<pre><code>macro_rules! implement_add {\n    ($t:ty) =&gt; {\n        impl std::ops::Add for $t {\n            type Output = $t;\n            fn add(self, rhs: $t) -&gt; $t {\n                $t(self.0 + rhs.0)        // error on this line\n            }\n        }\n    }\n}\n\npub struct Length(f64);\n\nimplement_add!(Length);\n\nfn main() {}\n</code></pre>\n\n<p>However, this gives an error on the indicated line:</p>\n\n<pre><code>&lt;anon&gt;:6:17: 6:19 error: unexpected token: `Length`\n&lt;anon&gt;:6                 $t(self.0 + rhs.0)        // error on this line\n                         ^~\n</code></pre>\n\n<p>This makes no sense to me. Especially since, if I replace <code>$t</code> there with <code>Length</code>, it compiles fine. Am I doing something wrong in my macro?</p>\n\n<p>Playground: <a href=\"http://is.gd/EIEKub\" rel=\"noreferrer\">http://is.gd/EIEKub</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439230775, "post_id": 31926098, "comment_id": 51765280, "body": "There is nothing in the standard library. Does <a href=\"http://stackoverflow.com/a/28248065/155423\">this answer about a wrapper type</a> fit your goal?"}, {"owner": {"reputation": 10598, "user_id": 371137, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/JAV6o.jpg?s=128&g=1", "display_name": "Perseids", "link": "https://stackoverflow.com/users/371137/perseids"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439231404, "post_id": 31926098, "comment_id": 51765570, "body": "@Shepmaster, does this type prevent its instantiation by other means than <code>NonNan::new</code>, i.e. can I be certain <code>cmp</code> never panics? (In any case, it fits my immediate needs. Thank you so far.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439236190, "post_id": 31926098, "comment_id": 51768055, "body": "Outside of the module that it defined in, you can only use the public construction methods, so yes. I&#39;m going to mark this as a duplicate then."}], "owner": {"reputation": 10598, "user_id": 371137, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/JAV6o.jpg?s=128&g=1", "display_name": "Perseids", "link": "https://stackoverflow.com/users/371137/perseids"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 105, "favorite_count": 0, "closed_date": 1439236202, "answer_count": 0, "score": 3, "last_activity_date": 1439229401, "creation_date": 1439229401, "question_id": 31926098, "link": "https://stackoverflow.com/questions/31926098/alternative-to-f32-and-f64-that-implements-corecmpord", "closed_reason": "Duplicate", "title": "Alternative to f32 and f64 that implements core::cmp::Ord", "body": "<p>I want to implement a scoring function which returns float like values (but never NaN etc.) and find the minimum values of a list with <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by\" rel=\"nofollow\"><code>min_by</code></a>. As <code>min_by</code> requires its values to implement <code>core::cmp::Ord</code>, I can't use <code>f32</code> and <code>f64</code> (<a href=\"https://stackoverflow.com/questions/26489701/in-rust-f64-and-f32-dont-implement-total-ordering-via-ord-trait-why-this-restr\">which don't have a total ordering</a>).</p>\n\n<p><strong>Is there any floating point alternative in the library implementing <code>core::cmp:Ord</code> and if not, how do I build an alternative that excludes non-real values?</strong></p>\n"}, {"tags": ["concurrency", "rust", "mutex"], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1439188603, "post_id": 31912972, "comment_id": 51739225, "body": "Wonderful. That deadlocks right away, and reversing the indices definitely prevents deadlock from occurring."}, {"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1439293385, "post_id": 31912972, "comment_id": 51791606, "body": "Brilliant and simple. This should be copied into the documentation"}], "tags": [], "owner": {"reputation": 155397, "user_id": 978917, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/92d059913eace78a868a3e87f98e0a57?s=128&d=identicon&r=PG", "display_name": "ruakh", "link": "https://stackoverflow.com/users/978917/ruakh"}, "is_accepted": true, "score": 8, "last_activity_date": 1439188429, "creation_date": 1439188429, "answer_id": 31912972, "question_id": 31912781, "link": "https://stackoverflow.com/questions/31912781/why-doesnt-the-dining-philosophers-exercise-deadlock-if-done-incorrectly/31912972#31912972", "title": "Why doesn&#39;t the dining philosophers exercise deadlock if done incorrectly?", "body": "<p>The deadlock arises when every philosopher \"simultaneously\" picks up the fork on his/her left, and then finds that the fork on his/her right is already taken. To make this happen non-negligibly often, you need to introduce some fudge factor into the \"simultaneity\", so that if the philosophers all pick up their left forks within a certain amount of time of each other, that none of them will be able to pick up their right forks. In other words, you need to introduce a bit of sleep <em>between</em> picking up the two forks:</p>\n\n<pre><code>    fn eat(&amp;self, table: &amp;Table) {\n        let _left = table.forks[self.left].lock().unwrap();\n        thread::sleep_ms(1000);     // &lt;---- simultaneity fudge factor\n        let _right = table.forks[self.right].lock().unwrap();\n\n        println!(\"{} is eating.\", self.name);\n\n        thread::sleep_ms(1000);\n\n        println!(\"{} is done eating.\", self.name);\n    }\n</code></pre>\n\n<p>(Of course, this doesn't <em>guarantee</em> a deadlock, it just makes it much more likely.)</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 547, "favorite_count": 0, "accepted_answer_id": 31912972, "answer_count": 1, "score": 6, "last_activity_date": 1465248946, "creation_date": 1439187662, "last_edit_date": 1465248946, "question_id": 31912781, "link": "https://stackoverflow.com/questions/31912781/why-doesnt-the-dining-philosophers-exercise-deadlock-if-done-incorrectly", "title": "Why doesn&#39;t the dining philosophers exercise deadlock if done incorrectly?", "body": "<p>According to the <a href=\"https://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow\">Rust exercise docs</a>, their mutex-based implementation of the Dining Philosophers problem avoids deadlock by always selecting the lowest ID fork as the left fork of each philosopher, i.e., by making one left-handed:</p>\n\n<pre><code>let philosophers = vec![\n        Philosopher::new(\"Judith Butler\", 0, 1),\n        Philosopher::new(\"Gilles Deleuze\", 1, 2),\n        Philosopher::new(\"Karl Marx\", 2, 3),\n        Philosopher::new(\"Emma Goldman\", 3, 4),\n        Philosopher::new(\"Michel Foucault\", 0, 4),\n    ];\n</code></pre>\n\n<p>However, if I disobey this rule and swap the fork indices in the last <code>Philosopher</code>, the program still runs with no deadlocking or panicking.</p>\n\n<p>Other things I tried:</p>\n\n<ul>\n<li>Lengthening the sleep argument in the <code>eat()</code> function call</li>\n<li>Commenting out the sleep argument</li>\n<li>Wrapping the main body in a <code>loop{}</code> to see if it would happen eventually</li>\n</ul>\n\n<p><strong>What do I have to do to break this properly?</strong></p>\n\n<hr>\n\n<p>Here is the complete source without any of the above changes:</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Mutex, Arc};\n\nstruct Philosopher {\n    name: String,\n    left: usize,\n    right: usize,\n}\n\nimpl Philosopher {\n    fn new(name: &amp;str, left: usize, right: usize) -&gt; Philosopher {\n        Philosopher {\n            name: name.to_string(),\n            left: left,\n            right: right,\n        }\n    }\n\n    fn eat(&amp;self, table: &amp;Table) {\n        let _left = table.forks[self.left].lock().unwrap();\n        let _right = table.forks[self.right].lock().unwrap();\n\n        println!(\"{} is eating.\", self.name);\n\n        thread::sleep_ms(1000);\n\n        println!(\"{} is done eating.\", self.name);\n    }\n}\n\nstruct Table {\n    forks: Vec&lt;Mutex&lt;()&gt;&gt;,\n}\n\nfn main() {\n    let table = Arc::new(Table { forks: vec![\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n    ]});\n\n    let philosophers = vec![\n        Philosopher::new(\"Judith Butler\", 0, 1),\n        Philosopher::new(\"Gilles Deleuze\", 1, 2),\n        Philosopher::new(\"Karl Marx\", 2, 3),\n        Philosopher::new(\"Emma Goldman\", 3, 4),\n        Philosopher::new(\"Michel Foucault\", 0, 4),\n    ];\n\n    let handles: Vec&lt;_&gt; = philosophers.into_iter().map(|p| {\n        let table = table.clone();\n\n        thread::spawn(move || {\n            p.eat(&amp;table);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>PS: Sadly the current Rust docs do not include this example, so the above link is broken.</p>\n"}, {"tags": ["syntax", "concurrency", "rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 10, "last_activity_date": 1439185699, "creation_date": 1439185699, "answer_id": 31912387, "question_id": 31912151, "link": "https://stackoverflow.com/questions/31912151/what-is-the-purpose-of-the-move-idiom/31912387#31912387", "title": "What is the purpose of the `move ||` idiom?", "body": "<p>A closure that captures by reference is of the form <code>|ARGUMENTS| EXPRESSION</code>.</p>\n\n<p>A closure that captures by value is of the form <code>move |ARGUMENTS| EXPRESSION</code>.<br>\n<code>move</code> is a keyword that is only used in that location at present.</p>\n\n<p>It is a little unfortunate that a closure accepting no arguments looks like the logical OR operator, but that\u2019s the way it goes. There is no syntactic ambiguity from it.</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "accepted_answer_id": 31912387, "answer_count": 1, "score": 4, "last_activity_date": 1439209352, "creation_date": 1439184408, "last_edit_date": 1439209352, "question_id": 31912151, "link": "https://stackoverflow.com/questions/31912151/what-is-the-purpose-of-the-move-idiom", "title": "What is the purpose of the `move ||` idiom?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow\">Rust docs</a>, there is a learning exercise about concurrency, with the following code:</p>\n\n<pre><code>let philosophers = vec![\n    Philosopher::new(\"Judith Butler\"),\n    Philosopher::new(\"Gilles Deleuze\"),\n    Philosopher::new(\"Karl Marx\"),\n    Philosopher::new(\"Emma Goldman\"),\n    Philosopher::new(\"Michel Foucault\"),\n    ];\n\nlet handles: Vec&lt;_&gt; = philosophers.into_iter().map(|p| {\n    thread::spawn(move || {\n        p.eat();\n    })\n}).collect();\n\nfor h in handles {\n    h.join().unwrap();\n}\n</code></pre>\n\n<p>They explain each of its pieces briefly, but they don't explain why there is what seems to be a <code>move</code> directive and a logical OR in the <code>thread::spawn()</code> call:</p>\n\n<blockquote>\n  <p>This closure needs an extra annotation, move, to indicate that the closure is going to take ownership of the values it\u2019s capturing.</p>\n</blockquote>\n\n<p>However, this 'annotation' doesn't look anything like the other annotations, such as type. What's really going on here, and why? (Searching for that snippet of code doesn't seem to point back to anywhere but the same docs and other blog posts about other types of <code>move</code>ing.)</p>\n"}, {"tags": ["import", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1439174912, "post_id": 31910404, "comment_id": 51735570, "body": "Sad! The ability to do things like this easily makes OCaml&#39;s module system really powerful.. My use case looks something like <a href=\"http://pastebin.com/D5A28sJK\" rel=\"nofollow noreferrer\">pastebin.com/D5A28sJK</a> - any ideas?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 1, "creation_date": 1439185463, "post_id": 31910404, "comment_id": 51737944, "body": "@bfops: I\u2019d just say don\u2019t use glob imports."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1439197165, "post_id": 31910404, "comment_id": 51743829, "body": "Are glob imports still discouraged for <code>pub use</code> re-exports in libraries, or just for general use?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1439247078, "post_id": 31910404, "comment_id": 51772748, "body": "This definitely falls under the &quot;re-export&quot; case in my head.. I don&#39;t want to change my re-export list every time the module changes, but I do want to override the definition of T.."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1439260179, "post_id": 31910404, "comment_id": 51776070, "body": "My own personal opinion on glob imports is that <code>use super::*;</code> in a tests module is the only place they should be used\u2014and even there they aren\u2019t <i>necessary</i>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1439169473, "creation_date": 1439169473, "answer_id": 31910404, "question_id": 31910369, "link": "https://stackoverflow.com/questions/31910369/does-rust-have-use-foo-with-renaming/31910404#31910404", "title": "Does Rust have &quot;use foo::*&quot; with renaming?", "body": "<p>No, it does not. For that matter, glob imports are generally discouraged.</p>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 620, "favorite_count": 0, "accepted_answer_id": 31910404, "answer_count": 1, "score": 3, "last_activity_date": 1439169473, "creation_date": 1439169071, "question_id": 31910369, "link": "https://stackoverflow.com/questions/31910369/does-rust-have-use-foo-with-renaming", "title": "Does Rust have &quot;use foo::*&quot; with renaming?", "body": "<p>Is it possible to <code>use foo::* with {T=T_renamed}</code>, or something equivalent, like</p>\n\n<pre><code>use foo::* hiding {T};\npub type T = foo::T&lt;i32&gt;;\n</code></pre>\n"}, {"tags": ["variables", "syntax", "rust"], "answers": [{"comments": [{"owner": {"reputation": 873, "user_id": 3522940, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/887e3dbed6af60957c4ce299aae3225c?s=128&d=identicon&r=PG&f=1", "display_name": "user3522940", "link": "https://stackoverflow.com/users/3522940/user3522940"}, "edited": false, "score": 0, "creation_date": 1439153825, "post_id": 31908687, "comment_id": 51731329, "body": "I think i got it. one thing I didn&#39;t get though is in the second example: the function something: whay did you passed &amp;self as a parameter. It is something you have to do to create function within mathoods(impl)?"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 873, "user_id": 3522940, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/887e3dbed6af60957c4ce299aae3225c?s=128&d=identicon&r=PG&f=1", "display_name": "user3522940", "link": "https://stackoverflow.com/users/3522940/user3522940"}, "edited": false, "score": 0, "creation_date": 1439153969, "post_id": 31908687, "comment_id": 51731369, "body": "@user3522940 I passed <code>&amp;self</code> because I wanted to tell rust <b>not</b> to move the value. This way the variable retains ownership past the function call, try removing the <code>&amp;</code> and you&#39;ll get the same error. It&#39;s important to note that a move is not a copy, it is literally a move"}], "tags": [], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "is_accepted": true, "score": 57, "last_activity_date": 1569096153, "last_edit_date": 1569096153, "creation_date": 1439153273, "answer_id": 31908687, "question_id": 31908636, "link": "https://stackoverflow.com/questions/31908636/what-does-the-ampersand-mean-in-a-rust-type/31908687#31908687", "title": "What does the ampersand mean in a Rust type?", "body": "<p>This means you'll be passing in a <strong>reference</strong> to the object, as opposed to moving the object itself. It's important to distinguish this because if your function looked like:</p>\n\n<pre><code>fn eat(self) {\n    println!(\"{} is done eating.\", self.name);\n}\n</code></pre>\n\n<p>and you tried calling it <em>then</em> using the variable after, you'd get an error</p>\n\n<pre><code>object = Foo::new();\nobject.eat();\nobject.something(); // error, because you moved object in eat\n</code></pre>\n\n<p>because when you don't specify <code>&amp;</code>, rust moves the value into the function and your original binding no longer has ownership. check out this minimal example I created (<a href=\"https://play.rust-lang.org/?code=struct%20Foo%20%7B%0A%20%20%20%20x%20%3A%20u32%0A%7D%0A%0Aimpl%20Foo%20%7B%0A%0A%20%20%20%20fn%20eat(self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22eating%22)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20something(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22else%22)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%20%20%20%20%0A%20%20%20%20let%20g%20%3D%20Foo%20%7B%20x%3A%205%20%7D%3B%0A%20%20%20%20g.eat()%3B%0A%20%20%20%20g.something()%3B%20%20%2F%2F%20if%20this%20comes%20before%20eat%2C%20no%20errors%20because%20we%20arent%20moving%0A%7D&amp;version=stable\" rel=\"noreferrer\">playground version</a>):</p>\n\n<pre><code>struct Foo {\n    x : u32\n}\n\nimpl Foo {\n\n    fn eat(self) {\n        println!(\"eating\");\n    }\n\n    fn something(&amp;self) {\n        println!(\"else\");\n    }\n\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let g = Foo { x: 5 };\n    g.eat();\n    g.something();  // if this comes before eat, no errors because we arent moving\n}\n</code></pre>\n\n<p>Now switch <code>something</code> to be called <strong>before</strong> <code>eat</code>. Because <code>something</code> only takes a <em>reference</em>, <code>g</code> still has ownership and you can continue on. <code>eat</code> on the other hand moves <code>g</code> and you no longer can use <code>g</code>.</p>\n"}], "owner": {"reputation": 873, "user_id": 3522940, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/887e3dbed6af60957c4ce299aae3225c?s=128&d=identicon&r=PG&f=1", "display_name": "user3522940", "link": "https://stackoverflow.com/users/3522940/user3522940"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10015, "favorite_count": 4, "accepted_answer_id": 31908687, "answer_count": 1, "score": 45, "last_activity_date": 1569096153, "creation_date": 1439152842, "last_edit_date": 1439156055, "question_id": 31908636, "link": "https://stackoverflow.com/questions/31908636/what-does-the-ampersand-mean-in-a-rust-type", "title": "What does the ampersand mean in a Rust type?", "body": "<p>I've seen this code in the Rust documentation:</p>\n\n<pre><code>fn eat(&amp;self) {\n    println!(\"{} is done eating.\", self.name);\n}\n</code></pre>\n\n<p>what does the <code>&amp;</code> in <code>&amp;self</code> mean? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 555, "user_id": 4637817, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/849a2d4951995c9fcb2b9aec36faaf2c?s=128&d=identicon&r=PG&f=1", "display_name": "Remagpie", "link": "https://stackoverflow.com/users/4637817/remagpie"}, "edited": false, "score": 0, "creation_date": 1439155527, "post_id": 31908887, "comment_id": 51731778, "body": "Thank you for your explanation! But I still have some questions. 1. first solution with cloned() works well, but second solution still has same error. Why does this happens? 2. Why does the integer version of code works without all these corrections?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 555, "user_id": 4637817, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/849a2d4951995c9fcb2b9aec36faaf2c?s=128&d=identicon&r=PG&f=1", "display_name": "Remagpie", "link": "https://stackoverflow.com/users/4637817/remagpie"}, "edited": false, "score": 0, "creation_date": 1439202171, "post_id": 31908887, "comment_id": 51746804, "body": "@Yang The second solution accidentally had an extra &quot;<code>*</code>&quot;; try again to see if it works now. The integer version works because integers are <code>Copy</code>, which means assignment <code>let new = *ref</code> causes a copy, not a move. <a href=\"http://stackoverflow.com/a/31171431/1763356\">I&#39;ve talked more about moves vs. copies elsewhere.</a>"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 10, "last_activity_date": 1439202005, "last_edit_date": 1439202005, "creation_date": 1439154738, "answer_id": 31908887, "question_id": 31907887, "link": "https://stackoverflow.com/questions/31907887/how-to-clone-last-element-from-vector/31908887#31908887", "title": "How to clone last element from vector?", "body": "<p><code>item_vec.last()</code> is an <code>Option&lt;&amp;T&gt;</code>.</p>\n\n<p><code>item_vec.last().clone()</code> is another <code>Option&lt;&amp;T&gt;</code>. This actually performs a <em>shallow</em> copy of the reference. This means you haven't actually fixed anything!</p>\n\n<p>Intuitively, this makes sense - cloning a pointer can return a value type to store directly on the stack, but a clone of an <code>Option&lt;&amp;T&gt;</code> <em>can't</em> clone the <code>T</code> because it has nowhere to put it.</p>\n\n<p>This works because an <code>Option&lt;T&gt;</code> actually calls <code>clone</code> on an <code>&amp;T</code>, so <code>Option&lt;&amp;T&gt;</code> calls <code>clone</code> on an <code>&amp;&amp;T</code>, which means the <code>&amp;self</code> parameter in the trait resolves to <code>self = &amp;T</code>. This means we use <a href=\"https://doc.rust-lang.org/src/core/clone.rs.html#54-58\" rel=\"noreferrer\">the <code>impl</code> of <code>Clone</code> for <code>&amp;T</code></a>:</p>\n\n<pre><code>impl&lt;'a, T: ?Sized&gt; Clone for &amp;'a T {\n    /// Returns a shallow copy of the reference.\n    #[inline]\n    fn clone(&amp;self) -&gt; &amp;'a T { *self }\n}\n</code></pre>\n\n<p><code>*item_vec.last().clone().unwrap()</code> thus is still a borrow of the vector.</p>\n\n<p>One can fix this in two basic ways. One is to use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned\" rel=\"noreferrer\"><code>Option</code>'s <code>cloned</code> method</a>, which clones the inner reference away:</p>\n\n<pre><code>item_vec.last().cloned().unwrap()\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/src/core/option.rs.html#706-708\" rel=\"noreferrer\">This is implemented as a <code>map</code> on the internal data:</a></p>\n\n<pre><code>impl&lt;'a, T: Clone&gt; Option&lt;&amp;'a T&gt; {\n    /// Maps an Option&lt;&amp;T&gt; to an Option&lt;T&gt; by cloning the contents of the Option.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn cloned(self) -&gt; Option&lt;T&gt; {\n        self.map(|t| t.clone())\n    }\n}\n</code></pre>\n\n<p>The other option is to <code>unwrap</code> and only <em>then</em> <code>clone</code> the reference, to get a value out:</p>\n\n<pre><code>item_vec.last().unwrap().clone()\n</code></pre>\n"}], "owner": {"reputation": 555, "user_id": 4637817, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/849a2d4951995c9fcb2b9aec36faaf2c?s=128&d=identicon&r=PG&f=1", "display_name": "Remagpie", "link": "https://stackoverflow.com/users/4637817/remagpie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2548, "favorite_count": 0, "accepted_answer_id": 31908887, "answer_count": 1, "score": 4, "last_activity_date": 1439202005, "creation_date": 1439147433, "last_edit_date": 1439154441, "question_id": 31907887, "link": "https://stackoverflow.com/questions/31907887/how-to-clone-last-element-from-vector", "title": "How to clone last element from vector?", "body": "<p>I'm trying to write code that gets the last element of some vector and do different actions (including mutation of the vector) depending on that element.</p>\n\n<p>I tried like this:</p>\n\n<pre><code>#[derive(Clone, PartialEq)]\nenum ParseItem {\n    Start,\n    End,\n}\n\nlet mut item_vec = vec![ParseItem::End];\nloop {\n    let last_item = *item_vec.last().clone().unwrap();\n    match last_item {\n        ParseItem::End =&gt; item_vec.push(ParseItem::Start),\n        _ =&gt; break,\n    }\n}\n</code></pre>\n\n<p>And I get the following error:</p>\n\n<blockquote>\n  <p>error: cannot move out of borrowed content<br/>\n  let last_item = *item_vec.last().clone().unwrap();</p>\n</blockquote>\n\n<p>I thought by cloning <code>item_vec.last()</code>, the problems with ownership would be solved, but it seems not.</p>\n\n<p>If I try the same thing with a vector of integers like this:</p>\n\n<pre><code>let mut int_vec = vec![0];\nloop {\n    let last_int = *int_vec.last().clone().unwrap();\n    match last_int {\n        0 =&gt; int_vec.push(1),\n        _ =&gt; break,\n    }\n}\n</code></pre>\n\n<p>the compiler doesn't complain about borrowing.</p>\n\n<p>Why does my code fails to compile?</p>\n"}, {"tags": ["json", "parsing", "rust", "serde"], "comments": [{"owner": {"reputation": 103, "user_id": 3316836, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/62c829a9b6e2c33350b891e9d4d798b1?s=128&d=identicon&r=PG&f=1", "display_name": "CuriOne", "link": "https://stackoverflow.com/users/3316836/curione"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439156576, "post_id": 31907814, "comment_id": 51732060, "body": "@Shepmaster Well, I have shown the code that I have tried parsing this JSON output and had succeeded to a certain degree, by successfully parsing the number of people in space as well as the &quot;people&quot; array, now I would like to also show you how to get at the &quot;name&quot; key, but here I am getting a panic. I was under the impression that I had shown what I am trying to do in the code above, (that I in fact wrote), but I have now edited the question to provide additional detail."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439156771, "post_id": 31907814, "comment_id": 51732115, "body": "@CuriOne you included a lot of code, that&#39;s true. And what you had did look good. The problem is that you didn&#39;t show any of your efforts to get the names out of the result. Your previous code was akin to &quot;here&#39;s 40 lines of me <i>building</i> an array; how do I <i>sum</i> all the numbers in the array&quot;. It was lacking the crucial part of showing effort on the <i>sum</i> part. Anyway, you&#39;ve edited it, so I&#39;ll delete my comments in a while."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439157333, "post_id": 31907814, "comment_id": 51732272, "body": "You say that line of code causes a panic, but it cannot even be compiled: <i>cannot index a value of type <code>&amp;serde_json::value::Value</code></i>. Please review how to create an <a href=\"/help/mcve\">MCVE</a>."}], "answers": [{"comments": [{"owner": {"reputation": 103, "user_id": 3316836, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/62c829a9b6e2c33350b891e9d4d798b1?s=128&d=identicon&r=PG&f=1", "display_name": "CuriOne", "link": "https://stackoverflow.com/users/3316836/curione"}, "edited": false, "score": 0, "creation_date": 1439157589, "post_id": 31909182, "comment_id": 51732353, "body": "Hmm, thanks for this, I think that I am going to play with this some more, but thanks for the suggestion."}, {"owner": {"reputation": 103, "user_id": 3316836, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/62c829a9b6e2c33350b891e9d4d798b1?s=128&d=identicon&r=PG&f=1", "display_name": "CuriOne", "link": "https://stackoverflow.com/users/3316836/curione"}, "edited": false, "score": 0, "creation_date": 1439160934, "post_id": 31909182, "comment_id": 51733061, "body": "This is a good answer and sort of an obvious one, the reason I got stuck is because I was expecting there to be a method to do that as part of getting the <code>&quot;people&quot;</code> values - something to keep it on one line. But this works great anyways."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1439158578, "last_edit_date": 1439158578, "creation_date": 1439157132, "answer_id": 31909182, "question_id": 31907814, "link": "https://stackoverflow.com/questions/31907814/selecting-a-subset-of-keys-from-a-json-array/31909182#31909182", "title": "Selecting a subset of keys from a JSON array", "body": "<p>This worked for me:</p>\n\n<pre><code>if let &amp;Value::Array(ref people) = ppl_value_space {\n    let names = people.iter().filter_map(|person| person.find_path(&amp;[\"name\"]));\n    for name in names {\n        println!(\"{:?}\", name);\n    }\n}\n</code></pre>\n\n<p>Since a <code>serde_json::Value</code> is an <code>enum</code>, it can be many different types of values. And array is just one of those, it could be other things like a string or a number. We expect it to be an array, but Rust forces us to think about the other cases.</p>\n\n<p>In this case, we ignore all types except for a <code>Value::Array</code> by using an <em>if-let</em> statement. When the condition is true we get a reference to the contained array.</p>\n\n<p>We iterate over each item in the array and find the name object inside of it. <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow\"><code>filter_map</code></a> is used to ignore <code>None</code> values, but you may want to do something different.</p>\n\n<p>Each value is printed out, but you could also <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow\"><code>collect</code></a> them into a new <code>Vec</code> or something more exciting.</p>\n"}], "owner": {"reputation": 103, "user_id": 3316836, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/62c829a9b6e2c33350b891e9d4d798b1?s=128&d=identicon&r=PG&f=1", "display_name": "CuriOne", "link": "https://stackoverflow.com/users/3316836/curione"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 914, "favorite_count": 0, "accepted_answer_id": 31909182, "answer_count": 1, "score": 0, "last_activity_date": 1538857491, "creation_date": 1439147073, "last_edit_date": 1538857491, "question_id": 31907814, "link": "https://stackoverflow.com/questions/31907814/selecting-a-subset-of-keys-from-a-json-array", "title": "Selecting a subset of keys from a JSON array", "body": "<p>I am trying to parse a JSON API that spits out output like this:</p>\n\n<pre><code>{\n  \"message\": \"success\", \n  \"number\": 6, \n  \"people\": [\n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Gennady Padalka\"\n    }, \n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Mikhail Kornienko\"\n    }, \n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Scott Kelly\"\n    }, \n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Oleg Kononenko\"\n    }, \n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Kimiya Yui\"\n    }, \n    {\n      \"craft\": \"ISS\", \n      \"name\": \"Kjell Lindgren\"\n    }\n  ]\n}\n</code></pre>\n\n<p>Source: <a href=\"http://api.open-notify.org/astros.json\" rel=\"nofollow\">http://api.open-notify.org/astros.json</a></p>\n\n<p>I'm using <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow\">serde</a> for this and have managed to come up with the following code so far:</p>\n\n<pre><code>extern crate curl;\nextern crate serde_json;\n\nuse curl::http;\nuse std::str;\nuse serde_json::{from_str};\n\nfn main() {\n    // Fetch the data\n    let response = http::handle()\n       .get(\"http://api.open-notify.org/astros.json\")\n       .exec().unwrap();\n\n     // Get the raw UTF-8 bytes\n     let raw_bytes = response.get_body();\n     // Convert them to a &amp;str\n     let string_body: &amp;str = str::from_utf8(&amp;raw_bytes).unwrap();\n\n     // Get the JSON into a 'Value' Rust type\n     let json: serde_json::Value = serde_json::from_str(&amp;string_body).unwrap();\n\n     // Get the number of people in space\n     let num_of_ppl: i64 = json.find_path(&amp;[\"number\"]).unwrap().as_i64().unwrap();\n     println!(\"There are {} people on the ISS at the moment, they are: \", num_of_ppl);\n\n     // Get the astronauts\n     // Returns a 'Value' vector of people\n     let ppl_value_space = json.find_path(&amp;[\"people\"]).unwrap();\n     println!(\"{:?}\", ppl_value_space);\n}\n</code></pre>\n\n<p>Now, <code>ppl_value_space</code> gets me this, as expected:</p>\n\n<pre><code>[{\"craft\":\"ISS\",\"name\":\"Gennady Padalka\"}, {\"craft\":\"ISS\",\"name\":\"Mikhail Kornienko\"}, {\"craft\":\"ISS\",\"name\":\"Scott Kelly\"}, {\"craft\":\"ISS\",\"name\":\"Oleg Kononenko\"}, {\"craft\":\"ISS\",\"name\":\"Kimiya Yui\"}, {\"craft\":\"ISS\",\"name\":\"Kjell Lindgren\"}]\n</code></pre>\n\n<p>But, I want to get to the <code>\"name\"</code> key, as to essentially have something like:</p>\n\n<pre><code>[{\"name\":\"Gennady Padalka\"}, {\"name\":\"Mikhail Kornienko\"}, {\"name\":\"Scott Kelly\"}, {\"name\":\"Oleg Kononenko\"}, {\"name\":\"Kimiya Yui\"}, {\"name\":\"Kjell Lindgren\"}]\n</code></pre>\n\n<p>So as to be able to get only the names of the astronauts currently in space. </p>\n\n<p>How do I get the <code>\"name\"</code> within <code>\"people\"</code>, without the <code>\"craft\"</code>?</p>\n\n<p>I <em>tried</em> to get to <code>name</code> like so:</p>\n\n<pre><code>ppl_value_space[0].find_path(&amp;[\"name\"]).unwrap();\n</code></pre>\n\n<p>But it ends with a panic, which basically means that the key is <code>None</code>, since I <code>unwrap()</code> an <code>Option&lt;T&gt;</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 14666, "user_id": 12637, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/2f3ca6058f9534dfed473cf31341c644?s=128&d=identicon&r=PG", "display_name": "Omar Abid", "link": "https://stackoverflow.com/users/12637/omar-abid"}, "edited": false, "score": 1, "creation_date": 1573860806, "post_id": 31904898, "comment_id": 104039081, "body": "I think the <code>dyn</code> keyword should be added before Iterator in the later versions of Rust."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1439127960, "creation_date": 1439127960, "answer_id": 31904898, "question_id": 31904842, "link": "https://stackoverflow.com/questions/31904842/return-a-map-iterator-which-is-using-a-closure-in-rust/31904898#31904898", "title": "Return a map iterator which is using a closure in Rust", "body": "<p>The trick is not to box the closure, but the iterator <em>as a whole</em>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ceaser_cipher_iter&lt;'a&gt;(data: &amp;'a Vec&lt;u8&gt;, key: u8) -&gt; Box&lt;Iterator&lt;Item=u8&gt; + 'a&gt; {\n    Box::new(data.iter().map(move |&amp;p| p^key))\n}\n</code></pre>\n\n<p>Note that because the iterator uses a borrow, I had to add lifetime annotations so that the code would pass borrow checking.</p>\n"}], "owner": {"reputation": 10598, "user_id": 371137, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/JAV6o.jpg?s=128&g=1", "display_name": "Perseids", "link": "https://stackoverflow.com/users/371137/perseids"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4422, "favorite_count": 1, "closed_date": 1439129957, "accepted_answer_id": 31904898, "answer_count": 1, "score": 10, "last_activity_date": 1439127960, "creation_date": 1439127644, "question_id": 31904842, "link": "https://stackoverflow.com/questions/31904842/return-a-map-iterator-which-is-using-a-closure-in-rust", "closed_reason": "Duplicate", "title": "Return a map iterator which is using a closure in Rust", "body": "<p>I'm learning some Rust solving the Matasano Crypto Challenges and am stuck with implementing the Ceasar cipher (\"single-byte xor\") as an iterator. <strong>My function is supposed to look like this:</strong></p>\n\n<pre><code>fn ceaser_cipher_iter(data: &amp;Vec&lt;u8&gt;, key :u8) -&gt; SomeType {\n    data.iter().map(move |&amp;p| p^key)\n}\n</code></pre>\n\n<p>Replacing <code>SomeType</code> with <code>()</code>, the compiler tells me what type it expects: <code>core::iter::Map&lt;core::slice::Iter&lt;'_, u8&gt;, [closure src/main.rs:59:21: 59:31]&gt;</code>. After some headbanging I found out I could use <code>std::slice::Iter&lt;u8&gt;</code> for <code>core::slice::Iter&lt;'_, u8&gt;</code>, which leaves the closure. As far as I understand, my naive experiment to use</p>\n\n<pre><code>fn ceaser_cipher_iter(data: &amp;Vec&lt;u8&gt;, key :u8) -&gt; Map&lt;std::slice::Iter&lt;u8&gt;, fn(&amp;u8)-&gt;u8 &gt; {\n    data.iter().map(move |&amp;p| p^key)\n}\n</code></pre>\n\n<p>cannot work, because Rust needs to know the exact closure type to allocate the memory for the closure (<code>key</code> has to be stored by being <code>move</code>d into the  closure). I've tried to follow <a href=\"https://doc.rust-lang.org/book/closures.html#returning-closures\" rel=\"noreferrer\">the advice</a> to use a <code>Box</code> instead:</p>\n\n<pre><code>fn ceaser_cipher_iter(data: &amp;Vec&lt;u8&gt;, key :u8) -&gt; Map&lt;std::slice::Iter&lt;u8&gt;, Box&lt;Fn(&amp;u8)-&gt;u8&gt; &gt; {\n    data.iter().map(Box::new(move |&amp;p| p^key))\n}\n</code></pre>\n\n<p>But afaict <code>map</code> does not support it:</p>\n\n<pre><code>src/main.rs:59:17: 59:47 error: the trait `core::ops::FnMut&lt;(&amp;u8,)&gt;` is not implemented for the type `Box&lt;for&lt;'r&gt; core::ops::Fn(&amp;'r u8) -&gt; u8&gt;` [E0277]\nsrc/main.rs:59     data.iter().map(Box::new(move |&amp;p| p^key))\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:59:17: 59:47 error: the trait `core::ops::FnOnce&lt;(&amp;u8,)&gt;` is not implemented for the type `Box&lt;for&lt;'r&gt; core::ops::Fn(&amp;'r u8) -&gt; u8&gt;` [E0277]\nsrc/main.rs:59     data.iter().map(Box::new(move |&amp;p| p^key))\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p><strong>Is there a way to return a map iterator with a closure?</strong></p>\n"}, {"tags": ["unicode", "utf-8", "rust", "normalization", "unicode-normalization"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1439185899, "post_id": 31904479, "comment_id": 51738081, "body": "So if I want to detect non-normalized ranges within a string I need to first find ranges of chars where only the first one has <code>unicode_combining_class</code> of zero and check those if they are normal (depending on the definition, as you outlined)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1439195962, "post_id": 31904479, "comment_id": 51743131, "body": "@DK: You can see example of the K forms in <a href=\"http://www.unicode.org/reports/tr15/\" rel=\"nofollow noreferrer\">unicode.org/reports/tr15</a> (figure 6, for example). In essence, NFD and NFC are canonical equivalence while their K counterparts are about the weaker compatibility equivalence which include changing sub-script/super-script to regular characters (among other things). For example, 2&lt;sup&gt;5&lt;/sup&gt; is encoded as 0032 2075 in NFD or NFC (where 2075 is 5 in super-script position), but it is 0032 0035 in NFKD or NFKC (where 0035 is the regular 5)."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 1, "last_activity_date": 1439127074, "last_edit_date": 1439127074, "creation_date": 1439125169, "answer_id": 31904479, "question_id": 31904220, "link": "https://stackoverflow.com/questions/31904220/how-to-detect-unicode-characters-that-are-non-normalized/31904479#31904479", "title": "How to detect unicode characters that are non-normalized?", "body": "<p><strong>Edit</strong>: I just realised that the <em>reason</em> for the results I was getting is that your example string <em>is backwards</em>.  The combining code point should come second, not first.  I've updated the answer accordingly.</p>\n\n<p>Well, that depends on the definition of \"normalized\".</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/*!\nAdd this to a `Cargo.toml` manifest:\n\n```cargo\n[dependencies]\nunicode-normalization = \"0.1.1\"\n```\n*/\nextern crate unicode_normalization;\n\nfn main() {\n    for test_str in vec![\"a\\u{300}\", \"\\u{e0}\"] {\n        is_nfd(test_str);\n        is_nfkd(test_str);\n        is_nfc(test_str);\n        is_nfkc(test_str);\n    }\n}\n\nmacro_rules! norm_test {\n    ($fn_name:ident, $norm_name:ident) =&gt; {\n        fn $fn_name(s: &amp;str) {\n            use unicode_normalization::UnicodeNormalization;\n            println!(\"is_{}({:?}):\", stringify!($norm_name), s);\n            let is_norm = s.chars().zip(s.$norm_name())\n                .inspect(|&amp;(a, b)| println!(\" - ({:x}, {:x})\", a as u32, b as u32))\n                .all(|(a, b)| a == b);\n            println!(\" is_norm: {}\", is_norm);\n        }\n    };\n}\n\nnorm_test! { is_nfd, nfd }\nnorm_test! { is_nfkd, nfkd }\nnorm_test! { is_nfc, nfc }\nnorm_test! { is_nfkc, nfkc }\n</code></pre>\n\n<p>This produces the following output:</p>\n\n<pre class=\"lang-text prettyprint-override\"><code>is_nfd(\"a\\u{300}\"):\n - (61, 61)\n - (300, 300)\n is_norm: true\nis_nfkd(\"a\\u{300}\"):\n - (61, 61)\n - (300, 300)\n is_norm: true\nis_nfc(\"a\\u{300}\"):\n - (61, e0)\n is_norm: false\nis_nfkc(\"a\\u{300}\"):\n - (61, e0)\n is_norm: false\nis_nfd(\"\\u{e0}\"):\n - (e0, 61)\n is_norm: false\nis_nfkd(\"\\u{e0}\"):\n - (e0, 61)\n is_norm: false\nis_nfc(\"\\u{e0}\"):\n - (e0, e0)\n is_norm: true\nis_nfkc(\"\\u{e0}\"):\n - (e0, e0)\n is_norm: true\n</code></pre>\n\n<p>So <code>\"a\\u{300}\"</code> is NFD and NFKD, whilst <code>\"\\u{e0}\"</code> is NFC and NFKC.  I don't know of any examples which differ between the K and non-K variants, though the <a href=\"http://www.unicode.org/faq/normalization.html\" rel=\"nofollow\">Unicode FAQ on Normalization</a> will probably explain things better than I can.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 725, "favorite_count": 0, "accepted_answer_id": 31904479, "answer_count": 1, "score": 2, "last_activity_date": 1442634761, "creation_date": 1439123288, "last_edit_date": 1442634761, "question_id": 31904220, "link": "https://stackoverflow.com/questions/31904220/how-to-detect-unicode-characters-that-are-non-normalized", "title": "How to detect unicode characters that are non-normalized?", "body": "<p>Given a UTF-8 string (<code>&amp;str</code>), I want to find out any range of characters that are not normalized (e.g. <code>a\\u{300}</code> instead of <code>\\u{e0}</code>).</p>\n\n<p>How do I do this?</p>\n\n<p>Edit: Thanks to DK for correcting my faulty UTF-8 sequence. The combining character comes <em>after</em> the <code>a</code>, not before.</p>\n"}, {"tags": ["rust", "deriving", "newtype"], "comments": [{"owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "edited": false, "score": 0, "creation_date": 1485771081, "post_id": 31903461, "comment_id": 71046872, "body": "You should try my crate that adds exactly this functionality for lots of traits: <a href=\"https://github.com/JelteF/derive_more\" rel=\"nofollow noreferrer\">github.com/JelteF/derive_more</a>"}], "answers": [{"comments": [{"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1439199484, "post_id": 31903512, "comment_id": 51745204, "body": "It looks like all solutions use macros, so I&#39;ve suggested adding this to the language: <a href=\"https://internals.rust-lang.org/t/deriving-for-tuple-structs/2477\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/deriving-for-tuple-structs/2477</a>"}, {"owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "edited": false, "score": 1, "creation_date": 1485771209, "post_id": 31903512, "comment_id": 71046947, "body": "With rust 1.15 you can now use my crate to do this: <a href=\"https://github.com/JelteF/derive_more\" rel=\"nofollow noreferrer\">github.com/JelteF/derive_more</a>"}], "tags": [], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "is_accepted": true, "score": 6, "last_activity_date": 1577498054, "last_edit_date": 1592644375, "creation_date": 1439118228, "answer_id": 31903512, "question_id": 31903461, "link": "https://stackoverflow.com/questions/31903461/automatically-derive-add-mul-ord-etc-for-a-numeric-type/31903512#31903512", "title": "Automatically derive Add, Mul, Ord, etc. for a numeric type", "body": "<h1>Units of Measurement</h1>\n<p>You should have a look at <a href=\"https://crates.io/crates/measurements\" rel=\"nofollow noreferrer\">https://crates.io/crates/measurements</a>. That crate contains definitions for many units of measurement like centimeters, feet, etc.</p>\n<h1>Implementing traits for your newtypes</h1>\n<p>There are now some crates that make it really easy to implement <code>Add</code>, <code>Mul</code>, etc. for your newtypes.</p>\n<h2><a href=\"https://github.com/JelteF/derive_more\" rel=\"nofollow noreferrer\">derive_more</a></h2>\n<pre><code>// This needs rust in the 2018 edition\nextern crate derive_more;\nuse derive_more::{Add, Mul};\n\n#[derive(Add, Mul)]\nstruct Centimeters(i32);\n</code></pre>\n<h2><a href=\"https://crates.io/crates/newtype_derive\" rel=\"nofollow noreferrer\">newtype_derive</a></h2>\n<pre><code>custom_derive! {\n  #[derive(NewtypeAdd, NewtypeMul)]\n  pub struct Centimeters(i32);\n}\n</code></pre>\n<h2>Traits with your own macro</h2>\n<p><a href=\"https://stackoverflow.com/a/24835982/783912\">This</a> answer has a nice macro to help you implement traits for your newtypes.</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2385, "favorite_count": 1, "closed_date": 1439158273, "accepted_answer_id": 31903512, "answer_count": 1, "score": 7, "last_activity_date": 1577498054, "creation_date": 1439117843, "question_id": 31903461, "link": "https://stackoverflow.com/questions/31903461/automatically-derive-add-mul-ord-etc-for-a-numeric-type", "closed_reason": "Duplicate", "title": "Automatically derive Add, Mul, Ord, etc. for a numeric type", "body": "<p>What's the simplest way to create a custom type that behaves like a number?</p>\n\n<p>I want type-checking that prevents mixing different units in my program, but I still want to be able to easily perform calculations on the type without casting back and forth (similar case to custom <code>Centimeters</code> and <code>Inches</code> types).</p>\n\n<p>If I create:</p>\n\n<pre><code>struct Centimeters(f64);\n</code></pre>\n\n<p>then I have to implement <code>Add</code>, <code>Mul</code>, <code>Ord</code> and lots of other traits manually. That's a lot of boilerplate, and copy&amp;pasting of this code creates a  risk of breaking basic arithmetic in the program :)</p>\n\n<p>Unfortunately <code>#[derive(Add, Sub, \u2026)]</code> doesn't seem to be supported. Is there another standard trait/type/crate that could achieve similar effect?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "is_accepted": true, "score": 6, "last_activity_date": 1439130188, "last_edit_date": 1495542717, "creation_date": 1439110931, "answer_id": 31902579, "question_id": 31901040, "link": "https://stackoverflow.com/questions/31901040/implementing-index-on-a-type-with-multiple-lifetime-constraints/31902579#31902579", "title": "Implementing Index on a type with multiple lifetime constraints", "body": "<p>There's actually more to your problem and it is not the Index trait implementation. Also, your example is not really a minimal, complete, and verifiable example (<a href=\"https://stackoverflow.com/help/mcve\">MCVE</a>), so I have to guess as to what your exact problem is here.</p>\n\n<p>The core of your problem is, that you cannot have your iterator return a reference, if it owns the content without borrowing the iterator itself. Your implementation of the Index trait for you SubImage is fine.</p>\n\n<p>I will try to simulate your problem. Let's say we have a struct Julmond and it borrows some slice of integers (similar to your SubImage).</p>\n\n<pre><code>struct Julmond&lt;'a&gt;(&amp;'a [i32]);\n\nimpl&lt;'a&gt; Index&lt;usize&gt; for Julmond&lt;'a&gt; {\n    type Output = [i32];\n\n    fn index&lt;'b&gt;(&amp;'b self, idx: usize) -&gt; &amp;'b [i32] {\n        if idx &lt; self.0.len() {\n            &amp;self.0[idx..] // we always take a subslice from idx until the end\n        } else {\n            panic!(\"Index out of bounds!\")\n        }\n    }\n}\n</code></pre>\n\n<p>The Index trait requires that we borrow self. That is fine, since some implementors might own the data you're indexing into. This borrowing of self is expressed by linking the named lifetimes of self and the outgoing reference in the traits <a href=\"http://doc.rust-lang.org/nightly/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\">method signature</a>:</p>\n\n<pre><code>fn index(&amp;'a self, index: Idx) -&gt; &amp;'a Self::Output;\n</code></pre>\n\n<p>If we index into a Julmond, that value is considered borrowed as long as we hold on to the resulting reference into the Julmond:</p>\n\n<pre><code>let array = [1, 2, 3, 4, 5, 6];\nlet mut j = Julmond(&amp;array);\n\nlet r = &amp;j[3];\n\n&amp;mut j; // Error: r is still in scope and therefore j is still borrowed\n</code></pre>\n\n<p>What I can read from your example code is that you have some type that owns your SubImage and implements the Iterator trait. We will try to mimic that with another struct Nebelung implementing the Iterator trait on the way:</p>\n\n<pre><code>struct Nebelung&lt;'a&gt; {\n    j: Julmond&lt;'a&gt;,\n    pos: usize,\n}\n\nimpl&lt;'a&gt; Iterator for Nebelung&lt;'a&gt; {\n    type Item = &amp;'a [i32];\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a [i32]&gt; {\n        if self.pos &lt; self.j.0.len() {\n            let tmp_pos = self.pos;\n            self.pos += 1;\n            Some(&amp;self.j[tmp_pos]) // problematic line\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>This implementation returns an ever shrinking slice of the array from the underlying Julmond struct. We can test it like this:</p>\n\n<pre><code>fn main() {\n    let array = [1, 2, 3, 4, 5, 6];\n    let j = Julmond(&amp;array);\n    let n = Nebelung { j: &amp;j, pos: 0 };\n\n    for s in n {\n        println!(\"{:?}\", s);\n    }\n}\n</code></pre>\n\n<p>But this doesn't work. The compiler will complain (like in your example) that it cannot infer an appropriate lifetime for 'a. The reason is the borrow of self in the index method. When we call the index operator with j[tmp_pos] we are borrowing j. But j is owned by self of type Nebelung and so borrowing from j means we are borrowing from self. We are trying to return a reference to something that is owned by self and that requires that self has to be borrowed as well. The compiler suggests the right thing: linking the lifetimes of self and the outgoing reference. However, this violates the method signature of next.</p>\n\n<p>If we want to return a reference from an iterator, that iterator cannot own the returned value. Otherwise, we would have to borrow the iterator in the call but that is not possible with next.</p>\n\n<p>The only way around this, is having the iterator NOT own the value. So we modify the Nebelung struct to hold a reference to a Julmond:</p>\n\n<pre><code>struct Nebelung&lt;'a: 'b, 'b&gt; {\n    j: &amp;'b Julmond&lt;'a&gt;,\n    pos: usize,\n}\n</code></pre>\n\n<p>The 'a: 'b means that \"'a outlives 'b\" and it is required here. Since our reference j to a Julmond must not outlive the borrowed content of the Julmond. Ok great, our Nebelung is not the owner of the Julmond anymore. Just a borrower. Now we can implement the Iterator trait for it like this:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Iterator for Nebelung&lt;'a, 'b&gt; {\n    type Item = &amp;'b [i32];\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'b [i32]&gt; {\n        if self.pos &lt; self.j.0.len() {\n            let tmp_pos = self.pos;\n            self.pos += 1;\n            Some(&amp;self.j[tmp_pos])\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>The lifetimes of self and the outgoing reference are not required to be linked, since we are just returning a reference to some value which we are not the owner of. So the call to &amp;self.j[tmp_pos] is not a borrow from self anymore. It is a borrow from the Julmond (via the index implementation).</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8d3efa917a6458bde5b1&amp;version=nightly\" rel=\"nofollow noreferrer\">Complete example</a></p>\n\n<p>Whatever type you are implementing the Iterator trait for. You cannot have next (or next_back) return a reference if the type owns the value. Have your type borrow the SubImage instead.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user813022"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 882, "favorite_count": 2, "accepted_answer_id": 31902579, "answer_count": 1, "score": 2, "last_activity_date": 1439130188, "creation_date": 1439096279, "last_edit_date": 1439130029, "question_id": 31901040, "link": "https://stackoverflow.com/questions/31901040/implementing-index-on-a-type-with-multiple-lifetime-constraints", "title": "Implementing Index on a type with multiple lifetime constraints", "body": "<p>I've run into a problem implementing <code>Index</code> on a type with a lifetime constraint. I have a <code>SubImage</code> struct which contains a reference to an <code>Image</code>. I can't find any way to satisfy the compiler.</p>\n\n<pre><code>    impl&lt;'a, P&gt; Index&lt;usize&gt; for SubImage&lt;'a, P&gt; {\n      type Output = [P];\n\n      fn index&lt;'b&gt; (&amp;'b self, y: usize) -&gt; &amp;'b [P] {\n        let start = (self.rect.y0 + y) * self.image.size.x + self.rect.x0;\n        let end = start + self.rect.width();\n        &amp;self.image.buf[start..end]\n      }\n    }\n</code></pre>\n\n<p><code>'a</code> is the lifetime of the referenced image, so slicing its buffer requires this constraint. The code here compiles, but it is ambiguous. All calls to the index operator result an an error message such as:</p>\n\n<pre><code>    src/image.rs:179:13: 179:32 error: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to conflicting requirements\n    src/image.rs:179       Some(&amp;self.sub[self.back])\n                                 ^~~~~~~~~~~~~~~~~~~\n    src/image.rs:174:3: 181:4 help: consider using an explicit lifetime parameter as shown: fn next_back(&amp;'a mut self) -&gt; Option&lt;&amp;'a [P]&gt;\n    src/image.rs:174   fn next_back (&amp;mut self) -&gt; Option&lt;&amp;'a [P]&gt; {\n    src/image.rs:175     if self.front == self.back {\n    src/image.rs:176       None\n    src/image.rs:177     } else {\n    src/image.rs:178       self.back -= 1;\n    src/image.rs:179       Some(&amp;self.sub[self.back])\n</code></pre>\n\n<p>Is there any possible way to ensure that the return value is constrained to both <code>'a</code> and <code>'b</code> or some other way to implement <code>Index</code> properly in a situation like this? The compiler's suggestion doesn't work because the function signature doesn't match that of the trait.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439067322, "post_id": 31897986, "comment_id": 51712077, "body": "Added a more detailed description of what i&#39;m going for. I have a feeling it should be possible."}], "answers": [{"comments": [{"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1439121282, "post_id": 31898593, "comment_id": 51722155, "body": "Actually I&#39;ve stumbled upon an issue with this approach. As far as I understand is not possible to have an array of such Players without using Boxed values. For example <code>let arr = vec![Player { health: WimpyHealth(128) }, Player { health: BuffHealth(128) }];</code> would fail because the the first player instance and the second one have different types."}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1439121732, "post_id": 31898593, "comment_id": 51722262, "body": "I&#39;m looking for a way to store each component contiguously in an array, will a Vec&lt;Box&lt;Player&gt;&gt; store the Players next to each other on the heap? I&#39;ll look for the answer myself, but i&#39;ll leave this question here, for context."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1439197319, "post_id": 31898593, "comment_id": 51743916, "body": "@6D65 not necessarily, to do this sort of thing (contiguous component storage in a vector) you&#39;re going to have to either use a big enum for your components or resort to things like mem::transmute and other unsafe features."}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1439223522, "post_id": 31898593, "comment_id": 51761480, "body": "@Jsor yeah. i&#39;m just thinking to go the C way to have an array for each type of Component. The entity would be an index into these arrays. Will have to think how to make it less ugly. This will probably help with having a contiguous array."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1439131371, "last_edit_date": 1439131371, "creation_date": 1439068003, "answer_id": 31898593, "question_id": 31897986, "link": "https://stackoverflow.com/questions/31897986/is-there-an-idiomatic-way-to-implement-the-component-pattern/31898593#31898593", "title": "Is there an idiomatic way to implement the component pattern?", "body": "<p>It sounds like you are just asking about traits, multiple concrete implementations of that trait, and a wrapper object that restricts itself to types that implement that trait. Optionally, the container can implement the trait by delegating it to the inner object.</p>\n\n<pre><code>trait Health {\n    fn life(&amp;self) -&gt; u8;\n    fn hit_for(&amp;mut self, lost_life: u8);\n}\n\n#[derive(Debug, Copy, Clone)]\nstruct WimpyHealth(u8);\nimpl Health for WimpyHealth {\n    fn life(&amp;self) -&gt; u8 { self.0 }\n    fn hit_for(&amp;mut self, lost_life: u8) { self.0 -= lost_life * 2; }\n}\n\n#[derive(Debug, Copy, Clone)]\nstruct BuffHealth(u8);\nimpl Health for BuffHealth {\n    fn life(&amp;self) -&gt; u8 { self.0 }\n    fn hit_for(&amp;mut self, lost_life: u8) { self.0 -= lost_life / 2; }\n}\n\n#[derive(Debug, Copy, Clone)]\nstruct Player&lt;H&gt; {\n    health: H,\n}\n\nimpl&lt;H&gt; Health for Player&lt;H&gt;\n    where H: Health\n{\n    fn life(&amp;self) -&gt; u8 { self.health.life() }\n    fn hit_for(&amp;mut self, lost_life: u8) { self.health.hit_for(lost_life) }\n}\n\nfn main() {\n    let mut player_one = Player { health: WimpyHealth(128) };\n    let mut player_two = Player { health: BuffHealth(128) };\n\n    player_one.hit_for(12);\n    player_two.hit_for(12);\n\n    println!(\"{:?}\", player_one);\n    println!(\"{:?}\", player_two);\n}\n</code></pre>\n\n<blockquote>\n  <p>it is not possible to have an array of such Players without using Boxed values</p>\n</blockquote>\n\n<p>That's correct. An array or vector (or any generic type, really) needs to all be of the <em>same</em> type. This is especially important for arrays/vectors because their memory layout is contiguous and each item needs to be at a fixed interval.</p>\n\n<p>If you were allowed to have different types, then you could have one player that had a health that took 1 byte and another player with health that took 2 bytes. Then all the offsets would be incorrect.</p>\n\n<p>You can implement the <code>Health</code> trait for a <code>Box&lt;Health&gt;</code>, and then the <code>Player</code> objects can be stored sequentially, but they would each have a pointer to the appropriate concrete implementation of <code>Health</code> via the box.</p>\n\n<pre><code>impl&lt;H: ?Sized&gt; Health for Box&lt;H&gt;\n    where H: Health\n{\n    fn life(&amp;self) -&gt; u8 { (**self).life() }\n    fn hit_for(&amp;mut self, lost_life: u8) { (**self).hit_for(lost_life) }\n}\n\nfn main() {\n    let mut players = vec![\n        Player { health: Box::new(WimpyHealth(128)) as Box&lt;Health&gt; },\n        Player { health: Box::new(BuffHealth(128)) as Box&lt;Health&gt; }\n    ];\n\n    for player in players.iter_mut() {\n        player.hit_for(42);\n    }\n\n    println!(\"{:?}\", players[0].life());\n    println!(\"{:?}\", players[1].life());\n}\n</code></pre>\n"}], "owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 424, "favorite_count": 2, "accepted_answer_id": 31898593, "answer_count": 1, "score": 4, "last_activity_date": 1439131371, "creation_date": 1439063892, "last_edit_date": 1439130041, "question_id": 31897986, "link": "https://stackoverflow.com/questions/31897986/is-there-an-idiomatic-way-to-implement-the-component-pattern", "title": "Is there an idiomatic way to implement the component pattern?", "body": "<p>Basically a object (struct) is constructed by composing different components. Each concrete component being easily swapped by another component matching the interface (I guess trait).</p>\n\n<p>I'm currently trying to implement with traits which got me into some errors and made me start thinking if this is a common thing in Rust.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// usage example\nfn main() {\n    let obj = MainObject::new(Component1::new(), Component2::new(), Component3());\n    // Where each component is a type(struct) with some well predefined methods.\n}\n</code></pre>\n\n<p>The main idea behind this is to implement the Component pattern commonly used in games. Basically the game would contain a lot of different objects, with slight variations in behavior and contained data. Instead of having a big class hierarchy, the objects are composed of standard components, more complete example would be.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct Container\n{\n   input: InputHandlerComponent, // Probably a trait\n   physics: PhysicsComponent,  // Probably a trait\n   renderer: RendererCompoent // Probably a trait\n}\n\nimpl Container {\n  fn new(p: PhysicsComponent, i: InputComponent, r: RenderComponent) -&gt; Container {\n    Container {input: i, physics: p, renderer: r}\n }\n}\n\nstruct ConcretePhysicsComponent;\nimpl PhysicsComponent for ConcretePhysicsComponent\n{\n  // ...\n}\n\nstruct ConcreteInputComponent;\nimpl InputComponent for ConcreteInputComponent\n{\n  // ...\n}\n\nstruct ConcreteRendererComponent;\nimpl RendererComponent for ConcreteRendererComponent\n{\n  // ...\n}\n\nstruct AnotherConcreteRendererComponent;\nimpl RendererComponent for AnotherConcreteRendererComponent\n{\n  // ...\n}\n\n// usage example\nfn main() {\n    let obj = Container::new(ConcreteInputComponent::new(), ConcretePhysicsComponent::new(), ConcreteRendererComponent::new());\n    // Where each component is a type(struct) with some well predefined methods.\n\n    // This is a slightly modified version of this object, with changed rendering behaviour\n    let obj2 = Container::new(ConcreteInputComponent::new(), ConcretePhysicsComponent::new(), AnotherConcreteRendererComponent::new());    }\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1439060290, "post_id": 31897330, "comment_id": 51710264, "body": "Not entirely sure what you&#39;re looking for, but does changing your second line to <code>fn new() -&gt; Self;</code> do what you want?"}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1439060549, "post_id": 31897330, "comment_id": 51710337, "body": "Yeah. It works indeed. And it kind of does what I wanted. Could you please reply and i&#39;ll accept it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439067154, "post_id": 31897330, "comment_id": 51712038, "body": "Please note that the Rust style is 4-space indentation."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1439119966, "post_id": 31897330, "comment_id": 51721799, "body": "Traits <code>Default</code> and <code>From</code> exist entirely for their constructor functions."}], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 17, "last_activity_date": 1439060787, "creation_date": 1439060787, "answer_id": 31897530, "question_id": 31897330, "link": "https://stackoverflow.com/questions/31897330/is-it-possible-to-have-a-constructor-function-in-a-trait/31897530#31897530", "title": "Is it possible to have a constructor function in a trait?", "body": "<p>You need to use the <code>Self</code> type. In trait declarations, <code>Self</code> refers to the type that implements a trait. In your case, the trait declaration should look as follows:</p>\n\n<pre><code>trait A {\n    fn new() -&gt; Self; // Self stands for any type implementing A\n}\n</code></pre>\n\n<p>Your original version is subtly different because it will return a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\">trait object</a>, not a value of the implementor type.</p>\n"}], "owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4307, "favorite_count": 0, "accepted_answer_id": 31897530, "answer_count": 1, "score": 12, "last_activity_date": 1439067134, "creation_date": 1439059445, "last_edit_date": 1439067134, "question_id": 31897330, "link": "https://stackoverflow.com/questions/31897330/is-it-possible-to-have-a-constructor-function-in-a-trait", "title": "Is it possible to have a constructor function in a trait?", "body": "<p>I'm trying to find examples for constructor functions in traits, but haven't had much luck. Is this a idiomatic thing to do in Rust?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait A {\n    fn new() -&gt; A;\n}\n\nstruct B;\nimpl A for B {\n    fn new() -&gt; B {\n        B\n    }\n}\n\nfn main() {\n    println!(\"message\")\n}\n</code></pre>\n\n\n\n<pre><code>&lt;anon&gt;:7:8: 9:9 error: method `new` has an incompatible type for trait: expected trait A, found struct `B` [E0053]\n&lt;anon&gt;:7        fn new() -&gt; B {\n&lt;anon&gt;:8          B\n&lt;anon&gt;:9        }\n&lt;anon&gt;:7:8: 9:9 help: see the detailed explanation for E0053\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>Casting this returns a core::marker::Sized related error.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait A {\n    fn new() -&gt; A;\n}\n\nstruct B;\nimpl A for B {\n    fn new() -&gt; A {\n        B as A\n    }\n}\n\nfn main() {\n    println!(\"message\")\n}\n</code></pre>\n\n\n\n<pre><code>&lt;anon&gt;:8:10: 8:16 error: cast to unsized type: `B` as `A`\n&lt;anon&gt;:8          B as A\n                  ^~~~~~\n&lt;anon&gt;:8:10: 8:11 help: consider using a box or reference as appropriate\n&lt;anon&gt;:8          B as A\n                  ^\n&lt;anon&gt;:7:20: 7:21 error: the trait `core::marker::Sized` is not implemented for the type `A + 'static` [E0277]\n&lt;anon&gt;:7        fn new() -&gt; A {\n                            ^\n&lt;anon&gt;:7:20: 7:21 note: `A + 'static` does not have a constant size known at compile-time\n&lt;anon&gt;:7        fn new() -&gt; A {\n                            ^\nerror: aborting due to 2 previous errors\nplaypen: application terminated with error code 101\n</code></pre>\n"}, {"tags": ["windows", "openssl", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439066994, "post_id": 31896165, "comment_id": 51711988, "body": "Just to clarify, you can run <code>gcc</code> in the same shell that you are running <code>cargo</code> in, correct?"}, {"owner": {"reputation": 485, "user_id": 2893728, "user_type": "registered", "accept_rate": 61, "profile_image": "https://i.stack.imgur.com/8CJgl.png?s=128&g=1", "display_name": "mgluesenkamp", "link": "https://stackoverflow.com/users/2893728/mgluesenkamp"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439069070, "post_id": 31896165, "comment_id": 51712500, "body": "Yes, this is correct."}], "answers": [{"tags": [], "owner": {"reputation": 1, "user_id": 4348325, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9Czgl.png?s=128&g=1", "display_name": "hi5dao", "link": "https://stackoverflow.com/users/4348325/hi5dao"}, "is_accepted": false, "score": 0, "last_activity_date": 1440519018, "last_edit_date": 1440519018, "creation_date": 1440518615, "answer_id": 32208817, "question_id": 31896165, "link": "https://stackoverflow.com/questions/31896165/error-building-openssl-sys-crate-on-windows/32208817#32208817", "title": "Error building openssl-sys crate on Windows", "body": "<p>1) Download ssl</p>\n\n<blockquote>\n  <p>Installs Win32 OpenSSL v1.0.2d</p>\n</blockquote>\n\n<p>Install it here: C:\\OpenSSL-Win32\uff0cC:\\OpenSSL-Win32\\include,C:\\OpenSSL-Win32\\lib</p>\n\n<p>2) Install MinGW,and add system env path ,,C:\\MinGW\\bin,important,MinGW's installed path contain char 'MinGW '</p>\n\n<p>3) <code>cmd run env OPENSSLLIBDIR=C:/OpenSSL-Win32/lib OPENSSLINCLUDEDIR=C:/OpenSSL-Win32/include cargo build</code></p>\n"}], "owner": {"reputation": 485, "user_id": 2893728, "user_type": "registered", "accept_rate": 61, "profile_image": "https://i.stack.imgur.com/8CJgl.png?s=128&g=1", "display_name": "mgluesenkamp", "link": "https://stackoverflow.com/users/2893728/mgluesenkamp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1143, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1440519018, "creation_date": 1439051648, "last_edit_date": 1439066892, "question_id": 31896165, "link": "https://stackoverflow.com/questions/31896165/error-building-openssl-sys-crate-on-windows", "title": "Error building openssl-sys crate on Windows", "body": "<p>I am trying to compile a Rust program on Windows, but I get this error message:</p>\n\n<pre><code>Compiling openssl-sys v0.6.4\nfailed to run custom build command for `openssl-sys v0.6.4`\n\n[...]\n\nfailed to execute command: The system couldn't find the specified file. (os error 2)\nIs `gcc` not installed? (see https://github.com/alexcrichton/gcc-rs#windows-notes for help)\n\n--- stderr\nthread '&lt;main&gt;' panicked at 'explicit panic', C:\\Users\\User\\.cargo\\registry\\src\\github.com-0a35038f75765ae4\\gcc-0.3.12\\src\\lib.rs:510\n</code></pre>\n\n<p>Cargo compiled every other package without problem, but it can't compile the openssl package.</p>\n\n<p>I searched for help with this specific error and found a <a href=\"https://github.com/hyperium/hyper/issues/607\" rel=\"nofollow\">github issue for hyperium</a>. The first answer references the <a href=\"https://github.com/sfackler/rust-openssl#windows\" rel=\"nofollow\">openssl building guide for Windows</a>.</p>\n\n<p>I don't understand exactly how I have to build openssl in Windows. I installed MinGW and added the bin path to the global <code>PATH</code> variable, so gcc is reachable, but this did not solve the error.</p>\n\n<p>I use Rust 1.2 and Cargo 0.4.0. <a href=\"https://github.com/LukasKalbertodt/telegram-bot/blob/master/examples/simple.rs\" rel=\"nofollow\">My project</a> is an example for a Telegram API wrapper.</p>\n"}, {"tags": ["types", "rust", "private", "encapsulation", "public"], "comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1439050727, "post_id": 31895960, "comment_id": 51707396, "body": "Actually, the wrapper class solution would be pretty good if Rust had something like GeneralizedNewtypeDeriving.  Does it?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1439054683, "post_id": 31895960, "comment_id": 51708542, "body": "Since it&#39;s only one trait with one method that needs to be implemented here, the wrapper solution seems accepted (though not ideal, obviously)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1439055687, "post_id": 31895960, "comment_id": 51708872, "body": "alternatively box the iterator: <code>type IntoIter = Box&lt;Iterator&lt;Item=Literal&gt;&gt;</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439067227, "post_id": 31895960, "comment_id": 51712057, "body": "@dspyz sadly, it doesn&#39;t have that functionality (yet?). I&#39;d love something to help with delegation in general and wrapper structs in particular though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439158543, "post_id": 31895960, "comment_id": 51732587, "body": "This question <a href=\"http://stackoverflow.com/a/24835982/155423\">talks a bit more</a> about <code>GeneralizedNewtypeDeriving</code>."}], "answers": [{"comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 1, "creation_date": 1439085724, "post_id": 31898379, "comment_id": 51715496, "body": "Iterator has tons of methods.  For optimal performance, shouldn&#39;t I have implementations of all of them?  At least I should have size_hint, shouldn&#39;t I?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1439132913, "post_id": 31898379, "comment_id": 51725090, "body": "@dspyz good question! <a href=\"https://github.com/rust-lang/rust/issues/24214\" rel=\"nofollow noreferrer\">Right now</a>, there aren&#39;t many types in the standard library that effectively implement the iterator methods themselves. However, I think you are right that for better performance, you would forward all those methods to the inner field. I think this is what your <code>GeneralizedNewtypeDeriving</code> would help with..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1486849208, "last_edit_date": 1495540902, "creation_date": 1439066647, "answer_id": 31898379, "question_id": 31895960, "link": "https://stackoverflow.com/questions/31895960/hide-private-type-in-exported-signature/31898379#31898379", "title": "Hide private type in exported signature", "body": "<p>No, you cannot hide a private type in a public method. It's public, which means that people need to see it.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/31895960/hide-private-type-in-exported-signature#comment51708542_31895960\">delnan mentions</a>, the wrapper struct is common for iterators. It also happens to have zero runtime cost:</p>\n\n<pre><code>struct Iter&lt;'a&gt;(FilterMap&lt;slice::Iter&lt;'a, AtomWord&gt;, fn(&amp;AtomWord) -&gt; Option&lt;Literal&gt;&gt;);\n\nimpl&lt;'a&gt; Iterator for Iter&lt;'a&gt; {\n    type Item = Literal;\n    fn next(&amp;mut self) -&gt; Option&lt;Literal&gt; {\n        self.0.next()\n    }\n}\n\nimpl&lt;'a&gt; IntoIterator for &amp;'a NoGood {\n    type Item = Literal;\n    type IntoIter = Iter;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        Iter((&amp;self.lits).into_iter().filter_map(as_opt_lit))\n    }\n}\n</code></pre>\n\n<p>And as <a href=\"https://stackoverflow.com/questions/31895960/hide-private-type-in-exported-signature#comment51708872_31895960\">ker mentions</a>, you can box it. This saves programmer typing time, but at the expense of runtime memory allocation:</p>\n\n<pre><code>impl&lt;'a&gt; IntoIterator for &amp;'a NoGood {\n    type Item = Literal;\n    type IntoIter = Box&lt;Iterator&lt;Item = Literal&gt;&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        Box::new((&amp;self.lits).into_iter().filter_map(as_opt_lit))\n    }\n}\n</code></pre>\n\n<p>Note that I haven't tried compiling any of these because you didn't provide an <a href=\"/help/mcve\">MCVE</a> and thus your code doesn't compile anyway.</p>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1486849208, "creation_date": 1439050309, "last_edit_date": 1439066036, "question_id": 31895960, "link": "https://stackoverflow.com/questions/31895960/hide-private-type-in-exported-signature", "title": "Hide private type in exported signature", "body": "<p>In this example, <code>NoGood</code> is pub, and <code>AtomWord</code> is private.</p>\n\n<p>I'd like to export an instance of <code>IntoIterator</code>, but I can't because this huge type definition for <code>IntoIter</code> includes a reference to <code>AtomWord</code>.</p>\n\n<p>I realize I could create an <code>Iterator</code> wrapper that just passes calls through to the underlying iterator, but that's a lot of boilerplate. I can't think of any way to make the wrapper class generic (without defeating the purpose, which is to hide the <code>AtomWord</code> type).</p>\n\n<pre><code>impl &lt;'a&gt; IntoIterator for &amp;'a NoGood {\n    type Item = Literal;\n    type IntoIter = FilterMap&lt;slice::Iter&lt;'a, AtomWord&gt;, fn(&amp;AtomWord) -&gt; Option&lt;Literal&gt;&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        (&amp;self.lits).into_iter().filter_map(as_opt_lit)\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1438971901, "post_id": 31884309, "comment_id": 51686236, "body": "How are we supposed to know what <code>rdr.records</code> is? Please make sure you create an <a href=\"/help/mcve\">MCVE</a> when asking questions on Stack Overflow."}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1438972193, "post_id": 31884309, "comment_id": 51686396, "body": "because you&#39;re trying to move instead of use a reference, <code>|mut acc, item|</code> will move which you probably don&#39;t want but rather a <code>&amp;</code> ref"}, {"owner": {"reputation": 4143, "user_id": 168839, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/00f571db651544b0a58c99c79c34d3e2?s=128&d=identicon&r=PG", "display_name": "Christopher Davies", "link": "https://stackoverflow.com/users/168839/christopher-davies"}, "edited": false, "score": 0, "creation_date": 1438975341, "post_id": 31884309, "comment_id": 51687950, "body": "The type of rdr doesn&#39;t seem to be the problem, which is why I left it out. But as for the ref, I have tried that, and it gives me other errors. I&#39;ll post the details in a bit."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1439047798, "post_id": 31884309, "comment_id": 51706613, "body": "Why fold at all? A mutating loop is much more obvious: <code>let mut hmap = HashMap::&lt;String, _&gt;::new(); for _ in &amp;[1, 2, 3] { *hmap.entry(&quot;foo&quot;.into()).or_insert(0) += 1; }</code>."}, {"owner": {"reputation": 4143, "user_id": 168839, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/00f571db651544b0a58c99c79c34d3e2?s=128&d=identicon&r=PG", "display_name": "Christopher Davies", "link": "https://stackoverflow.com/users/168839/christopher-davies"}, "edited": false, "score": 0, "creation_date": 1439084836, "post_id": 31884309, "comment_id": 51715377, "body": "Because I&#39;m doing essentially a reduce. Taking a list and reducing it to a single value, even though that value is a dictionary. I do like your approach, though. Maybe Rob Pike is right, and people should stop using filter/map/reduce and just use for loops properly!"}], "answers": [{"comments": [{"owner": {"reputation": 4143, "user_id": 168839, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/00f571db651544b0a58c99c79c34d3e2?s=128&d=identicon&r=PG", "display_name": "Christopher Davies", "link": "https://stackoverflow.com/users/168839/christopher-davies"}, "edited": false, "score": 1, "creation_date": 1438979247, "post_id": 31885788, "comment_id": 51689855, "body": "Thanks! That makes total sense. I assumed rust would know that counter would got out of scope once acc was returned, so there wouldn&#39;t be an issue. But I can see how it might not have known that."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 20, "last_activity_date": 1543105377, "last_edit_date": 1543105377, "creation_date": 1438977851, "answer_id": 31885788, "question_id": 31884309, "link": "https://stackoverflow.com/questions/31884309/how-to-fold-using-a-hashmap-as-an-accumulator/31885788#31885788", "title": "How to fold using a HashMap as an accumulator?", "body": "<p>You cannot return <code>acc</code> from the closure because you have a mutable borrow to it that still exists (<code>counter</code>).</p>\n\n<p>This is a limitation of the Rust compiler (specifically the <em>borrow checker</em>). When <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a> are enabled, your original code will work: </p>\n\n<pre><code>#![feature(nll)]\n\nuse std::collections::HashMap;\n\nfn main() {\n    let hmap = vec![1, 2, 3].iter().fold(HashMap::new(), |mut acc, _| {\n        let counter = acc.entry(\"foo\".to_string()).or_insert(0);\n        *counter += 1;\n        acc\n    });\n\n    println!(\"{:?}\", hmap);\n}\n</code></pre>\n\n<p>Before NLL, the compiler is overly conservative about how long a borrow will last. To work around this, you can introduce a new scope to constrain the mutable borrow:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let hmap = vec![1, 2, 3].iter().fold(HashMap::new(), |mut acc, _| {\n        {\n            let counter = acc.entry(\"foo\".to_string()).or_insert(0);\n            *counter += 1;\n        }\n        acc\n    });\n\n    println!(\"{:?}\", hmap);\n}\n</code></pre>\n\n<p>You can also prevent the borrow from lasting beyond the line it's needed in:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let hmap = vec![1, 2, 3].iter().fold(HashMap::new(), |mut acc, _| {\n        *acc.entry(\"foo\".to_string()).or_insert(0) += 1;\n        acc\n    });\n\n    println!(\"{:?}\", hmap);\n}\n</code></pre>\n\n<blockquote>\n  <p>I assumed Rust would know that <code>counter</code> would go out of scope once <code>acc</code> was returned</p>\n</blockquote>\n\n<p>This is understandable and relates to the non-lexical lifetimes discussion.  The \"good\" news is that Rust is being consistent about how references work when the thing being referenced moves. In this case, you are moving the accumulator into an \"output slot\". You can see this with plain functions as well:</p>\n\n<pre><code>fn foo(mut s: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n    let borrow = &amp;mut s[0];\n    s\n}\n\nfn main() {}\n</code></pre>\n\n<p>But really, it's the same as moving a referred-to variable at all:</p>\n\n<pre><code>fn main() {\n    let mut s = Vec::&lt;u8&gt;::new();\n    let borrow = &amp;mut s[0];\n    let s2 = s;\n}\n</code></pre>\n\n<p>Both of these fail before NLL and work afterwards.</p>\n"}], "owner": {"reputation": 4143, "user_id": 168839, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/00f571db651544b0a58c99c79c34d3e2?s=128&d=identicon&r=PG", "display_name": "Christopher Davies", "link": "https://stackoverflow.com/users/168839/christopher-davies"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3644, "favorite_count": 1, "accepted_answer_id": 31885788, "answer_count": 1, "score": 12, "last_activity_date": 1543105377, "creation_date": 1438971776, "last_edit_date": 1438975574, "question_id": 31884309, "link": "https://stackoverflow.com/questions/31884309/how-to-fold-using-a-hashmap-as-an-accumulator", "title": "How to fold using a HashMap as an accumulator?", "body": "<p>This code works:</p>\n\n<pre><code>let stdin = std::io::stdin();\nlet mut rdr = csv::Reader::from_reader(stdin);\nlet mut hmap = HashMap::&lt;String, u64&gt;::new();\n\nrdr.records()\n    .map(|r| r.unwrap())\n    .fold((), |_, item| {\n        // TODO: Is there a way not to have to copy item[col] every time?\n        let counter = hmap.entry(item[col].to_string()).or_insert(0);\n        *counter += 1;\n    });\n</code></pre>\n\n<p>This code fails with the message: \"cannot move out of <code>acc</code> because it is borrowed\"</p>\n\n<pre><code>let stdin = std::io::stdin();\nlet mut rdr = csv::Reader::from_reader(stdin);\nlet hmap = rdr.records()\n    .map(|r| r.unwrap())\n    .fold(HashMap::&lt;String, u64&gt;::new(), |mut acc, item| {\n        // TODO: Is there a way not to have to copy item[col] every time?\n        let counter = acc.entry(item[col].to_string()).or_insert(0);\n        *counter += 1;\n        acc\n    });\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1438958588, "last_edit_date": 1438958588, "creation_date": 1438958073, "answer_id": 31880320, "question_id": 31879763, "link": "https://stackoverflow.com/questions/31879763/what-should-be-the-return-type-of-iter-cloned-filter-map/31880320#31880320", "title": "What should be the return type of iter().cloned().filter().map()", "body": "<p>I'm sure that this question has been asked a lot on Stackoverflow but I can't find any, so here you go.</p>\n\n<p>In Rust unboxed closures have <em>anonymous</em> types generated by the compiler. Therefore, there is <em>no</em> way to specify them in type signatures. This means that it is impossible to return unboxed closures by value.</p>\n\n<p>The usual solution is to box the return value:</p>\n\n<pre><code>pub fn get_iter_names(&amp;self) -&gt; Box&lt;Iterator&lt;Item=???&gt;&gt; {\n    Box::new(self.nodes.iter().cloned()\n        .filter(|x| x.is_some())\n        .map(|x| x.unwrap().name))\n}\n</code></pre>\n\n<p>You should specify whatever type <code>name</code> field has instead of <code>???</code> (I can't deduce it from your code alone).</p>\n\n<p>There is <a href=\"https://github.com/rust-lang/rfcs/pull/105\">an RFC</a> to allow returning unboxed values implementing some trait but it was postponed. According to the discussion in that RFC PR, it looks like that there is at least some work is done on this recently, so it may be available in Rust (relatively) soon.</p>\n"}], "owner": {"reputation": 1281, "user_id": 680794, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/fc0bbdeb0c23ceb9afbf2a658fc888f2?s=128&d=identicon&r=PG", "display_name": "Alex Botev", "link": "https://stackoverflow.com/users/680794/alex-botev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 257, "favorite_count": 0, "closed_date": 1439037096, "accepted_answer_id": 31880320, "answer_count": 1, "score": 4, "last_activity_date": 1438958588, "creation_date": 1438956595, "question_id": 31879763, "link": "https://stackoverflow.com/questions/31879763/what-should-be-the-return-type-of-iter-cloned-filter-map", "closed_reason": "Duplicate", "title": "What should be the return type of iter().cloned().filter().map()", "body": "<p>So I'm returning an iterator in the following way:</p>\n\n<pre><code>pub fn get_iter_names(&amp;self) -&gt; ??? {\nself.nodes.iter().cloned()\n    .filter(|x| x.is_some())\n    .map(|x| x.unwrap().name)\n}\n</code></pre>\n\n<p>where <code>self.nodes</code> is a <code>Vec&lt;Option&lt;Node&gt;&gt;</code> and <code>Node</code> has a filed <code>name</code>. The question is what should be the return type. My compiler says <code>core::iter::Map&lt;core::iter::Filter&lt;core::iter::Cloned&lt;core::slice::Iter&lt;'_, core::option::Option&lt;core::node::ComputeNode&gt;&gt;&gt;, [closure@src/core/graph.rs:931:12: 931:27]&gt;, [closure@src/core/graph.rs:932:9: 932:28]&gt;</code>, but the problem is that I do not know how to specify a clousure as a type?</p>\n\n<p>What is the correct way to do this anyway?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1438934919, "creation_date": 1438934919, "answer_id": 31872676, "question_id": 31872486, "link": "https://stackoverflow.com/questions/31872486/how-to-move-clone-values-from-one-list-to-another/31872676#31872676", "title": "How to move/clone values from one list to another?", "body": "<p>Lifetimes start at the variable declaration. Since your <code>points</code> variable is created before the <code>existing</code> variable, <code>points</code> is not allowed to have any references to <code>existing</code>, because <code>existing</code> will be dropped before <code>points</code>.</p>\n\n<p>The second issue is that you are iterating over values, which will further limit the lifetime of the Strings to the loop-body.</p>\n\n<p>The easy solution is to swap the two declarations and change the loop to iterate over references instead of values:</p>\n\n<pre><code>let existing : Vec&lt;(String, String)&gt; = Vec::new();\nlet mut points : Vec&lt;(&amp;str, &amp;str)&gt; = Vec::new();\n\nfor t in &amp;existing {\n    points.push((&amp;t.0, &amp;t.1));\n}\n</code></pre>\n"}], "owner": {"reputation": 1508, "user_id": 1473140, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/4e5523fa2c0d564764f3144815f8943d?s=128&d=identicon&r=PG", "display_name": "Sergey Kamardin", "link": "https://stackoverflow.com/users/1473140/sergey-kamardin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 31872676, "answer_count": 1, "score": 0, "last_activity_date": 1438934919, "creation_date": 1438934310, "last_edit_date": 1438934640, "question_id": 31872486, "link": "https://stackoverflow.com/questions/31872486/how-to-move-clone-values-from-one-list-to-another", "title": "How to move/clone values from one list to another?", "body": "<p>Im just trying to make something like this:</p>\n\n<pre><code>fn main() {\n    let mut points : Vec&lt;(&amp;str, &amp;str)&gt; = Vec::new();\n    let existing : Vec&lt;(String, String)&gt; = Vec::new();\n\n    for t in existing {\n      points.push((&amp;t.0[..], &amp;t.1[..]));\n    }\n}\n</code></pre>\n\n<p>And got an error:</p>\n\n<pre><code>main.rs:6:21: 6:24 error: `t.0` does not live long enough                                                                                                                                                                                                                                                     \nmain.rs:6       points.push((&amp;t.0[..], &amp;t.1[..]));   \n</code></pre>\n\n<p>How could I do this in Rust?</p>\n\n<p>Thanks!</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438939343, "post_id": 31866620, "comment_id": 51666210, "body": "you might be interested in <a href=\"https://github.com/rust-lang/rfcs/issues/1215\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1215</a>"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 1, "last_activity_date": 1438900308, "creation_date": 1438900308, "answer_id": 31866859, "question_id": 31866620, "link": "https://stackoverflow.com/questions/31866620/more-specific-self-in-function-declaration/31866859#31866859", "title": "More specific self in function declaration", "body": "<p>No, it\u2019s not possible to do that. See if you can rearrange things in some other manner, like taking the specific fields that you need by mutable reference instead of all of <code>self</code>. If it\u2019s a private method, the ergonomic regression doesn\u2019t matter so much, either.</p>\n"}], "owner": {"reputation": 1171, "user_id": 3758543, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a4a349f90341d8d2b1045f6cf8cc54b3?s=128&d=identicon&r=PG&f=1", "display_name": "lhahn", "link": "https://stackoverflow.com/users/3758543/lhahn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "accepted_answer_id": 31866859, "answer_count": 1, "score": 0, "last_activity_date": 1438900308, "creation_date": 1438898848, "question_id": 31866620, "link": "https://stackoverflow.com/questions/31866620/more-specific-self-in-function-declaration", "title": "More specific self in function declaration", "body": "<p>Given this code:</p>\n\n<pre><code>pub fn handle_events(&amp;mut self) {\n    use self::glium::glutin::Event;\n    for ev in self.display.poll_events() {\n        match ev {\n            Event::Closed =&gt; self.state = GameState::Exiting,\n            Event::KeyboardInput(state, _, Some(key))\n                if self.input.keys_pressed.contains_key(&amp;key) =&gt;\n                    self.handle_keyboard(state, key),\n            _ =&gt; (),\n        }\n    }\n}\n\nfn handle_keyboard(&amp;mut self, state: ElementState, key: VirtualKeyCode) {\n    ...\n}\n</code></pre>\n\n<p>Rust complains in <code>self.handle_keyboard(state, key)</code> that I cannot borrow a mutable reference of <code>self</code>, since I already made an immutable borrow of <code>self.display</code> in the line <code>for ev in self.display.poll_events() {</code>.</p>\n\n<p>In the case that I want to modify just a field in <code>self</code> which is not in <code>self.display</code>,  is it possible to specify that to the compiler? It would be something like this:</p>\n\n<pre><code>fn handle_keyboard(&amp;mut self.field, ...)\n</code></pre>\n"}, {"tags": ["rust", "osdev"], "comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 2, "creation_date": 1439300534, "post_id": 31863180, "comment_id": 51796843, "body": "This sounds like a rustc bug; try <a href=\"https://github.com/rust-lang/rust/issues\" rel=\"nofollow noreferrer\">opening an issue</a> on GitHub."}], "answers": [{"tags": [], "owner": {"reputation": 537, "user_id": 3369597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/LWx78.png?s=128&g=1", "display_name": "benaryorg", "link": "https://stackoverflow.com/users/3369597/benaryorg"}, "is_accepted": false, "score": 1, "last_activity_date": 1462492229, "creation_date": 1462492229, "answer_id": 37062079, "question_id": 31863180, "link": "https://stackoverflow.com/questions/31863180/writewrite-fmt-causes-page-fault-on-a-bare-metal/37062079#37062079", "title": "Write::write_fmt causes page fault on a bare metal", "body": "<p>Quoted from the Rust project's <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md\" rel=\"nofollow\">RELEASES.md</a>:</p>\n\n<blockquote>\n  <p><code>fn</code> item types are zero sized, and each <code>fn</code> names a unique type. This will break code that transmutes <code>fn</code>s, so calling <code>transmute</code> on a <code>fn</code> type will generate a warning for a few cycles, then will be converted to an error.</p>\n</blockquote>\n\n<p>This is part of the release notes for <strong>Version 1.9.0</strong> (2016-05-26) so if you are using this version it might be a bug in the std library, if you are on &lt;1.9 you should probably try to copy your code into the <a href=\"https://play.rust-lang.org\" rel=\"nofollow\">playpen</a> and let it generate the assembly so you see where the address actually comes from.</p>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 261, "favorite_count": 0, "answer_count": 1, "score": 14, "last_activity_date": 1462492229, "creation_date": 1438885535, "question_id": 31863180, "link": "https://stackoverflow.com/questions/31863180/writewrite-fmt-causes-page-fault-on-a-bare-metal", "title": "Write::write_fmt causes page fault on a bare metal", "body": "<p>My experimental code crashes when running on bare x86_64-metal (page fault when IDT is not yet set), but works perfectly on aarch64.</p>\n\n<p>By careful tracing I figured out that the cause of this page fault consists of corrupted address (much higher than 0x200_000, while only the first 2M page is yet mapped as 1:1) of function \"f\" passed as an argument to core::fmt::ArgumentV1::new() function:</p>\n\n<pre><code>#[doc(hidden)]\n#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\npub fn new&lt;'b, T&gt;(x: &amp;'b T,\n                  f: fn(&amp;T, &amp;mut Formatter) -&gt; Result) -&gt; ArgumentV1&lt;'b&gt; {\n    unsafe {\n        ArgumentV1 {\n            formatter: mem::transmute(f),\n            value: mem::transmute(x)\n        }\n    }\n} \n</code></pre>\n\n<p>AFAIK this value is hard-coded by rustc compiler being result of compile-time processing of format_args! variadic arguments.</p>\n\n<p>Maybe you have suggestions what's wrong with this case. Thanks.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 61736, "user_id": 43846, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/TGOxx.png?s=128&g=1", "display_name": "stuartd", "link": "https://stackoverflow.com/users/43846/stuartd"}, "edited": false, "score": 3, "creation_date": 1438877549, "post_id": 31860718, "comment_id": 51641039, "body": "So have you run <code>rustc --explain E0243</code> as suggested in the error message?"}, {"owner": {"reputation": 171938, "user_id": 2684539, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c5fff6fb65e95570ad1a90fe1e3522e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarod42", "link": "https://stackoverflow.com/users/2684539/jarod42"}, "edited": false, "score": 0, "creation_date": 1438877625, "post_id": 31860718, "comment_id": 51641098, "body": "Btw, <code>paint</code> modify self position and should be <code>mut</code> (or shouldn&#39;t modify self)."}], "answers": [{"comments": [{"owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 0, "creation_date": 1438878913, "post_id": 31860860, "comment_id": 51641884, "body": "This is a good answer. I posted using <code>RgbImage</code> because why re-invent the wheel?"}], "tags": [], "owner": {"reputation": 171938, "user_id": 2684539, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c5fff6fb65e95570ad1a90fe1e3522e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarod42", "link": "https://stackoverflow.com/users/2684539/jarod42"}, "is_accepted": false, "score": 3, "last_activity_date": 1438877789, "creation_date": 1438877789, "answer_id": 31860860, "question_id": 31860718, "link": "https://stackoverflow.com/questions/31860718/unable-to-have-an-imagebuffer-in-a-struct-two-arguments-needed-and-only-provid/31860860#31860860", "title": "Unable to have an ImageBuffer in a struct \u2014 two arguments needed and only provided one", "body": "<p><code>image::ImageBuffer</code> is a parametrized struct:</p>\n\n<pre><code>pub struct ImageBuffer&lt;P: Pixel, Container&gt; {\n    // some fields omitted\n}\n</code></pre>\n\n<p>So you have to provide these parameters in your <code>struct ImageCanvas</code>.</p>\n\n<p>something like</p>\n\n<pre><code>struct ImageCanvas&lt;P: Pixel, Container&gt; {\n    image: image::ImageBuffer&lt;P, Container&gt;,\n    WIDTH: i32,\n    HEIGHT: i32,\n    xPosition: i32,\n    yPosition: i32\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>struct ImageCanvas {\n    image: image::ImageBuffer&lt;RGB&lt;u8&gt;, Vec&lt;RGB&lt;u8&gt;&gt;&gt;,\n    WIDTH: i32,\n    HEIGHT: i32,\n    xPosition: i32,\n    yPosition: i32\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "is_accepted": false, "score": 1, "last_activity_date": 1438878780, "creation_date": 1438878780, "answer_id": 31861173, "question_id": 31860718, "link": "https://stackoverflow.com/questions/31860718/unable-to-have-an-imagebuffer-in-a-struct-two-arguments-needed-and-only-provid/31861173#31861173", "title": "Unable to have an ImageBuffer in a struct \u2014 two arguments needed and only provided one", "body": "<p>You are actually using an RGB Image so why not used the specialized version</p>\n\n<pre><code>extern crate image;\nextern crate rand;\n\nuse image::{RgbImage, Rgb};\nuse rand::Rng;\n\n\n// Had to change all of the `i32` to `u32`. I agree, `i32` makes more sense.\nstruct ImageCanvas {\n    image: image::RgbImage, // image::ImageBuffer&lt;Rgb&lt;u8&gt;&gt;,\n    WIDTH: u32,\n    HEIGHT: u32,\n    xPosition: u32,\n    yPosition: u32\n}\n\nimpl ImageCanvas {\n\n    pub fn new(width: u32, height: u32) -&gt; ImageCanvas {\n\n        // create a new instance of an ImagePen.\n        ImageCanvas{\n            image: RgbImage::new(width, height), //ImageBuffer::&lt;Rgb&lt;u8&gt;&gt;::new(width, height),\n            WIDTH: width, \n            HEIGHT: height, \n            xPosition: 0, \n            yPosition: 0\n        }\n\n    }\n\n    // RGB _IS_ an array\n    // note the need for `mut`\n    pub fn paint(&amp;mut self, x: u32, y: u32, rgb: [u8;3]){\n\n        self.xPosition = x;\n        self.yPosition = y;\n\n        self.image.get_pixel_mut(self.xPosition, self.yPosition).data = rgb;\n\n    }\n\n}\n\nfn main() {\n\n    // `mut` here too\n    let mut canvas = ImageCanvas::new(50, 50);\n\n    canvas.paint(1, 1, [rand::thread_rng().gen_range(1, 255), \n                        rand::thread_rng().gen_range(1, 255), \n                        rand::thread_rng().gen_range(1, 255)]);\n\n    canvas.image.save(\"yay.png\").unwrap();\n\n}\n</code></pre>\n"}], "owner": {"reputation": 17, "user_id": 4432818, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-Jnkxu-aDEuE/AAAAAAAAAAI/AAAAAAAAABE/75OEInfYRhw/photo.jpg?sz=128", "display_name": "James Hermes", "link": "https://stackoverflow.com/users/4432818/james-hermes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1438882468, "creation_date": 1438877349, "last_edit_date": 1438882468, "question_id": 31860718, "link": "https://stackoverflow.com/questions/31860718/unable-to-have-an-imagebuffer-in-a-struct-two-arguments-needed-and-only-provid", "title": "Unable to have an ImageBuffer in a struct \u2014 two arguments needed and only provided one", "body": "<p>I am new to Rust and still learning. I am a bit confused as to why when I compile this code it fails. I am building it with Cargo on my Linux development machine</p>\n\n<pre><code>extern crate image;\nextern crate rand;\n\nuse image::{ImageBuffer, Rgb};\nuse rand::Rng;\n\n\nstruct ImageCanvas {\n    image: image::ImageBuffer,\n    WIDTH: i32,\n    HEIGHT: i32,\n    xPosition: i32,\n    yPosition: i32\n}\n\nimpl ImageCanvas {\n\n    pub fn new(width: i32, height: i32) -&gt; ImageCanvas {\n\n        // create a new instance of an ImagePen.\n        ImageCanvas{\n            image: ImageBuffer::&lt;Rgb&lt;u8&gt;&gt;::new(width, height),\n            WIDTH: width, \n            HEIGHT: height, \n            xPosition: 0, \n            yPosition: 0\n        }\n\n    }\n\n    pub fn paint(&amp;self, x: i32, y: i32, rgb: i32){\n\n        self.xPosition = x;\n        self.yPosition = y;\n\n        //RGB should be an array.\n        self.image.get_pixel_mut(self.xPosition, self.yPosition).data = rgb;\n\n    }\n\n}\n\nfn main() {\n\n    let canvas = ImageCanvas::new(50, 50);\n\n    canvas.paint(1, 1, [rand::thread_rng().gen_range(1, 255), \n                        rand::thread_rng().gen_range(1, 255), \n                        rand::thread_rng().gen_range(1, 255)]);\n\n    canvas.image.save(\"yay.png\").unwrap();\n\n}\n</code></pre>\n\n<p>The error:</p>\n\n<pre><code>src/main.rs:9:9: 9:27 error: wrong number of type arguments: expected 2,                  found 0 [E0243]\nsrc/main.rs:9   image: image::ImageBuffer,\n                   ^~~~~~~~~~~~~~~~~~\nsrc/main.rs:9:9: 9:27 help: run `rustc --explain E0243` to see a detailed   explanation\nerror: aborting due to previous error\n</code></pre>\n\n<p>I am not sure why it is giving me this error. I have searched, but I haven't  seen any other post about a noob like me not understanding the OOD of Rust.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1438873409, "post_id": 31859154, "comment_id": 51638017, "body": "The <code>Copy</code> trait can only be used for types that are trivially copyable, this requires not having any internal heap allocated memory."}, {"owner": {"reputation": 1171, "user_id": 3758543, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a4a349f90341d8d2b1045f6cf8cc54b3?s=128&d=identicon&r=PG&f=1", "display_name": "lhahn", "link": "https://stackoverflow.com/users/3758543/lhahn"}, "edited": false, "score": 0, "creation_date": 1438873529, "post_id": 31859154, "comment_id": 51638118, "body": "It seems that I cannot do that for Input because HashMap does not implement <code>Copy</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1438873746, "post_id": 31859154, "comment_id": 51638288, "body": "@ker: I wondered the same thing at first, then realized that probably the call is <code>with_title().build()</code>, and thus <code>build</code> receives <code>&amp;mut self</code> and cannot take ownership of it... thus it actually requires modifying the full set of methods to transfer ownership each time to enable chaining."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438873772, "post_id": 31859154, "comment_id": 51638307, "body": "yea I removed my close vote... I was a little overzealous"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438873808, "post_id": 31859154, "comment_id": 51638332, "body": "@ker: To be honest, had the OP included the code with the chain call, it would have been more obvious!"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438873839, "post_id": 31859154, "comment_id": 51638351, "body": "MCVEs make the world so much easier..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1438874122, "post_id": 31859154, "comment_id": 51638570, "body": "@lhahn: <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>; but don&#39;t worry, we all know it&#39;s not always obvious to manage to reduce the code sufficiently and STILL exhibit the problem."}, {"owner": {"reputation": 1171, "user_id": 3758543, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a4a349f90341d8d2b1045f6cf8cc54b3?s=128&d=identicon&r=PG&f=1", "display_name": "lhahn", "link": "https://stackoverflow.com/users/3758543/lhahn"}, "edited": false, "score": 0, "creation_date": 1438874164, "post_id": 31859154, "comment_id": 51638599, "body": "Yeah I just read it. I will try to do it next time."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438876090, "post_id": 31859154, "comment_id": 51640018, "body": "@lhahn it&#39;s not too late \u2014 I bet you can always update your code to make it demonstrate the problem even better!"}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438873748, "post_id": 31859362, "comment_id": 51638293, "body": "ah I didn&#39;t see the chaining... that explains where the error comes from"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1438873657, "creation_date": 1438873657, "answer_id": 31859362, "question_id": 31859154, "link": "https://stackoverflow.com/questions/31859154/cannot-move-out-of-borrowed-content-and-builder-pattern/31859362#31859362", "title": "Cannot move out of borrowed content and Builder pattern", "body": "<p>Given how your method signatures are formulated, you appear to be aiming for chaining:</p>\n\n<pre><code>let game = GameBuilder::new().with_dimensions(...)\n                             .with_title(...)\n                             .build();\n</code></pre>\n\n<p>In Rust, this requires that <code>GameBuilder</code> be passed by value:</p>\n\n<pre><code>pub fn with_dimensions(self, ...) -&gt; GameBuilder {\n    // ...\n}\n</code></pre>\n\n<p>And in order to be able to mutate <code>self</code> within the method, you need to make it <code>mut</code>:</p>\n\n<pre><code>pub fn with_dimensions(mut self, ...) -&gt; GameBuilder {\n}\n</code></pre>\n\n<p>If you change the signature of <code>with_dimensions</code>, <code>with_title</code>, <code>game_keys</code> and <code>build</code> to take <code>self</code> by value (<code>mut self</code> if mutation is intended), then chaining should work.</p>\n"}], "owner": {"reputation": 1171, "user_id": 3758543, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a4a349f90341d8d2b1045f6cf8cc54b3?s=128&d=identicon&r=PG&f=1", "display_name": "lhahn", "link": "https://stackoverflow.com/users/3758543/lhahn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 855, "favorite_count": 1, "accepted_answer_id": 31859362, "answer_count": 1, "score": 5, "last_activity_date": 1438873657, "creation_date": 1438873092, "last_edit_date": 1592644375, "question_id": 31859154, "link": "https://stackoverflow.com/questions/31859154/cannot-move-out-of-borrowed-content-and-builder-pattern", "title": "Cannot move out of borrowed content and Builder pattern", "body": "<p>I am just learning Rust. I am trying to create a builder struct for my Game struct. Here is the code:</p>\n<pre><code>struct Input {\n    keys_pressed: HashMap&lt;VirtualKeyCode, bool&gt;,\n}\n\npub struct GameBuilder {\n    settings: GameSettings,\n    input: Input,\n}\n\nimpl GameBuilder {\n    pub fn new() -&gt; GameBuilder {\n        GameBuilder {\n            settings: GameSettings {\n                window_dimensions: (800, 600),\n                title: &quot;&quot;.to_string(),\n            },\n            input: Input {\n                keys_pressed: HashMap::new(),\n            }\n        }\n    }\n\n    pub fn with_dimensions(&amp;mut self, width: u32, height: u32) -&gt; &amp;mut GameBuilder {\n        self.settings.window_dimensions = (width, height);\n        self\n    }\n\n    pub fn with_title(&amp;mut self, title: &amp;str) -&gt; &amp;mut GameBuilder {\n        self.settings.title = title.to_string();\n        self\n    }\n\n    pub fn game_keys(&amp;mut self, keys: Vec&lt;VirtualKeyCode&gt;) -&gt; &amp;mut GameBuilder {\n        for key in keys {\n            self.input.keys_pressed.insert(key, false);\n        }\n        self\n    }\n\n    pub fn build(&amp;self) -&gt; Game {\n        let (width, height) = self.settings.window_dimensions;\n        Game {\n            display: glutin::WindowBuilder::new()\n                        .with_dimensions(width, height)\n                        .with_title(self.settings.title.to_string())\n                        .build_glium()\n                        .ok()\n                        .expect(&quot;Error in WindowBuilder&quot;),\n            state: GameState::Running,\n            input: self.input,\n        }\n    }\n}\n</code></pre>\n<p>But this code complains in  the last line <code>input: self.input</code> with this:</p>\n<pre><code>error: cannot move out of borrowed content\n</code></pre>\n<p>I think I understand why. Since the argument passed in the function is <code>&amp;self</code>, I cannot take ownership of it, and that what the last line is doing.</p>\n<p>I thought that maybe changing <code>&amp;self</code> to <code>self</code> would work, but then the compile argues that I cannot mutate <code>self</code>.</p>\n<p>There is also the Copy trait from what I know, and that maybe should solve the problem. But Input is basically a HashMap, which means that a copy could be expensive if the hash itself is too big.</p>\n<p>How would be a nice way of solving this problem?</p>\n<h3>Edit:</h3>\n<p>I tried doing this:</p>\n<pre><code>#[derive(Debug, Copy, Clone)]\nstruct Input {\n    keys_pressed: HashMap&lt;VirtualKeyCode, bool&gt;,\n}\n</code></pre>\n<p>But the compiler complains:</p>\n<pre><code>error: the trait `Copy` may not be implemented for this type; field `keys_pressed` does not implement `Copy`\n</code></pre>\n"}, {"tags": ["rust", "mutability", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1438871355, "creation_date": 1438871355, "answer_id": 31858442, "question_id": 31858057, "link": "https://stackoverflow.com/questions/31858057/how-to-resolve-borrow-and-mutability-hell-in-such-project/31858442#31858442", "title": "How to resolve borrow and mutability hell in such project?", "body": "<p><strong>Ideal</strong>: sort your dependency graph to make acyclic, then the borrow checks will work out of the box.</p>\n\n<hr>\n\n<p><strong>Practical</strong>: because reality tends to be more complicated than desired, the ideal situation can be either impossible or impractical. In this case, you can move the ownership check from compile-time to run-time by using <code>RefCell</code> (from <code>std::cell</code>).</p>\n\n<p>This still forbids aliasing + mutability (so you cannot mutate a <code>Win</code> to which you already have a reference in use elsewhere), but defer to check to run-time, at a small penalty.</p>\n\n<hr>\n\n<p><strong>Callback Hell</strong>: implement a broker, who owns both <code>Win</code>s and <code>App</code>s, and have the <code>Win</code>/<code>App</code> refer to each other via IDs; when interaction is needed, the <code>Win</code>/<code>App</code> sends an event to the broker which is treated asynchronously.</p>\n\n<p>This disentangle the ownership graph at the cost of getting a callback hell.</p>\n"}], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 0, "closed_date": 1438871388, "answer_count": 1, "score": 0, "last_activity_date": 1438871355, "creation_date": 1438870335, "last_edit_date": 1438871294, "question_id": 31858057, "link": "https://stackoverflow.com/questions/31858057/how-to-resolve-borrow-and-mutability-hell-in-such-project", "closed_reason": "Duplicate", "title": "How to resolve borrow and mutability hell in such project?", "body": "<p>The idea is simple: there are some Apps which have some Windows. Windows have some type of reference to their app. They need to use each-others methods. I've made some sketchy code, but when I resolve one issue I get a new one.</p>\n\n<pre><code>struct Win {\n      x: i32,\n      y: i32,\n      last_event: u32, // just for testing\n      app: App,\n}\n\nimpl Win {\n    pub fn new(app: &amp;mut App, x: i32, y: i32) -&gt; Win {\n        let mut win = Win{app: *app, x: x, y: y, last_event: 0};\n        app.add_window(&amp;mut win);\n        win\n    }\n\n    fn add_window_to_app(&amp;mut self, app: &amp;mut App) {\n        app.add_window(self);\n    }\n\n    pub fn on_event(&amp;mut self, event: u32, param1: u32, param2: u32) {\n        self.last_event = event;\n    }\n}\n\nstruct App {\n    pid: u32,\n    windows: Vec&lt;Win&gt;,\n}\n\nimpl App {\n    pub fn new(pid: u32) -&gt; App {\n        let app = App{pid: pid, windows: Vec::&lt;Win&gt;::new()};\n        app\n    }\n\n    pub fn add_window(&amp;mut self, win: &amp;mut Win) {\n        self.windows.push(*win);\n    }\n\n    pub fn on_event(&amp;mut self, win: &amp;mut Win, event: u32, param1: u32, param2: u32) {\n        win.on_event(event, param1, param2);\n    }\n}\n\nfn main() {\n    let mut app = App::new(1);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo", "musl"], "comments": [{"owner": {"reputation": 5858, "user_id": 1530549, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9acb42e69fdeeaf6474022411fe61725?s=128&d=identicon&r=PG", "display_name": "Scooter", "link": "https://stackoverflow.com/users/1530549/scooter"}, "edited": false, "score": 0, "creation_date": 1438859720, "post_id": 31851639, "comment_id": 51628056, "body": "You wrote that you typed &quot;cargo rustc -- --target=x86_64-unknown-linux-musl&quot; . Is there a &quot;rustc&quot; option of cargo or should that be &quot;build&quot;? &quot;cargo build&quot; works without musl."}, {"owner": {"reputation": 99, "user_id": 4278419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cb9edc33011944c21fefa98897efa7?s=128&d=identicon&r=PG&f=1", "display_name": "M Moadeli", "link": "https://stackoverflow.com/users/4278419/m-moadeli"}, "reply_to_user": {"reputation": 5858, "user_id": 1530549, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9acb42e69fdeeaf6474022411fe61725?s=128&d=identicon&r=PG", "display_name": "Scooter", "link": "https://stackoverflow.com/users/1530549/scooter"}, "edited": false, "score": 0, "creation_date": 1438860316, "post_id": 31851639, "comment_id": 51628422, "body": "cargo build works, but the built library does not have the dependencies statically linked."}, {"owner": {"reputation": 5858, "user_id": 1530549, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9acb42e69fdeeaf6474022411fe61725?s=128&d=identicon&r=PG", "display_name": "Scooter", "link": "https://stackoverflow.com/users/1530549/scooter"}, "edited": false, "score": 0, "creation_date": 1438860662, "post_id": 31851639, "comment_id": 51628673, "body": "Your first question should probably be reworded. &quot;in order to use cargo build&quot; must need something else, because you are saying you can use &quot;cargo build&quot;.  Can you build a fully statically-linked executable by calling rustc directly the way they did at the bottom of the instruction page you linked to?"}, {"owner": {"reputation": 99, "user_id": 4278419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cb9edc33011944c21fefa98897efa7?s=128&d=identicon&r=PG&f=1", "display_name": "M Moadeli", "link": "https://stackoverflow.com/users/4278419/m-moadeli"}, "reply_to_user": {"reputation": 5858, "user_id": 1530549, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9acb42e69fdeeaf6474022411fe61725?s=128&d=identicon&r=PG", "display_name": "Scooter", "link": "https://stackoverflow.com/users/1530549/scooter"}, "edited": false, "score": 0, "creation_date": 1438861059, "post_id": 31851639, "comment_id": 51628878, "body": "yes, I created the example.rs in the link and verified it having no dependencies."}], "answers": [{"tags": [], "owner": {"reputation": 99, "user_id": 4278419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cb9edc33011944c21fefa98897efa7?s=128&d=identicon&r=PG&f=1", "display_name": "M Moadeli", "link": "https://stackoverflow.com/users/4278419/m-moadeli"}, "is_accepted": true, "score": 3, "last_activity_date": 1484751149, "last_edit_date": 1484751149, "creation_date": 1438949916, "answer_id": 31877558, "question_id": 31851639, "link": "https://stackoverflow.com/questions/31851639/failure-to-build-rust-libc-using-cargo-when-rustc-is-musl-enabled/31877558#31877558", "title": "failure to build rust-libc using cargo when rustc is musl-enabled", "body": "<p>This worked for me to build libc:</p>\n\n<blockquote>\n  <p>rustc --target=x86_64-unknown-linux-musl /address-of-libc/lib.rs --crate-name libc --crate-type lib -L /address-of-musldist/musldist/lib/ --out-dir=/your-chosen-address/target --cfg feature=\\\"default\\\" --cfg feature=\\\"cargo-build\\\" --emit=dep-info,link</p>\n</blockquote>\n"}], "owner": {"reputation": 99, "user_id": 4278419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cb9edc33011944c21fefa98897efa7?s=128&d=identicon&r=PG&f=1", "display_name": "M Moadeli", "link": "https://stackoverflow.com/users/4278419/m-moadeli"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 943, "favorite_count": 1, "accepted_answer_id": 31877558, "answer_count": 1, "score": 6, "last_activity_date": 1484751149, "creation_date": 1438852564, "last_edit_date": 1441991583, "question_id": 31851639, "link": "https://stackoverflow.com/questions/31851639/failure-to-build-rust-libc-using-cargo-when-rustc-is-musl-enabled", "title": "failure to build rust-libc using cargo when rustc is musl-enabled", "body": "<p>I successfully created a <code>musl</code> configured <code>rustc</code> by following <a href=\"https://github.com/rust-lang/rust/blob/master/src/doc/trpl/advanced-linking.md\" rel=\"nofollow\">this link</a></p>\n\n<p>My attempt to build a project (which builds fine using non-musl configured rust) failed when I used <code>cargo rustc -- --target=x86_64-unknown-linux-musl</code></p>\n\n<pre><code> 'error: could not find crate `libc` with expected target triple x86_64-unknown-linux-musl'\n</code></pre>\n\n<p>Then, I tried to create <code>rust-libc</code> library using the code from crate. To be more accurate, I used the command provided by <code>cargo</code> to build <code>rust-libc</code>, I've only added <code>--target=x86_64-unknown-linux-musl</code> to the command.  This time it failed reporting:</p>\n\n<pre><code>'error: could not find native static library `c`, perhaps an -L flag is missing?`'\n</code></pre>\n\n<p>I have two questions:</p>\n\n<ul>\n<li><p>Is it mandatory to build <code>musl</code> configured <code>cargo</code> to be able to use <code>cargo build --target=x86_64-unknown-linux-musl</code>?</p></li>\n<li><p>How can I address this:</p>\n\n<pre><code>'error: could not find native static library `c`, perhaps an -L flag is missing?'\n</code></pre></li>\n</ul>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1438916283, "post_id": 31846789, "comment_id": 51656745, "body": "Please do not post code as images. Take the time to copy and paste the code into Stack Overflow. This helps for searching, and also allows for technology like screen readers to be used."}], "answers": [{"comments": [{"owner": {"reputation": 1683, "user_id": 634910, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/de483caba644ecd10871db93e2e7cf0e?s=128&d=identicon&r=PG", "display_name": "BobLoblaw", "link": "https://stackoverflow.com/users/634910/bobloblaw"}, "edited": false, "score": 0, "creation_date": 1438835708, "post_id": 31846903, "comment_id": 51614801, "body": "These are the versions i&#39;m using  rustc 1.3.0-nightly (38517944f 2015-08-03) cargo 0.4.0-nightly (1b902d4 2015-08-03) (built 2015-08-03)  When I tried to do &#39;extern crate &quot;difference-of-squares&quot; as squares&#39;, its still throwing an error: expected ident, found <code>&quot;difference-of-squares&quot;</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1683, "user_id": 634910, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/de483caba644ecd10871db93e2e7cf0e?s=128&d=identicon&r=PG", "display_name": "BobLoblaw", "link": "https://stackoverflow.com/users/634910/bobloblaw"}, "edited": false, "score": 1, "creation_date": 1438836787, "post_id": 31846903, "comment_id": 51615074, "body": "@BobLoblaw Well, I&#39;m using the exact same release.  I recreated your problem from both what you listed and the code from that website, and I don&#39;t have your problem.  That strongly implies there&#39;s something else you haven&#39;t specified that&#39;s causing the problem.  Without knowing what that is, I can&#39;t help you."}, {"owner": {"reputation": 1683, "user_id": 634910, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/de483caba644ecd10871db93e2e7cf0e?s=128&d=identicon&r=PG", "display_name": "BobLoblaw", "link": "https://stackoverflow.com/users/634910/bobloblaw"}, "edited": false, "score": 0, "creation_date": 1438881226, "post_id": 31846903, "comment_id": 51643189, "body": "Hi, seems like my cargo command is linked to an older binary. after i properly linked rust and cargo, the issue is resolved with out any edits. Sorry about the confusion"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1438836706, "last_edit_date": 1438836706, "creation_date": 1438835575, "answer_id": 31846903, "question_id": 31846789, "link": "https://stackoverflow.com/questions/31846789/crate-name-with-hyphens-not-being-recognized/31846903#31846903", "title": "crate name with hyphens not being recognized", "body": "<p>You're likely using an old version of Cargo.  Previously, crates-with-hyphens were allowed, but horrible to use:</p>\n\n<pre><code>extern crate \"difference-of-squares\" as squares;\n</code></pre>\n\n<p>At some point in the past, Cargo was changed to basically not allow them; it just converted all hyphens to underscores so you didn't have to manually rename every crate that had hyphens in its name, every time you used it.</p>\n\n<p>You haven't specified what version you're using, but updating to the latest release (Rust 1.2 <s>just got released</s> will be released in a few days) should fix it.  Failing that, try quoting the literal name of the crate.</p>\n"}], "owner": {"reputation": 1683, "user_id": 634910, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/de483caba644ecd10871db93e2e7cf0e?s=128&d=identicon&r=PG", "display_name": "BobLoblaw", "link": "https://stackoverflow.com/users/634910/bobloblaw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1680, "favorite_count": 1, "accepted_answer_id": 31846903, "answer_count": 1, "score": 3, "last_activity_date": 1441991596, "creation_date": 1438834860, "last_edit_date": 1441991596, "question_id": 31846789, "link": "https://stackoverflow.com/questions/31846789/crate-name-with-hyphens-not-being-recognized", "title": "crate name with hyphens not being recognized", "body": "<p>I'm trying to practice rust using <a href=\"http://exercism.io/\" rel=\"nofollow noreferrer\">exercism</a></p>\n\n<p>one of problem set has a test file like this \n<a href=\"https://i.stack.imgur.com/LSlQc.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/LSlQc.png\" alt=\"enter image description here\"></a></p>\n\n<p>when i tried to run Cargo test, its not recognizing the crate name.I tried different variations difference-of-squares,\"difference-of-squares\" with no success.<a href=\"https://i.stack.imgur.com/F9tO5.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/F9tO5.png\" alt=\"enter image description here\"></a></p>\n\n<p>contents of Cargo.toml</p>\n\n<p><a href=\"https://i.stack.imgur.com/ZhiGH.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ZhiGH.png\" alt=\"enter image description here\"></a></p>\n\n<p>edit: I tried with both stable release and the current nightly.</p>\n"}]