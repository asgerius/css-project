[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 0, "creation_date": 1466016916, "post_id": 37843606, "comment_id": 63147630, "body": "Looks like <code>#![feature(alloc)]</code> will keep this forever off stable. Any way to use <code>Box</code> in <code>no_std</code> on stable?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 0, "creation_date": 1466017182, "post_id": 37843606, "comment_id": 63147760, "body": "No, there isn&#39;t. But if you want dynamic allocation (not <code>Box</code>), you can use <code>libc::malloc</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 0, "creation_date": 1466017646, "post_id": 37843606, "comment_id": 63148029, "body": "@AndrewStraw <i>forever off stable</i> \u2014 the point of features is that they exist while being proven, then are turned on for everyone. AFAIK, there&#39;s <b>nothing</b> in Rust that exists for the sole purpose of never being available in a stable release. It&#39;s just a matter of time and usefulness."}, {"owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 1, "creation_date": 1466020526, "post_id": 37843606, "comment_id": 63149632, "body": "Thinking about this a bit, it seems Box&lt;&gt; should not be in the basic language definition because it assumes a heap. But a heap may not be available on all platforms."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 1, "creation_date": 1466020624, "post_id": 37843606, "comment_id": 63149676, "body": "You are right @AndrewStraw, this is the exact reason."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466021344, "post_id": 37843606, "comment_id": 63150059, "body": "Those of us writing code for microprocessors are quite happy about that decision by the Rust team."}, {"owner": {"reputation": 147, "user_id": 448684, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4131d2f57a0db2a2b4d9a62bd389fd44?s=128&d=identicon&r=PG", "display_name": "Tony Arcieri", "link": "https://stackoverflow.com/users/448684/tony-arcieri"}, "edited": false, "score": 1, "creation_date": 1530547130, "post_id": 37843606, "comment_id": 89263834, "body": "There&#39;s now an open RFC to stabilize alloc: <a href=\"https://github.com/rust-lang/rfcs/pull/2480\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/2480</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1566481881, "post_id": 37843606, "comment_id": 101677058, "body": "<code>alloc</code> has been stabilized in 1.36. I updated the answer."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1566481822, "last_edit_date": 1566481822, "creation_date": 1466016851, "answer_id": 37843606, "question_id": 37843379, "link": "https://stackoverflow.com/questions/37843379/is-it-possible-to-use-box-with-no-std/37843606#37843606", "title": "Is it possible to use Box with no_std?", "body": "<p>You have to import <a href=\"https://doc.rust-lang.org/stable/alloc/index.html\" rel=\"nofollow noreferrer\">the <code>alloc</code> crate</a>:</p>\n\n<pre><code>#![no_std]\n\nextern crate alloc;\n\nuse alloc::boxed::Box;\n\nfn main() {\n    let _: Box&lt;[u8]&gt; = Box::new([0; 10]);\n}\n</code></pre>\n\n<p>The <code>alloc</code> crate is compiler-provided (just as <code>std</code> in non-<code>no_std</code> environments), so you don't need to pull it from crates.io or specify it in <code>Cargo.toml</code>. The crate is stable since Rust 1.36 (<a href=\"https://github.com/rust-lang/rust/pull/59675\" rel=\"nofollow noreferrer\">stabilization PR</a>).</p>\n\n<p>Note that this compiles as a lib, but not as binary because of missing <code>lang_items</code>. Compiling a <code>no_std</code> binary unfortunately still requires Rust nightly.</p>\n"}], "owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2421, "favorite_count": 1, "accepted_answer_id": 37843606, "answer_count": 1, "score": 3, "last_activity_date": 1566481822, "creation_date": 1466016195, "last_edit_date": 1466017497, "question_id": 37843379, "link": "https://stackoverflow.com/questions/37843379/is-it-possible-to-use-box-with-no-std", "title": "Is it possible to use Box with no_std?", "body": "<p>I'd like to use <code>Box</code> in a crate with <code>no_std</code>. Is this possible? My simple attempts so far have not worked.</p>\n\n<p>This compiles (but uses the standard library):</p>\n\n<pre><code>fn main() {\n    let _: Box&lt;[u8]&gt; = Box::new([0; 10]);\n}\n</code></pre>\n\n<p>This does not:</p>\n\n<pre><code>#![no_std]\n\nfn main() {\n    let _: Box&lt;[u8]&gt; = Box::new([0; 10]);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?code=%23!%5Bno_std%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_%3A%20Box%3C%5Bu8%5D%3E%20%3D%20Box%3A%3Anew(%5B0%3B%2010%5D)%3B%0A%7D%0A&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>However, looking through the Rust source code, I see <code>Box</code> is defined in liballoc with the warning</p>\n\n<blockquote>\n  <p>This library, like libcore, is not intended for general usage, but rather as a building block of other libraries. The types and interfaces in this library are reexported through the standard library, and should not be used through this library.</p>\n</blockquote>\n\n<p>Since <code>Box</code> doesn't depend on std but is only reexported for it, it seems like I only need to figure out the right way to import it into my code. (Despite this seeming to be not recommended.)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 5, "creation_date": 1466006193, "post_id": 37839956, "comment_id": 63141471, "body": "If the <code>panic!</code> is in code you control... I believe, in general, the recommendation is to use <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow noreferrer\"><code>Result</code></a> and return an <code>Err(arg)</code> instead of panicking if you want to respond to it."}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "reply_to_user": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 0, "creation_date": 1466006321, "post_id": 37839956, "comment_id": 63141553, "body": "I understand but still I would like to &quot;collect&quot; the value as it says it is possible."}, {"owner": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 3, "creation_date": 1466006426, "post_id": 37839956, "comment_id": 63141628, "body": "<a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"nofollow noreferrer\"><code>catch_unwind()</code></a> (Rust 1.9) would be the starting point to handle an unwinding panic! (excluding any that stop the process immediately). <code>arg</code> should be contained in the <code>Result</code> it returns."}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "reply_to_user": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 0, "creation_date": 1466006686, "post_id": 37839956, "comment_id": 63141821, "body": "Doesn&#39;t matter for the case but does it still follow recommendation since it returns <code>Result</code>?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1466007976, "post_id": 37839956, "comment_id": 63142683, "body": "No, it&#39;s not recommended to use <code>catch_unwind</code> except if you do not have control over the location where the <code>panic</code> happens (because someone else wrote bad code) or because you are calling Rust-code from C or other languages&#39; code. If it&#39;s because someone else wrote panicky code, you should first try to fix their crate before resorting to <code>catch_unwind</code>"}], "answers": [{"comments": [{"owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "reply_to_user": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 2, "creation_date": 1466102027, "post_id": 37844846, "comment_id": 63190738, "body": "I just used <code>i32</code> because <code>Box&lt;Any&gt;</code> must be downcast to a concrete type and I wasn&#39;t sure what the default type from <code>panic!(42);</code> would be. Turns out on my computer it is <code>i32</code> but then I wondered if it would be so on all architectures. So I just forced 42 to be an <code>i32</code>. Based on your question I looked it up and apparently <code>i32</code> is <a href=\"https://doc.rust-lang.org/book/primitive-types.html#numeric-types\" rel=\"nofollow noreferrer\">the default type for integers</a> and so <code>_i32</code> shouldn&#39;t be necessary on any platform."}], "tags": [], "owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "is_accepted": true, "score": 2, "last_activity_date": 1466021409, "creation_date": 1466021409, "answer_id": 37844846, "question_id": 37839956, "link": "https://stackoverflow.com/questions/37839956/how-to-collect-panic-argument/37844846#37844846", "title": "How to collect panic! argument?", "body": "<p>To collect the argument, downcast the <code>Box&lt;Any&gt;</code> into a concrete type. In your case, I forced 42 to be type <code>i32</code>:</p>\n\n<pre><code>use std::thread::spawn;\n\nfn main() {\n    let thread = spawn(|| { panic!(42_i32); });\n    let result = thread.join();\n    match result {\n        Ok(_) =&gt; { println!(\"thread join result ok\"); }\n        Err(e) =&gt; {\n            match e.downcast::&lt;i32&gt;() {\n                Ok(e2) =&gt; { println!(\"Got an int error: {:?}\", e2); }\n                Err(e3) =&gt; { println!(\"Got unknown error: {:?}\", e3); }        \n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 0, "accepted_answer_id": 37844846, "answer_count": 1, "score": 2, "last_activity_date": 1466021409, "creation_date": 1466005195, "last_edit_date": 1466005650, "question_id": 37839956, "link": "https://stackoverflow.com/questions/37839956/how-to-collect-panic-argument", "title": "How to collect panic! argument?", "body": "<p>How can I collect <code>panic!(arg)</code>'s <code>arg</code> after it was emitted? <a href=\"https://doc.rust-lang.org/std/macro.panic!.html\" rel=\"nofollow\">This</a> documentation is not clear.</p>\n\n<p>When doing <code>panic!(42)</code> I want my application to collect the 42 and fail gracefully instead of just aborting.</p>\n"}, {"tags": ["iterator", "pattern-matching", "closures", "rust", "filtering"], "answers": [{"tags": [], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "is_accepted": false, "score": 0, "last_activity_date": 1466006579, "last_edit_date": 1466006579, "creation_date": 1466005085, "answer_id": 37839913, "question_id": 37839702, "link": "https://stackoverflow.com/questions/37839702/how-to-map-on-a-vec-and-use-a-closure-with-pattern-matching-in-rust/37839913#37839913", "title": "How to map on a vec and use a closure with pattern matching in Rust", "body": "<p>few minutes later I solved it myself (any upgrade appreciated):</p>\n\n<pre><code>pub fn convert_to_rainspeak(prime_factors:Vec&lt;i32&gt;) -&gt; String{\n    let mut speak:String = prime_factors.iter().map(|&amp;factor| {\n        match factor {\n            3 =&gt; {\"Pling\"},\n            5 =&gt; {\"Plang\"},\n            7 =&gt; {\"Plong\"},\n            _ =&gt; {\"\"}\n        }\n    }).collect();\n    speak\n}\n</code></pre>\n\n<p>The issue was that I was not aware that <code>.collect()</code> is awaiting the result of map. I then assigned <code>prime_factors.iter()...</code> to a string and rearranged var bindings so it now all works.</p>\n\n<p>EDIT: refactored redundant assignments to the speak vector</p>\n"}, {"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1466005436, "post_id": 37839993, "comment_id": 63140924, "body": "Ah ok...Is there any case to use  iter().map() then?"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1466005476, "post_id": 37839993, "comment_id": 63140950, "body": "Why are you trying to use <code>.map()</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1466089561, "post_id": 37839993, "comment_id": 63183011, "body": "@xetra11: <code>map</code> is to be used when not immediately collecting the result into a collection, to avoid materializing an intermediate collection which is throw-away."}], "tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": false, "score": 1, "last_activity_date": 1466005457, "last_edit_date": 1466005457, "creation_date": 1466005288, "answer_id": 37839993, "question_id": 37839702, "link": "https://stackoverflow.com/questions/37839702/how-to-map-on-a-vec-and-use-a-closure-with-pattern-matching-in-rust/37839993#37839993", "title": "How to map on a vec and use a closure with pattern matching in Rust", "body": "<p>The error in this case is that the compiler can't figure out what type you are <code>collect</code>ing into. If you add a type annotation to <code>collect</code>, then it will work:</p>\n\n<pre><code>pub fn convert_to_rainspeak(prime_factors:Vec&lt;i32&gt;) -&gt; String{\n    let mut speak = String::new();\n    prime_factors.iter().map(| &amp;factor| {\n        match factor {\n            3 =&gt; {speak.push_str(\"Pling\");},\n            5 =&gt; {speak.push_str(\"Plang\");},\n            7 =&gt; {speak.push_str(\"Plong\");},\n            _ =&gt; {}\n        }\n    }).collect::&lt;Vec&lt;_&gt;&gt;();\n    speak\n}\n</code></pre>\n\n<p>However, this is really not the idiomatic way to do this. You should use <code>for</code> instead:</p>\n\n<pre><code>pub fn convert_to_rainspeak(prime_factors:Vec&lt;i32&gt;) -&gt; String {\n    let mut speak = String::new();\n    for factor in prime_factors.iter() {\n        match *factor {\n            3 =&gt; speak.push_str(\"Pling\"),\n            5 =&gt; speak.push_str(\"Plang\"),\n            7 =&gt; speak.push_str(\"Plong\"),\n            _ =&gt; {}\n        }\n    }\n\n    speak\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1466095332, "post_id": 37840060, "comment_id": 63186848, "body": "<i>allocating strings</i>: should I use a constant &amp;str and use its variable in the match?   <i>what is &amp;{T]</i>: Sorry I never saw this before - will look up the doc but mybe you have a good explanation as well"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1466096256, "post_id": 37840060, "comment_id": 63187363, "body": "<code>&amp;[T]</code> is <a href=\"http://doc.rust-lang.org/stable/book/primitive-types.html#slices\" rel=\"nofollow noreferrer\">a <i>slice</i></a>; the official documentation does a good job of describing it. I&#39;m unclear what you mean by the constant and using it in the <code>match</code>. A string literal is a constant and has no allocation. Your old (pre-edit) code mapped each element to a <code>String</code>, not a <code>&amp;str</code>, and then collected to another <code>String</code>. I was referring to the inner <code>String</code> with the extra allocations."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1502887773, "last_edit_date": 1502887773, "creation_date": 1466005475, "answer_id": 37840060, "question_id": 37839702, "link": "https://stackoverflow.com/questions/37839702/how-to-map-on-a-vec-and-use-a-closure-with-pattern-matching-in-rust/37840060#37840060", "title": "How to map on a vec and use a closure with pattern matching in Rust", "body": "<p><a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>Iterator::collect</code></a> is defined as:</p>\n\n<pre><code>fn collect&lt;B&gt;(self) -&gt; B \nwhere\n    B: FromIterator&lt;Self::Item&gt;\n</code></pre>\n\n<p>That is, it returns a type that is up to the caller. However, you have completely disregarded the output, so there's no way for it to infer a type. The code misuses <code>collect</code> when it basically wants to use <code>for</code>. </p>\n\n<p>In your \"fixed\" version (which has since been edited, making this paragraph make no sense), you are being very inefficient by allocating a string in every iteration. Plus you don't need to specify any explicit types other than those on the function, and you should accept a <code>&amp;[i32]</code> instead:</p>\n\n<pre><code>fn convert_to_rainspeak(prime_factors: &amp;[i32]) -&gt; String {\n    prime_factors.iter()\n        .map(|&amp;factor| {\n            match factor {\n                3 =&gt; \"Pling\",\n                5 =&gt; \"Plang\",\n                7 =&gt; \"Plong\",\n                _ =&gt; \"\",\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    println!(\"{}\", convert_to_rainspeak(&amp;[1, 2, 3, 4, 5]));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 154, "user_id": 6261816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ba543809a6a39a1fec992b8bf8721e8?s=128&d=identicon&r=PG&f=1", "display_name": "lukwol", "link": "https://stackoverflow.com/users/6261816/lukwol"}, "is_accepted": false, "score": 1, "last_activity_date": 1502870368, "creation_date": 1502870368, "answer_id": 45708143, "question_id": 37839702, "link": "https://stackoverflow.com/questions/37839702/how-to-map-on-a-vec-and-use-a-closure-with-pattern-matching-in-rust/45708143#45708143", "title": "How to map on a vec and use a closure with pattern matching in Rust", "body": "<p>You could also use <code>flat_map()</code> instead of <code>map()</code>.\nThis way you can map to <code>Option</code> and return <code>None</code> instead of empty string if there is no corresponding value.</p>\n\n<pre><code>fn convert_to_rainspeak(prime_factors: &amp;[i32]) -&gt; String {\n    prime_factors\n        .iter()\n        .flat_map(|&amp;factor| match factor {\n            3 =&gt; Some(\"Pling\"),\n            5 =&gt; Some(\"Plang\"),\n            7 =&gt; Some(\"Plong\"),\n            _ =&gt; None,\n        })\n        .collect()\n}\n\n\nfn main() {\n    println!(\"{}\", convert_to_rainspeak(&amp;[1, 2, 3, 7]));\n}\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2200, "favorite_count": 0, "accepted_answer_id": 37840060, "answer_count": 4, "score": 2, "last_activity_date": 1502887922, "creation_date": 1466004556, "last_edit_date": 1502887922, "question_id": 37839702, "link": "https://stackoverflow.com/questions/37839702/how-to-map-on-a-vec-and-use-a-closure-with-pattern-matching-in-rust", "title": "How to map on a vec and use a closure with pattern matching in Rust", "body": "<p>I'd like to use <code>map</code> to iterate over an array and do stuff per item and get rid of the for loop. An error which I do not understand blocks my attempt. What I want to achieve is to iterate through a vector of <code>i32</code> and match on them to concat a string with string literals and then return it at the end.</p>\n\n<p>Function:</p>\n\n<pre><code>pub fn convert_to_rainspeak(prime_factors: Vec&lt;i32&gt;) -&gt; String {\n    let mut speak = String::new();\n    prime_factors.iter().map(|&amp;factor| {\n        match factor {\n            3 =&gt; { speak.push_str(\"Pling\"); },\n            5 =&gt; { speak.push_str(\"Plang\"); },\n            7 =&gt; { speak.push_str(\"Plong\"); },\n            _ =&gt; {}\n        }\n    }).collect();\n    speak\n}\n\nfn main() {}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n  --&gt; src/main.rs:10:8\n   |\n10 |     }).collect();\n   |        ^^^^^^^ cannot infer type for `B`\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1466003880, "post_id": 37838882, "comment_id": 63139777, "body": "Is this the complete list? <a href=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/feature_gate.rs#L103-L320\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/libsyntax/&hellip;</a> Because I can not find <code>fn_traits</code>. <code>fnbox</code> also seems to be missing."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1466005053, "post_id": 37838882, "comment_id": 63140636, "body": "These are \u201clibrary features\u201d, they are declared with the <a href=\"https://github.com/rust-lang/rust/search?utf8=%E2%9C%93&amp;q=unstable+feature&amp;type=Code\" rel=\"nofollow noreferrer\"><code>#[unstable]</code></a> attribute in the standard library."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 10, "last_activity_date": 1618315395, "last_edit_date": 1618315395, "creation_date": 1466002362, "answer_id": 37838882, "question_id": 37838688, "link": "https://stackoverflow.com/questions/37838688/up-to-date-list-of-available-nightly-features/37838882#37838882", "title": "Up to date list of available nightly features?", "body": "<p>The Unstable Book has <a href=\"https://doc.rust-lang.org/unstable-book/language-features.html\" rel=\"nofollow noreferrer\">a list of features</a>, but some features are not documented there.</p>\n<p>A complete list of features is contained <a href=\"https://github.com/rust-lang/rust/blob/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7/src/librustc_feature/active.rs#L83-L530\" rel=\"nofollow noreferrer\">in the source code</a> (or the <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_feature/src/active.rs\" rel=\"nofollow noreferrer\">current master branch</a>). To date, active features are:</p>\n<pre><code>declare_features! (\n    // -------------------------------------------------------------------------\n    // feature-group-start: internal feature gates\n    // -------------------------------------------------------------------------\n\n    // no-tracking-issue-start\n\n    /// Allows using compiler's own crates.\n    (active, rustc_private, &quot;1.0.0&quot;, Some(27812), None),\n\n    /// Allows using the `rust-intrinsic`'s &quot;ABI&quot;.\n    (active, intrinsics, &quot;1.0.0&quot;, None, None),\n\n    /// Allows using `#[lang = &quot;..&quot;]` attribute for linking items to special compiler logic.\n    (active, lang_items, &quot;1.0.0&quot;, None, None),\n\n    /// Allows using the `#[stable]` and `#[unstable]` attributes.\n    (active, staged_api, &quot;1.0.0&quot;, None, None),\n\n    /// Allows using `#[allow_internal_unstable]`. This is an\n    /// attribute on `macro_rules!` and can't use the attribute handling\n    /// below (it has to be checked before expansion possibly makes\n    /// macros disappear).\n    (active, allow_internal_unstable, &quot;1.0.0&quot;, None, None),\n\n    /// Allows using `#[allow_internal_unsafe]`. This is an\n    /// attribute on `macro_rules!` and can't use the attribute handling\n    /// below (it has to be checked before expansion possibly makes\n    /// macros disappear).\n    (active, allow_internal_unsafe, &quot;1.0.0&quot;, None, None),\n\n    /// no-tracking-issue-end\n\n    /// Allows using `#[link_name=&quot;llvm.*&quot;]`.\n    (active, link_llvm_intrinsics, &quot;1.0.0&quot;, Some(29602), None),\n\n    /// Allows using `rustc_*` attributes (RFC 572).\n    (active, rustc_attrs, &quot;1.0.0&quot;, Some(29642), None),\n\n    /// Allows using the `box $expr` syntax.\n    (active, box_syntax, &quot;1.0.0&quot;, Some(49733), None),\n\n    /// Allows using `#[main]` to replace the entrypoint `#[lang = &quot;start&quot;]` calls.\n    (active, main, &quot;1.0.0&quot;, Some(29634), None),\n\n    /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n    (active, start, &quot;1.0.0&quot;, Some(29633), None),\n\n    /// Allows using the `#[fundamental]` attribute.\n    (active, fundamental, &quot;1.0.0&quot;, Some(29635), None),\n\n    /// Allows using the `rust-call` ABI.\n    (active, unboxed_closures, &quot;1.0.0&quot;, Some(29625), None),\n\n    /// Allows using the `#[linkage = &quot;..&quot;]` attribute.\n    (active, linkage, &quot;1.0.0&quot;, Some(29603), None),\n\n    /// Allows features specific to OIBIT (auto traits).\n    (active, optin_builtin_traits, &quot;1.0.0&quot;, Some(13231), None),\n\n    /// Allows using `box` in patterns (RFC 469).\n    (active, box_patterns, &quot;1.0.0&quot;, Some(29641), None),\n\n    // no-tracking-issue-start\n\n    /// Allows using `#[prelude_import]` on glob `use` items.\n    (active, prelude_import, &quot;1.2.0&quot;, None, None),\n\n    // no-tracking-issue-end\n\n    // no-tracking-issue-start\n\n    /// Allows using `#[omit_gdb_pretty_printer_section]`.\n    (active, omit_gdb_pretty_printer_section, &quot;1.5.0&quot;, None, None),\n\n    /// Allows using the `vectorcall` ABI.\n    (active, abi_vectorcall, &quot;1.7.0&quot;, None, None),\n\n    // no-tracking-issue-end\n\n    /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n    (active, structural_match, &quot;1.8.0&quot;, Some(31434), None),\n\n    /// Allows using the `may_dangle` attribute (RFC 1327).\n    (active, dropck_eyepatch, &quot;1.10.0&quot;, Some(34761), None),\n\n    /// Allows using the `#![panic_runtime]` attribute.\n    (active, panic_runtime, &quot;1.10.0&quot;, Some(32837), None),\n\n    /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n    (active, needs_panic_runtime, &quot;1.10.0&quot;, Some(32837), None),\n\n    // no-tracking-issue-start\n\n    /// Allows identifying the `compiler_builtins` crate.\n    (active, compiler_builtins, &quot;1.13.0&quot;, None, None),\n\n    /// Allows using the `unadjusted` ABI; perma-unstable.\n    (active, abi_unadjusted, &quot;1.16.0&quot;, None, None),\n\n    /// Allows identifying crates that contain sanitizer runtimes.\n    (active, sanitizer_runtime, &quot;1.17.0&quot;, None, None),\n\n    /// Used to identify crates that contain the profiler runtime.\n    (active, profiler_runtime, &quot;1.18.0&quot;, None, None),\n\n    /// Allows using the `thiscall` ABI.\n    (active, abi_thiscall, &quot;1.19.0&quot;, None, None),\n\n    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n    (active, allocator_internals, &quot;1.20.0&quot;, None, None),\n\n    /// Added for testing E0705; perma-unstable.\n    (active, test_2018_feature, &quot;1.31.0&quot;, None, Some(Edition::Edition2018)),\n\n    // no-tracking-issue-end\n\n    // -------------------------------------------------------------------------\n    // feature-group-end: internal feature gates\n    // -------------------------------------------------------------------------\n\n    // -------------------------------------------------------------------------\n    // feature-group-start: actual feature gates (target features)\n    // -------------------------------------------------------------------------\n\n    // FIXME: Document these and merge with the list below.\n\n    // Unstable `#[target_feature]` directives.\n    (active, arm_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, aarch64_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, hexagon_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, powerpc_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, mips_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, avx512_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, mmx_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, sse4a_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, tbm_target_feature, &quot;1.27.0&quot;, Some(44839), None),\n    (active, wasm_target_feature, &quot;1.30.0&quot;, Some(44839), None),\n    (active, adx_target_feature, &quot;1.32.0&quot;, Some(44839), None),\n    (active, cmpxchg16b_target_feature, &quot;1.32.0&quot;, Some(44839), None),\n    (active, movbe_target_feature, &quot;1.34.0&quot;, Some(44839), None),\n    (active, rtm_target_feature, &quot;1.35.0&quot;, Some(44839), None),\n    (active, f16c_target_feature, &quot;1.36.0&quot;, Some(44839), None),\n\n    // -------------------------------------------------------------------------\n    // feature-group-end: actual feature gates (target features)\n    // -------------------------------------------------------------------------\n\n    // -------------------------------------------------------------------------\n    // feature-group-start: actual feature gates\n    // -------------------------------------------------------------------------\n\n    /// Allows using the `#[link_args]` attribute.\n    (active, link_args, &quot;1.0.0&quot;, Some(29596), None),\n\n    /// Allows defining identifiers beyond ASCII.\n    (active, non_ascii_idents, &quot;1.0.0&quot;, Some(55467), None),\n\n    /// Allows using `#[plugin_registrar]` on functions.\n    (active, plugin_registrar, &quot;1.0.0&quot;, Some(29597), None),\n\n    /// Allows using `#![plugin(myplugin)]`.\n    (active, plugin, &quot;1.0.0&quot;, Some(29597), None),\n\n    /// Allows using `#[thread_local]` on `static` items.\n    (active, thread_local, &quot;1.0.0&quot;, Some(29594), None),\n\n    /// Allows the use of SIMD types in functions declared in `extern` blocks.\n    (active, simd_ffi, &quot;1.0.0&quot;, Some(27731), None),\n\n    /// Allows using non lexical lifetimes (RFC 2094).\n    (active, nll, &quot;1.0.0&quot;, Some(43234), None),\n\n    /// Allows using slice patterns.\n    (active, slice_patterns, &quot;1.0.0&quot;, Some(62254), None),\n\n    /// Allows the definition of `const` functions with some advanced features.\n    (active, const_fn, &quot;1.2.0&quot;, Some(57563), None),\n\n    /// Allows associated type defaults.\n    (active, associated_type_defaults, &quot;1.2.0&quot;, Some(29661), None),\n\n    /// Allows `#![no_core]`.\n    (active, no_core, &quot;1.3.0&quot;, Some(29639), None),\n\n    /// Allows default type parameters to influence type inference.\n    (active, default_type_parameter_fallback, &quot;1.3.0&quot;, Some(27336), None),\n\n    /// Allows `repr(simd)` and importing the various simd intrinsics.\n    (active, repr_simd, &quot;1.4.0&quot;, Some(27731), None),\n\n    /// Allows `extern &quot;platform-intrinsic&quot; { ... }`.\n    (active, platform_intrinsics, &quot;1.4.0&quot;, Some(27731), None),\n\n    /// Allows `#[unwind(..)]`.\n    ///\n    /// Permits specifying whether a function should permit unwinding or abort on unwind.\n    (active, unwind_attributes, &quot;1.4.0&quot;, Some(58760), None),\n\n    /// Allows `#[no_debug]`.\n    (active, no_debug, &quot;1.5.0&quot;, Some(29721), None),\n\n    /// Allows attributes on expressions and non-item statements.\n    (active, stmt_expr_attributes, &quot;1.6.0&quot;, Some(15701), None),\n\n    /// Allows the use of type ascription in expressions.\n    (active, type_ascription, &quot;1.6.0&quot;, Some(23416), None),\n\n    /// Allows `cfg(target_thread_local)`.\n    (active, cfg_target_thread_local, &quot;1.7.0&quot;, Some(29594), None),\n\n    /// Allows specialization of implementations (RFC 1210).\n    (active, specialization, &quot;1.7.0&quot;, Some(31844), None),\n\n    /// Allows using `#[naked]` on functions.\n    (active, naked_functions, &quot;1.9.0&quot;, Some(32408), None),\n\n    /// Allows `cfg(target_has_atomic = &quot;...&quot;)`.\n    (active, cfg_target_has_atomic, &quot;1.9.0&quot;, Some(32976), None),\n\n    /// Allows `X..Y` patterns.\n    (active, exclusive_range_pattern, &quot;1.11.0&quot;, Some(37854), None),\n\n    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n    (active, never_type, &quot;1.13.0&quot;, Some(35121), None),\n\n    /// Allows exhaustive pattern matching on types that contain uninhabited types.\n    (active, exhaustive_patterns, &quot;1.13.0&quot;, Some(51085), None),\n\n    /// Allows `union`s to implement `Drop`. Moreover, `union`s may now include fields\n    /// that don't implement `Copy` as long as they don't have any drop glue.\n    /// This is checked recursively. On encountering type variable where no progress can be made,\n    /// `T: Copy` is used as a substitute for &quot;no drop glue&quot;.\n    ///\n    /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n    (active, untagged_unions, &quot;1.13.0&quot;, Some(55149), None),\n\n    /// Allows `#[link(..., cfg(..))]`.\n    (active, link_cfg, &quot;1.14.0&quot;, Some(37406), None),\n\n    /// Allows `extern &quot;ptx-*&quot; fn()`.\n    (active, abi_ptx, &quot;1.15.0&quot;, Some(38788), None),\n\n    /// Allows the `#[repr(i128)]` attribute for enums.\n    (active, repr128, &quot;1.16.0&quot;, Some(35118), None),\n\n    /// Allows `#[link(kind=&quot;static-nobundle&quot;...)]`.\n    (active, static_nobundle, &quot;1.16.0&quot;, Some(37403), None),\n\n    /// Allows `extern &quot;msp430-interrupt&quot; fn()`.\n    (active, abi_msp430_interrupt, &quot;1.16.0&quot;, Some(38487), None),\n\n    /// Allows declarative macros 2.0 (`macro`).\n    (active, decl_macro, &quot;1.17.0&quot;, Some(39412), None),\n\n    /// Allows `extern &quot;x86-interrupt&quot; fn()`.\n    (active, abi_x86_interrupt, &quot;1.17.0&quot;, Some(40180), None),\n\n    /// Allows overlapping impls of marker traits.\n    (active, overlapping_marker_traits, &quot;1.18.0&quot;, Some(29864), None),\n\n    /// Allows a test to fail without failing the whole suite.\n    (active, allow_fail, &quot;1.19.0&quot;, Some(46488), None),\n\n    /// Allows unsized tuple coercion.\n    (active, unsized_tuple_coercion, &quot;1.20.0&quot;, Some(42877), None),\n\n    /// Allows defining generators.\n    (active, generators, &quot;1.21.0&quot;, Some(43122), None),\n\n    /// Allows `#[doc(cfg(...))]`.\n    (active, doc_cfg, &quot;1.21.0&quot;, Some(43781), None),\n\n    /// Allows `#[doc(masked)]`.\n    (active, doc_masked, &quot;1.21.0&quot;, Some(44027), None),\n\n    /// Allows `#[doc(spotlight)]`.\n    (active, doc_spotlight, &quot;1.22.0&quot;, Some(45040), None),\n\n    /// Allows `#[doc(include = &quot;some-file&quot;)]`.\n    (active, external_doc, &quot;1.22.0&quot;, Some(44732), None),\n\n    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n    (active, crate_visibility_modifier, &quot;1.23.0&quot;, Some(53120), None),\n\n    /// Allows defining `extern type`s.\n    (active, extern_types, &quot;1.23.0&quot;, Some(43467), None),\n\n    /// Allows trait methods with arbitrary self types.\n    (active, arbitrary_self_types, &quot;1.23.0&quot;, Some(44874), None),\n\n    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &amp;'a u8) -&gt; &amp;'a u8`).\n    (active, in_band_lifetimes, &quot;1.23.0&quot;, Some(44524), None),\n\n    /// Allows associated types to be generic, e.g., `type Foo&lt;T&gt;;` (RFC 1598).\n    (active, generic_associated_types, &quot;1.23.0&quot;, Some(44265), None),\n\n    /// Allows defining `trait X = A + B;` alias items.\n    (active, trait_alias, &quot;1.24.0&quot;, Some(41517), None),\n\n    /// Allows infering `'static` outlives requirements (RFC 2093).\n    (active, infer_static_outlives_requirements, &quot;1.26.0&quot;, Some(54185), None),\n\n    /// Allows accessing fields of unions inside `const` functions.\n    (active, const_fn_union, &quot;1.27.0&quot;, Some(51909), None),\n\n    /// Allows casting raw pointers to `usize` during const eval.\n    (active, const_raw_ptr_to_usize_cast, &quot;1.27.0&quot;, Some(51910), None),\n\n    /// Allows dereferencing raw pointers during const eval.\n    (active, const_raw_ptr_deref, &quot;1.27.0&quot;, Some(51911), None),\n\n    /// Allows comparing raw pointers during const eval.\n    (active, const_compare_raw_pointers, &quot;1.27.0&quot;, Some(53020), None),\n\n    /// Allows `#[doc(alias = &quot;...&quot;)]`.\n    (active, doc_alias, &quot;1.27.0&quot;, Some(50146), None),\n\n    /// Allows inconsistent bounds in where clauses.\n    (active, trivial_bounds, &quot;1.28.0&quot;, Some(48214), None),\n\n    /// Allows `'a: { break 'a; }`.\n    (active, label_break_value, &quot;1.28.0&quot;, Some(48594), None),\n\n    /// Allows using `#[doc(keyword = &quot;...&quot;)]`.\n    (active, doc_keyword, &quot;1.28.0&quot;, Some(51315), None),\n\n    /// Allows using `try {...}` expressions.\n    (active, try_blocks, &quot;1.29.0&quot;, Some(31436), None),\n\n    /// Allows defining an `#[alloc_error_handler]`.\n    (active, alloc_error_handler, &quot;1.29.0&quot;, Some(51540), None),\n\n    /// Allows using the `amdgpu-kernel` ABI.\n    (active, abi_amdgpu_kernel, &quot;1.29.0&quot;, Some(51575), None),\n\n    /// Allows panicking during const eval (producing compile-time errors).\n    (active, const_panic, &quot;1.30.0&quot;, Some(51999), None),\n\n    /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n    (active, marker_trait_attr, &quot;1.30.0&quot;, Some(29864), None),\n\n    /// Allows macro invocations on modules expressions and statements and\n    /// procedural macros to expand to non-items.\n    (active, proc_macro_hygiene, &quot;1.30.0&quot;, Some(54727), None),\n\n    /// Allows unsized rvalues at arguments and parameters.\n    (active, unsized_locals, &quot;1.30.0&quot;, Some(48055), None),\n\n    /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n    (active, custom_test_frameworks, &quot;1.30.0&quot;, Some(50297), None),\n\n    /// Allows non-builtin attributes in inner attribute position.\n    (active, custom_inner_attributes, &quot;1.30.0&quot;, Some(54726), None),\n\n    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n    (active, impl_trait_in_bindings, &quot;1.30.0&quot;, Some(63065), None),\n\n    /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n    (active, lint_reasons, &quot;1.31.0&quot;, Some(54503), None),\n\n    /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n    (active, precise_pointer_size_matching, &quot;1.32.0&quot;, Some(56354), None),\n\n    /// Allows using `#[ffi_returns_twice]` on foreign functions.\n    (active, ffi_returns_twice, &quot;1.34.0&quot;, Some(58314), None),\n\n    /// Allows const generic types (e.g. `struct Foo&lt;const N: usize&gt;(...);`).\n    (active, const_generics, &quot;1.34.0&quot;, Some(44580), None),\n\n    /// Allows using `#[optimize(X)]`.\n    (active, optimize_attribute, &quot;1.34.0&quot;, Some(54882), None),\n\n    /// Allows using C-variadics.\n    (active, c_variadic, &quot;1.34.0&quot;, Some(44930), None),\n\n    /// Allows the user of associated type bounds.\n    (active, associated_type_bounds, &quot;1.34.0&quot;, Some(52662), None),\n\n    /// Allows `if/while p &amp;&amp; let q = r &amp;&amp; ...` chains.\n    (active, let_chains, &quot;1.37.0&quot;, Some(53667), None),\n\n    /// Allows #[repr(transparent)] on enums (RFC 2645).\n    (active, transparent_enums, &quot;1.37.0&quot;, Some(60405), None),\n\n    /// Allows #[repr(transparent)] on unions (RFC 2645).\n    (active, transparent_unions, &quot;1.37.0&quot;, Some(60405), None),\n\n    /// Allows explicit discriminants on non-unit enum variants.\n    (active, arbitrary_enum_discriminant, &quot;1.37.0&quot;, Some(60553), None),\n\n    /// Allows `impl Trait` with multiple unrelated lifetimes.\n    (active, member_constraints, &quot;1.37.0&quot;, Some(61977), None),\n\n    /// Allows `async || body` closures.\n    (active, async_closure, &quot;1.37.0&quot;, Some(62290), None),\n\n    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n    (active, const_in_array_repeat_expressions, &quot;1.37.0&quot;, Some(49147), None),\n\n    /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n    (active, type_alias_impl_trait, &quot;1.38.0&quot;, Some(63063), None),\n\n    /// Allows the use of or-patterns (e.g., `0 | 1`).\n    (active, or_patterns, &quot;1.38.0&quot;, Some(54883), None),\n\n    /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n    (active, const_extern_fn, &quot;1.40.0&quot;, Some(64926), None),\n\n    /// Allows the use of raw-dylibs (RFC 2627).\n    (active, raw_dylib, &quot;1.40.0&quot;, Some(58713), None),\n\n    /// Allows `#[track_caller]` to be used which provides\n    /// accurate caller location reporting during panic (RFC 2091).\n    (active, track_caller, &quot;1.40.0&quot;, Some(47809), None),\n\n    /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n    /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n    /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden.\n    (active, object_safe_for_dispatch, &quot;1.40.0&quot;, Some(43561), None),\n\n    /// Allows using the `efiapi` ABI.\n    (active, abi_efiapi, &quot;1.40.0&quot;, Some(65815), None),\n\n    /// Allows `&amp;raw const $place_expr` and `&amp;raw mut $place_expr` expressions.\n    (active, raw_ref_op, &quot;1.41.0&quot;, Some(64490), None),\n\n    /// Allows diverging expressions to fall back to `!` rather than `()`.\n    (active, never_type_fallback, &quot;1.41.0&quot;, Some(65992), None),\n\n    /// Allows using the `#[register_attr]` attribute.\n    (active, register_attr, &quot;1.41.0&quot;, Some(66080), None),\n\n    /// Allows using the `#[register_tool]` attribute.\n    (active, register_tool, &quot;1.41.0&quot;, Some(66079), None),\n\n    /// Allows the use of `if` and `match` in constants.\n    (active, const_if_match, &quot;1.41.0&quot;, Some(49146), None),\n\n    /// Allows the use of `#[cfg(sanitize = &quot;option&quot;)]`; set when -Zsanitizer is used.\n    (active, cfg_sanitize, &quot;1.41.0&quot;, Some(39699), None),\n\n    /// Allows using `&amp;mut` in constant functions.\n    (active, const_mut_refs, &quot;1.41.0&quot;, Some(57349), None),\n\n    /// Allows the use of `loop` and `while` in constants.\n    (active, const_loop, &quot;1.41.0&quot;, Some(52000), None),\n\n    // -------------------------------------------------------------------------\n    // feature-group-end: actual feature gates\n    // -------------------------------------------------------------------------\n);\n</code></pre>\n<p>Note that some of them are internal to <em>rustc</em> and not meant to be used, and that this list changes constantly.</p>\n<p>The source also contains a list of <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_feature/removed.rs\" rel=\"nofollow noreferrer\">all features that were removed</a> or <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_feature/accepted.rs\" rel=\"nofollow noreferrer\">accepted</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1466006285, "post_id": 37840167, "comment_id": 63141527, "body": "The feature <code>a</code> is in tests, you might want to exclude the <code>src&#47;test</code> directory."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1466006598, "last_edit_date": 1466006598, "creation_date": 1466005738, "answer_id": 37840167, "question_id": 37838688, "link": "https://stackoverflow.com/questions/37838688/up-to-date-list-of-available-nightly-features/37840167#37840167", "title": "Up to date list of available nightly features?", "body": "<p>The file <a href=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/feature_gate.rs\" rel=\"nofollow\"><code>src/libsyntax/feature_gate.rs</code></a> and the <a href=\"https://github.com/rust-lang/rust/blob/master/src/doc/reference.md#compiler-features\" rel=\"nofollow\">reference</a> only list compiler features, but not api features. For example, the feature <a href=\"https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.weak_count\" rel=\"nofollow\"><code>rc_counts</code></a> is not listed.</p>\n\n<p>Using this command:</p>\n\n<pre><code>ack -h --output '$1' 'unstable\\(feature = \"(\\w+)\"' $(ls -d * | grep -v -x test) | sort | uniq\n</code></pre>\n\n<p>on the Rust <code>src</code> dir, I got the following list:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>alloc\nalloc_jemalloc\nalloc_system\narc_counts\nas_unsafe_cell\nbinary_heap_append\nbinary_heap_extras\nborrow_state\nbox_heap\nbtree_append\nbtree_range\nbtree_split_off\ncell_extras\ncell_get_mut\ncoerce_unsized\ncollection_placement\ncollections\ncollections_bound\ncollections_range\ncore_char_ext\ncore_float\ncore_intrinsics\ncore_panic\ncore_private_bignum\ncore_private_diy_float\ncore_slice_ext\ncore_str_ext\nc_void_variant\ndec2flt\ndeque_extras\nderive_clone_copy\nenumset\nerror_type_id\nexit_status_from\nfilling_drop\nfixed_size_array\nfloat_extras\nflt2dec\nfmt_flags_align\nfmt_internals\nfnbox\nfn_traits\nget_type_id\nheap_api\ninclusive_range\ninteger_atomics\nint_error_internals\nio\nio_error_internals\nip\nipv6_to_octets\niter_arith\nlibstd_io_internals\nlibstd_sys_internals\nlibstd_thread_internals\nlinked_list_contains\nlinked_list_extras\nlookup_host\nmpsc_select\nnonzero\nonce_poison\noom\npanic_abort\npanic_unwind\npattern\npeekable_is_empty\nplacement_in\nplacement_new_protocol\nprint\nprocess_exec\npthread_t\nrand\nrange_contains\nraw\nrc_counts\nrc_would_unwrap\nreflect_marker\nrt\nrustc_private\nrustdoc\nset_stdio\nshared\nslice_concat_ext\nstatic_condvar\nstatic_mutex\nstatic_rwlock\nstep_by\nstep_trait\nstr_char\nstr_escape\nstr_internals\ntest\nthread_local_internals\nthread_local_state\ntry_from\nunicode\nunique\nunsize\nvec_deque_contains\nzero_one\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "is_accepted": false, "score": 2, "last_activity_date": 1526977583, "creation_date": 1526977583, "answer_id": 50463101, "question_id": 37838688, "link": "https://stackoverflow.com/questions/37838688/up-to-date-list-of-available-nightly-features/50463101#50463101", "title": "Up to date list of available nightly features?", "body": "<p>Maybe <a href=\"https://doc.rust-lang.org/beta/unstable-book/\" rel=\"nofollow noreferrer\">\"The Unstable Book\"</a>?</p>\n\n<ul>\n<li>I don't copy &amp; paste the content here because it's constantly changing so very likely to be invalidated soon.</li>\n</ul>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3094, "favorite_count": 3, "accepted_answer_id": 37838882, "answer_count": 3, "score": 8, "last_activity_date": 1618315395, "creation_date": 1466001903, "question_id": 37838688, "link": "https://stackoverflow.com/questions/37838688/up-to-date-list-of-available-nightly-features", "title": "Up to date list of available nightly features?", "body": "<p>Where can I find an up to date list of available nightly features that I can activate?</p>\n\n<p>Example:</p>\n\n<pre><code>#![feature(plugin_registrar, rustc_private)]\n</code></pre>\n"}, {"tags": ["pointers", "rust", "dereference", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466040633, "post_id": 37836212, "comment_id": 63156449, "body": "Let me add that I&#39;ve found <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0241-deref-conversions.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a> most helpful in understanding the design intention/thinking behind Deref behavior."}], "answers": [{"comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466016956, "post_id": 37838464, "comment_id": 63147649, "body": "This is great! Can you clarify for <code>&#47;&#47; *Deref::deref(pair)</code> why the <code>*</code> <i>and</i> <code>Deref</code> both appear in your explanation? Shouldn&#39;t just one be there?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466017486, "post_id": 37838464, "comment_id": 63147937, "body": "The compiler translates <code>*pair</code> to <code>*Deref::deref(pair)</code> and <code>&amp;*pair</code> to <code>&amp;*Deref::deref(pair)</code>, considering that <code>Deref::deref</code> returns <code>&amp;T</code>, then <code>*pair</code> produces <code>T</code> and <code>&amp;*pair</code> produces <code>&amp;T</code>."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466034743, "post_id": 37838464, "comment_id": 63155163, "body": "Silly question, but if <code>*pair</code> expands to <code>*Deref::deref(pair)</code>, then why doesn&#39;t this in turn expand to <code>*Deref::refer(*Deref::deref(pair))</code>?"}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466042477, "post_id": 37838464, "comment_id": 63156841, "body": "Also is it at all possible to explain <a href=\"https://doc.rust-lang.org/src/alloc/up/src/liballoc/boxed.rs.html#459\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/alloc/up/src/liballoc/boxed.rs.html#45&zwnj;&#8203;9</a> \u2014 how is this not recursive?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1466113185, "post_id": 37838464, "comment_id": 63196399, "body": "I tried to find an official description of how the translation is done but did not succeed. But I suppose that the expansion is done one time for each <code>*</code> and that the result is not expanded again. If I find an official description, I will update the answer."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1466002578, "last_edit_date": 1466002578, "creation_date": 1466001281, "answer_id": 37838464, "question_id": 37836212, "link": "https://stackoverflow.com/questions/37836212/when-should-be-used-on-both-sides-of-an-assignment/37838464#37838464", "title": "When should &quot;&amp;&quot; be used on both sides of an assignment?", "body": "<p>The use of <code>&amp;</code> in this case does not make difference because the LHS is a <a href=\"https://doc.rust-lang.org/book/patterns.html#destructuring\" rel=\"nofollow\">destructuring pattern</a>. In my opinion, this example should not use <code>&amp;</code>. However, in other cases there is a important difference: <code>*</code> moves the deferred value:</p>\n\n<pre><code>let p = *pair; // *Deref::deref(pair)\n// pair cannot be used anymore because the deferred value was moved\n\nlet p = &amp;*pair; // &amp;*Deref::deref(pair)\n// p: &amp;(Mutex::new(false), Condvar::new())\n// p and pair can be used\n</code></pre>\n\n<blockquote>\n  <p>I'm still struggling to understand when/where &amp;* should idiomatically appear in Rust code.</p>\n</blockquote>\n\n<p>In general, use <code>&amp;*</code> when a reference to the deferred value is needed, like in a function call:</p>\n\n<pre><code>fn sum(a: &amp;u32, b: &amp;u32) -&gt; u32 {\n   a + b\n}\n\nfn main() {\n    let x = Box::new(10);\n    // println!(\"{:?}\", sum(&amp;1, x)); // do not work x is Box&lt;u32&gt;\n    // println!(\"{:?}\", sum(&amp;1, *x)); // do not work *x is u32\n    println!(\"{:?}\", sum(&amp;1, &amp;*x)); // ok &amp;*x is &amp;u32\n}\n</code></pre>\n\n<blockquote>\n  <p>My instinct is to \"see\" (read) this character combination as a no-op, though I understand that because of Rust's Deref semantics this isn't the case.</p>\n</blockquote>\n\n<p>Considering that <a href=\"https://doc.rust-lang.org/stable/book/deref-coercions.html\" rel=\"nofollow\">The Book</a> says \"<code>Deref</code> is useful for writing custom pointer types\", I like to read <code>&amp;*</code> as \"a reference to the value that this (smart) pointer points at\".</p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 141, "favorite_count": 0, "accepted_answer_id": 37838464, "answer_count": 1, "score": 4, "last_activity_date": 1466002578, "creation_date": 1465995630, "last_edit_date": 1466001794, "question_id": 37836212, "link": "https://stackoverflow.com/questions/37836212/when-should-be-used-on-both-sides-of-an-assignment", "title": "When should &quot;&amp;&quot; be used on both sides of an assignment?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/sync/struct.Condvar.html\" rel=\"nofollow\"><code>Condvar</code></a> docs shows an example that includes the following:</p>\n\n<pre><code>let pair = Arc::new((Mutex::new(false), Condvar::new()));\n// &lt;snipped for brevity&gt;\nlet &amp;(ref lock, ref cvar) = &amp;*pair;\n</code></pre>\n\n<p>I'm wondering what the advantage might be to including <code>&amp;</code> on both sides of this assignment. In other words, why not just write:</p>\n\n<pre><code>let (ref lock, ref cvar) = *pair;\n</code></pre>\n\n<p>Both versions compile; is there any semantic difference? And if not, is there any reason to prefer the syntax that appears in the example?</p>\n\n<p>In general, <strong>I'm still struggling to understand when/where <code>&amp;*</code> should idiomatically appear in Rust code</strong>. My instinct is to \"see\" (read) this character combination as a no-op, though I understand that because of Rust's <code>Deref</code> semantics this isn't the case.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 1, "creation_date": 1465980702, "post_id": 37829661, "comment_id": 63122917, "body": "If possible, you must use <code>Cow</code>, see <a href=\"http://stackoverflow.com/questions/36480845/how-to-avoid-temporary-allocations-when-using-complex-key-for-hashmap\" title=\"how to avoid temporary allocations when using complex key for hashmap\">stackoverflow.com/questions/36480845/&hellip;</a>"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1465991702, "post_id": 37829661, "comment_id": 63130626, "body": "Any reason you don&#39;t want to use <code>HashMap&lt;(&amp;str, usize), f64&gt;</code>? It could be that I don&#39;t understand rust well enough but that seems like a reasonable solution to me."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 1, "creation_date": 1465994225, "post_id": 37829661, "comment_id": 63132433, "body": "@user25064 something needs to hold the allocation of the <code>String</code>, and perhaps the key of the map is the most natural. Splitting the two up is a potential solution though, depending on the usecase."}], "answers": [{"comments": [{"owner": {"reputation": 327, "user_id": 2208440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/894e5a723066b84bd8b013cf097a7282?s=128&d=identicon&r=PG", "display_name": "Kenji", "link": "https://stackoverflow.com/users/2208440/kenji"}, "edited": false, "score": 0, "creation_date": 1615262385, "post_id": 37830094, "comment_id": 117630537, "body": "Note that this is no longer true. With edition 2018, you can look up String keys with &amp;str."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 5, "last_activity_date": 1465979538, "creation_date": 1465979538, "answer_id": 37830094, "question_id": 37829661, "link": "https://stackoverflow.com/questions/37829661/look-up-key-in-hashmapstring-usize-f64-in-rust/37830094#37830094", "title": "Look up key in HashMap&lt;(String, usize), f64&gt; in Rust", "body": "<p>No, you can't.  The options for looking up in the <code>HashMap&lt;K,V&gt;</code> are:</p>\n\n<ul>\n<li>The <code>entry</code> method, which requires a <code>K</code> by value, which in your case is a <code>(String, usize)</code> - so you'd need to construct a <code>String</code>.</li>\n<li>The various <code>get</code>, <code>contains_key</code> etc. all take a \"borrowed\" form of <code>K</code> (the documentation says <code>&amp;Q</code>, where <code>K: Borrow&lt;Q&gt;</code>; this means either a <code>&amp;(String, usize)</code> or something that can produced one.</li>\n</ul>\n\n<p>Technically you could iterate through it and do your own comparisons, but that's probably not what you want!</p>\n"}, {"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 4, "last_activity_date": 1466005989, "creation_date": 1466005989, "answer_id": 37840269, "question_id": 37829661, "link": "https://stackoverflow.com/questions/37829661/look-up-key-in-hashmapstring-usize-f64-in-rust/37840269#37840269", "title": "Look up key in HashMap&lt;(String, usize), f64&gt; in Rust", "body": "<p>There is, however, a method to do this that does not involve allocating a string. But you'll have to change your Hashmap so the key is of type <code>(std::borrow::Cow&lt;'a, str&gt;, usize)</code> (for some lifetime <code>'a</code>). Then you can look up values with <code>map.get((Cow::Borrowed(my_str_slice), 0))</code>.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 483, "favorite_count": 2, "closed_date": 1532617878, "answer_count": 2, "score": 5, "last_activity_date": 1466005989, "creation_date": 1465978282, "question_id": 37829661, "link": "https://stackoverflow.com/questions/37829661/look-up-key-in-hashmapstring-usize-f64-in-rust", "closed_reason": "Duplicate", "title": "Look up key in HashMap&lt;(String, usize), f64&gt; in Rust", "body": "<p>I have a <code>HashMap&lt;(String, usize), f64&gt;</code>. I also have a <code>&amp;str</code> and a <code>usize</code>, which I would like to look up in this <code>HashMap</code> without cloning. Is there a way to lookup a <code>(&amp;str, usize)</code> as a <code>(String, usize)</code> somehow?</p>\n"}, {"tags": ["compare", "rust", "equality"], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 4, "last_activity_date": 1465977165, "creation_date": 1465977165, "answer_id": 37829284, "question_id": 37829012, "link": "https://stackoverflow.com/questions/37829012/compare-fooi32-and-foou32/37829284#37829284", "title": "Compare `Foo&lt;i32&gt;` and `Foo&lt;u32&gt;`", "body": "<blockquote>\n  <p>The problem is that trait <code>PartialEq</code> can only compare the <strong>same</strong> types.</p>\n</blockquote>\n\n<p>That's not true. It just defaults the <code>Rhs</code> to the same type as <code>Self</code>:</p>\n\n<pre><code>pub trait PartialEq&lt;Rhs = Self&gt; where Rhs: ?Sized {\n    ...\n}\n</code></pre>\n\n<p>Here's how you would implement <code>PartialEq</code> for <code>Foo&lt;L&gt;</code> and <code>Foo&lt;R&gt;</code> for any <code>L</code> and <code>R</code>:</p>\n\n<pre><code>impl&lt;L, R&gt; PartialEq&lt;Foo&lt;R&gt;&gt; for Foo&lt;L&gt; {\n    fn eq(&amp;self, other: &amp;Foo&lt;R&gt;) -&gt; bool {\n        self.id == other.id\n    }\n}\n</code></pre>\n\n<p>Note that I also had to change the <code>impl</code> block to fix some type inference errors. Final code:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    id: usize,\n    data: T,\n}\n\nimpl Foo&lt;i32&gt; {\n    fn new_i32(i: i32) -&gt; Foo&lt;i32&gt; {\n        Foo { id: 0, data: i }\n    }\n}\n\nimpl Foo&lt;u32&gt; {\n    fn new_u32(u: u32) -&gt; Foo&lt;u32&gt; {\n        Foo { id: 1, data: u }\n    }\n}\n\nimpl&lt;L, R&gt; PartialEq&lt;Foo&lt;R&gt;&gt; for Foo&lt;L&gt; {\n    fn eq(&amp;self, other: &amp;Foo&lt;R&gt;) -&gt; bool {\n        self.id == other.id\n    }\n}\n\nfn main() {\n    let a = Foo::new_u32(123);\n    let b = Foo::new_i32(123);\n    println!(\"{}\", a == b);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>false\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=51166880a9ab0c49d7650588c4ed8290&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">https://play.rust-lang.org/?gist=51166880a9ab0c49d7650588c4ed8290&amp;version=stable&amp;backtrace=0</a></p>\n"}], "owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 0, "accepted_answer_id": 37829284, "answer_count": 1, "score": 0, "last_activity_date": 1465977165, "creation_date": 1465976333, "question_id": 37829012, "link": "https://stackoverflow.com/questions/37829012/compare-fooi32-and-foou32", "title": "Compare `Foo&lt;i32&gt;` and `Foo&lt;u32&gt;`", "body": "<p>Need realize the possibility of comparison <code>Foo&lt;i32&gt;</code> and <code>Foo&lt;u32&gt;</code>.</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    id: usize,\n    data: T\n}\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn new_i32(i: i32) -&gt; Foo&lt;i32&gt; {\n        Foo {\n            id: 0,\n            data: i\n        }\n    }\n    fn new_u32(u: u32) -&gt; Foo&lt;u32&gt; {\n        Foo {\n            id: 1,\n            data: u\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is that trait <code>PartialEq</code> can only compare the <strong>same</strong> types.</p>\n\n<pre><code>impl&lt;T&gt; PartialEq for Foo&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.id == other.id\n    }\n}\n</code></pre>\n\n<p>And this dont work:</p>\n\n<pre><code>let a = Foo::new_u32(123);\nlet b = Foo::new_i32(123);\nprintln!(\"{}\", a == b);\n</code></pre>\n\n<p>Full code in <a href=\"https://play.rust-lang.org/?gist=37aa9c840aad8311e5705d4ab8deb1e3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play.rust-lang.org</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 2, "creation_date": 1465973633, "post_id": 37827954, "comment_id": 63118650, "body": "<code>return log::LogLevelFilter::Trace</code> means you return from the current function. So the function&#39;s return type must match."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1465994147, "post_id": 37828098, "comment_id": 63132389, "body": "Could even end up with <code>let level = env::var(&quot;TRACE_ENABLED&quot;).ok().map_or(LogLevelFilter::Debug, |_| LogLevelFilter::Trace);</code>"}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1465996097, "post_id": 37828098, "comment_id": 63133869, "body": "I think the outer block isn&#39;t necessary, <a href=\"https://play.rust-lang.org/?code=enum%20LogLevel%20%7B%0A%20%20%20%20Trace%2C%0A%20%20%20%20Debug%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20cond%20%3D%20true%3B%0A%20%20%20%20let%20level%20%3D%20if%20cond%20%7B%0A%20%20%20%20%20%20%20%20LogLevel%3A%3ATrace%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20LogLevel%3A%3ADebug%0A%20%20%20%20%7D%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\"><code>let level = if env::var(&quot;TRACE_ENABLED&quot;).is_ok() { log::LogLevelFilter::Trace } else { log::LogLevelFilter::Debug };</code></a> is enough."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465996449, "post_id": 37828098, "comment_id": 63134114, "body": "@Shepmaster that looks a bit too cryptic in my opinion, but it&#39;s a valid shorter solution :)"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1465996505, "post_id": 37828098, "comment_id": 63134154, "body": "@Kroltan you&#39;re right, thanks! I&#39;ve updated my code."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 6, "last_activity_date": 1465996475, "last_edit_date": 1465996475, "creation_date": 1465973731, "answer_id": 37828098, "question_id": 37827954, "link": "https://stackoverflow.com/questions/37827954/ambiguity-of-type-during-initialization/37828098#37828098", "title": "Ambiguity of type during initialization", "body": "<p>The <code>return</code> here is trying to return that value from the function that you're in (not the curly brace block), and that function expects a return value of type <code>()</code>, which is what the error message says.</p>\n\n<p>A more idiomatic way to write this would be:</p>\n\n<pre><code>let level: log::LogLevelFilter = if env::var(\"TRACE_ENABLED\").is_ok() {\n    log::LogLevelFilter::Trace\n} else {\n    log::LogLevelFilter::Debug\n};\n</code></pre>\n\n<p>and you most likely don't even need the <code>level: log::LogLevelFilter</code> type annotation.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 37828098, "answer_count": 1, "score": 1, "last_activity_date": 1465996475, "creation_date": 1465973264, "last_edit_date": 1465993993, "question_id": 37827954, "link": "https://stackoverflow.com/questions/37827954/ambiguity-of-type-during-initialization", "title": "Ambiguity of type during initialization", "body": "<p>I've come across an interesting situation where Rust can't properly deduce the type of a value during initialization even if it is specified. Let's start with examples:</p>\n\n<p>This is ok:</p>\n\n<pre><code>let level: log::LogLevelFilter = {\n    let mut level = log::LogLevelFilter::Debug;\n    if env::var(\"TRACE_ENABLED\").is_ok() {\n        level = log::LogLevelFilter::Trace;\n    }\n    level\n};\n</code></pre>\n\n<p>This is not:</p>\n\n<pre><code>let level: log::LogLevelFilter = {\n    if env::var(\"TRACE_ENABLED\").is_ok() {\n        return log::LogLevelFilter::Trace\n    }\n    log::LogLevelFilter::Debug\n};\n</code></pre>\n\n<p>Error text:</p>\n\n<pre><code>src/main.rs:26:20: 26:46 error: mismatched types:\n expected `()`,\n    found `log::LogLevelFilter`\n(expected (),\n    found enum `log::LogLevelFilter`) [E0308]\nsrc/main.rs:26             return log::LogLevelFilter::Trace\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:26:20: 26:46 help: run `rustc --explain E0308` to see a detailed explanation\n</code></pre>\n\n<p>What is wrong here? I think I've written code like this before without any problem.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e24219cbb9c78e2ce63d9da5e0c0e30e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Shorter example with similar problem</a>.</p>\n"}, {"tags": ["winapi", "rust", "ffi", "type-safety", "ownership-semantics"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465959464, "post_id": 37824614, "comment_id": 63113688, "body": "Your question is <b>extremely broad</b> and is likely to be closed. I see 4 distinct question marks and there&#39;s a handful of other implicit questions as well, with topics ranging from lifetimes to string manipulation, custom drop implementations and memoization. Each individual question has the potential to <i>itself</i> be overly broad. Stack Overflow is better suited to concise problems. Perhaps you&#39;d have better luck on <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">the users forum</a> or <a href=\"https://www.reddit.com/r/rust\" rel=\"nofollow noreferrer\">the subreddit</a>. Your questions might be suited to SO after being split up and heavily edited."}, {"owner": {"reputation": 17887, "user_id": 162273, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/430cb584ada70347d6bdaabdcf67390c?s=128&d=identicon&r=PG", "display_name": "Jason Kleban", "link": "https://stackoverflow.com/users/162273/jason-kleban"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465961303, "post_id": 37824614, "comment_id": 63114101, "body": "The question isn&#39;t about the specifics of these examples - it&#39;s about my probable misunderstanding of the big picture.  I&#39;m asking what Rust might be able to do for actually adding safety to the winapi vs things that can&#39;t be done (because they require something stronger than lifetimes which haven&#39;t been invented, or because the winapi has dynamic behaviors which would affect lifetimes in ways that couldn&#39;t be known at compile time (?), or whatever) or things that can&#39;t be done <i>in Rust</i>."}, {"owner": {"reputation": 17887, "user_id": 162273, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/430cb584ada70347d6bdaabdcf67390c?s=128&d=identicon&r=PG", "display_name": "Jason Kleban", "link": "https://stackoverflow.com/users/162273/jason-kleban"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465961474, "post_id": 37824614, "comment_id": 63114140, "body": "I mention that there are strings, pointers, handles just to mention a few considerations of data that seem to me to require special treatment (as opposed to structure values which seem rather straightforward)."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465991717, "post_id": 37824614, "comment_id": 63130636, "body": "@Shepmaster Do you think <a href=\"http://programmers.stackexchange.com/help/on-topic\">programmers.stackexchange.com/help/on-topic</a> is a good place for this question? Maybe move it there?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1465994370, "post_id": 37824614, "comment_id": 63132568, "body": "@ArtemGr maybe, but I don&#39;t hang out on Programmers enough to be confident about it. The &quot;no specific tools&quot; bullet point would be a bit worrying. Also, I don&#39;t know how many Rust folk hang out on Programmers. The great thing about <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">the users forum</a> or <a href=\"https://www.reddit.com/r/rust\" rel=\"nofollow noreferrer\">the subreddit</a> is that OP is very likely to get an answer from the maintainer of the winapi crates :-D"}, {"owner": {"user_type": "does_not_exist", "display_name": "user439793"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1466027790, "post_id": 37824614, "comment_id": 63153129, "body": "@ArtemGr the question rambles a bit making it a little unclear, so it would be best to improve it <i>before</i> migrating it anywhere. It <i>sounds</i> like it might be within the guardrails of &quot;on-topic&quot; at Programmers, but again, see my previous point (I have 20k+ rep at Programmers and have a hard time determining if it is on-topic). That being said, I think Shepmaster has a good point. We don&#39;t have much in the way of Rust expertise over at Programmers."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1466088202, "post_id": 37824614, "comment_id": 63182011, "body": "Usually the way FFI packages work in Rust is that you have an <code>x-sys</code> crate which provides the raw FFI bindings for lib <code>x</code> and then you have an <code>x</code> crate which uses the <code>x-sys</code> crate and provides a rust-y version of the api. For example <a href=\"https://crates.io/crates/libudev-sys\" rel=\"nofollow noreferrer\">libudev-sys</a> and <a href=\"https://crates.io/crates/libudev\" rel=\"nofollow noreferrer\">libudev</a>. I&#39;m not super familiar with <code>winapi</code> but it look to me like it&#39;s the raw bindings and not a rust-y version of the Windows api."}, {"owner": {"reputation": 17887, "user_id": 162273, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/430cb584ada70347d6bdaabdcf67390c?s=128&d=identicon&r=PG", "display_name": "Jason Kleban", "link": "https://stackoverflow.com/users/162273/jason-kleban"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1466117186, "post_id": 37824614, "comment_id": 63197820, "body": "@WesleyWiser&#39;s comment is in the right direction to be an answer!"}], "owner": {"reputation": 17887, "user_id": 162273, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/430cb584ada70347d6bdaabdcf67390c?s=128&d=identicon&r=PG", "display_name": "Jason Kleban", "link": "https://stackoverflow.com/users/162273/jason-kleban"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 213, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1465958977, "creation_date": 1465953489, "last_edit_date": 1465958977, "question_id": 37824614, "link": "https://stackoverflow.com/questions/37824614/encoding-stronger-safety-of-the-winapi-through-the-rust-ffi", "title": "Encoding stronger safety of the WinApi through the Rust FFI", "body": "<p>I'm playing around with the <a href=\"https://crates.io/crates/winapi\" rel=\"nofollow\">winapi crate</a>, but it doesn't seem to me to add <em>safety</em> to the Windows API - it seems merely to provide the types and signatures and allows us to program in mostly the same unsafe paradigms, but using Rust syntax.</p>\n\n<p>Is it possible to, say, subdivide the native types further in the Rust FFI to encode the implicit lifetime information so that winapi programming is actually safer?  When the winapi allocates to a pointer or a handle which must be deallocated/released with some call, can we attach the correct <code>Drop</code> behavior for that value?  Is Rust expressive enough?</p>\n\n<p>Of course we could completely wrap the winapi calls with safer objects that map between caller and the winapi, but that incurs a runtime hit during the copy/mapping and that's no fun.</p>\n\n<p>(Perhaps it's clear, but I'm new to Rust and to the WinApi and even to native programming.)</p>\n\n<p>I realize that string data would usually have to be converted to Rust's UTF-8.  But then I wonder if it would be possible to automatically wrap a native string in a memoizing struct where the string doesn't get converted to UTF-8 (transparently) unless it's needed in Rust code (vs just being passed back to the WinApi as the same format).</p>\n\n<p>Handles and pointers though wouldn't need any conversion, they just need the right lifetimes.  But there are many kinds of pointers and many kinds of handles and those type differences ought to be preserved in Rust.  But then to encode the library-specific free() with a <code>Drop</code> trait impl I think there would be many permutations and then we'd need overloads for other winapi functions which don't care who allocated it.  Right?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465953290, "post_id": 37824384, "comment_id": 63112357, "body": "I&#39;d recommend <a href=\"https://stackoverflow.com/posts/37824384/edit\">edit</a>ing your question to try to explain what you are trying to do. If you want &quot;any type which has trait <code>Foo</code>&quot;, that&#39;s just normal generic types, no need for macros: <code>fn bar&lt;T: Foo&gt;(val: T)</code>."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465954999, "post_id": 37824384, "comment_id": 63112667, "body": "I think I do explain what I try to do: Find the match expression in a macro which matches &quot;any type with trait foo&quot;."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465955522, "post_id": 37824384, "comment_id": 63112772, "body": "I would add a few versions  of rephrasing the question, were by some mystery I not unable to edit my own question..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465959104, "post_id": 37824384, "comment_id": 63113592, "body": "It&#39;s mostly unclear <b>why</b> you want to do this. If you try to pass a type that doesn&#39;t implement a trait to a function that requires it, the compiler will tell you. What good is having a boolean that tells you the same information?"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465959596, "post_id": 37824384, "comment_id": 63113725, "body": "As for the &quot;why&quot;, here 2 scenarios: 1. I wanted to write macros to create strings for various data types as a soft warm-up exercise with Rust macro system. Clearly a IntoIterator type would have different representation as a integral value etc.). 2. Imagine you want to specify to someone else what the type he is supposed to write for you is supposed to support. In the initial unit test, you could write &quot;specification&quot; like <code>has_trait!(IntoIterator,Foo);...</code> and send the guy off to work, them knowing what is expected."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465959972, "post_id": 37824384, "comment_id": 63113820, "body": "I don&#39;t understand why (1) would care about if it is a specific trait or not, as a type can implement multiple traits; a boolean for one trait doesn&#39;t seem useful. Really you&#39;d just use something like <a href=\"http://doc.rust-lang.org/std/any/struct.TypeId.html\" rel=\"nofollow noreferrer\"><code>TypeId</code></a>. For (2), you would write basically what I wrote earlier, no need for macros: <code>#[test] fn test1() { fn is_into_iterator&lt;T: IntoIterator&gt;() {}; is_into_iterator::&lt;MyType&gt;() }</code>"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465960064, "post_id": 37824384, "comment_id": 63113837, "body": "@Shepmaster Cannot help you not liking my why. But then - I mostly care about the &quot;how&quot; and &quot;possible&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1466069165, "post_id": 37828812, "comment_id": 63168362, "body": "Note: Rust <i>plans</i> to allow compile-time values as generic parameters (maybe limited to integers to start with). Compile-time reflection (as required by serialization frameworks) is performed via plugins, instead (only available on nightly) and not formally part of the language; there is no plan to integrate it further in the language as far as I know."}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 1, "last_activity_date": 1465975768, "creation_date": 1465975768, "answer_id": 37828812, "question_id": 37824384, "link": "https://stackoverflow.com/questions/37824384/is-it-possible-to-write-a-rust-macro-has-traittype-identexpr/37828812#37828812", "title": "Is it possible to write a Rust macro &quot;has_trait!(&lt;type&gt;,&lt;ident&gt;|&lt;expr&gt;)&quot;?", "body": "<p>What you basically want is static (or compile-time) reflection:\nAssigning values at compile-time, depending on the type system, to use at run-time. \nThis is possible in for example D or even C++, but not in Rust.</p>\n\n<p>Rust does not allow template specialisation or compile-time values as generic parameters, nor does it have static reflection capabilities like D. </p>\n"}, {"comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1466058698, "post_id": 37833071, "comment_id": 63161775, "body": "The fact that things like: <code>ty, ident, ...</code> are known might contribute to this misconception. So it knows already the token is a type, an identifier,... but that is where it probably ends."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1466068948, "post_id": 37833071, "comment_id": 63168214, "body": "@BitTickler: Ah yes, Rust has a regular grammar (hopefully LL(1)), to the <i>kind</i> of the entity is known without further analysis because at that point it can only be a type, identifier, expression, ... however note that <code>ty</code> is used interchangeably for both Type and Trait, and that you can perfectly use a non-existing type for it without issue (at this stage). From the point of view of the <i>syntax</i>, a type is a type, even if it was never defined."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1465987127, "creation_date": 1465987127, "answer_id": 37833071, "question_id": 37824384, "link": "https://stackoverflow.com/questions/37824384/is-it-possible-to-write-a-rust-macro-has-traittype-identexpr/37833071#37833071", "title": "Is it possible to write a Rust macro &quot;has_trait!(&lt;type&gt;,&lt;ident&gt;|&lt;expr&gt;)&quot;?", "body": "<p>I am afraid there is here a serious misconception about what macros can and cannot do.</p>\n\n<p>In Rust, a macro acts on the AST, short for Abstract <em>Syntax</em> Tree. This means that it has access to <em>syntactic</em> information (only).</p>\n\n<p>It means that anything that a macro does, you can also do without a macro. A macro is <em>just</em> syntactic sugar to avoid writing boilerplate over and over.</p>\n\n<p>And conversely, if you cannot do something without a macro, you cannot do it with a macro either.</p>\n\n<p>It is not immediately clear to me whether this information is available or not (proving a negative is always so difficult), however it is certain that the usage of macros has no influence on this availability.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466006462, "post_id": 37840385, "comment_id": 63141656, "body": "Presumably that is specific to each trait (or set of traits) that you&#39;d want to check, so you could then use a macro to make constructing these 9 lines of code easier."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1466007286, "post_id": 37840385, "comment_id": 63142211, "body": "Of course, but it was hard enough to type this version on my mobile phone. ;-)"}, {"owner": {"reputation": 576, "user_id": 1102705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3a4e9bdea8ad047c0e098f72ac2421c3?s=128&d=identicon&r=PG", "display_name": "lahwran", "link": "https://stackoverflow.com/users/1102705/lahwran"}, "edited": false, "score": 0, "creation_date": 1607368900, "post_id": 37840385, "comment_id": 115245852, "body": "do note that as of my comment here, specialization is actually unsound, and can produce unsafe behavior with safe code."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1607494539, "post_id": 37840385, "comment_id": 115286918, "body": "I should probably update the code to use autoref-based specialization then. It is both sound and available on stable."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 2, "last_activity_date": 1466006288, "creation_date": 1466006288, "answer_id": 37840385, "question_id": 37824384, "link": "https://stackoverflow.com/questions/37824384/is-it-possible-to-write-a-rust-macro-has-traittype-identexpr/37840385#37840385", "title": "Is it possible to write a Rust macro &quot;has_trait!(&lt;type&gt;,&lt;ident&gt;|&lt;expr&gt;)&quot;?", "body": "<p>As the other answers have already made clear, there is nothing a macro can do. And indeed, in current (stable) Rust, that's it. However, if you are willing to either use nightly or wait until specialization is stable, you can write and implement a trait to make that distinction, e.g.</p>\n\n<pre><code>#[feature(specialization)] // nightly only for now\n\ntrait HasMyTrait {\n    fn has_trait() -&gt; bool;\n}\n\nimpl&lt;T&gt; HasMyTrait for T {\n    default fn has_trait() -&gt; bool { false }\n}\n\nimpl&lt;T: MyTrait&gt; HasMyTrait for T {\n     fn has_trait() -&gt; bool { true }\n}\n</code></pre>\n\n<p>This is just a simple example, but you can switch out multiple implementations of whatever functionality you want based on if the type in question implements a trait or not.</p>\n\n<p>This code requires Rust 1.11.0 nightly as of 2016-06-02 or newer.</p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1095, "favorite_count": 1, "accepted_answer_id": 37828812, "answer_count": 3, "score": 2, "last_activity_date": 1466006288, "creation_date": 1465951537, "last_edit_date": 1466001355, "question_id": 37824384, "link": "https://stackoverflow.com/questions/37824384/is-it-possible-to-write-a-rust-macro-has-traittype-identexpr", "title": "Is it possible to write a Rust macro &quot;has_trait!(&lt;type&gt;,&lt;ident&gt;|&lt;expr&gt;)&quot;?", "body": "<p>I want to match, e.g. an <code>ident</code>'s type to implement a certain trait, how would I do that?</p>\n\n<p>Here the basic idea in (incomplete) code:</p>\n\n<pre><code>macro_rules! has_trait {\n    ($ ($t : ty), ($x : ident),) =&gt; {\n\n    } \n}\n\nfn trait_test() {\n    let a = vec![1, 2, 3];\n    let b = 42;\n    let a_iteratable = has_trait!(IntoIterator, a);\n    let b_iteratable = has_trait!(IntoIterator, b);\n    println!(\"{:?} iterable? {}\", a, a_iteratable);\n    println!(\"{:?} iterable? {}\", b, b_iteratable);\n}\n</code></pre>\n\n<p>I cannot wrap my head around how to say \"any type which has trait <code>Foo</code>\".</p>\n\n<p>I see 2 options how to tackle the problem:</p>\n\n<ol>\n<li>Find a match expression which matches any type with trait <code>$t</code> and simply return true on match, else (how works else?) false.</li>\n<li>In the body of the match of any type, use some code to determine if trait <code>$t</code> is implemented by the type of <code>$x</code>.</li>\n</ol>\n\n<p>I cannot see how to do either of both options.</p>\n\n<p>Can this even be done?</p>\n"}, {"tags": ["multithreading", "rust", "channels"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1465933399, "creation_date": 1465933399, "answer_id": 37820769, "question_id": 37820454, "link": "https://stackoverflow.com/questions/37820454/read-from-a-channel-or-timeout/37820769#37820769", "title": "Read from a channel or timeout?", "body": "<p>I don't know how you'd do it with the standard library channels, but the <a href=\"https://crates.io/crates/chan\">chan crate</a> provides a <code>chan_select!</code> macro:</p>\n\n<pre><code>#[macro_use]\nextern crate chan;\n\nuse std::time::Duration;\n\nfn main() {\n    let (_never_sends, never_receives) = chan::sync::&lt;bool&gt;(1);\n    let timeout = chan::after(Duration::from_millis(50));\n\n    chan_select! {\n        timeout.recv() =&gt; {\n            println!(\"timed out!\");\n        },\n        never_receives.recv() =&gt; {\n            println!(\"Shouldn't have a value!\");\n        },\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "is_accepted": false, "score": 4, "last_activity_date": 1494604920, "last_edit_date": 1494604920, "creation_date": 1494604043, "answer_id": 43941762, "question_id": 37820454, "link": "https://stackoverflow.com/questions/37820454/read-from-a-channel-or-timeout/43941762#43941762", "title": "Read from a channel or timeout?", "body": "<p>Rust 1.12 introduced <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout\" rel=\"nofollow noreferrer\"><code>Receiver::recv_timeout</code></a>:</p>\n\n<pre><code>use std::sync::mpsc::channel;\nuse std::time::Duration;\n\nfn main() {\n    let (.., rx) = channel::&lt;bool&gt;();\n    let timeout = Duration::new(3, 0);\n\n    println!(\"start recv\");\n    let _ = rx.recv_timeout(timeout);\n    println!(\"done!\");\n}\n</code></pre>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 736, "favorite_count": 1, "answer_count": 2, "score": 9, "last_activity_date": 1494604920, "creation_date": 1465932118, "last_edit_date": 1465932475, "question_id": 37820454, "link": "https://stackoverflow.com/questions/37820454/read-from-a-channel-or-timeout", "title": "Read from a channel or timeout?", "body": "<p>With Rust 1.9, I'd like to read from a <code>mpsc::channel</code> <em>or</em> timeout. Is there a clear idiom to make this work? I've seen the unstable approach described in <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Select.html\"><code>mpsc::Select</code></a> but <a href=\"https://github.com/rust-lang/rust/issues/27800\">this Github discussion</a> suggests it is not a robust approach. Is there a better-recommended way for me to achieve receive-or-timeout semantics?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1465921159, "post_id": 37816798, "comment_id": 63098838, "body": "What kind of type is BigInt? Which crate is it from?"}, {"owner": {"reputation": 67, "user_id": 5605431, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/855b26bcdfdedc496426d6c32c64cc26?s=128&d=identicon&r=PG&f=1", "display_name": "Epse", "link": "https://stackoverflow.com/users/5605431/epse"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1465921417, "post_id": 37816798, "comment_id": 63098998, "body": "ow, excuse me, it is from <code>num</code>. It is a big int, which is does not implement the <code>Copy</code> trait, since that would be very, very, very CPU time intensive. (I know I am copying it here too, I couldn&#39;t find a better solution for the life of me)"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1465921568, "post_id": 37816798, "comment_id": 63099077, "body": "Ah no need for apologies, just wondered which types they were."}], "answers": [{"comments": [{"owner": {"reputation": 67, "user_id": 5605431, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/855b26bcdfdedc496426d6c32c64cc26?s=128&d=identicon&r=PG&f=1", "display_name": "Epse", "link": "https://stackoverflow.com/users/5605431/epse"}, "edited": false, "score": 0, "creation_date": 1465922115, "post_id": 37817427, "comment_id": 63099385, "body": "That makes sense. What is BigInt::one() contained in, since for some reason Rust can&#39;t find it... EDIT: found it, it is spelled with a capital to include it for whatever reason"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 67, "user_id": 5605431, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/855b26bcdfdedc496426d6c32c64cc26?s=128&d=identicon&r=PG&f=1", "display_name": "Epse", "link": "https://stackoverflow.com/users/5605431/epse"}, "edited": false, "score": 1, "creation_date": 1465922192, "post_id": 37817427, "comment_id": 63099439, "body": "You have to import <a href=\"http://rust-num.github.io/num/num/trait.One.html\" rel=\"nofollow noreferrer\"><code>num::One</code></a>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 67, "user_id": 5605431, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/855b26bcdfdedc496426d6c32c64cc26?s=128&d=identicon&r=PG&f=1", "display_name": "Epse", "link": "https://stackoverflow.com/users/5605431/epse"}, "edited": false, "score": 2, "creation_date": 1465928463, "post_id": 37817427, "comment_id": 63102967, "body": "@Epse <code>num::One</code> is a trait, so is capitalized. The trait includes a function, <code>One::one</code>, which is only accessible for trait implementers if the trait is also visible."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 8, "last_activity_date": 1465929049, "last_edit_date": 1465929049, "creation_date": 1465921505, "answer_id": 37817427, "question_id": 37816798, "link": "https://stackoverflow.com/questions/37816798/rust-use-of-moved-value/37817427#37817427", "title": "Rust use of moved value", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Mul.html\" rel=\"nofollow\"><code>Mul</code></a> (and the other arithmetic operators) take the parameters by value, so <code>i * i</code> move the value <code>i</code> (this is not a problem for primitive numbers because they implement <code>Copy</code> - <code>BigInt</code> does not).</p>\n\n<p>As <code>Mul</code> is implemented for (two) <code>&amp;BigInt</code>, you can do the multiplication (and the other arithmetic operations)  with <code>&amp;</code>:</p>\n\n<pre><code>use num::*;\n\nfn factors(number: &amp;BigInt) -&gt; Vec&lt;BigInt&gt; {\n    let mut n = number.clone();\n    let mut i = BigInt::from(2);\n    let mut factors = Vec::new();\n\n    while &amp;i * &amp;i &lt;= n {\n        if (&amp;n % &amp;i) == BigInt::one() {\n            i = i + BigInt::one();\n\n        } else {\n            n = n / &amp;i;\n            factors.push(i.clone());\n        }\n        i = i + BigInt::one();\n    }\n    if n &gt; i {\n        factors.push(n);\n    }\n    factors\n}\n</code></pre>\n\n<p>Note that I also made some simplifications, like omitting the type on <code>Vec::new</code> and using <code>BigInt::from</code> (cannot fail).</p>\n"}, {"tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": false, "score": 3, "last_activity_date": 1465923408, "last_edit_date": 1465923408, "creation_date": 1465921532, "answer_id": 37817431, "question_id": 37816798, "link": "https://stackoverflow.com/questions/37816798/rust-use-of-moved-value/37817431#37817431", "title": "Rust use of moved value", "body": "<p>Remember that operators in Rust are just syntactic sugar for function calls.</p>\n\n<p><code>a + b</code> translates to <code>a.add(b)</code>.</p>\n\n<p>Primitive types such as <code>i32</code> implement the trait <code>Copy</code>. Thus, they can be copied into such an add function and do not need to be moved. </p>\n\n<p>I assume the <code>BigInt</code> type you are working with does not implement this trait.\nTherefore, in every binary operation you are moving the values.</p>\n"}], "owner": {"reputation": 67, "user_id": 5605431, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/855b26bcdfdedc496426d6c32c64cc26?s=128&d=identicon&r=PG&f=1", "display_name": "Epse", "link": "https://stackoverflow.com/users/5605431/epse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4684, "favorite_count": 0, "accepted_answer_id": 37817427, "answer_count": 2, "score": 6, "last_activity_date": 1465929049, "creation_date": 1465919630, "question_id": 37816798, "link": "https://stackoverflow.com/questions/37816798/rust-use-of-moved-value", "title": "Rust use of moved value", "body": "<p>When using below function:</p>\n\n<pre><code>fn factors(number: &amp;BigInt) -&gt; Vec&lt;BigInt&gt; {\n    let mut n = number.clone();\n    let mut i: BigInt = ToBigInt::to_bigint(&amp;2).unwrap();\n    let mut factors = Vec::&lt;BigInt&gt;::new();\n\n    while i * i &lt;= n {\n        if (n % i) == ToBigInt::to_bigint(&amp;1).unwrap() {\n            i = i + ToBigInt::to_bigint(&amp;1).unwrap();\n        }\n        else {\n            n = n/i as BigInt;\n            factors.push(i);\n        }\n        i = i + ToBigInt::to_bigint(&amp;1).unwrap();\n    }\n    if n &gt; i {\n        factors.push(n);\n    }\n    factors\n}\n</code></pre>\n\n<p>I get moved value errors for literally every time <code>i</code> or <code>n</code> is used, starting from the line with <code>while</code>, also in the <code>if</code>. I have read about borrowing, which I understand decently, but this thing I don't understand.\nI am not \"copying\" the value at all, so I don't see anywhere were I could lose ownership of the variables.</p>\n"}, {"tags": ["pattern-matching", "rust", "match", "break"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1465915465, "post_id": 37814942, "comment_id": 63094572, "body": "My thought process while reading the question: <i>Create an <code>else</code> block. Oh, OP disallowed that. Maybe a match guard? Oh, OP disallowed that. Make a function? Oh, OP disallowed that</i>."}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465915630, "post_id": 37814942, "comment_id": 63094698, "body": "My question is specifically whether there&#39;s such an equivalent to <code>break</code> since imho it&#39;s the most &quot;clean&quot; way to solve this problem. Ofcourse if it&#39;s not possible I will refrain to one of the other options but imho these are &quot;overkill&quot; for what I want to do."}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 5, "creation_date": 1465915703, "post_id": 37814942, "comment_id": 63094767, "body": "There&#39;s no way to do this under your restrictions."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1465915906, "post_id": 37814942, "comment_id": 63094932, "body": "<i>these are &quot;overkill&quot; for what I want to do.</i> I don&#39;t think so, using functions to simplify match guards is a great way to make code more readable (a helpful name for the function being a prerequisite of course). Remember, other people need to read your code after you write it. Other people include future you that forgot what&#39;s going on here."}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1465916089, "post_id": 37814942, "comment_id": 63095086, "body": "@ker The code is really simple and straight-forward but long. That&#39;s why it&#39;s imho neither appropriate for a function (it&#39;s more readable if it&#39;s just sitting there, there&#39;s no re-use either) nor for putting it into a match-guard since it&#39;s too long.  But this is not about code-style but just about it being possible or not. So if WiSaGaN is right I&#39;d accept this as an answer (if he&#39;d make it one)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1465916164, "post_id": 37814942, "comment_id": 63095146, "body": "@larkey: shortening a long but simple piece of code into a (local) function (maybe even a function-local-function) is definitely a way to increase readability. Using a closure can even get you around the issue of too many arguments"}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1465916214, "post_id": 37814942, "comment_id": 63095190, "body": "@ker That&#39;s your opinion but not to debate here ;)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1465916328, "post_id": 37814942, "comment_id": 63095302, "body": "<i>That&#39;s your opinion</i> true. <i>but not to debate here</i> one should always strife to consider other opinions :)"}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "edited": false, "score": 0, "creation_date": 1465916532, "post_id": 37814942, "comment_id": 63095497, "body": "@key I did so but I just don&#39;t want to discuss it any further in <i>this</i> question (possibly on code-review or similar) ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465916669, "post_id": 37814942, "comment_id": 63095613, "body": "@larkey the blog post you&#39;ve linked is interesting, but I honestly don&#39;t know what it means with that sentence."}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465916964, "post_id": 37814942, "comment_id": 63095882, "body": "@Shepmaster Yep, especially considering it&#39;s rather &#39;official&#39; and recent."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465917558, "post_id": 37814942, "comment_id": 63096366, "body": "@larkey &quot;recent&quot; is dubious. It&#39;s over a year old, but more importantly it <a href=\"http://blog.rust-lang.org/2015/05/15/Rust-1.0.html\" rel=\"nofollow noreferrer\">predates Rust 1.0</a>."}, {"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465917717, "post_id": 37814942, "comment_id": 63096491, "body": "@Shepmaster Sure but I think 1yr is still <i>rather</i> recent -- at least one of the more up-to-date resources."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465917797, "post_id": 37814942, "comment_id": 63096561, "body": "@larkey <b>predating Rust 1.0</b> is the important part. 1.0 set the mold for Rust; lots of things before 1.0 no longer make sense."}], "answers": [{"comments": [{"owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "edited": false, "score": 7, "creation_date": 1465917035, "post_id": 37815701, "comment_id": 63095933, "body": "That&#39;s an interesting approach but I think rather obfuscates the idea more than it should and is not exactly an answer to my question. Have an upvote but I cannot accept it ;)"}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 1, "creation_date": 1586829184, "post_id": 37815701, "comment_id": 108266064, "body": "why doesn&#39;t it answer your question? it lets you break out of the match right? im asking because im porting a big C 1000+ line switch statement and this is pretty much how im dealing with breaking out of the middle of a match"}, {"owner": {"reputation": 718, "user_id": 6334782, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/394209ec7752092e3430c7da2e54d419?s=128&d=identicon&r=PG&f=1", "display_name": "Camp bell", "link": "https://stackoverflow.com/users/6334782/camp-bell"}, "reply_to_user": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 1, "creation_date": 1616974400, "post_id": 37815701, "comment_id": 118163155, "body": "@donbright This solution <i>works</i>, but I think it&#39;s misleading code. If I came across it in the wild, I would have first assumed that the match is executed multiple times, when this is not the case. It would take me quite a while to figure this out, after which I would almost definitely try to refactor the <code>loop</code> statement out - assuming it to be a relic left by a previous fix."}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1617507867, "post_id": 37815701, "comment_id": 118322080, "body": "i get it now, thank you Camp bell. if i wasnt porting C i would never use this trick... i&#39;d just rewrite it to make more sense in the first place."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1465916620, "creation_date": 1465916620, "answer_id": 37815701, "question_id": 37814942, "link": "https://stackoverflow.com/questions/37814942/early-breaking-from-rusts-match/37815701#37815701", "title": "Early-breaking from Rust&#39;s match", "body": "<p>You can wrap the <code>match</code> into a <code>loop</code> that only runs once and break out of the loop</p>\n\n<pre><code>fn main() {\n    let x = 1;\n\n    loop { match x {\n        1 =&gt; {\n            let y = 0;\n            /*\n             * do ev1l stuff to y that I don't want to put into the match-guard\n             * as it's simply too much.\n             */\n\n            /* break early ... */\n            if y == 0 { break; }\n\n            assert!(y != 0, \"y was 0!\");\n            /* do other stuff in here. */\n        }\n        _ =&gt; {}\n    } break; }\n\n    println!(\"done matching\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 5, "last_activity_date": 1465930385, "last_edit_date": 1465930385, "creation_date": 1465929939, "answer_id": 37819839, "question_id": 37814942, "link": "https://stackoverflow.com/questions/37814942/early-breaking-from-rusts-match/37819839#37819839", "title": "Early-breaking from Rust&#39;s match", "body": "<p>You could create a macro like</p>\n\n<pre><code>macro_rules! block {\n    ($xs:block) =&gt; {\n        loop { let _ = $xs; break; }\n    };\n}\n</code></pre>\n\n<p>and do</p>\n\n<pre><code>match x {\n    1 =&gt; block!({\n        ...\n        if y == 0 { break; }\n        ...\n    })\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>It's not an amazing solution, but it is semantically meaningful.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524086569, "post_id": 49908888, "comment_id": 86834312, "body": "<i>any weird performance characteristics</i> \u2014 there should not be as I expect this to be covered by Rust&#39;s &quot;zero-cost abstractions&quot;."}], "tags": [], "owner": {"reputation": 63, "user_id": 5943554, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Wgsn7dGVzqk/AAAAAAAAAAI/AAAAAAAAABw/tDK8VBdYqC8/photo.jpg?sz=128", "display_name": "Nick Mosher", "link": "https://stackoverflow.com/users/5943554/nick-mosher"}, "is_accepted": false, "score": 4, "last_activity_date": 1524084979, "creation_date": 1524084979, "answer_id": 49908888, "question_id": 37814942, "link": "https://stackoverflow.com/questions/37814942/early-breaking-from-rusts-match/49908888#49908888", "title": "Early-breaking from Rust&#39;s match", "body": "<p>Something else you could do is make a \"self-executing\" closure and use a return statement inside. I don't know whether there are any weird performance characteristics of this but syntactically it's pretty clean.</p>\n\n<pre><code>fn main() {\n    let x = 1;\n\n    // This closure is just used to catch the \"return\" statement.\n    (|| {\n        match x {\n            1 =&gt; {\n                let y = 0;\n                /*\n                 * do ev1l stuff to y that I don't want to put into the match-guard\n                 * as it's simply too much.\n                 */\n\n                /* break early ... */\n                if y == 0 { return; } // Ok!\n\n                assert!(y != 0, \"y was 0!\");\n                /* do other stuff in here. */\n            }\n            _ =&gt; {}\n        }\n    })();\n\n    println!(\"done matching\");\n}\n</code></pre>\n\n<p>Here's a <a href=\"https://play.rust-lang.org/?gist=2e0c7ee456da811961f3c8af00c4a81c&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a> showing it working.</p>\n"}], "owner": {"reputation": 613, "user_id": 4453524, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/sBZea.jpg?s=128&g=1", "display_name": "ljrk", "link": "https://stackoverflow.com/users/4453524/ljrk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8442, "favorite_count": 2, "answer_count": 3, "score": 9, "last_activity_date": 1595435392, "creation_date": 1465914652, "last_edit_date": 1595435392, "question_id": 37814942, "link": "https://stackoverflow.com/questions/37814942/early-breaking-from-rusts-match", "title": "Early-breaking from Rust&#39;s match", "body": "<p>I want to switch through many possible cases for <code>x</code> and there's one case (here <code>x == 0</code>) where I want to check the result of some additional code to determine what to do next. One possibility is to return early from the match.</p>\n<p>I'd use <code>break</code> to do this early-returning in C, but this isn't allowed in Rust. <code>return</code> returns from the parent function (in this case <code>main()</code>) and not from the match only (i.e. the <code>println!</code> at the end isn't run!).</p>\n<p>I could just negate the sub-condition (here <code>y == 0</code>) and indent the whole lot of following code -- but I find this ugly and unreadable.</p>\n<p>Putting the sub-condition into a match-guard is no option for me since it's simply too big.</p>\n<p>Is this possible in Rust or is there a better alternative (except creating another subfunction or other work-arounds)?</p>\n<p>Minimal example:</p>\n<pre><code>fn main() {\n    let x = 1;\n\n    match x {\n        1 =&gt; {\n            let y = 0;\n            /*\n             * do ev1l stuff to y that I don't want to put into the match-guard\n             * as it's simply too much.\n             */\n\n            /* break early ... */\n            if y == 0 {break;} // &gt; error: `break` outside of loop [E0268]\n\n            assert!(y != 0, &quot;y was 0!&quot;);\n            /* do other stuff in here. */\n        }\n        _ =&gt; {}\n    }\n\n    println!(&quot;done matching&quot;);\n}\n</code></pre>\n<p>I found <a href=\"http://blog.rust-lang.org/2015/04/17/Enums-match-mutation-and-moves.html\" rel=\"nofollow noreferrer\">Mixing matching, mutation, and moves in Rust</a> \u2014 is it wrong?</p>\n<blockquote>\n<p><code>match</code> embraces both imperative and functional styles of programming: you can continue using <code>break</code> statements, assignments, et cetera, rather than being forced to adopt an expression-oriented mindset.</p>\n</blockquote>\n<p>I'm still learning Rust and coming from C so bear with me ;-)</p>\n"}, {"tags": ["debugging", "gdb", "rust", "static-libraries"], "comments": [{"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 1, "creation_date": 1465906947, "post_id": 37811413, "comment_id": 63087876, "body": "Are there tests in this lib that you want to debug?"}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1465907314, "post_id": 37811413, "comment_id": 63088155, "body": "no the tests are within /tests/raindrops.rs - but in fact, yes I want to debug tests or the calls by those tests"}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1465909118, "post_id": 37812394, "comment_id": 63089531, "body": "So in any case the test-file in target/debug is capable of being debugged?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1465909893, "post_id": 37812394, "comment_id": 63090183, "body": "@xetra11 the executable files produced in <code>target&#47;debug</code> are capable of being debugged, yes."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1465910814, "last_edit_date": 1495542365, "creation_date": 1465908174, "answer_id": 37812394, "question_id": 37811413, "link": "https://stackoverflow.com/questions/37811413/rust-debug-library-with-gdb/37812394#37812394", "title": "Rust debug library with GDB", "body": "<p>You cannot debug anything but an executable. Debuggers work by inspecting the memory of a running process; without a executable, you cannot have a process.</p>\n\n<p>Assuming these two files:</p>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>pub fn add_one(i: u8) -&gt; u8 {\n    i + 2\n}\n\n#[test]\nfn inline_test() {\n    assert_eq!(2, foo::add_one(1));\n}\n</code></pre>\n\n<p><strong>tests/awesome.rs</strong></p>\n\n<pre><code>extern crate foo;\n\n#[test]\nfn a_test() {\n    assert_eq!(6, foo::add_one(5));\n}\n</code></pre>\n\n<p>When you run <code>cargo build</code> or <code>cargo test</code>, test binaries will be created in the <code>target/debug/</code> directory. In this case, there is one binary called <code>foo-69521add8c82059a</code> and one called <code>awesome-4a24b21e22bc042a</code>. Running either program runs that set of tests. All Rust tests work like this - an executable of some kind is generated and running it (perhaps with the right set of command line flags) will execute the test.</p>\n\n<p>This executable is what you need to debug in GDB or LLDB:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rust-lldb target/debug/awesome-4a24b21e22bc042a\n\n(lldb) br set -r '.*add_one.*'\n(lldb) r\nProcess 59413 launched: '/private/tmp/foo/target/debug/awesome-4a24b21e22bc042a' (x86_64)\n\nrunning 1 test\nProcess 59413 stopped\n* thread #2: tid = 0xe9637, 0x0000000100038a3e awesome-4a24b21e22bc042a`foo::add_one::ha28bd7bf9dda9f1d + 14 at lib.rs:2, name = 'a_test', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100038a3e awesome-4a24b21e22bc042a`foo::add_one::ha28bd7bf9dda9f1d + 14 at lib.rs:2\n   1    pub fn add_one(i: u8) -&gt; u8 {\n-&gt; 2        i + 2\n   3    }\n</code></pre>\n\n<blockquote>\n  <p><code>rustc -g --crate-type lib libr.rs</code></p>\n</blockquote>\n\n<p>This avoids using Cargo, which most people are not going to want to do. The important aspect of this line is the <code>-g</code> flag, which instructs the compiler to add debugging information. <code>cargo build</code> or <code>cargo test</code> compile in debugging mode by default. You can also <a href=\"https://stackoverflow.com/q/29818084/155423\">build your tests in release mode</a>.</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1316, "favorite_count": 0, "accepted_answer_id": 37812394, "answer_count": 1, "score": 5, "last_activity_date": 1465910814, "creation_date": 1465905646, "last_edit_date": 1465907744, "question_id": 37811413, "link": "https://stackoverflow.com/questions/37811413/rust-debug-library-with-gdb", "title": "Rust debug library with GDB", "body": "<p>I have a lib within <code>/src/lib.rs</code>. This I want to prepare for debugging with GDB.</p>\n\n<pre><code>rustc -g --crate-type lib libr.rs\n</code></pre>\n\n<p>Is the way searching told me how to do it. The output file has the following name <code>liblib.rlib</code></p>\n\n<p>Now running GDB - executing <code>file lib.rs</code> tells me it is not in a executable format and the same with the weird file <code>liblib.rlib</code>. I know that it is not an executable - but also I do not know any alternative file which I can start.</p>\n\n<p>So how can I start debugging a lib in Rust now?</p>\n"}, {"tags": ["c", "rust", "ffi", "abstract-data-type"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1465905236, "post_id": 37808742, "comment_id": 63086637, "body": "Seems suspiciously similar to <a href=\"http://stackoverflow.com/questions/22116547/in-rust-how-can-i-define-or-import-a-c-struct-from-a-third-party-library\" title=\"in rust how can i define or import a c struct from a third party library\">stackoverflow.com/questions/22116547/&hellip;</a> however the answer to this question (by the same author) is more up-to-date vis a vis the guidelines"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1465900598, "creation_date": 1465900598, "answer_id": 37809595, "question_id": 37808742, "link": "https://stackoverflow.com/questions/37808742/c-abstract-data-type-in-rust/37809595#37809595", "title": "C Abstract Data Type in Rust", "body": "<p>You usually model abstract C types in Rust using a pointer to an empty enum:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub enum _game {}\npub type Game = *mut _game;\n</code></pre>\n\n<p>This approach explicitly highlights the fact that you cannot create values of <code>_game</code> yourself - you can only get a pointer to it from somewhere.</p>\n\n<p>That said, if you're writing a more high-level wrapper for your library, you should wrap this <code>Game</code> into a more high-level <code>Game</code>, like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate your_library_sys;\n\npub struct Game(your_library_sys::Game);\n</code></pre>\n\n<p>Here <code>your_library_sys</code> is a \"sys\" crate which contains low-level FFI bindings to the library. This is a convention which is <a href=\"http://doc.crates.io/build-script.html#-sys-packages\" rel=\"nofollow\">described</a> in Cargo docs.</p>\n"}], "owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 279, "favorite_count": 0, "accepted_answer_id": 37809595, "answer_count": 1, "score": 0, "last_activity_date": 1465900598, "creation_date": 1465898185, "question_id": 37808742, "link": "https://stackoverflow.com/questions/37808742/c-abstract-data-type-in-rust", "title": "C Abstract Data Type in Rust", "body": "<p>I have this code in my header file:</p>\n\n<pre><code>typedef struct _game* Game;\n</code></pre>\n\n<p>Right now to FFI from Rust I'm doing:</p>\n\n<pre><code>extern \"C\" {\n    pub type Game = usize;\n}\n</code></pre>\n\n<p>Is there a safer way to do this than to treat it like a pointer-sized numeric type? Would this work:</p>\n\n<pre><code>pub struct Game(usize);\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465960815, "post_id": 37805023, "comment_id": 63113997, "body": "How... how would unsorted data cause a crash? I can understand returning the wrong value, or <i>maybe</i> even an infinite loop, but a <b>crash</b>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465971612, "post_id": 37805023, "comment_id": 63117668, "body": "@Shepmaster: Reading out of bounds... causing a segmentation fault."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465993839, "post_id": 37805023, "comment_id": 63132167, "body": "That sounds more like the length of the array was misrepresented, not just that the data wasn&#39;t sorted?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1465996484, "post_id": 37805023, "comment_id": 63134142, "body": "@Shepmaster: no, it really was a sorting issue. I&#39;ve also had the issue with <code>std::sort</code> being passed an incorrect sorting predicate. The algorithms sometimes assume that given the pre-conditions there <i>must</i> be a next element, and access it without actually checking whether there is one or not given the range of iterators given."}, {"owner": {"reputation": 1804, "user_id": 616150, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/79b2a278bb1777cd16d0d311e90fed59?s=128&d=identicon&r=PG", "display_name": "Viktor Dahl", "link": "https://stackoverflow.com/users/616150/viktor-dahl"}, "edited": false, "score": 0, "creation_date": 1492435335, "post_id": 37805023, "comment_id": 73959971, "body": "@MatthieuM I&#39;ve actually made this exact mistake when implementing a sorting algorithm in Rust. These bounds checks can actually cause a not-insignificant performance loss for correct comparators. I think there&#39;s been some discussion around a <code>unsafe trait TrustedOrd</code> in Rust, for types with known-correct <code>Ord</code> implementations."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1465887608, "creation_date": 1465887608, "answer_id": 37805023, "question_id": 37804973, "link": "https://stackoverflow.com/questions/37804973/why-does-slicebinary-search-return-an-incorrect-result/37805023#37805023", "title": "Why does slice::binary_search return an incorrect result?", "body": "<p><strong>No</strong>.</p>\n\n<p><code>binary_search</code> expects a <em>sorted</em> input, but you provided a randomly ordered one.</p>\n\n<p>As is famously attribute to Charles Babbage: <em>Garbage in, garbage out</em>.</p>\n\n<p><em>Note: in C++, I've had crashes executing binary search on non-sorted output, you're lucky it's Rust ;)</em></p>\n"}], "owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 314, "favorite_count": 0, "accepted_answer_id": 37805023, "answer_count": 1, "score": -1, "last_activity_date": 1608755658, "creation_date": 1465887445, "last_edit_date": 1608755658, "question_id": 37804973, "link": "https://stackoverflow.com/questions/37804973/why-does-slicebinary-search-return-an-incorrect-result", "title": "Why does slice::binary_search return an incorrect result?", "body": "<p>In the program below <code>binary_search</code> returns <code>Err(2)</code> rather than the expected <code>Ok(0)</code>. Is this a bug?</p>\n<pre><code>fn main() {\n    let x = vec![&quot;slot&quot;, &quot;s&quot;];\n    let u =  x.binary_search(&amp;&quot;slot&quot;);\n    println!(&quot;{:?}&quot;, u);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1465871069, "creation_date": 1465871069, "answer_id": 37802010, "question_id": 37801375, "link": "https://stackoverflow.com/questions/37801375/filter-a-slice-into-a-vector/37802010#37802010", "title": "Filter a slice into a vector", "body": "<blockquote>\n  <p><code>std::marker::Sized</code> is not satisfied.</p>\n</blockquote>\n\n<p>Since <code>Iterator::collect</code> returns a generic type, the compiler uses type inferencing to figure out what that type must be. In this case, you are passing a reference to <code>bar0_foos</code> to a function that accepts a <code>&amp;[Foo]</code>. By inference, that means that <code>bar0_foos</code> must be of the type <code>[Foo]</code>. </p>\n\n<p>Since <code>[Foo]</code> is an unsized type, you cannot create a value of that type.</p>\n\n<p>Normally, you specify what type of collection to collect into:</p>\n\n<pre><code>let bar0_foos: Vec&lt;_&gt; = // ...\n</code></pre>\n\n<p>Which provides this error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;[Foo]`,\n    found `&amp;collections::vec::Vec&lt;&amp;Foo&gt;`\n(expected slice,\n    found struct `collections::vec::Vec`) [E0308]\n&lt;anon&gt;:10     another_func(&amp;bar0_foos);\n                           ^~~~~~~~~~\n</code></pre>\n\n<p>The error message is a tiny bit misleading here, as a <code>Vec&lt;T&gt;</code> can operate as a <code>&amp;[T]</code>, so that's not the real problem. The contained type is the problem: you have a collection of <code>Vec&lt;&amp;Foo&gt;</code> but need to pass a <code>&amp;[Foo]</code>. </p>\n\n<p>Logically, the error makes sense. Your function takes a chunk of memory that represents a <strong>contiguous</strong> range of <code>Foo</code>, but that's not what you have. By filtering, you have the possibility of non-contiguous data. Additionally, you have created a range of pointers to your real data.</p>\n\n<p>How do you fix it?</p>\n\n<ol>\n<li>If you control <code>another_func</code>, you can change it to take in <code>&amp;[&amp;Foo]</code>. </li>\n<li><p>You could change it to be more generic</p>\n\n<pre><code>fn another_func&lt;F&gt;(foos: &amp;[F]) \n    where F: Borrow&lt;Foo&gt;\n</code></pre></li>\n<li>You could copy / clone the values and create a new vector. Then you would have a <code>Vec&lt;Foo&gt;</code> which can be passed in as a <code>&amp;[Foo]</code>.</li>\n<li>You could reorder the input slice to put all the appropriate <code>Foo</code>s together, and then take a subslice.</li>\n</ol>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 946, "favorite_count": 1, "accepted_answer_id": 37802010, "answer_count": 1, "score": 1, "last_activity_date": 1465871069, "creation_date": 1465865955, "question_id": 37801375, "link": "https://stackoverflow.com/questions/37801375/filter-a-slice-into-a-vector", "title": "Filter a slice into a vector", "body": "<p>I have a struct:</p>\n\n<pre><code>enum Bar {\n    Bar0,\n    Bar1,\n    Bar2\n}\n\nstruct Foo {\n    bar: Bar \n}\n</code></pre>\n\n<p>I have a function that takes a slice of Foos:</p>\n\n<pre><code>fn do_the_thing(foos: &amp;[Foo]) { ... }\n</code></pre>\n\n<p>Part of the thing that needs to be done is to call another function on all elements of the slice that have the same value for \"bar\":</p>\n\n<pre><code>fn another_func(foos: &amp;[Foo]) { ... }\n</code></pre>\n\n<p>I tried something like this:</p>\n\n<pre><code>fn do_the_thing(foos: &amp;[Foo]) { \n    let bar0_foos = foos.iter().filter(|f| f.bar == Bar0 );\n\n    another_func(&amp;bar0_foos);\n}\n</code></pre>\n\n<p>Tragically, I'm told that bar0_foos is  a <code>&amp;std::iter::Filter&lt;std::slice::Iter&lt;...&gt;&gt;</code>. I've also tried:</p>\n\n<pre><code>fn do_the_thing(foos: &amp;[Foo]) { \n    let bar0_foos = foos.iter().filter(|f| f.bar == Bar0 ).collect();\n\n    another_func(&amp;bar0_foos);\n}\n</code></pre>\n\n<p>Here, I'm told that <code>std::marker::Sized</code> is not satisfied.</p>\n\n<p>So, what's the right way of doing this? Should I be taking something other than a slice?</p>\n"}, {"tags": ["performance", "optimization", "rust", "branch-prediction"], "comments": [{"owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1465858889, "post_id": 37800090, "comment_id": 63066604, "body": "Figuring this out would probably require looking at the machine code. You might find the Linux <code>perf</code> tool to be really useful. I may look at it later out of curiosity, but not right now."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1465903971, "post_id": 37800090, "comment_id": 63085722, "body": "@ZanLynx Sadly, I&#39;m not very good nor fast at reading machine code. I would appreciate more people looking at it :)"}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1465869820, "post_id": 37801656, "comment_id": 63069120, "body": "This probably has nothing to do with closures and more to do with <code>Filter::next</code> being implemented with an internal secondary loop. LLVM probably can&#39;t see that it&#39;s equivalent to a mask over the array."}, {"owner": {"reputation": 136, "user_id": 5402408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c8e266229d4570de4fa92484ee4b643?s=128&d=identicon&r=PG&f=1", "display_name": "svat", "link": "https://stackoverflow.com/users/5402408/svat"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1465870623, "post_id": 37801656, "comment_id": 63069287, "body": "@Veedrac, you are probably right that it is <code>Filter::next</code>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1465894983, "post_id": 37801656, "comment_id": 63079284, "body": "If I understand your answer correctly, it doesn&#39;t explain why there isn&#39;t any difference between sorted and unsorted. Just being faster wouldn&#39;t completely remove the branch prediction effect, would it?"}, {"owner": {"reputation": 136, "user_id": 5402408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c8e266229d4570de4fa92484ee4b643?s=128&d=identicon&r=PG&f=1", "display_name": "svat", "link": "https://stackoverflow.com/users/5402408/svat"}, "edited": false, "score": 0, "creation_date": 1469579635, "post_id": 37801656, "comment_id": 64591539, "body": "@lukas-kalberodt When the code is vectorized, it becomes branchless. Thus there is no difference. This fact is also mentioned in the &quot;Update&quot; section of the &quot;famous question&quot;. So when I posted my answer here, I thought this fact was obvious."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1474975481, "post_id": 37801656, "comment_id": 66744102, "body": "@svat I saw your comment only know, because of the wrong name spelling :o  But thanks for that explanation! I&#39;d appreciate if you could add the information from your comment to your answer! It would also be awesome, if you could explain shortly how vectorization removes branches. But I will already accept it now :)"}], "tags": [], "owner": {"reputation": 136, "user_id": 5402408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c8e266229d4570de4fa92484ee4b643?s=128&d=identicon&r=PG&f=1", "display_name": "svat", "link": "https://stackoverflow.com/users/5402408/svat"}, "is_accepted": true, "score": 5, "last_activity_date": 1465870806, "last_edit_date": 1465870806, "creation_date": 1465868303, "answer_id": 37801656, "question_id": 37800090, "link": "https://stackoverflow.com/questions/37800090/trying-famous-branch-prediction-example-sometimes-results-in-strange-times/37801656#37801656", "title": "Trying famous branch-prediction example sometimes results in strange times", "body": "<p>I took a quick look at the assembler code, and it appears that if you use <code>SumType = u8</code> then LLVM generates SSE2 instructions to do vector operations, which is much faster. In theory, LLVM should be able to optimize <code>filter(...).fold(...)</code> to the same code, but in practice it cannot always remove overhead of abstraction. I hope when MIR is added, Rust won't rely on LLVM to do Rust-specific optimizations.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 180, "favorite_count": 1, "accepted_answer_id": 37801656, "answer_count": 1, "score": 7, "last_activity_date": 1465870806, "creation_date": 1465856642, "last_edit_date": 1495535247, "question_id": 37800090, "link": "https://stackoverflow.com/questions/37800090/trying-famous-branch-prediction-example-sometimes-results-in-strange-times", "title": "Trying famous branch-prediction example sometimes results in strange times", "body": "<p>I tried to duplicate the example in <a href=\"https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array\">this famous question</a>. My code looks like this:</p>\n\n<pre><code>#![feature(test)]\nextern crate rand;\nextern crate test;\n\nuse test::Bencher;\nuse rand::{thread_rng, Rng};\n\ntype ItemType = u8;\ntype SumType = u64;\nconst TEST_SIZE: usize = 32_768;\n\n#[bench]\nfn bench_train(b: &amp;mut Bencher) {\n    let numbers = get_random_vec();\n    b.iter(|| calc_sum(&amp;numbers));\n}\n\n#[bench]\nfn bench_train_sort(b: &amp;mut Bencher) {\n    let mut numbers = get_random_vec();\n    numbers.sort();     // &lt;-- the magic difference\n    b.iter(|| calc_sum(&amp;numbers));\n}\n\nfn get_random_vec() -&gt; Vec&lt;ItemType&gt; {\n    thread_rng().gen_iter().take(TEST_SIZE).collect()\n}\n\nfn calc_sum(numbers: &amp;Vec&lt;ItemType&gt;) -&gt; SumType {\n    let mut sum = 0;\n    for &amp;num in numbers {\n        if num &lt; ItemType::max_value() / 2 {\n            sum += num.into();\n        }\n    }\n\n    sum\n}\n</code></pre>\n\n<p>If I benchmark the exact code from above I get reasonable results (like in the linked question):</p>\n\n<pre><code>test bench_train      ... bench:     148,611 ns/iter (+/- 8,445)\ntest bench_train_sort ... bench:      21,064 ns/iter (+/- 1,980)\n</code></pre>\n\n<p>However, if I change <code>SumType</code> to <code>u8</code> both versions run equally fast and much faster overall:</p>\n\n<pre><code>test bench_train      ... bench:       1,272 ns/iter (+/- 64)\ntest bench_train_sort ... bench:       1,280 ns/iter (+/- 170)\n</code></pre>\n\n<p>First of: of course, the <code>sum</code> will overflow all the time, but in release mode the overflow checks of Rust are disabled, so we just calculate a wrong result without panicking. Could this be the reason for the surprisingly short time?</p>\n\n<p>Even stranger: when I change the implementation of <code>calc_sum</code> to something more idiomatic, the results change again. My second implementation:</p>\n\n<pre><code>fn calc_sum(numbers: &amp;Vec&lt;ItemType&gt;) -&gt; SumType {\n    numbers.iter()\n        .filter(|&amp;&amp;num| num &lt; ItemType::max_value() / 2)\n        .fold(0, |acc, &amp;num| acc + (num as SumType))\n}\n</code></pre>\n\n<p>With this implementation the <code>SumType</code> doesn't matter anymore. With <code>u8</code> as well as with <code>u64</code> I get these results:</p>\n\n<pre><code>test bench_train      ... bench:     144,411 ns/iter (+/- 12,533)\ntest bench_train_sort ... bench:      16,966 ns/iter (+/- 1,100)\n</code></pre>\n\n<p>So we again get the numbers we are expecting. So the question is:</p>\n\n<p><strong>What is the reason for the strange running times?</strong></p>\n\n<hr>\n\n<p><strong>PS</strong>: I tested with <code>cargo bench</code> which compiles in release mode.</p>\n\n<p><strong>PPS</strong>: I just noticed that in the first implementation of <code>calc_sum</code> I use <code>into()</code> for casting, whereas I use <code>as</code> in the second example. When also using <code>as</code> in the first example, I get more strange numbers. With <code>SumType = u64</code>:</p>\n\n<pre><code>test bench_train      ... bench:      39,850 ns/iter (+/- 2,355)\ntest bench_train_sort ... bench:      39,344 ns/iter (+/- 2,581)\n</code></pre>\n\n<p>With <code>SumType = u8</code>:</p>\n\n<pre><code>test bench_train      ... bench:       1,184 ns/iter (+/- 339)\ntest bench_train_sort ... bench:       1,239 ns/iter (+/- 85)\n</code></pre>\n"}, {"tags": ["struct", "reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "edited": false, "score": 0, "creation_date": 1465902926, "post_id": 37799640, "comment_id": 63084924, "body": "You are correct in your assumption that <code>storage_size</code> is not needed, it&#39;s just <code>std::mem::size_of::&lt;S&gt;() * 8</code>, however I am afraid that <code>capacity</code> is needed as you could allocate a bit vector that is not a multiply of the backing storage, ie. backing storage is u32 and you want to allocate 50 bits, though it might be reasonable to force allocation in multiples of backing storage if this enables derefing to work"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 2, "last_activity_date": 1465854333, "creation_date": 1465854333, "answer_id": 37799640, "question_id": 37799454, "link": "https://stackoverflow.com/questions/37799454/is-it-possible-to-return-part-of-a-struct-by-reference/37799640#37799640", "title": "Is it possible to return part of a struct by reference?", "body": "<p><code>Deref</code> is required to return a reference. A reference <em>always</em> points to some existing memory, and any local variable will not exist long enough. While there are, in theory, some sick tricks you could play to create a new object in <code>deref</code> and return a reference to it, all that I'm aware of result in a memory leak. Let's ignore these technicalities and just say it's plain impossible.</p>\n\n<p>Now what? You'll have to change your API. <code>Vec</code> can implement <code>Deref</code> because it derefs to <code>[T]</code>, not to <code>&amp;[T]</code> or anything like that. You may have success with the same strategy: Make <code>BitSlice&lt;S&gt;</code> an unsized type containing only a slice <code>[S]</code>, so that the return type is <code>&amp;'a BitSlice&lt;S&gt;</code>. This assume the <code>storage_size</code> member is not needed. But it seems that this refers to the number of bits that are logically valid (i.e., can be accessed without extending the bit vector) &mdash; if so, that seems unavoidable<sup>1</sup>.</p>\n\n<p>The other alternative, of course, is to not implement a <code>Deref</code>. Inconvenient, but if your slice data type is too far from an actual slice, it may be the only option.</p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/pull/1524\" rel=\"nofollow\">RFC PR #1524</a> that proposed custom dynamically-sized types, then you could have a type <code>BitSlice&lt;S&gt;</code> that is like a slice but can have additional contents such as <code>storage_size</code>. However, this doesn't exist yet and it's far from certain if it ever will.</p>\n\n<p><sup>1</sup> The <code>capacity</code> member on <code>BitVector</code>, however, seems pointless. Isn't that just <code>sizeof S * 8</code>?</p>\n"}], "owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 1, "accepted_answer_id": 37799640, "answer_count": 1, "score": 2, "last_activity_date": 1465854333, "creation_date": 1465853425, "question_id": 37799454, "link": "https://stackoverflow.com/questions/37799454/is-it-possible-to-return-part-of-a-struct-by-reference", "title": "Is it possible to return part of a struct by reference?", "body": "<p>Consider the following two structs:</p>\n\n<pre><code>pub struct BitVector&lt;S: BitStorage&gt; {\n    data: Vec&lt;S&gt;,\n    capacity: usize,\n    storage_size: usize\n}\n\npub struct BitSlice&lt;'a, S: BitStorage&gt; {\n    data: &amp;'a [S],\n    storage_size: usize\n}\n</code></pre>\n\n<p>Where <code>BitStorage</code> is practically a type that is restricted to all unsigned integers (u8, u16, u32, u64, usize).</p>\n\n<p>How to implement the <code>Deref</code> trait? (<code>BitVector&lt;S&gt;</code> derefs to <code>BitSlice&lt;S&gt;</code> similar to how <code>Vec&lt;S&gt;</code> derefs to <code>&amp;[S]</code>)</p>\n\n<p>I have tried the following (Note that it doesn't compile due to issues with lifetimes, but more importantly because I try to return a value on the stack as a reference):</p>\n\n<pre><code>impl&lt;'b, S: BitStorage&gt; Deref for BitVector&lt;S&gt; {\n    type Target = BitSlice&lt;'b, S&gt;;\n\n    fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a BitSlice&lt;'b, S&gt; {\n        let slice = BitSlice {\n            data: self.data,\n            storage_size: self.storage_size,\n        };\n        &amp;slice\n    }\n}\n</code></pre>\n\n<p>I am aware that it is possible to return a field of a struct by reference, so for example I could return <code>&amp;Vec&lt;S&gt;</code> or <code>&amp;usize</code> in the <code>Deref</code> trait, but is it possible to return a <code>BitSlice</code> noting that I essentially have all the data in the <code>BitVector</code> already as <code>Vec&lt;S&gt;</code> can be transformed into <code>&amp;[S]</code> and <code>storage_size</code> is already there?</p>\n\n<p>I would think this is possible if I could create a struct using both values and somehow tell the compiler to ignore the fact that it is a struct that is created on the stack and instead just use the existing values, but I have got no clue how.</p>\n"}, {"tags": ["generics", "vector", "return", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1465884571, "post_id": 37799347, "comment_id": 63073035, "body": "What&#39;s the call to <code>collect_prime_factors(number&#47;2)</code>  for? It computes a new vector and throws it away."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1465885682, "post_id": 37799347, "comment_id": 63073560, "body": "semantically wrong I only realized it after rust told me those new issues. please ignore"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465857494, "post_id": 37800191, "comment_id": 63066182, "body": "The next iteration of the function would be <code>(2..number).filter(|&amp;i| number % i == 0).collect()</code>; still not producing prime factors ;-)"}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1465875528, "post_id": 37800191, "comment_id": 63070311, "body": "But why is there an expectation of nothing / empty tuple?  Is it because the for loop does not know how to handle return values of an expression?  And if I would use the &#39;return&#39; keyword...would that be a fix (cannot write code atm)"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1465886947, "post_id": 37800191, "comment_id": 63074231, "body": "I found this discussion: <a href=\"https://github.com/rust-lang/rfcs/issues/961\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/961</a> . Basically I think it comes down to it not being obvious that returning a value from a loop (especially as the final expression) makes sense. As it&#39;s currently an error it could be added in to Rust in future if/when there&#39;s agreement."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 1, "creation_date": 1465892281, "post_id": 37800191, "comment_id": 63077577, "body": "@xetra11, <code>for</code> as an expression has unit value <code>()</code>, just like almost all statements do. Because the loop is the last statement in the function, the compiler assumes that you return unit from the function, while it is declared that the function must return <code>Vec&lt;i32&gt;</code>. That&#39;s what the error is about. Naturally, you cannot return values from a loop directly, because it is unclear how exactly it should be handled. <code>return</code> works, however, because it is specifically intended to return a value from a function early; however, if you use it, you&#39;ll of course find that your loop finishes prematurely."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1465903593, "post_id": 37800191, "comment_id": 63085453, "body": "@xetra11 make sure to upvote answers that were useful and accept the answer that most helped you solve the problem."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1465857351, "last_edit_date": 1465857351, "creation_date": 1465857211, "answer_id": 37800191, "question_id": 37799347, "link": "https://stackoverflow.com/questions/37799347/wrong-vector-return-type-for-rust-function/37800191#37800191", "title": "Wrong vector return type for Rust function", "body": "<p>There are two problems (other than the paste error).</p>\n\n<p>The error you quote is not for the function's return value; it's the value of the <code>if</code> <em>expression</em>:</p>\n\n<pre><code>pub fn collect_prime_factors(number: i32) -&gt; Vec&lt;i32&gt; {\n    let mut prime_factors = Vec::new();\n\n    for i in 2..number {\n        if number % i == 0 {\n            prime_factors.push(i);\n            prime_factors   // This would be the value of the if\n        }\n    }\n}\n</code></pre>\n\n<p>Rust is expecting there to be no return value, or alternatively a value of <code>()</code>, but you're returning <code>prime_factors</code>.</p>\n\n<p>If you fix this, you'll then see that the next error is the reverse, that it's expecting the function to return a <code>Vec&lt;i32&gt;</code> but you're returning <code>()</code> (nothing).</p>\n\n<p>I think the correct thing here is to return the vector at the end of the function once all the factors have been collected:</p>\n\n<pre><code>pub fn collect_prime_factors(number: i32) -&gt; Vec&lt;i32&gt; {\n    let mut prime_factors = Vec::new();\n\n    for i in 2..number {\n        if number % i == 0 {\n            prime_factors.push(i);\n        };\n    }\n    prime_factors  // Return the vector from the function.\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4caeabe253bb6883a5f45db44c39f825&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground link</a></p>\n\n<p>(But this function doesn't actually return only prime factors!)</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1095, "favorite_count": 0, "accepted_answer_id": 37800191, "answer_count": 1, "score": 2, "last_activity_date": 1465909827, "creation_date": 1465852964, "last_edit_date": 1465909827, "question_id": 37799347, "link": "https://stackoverflow.com/questions/37799347/wrong-vector-return-type-for-rust-function", "title": "Wrong vector return type for Rust function", "body": "<pre><code>pub fn collect_prime_factors(number: i32) -&gt; Vec&lt;i32&gt; {\n    let mut prime_factors = Vec::new();\n\n    for i in 2..number {\n        if number % i == 0 {\n            collect_prime_factors(number / 2);\n            prime_factors.push(i);\n            prime_factors\n        }\n    }\n}\n</code></pre>\n\n<p>error:</p>\n\n<pre><code>lib.rs:14:9: 14:22 error: mismatched types:\n expected `()`,\n    found `collections::vec::Vec&lt;i32&gt;`\n(expected (),\n    found struct `collections::vec::Vec`) [E0308]\nlib.rs:14         prime_factors\n</code></pre>\n\n<p>I do not get the problem here. I am declaring a <code>Vec&lt;i32&gt;</code> as return type. Why is the expecting those empty braces?</p>\n\n<p>Why does this not work only when I use it within a loop? When I remove the loop and only <code>return prime_factors;</code> everything works fine.</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1465845371, "post_id": 37797242, "comment_id": 63060985, "body": "Short answer: you can&#39;t. These types are not compatible with each other."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1465845502, "post_id": 37797242, "comment_id": 63061035, "body": "Well, I am interesting then - how do functions of the API I use supposed to run if they have this kind of arguments?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1465846009, "post_id": 37797242, "comment_id": 63061278, "body": "What you could do if this is really what the API needs is <code>test(&amp;v.iter().collect::&lt;Vec&lt;_&gt;&gt;());</code>. But this allocates a new vector. If you are the author of the API, consider changing it: <code>[&amp;T]</code> is a weird type to work with since you need different owners for the slice and the objects in it. <code>&amp;[T]</code> already has a pass-by-reference semantic of the inner objects."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1465846118, "post_id": 37797242, "comment_id": 63061331, "body": "@mcarton Thanks, I&#39;ll make a PR then and contant the maintainer. Don&#39;t know what to do with this question. Maybe you will answer with this information?"}, {"owner": {"reputation": 118, "user_id": 4532565, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-_apC5d5zS8U/AAAAAAAAAAI/AAAAAAAAGB0/EVfOGaEjVts/photo.jpg?sz=128", "display_name": "nngg", "link": "https://stackoverflow.com/users/4532565/nngg"}, "edited": false, "score": 1, "creation_date": 1590667467, "post_id": 37797242, "comment_id": 109769650, "body": "if changing <code>test</code> is an option, it can be defined as <code>fn test&lt;T: std::borrow::Borrow&lt;A&gt;&gt;(a: &amp;[T]){}</code>, this will accept both `&amp;[&amp;A] and &amp;[A]. This will be backward compatible too."}], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465847255, "post_id": 37797736, "comment_id": 63061897, "body": "@Shepmaster do you have any concrete example where this would be useful? The only use of <code>&amp;[&amp;T]</code> I can think of would be <code>&amp;[&amp;&#39;static str]</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465848788, "post_id": 37797736, "comment_id": 63062742, "body": "One I can think of is a reference to a trait object: <code>&amp;[&amp;Display]</code>. Depending on the API, they may need to maintain backwards compatibility too."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 9, "last_activity_date": 1465846277, "creation_date": 1465846277, "answer_id": 37797736, "question_id": 37797242, "link": "https://stackoverflow.com/questions/37797242/how-to-get-a-slice-of-references-from-a-vector-in-rust/37797736#37797736", "title": "How to get a slice of references from a vector in Rust?", "body": "<p>Short answer: you can't. These types are not compatible with each other.</p>\n\n<p>What you could do if this is really what the API needs is </p>\n\n<pre><code>test(&amp;v.iter().collect::&lt;Vec&lt;_&gt;&gt;());\n</code></pre>\n\n<p>But this allocates a new vector. If you are the author of the API, consider changing it: <code>&amp;[&amp;T]</code> is a weird type to work with since you need different owners for the slice and the objects in it. <code>&amp;[T]</code> already has a pass-by-reference semantic of the inner objects.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2757, "favorite_count": 1, "accepted_answer_id": 37797736, "answer_count": 1, "score": 2, "last_activity_date": 1465846277, "creation_date": 1465844410, "last_edit_date": 1465844772, "question_id": 37797242, "link": "https://stackoverflow.com/questions/37797242/how-to-get-a-slice-of-references-from-a-vector-in-rust", "title": "How to get a slice of references from a vector in Rust?", "body": "<p>Somewhere in the API I use I have a function which takes <code>&amp;[&amp;A]</code> as argument but I only have a vector of <code>A</code> objects. When I try to use this function with\n<a href=\"https://play.rust-lang.org/?gist=c85970c4a6ddea2442e2db95da1df3e6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">following syntax</a></p>\n\n<pre><code>pub struct A(pub u64);\n\nfn test(a: &amp;[&amp;A]){}\n\nfn main() {\n   let v = vec![A(1), A(2), A(3)];\n   let a = &amp;v[..];\n   test(a);\n}\n</code></pre>\n\n<p>I have a error:</p>\n\n<pre><code>&lt;anon&gt;:12:9: 12:10 error: mismatched types:\n expected `&amp;[&amp;A]`,\n    found `&amp;[A]`\n(expected &amp;-ptr,\n    found struct `A`) [E0308]\n</code></pre>\n\n<p>I have made some attempts but without any success:</p>\n\n<pre><code>let a = &amp;v[&amp;..]\n</code></pre>\n\n<p>and</p>\n\n<pre><code>let a = &amp;v[&amp;A]\n</code></pre>\n\n<p>How can I make <code>&amp;[&amp;A]</code> from <code>Vec&lt;A&gt;</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 4, "last_activity_date": 1465849532, "creation_date": 1465849532, "answer_id": 37798527, "question_id": 37797035, "link": "https://stackoverflow.com/questions/37797035/cannot-move-out-of-borrowed-content-e0507/37798527#37798527", "title": "Cannot move out of borrowed content [E0507]", "body": "<p>As you can see in the <a href=\"https://static.rust-lang.org/doc/master/std/iter/trait.Iterator.html#method.peekable\" rel=\"nofollow\">docs</a>, the <code>peekable</code> function takes the iterator by value. Therefore it will only work if you <em>own</em> the iterator. However, in your code, <code>Items</code> is a shared reference to the iterator.</p>\n\n<p>Solving this problem requires approaching it from a different angle. For instance, you could take the iterator by value in the constructor and adapt the struct to store the peekable iterator in the <code>Items</code> field.</p>\n"}, {"tags": [], "owner": {"reputation": 576, "user_id": 3095091, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90ba23961eb7931a4fb1d8178f1c0913?s=128&d=identicon&r=PG", "display_name": "Chronium", "link": "https://stackoverflow.com/users/3095091/chronium"}, "is_accepted": false, "score": 1, "last_activity_date": 1465853931, "last_edit_date": 1465853931, "creation_date": 1465853132, "answer_id": 37799392, "question_id": 37797035, "link": "https://stackoverflow.com/questions/37797035/cannot-move-out-of-borrowed-content-e0507/37799392#37799392", "title": "Cannot move out of borrowed content [E0507]", "body": "<p>Basically, what is to be learned from here is the fact that over complicating things and over engineering things almost always does more harm than good.</p>\n\n<h1>Final fixed code:</h1>\n\n<pre><code>use std::iter::Peekable;\n\nstruct Snapshot {\n    index: u32\n}\n\nstruct Tokenizable&lt;T&gt; where T: Iterator {\n    index : u32,\n    items : Peekable&lt;T&gt;,\n    snapshots : Vec&lt;Snapshot&gt;,\n}\n\nimpl&lt;T&gt; Tokenizable&lt;T&gt; where T: Iterator {\n    fn new (items: T) -&gt; Tokenizable&lt;T&gt;  {\n        Tokenizable {\n            index : 0,\n            items : items.peekable (),\n            snapshots : Vec::new (),\n        }\n    }\n\n    fn end (&amp;mut self) -&gt; bool {\n        match self.items.peek () {\n            Some (c) =&gt; false,\n            None =&gt; true\n        }\n    }\n\n    fn peek (&amp;mut self) -&gt; Option&lt;&amp;&lt;T as Iterator&gt;::Item&gt; {\n        match self.items.peek () {\n            Some (c) =&gt; Some (c),\n            None =&gt; None\n        }\n    }\n}\n\nfn main () {\n    let mut data = \"Hello\".chars ();\n    let tokenizable = Tokenizable::new (data);\n}\n</code></pre>\n"}], "owner": {"reputation": 576, "user_id": 3095091, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90ba23961eb7931a4fb1d8178f1c0913?s=128&d=identicon&r=PG", "display_name": "Chronium", "link": "https://stackoverflow.com/users/3095091/chronium"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1992, "favorite_count": 0, "accepted_answer_id": 37798527, "answer_count": 2, "score": 2, "last_activity_date": 1465853931, "creation_date": 1465843566, "last_edit_date": 1465853034, "question_id": 37797035, "link": "https://stackoverflow.com/questions/37797035/cannot-move-out-of-borrowed-content-e0507", "title": "Cannot move out of borrowed content [E0507]", "body": "<p>I'm writing a lexer in Rust to learn, but I'm stuck with two \"cannot move out of borrowed content [E0507]\" errors.</p>\n\n<p>I tried all the solutions out there, but nothing seems to work: <code>RefCell</code>,  <code>clone()</code>, <code>by_ref()</code>, changing the <code>&amp;mut self</code> to <code>self</code> or <code>&amp;self</code> or <code>mut self</code>, or dereferencing.</p>\n\n<p>Here is my code:</p>\n\n<pre><code>struct Snapshot {\n    Index: u32,\n}\n\nstruct Tokenizable&lt;'a, T: 'a&gt;\n    where T: Iterator\n{\n    Index: u32,\n    Items: &amp;'a T,\n    Snapshots: Vec&lt;Snapshot&gt;,\n}\n\nimpl&lt;'a, T&gt; Tokenizable&lt;'a, T&gt;\n    where T: Iterator\n{\n    fn new(items: &amp;'a T) -&gt; Tokenizable&lt;'a, T&gt; {\n        Tokenizable {\n            Index: 0,\n            Items: items,\n            Snapshots: Vec::new(),\n        }\n    }\n\n    fn end(&amp;mut self) -&gt; bool {\n        match self.Items.peekable().peek() {\n            Some(c) =&gt; false,\n            None =&gt; true,\n        }\n    }\n\n    fn peek(&amp;mut self) -&gt; Option&lt;&amp;T::Item&gt; {\n        match self.Items.peekable().peek() {\n            Some(c) =&gt; Some(c),\n            None =&gt; None,\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot move out of borrowed content [E0507]\n         match self.Items.peekable().peek() {\n               ^~~~~~~~~~\nhelp: see the detailed explanation for E0507\n\nerror: borrowed value does not live long enough\n         match self.Items.peekable().peek() {\n               ^~~~~~~~~~~~~~~~~~~~~\nnote: reference must be valid for the anonymous lifetime #1 defined on the block at 32:43...\n     fn peek(&amp;mut self) -&gt; Option&lt;&amp;T::Item&gt; {\n         match self.Items.peekable().peek() {\n             Some(c) =&gt; Some(c),\n             None =&gt; None,\n         }\n     }\nnote: ...but borrowed value is only valid for the block at 32:43\n     fn peek(&amp;mut self) -&gt; Option&lt;&amp;T::Item&gt; {\n         match self.Items.peekable().peek() {\n             Some(c) =&gt; Some(c),\n             None =&gt; None,\n         }\n     }\n\nerror: cannot move out of borrowed content [E0507]\n         match self.Items.peekable().peek() {\n               ^~~~~~~~~~\nhelp: see the detailed explanation for E0507\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 4, "last_activity_date": 1465840050, "last_edit_date": 1465840050, "creation_date": 1465839707, "answer_id": 37796001, "question_id": 37795729, "link": "https://stackoverflow.com/questions/37795729/iterate-and-take-from-vector-of-options/37796001#37796001", "title": "Iterate and take from vector of Options", "body": "<pre><code>fn tick(&amp;mut self) {\n    for d in &amp;self.ods {\n</code></pre>\n\n<p>This will give immutable <code>d</code>s. Since you want to modify <code>d</code> you should iterate on <code>&amp;mut self.ods</code> instead.</p>\n\n<pre><code>        match d {\n            Some(du) =&gt; {\n</code></pre>\n\n<p>Note that <code>d</code> is a reference. You should deference it <code>match *d</code>. And you want to capture <code>du</code> by mutable reference (<code>Some(ref mut du) =&gt;</code>) so your changes will be propagated back to the original storage. </p>\n\n<p>As the <code>None</code> arm is doing nothing you could use <code>if let</code> instead of <code>match</code> to save an indentation level.</p>\n\n<pre><code>                if du.capacity == 0 {\n                    d.take();\n                }\n</code></pre>\n\n<p>After we fixed the above two issues, the borrow checker will complain here. This is expected, as the borrow of <code>du</code> from <code>d</code> is still valid, but you now try to destroy <code>d</code>. We need to call <code>.take()</code> outside of the <code>match</code>. Personally I would add a flag to indicate if we need to nullify <code>d</code>. Note that since you are not using the result, simply calling <code>*d = None</code> is enough.</p>\n\n<hr>\n\n<p>Final result:</p>\n\n<pre><code>fn tick(&amp;mut self) {\n    for d in &amp;mut self.ods {\n        let mut should_nullify = false;\n        if let Some(ref mut du) = *d {\n            du.capacity -= 1;\n            if du.capacity == 0 {\n                should_nullify = true;\n            }\n        }\n        if should_nullify {\n            *d = None;\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 247, "user_id": 4310259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6ac9d888c4d21750189144a59e48bcc6?s=128&d=identicon&r=PG&f=1", "display_name": "bretmattingly", "link": "https://stackoverflow.com/users/4310259/bretmattingly"}, "edited": false, "score": 0, "creation_date": 1465840075, "post_id": 37796049, "comment_id": 63058184, "body": "Both answers were incredible. I&#39;m tossing the checkmark to you for breaking down my boneheaded mistakes step by step. Thanks @Shepmaster! I had suspected that part of my issue was going to come from mutating the vec while iterating through it (changing Some() to None). I didn&#39;t even think about the fact that I was mutating the Option while I was still referencing its value!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1465839849, "creation_date": 1465839849, "answer_id": 37796049, "question_id": 37795729, "link": "https://stackoverflow.com/questions/37795729/iterate-and-take-from-vector-of-options/37796049#37796049", "title": "Iterate and take from vector of Options", "body": "<p>Here's the code I used to fill in the aspects you didn't provide:</p>\n\n<pre><code>struct Dude {\n    pub capacity: i32,\n}\n\nstruct State {\n    ods: Vec&lt;Option&lt;Dude&gt;&gt;,\n}\n\nimpl State {\n    fn tick(&amp;mut self) {\n        for d in &amp;self.ods {\n            match d {\n                Some(du) =&gt; {\n                    du.capacity -= 1;\n                    if du.capacity == 0 {\n                        d.take();\n                    }\n                }\n                None =&gt; {}\n            };\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<hr>\n\n<p>Checking out the first error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;core::option::Option&lt;Dude&gt;`,\n    found `core::option::Option&lt;_&gt;`\n(expected &amp;-ptr,\n    found enum `core::option::Option`) [E0308]\n\n                 Some(du) =&gt; {\n                 ^~~~~~~~\n</code></pre>\n\n<p>The <code>match</code> statement is looking for the match arm to be a <code>&amp;Option&lt;Dude</code>, but the pattern represents an <code>Option&lt;_&gt;</code> (\"option of an as-yet-undetermined type\"). If you change it to <code>&amp;Some</code> or (more idiomatically) match on <code>*d</code>, that error will go away.</p>\n\n<p>Then you run into an issue where you are iterating immutably, so that needs to be fixed (<code>for d in &amp;mut self.ods</code> and <code>Some(mut du)</code>).</p>\n\n<p>Then you are trying to move out of the vector into the <code>Some</code> pattern, so you need <code>Some(ref mut du)</code>. </p>\n\n<p>Then you run into the <strong>real</strong> problem: you are trying to mutate the <code>Option</code> while referencing its internals. This is invalid and would lead to memory safety issues!</p>\n\n<p>Instead, split up the concept of decrementing the count and removing the values:</p>\n\n<pre><code>fn tick(&amp;mut self) {\n    for d in &amp;mut self.ods {\n        let remove = match *d {\n            Some(ref mut du) =&gt; {\n                du.capacity -= 1;\n                du.capacity != 0\n            }\n            None =&gt; false,\n        };\n\n        if remove {\n            d.take();\n        }\n    }\n}\n</code></pre>\n\n<p>If you wanted to remove from the <code>Vec</code>, you could also use <code>retain</code>:</p>\n\n<pre><code>fn tick(&amp;mut self) {\n    for d in &amp;mut self.ods {\n        if let Some(ref mut du) = *d {\n            du.capacity -= 1;\n        }\n    }\n\n    self.ods.retain(|d| {\n        d.as_ref().map_or(false, |du| {\n            du.capacity != 0\n        })\n    })\n}\n</code></pre>\n"}], "owner": {"reputation": 247, "user_id": 4310259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6ac9d888c4d21750189144a59e48bcc6?s=128&d=identicon&r=PG&f=1", "display_name": "bretmattingly", "link": "https://stackoverflow.com/users/4310259/bretmattingly"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2414, "favorite_count": 0, "accepted_answer_id": 37796049, "answer_count": 2, "score": 2, "last_activity_date": 1465840050, "creation_date": 1465838702, "last_edit_date": 1465838968, "question_id": 37795729, "link": "https://stackoverflow.com/questions/37795729/iterate-and-take-from-vector-of-options", "title": "Iterate and take from vector of Options", "body": "<p>Every time I think I've got idiomatic Rust a little bit figured out, it defeats me again. In this case, I've got a struct <code>State</code> which contains, among other things, a <code>Vec&lt;Option&lt;Dude&gt;&gt;</code> called <code>ods</code>, where <code>Dude</code> is a struct that looks like this:</p>\n\n<pre><code>pub struct Dude {\n    pub capacity: i32,\n    pub status: DudeStatus,\n}\n</code></pre>\n\n<p>What I would LIKE to do is define a function/method on <code>State</code> that iterates through <code>ods</code>. If a <code>Dude</code> is present in the given index (that is, <code>if ods[i] == Some(Dude)</code>), decrement his capacity by one, and if that causes <code>capacity==0</code>, remove the <code>Dude</code> from <code>ods</code>. Unfortunately, I seem to be running into type inference and/or ownership issues. Here's my attempt:</p>\n\n<pre><code>fn tick(&amp;mut self) {\n    for d in &amp;self.ods {\n        match d {\n            Some(du) =&gt; {\n                du.capacity -= 1;\n                if du.capacity == 0 {\n                    d.take();\n                }\n            }\n            None =&gt; {}\n        };\n    }\n}\n</code></pre>\n\n<p>However, this gives 3 compilation errors: </p>\n\n<pre><code>src/state.rs:40:18: 40:26 error: mismatched types:\n expected `&amp;std::option::Option&lt;dude::Dude&gt;`,\n found `std::option::Option&lt;_&gt;`\n (expected &amp;-ptr,\n found enum `std::option::Option`) [E0308]\nsrc/state.rs:40                  Some(du) =&gt; {\n                                 ^~~~~~~~\n\nsrc/state.rs:46:18: 46:22 error: mismatched types:\n expected `&amp;std::option::Option&lt;dude::Dude&gt;`,\n found `std::option::Option&lt;_&gt;`\n (expected &amp;-ptr,\n found enum `std::option::Option`) [E0308]\nsrc/state.rs:46                  None         =&gt; {}\n\nsrc/state.rs:41:22: 41:32 error: the type of this value must be known in this context\nsrc/state.rs:41                      du.capacity -=1;\n</code></pre>\n\n<p>The third error is easy enough to understand conceptually, but I'm not sure where I should be annotating the type. Type ascription is currently an experimental feature so I can't use <code>match d: Option&lt;Dude&gt;</code> which, to me, is the most intuitive. Additionally the other two errors suggest I have a borrow/reference error. What am I doing wrong?</p>\n"}, {"tags": ["list", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1465830195, "post_id": 37793017, "comment_id": 63052297, "body": "You <b>really</b> should post the <i>error message</i> you get when asking for help."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1465830159, "creation_date": 1465830159, "answer_id": 37793139, "question_id": 37793017, "link": "https://stackoverflow.com/questions/37793017/cant-create-rust-linkedlist/37793139#37793139", "title": "Can&#39;t create Rust LinkedList", "body": "<p>The error is:</p>\n\n<pre><code>error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n\nlet mut list = LinkedList::new();\n               ^~~~~~~~~~~~~~~\n</code></pre>\n\n<p>A <code>LinkedList</code> is parameterized over the type of element it contains, but there's nothing in this code to tell the compiler what <em>that</em> type is.</p>\n\n<p>In a more complete program, this type would usually be inferred because you do something with the collection, such as inserting a value into it:</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn main() {\n    let mut list = LinkedList::new();\n    list.push_front(\"hello\");\n}\n</code></pre>\n\n<p>You could also specify the type explicitly:</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn main() {\n    let mut list = LinkedList::&lt;bool&gt;::new();\n    // OR\n    let mut list: LinkedList&lt;bool&gt; = LinkedList::new();\n}\n</code></pre>\n\n<p>Although type inference is the preferred solution.</p>\n"}], "owner": {"reputation": 389, "user_id": 5464210, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/59d9acb97d2975758f1edf80ad1f4840?s=128&d=identicon&r=PG&f=1", "display_name": "unskilledidiot", "link": "https://stackoverflow.com/users/5464210/unskilledidiot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 37793139, "answer_count": 1, "score": -2, "last_activity_date": 1465830176, "creation_date": 1465829826, "last_edit_date": 1465830176, "question_id": 37793017, "link": "https://stackoverflow.com/questions/37793017/cant-create-rust-linkedlist", "title": "Can&#39;t create Rust LinkedList", "body": "<p>Why does this not work? I am trying to create an empty list.</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn main() {\n\n    let mut list = LinkedList::new();\n\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1556430607, "post_id": 37792768, "comment_id": 98432289, "body": "I make sense of the method&#39;s name in the following way: While &quot;filter&quot;, confusingly, does not filter the elements that match the predicate, &quot;retain&quot; does retain the elements that match the predicate. I think this will be more intuitive for new programmers."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1556447597, "post_id": 37792768, "comment_id": 98435788, "body": "@mako: I also prefer <code>retain</code> for exactly this reason. I somehow have a hard time with booleans already, so if the semantics of which elements are kept/discarded are not clear, it&#39;s even harder on me."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1516755596, "last_edit_date": 1516755596, "creation_date": 1465829174, "answer_id": 37792768, "question_id": 37792471, "link": "https://stackoverflow.com/questions/37792471/removing-elements-from-a-vec-based-on-some-condition/37792768#37792768", "title": "Removing elements from a Vec based on some condition", "body": "<p>If you look at the interface of <code>Vec</code>, you will not find a method that erases some elements based on a predicate. Instead you will find <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain\" rel=\"noreferrer\"><code>retain</code></a> which <em>keeps</em> the elements based on a predicate.</p>\n\n<p>Of course, both are symmetric, it's just that <code>retain</code> is harder to find if you filter method names by \"remove\" or \"erase\" (it does contain \"remove\" in its description).</p>\n\n<p>The example provided speaks for itself:</p>\n\n<pre><code>let mut vec = vec![1, 2, 3, 4];\nvec.retain(|&amp;x| x % 2 == 0);\nassert_eq!(vec, [2, 4]);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1516756087, "creation_date": 1516756087, "answer_id": 48413353, "question_id": 37792471, "link": "https://stackoverflow.com/questions/37792471/removing-elements-from-a-vec-based-on-some-condition/48413353#48413353", "title": "Removing elements from a Vec based on some condition", "body": "<p>In nightly Rust, you can use <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain_filter\" rel=\"noreferrer\"><code>Vec::drain_filter</code></a>:</p>\n\n<pre><code>#![feature(drain_filter)]\n\n#[derive(Debug)]\nstruct Bar {\n    i: i32,\n}\n\nfn main() {\n    let mut bars = vec![Bar { i: 1 }, Bar { i: 10 }, Bar { i: 3 }, Bar { i: 100 }];\n    bars.drain_filter(|b| b.i &lt; 10);\n    println!(\"{:?}\", bars);\n}\n</code></pre>\n\n<p>What's extra interesting about <code>drain_filter</code> is that you can get the rejected values as it returns an iterator of them:</p>\n\n<pre><code>let rejects: Vec&lt;_&gt; = bars.drain_filter(|b| b.i &lt; 10).collect();\n</code></pre>\n\n<p>You can also choose to modify the value being iterated over:</p>\n\n<pre><code>bars.drain_filter(|b| {\n    b.i -= 1;\n    b.i &lt; 10\n});\n</code></pre>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4326, "favorite_count": 0, "closed_date": 1618577426, "accepted_answer_id": 37792768, "answer_count": 2, "score": 11, "last_activity_date": 1516756087, "creation_date": 1465828383, "last_edit_date": 1516755539, "question_id": 37792471, "link": "https://stackoverflow.com/questions/37792471/removing-elements-from-a-vec-based-on-some-condition", "closed_reason": "Duplicate", "title": "Removing elements from a Vec based on some condition", "body": "<p>My code looks like this:</p>\n\n<pre><code>struct Bar {\n    i: i32,\n}\n\nstruct Foo {\n    v: Vec&lt;Bar&gt;,\n}\n\nimpl Foo {\n    fn foo(&amp;mut self) {\n        self.v.drain(self.v.iter().filter(|b| b.i &lt; 10));\n    }\n}\n</code></pre>\n\n<p>Note that <code>Bar</code> is not allowed to be copied or cloned.</p>\n\n<p>I want to delete all <code>Bar</code>s that don't satisfy that condition. Initially I thought I could just iterate over them and call <code>remove</code> but I am not allowed to have two mutable borrows or one mutable borrow if there is an immutable borrow which makes total sense.</p>\n\n<p>I guess the easiest thing would be to just <code>clone</code>, <code>filter</code> and <code>collect</code>, but I am not allowed to clone or copy.</p>\n\n<p>How would I do this?</p>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465821964, "post_id": 37789925, "comment_id": 63046356, "body": "Please produce an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1465822106, "post_id": 37789925, "comment_id": 63046468, "body": "@Shepmaster I do not see a way to shorten the code in question while still retaining the spirit of the question, ie. that it is a bit vector and how it relates to <code>std::vec::Vec</code> and the <code>SliceExt</code> trait."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465822984, "post_id": 37789925, "comment_id": 63047103, "body": "<code>get</code>, <code>set</code>, <code>capacity</code> functions are irrelevant. Remove arguments, generic types. End up with <a href=\"https://play.rust-lang.org/?gist=aa638e102672e09ebcce3098762cf947&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a>."}], "answers": [{"comments": [{"owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "edited": false, "score": 0, "creation_date": 1465841025, "post_id": 37790485, "comment_id": 63058639, "body": "Does this also directly translate to the <code>split_at_mut</code> variant? Because that seems to be the most interesting case, yet it&#39;s not allowed to give <code>(mut BitSlice&lt;&#39;a&gt;, mut BitSlice&lt;&#39;a&gt;</code> as return type."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "edited": false, "score": 0, "creation_date": 1465842491, "post_id": 37790485, "comment_id": 63059508, "body": "@skiwi added more."}, {"owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "edited": false, "score": 0, "creation_date": 1465842746, "post_id": 37790485, "comment_id": 63059659, "body": "I think I&#39;m beginning to understand it now, thanks for the explanations. So this is really the best I can get? Because slices are a no-go as this structure represents a bit vector which cannot be represented as a slice (because even <code>bool</code> uses <code>u8</code> as backing)."}, {"owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "edited": false, "score": 0, "creation_date": 1465847094, "post_id": 37790485, "comment_id": 63061819, "body": "After trying to implement this and failing I&#39;ve come to the following (hopefully temporary) conclusion: It&#39;s not possible to implement the <code>Deref</code> and <code>DerefMut</code> traits because you still end up trying to create a <code>BitSlice</code> resp <code>BitSliceMut</code> and returning a reference to something on the stack does not work."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1465842481, "last_edit_date": 1495535346, "creation_date": 1465822691, "answer_id": 37790485, "question_id": 37789925, "link": "https://stackoverflow.com/questions/37789925/how-to-return-a-newly-created-struct-as-a-reference/37790485#37790485", "title": "How to return a newly created struct as a reference?", "body": "<blockquote>\n  <p>How to return a newly created struct as a reference?</p>\n</blockquote>\n\n<p>You can't. No way around this; it's simply impossible. As you said, if it's declared on the stack then the value will be dropped and any references would be invalidated.</p>\n\n<p>So what makes <code>Vec</code> different?</p>\n\n<p>A <code>Vec&lt;T&gt;</code> is the owned counterpart of a slice (<code>&amp;[T]</code>). While a <code>Vec</code> has a pointer to the beginning of data, a count, and a capacity, a slice only has the pointer and a count. Both guarantee that all the data is contiguous. In pseudo-Rust, they look like this:</p>\n\n<pre><code>struct Vec&lt;T&gt; {\n    data: *mut T,\n    size: usize,\n    capacity: usize,\n}\n\nstruct Slice&lt;'a, T&gt; {\n    data: *mut T,\n    size: usize,\n}\n</code></pre>\n\n<p><code>Vec::split_at</code> can return slices because it essentially <em>contains</em> a slice. It's not creating something and returning a reference to it, it's just a copy of the pointer and the count.</p>\n\n<p>If you create a borrowed counterpart to your owned datatype, then you could return that. Something like</p>\n\n<pre><code>struct BitVector {\n    data: Vec&lt;u8&gt;,\n    capacity: usize,\n    storage_size: usize\n}\n\nstruct BitSlice&lt;'a&gt; {\n    data: &amp;'a [u8],\n    storage_size: usize,\n}\n\nimpl BitVector {\n    fn with_capacity(capacity: usize) -&gt; BitVector {\n        let storage_size = std::mem::size_of::&lt;u8&gt;() * 8;\n        let len = (capacity / storage_size) + 1;\n        BitVector { \n            data: vec![0; len],\n            capacity: capacity,\n            storage_size: storage_size\n        }\n    }\n\n    fn split_at&lt;'a&gt;(&amp;'a self) -&gt; (BitSlice&lt;'a&gt;, BitSlice&lt;'a&gt;) {\n        let (data_left, data_right) = self.data.split_at(0);\n        let left = BitSlice {\n            data: data_left,\n            storage_size: self.storage_size\n        };\n        let right = BitSlice {\n            data: data_right,\n            storage_size: self.storage_size\n        };\n        (left, right)\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>To follow the theme of <code>Vec</code>, you would want to probably <code>Deref</code> and <code>DerefMut</code> to the <code>BitSlice</code> and then implement all the non-capacity-changing methods on the <code>BitSlice</code>.</p>\n\n<blockquote>\n  <p>I suppose this is done for end user convenience as they rather deal with references than with boxes.</p>\n</blockquote>\n\n<p>References and boxes should be mostly transparent at the use-site. The main reason is performance. A <code>Box</code> is heap-allocated.</p>\n\n<blockquote>\n  <p>I think I could fix my errors by putting the returned bit vectors into a Box&lt;_></p>\n</blockquote>\n\n<p>This would not be a good idea. You already have a heap allocation via the <code>Vec</code>, and boxing it would introduce another indirection and extra heap usage.</p>\n\n<blockquote>\n  <p>It does work if I return <code>(BitVector&lt;S&gt;, BitVector&lt;S&gt;)</code>, what are the downsides to doing this? Why does the <code>SliceExt</code> trait not do this?</p>\n</blockquote>\n\n<p>Yes, here you are returning the heap-allocated structures. There's no downside to <em>returning</em> these, there's just the downside of performing the allocations. That's why <code>SliceExt</code> doesn't do it.</p>\n\n<blockquote>\n  <p>Does this also directly translate to the split_at_mut variant? </p>\n</blockquote>\n\n<p>Yes.</p>\n\n<pre><code>struct BitSliceMut&lt;'a&gt; {\n    data: &amp;'a mut [u8],\n    storage_size: usize,\n}\n\nfn split_at_mut&lt;'a&gt;(&amp;'a mut self) -&gt; (BitSliceMut&lt;'a&gt;, BitSliceMut&lt;'a&gt;) {\n    let (data_left, data_right) = self.data.split_at_mut (0);\n    let left = BitSliceMut {\n        data: data_left,\n        storage_size: self.storage_size\n    };\n    let right = BitSliceMut {\n        data: data_right,\n        storage_size: self.storage_size\n    };\n    (left, right)\n}\n</code></pre>\n\n<p>This helps point out that <code>&amp;T</code> and <code>&amp;mut T</code> are <strong>different types</strong> and behave in different ways.</p>\n\n<blockquote>\n  <p>it's not allowed to give (mut BitSlice&lt;'a>, mut BitSlice&lt;'a> as return type.</p>\n</blockquote>\n\n<p>It doesn't make sense to return a <code>mut T</code>: <a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference in `mut` before a variable name and after the `:`?</a>. With a <code>BitSliceMut</code>, the mutability is an aspect of the contained type (<code>&amp;mut [u8]</code>). </p>\n"}, {"tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": false, "score": 3, "last_activity_date": 1465822851, "creation_date": 1465822851, "answer_id": 37790539, "question_id": 37789925, "link": "https://stackoverflow.com/questions/37789925/how-to-return-a-newly-created-struct-as-a-reference/37790539#37790539", "title": "How to return a newly created struct as a reference?", "body": "<p>The answer to why the standard library is 'allowed' to return by reference is, that it does not allocate anything on the stack. It returns references to already allocated memory which lives long enough.</p>\n\n<p>So you have basically two choices:</p>\n\n<ul>\n<li><p>If you allocate memory on the stack you have to return it as value.\nThis includes the Box&lt;_> scenario. You return the Box, which has a pointer to heap allocated memory, as value.</p></li>\n<li><p>If you do not allocate memory on the stack you can return references to the result which already lives in memory.</p></li>\n</ul>\n\n<p>In Rust it is efficient to return by value, as the value is moved, not copied.</p>\n"}], "owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7391, "favorite_count": 0, "closed_date": 1508703379, "accepted_answer_id": 37790485, "answer_count": 2, "score": 7, "last_activity_date": 1465842481, "creation_date": 1465821030, "last_edit_date": 1465822026, "question_id": 37789925, "link": "https://stackoverflow.com/questions/37789925/how-to-return-a-newly-created-struct-as-a-reference", "closed_reason": "Duplicate", "title": "How to return a newly created struct as a reference?", "body": "<p>As an exercise to learn Rust I decided to implement a Bit Vector library, with inspiration from <code>std::vec::Vec</code> for which methods to provide.</p>\n\n<p>I have the following code:</p>\n\n<pre><code>extern crate num;\n\nuse std::cmp::Eq;\nuse std::ops::{BitAnd,BitOrAssign,Index,Shl};\nuse num::{One,Zero,Unsigned,NumCast};\n\npub trait BitStorage: Sized + \n    BitAnd&lt;Self, Output = Self&gt; + \n    BitOrAssign&lt;Self&gt; + \n    Shl&lt;Self, Output = Self&gt; + \n    Eq + Zero + One + Unsigned + NumCast + Copy {}\n\nimpl&lt;S&gt; BitStorage for S where S: Sized + \n    BitAnd&lt;S, Output = S&gt; + \n    BitOrAssign&lt;S&gt; + \n    Shl&lt;S, Output = S&gt; + \n    Eq + Zero + One + Unsigned + NumCast + Copy {}\n\npub struct BitVector&lt;S: BitStorage&gt; {\n    data: Vec&lt;S&gt;,\n    capacity: usize,\n    storage_size: usize\n}\n\nimpl&lt;S: BitStorage&gt; BitVector&lt;S&gt; {\n    pub fn with_capacity(capacity: usize) -&gt; BitVector&lt;S&gt; {\n        let storage_size = std::mem::size_of::&lt;S&gt;() * 8;\n        let len = (capacity / storage_size) + 1;\n        BitVector { \n            data: vec![S::zero(); len],\n            capacity: capacity,\n            storage_size: storage_size\n        }\n    }\n\n    pub fn get(&amp;self, index: usize) -&gt; Option&lt;bool&gt; {\n        match self.index_in_bounds(index) {\n            true =&gt; Some(self.get_unchecked(index)),\n            false =&gt; None\n        }\n    }\n\n    pub fn set(&amp;mut self, index: usize, value: bool) {\n        self.panic_index_bounds(index);\n        let (data_index, remainder) = self.compute_data_index_and_remainder(index);\n        let value = if value { S::one() } else { S::zero() };\n        self.data[data_index] |= value &lt;&lt; remainder;\n    }\n\n    pub fn capacity(&amp;self) -&gt; usize {\n        self.capacity\n    }\n\n    pub fn split_at(&amp;self, index: usize) -&gt; (&amp;BitVector&lt;S&gt;, &amp;BitVector&lt;S&gt;) {\n        self.panic_index_not_on_storage_bound(index);\n        let data_index = self.compute_data_index(index);\n        let (capacity_left, capacity_right) = self.compute_capacities(index);\n        let (data_left, data_right) = self.data.split_at(data_index);\n\n        let left = BitVector {\n            data: data_left.to_vec(),\n            capacity: capacity_left,\n            storage_size: self.storage_size\n        };\n        let right = BitVector {\n            data: data_right.to_vec(),\n            capacity: capacity_right,\n            storage_size: self.storage_size\n        };\n        (&amp;left, &amp;right)\n    }\n\n    pub fn split_at_mut(&amp;mut self, index: usize) -&gt; (&amp;mut BitVector&lt;S&gt;, &amp;mut BitVector&lt;S&gt;) {\n        self.panic_index_not_on_storage_bound(index);\n        let data_index = self.compute_data_index(index);\n        let (capacity_left, capacity_right) = self.compute_capacities(index);\n        let (data_left, data_right) = self.data.split_at_mut(data_index);\n\n        let mut left = BitVector {\n            data: data_left.to_vec(),\n            capacity: capacity_left,\n            storage_size: self.storage_size\n        };\n        let mut right = BitVector {\n            data: data_right.to_vec(),\n            capacity: capacity_right,\n            storage_size: self.storage_size\n        };\n        (&amp;mut left, &amp;mut right)\n    }\n\n    #[inline]\n    fn get_unchecked(&amp;self, index: usize) -&gt; bool {\n        let (data_index, remainder) = self.compute_data_index_and_remainder(index);\n        (self.data[data_index] &amp; (S::one() &lt;&lt; remainder)) != S::zero()\n    }\n\n    #[inline]\n    fn compute_data_index_and_remainder(&amp;self, index: usize) -&gt; (usize, S) {\n        let data_index = self.compute_data_index(index);\n        let remainder = self.compute_data_remainder(index);\n        (data_index, remainder)\n    }\n\n    #[inline]\n    fn compute_data_index(&amp;self, index: usize) -&gt; usize {\n        index / self.storage_size\n    }\n\n    #[inline]\n    fn compute_data_remainder(&amp;self, index: usize) -&gt; S {\n        let remainder = index % self.storage_size;\n        // we know that remainder is always smaller or equal to the size that S can hold\n        // for example if S = u8 then remainder &lt;= 2^8 - 1\n        let remainder: S = num::cast(remainder).unwrap();\n        remainder\n    }\n\n    #[inline]\n    fn compute_capacities(&amp;self, index_to_split: usize) -&gt; (usize, usize) {\n        (index_to_split, self.capacity - index_to_split)\n    }\n\n    #[inline]\n    fn index_in_bounds(&amp;self, index: usize) -&gt; bool {\n        index &lt; self.capacity\n    }\n\n    #[inline]\n    fn panic_index_bounds(&amp;self, index: usize) {\n        if !self.index_in_bounds(index) {\n            panic!(\"Index out of bounds. Length = {}, Index = {}\", self.capacity, index);\n        }\n    }\n\n    #[inline]\n    fn panic_index_not_on_storage_bound(&amp;self, index: usize) {\n        if index % self.storage_size != 0 {\n            panic!(\"Index not on storage bound. Storage size = {}, Index = {}\", self.storage_size, index);\n        }\n    }\n}\n\nstatic TRUE: bool = true;\nstatic FALSE: bool = false;\n\nmacro_rules! bool_ref {\n    ($cond:expr) =&gt; (if $cond { &amp;TRUE } else { &amp;FALSE })\n}\n\nimpl&lt;S: BitStorage&gt; Index&lt;usize&gt; for BitVector&lt;S&gt; {\n    type Output = bool;\n\n    fn index(&amp;self, index: usize) -&gt; &amp;bool {\n        self.panic_index_bounds(index);\n        bool_ref!(self.get_unchecked(index))\n    }\n}\n</code></pre>\n\n<p>The compiler errors occur at the <code>split_at</code> and <code>split_at_mut</code> methods: They basically tell me that <code>left</code> and <code>right</code> in both cases do not live long enough to be returned as a reference. I understand this, because they are created on the stack and then I want to return them as a reference.</p>\n\n<p>However with my design being inspired by <code>std::vec::Vec</code> you can see that <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/slice.rs\">in the SliceExt trait</a> their definitions are as follows:</p>\n\n<pre><code>#[stable(feature = \"core\", since = \"1.6.0\")]\nfn split_at(&amp;self, mid: usize) -&gt; (&amp;[Self::Item], &amp;[Self::Item]);\n\n#[stable(feature = \"core\", since = \"1.6.0\")]\nfn split_at_mut(&amp;mut self, mid: usize) -&gt; (&amp;mut [Self::Item], &amp;mut [Self::Item]);\n</code></pre>\n\n<p>I suppose this is done for end user convenience as they rather deal with references than with boxes.</p>\n\n<p>I think I could fix my errors by putting the returned bit vectors into a <code>Box&lt;_&gt;</code>, but is there a way to return the created structs as a reference?</p>\n\n<p>As a bonus question: It does work if I return <code>(BitVector&lt;S&gt;, BitVector&lt;S&gt;)</code>, what are the downsides to doing this? Why does the <code>SliceExt</code> trait not do this?</p>\n"}, {"tags": ["iterator", "rust", "panic"], "answers": [{"tags": [], "owner": {"reputation": 47414, "user_id": 52817, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/74fUU.png?s=128&g=1", "display_name": "laktak", "link": "https://stackoverflow.com/users/52817/laktak"}, "is_accepted": false, "score": 0, "last_activity_date": 1465817494, "creation_date": 1465817494, "answer_id": 37788724, "question_id": 37787470, "link": "https://stackoverflow.com/questions/37787470/can-i-convert-an-iteratoritem-ioresultu8-to-ioresultvecu8-without-pa/37788724#37788724", "title": "Can I convert an Iterator&lt;Item=io::Result&lt;u8&gt;&gt; to io::Result&lt;Vec&lt;u8&gt;&gt; without panicking?", "body": "<p>@aspex thanks for you help, it's</p>\n\n<pre><code>let fold: io::Result&lt;Vec&lt;_&gt;&gt; = iter.collect();\n</code></pre>\n"}], "owner": {"reputation": 47414, "user_id": 52817, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/74fUU.png?s=128&g=1", "display_name": "laktak", "link": "https://stackoverflow.com/users/52817/laktak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 131, "favorite_count": 0, "closed_date": 1465820444, "answer_count": 1, "score": 0, "last_activity_date": 1465817494, "creation_date": 1465814020, "question_id": 37787470, "link": "https://stackoverflow.com/questions/37787470/can-i-convert-an-iteratoritem-ioresultu8-to-ioresultvecu8-without-pa", "closed_reason": "Duplicate", "title": "Can I convert an Iterator&lt;Item=io::Result&lt;u8&gt;&gt; to io::Result&lt;Vec&lt;u8&gt;&gt; without panicking?", "body": "<p>I have an <code>Iterator&lt;Item=io::Result&lt;u8&gt;&gt;</code> that I'd like to convert to <code>io::Result&lt;Vec&lt;u8&gt;&gt;</code>.</p>\n\n<pre><code>iter.map(|x| x.unwrap()).collect::&lt;Vec&lt;u8&gt;&gt;()\n</code></pre>\n\n<p>will give me the <code>Vec&lt;u8&gt;</code> but how can I keep the <code>Err</code> part in case of an error?</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1465805165, "post_id": 37784410, "comment_id": 63035892, "body": "Note: you don&#39;t actually even need the first <code>to_string()</code>, so you don&#39;t need a single allocation :)"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 12, "last_activity_date": 1570201022, "last_edit_date": 1570201022, "creation_date": 1465804497, "answer_id": 37784410, "question_id": 37783925, "link": "https://stackoverflow.com/questions/37783925/how-do-i-get-a-substring-between-two-patterns-in-rust/37784410#37784410", "title": "How do I get a substring between two patterns in Rust?", "body": "<p>I don't remember a built-in library function in other languages that works exactly the way you want (give me the substring between two patterns, or between the first and the end if the second does not exist).\nI think you would have to write some custom logic anyway. </p>\n\n<p>The closest equivalent to a \"substring\" function is slicing. However (as you found out) it works with bytes, not with unicode characters, so you will have to be careful with indices. In <code>\"L\u00f6we\"</code>, the 'e' is at (byte) index 4, not 3 (<a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20%20let%20s%20%3D%20%26%22L%C3%B6we%22%3B%0A%20%20%20%20%20let%20e%20%3D%20s.find(%22e%22).unwrap()%3B%20%0A%20%20%20%20%20println!(%22%7B%7D%22%2C%20e)%3B%0A%7D&amp;version=beta&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>). But you can still use it in your case, because you are not working with indices directly (using <code>find</code> instead to... find the index you need for you)</p>\n\n<p>Here's how you could do it with slicing (bonus, you don't need to re-allocate other <code>String</code>s):</p>\n\n<pre><code>// adding some unicode to check that everything works\n// also ouside of ASCII\nlet line = \"asdfapatterndf1\u8001\u864e23&lt;12\";\n\nlet start_bytes = line.find(\"pattern\").unwrap_or(0); //index where \"pattern\" starts\n                                                     // or beginning of line if \n                                                     // \"pattern\" not found\nlet end_bytes = line.find(\"&lt;\").unwrap_or(line.len()); //index where \"&lt;\" is found\n                                                      // or end of line\n\nlet result = &amp;line[start_bytes..end_bytes]; //slicing line, returns patterndf1\u8001\u864e23\n</code></pre>\n"}], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3285, "favorite_count": 0, "accepted_answer_id": 37784410, "answer_count": 1, "score": 8, "last_activity_date": 1570201022, "creation_date": 1465802750, "last_edit_date": 1465822128, "question_id": 37783925, "link": "https://stackoverflow.com/questions/37783925/how-do-i-get-a-substring-between-two-patterns-in-rust", "title": "How do I get a substring between two patterns in Rust?", "body": "<p>I want to create a substring in Rust. It starts with an occurrence of a string and ends at the end of the string minus four characters or at a certain character.</p>\n\n<p>My first approach was </p>\n\n<pre><code>string[string.find(\"pattern\").unwrap()..string.len()-5]\n</code></pre>\n\n<p>That is wrong because Rust's strings are valid UTF-8 and thus byte and not char based.</p>\n\n<p>My second approach is correct but too verbose:</p>\n\n<pre><code>   let start_bytes = string.find(\"pattern\").unwrap();\n   let mut char_byte_counter = 0;\n   let result = line.chars()\n    .skip_while(|c| {\n        char_byte_counter += c.len_utf8();\n        return start_bytes &gt; char_byte_counter;\n    })\n    .take_while(|c| *c != '&lt;')\n    .collect::&lt;String&gt;();\n</code></pre>\n\n<p>Are there simpler ways to create substrings? Is there any part of the standard library I did not find?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1465801819, "post_id": 37783040, "comment_id": 63034249, "body": "Not sure, therefore no answer, but what about <code>#![cfg(feature = &quot;foo&quot;)]</code> on top of your file? This refers to the module/crate then."}, {"owner": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1465834503, "post_id": 37783040, "comment_id": 63055205, "body": "Doesn&#39;t work because the example isn&#39;t a module. If I put it at the top, it just disables the first statement, which is <i>extern crate</i>, causing missing crate errors."}, {"owner": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1465835234, "post_id": 37783040, "comment_id": 63055634, "body": "So you can wrap all of your code in a module and <i>use mymodule::*</i> in main, but then you need to <i>pub use</i> any use statement within the module and add pub to every function used by main. So that&#39;s even more setup to achieve this."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1467742296, "post_id": 37783040, "comment_id": 63843880, "body": "@Arlo if it \u201cjust disables the first statement\u201d you have written <code>#[cfg(feature = &quot;foo&quot;)]</code> not <code>#![cfg(feature = &quot;foo&quot;)]</code>."}, {"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1469304697, "post_id": 37783040, "comment_id": 64483791, "body": "I wonder if putting the whole file iinto other file and using  <a href=\"https://doc.rust-lang.org/std/macro.include!.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/macro.include!.html</a> with <code>#![cfg(feature = &quot;foo&quot;)] </code> would do."}], "answers": [{"tags": [], "owner": {"reputation": 366, "user_id": 3412986, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z7SMm.png?s=128&g=1", "display_name": "SpaceManiac", "link": "https://stackoverflow.com/users/3412986/spacemaniac"}, "is_accepted": false, "score": 4, "last_activity_date": 1471858802, "creation_date": 1471858802, "answer_id": 39076127, "question_id": 37783040, "link": "https://stackoverflow.com/questions/37783040/how-do-i-disable-an-entire-example-based-on-features/39076127#39076127", "title": "How do I disable an entire example based on features?", "body": "<p>Make more specific use of the <code>#[cfg]</code> directive, providing both a <code>main()</code> when <code>foo</code> is enabled, and a <code>main()</code> when <code>foo</code> is not:</p>\n\n<pre><code>extern crate blah;\n// other code which will still compile even without \"foo\" feature\n\n#[cfg(feature = \"foo\")]\nfn main() {\n    use blah::OnlyExistsWithFoo;\n    // code which requires \"foo\" feature\n}\n\n#[cfg(not(feature = \"foo\"))]\nfn main() {\n    // empty main function for when \"foo\" is disabled\n}\n</code></pre>\n"}], "owner": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1016, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1471858802, "creation_date": 1465799125, "last_edit_date": 1465880718, "question_id": 37783040, "link": "https://stackoverflow.com/questions/37783040/how-do-i-disable-an-entire-example-based-on-features", "title": "How do I disable an entire example based on features?", "body": "<p>My Rust project has <strong>examples</strong> that are only relevant to certain <strong>features</strong>. </p>\n\n<p>I can ignore the main function with:</p>\n\n<pre><code>#[cfg(feature = \"foo\")]\nfn main() {\n</code></pre>\n\n<p>But other statements that depend on the feature cause errors when I run <code>cargo test</code>. So I have to use a number of cfg attribute statements on functions and use statements to disable code that depends on the feature.</p>\n\n<p>Is there a way to just ignore an entire example file based on the feature configuration?</p>\n\n<p>Also, because main is hidden without the feature, <code>cargo test</code> has this error:</p>\n\n<blockquote>\n  <p>error: main function not found</p>\n</blockquote>\n\n<p>So this isn't a good solution.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465781257, "post_id": 37780621, "comment_id": 63028895, "body": "Note that the Rust style for variables and methods is <code>snake_case</code>, not <code>camelCase</code>."}, {"owner": {"reputation": 3, "user_id": 1513132, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94c4a2288bd484219f7a44d45a34aaae?s=128&d=identicon&r=PG", "display_name": "user1513132", "link": "https://stackoverflow.com/users/1513132/user1513132"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465826472, "post_id": 37780621, "comment_id": 63049706, "body": "Yes, you&#39;re correct.  However the answer below uses it again, so I&#39;ll leave it here so it&#39;s consistent."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1465819235, "post_id": 37780658, "comment_id": 63044449, "body": "That&#39;s only the tip of the iceberg, though. With the OP&#39;s code, he won&#39;t get a second child... (concurrently)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1465781214, "last_edit_date": 1465781214, "creation_date": 1465780542, "answer_id": 37780658, "question_id": 37780621, "link": "https://stackoverflow.com/questions/37780621/how-to-fix-the-error-self-does-not-live-long-enough-when-creating-a-new-value/37780658#37780658", "title": "How to fix the error `self` does not live long enough when creating a new value that references self?", "body": "<p><code>self</code> is already a reference, because you declare the function's argument as <code>&amp;mut self</code>, so you don't need to take a reference to it &ndash; just use <code>self</code> directly.</p>\n\n<pre><code>impl Parent {\n    fn new() -&gt; Parent {\n        Parent { child_count: 0 }\n    }\n    fn makeChild(&amp;mut self) -&gt; Child {\n        self.child_count += 1;\n        Child::new(self)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3, "user_id": 1513132, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94c4a2288bd484219f7a44d45a34aaae?s=128&d=identicon&r=PG", "display_name": "user1513132", "link": "https://stackoverflow.com/users/1513132/user1513132"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 358, "favorite_count": 0, "accepted_answer_id": 37780658, "answer_count": 1, "score": 0, "last_activity_date": 1465826406, "creation_date": 1465780105, "last_edit_date": 1465826406, "question_id": 37780621, "link": "https://stackoverflow.com/questions/37780621/how-to-fix-the-error-self-does-not-live-long-enough-when-creating-a-new-value", "title": "How to fix the error `self` does not live long enough when creating a new value that references self?", "body": "<p>I am working in Rust, and I am having some trouble getting the ownership system to work for me.  I want to give <code>child</code> a reference to its <code>parent</code> when the <code>parent</code> creates the <code>child</code>.  Below is the code that I was trying to get working: </p>\n\n<pre><code>struct Child&lt;'a&gt; {\n    parent: &amp;'a Parent,\n}\nimpl&lt;'a&gt; Child&lt;'a&gt; {\n    fn new(parent: &amp;Parent) -&gt; Child {\n        Child { parent: &amp;parent }\n    }\n}\n\nstruct Parent {\n    child_count: u32,\n}\nimpl Parent {\n    fn new() -&gt; Parent {\n        Parent { child_count: 0 }\n    }\n    fn makeChild(&amp;mut self) -&gt; Child {\n        self.child_count += 1;\n        Child::new(&amp;self)\n    }\n}\n\nfn main() {\n    let mut parent = Parent::new();\n    let child = parent.makeChild();\n}\n</code></pre>\n\n<p>However, I keep getting the following error:</p>\n\n<pre><code>src/main.rs:20:17: 20:21 error: `self` does not live long enough\nsrc/main.rs:20     Child::new(&amp;self)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1465776030, "post_id": 37780178, "comment_id": 63028016, "body": "Thanks. Basically this means that I will have 2 function allocations and 2 functions calls right? Would it also be possible to extend <code>Coroutine</code> so that it also could accept a <code>Box&lt;FnOnce&gt;</code> instead of just <code>FnOnce</code>? And then I would not have to make the detour with FnBox?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1465778619, "post_id": 37780178, "comment_id": 63028412, "body": "Yes, there will be 2 function allocations, but the closure that calls the <code>FnBox</code> is allocated on the stack, so it&#39;s relatively cheap. Yes, there will be an additional function call. Also, <code>Coroutine</code> could probably be adapted, though you have a <code>Box&lt;FnBox + Send&gt;</code> and <code>Coroutine</code> currently deals with <code>Box&lt;FnBox&gt;</code>, which are incompatible."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1476387740, "last_edit_date": 1476387740, "creation_date": 1465774917, "answer_id": 37780178, "question_id": 37779313, "link": "https://stackoverflow.com/questions/37779313/the-trait-bound-is-not-satisfied/37780178#37780178", "title": "The trait bound is not satisfied", "body": "<p>Let's read the error message carefully:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:168:29: 168:45 error: the trait bound\n    `for&lt;'r&gt;\n         Box&lt;\n             for&lt;'r&gt; std::ops::FnOnce(\n                 &amp;'r mut coroutine::asymmetric::Coroutine\n             ) + Send\n         &gt;:\n     std::ops::FnOnce&lt;\n         (\n             &amp;'r mut coroutine::asymmetric::Coroutine,\n         )&gt;` is not satisfied [E0277]\n</code></pre>\n\n<p>Basically, you are trying to pass a <code>Box&lt;FnOnce&gt;</code> to a function that expects a type that implements <code>FnOnce</code>.</p>\n\n<p>However, you cannot call a function that is in a <code>Box&lt;FnOnce&gt;</code>, because in order to call it, you need to pass <code>self</code> by value, which means that you need to dereference the <code>Box</code>, but that yields an unsized type, which cannot be passed by value (as of Rust 1.9).</p>\n\n<p>The current workaround is to use the unstable <a href=\"https://doc.rust-lang.org/stable/std/boxed/trait.FnBox.html\" rel=\"nofollow\"><code>FnBox</code></a> trait instead of <code>FnOnce</code>. <code>FnBox</code> is automatically implemented for all types that implement <code>FnOnce</code>. Here's how we can use it:</p>\n\n<pre><code>#![feature(fnbox)]\n\nuse std::boxed::FnBox;\n\nenum Message {\n    Task(Box&lt;FnBox(&amp;mut Coroutine) + Send + 'static&gt;),\n}\n\nfn main() {\n    let m = Message::Task(Box::new(|me: &amp;mut Coroutine| {\n    }));\n    let c = match m {\n        Message::Task(f) =&gt; Coroutine::spawn(|me| f.call_box((me,)))\n    };\n}\n</code></pre>\n\n<p>Note that the call to <code>Command::spawn</code> receives a closure that calls the <code>FnBox</code>, because we can't pass the <code>FnBox</code> directly to <code>Command::spawn</code> for the reasons mentioned above. Also, I had to explicitly annotate the argument type on the first closure, otherwise the compiler complained (<code>expected concrete lifetime, found bound lifetime parameter</code>, which I think is a bug in the compiler).</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9507, "favorite_count": 0, "accepted_answer_id": 37780178, "answer_count": 1, "score": 7, "last_activity_date": 1476387740, "creation_date": 1465767400, "last_edit_date": 1476387719, "question_id": 37779313, "link": "https://stackoverflow.com/questions/37779313/the-trait-bound-is-not-satisfied", "title": "The trait bound is not satisfied", "body": "<p><a href=\"https://github.com/rustcc/coroutine-rs/blob/master/src/asymmetric.rs\" rel=\"nofollow\">Coroutine-rs</a></p>\n\n<p>This is the function I am trying to call:</p>\n\n<pre><code>#[inline]\npub fn spawn&lt;F&gt;(f: F) -&gt; Handle\n    where F: FnOnce(&amp;mut Coroutine) + Send + 'static\n{\n    Self::spawn_opts_impl(Box::new(f), Options::default())\n}\n</code></pre>\n\n<p>I then created an enum because I actually want to send it from one thread to another, which is also why I have boxed the function. I have also matched the trait constraints.</p>\n\n<pre><code>enum Message {\n    Task(Box&lt;FnOnce(&amp;mut Coroutine) + Send + 'static&gt;),\n}\n</code></pre>\n\n<p>But if I try to extract the function from a <code>Message</code>:</p>\n\n<pre><code>fn main(){\n    let m = Message::Task(Box::new(|me| {\n    }));\n    let c = match m{\n        Message::Task(f) =&gt; Coroutine::spawn(f)\n    };\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:168:29: 168:45 error: the trait bound `for&lt;'r&gt; Box&lt;for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut coroutine::asymmetric::Coroutine) + Send&gt;: std::ops::FnOnce&lt;(&amp;'r mut coroutine::asymmetric::Coroutine,)&gt;` is not satisfied [E0277]\nsrc/main.rs:168         Message::Task(f) =&gt; Coroutine::spawn(f)\n                                            ^~~~~~~~~~~~~~~~\nsrc/main.rs:168:29: 168:45 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:168:29: 168:45 help: the following implementations were found:\nsrc/main.rs:168:29: 168:45 help:   &lt;Box&lt;std::boxed::FnBox&lt;A, Output=R&gt; + 'a&gt; as std::ops::FnOnce&lt;A&gt;&gt;\nsrc/main.rs:168:29: 168:45 help:   &lt;Box&lt;std::boxed::FnBox&lt;A, Output=R&gt; + Send + 'a&gt; as std::ops::FnOnce&lt;A&gt;&gt;\nsrc/main.rs:168:29: 168:45 note: required by `coroutine::asymmetric::Coroutine::spawn`\n</code></pre>\n\n<p>I have no idea what Rust is trying to tell me here. I assume that the problem is that <code>spawn</code> expects a non boxed function, but I get the same error if I try to deref the boxed function.</p>\n\n<p>Note that at the time this question was asked, coroutine-rs doesn't build, and I fixed the errors in <a href=\"https://github.com/MaikKlein/coroutine-rs\" rel=\"nofollow\">this fork</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 803, "user_id": 831771, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/017e7d705c4436d35a0ea437b866d30a?s=128&d=identicon&r=PG", "display_name": "Jim", "link": "https://stackoverflow.com/users/831771/jim"}, "edited": false, "score": 0, "creation_date": 1465787001, "post_id": 37779620, "comment_id": 63029866, "body": "Well thanks I appreciate the response.  I basically have a few different objects that are needed depending on the command and didn&#39;t want to have separate lists for each command that has different dependencies.  Still a rust noob, trying to make it C++ heh."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 803, "user_id": 831771, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/017e7d705c4436d35a0ea437b866d30a?s=128&d=identicon&r=PG", "display_name": "Jim", "link": "https://stackoverflow.com/users/831771/jim"}, "edited": false, "score": 0, "creation_date": 1465801747, "post_id": 37779620, "comment_id": 63034211, "body": "So your program <code>foo</code> would be callable as <code>foo add &lt;user&gt;</code>, <code>foo delete &lt;user&gt;</code>, <code>foo add &lt;group&gt;</code> and <code>foo delete &lt;group&gt;</code> or something like that? Then you would have 4 <code>Command</code> objects. I don&#39;t see how you would be able to generically treat all commands at all. You have to have a few different cases in which you execute different code. For example: fetching information about the user and group are two different operations. In short: I don&#39;t think the design you&#39;re thinking of would help. Maybe you could post the your code on CodeReview-Stackexchange..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1465806902, "post_id": 37779620, "comment_id": 63036761, "body": "@LukasKalbertodt: CodeReview is for working code (ie, code that compiles, runs and gives the expected result)."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1465770058, "creation_date": 1465770058, "answer_id": 37779620, "question_id": 37779090, "link": "https://stackoverflow.com/questions/37779090/command-pattern-in-rust/37779620#37779620", "title": "Command pattern in Rust", "body": "<p>I think passing the mutable reference as a parameter of <code>execute()</code> instead of storing it within <code>SomeCommand</code> is the way to go. Don't keep references living longer than they need to live.</p>\n\n<p>But this is a fairly broad question: I can think of a dozen possible solutions -- it's hard to tell what's best in your case, since your example is pretty generic. Maybe we could be more specific after you told us a little more (maybe a small subset of features you want to implement).</p>\n\n<p>Just looking at the title of your post: <a href=\"https://github.com/docopt/docopt.rs\" rel=\"nofollow\"><code>docopt</code></a> is used by many Rust project -- AFAIK even <code>cargo</code> uses it. However, I suspect it doesn't help you with your main design problem.</p>\n\n<hr>\n\n<p>Besides: in your <code>new</code> methods you can delete some code thanks to implicit returns. This:</p>\n\n<pre><code>pub fn new(field: String) -&gt; SomeStruct {\n    let some_struct = SomeStruct {\n        some_field: field,\n    };\n    return some_struct;\n}\n</code></pre>\n\n<p>... becomes this:</p>\n\n<pre><code>pub fn new(field: String) -&gt; SomeStruct {\n    SomeStruct {\n        some_field: field,\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 803, "user_id": 831771, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/017e7d705c4436d35a0ea437b866d30a?s=128&d=identicon&r=PG", "display_name": "Jim", "link": "https://stackoverflow.com/users/831771/jim"}, "edited": false, "score": 0, "creation_date": 1611274266, "post_id": 65515423, "comment_id": 116405688, "body": "Wow thank you I had forgotten about this question. This is exactly what I needed, thanks!"}], "tags": [], "owner": {"reputation": 500, "user_id": 2177724, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/TGSnB.jpg?s=128&g=1", "display_name": "Shuyang", "link": "https://stackoverflow.com/users/2177724/shuyang"}, "is_accepted": true, "score": 2, "last_activity_date": 1609376105, "creation_date": 1609376105, "answer_id": 65515423, "question_id": 37779090, "link": "https://stackoverflow.com/questions/37779090/command-pattern-in-rust/65515423#65515423", "title": "Command pattern in Rust", "body": "<p>I was trying to do the same in Rust, following examples in book Design Patterns. The problem here is that we need to maintain the generic interface of the <code>Command</code> trait, which means we should not design the trait such that it takes specific objects of certain types. The only solution we are left with is to store a mutable reference to the object itself within the concrete instance of object that implements <code>Command</code> trait. However, if we use <code>&amp;'a mut ...</code>, Rust compiler will not like multiple mutable references to a single object, which means we can only ever have one <code>Command</code> instance for any given object we want to execute the command on, and we can only call execute once.</p>\n<p>This can be achieved by using <code>RefCell</code> or <code>Arc&lt;Mutex&lt;&gt;&gt;</code>. I have implemented both and they both work very well. The difference is that <code>RefCell</code> is not thread-safe, so you cannot share the same <code>Command</code> object across threads if you choose to implement it in this way; whereas <code>Arc&lt;Mutex&lt;&gt;&gt;</code> is thread-safe.</p>\n<p>Below is my implementation:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait Command {\n    fn execute(&amp;mut self);            // Execute command.\n    fn is_reversible(&amp;self) -&gt; bool;  // Undoable operation?\n    fn unexecute(&amp;mut self);          // Undo command.\n}\n\n// ------ Using RefCell ------\n\nstruct ChangeFontSizeCommand&lt;'a&gt; {\n    text: &amp;'a RefCell&lt;dyn Text&gt;,\n    old_size: Option&lt;usize&gt;,\n    new_size: usize\n}\n\nimpl&lt;'a&gt; Command for ChangeFontSizeCommand&lt;'a&gt; {\n    // Implementation... (many calls to .borrow() and .borrow_mut())\n}\n\nimpl&lt;'a&gt; ChangeFontSizeCommand&lt;'a&gt; {\n    pub fn new(text: &amp;'a RefCell&lt;dyn Text&gt;, new_size: usize) -&gt; Self {\n        // Implementation...\n    }\n}\n\n// ------ Using Arc and Mutex ------\n\nstruct ChangeFontColorCommand {\n    text: Arc&lt;Mutex&lt;dyn Text&gt;&gt;,\n    old_color: Option&lt;Color&gt;,\n    new_color: Color\n}\n\nimpl Command for ChangeFontColorCommand {\n    // Implementation... (many calls to .lock().unwrap())\n}\n\nimpl ChangeFontColorCommand {\n    pub fn new(text: Arc&lt;Mutex&lt;dyn Text&gt;&gt;, new_color: Color) -&gt; Self {\n        // Implementation...\n    }\n}\n</code></pre>\n<p>Notice that in both examples, instance of <code>RefCell</code> or <code>Arc&lt;Mutex&lt;&gt;&gt;</code> has to be created <em>outside</em> of object initializer, we cannot pass in a mutable reference and create them inside of the command implementation struct, that would violate Rust's borrow checker rules.</p>\n"}], "owner": {"reputation": 803, "user_id": 831771, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/017e7d705c4436d35a0ea437b866d30a?s=128&d=identicon&r=PG", "display_name": "Jim", "link": "https://stackoverflow.com/users/831771/jim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 652, "favorite_count": 0, "accepted_answer_id": 65515423, "answer_count": 2, "score": 0, "last_activity_date": 1609376105, "creation_date": 1465765651, "last_edit_date": 1465778322, "question_id": 37779090, "link": "https://stackoverflow.com/questions/37779090/command-pattern-in-rust", "title": "Command pattern in Rust", "body": "<p>I'm trying to implement a command line server application in Rust.\nI'd like to have a list (or hash table) of commands that I can iterate over for printing usage and looking up/executing commands.</p>\n\n<p>My problem is that each <code>Command</code> needs mutable references to the thing the command uses to execute (such as inserting a user into a database or something).  The borrow checker obviously doesn't like passing multiple mutable references around.  Is there a way to do this?  I started by having the <code>execute</code> method take in a reference to the things it needed but then I need a separate list for commands that need different things which sounds like it would get unwieldy.</p>\n\n<p>Here's an example of the problem:</p>\n\n<pre><code>struct SomeStruct {\n    pub some_field: String,\n}\n\nimpl SomeStruct {\n    pub fn new(field: String) -&gt; SomeStruct {\n        let some_struct = SomeStruct {\n            some_field: field,\n        };\n        return some_struct;\n    }\n\n    pub fn change_field(&amp;mut self) {\n        self.some_field = \"Something else\".to_string();\n    }\n}\n\nstruct SomeCommand&lt;'a&gt; {\n    pub some_struct: &amp;'a mut SomeStruct,\n}\n\nimpl&lt;'a&gt; SomeCommand&lt;'a&gt; {\n    pub fn new(the_struct: &amp;'a mut SomeStruct) -&gt; SomeCommand {\n        let some_command = SomeCommand {\n            some_struct: the_struct,\n        };\n        return some_command;\n    }\n\n    pub fn execute(&amp;mut self) {\n        self.some_struct.change_field();\n    }\n}\n\nfn main() {\n    let mut some_struct = SomeStruct::new(\"hey\".to_string());\n    let some_command1 = SomeCommand::new(&amp;mut some_struct);\n\n    // Compiler complains because I'm making another mutable binding to some_struct\n    let some_command2 = SomeCommand::new(&amp;mut some_struct);\n}\n</code></pre>\n\n<p>Is there a better way to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465764664, "post_id": 37778892, "comment_id": 63025594, "body": "I&#39;d  encourage you to link to the other questions here on stack overflow that have the same error message and explain how your question differs from them."}, {"owner": {"reputation": 2184, "user_id": 499484, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/a51e5683ba613b7528cb78f9851bbeb2?s=128&d=identicon&r=PG", "display_name": "Mediocre Gopher", "link": "https://stackoverflow.com/users/499484/mediocre-gopher"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465769010, "post_id": 37778892, "comment_id": 63026661, "body": "I&#39;d appreciate it if you unmarked this as duplicate. The answer in that other thread doesn&#39;t seem to apply here, I&#39;ve tried adding the <code>&amp;</code> operator and that merely opens up a new can of errors. Moreover the other thread doesn&#39;t deal with re-setting the value in the vector, which I&#39;m trying to do. You can see below the answers are very different."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465769118, "post_id": 37778892, "comment_id": 63026688, "body": "Absolutely. <a href=\"https://stackoverflow.com/posts/37778892/edit\">edit</a> your question to include a link to the other question and describe why it&#39;s not a duplicate. This will help future searchers understand why both questions need to exist."}], "answers": [{"comments": [{"owner": {"reputation": 2184, "user_id": 499484, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/a51e5683ba613b7528cb78f9851bbeb2?s=128&d=identicon&r=PG", "display_name": "Mediocre Gopher", "link": "https://stackoverflow.com/users/499484/mediocre-gopher"}, "edited": false, "score": 0, "creation_date": 1465769038, "post_id": 37778989, "comment_id": 63026668, "body": "I think I understand, thanks for the help!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1465764750, "creation_date": 1465764750, "answer_id": 37778989, "question_id": 37778892, "link": "https://stackoverflow.com/questions/37778892/rust-cannot-move-out-of-indexed-context/37778989#37778989", "title": "rust: cannot move out of indexed context", "body": "<p>The expression <code>t[0]</code> is equivalent to either <code>*t.<a href=\"http://doc.rust-lang.org/stable/std/ops/trait.IndexMut.html#tymethod.index_mut\" rel=\"noreferrer\">index</a>(0)</code> or <code>*t.<a href=\"http://doc.rust-lang.org/stable/std/ops/trait.IndexMut.html#tymethod.index_mut\" rel=\"noreferrer\">index_mut</a>(0)</code>, based on context. These methods return an immutable reference and a mutable reference, respectively. The indexing operator automatically dereferences these.</p>\n\n<p>Since you have a vector of <code>Box&lt;i32&gt;</code>, dereferencing is not valid, because that would try to move the value from the vector. But then, what do you put in the vector in its place?</p>\n\n<p>Instead of trying to move the value, you need to use a reference to the value instead. Also, if you want to be able to add 1 to the value, you need a reference to the value, not a reference to the <code>Box</code>. You can do this by first dereferencing the box, then by taking a mutable reference to the result:</p>\n\n<pre><code>fn main() {\n    let mut t = vec![Box::new(4)];\n    {\n        let o = &amp;mut *t[0];\n        *o = *o + 1;\n    }\n    println!(\"t[0]:{}\", &amp;t[0]);\n}\n</code></pre>\n\n<p>I had to add a block here to make the mutable borrow end before the <code>println!</code>, otherwise the compiler complained with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `t` as immutable because it is also borrowed as mutable\n</code></pre>\n\n<p>Also, notice how we don't need to put the updated value back in the vector, because we changed the value in the vector directly by using a reference to it.</p>\n"}], "owner": {"reputation": 2184, "user_id": 499484, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/a51e5683ba613b7528cb78f9851bbeb2?s=128&d=identicon&r=PG", "display_name": "Mediocre Gopher", "link": "https://stackoverflow.com/users/499484/mediocre-gopher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2538, "favorite_count": 0, "closed_date": 1465764764, "accepted_answer_id": 37778989, "answer_count": 1, "score": 0, "last_activity_date": 1465764750, "creation_date": 1465764150, "question_id": 37778892, "link": "https://stackoverflow.com/questions/37778892/rust-cannot-move-out-of-indexed-context", "closed_reason": "Duplicate", "title": "rust: cannot move out of indexed context", "body": "<p>I'm very new to rust, and am starting to get the hang of the ownership system and such, but am still having some hangups. For exmaple, I have the following code: </p>\n\n<pre><code>fn main() {\n    let mut t = vec![Box::new(4)];\n    let mut o = t[0];\n    *o = *o + 1;\n    t[0] = o;\n    println!(\"t[0]:{}\", t[0]);\n}\n</code></pre>\n\n<p>Which gives me the <code>cannot move out of indexed content</code> error for the line where I'm initializing <code>o</code>. I understand <em>why</em> this is happening, I think, but I can't figure out what I'm supposed to do instead to accomplish the same thing. This is a very simplified case, but any help would be greatly appreciated. Thanks!</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1465763097, "creation_date": 1465763097, "answer_id": 37778743, "question_id": 37778607, "link": "https://stackoverflow.com/questions/37778607/how-to-define-a-function-with-two-enum-parameters-where-the-2nd-type-is-determin/37778743#37778743", "title": "How to define a function with two enum parameters where the 2nd type is determined by the 1st?", "body": "<p>Here's how I would do it: instead of defining <code>ElmPolicy</code> as an <code>enum</code>, I'd define it as a trait with an associated type that specifies the parameter type for the policy's value. Each policy would define a unit struct that implements <code>ElmPolicy</code>.</p>\n\n<pre><code>pub trait ElmPolicy {\n    type Value;\n}\n\npub struct ElmPolicyQuit;\n\nimpl ElmPolicy for ElmPolicyQuit {\n    type Value = ElmPolicyQuitValue;\n}\n\n// TODO: ElmPolicyExit and ElmPolicyThrottle\n\n#[repr(C)]\npub enum ElmPolicyQuitValue {\n    /// never quit the application automatically\n    None = 0,\n    /// quit when the application's last window is closed\n    LastWindowClosed,\n    /// quit when the application's last window is hidden\n    LastWindowHidden\n}\n\npub fn policy_set&lt;P: ElmPolicy&gt;(policy: P, value: P::Value) {\n    // TODO\n}\n\nfn main() {\n    policy_set(ElmPolicyQuit, ElmPolicyQuitValue::LastWindowClosed);\n    //policy_set(ElmPolicyQuit, ElmPolicyQuitValue::LastWindowClosed as i32); // does not compile\n}\n</code></pre>\n\n<p>You can add methods or supertraits to <code>ElmPolicy</code> and contraints to <code>ElmPolicy::Value</code> as necessary. For example, you might want to add <code>Into&lt;i32&gt;</code> as a constraint on <code>ElmPolicy::Value</code>, so that you can use <code>value.into()</code> in <code>policy_set</code> to convert the value to an <code>i32</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "edited": false, "score": 0, "creation_date": 1465776137, "post_id": 37779084, "comment_id": 63028033, "body": "Ok, I&#39;ve been thinking about how much to modify the API to be more Rust friendly. Do you have a good example of a project following this *-sys pattern or an article on it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "edited": false, "score": 0, "creation_date": 1465779207, "post_id": 37779084, "comment_id": 63028558, "body": "@Arlo i was a bit lazy before and have now linked to a resource. Is that useful?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1465779184, "last_edit_date": 1465779184, "creation_date": 1465765627, "answer_id": 37779084, "question_id": 37778607, "link": "https://stackoverflow.com/questions/37778607/how-to-define-a-function-with-two-enum-parameters-where-the-2nd-type-is-determin/37779084#37779084", "title": "How to define a function with two enum parameters where the 2nd type is determined by the 1st?", "body": "<p>I wouldn't try to solve both problems in one swoop. Create a straight-forward Rust binding to the C library that exposes the API as is (a <a href=\"http://doc.crates.io/build-script.html#-sys-packages\" rel=\"nofollow\"><code>*-sys</code> package</a>). Then provide a more idiomatic Rust API on top:</p>\n\n<pre><code>enum ElmPolicy {\n    Quit(QuitDetail),\n    Exit(ExitDetail),\n    Throttle(ThrottleDetail),\n}\n\nenum QuitDetail {\n    None,\n    LastWindowClosed,\n    LastWindowHidden,\n}\n</code></pre>\n\n<p>Then you can create methods on <code>ElmPolicy</code> that produce a tuple of the C enums, or directly calls the appropriate C function, as desired. </p>\n\n<p>Note that there is likely to be a bit of boilerplate as your enums in the <code>*-sys</code> crate will mirror those in the idiomatic API and you will want to convert between them. Macros may help reduce that.</p>\n"}], "owner": {"reputation": 1161, "user_id": 197733, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/D7QvD.jpg?s=128&g=1", "display_name": "Arlo", "link": "https://stackoverflow.com/users/197733/arlo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 945, "favorite_count": 1, "answer_count": 2, "score": 2, "last_activity_date": 1465779184, "creation_date": 1465762177, "last_edit_date": 1465778530, "question_id": 37778607, "link": "https://stackoverflow.com/questions/37778607/how-to-define-a-function-with-two-enum-parameters-where-the-2nd-type-is-determin", "title": "How to define a function with two enum parameters where the 2nd type is determined by the 1st?", "body": "<p>I'm working on the <a href=\"https://github.com/arlowhite/rust-efl\" rel=\"nofollow\">rust-efl</a> project, which is a binding to the <a href=\"https://www.enlightenment.org/about-efl\" rel=\"nofollow\">Enlightenment EFL</a> C library.</p>\n\n<p>There is a function that takes two C-style enums to configure the library. I want to restrict the second argument to a certain enum based on the value of the first argument.</p>\n\n<p>I'll use the actual code for this example since it makes it a bit easier to understand the use case.</p>\n\n<p>Example call:</p>\n\n<pre><code>elementary::policy_set(ElmPolicy::Quit, ElmPolicyQuit::LastWindowClosed as i32);\n</code></pre>\n\n<p>Library Rust code:</p>\n\n<pre><code>#[repr(C)]\npub enum ElmPolicy {\n    /// under which circumstances the application should quit automatically. See ElmPolicyQuit\n    Quit = 0,\n    /// defines elm_exit() behaviour. See ElmPolicyExit\n    Exit,\n    /// defines how throttling should work. See ElmPolicyThrottle\n    Throttle\n}\n#[repr(C)]\npub enum ElmPolicyQuit {\n    /// never quit the application automatically\n    None = 0,\n    /// quit when the application's last window is closed\n    LastWindowClosed,\n    /// quit when the application's last window is hidden\n    LastWindowHidden\n}\n\npub fn policy_set(policy: ElmPolicy, value: i32) {\n</code></pre>\n\n<p>There is an enum similar to <code>ElmPolicyQuit</code> for each value of <code>ElmPolicy</code>. The second argument to <code>policy_set</code> should be of the corresponding enum type.</p>\n\n<p>I would like to modify <code>policy_set</code> so that the caller does not have to cast the value to an <code>i32</code> by defining a type for <code>value</code>. Ideally, I would like Rust to check that the second argument is of the correct type for the given <code>policy</code> argument.</p>\n\n<p><strong>Implementation Attempt</strong></p>\n\n<p>I'm new to Rust, so this may be way off, but this is my current attempt:</p>\n\n<pre><code>pub fn policy_set&lt;P: ElmPolicy, V: ElmPolicyValue&lt;P&gt;&gt;(policy: P, value: V) {\n    unsafe { elm_policy_set(policy as c_int, value as c_int) }\n}\n\ntrait ElmPolicyValue&lt;P&gt; {}\nimpl ElmPolicyValue&lt;ElmPolicy::Quit&gt; for ElmPolicyQuit {}\n</code></pre>\n\n<p>But I get this error:</p>\n\n<blockquote>\n  <p>src/elementary.rs:246:22: 246:31 error: <code>ElmPolicy</code> is not a trait\n  [E0404] src/elementary.rs:246 pub fn policy_set>(policy: P, value: V) {</p>\n</blockquote>\n\n<p><em>(arrow points to first argument's type)</em></p>\n\n<p>I made a dummy trait for ElmPolicy, but then I get</p>\n\n<blockquote>\n  <p>src/elementary.rs:111:21: 111:36 error: found value\n  <code>elementary::ElmPolicy::Quit</code> used as a type [E0248]\n  src/elementary.rs:111 impl ElmPolicyValue for\n  ElmPolicyQuit {}</p>\n</blockquote>\n\n<p>So it seems like I can't use enums for generic types in this way.\nWhat is the correct way to implement this?</p>\n\n<p>I suppose I don't need these to actually be enums. I just need the values to be convertible to a <code>c_int</code> that corresponds with the EFL library's C enum.</p>\n\n<p>Also, I thought about a single argument instead.</p>\n\n<pre><code>elementary::policy_set(elementary::Policy::Quit::LastWindowClosed);\n</code></pre>\n\n<p>But nested C-like enums don't seem to work despite documentation I found and I'm uncertain about using <code>#[repr(C)]</code> with nested enums.</p>\n"}, {"tags": ["string", "formatting", "rust", "string-literals"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1465757346, "creation_date": 1465757346, "answer_id": 37777888, "question_id": 37777675, "link": "https://stackoverflow.com/questions/37777675/how-to-create-a-formatted-string-out-of-a-literal-in-rust/37777888#37777888", "title": "How to create a formatted String out of a literal in Rust?", "body": "<p>Use the <a href=\"http://doc.rust-lang.org/std/macro.format!.html\" rel=\"noreferrer\"><code>format!</code> macro</a>:</p>\n\n<pre><code>fn hello_world(name: Option&lt;&amp;str&gt;) -&gt; String {\n    match name {\n        Some(n) =&gt; format!(\"Hello, World {}\", n),\n        None =&gt; format!(\"Who are you?\"),\n    }\n}\n</code></pre>\n\n<p>In Rust, formatting strings uses the macro system because the format arguments are typechecked at compile time, which is implemented through a <em>procedural macro</em>.</p>\n\n<p>There are other issues with your code:</p>\n\n<ol>\n<li>You don't specify what to do for a <code>None</code> - you can't just \"fail\" to return a value.</li>\n<li>The syntax for <code>if</code> is incorrect, you want <code>if let</code> to pattern match.</li>\n<li>Stylistically, you want to use implicit returns when it's at the end of the block.</li>\n<li>In <em>many</em> (but not all) cases, you want to accept a <code>&amp;str</code> instead of a <code>String</code>.</li>\n</ol>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9534, "favorite_count": 1, "accepted_answer_id": 37777888, "answer_count": 1, "score": 5, "last_activity_date": 1465757527, "creation_date": 1465755973, "last_edit_date": 1465757527, "question_id": 37777675, "link": "https://stackoverflow.com/questions/37777675/how-to-create-a-formatted-string-out-of-a-literal-in-rust", "title": "How to create a formatted String out of a literal in Rust?", "body": "<p>I'm about to return a string depending the given argument.</p>\n\n<pre><code>fn hello_world(name:Option&lt;String&gt;) -&gt; String {\n    if Some(name) {\n        return String::formatted(\"Hello, World {}\", name);\n    }\n}\n</code></pre>\n\n<p><strong>This is a not available associated function!</strong> - I wanted to make clear what I want to do. I browsed the doc already but couldn't find any string builder functions or something like that.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1582646598, "last_edit_date": 1582646598, "creation_date": 1465691866, "answer_id": 37769718, "question_id": 37769243, "link": "https://stackoverflow.com/questions/37769243/how-to-handle-3rd-party-static-c-library-dependencies-in-rust-cargo/37769718#37769718", "title": "How to handle 3rd-party static C library dependencies in Rust/Cargo?", "body": "<p>In general, you want to create a <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages\" rel=\"nofollow noreferrer\"><code>libfoo-sys</code> crate</a>. That crate will have a <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\">build script</a> that compiles the native library and sets up the linker options.</p>\n\n<p>The build script can use build-time dependencies like the <a href=\"https://crates.io/crates/cc\" rel=\"nofollow noreferrer\">cc crate</a> to make the process of downloading and compiling the native library easier.</p>\n\n<p>You can use environment variables or features to choose where the native library comes from. You could use one already installed by the user by their system package manager (or perhaps a hand-compiled version), you could download the source from somewhere, you could include the code in the repository, or you could use a git submodule to reference another git repository instead of actually copying code.</p>\n\n<p>In many cases, you will also use a tool like <a href=\"https://github.com/rust-lang/rust-bindgen\" rel=\"nofollow noreferrer\">rust-bindgen</a> to create the \"raw\" Rust bindings for the C library.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1483, "favorite_count": 0, "accepted_answer_id": 37769718, "answer_count": 1, "score": 4, "last_activity_date": 1582646598, "creation_date": 1465686207, "question_id": 37769243, "link": "https://stackoverflow.com/questions/37769243/how-to-handle-3rd-party-static-c-library-dependencies-in-rust-cargo", "title": "How to handle 3rd-party static C library dependencies in Rust/Cargo?", "body": "<p>There is a 3rd party C library that I'd like to link to in my Rust project. It is hosted on github and compiles only as a static library. Is there any way to have Cargo fetch this dependency for me? I'm thinking there isn't. I tried adding it as a dependency and got a \"Could not find Cargo.toml in ...\" error.</p>\n\n<p>As an alternative, I thought of modifying my build.rs file to use the git2-rs crate to download a tag of the library, possibly specified as a tag name passed through an environment variable.</p>\n\n<p>Another option would be to include the source of the C library in my project, but I was thinking if the users of my crate want to use a different (but compatible) version of the 3rd party library with my crate, they wouldn't be able to do so as easily.</p>\n\n<p>So how are others in the community handling situations like this?</p>\n"}, {"tags": ["reference", "rust", "cloning"], "answers": [{"tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 10, "last_activity_date": 1565795953, "last_edit_date": 1565795953, "creation_date": 1465668725, "answer_id": 37767061, "question_id": 37765586, "link": "https://stackoverflow.com/questions/37765586/why-does-cloning-my-custom-type-result-in-t-instead-of-t/37767061#37767061", "title": "Why does cloning my custom type result in &amp;T instead of T?", "body": "<p>You get this error when your type doesn't implement <code>Clone</code>:</p>\n\n<pre><code>struct Example;\n\nfn by_value(_: Example) {}\n\nfn by_reference(v: &amp;Example) {\n    by_value(v.clone())\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:6:14\n  |\n6 |     by_value(v.clone())\n  |              ^^^^^^^^^ expected struct `Example`, found &amp;Example\n  |\n  = note: expected type `Example`\n             found type `&amp;Example`\n</code></pre>\n\n<p>This is due to the auto-referencing rules: the compiler sees that <code>Example</code> doesn't implement <code>Clone</code>, so it instead tries to use <code>Clone</code> on <code>&amp;Example</code>, and immutable references always implement <code>Clone</code>.</p>\n\n<p>The reason your <code>Vector</code> type doesn't implement <code>Clone</code> is because <a href=\"https://github.com/rust-lang/rust/issues/26925\" rel=\"nofollow noreferrer\">the derived <code>Clone</code> implementation doesn't have the right bounds on the type parameters (Rust issue #26925)</a>.  Try explicitly writing <code>self.dot(Self::clone(self))</code> to get an error message along these lines.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39415052/155423\">Deriving a trait results in unexpected compiler error, but the manual implementation works</a></li>\n</ul>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 558, "favorite_count": 1, "accepted_answer_id": 37767061, "answer_count": 1, "score": 8, "last_activity_date": 1565796248, "creation_date": 1465659889, "last_edit_date": 1565796248, "question_id": 37765586, "link": "https://stackoverflow.com/questions/37765586/why-does-cloning-my-custom-type-result-in-t-instead-of-t", "title": "Why does cloning my custom type result in &amp;T instead of T?", "body": "<pre><code>use generic_array::*; // 0.12.3\nuse num::{Float, Zero}; // 0.2.0\n\n#[derive(Clone, Debug)]\nstruct Vector&lt;T, N: ArrayLength&lt;T&gt;&gt; {\n    data: GenericArray&lt;T, N&gt;,\n}\n\nimpl&lt;T, N: ArrayLength&lt;T&gt;&gt; Vector&lt;T, N&gt;\nwhere\n    T: Float + Zero,\n{\n    fn dot(&amp;self, other: Self) -&gt; T {\n        self.data\n            .iter()\n            .zip(other.data.iter())\n            .fold(T::zero(), |acc, x| acc + *x.0 * *x.1)\n    }\n\n    fn length_sq(&amp;self) -&gt; T {\n        self.dot(self.clone())\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:21:18\n   |\n21 |         self.dot(self.clone())\n   |                  ^^^^^^^^^^^^ expected struct `Vector`, found reference\n   |\n   = note: expected type `Vector&lt;T, N&gt;`\n              found type `&amp;Vector&lt;T, N&gt;`\n</code></pre>\n\n<p>Why does this happen? Why does <code>clone</code> return <code>&amp;T</code> instead of <code>T</code>?</p>\n\n<p>Why does this work if I implement <code>Clone</code> myself?</p>\n\n<pre><code>use generic_array::*; // 0.12.3\nuse num::{Float, Zero}; // 0.2.0\n\n#[derive(Debug)]\nstruct Vector&lt;T, N: ArrayLength&lt;T&gt;&gt; {\n    data: GenericArray&lt;T, N&gt;,\n}\n\nimpl&lt;T: Float, N: ArrayLength&lt;T&gt;&gt; Clone for Vector&lt;T, N&gt; {\n    fn clone(&amp;self) -&gt; Self {\n        Vector::&lt;T, N&gt; {\n            data: self.data.clone(),\n        }\n    }\n}\n\nimpl&lt;T, N: ArrayLength&lt;T&gt;&gt; Vector&lt;T, N&gt;\nwhere\n    T: Float + Zero,\n{\n    fn dot(&amp;self, other: Self) -&gt; T {\n        self.data\n            .iter()\n            .zip(other.data.iter())\n            .fold(T::zero(), |acc, x| acc + *x.0 * *x.1)\n    }\n\n    fn length_sq(&amp;self) -&gt; T {\n        self.dot(self.clone())\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465609686, "post_id": 37758080, "comment_id": 62987704, "body": "Your first example doesn&#39;t use <code>Rout</code> at all."}, {"owner": {"reputation": 11, "user_id": 6451969, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a208525a2f1695c5df7f9e095fec66d3?s=128&d=identicon&r=PG&f=1", "display_name": "jeeves", "link": "https://stackoverflow.com/users/6451969/jeeves"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465614090, "post_id": 37758080, "comment_id": 62988276, "body": "@Shepmaster I edited the C++ example to be more realistic I hope since I&#39;m not positive I can convey the idea in Rust. Let me know if I can be more clear somehow. Thanks for sticking with me, much appreciated."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1465610124, "creation_date": 1465610124, "answer_id": 37759232, "question_id": 37758080, "link": "https://stackoverflow.com/questions/37758080/aliasing-trait-inheritance-with-generics/37759232#37759232", "title": "Aliasing trait inheritance with generics", "body": "<p>Perhaps you can just have separate traits and implement one for all implementers of the other:</p>\n\n<pre><code>struct ConcreteType;\nstruct CommonType;\n\ntrait Handler&lt;Input, Output = Input&gt; {\n    fn handle_event(&amp;self, msg: &amp;Input) -&gt; Output;\n}\n\ntrait HandlerToMessage&lt;M&gt; {\n    fn decode(&amp;self, msg: &amp;ConcreteType) -&gt; M;\n}\n\nimpl&lt;T, M&gt; Handler&lt;ConcreteType, M&gt; for T\n    where T: HandlerToMessage&lt;M&gt;\n{\n    fn handle_event(&amp;self, msg: &amp;ConcreteType) -&gt; M {\n        self.decode(msg)\n    }\n}\n\nimpl HandlerToMessage&lt;CommonType&gt; for () {\n    fn decode(&amp;self, _msg: &amp;ConcreteType) -&gt; CommonType {\n        unimplemented!()\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>The last one is really awkward because you'd normally implement a trait for a concrete type, but you haven't really presented any that make sense to implement for.</p>\n"}], "owner": {"reputation": 11, "user_id": 6451969, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a208525a2f1695c5df7f9e095fec66d3?s=128&d=identicon&r=PG&f=1", "display_name": "jeeves", "link": "https://stackoverflow.com/users/6451969/jeeves"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 251, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1465613929, "creation_date": 1465598356, "last_edit_date": 1465613929, "question_id": 37758080, "link": "https://stackoverflow.com/questions/37758080/aliasing-trait-inheritance-with-generics", "title": "Aliasing trait inheritance with generics", "body": "<p>I am starting to play with Rust for a new library. I'm trying to wrap my head around the possible ways to implement the following. </p>\n\n<p>What follows is more of desired expression not real syntax. All of the ways I've tried to express this either don't compile, or don't compile when I go to implement one of the alias traits.</p>\n\n<pre><code>struct ConcreteType;\nstruct CommonType;\n\ntrait Handler&lt;Rin, Rout = Rin&gt;{\n    fn handle_event(&amp;self, msg: &amp;Rin);\n}\n\n// alias Handler with one of the types defined as a common case\ntrait HandlerToMessage&lt;M&gt; : Handler &lt;ConcreteType, M&gt;{\n    fn handle_event(&amp;self, msg: &amp;ConcreteType) {\n        // default implementation of parent trait\n        // example is simplified, forget about how Rout/M is actually used\n        self.decode(msg)\n    }\n\n    // method to implement\n    fn decode(&amp;self, msg: &amp;ConcreteType) -&gt; M;\n}\n\n// another alias for most common case where Rin/Rout are ConcreteType, CommonType most often\ntrait HandlerToCommonType : HandlerToMessage &lt;ConcreteType, CommonType&gt;{\n    fn decode(&amp;self, msg: &amp;ConcreteType) -&gt; CommonType \n    {\n       ...\n    };\n}\n</code></pre>\n\n<p>Alternative using associated types</p>\n\n<pre><code>trait Handler{\n    type Rin;\n    type Rout;    // not yet able to do Rout = Rin with associated types\n\n    fn handle_event(&amp;self, msg: &amp;Self::Rin) -&gt; Self::Rout;\n}\n\n\ntrait HandlerToMessage : Handler &lt;Rin=ConcreteType&gt;{\n    fn handle_event(&amp;self, msg: &amp;Self::Rin) {\n        // common functionality\n        self.decode(msg)\n    }\n\n    // method to implement\n    fn decode(&amp;self, msg: &amp;Self::Rin) -&gt; Self::Rout;\n}\n\ntrait HandlerToCommonType : HandlerToMessage &lt;Rout=CommonType&gt;{\n\n    fn decode(&amp;self, msg: &amp;ConcreteType) -&gt; CommonType\n    {\n        ...\n    } \n}\n</code></pre>\n\n<p>In C++ this is roughly what I want to accomplish</p>\n\n<pre><code>// real world example I've seen in the wild of this structure\ntemplate &lt;class Rout&gt;\nclass Context {\npublic:\n    void dispatch(Rout* msg);\n};\n\ntemplate &lt;class Rin, Rout = Rin&gt;\nclass ReadHandler {\npublic:\n    void read (Context* ctx, Rin* msg) = 0;\n\nprivate:\n    Context&lt;Rout&gt; ctx_;\n};\n\n// very common to convert from a byte buffer some message type\ntemplate &lt;class M&gt;\nclass BytesToMessageDecoder : ReadHandler&lt;IOBuffer, M&gt; {\npublic:\n    // Template method pattern\n    void read (Context* ctx, IOBuffer* msg) {\n        M msgOut;\n        bool success;\n        success = this-&gt;decode(msg, &amp;msgOut);\n        if (success) {\n            ctx-&gt;dispatch(msgOut);\n        }                \n    }\n\n    bool decode(IOBuffer* msg, M* msgOut) = 0;\n\n}\n\n// convert one byte buffer to another is common\ntypedef BytesToMessageDecoder&lt;IOBuffer&gt; BytesToBytesDecoder;\n\n\n// Concrete implementations\n// look for fixed number of bytes incoming\nclass FixedLengthFrameDecoder : BytesToBytesDecoder {\n    bool decode(IOBuffer* msg, IOBuffer* msgOut) { ... }\n}\n\n// fields are prefixed with a length. Wait for that many bytes and then dispatch\nclass LengthBasedFieldDecoder: BytesToBytesDecoder {\n    bool decode(IOBuffer* msg, IOBuffer* msgOut) { ... }\n}\n\nclass StringDecoder : BytesToMessageDecoder&lt;std::string&gt; { \n    // decode from byte buffer to a string\n    bool decode(IOBuffer* msg, std::string* msgOut) { ... }\n}\n</code></pre>\n\n<p>Basically the top level trait <code>Handler</code> is the most generic but maybe not meant to be implemented by anyone but advanced library users. The <code>HandlerToMessage</code> trait is meant to be a common conversion where we take <code>ConcreteType</code> and convert to some other type. The library may implement several of these. The <code>HandlerToCommonType</code> is the most common case that numerous library types would want to start from.  </p>\n\n<p>The details on how <code>Rout</code> is used in the <code>Handler</code> trait is not of importance. I tried to simplify the example and left off some arguments to hopefully make what I'm trying to convey more concise. All of my searching on this either has me thinking this isn't possible to convey or I am misusing it. I don't quite understand if this falls under the new specialization implementation, it doesn't feel like it from my understanding though.</p>\n\n<p>I realize Rust is not C++ and so maybe what I'm trying to do is either not supported or has a different syntax. Any help is appreciated either in correct syntax or a more idiomatic Rust way.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1465589711, "post_id": 37755975, "comment_id": 62982374, "body": "Note that this is only a problem because you are using <code>println!</code>, which takes a wide range of values. If you were to use the <code>i</code> value in some context that constrained the type (like by passing it to a function), then the type could be inferred."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 8, "last_activity_date": 1465588917, "last_edit_date": 1465588917, "creation_date": 1465588612, "answer_id": 37756231, "question_id": 37755975, "link": "https://stackoverflow.com/questions/37755975/type-annotation-in-a-pattern-match-in-rust/37756231#37756231", "title": "Type annotation in a pattern match in Rust?", "body": "<p>Looking at <a href=\"http://blackbeam.org/doc/mysql/struct.Row.html#method.take\" rel=\"noreferrer\"><code>Row::take</code></a> documentation we can see two types parameter <code>T</code> and <code>I</code>. The type <code>I</code> is inferred from the <code>\"count\"</code> argument, the type <code>T</code> is used for the return type. We have two options to specify the return type, <a href=\"https://doc.rust-lang.org/reference.html#generic-functions\" rel=\"noreferrer\">explicit</a> in the method call, or implicit in type of a variable (like you did with <code>row</code>):</p>\n\n<pre><code>fn my_test() -&gt; Result&lt;(), my::Error&gt; {\n    let pool = try!(my::Pool::new(\"\"));\n    let res = try!(pool.prep_exec(\"select 1 as count\", ()));\n    for rows in res {\n        let mut row: my::Row = try!(rows);\n        // specify type T explicitly, let type I to be inferred\n        match row.take::&lt;i32, _&gt;(\"count\") {\n            None =&gt; (),\n            Some(i) =&gt; println!(\"{:?}\", i),\n        };\n        // or\n        let s: Option&lt;i32&gt; = row.take(\"count\");\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\" rel=\"noreferrer\">type ascription RFC</a> proposes a syntax (similar to the Haskell example) for annotating a sub-expression with a type.</p>\n"}], "owner": {"reputation": 2369, "user_id": 1500583, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/71020354a2fefbdadf424bd48c912515?s=128&d=identicon&r=PG", "display_name": "David McHealy", "link": "https://stackoverflow.com/users/1500583/david-mchealy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4840, "favorite_count": 0, "accepted_answer_id": 37756231, "answer_count": 1, "score": 4, "last_activity_date": 1465589620, "creation_date": 1465587541, "last_edit_date": 1465589620, "question_id": 37755975, "link": "https://stackoverflow.com/questions/37755975/type-annotation-in-a-pattern-match-in-rust", "title": "Type annotation in a pattern match in Rust?", "body": "<p>I'm digging into Rust, specifically into gracefully handling errors, but I'm having a little trouble with type inference.</p>\n\n<pre><code>extern crate mysql;\n\nuse mysql as my;\n\nfn main() {\n    my_test();\n}\n\nfn my_test() -&gt; Result&lt;(), my::Error&gt; {\n    let pool = try!(my::Pool::new(\"\"));\n    let res = try!(pool.prep_exec(\"select 1 as count\", ()));\n    for rows in res {\n        let row: my::Row = try!(rows);\n        match row.take(\"count\") {\n            None =&gt; (),\n            Some(i) =&gt; println!(\"{:?}\", i),\n        };\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>which leads to</p>\n\n<blockquote>\n  <p>src/bin/main.rs:86:12: 86:13 error: unable to infer enough type information about <code>_</code>; type annotations or generic parameter binding required [E0282]</p>\n</blockquote>\n\n<p>Unfortunately the docs in that crate use <code>unwrap</code> a lot, which does not help me. In Haskell, I would do something like <code>println!(\"{:?}\", i :: i32)</code>, but I can't figure out how to do it in Rust. I've tried various ways to cast <code>row.take</code>, but I've haven't had any luck. I'd love to see a variety of ways in which I could have structured this code, if there is a more idiomatic way of going about it.</p>\n"}, {"tags": ["python", "rust", "cython", "travis-ci"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465590056, "post_id": 37752901, "comment_id": 62982522, "body": "Your question is unclear to me \u2014 I can&#39;t tell <i>which</i> package you are creating, and whether it has dependencies or anything like that. A <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> would be extremely helpful. Otherwise, the best advice I can give is &quot;yeah, remove the absolute path or ensure that the library is installed at the exact same absolute path&quot;."}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465590345, "post_id": 37752901, "comment_id": 62982654, "body": "@shepmaster I&#39;m creating a Python package called convertbng. Its only dependency is on the dylib, which resides in the same dir as the generated cython .so \u2013 the problem is that even though I think I&#39;m passing the correct arguments to my Extensions instance in setup.py, it&#39;s building with an absolute path. I&#39;ve set the install_name to a relative path when building with cargo, but it&#39;s a workaround."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465590706, "post_id": 37752901, "comment_id": 62982787, "body": "But you aren&#39;t showing us (or it&#39;s very hard to see) how the dylib is installed in both builds, how the dylib is linked to, etc. To check, you have seen <a href=\"http://stackoverflow.com/q/2488016/155423\">stackoverflow.com/q/2488016/155423</a>?"}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465591683, "post_id": 37752901, "comment_id": 62983192, "body": "@shepmaster The dylib is linked when <code>setup.py</code> is invoked. You can see the clang and gcc invocations which produce the Cython extension in the second and third code blocks. It&#39;s definitely the missing -R$ORIGIN invocation that&#39;s tripping it up on OSX."}], "answers": [{"tags": [], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "is_accepted": true, "score": 0, "last_activity_date": 1466693697, "last_edit_date": 1466693697, "creation_date": 1465595636, "answer_id": 37757642, "question_id": 37752901, "link": "https://stackoverflow.com/questions/37752901/dylib-built-on-ci-cant-be-loaded/37757642#37757642", "title": "Dylib built on CI can&#39;t be loaded", "body": "<p>There are two ways to fix this <em>without</em> using <code>install_name_tool</code>.<br>\nAssuming that your dylib is in the same directory as your Cython extension (In this case, <code>cutil.so</code>)</p>\n\n<ul>\n<li>Compile your Rust binary with <code>rpath</code> support, and correctly set the rpath in your <code>setup.py</code> <code>Extension</code> instance:\n\n<ul>\n<li>The cleanest way to do this is to set <code>rpath=true</code>under <code>[profile.release]</code> in your <code>cargo.toml</code>. <a href=\"http://doc.crates.io/manifest.html#the-profile-sections\" rel=\"nofollow\">See here</a>.</li>\n<li>You can also invoke <code>RUSTFLAGS=\"-C rpath\" cargo build --release</code>.</li>\n</ul></li>\n<li>The less flexible way is to compile your Rust binary and pass the path in via linker flags. This bakes in the path (albeit with dynamic refs), however:\n\n<ul>\n<li><code>cargo rustc --release -- -C link-args=-Wl,-install_name,@rpath/libname.dylib</code></li>\n</ul></li>\n</ul>\n\n<p>After you've enabled <code>rpath</code> support in your Rust dylib, edit your <code>setup.py</code>:  </p>\n\n<p><strong>Set (or add) <code>extra_link_args=[\"-Wl,-rpath\", \"-Wl,@loader_path/\"]</code> in your <code>Extension</code> instance.</strong></p>\n\n<p>You'll know it's worked if you compile your Cython extension (e.g. using <code>setup.py build_ext --inplace</code>), then run <code>otool -l</code> on the resulting <code>.so</code>:  </p>\n\n<pre><code>   @rpath/liblonlat_bng.dylib (compatibility version 0.0.0, current version 0.0.0)\n/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n</code></pre>\n\n<p>If you want your Rust dylib elsewhere relative to your Cython extension, you'll need to adjust your <code>@rpath/</code> or <code>@loader_path/</code> paths in <code>setup.py</code> accordingly.</p>\n\n<p><strong>Note</strong>: The foregoing works for relative paths on OS X only. On Linux, you can set <code>extra_link_args=[\"-Wl,-rpath\", \"-Wl,$ORIGIN\"]</code> in your <code>setup.py</code> <code>Extension</code> instance (and adjust it accordingly if your Rust dylib is elsewhere, relative to your extension.)</p>\n"}, {"tags": [], "owner": {"reputation": 425, "user_id": 494584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7352f958e313ccde0c56e4da1682189?s=128&d=identicon&r=PG", "display_name": "Toon Verstraelen", "link": "https://stackoverflow.com/users/494584/toon-verstraelen"}, "is_accepted": false, "score": 0, "last_activity_date": 1552932064, "creation_date": 1552932064, "answer_id": 55227468, "question_id": 37752901, "link": "https://stackoverflow.com/questions/37752901/dylib-built-on-ci-cant-be-loaded/55227468#55227468", "title": "Dylib built on CI can&#39;t be loaded", "body": "<p>I had the same problem and I believe it is a bug in Distutils. I've made a pull request to fix this and I've also proposed a workaround. See <a href=\"https://github.com/python/cpython/pull/12418\" rel=\"nofollow noreferrer\">https://github.com/python/cpython/pull/12418</a></p>\n\n<p>Can you try the following in your <code>setup.py</code>?</p>\n\n<pre><code>from Cython.Distutils.build_ext import new_build_ext as build_ext\n# alternative:\n# from distutils.command import build_ext\n\nclass my_build_ext(build_ext):\n    \"\"\"Workaround for rpath bug in distutils for OSX.\"\"\"\n\n    def finalize_options(self):\n        super().finalize_options()\n        # Special treatment of rpath in case of OSX, to work around python\n        # distutils bug 36353. This constructs proper rpath arguments for clang.\n        # See https://bugs.python.org/issue36353\n        if sys.platform[:6] == \"darwin\":\n            for path in self.rpath:\n                for ext in self.extensions:\n                    ext.extra_link_args.append(\"-Wl,-rpath,\" + path)\n            self.rpath[:] = []\n\nsetup(\n    cmdclass={'build_ext': my_build_ext}\n    # ...\n)\n</code></pre>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 558, "favorite_count": 0, "accepted_answer_id": 37757642, "answer_count": 2, "score": 0, "last_activity_date": 1552932064, "creation_date": 1465575513, "last_edit_date": 1465593982, "question_id": 37752901, "link": "https://stackoverflow.com/questions/37752901/dylib-built-on-ci-cant-be-loaded", "title": "Dylib built on CI can&#39;t be loaded", "body": "<p>I'm building a Rust binary (<code>liblonlat_bng.dylib</code>) on Travis CI, pulling it into a Cython extension (in the same dir as the Cython source .c/.pyx), and testing it, also on Travis CI (in a different repo and build). However, tests of the Python package are failing, and I'm not sure why:</p>\n\n<pre><code>----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/travis/build/urschrei/convertbng/venv/lib/python2.7/site-packages/nose/loader.py\", line 418, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/Users/travis/build/urschrei/convertbng/venv/lib/python2.7/site-packages/nose/importer.py\", line 47, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/Users/travis/build/urschrei/convertbng/venv/lib/python2.7/site-packages/nose/importer.py\", line 94, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/Users/travis/build/urschrei/convertbng/test/test_convertbng.py\", line 15, in &lt;module&gt;\n    from convertbng.cutil import convert_bng as cconvert_bng\nImportError: dlopen(/Users/travis/build/urschrei/convertbng/convertbng/cutil.so, 2): Library not loaded: /Users/travis/build/urschrei/lonlat_bng/target/x86_64-apple-darwin/release/liblonlat_bng.dylib\n  Referenced from: /Users/travis/build/urschrei/convertbng/convertbng/cutil.so\n  Reason: image not found\n</code></pre>\n\n<p>Here's the OSX build output for the package from Travis:</p>\n\n<pre><code>Installing collected packages: convertbng\n  Running setup.py develop for convertbng\n    Running command /Users/travis/build/urschrei/convertbng/venv/bin/python2.7 -c \"import setuptools, tokenize;__file__='/Users/travis/build/urschrei/convertbng/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps\n    running develop\n    running egg_info\n    writing requirements to convertbng.egg-info/requires.txt\n    writing convertbng.egg-info/PKG-INFO\n    writing top-level names to convertbng.egg-info/top_level.txt\n    writing dependency_links to convertbng.egg-info/dependency_links.txt\n    warning: manifest_maker: standard file '-c' not found\n    reading manifest file 'convertbng.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    writing manifest file 'convertbng.egg-info/SOURCES.txt'\n    running build_ext\n    building 'convertbng.cutil' extension\n    creating build\n    creating build/temp.macosx-10.11-x86_64-2.7\n    creating build/temp.macosx-10.11-x86_64-2.7/convertbng\n    clang -fno-strict-aliasing -fno-common -dynamic -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -Iconvertbng -I/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c convertbng/cutil.c -o build/temp.macosx-10.11-x86_64-2.7/convertbng/cutil.o -O3\n    [unused function warnings]\n    creating build/lib.macosx-10.11-x86_64-2.7\n    creating build/lib.macosx-10.11-x86_64-2.7/convertbng\n    clang -bundle -undefined dynamic_lookup build/temp.macosx-10.11-x86_64-2.7/convertbng/cutil.o -L. -Lconvertbng -llonlat_bng -o build/lib.macosx-10.11-x86_64-2.7/convertbng/cutil.so\n    copying build/lib.macosx-10.11-x86_64-2.7/convertbng/cutil.so -&gt; convertbng\n    Creating /Users/travis/build/urschrei/convertbng/venv/lib/python2.7/site-packages/convertbng.egg-link (link to .)\n    Adding convertbng 0.4.14 to easy-install.pth file\n    Installed /Users/travis/build/urschrei/convertbng\nSuccessfully installed convertbng\n</code></pre>\n\n<p>And here's the Linux Travis output, which successfully locates the dylib on a relative path. Note the <code>$ORIGIN</code> argument to <code>-R</code>, which can't be used on OSX:</p>\n\n<pre><code>Installing collected packages: convertbng\n  Running setup.py develop for convertbng\n    Running command /usr/bin/python -c \"import setuptools, tokenize;__file__='/home/travis/build/urschrei/convertbng/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" develop --no-deps\n    running develop\n    running egg_info\n    writing requirements to convertbng.egg-info/requires.txt\n    writing convertbng.egg-info/PKG-INFO\n    writing top-level names to convertbng.egg-info/top_level.txt\n    writing dependency_links to convertbng.egg-info/dependency_links.txt\n    warning: manifest_maker: standard file '-c' not found\n    reading manifest file 'convertbng.egg-info/SOURCES.txt'\n    writing manifest file 'convertbng.egg-info/SOURCES.txt'\n    running build_ext\n    building 'convertbng.cutil' extension\n    creating build\n    creating build/temp.linux-x86_64-2.7\n    creating build/temp.linux-x86_64-2.7/convertbng\n    x86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I. -Iconvertbng -I/usr/include/python2.7 -c convertbng/cutil.c -o build/temp.linux-x86_64-2.7/convertbng/cutil.o -O3\n    creating build/lib.linux-x86_64-2.7\n    creating build/lib.linux-x86_64-2.7/convertbng\n    x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -D_FORTIFY_SOURCE=2 -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security build/temp.linux-x86_64-2.7/convertbng/cutil.o -L. -Lconvertbng -Wl,-R$ORIGIN -llonlat_bng -o build/lib.linux-x86_64-2.7/convertbng/cutil.so\n    copying build/lib.linux-x86_64-2.7/convertbng/cutil.so -&gt; convertbng\n    Creating /usr/local/lib/python2.7/dist-packages/convertbng.egg-link (link to .)\n    Adding convertbng 0.4.14 to easy-install.pth file\n    Installed /home/travis/build/urschrei/convertbng\nSuccessfully installed convertbng\n</code></pre>\n\n<p>Other details:</p>\n\n<ul>\n<li>Both my OS X and Travis are using XCode 7.3</li>\n<li>The binaries are being built with the same commit both locally and on Travis</li>\n<li>If I build the binary locally, then run <code>setup.py build_ext --inplace</code> on my package, the tests pass</li>\n<li>I run the same install for Linux, using a .so built with the same commit on Travis, and the tests pass</li>\n<li>If I copy the Travis-built .dylib to my local machine, then run <code>setup.py build_ext --inplace</code>, the tests fail with the same error as on Travis.</li>\n</ul>\n\n<p>I'm very puzzled as to what's going on. Is there something I should be looking at in the binaries? The <code>otool -l</code> output differs slightly. For instance:</p>\n\n<p>Local:</p>\n\n<pre><code>cmd LC_LOAD_DYLIB\ncmdsize 56\nname /usr/lib/libSystem.B.dylib (offset 24)\ntime stamp 2 Thu Jan  1 01:00:02 1970\ncurrent version 1226.10.1\n</code></pre>\n\n<p>Travis:</p>\n\n<pre><code>cmd LC_LOAD_DYLIB\ncmdsize 56\nname /usr/lib/libSystem.B.dylib (offset 24)\ntime stamp 2 Thu Jan  1 00:00:02 1970\ncurrent version 1225.1.1\n</code></pre>\n\n<p>Link to passing Linux job: <a href=\"https://travis-ci.org/urschrei/convertbng/jobs/136730347\" rel=\"nofollow\">https://travis-ci.org/urschrei/convertbng/jobs/136730347</a><br>\nLink to failing OSX job: <a href=\"https://travis-ci.org/urschrei/convertbng/jobs/136730348\" rel=\"nofollow\">https://travis-ci.org/urschrei/convertbng/jobs/136730348</a></p>\n\n<p><strong>UPDATE</strong>:\nIt's definitely because of the library name. if I use <code>install_name_tool</code> to change the dylib location to <code>@loader_path/liblonlat_bng.dylib</code>:</p>\n\n<pre><code>install_name_tool -change /Users/travis/build/urschrei/lonlat_bng/target/x86_64-apple-darwin/release/liblonlat_bng.dylib @loader_path/liblonlat_bng.dylib convertbng/cutil.so\n</code></pre>\n\n<p>The Travis-built executable will run on my local machine. However, Travis seems to have a broken <code>install_name_tool</code> install, and I'm not managing to pass the correct invocation to <code>cutil.so</code> from <code>setup.py</code>. I've tried setting <code>extra_link_args</code> to <code>['-Wl,-rpath,'+'@loader_path/liblonlat_bng.dylib']</code>, which generates</p>\n\n<pre><code>/usr/bin/clang -bundle -undefined dynamic_lookup -arch i386 -arch x86_64 -g build/temp.macosx-10.6-intel-2.7/convertbng/cutil.o -L. -Lconvertbng -llonlat_bng -o build/lib.macosx-10.6-intel-2.7/convertbng/cutil.so -Wl,-rpath,@loader_path/liblonlat_bng.dylib\n</code></pre>\n\n<p>But my tests still fail if I do that.</p>\n\n<p><strong>UPDATE 2</strong>: I can fix the <code>install_name</code> of the dylib in the link phase when building with cargo:</p>\n\n<pre><code>RUSTFLAGS=\"-C link-args=-Wl,-install_name,@rpath/liblonlat_bng.dylib\" cargo build --release\n</code></pre>\n\n<p>And this works. But I suspect my <code>setup.py</code> <code>Extension</code> setup is wrong:</p>\n\n<pre><code># only append the runtime dir on Linux\nrdirs = []\nldirs = []\nif sys.platform != 'darwin':\n    # from http://stackoverflow.com/a/10252190/416626\n    # the $ORIGIN trick is not perfect, though\n    rdirs = ['$ORIGIN']\nif sys.platform == 'darwin':\n    ldirs = ['-Wl,-rpath,'+'@loader_path/liblonlat_bng.dylib']\n\nextensions = Extension(\"convertbng.cutil\",\n                    sources=[\"convertbng/cutil\" + suffix],\n                    libraries=[\"lonlat_bng\"],\n                    include_dirs=['.', 'convertbng'],\n                    library_dirs=['.', 'convertbng'],\n                    runtime_library_dirs=rdirs,\n                    extra_compile_args=[\"-O3\"],\n                    extra_link_args=ldirs\n) \n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 13, "last_activity_date": 1465922536, "last_edit_date": 1465922536, "creation_date": 1465579957, "answer_id": 37754096, "question_id": 37752133, "link": "https://stackoverflow.com/questions/37752133/nested-iteration-in-rust-macros/37754096#37754096", "title": "Nested iteration in Rust macros", "body": "<p>It seems that it is not possible to do this kind of expansion. Here is a workaround:</p>\n\n<pre><code>macro_rules! nested {\n    ($(arg $arg:ident;)* $(fun $fun:ident;)*) =&gt; {\n        // expand arg to a tuple that will be matched as tt\n        // in @call_tuple an will be decomposed back to\n        // a list of args in @call\n        nested!(@call_tuple $($fun),* @ ($($arg),*))\n    };\n    (@call_tuple $($fun:ident),* @ $tuple:tt) =&gt; {\n        $(nested!(@call $fun $tuple))*\n    };\n    (@call $fun:ident ($($arg:expr),*)) =&gt; {\n        $fun($($arg),*);\n    };\n}\n</code></pre>\n\n<p>The <code>@id</code> is only used to keep the rules <a href=\"https://danielkeep.github.io/tlborm/book/pat-internal-rules.html\" rel=\"noreferrer\">internal</a> to the macro.</p>\n"}], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2409, "favorite_count": 4, "accepted_answer_id": 37754096, "answer_count": 1, "score": 12, "last_activity_date": 1465922536, "creation_date": 1465573072, "last_edit_date": 1465580116, "question_id": 37752133, "link": "https://stackoverflow.com/questions/37752133/nested-iteration-in-rust-macros", "title": "Nested iteration in Rust macros", "body": "<p>I'm playing with macros in Rust and want to do nested expansion, i.e. combinatorics.</p>\n\n<p>This is the code I've written:</p>\n\n<pre><code>macro_rules! nested {\n    (\n        $(arg $arg:ident;)*\n        $(fun $fun:ident;)*\n    ) =&gt; {\n        $(\n            $fun($($arg),*);\n        )*\n    }\n}\n\nfn show1(a: i32, b: i32, c: i32) {\n    println!(\"show1: {} {} {}\", a, b, c);\n}\nfn show2(a: i32, b: i32, c: i32) {\n    println!(\"show2: {} {} {}\", a, b, c);\n}\n\nfn main() {\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    nested! {\n        arg a;\n        arg b;\n        arg c;\n        fun show1;\n        fun show2;\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=cfe3c9d319b9fd2e2cc46abfdcf18eb2&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n\n<p>I want this to expand to</p>\n\n<pre><code>fn main() {\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    // iteration over $fun\n    show1(/* iteration over $arg */a, b, c);\n    show2(/* iteration over $arg */a, b, c);\n}\n</code></pre>\n\n<p>However, it seems that Rust doesn't support this and instead complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: inconsistent lockstep iteration: 'fun' has 2 items, but 'arg' has 3\n</code></pre>\n\n<p>So apparently it ignores the inner iteration.</p>\n\n<p>However, if I remove one of the args, to make it 2 items for both, it still complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:7:18: 7:25 error: attempted to repeat an expression containing no\n                  syntax variables matched as repeating at this depth\n&lt;anon&gt;:7             $fun($($arg),*);\n</code></pre>\n\n<p>Is there a way to do what I want?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465569332, "post_id": 37750801, "comment_id": 62971359, "body": "Why do you need mutable references?"}, {"owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465569512, "post_id": 37750801, "comment_id": 62971465, "body": "I would like to modify the nodes.I only need to modify the node on the top of the stack, though, but I wasn&#39;t sure how to express this.  I could have a mutable reference to the current node and a stack with immutable references for the path, but then I wouldn&#39;t be able to create a mutable reference from the immutable ones when going up the tree."}], "answers": [{"tags": [], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "is_accepted": true, "score": 1, "last_activity_date": 1465589809, "last_edit_date": 1495542715, "creation_date": 1465580290, "answer_id": 37754198, "question_id": 37750801, "link": "https://stackoverflow.com/questions/37750801/path-of-references-on-a-tree-structure/37754198#37754198", "title": "Path of references on a tree structure", "body": "<p>I ended up following the approach from <a href=\"https://stackoverflow.com/a/36168919/155423\">this answer</a> to <a href=\"https://stackoverflow.com/q/36167160/155423\">Recursive Data Structures in Rust</a>. The idea is that you operate with owned objects instead of references, and you deconstruct and reconstruct the tree as you traverse it.</p>\n\n<p>Here's the code I ended up with:</p>\n\n<pre><code>use std::collections::VecDeque;\n\nenum Child { Placeholder, Node(Node) }\n\nstruct Node {\n    children: Vec&lt;Child&gt;,\n}\n\nimpl Node {\n    fn swap_child(&amp;mut self, idx: usize, c: Child) -&gt; Option&lt;Child&gt; {\n        match self.children.get(idx) {\n            None =&gt; None,\n            Some(_) =&gt; {\n                self.children.push(c);\n                Some(self.children.swap_remove(idx))\n            }\n        }\n    }\n}\n\nstruct Cursor {\n    node: Node,\n    parents: VecDeque&lt;(Node, usize /* index in parent */)&gt;,\n}\n\nenum DescendRes { OK(Cursor), Fail(Cursor) }\nenum AscendRes  { Done(Node), Cursor(Cursor) }\n\nimpl Cursor {\n    fn new(n: Node) -&gt; Cursor {\n        Cursor { node: n, parents: VecDeque::new() }\n    }\n\n    fn descent(mut self, idx: usize) -&gt; DescendRes {\n        match self.node.swap_child(idx, Child::Placeholder) {\n            None =&gt; DescendRes::Fail(self),\n            Some(Child::Placeholder) =&gt; panic!(\"This should not happen\"),\n            Some(Child::Node(child)) =&gt; {\n                let mut v = self.parents;\n                v.push_front((self.node, idx));\n                DescendRes::OK(\n                    Cursor { node: child, parents: v }\n                )\n            }\n        }\n    }\n\n    fn ascend(mut self) -&gt; AscendRes {\n        match self.parents.pop_front() {\n            None =&gt; AscendRes::Done(self.node),\n            Some((mut parent, parent_idx)) =&gt; {\n                match parent.swap_child(parent_idx, Child::Node(self.node)) {\n                    Some(Child::Placeholder) =&gt; {\n                        AscendRes::Cursor(\n                            Cursor { node: parent, parents: self.parents }\n                        )\n                    },\n                    _ =&gt; panic!(\"This should not happen\")\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 204, "favorite_count": 1, "accepted_answer_id": 37754198, "answer_count": 1, "score": 1, "last_activity_date": 1489244864, "creation_date": 1465569015, "last_edit_date": 1489244864, "question_id": 37750801, "link": "https://stackoverflow.com/questions/37750801/path-of-references-on-a-tree-structure", "title": "Path of references on a tree structure", "body": "<p>I'm trying to build a tree structure and maintain a path while traversing the tree.</p>\n\n<p>Here's some code:</p>\n\n<pre><code>use std::collections::VecDeque;\n\nstruct Node {\n    children: VecDeque&lt;Node&gt;,\n}\n\nstruct Cursor&lt;'a&gt; {\n    path: VecDeque&lt;&amp;'a mut Node&gt;,\n}\n\nimpl&lt;'a&gt; Cursor&lt;'a&gt; {\n    fn new(n: &amp;mut Node) -&gt; Cursor {\n        let mut v = VecDeque::new();\n        v.push_front(n);\n        Cursor { path: v }\n    }\n\n    fn go_down(&amp;'a mut self, idx: usize) -&gt; bool {\n        let n = match self.path[0].children.get_mut(idx) {\n            None =&gt; return false,\n            Some(x) =&gt; x\n        };\n        self.path.push_front(n);\n        true\n    }\n}\n</code></pre>\n\n<p>I have two questions. First, the lifetime specifier in <code>go_down()</code> <code>self</code> argument was suggested by the compiler, but I'm not sure why it fixes the reported issue.</p>\n\n<p>Even with this change, however, the above code will not compile because <code>self.path</code> is borrowed two times. Is there a way to maintain a path of tree nodes without writing \"unsafe\" code?</p>\n"}, {"tags": ["generics", "rust", "default"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 5, "last_activity_date": 1465590333, "last_edit_date": 1465590333, "creation_date": 1465563454, "answer_id": 37748890, "question_id": 37748306, "link": "https://stackoverflow.com/questions/37748306/default-generic-type-parameter-cannot-be-inferred/37748890#37748890", "title": "Default generic type parameter cannot be inferred", "body": "<p>The support for default type parameters is still limited, but can be used in some cases. When a <code>struct</code> with default type parameter is used to specify the type of a variable, the default type parameter is used to define the type of the variable:</p>\n\n<pre><code>// the type of vec is BitVector&lt;usize&gt;, so the type of\n// BitVector::with_capacity(1024) is correctly inferred\nlet vec: BitVector = BitVector::with_capacity(1024);\n</code></pre>\n\n<blockquote>\n  <p>However on the other hand <code>HashMap</code> currently on stable is using default values, so it should be working, right?</p>\n</blockquote>\n\n<p>Looking at the <a href=\"https://github.com/rust-lang/rust/blob/1.9.0/src/libstd/collections/hash/map.rs#L526-L539\" rel=\"nofollow\"><code>HashMap</code></a> source code, we can see that the methods <code>new</code> and <code>with_capacity</code> are implemented with <code>RandomState</code> for the <code>S</code> parameter and does not depend on the default type parameter in <code>HashMap</code>. All other methods are implemented as generic on <code>S</code>, including other \"constructor\" methods like <code>with_hasher</code>.</p>\n\n<p>You can write something similar:</p>\n\n<pre><code>impl BitVector&lt;usize&gt; {\n    pub fn default_with_capacity(capacity: usize) -&gt; BitVector&lt;usize&gt; {\n        // type is inferred\n        Self::with_capacity(capacity)\n    }\n}\n\nimpl&lt;S: BitStorage&gt; BitVector&lt;S&gt; {\n    pub fn with_capacity(capacity: usize) -&gt; BitVector&lt;S&gt; {\n        let len = (capacity / (std::mem::size_of::&lt;S&gt;() * 8)) + 1;\n        BitVector {\n            data: vec![S::zero(); len],\n            capacity: capacity,\n        }\n    }\n\n    // ...\n}\n\n// create with \"default\" BitStore\nlet vec = BitVector::default_with_capacity(1024);\n// specify BitStore\nlet vec = BitVector::&lt;u32&gt;::with_capacity(1024);\n</code></pre>\n"}], "owner": {"reputation": 58553, "user_id": 2057294, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/7qZho.jpg?s=128&g=1", "display_name": "skiwi", "link": "https://stackoverflow.com/users/2057294/skiwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 663, "favorite_count": 0, "accepted_answer_id": 37748890, "answer_count": 1, "score": 7, "last_activity_date": 1465590333, "creation_date": 1465561664, "last_edit_date": 1465563825, "question_id": 37748306, "link": "https://stackoverflow.com/questions/37748306/default-generic-type-parameter-cannot-be-inferred", "title": "Default generic type parameter cannot be inferred", "body": "<p>I'm trying to implement a Bit Vector library as an exercise, however I'm hitting trouble when wanting to define a default value for a generic type parameter.</p>\n\n<p>This is an excerpt of the code I have:</p>\n\n<pre><code>extern crate num;\n\nuse std::cmp::Eq;\nuse std::ops::{BitAnd,BitOrAssign,Index,Shl};\nuse num::{One,Zero,Unsigned,NumCast};\n\npub trait BitStorage: Sized + \n    BitAnd&lt;Self, Output = Self&gt; + \n    BitOrAssign&lt;Self&gt; + \n    Shl&lt;Self, Output = Self&gt; + \n    Eq + Zero + One + Unsigned + NumCast + Copy {}\n\nimpl&lt;S&gt; BitStorage for S where S: Sized + \n    BitAnd&lt;S, Output = S&gt; + \n    BitOrAssign&lt;S&gt; + \n    Shl&lt;S, Output = S&gt; + \n    Eq + Zero + One + Unsigned + NumCast + Copy {}\n\npub struct BitVector&lt;S: BitStorage = usize&gt; {\n    data: Vec&lt;S&gt;,\n    capacity: usize\n}\n\nimpl&lt;S: BitStorage&gt; BitVector&lt;S&gt; {\n    pub fn with_capacity(capacity: usize) -&gt; BitVector&lt;S&gt; {\n        let len = (capacity / (std::mem::size_of::&lt;S&gt;() * 8)) + 1;\n        BitVector { data: vec![S::zero(); len], capacity: capacity }\n    }\n\n    //...\n}\n</code></pre>\n\n<p>And I want to use it as follows:</p>\n\n<pre><code>let vec = BitVector::with_capacity(1024);\n</code></pre>\n\n<p>However I get a compiler error:</p>\n\n<blockquote>\n  <p>lib.rs:225:24: 225:48 error: unable to infer enough type information about <code>_</code>; type annotations or generic parameter binding required [E0282]<br>\n  lib.rs:225         let vec_1000 = BitVector::with_capacity(1000);<br>\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~<br>\n  lib.rs:225:24: 225:48 help: run <code>rustc --explain E0282</code> to see a detailed explanation</p>\n</blockquote>\n\n<p>To give a little more context to the code, currently valid types for <code>BitStorage</code> include (but are not limited to*) <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code> and <code>usize</code>.</p>\n\n<p>(*) I think you could write a custom <code>u128</code> implementation (just as example) if you implement all the traits for that type.</p>\n\n<p>After googling about the issue I found <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0213-defaulted-type-params.md\" rel=\"nofollow\">RFC 213</a> which does not seem to <a href=\"https://github.com/rust-lang/rust/issues/27336\" rel=\"nofollow\">be stable yet</a>. However on the other hand <a href=\"https://github.com/rust-lang/rust/blob/stable/src/libstd/collections/hash/map.rs\" rel=\"nofollow\">HashMap</a> currently on stable is using default values, so it should be working, right?</p>\n"}, {"tags": ["rust", "parser-combinators"], "answers": [{"comments": [{"owner": {"reputation": 173, "user_id": 3896861, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e1c46e91635c821f60650f6db19b1af?s=128&d=identicon&r=PG&f=1", "display_name": "Will Murphy", "link": "https://stackoverflow.com/users/3896861/will-murphy"}, "edited": false, "score": 0, "creation_date": 1503313904, "post_id": 37737143, "comment_id": 78548780, "body": "I believe this example needs to be updated. It currently fails to compile (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a>), and <code>chain!</code> <a href=\"http://rust.unhandledexpression.com/nom/macro.chain.html\" rel=\"nofollow noreferrer\">is deprecated since 2.0.0</a>. I tried to modify this so it would compile, but haven&#39;t succeeded yet. Would you mind posting an update?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1503582506, "last_edit_date": 1503582506, "creation_date": 1465510934, "answer_id": 37737143, "question_id": 37735624, "link": "https://stackoverflow.com/questions/37735624/recognize-floating-point-from-input-with-nom/37737143#37737143", "title": "Recognize floating point from input with nom", "body": "<p>Just because nom heavily uses macros to do it's dirty work, don't forget that you can still apply normal programming best practices. Specifically, break down the problem into smaller parts and compose them.</p>\n\n<p>In nom, this can be achieved with the <code>chain!</code> macro, which allows you to build up component parsers, and <code>named!</code>, to give them useful names.</p>\n\n<p>I'd recommend creating sub-parsers for the three parts of the number - the optional sign, the required integral part, and the optional decimal part. Note that <code>digit</code> already pulls in multiple sequential numeric characters.</p>\n\n<p>The main tricky thing with this code was the need to use <code>complete!</code> to force the <code>decimal</code> parser to be all-or-nothing.</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nuse nom::digit;\n\nnamed!(negative, tag!(\"-\"));\n\nnamed!(decimal, complete!(do_parse!(\n    tag!(\".\")  &gt;&gt;\n    val: digit &gt;&gt;\n    (val)\n)));\n\nnamed!(floating_point&lt;(Option&lt;&amp;[u8]&gt;, &amp;[u8], Option&lt;&amp;[u8]&gt;)&gt;, tuple!(\n    opt!(negative), digit, opt!(decimal)\n));\n\nfn main() {\n    println!(\"{:?}\", floating_point(&amp;b\"0\"[..]));\n    println!(\"{:?}\", floating_point(&amp;b\"0.\"[..]));\n    println!(\"{:?}\", floating_point(&amp;b\"0.0\"[..]));\n    println!(\"{:?}\", floating_point(&amp;b\"-0\"[..]));\n    println!(\"{:?}\", floating_point(&amp;b\"-0.\"[..]));\n    println!(\"{:?}\", floating_point(&amp;b\"-0.0\"[..]));\n}\n</code></pre>\n\n<p>I've left off any conversion of the bytes to something interesting, it would clutter up the code and I don't really know how I'd do something useful with it anyway. ^_^</p>\n"}, {"tags": [], "owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "is_accepted": false, "score": 0, "last_activity_date": 1465516247, "last_edit_date": 1465516247, "creation_date": 1465514768, "answer_id": 37737732, "question_id": 37735624, "link": "https://stackoverflow.com/questions/37735624/recognize-floating-point-from-input-with-nom/37737732#37737732", "title": "Recognize floating point from input with nom", "body": "<p>I ended up fiddling around and worked up an answer to my own question. </p>\n\n<pre><code>fn float_prs(input: &amp;[u8]) -&gt; nom::IResult&lt;&amp;[u8], f64&gt; {\n    let (i, name) = try_parse!(input,\n                               recognize!(chain!(\n                                   tag!(\"-\")? ~\n                                       take_while!(nom::is_digit) ~\n                                       tag!(\".\")? ~\n                                       take_while!(nom::is_digit)?,\n                                   || {}\n                               )));\n    let num: &amp;str = std::str::from_utf8(name).unwrap();\n    nom::IResult::Done(i, num.parse::&lt;f64&gt;().unwrap())\n}\n</code></pre>\n\n<p>Shepmaster's solution is also real good and has a distinct lack of <code>unwrap()</code> use. :) </p>\n"}, {"comments": [{"owner": {"reputation": 3355, "user_id": 4114447, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/aa93321ad023953eaaae28b490855e7a?s=128&d=identicon&r=PG&f=1", "display_name": "Dan M.", "link": "https://stackoverflow.com/users/4114447/dan-m"}, "edited": false, "score": 0, "creation_date": 1520975661, "post_id": 45537255, "comment_id": 85535293, "body": "Could you provide an example usage, please? The documentation doesn&#39;t have any examples and I can&#39;t wrap my head around the intended usage (I tried doing something like <code>named!(foo, alt!(double =&gt; {...}, ...)</code> which fails on a simple string like <code>foo(b&quot;123&quot;)</code>"}, {"owner": {"reputation": 4727, "user_id": 507706, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e9b0c1dec45c0dc40b637babb1c9367?s=128&d=identicon&r=PG", "display_name": "Michael Aquilina", "link": "https://stackoverflow.com/users/507706/michael-aquilina"}, "edited": false, "score": 0, "creation_date": 1557783193, "post_id": 45537255, "comment_id": 98873354, "body": "<code>float</code> does not seem to work with strings without a decimal point. Is there an alternative to that? Also the links you provided do not work anymore so I am using the <a href=\"https://docs.rs/nom/5.0.0-beta1/nom/number/complete/fn.float.html\" rel=\"nofollow noreferrer\">docs.rs/nom/5.0.0-beta1/nom/number/complete/fn.float.html</a>"}], "tags": [], "owner": {"reputation": 350, "user_id": 1361342, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1563e372283dc1feabea539a8099add?s=128&d=identicon&r=PG", "display_name": "Jordan", "link": "https://stackoverflow.com/users/1361342/jordan"}, "is_accepted": true, "score": 3, "last_activity_date": 1503582624, "last_edit_date": 1503582624, "creation_date": 1502058902, "answer_id": 45537255, "question_id": 37735624, "link": "https://stackoverflow.com/questions/37735624/recognize-floating-point-from-input-with-nom/45537255#45537255", "title": "Recognize floating point from input with nom", "body": "<p>Nom 2.1 now has float parser helper functions; you should no longer need to do this manually:</p>\n\n<ul>\n<li><a href=\"http://rust.unhandledexpression.com/nom/fn.float.html\" rel=\"nofollow noreferrer\"><code>float</code></a></li>\n<li><a href=\"http://rust.unhandledexpression.com/nom/fn.float_s.html\" rel=\"nofollow noreferrer\"><code>float_s</code></a></li>\n<li><a href=\"http://rust.unhandledexpression.com/nom/fn.double.html\" rel=\"nofollow noreferrer\"><code>double</code></a></li>\n<li><a href=\"http://rust.unhandledexpression.com/nom/fn.double_s.html\" rel=\"nofollow noreferrer\"><code>double_s</code></a></li>\n</ul>\n\n<p>This was <a href=\"https://github.com/Geal/nom/commit/3196f1a74a8d638f99f1396b8c99215f3f02d49b\" rel=\"nofollow noreferrer\">added on Jan 27th</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "is_accepted": false, "score": 0, "last_activity_date": 1521625122, "creation_date": 1521625122, "answer_id": 49402738, "question_id": 37735624, "link": "https://stackoverflow.com/questions/37735624/recognize-floating-point-from-input-with-nom/49402738#49402738", "title": "Recognize floating point from input with nom", "body": "<p>A late answer but this solution works with floating points and exponentials. The key is to ensure each sub-part of the number uses a <code>complete!</code> macro. This works with nom 3.2</p>\n\n<pre><code>named!(\n    exponent,\n    recognize!(complete!(preceded!(\n        alt!(tag!(\"e\") =&gt; { |_| b'e' } | tag!(\"E\") =&gt; { |_| b'e'}),\n        pair!(opt!(tag!(\"-\")), many1!(digit))\n    )))\n);\nnamed!(\n    decimal,\n    recognize!(complete!(terminated!(tag!(\".\"), many0!(digit))))\n);\nnamed!(\n    floating&lt;f32&gt;,\n    map!(\n        recognize!(do_parse!(\n            opt!(tag!(\"-\")) &gt;&gt; many1!(digit) &gt;&gt; opt!(decimal) &gt;&gt; opt!(exponent) &gt;&gt; (())\n        )),\n        |v| str::from_utf8(v).unwrap().parse::&lt;f32&gt;().unwrap()\n    )\n);\n\n#[test]\nfn parse_pdl_float_test() {\n    assert_eq!(decimal(b\".123\").to_result(), Ok(\".123\".as_ref()));\n    assert_eq!(floating(b\"-123\").to_result(), Ok(-123.0));\n    assert_eq!(floating(b\"123\").to_result(), Ok(123.0));\n    assert_eq!(floating(b\"-123e4\").to_result(), Ok(-123e4));\n    assert_eq!(floating(b\"123E4\").to_result(), Ok(123e4));\n    assert_eq!(floating(b\"-123e-4\").to_result(), Ok(-123e-4));\n    assert_eq!(floating(b\"-123.123e-4\").to_result(), Ok(-123.123e-4));\n}\n</code></pre>\n"}], "owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1216, "favorite_count": 1, "accepted_answer_id": 45537255, "answer_count": 4, "score": 2, "last_activity_date": 1521625122, "creation_date": 1465504344, "question_id": 37735624, "link": "https://stackoverflow.com/questions/37735624/recognize-floating-point-from-input-with-nom", "title": "Recognize floating point from input with nom", "body": "<p>I'm trying to use <a href=\"https://github.com/Geal/nom\" rel=\"nofollow\">nom</a> to parse a text based protocol. This protocol can have floating point values in it of the form:</p>\n\n<pre><code>[-]digit+[.digit+]\n</code></pre>\n\n<p>Examples of which are:</p>\n\n<ul>\n<li>-10.0</li>\n<li>10.0</li>\n<li>10</li>\n</ul>\n\n<p>The nom parser I've built to recognize this is... not pretty. It also doesn't quite typecheck. What I've got so far:</p>\n\n<pre><code>named!(float_prs &lt;&amp;[u8], f64&gt;,\n       alt!(\n           take_while!(nom::is_digit) =&gt; {|x| FromStr::from_str(std::str::from_utf8(x).unwrap()).unwrap()} |\n           recognize!(chain!(\n               take_while!(nom::is_digit) ~\n                   tag!(\".\") ~\n                   take_while!(nom::is_digit),\n               || {})\n           ) =&gt; {|x: &amp;[u8]| FromStr::from_str(std::str::from_utf8(x).unwrap()).unwrap() }\n       )\n);\n</code></pre>\n\n<p>The first alternative parser recognizes <code>digit+</code>, the second is an attempt to recognize <code>digit+.digit+</code> but</p>\n\n<pre><code>&lt;nom macros&gt;:5:38: 5:62 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n&lt;nom macros&gt;:5 let index = ( $ i ) . offset ( i ) ; $ crate:: IResult:: Done (\n</code></pre>\n\n<p>Recognizing <code>-digit</code> etc is not addressed in the above. There's a significant amount of duplication and the intent is very much obscured. Is there a better way to parse <code>[-]digit+[.digit+]</code> that I'm not seeing? </p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1465509017, "post_id": 37736193, "comment_id": 62944619, "body": "You said &quot;let ref3 = &amp;*ref1; creates an immutable reference to *ref1&quot; But <code>*ref1</code> is <code>s</code> right? which means it is an immutable reference to <code>s</code>. This is where I am getting confused. As you said, one mut or n immutable.  In my code example, there is one mut and 1 immutable reference to s. But it compiles."}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1465509953, "post_id": 37736193, "comment_id": 62944959, "body": "But as soon as you borrow immutable from the mutable reference, it becomes immutable for the time of the borrow. So basically there are only immutable references left. This is what happens in the example in line 8 and 9."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1465510453, "post_id": 37736193, "comment_id": 62945135, "body": "@EmperorAiman I believe the key term here will be &quot;reborrowing&quot;. See if a search on SO finds anything useful with that term?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465546327, "post_id": 37736193, "comment_id": 62956536, "body": "Rust doesn&#39;t try to track references to where they come from; while it would be easy in this case, it&#39;s impossible in others; so the only context it keeps (at compile time) for a reference is its lifetime.  As @Shepmaster says, after <code>let ref3 = &amp;*ref1</code>, you&#39;ve reborrowed <code>s</code> via <code>ref1</code>.  <code>ref1</code> is no longer accessible while the sub-borrow is in scope (just like <code>s</code> is no longer directly accessible while <code>ref1</code> is in scope)."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1465549919, "post_id": 37736193, "comment_id": 62958768, "body": "I understand now. Thanks guys. Reborrowing is the thing I was looking for. It&#39;s a shame it is not there in the beginner rust book :/"}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 1, "last_activity_date": 1465506413, "creation_date": 1465506413, "answer_id": 37736193, "question_id": 37735614, "link": "https://stackoverflow.com/questions/37735614/referencing-while-a-mut-reference-exists-in-scope/37736193#37736193", "title": "Referencing while a mut reference exists in scope", "body": "<p>First of all, Rusts borrowing works as follows:\nEither you have <strong>one mutable</strong> reference or <strong>n immutable</strong> references.</p>\n\n<ul>\n<li><p><code>let ref1 = &amp;mut s;</code> creates a mutable reference to s.</p></li>\n<li><p><code>let ref2 = &amp;s;</code> tries to create an immutable reference to s.\nThis is obviously not possible. We already have a mutable reference\nto s.</p></li>\n</ul>\n\n<p><code>let ref3 = &amp;*ref1;</code> creates an immutable reference to <code>*ref1</code></p>\n\n<p>If you would try to assgn to <code>ref1</code> afterwords it would not work:</p>\n\n<p><code>*ref1 = \"Other string\".to_string();</code></p>\n\n<p>results in:</p>\n\n<p><code>error: cannot assign to '*ref1' because it is borrowed [E0506]</code></p>\n\n<p>Keep in mind, that borrows are scoped. See following example: <a href=\"https://play.rust-lang.org/?gist=1ce659b5fc2d5c1dc74e3a0d61ee9db0&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n\n<pre><code>fn main() {\n    let mut s = \"My string\".to_string();\n    {\n        let ref1 = &amp;mut s;\n        //println!(\"{}\", s); //Does not compile. s is borrowed as mutable\n        {\n            let ref3 = &amp;(*ref1); //*ref1 is now borrowed as immutable.\n            println!(\"{}\", ref1); //We can read it\n            //*ref1 = \"Other string\".to_string();//but not assign to it\n            println!(\"{}\", ref3);\n        }\n        //ref3 is now out of scope and so is the immutable borrow\n        *ref1 = \"Other string\".to_string();//We can now assign to *ref1\n        println!(\"{}\", ref1);\n    }\n    //Now that the mutable borrow from ref1 is out of scope, we can read s again\n    println!(\"{}\", s);\n}\n</code></pre>\n"}], "owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 37736193, "answer_count": 1, "score": 0, "last_activity_date": 1465506413, "creation_date": 1465504310, "last_edit_date": 1465504720, "question_id": 37735614, "link": "https://stackoverflow.com/questions/37735614/referencing-while-a-mut-reference-exists-in-scope", "title": "Referencing while a mut reference exists in scope", "body": "<p>I have this code: </p>\n\n<pre><code>fn main() {\n    let mut s = \"My string\".to_string();\n    let ref1 = &amp;mut s;\n    // let ref2 = &amp;s; //Doesn't compile\n    let ref3 = &amp;*ref1; //*ref1 is s. So &amp;*ref1 is &amp;s =&gt; compiles\n}\n</code></pre>\n\n<p><code>let ref2 = &amp;s;</code> does not compile because there is already a mut reference in the scope. However, <code>let ref3 = &amp;*ref1</code> does compile.  </p>\n\n<p>As far as my understanding goes, <code>*ref1</code> should return the <code>s</code>. So <code>&amp;*ref1</code> should be <code>&amp;s</code> and it compiles for some reason. </p>\n\n<p>Why is this happening?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "edited": false, "score": 0, "creation_date": 1500571410, "post_id": 37730490, "comment_id": 77408998, "body": "This has now been implemented see <a href=\"https://github.com/rust-lang/rust/issues/34183\" rel=\"nofollow noreferrer\">Issue34183</a>"}], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "edited": false, "score": 0, "creation_date": 1465496954, "post_id": 37731159, "comment_id": 62938426, "body": "Dont worry about the <code>full_fun!()</code> its just there to show I can create function items and use them to populate impl for structs - I&#39;m not trying to implement the trait. My <code>fun!()</code> macro also expands to an item. So it should be ok to used inside a trait"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1465502004, "last_edit_date": 1465502004, "creation_date": 1465488475, "answer_id": 37731159, "question_id": 37730490, "link": "https://stackoverflow.com/questions/37730490/do-rust-macros-work-inside-trait-definitions/37731159#37731159", "title": "Do Rust macros work inside trait definitions?", "body": "<p>According to <a href=\"https://doc.rust-lang.org/book/macros.html\" rel=\"nofollow\">the Rust documentation on macros</a>, a macro can be expanded as:</p>\n\n<ul>\n<li>zero or more items</li>\n<li>zero or more methods,</li>\n<li>an expression,</li>\n<li>a statement, or</li>\n<li>a pattern.</li>\n</ul>\n\n<p>Your <code>full_fun</code> becomes a method, but I think a declaration inside a trait doesn't count.  (I haven't found an exact reference, though).</p>\n\n<p>Even if it were, it wouldn't help: due to the macro hygiene rules, the <code>hello</code> defined couldn't be referenced elsewhere, as it would effectively be a unique identifier different from any other - ie your <code>fun!()</code> macro would not be declaring the same function as is implemented by <code>full_fun!()</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "is_accepted": true, "score": 0, "last_activity_date": 1465499075, "creation_date": 1465499075, "answer_id": 37734223, "question_id": 37730490, "link": "https://stackoverflow.com/questions/37730490/do-rust-macros-work-inside-trait-definitions/37734223#37734223", "title": "Do Rust macros work inside trait definitions?", "body": "<p>Macro inside trait expansion is currently not supported. The relevant AST code:</p>\n\n<pre><code>pub enum TraitItemKind {\n    Const(P&lt;Ty&gt;, Option&lt;P&lt;Expr&gt;&gt;),\n    Method(MethodSig, Option&lt;P&lt;Block&gt;&gt;),\n    Type(TyParamBounds, Option&lt;P&lt;Ty&gt;&gt;),\n}\n</code></pre>\n\n<p>As the error message states only one of <code>const</code>, <code>extern</code>, <code>fn</code>, <code>type</code>, or <code>unsafe</code> are expected as next token in a Trait.</p>\n"}], "owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 487, "favorite_count": 0, "accepted_answer_id": 37734223, "answer_count": 2, "score": 0, "last_activity_date": 1465502004, "creation_date": 1465486722, "last_edit_date": 1465501963, "question_id": 37730490, "link": "https://stackoverflow.com/questions/37730490/do-rust-macros-work-inside-trait-definitions", "title": "Do Rust macros work inside trait definitions?", "body": "<p>I can build structs and enums using macros but not traits. Is this a bug or something about how traits work that I am missing? Here is a simple example that fails to build:</p>\n\n<pre><code>macro_rules! fun{\n  () =&gt; { fn hello(); }\n}\n\nmacro_rules! full_fun{\n  () =&gt; { fn hello(){} }\n}\n\n// Fails with:\n// &lt;anon&gt;:13:8: 13:11 error: expected one of `const`, `extern`, `fn`, `type`, or `unsafe`, found `fun`\n// &lt;anon&gt;:13        fun!();\nmacro_rules! trait_macro{\n  ($name:ident) =&gt; {\n     pub trait $name {\n       fun!();\n     }\n }; \n}\n\nmacro_rules! struct_macro{\n  ($name:ident) =&gt; {\n     pub struct $name;\n\n     impl $name {\n       full_fun!();\n     }\n };\n}\n\n// I can add functions to a Impl\nstruct_macro!{Monster}\n// But I cannot add functions to a trait\ntrait_macro!{Monster}\n\n\nfn main() {\n\n}\n</code></pre>\n"}, {"tags": ["rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465477108, "post_id": 37726540, "comment_id": 62924618, "body": "The explicit <code>drop</code> isn&#39;t needed, it seems."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465478638, "post_id": 37726540, "comment_id": 62925852, "body": "@Shepmaster: but it&#39;s more explicit, that&#39;s why I included it. Alternatively one could add a comment stating the intend... Which is probably better :)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1465478946, "post_id": 37726540, "comment_id": 62926115, "body": "I edited the text to include a comment instead of the <code>drop</code>"}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465479249, "post_id": 37726540, "comment_id": 62926356, "body": "Still I don&#39;t understand exactly what&#39;s the mechanism that ensures closing the reader. Is it because we take the value from <code>Option</code>, don&#39;t store it anywhere, so rust is clever enough to make a cleanup and release it immediatelly?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1465479416, "post_id": 37726540, "comment_id": 62926497, "body": "correct. You could simply overwrite the <code>open_reader</code>, but that would fail if you&#39;d open the same file again, because the file is already open."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1465478773, "last_edit_date": 1465478773, "creation_date": 1465476697, "answer_id": 37726540, "question_id": 37726317, "link": "https://stackoverflow.com/questions/37726317/mutating-two-dependent-values-in-loop/37726540#37726540", "title": "Mutating two dependent values in loop", "body": "<p>You can pass the <code>File</code> by value to the <code>BufReader</code>. This way you only have a single variable that owns a file handle. You can use <code>take</code> on the <code>Option</code> to move the inner value out of it and leave a <code>None</code> behind. This way you ensure that the file handle is freed before the next one is taken (so if you re-open the same file it doesn't panic)</p>\n\n<pre><code>let mut open_reader = None;\n\nfor &amp;(file_id, ref file_name, pos_in_file) in found {\n    println!(\"{} {}\", file_id, pos_in_file);\n\n     if last_file_id &lt; file_id {\n        last_file_id = file_id;\n        //last_file_name = file_ids.get(&amp;file_id);\n\n        // take the value out of the `open_reader` to make sure that\n        // the file is closed, so we don't panic if the next statement\n        // tries to open the same file again.\n        open_reader.take();\n        //let file = File::open(last_file_name.unwrap()).unwrap();\n        let file = File::open(file_name).unwrap();\n        open_reader = Some(BufReader::new(file));\n    }\n\n    // use reader to find the line in file and process\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1465476834, "creation_date": 1465476834, "answer_id": 37726593, "question_id": 37726317, "link": "https://stackoverflow.com/questions/37726317/mutating-two-dependent-values-in-loop/37726593#37726593", "title": "Mutating two dependent values in loop", "body": "<p>You're giving ownership of the file to the <code>BufReader</code> (which is obvious since it's passed by value), rather than lending it - it's now <code>BufReader</code>'s job to close the file.  When it's dropped, the <code>File</code> it owns will be dropped in turn; so you can just lose <code>open_file</code> completely.</p>\n\n<p>The compiler is successfully stopping you from possibly destroying the file under the <code>BufReader</code>'s feet.</p>\n"}, {"comments": [{"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465479103, "post_id": 37726615, "comment_id": 62926232, "body": "This is nice idea. It takes more memory than necessary, but it might be useful. (there is more data than in the sample I made via <code>vec![..]</code> - I wated to make the sample simple enough)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465482166, "post_id": 37726615, "comment_id": 62928630, "body": "@stej new version that looks pretty nice ;-)"}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465566110, "post_id": 37726615, "comment_id": 62969144, "body": "Great idea. I accepted ker&#39;s answer as it is more related to my question, but yours solution is nice. I would upvoted it twice if possible ;)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1465482123, "last_edit_date": 1465482123, "creation_date": 1465476890, "answer_id": 37726615, "question_id": 37726317, "link": "https://stackoverflow.com/questions/37726317/mutating-two-dependent-values-in-loop/37726615#37726615", "title": "Mutating two dependent values in loop", "body": "<blockquote>\n  <p>I'd like to cache the <code>BufReader</code> that reads by line and let the file stay open if possible.</p>\n</blockquote>\n\n<p>The <em>easiest</em> way to do that is to group the data ahead of time:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn print_lines_from_file(found: &amp;[(i32, String, i32)]) {\n    let mut index = HashMap::new();\n    for line in found {\n        let name = &amp;line.1;\n        index.entry(name).or_insert_with(Vec::new).push(line);\n    }\n\n    for (file_name, lines) in &amp;index {\n        let file = File::open(file_name).unwrap();\n\n        for &amp;&amp;(file_id, _, line_index) in lines {\n            // do something with `file`\n            println!(\"processing ID {} ({}) line {}\", file_id, file_name, line_index);\n        }\n    }\n}\n</code></pre>\n\n<p>Note that this frees you from having to have a special sentinel value for <code>file_id</code> (which could also be done with an <code>Option</code>). Additionally, even though you say that the data is sorted, this allows you to handle the cases where the <code>file_id</code>s are not. You could also handle the case of unsorted <code>line_index</code>es by sorting the vector after it's complete.</p>\n\n<p>Additionally:</p>\n\n<ol>\n<li>You have a double reference in <code>main</code> \u2014 you don't need to say <code>&amp;vec![...]</code>.</li>\n<li>You should accept a <code>&amp;[T]</code> instead of a <code>&amp;Vec&lt;T&gt;</code>.</li>\n</ol>\n\n<hr>\n\n<p>An even more beautiful solution, IMHO, is to use <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/\" rel=\"nofollow\">itertools</a>, specifically <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.group_by_lazy\" rel=\"nofollow\"><code>group_by_lazy</code></a>:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\nuse std::fs::File;\nuse std::io::BufReader;\n\nfn main() {\n    // structure: (file_id, file_name, line_index_in_file)\n    let positions = [\n        (1, String::from(\"file1\"), 1),\n        (1, String::from(\"file1\"), 2),\n        (1, String::from(\"file1\"), 20),\n        (2, String::from(\"file2\"), 15)\n    ];\n\n    print_lines_from_file(&amp;positions);\n}\n\nfn print_lines_from_file(found: &amp;[(i32, String, i32)]) {\n    for (filename, positions) in &amp;found.iter().group_by_lazy(|pos| &amp;pos.1) {\n        println!(\"Opening file {}\", filename);\n        // let file = File::open(file_name).expect(\"Failed to open the file\");\n        // let file = BufReader::new(file);\n\n        for &amp;(id, _, line) in positions {\n            println!(\"Processing ID {}, line {}\", id, line);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 37726540, "answer_count": 3, "score": 0, "last_activity_date": 1465482123, "creation_date": 1465476122, "last_edit_date": 1465477896, "question_id": 37726317, "link": "https://stackoverflow.com/questions/37726317/mutating-two-dependent-values-in-loop", "title": "Mutating two dependent values in loop", "body": "<p>I tried to read a file in a way that is performant enough for my purpose. I have a list of file ids, names and line indexes (ordered) and for each pair <code>(file_id, file_name, line_index)</code> I need to open the file, find the line by index and print.</p>\n\n<p>To be more performant (I know the input is ordered) I'd like to cache the <code>BufReader</code> that reads by line and let the file stay open if possible.</p>\n\n<pre><code>fn main() {\n    // positions in file\n    // structure: (file_id, file_name, line_index_in_file)\n    let positions = &amp;vec![\n        (1, String::from(\"file1\"), 1), \n        (1, String::from(\"file1\"), 2), \n        (1, String::from(\"file1\"), 20), \n        (2, String::from(\"file2\"), 15)];\n\n    print_lines_from_file(&amp;positions);\n}\n\nfn print_lines_from_file(found: &amp;Vec&lt;(i32, String, i32)&gt;) {\n    let mut last_file_id = -1;\n\n    //let mut last_file_name = None;\n    let mut open_file = None;\n    let mut open_reader = None;\n\n    for &amp;(file_id, ref file_name, pos_in_file) in found {\n        println!(\"{} {}\", file_id, pos_in_file);\n\n         if last_file_id &lt; file_id {\n            last_file_id = file_id;\n            //last_file_name = file_ids.get(&amp;file_id);\n\n            if let Some(to_close) = open_file {\n                drop(open_reader.unwrap());\n                drop(to_close);\n            }\n            //let file = File::open(last_file_name.unwrap()).unwrap();\n            let file = File::open(file_name).unwrap();\n            open_file = Some(file);\n            open_reader = Some(BufReader::new(&amp;file));\n        }\n\n        // use reader to find the line in file and process\n    }\n}\n</code></pre>\n\n<p>I'm facing this problem: </p>\n\n<pre><code>main.rs:40:48: 40:52 error: `file` does not live long enough\nmain.rs:40             open_reader = Some(BufReader::new(&amp;file));\n\nmain.rs:40:48: 40:52 error: use of moved value: `file` [E0382]\nmain.rs:40             open_reader = Some(BufReader::new(&amp;file));\n</code></pre>\n\n<p>It's obvious (<code>file</code>'s lifetime is really short), but I don't know how to workaround it. \nThe <code>BufReader</code> depends on <code>File</code>, but I need to close the <code>File</code> later in loop when <code>file_id</code> changes. </p>\n\n<p>Also I don't feel very comfortable calling <code>drop</code> this way in loop as it looks to me like I try to fool the compiler. Is that approach ok?</p>\n\n<p><strong>Please even if you know better solution (e.g. how to close the file through <code>BufReader</code>, I would appreciate the general insight how to solve it).</strong></p>\n"}, {"tags": ["collections", "rust", "ownership", "borrowing"], "comments": [{"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "reply_to_user": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "edited": false, "score": 0, "creation_date": 1465474433, "post_id": 37720075, "comment_id": 62922508, "body": "Ok, got it. Comming from other dev world, this sometimes helped me to see the <code>&amp;</code> sign more clearly.."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1465461582, "post_id": 37720369, "comment_id": 62913951, "body": "In short: because it&#39;s cheapest."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465474137, "post_id": 37720369, "comment_id": 62922301, "body": "Makes sense, thank you. What confused me most, was the ` &amp;whatever`. I would expect that simple u16 can be copied by value (and this might be even more performant than e.g. copying 64bit value as pointer)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465474494, "post_id": 37720369, "comment_id": 62922555, "body": "@stej a <code>u16</code> <b>can</b> be copied by value. However, since a <code>HashMap</code> is generic, it was to be built to be useful to other types that aren&#39;t copyable. You can always copy / clone the reference to get a <code>u16</code> back if you need it."}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 8, "last_activity_date": 1465474414, "last_edit_date": 1465474414, "creation_date": 1465460087, "answer_id": 37720369, "question_id": 37720075, "link": "https://stackoverflow.com/questions/37720075/why-are-the-keys-and-values-of-a-borrowed-hashmap-accessed-by-reference-not-val/37720369#37720369", "title": "Why are the keys and values of a borrowed HashMap accessed by reference, not value?", "body": "<p>Think about the semantics of passing parameters as references or as values:</p>\n\n<ul>\n<li><p>As reference: no ownership transfer. The called function merely borrows the parameter.</p></li>\n<li><p>As value: the called function takes ownership of the parameter and may not be used by the caller anymore.</p></li>\n</ul>\n\n<p>Since the function <code>HashMap::get</code> does not need ownership of the key to find an element, the less restrictive passing method was chosen: by reference.</p>\n\n<p>Also, it does not return the value of the element, only a reference. If it returned the value, the value inside the <code>HashMap</code> would no longer be owned by the <code>HashMap</code> and thus be inaccessible in the future.</p>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 3, "last_activity_date": 1465474507, "last_edit_date": 1465474507, "creation_date": 1465462512, "answer_id": 37721224, "question_id": 37720075, "link": "https://stackoverflow.com/questions/37720075/why-are-the-keys-and-values-of-a-borrowed-hashmap-accessed-by-reference-not-val/37721224#37721224", "title": "Why are the keys and values of a borrowed HashMap accessed by reference, not value?", "body": "<p>While it seems unhelpful when the key is a <code>u16</code>, think about how it would work with a more complex key such as a <code>String</code>.</p>\n\n<p>In that case taking the key by value would often mean having to allocate and initialise a new <code>String</code> for each lookup, which would be expensive.</p>\n"}, {"comments": [{"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1465474320, "post_id": 37722445, "comment_id": 62922431, "body": "Thank you for your comment. I read about ownership more times, but sometimes it doesn&#39;t click in my head ;) And then more info is useful."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1465465690, "creation_date": 1465465690, "answer_id": 37722445, "question_id": 37720075, "link": "https://stackoverflow.com/questions/37720075/why-are-the-keys-and-values-of-a-borrowed-hashmap-accessed-by-reference-not-val/37722445#37722445", "title": "Why are the keys and values of a borrowed HashMap accessed by reference, not value?", "body": "<p><strong>TL;DR</strong>: Rust is not Java.</p>\n\n<p>Rust may have high-level constructs, and data-structures, but it is at heart a low-level language, as illustrated by one of its guiding principle: <em>You don't pay for what you don't use</em>.</p>\n\n<p>As a result, the language and its libraries will as much as possible attempt to eliminate any cost that is superfluous, such as allocating memory needlessly.</p>\n\n<p><em>Case 1: Taking the key by value.</em></p>\n\n<p>If the key is a <code>String</code>, this means allocating (and deallocating) memory for each and every look-up, when you could use a local buffer that is only allocated once and for all.</p>\n\n<p><em>Case 2: Returning by value.</em></p>\n\n<p>Returning by value means that either:</p>\n\n<ul>\n<li>you remove the entry from the container to give it to the user</li>\n<li>you copy the entry in the container to give it to the user</li>\n</ul>\n\n<p>The latter is obviously inefficient (copy means allocation), the former means that if the user wants the value back in another insertion has to take place again, which means look-up etc... and is also inefficient.</p>\n\n<p>In short, returning by value is inefficient in this case.</p>\n\n<p>Rust, therefore, takes the most logical choice as far as efficiency is concerned and passes and returns by value whenever practical.</p>\n"}], "owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 365, "favorite_count": 0, "accepted_answer_id": 37720369, "answer_count": 3, "score": 3, "last_activity_date": 1465474507, "creation_date": 1465459206, "last_edit_date": 1465474334, "question_id": 37720075, "link": "https://stackoverflow.com/questions/37720075/why-are-the-keys-and-values-of-a-borrowed-hashmap-accessed-by-reference-not-val", "title": "Why are the keys and values of a borrowed HashMap accessed by reference, not value?", "body": "<p>I have a function that takes a borrowed <code>HashMap</code> and I need to access values by keys. Why are the keys and values taken by reference, and not by value?</p>\n\n<p>My simplified code:</p>\n\n<pre><code>fn print_found_so(ids: &amp;Vec&lt;i32&gt;, file_ids: &amp;HashMap&lt;u16, String&gt;) {\n    for pos in ids {\n        let whatever: u16 = *pos as u16;\n        let last_string: &amp;String = file_ids.get(&amp;whatever).unwrap();\n\n        println!(\"found: {:?}\", last_string);\n    }\n}\n</code></pre>\n\n<ul>\n<li><p>Why do I have to specify the key as a reference, i.e., <code>file_ids.get(&amp;whatever).unwrap()</code> instead of <code>file_ids.get(whatever).unwrap()</code>?</p></li>\n<li><p>As I understand it, the <code>last_string</code> has to be of type <code>&amp;String</code>, meaning a <em>borrowed string</em>, because the owning collection is borrowed. Is that right?</p></li>\n<li><p>Similar to the above point, am I correct in assuming <code>pos</code> is of type <code>&amp;u16</code> because it takes borrowed values from <code>ids</code>?</p></li>\n</ul>\n"}]