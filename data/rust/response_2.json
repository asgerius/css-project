[{"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1421885605, "post_id": 28079061, "comment_id": 44537218, "body": "You should read the excellent Rust Book, which <a href=\"http://doc.rust-lang.org/book/guessing-game.html\" rel=\"nofollow noreferrer\">specifically covers reading a number from standard input</a>."}], "answers": [{"comments": [{"owner": {"reputation": 9078, "user_id": 1366455, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/fa38c3a267295fb2978ded32786073d2?s=128&d=identicon&r=PG", "display_name": "tolgap", "link": "https://stackoverflow.com/users/1366455/tolgap"}, "edited": false, "score": 1, "creation_date": 1421922845, "post_id": 28079299, "comment_id": 44550350, "body": "Sidenote: you can call parse on an <code>&amp;str</code> to get any type <code>T</code> as long as <code>T</code> implements the trait <code>FromStr</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1478046252, "last_edit_date": 1478046252, "creation_date": 1421885708, "answer_id": 28079299, "question_id": 28079061, "link": "https://stackoverflow.com/questions/28079061/how-do-i-convert-a-string-to-an-integer-in-rust/28079299#28079299", "title": "How do I convert a String to an integer in Rust?", "body": "<p>Use <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"noreferrer\"><code>parse</code></a>:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"Type something\");\n\n    let mut line = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut line)\n        .expect(\"Failed to read line\");\n\n    let input: u32 = line\n        .trim()\n        .parse()\n        .expect(\"Wanted a number\");\n\n    println!(\"{}\", input);\n}\n</code></pre>\n\n<p>Note that parsing a number from a string can fail, so a <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noreferrer\"><code>Result</code></a> is returned. For this example, we panic on a failure case using <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\" rel=\"noreferrer\"><code>expect</code></a>.</p>\n\n<p>Additionally, <code>read_line</code> leaves the newline from pressing <kbd>Enter</kbd>, so <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.trim\" rel=\"noreferrer\"><code>trim</code></a> is used to ignore that before parsing.</p>\n"}], "owner": {"reputation": 233, "user_id": 1306570, "user_type": "registered", "accept_rate": 35, "profile_image": "https://i.stack.imgur.com/IfMtg.png?s=128&g=1", "display_name": "Gapry", "link": "https://stackoverflow.com/users/1306570/gapry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7974, "favorite_count": 3, "closed_date": 1484679130, "accepted_answer_id": 28079299, "answer_count": 1, "score": 4, "last_activity_date": 1478046252, "creation_date": 1421884330, "last_edit_date": 1478046075, "question_id": 28079061, "link": "https://stackoverflow.com/questions/28079061/how-do-i-convert-a-string-to-an-integer-in-rust", "closed_reason": "Duplicate", "title": "How do I convert a String to an integer in Rust?", "body": "<p>Reading input from stdin produces a <code>String</code>, but how do I convert it to an integer? </p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"Type something\");\n\n    let mut input = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut input)\n        .expect(\"Failed to read line\");\n\n    println!(\"{}\", input);\n}\n</code></pre>\n"}, {"tags": ["colors", "rust", "simd"], "comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421884940, "post_id": 28079010, "comment_id": 44537018, "body": "Done. Now it is complete and runnable."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1421885147, "post_id": 28079010, "comment_id": 44537086, "body": "What do you mean by &quot;lose your blue channel&quot;? And why are you expecting changing the input to give the same output for <code>rgb_to_ycbcr</code>?"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1421885342, "post_id": 28079010, "comment_id": 44537143, "body": "When I convert from RGB <code>(  0,  71, 171)</code> to YCbCr <code>( 61, 189,  84)</code> and again to RGB <code>(  0,  71, 169)</code> the blue channel value is different, and no matter what values I set they are always different (I haven&#39;t found &quot;stop&quot; value at which it doesn&#39;t happen)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1421885361, "post_id": 28079010, "comment_id": 44537147, "body": "I think this is either an algorithmic or a floating point problem. If I just use normal floats and no SIMD, I <a href=\"http://is.gd/B8fuj3\" rel=\"nofollow noreferrer\">get the same answers</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421885527, "post_id": 28079010, "comment_id": 44537189, "body": "Also, why do you believe that that RGB -&gt;YCbCr -&gt; RGB will have no losses or changes? Different color spaces can represent different colors, and we have a fixed amount of precision."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1421885676, "post_id": 28079010, "comment_id": 44537240, "body": "I do not believe that values will always be the same. I believe that at some point they should stop changing."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421886375, "post_id": 28079010, "comment_id": 44537439, "body": "Have you seen <a href=\"http://stackoverflow.com/questions/17892346/how-to-convert-rgb-yuv-rgb-both-ways\">this SO question about invertible YUV / RGB transforms</a> ?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1421886990, "post_id": 28079010, "comment_id": 44537626, "body": "I suspect this may be because <code>as u8</code> (like the equivalent cast in C) truncates, it doesn&#39;t round to the nearest. You may be interested in calling <a href=\"http://doc.rust-lang.org/nightly/std/num/trait.Float.html#tymethod.round\" rel=\"nofollow noreferrer\"><code>.round</code></a> first."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1421887338, "creation_date": 1421887338, "answer_id": 28079539, "question_id": 28079010, "link": "https://stackoverflow.com/questions/28079010/rgb-to-ycbcr-using-simd-vectors-lose-some-data/28079539#28079539", "title": "RGB to YCbCr using SIMD vectors lose some data", "body": "<p>@dbaupp put the nail in the coffin with the suggestion to use <code>round</code>:</p>\n\n<pre><code>#![allow(unstable)]\n\nuse std::simd::{f32x4};\nuse std::num::Float;\n\nfn clamp(val: f32) -&gt; u8 {\n    if val &lt; 0.0 { 0 }\n    else if val &gt; 255.0 { 255 }\n    else { val.round() as u8 }\n}\n\nfn sum_f32x4(v: f32x4) -&gt; f32 {\n    v.0 + v.1 + v.2 + v.3\n}\n\npub fn rgb_to_ycbcr((r, g, b): (u8, u8, u8)) -&gt; (u8, u8, u8) {\n    let rgb = f32x4(r as f32, g as f32, b as f32, 1.0);\n    let y  = sum_f32x4(rgb * f32x4( 0.299000,  0.587000,  0.114000,   0.0));\n    let cb = sum_f32x4(rgb * f32x4(-0.168736, -0.331264,  0.500000, 128.0));\n    let cr = sum_f32x4(rgb * f32x4( 0.500000, -0.418688, -0.081312, 128.0));\n\n    (clamp(y), clamp(cb), clamp(cr))\n}\n\npub fn ycbcr_to_rgb((y, cb, cr): (u8, u8, u8)) -&gt; (u8, u8, u8) {\n    let ycbcr = f32x4(y as f32, cb as f32 - 128.0f32, cr as f32 - 128.0f32, 0.0);\n    let r = sum_f32x4(ycbcr * f32x4(1.0,  0.00000,  1.40200, 0.0));\n    let g = sum_f32x4(ycbcr * f32x4(1.0, -0.34414, -0.71414, 0.0));\n    let b = sum_f32x4(ycbcr * f32x4(1.0,  1.77200,  0.00000, 0.0));\n\n    (clamp(r), clamp(g), clamp(b))\n}\n\nfn main() {\n    let mut rgb = (0, 71, 16);\n    println!(\"{:?}\", rgb);\n\n    for _ in 0..100 {\n        let yuv = rgb_to_ycbcr(rgb);\n        rgb = ycbcr_to_rgb(yuv);\n\n        println!(\"{:?}\", rgb);\n        }\n}\n</code></pre>\n\n<p>Note that I also increased the precision of your values in <code>rgb_to_ycbcr</code> from the <a href=\"http://en.wikipedia.org/wiki/YCbCr#JPEG_conversion\" rel=\"nofollow\">Wikipedia page</a>. I also <code>clamp</code> in both functions, as well as calling <code>round</code>. Now the output is:</p>\n\n<pre><code>(0u8, 71u8, 16u8)\n(1u8, 72u8, 16u8)\n(1u8, 72u8, 16u8)\n</code></pre>\n\n<p>With the last value repeating for the entire loop.</p>\n"}], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 385, "favorite_count": 1, "accepted_answer_id": 28079539, "answer_count": 1, "score": 1, "last_activity_date": 1421887338, "creation_date": 1421884023, "last_edit_date": 1421884847, "question_id": 28079010, "link": "https://stackoverflow.com/questions/28079010/rgb-to-ycbcr-using-simd-vectors-lose-some-data", "title": "RGB to YCbCr using SIMD vectors lose some data", "body": "<p>I'm writing JPEG decoder/encoder in Rust and I have some problem with RGB \u2194 YCbCr conversion.</p>\n\n<p>My code:</p>\n\n<pre><code>use std::simd::f32x4;\n\nfn clamp&lt;T&gt;(val: T, min: T, max: T) -&gt; T\nwhere T: PartialOrd {\n    if val &lt; min { min }\n    else if max &lt; val { max }\n    else { val }\n}\n\n// in oryginal code there are 2 methods, one for processors with SSE3 and for rest\n// both do the same and give the same results\npub fn sum_f32x4(f32x4(a, b, c, d): f32x4) -&gt; f32 {\n    a + b + c + d\n}\n\npub fn rgb_to_ycbcr(r: u8, g: u8, b: u8) -&gt; (u8, u8, u8) {\n    let rgb = f32x4(r as f32, g as f32, b as f32, 1.0);\n    let y  = sum_f32x4(rgb * f32x4( 0.2990,  0.5870,  0.1140,   0.0));\n    let cb = sum_f32x4(rgb * f32x4(-0.1687, -0.3313,  0.5000, 128.0));\n    let cr = sum_f32x4(rgb * f32x4( 0.5000, -0.4187, -0.0813, 128.0));\n\n    (y as u8, cb as u8, cr as u8)\n}\n\npub fn ycbcr_to_rgb(y: u8, cb: u8, cr: u8) -&gt; (u8, u8, u8) {\n    let ycbcr = f32x4(y as f32, cb as f32 - 128.0f32, cr as f32 - 128.0f32, 0.0);\n    let r = sum_f32x4(ycbcr * f32x4(1.0,  0.00000,  1.40200, 0.0));\n    let g = sum_f32x4(ycbcr * f32x4(1.0, -0.34414, -0.71414, 0.0));\n    let b = sum_f32x4(ycbcr * f32x4(1.0,  1.77200,  0.00000, 0.0));\n\n    (clamp(r, 0., 255.) as u8, clamp(g, 0., 255.) as u8, clamp(b, 0., 255.) as u8)\n}\n\nfn main() {\n    assert_eq!(rgb_to_ycbcr(  0,  71, 171), ( 61, 189,  84));\n    // assert_eq!(rgb_to_ycbcr(  0,  71, 169), ( 61, 189,  84)); // will fail\n    // for some reason we always lose data on blue channel\n    assert_eq!(ycbcr_to_rgb( 61, 189,  84), (  0,  71, 169));\n}\n</code></pre>\n\n<p>For some reason booth tests (in comments) passes. I would rather expect that at least one of them will fail. Am I wrong? At least it should stop at some point, but when I change <code>jpeg::color::utils::rgb_to_ycbcr(0, 71, 171)</code> to <code>jpeg::color::utils::rgb_to_ycbcr(0, 71, 169)</code> then test fails as YCbCr value has changed, so I will lose my blue channel forever.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1421883076, "last_edit_date": 1421883076, "creation_date": 1421878202, "answer_id": 28077777, "question_id": 28077309, "link": "https://stackoverflow.com/questions/28077309/cannot-borrow-pointer-even-if-previous-borrow-is-forgotten/28077777#28077777", "title": "Cannot borrow pointer even if previous borrow is &quot;forgotten&quot;?", "body": "<p>Currently, borrow scopes are lexical, that is, they correspond to the braces in the code. There's <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"nofollow\">a bug to change this</a> to account for cases like your <code>fn1</code>, but like you see in <code>fn2</code>, there are workarounds for now.</p>\n\n<p>For <code>fn3</code>, if you try to use <code>y</code> again, you will get this error:</p>\n\n<pre><code>error: use of moved value: `*y`\n</code></pre>\n\n<p>This is because the compiler can tell (via the statement <code>z = y</code>) that <code>y</code> is no longer needed and thus moves the mutable borrow to <code>z</code>, making <code>y</code> invalid.</p>\n"}], "owner": {"reputation": 287, "user_id": 4480093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8d91b56823dec49f7e945f0ed0ca094b?s=128&d=identicon&r=PG&f=1", "display_name": "Roman Polach", "link": "https://stackoverflow.com/users/4480093/roman-polach"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 28077777, "answer_count": 1, "score": 2, "last_activity_date": 1421883076, "creation_date": 1421876192, "last_edit_date": 1421877975, "question_id": 28077309, "link": "https://stackoverflow.com/questions/28077309/cannot-borrow-pointer-even-if-previous-borrow-is-forgotten", "title": "Cannot borrow pointer even if previous borrow is &quot;forgotten&quot;?", "body": "<p>I do not understand why the function <strong>fn1</strong> doesn't compile, i.e.\nwhy \"let z = &amp;mut x;\" cannot be assigned while previously\ntaken reference stored in \"y\" is not used anymore (\"y\" is reassigned\nto something else).</p>\n\n<p>Moreover, why both <strong>fn2</strong> and <strong>fn3</strong> do compile ok while they are doing \"logically\" the same thing?</p>\n\n<p><strong>fn2</strong> differs from <strong>fn1</strong> in fact, that \"y\" goes out of scope instead of reassigning, but that is\ndifferent only in respect to \"y\" pointer storage, not in respect to what is \"y\" pointing to.</p>\n\n<p><strong>fn3</strong> differs from <strong>fn1</strong> in fact, that \"z\" is assigned from \"y\" instead of directly from \"&amp;mut x\".</p>\n\n<pre><code>fn fn1() {\n    let mut x = 1i32;\n    let mut somethingelse = 7i32;\n    let mut y = &amp;mut x;\n    *y = *y + 1;\n    println!(\"y = {}\", *y);\n    y = &amp;mut somethingelse;\n    println!(\"just something: {}\", *y);\n    // y is not used anymore...\n    let z = &amp;mut x;\n    *z = *z + 1;\n    println!(\"z = {}\", *z);\n}\n\nfn fn2() {\n    let mut x = 1i32;\n    {\n        let y = &amp;mut x;\n        *y = *y + 1;\n        println!(\"y = {}\", *y);\n    }\n    let z = &amp;mut x;\n    *z = *z + 1;\n    println!(\"z = {}\", *z);\n}\n\nfn fn3() {\n    let mut x = 1i32;\n    let z;\n    let y = &amp;mut x;\n    *y = *y + 1;\n    println!(\"y = {}\", *y);\n    z = y;\n    *z = *z + 1;\n    println!(\"z = {}\", *z);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "edited": false, "score": 0, "creation_date": 1421872029, "post_id": 28076177, "comment_id": 44531445, "body": "The code is just an abstraction, String is actually a File handler in my original code. I really want to use &amp;String."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "reply_to_user": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "edited": false, "score": 2, "creation_date": 1421874183, "post_id": 28076177, "comment_id": 44532451, "body": "Why do you want to use a reference? Is your <code>File</code> shared between multiple structs?"}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 2, "last_activity_date": 1421871863, "creation_date": 1421871863, "answer_id": 28076177, "question_id": 28075834, "link": "https://stackoverflow.com/questions/28075834/create-and-assign-reference-data-from-within-a-struct-method/28076177#28076177", "title": "Create and assign reference data from within a struct method", "body": "<p>The issue here is that a <code>&amp;'a String</code> is a borrowed value - that is, it is a reference to a value that is stored elsewhere. On your first example, that \"elsewhere\" is the <code>new</code> function stack, and on the second it's <code>main</code>'s stack.</p>\n\n<p>You don't get an error on the second case because <code>main</code>'s lifetime is bigger than your <code>List</code>'s lifetime - that is, the <code>List</code> will die before <code>main</code> finishes. That is not the case of your first scenario, where the <code>List</code> is returned by <code>new</code>, and thus the reference is invalid.</p>\n\n<p>The solution here is to make <code>List</code> own its <code>String</code>, instead of just taking a reference to it. This way, <code>List</code>'s lifetime isn't linked to anything else.</p>\n\n<pre><code>struct List {\n    attr: String,\n}\n\nimpl List {\n    fn new() -&gt; List {\n        let my_attr = \"Something\";\n\n        List {\n            attr: my_attr.to_string()\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 28076177, "answer_count": 1, "score": 0, "last_activity_date": 1421871863, "creation_date": 1421870471, "question_id": 28075834, "link": "https://stackoverflow.com/questions/28075834/create-and-assign-reference-data-from-within-a-struct-method", "title": "Create and assign reference data from within a struct method", "body": "<p>I have abstracted my problem inside the following code:</p>\n\n<pre><code>struct List&lt;'a&gt; {\n    attr: &amp;'a String\n}\n\nimpl&lt;'a&gt; List&lt;'a&gt; {\n    fn new() -&gt; List&lt;'a&gt; {\n        let my_attr = \"Something\";\n        List {\n            attr: &amp;my_attr.to_string()\n        }\n    }\n}\n\nfn main() {\n    List::new();\n}\n</code></pre>\n\n<p>It yields some notices and fails compiling claiming that the borrowed value (my_attr) doesn't live long enough. </p>\n\n<p>It makes sense, so for instance the following does indeed compile:</p>\n\n<pre><code>struct List&lt;'a&gt; {\n    attr: &amp;'a String\n}\n\nimpl&lt;'a&gt; List&lt;'a&gt; {\n    fn new(my_attr: &amp;'a String) -&gt; List&lt;'a&gt; {\n        List {\n            attr: my_attr\n        }\n    }\n}\n\nfn main() {\n    let my_attr = \"Something\".to_string();\n    List::new(&amp;my_attr);\n}\n</code></pre>\n\n<p>However, I like the first form more, especially from an encapsulation stand point. </p>\n\n<p>Is it possible to create and also assign a reference to a value from within the new method (as per the failing example)?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 6117, "user_id": 2307066, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8da46eb87f02bc6c4b5f3d4f770bfa56?s=128&d=identicon&r=PG", "display_name": "Bartosz Marcinkowski", "link": "https://stackoverflow.com/users/2307066/bartosz-marcinkowski"}, "edited": false, "score": 0, "creation_date": 1421851720, "post_id": 28069678, "comment_id": 44519399, "body": "It is <code>$HOME&#47;.cargo</code> on linux and I don&#39;t see why it would be different on windows."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1421852407, "post_id": 28069678, "comment_id": 44519862, "body": "it isn&#39;t, see <code>%USERPROFILE%\\.cargo</code>. but I don&#39;t know where it&#39;s documented."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 3, "last_activity_date": 1421860497, "creation_date": 1421860497, "answer_id": 28073032, "question_id": 28069678, "link": "https://stackoverflow.com/questions/28069678/where-does-cargo-put-the-git-requirements/28073032#28073032", "title": "Where does Cargo put the git requirements?", "body": "<p><code>man cargo</code> gives:</p>\n\n<pre><code>FILES\n       ~/.cargo\n              Directory  in which Cargo stores repository data. Cargo can\n              be instructed to use a .cargo subdirectory in  a  different\n              location by setting the CARGO_HOME environment variable.\n</code></pre>\n\n<p>Doing a <code>git grep</code> for <code>CARGO_HOME</code> finds <a href=\"https://github.com/rust-lang/cargo/blob/3533ff11c505017751d1e466685efe7084cbd96b/src/cargo/util/config.rs#L380-L384\" rel=\"nofollow\">https://github.com/rust-lang/cargo/blob/3533ff11c505017751d1e466685efe7084cbd96b/src/cargo/util/config.rs#L380-L384</a></p>\n\n<p>which uses <a href=\"http://doc.rust-lang.org/nightly/std/os/fn.homedir.html\" rel=\"nofollow\">http://doc.rust-lang.org/nightly/std/os/fn.homedir.html</a></p>\n"}], "owner": {"reputation": 551, "user_id": 1432694, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/e5d74ff9d9865d9e09afd255a9e8cc07?s=128&d=identicon&r=PG", "display_name": "red_trumpet", "link": "https://stackoverflow.com/users/1432694/red-trumpet"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1208, "favorite_count": 0, "accepted_answer_id": 28073032, "answer_count": 1, "score": 1, "last_activity_date": 1421860497, "creation_date": 1421850678, "last_edit_date": 1421859102, "question_id": 28069678, "link": "https://stackoverflow.com/questions/28069678/where-does-cargo-put-the-git-requirements", "title": "Where does Cargo put the git requirements?", "body": "<p>When compiling a project, cargo automatically downloads the requirements, specified in the Cargo.toml, given as a git-repository.</p>\n\n<p>E.g.</p>\n\n<pre><code>[dependencies.piston]\ngit = \"https://github.com/PistonDevelopers/piston\"\n</code></pre>\n\n<p>will result in</p>\n\n<pre><code>Updating git repository 'https://github.com/PistonDevelopers/opengl_graphics'\n</code></pre>\n\n<p>when compiling. Where does it save those repositories on my disk? I'm using Windows, does this change anything?</p>\n"}, {"tags": ["io", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1421848262, "post_id": 28068807, "comment_id": 44517136, "body": "When a pattern match is insufficient, you can always use <a href=\"http://doc.rust-lang.org/1.0.0-alpha/book/patterns.html\" rel=\"nofollow noreferrer\">match guards</a>: <code>Err(e) if e.kind == EndOfFile =&gt; ...</code> for example. Not sure if that&#39;s the best here though."}, {"owner": {"reputation": 9078, "user_id": 1366455, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/fa38c3a267295fb2978ded32786073d2?s=128&d=identicon&r=PG", "display_name": "tolgap", "link": "https://stackoverflow.com/users/1366455/tolgap"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1421848315, "post_id": 28068807, "comment_id": 44517174, "body": "@MatthieuM. I would want to avoid that. Maybe there is a different approach that I can take that would change my control flow, but make it easier to <code>read_line()</code> until EOF."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1421848451, "post_id": 28068807, "comment_id": 44517261, "body": "I totally understand, but I don&#39;t know better (lack of experience on my part, most probably) thus why it&#39;s a comment and not an answer."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1422004968, "post_id": 28068807, "comment_id": 44587608, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27475113/how-to-check-for-eof-with-read-line\">How to check for EOF with `read_line()`?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9078, "user_id": 1366455, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/fa38c3a267295fb2978ded32786073d2?s=128&d=identicon&r=PG", "display_name": "tolgap", "link": "https://stackoverflow.com/users/1366455/tolgap"}, "edited": false, "score": 0, "creation_date": 1421867445, "post_id": 28070112, "comment_id": 44529039, "body": "this looks much better than what I have. I might just avoid doing a nasty Struct pattern match, thanks for this tip."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1421858172, "last_edit_date": 1421858172, "creation_date": 1421851893, "answer_id": 28070112, "question_id": 28068807, "link": "https://stackoverflow.com/questions/28068807/detect-endoffile-ioresult-when-reading-a-file/28070112#28070112", "title": "Detect EndOfFile IoResult when reading a file", "body": "<p>specifically for iterating over lines rust has the <code>lines</code> function for Buffers (<a href=\"http://doc.rust-lang.org/std/io/trait.BufferPrelude.html#tymethod.lines\" rel=\"nofollow\">http://doc.rust-lang.org/std/io/trait.BufferPrelude.html#tymethod.lines</a>).</p>\n\n<p>In your case you would loop over the lines, and once EOF is reached the loop aborts automatically without your intervention.</p>\n\n<pre><code>for line in file.lines() {\n    match line {\n        Ok(line) =&gt; {\n            // do stuff\n        },\n        Err(_) =&gt; {\n            println!(\"Unexpected error reading file.\")\n        }\n    }\n}\n</code></pre>\n\n<p>or, if your function returns a compatible <code>Result</code> you can use the try! macro for less noise:</p>\n\n<pre><code>fn myfun(file: File) -&gt; IoResult&lt;()&gt; {\n    for line in file.lines() {\n        let line = try!(line);\n        // do stuff\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421858934, "post_id": 28071845, "comment_id": 44524448, "body": "This is the answer to your question. @ker&#39;s response is the solution to your problem. ^_^ This is how <code>lines</code> is implemented itself."}, {"owner": {"reputation": 9078, "user_id": 1366455, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/fa38c3a267295fb2978ded32786073d2?s=128&d=identicon&r=PG", "display_name": "tolgap", "link": "https://stackoverflow.com/users/1366455/tolgap"}, "edited": false, "score": 0, "creation_date": 1421867399, "post_id": 28071845, "comment_id": 44529018, "body": "This indeed is exactly the answer to my question. Upvoted @ker just because it&#39;s actually a better flow."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1421956331, "post_id": 28071845, "comment_id": 44570760, "body": "Another possibility is to write <code>Err(e) if e.kind == EndOfFile =&gt; </code>, but pattern matching is probably better."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 7, "last_activity_date": 1421856850, "creation_date": 1421856850, "answer_id": 28071845, "question_id": 28068807, "link": "https://stackoverflow.com/questions/28068807/detect-endoffile-ioresult-when-reading-a-file/28071845#28071845", "title": "Detect EndOfFile IoResult when reading a file", "body": "<blockquote>\n  <p>How can I explicitly match the EndOfFile enum variant?</p>\n</blockquote>\n\n<p>You can match it without additional nested match using following pattern:</p>\n\n<pre><code>loop {\n  match file.read_line() {\n    Ok(line) =&gt; {\n      // Do stuff\n    },\n    Err(IoError { kind: EndOfFile, .. }) =&gt;\n      break,\n    Err(_) =&gt; {\n      panic!(\"Unexpected error reading file.\");\n    }\n  }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1439366908, "post_id": 31956689, "comment_id": 51826828, "body": "In fact, now in Rust EOF condition on a <code>Read</code> is signaled by returning 0 (a number of bytes read)."}], "tags": [], "owner": {"reputation": 56, "user_id": 1046874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76430f70cd18bd5c49fdfa2c22f41b2f?s=128&d=identicon&r=PG", "display_name": "Andrew Ryan", "link": "https://stackoverflow.com/users/1046874/andrew-ryan"}, "is_accepted": false, "score": 1, "last_activity_date": 1439357273, "creation_date": 1439357273, "answer_id": 31956689, "question_id": 28068807, "link": "https://stackoverflow.com/questions/28068807/detect-endoffile-ioresult-when-reading-a-file/31956689#31956689", "title": "Detect EndOfFile IoResult when reading a file", "body": "<p>Looks like rust post 1.0 has changed <code>IoError</code> to <code>std::io::Error</code>. Also, <code>kind</code> is now hidden in the internals. I had to use a <a href=\"https://doc.rust-lang.org/book/patterns.html#guards\" rel=\"nofollow\">guard</a> to work for a similar type issue (<code>WouldBlock</code> instead of <code>EndOfFile</code>).</p>\n\n<p>e.g.</p>\n\n<pre><code>match some_method_that_might_block() {\n    Ok(_) =&gt; {\n        debug!(\"worked!\");\n    },\n    Err(ref e @ IoError { kind: std::io::ErrorKind::WouldBlock, .. }) if e.kind() == std::io::ErrorKind::WouldBlock =&gt; {\n        // ignore WouldBlock\n    },\n    Err(e) =&gt; { debug!(\"error={:?}\", e); }\n};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25867, "user_id": 17027, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/fb75fbfd9dd8d93d49ff88c152d82c92?s=128&d=identicon&r=PG", "display_name": "Mahmoud Al-Qudsi", "link": "https://stackoverflow.com/users/17027/mahmoud-al-qudsi"}, "is_accepted": false, "score": 0, "last_activity_date": 1536346203, "creation_date": 1536346203, "answer_id": 52228166, "question_id": 28068807, "link": "https://stackoverflow.com/questions/28068807/detect-endoffile-ioresult-when-reading-a-file/52228166#52228166", "title": "Detect EndOfFile IoResult when reading a file", "body": "<p>For anyone reading this on a modern version of rust post 1.0, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"nofollow noreferrer\">the docs</a> now stipulate that reaching the end of a file while attempting to read from it is definitively <em>not</em> an error and should be represented with an <code>Ok(0)</code> (much like other programming languages/frameworks) rather than a hard error.</p>\n\n<p>Since you can directly match against the number of bytes read (unlike <code>std::io::error</code> where the <code>ErrorKind</code> member is hidden and cannot be matched against directly), that makes handling it very easy:</p>\n\n<pre><code>        let mut buf: Vec&lt;u8&gt; = Vec::new();\n        loop {\n            let bytes_read = match file.read(&amp;mut buf) {\n                Ok(0) =&gt; break, // end-of-file\n                Ok(n) =&gt; n,\n                Err(e) =&gt; // handle error however you see fit,\n            };\n</code></pre>\n"}], "owner": {"reputation": 9078, "user_id": 1366455, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/fa38c3a267295fb2978ded32786073d2?s=128&d=identicon&r=PG", "display_name": "tolgap", "link": "https://stackoverflow.com/users/1366455/tolgap"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 864, "favorite_count": 0, "accepted_answer_id": 28071845, "answer_count": 4, "score": 0, "last_activity_date": 1536346203, "creation_date": 1421848026, "question_id": 28068807, "link": "https://stackoverflow.com/questions/28068807/detect-endoffile-ioresult-when-reading-a-file", "title": "Detect EndOfFile IoResult when reading a file", "body": "<p>I'm trying to read from a file in Rust. The thing I don't understand is: when the <code>BufferedReader</code> is at the EOF, it actually gives an <code>Err(IoError {kind: EndOfFile})</code> and I don't know how to match on it.</p>\n\n<pre><code>loop {\n  match file.read_line() {\n    Ok(line) =&gt; {\n      // Do stuff\n    },\n    // Err(EndOfFile) =&gt; is want I want here so I can call \"break\"\n    Err(_) =&gt; {\n      panic!(\"Unexpected error reading file.\");\n    }\n  }\n}\n</code></pre>\n\n<p>How can I explicitly match the <code>EndOfFile</code> enum variant?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1421860602, "creation_date": 1421860602, "answer_id": 28073069, "question_id": 28064409, "link": "https://stackoverflow.com/questions/28064409/custom-cfg-target-in-cargo/28073069#28073069", "title": "Custom cfg target in cargo?", "body": "<p>Yes. <a href=\"http://doc.crates.io/manifest.html#rules\" rel=\"nofollow\">http://doc.crates.io/manifest.html#rules</a> :</p>\n\n<blockquote>\n  <p>When a feature is selected, Cargo will call rustc with --cfg feature=\"${feature_name}\". If a feature group is included, it and all of its individual features will be included. This can be tested in code via #[cfg(feature = \"foo\")]</p>\n</blockquote>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 994, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1421860602, "creation_date": 1421834826, "question_id": 28064409, "link": "https://stackoverflow.com/questions/28064409/custom-cfg-target-in-cargo", "title": "Custom cfg target in cargo?", "body": "<pre><code>rustc --cfg foo\n</code></pre>\n\n<p>How would I do this in cargo? Is this what <code>features</code> are for?</p>\n\n<p>Features seem as if they are only for optional dependencies.</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 521, "user_id": 963252, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/cf53173bc0968c9cfba3f1911d77fa56?s=128&d=identicon&r=PG", "display_name": "Ant Manelope", "link": "https://stackoverflow.com/users/963252/ant-manelope"}, "edited": false, "score": 0, "creation_date": 1421907314, "post_id": 28061309, "comment_id": 44542903, "body": "This worked for me as option 3 above.  I&#39;ve since got it working w/o the gcc crate, but needed to add <code>-L native=$outdir -l static=$libname</code> to the rustc-flags in the println!()"}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 7, "last_activity_date": 1421823496, "creation_date": 1421823496, "answer_id": 28061309, "question_id": 28060294, "link": "https://stackoverflow.com/questions/28060294/linking-to-a-c-library-that-has-extern-c-functions/28061309#28061309", "title": "Linking to a C++ library that has extern &quot;C&quot; functions", "body": "<p>You need to dynamically link to <code>libstdc++</code> to get the symbols your C++ code will need. You can instruct <code>rustc</code> to do so in your build script:</p>\n\n<pre><code>extern crate gcc;\nuse std::default::Default;\n\nfn main() {\n    gcc::compile_library(\"libhello.a\", &amp;Default::default(), &amp;[\"cpp/hello.cpp\"]);\n    println!(\"cargo:rustc-flags=-l dylib=stdc++\");\n}\n</code></pre>\n\n<p><a href=\"https://github.com/renato-zannon/rust-to-cpp-example\" rel=\"noreferrer\">See full example on github</a></p>\n\n<p>For more info on build scripts, see <a href=\"http://doc.crates.io/build-script.html\" rel=\"noreferrer\">the Cargo guide</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 659, "user_id": 172106, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/0f55f3b9b2cdd268ac9a2ef47e3d684c?s=128&d=identicon&r=PG", "display_name": "turboladen", "link": "https://stackoverflow.com/users/172106/turboladen"}, "is_accepted": false, "score": 2, "last_activity_date": 1548701616, "last_edit_date": 1548701616, "creation_date": 1548699469, "answer_id": 54408039, "question_id": 28060294, "link": "https://stackoverflow.com/questions/28060294/linking-to-a-c-library-that-has-extern-c-functions/54408039#54408039", "title": "Linking to a C++ library that has extern &quot;C&quot; functions", "body": "<p>This worked for me on macOS using the <a href=\"https://docs.rs/cmake/0.1.35/cmake/\" rel=\"nofollow noreferrer\">cmake</a> crate.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// build.rs\nextern crate cmake;\n\nfn main() {\n    let dst = cmake::Config::new(\"my_c_lib\")\n        .no_build_target(true)\n        .always_configure(true)\n        .build();\n\n    // This was the fix\n    println!(\"cargo:rustc-flags=-l dylib=c++\");\n\n    // The cmake crate outputs the static lib in the build subdir in the cargo $OUT_DIR,\n    // which is a little different than their docs show.\n    println!(\"cargo:rustc-link-search=native={}/build\", dst.display());\n    println!(\"cargo:rustc-link-lib=static=my_c_lib\");\n}\n</code></pre>\n\n<p>Note that I have the C/C++ code as a git submodule under <code>native/</code>, and that project is using cmake.</p>\n\n<p><a href=\"https://stackoverflow.com/a/22650261/172106\">This answer</a> also helped.</p>\n"}], "owner": {"reputation": 521, "user_id": 963252, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/cf53173bc0968c9cfba3f1911d77fa56?s=128&d=identicon&r=PG", "display_name": "Ant Manelope", "link": "https://stackoverflow.com/users/963252/ant-manelope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3968, "favorite_count": 3, "accepted_answer_id": 28061309, "answer_count": 2, "score": 11, "last_activity_date": 1548701616, "creation_date": 1421818499, "last_edit_date": 1421878613, "question_id": 28060294, "link": "https://stackoverflow.com/questions/28060294/linking-to-a-c-library-that-has-extern-c-functions", "title": "Linking to a C++ library that has extern &quot;C&quot; functions", "body": "<p>So I'm writing a Rust FFI to a C++ library that has an extern \"C\" block with C-style function headers within it.   And my low-level FFI builds.</p>\n\n<p>However, when I use my FFI in another project, it doesn't link properly, and I get undefined reference to operator new(), delete(), etc.</p>\n\n<p>My question is:</p>\n\n<ol>\n<li><p>Am I screwed because this is C++ and you can't link Rust to C++ yet?</p></li>\n<li><p>Should the application consuming the FFI library deal with the linking issue somehow, and if so, how?</p></li>\n<li><p>Can my libsomething.a be built somehow to include these C++ components, and if so, how?  I'm currently using the gcc crate rather generically.</p></li>\n<li><p>put your own solution here</p></li>\n</ol>\n"}, {"tags": ["serialization", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1421813686, "post_id": 28059483, "comment_id": 44500453, "body": "Can you elucidate on what you mean by \u201cbinary\u201d?"}, {"owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1421813921, "post_id": 28059483, "comment_id": 44500519, "body": "A collection of u8, vector or array. I&#39;m looking for something like Java&#39;s ObjectOutput/InputStream, essentially. Give it an object and it gives you bytes."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 3, "creation_date": 1421816514, "post_id": 28059483, "comment_id": 44501192, "body": "You might want to take a look at <a href=\"https://github.com/TyOverby/bincode\" rel=\"nofollow noreferrer\">bincode</a>"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1421819661, "post_id": 28059483, "comment_id": 44502261, "body": "@SBSTP: so, you don\u2019t care what precise format it\u2019s in?"}, {"owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1421875971, "post_id": 28059483, "comment_id": 44533350, "body": "@ChrisMorgan not really. What I want to do is send messages to another process via its <code>stdin</code>. I&#39;d like to send serialized enums/variants through the pipe, and deserialize them on the receiving end. Basically, IPC using UNIX pipes."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1421905487, "post_id": 28059483, "comment_id": 44542395, "body": "\u2026 so something like JSON, while potentially suboptimal, is not untenable."}], "answers": [{"tags": [], "owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "is_accepted": false, "score": 1, "last_activity_date": 1463025704, "last_edit_date": 1463025704, "creation_date": 1463025334, "answer_id": 37176975, "question_id": 28059483, "link": "https://stackoverflow.com/questions/28059483/serialize-a-struct-enum-to-bytes/37176975#37176975", "title": "Serialize a struct/enum to bytes", "body": "<p>I would suggest <a href=\"https://github.com/TyOverby/bincode\" rel=\"nofollow\"><code>bincode</code></a>.</p>\n\n<p>It provides <code>encode()</code> and <code>decode()</code> functions which operate on anything with <code>RustcEncodable</code> &amp; <code>RustcDecodable</code> traits, which can generally be <code>#[derive]</code>d, and return <code>Vec&lt;u8&gt;</code>.</p>\n\n<p>It has a few quirks (<code>isize</code> and <code>usize</code> become <code>i64</code> and <code>u64</code>, for example), but they are mostly there to improve portability and it tends to work as you would expect.</p>\n"}], "owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2865, "favorite_count": 1, "closed_date": 1463057957, "answer_count": 1, "score": 5, "last_activity_date": 1463025704, "creation_date": 1421813373, "last_edit_date": 1421878668, "question_id": 28059483, "link": "https://stackoverflow.com/questions/28059483/serialize-a-struct-enum-to-bytes", "closed_reason": "Duplicate", "title": "Serialize a struct/enum to bytes", "body": "<p>I'd like to serialize my struct to binary and de-serialize it on the other end of the pipe. Is there a way to achieve this with the serialize crate? It seems to only support JSON, hex and base64.</p>\n"}, {"tags": ["arrays", "rust", "ffi"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1540880029, "post_id": 28050461, "comment_id": 93015553, "body": "Note that it&#39;s not an array, don&#39;t confuse pointer and array in C, that not the same thing."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 8, "last_activity_date": 1483386921, "last_edit_date": 1483386921, "creation_date": 1421771943, "answer_id": 28050610, "question_id": 28050461, "link": "https://stackoverflow.com/questions/28050461/how-can-i-index-c-arrays-in-rust/28050610#28050610", "title": "How can I index C arrays in Rust?", "body": "<p>There is an <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.offset\" rel=\"noreferrer\"><code>offset</code> method on pointers</a> which can be used as:</p>\n\n<pre><code>let new_p = p.offset(i);\n</code></pre>\n\n<p>to get a pointer <code>i</code> elements away from the current one. It is not bounds-checked, obviously, so you must ensure it stays within the bounds (or one-past-the-end).</p>\n\n<hr>\n\n<p>There is also an unstable <a href=\"http://doc.rust-lang.org/std/intrinsics/fn.offset.html\" rel=\"noreferrer\"><code>offset</code> intrinsic</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1555098433, "post_id": 55658380, "comment_id": 98005615, "body": "<code>let mut len = 0;</code> There is no point to initialize to zero if the value is supposed to be replace by <code>get_ptr_and_len()</code>, either the function return an error and <code>len</code> is pointless, or the function is broken somehow and so the init is still useless. However that doesn&#39;t cost much but in the cast where a function is a lot used it could so what would be the way to tell to Rust the <code>len</code> will be initialize ? As it&#39;s &quot;only&quot; a integer this <i>should</i> be simple. I think"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1555098487, "post_id": 55658380, "comment_id": 98005639, "body": "Also, C can&#39;t have <code>private: [u8; 0],</code> field so it&#39;s maybe a bad exemple."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1555098609, "post_id": 55658380, "comment_id": 98005685, "body": "@Stargateur that\u2019s how you create an opaque type (thus the link)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1555098779, "post_id": 55658380, "comment_id": 98005746, "body": "@Stargateur there is no way to specify that FFI code will initialize the length. In pure Rust you would return a tuple of values but that\u2019s not possible with FFI. You could use <code>mem::uninitialized</code> but that\u2019s overkill for a type that can be cheaply zeroed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1555101054, "last_edit_date": 1555101054, "creation_date": 1555097661, "answer_id": 55658380, "question_id": 28050461, "link": "https://stackoverflow.com/questions/28050461/how-can-i-index-c-arrays-in-rust/55658380#55658380", "title": "How can I index C arrays in Rust?", "body": "<p>If you have the length of your C array, you can convert the pointer and the length into a Rust slice and then use all the existing support for slices:</p>\n\n<pre><code>use libc::size_t; // 0.2.51\nuse std::slice;\n\n/// Our opaque C type\n#[repr(C)]\nstruct MyCType {\n    private: [u8; 0],\n}\n\nextern \"C\" {\n    fn get_ptr_and_len(len: *mut size_t) -&gt; *const MyCType;\n    fn do_something_with_type(v: *const MyCType);\n}\n\nfn ptr_and_len() {\n    unsafe {\n        let mut len = 0;\n        let ptr = get_ptr_and_len(&amp;mut len);\n\n        let slice = slice::from_raw_parts(ptr, len);\n\n        // Indexing\n        do_something_with_type(&amp;slice[42]);\n\n        // Iteration\n        for v in slice {\n            do_something_with_type(v);\n        }\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38315383/155423\">What&#39;s the Rust idiom to define a field pointing to a C opaque pointer?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43350167/155423\">How do I initialize an opaque C struct when using Rust FFI?</a></li>\n</ul>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2022, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1555101054, "creation_date": 1421771491, "last_edit_date": 1483386813, "question_id": 28050461, "link": "https://stackoverflow.com/questions/28050461/how-can-i-index-c-arrays-in-rust", "title": "How can I index C arrays in Rust?", "body": "<p>I have a C function returning a pointer:</p>\n\n<pre><code>type MYSQL_RES_REF = *mut c_void;\ntype MYSQL_ROW = *const *const c_char;\n\n#[no_mangle]\nextern \"C\" {\n    fn mysql_fetch_row(res: MYSQL_RES_REF) -&gt; MYSQL_ROW;\n}\n\nlet pointer = mysql_fetch_row(self.res);\nlet row_p = match pointer {\n    p if p == (0 as *const *const c_char) =&gt; panic!(),\n    p =&gt; p,\n};\n\nlet field: &amp;[u8] = unsafe { ffi::c_str_to_bytes(row_p[i]) };\n</code></pre>\n\n<p>but attempting to index it (the last line) results in an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot index a value of type `*const *const i8`\n</code></pre>\n\n<p>I wonder if <code>std::c_vec</code> was what I wanted, but <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0494-c_str-and-c_vec-stability.md\" rel=\"noreferrer\">apparently that has been removed</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 5, "last_activity_date": 1421756242, "creation_date": 1421756242, "answer_id": 28045206, "question_id": 28044231, "link": "https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean/28045206#28045206", "title": "What does &quot;Sized is not implemented&quot; mean?", "body": "<p>First of all, note that <code>h</code> is of a type that implements <code>Fn(&amp;mut Writer) -&gt; IoResult&lt;()&gt;</code>.</p>\n\n<p><code>h.handle</code> is being called; this depends, then, on the <code>Handler</code> implementation where <code>W</code> is <code>Writer</code>\u2014note that carefully: W <em>is</em> <code>Writer</code>, an unsized type. The <code>&amp;mut stdio::stdout()</code> is therefore going to be cast to the <code>&amp;mut Writer</code> trait object. This is all very well in theory, but when brought back to the implementation falls down. When it comes to constraints, they are sized by default, and so it complains that <code>Writer</code>, the value you are trying to assign for <code>W</code>, is not sized.</p>\n\n<p>There are two primary solutions here:</p>\n\n<ol>\n<li><p>Switch to using the concrete writer type on <code>h</code> so that you\u2019re dealing with a sized type:</p>\n\n<pre><code>use std::io::{IoResult, Writer, stdio, LineBufferedWriter};\nuse std::io::stdio::StdWriter;\n\nfn main() {\n    let h = |&amp;: w: &amp;mut LineBufferedWriter&lt;StdWriter&gt;| -&gt; IoResult&lt;()&gt; {\n        writeln!(w, \"foo\")\n    };\n    let _ = h.handle(&amp;mut stdio::stdout());\n}\n\ntrait Handler&lt;W&gt; where W: Writer {\n    fn handle(&amp;self, &amp;mut W) -&gt; IoResult&lt;()&gt;;\n}\n\nimpl&lt;W, F&gt; Handler&lt;W&gt; for F\nwhere W: Writer, F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt; {\n    fn handle(&amp;self, w: &amp;mut W) -&gt; IoResult&lt;()&gt; { (*self)(w) }\n}\n</code></pre></li>\n<li><p>Permit <code>W</code> to be an unsized type. This is acceptable as you only use it through a reference <code>&amp;mut W</code>. If you wished to use it as a bare type, e.g. a method taking <code>W</code> by value, it would not do.</p>\n\n<pre><code>use std::io::{IoResult, Writer};\nuse std::io::stdio;\n\nfn main() {\n    let h = |&amp;: w: &amp;mut Writer| -&gt; IoResult&lt;()&gt; {\n        writeln!(w, \"foo\")\n    };\n    let _ = h.handle(&amp;mut stdio::stdout());\n}\n\ntrait Handler&lt;W: ?Sized&gt; where W: Writer {\n    fn handle(&amp;self, &amp;mut W) -&gt; IoResult&lt;()&gt;;\n}\n\nimpl&lt;W: ?Sized, F&gt; Handler&lt;W&gt; for F\nwhere W: Writer, F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt; {\n    fn handle(&amp;self, w: &amp;mut W) -&gt; IoResult&lt;()&gt; { (*self)(w) }\n}\n</code></pre></li>\n</ol>\n\n<p>I would recommend supporting an unsized <code>W</code> even if you don\u2019t then use that in this case\u2014there\u2019s no reason it <em>needs</em> to be sized.</p>\n"}, {"comments": [{"owner": {"reputation": 557, "user_id": 3864351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8a038e2fd3f60f0486a91541371839b6?s=128&d=identicon&r=PG", "display_name": "k-ui", "link": "https://stackoverflow.com/users/3864351/k-ui"}, "edited": false, "score": 0, "creation_date": 1421768729, "post_id": 28045264, "comment_id": 44480902, "body": "Thanks a lot. I confirm your code works fine. It&#39;s my understanding that <code>Sized</code> implementation required because the rust runtime need to know how many bytes it takes on the call stack. So, I was going to avoid unknown sized types using pointer, in this case <code>&amp;mut</code>... I cannot understand where are <code>Sized</code> required in my code yet."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 557, "user_id": 3864351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8a038e2fd3f60f0486a91541371839b6?s=128&d=identicon&r=PG", "display_name": "k-ui", "link": "https://stackoverflow.com/users/3864351/k-ui"}, "edited": false, "score": 0, "creation_date": 1421788027, "post_id": 28045264, "comment_id": 44492075, "body": "It isn&#39;t <i>required</i>, as the second set of code working demonstrates, it is just a question of defaults: the compiler is defaulting to putting a <code>Sized</code> bound on that type parameter, because that&#39;s what the compiler is defined to do for almost all type parameters."}, {"owner": {"reputation": 557, "user_id": 3864351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8a038e2fd3f60f0486a91541371839b6?s=128&d=identicon&r=PG", "display_name": "k-ui", "link": "https://stackoverflow.com/users/3864351/k-ui"}, "edited": false, "score": 0, "creation_date": 1421835199, "post_id": 28045264, "comment_id": 44509289, "body": "Oh. I got it! I&#39;m sorry that I did not fully understand your answer: &quot;the impl are defaulting to have a <code>Sized</code> bound&quot;. Thanks again, dbaupp!"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 40, "last_activity_date": 1510012271, "last_edit_date": 1510012271, "creation_date": 1421756410, "answer_id": 28045264, "question_id": 28044231, "link": "https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean/28045264#28045264", "title": "What does &quot;Sized is not implemented&quot; mean?", "body": "<p>The <code>Sized</code> trait is rather special, so special that it is a default bound on type parameters in most situations. It represents values that have a fixed size known at compile time, like <code>u8</code> (1 byte) or <code>&amp;u32</code> (8 bytes on a platform with 64-bit pointers) etc. These values are flexible: they can be placed on the stack and moved onto the heap, and generally passed around by-value, as the compiler knows how much space it needs where-ever the value goes.</p>\n\n<p>Types that aren't sized are much more restricted, and a value of type <code>Writer</code> isn't sized: it represents, abstractly, some unspecified type that implements <code>Writer</code>, with no knowledge of what the actual type is. Since the actual type isn't known, the size can't be known: some large types are <code>Writer</code>s, some small types are. <code>Writer</code> is one example of a trait object, which at the moment, can only appear in executed code behind a pointer. Common examples include <code>&amp;Writer</code>, <code>&amp;mut Writer</code>, or <code>Box&lt;Writer&gt;</code>.</p>\n\n<p>This explains why <code>Sized</code> is the default: it is often what one wants.</p>\n\n<p>In any case, for your code, this is popping up because you're using <code>handle</code> with <code>h</code>, which is a <code>Fn(&amp;mut Writer) -&gt; IoResult&lt;()&gt;</code>. If we match this against the <code>F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt;</code> type that <code>Handle</code> is implemented for we find that <code>W = Writer</code>, that is, we're trying to use <code>handle</code> with the trait object <code>&amp;mut Writer</code>, not a <code>&amp;mut W</code> for some concrete type <code>W</code>. This is illegal because the <code>W</code> parameters in both the trait and the impl are defaulting to have a <code>Sized</code> bound, if we manually override it with <code>?Sized</code> then everything works fine:</p>\n\n<pre><code>use std::io::{IoResult, Writer};\nuse std::io::stdio;\n\nfn main() {\n    let h = |&amp;: w: &amp;mut Writer| -&gt; IoResult&lt;()&gt; {\n        writeln!(w, \"foo\")\n    };\n    let _ = h.handle(&amp;mut stdio::stdout());\n}\n\ntrait Handler&lt;W: ?Sized&gt; where W: Writer {\n    fn handle(&amp;self, &amp;mut W) -&gt; IoResult&lt;()&gt;;\n}\n\nimpl&lt;W: ?Sized, F&gt; Handler&lt;W&gt; for F\nwhere W: Writer, F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt; {\n    fn handle(&amp;self, w: &amp;mut W) -&gt; IoResult&lt;()&gt; { (*self)(w) }\n}\n</code></pre>\n\n<p>And for the Rust 1.0 code:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() {\n    handle(&amp;mut io::stdout());\n}\n\nfn handle(w: &amp;mut Write) -&gt; io::Result&lt;()&gt; {\n    handler(w)\n}\n\nfn handler&lt;W: ?Sized&gt;(w: &amp;mut W) -&gt; io::Result&lt;()&gt;\nwhere\n    W: Write,\n{\n    writeln!(w, \"foo\")\n}\n</code></pre>\n\n<p>I also wrote a <a href=\"http://huonw.github.io/blog/2015/01/the-sized-trait/\" rel=\"noreferrer\">blog post about <code>Sized</code></a> and trait objects in general which has a little more detail.</p>\n"}], "owner": {"reputation": 557, "user_id": 3864351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8a038e2fd3f60f0486a91541371839b6?s=128&d=identicon&r=PG", "display_name": "k-ui", "link": "https://stackoverflow.com/users/3864351/k-ui"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 19500, "favorite_count": 5, "accepted_answer_id": 28045264, "answer_count": 2, "score": 45, "last_activity_date": 1582729923, "creation_date": 1421753251, "last_edit_date": 1582729923, "question_id": 28044231, "link": "https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean", "title": "What does &quot;Sized is not implemented&quot; mean?", "body": "<p>I wrote the following code:</p>\n\n<pre><code>use std::io::{IoResult, Writer};\nuse std::io::stdio;\n\nfn main() {\n    let h = |&amp;: w: &amp;mut Writer| -&gt; IoResult&lt;()&gt; {\n        writeln!(w, \"foo\")\n    };\n    let _ = h.handle(&amp;mut stdio::stdout());\n}\n\ntrait Handler&lt;W&gt; where W: Writer {\n    fn handle(&amp;self, &amp;mut W) -&gt; IoResult&lt;()&gt;;\n}\n\nimpl&lt;W, F&gt; Handler&lt;W&gt; for F\nwhere W: Writer, F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt; {\n    fn handle(&amp;self, w: &amp;mut W) -&gt; IoResult&lt;()&gt; { (*self)(w) }\n}\n</code></pre>\n\n<p>And then <code>rustc</code> in my terminal:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc writer_handler.rs\nwriter_handler.rs:8:15: 8:43 error: the trait `core::marker::Sized` is not implemented for the type `std::io::Writer`\nwriter_handler.rs:8     let _ = h.handle(&amp;mut stdio::stdout());\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\nwriter_handler.rs:8:15: 8:43 error: the trait `core::marker::Sized` is not implemented for the type `std::io::Writer`\nwriter_handler.rs:8     let _ = h.handle(&amp;mut stdio::stdout());\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Why is this <code>Writer</code> required to implement <code>Sized</code>? It appears to me that the <code>Sized</code> is not needed. What I should do while keeping <code>trait Handler</code> to have this generic argument?</p>\n\n<hr>\n\n<p>In Rust 1.0, this similar code produces the same problem:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() {\n    handle(&amp;mut io::stdout());\n}\n\nfn handle(w: &amp;mut Write) -&gt; io::Result&lt;()&gt; {\n    handler(w)\n}\n\nfn handler&lt;W&gt;(w: &amp;mut W) -&gt; io::Result&lt;()&gt;\nwhere\n    W: Write,\n{\n    writeln!(w, \"foo\")\n}\n</code></pre>\n\n<p>With the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::io::Write: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:8:5\n  |\n8 |     handler(w)\n  |     ^^^^^^^ `std::io::Write` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `std::io::Write`\n  = note: required by `handler`\n</code></pre>\n\n<p>Later versions of Rust have the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `dyn std::io::Write` cannot be known at compilation time\n  --&gt; src/main.rs:8:13\n   |\n8  |     handler(w)\n   |             ^ doesn't have a size known at compile-time\n...\n11 | fn handler&lt;W&gt;(w: &amp;mut W) -&gt; io::Result&lt;()&gt;\n   |    ------- - required by this bound in `handler`\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `dyn std::io::Write`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 14720, "user_id": 2074608, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/WzNwl.png?s=128&g=1", "display_name": "Qantas 94 Heavy", "link": "https://stackoverflow.com/users/2074608/qantas-94-heavy"}, "is_accepted": true, "score": 4, "last_activity_date": 1421744142, "last_edit_date": 1421744142, "creation_date": 1421743756, "answer_id": 28041006, "question_id": 28040921, "link": "https://stackoverflow.com/questions/28040921/can-you-put-another-match-clause-in-a-match-arm/28041006#28041006", "title": "Can you put another match clause in a match arm?", "body": "<p>Sure you can, <a href=\"http://doc.rust-lang.org/1.0.0-alpha/book/match.html\" rel=\"nofollow\"><code>match</code> is an expression</a>:</p>\n\n<pre><code>fn main() {\n    fn foo() -&gt; i8 {\n        let a = true;\n        let b = false;\n\n        match a {\n            true =&gt; match b {\n                true =&gt; 1,\n                false =&gt; 2\n            },\n            false =&gt; 3\n        }\n    }\n\n    println!(\"{}\", foo()); // 2\n}\n</code></pre>\n\n<p>You can view the results of this on the <a href=\"http://is.gd/YYET7J\" rel=\"nofollow\">Rust playpen</a>.</p>\n\n<p>The only thing that seems off about your code to me is the inconsistent usage of <code>.to_string()</code> in your code, the last match case doesn't have that.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 7, "last_activity_date": 1421757661, "last_edit_date": 1421757661, "creation_date": 1421746970, "answer_id": 28042043, "question_id": 28040921, "link": "https://stackoverflow.com/questions/28040921/can-you-put-another-match-clause-in-a-match-arm/28042043#28042043", "title": "Can you put another match clause in a match arm?", "body": "<p>Yes you can (see Qantas' answer). But Rust often has prettier ways to do what you want. You can do multiple matches at once by using tuples.</p>\n\n<pre><code>pub fn is_it_file(input_file: &amp;str) -&gt; String {\n    let path3 = Path::new(input_file);  \n    match (path3.is_file(), path3.is_dir()) {\n        (true, false) =&gt; \"File!\",\n        (false, true) =&gt; \"Dir!\",\n        _ =&gt; \"Neither or Both... bug?\",\n    }.to_string()\n}\n</code></pre>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 164, "favorite_count": 0, "accepted_answer_id": 28041006, "answer_count": 2, "score": 0, "last_activity_date": 1421762953, "creation_date": 1421743446, "last_edit_date": 1421762953, "question_id": 28040921, "link": "https://stackoverflow.com/questions/28040921/can-you-put-another-match-clause-in-a-match-arm", "title": "Can you put another match clause in a match arm?", "body": "<p>Can you put another match clause in one of the match results of a match like this in:</p>\n\n<pre><code>pub fn is_it_file(input_file: &amp;str) -&gt; String {\n    let path3 = Path::new(input_file);  \n    match path3.is_file() {\n        true =&gt; \"File!\".to_string(),\n        false =&gt; match path3.is_dir() {\n                true =&gt; \"Dir!\".to_string(),\n                _ =&gt; \"Don't care\",\n        }\n    }\n}\n</code></pre>\n\n<p>If not why ?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1421730642, "post_id": 28038049, "comment_id": 44460475, "body": "You hit the nail on the head!"}], "tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": true, "score": 7, "last_activity_date": 1421861188, "last_edit_date": 1421861188, "creation_date": 1421729974, "answer_id": 28038049, "question_id": 28037986, "link": "https://stackoverflow.com/questions/28037986/how-can-i-create-stub-functions/28038049#28038049", "title": "How can I create stub functions?", "body": "<p>You want the <code>unimplemented!</code> macro (<a href=\"http://doc.rust-lang.org/std/macro.unimplemented!.html\" rel=\"nofollow\">doc link</a>).</p>\n\n<pre><code>fn my_method() -&gt; bool {\n    unimplemented!()\n}\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 710, "favorite_count": 0, "accepted_answer_id": 28038049, "answer_count": 1, "score": 5, "last_activity_date": 1421861188, "creation_date": 1421729586, "last_edit_date": 1421763065, "question_id": 28037986, "link": "https://stackoverflow.com/questions/28037986/how-can-i-create-stub-functions", "title": "How can I create stub functions?", "body": "<p>What's the best way to create a stub function in Rust? Something like:</p>\n\n<pre><code>fn my_method() -&gt; bool {\n  return new UnImplementedException() //wrong! But that's close to what I need\n}\n</code></pre>\n\n<p>In C# the methods can return <code>UnImplementedException</code> which is convenient for creating stubs. Of course, in this particular case I could return true or false, but I want the solution that is applicable for any return type.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1421717513, "post_id": 28036173, "comment_id": 44457389, "body": "I think  in your case would be better to just use a loop: <code>try!(maybe(x))</code> and push the values into a mutable <code>Vec&lt;u32&gt;</code>."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1525195253, "last_edit_date": 1525195253, "creation_date": 1421716352, "answer_id": 28036224, "question_id": 28036173, "link": "https://stackoverflow.com/questions/28036173/how-can-i-filter-an-iterator-when-the-predicate-returns-a-resultbool/28036224#28036224", "title": "How can I filter an iterator when the predicate returns a Result&lt;bool, _&gt;?", "body": "<p>You can turn the <code>Result&lt;bool, u8&gt;</code> into an <code>Option&lt;Result&lt;u32, u8&gt;&gt;</code>, that is, pull the <code>bool</code> out to an <code>Option</code> and put the value inside, and use <code>filter_map</code>:</p>\n\n<pre><code>fn maybe(v: u32) -&gt; Result&lt;bool, u8&gt; {\n    match v % 3 {\n        0 =&gt; Ok(true),\n        1 =&gt; Ok(false),\n        _ =&gt; Err(42),\n    }\n}\n\nfn work() -&gt; Result&lt;Vec&lt;u32&gt;, u8&gt; {\n    [1, 2, 3, 4, 5]\n        .iter()\n        .filter_map(|&amp;x| match maybe(x) {\n            Ok(true) =&gt; Some(Ok(x)),\n            Ok(false) =&gt; None,\n            Err(e) =&gt; Some(Err(e)),\n        })\n        .collect()\n}\n\nfn main() {\n    println!(\"{:?}\", work())\n}\n</code></pre>\n\n<p><a href=\"http://play.rust-lang.org/?run=1&amp;code=fn%20maybe%28v%3A%20u32%29%20-%3E%20Result%3Cbool%2C%20u8%3E%20%7B%0A%20%20%20%20match%20v%20%25%203%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20Ok%28true%29%2C%0A%20%20%20%20%20%20%20%201%20%3D%3E%20Ok%28false%29%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20Err%2842%29%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20work%28%29%20-%3E%20Result%3CVec%3Cu32%3E%2C%20u8%3E%20%7B%0A%20%20%20%20%5B1%2C2%2C3%2C4%2C5%5D.iter%28%29.filter_map%28%7C%26x%7C%20match%20maybe%28x%29%20%7B%0A%20%20%20%20%20%20%20%20Ok%28true%29%20%3D%3E%20Some%28Ok%28x%29%29%2C%0A%20%20%20%20%20%20%20%20Ok%28false%29%20%3D%3E%20None%2C%0A%20%20%20%20%20%20%20%20Err%28e%29%20%3D%3E%20Some%28Err%28e%29%29%0A%20%20%20%20%7D%29.collect%28%29%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20println!%28%22%7B%3A%3F%7D%22%2C%20work%28%29%29%0A%7D\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 1, "accepted_answer_id": 28036224, "answer_count": 1, "score": 3, "last_activity_date": 1525195253, "creation_date": 1421715881, "last_edit_date": 1525195202, "question_id": 28036173, "link": "https://stackoverflow.com/questions/28036173/how-can-i-filter-an-iterator-when-the-predicate-returns-a-resultbool", "title": "How can I filter an iterator when the predicate returns a Result&lt;bool, _&gt;?", "body": "<p>I would like the iterator to be filtered, but my predicate has the possibility of failing. When the predicate fails, I'd like to fail the entire function. In this example, I'd like <code>work</code> to return the <code>Result</code> generated by <code>maybe</code>:</p>\n\n<pre><code>fn maybe(v: u32) -&gt; Result&lt;bool, u8&gt; {\n    match v % 3 {\n        0 =&gt; Ok(true),\n        1 =&gt; Ok(false),\n        2 =&gt; Err(42),\n    }\n}\n\nfn work() -&gt; Result&lt;Vec&lt;u32&gt;, u8&gt; {\n    [1, 2, 3, 4, 5].iter().filter(|&amp;&amp;x| maybe(x)).collect()\n}\n\nfn main() {\n    println!(\"{:?}\", work())\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:45\n   |\n10 |         [1, 2, 3, 4, 5].iter().filter(|&amp;&amp;x| maybe(x)).collect()\n   |                                             ^^^^^^^^ expected bool, found enum `std::result::Result`\n   |\n   = note: expected type `bool`\n              found type `std::result::Result&lt;bool, u8&gt;`\n\nerror[E0277]: the trait bound `std::result::Result&lt;std::vec::Vec&lt;u32&gt;, u8&gt;: std::iter::FromIterator&lt;&amp;u32&gt;` is not satisfied\n  --&gt; src/main.rs:10:55\n   |\n10 |         [1, 2, 3, 4, 5].iter().filter(|&amp;&amp;x| maybe(x)).collect()\n   |                                                       ^^^^^^^ a collection of type `std::result::Result&lt;std::vec::Vec&lt;u32&gt;, u8&gt;` cannot be built from an iterator over elements of type `&amp;u32`\n   |\n   = help: the trait `std::iter::FromIterator&lt;&amp;u32&gt;` is not implemented for `std::result::Result&lt;std::vec::Vec&lt;u32&gt;, u8&gt;`\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "edited": false, "score": 1, "creation_date": 1424388803, "post_id": 28035122, "comment_id": 45541055, "body": "Thanks, this answer helped me a lot!"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 35, "last_activity_date": 1479228467, "last_edit_date": 1479228467, "creation_date": 1421709045, "answer_id": 28035122, "question_id": 28034646, "link": "https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content/28035122#28035122", "title": "Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)", "body": "<p><code>self</code> has type <code>&amp;mut Foo</code> in <code>print</code>, that is, it is a borrowed mutable reference to a value of type <code>Foo</code>. Types in Rust move ownership by default, that is, taking something by-value will statically invalidate the source and stop the programmer from using it again (unless it is reinitialized). In this case, <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"noreferrer\"><code>unwrap</code></a> has the signature:</p>\n\n<pre><code>impl Option&lt;T&gt; {\n    fn unwrap(self) -&gt; T { ...\n</code></pre>\n\n<p>That is, it is taking the <code>Option</code> value by-value and thus trying to consume ownership of it. Hence, <code>self.maybe_file.unwrap()</code> is trying to consume the data in <code>maybe_file</code> which would leave <code>self</code> pointing to partially invalid data (it is illegal to use the <code>maybe_file</code> field after that). There's no way the compiler can enforce this with borrowed references which have to be valid always as they could point anywhere, so it is illegal to move out.</p>\n\n<p>Fortunately, one can avoid this problem: the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"noreferrer\"><code>as_ref</code></a> method creates an <code>Option&lt;&amp;T&gt;</code> out of an <code>&amp;Option&lt;T&gt;</code> and the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut\" rel=\"noreferrer\"><code>as_mut</code></a> method creates an <code>Option&lt;&amp;mut T&gt;</code> out of an <code>&amp;mut Option&lt;T&gt;</code>. The resulting <code>Option</code> is then no longer behind a reference and so it is legal to consume it via <code>unwrap</code>:</p>\n\n<pre><code>let mut file = self.maybe_file.as_mut().unwrap();\n</code></pre>\n\n<p>This differs  slightly because <code>file</code> has type <code>&amp;mut File</code> instead of <code>File</code>, but fortunately <code>&amp;mut File</code> is all that is necessary for the rest of the code.</p>\n\n<p>Another approach to making this work is using manual pattern matching:</p>\n\n<pre><code>match self.maybe_file {\n    Some(ref mut file)  =&gt; println!(...),\n    None =&gt; panic!(\"error: file was missing\")\n}\n</code></pre>\n\n<p>This is doing exactly the same thing as the <code>.as_mut().unwrap()</code> just more explicitly: the <code>ref mut</code> is create a reference pointing directly into the memory occupied by <code>self.maybe_file</code>, just like <code>as_mut</code>.</p>\n"}], "owner": {"reputation": 193, "user_id": 4471789, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c60a4e2e6978a04d6bb117c99a36960?s=128&d=identicon&r=PG&f=1", "display_name": "forth_wave", "link": "https://stackoverflow.com/users/4471789/forth-wave"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6476, "favorite_count": 3, "accepted_answer_id": 28035122, "answer_count": 1, "score": 19, "last_activity_date": 1479228467, "creation_date": 1421706706, "last_edit_date": 1479228273, "question_id": 28034646, "link": "https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content", "title": "Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)", "body": "<pre><code>use std::fs::File;\nuse std::io::Read;\n\npub struct Foo {\n    maybe_file: Option&lt;File&gt;,\n}\n\nimpl Foo {\n    pub fn init(&amp;mut self) {\n        self.maybe_file = Some(File::open(\"/proc/uptime\").unwrap());\n    }\n\n    pub fn print(&amp;mut self) {\n        let mut file = self.maybe_file.unwrap();\n        let mut s = String::new();\n        file.read_to_string(&amp;mut s).unwrap();\n        println!(\"Uptime: {}\", s);\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Compiling this will give me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:14:24\n   |\n14 |         let mut file = self.maybe_file.unwrap();\n   |                        ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>Why is this happening? What do I do to solve it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1421708325, "post_id": 28034470, "comment_id": 44454816, "body": "Could you provide a little more context (e.g. definition of the <code>self</code> struct)? It will help tailor the answers to make the most sense."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1421708515, "post_id": 28034470, "comment_id": 44454882, "body": "<code>*mut</code> or <code>&amp;mut</code>? The former has no aliasing requirements AFAIK."}], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": false, "score": 1, "last_activity_date": 1421710861, "creation_date": 1421710861, "answer_id": 28035461, "question_id": 28034470, "link": "https://stackoverflow.com/questions/28034470/is-there-a-way-to-get-two-mut-pointers-pointing-to-the-same-memory-address/28035461#28035461", "title": "Is there a way to get two *mut pointers pointing to the same memory address?", "body": "<p>I'm not sure exactly what you mean. <code>&amp;mut</code> is the one that has the aliasing enforcing. <code>*mut</code> can be copied like anything else, dereferencing a raw pointer of course is <code>unsafe</code>, but you should be able to do this:</p>\n\n<pre><code>fn main() {\n    let mut x: i32 = 5i32;\n    let xptr: *mut i32 = &amp;mut x as *mut i32;\n\n    let xptr_copy: *mut i32 = xptr;\n\n    unsafe {\n        println!(\"xptr: {}\", *xptr);\n        println!(\"xptr_copy: {}\", *xptr_copy);\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/Zhhb8P\" rel=\"nofollow\">playpen</a></p>\n"}, {"comments": [{"owner": {"reputation": 20370, "user_id": 1364206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/16c1ef3ec3d82fb7e2eb80d479c64414?s=128&d=identicon&r=PG", "display_name": "Kai Sellgren", "link": "https://stackoverflow.com/users/1364206/kai-sellgren"}, "edited": false, "score": 0, "creation_date": 1421736264, "post_id": 28035467, "comment_id": 44462451, "body": "Ah right I can just reference multiple times and then cast them. Thanks this should be enough."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1421710890, "creation_date": 1421710890, "answer_id": 28035467, "question_id": 28034470, "link": "https://stackoverflow.com/questions/28034470/is-there-a-way-to-get-two-mut-pointers-pointing-to-the-same-memory-address/28035467#28035467", "title": "Is there a way to get two *mut pointers pointing to the same memory address?", "body": "<p>While I agree with dbaupp that you should provide more context because this isn't what you should do, here's the answer to the exact question you asked:</p>\n\n<pre><code>fn main() {\n    let mut a: u32 = 42;\n    let b: *mut u32 = &amp;mut a;\n    let c: *mut u32 = &amp;mut a;\n    println!(\"{:?}, {:?}\", b, c);\n}\n</code></pre>\n\n<p>Now you have two <code>*mut u32</code> pointers pointing at the same memory address. And without <code>unsafe</code>! Of course, if you want to <em>use</em> the pointers, you now have to do a lot more thinking to decide if you've completely broken all the assumptions and guarantees that the compiler expects! :-)</p>\n"}], "owner": {"reputation": 20370, "user_id": 1364206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/16c1ef3ec3d82fb7e2eb80d479c64414?s=128&d=identicon&r=PG", "display_name": "Kai Sellgren", "link": "https://stackoverflow.com/users/1364206/kai-sellgren"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 319, "favorite_count": 0, "accepted_answer_id": 28035467, "answer_count": 2, "score": 0, "last_activity_date": 1421710890, "creation_date": 1421705826, "question_id": 28034470, "link": "https://stackoverflow.com/questions/28034470/is-there-a-way-to-get-two-mut-pointers-pointing-to-the-same-memory-address", "title": "Is there a way to get two *mut pointers pointing to the same memory address?", "body": "<p>I am trying to implement a Doubly Linked List for fun in Rust.</p>\n\n<p>I faced an issue with the ownership system, the inability to alias two pointers. I realize the benefits of pointer aliasing, but I'd like to make an exception this time.</p>\n\n<p>I'd like to know if there is any way to have two <code>*mut A</code> pointers pointing to the same memory address.</p>\n\n<p>For example, right now I have this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>self.first = unsafe { mem::transmute(new_node) };\n// How do I set self.last to point at the same new_node?\n</code></pre>\n\n<p>I am aware of <code>Rc</code> and <code>RefCell</code> types, but I'd like to avoid using them in data structures as they have run-time overhead.</p>\n"}, {"tags": ["cross-compiling", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421695392, "post_id": 28031806, "comment_id": 44448692, "body": "To be clear, you are deliberately trying to cross compile from OS X to Linux?"}, {"owner": {"reputation": 434, "user_id": 684824, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/597c906ec36c18b968cd390032b2ce88?s=128&d=identicon&r=PG", "display_name": "zander", "link": "https://stackoverflow.com/users/684824/zander"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421707160, "post_id": 28031806, "comment_id": 44454351, "body": "I&#39;m trying to cross compile to write my own toy kernel, based on the code here: <a href=\"https://github.com/charliesome/rustboot\" rel=\"nofollow noreferrer\">github.com/charliesome/rustboot</a> I&#39;m trying to get libcore to compile. The code above is the minimal code that highlights the problem. I&#39;m going to try building from source with ./configure --target=i686-unknown-linux-gnu"}], "answers": [{"comments": [{"owner": {"reputation": 434, "user_id": 684824, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/597c906ec36c18b968cd390032b2ce88?s=128&d=identicon&r=PG", "display_name": "zander", "link": "https://stackoverflow.com/users/684824/zander"}, "edited": false, "score": 1, "creation_date": 1421744860, "post_id": 28034968, "comment_id": 44466095, "body": "Got it working! Downloaded the nightly and copied the rustc-nightly-i686-unknown-linux-gnu/lib/rustlib/i686-unknow&zwnj;&#8203;n-linux-gnu folder to /usr/local/lib/rustlib and it links. Thanks for your help."}, {"owner": {"reputation": 1931, "user_id": 1798856, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/929787e84f3b059ff4e1c067488bbfb3?s=128&d=identicon&r=PG", "display_name": "Alister Lee", "link": "https://stackoverflow.com/users/1798856/alister-lee"}, "edited": false, "score": 0, "creation_date": 1448098588, "post_id": 28034968, "comment_id": 55448269, "body": "See also these issues raised on <a href=\"https://github.com/rust-lang/cargo/issues/2158\" rel=\"nofollow noreferrer\">cargo</a> and <a href=\"https://github.com/brson/multirust/issues/20\" rel=\"nofollow noreferrer\">multirust</a>"}, {"owner": {"reputation": 2732, "user_id": 258065, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/a5e0ab01b552291118d6ddd8b5332abb?s=128&d=identicon&r=PG", "display_name": "Theo Belaire", "link": "https://stackoverflow.com/users/258065/theo-belaire"}, "edited": false, "score": 0, "creation_date": 1448211195, "post_id": 28034968, "comment_id": 55479222, "body": "Another place to put libcore is in <code>$YOUR_PROJECT&#47;.rust&#47;lib&#47;target.json&#47;libcore.rlib</code>, and cargo will be happy."}, {"owner": {"reputation": 1404, "user_id": 296473, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3e3c1cb94b9ad3551cd9d43f2e52e105?s=128&d=identicon&r=PG", "display_name": "lilydjwg", "link": "https://stackoverflow.com/users/296473/lilydjwg"}, "edited": false, "score": 0, "creation_date": 1454217961, "post_id": 28034968, "comment_id": 57942207, "body": "rustlib from a different version seems to not work anymore."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1404, "user_id": 296473, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3e3c1cb94b9ad3551cd9d43f2e52e105?s=128&d=identicon&r=PG", "display_name": "lilydjwg", "link": "https://stackoverflow.com/users/296473/lilydjwg"}, "edited": false, "score": 0, "creation_date": 1454219745, "post_id": 28034968, "comment_id": 57942487, "body": "@lilydjwg Hm, libs from different targets should still work, as long as they&#39;re the same compiler version (i.e. cross-compiling with rustc 1.6 will need to use the other 1.6 libraries)."}, {"owner": {"reputation": 1404, "user_id": 296473, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3e3c1cb94b9ad3551cd9d43f2e52e105?s=128&d=identicon&r=PG", "display_name": "lilydjwg", "link": "https://stackoverflow.com/users/296473/lilydjwg"}, "edited": false, "score": 0, "creation_date": 1454238806, "post_id": 28034968, "comment_id": 57946761, "body": "@huon last time I tried a linux rustc with the official distributed windows, and it refused to compile because they came from different commits (the digit part of version are the same, but -dev vs. -nightly, and the hash is different). I also found the code comparing this."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1404, "user_id": 296473, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3e3c1cb94b9ad3551cd9d43f2e52e105?s=128&d=identicon&r=PG", "display_name": "lilydjwg", "link": "https://stackoverflow.com/users/296473/lilydjwg"}, "edited": false, "score": 0, "creation_date": 1454239362, "post_id": 28034968, "comment_id": 57946926, "body": "@lilydjwg a downloaded rustc is not going the same as one built from source if it is built from a different commit. The commit hash is the &quot;real&quot; compiler version number (the 1.x.0 versioning really only applies for stable releases: the nightly compiler has ~45 builds for each of those numbers). Make the commits match and it should work (e.g. just download both)."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 12, "last_activity_date": 1478574294, "last_edit_date": 1478574294, "creation_date": 1421708263, "answer_id": 28034968, "question_id": 28031806, "link": "https://stackoverflow.com/questions/28031806/cannot-link-against-core-library-when-cross-compiling/28034968#28034968", "title": "Cannot link against core library when cross compiling", "body": "<p>This is caused by the core library not existing for the platform you're targeting. There's a few ways one might acquire it:</p>\n\n<ul>\n<li>use <a href=\"https://rustup.rs/\" rel=\"nofollow noreferrer\">rustup</a> \u2014 <code>rustup target add i686-unknown-gnu-linux</code> should do the trick</li>\n<li>get <a href=\"http://doc.crates.io/\" rel=\"nofollow noreferrer\">cargo</a> to do all the hard work by adding <a href=\"https://crates.io/crates/core-nightly\" rel=\"nofollow noreferrer\"><code>core-nightly</code></a> to your <code>Cargo.toml</code>, and use <code>cargo build --target=...</code>. Unfortunately it seems it hasn't been updated for a while, but one can make a local package by copying <code>src/libcore</code> out of <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">the Rust repo</a>, adding a <code>Cargo.toml</code> and using a <code>path</code> dependency; in future, it is likely to be provided officially through crates.io too, but I have no idea how far away this is.</li>\n<li>download a Rust build for your desired target (e.g. the <a href=\"http://static.rust-lang.org/dist/\" rel=\"nofollow noreferrer\">corresponding nightly</a> to the one you have installed), extract the <code>lib/rustlib/</code> directory somewhere either automatically searched (<code>~/.multirust/toolchains/nightly-2015-01-18/lib/rustlib</code>), or anywhere and pass an <code>-L</code> flag to the compiler (I'm not 100% sure on the precise place the <code>-L</code> flag should point to, though).</li>\n<li>cross-compile Rust itself: checkout the repo, <code>./configure --target=$yourtarget</code> and then <code>make</code> should build you a compiler that can run on your current computer, but also create binaries that run on your desired target</li>\n<li>do manual cross-compilation of the crates you need, e.g. <a href=\"http://zinc.rs/\" rel=\"nofollow noreferrer\">zinc.rs</a> uses a <a href=\"https://github.com/hackndev/zinc/blob/4a435501c9012414a03e2cdc759d0ccd9f93c145/Rakefile\" rel=\"nofollow noreferrer\">Rakefile</a> that builds everything they want</li>\n</ul>\n\n<p>The cargo route is definitely the easiest at the moment. The cross-compiling story will definitely get easier in future, e.g. making <a href=\"https://github.com/brson/multirust\" rel=\"nofollow noreferrer\">multirust</a> do all the complicated bits for the third possibility. However, both the third and fourth ways rely on being able to build <code>std</code> for your platform, which seems unlikely for kernel work.</p>\n\n<p>(BTW, the <a href=\"https://crates.io/crates/rlibc\" rel=\"nofollow noreferrer\">rlibc</a> crate is useful/necessary for kernel work too.)</p>\n"}], "owner": {"reputation": 434, "user_id": 684824, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/597c906ec36c18b968cd390032b2ce88?s=128&d=identicon&r=PG", "display_name": "zander", "link": "https://stackoverflow.com/users/684824/zander"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3073, "favorite_count": 3, "accepted_answer_id": 28034968, "answer_count": 1, "score": 6, "last_activity_date": 1478574294, "creation_date": 1421694335, "last_edit_date": 1421710370, "question_id": 28031806, "link": "https://stackoverflow.com/questions/28031806/cannot-link-against-core-library-when-cross-compiling", "title": "Cannot link against core library when cross compiling", "body": "<p>Having some trouble getting Rust to link to the core library on OS X targeting i686-unknown-linux-gnu:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>MacBook:rustboot alex$ make\nrustc -O --target i686-unknown-linux-gnu --crate-type lib -o main.o --emit obj main.rs\nmain.rs:5:1: 5:19 error: can't find crate for `core`\nmain.rs:5 extern crate core;\n          ^~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nmake: *** [main.o] Error 101\n</code></pre>\n\n<p>main.rs looks like this:</p>\n\n<pre><code>#![no_std]\n#![allow(ctypes)]\n#![feature(lang_items)]\n\nextern crate core;\nuse core::prelude::*;\n\n#[no_mangle]\n#[no_split_stack]\npub fn main() {\n}\n</code></pre>\n\n<p>I suspect it is because I am trying to link to i686-unknown-linux-gnu but the core library doesn't exist for that platform. How do you install or build the libraries for that platform?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1421692089, "post_id": 28031155, "comment_id": 44447110, "body": "What&#39;s the signature of <code>self.command</code>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1421692158, "post_id": 28031155, "comment_id": 44447147, "body": "Also could you please provide the full code of your function, including its signature? It may be important."}], "answers": [{"comments": [{"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421693801, "post_id": 28031580, "comment_id": 44447923, "body": "I figured it out just before you posted - you&#39;re almost right, except the lifetime of the <code>Result</code> <code>&amp;str</code> is unrelated to the lifetime of the input. Specifically, it&#39;s <code>&amp;&#39;static str</code>. Looks like it was giving the <code>Result</code> <code>&amp;str</code> the same lifetime as the <code>command</code> parameter"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421693857, "post_id": 28031580, "comment_id": 44447950, "body": "Well, according to your signatures and elision rules it <i>is</i> related to the input."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421694522, "post_id": 28031580, "comment_id": 44448236, "body": "FWIW, I&#39;ve submitted an issue <a href=\"https://github.com/rust-lang/rust/issues/21400\" rel=\"nofollow noreferrer\">here</a>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1421693456, "creation_date": 1421693456, "answer_id": 28031580, "question_id": 28031155, "link": "https://stackoverflow.com/questions/28031155/is-my-borrow-checker-drunk/28031580#28031580", "title": "Is my borrow checker drunk?", "body": "<p>It looks like a bug to me.</p>\n\n<p>This signature:</p>\n\n<pre><code>fn command(self: &amp;mut GitConnect, command: &amp;str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;str&gt;\n</code></pre>\n\n<p>according to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0141-lifetime-elision.md#the-rules\" rel=\"nofollow\">lifetime elision rules</a>, should be equivalent to this one:</p>\n\n<pre><code>fn command&lt;'a, 'b&gt;(self: &amp;'a mut GitConnect, command: &amp;'b str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;'a str&gt;\n</code></pre>\n\n<p>And in fact if you rewrite your <code>command()</code> to use this expanded variant it should compile. Also if you use shorthand <code>self</code> argument definition:</p>\n\n<pre><code>fn command(&amp;mut self, command: &amp;str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;str&gt;\n</code></pre>\n\n<p>then it also compiles.</p>\n\n<p>It seems that currently</p>\n\n<pre><code>fn command(self: &amp;mut GitConnect, command: &amp;str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;str&gt;\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>fn command&lt;'a&gt;(self: &amp;'a mut GitConnect, command: &amp;'a str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;'a str&gt;\n</code></pre>\n\n<p>which gives exactly the same error for the correct reason because there is a lifetime error: <code>command</code> parameter's lifetime is asserted to be the same as <code>self</code>, so it won't work with local variables whose lifetime will be shorter than the one of <code>self</code>.</p>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 0, "accepted_answer_id": 28031580, "answer_count": 1, "score": 4, "last_activity_date": 1421693456, "creation_date": 1421691711, "last_edit_date": 1421692398, "question_id": 28031155, "link": "https://stackoverflow.com/questions/28031155/is-my-borrow-checker-drunk", "title": "Is my borrow checker drunk?", "body": "<blockquote>\n  <p>reference must be valid for the block at 50:74...\n  ...but borrowed value is only valid for the block at 50:74</p>\n</blockquote>\n\n<p>Right. So what's the problem?</p>\n\n<p>The block in question:</p>\n\n<pre><code>pub fn git_upload_pack(self: &amp;mut GitConnect) -&gt; Result&lt;String, &amp;str&gt; {\n    let c = format!(\"git-upload-pack {}\\0host={}\\0\", self.repo.path, self.repo.domain);\n\n    let mut out = String::new();\n    let data = try!(self.command(c.as_slice()));\n\n    for line in data.iter() {\n        out.push_str(from_utf8(line.as_slice()).unwrap());\n    }\n\n    Ok(out)\n}\n</code></pre>\n\n<p><code>self.command</code>:</p>\n\n<pre><code>fn command(self: &amp;mut GitConnect, command: &amp;str) -&gt; Result&lt;Vec&lt;Vec&lt;u8&gt;&gt;, &amp;str&gt; {\n</code></pre>\n\n<p>The full error:</p>\n\n<pre><code>src/protocol/git_connect.rs:54:38: 54:39 error: `c` does not live long enough\nsrc/protocol/git_connect.rs:54         let data = try!(self.command(c.as_slice()));\n                                                                    ^\n&lt;std macros&gt;:1:1: 6:60 note: in expansion of try!\nsrc/protocol/git_connect.rs:54:20: 54:53 note: expansion site\nsrc/protocol/git_connect.rs:50:75: 61:6 note: reference must be valid for the anonymous lifetime #1 defined on the block at 50:74...\nsrc/protocol/git_connect.rs:50     pub fn git_upload_pack(self: &amp;mut GitConnect) -&gt; Result&lt;String, &amp;str&gt; {\nsrc/protocol/git_connect.rs:51         let c = format!(\"git-upload-pack {}\\0host={}\\0\", self.repo.path, self.repo.domain);\nsrc/protocol/git_connect.rs:52 \nsrc/protocol/git_connect.rs:53         let mut out = String::new();\nsrc/protocol/git_connect.rs:54         let data = try!(self.command(c.as_slice()));\nsrc/protocol/git_connect.rs:55 \n                               ...\nsrc/protocol/git_connect.rs:50:75: 61:6 note: ...but borrowed value is only valid for the block at 50:74\nsrc/protocol/git_connect.rs:50     pub fn git_upload_pack(self: &amp;mut GitConnect) -&gt; Result&lt;String, &amp;str&gt; {\nsrc/protocol/git_connect.rs:51         let c = format!(\"git-upload-pack {}\\0host={}\\0\", self.repo.path, self.repo.domain);\nsrc/protocol/git_connect.rs:52 \nsrc/protocol/git_connect.rs:53         let mut out = String::new();\nsrc/protocol/git_connect.rs:54         let data = try!(self.command(c.as_slice()));\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421688586, "post_id": 28029565, "comment_id": 44445454, "body": "Based on your previous question, you should also state that you cannot move the <code>&#39;a</code> from the <code>Read</code> trait to the <code>read</code> method, which would be my first suggestion."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421689748, "post_id": 28029565, "comment_id": 44446012, "body": "But it seems that I cannot move it in this situation because I need to implement trait for U8AndStr&lt;&#39;a&gt;."}], "answers": [{"comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1421690167, "post_id": 28030450, "comment_id": 44446254, "body": "Thank you for the reply! Maybe you can help me to find out the correct way to implement my idea in rust using currently available abstractions?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1421690521, "post_id": 28030450, "comment_id": 44446414, "body": "Unfortunately, I don&#39;t think its is currently possible. I&#39;ve also encountered this when I tried to improve the type safety of some of my code (though I needed parameterized associated types, not <code>Self</code>). I couldn&#39;t found a way around it."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1421689263, "last_edit_date": 1421689263, "creation_date": 1421688943, "answer_id": 28030450, "question_id": 28029565, "link": "https://stackoverflow.com/questions/28029565/confused-about-using-trait-with-lifetime-as-generic-parameter-constraint/28030450#28030450", "title": "Confused about using trait with lifetime as generic parameter constraint", "body": "<p>Unfortunately, what you want to do is inexpressible in Rust at the moment.</p>\n\n<p>The signature of <code>Read</code> trait that actually would work is as follows (in pseudo-Rust):</p>\n\n<pre><code>trait&lt;'r&gt; Read for Self&lt;'r&gt; {\n    fn read&lt;'a&gt;(mem: &amp;'a [u8]) -&gt; Result&lt;Self&lt;'a&gt;, String&gt;;  // '\n}\n</code></pre>\n\n<p>That is, <code>Self</code> must be a higher-kinded type in its lifetime parameter. This requires support for higher-kinded types, which is a very desired feature in the Rust community but which is still yet to be implemented.</p>\n\n<p>The problem with the original signature:</p>\n\n<pre><code>trait Read&lt;'a&gt; {\n    fn read(mem: &amp;'a [u8]) -&gt; Result&lt;Self, String&gt;;\n}\n</code></pre>\n\n<p>is that <code>'a</code> is a parameter to the trait. When this trait is used as a trait bound:</p>\n\n<pre><code>fn compare_to_smth&lt;'a, T&gt;(value: &amp;T) -&gt; bool where T: PartialEq+Read&lt;'a&gt;\n</code></pre>\n\n<p>it means that <em>the caller</em> of this function chooses the actual lifetime parameter. For example, the caller may choose <code>'static</code>:</p>\n\n<pre><code>fn compare_to_smth&lt;T&gt;(value: &amp;T) -&gt; bool where T: PartialEq+Read&lt;'static&gt;\n</code></pre>\n\n<p>However, the function uses <code>&amp;[u8]</code> whose lifetime is not <code>'static</code>.</p>\n\n<p>In fact, this concrete example may be not exactly correct due to variance (I imagine it would be sound for this lifetime to be <code>'static</code> here, but variance of lifetimes itself is somewhat confusing, so I'm not really sure), but nevertheless the general idea is the same: in order for this to work the <code>Read::read</code> method must be polymorphic in the lifetime of its argument and result, but you can't write such signature yet.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 1, "last_activity_date": 1421753900, "last_edit_date": 1421753900, "creation_date": 1421752089, "answer_id": 28043815, "question_id": 28029565, "link": "https://stackoverflow.com/questions/28029565/confused-about-using-trait-with-lifetime-as-generic-parameter-constraint/28043815#28043815", "title": "Confused about using trait with lifetime as generic parameter constraint", "body": "<p>I think the issue might be more in the signature of <code>compare_to_smth</code>.</p>\n\n<pre><code>fn compare_to_smth&lt;'a, T&gt;(value: &amp;'a T) // this implies a T: 'a bound\n                       // because otherwise we would not be able to\n                       // have a &amp;'a T (references can't live longer\n                       // than the thing they reference)\n</code></pre>\n\n<p>but then inside the function you're doing:</p>\n\n<pre><code>let smth_value: T = Read::read(mem).unwrap(); \n                                 // give me something of type T that\n                                 // lives less than T\n</code></pre>\n\n<p>I may be wrong, but I don't think this depends on how <code>Read</code> is defined and how sophisticated the type system can become in the future, as whatever you write on the right side doesn't change the fact that you're expecting a T on the left side (and T has to outlive <code>'a</code>).</p>\n\n<p>A \"sufficiently smart compiler\" might be able to see that smth_value is actually not living longer than <code>'a</code> and that what you're doing is safe, but in general this would be unsafe.\nI'm sure that using an unsafe transmute in <code>compare_to_smth</code> completely defeats your purpose, but just to demonstrate, this works:</p>\n\n<pre><code>fn compare_to_smth&lt;'a, T&gt;(value: &amp;'a T) -&gt; bool\n    where T: Read&lt;'a&gt; + PartialEq\n{\n    let mem: &amp;[u8] = &amp;[0x01, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37];\n    let smth_value = &lt;U8AndStr as Read&gt;::read(mem).unwrap();\n    let vl: &amp;U8AndStr = unsafe{ std::mem::transmute(value) };\n\n    smth_value == *vl\n}\n</code></pre>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1022, "favorite_count": 0, "accepted_answer_id": 28030450, "answer_count": 2, "score": 2, "last_activity_date": 1421753900, "creation_date": 1421685868, "question_id": 28029565, "link": "https://stackoverflow.com/questions/28029565/confused-about-using-trait-with-lifetime-as-generic-parameter-constraint", "title": "Confused about using trait with lifetime as generic parameter constraint", "body": "<p>I am trying to make some kind of decoder, that will be able to deserialize entries without actually copying memory, just by mapping values to some memory regions. That is what I currently managed to do (simplified for testcase):</p>\n\n<pre><code>#![allow(unstable)]\n\ntrait CastAbility: Sized { }\nimpl CastAbility for u64 { }\nimpl CastAbility for u32 { }\nimpl CastAbility for u16 { }\nimpl CastAbility for u8 { }\n\ntrait Cast {\n    fn cast&lt;'a&gt;(mem: &amp;'a [u8]) -&gt; Result&lt;&amp;'a Self, String&gt;;\n}\n\nimpl&lt;T&gt; Cast for T where T: CastAbility {\n    fn cast&lt;'a&gt;(mem: &amp;'a [u8]) -&gt; Result&lt;&amp;'a T, String&gt; {\n        if mem.len() != std::mem::size_of::&lt;T&gt;() { \n            Err(\"invalid size\".to_string())\n        } else {\n            Ok(unsafe { std::mem::transmute(mem.as_ptr()) })\n        }\n    }\n}\n\nimpl Cast for str {\n    fn cast&lt;'a&gt;(mem: &amp;'a [u8]) -&gt; Result&lt;&amp;'a str, String&gt; {\n        Ok(unsafe { std::mem::transmute(std::raw::Slice { data: mem.as_ptr(), len: mem.len() }) })\n    }\n}\n\ntrait Read&lt;'a&gt; {\n    fn read(mem: &amp;'a [u8]) -&gt; Result&lt;Self, String&gt;;\n}\n\n#[derive(Show, PartialEq)]\nstruct U8AndStr&lt;'a&gt; {\n    value_u8: &amp;'a u8,\n    value_str: &amp;'a str,\n}\n\nimpl&lt;'a&gt; Read&lt;'a&gt; for U8AndStr&lt;'a&gt; {\n    fn read(mem: &amp;'a [u8]) -&gt; Result&lt;U8AndStr, String&gt; {\n        Ok(U8AndStr {\n            value_u8: try!(Cast::cast(mem.slice(0, 1))),\n            value_str: try!(Cast::cast(mem.slice(1, mem.len()))),\n        })\n    }\n}\n\nfn main() {\n    let mem: &amp;[u8] = &amp;[0x01, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37];\n    let value: U8AndStr = Read::read(mem).unwrap();\n\n    println!(\"value: {:?}\", value);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/ITgBDy\" rel=\"nofollow\">playpen</a></p>\n\n<p>In fact it compiles and even works, but now I cannot understand how to use my <em>Read</em> trait as generic parameter. For example, suppose I want to compare a value to a decoded result of some memory area:</p>\n\n<pre><code>fn compare_to_smth&lt;'a, T&gt;(value: &amp;'a T) -&gt; bool where T: PartialEq+Read&lt;'a&gt; {\n    let mem: &amp;[u8] = &amp;[0x01, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37];\n    let smth_value: T = Read::read(mem).unwrap();\n    smth_value == *value\n}\n\nfn main() {\n    let value = U8AndStr { value_u8: &amp;1, value_str: \"01234567\" };\n    assert!(compare_to_smth(&amp;value));\n}\n</code></pre>\n\n<p>It fails with \"borrowed value does not live long enough\", and I can guess why: because <em>mem</em> lifetime is the function body, not <em>'a</em>, as I did specify in signature for input parameter. So I tried to use second lifetime paramater as shown:</p>\n\n<pre><code>fn compare_to_smth&lt;'a, 'b, T&gt;(value: &amp;'a T) -&gt; bool where T: PartialEq+Read&lt;'b&gt; {\n</code></pre>\n\n<p>But it also didn't work for obvious reason. So I really don't understand how to make <em>compare_to_smth</em> work without passing memory chunk from outside. Is there any solution, or I should refactor the code somehow?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1421684361, "post_id": 28028854, "comment_id": 44443011, "body": "You may also want to explain why you want to do this. I&#39;d suggest that you keep things as a enum throughout, and maybe have a parse step that converts back if if really need it."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1421745977, "post_id": 28028854, "comment_id": 44466727, "body": "C error codes: I&#39;m calling a C function which may return an error as an integer. I want my error codes to be compatible. I could of course use an enum handling each specifically, but that&#39;s extra code."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421753213, "post_id": 28028854, "comment_id": 44471042, "body": "On second thoughts, adapting <code>MyEnum</code> to <code>enum MyEnum { A = 1, B, C, Other(i32) }</code> is probably a better solution for my problem. I&#39;ll leave the original question up for other users, however (I have certainly wanted to do this before, whether out of bad habits or lack of good alternatives I do not know)."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421753646, "post_id": 28028854, "comment_id": 44471300, "body": "Make that something like <code>enum Codes { A = 1, B, C }; enum MyEnum { Code(Codes), Other(i32) };</code>."}, {"owner": {"reputation": 32321, "user_id": 173397, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/pqKT8.jpg?s=128&g=1", "display_name": "pm100", "link": "https://stackoverflow.com/users/173397/pm100"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1597190824, "post_id": 28028854, "comment_id": 112051391, "body": "@shepmaster same here, I am decoding instructions. I proudly typed the meanings of a nibble into an enum (thinking &quot;I am a good rust person, no #defines for me&quot;) and got told nope. I guess I just have to use a set of consts"}], "answers": [{"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": false, "score": 39, "last_activity_date": 1544747107, "last_edit_date": 1544747107, "creation_date": 1421685007, "answer_id": 28029279, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/28029279#28029279", "title": "How do I match enum values with an integer?", "body": "<p>You can derive <code>FromPrimitive</code>. Using Rust 2018 simplified imports syntax:</p>\n\n<pre><code>use num_derive::FromPrimitive;    \nuse num_traits::FromPrimitive;\n\n#[derive(FromPrimitive)]\nenum MyEnum {\n    A = 1,\n    B,\n    C,\n}\n\nfn main() {\n    let x = 2;\n\n    match FromPrimitive::from_i32(x) {\n        Some(MyEnum::A) =&gt; println!(\"Got A\"),\n        Some(MyEnum::B) =&gt; println!(\"Got B\"),\n        Some(MyEnum::C) =&gt; println!(\"Got C\"),\n        None            =&gt; println!(\"Couldn't convert {}\", x),\n    }\n}\n</code></pre>\n\n<p>In your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.2\"\n</code></pre>\n\n<p>More details in <a href=\"https://github.com/rust-num/num-derive\" rel=\"noreferrer\">num-derive crate</a>, see esp. <a href=\"https://github.com/rust-num/num-derive/blob/master/tests/trivial.rs\" rel=\"noreferrer\">sample uses in tests</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 2, "creation_date": 1421746189, "post_id": 28029667, "comment_id": 44466839, "body": "Match-guards is a good last-resort idea. Assuming a representation of the enum in memory is however something I really don&#39;t want to do \u2014 it could well break with some new Rust version. Avoiding unsafe code is the biggest reason for using Rust in the first place!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1424470390, "post_id": 28029667, "comment_id": 45577671, "body": "I&#39;d probably do this and wrap it up as a method on <code>MyEnum</code>. Then you can call <code>MyEnum::from_integer</code> or whatever."}], "tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": false, "score": 26, "last_activity_date": 1421686140, "creation_date": 1421686140, "answer_id": 28029667, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/28029667#28029667", "title": "How do I match enum values with an integer?", "body": "<p>You can take advantage of match guards to write an equivalent, but clunkier, construction:</p>\n\n<pre><code>match x {\n    x if x == MyEnum::A as i32 =&gt; ...,\n    x if x == MyEnum::B as i32 =&gt; ...,\n    x if x == MyEnum::C as i32 =&gt; ...,\n    _ =&gt; ...\n}\n</code></pre>\n\n<p><code>std::mem::transmute</code> can also be used:</p>\n\n<pre><code>let y: MyEnum = unsafe { transmute(x as i8) };\n</code></pre>\n\n<p>But this requires that you know the size of the enum, so you can cast to an appropriate scalar first, and will also produce undefined behavior if <code>x</code> is not a valid value for the enum.</p>\n"}, {"tags": [], "owner": {"reputation": 3054, "user_id": 115030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15c74c0974c6cc25c194a2737e2d6747?s=128&d=identicon&r=PG", "display_name": "Anders Kaseorg", "link": "https://stackoverflow.com/users/115030/anders-kaseorg"}, "is_accepted": false, "score": 15, "last_activity_date": 1520306592, "last_edit_date": 1520306592, "creation_date": 1428557865, "answer_id": 29530566, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/29530566#29530566", "title": "How do I match enum values with an integer?", "body": "<p><a href=\"https://doc.rust-lang.org/0.12.0/std/num/trait.FromPrimitive.html\" rel=\"noreferrer\"><code>std::num::FromPrimitive</code></a> is marked as <a href=\"https://github.com/rust-lang/rust/issues/16920\" rel=\"noreferrer\">unstable</a> and will not be included in Rust 1.0.  As a workaround, I wrote the <strong><a href=\"https://crates.io/crates/enum_primitive\" rel=\"noreferrer\"><code>enum_primitive</code> crate</a></strong>, which exports a macro <code>enum_from_primitive!</code> that wraps an <code>enum</code> declaration and automatically adds an implementation of <a href=\"https://rust-num.github.io/num/num/trait.FromPrimitive.html\" rel=\"noreferrer\"><code>num::FromPrimitive</code></a> (from the <a href=\"https://crates.io/crates/num\" rel=\"noreferrer\"><code>num</code> crate</a>).  Example:</p>\n\n<pre><code>#[macro_use]\nextern crate enum_primitive;\nextern crate num;\n\nuse num::FromPrimitive;\n\nenum_from_primitive! {\n    #[derive(Debug, PartialEq)]\n    enum FooBar {\n        Foo = 17,\n        Bar = 42,\n        Baz,\n    }\n}\n\nfn main() {\n    assert_eq!(FooBar::from_i32(17), Some(FooBar::Foo));\n    assert_eq!(FooBar::from_i32(42), Some(FooBar::Bar));\n    assert_eq!(FooBar::from_i32(43), Some(FooBar::Baz));\n    assert_eq!(FooBar::from_i32(91), None);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1487734438, "post_id": 42382144, "comment_id": 71913277, "body": "<a href=\"http://stackoverflow.com/a/28029667/155423\">This answer</a> already mentions <code>transmute</code> and only requires the standard library. Seems like this answer should just be a comment on that answer to recommend using <code>repr</code>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487735888, "post_id": 42382144, "comment_id": 71913671, "body": "@Shepmaster, I considered editing or suggesting edits to the other answer. But think it would have made it into a different answer. Whatever the case, I don&#39;t mind if this answer is copy-pasted into another, it just seems a bit odd to do so."}, {"owner": {"reputation": 693, "user_id": 2139902, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0050129417b8d5d74968630b13da64c?s=128&d=identicon&r=PG", "display_name": "Sean Burton", "link": "https://stackoverflow.com/users/2139902/sean-burton"}, "edited": false, "score": 4, "creation_date": 1503145133, "post_id": 42382144, "comment_id": 78500990, "body": "Using an unsafe function to do something as simple as this seems like a very bad practice..."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 693, "user_id": 2139902, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0050129417b8d5d74968630b13da64c?s=128&d=identicon&r=PG", "display_name": "Sean Burton", "link": "https://stackoverflow.com/users/2139902/sean-burton"}, "edited": false, "score": 1, "creation_date": 1503149715, "post_id": 42382144, "comment_id": 78502430, "body": "@sean-burton - agree you wouldn&#39;t want your code riddled with unsafe transmute, OTOH - if your interfacing a C library, you don&#39;t always have an option besides writing some lookup table which is tedious, needs to be kept in sync and possibly introduces human error. So AFAICS this is the lesser of two evils."}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 12, "last_activity_date": 1487749757, "last_edit_date": 1495542863, "creation_date": 1487734056, "answer_id": 42382144, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/42382144#42382144", "title": "How do I match enum values with an integer?", "body": "<p>If you're sure the values of the integer are included in the enum, you can use <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"noreferrer\"><code>std::mem::transmute</code></a>.</p>\n\n<p>This should be used with <a href=\"https://stackoverflow.com/questions/41648339\"><code>#[repr(..)]</code></a> to control the underlying type.</p>\n\n<p>Complete Example:</p>\n\n<pre><code>#[repr(i32)]\nenum MyEnum {\n    A = 1, B, C\n}\n\nfn main() {\n    let x = MyEnum::C;\n    let y = x as i32;\n    let z: MyEnum = unsafe { ::std::mem::transmute(y) };\n\n    // match the enum that came from an int\n    match z {\n        MyEnum::A =&gt; { println!(\"Found A\"); }\n        MyEnum::B =&gt; { println!(\"Found B\"); }\n        MyEnum::C =&gt; { println!(\"Found C\"); }\n    }\n}\n</code></pre>\n\n<p>Note that unlike some of the other answers, this only requires Rust's standard library.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1562414957, "last_edit_date": 1562414957, "creation_date": 1526313433, "answer_id": 50334523, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/50334523#50334523", "title": "How do I match enum values with an integer?", "body": "<p>If the integer you are matching on is based on the <em>order</em> of the variants of the enum, you can use <a href=\"https://crates.io/crates/strum_macros\" rel=\"nofollow noreferrer\">strum</a> to generate an iterator of the enum variants and take the correct one:</p>\n\n<pre><code>#[macro_use]\nextern crate strum_macros; // 0.9.0\nextern crate strum;        // 0.9.0\n\nuse strum::IntoEnumIterator;\n\n#[derive(Debug, PartialEq, EnumIter)]\nenum MyEnum {\n    A = 1,\n    B,\n    C,\n}\n\nfn main() {\n    let e = MyEnum::iter().nth(2);\n    assert_eq!(e, Some(MyEnum::C));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "is_accepted": false, "score": 2, "last_activity_date": 1537148293, "creation_date": 1537148293, "answer_id": 52359792, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/52359792#52359792", "title": "How do I match enum values with an integer?", "body": "<p>I wrote a simple macro which converts the numerical value back to the enum:</p>\n\n<pre><code>macro_rules! num_to_enum {\n    ($num:expr =&gt; $enm:ident&lt;$tpe:ty&gt;{ $($fld:ident),+ }; $err:expr) =&gt; ({\n        match $num {\n            $(_ if $num == $enm::$fld as $tpe =&gt; { $enm::$fld })+\n            _ =&gt; $err\n        }\n    });\n}\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre><code>#[repr(u8)] #[derive(Debug, PartialEq)]\nenum MyEnum {\n    Value1 = 1,\n    Value2 = 2\n}\n\nfn main() {\n    let num = 1u8;\n    let enm: MyEnum = num_to_enum!(\n        num =&gt; MyEnum&lt;u8&gt;{ Value1, Value2 };\n        panic!(\"Cannot convert number to `MyEnum`\")\n    );\n    println!(\"`enm`: {:?}\", enm);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573488969, "post_id": 57578431, "comment_id": 103889714, "body": "I can&#39;t understand, looks like magic. <code>x</code> has type <code>i32</code> right? Then how does Rust know that it must be matched against <code>MyEnum</code> (and not some other enum that also implemented the trait) variants?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 2, "creation_date": 1573489243, "post_id": 57578431, "comment_id": 103889836, "body": "@NurbolAlpysbayev it must use the implementation of <code>TryInto</code> that corresponds to <code>MyEnum</code> because that&#39;s the type of the value that is used in the match arms (<code>Ok(MyEnum::A)</code>). <a href=\"https://stackoverflow.com/q/44737154/155423\">How does Rust infer resultant types from From::&lt;&gt;::from()?</a>; <a href=\"https://stackoverflow.com/q/37542971/155423\">How does Rust&#39;s type inference work across multiple statements?</a>"}, {"owner": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573489379, "post_id": 57578431, "comment_id": 103889895, "body": "I&#39;ll read the links, but in short, Rust looks at the first arm and makes sure the following arms are with the same enum type (and then also ensures exhaustiveness), am I right? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bcae7c7ac3c4bdc8a64c2710ef9e7cd8\" rel=\"nofollow noreferrer\">Looks</a> like this is the case."}, {"owner": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573490540, "post_id": 57578431, "comment_id": 103890456, "body": "Unfortunately, I&#39;ve found that this solution may have a disatvantage in that exhaustiveness is not checked in the <code>try_from</code> function. So basically it&#39;s not reliable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573490708, "post_id": 57578431, "comment_id": 103890543, "body": "@NurbolAlpysbayev you seem to be using multiple (non-standard?) meanings for the word &quot;exhaustive&quot;. You may be interested in <a href=\"https://stackoverflow.com/q/58715081/155423\">How to ensure every enum variant can be returned from a specific function at compile time?</a>."}, {"owner": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573491025, "post_id": 57578431, "comment_id": 103890699, "body": "I believe I use the meaning from the <a href=\"https://doc.rust-lang.org/1.30.0/book/second-edition/ch06-02-match.html#matches-are-exhaustive\" rel=\"nofollow noreferrer\">Rust Book</a>. Regarding the link, I am not sure how that can be used. Anyway, the top voted answer seems to work. I just wish there&#39;d be a zero-dependency, reliable (with exhaustiveness check) and preferably concise solution."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573491214, "post_id": 57578431, "comment_id": 103890807, "body": "To be clear, the derived implementation of <code>FromPrimitive</code> looks the same as the <code>TryFrom</code> implementation in this answer (using <code>Option</code> instead of <code>Result</code>, but otherwise...)"}, {"owner": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573491447, "post_id": 57578431, "comment_id": 103890923, "body": "I may really miss something, but I tested that, and no, it doesn&#39;t look the same in terms of reliability. Just remove <code>x if x == MyEnum::B as i32 =&gt; Ok(MyEnum::B)</code> line and you will get nothing but a &quot;dead code&quot; warning. I posted the link to the playground somewhere above. I really wished I could use some &quot;standard&quot;, reliable approach, but this is not it, probably."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11799, "user_id": 9259778, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/R157q.jpg?s=128&g=1", "display_name": "Nurbol Alpysbayev", "link": "https://stackoverflow.com/users/9259778/nurbol-alpysbayev"}, "edited": false, "score": 0, "creation_date": 1573491507, "post_id": 57578431, "comment_id": 103890953, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/202158/discussion-between-shepmaster-and-nurbol-alpysbayev\">continue this discussion in chat</a>."}, {"owner": {"reputation": 29866, "user_id": 930450, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/se3CE.png?s=128&g=1", "display_name": "Ixx", "link": "https://stackoverflow.com/users/930450/ixx"}, "edited": false, "score": 0, "creation_date": 1611687263, "post_id": 57578431, "comment_id": 116529827, "body": "It would be nice if Rust had something built in to convert the integer back to the enum (given that the assignment to ints is also built in). Writing the <code>try_from</code> like this is verbose and error prone..."}, {"owner": {"reputation": 29866, "user_id": 930450, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/se3CE.png?s=128&g=1", "display_name": "Ixx", "link": "https://stackoverflow.com/users/930450/ixx"}, "edited": false, "score": 0, "creation_date": 1611687482, "post_id": 57578431, "comment_id": 116529911, "body": "Ah, missed the macro. Something built in would still be better."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 29, "last_activity_date": 1603651913, "last_edit_date": 1603651913, "creation_date": 1566320385, "answer_id": 57578431, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer/57578431#57578431", "title": "How do I match enum values with an integer?", "body": "<p>Since Rust 1.34, I recommend implementing <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\" rel=\"noreferrer\"><code>TryFrom</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::convert::TryFrom;\n\nimpl TryFrom&lt;i32&gt; for MyEnum {\n    type Error = ();\n\n    fn try_from(v: i32) -&gt; Result&lt;Self, Self::Error&gt; {\n        match v {\n            x if x == MyEnum::A as i32 =&gt; Ok(MyEnum::A),\n            x if x == MyEnum::B as i32 =&gt; Ok(MyEnum::B),\n            x if x == MyEnum::C as i32 =&gt; Ok(MyEnum::C),\n            _ =&gt; Err(()),\n        }\n    }\n}\n</code></pre>\n<p>Then you can use <a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html\" rel=\"noreferrer\"><code>TryInto</code></a> and handle the possible error:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::convert::TryInto;\n\nfn main() {\n    let x = MyEnum::C as i32;\n\n    match x.try_into() {\n        Ok(MyEnum::A) =&gt; println!(&quot;a&quot;),\n        Ok(MyEnum::B) =&gt; println!(&quot;b&quot;),\n        Ok(MyEnum::C) =&gt; println!(&quot;c&quot;),\n        Err(_) =&gt; eprintln!(&quot;unknown number&quot;),\n    }\n}\n</code></pre>\n<p>If you have a great number of variants, a macro can be used to create a parallel implementation of <code>TryFrom</code> automatically based on the definition of the enum:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! back_to_enum {\n    ($(#[$meta:meta])* $vis:vis enum $name:ident {\n        $($(#[$vmeta:meta])* $vname:ident $(= $val:expr)?,)*\n    }) =&gt; {\n        $(#[$meta])*\n        $vis enum $name {\n            $($(#[$vmeta])* $vname $(= $val)?,)*\n        }\n\n        impl std::convert::TryFrom&lt;i32&gt; for MyEnum {\n            type Error = ();\n\n            fn try_from(v: i32) -&gt; Result&lt;Self, Self::Error&gt; {\n                match v {\n                    $(x if x == $name::$vname as i32 =&gt; Ok($name::$vname),)*\n                    _ =&gt; Err(()),\n                }\n            }\n        }\n    }\n}\n\nback_to_enum! {\n    enum MyEnum {\n        A = 1,\n        B,\n        C,\n    }\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/58715081/155423\">How to ensure every enum variant can be returned from a specific function at compile time?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33999341/155423\">Generating documentation in macros</a></li>\n</ul>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 40885, "favorite_count": 9, "answer_count": 7, "score": 47, "last_activity_date": 1603651913, "creation_date": 1421683649, "last_edit_date": 1520306358, "question_id": 28028854, "link": "https://stackoverflow.com/questions/28028854/how-do-i-match-enum-values-with-an-integer", "title": "How do I match enum values with an integer?", "body": "<p>I can get an integer value of an enums like this:</p>\n\n<pre><code>enum MyEnum {\n    A = 1,\n    B,\n    C,\n}\n\nlet x = MyEnum::C as i32;\n</code></pre>\n\n<p>but I can't seem to do this:</p>\n\n<pre><code>match x {\n    MyEnum::A =&gt; {}\n    MyEnum::B =&gt; {}\n    MyEnum::C =&gt; {}\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>How can I either match against the values of the enum or try to convert <code>x</code> back to a <code>MyEnum</code>?</p>\n\n<p>I can see a function like this being useful for enums, but it probably doesn't exist:</p>\n\n<pre><code>impl MyEnum {\n    fn from&lt;T&gt;(val: &amp;T) -&gt; Option&lt;MyEnum&gt;;\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "edited": false, "score": 0, "creation_date": 1421681434, "post_id": 28026670, "comment_id": 44441252, "body": "This is all good information. In general, in Rust and C, I wouldn&#39;t write code like that, though it does come up on occasion. I was basically just wondering how to express an Owner/Ownee relationship in cases where the Ownee (wheel) needs to know about the Owner."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421683102, "post_id": 28026670, "comment_id": 44442288, "body": "@njpaul You may want to read the <a href=\"http://doc.rust-lang.org/std/rc/index.html\" rel=\"nofollow noreferrer\"><code>std::rc</code> overview docs</a>. They have a good example of a owner-ownee relationship."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1421677496, "last_edit_date": 1421677496, "creation_date": 1421677065, "answer_id": 28026670, "question_id": 28026423, "link": "https://stackoverflow.com/questions/28026423/what-is-the-rust-equivalent-of-this-c-structure/28026670#28026670", "title": "What is the Rust equivalent of this C structure?", "body": "<p>Well, the literal answer would be:</p>\n\n<pre><code>struct Car {\n    name: &amp;'static str, // '\n    wheels: [Wheel; 4],\n}\n\nstruct Wheel {\n    size: i32,\n    owner: *mut Car,\n}\n</code></pre>\n\n<p>But that's not <em>hugely</em> helpful since <code>owner</code> can't be used outside of <code>unsafe</code> code since it's a bare pointer.  This, however, gets to a limitation of Rust in that it's impossible in practice to have cyclic borrowed references; that is, you can't use a <code>&amp;Car</code> for <code>owner</code>.</p>\n\n<p>Which begs the question: what is it that you <em>really</em> want to express, here?  Does a <code>Wheel</code> <em>actually</em> need to know about the <code>Car</code> it's attached to?  If not, you could just drop <code>owner</code> and it'd all be fine.</p>\n\n<p>If it does, can you live with <code>unsafe</code> blocks peppering your code (aside: this should generally be your option of last resort)?  If not, you need some notion of shared ownership.  In that case, do you only require read-only access to this structure?  If so, perhaps you want <code>Rc&lt;Car&gt;</code>.  If not, you might need <code>Rc&lt;Cell&lt;Car&gt;&gt;</code>... unless you're working in a threaded environment, in which case you'll need <code>Arc&lt;Mutex&lt;Car&gt;&gt;</code>... maybe.</p>\n\n<p>I suppose what I'm getting at is: there's an <em>obvious</em>, direct equivalent, but if you're actually trying to port the semantics... you're going to need to be more specific about what you're trying to do, not <em>how</em> you're trying to do it.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 148, "favorite_count": 1, "accepted_answer_id": 28026670, "answer_count": 1, "score": 1, "last_activity_date": 1421677496, "creation_date": 1421676280, "question_id": 28026423, "link": "https://stackoverflow.com/questions/28026423/what-is-the-rust-equivalent-of-this-c-structure", "title": "What is the Rust equivalent of this C structure?", "body": "<p>I'm going through the Rust book and am on the ownership chapter. They have a sample of a car, and four wheels. The wheels know their owner (car), but the car doesn't know its wheels. That got me to thinking, what is the Rust equivalent of this C code?</p>\n\n<pre><code>struct Car;\nstruct Wheel {\n    int size;\n    struct Car *owner;\n};\n\nstruct Car {\n    char const *name;\n    Wheel wheels[4];\n};\n</code></pre>\n"}, {"tags": ["enums", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1401, "user_id": 598513, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0e4987226c3be3b081257ba7bfa9dc7?s=128&d=identicon&r=PG", "display_name": "Clemens Tolboom", "link": "https://stackoverflow.com/users/598513/clemens-tolboom"}, "edited": false, "score": 2, "creation_date": 1598199544, "post_id": 28024504, "comment_id": 112373509, "body": "This is not the answer"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 64, "last_activity_date": 1485121254, "last_edit_date": 1485121254, "creation_date": 1421669864, "answer_id": 28024504, "question_id": 28024373, "link": "https://stackoverflow.com/questions/28024373/is-there-a-way-to-print-enum-values/28024504#28024504", "title": "Is there a way to print enum values?", "body": "<p>You can derive an implementation of <code>std::format::Debug</code>:</p>\n\n<pre><code>#[derive(Debug)]\nenum Suit {\n    Heart,\n    Diamond,\n    Spade,\n    Club\n}\n\nfn main() {\n    let s = Suit::Heart;\n    println!(\"{:?}\", s);\n}\n</code></pre>\n\n<p>It is not possible to derive <code>Display</code> because <code>Display</code> is aimed at displaying to humans and the compiler cannot automatically decide what is an appropriate style for that case. <code>Debug</code> is intended for programmers, so an internals-exposing view can be automatically generated.</p>\n"}, {"comments": [{"owner": {"reputation": 425, "user_id": 1609999, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a9ed3aba567b518c4750e7581cc89d82?s=128&d=identicon&r=PG", "display_name": "wonderflow", "link": "https://stackoverflow.com/users/1609999/wonderflow"}, "edited": false, "score": 0, "creation_date": 1566463903, "post_id": 45893535, "comment_id": 101666879, "body": "Why when I try to write like this, it always print the first one <code>\u2665</code>.  <code>Heart =&gt; write!(f, &quot;\u2665&quot;)</code> <code>Diamond =&gt; write!(f, &quot;\u2666&quot;)</code>"}, {"owner": {"reputation": 986, "user_id": 3994927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zk8k1.jpg?s=128&g=1", "display_name": "Matilda Smeds", "link": "https://stackoverflow.com/users/3994927/matilda-smeds"}, "reply_to_user": {"reputation": 425, "user_id": 1609999, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a9ed3aba567b518c4750e7581cc89d82?s=128&d=identicon&r=PG", "display_name": "wonderflow", "link": "https://stackoverflow.com/users/1609999/wonderflow"}, "edited": false, "score": 0, "creation_date": 1566486239, "post_id": 45893535, "comment_id": 101679758, "body": "To print \u2666 you need to create a reference to <code>Suit::Diamond</code> and then print it. For instance <code>let diamond = Suit::Diamond; println!(&quot;{}&quot;, diamond);</code>"}], "tags": [], "owner": {"reputation": 986, "user_id": 3994927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zk8k1.jpg?s=128&g=1", "display_name": "Matilda Smeds", "link": "https://stackoverflow.com/users/3994927/matilda-smeds"}, "is_accepted": false, "score": 53, "last_activity_date": 1566486278, "last_edit_date": 1566486278, "creation_date": 1503736355, "answer_id": 45893535, "question_id": 28024373, "link": "https://stackoverflow.com/questions/28024373/is-there-a-way-to-print-enum-values/45893535#45893535", "title": "Is there a way to print enum values?", "body": "<p>The <code>Debug</code> trait prints out the name of the <code>Enum</code>variant.</p>\n\n<p>If you need to format the output, you can implement <code>Display</code> for your <code>Enum</code> like so:</p>\n\n<pre><code>use std::fmt;\n\nenum Suit {\n    Heart,\n    Diamond,\n    Spade,\n    Club\n}\n\nimpl fmt::Display for Suit {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n       match *self {\n           Suit::Heart =&gt; write!(f, \"\u2665\"),\n           Suit::Diamond =&gt; write!(f, \"\u2666\"),\n           Suit::Spade =&gt; write!(f, \"\u2660\"),\n           Suit::Club =&gt; write!(f, \"\u2663\"),\n       }\n    }\n}\n\nfn main() {\n    let heart = Suit::Heart;\n    println!(\"{}\", heart);\n}\n</code></pre>\n"}], "owner": {"reputation": 6576, "user_id": 11951, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/0158871402c1ecfa57952e8a379cfd10?s=128&d=identicon&r=PG", "display_name": "Daniel Lucraft", "link": "https://stackoverflow.com/users/11951/daniel-lucraft"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 21596, "favorite_count": 4, "accepted_answer_id": 28024504, "answer_count": 2, "score": 42, "last_activity_date": 1566486278, "creation_date": 1421669432, "last_edit_date": 1485121367, "question_id": 28024373, "link": "https://stackoverflow.com/questions/28024373/is-there-a-way-to-print-enum-values", "title": "Is there a way to print enum values?", "body": "<p>Is there an easy way to format and print enum values? I expected that they'd have a default implementation of <code>std::fmt::Display</code>, but that doesn't appear to be the case. </p>\n\n<pre><code>enum Suit {\n    Heart,\n    Diamond,\n    Spade,\n    Club\n}\n\nfn main() {\n    let s: Suit = Suit::Heart;\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Desired output: <code>Heart</code></p>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Suit: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:10:20\n   |\n10 |     println!(\"{}\", s);\n   |                    ^ the trait `std::fmt::Display` is not implemented for `Suit`\n   |\n   = note: `Suit` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n"}, {"tags": ["ruby", "go", "rust"], "comments": [{"owner": {"reputation": 13244, "user_id": 317915, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/86d01c87cc6f22c8445661b72b6b0d78?s=128&d=identicon&r=PG", "display_name": "topskip", "link": "https://stackoverflow.com/users/317915/topskip"}, "edited": false, "score": 0, "creation_date": 1421684101, "post_id": 28021991, "comment_id": 44442844, "body": "You could choose to use a calculator to verify the results <i>before</i> assuming that there is a math error in/with Rust. (Hint: don&#39;t use 999999999 as a number but perhaps 3 or so)."}], "answers": [{"tags": [], "owner": {"reputation": 3551, "user_id": 2137314, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/LjaqW.jpg?s=128&g=1", "display_name": "siritinga", "link": "https://stackoverflow.com/users/2137314/siritinga"}, "is_accepted": true, "score": 5, "last_activity_date": 1421661998, "creation_date": 1421661998, "answer_id": 28022086, "question_id": 28021991, "link": "https://stackoverflow.com/questions/28021991/rust-math-error/28022086#28022086", "title": "Rust math error", "body": "<p>You are not summing the last element (99999999) in Go and Ruby: </p>\n\n<pre><code>func main() {\n    var sum = int64(0)\n    for i := int64(1); i &lt;= 99999999; i++ {\n        sum += i\n    }\n    fmt.Println(sum)\n}\n\n4999999950000000\n</code></pre>\n"}], "owner": {"reputation": 2835, "user_id": 143511, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/561f6b93e60563dabb66fb9802d06fa3?s=128&d=identicon&r=PG", "display_name": "Alexey Poimtsev", "link": "https://stackoverflow.com/users/143511/alexey-poimtsev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 137, "favorite_count": 0, "accepted_answer_id": 28022086, "answer_count": 1, "score": -4, "last_activity_date": 1421683395, "creation_date": 1421661668, "last_edit_date": 1421683395, "question_id": 28021991, "link": "https://stackoverflow.com/questions/28021991/rust-math-error", "title": "Rust math error", "body": "<p>I have following code in Rust:</p>\n\n<pre><code>fn main() {\n\n    let mut sum = 0is;\n    for i in (0is..100000000is) {\n        sum = sum + i;\n    }\n    println! (\"{}\", sum);\n}\n</code></pre>\n\n<p>as a result, I have 4999999950000000</p>\n\n<p>But, when I try to check this code with Golang and Ruby - I see another result</p>\n\n<p>golang version:</p>\n\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n  var sum = 0\n  for i := 1; i &lt; 99999999; i++ {\n      sum += i\n  }\n\n  fmt.Println(sum)\n}\n</code></pre>\n\n<p>Ruby version:</p>\n\n<pre><code>@sum = 0\n(1...99999999).each do |i|\n  @sum += i\nend\n\nputs @sum\n</code></pre>\n\n<p>and the result for both Ruby and Golang is 4999999850000001</p>\n\n<p>PS: yep, I know about difference between 100000000 and 99999999 - it's because of inclusion right part in Rust in <strong>0is..100000000is</strong></p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 48731, "user_id": 329700, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/41910a452554b187d044c00c576866b1?s=128&d=identicon&r=PG", "display_name": "Kevin Burke", "link": "https://stackoverflow.com/users/329700/kevin-burke"}, "is_accepted": true, "score": 6, "last_activity_date": 1421649970, "last_edit_date": 1421649970, "creation_date": 1421647328, "answer_id": 28018757, "question_id": 28018689, "link": "https://stackoverflow.com/questions/28018689/cargo-package-error-main-function-not-found/28018757#28018757", "title": "`cargo package`: error: main function not found", "body": "<p>Ah! If you are packaging a library for other programs to use (as I am trying to do), you need to name your file <code>lib.rs</code>.</p>\n\n<p>Alternatively, if you are packaging a binary, name your file <code>main.rs</code> (this was my mistake).</p>\n"}], "owner": {"reputation": 48731, "user_id": 329700, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/41910a452554b187d044c00c576866b1?s=128&d=identicon&r=PG", "display_name": "Kevin Burke", "link": "https://stackoverflow.com/users/329700/kevin-burke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2382, "favorite_count": 0, "accepted_answer_id": 28018757, "answer_count": 1, "score": 7, "last_activity_date": 1421649970, "creation_date": 1421646912, "last_edit_date": 1421647277, "question_id": 28018689, "link": "https://stackoverflow.com/questions/28018689/cargo-package-error-main-function-not-found", "title": "`cargo package`: error: main function not found", "body": "<p>I'm trying to package a library using the <code>cargo</code> package manager for Rust. When I try to run <code>cargo package</code> per the <a href=\"http://doc.crates.io/crates-io.html\" rel=\"noreferrer\">documentation</a>, I get the following output:</p>\n\n<pre><code>error: main function not found\nerror: aborting due to previous error\nfailed to verify package tarball\n</code></pre>\n\n<p>I'm confused. I'm trying to package a library (with useful external functions), so I expect that I don't need a <code>main</code> function. Here is my <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\n\nname = \"package-name\"\nversion = \"0.0.1\"\nauthors = [ \"Kevin Burke &lt;kev@inburke.com&gt;\" ]\n</code></pre>\n\n<p>Here is my directory structure:</p>\n\n<pre><code>.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>What am I missing?</p>\n"}, {"tags": ["json", "deserialization", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1421641485, "creation_date": 1421641485, "answer_id": 28017952, "question_id": 28017826, "link": "https://stackoverflow.com/questions/28017826/how-to-decode-a-json-value-that-can-be-a-string-or-null/28017952#28017952", "title": "How to decode a JSON value that can be a String or null?", "body": "<p>Change the type of <code>author</code> from <code>String</code> to <code>Option&lt;String&gt;</code>.</p>\n\n<pre><code>#[derive(Show, RustcDecodable, RustcEncodable)]\npub struct TestStruct {\n    pub id: u64,\n    pub rank: i64,\n    pub author: Option&lt;String&gt;,\n}\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>Ok([TestStruct { id: 1234u64, rank: 44i64, author: None }]\nOk([TestStruct { id: 1234u64, rank: 44i64, author: \"Some text\" }])\n</code></pre>\n"}], "owner": {"reputation": 883, "user_id": 1509255, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/1bdbc7273bc265e4e92f2fcacbb6c419?s=128&d=identicon&r=PG", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/1509255/aleksandr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 1, "accepted_answer_id": 28017952, "answer_count": 1, "score": 2, "last_activity_date": 1421683235, "creation_date": 1421640456, "last_edit_date": 1421683235, "question_id": 28017826, "link": "https://stackoverflow.com/questions/28017826/how-to-decode-a-json-value-that-can-be-a-string-or-null", "title": "How to decode a JSON value that can be a String or null?", "body": "<p>I am trying to decode JSON in Rust.</p>\n\n<p>JSON examples:</p>\n\n<pre><code>[{\"id\": 1234, \"rank\": 44, \"author\": null}]\n[{\"id\": 1234, \"rank\": 44, \"author\": \"Some text\"}]\n</code></pre>\n\n<p>If I use <code>String</code> for the author field:</p>\n\n<pre><code>#[derive(Show, RustcDecodable, RustcEncodable)]\npub struct TestStruct {\n    pub id: u64,\n    pub rank: i64,\n    pub author: String,\n}\n</code></pre>\n\n<p>It throws the error:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: ExpectedError(\"String\", \"null\")', /home/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/result.rs:742\n</code></pre>\n\n<p>How can I decode (filter/ignore null) this JSON value?</p>\n"}, {"tags": ["data-structures", "rust", "singly-linked-list", "lifetime"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1421661166, "post_id": 28017569, "comment_id": 44429672, "body": "If possible, post the relevant excerpts of code right in the question itself; as it is your question is close to worthless without links."}], "answers": [{"comments": [{"owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "edited": false, "score": 0, "creation_date": 1421643534, "post_id": 28017613, "comment_id": 44423232, "body": "thanks! I leave a camment in sometime ago, but it solve, the remove funtion is  <a href=\"https://gist.github.com/tioover/f9632449aab6fce840a4\" rel=\"nofollow noreferrer\">gist.github.com/tioover/f9632449aab6fce840a4</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1432595253, "last_edit_date": 1495542606, "creation_date": 1421638507, "answer_id": 28017613, "question_id": 28017569, "link": "https://stackoverflow.com/questions/28017569/can-i-traverse-a-singly-linked-list-without-owner-move-or-unsafe/28017613#28017613", "title": "Can I traverse a singly linked list without owner move or unsafe?", "body": "<p>Here's some code from an <a href=\"https://stackoverflow.com/a/27751076/155423\">answer to a similar question</a>. It shows a way of having a list that you can add to the beginning and the end, and the middle for good measure.</p>\n\n<pre><code>#[derive(Debug)]\nstruct Node&lt;T&gt; {\n    v: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; {\n    fn new(v: T) -&gt; Node&lt;T&gt; { Node { v: v, next: None } }\n\n    fn push_front(self, head: T) -&gt; Node&lt;T&gt; {\n        Node {\n            v: head,\n            next: Some(Box::new(self)),\n        }\n    }\n\n    fn push_back(&amp;mut self, tail: T) {\n        match self.next {\n            Some(ref mut next) =&gt; next.push_back(tail), \n            None =&gt; self.next = Some(Box::new(Node::new(tail))),\n        }\n    }\n\n    fn push_after(&amp;mut self, v: T) {\n        let old_next = self.next.take();\n\n        let new_next = Node {\n            v: v,\n            next: old_next,\n        };\n\n        self.next = Some(Box::new(new_next));\n    }\n}\n\nfn main() {\n    let mut n = Node::new(2u8);\n    n.push_back(3u8);\n    let mut n = n.push_front(0u8);\n    n.push_after(1u8);\n\n    println!(\"{:?}\", n);\n}\n</code></pre>\n\n<p>The important thing is that when we add to the head, we consume the old head by taking it as <code>self</code>. That allows us to move it into a <code>Box</code> which will be the follower of the new head. Removing an item is a straight-forward extension of this example, but you'll need to look forward a bit and handle more edge cases (like what to do if there isn't a second successor).</p>\n"}], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 223, "favorite_count": 0, "accepted_answer_id": 28017613, "answer_count": 1, "score": 0, "last_activity_date": 1432595253, "creation_date": 1421638209, "last_edit_date": 1421638889, "question_id": 28017569, "link": "https://stackoverflow.com/questions/28017569/can-i-traverse-a-singly-linked-list-without-owner-move-or-unsafe", "title": "Can I traverse a singly linked list without owner move or unsafe?", "body": "<p>A singly linked list can simply create from tail. But can't from head, I tried many time, code here: <a href=\"https://gist.github.com/tioover/8d7585105c06e01678a8\" rel=\"nofollow\">https://gist.github.com/tioover/8d7585105c06e01678a8</a>.</p>\n\n<p>In fact, I want search then delete a node in linked list. but I can't  traversal linked list with mutable borrow pointer: <a href=\"https://gist.github.com/tioover/526715ed05342ef5b4f1\" rel=\"nofollow\">https://gist.github.com/tioover/526715ed05342ef5b4f1</a>. I tried many time too.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421617512, "post_id": 28015040, "comment_id": 44417555, "body": "You state you have a vector of &quot;hex chars&quot;, but your type annotation is of <code>u8</code>. These are not the same thing! A <code>char</code> (with single quotes) can hold any single Unicode codepoint, which takes more than 8 bits. Which do you have?"}, {"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421617710, "post_id": 28015040, "comment_id": 44417605, "body": "I have a vector of <code>u8</code>s limited to the codepoints <code>0</code> through <code>9</code>, <code>a</code> through <code>f</code> and <code>A</code> through <code>F</code> - sorry for the confusion I still think in C when it comes to... Anything involving strings or bytes :P"}], "answers": [{"comments": [{"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421618428, "post_id": 28015248, "comment_id": 44417819, "body": "Isn&#39;t there a way to do this with <code>serialize</code>?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1432478476, "last_edit_date": 1432478476, "creation_date": 1421618172, "answer_id": 28015248, "question_id": 28015040, "link": "https://stackoverflow.com/questions/28015040/turning-a-fixed-length-vecu8-of-hex-only-chars-into-an-int/28015248#28015248", "title": "Turning a fixed length Vec&lt;u8&gt; of hex only chars into an int", "body": "<p>This may not be the most efficient way, but may be the most obvious. Start by turning your bytes into a string, then convert that string to a number:</p>\n\n<p><strong>Rust 1.0</strong></p>\n\n<pre><code>fn main() {\n    let input: Vec&lt;u8&gt; = b\"beef\"[..].to_owned();\n    let s = String::from_utf8(input).unwrap();\n    let v = u32::from_str_radix(&amp;s, 16).unwrap();\n    println!(\"{:x}\", v);\n    assert!(0xbeef == v);\n}\n</code></pre>\n\n<p><strong>Original</strong> </p>\n\n<pre><code>use std::num;\n\nfn main() {\n    let input: Vec&lt;u8&gt; = vec!['b' as u8, 'e' as u8, 'e' as u8, 'f' as u8];\n    let s = String::from_utf8(input).unwrap();\n    let v: u32 = num::from_str_radix(&amp;*s, 16).unwrap();\n    println!(\"{:x}\", v);\n    assert!(0xbeef == v);\n}\n</code></pre>\n\n<blockquote>\n  <p>Is there a way to do this with <code>serialize</code>?</p>\n</blockquote>\n\n<p>Not that I'm aware of. Serialize has <a href=\"http://doc.rust-lang.org/serialize/hex/trait.FromHex.html\" rel=\"nofollow\"><code>FromHex</code></a> which converts a <code>&amp;str</code> to a <code>Vec&lt;u8&gt;</code>. Then you'd still have to convert those bytes into a number somehow:</p>\n\n<pre><code>extern crate serialize;\nuse serialize::hex::FromHex;\n\nfn main() {\n    let input: Vec&lt;u8&gt; = vec!['b' as u8, 'e' as u8, 'e' as u8, 'f' as u8];\n    let s = String::from_utf8(input).unwrap();\n    let bytes: Vec&lt;u8&gt; = s.from_hex().unwrap();\n\n    let v = bytes.into_iter().fold(0u32, |val, byte| val &lt;&lt; 8 | byte as u32);\n\n    println!(\"{:x}\", v);\n    assert!(0xbeef == v);\n}\n</code></pre>\n\n<p>At that point, it's probably easier to convert directly from codepoint to number and do the summation yourself:</p>\n\n<pre><code>fn dehex(c: u8) -&gt; u8 {\n    match c {\n        b'0'...b'9' =&gt; c - b'0',\n        b'a'...b'f' =&gt; c - b'a' + 10,\n        b'A'...b'F' =&gt; c - b'A' + 10,\n        _ =&gt; panic!(\"Do something better here\"),\n    }\n}\n\nfn main() {\n    let input: Vec&lt;u8&gt; = vec![b'b', b'e', b'e', b'f'];\n    let v = input.into_iter().fold(0u32, |val, char| (val &lt;&lt; 4) | dehex(char) as u32);\n    println!(\"{:x}\", v);\n    assert!(0xbeef == v);\n}\n</code></pre>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2642, "favorite_count": 0, "accepted_answer_id": 28015248, "answer_count": 1, "score": 2, "last_activity_date": 1432478476, "creation_date": 1421616690, "last_edit_date": 1421617650, "question_id": 28015040, "link": "https://stackoverflow.com/questions/28015040/turning-a-fixed-length-vecu8-of-hex-only-chars-into-an-int", "title": "Turning a fixed length Vec&lt;u8&gt; of hex only chars into an int", "body": "<p>How do I turn a fixed length <code>Vec&lt;u8&gt;</code> of hex chars into a <code>u32</code>?</p>\n\n<pre><code>let input: Vec&lt;u8&gt; = vec!['b','e','e','f']; // Pretend this works\nlet output: u32 = // Do some magic (Probably with serialize)\nassert!(0xbeef == output);\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1424442008, "post_id": 28012415, "comment_id": 45562196, "body": "more golfing... You don&#39;t need a new scope, as long as you move something back into a variable you may move from it in a loop. Also, mutable self parameter: <a href=\"http://is.gd/aAE3a1\" rel=\"nofollow noreferrer\">is.gd/aAE3a1</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1421600773, "creation_date": 1421600773, "answer_id": 28012415, "question_id": 28012090, "link": "https://stackoverflow.com/questions/28012090/how-to-rewrite-tail-recursion-as-a-cycle/28012415#28012415", "title": "How to rewrite tail recursion as a cycle?", "body": "<p>I recall reading other questions that ask the same conceptual question, but I cannot find them at the moment. Perhaps a kind soul will link them here.</p>\n\n<p>That being said, this compiles:</p>\n\n<pre><code>pub fn add(&amp;mut self, word: &amp;str) {\n    let mut current = self; \n    for chr in word.chars() {\n        current = {\n            let tmp = current;\n            let idx = Trie::char_idx(chr);\n            if tmp.data[idx].is_none() {\n                tmp.data[idx] = Some(Trie::new());\n            }\n            tmp.data[idx].as_mut().unwrap()\n        }\n    }\n}\n</code></pre>\n\n<p>My general idea was to work-around the current fact that <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"nofollow\">borrow scopes are lexical</a>. Inside of the for-loop, I create a new lexical scope and then reborrow <code>current</code> as <code>tmp</code>. We do our work on <code>tmp</code>, ultimately returning a reference that we then put back into <code>current</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1421600798, "creation_date": 1421600798, "answer_id": 28012423, "question_id": 28012090, "link": "https://stackoverflow.com/questions/28012090/how-to-rewrite-tail-recursion-as-a-cycle/28012423#28012423", "title": "How to rewrite tail recursion as a cycle?", "body": "<p>A <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.fold\" rel=\"nofollow\"><code>fold</code></a> seems to do the trick:</p>\n\n<pre><code>pub fn add(&amp;mut self, word: &amp;str) {\n    word.chars().fold(\n        self,\n        |current, chr| {\n            let idx = Trie::char_idx(chr);\n            if current.data[idx].is_none() {\n                current.data[idx] = Some(Trie::new());\n            }\n\n            current.data[idx].as_mut().unwrap()\n        });\n}\n</code></pre>\n"}], "owner": {"reputation": 820, "user_id": 1711577, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80b93c23b1a3ac0a396f72d41617f6e2?s=128&d=identicon&r=PG", "display_name": "gizmondo", "link": "https://stackoverflow.com/users/1711577/gizmondo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1292, "favorite_count": 0, "accepted_answer_id": 28012415, "answer_count": 2, "score": 2, "last_activity_date": 1421600798, "creation_date": 1421598810, "question_id": 28012090, "link": "https://stackoverflow.com/questions/28012090/how-to-rewrite-tail-recursion-as-a-cycle", "title": "How to rewrite tail recursion as a cycle?", "body": "<p>I've written a simple variant of prefix tree:</p>\n\n<pre><code>struct Trie {\n    data: Vec&lt;Option&lt;Trie&gt;&gt;\n}\n\nimpl Trie {\n    pub fn new() -&gt; Trie {\n        let mut data = Vec::with_capacity(26);\n        for _ in 0..26 {\n            data.push(None);\n        }\n        Trie { data: data }\n    }\n\n    pub fn add(&amp;mut self, word: &amp;str) {\n        if word.len() != 0 {\n            let idx = Trie::char_idx(word.char_at(0));\n            let word_suffix = word.slice_from(1);\n            if self.data[idx].is_none() {\n                self.data[idx] = Some(Trie::new());\n            } \n            self.data[idx].as_mut().unwrap().add(word_suffix)\n        }\n    }\n\n    pub fn contain(&amp;self, word: &amp;str) -&gt; bool {\n        if word.len() == 0 {\n            true\n        } else {\n            match self.data[Trie::char_idx(word.char_at(0))] {\n                Some(ref next) =&gt; next.contain(word.slice_from(1)),\n                None =&gt; false \n            }\n        }\n    }\n\n    fn char_idx(chr: char) -&gt; usize {\n        (chr as u32 - 97) as usize\n    }\n}\n</code></pre>\n\n<p>It works Ok except the recursive nature of <code>add</code> function. Now, rust doesn't have tail call optimization, so I need to rewrite it as a cycle. \nThis task should be trivial, but I cannot figure out the way to do it without borrow checker yelling at me. </p>\n\n<p>Here is my naive approach: </p>\n\n<pre><code>pub fn add(&amp;mut self, word: &amp;str) {\n    let mut current = self; \n    for chr in word.chars() {\n        let idx = Trie::char_idx(chr);\n        if current.data[idx].is_none() {\n            current.data[idx] = Some(Trie::new());\n        }\n        current = current.data[idx].as_mut().unwrap();\n    }\n}\n</code></pre>\n\n<p>What can I do instead?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 2, "creation_date": 1421602029, "post_id": 28011946, "comment_id": 44412411, "body": "In the simple example I provided, it would indeed be possible. However, in my real use case, the command comes from another part of the code, which is not supposed to know how many times the closure will be cloned."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1421612748, "post_id": 28011946, "comment_id": 44416036, "body": "Would you be able to extract the closure generation into a function and then call that function for each task?"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 2, "creation_date": 1421616870, "post_id": 28011946, "comment_id": 44417351, "body": "Yes actually it should be possible to do a function or a closure that would be a &quot;sendable closure&quot; factory. Thanks for the idea! That&#39;s a shame we can&#39;t clone() closures directly though ..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1558706230, "last_edit_date": 1558706230, "creation_date": 1421598005, "answer_id": 28011946, "question_id": 28011803, "link": "https://stackoverflow.com/questions/28011803/how-can-i-clone-a-fnbox-closure-when-it-cannot-be-put-into-an-arc/28011946#28011946", "title": "How can I clone a FnBox closure when it cannot be put into an Arc?", "body": "<h1>Rust 1.35</h1>\n\n<p><code>Box&lt;dyn FnOnce&gt;</code> is stable. Your code now works in stable Rust if you change it to only box the closure after cloning it:</p>\n\n<pre><code>use std::sync::mpsc::{self, Sender};\nuse std::thread;\n\ntype Command = Box&lt;FnOnce(&amp;mut SenderWrapper) + Send&gt;;\n\nstruct SenderWrapper {\n    tx: Option&lt;Sender&lt;u64&gt;&gt;,\n}\nimpl SenderWrapper {\n    fn new() -&gt; SenderWrapper {\n        SenderWrapper { tx: None }\n    }\n}\n\nfn main() {\n    let (responses_tx, responses_rx) = mpsc::channel();\n    let closure = move |snd: &amp;mut SenderWrapper| {\n        snd.tx = Some(responses_tx); // Captures tx, which is not Sync but is Clone\n    };\n\n    let mut commands = Vec::new();\n    for i in 0..2i32 {\n        let (commands_tx, commands_rx) = mpsc::channel();\n        commands.push(commands_tx);\n        thread::spawn(move || {\n            let mut wrapper = SenderWrapper::new();\n            let command: Command = commands_rx.recv().unwrap();\n            command(&amp;mut wrapper);\n            // Continue ...\n        });\n    }\n\n    for tx in commands.iter() {\n        tx.send(Box::new(closure.clone())).unwrap(); // How can I make this clone() work?\n    }\n    // use answers ...\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30353462/155423\">How to clone a struct storing a boxed trait object?</a></li>\n</ul>\n\n<h1>Rust 1.26</h1>\n\n<p>Closures now implement <code>Clone</code></p>\n\n<h2>Prior</h2>\n\n<p>This doesn't answer your direct question, but is it feasible to just clone your variables before capturing them in the closure?</p>\n\n<pre><code>for tx in commands.iter() {\n    let my_resp_tx = responses_tx.clone();\n    let closure = Box::new(move |snd: &amp;mut SenderWrapper| {\n        snd.tx = Some(my_resp_tx);\n    });\n    commands[0].send(closure).unwrap();\n}\n</code></pre>\n\n<p>You can even extract this logic into a \"factory\" function.</p>\n\n<hr>\n\n<p>Let's take a deeper look. First, we recognize that <code>Box&lt;FnBox&gt;</code> is a <em>trait object</em>, and cloning those is kind of difficult. Following the answers in <a href=\"https://stackoverflow.com/q/30353462/155423\">How to clone a struct storing a boxed trait object?</a>, and using a smaller case, we end up with:</p>\n\n<pre><code>#![feature(fnbox)]\n\nuse std::boxed::FnBox;\n\ntype Command = Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt;;\n\ntrait MyFnBox: FnBox(&amp;mut u8) + CloneMyFnBox {}\n\ntrait CloneMyFnBox {\n    fn clone_boxed_trait_object(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt;;\n}\n\nimpl&lt;T&gt; CloneMyFnBox for T\nwhere\n    T: 'static + MyFnBox + Clone + Send,\n{\n    fn clone_boxed_trait_object(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n        Box::new(self.clone())\n    }\n}\n\nimpl Clone for Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n    fn clone(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n        self.clone_boxed_trait_object()\n    }\n}\n\nfn create() -&gt; Command {\n    unimplemented!()\n}\n\nfn main() {\n    let c = create();\n    c.clone();\n}\n</code></pre>\n\n<p>Of note is that we had to introduce a trait to implement cloning and another trait to combine the cloning trait with <code>FnBox</code>.</p>\n\n<p>Then it's \"just\" a matter of implementing <code>MyFnBox</code> for all implementors of <code>FnBox</code> and enabling another nightly feature: <code>#![clone_closures]</code> (slated for <a href=\"https://github.com/rust-lang/rust/pull/49299\" rel=\"nofollow noreferrer\">stabilization in Rust 1.28</a>):</p>\n\n<pre><code>#![feature(fnbox)]\n#![feature(clone_closures)]\n\nuse std::boxed::FnBox;\nuse std::sync::mpsc::{self, Sender};\nuse std::thread;\n\nstruct SenderWrapper {\n    tx: Option&lt;Sender&lt;u64&gt;&gt;,\n}\nimpl SenderWrapper {\n    fn new() -&gt; SenderWrapper {\n        SenderWrapper { tx: None }\n    }\n}\n\ntype Command = Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt;;\n\ntrait MyFnBox: FnBox(&amp;mut SenderWrapper) + CloneMyFnBox {}\n\nimpl&lt;T&gt; MyFnBox for T\nwhere\n    T: 'static + FnBox(&amp;mut SenderWrapper) + Clone + Send,\n{\n}\n\ntrait CloneMyFnBox {\n    fn clone_boxed_trait_object(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt;;\n}\n\nimpl&lt;T&gt; CloneMyFnBox for T\nwhere\n    T: 'static + MyFnBox + Clone + Send,\n{\n    fn clone_boxed_trait_object(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n        Box::new(self.clone())\n    }\n}\n\nimpl Clone for Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n    fn clone(&amp;self) -&gt; Box&lt;MyFnBox&lt;Output = ()&gt; + Send&gt; {\n        self.clone_boxed_trait_object()\n    }\n}\n\nfn main() {\n    let (responses_tx, responses_rx) = mpsc::channel();\n    let closure: Command = Box::new(move |snd: &amp;mut SenderWrapper| {\n        snd.tx = Some(responses_tx);\n    });\n\n    let mut commands = Vec::new();\n    for i in 0..2i32 {\n        let (commands_tx, commands_rx) = mpsc::channel();\n        commands.push(commands_tx);\n        thread::spawn(move || {\n            let mut wrapper = SenderWrapper::new();\n            let command: Command = commands_rx.recv().unwrap();\n            command.call_box((&amp;mut wrapper,));\n            // Continue ...\n        });\n    }\n\n    for tx in commands.iter() {\n        commands[0].send(closure.clone()).unwrap(); // How can I make this clone() work?\n    }\n    // use answers ...\n}\n</code></pre>\n"}], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 967, "favorite_count": 0, "accepted_answer_id": 28011946, "answer_count": 1, "score": 2, "last_activity_date": 1558706230, "creation_date": 1421597160, "last_edit_date": 1521933587, "question_id": 28011803, "link": "https://stackoverflow.com/questions/28011803/how-can-i-clone-a-fnbox-closure-when-it-cannot-be-put-into-an-arc", "title": "How can I clone a FnBox closure when it cannot be put into an Arc?", "body": "<p>I would like to send commands (closures) to different threads, with the closure capturing a non-<code>Sync</code> variable (therefore I cannot \"share\" the closure with an <code>Arc</code>, as explained in <a href=\"https://stackoverflow.com/questions/27883509/can-you-clone-a-closure\">Can you clone a closure?</a>).</p>\n\n<p>The closure only captures elements which implement <code>Clone</code>, so I would feel that the closure could derive <code>Clone</code> as well.</p>\n\n<pre><code>#![feature(fnbox)]\n\nuse std::boxed::FnBox;\nuse std::sync::mpsc::{self, Sender};\nuse std::thread;\n\ntype Command = Box&lt;FnBox(&amp;mut SenderWrapper) + Send&gt;;\n\nstruct SenderWrapper {\n    tx: Option&lt;Sender&lt;u64&gt;&gt;,\n}\nimpl SenderWrapper {\n    fn new() -&gt; SenderWrapper {\n        SenderWrapper { tx: None }\n    }\n}\n\nfn main() {\n    let (responses_tx, responses_rx) = mpsc::channel();\n    let closure: Command = Box::new(move |snd: &amp;mut SenderWrapper| {\n        snd.tx = Some(responses_tx); // Captures tx, which is not Sync but is Clone\n    });\n\n    let mut commands = Vec::new();\n    for i in 0..2i32 {\n        let (commands_tx, commands_rx) = mpsc::channel();\n        commands.push(commands_tx);\n        thread::spawn(move || {\n            let mut wrapper = SenderWrapper::new();\n            let command: Command = commands_rx.recv().unwrap();\n            command.call_box((&amp;mut wrapper,));\n            // Continue ...\n        });\n    }\n\n    for tx in commands.iter() {\n        commands[0].send(closure.clone()).unwrap(); // How can I make this clone() work?\n    }\n    // use answers ...\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `clone` found for type `std::boxed::Box&lt;for&lt;'r&gt; std::boxed::FnBox&lt;(&amp;'r mut SenderWrapper,), Output=()&gt; + 'static&gt;` in the current scope\n  --&gt; src/main.rs:40:34\n   |\n40 |         commands[0].send(closure.clone()).unwrap();\n   |                                  ^^^^^\n   |\n   = note: the method `clone` exists but the following trait bounds were not satisfied:\n           `std::boxed::Box&lt;for&lt;'r&gt; std::boxed::FnBox&lt;(&amp;'r mut SenderWrapper,), Output=()&gt;&gt; : std::clone::Clone`\n</code></pre>\n\n<p>Is there any way in the current syntax where we can implement / derive traits for closures?</p>\n\n<p>A dirty workaround for this would be to define (by hand) a structure containing the required environment, implement <code>Clone</code>, and define the <code>FnOnce</code> or <code>Invoke</code> trait.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1421596828, "post_id": 28011437, "comment_id": 44410694, "body": "Also, you should always give us your exact command which resulted in this output."}, {"owner": {"reputation": 990, "user_id": 3019990, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/3rUcM.png?s=128&g=1", "display_name": "CAD97", "link": "https://stackoverflow.com/users/3019990/cad97"}, "edited": false, "score": 0, "creation_date": 1506006486, "post_id": 28011437, "comment_id": 79655036, "body": "Make sure you ran <code>cargo build --verbose</code> and not <code>cargo build -- verbose</code>"}], "answers": [{"comments": [{"owner": {"reputation": 77, "user_id": 3249462, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c70744608e485ad5d318a530a8f8a1fd?s=128&d=identicon&r=PG&f=1", "display_name": "user3249462", "link": "https://stackoverflow.com/users/3249462/user3249462"}, "edited": false, "score": 0, "creation_date": 1421621698, "post_id": 28011454, "comment_id": 44418716, "body": "See above I did use cargo build --verbose. I also tried cargo build -v. It appears that when rustc is evoked. Cargo uses the arguments &quot;-v verbose&quot; this results in rustc trying to build the non existent file verbose. If I  rename the file &quot;src/main.rs&quot; to &quot;verbose&quot; the build completes and I get an executable named &quot;verbose.exe&quot;. I am confused why I did not get a file named &quot;hello_world&quot; though?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1421622226, "last_edit_date": 1421622226, "creation_date": 1421595288, "answer_id": 28011454, "question_id": 28011437, "link": "https://stackoverflow.com/questions/28011437/cant-use-cargo-to-build-hello-world-example-from-rust-tutorial/28011454#28011454", "title": "Can&#39;t use Cargo to build hello world example from Rust tutorial", "body": "<p>I just followed the <a href=\"http://doc.rust-lang.org/book/hello-cargo.html\" rel=\"nofollow\">tutorial</a> you linked, and I don't see any reference to using the verbose flag. I assume that you looked at the help for Cargo or otherwise learned about it.</p>\n\n<p>However, when I followed the first two steps (\"Hello, world!\" and \"Hello, Cargo!\"), I was able to run <code>cargo build --verbose</code>.</p>\n\n<p>I think you will need to provide more information about your particular setup.</p>\n"}], "owner": {"reputation": 77, "user_id": 3249462, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c70744608e485ad5d318a530a8f8a1fd?s=128&d=identicon&r=PG&f=1", "display_name": "user3249462", "link": "https://stackoverflow.com/users/3249462/user3249462"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1614, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1578910624, "creation_date": 1421595179, "last_edit_date": 1578910624, "question_id": 28011437, "link": "https://stackoverflow.com/questions/28011437/cant-use-cargo-to-build-hello-world-example-from-rust-tutorial", "title": "Can&#39;t use Cargo to build hello world example from Rust tutorial", "body": "<p>I followed the Rust book/tutorial on the Rust page at, <a href=\"http://doc.rust-lang.org/book/hello-cargo.html\" rel=\"nofollow\">http://doc.rust-lang.org/book/hello-cargo.html</a>, and get the below error when doing the section on Cargo. The command was <code>cargo build --verbose</code>. I used the verbose flag because of a failure in the build process. It looks like Cargo is trying to build a file named \"verbose\".  I did use the verbose flag; it's almost like the arguments sent to rustc are missing a <code>--</code> prefix?</p>\n\n<pre><code>Process didn't exit successfully: `rustc -v verbose` (status=101)\n--- stderr\nerror: couldn't read verbose: IoError { kind: FileNotFound, desc: \"couldn\\'t ope\nn path as file\", detail: Some(\"file not found (OS Error 2: The system cannot fin\nd the file specified.\\r\\n); path=verbose; mode=open; access=read\") }\n</code></pre>\n\n<p>The Cargo.toml file contains this text: </p>\n\n<pre><code>[package] \n\nname = \"hello_world\" version = \"0.0.1\" \nauthors = [ \"Your name &lt;you@example.com&gt;\" ] \n\n[[bin]] \n\nname = \"hello_world\"\n</code></pre>\n\n<p>The computer I am running is Windows 7 64 bit using the 64 bit nightly install from 2 days ago 1/18/2015.</p>\n"}, {"tags": ["module", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421594067, "post_id": 28011134, "comment_id": 44409885, "body": "Haha, I thrashed about getting that to compile myself. I don&#39;t know that I&#39;ve usually gone deeper than a single level of modules. I feel like wider and flatter is more common in the Rust I&#39;ve seen."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 1, "creation_date": 1421594345, "post_id": 28011134, "comment_id": 44409969, "body": "Nitpick: there&#39;s the <code>include!</code> macro, which <i>could</i> be used to split a single module into multiple files. That&#39;s arguably a misuse of it though, since AFAIU it was added to cater code generation scenarios"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 0, "creation_date": 1421662897, "post_id": 28011134, "comment_id": 44430631, "body": "@RenatoZannon: <code>include!</code> is something that should be avoided at significant cost; it\u2019s got a number of rather weird quirks and is not simple to use properly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1610741927, "last_edit_date": 1610741927, "creation_date": 1421593387, "answer_id": 28011134, "question_id": 28010796, "link": "https://stackoverflow.com/questions/28010796/move-struct-into-a-separate-file-without-splitting-into-a-separate-module/28011134#28011134", "title": "Move struct into a separate file without splitting into a separate module?", "body": "<p>The short answer: use <code>pub use Type</code> in your <code>mod.rs</code>. A full example follows:</p>\n<p>My structure:</p>\n<pre class=\"lang-none prettyprint-override\"><code>src/\n\u251c\u2500\u2500 main.rs\n\u251c\u2500\u2500 protocol\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 thing.rs\n\u2514\u2500\u2500 protocol.rs\n</code></pre>\n<p><strong>main.rs</strong></p>\n<pre><code>mod protocol;\n\nfn main() {\n    let a = protocol::Thing::new();\n    println!(&quot;Hello, {:?}&quot;, a);\n}\n</code></pre>\n<p><strong>protocol.rs</strong></p>\n<pre><code>pub use self::thing::Thing;\nmod thing;\n</code></pre>\n<p><strong>protocol/thing.rs</strong></p>\n<pre><code>#[derive(Debug)]\npub struct Thing(i8);\n\nimpl Thing {\n    pub fn new() -&gt; Thing { Thing(4) }\n}\n</code></pre>\n<p>As a housekeeping bit, don't call files the same thing as language keywords. <code>struct</code> causes compilation problems, so I renamed it. Also, your struct creation syntax was incorrect, so I picked the shorter version for this example ^_^.</p>\n<p>And to answer the question posed in your title: Without using esoteric features, a file always creates a new module \u2014 you <em>can't</em> put something into a different file without also putting it in a different module. You can re-export the type so it doesn't look like it though.</p>\n<p>Further explanation: The <code>mod</code> keyword tells the compiler to look for a file by that name and reference it from the current file as a module. For example, <code>mod protocol;</code> will look for a file <code>protocol.rs</code> and behave as if it had included its contents, similar to:</p>\n<pre><code>mod protocol {\n    // ... contents here\n};\n</code></pre>\n<p>See <a href=\"https://doc.rust-lang.org/rust-by-example/mod/split.html\" rel=\"nofollow noreferrer\">Rust by Example</a> for more details.</p>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11037, "favorite_count": 1, "accepted_answer_id": 28011134, "answer_count": 1, "score": 13, "last_activity_date": 1610741927, "creation_date": 1421591279, "last_edit_date": 1555937687, "question_id": 28010796, "link": "https://stackoverflow.com/questions/28010796/move-struct-into-a-separate-file-without-splitting-into-a-separate-module", "title": "Move struct into a separate file without splitting into a separate module?", "body": "<p>I have this file hierarchy:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>main.rs\nprotocol/\nprotocol/mod.rs\nprotocol/struct.rs\n</code></pre>\n\n<p>In <code>struct.rs</code>:</p>\n\n<pre><code>pub struct Struct {\n    members: i8\n}\n\nimpl Struct {\n    pub fn new() -&gt; Struct {\n        Struct { 4 }\n    }\n}\n</code></pre>\n\n<p>How do I access it as:</p>\n\n<pre><code>mod protocol;\nprotocol::Struct::new();\n// As opposed to:\n// protocol::struct::Struct::new();\n</code></pre>\n\n<p>I've tried various combinations of <code>pub</code> <code>use</code> and <code>mod</code> but admittedly I'm poking at things blindly.</p>\n\n<p>Is it possible to split a struct (and it's <code>impl</code>) into a separate file without having to create a new mod?</p>\n"}, {"tags": ["math", "rust", "trigonometry"], "answers": [{"comments": [{"owner": {"reputation": 722, "user_id": 10978642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09768ee67e510b92a141e2237629d0c1?s=128&d=identicon&r=PG&f=1", "display_name": "bsound", "link": "https://stackoverflow.com/users/10978642/bsound"}, "edited": false, "score": 0, "creation_date": 1569479701, "post_id": 28010993, "comment_id": 102611572, "body": "Your answer isn&#39;t relevant till this date. The <code>Float</code> trait is removed. As mentioned by, @Shepmaster."}], "tags": [], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "is_accepted": false, "score": -1, "last_activity_date": 1421592466, "creation_date": 1421592466, "answer_id": 28010993, "question_id": 28010779, "link": "https://stackoverflow.com/questions/28010779/where-is-the-sine-function/28010993#28010993", "title": "Where is the sine function?", "body": "<p><code>Float</code> is Trait, include implementation, import this to apply for f32 or f64.</p>\n\n<pre><code>use std::num::Float;\n\nfn main() {\n    println!(\"{}\", 1.0f64.sin());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1421594642, "post_id": 28010995, "comment_id": 44410052, "body": "It&#39;s interesting (and a bit confusing when coming from a c++/java background) that you don&#39;t use/import &quot;math&quot; but &quot;Float&quot;."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1421599132, "post_id": 28010995, "comment_id": 44411471, "body": "Does not work. On first example, I get <code>error: type _ does not implement any method in scope named sin</code>, on second example, I get <code>error: unresolved name Float::sin</code>. $ rustc --version outputs <code>rustc 0.13.0-nightly (96a3c7c6a 2014-12-23 22:21:10 +0000)</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 2, "creation_date": 1421599600, "post_id": 28010995, "comment_id": 44411657, "body": "You will want to upgrade to the newest version of Rust. In preparation for the 1.0 release, there&#39;s lots of work going on! In this particular case, floating point literals now default to the type <code>f64</code> (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md\" rel=\"nofollow noreferrer\">Relevant RFC</a>). If you want to get it to work, without upgrading, try <code>3.14f64.sin()</code>."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 2, "creation_date": 1421626642, "post_id": 28010995, "comment_id": 44419982, "body": "@Kapichu, those errors are likely caused by those functions previously being part of the <code>std::num::FloatMath</code> trait (not the literal defaulting), however that will also be resolved by <a href=\"http://www.rust-lang.org/install.html\" rel=\"nofollow noreferrer\">upgrading</a> (I recommend <a href=\"https://github.com/brson/multirust\" rel=\"nofollow noreferrer\">multirust</a> too)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 20, "last_activity_date": 1595957577, "last_edit_date": 1595957577, "creation_date": 1421592475, "answer_id": 28010995, "question_id": 28010779, "link": "https://stackoverflow.com/questions/28010779/where-is-the-sine-function/28010995#28010995", "title": "Where is the sine function?", "body": "<p>The <code>Float</code> trait was removed, and the methods are inherent implementations on the types now (<a href=\"https://doc.rust-lang.org/std/primitive.f32.html#method.sin\" rel=\"nofollow noreferrer\"><code>f32</code></a>, <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.sin\" rel=\"nofollow noreferrer\"><code>f64</code></a>). That means there's a bit less typing to access math functions:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let val: f32 = 3.14159;\n    println!(&quot;{}&quot;, val.sin());\n}\n</code></pre>\n<p>However, it's ambiguous if <code>3.14159.sin()</code> refers to a 32- or 64-bit number, so you need to specify it explicitly. Above, I set the type of the variable, but you can also use a type suffix:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    println!(&quot;{}&quot;, 3.14159_f64.sin());\n}\n</code></pre>\n<p>You can also use <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\" rel=\"nofollow noreferrer\">fully qualified syntax</a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    println!(&quot;{}&quot;, f32::sin(3.14159));\n}\n</code></pre>\n<hr />\n<p>Real code should use the <a href=\"https://doc.rust-lang.org/std/f32/consts/constant.PI.html\" rel=\"nofollow noreferrer\"><code>PI</code></a> constant; I've used an inline number to avoid complicating the matter.</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5912, "favorite_count": 1, "accepted_answer_id": 28010995, "answer_count": 2, "score": 14, "last_activity_date": 1595957577, "creation_date": 1421591208, "last_edit_date": 1494950496, "question_id": 28010779, "link": "https://stackoverflow.com/questions/28010779/where-is-the-sine-function", "title": "Where is the sine function?", "body": "<p>Simple question: Where is <code>sin()</code>? I've searched and only found in the Rust docs that there are traits like <code>std::num::Float</code> that <em>require</em> sin, but no <em>implementation</em>.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 10, "last_activity_date": 1421578526, "creation_date": 1421578526, "answer_id": 28008881, "question_id": 28008585, "link": "https://stackoverflow.com/questions/28008585/changing-a-node-in-a-tree-in-rust/28008881#28008881", "title": "Changing a node in a tree in Rust", "body": "<p>This code compiles: </p>\n\n<pre><code>#[derive(Clone)]\npub enum Node {\n    Value(u32),\n    Branch(u32, Box&lt;Node&gt;, Box&lt;Node&gt;),\n}\n\nfn main() {\n    let root = Node::Branch(1, Box::new(Node::Value(2)), Box::new(Node::Value(3)));\n    zero_node(&amp;root, 2);\n}\n\npub fn zero_node (tree: &amp;Node, node_index: u8) -&gt; Node {\n\n    let mut new_tree = tree.clone();\n\n    fn zero_rec (node : &amp;mut Node, node_count : u8, node_index : u8) -&gt; u8 {\n        if node_index == node_count {\n            match node {\n                &amp;mut Node::Value(ref mut val) =&gt; { *val = 0; },\n                &amp;mut Node::Branch(ref mut val, _, _) =&gt; { *val = 0; }\n            }\n            node_count\n        } else {\n            match node {\n                &amp;mut Node::Value(_) =&gt; {1},\n                &amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; {\n                    let count_left = zero_rec(&amp;mut **left, node_count + 1, node_index);\n                    let count_right = zero_rec(&amp;mut **right, node_count + 1 + count_left, node_index);\n                    count_left + count_right + 1\n                }\n            }\n        }\n    }\n\n    zero_rec(&amp;mut new_tree, 0, node_index);\n\n    new_tree\n\n}\n</code></pre>\n\n<p>The changes I made were:</p>\n\n<ul>\n<li><code>&amp;new_tree</code> &rarr; <code>&amp;mut new_tree</code> and <code>&amp;**left</code> &rarr; <code>&amp;mut **left</code> etc.: the way to create an <code>&amp;mut T</code> reference is with the <code>&amp;mut</code> operator (i.e. the <code>mut</code> is necessary). This fixes the <code>cannot borrow immutable borrowed content as mutable</code> error by passing a mutable reference rather than an immutable</li>\n<li>changing the <code>node_index == node_count</code> branch to directly mutate the values, rather than trying to overwrite in place. This fixes the <code>cannot move out of borrowed content</code> error by just not doing any moves at all.</li>\n</ul>\n\n<p>The overwriting could actually be achieved with careful use of <code>std::mem::replace</code>, to swap in a new value (e.g. <code>Value(0)</code> since that's cheap to create) to the <code>left</code> and <code>right</code> references. The <code>replace</code> functions returns the value that existed before, i.e. exactly the things inside <code>left</code> and <code>right</code> that you need to create the new branch. This change to the relevant <code>match</code> arm looks a bit like:</p>\n\n<pre><code>&amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; { \n    let l = mem::replace(left, Box::new(Node::Value(0)));\n    let r = mem::replace(right, Box::new(Node::Value(0)));\n    *node = Node::Branch(0, l , r); \n}\n</code></pre>\n\n<p>(Having added <code>use std::mem;</code> to the top of the file.)</p>\n\n<p>However it hits a new error:</p>\n\n<pre><code>&lt;anon&gt;:25:9: 25:39 error: cannot assign to `*node` because it is borrowed\n&lt;anon&gt;:25                   *node = Node::Branch(0, l , r); \n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:22:26: 22:38 note: borrow of `*node` occurs here\n&lt;anon&gt;:22               &amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; { \n                                             ^~~~~~~~~~~~\n</code></pre>\n\n<p>The <code>left</code> and <code>right</code> values are pointers deep into the old contents of <code>node</code>, so, as far as the compiler knows (at the moment), overwriting <code>node</code> will invalidate those pointers which would cause any further code using them to be broken (of course, we can see that neither are used more, but the compiler doesn't pay attention to things like that yet). Fortunately there's an easy fix: both <code>match</code> arms are setting <code>node</code> to a new value, so we can use the <code>match</code> to compute the new value and then set <code>node</code> to it after doing the computation:</p>\n\n<pre><code>*node = match node {\n    &amp;mut Node::Value(_) =&gt; Node::Value(0),\n    &amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; { \n        let l = mem::replace(left, Box::new(Node::Value(0)));\n        let r = mem::replace(right, Box::new(Node::Value(0)));\n        Node::Branch(0, l , r)\n    }\n};\n</code></pre>\n\n<p>(NB. the order of operations is a little strange, that's the same as <code>let new_val = match node { ... }; *node = new_val;</code>.)</p>\n\n<p><em>However</em>, that is more expensive than doing it as I wrote above, since it has to allocate 2 new boxes for the new <code>Branch</code>, while the one that modifies in-place doesn't have to do this.</p>\n\n<hr>\n\n<p>A slightly \"nicer\" version might be (comments inline):</p>\n\n<pre><code>#[derive(Clone, Show)]\npub enum Node {\n    Value(u32),\n    Branch(u32, Box&lt;Node&gt;, Box&lt;Node&gt;),\n}\n\nfn main() {\n    let root = Node::Branch(1, Box::new(Node::Value(2)), Box::new(Node::Value(3)));\n    let root = zero_node(root, 2);\n\n    println!(\"{:?}\", root);\n}\n\n// Taking `tree` by value (i.e. not by reference, &amp;) possibly saves on\n// `clone`s: the user of `zero_node can transfer ownership (with no\n// deep cloning) if they no longer need their tree.\n//\n// Alternatively, it is more flexible for the caller if it takes \n// `&amp;mut Node` and returns () as it avoids them having to be careful \n// to avoid moving out of borrowed data.\npub fn zero_node (mut tree: Node, node_index: u8) -&gt; Node {\n\n    fn zero_rec (node : &amp;mut Node, node_count : u8, node_index : u8) -&gt; u8 {\n        if node_index == node_count {\n            // dereferencing once avoids having to repeat &amp;mut a lot\n            match *node {\n                // it is legal to match on multiple patterns, if they bind the same\n                // names with the same types\n                Node::Value(ref mut val) | \n                    Node::Branch(ref mut val, _, _) =&gt; { *val = 0; },\n            }\n            node_count\n        } else {\n            match *node {\n                Node::Value(_) =&gt; 1,\n                Node::Branch(_, ref mut left, ref mut right) =&gt; {\n                    let count_left = zero_rec(&amp;mut **left, node_count + 1, node_index);\n                    let count_right = zero_rec(&amp;mut **right, node_count + 1 + count_left, node_index);\n                    count_left + count_right + 1\n                }\n            }\n        }\n    }\n\n    zero_rec(&amp;mut tree, 0, node_index);\n\n    tree\n\n}\n</code></pre>\n"}], "owner": {"reputation": 225, "user_id": 1777662, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d0c1b67d1c29ed3968ffa9876ad21142?s=128&d=identicon&r=PG", "display_name": "Jackson Pauls", "link": "https://stackoverflow.com/users/1777662/jackson-pauls"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1412, "favorite_count": 0, "accepted_answer_id": 28008881, "answer_count": 1, "score": 4, "last_activity_date": 1421623710, "creation_date": 1421575722, "last_edit_date": 1421623710, "question_id": 28008585, "link": "https://stackoverflow.com/questions/28008585/changing-a-node-in-a-tree-in-rust", "title": "Changing a node in a tree in Rust", "body": "<p>I'm trying to write a function that, given a tree structure, returns a copy of that tree but with a node changed at a particular index. Here is what I have so far:</p>\n\n<pre><code>#[derive(Clone)]\npub enum Node {\n    Value(u32),\n    Branch(u32, Box&lt;Node&gt;, Box&lt;Node&gt;),\n}\n\nfn main() {\n    let root = Node::Branch(1, Box::new(Node::Value(2)), Box::new(Node::Value(3)));\n    zero_node(&amp;root, 2);\n}\n\npub fn zero_node (tree: &amp;Node, node_index: u8) -&gt; Node {\n\n    let mut new_tree = tree.clone();\n\n    fn zero_rec (node : &amp;mut Node, node_count : u8, node_index : u8) -&gt; u8 {\n        if (node_index == node_count) {\n            match node {\n                &amp;mut Node::Value(_) =&gt; { *node = Node::Value(0); },\n                &amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; { *node = Node::Branch(0, *left, *right);  }\n            }\n            node_count\n        } else {\n            match node {\n                &amp;mut Node::Value(val) =&gt; {1},\n                &amp;mut Node::Branch(_, ref mut left, ref mut right) =&gt; {\n                    let count_left = zero_rec(&amp;**left, node_count + 1, node_index);\n                    let count_right = zero_rec(&amp;**right, node_count + 1 + count_left, node_index);\n                    count_left + count_right + 1\n                }\n            }\n        }\n    }\n\n    zero_rec(&amp;new_tree, 0, node_index);\n\n    new_tree\n\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/YdIm0g\" rel=\"nofollow\">http://is.gd/YdIm0g</a></p>\n\n<p>I can't seem to work my way out of errors like: \"cannot borrow immutable borrowed content as mutable\" and \"cannot move out of borrowed content\".</p>\n\n<p>I could create the new tree from scratch based on the original, and alter one node in the process. But I'd like to understand how to win this fight with the borrow checker.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421594316, "post_id": 28006383, "comment_id": 44409960, "body": "You have a lot of redundant type annotations. I think that they are useful while learning, but eventually you want to remove them to reduce visual clutter, keeping them only where needed. For example, your <code>reverse</code> method could <a href=\"http://is.gd/I815RY\" rel=\"nofollow noreferrer\">look much shorter</a>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1421546392, "creation_date": 1421546392, "answer_id": 28006431, "question_id": 28006383, "link": "https://stackoverflow.com/questions/28006383/how-can-i-change-a-string-sort-function-to-allow-testing-it/28006431#28006431", "title": "How can I change a string sort function to allow testing it?", "body": "<p>Just make <code>sort</code> return the <code>Vec&lt;char&gt;</code>:</p>\n\n<pre><code>pub fn sort() -&gt; Vec&lt;char&gt; {\n    let wordy: &amp;'static str = \"I am a hello world example\";\n    let mut chars: Vec&lt;char&gt; = wordy.chars().collect();     \n    chars.sort();\n    chars   \n}\n</code></pre>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 601, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1421552235, "creation_date": 1421545869, "last_edit_date": 1421552235, "question_id": 28006383, "link": "https://stackoverflow.com/questions/28006383/how-can-i-change-a-string-sort-function-to-allow-testing-it", "title": "How can I change a string sort function to allow testing it?", "body": "<p>I have the following code:</p>\n\n<pre><code>pub mod str {\n    // http://stackoverflow.com/questions/27996430/reversing-a-string-in-rustlang-1-0-0/27996791#27996791\n    pub fn reverse() -&gt; String {\n    let wordy: &amp;str = \"lowks\";\n    let wordy_reverse: String = wordy\n        .graphemes(true)\n        .rev()\n        // .flat_map(|g| g.chars())\n        .collect();\n        // for word in wordy.words().rev() {\n            //      print!(\"{}\", word);\n        // }\n    wordy_reverse\n    }\n\n    pub fn sort() {\n    let wordy: &amp;'static str = \"I am a hello world example\"; //'\n        let mut chars: Vec&lt;char&gt; = wordy.chars().collect();     \n        chars.sort();\n        for char in chars.iter() {\n            println!(\"{}\", char);\n        }   \n    }\n\n    pub fn replace() -&gt; String {\n        let string_to_replace = String::from_str(\"Hello World!\");\n        let new_string: String = string_to_replace.replace(\"Hello\", \"Goodbye\");\n        format!(\"{} -&gt; {}\", string_to_replace, new_string)\n\n    }\n}\n\n#[test]\n\nfn test_replace() {\n    assert_eq!(\"Hello World! -&gt; Goodbye World!\", str::replace());\n    let reverse: String = str::reverse();\n    assert_eq!(\"skwol\", &amp;*reverse);\n}\n</code></pre>\n\n<p>I can't figure out how to change the sort function to expose it so that I can add test for it like the other two. Can someone please help ?</p>\n"}, {"tags": ["reference", "rust", "traits", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421538459, "post_id": 28005134, "comment_id": 44399617, "body": "&quot;what if I wanted a 100 element struct&quot; - Rust uses optimizations such as RVO that will automatically use a reference when appropriate and the better choice."}, {"owner": {"reputation": 800, "user_id": 2325220, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0609fcfb1a365a2477864962e523a780?s=128&d=identicon&r=PG", "display_name": "Jeremy Sorensen", "link": "https://stackoverflow.com/users/2325220/jeremy-sorensen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421540776, "post_id": 28005134, "comment_id": 44400132, "body": "@Shepmaster: RVO is only going to affect the return value, which I am returning by value.  Can you point to any documentation that shows that traits for large structs should be implemented by value?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1421541663, "post_id": 28005134, "comment_id": 44400310, "body": "The best documentation I know of would be the <a href=\"http://doc.rust-lang.org/book/pointers.html#returning-pointers\" rel=\"nofollow noreferrer\">book chapter on returning pointers</a>. However, I <a href=\"http://is.gd/25ITa7\" rel=\"nofollow noreferrer\">created an example of adding a large struct</a> and checked the generated LLVM (slightly cleaned): <code>(%struct.Big* sret, %struct.Big*, %struct.Big*)</code>. I don&#39;t claim to be an LLVM expert, but that looks like it automatically is taking and returning by reference."}, {"owner": {"reputation": 800, "user_id": 2325220, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0609fcfb1a365a2477864962e523a780?s=128&d=identicon&r=PG", "display_name": "Jeremy Sorensen", "link": "https://stackoverflow.com/users/2325220/jeremy-sorensen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1421552452, "post_id": 28005134, "comment_id": 44402078, "body": "The documentation is also referring to the return value, which I agree shouldn&#39;t be a ref.  In fact that documentation used to say that you should not use pointers for input parameters unless you needed to, but that was actually removed.  Also I changed your example to do pass by reference and found it removes two allocations (<code>%arg7 = alloca %struct.Big, align 8</code> and <code>%arg8 = alloca %struct.Big, align 8</code>) so it looks like for large structs at least, references are better."}, {"owner": {"reputation": 800, "user_id": 2325220, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0609fcfb1a365a2477864962e523a780?s=128&d=identicon&r=PG", "display_name": "Jeremy Sorensen", "link": "https://stackoverflow.com/users/2325220/jeremy-sorensen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1421552605, "post_id": 28005134, "comment_id": 44402100, "body": "I should point out that I know less than anyone about LLVM, so my interpretation may be all wet.  Also a distinct disadvantage of using references for operator overloading is that if you happen to not have references, <code>let c = (&amp;a) + (&amp;b);</code> is pretty annoying."}], "answers": [{"comments": [{"owner": {"reputation": 800, "user_id": 2325220, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0609fcfb1a365a2477864962e523a780?s=128&d=identicon&r=PG", "display_name": "Jeremy Sorensen", "link": "https://stackoverflow.com/users/2325220/jeremy-sorensen"}, "edited": false, "score": 4, "creation_date": 1421535936, "post_id": 28005283, "comment_id": 44399006, "body": "&quot;Add::add always takes self by value. Here, self is of type &amp;&#39;a Vector, because that&#39;s the type we&#39;re implementing Add on.&quot; That is the key information, that the type of self changes depending on if the trait is for a reference or not. Thanks!"}, {"owner": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "edited": false, "score": 7, "creation_date": 1486764983, "post_id": 28005283, "comment_id": 71503969, "body": "Wow. Amazed that this is the right answer, and yet it is. This all feels quite counter-intuitive. That you can define Add in two different ways depending on if its a reference or not feels like a recipe for trouble."}, {"owner": {"reputation": 570, "user_id": 3256073, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0f9a1e93018776d149054dc2ccbe57f?s=128&d=identicon&r=PG&f=1", "display_name": "hsandt", "link": "https://stackoverflow.com/users/3256073/hsandt"}, "reply_to_user": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "edited": false, "score": 0, "creation_date": 1562435953, "post_id": 28005283, "comment_id": 100375648, "body": "To bounce on @Squirrel &#39;s comment, should we implement one operation from the other to avoid redundancy? Either the Add by reference copies the values and applies Add by value, or Add by value applies Add by reference on the moved values?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1562469413, "post_id": 28005283, "comment_id": 100380818, "body": "Yes, absolutely! Code reuse is always good! :) Usually, you&#39;ll want the by-value implementation to be the main one if values are cheap to clone/copy and the by-reference implementation otherwise."}, {"owner": {"reputation": 7942, "user_id": 516188, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/934a553983eaca4c3f8f939daf6d2faa?s=128&d=identicon&r=PG", "display_name": "Emmanuel Touzery", "link": "https://stackoverflow.com/users/516188/emmanuel-touzery"}, "edited": false, "score": 1, "creation_date": 1563040879, "post_id": 28005283, "comment_id": 100573558, "body": "you actually even need to implement all the combinations if one is ref, the other not, and vice-versa. In rust proper it was done through a macro... <a href=\"https://stackoverflow.com/questions/38811387/how-to-implement-idiomatic-operator-overloading-for-values-and-references-in-rus\" title=\"how to implement idiomatic operator overloading for values and references in rus\">stackoverflow.com/questions/38811387/&hellip;</a>"}, {"owner": {"reputation": 7942, "user_id": 516188, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/934a553983eaca4c3f8f939daf6d2faa?s=128&d=identicon&r=PG", "display_name": "Emmanuel Touzery", "link": "https://stackoverflow.com/users/516188/emmanuel-touzery"}, "edited": false, "score": 0, "creation_date": 1563040996, "post_id": 28005283, "comment_id": 100573590, "body": "the comment on the macro is <code>implements binary operators &quot;&amp;T op U&quot;, &quot;T op &amp;U&quot;, &quot;&amp;T op &amp;U&quot; based on &quot;T op U&quot;</code>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 81, "last_activity_date": 1491098574, "last_edit_date": 1491098574, "creation_date": 1421535647, "answer_id": 28005283, "question_id": 28005134, "link": "https://stackoverflow.com/questions/28005134/how-do-i-implement-the-add-trait-for-a-reference-to-a-struct/28005283#28005283", "title": "How do I implement the Add trait for a reference to a struct?", "body": "<p>You need to implement <code>Add</code> on <code>&amp;Vector</code> rather than on <code>Vector</code>.</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Add&lt;&amp;'b Vector&gt; for &amp;'a Vector {\n    type Output = Vector;\n\n    fn add(self, other: &amp;'b Vector) -&gt; Vector {\n        Vector {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n</code></pre>\n\n<p>In its definition, <code>Add::add</code> always takes <code>self</code> by value. But references are types like any other<sup>1</sup>, so they can implement traits too. When a trait is implemented on a reference type, the type of <code>self</code> is a reference; the reference is passed by value. Normally, passing by value in Rust implies transferring ownership, but when references are passed by value, they're simply copied (or reborrowed/moved if it's a mutable reference), and that doesn't transfer ownership of the referent (because a reference doesn't own its referent in the first place). Considering all this, it makes sense for <code>Add::add</code> (and many other operators) to take <code>self</code> by value: if you need to take ownership of the operands, you can implement <code>Add</code> on structs/enums directly, and if you don't, you can implement <code>Add</code> on references.</p>\n\n<p>Here, <code>self</code> is of type <code>&amp;'a Vector</code>, because that's the type we're implementing <code>Add</code> on.</p>\n\n<p>Note that I also specified the <code>RHS</code> type parameter with a different lifetime to emphasize the fact that the lifetimes of the two input parameters are unrelated.</p>\n\n<hr>\n\n<p><sup>1</sup> Actually, reference types are special in that you can implement traits for references to types defined in your crate (i.e. if you're allowed to implement a trait for <code>T</code>, then you're also allowed to implement it for <code>&amp;T</code>). <code>&amp;mut T</code> and <code>Box&lt;T&gt;</code> have the same behavior, but that's not true in general for <code>U&lt;T&gt;</code> where <code>U</code> is not defined in the same crate.</p>\n"}, {"tags": [], "owner": {"reputation": 7942, "user_id": 516188, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/934a553983eaca4c3f8f939daf6d2faa?s=128&d=identicon&r=PG", "display_name": "Emmanuel Touzery", "link": "https://stackoverflow.com/users/516188/emmanuel-touzery"}, "is_accepted": false, "score": 11, "last_activity_date": 1563174230, "last_edit_date": 1563174230, "creation_date": 1563042265, "answer_id": 57021762, "question_id": 28005134, "link": "https://stackoverflow.com/questions/28005134/how-do-i-implement-the-add-trait-for-a-reference-to-a-struct/57021762#57021762", "title": "How do I implement the Add trait for a reference to a struct?", "body": "<p>If you want to support all scenarios, you must support all the combinations:</p>\n\n<ul>\n<li>&amp;T op U</li>\n<li>T op &amp;U</li>\n<li>&amp;T op &amp;U</li>\n<li>T op U</li>\n</ul>\n\n<p>In rust proper, <a href=\"https://stackoverflow.com/a/38815035/516188\">this was done through an internal macro</a>.</p>\n\n<p>Luckily, there is a rust crate, <a href=\"https://docs.rs/impl_ops/0.1.1/impl_ops/index.html\" rel=\"noreferrer\">impl_os</a>, that also offers a macro to write that boilerplate for us: the crate offers the <a href=\"https://docs.rs/impl_ops/0.1.1/impl_ops/macro.impl_op_ex.html\" rel=\"noreferrer\">impl_op_ex!</a> macro, which generates all the combinations.</p>\n\n<p>Here is their sample:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use] extern crate impl_ops;\nuse std::ops;\n\nimpl_op_ex!(+ |a: &amp;DonkeyKong, b: &amp;DonkeyKong| -&gt; i32 { a.bananas + b.bananas });\n\nfn main() {\n    let total_bananas = &amp;DonkeyKong::new(2) + &amp;DonkeyKong::new(4);\n    assert_eq!(6, total_bananas);\n    let total_bananas = &amp;DonkeyKong::new(2) + DonkeyKong::new(4);\n    assert_eq!(6, total_bananas);\n    let total_bananas = DonkeyKong::new(2) + &amp;DonkeyKong::new(4);\n    assert_eq!(6, total_bananas);\n    let total_bananas = DonkeyKong::new(2) + DonkeyKong::new(4);\n    assert_eq!(6, total_bananas);\n}\n</code></pre>\n\n<p>Even better, they have a <a href=\"https://docs.rs/impl_ops/0.1.1/impl_ops/macro.impl_op_ex_commutative.html\" rel=\"noreferrer\">impl_op_ex_commutative!</a> that'll also generate the operators with the parameters reversed if your operator happens to be commutative.</p>\n"}], "owner": {"reputation": 800, "user_id": 2325220, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0609fcfb1a365a2477864962e523a780?s=128&d=identicon&r=PG", "display_name": "Jeremy Sorensen", "link": "https://stackoverflow.com/users/2325220/jeremy-sorensen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15104, "favorite_count": 12, "accepted_answer_id": 28005283, "answer_count": 2, "score": 63, "last_activity_date": 1563174230, "creation_date": 1421534451, "last_edit_date": 1495541388, "question_id": 28005134, "link": "https://stackoverflow.com/questions/28005134/how-do-i-implement-the-add-trait-for-a-reference-to-a-struct", "title": "How do I implement the Add trait for a reference to a struct?", "body": "<p>I made a two element <code>Vector</code> struct and I want to overload the <code>+</code> operator.</p>\n\n<p>I made all my functions and methods take references, rather than values, and I want the <code>+</code> operator to work the same way.</p>\n\n<pre><code>impl Add for Vector {\n    fn add(&amp;self, other: &amp;Vector) -&gt; Vector {\n        Vector {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n</code></pre>\n\n<p>Depending on which variation I try, I either get lifetime problems or type mismatches. Specifically, the <code>&amp;self</code> argument seems to not get treated as the right type.</p>\n\n<p>I have seen examples with template arguments on <code>impl</code> as well as <code>Add</code>, but they just result in different errors.</p>\n\n<p>I found <a href=\"https://stackoverflow.com/questions/24594374/overload-operators-with-different-rhs-type\">How can an operator be overloaded for different RHS types and return values?</a> but the code in the answer doesn't work even if I put a <code>use std::ops::Mul;</code> at the top.</p>\n\n<p>I am using rustc 1.0.0-nightly (ed530d7a3 2015-01-16 22:41:16 +0000)</p>\n\n<p>I won't accept \"you only have two fields, why use a reference\" as an answer; what if I wanted a 100 element struct? I will accept an answer that demonstrates that even with a large struct I should be passing by value, if that is the case (I don't think it is, though.) I am interested in knowing a good rule of thumb for struct size and passing by value vs struct, but that is not the current question.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421613208, "post_id": 28004414, "comment_id": 44416188, "body": "I think that <a href=\"https://github.com/rust-lang/rust/issues/21361\" rel=\"nofollow noreferrer\">issue #21361</a> would help by allowing <code>filter</code> on a <code>Box&lt;Iterator&lt;Item=...&gt;&gt;</code>."}], "tags": [], "owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "is_accepted": false, "score": 3, "last_activity_date": 1535291839, "last_edit_date": 1535291839, "creation_date": 1421529429, "answer_id": 28004414, "question_id": 28003773, "link": "https://stackoverflow.com/questions/28003773/implementing-iterator-using-an-underlying-iterator/28004414#28004414", "title": "Implementing Iterator using an underlying iterator", "body": "<blockquote>\n  <p>Editor's note: This answer uses some functions and types that were removed before Rust 1.0. The ideas are still valid but the code does not run in Rust 1.0. Some bugs have been fixed since then as well.</p>\n</blockquote>\n\n<p>This is an interesting approach to computing primes, but I'm not sure it's going to work well with Rust as it stands right now. There's a lot of bugs we're ironing out with trait objects that make them... not great.</p>\n\n<p>Still, I can address some issues. </p>\n\n<p>You're trying to store a shared reference to the iterator in your struct. That's not going to work for two reasons: iterators require mutability for <code>next</code>, and the iterators aren't going to live long enough.</p>\n\n<p>Presumably, you want something like <code>Box&lt;Iterator + 'static&gt;</code> in your struct, but due to the aforementioned bugs, that just doesn't work for no particularly good reason.</p>\n\n<p>For now I'm afraid you'll have to maintain the list of primes you've seen explicitly. I suggest something like:</p>\n\n<pre><code>struct Foo {\n    odds: Counter&lt;u32&gt;,\n    primes: Vec&lt;u32&gt;,\n}\n</code></pre>\n\n<p>And a more \"procedural\" approach with explicit for-loops:</p>\n\n<p>(not sure if it's totally appropriate to give a full solution here, so don't read ahead if you don't want spoilers, I guess?)</p>\n\n<pre><code>struct Foo {\n    odds: Counter&lt;u32&gt;,\n    primes: Vec&lt;u32&gt;,\n}\n\nimpl Foo {\n    fn new() -&gt; Foo {\n        Foo {\n            odds: count(2, 1),\n            primes: Vec::new(),\n        }\n    }\n}\n\nimpl Iterator for Foo {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        'main: for i in self.odds {\n            for &amp;prime in self.primes.iter() {\n                if i % prime == 0 {\n                    continue 'main;\n                }\n            }\n            self.primes.push(i);\n            return Some(i);\n        }\n        None\n    }\n}\n\nfn main() {\n    let foo = Foo::new();\n    for i in foo.take(10) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1535293339, "last_edit_date": 1535293339, "creation_date": 1421979452, "answer_id": 28102040, "question_id": 28003773, "link": "https://stackoverflow.com/questions/28003773/implementing-iterator-using-an-underlying-iterator/28102040#28102040", "title": "Implementing Iterator using an underlying iterator", "body": "<p>Now that <a href=\"https://github.com/rust-lang/rust/issues/21361\" rel=\"nofollow noreferrer\">#21361</a> has been closed, you can implement it this way:</p>\n\n<pre><code>use std::{iter, mem};\n\nstruct Sieve {\n    iter: Box&lt;Iterator&lt;Item = u64&gt; + 'static&gt;,\n}\n\nimpl Sieve {\n    fn new() -&gt; Sieve {\n        Sieve {\n            iter: Box::new(2..),\n        }\n    }\n}\n\nimpl Iterator for Sieve {\n    type Item = u64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {\n        let mut iter = mem::replace(&amp;mut self.iter, Box::new(iter::empty()));\n\n        match iter.next() {\n            Some(prime) =&gt; {\n                self.iter = Box::new(iter.filter(move |x| x % prime != 0));\n                Some(prime)\n            }\n            None =&gt; None,\n        }\n    }\n}\n\nfn main() {\n    let v: Vec&lt;_&gt; = Sieve::new().take(20).collect();\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>Some notes about the implementation:</p>\n\n<ol>\n<li>Your logic was backwards. You want to filter <code>x % prime != 0</code>. ^_^</li>\n<li><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\"><code>filter</code></a> <a href=\"https://stackoverflow.com/q/31374051/155423\">consumes the iterator</a>, but that would cause problem here. If we were allowed to consume it, then the <code>Sieve</code> struct would no longer be whole and valid. To work around this, we use <a href=\"http://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>mem::replace</code></a> to put in a placeholder value. That lets us consume the iterator before we update the struct with the new value.</li>\n<li>Every iteration adds more function calls to the stack. I was only able get the first 6466 prime numbers with this technique before I ran out of stack space.</li>\n</ol>\n"}, {"tags": [], "owner": {"reputation": 151, "user_id": 7296427, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88e39a770651699d70a8749d97f7b64d?s=128&d=identicon&r=PG&f=1", "display_name": "Jason Lee", "link": "https://stackoverflow.com/users/7296427/jason-lee"}, "is_accepted": false, "score": 0, "last_activity_date": 1550308111, "last_edit_date": 1550308111, "creation_date": 1539945556, "answer_id": 52890709, "question_id": 28003773, "link": "https://stackoverflow.com/questions/28003773/implementing-iterator-using-an-underlying-iterator/52890709#52890709", "title": "Implementing Iterator using an underlying iterator", "body": "<p>The key of this problem is to <code>filter</code> the iterator without moving it, which can be done by using <code>take_mut</code>.</p>\n\n<p>Add <code>take_mut = \"0.2.2\"</code>(or any other compatible versions) to your dependencies, then you can do something like:</p>\n\n<pre><code>extern crate take_mut;\n\nstruct Primes {\n    iter: Box&lt;Iterator&lt;Item=i64&gt;&gt;,\n}\n\nimpl Iterator for Primes {\n    type Item=i64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;i64&gt; {\n        let result = self.iter.next();\n        if let Some(prime) = result {\n            take_mut::take(&amp;mut self.iter, \n                |primes| Box::new(primes.filter(move |p| p % prime != 0)));\n        }\n        result\n    }\n}\n\nimpl Primes {\n    fn new() -&gt; Primes {\n        Primes { iter: Box::new(2..)}\n    }\n}\n\nfn main() {\n    println!(\"First 10 primes:\");\n    for p in Primes::new().take(10) {\n        println!(\"{}\", p);\n    }\n}\n</code></pre>\n\n<p><strong>Edit</strong>: <code>Option::take</code> can also do this job.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Primes {\n    iter: Option&lt;Box&lt;Iterator&lt;Item = u64&gt;&gt;&gt;,\n}\n\nimpl Primes {\n    fn new() -&gt; Primes {\n        Primes {\n            iter: Some(Box::new(2..)),\n        }\n    }\n}\n\nimpl Iterator for Primes {\n    type Item = u64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {\n        let mut iter = self.iter.take()?;\n        let result = iter.next();\n        if let Some(prime) = result {\n            self.iter = Some(Box::new(iter.filter(move |n| n % prime != 0)));\n        }\n        result\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1713, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1550308111, "creation_date": 1421525200, "last_edit_date": 1535291631, "question_id": 28003773, "link": "https://stackoverflow.com/questions/28003773/implementing-iterator-using-an-underlying-iterator", "title": "Implementing Iterator using an underlying iterator", "body": "<blockquote>\n  <p>Editor's note: This question uses some functions and types that were removed before Rust 1.0. The ideas are still valid but the code does not run in Rust 1.0.</p>\n</blockquote>\n\n<p>I'm trying to solve Project Euler's problem #3 using Rust by implementing Eratosthenes Sieve as an iterator.</p>\n\n<p>After some brain-exploding tries with lifetimes, I stopped <a href=\"https://github.com/franza/euler-project-rust/blob/45962336c4af3f2625dc17e80fe2d68417c61808/problem3/src/main.rs\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<pre><code>use std::iter::count;\n\nstruct EratosthenesStream&lt;'a&gt; {\n    sieve: &amp;'a (Iterator + 'a),\n}\n\nimpl&lt;'a&gt; EratosthenesStream&lt;'a&gt; {\n    fn new() -&gt; EratosthenesStream&lt;'a&gt; {\n        EratosthenesStream {\n            sieve: &amp;count(2, 1),\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for EratosthenesStream&lt;'a&gt; {\n    type Item = isize;\n\n    fn next(&amp;mut self) -&gt; Option&lt;isize&gt; {\n        let prime = self.sieve.next().expect(\"Out of numbers\");\n        self.sieve = self.sieve.filter(|&amp;x| x % prime == 0);\n        Some(prime)\n    }\n}\n\nfn main() {\n    // let sieve = EratosthenesStream::new();\n    // for i in sieve.take(5) {\n    //   println!(\"{}\", i);\n    // }\n}\n</code></pre>\n\n<p>Building that thing gives me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling problem3 v0.0.1 (file:///home/franza/Projects/euler-project-rust/problem3)\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:16:33: 16:45 error: the value of the associated type `Item` (from the trait `core::iter::Iterator`) must be specified\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:16     EratosthenesStream { sieve: &amp;count(2, 1) }\n                                                                                                 ^~~~~~~~~~~~\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25:29: 25:56 error: type `&amp;'a core::iter::Iterator + 'a` does not implement any method in scope named `filter`\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25     self.sieve = self.sieve.filter(|&amp;x| x % prime == 0);\n                                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25:41: 25:42 error: the type of this value must be known in this context\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25     self.sieve = self.sieve.filter(|&amp;x| x % prime == 0);\n                                                                                                         ^\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25:36: 25:55 error: can't infer the \"kind\" of the closure, explicitly annotate it. e.g. `|&amp;:| {}`\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:25     self.sieve = self.sieve.filter(|&amp;x| x % prime == 0);\n                                                                                                    ^~~~~~~~~~~~~~~~~~~\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:26:5: 26:16 error: mismatched types: expected `core::option::Option&lt;isize&gt;`, found `core::option::Option&lt;&lt;core::iter::Iterator as core::iter::Iterator&gt;::Item&gt;` (expected isize, found associated type)\n/home/franza/Projects/euler-project-rust/problem3/src/main.rs:26     Some(prime)\n                                                                     ^~~~~~~~~~~\nerror: aborting due to 5 previous errors\nCould not compile `problem3`.\n</code></pre>\n\n<p>I'm starting out in Rust so I don't know a lot about this</p>\n\n<p>UPDATE:   </p>\n\n<ul>\n<li><code>rustc 1.0.0-nightly (44a287e6e 2015-01-08 17:03:40 -0800)</code></li>\n<li><code>cargo 0.0.1-pre-nightly (8c01b6b 2015-01-08 20:52:43 +0000)</code></li>\n</ul>\n"}, {"tags": ["string", "char", "rust"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 2, "creation_date": 1421540650, "post_id": 28003842, "comment_id": 44400110, "body": "Hm, that&#39;s funny. I searched Rust API for <code>to_string</code> but found no implementers that method on char. Could you post a link to it&#39;s API. For completeness sake <code>^_^</code>!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1421551266, "post_id": 28003842, "comment_id": 44401931, "body": "@DanielFath: you&#39;re looking for <a href=\"http://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"nofollow noreferrer\"><code>std::string::ToString::to_string</code></a>, which has a blanket impl for <code>T: String</code>, which <code>char</code> implements."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1421580055, "post_id": 28003842, "comment_id": 44406059, "body": "Oh, so that&#39;s how it works. I thought <code>String</code> was buffer like structure, while in fact it&#39;s a trait. Hmm..."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 3, "creation_date": 1421596036, "post_id": 28003842, "comment_id": 44410458, "body": "It&#39;s both: <a href=\"http://doc.rust-lang.org/nightly/std/string/struct.String.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/string/struct.String.html</a> and <a href=\"http://doc.rust-lang.org/nightly/std/fmt/trait.String.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/fmt/trait.String.html</a>"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 17, "last_activity_date": 1432485611, "last_edit_date": 1432485611, "creation_date": 1421525646, "answer_id": 28003842, "question_id": 28003483, "link": "https://stackoverflow.com/questions/28003483/how-do-i-convert-a-char-to-a-string/28003842#28003842", "title": "How do I convert a char to a String?", "body": "<p>You use the <code>to_string()</code> method:</p>\n\n<pre><code>'c'.to_string()\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16020, "user_id": 9716597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f97c613dca0b157b40551a0d756abeb?s=128&d=identicon&r=PG&f=1", "display_name": "L. F.", "link": "https://stackoverflow.com/users/9716597/l-f"}, "is_accepted": false, "score": 2, "last_activity_date": 1618028331, "creation_date": 1618028331, "answer_id": 67030761, "question_id": 28003483, "link": "https://stackoverflow.com/questions/28003483/how-do-i-convert-a-char-to-a-string/67030761#67030761", "title": "How do I convert a char to a String?", "body": "<p>Since Rust 1.46, <code>String</code> implements <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-From%3Cchar%3E\" rel=\"nofollow noreferrer\"><code>From&lt;char&gt;</code></a>, so you can alternatively use:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>String::from('c')\n</code></pre>\n<p>or, with type inference,</p>\n<pre><code>'c'.into()\n</code></pre>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 953, "favorite_count": 0, "accepted_answer_id": 28003842, "answer_count": 2, "score": 13, "last_activity_date": 1618028331, "creation_date": 1421523674, "last_edit_date": 1432548186, "question_id": 28003483, "link": "https://stackoverflow.com/questions/28003483/how-do-i-convert-a-char-to-a-string", "title": "How do I convert a char to a String?", "body": "<p>Is there a succinct way to convert a <code>char</code> to a <code>String</code> in Rust other than:</p>\n\n<pre><code>let mut s = String::new();\ns.push('c');\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 0, "creation_date": 1421532299, "post_id": 28004037, "comment_id": 44398116, "body": "That definitely explains the problem.  Unfortunately, I&#39;m not about to tinker with <code>listen</code>, since it&#39;s part of the <code>hyper</code> library.  And <code>return_page</code> needs access to member variables, so that&#39;s constrained, too."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 1, "last_activity_date": 1615705417, "last_edit_date": 1615705417, "creation_date": 1421526887, "answer_id": 28004037, "question_id": 28003383, "link": "https://stackoverflow.com/questions/28003383/what-is-the-difference-between-passing-a-function-and-a-method-as-a-parameter/28004037#28004037", "title": "What is the difference between passing a function and a method as a parameter?", "body": "<p>The short answer is that you can use UFCS (Uniform Function Call Syntax):</p>\n<pre><code>let mut listening = server.listen(WebServer::return_page).unwrap();\n</code></pre>\n<p>The long answer is that I doubt this will make your code work. You did not show how <code>return_page</code> was defined directly in main, but I guess it was something like <code>fn return_page(req: Request, mut res: Response)</code>.</p>\n<p>This signature is different from the <code>return_page</code> defined as a method of WebServer.\nLet's take a look at it:</p>\n<pre><code>fn return_page(&amp;mut self, req: Request, mut res: Response)\n</code></pre>\n<p>this is a function that takes a first argument of type <code>&amp;mut self</code>, i.e. <code>&amp;mut WebServer</code>. If <code>listen</code> was not expecting this signature you will get a &quot;mismatched types&quot; error.</p>\n<p>Let me try creating a mock implementation of your code:</p>\n<pre><code>// serve calls listen passing it return_page. Note that\n// the signature of return_page matches the one that\n// listen is expecting, fn(u32, u32)\nfn serve() {\n    listen(return_page)\n}\n\n// mock return_page\nfn return_page(a: u32, b: u32) { println!(&quot;{}, {}&quot;, a, b) }\n\n// listen expects a function that takes two u32\n// and returns nothing\nfn listen( f: fn(u32, u32) ) { f(1, 2) }\n\nfn main() {\n    serve();\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main%28%29%20%7B%0A%20%20%20%20serve%28%29;%0A%7D%0A%0Afn%20serve%28%29%20%7B%0A%20%20%20%20listen%28return_page%29%0A%7D%0Afn%20return_page%28a:%20u32,%20b:%20u32%29%20%7B%20println!%28%22%7B%7D,%20%7B%7D%22,%20a,%20b%29%20%7D%0A%0Afn%20listen%28%20f:%20fn%28u32,%20u32%29%20%29%20%7B%20f%281,%202%29%20%7D\" rel=\"nofollow noreferrer\">playpen</a></p>\n<p>Now let's move serve and return_page into an impl, as I think you did:</p>\n<pre><code>fn listen( f: fn(u32, u32) ) { f(1, 2) }\n\nstruct WebServer;\nimpl WebServer {\n    fn serve(&amp;self) {\n        listen(WebServer::return_page)\n    }\n    \n    // a method is a function that takes the implementing type\n    // as a first parameter. We can use UFCS to invoke it as \n    // a function: WebServer::return_page\n    fn return_page(&amp;self, a: u32, b: u32) { println!(&quot;{}, {}&quot;, a, b) }\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main%28%29%20%7B%0A%7D%0A%0Afn%20listen%28%20f:%20fn%28u32,%20u32%29%20%29%20%7B%20f%281,%202%29%20%7D%0A%0Astruct%20WebServer;%0Aimpl%20WebServer%20%7B%0A%20%20%20%20fn%20serve%28&amp;self%29%20%7B%0A%20%20%20%20%20%20%20%20listen%28WebServer::return_page%29%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20//%20a%20method%20is%20a%20function%20that%20takes%20the%20implementing%20type%0A%20%20%20%20//%20as%20a%20first%20parameter.%20We%20can%20use%20UFCS%20to%20invoke%20it%20as%20%0A%20%20%20%20//%20a%20function:%20WebServer::return_page%0A%20%20%20%20fn%20return_page%28&amp;self,%20a:%20u32,%20b:%20u32%29%20%7B%20println!%28%22%7B%7D,%20%7B%7D%22,%20a,%20b%29%20%7D%0A%7D\" rel=\"nofollow noreferrer\">playpen</a></p>\n<p>Oops, mismatched types: <code>listen</code> is not expecting a first parameter of type <code>&amp;WebServer</code>. You would need this signature:\n<code>fn listen(f: fn(&amp;WebServer, u32, u32) )</code></p>\n<p>Note that if hypothetically <code>listen</code> did have that signature, our program would work. See this last <a href=\"https://play.rust-lang.org/?code=fn%20main%28%29%20%7B%0A%20%20%20%20let%20w%20=%20WebServer;%0A%20%20%20%20w.serve%28%29;%0A%7D%0A%0Afn%20listen%28f:%20fn%28&amp;WebServer,%20u32,%20u32%29%20%29%20%7B%20f%28&amp;WebServer,%201,%202%29%20%7D%0A%0Astruct%20WebServer;%0Aimpl%20WebServer%20%7B%0A%20%20%20%20fn%20serve%28&amp;self%29%20%7B%0A%20%20%20%20%20%20%20%20listen%28WebServer::return_page%29%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20return_page%28&amp;self,%20a:%20u32,%20b:%20u32%29%20%7B%20println!%28%22%7B%7D,%20%7B%7D%22,%20a,%20b%29%20%7D%0A%7D\" rel=\"nofollow noreferrer\">playpen</a> example</p>\n"}, {"comments": [{"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 1, "creation_date": 1421532825, "post_id": 28004039, "comment_id": 44398258, "body": "The <code>self</code> parameter stupidly snuck by me, yes, thanks. The closure syntax throws an error that <code>for&lt;&#39;r,&#39;r&gt;</code> (with the function&#39;s type) isn&#39;t implemented for <code>closure</code>. Implementing <code>Handler</code> gives the same error or (of course) tells me <code>return_page</code> doesn&#39;t exist (which it doesn&#39;t). Am I missing something?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 1, "creation_date": 1421534748, "post_id": 28004039, "comment_id": 44398724, "body": "See my edits. I changed the closure&#39;s type, changed the argument to <code>listen</code> and changed the <code>impl Handler</code> to be on a reference, otherwise I&#39;d have to move <code>self</code> into <code>listen</code>, which wouldn&#39;t be allowed."}, {"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 0, "creation_date": 1421537606, "post_id": 28004039, "comment_id": 44399426, "body": "Oh, <i>obviously</i> it should&#39;ve been <code>&amp;self</code>, right! Any idea why <code>&amp;WebServer</code> would throw <code>missing lifetime specifier [E0106]</code>? I&#39;ve only see that in relation to functions. (The closure change doesn&#39;t seem to change the result, though.)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1421538907, "last_edit_date": 1421538907, "creation_date": 1421526891, "answer_id": 28004039, "question_id": 28003383, "link": "https://stackoverflow.com/questions/28003383/what-is-the-difference-between-passing-a-function-and-a-method-as-a-parameter/28004039#28004039", "title": "What is the difference between passing a function and a method as a parameter?", "body": "<p>You can't pass <code>return_page</code> directly to <code>listen</code>, because <a href=\"http://hyperium.github.io/hyper/hyper/server/trait.Handler.html\" rel=\"nofollow\"><code>Handler</code></a> is only implemented on functions that take 2 parameters, a request and a response. <code>return_page</code> takes 3 parameters (<code>self</code> counts as a parameter).</p>\n\n<p>Try this:</p>\n\n<pre><code>let mut listening = server.listen(|&amp;: request, response| self.return_page(request, response)).unwrap();\n</code></pre>\n\n<p>Alternatively, add an <code>impl</code> for <code>Handler</code> and move your <code>return_page</code> function to this <code>impl</code>, named <code>handle</code>.</p>\n\n<pre><code>impl WebServer {\n    pub fn serve(&amp;mut self) {\n        let server = Server::http(Ipv4Addr(127, 0, 0, 1), 80);\n        let mut listening = server.listen(&amp;self).unwrap();\n        listening.await();\n    }\n}\n\nimpl&lt;'a&gt; Handler for &amp;'a WebServer {\n    fn handle(&amp;self, req: Request, mut res: Response) {\n        /* Put the page together */\n    }\n}\n</code></pre>\n\n<p>Note that <code>Handler</code> passes <code>self</code> by immutable reference, not by mutable reference. You may need to use <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> to bypass this.</p>\n"}], "owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2417, "favorite_count": 2, "answer_count": 2, "score": 4, "last_activity_date": 1615705417, "creation_date": 1421523019, "last_edit_date": 1495535303, "question_id": 28003383, "link": "https://stackoverflow.com/questions/28003383/what-is-the-difference-between-passing-a-function-and-a-method-as-a-parameter", "title": "What is the difference between passing a function and a method as a parameter?", "body": "<p>Like in <a href=\"https://stackoverflow.com/q/27994509/3438854\">a previous question</a> of mine, I'm refactoring a small Rust project.  Also similar to that question, the compiler and I don't see eye to eye on methods and values.  The error message is very different, though, and this <em>seems</em> to potentially involve libraries, <a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow noreferrer\">hyper</a> in this example.</p>\n\n<pre><code>/* extern and use directives... */\n\npub struct WebServer /* with stuff not relevant to the error */;\n\nimpl WebServer {\n    pub fn serve(&amp;mut self) {\n        let server = Server::http(Ipv4Addr(127, 0, 0, 1), 80);\n        let mut listening = server.listen(self.return_page).unwrap();\n        listening.await();\n    }\n\n    fn return_page(&amp;mut self, req: Request, mut res: Response) {\n        /* Put the page together */\n    }\n}\n</code></pre>\n\n<p>When <code>serve()</code> and <code>return_page()</code> are just functions in <code>main.rs</code>, this compiles and runs.</p>\n\n<p>Tucked into a <code>struct</code> as above, though, I get the following error:</p>\n\n<pre><code>.../src/main.rs:13:48: 13:59 error: attempted to take value of method `return_page` on type `&amp;mut WebServer`\n.../src/main.rs:13         let mut listening = server.listen(self.return_page).unwrap();\n                                                                  ^~~~~~~~~~~\n.../src/main.rs:13:48: 13:59 help: maybe a `()` to call it is missing? If not, try an anonymous function\n.../src/main.rs:13         let mut listening = server.listen(self.return_page).unwrap();\n                                                                  ^~~~~~~~~~~\n</code></pre>\n\n<p>I assume that the parser just needs a nudge in the right direction, but even with the advice I was given on the related problem, I don't see anything in the documentation suggesting a way to say, \"no, I really mean the function as a parameter, just like invoked function's signature says I need.\"  What am I missing, given that the above syntax works outside of a <code>struct</code>?</p>\n\n<p>A half-hearted attempt at a closure seemed to be worse <em>and</em> the error message still suggested calling <code>return_page</code> instead of passing it, but I may well be misunderstanding the usage in this case.</p>\n\n<p><strong>Edit</strong>:  To clarify the situation after working with the existing answers, the original <code>return_page()</code> doesn't have a <code>self</code> parameter, of course, which is itself part of the problem.  But it also needs <code>self</code> inside the object, because it needs access to member variables.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1421508126, "post_id": 28000698, "comment_id": 44390921, "body": "Thank you! <code>ContravariantLifetime</code> marker is what I needed."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1425316391, "post_id": 28000698, "comment_id": 45902890, "body": "It&#39;s called <code>PhantomData</code> now :)"}, {"owner": {"reputation": 1786, "user_id": 1209714, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f9e4181f2951ca8f21ed5c541686367?s=128&d=identicon&r=PG", "display_name": "Niko Matsakis", "link": "https://stackoverflow.com/users/1209714/niko-matsakis"}, "edited": false, "score": 0, "creation_date": 1428142171, "post_id": 28000698, "comment_id": 47057552, "body": "It&#39;s also now an error if you fail to include the marker."}], "tags": [], "owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "is_accepted": true, "score": 1, "last_activity_date": 1421506666, "creation_date": 1421506666, "answer_id": 28000698, "question_id": 28000462, "link": "https://stackoverflow.com/questions/28000462/how-to-specify-that-method-argument-must-have-longer-lifetime-than-selfs-lifeti/28000698#28000698", "title": "How to specify that method argument must have longer lifetime than self&#39;s lifetime?", "body": "<p>This should work for you (<a href=\"http://play.rust-lang.org/?code=%23!%5Ballow%28unused_variables%29%5D%0Astruct%20Handle%3C%27a%3E%28Option%3C%26%27a%20DropCanary%3E%29%3B%0A%0Aimpl%3C%27a%3E%20Handle%3C%27a%3E%20%7B%0A%20%20%20%20pub%20fn%20set_data%28%26mut%20self%2C%20data%3A%20%26%27a%20DropCanary%29%20%7B%0A%20%20%20%20%20%20%20%20self.0%20%3D%20Some%28data%29%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20save%20data%20raw%20ptr%0A%20%20%20%20%7D%0A%0A%20%20%20%20pub%20fn%20use_data%28%26self%29%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20use%20data%20raw%20ptr%0A%20%20%20%20%20%20%20%20println!%28%22alive%3F%22%29%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20mut%20handle%20%3D%20Handle%28None%29%3B%0A%20%20%20%20let%20long_enough_lifetime%20%3D%20DropCanary%7Blabel%3A%22long%22%7D%3B%0A%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20let%20short_lifetime%20%3D%20DropCanary%7Blabel%3A%22short%22%7D%3B%0A%20%20%20%20%20%20%20%20%2F%2Fhandle.set_data%28%26short_lifetime%29%3B%20%2F%2F%20This%20shouldn%27t%20be%20allowed!%0A%20%20%20%20%20%20%20%20handle.set_data%28%26long_enough_lifetime%29%3B%20%2F%2F%20This%20is%20OK%0A%20%20%20%20%7D%0A%0A%20%20%20%20handle.use_data%28%29%3B%0A%7D%0A%0A%2F%2F%2F%20---%20just%20for%20testing%20---%0A%0Astruct%20DropCanary%20%7B%0A%20%20%20%20label%3A%20%26%27static%20str%2C%0A%7D%0A%0Aimpl%20Drop%20for%20DropCanary%20%7B%0A%20%20%20%20fn%20drop%28%26mut%20self%29%20%7B%0A%20%20%20%20%20%20%20%20println!%28%22dropped%3A%20%7B%7D%22%2C%20self.label%29%3B%0A%20%20%20%20%7D%0A%7D\" rel=\"nofollow\">playpen</a>).</p>\n\n<p>The reason that your example compiles is simply because you do not use the lifetime inside the struct inside your example. Since you do not use it there is no constraint on it and it could just as well have been omitted. If you do not store any data with a lifetime inside your struct there is marker types which you can substitute for the Option I used <a href=\"http://doc.rust-lang.org/std/marker/index.html\" rel=\"nofollow\">here</a>.</p>\n\n<pre><code>#![allow(unused_variables)]\nstruct Handle&lt;'a&gt;(Option&lt;&amp;'a DropCanary&gt;);\n\nimpl&lt;'a&gt; Handle&lt;'a&gt; {\n    pub fn set_data(&amp;mut self, data: &amp;'a DropCanary) {\n        self.0 = Some(data);\n        // save data raw ptr\n    }\n\n    pub fn use_data(&amp;self) {\n        // use data raw ptr\n        println!(\"alive?\");\n    }\n}\n\nfn main() {\n    let mut handle = Handle(None);\n    let long_enough_lifetime = DropCanary{label:\"long\"};\n\n    {\n        let short_lifetime = DropCanary{label:\"short\"};\n        //handle.set_data(&amp;short_lifetime); // This shouldn't be allowed!\n        handle.set_data(&amp;long_enough_lifetime); // This is OK\n    }\n\n    handle.use_data();\n}\n\n/// --- just for testing ---\n\nstruct DropCanary {\n    label: &amp;'static str,\n}\n\nimpl Drop for DropCanary {\n    fn drop(&amp;mut self) {\n        println!(\"dropped: {}\", self.label);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 1, "accepted_answer_id": 28000698, "answer_count": 1, "score": 2, "last_activity_date": 1421506666, "creation_date": 1421504867, "question_id": 28000462, "link": "https://stackoverflow.com/questions/28000462/how-to-specify-that-method-argument-must-have-longer-lifetime-than-selfs-lifeti", "title": "How to specify that method argument must have longer lifetime than self&#39;s lifetime?", "body": "<p>I'd like to write a safe Rust wrapper for a C library. I need to express the C's library raw pointer ownership rules in Rust's terms.</p>\n\n<p>The library has its private structure such as: <code>struct handle {void *_data}</code> and exposes setter as <code>set_data(struct handle*, void *data)</code>.</p>\n\n<p>I'd like to make Rust version of that method with signature that says \"<code>data</code> must live at least as long as the <code>handle</code>\".</p>\n\n<p>I've tried:</p>\n\n<pre><code>set_data(&amp;'a self, &amp;'a data:\u2026)\n</code></pre>\n\n<p>but borrow checker seems to apply that to lifetime within that function, not overall lifetime of the object. </p>\n\n<p>I've also tried to add lifetime to <code>impl</code>, but that's still no good. Full test case:</p>\n\n<pre><code>#![allow(unused_variables)]\nstruct Handle&lt;'a&gt;;\n\nimpl&lt;'a&gt; Handle&lt;'a&gt; {\n    pub fn set_data(&amp;'a mut self, data: &amp;'a DropCanary) {\n        // save data raw ptr\n    }\n\n    pub fn use_data(&amp;'a self) {\n        // use data raw ptr\n        println!(\"alive?\");\n    }\n}\n\nfn main() {\n    let mut handle = Handle;\n    let long_enough_lifetime = DropCanary{label:\"long\"};\n\n    {\n        let short_lifetime = DropCanary{label:\"short\"};\n        handle.set_data(&amp;short_lifetime); // This shouldn't be allowed!\n        handle.set_data(&amp;long_enough_lifetime); // This is OK\n    }\n\n    handle.use_data();\n}\n\n/// --- just for testing ---\n\nstruct DropCanary {\n    label: &amp;'static str,\n}\n\nimpl Drop for DropCanary {\n    fn drop(&amp;mut self) {\n        println!(\"dropped: {}\", self.label);\n    }\n}\n</code></pre>\n\n<p>The problem is that the following code <a href=\"http://is.gd/qkl1wY\" rel=\"nofollow\">compiles</a> and outputs:</p>\n\n<blockquote>\n  <p>dropped: short<br>\n  alive?<br>\n  dropped: long  </p>\n</blockquote>\n\n<p>So it causes use-after-free, because Rust doesn't know that <code>short_lifetime</code> must outlive <code>handle</code>.</p>\n"}, {"tags": ["struct", "overloading", "rust"], "answers": [{"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 5, "last_activity_date": 1421505272, "creation_date": 1421505272, "answer_id": 28000518, "question_id": 28000113, "link": "https://stackoverflow.com/questions/28000113/how-to-overload-the-new-method/28000518#28000518", "title": "How to overload the &#39;new&#39; method?", "body": "<p>Rust indeed has overloading via traits, but you can't change the number of parameters, and their types can only be changed if they were declared as generic on the first place in the trait definition.</p>\n\n<p>In cases like yours, it's common to have a method like <code>new_with_nouns</code> to specialize what you mean:</p>\n\n<pre><code>impl&lt;'a&gt; Words&lt;'a&gt; {\n    fn new() -&gt; Words { /* ... */ }\n    fn new_with_nouns(nouns: Vec&lt;&amp;'a str&gt;) -&gt; Words&lt;'a&gt; { /* ... */ }\n}\n</code></pre>\n\n<p>For more complex data structures, where the <code>new_with_something</code> pattern would lead to a combinatorial explosion, the builder pattern is common (here I'll assume that <code>Words</code> has a <code>separator</code> field, just to demonstrate):</p>\n\n<pre><code>struct WordsBuilder&lt;'a&gt; {\n    separator: Option&lt;&amp;'a str&gt;,\n    nouns: Option&lt;Vec&lt;&amp;'a str&gt;&gt;,\n}\n\nimpl&lt;'a&gt; WordsBuilder&lt;'a&gt; {\n    fn new() -&gt; WordsBuilder&lt;'a&gt; {\n        WordsBuilder { separator: None, nouns: None }\n    }\n\n    fn nouns(mut self, nouns: Vec&lt;&amp;'a str&gt;) -&gt; WordsBuilder&lt;'a&gt; {\n        self.nouns = Some(nouns);\n        self\n    }\n\n    fn separator(mut self, separator: &amp;'a str) -&gt; WordsBuilder&lt;'a&gt; {\n        self.separator = Some(separator);\n        self\n    }\n\n    fn build(self) -&gt; Words&lt;'a&gt; {\n        Words {\n            separator: self.separator.unwrap_or(\",\"),\n            nouns:     self.nouns.unwrap_or_else(|| {\n                vec![\"test1\", \"test2\", \"test3\", \"test4\"]\n            })\n        }\n    }\n}\n</code></pre>\n\n<p>This is similar to how the <a href=\"http://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"noreferrer\">stdlib's <code>thread::Builder</code></a> works, for example.</p>\n"}], "owner": {"reputation": 43, "user_id": 4464757, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/DotQT.png?s=128&g=1", "display_name": "Ivan Chebykin", "link": "https://stackoverflow.com/users/4464757/ivan-chebykin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 511, "favorite_count": 2, "accepted_answer_id": 28000518, "answer_count": 1, "score": 3, "last_activity_date": 1421538874, "creation_date": 1421502450, "last_edit_date": 1421538874, "question_id": 28000113, "link": "https://stackoverflow.com/questions/28000113/how-to-overload-the-new-method", "title": "How to overload the &#39;new&#39; method?", "body": "<p>I'm just started to learn Rust and I'm wondering if there is way to overload methods.\nAt first I created a struct and used a 'impl' to implement basic 'new' method. Then I thought to add 'new' method with some params, and I tried to use trait for that.</p>\n\n<p>The following code was successfully compiled but once I tried to use 'new' with params, compiler gave me an error about extra params.\nSo how should I overload methods in Rust?</p>\n\n<pre><code>pub struct Words&lt;'a&gt; {\n    pub nouns: Vec&lt;&amp;'a str&gt;,\n}\n\ntrait Test&lt;'a&gt;{\n    fn new(nouns: Vec&lt;&amp;'a str&gt;) -&gt; Self;\n}\n\nimpl&lt;'a&gt; Words&lt;'a&gt; {\n    pub fn new() -&gt; Words&lt;'a&gt;{\n        let nouns = vec![\"test1\", \"test2\", \"test3\", \"test4\"];\n        Words{ nouns: nouns }\n    }\n\n    pub fn print(&amp;self){\n        for i in self.nouns.iter(){\n            print!(\"{} \", i);\n        }\n    }\n}\n\nimpl&lt;'a&gt; Test&lt;'a&gt; for Words&lt;'a&gt; {\n    fn new(nouns: Vec&lt;&amp;'a str&gt;) -&gt; Words&lt;'a&gt;{\n        Words{ nouns: nouns }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1421511092, "post_id": 27999559, "comment_id": 44391900, "body": "Binary distribution is usually used to ease deployment to places that can&#39;t (or don&#39;t want to) build from source themselves. Are you interested in that, or primarily in hiding the source code from users of your library?"}, {"owner": {"reputation": 101, "user_id": 4330956, "user_type": "registered", "profile_image": "https://graph.facebook.com/100008004434183/picture?type=large", "display_name": "Rylee Fowler", "link": "https://stackoverflow.com/users/4330956/rylee-fowler"}, "edited": false, "score": 1, "creation_date": 1421527608, "post_id": 27999559, "comment_id": 44396827, "body": "Out of curiosity, what is your motivation for this question?"}, {"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 1, "creation_date": 1421576555, "post_id": 27999559, "comment_id": 44405238, "body": "In C/C++ headers are written manually so you have far more control over how signatures, macros, templates etc are exported. Rust does it automatically and I couldn&#39;t find anything about it."}], "answers": [{"tags": [], "owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "is_accepted": true, "score": 42, "last_activity_date": 1421606024, "last_edit_date": 1421606024, "creation_date": 1421515314, "answer_id": 28002111, "question_id": 27999559, "link": "https://stackoverflow.com/questions/27999559/can-libraries-be-distributed-as-a-binary-so-the-end-user-cannot-see-the-source/28002111#28002111", "title": "Can libraries be distributed as a binary, so the end user cannot see the source code?", "body": "<p>A lot of metadata is included with each library crate, be it statically linked (<code>.rlib</code>) or dynamically linked (<code>.so</code>/<code>.dylib</code>/<code>.dll</code>):</p>\n\n<ul>\n<li>module structure</li>\n<li>exported <code>macro_rules</code> macros</li>\n<li>type and trait definitions</li>\n<li>constants with their initializer expressions</li>\n<li>signatures for all functions</li>\n<li>the entire body of each function that is marked as <code>#[inline]</code> or is generic (default trait methods are considered generic over <code>Self</code>)</li>\n</ul>\n\n<p>All of this is enough to reproduce some of the original source (how much depends on the usage of generics), albeit with no comments or other whitespace.<br>\nThe function bodies are serialized in the compiler's internal AST structure - you can see a pretty form of it with <code>rustc -Z ast-json lib.rs</code>.</p>\n\n<p>While the metadata is binary, not JSON, using <code>librustc</code> to extract all exported function definitions from a compiled crate, and pretty-printing the ASTs is fairly easy.</p>\n\n<p>In the future, there might not be any AST past type-checking, so the metadata would encode an IR of sorts \u2013 one possibility is CFG, i.e. \"control flow graph\", which is already used internally in a couple places.</p>\n\n<p>However, that would still expose more information than Java bytecode, it would be an optimization, you could still approximate the original code (and easily get something which compiles).</p>\n\n<p>As such, there are only two options I can recommend:</p>\n\n<ol>\n<li>expose a C API; it has the advantage of being a stable ABI, but it's quite limiting and brittle;</li>\n<li>expose a Rust API using only trait objects, instead of generics; this way you get to keep memory safety and all monomorphic functions would still work normally, but trait objects (dynamic dispatch) cannot express all the patterns possible with generics: in particular, generic trait methods are not callable on trait objects (C++ should have a similar restriction for mixing <code>template</code> and <code>virtual</code>, with workarounds potentially available on a case-by-case basis).</li>\n</ol>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2206, "favorite_count": 8, "accepted_answer_id": 28002111, "answer_count": 1, "score": 32, "last_activity_date": 1421606024, "creation_date": 1421498462, "last_edit_date": 1421538927, "question_id": 27999559, "link": "https://stackoverflow.com/questions/27999559/can-libraries-be-distributed-as-a-binary-so-the-end-user-cannot-see-the-source", "title": "Can libraries be distributed as a binary, so the end user cannot see the source code?", "body": "<p>Is it possible to compile a Rust library crate so that the user can't see the source code but can still use the library?</p>\n\n<p>If it is, are all the generics provided as \"Source code\" or some IR, or does Rust implement generics differently from C++ templates?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 18, "creation_date": 1421481342, "post_id": 27996791, "comment_id": 44384665, "body": "I think you can just <code>.rev().collect()</code>, since <code>String</code> implements <code>FromIterator&lt;&amp;str&gt;</code>. Also, fwiw, I think the <i>actual</i> most fundamental problem is misunderstanding iterators, strings and types in general (understandable, many languages aren&#39;t so &quot;pedantic&quot;), not the somewhat finer points of unicode correctness."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1421484856, "post_id": 27996791, "comment_id": 44385297, "body": "@dbaupp: I&#39;d argue a problem that is independent of the implementation language is <i>more</i> fundamental than one which is specific to a particular language.  :D  But it&#39;s nice to know <code>String</code> supports <code>FromIterator&lt;&amp;str&gt;</code>.  A slight pity it doesn&#39;t pre-allocate the storage, but you can&#39;t always get what you want..."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1421486570, "post_id": 27996791, "comment_id": 44385657, "body": "Eh, the question is about why a certain piece of code doesn&#39;t compile in a particular language, not why it is giving unexpected output (i.e. a language-independent problem with the algorithm), so the fundamental problem for the question itself is the Rust-specific type errors. It&#39;s definitely good to mention that unicode is hard, though."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 39, "last_activity_date": 1568766869, "last_edit_date": 1568766869, "creation_date": 1421475455, "answer_id": 27996791, "question_id": 27996430, "link": "https://stackoverflow.com/questions/27996430/reversing-a-string-in-rust/27996791#27996791", "title": "Reversing a string in Rust", "body": "<p>The first, and most fundamental, problem is that this isn't how you reverse a Unicode string.  You are reversing the order of the code points, where you want to reverse the order of <em>graphemes</em>.  There may be other issues with this that I'm not aware of.  Text is hard.</p>\n\n<p>The second issue is pointed out by the compiler: you are trying to compare a string literal to a <code>char</code> iterator.  <code>chars</code> and <code>rev</code> don't produce new strings, they produce lazy sequences, as with iterators in general.  <a href=\"https://play.rust-lang.org/?gist=28d5452db98af404297b0e71045dabc6&amp;version=nightly\" rel=\"noreferrer\">The following works</a>:</p>\n\n<pre><code>/*!\nAdd the following to your `Cargo.toml`:\n\n```cargo\n[dependencies]\nunicode-segmentation = \"0.1.2\"\n```\n*/\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\n\nfn main() {\n    let word: &amp;str = \"low\u0308ks\";\n    let drow: String = word\n        // Split the string into an Iterator of &amp;strs, where each element is an\n        // extended grapheme cluster.\n        .graphemes(true)\n        // Reverse the order of the grapheme iterator.\n        .rev()\n        // Collect all the chars into a new owned String.\n        .collect();\n\n    assert_eq!(drow, \"skw\u0308ol\");\n\n    // Print it out to be sure.\n    println!(\"drow = `{}`\", drow);\n}\n</code></pre>\n\n<p>Note that <code>graphemes</code> used to be in the standard library as an unstable method, so the above will break with sufficiently old versions of Rust.  In that case, you need to use <code>UnicodeSegmentation::graphemes(s, true)</code> instead.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1610548809, "post_id": 38083610, "comment_id": 116169410, "body": "As mentioned in DK.&#39;s answer, <b>this can be wrong</b>. For example, it <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0a246b78ace33fc66368f8c9e81320fb\" rel=\"nofollow noreferrer\">completely fails with <code>&quot;A\u030astro\u0308m&quot;</code></a>"}], "tags": [], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "is_accepted": false, "score": 68, "last_activity_date": 1467138269, "creation_date": 1467138269, "answer_id": 38083610, "question_id": 27996430, "link": "https://stackoverflow.com/questions/27996430/reversing-a-string-in-rust/38083610#38083610", "title": "Reversing a string in Rust", "body": "<p>Since, as @DK. suggested, <code>.graphemes()</code> isn't available on <code>&amp;str</code> in stable, you might as well just do what @huon suggested in the comments:</p>\n\n<pre><code>fn main() {\n    let foo = \"palimpsest\";\n    println!(\"{}\", foo.chars().rev().collect::&lt;String&gt;());\n}\n</code></pre>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 21427, "favorite_count": 7, "accepted_answer_id": 27996791, "answer_count": 2, "score": 41, "last_activity_date": 1568766869, "creation_date": 1421472065, "last_edit_date": 1515554622, "question_id": 27996430, "link": "https://stackoverflow.com/questions/27996430/reversing-a-string-in-rust", "title": "Reversing a string in Rust", "body": "<p>What is wrong with this:</p>\n\n<pre><code>fn main() {\n    let word: &amp;str = \"lowks\";\n    assert_eq!(word.chars().rev(), \"skwol\");\n}\n</code></pre>\n\n<p>I get an error like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `==` cannot be applied to type `std::iter::Rev&lt;std::str::Chars&lt;'_&gt;&gt;`\n --&gt; src/main.rs:4:5\n  |\n4 |     assert_eq!(word.chars().rev(), \"skwol\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: an implementation of `std::cmp::PartialEq` might be missing for `std::iter::Rev&lt;std::str::Chars&lt;'_&gt;&gt;`\n  = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>What is the correct way to do this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 0, "creation_date": 1421454055, "post_id": 27994682, "comment_id": 44380060, "body": "Excellent.  I should&#39;ve guessed that parenthesizing would help, but never would have.  Thanks!"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 12, "last_activity_date": 1421453035, "creation_date": 1421453035, "answer_id": 27994682, "question_id": 27994509, "link": "https://stackoverflow.com/questions/27994509/how-do-i-call-a-function-through-a-member-variable/27994682#27994682", "title": "How do I call a function through a member variable?", "body": "<p><code>foo.bar(...)</code> is always parsed as a method call, it never looks for fields. This avoids ambiguity, especially with traits. One can force it to be a field access by separating the call and the field access into two distinct expressions, for example,</p>\n\n<pre><code>let f = self.go;\nf(n)\n</code></pre>\n\n<p>Or, better, just <code>(self.go)(n)</code>.</p>\n\n<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/2392\" rel=\"noreferrer\">#2392</a> covers improving these diagnostics.</p>\n"}], "owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2780, "favorite_count": 0, "accepted_answer_id": 27994682, "answer_count": 1, "score": 9, "last_activity_date": 1421538977, "creation_date": 1421451589, "last_edit_date": 1421538977, "question_id": 27994509, "link": "https://stackoverflow.com/questions/27994509/how-do-i-call-a-function-through-a-member-variable", "title": "How do I call a function through a member variable?", "body": "<p>Toying with Rust, I'm extracting some code into a class.  To keep it self-contained but separate functionality, I want to hang onto a callback function and call it later.  To keep it simple, including skipping the obvious <code>fn new()</code>, we have something like:</p>\n\n<pre><code>pub struct Toy {\n    go: fn(count: i16) -&gt; String,\n}\n\nimpl Toy {\n    fn lets_go(&amp;mut self, n: i16) -&gt; String {\n        self.go(n)\n    }\n}\n</code></pre>\n\n<p>Building gives me...</p>\n\n<pre><code>...path.../src/toy.rs:7:14: 7:19 error: type `&amp;mut toy::Toy` does not implement any method in scope named `go`\n...path.../src/toy.rs:7         self.go(n)\n</code></pre>\n\n<p>Presumably, there's a special syntax (or entirely different construct) that makes sense of the <code>self.go()</code> call, but I don't see examples or descriptions of comparable situations in any of the documentation, so I'd appreciate any direction.</p>\n\n<p>Obviously, <code>.go</code> <em>could</em> be of a functor-like class, but that doesn't seem very idiomatic for Rust.</p>\n"}, {"tags": ["type-conversion", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1421473390, "post_id": 27994144, "comment_id": 44383303, "body": "Alternatively, you could just use the <code>csv</code> crate which will do all this type based decoding for you. There are examples in the README and docs. <a href=\"https://github.com/BurntSushi/rust-csv\" rel=\"nofollow noreferrer\">github.com/BurntSushi/rust-csv</a>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1421450634, "creation_date": 1421450634, "answer_id": 27994370, "question_id": 27994144, "link": "https://stackoverflow.com/questions/27994144/what-is-the-cleanest-way-to-convert-str-types-to-numeric-types/27994370#27994370", "title": "What is the cleanest way to convert &amp;str types to numeric types?", "body": "<p>Well, you can use <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow\"><code>unwrap()</code></a> to avoid pattern matching, but you should do it sparingly - with <code>unwrap()</code> you can't handle the actual parse error, so if the string does not represent a number, it'll panic:</p>\n\n<pre><code>let str_num: u32 = str.parse().unwrap();\n</code></pre>\n\n<p><code>if let</code> is also an option:</p>\n\n<pre><code>if let Some(str_num) = str.parse::&lt;u32&gt;() {\n    // ...\n}\n</code></pre>\n\n<p>You can also use <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or\" rel=\"nofollow\"><code>unwrap_or()</code></a> if you want to specify some default value:</p>\n\n<pre><code>let str_num: u32 = str.parse().unwrap_or(42);\n</code></pre>\n\n<p>Or you can use <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_default\" rel=\"nofollow\"><code>unwrap_or_default()</code></a> which employs <a href=\"http://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"nofollow\"><code>Default</code></a> instance for <code>u32</code>:</p>\n\n<pre><code>let str_num: u32 = str.parse().unwrap_or_default();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1421450915, "creation_date": 1421450915, "answer_id": 27994413, "question_id": 27994144, "link": "https://stackoverflow.com/questions/27994144/what-is-the-cleanest-way-to-convert-str-types-to-numeric-types/27994413#27994413", "title": "What is the cleanest way to convert &amp;str types to numeric types?", "body": "<p>The <a href=\"http://doc.rust-lang.org/nightly/std/option/enum.Option.html\" rel=\"nofollow\"><code>Option</code></a> type has a large variety of adapter methods which can be used to munge the data around more nicely than repeated <code>match</code>s.</p>\n\n<p>For example, there's <a href=\"http://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow\"><code>unwrap</code></a> and <a href=\"http://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.expect\" rel=\"nofollow\"><code>expect</code></a> for just extracting the data out of a <code>Some</code>, panicking if the <code>Option</code> is <code>None</code>. The <code>expect</code> method is actually the closest to your written code: <code>str.parse().expect(\"Failed to read number.\")</code>.</p>\n\n<hr>\n\n<p>However, it can often makes sense to use other the functions listed there, to propagate errors, avoiding the hard \"crash\" of a panic and allowing users (or yourself) to handle errors more centrally and with more control. It also often makes sense to use <a href=\"http://doc.rust-lang.org/nightly/std/result/enum.Result.html\" rel=\"nofollow\"><code>Result</code></a> for this, which gives you the chance to pass along more information in the error case, and also allows one to use <a href=\"http://doc.rust-lang.org/nightly/std/result/index.html#the-try!-macro\" rel=\"nofollow\">the <code>try!</code> macro</a>, that said, one can easily define an equivalent of <code>try!</code> for <code>Option</code>:</p>\n\n<pre><code>macro_rules! option_try {\n    ($e: expr) =&gt; {\n        match $e {\n            Some(x) =&gt; x,\n            None =&gt; return None\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "accepted_answer_id": 27994413, "answer_count": 2, "score": 1, "last_activity_date": 1421539063, "creation_date": 1421449174, "last_edit_date": 1421539063, "question_id": 27994144, "link": "https://stackoverflow.com/questions/27994144/what-is-the-cleanest-way-to-convert-str-types-to-numeric-types", "title": "What is the cleanest way to convert &amp;str types to numeric types?", "body": "<p>I find myself reading large CSV files and collecting the numerical elements into a <code>Vec&lt;&amp;str&gt;</code>. Thereafter I have to convert them to numeric types and the simplest way I've found to do that is to implement a function like this:</p>\n\n<pre><code>fn to_u32(str: &amp;str) -&gt; u32\n{\n    let str_num: Option&lt;u32&gt; = str.parse();\n    match str_num\n    {\n        Some(num) =&gt; num,\n        None      =&gt; panic!(\"Failed to read number\"),\n     }\n }\n</code></pre>\n\n<p>This seems like a fairly common operation so I've sifted through the reference docs but haven't found anything that matches it. Is there a cleaner way to do this?</p>\n"}, {"tags": ["operator-overloading", "rust", "multiplication"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1421442842, "post_id": 27990725, "comment_id": 44376469, "body": "BTW, maybe even <code>N::Output</code> instead of <code>&lt;N as Mul&lt;N&gt;&gt;::Output</code> would work, but I&#39;m not sure here."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1421433958, "creation_date": 1421433958, "answer_id": 27990725, "question_id": 27990554, "link": "https://stackoverflow.com/questions/27990554/operator-for-parametrized-struct-is-dependant-on-another-operator/27990725#27990725", "title": "Operator for parametrized struct is dependant on another operator", "body": "<p>I guess this should work:</p>\n\n<pre><code>impl&lt;N&gt; BitOr&lt;Matrix&lt;N&gt;&gt; for Matrix&lt;N&gt; where N: Mul&lt;N&gt; {\n    type Output = Matrix&lt;&lt;N as Mul&lt;N&gt;&gt;::Output&gt;;\n\n    fn bitor(self, other: Matrix&lt;N&gt;) -&gt; Matrix&lt;&lt;N as Mul&lt;N&gt;&gt;::Output&gt; {\n        if self.width() != other.width() ||\n            self.height() != other.height() {\n                panic!(\"Matrices need to have equal dimensions\");\n            }\n\n        let mut out = Matrix::new(self.width(), self.height());\n\n        for i in 0..(self.width()) {\n            for j in 0..(self.height()) {\n                out[(i, j)] = self[(i, j)] * out[(i, j)];\n            }\n        }\n\n        out\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1421434756, "post_id": 27990756, "comment_id": 44372630, "body": "FWIW, this approach limits the implementation only to those types whose multiplication operation returns themselves (i.e. <code>Output=N</code>). This is not always desirable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1421434068, "creation_date": 1421434068, "answer_id": 27990756, "question_id": 27990554, "link": "https://stackoverflow.com/questions/27990554/operator-for-parametrized-struct-is-dependant-on-another-operator/27990756#27990756", "title": "Operator for parametrized struct is dependant on another operator", "body": "<p>You didn't provide a small runnable example, so I made my own. This works:</p>\n\n<pre><code>use std::ops::{Mul,BitOr};\n\n#[derive(Copy,Show)]\nstruct Matrix&lt;N&gt;(N, N);\n\nimpl&lt;N&gt; BitOr&lt;Matrix&lt;N&gt;&gt; for Matrix&lt;N&gt; where N: Mul&lt;N, Output=N&gt; {\n    type Output = Matrix&lt;N&gt;;\n\n    fn bitor(self, other: Matrix&lt;N&gt;) -&gt; Matrix&lt;N&gt; {\n        Matrix(self.0 * other.0, self.1 * other.1)\n    }\n}\n\nfn main() {\n    let a = Matrix(-1,-1);\n    let b = Matrix(2,3);\n    let c = a | b;\n\n    println!(\"{:?}\", c)\n}\n</code></pre>\n\n<p>The main thing I had to do was <code>N: Mul&lt;N, Output=N&gt;</code>, which specifies that <code>N</code> must be multipliable by another <code>N</code> <em>and</em> will result in another <code>N</code>.</p>\n"}], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 0, "accepted_answer_id": 27990725, "answer_count": 2, "score": 0, "last_activity_date": 1421434068, "creation_date": 1421433309, "question_id": 27990554, "link": "https://stackoverflow.com/questions/27990554/operator-for-parametrized-struct-is-dependant-on-another-operator", "title": "Operator for parametrized struct is dependant on another operator", "body": "<p>I'm writing LoG filter in Rust and I wanted to use <code>|</code> as operator for element wide multiplication operator (<code>a_{i,j} * b_{i,j}</code>), but compilator is complaining about <code>Output</code> result. It say that <code>self[(i, j)] * out[(i, j)]</code> does not equal <code>Mul&lt;N&gt;::Output</code>.</p>\n\n<pre><code>impl&lt;N&gt; BitOr&lt;Matrix&lt;N&gt;&gt; for Matrix&lt;N&gt; where N: Mul&lt;N&gt; {\n    type Output = Matrix&lt;N&gt;;\n\n    fn bitor(self, other: Matrix&lt;N&gt;) -&gt; Matrix&lt;N&gt; {\n        if self.width() != other.width() ||\n            self.height() != other.height() {\n                panic!(\"Matrices need to have equal dimensions\");\n            }\n\n        let mut out = Matrix::new(self.width(), self.height());\n\n        for i in 0..(self.width()) {\n            for j in 0..(self.height()) {\n                out[(i, j)] = self[(i, j)] * out[(i, j)];\n            }\n        }\n\n        out\n    }\n}\n</code></pre>\n\n<p>Is there any way to set output based on <code>Mul&lt;N&gt;::Output</code> type?</p>\n"}, {"tags": ["windows", "stdin", "rust"], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1421432753, "post_id": 27990318, "comment_id": 44371620, "body": "No, it does not. Does my version work for you on OS X? (and would you expect it to? I&#39;m fairly new to Rust)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1421433045, "post_id": 27990318, "comment_id": 44371746, "body": "Your code does work on OS X. It&#39;s strange, because I&#39;m certain I&#39;ve done this before on a Windows version of Rust. The version I presented is a bit more idiomatic, as the EOF is handled by the iterator and so you only have to think about &quot;true&quot; error conditions. If no one else chimes in, I&#39;ll be able to get to my Windows VM in a few hours..."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1421433060, "post_id": 27990318, "comment_id": 44371751, "body": "@BenjaminLindley, your program works for me on OS X. <code>Ctrl-D</code> finishes it. <code>Ctrl-D</code> closes the standard input which makes <code>lines()</code> return <code>IoError</code> with <code>ErrorKind::EndOfFile</code>, so yes, I would expect that this code should work."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1421437309, "post_id": 27990318, "comment_id": 44373854, "body": "Yep, this only seems to be a problem on Windows (or at least, my Windows). I fired up my own Ubuntu VM and it works fine."}, {"owner": {"reputation": 33265, "user_id": 886887, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/1616c7e4fab23f6e014ee11d75408bba?s=128&d=identicon&r=PG", "display_name": "Harry Johnston", "link": "https://stackoverflow.com/users/886887/harry-johnston"}, "edited": false, "score": 2, "creation_date": 1421451718, "post_id": 27990318, "comment_id": 44379508, "body": "<a href=\"http://en.wikipedia.org/wiki/End-of-transmission_character\" rel=\"nofollow noreferrer\">According to Wikipedia</a> the UNIX terminal processes the control-D and signals EOF on standard input.  That&#39;s probably the same in OS X, so this isn&#39;t something Rust itself is doing.  On Windows, the C runtime library processes control-Z if you are reading in text mode and treats it as EOF, but from a brief search through the source code for the Rust runtime library, I think it uses the Win32 console functions on Windows rather than the C runtime.  So I fear that on Windows a Rust programmer may have to handle control-Z explicitly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1421432448, "creation_date": 1421432448, "answer_id": 27990318, "question_id": 27990213, "link": "https://stackoverflow.com/questions/27990213/how-to-terminate-standard-input/27990318#27990318", "title": "How to terminate standard input?", "body": "<p>I don't have my Windows VM handy to test this, but it works on OS X (using <kbd>Ctrl</kbd>-<kbd>D</kbd>). Does this work in your case:</p>\n\n<pre><code>use std::io::stdin;\n\nfn process(a: &amp;str) {}\n\nfn main() {\n    for line in stdin().lock().lines() {\n        match line {\n            Ok(line) =&gt; process(&amp;*line),\n            Err(e) =&gt; panic!(\"{}\", e),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 837, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1421505741, "creation_date": 1421432045, "last_edit_date": 1421505741, "question_id": 27990213, "link": "https://stackoverflow.com/questions/27990213/how-to-terminate-standard-input", "title": "How to terminate standard input?", "body": "<p>In C++, I can read from stdin like this:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>while (std::getline(std::cin, line))\n    process(line);\n</code></pre>\n\n<p>when I enter Ctrl+Z (Windows),  it terminates standard input, and the loop ends. I can do something similar in other languages.</p>\n\n<p>I tried to translate the idiom to Rust, and I came up with this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io;\n\nfn main() {\n    loop {\n        match io::stdin().read_line() {\n            Ok(line) =&gt; process(line),\n            Err(_) =&gt; break,\n        }\n    }\n}\n\nfn process(x: String) {\n    println!(\"{:?}\", x.as_bytes());\n}\n</code></pre>\n\n<p>However, when I do Ctrl+Z when running this code, it does not go to the Err case. It just processes the line as Ok. Giving a string with 3 characters, the SUB character (0x1A), followed by CRLF (<code>\"\\r\\n\"</code>).</p>\n\n<p>So, how do I terminate standard input and cause <code>read_line</code> to fail? Or rather, how do I detect the request for termination of standard input? I can check for the SUB character, but that is not portable, as it would be a different character (e.g. EOT) on other systems.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>There is an open issue for this on the github repo. <a href=\"https://github.com/rust-lang/rust/issues/19914\" rel=\"nofollow\">Issue #19914</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421431536, "post_id": 27990075, "comment_id": 44371006, "body": "Is this expected behavior, or is there a Rust bug you could link to?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421443085, "post_id": 27990075, "comment_id": 44376597, "body": "@Shepmaster, I believe this happens because <code>derive</code>s are just AST transformations, just what compiler plugins do, so they have to specify full names in identifiers. In most programs it&#39;s <code>std</code> what is linked by default, not <code>core</code>, so they use <code>::std</code>. However, i don&#39;t know if there is an open ticket on that."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1421448744, "post_id": 27990075, "comment_id": 44378734, "body": "I&#39;m not sure either,  a couple people in the IRC mentioned it though"}], "tags": [], "owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "is_accepted": false, "score": 3, "last_activity_date": 1421431471, "creation_date": 1421431471, "answer_id": 27990075, "question_id": 27989662, "link": "https://stackoverflow.com/questions/27989662/how-do-i-derive-copy-when-using-no-std/27990075#27990075", "title": "How do I derive Copy when using #![no_std]?", "body": "<p>#[derive] is broken in #![no_std] <code>pub mod std {pub use core::*;}</code> will fix it, it replaces instances of <code>::std::</code> with <code>::core::</code> allowing you to derive traits that the compiler thinks are in <code>std</code> from <code>core</code></p>\n"}, {"comments": [{"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1421433724, "post_id": 27990105, "comment_id": 44372113, "body": "what&#39;s a marker trait, and why don&#39;t you need to provide an actual impl?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1421433832, "post_id": 27990105, "comment_id": 44372166, "body": "Marker traits do not contain methods and exist solely for the purpose of marking types with some property. For example, <code>Copy</code> means that the type is automatically copyable; <code>Send</code> means that the type is sendable across task boundaries, etc. Since they have no methods, they don&#39;t have anything to implement, so their impl block is empty."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1421431587, "creation_date": 1421431587, "answer_id": 27990105, "question_id": 27989662, "link": "https://stackoverflow.com/questions/27989662/how-do-i-derive-copy-when-using-no-std/27990105#27990105", "title": "How do I derive Copy when using #![no_std]?", "body": "<p>You can always implement marker traits with <code>impl</code>:</p>\n\n<pre><code>impl Copy for MyStruct {}\n</code></pre>\n\n<p>It will work only for marker traits though, <code>Clone</code> and other similar traits still need <code>deriving</code>.</p>\n"}], "owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 292, "favorite_count": 0, "accepted_answer_id": 27990105, "answer_count": 2, "score": 3, "last_activity_date": 1421465998, "creation_date": 1421429978, "last_edit_date": 1421465998, "question_id": 27989662, "link": "https://stackoverflow.com/questions/27989662/how-do-i-derive-copy-when-using-no-std", "title": "How do I derive Copy when using #![no_std]?", "body": "<p>I am working on a project that uses <code>#![no_std]</code>, and I would like to be able to derive useful traits such as <code>Copy</code> and <code>Clone</code>. I tried adding <code>pub use core::prelude::*;</code> to both the project root, and the file I actually want to use it in. However, any attempts to <code>#[derive(Copy)]</code> results in</p>\n\n<blockquote>\n  <p>error: attempt to implement a nonexistent trait std::marker::Copy</p>\n</blockquote>\n\n<p>I don't understand what I'm doing wrong. Attempting to add</p>\n\n<pre><code>use core::marker::Copy\n</code></pre>\n\n<p>yields this:</p>\n\n<blockquote>\n  <p>error: a type named Copy has already been imported in this module</p>\n</blockquote>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421425855, "post_id": 27988291, "comment_id": 44367895, "body": "See also <a href=\"http://stackoverflow.com/q/27650188/155423\">Moving mutably borrowed ownership</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421426269, "post_id": 27988414, "comment_id": 44368134, "body": "<code>Rust doesn&#39;t know that the method hasn&#39;t kept a copy of that pointer</code> - Since the function has elapsed couldn&#39;t it reason that anything in it would be deallocated after it&#39;s called?"}, {"owner": {"reputation": 817, "user_id": 3848441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6199c18fbe4695e7ea294cdf4053d3f7?s=128&d=identicon&r=PG&f=1", "display_name": "PEPP", "link": "https://stackoverflow.com/users/3848441/pepp"}, "edited": false, "score": 1, "creation_date": 1421427657, "post_id": 27988414, "comment_id": 44368974, "body": "The signature of <code>t</code> causes that <code>y</code> is borrowed mutably as long as <code>z</code> exists. And <code>z</code> exists until the end of <code>main</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1421427719, "post_id": 27988414, "comment_id": 44369010, "body": "@JV I updated the answer and removed the misleading part you quoted."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1421427694, "last_edit_date": 1421427694, "creation_date": 1421425744, "answer_id": 27988414, "question_id": 27988291, "link": "https://stackoverflow.com/questions/27988291/reference-passed-as-parameter-is-not-moved/27988414#27988414", "title": "Reference passed as parameter is not moved", "body": "<p>You are returning a mutable reference to the parameter from your function. However, Rust doesn't know that the method <s>hasn't kept a copy of that pointer</s> didn't return a subsection of that pointer, were it a struct. This means that at any time, the value pointed to might be changed, which is a big no-no in Rust; if it were allowed, then you could easily cause memory errors.</p>\n\n<blockquote>\n  <p>Does Rust automatically create a new borrow</p>\n</blockquote>\n\n<p>Yes, Rust \"re-borrows\" references.</p>\n\n<p>A better example requires a smidge more complexity:</p>\n\n<pre><code>struct Thing { a: u8, b: u8 }\n\nfn t(x: &amp;mut Thing) -&gt; &amp;mut u8 {\n    &amp;mut x.a\n}\n\nfn main() {\n    let mut x = Thing { a: 5, b: 6 };\n    let z = t(&amp;mut x);\n    *z = 0;\n    // x.a = 0; // cannot assign to `x.a` because it is borrowed\n}\n</code></pre>\n\n<p>Here, <code>t</code> returns a mutable pointer to a subset of the struct. This means that the entire struct is borrowed, and we cannot change it (except via <code>z</code>). Rust applies this logic to all functions, and doesn't try to recognize that your <code>t</code> function just returns the same pointer.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 0, "last_activity_date": 1421465730, "creation_date": 1421465730, "answer_id": 27995891, "question_id": 27988291, "link": "https://stackoverflow.com/questions/27988291/reference-passed-as-parameter-is-not-moved/27995891#27995891", "title": "Reference passed as parameter is not moved", "body": "<p>By compiling your program with <code>rustc --pretty=expanded</code>, we can see that the <code>println!</code> macro borrows its argument:</p>\n\n<pre><code>#![no_std]\n#[macro_use]\nextern crate \"std\" as std;\n#[prelude_import]\nuse std::prelude::v1::*;\nfn t(x: &amp;mut u8) -&gt; &amp;mut u8 { x }\n\nfn main() {\n    let mut x = 5u8;\n    let y = &amp;mut x;\n    let z = t(y);\n    ::std::io::stdio::println_args(::std::fmt::Arguments::new({\n                                                                  #[inline]\n                                                                  #[allow(dead_code)]\n                                                                  static __STATIC_FMTSTR:\n                                                                         &amp;'static [&amp;'static str]\n                                                                         =\n                                                                      &amp;[\"\"];\n                                                                  __STATIC_FMTSTR\n                                                              },\n                                                              &amp;match (&amp;y,) { // &lt;----- y is borrowed here\n                                                                   (__arg0,)\n                                                                   =&gt;\n                                                                   [::std::fmt::argument(::std::fmt::String::fmt,\n                                                                                         __arg0)],\n                                                               }));\n}\n</code></pre>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 0, "accepted_answer_id": 27988414, "answer_count": 2, "score": 1, "last_activity_date": 1421465730, "creation_date": 1421425270, "last_edit_date": 1421425773, "question_id": 27988291, "link": "https://stackoverflow.com/questions/27988291/reference-passed-as-parameter-is-not-moved", "title": "Reference passed as parameter is not moved", "body": "<pre><code>fn t(x: &amp;mut u8) -&gt; &amp;mut u8 {\n    x\n}\n\nfn main() {\n    let mut x = 5u8;\n    let y = &amp; mut x;\n    let z = t(y);\n    println!(\"{}\", y);\n}\n</code></pre>\n\n<p>Compiling this gives me this error:</p>\n\n<pre><code>main.rs:9:20: 9:21 error: cannot borrow `y` as immutable because `*y` is also borrowed as mutable\nmain.rs:9     println!(\"{}\", y);\n</code></pre>\n\n<p>I would have thought <code>y</code> would have been moved during the call to <code>t</code> and then back to <code>z</code>, resulting in an <code>error: use of moved value</code></p>\n\n<ol>\n<li>Why do I get this error message instead?</li>\n<li>Does Rust automatically create a new borrow instead of passing ownership when references are offered as function parameters?</li>\n<li>What is the purpose of this behaviour?</li>\n</ol>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 10, "creation_date": 1499243938, "post_id": 27978706, "comment_id": 76817818, "body": "External tests should absolutely be allowed acces to private parts, because 1) You might need access to private parts in order to reliably trigger all code paths through the public API. For example, there might be an internal threshold that when reached triggers different code path. You might also need failure injection or internal details to trigger edge cases. 2) Access to private parts can provide better diagnostic for when tests fail - you can insert internal info into panic message etc..."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 6, "creation_date": 1499308546, "post_id": 27978706, "comment_id": 76854065, "body": "Diagnostics: that\u2019s what <code>std::fmt::Debug</code> is for. For the rest, I stand by my position that external tests should not have access to private details. External tests are not appropriate for the situation you describe\u2014that\u2019s what internal unit tests are for."}, {"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 3, "creation_date": 1499334727, "post_id": 27978706, "comment_id": 76866135, "body": "<code>fmt::Debug</code> is too coarse-grained in some situations - for example, you might not want print details about a whole huge data structure when you&#39;re only after a specific bit. Anyway, is it appropriate for internal test to also setup a realistic use case of the public API? If not, that won&#39;t do, since I need to do just that. If yes, then alright I&#39;m happy to all it and internal test, although at that point the distinction is kind of pointeless? The core issue is that no matter how hard you try, the implementation details always affect interface in some way, there&#39;s no way around it."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 29, "last_activity_date": 1421391128, "creation_date": 1421391128, "answer_id": 27978706, "question_id": 27978377, "link": "https://stackoverflow.com/questions/27978377/how-do-i-test-private-methods-in-rust/27978706#27978706", "title": "How do I test private methods in Rust?", "body": "<p>When using <code>#[test]</code>, there\u2019s nothing special about private or public methods\u2014you\u2019re just writing perfectly normal functions that can access anything they can access.</p>\n\n<pre><code>fn private_function() {\n}\n\n#[test]\nfn test_private_function() {\n    private_function()\n}\n</code></pre>\n\n<p>External tests, such as <code>tests/*.rs</code> and <code>examples/*.rs</code> if you\u2019re using Cargo, or doc tests, do not get access to private members; nor should they: such tests are designed to be public API tests, not to be dealing with implementation details.</p>\n"}, {"tags": [], "owner": {"reputation": 473, "user_id": 3283454, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8aB4l.jpg?s=128&g=1", "display_name": "Vultrao", "link": "https://stackoverflow.com/users/3283454/vultrao"}, "is_accepted": false, "score": 1, "last_activity_date": 1616138135, "creation_date": 1616138135, "answer_id": 66703939, "question_id": 27978377, "link": "https://stackoverflow.com/questions/27978377/how-do-i-test-private-methods-in-rust/66703939#66703939", "title": "How do I test private methods in Rust?", "body": "<p>I don't know if this issue is still open for you, but I found some documentation about it :</p>\n<p><a href=\"https://doc.rust-lang.org/book/ch11-03-test-organization.html#testing-private-functions\" rel=\"nofollow noreferrer\">Test Organization</a></p>\n<p>What I retained from it is that you <em>can</em> test private method but <em>only</em> if the test can see it (i.e. they are in the same scope), since tests follow the visibility rules as any other function.</p>\n<p>Here is a working example :</p>\n<pre><code>pub fn add_two(a: i32) -&gt; i32 {\n    internal_adder(a, 2)\n}\n\nfn internal_adder(a: i32, b: i32) -&gt; i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn internal() {\n        assert_eq!(4, internal_adder(2, 2));\n    }\n}\n</code></pre>\n<p>All in all, please remember that the debate wether private methods should or should not be tested is still open within the test community. Both sides have valid argument and the correct answer only relies on you, your vision on testing procedure and the context of your project.</p>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7433, "favorite_count": 2, "accepted_answer_id": 27978706, "answer_count": 2, "score": 28, "last_activity_date": 1616138135, "creation_date": 1421389530, "last_edit_date": 1421428839, "question_id": 27978377, "link": "https://stackoverflow.com/questions/27978377/how-do-i-test-private-methods-in-rust", "title": "How do I test private methods in Rust?", "body": "<p>How do I test private methods in Rust? I didn't find any information about it. There's no information in the documentation either.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1422394324, "post_id": 27978017, "comment_id": 44729867, "body": "Downvoter: can you please explain how I could have improved this question?"}], "answers": [{"comments": [{"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1421388305, "post_id": 27978102, "comment_id": 44348284, "body": "Gah, you&#39;re right! I forgot <code>foo.vec</code> could be accessed directly."}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1421388471, "post_id": 27978102, "comment_id": 44348329, "body": "Oooo, <code>TypedArena</code> looks quite useful. Unfortunately I only have one upvote I can give you :("}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 1, "creation_date": 1421434539, "post_id": 27978102, "comment_id": 44372510, "body": "&quot;Or what if <code>foo.add</code> worked by pushing the new value at the beginning of the vector?&quot; Isn&#39;t that only a problem if I returned a reference to an element in the vector? Since it&#39;s a vector of <code>Box</code>es the reference should still be valid (so long as the vector isn&#39;t cleared), I believe."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 1, "creation_date": 1421435231, "post_id": 27978102, "comment_id": 44372864, "body": "@Cornstalks that&#39;s a good point, and conceptually you are right. As far as I&#39;ve seen, Rust doesn&#39;t distinguish between stack-allocated and heap-allocated (Box), and simply groups lifetimes in a hierarchy. If you actually knew that you were in this case, then you could use <code>unsafe</code> and <code>transmute</code> to indicate this (this is similar in concept to what <code>TypedArena</code> does)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1421388331, "last_edit_date": 1421388331, "creation_date": 1421387944, "answer_id": 27978102, "question_id": 27978017, "link": "https://stackoverflow.com/questions/27978017/why-cant-i-call-a-mutable-method-and-store-the-result-twice-in-a-row/27978102#27978102", "title": "Why can&#39;t I call a mutable method (and store the result) twice in a row?", "body": "<p>This is exactly the problem that Rust is designed to prevent you from causing. What would happen if you did:</p>\n\n<pre><code>let one = foo.add(1);\nfoo.vec.clear();\nprintln!(\"{}\", one);\n</code></pre>\n\n<p>Or what if <code>foo.add</code> worked by pushing the new value at the <em>beginning</em> of the vector? Bad things would happen! The main thing is that while you have a borrow out on a variable, you cannot mutate the variable any more. If you were able to mutate it, then you could potentially invalidate the memory underlying the borrow and then your program could do a number of things, the <em>best</em> case would be that it crashes.</p>\n\n<blockquote>\n  <p>Is this a manifestation of issue #6393: borrow scopes should not always be lexical?</p>\n</blockquote>\n\n<p>Kind of, but not really. In this example, you never use <code>one</code> or <code>two</code>, so theoretically a non-lexical scope would allow it to compile. However, you then state</p>\n\n<blockquote>\n  <p>I want to add a new Box to the vector, and then return a reference to it (so the caller can use it)</p>\n</blockquote>\n\n<p>Which means your real code wants to be</p>\n\n<pre><code>let one = foo.add(1);\nlet two = foo.add(2);\ndo_something(one);\ndo_something(two);\n</code></pre>\n\n<p>So the lifetimes of the variables would overlap.</p>\n\n<p>In this case, if you just want a place to store variables that can't be deallocated individually, don't overlap with each other, and cannot be moved, try using a <a href=\"http://doc.rust-lang.org/arena/struct.TypedArena.html\"><code>TypedArena</code></a>:</p>\n\n<pre><code>extern crate arena;\n\nuse arena::TypedArena;\n\nfn main() {\n    let arena = TypedArena::new();\n    let one = arena.alloc(1);\n    let two = arena.alloc(2);\n\n    *one = 3;\n    println!(\"{}, {}\", one, two);\n}\n</code></pre>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1334, "favorite_count": 0, "accepted_answer_id": 27978102, "answer_count": 1, "score": 6, "last_activity_date": 1421388331, "creation_date": 1421387442, "question_id": 27978017, "link": "https://stackoverflow.com/questions/27978017/why-cant-i-call-a-mutable-method-and-store-the-result-twice-in-a-row", "title": "Why can&#39;t I call a mutable method (and store the result) twice in a row?", "body": "<p>In the following example:</p>\n\n<pre><code>struct SimpleMemoryBank {\n    vec: Vec&lt;Box&lt;i32&gt;&gt;,\n}\n\nimpl SimpleMemoryBank {\n    fn new() -&gt; SimpleMemoryBank {\n        SimpleMemoryBank{ vec: Vec::new() }\n    }\n\n    fn add(&amp;mut self, value: i32) -&gt; &amp;mut i32 {\n        self.vec.push(Box::new(value));\n        let last = self.vec.len() - 1;\n        &amp;mut *self.vec[last]\n    }\n}\n\nfn main() {\n    let mut foo = SimpleMemoryBank::new();\n\n    // Works okay\n    foo.add(1);\n    foo.add(2);\n\n    // Doesn't work: \"cannot borrow `foo` as mutable more than once at a time\"\n    let one = foo.add(1);\n    let two = foo.add(2);\n}\n</code></pre>\n\n<p><code>add()</code> can be called multiple times in a row, as long as I don't store the result of the function call. But if I store the result of the function (<code>let one = ...</code>), I then get the error:</p>\n\n<pre><code>problem.rs:26:15: 26:18 error: cannot borrow `foo` as mutable more than once at a time\nproblem.rs:26     let two = foo.add(2);\n                            ^~~\nproblem.rs:25:15: 25:18 note: previous borrow of `foo` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `foo` until the borrow ends\nproblem.rs:25     let one = foo.add(1);\n                            ^~~\nproblem.rs:27:2: 27:2 note: previous borrow ends here\nproblem.rs:17 fn main() {\n...\nproblem.rs:27 }\n              ^\nerror: aborting due to previous error\n</code></pre>\n\n<p>Is this a manifestation of <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"noreferrer\">issue #6393: borrow scopes should not always be lexical</a>?</p>\n\n<p>How can I work around this? Essentially, I want to add a new <code>Box</code> to the vector, and then return a reference to it (so the caller can use it).</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10140, "user_id": 763029, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/TVwEa.jpg?s=128&g=1", "display_name": "Caffeinated", "link": "https://stackoverflow.com/users/763029/caffeinated"}, "edited": false, "score": 1, "creation_date": 1421372718, "post_id": 27976061, "comment_id": 44344604, "body": "That title ... is interestn"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 10140, "user_id": 763029, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/TVwEa.jpg?s=128&g=1", "display_name": "Caffeinated", "link": "https://stackoverflow.com/users/763029/caffeinated"}, "edited": false, "score": 3, "creation_date": 1421372807, "post_id": 27976061, "comment_id": 44344618, "body": "@Coffee ? Drop glue is what it&#39;s called isn&#39;t it? ie. When drop is run..."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1421373990, "post_id": 27976061, "comment_id": 44344858, "body": "In this case I think one would just call the drop implementation &quot;a destructor&quot;, &quot;drop glue&quot; usually refers to the auto-generated compiler internals that manage calling the user-defined destructors appropriately."}], "answers": [{"comments": [{"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1421374295, "post_id": 27976260, "comment_id": 44344932, "body": "edit: Nevermind, I see. Moving it into as_foo moves it onto the stack for as_foo and out of main&#39;s stack, which is lost at the end of as_foo. The solution is to box the values so they remain on the heap until collected."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1421375332, "post_id": 27976260, "comment_id": 44345174, "body": "Correct. You probably want a <code>Vec&lt;Box&lt;IsFoo&gt;&gt;</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1421374094, "creation_date": 1421374094, "answer_id": 27976260, "question_id": 27976061, "link": "https://stackoverflow.com/questions/27976061/why-does-drop-glue-sometimes-not-run/27976260#27976260", "title": "Why does Drop glue sometimes not run?", "body": "<p>Try compiling your program with different optimization levels. (There's a drop-down for this on the Rust playpen; the default there is <code>-O2</code>.) You'll see that the output is not consistent. In this case, you're invoking undefined behaviour.</p>\n\n<p>When you add items to the <code>Vec</code>, you create objects like <code>Bat</code> that contain a <code>Foo</code>, then you add just the <code>Foo</code> in the <code>Vec</code>. <strong>The <code>Bat</code> no longer exists.</strong> <code>IsFoo::as_foo</code> takes the <code>Bat</code> by value, which means it takes ownership of it. The <code>Bat</code> is effectively dropped at the end of <code>as_foo</code>, but you suppressed the drop glue by calling <code>forget</code>.</p>\n\n<p>In your \"dispose\" lambda, you try to get a <code>Bat</code> back by casting a pointer to <code>Foo</code> to a pointer to <code>Bat</code>. This is <strong>undefined behaviour</strong>, because the vector contains just the <code>Foo</code>, not the whole <code>Bat</code>.  Remember, the <code>Bat</code> was destroyed when leaving <code>IsFoo::as_foo</code>.</p>\n\n<p>With <code>-O2</code> and <code>-O3</code>, it's possible that the program isn't creating a <code>Vec</code> at all, and the <code>Bat</code>, <code>Dragon</code> and <code>Goblin</code> values are still intact on the stack. However, <code>Goblin</code> doesn't have <code>#[repr(C)]</code>, while the other two do, so that may be why the destructor didn't run on that one only.</p>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1431979961, "creation_date": 1431979961, "answer_id": 30312019, "question_id": 27976061, "link": "https://stackoverflow.com/questions/27976061/why-does-drop-glue-sometimes-not-run/30312019#30312019", "title": "Why does Drop glue sometimes not run?", "body": "<p>In Rust 1.0 <code>Drop</code> is not supported on <code>#[repr(C)]</code> types.</p>\n\n<p>This is because <code>Drop</code> adds a hidden flag to the structure and runs the destructor only if that flag is set.</p>\n\n<p>This is a known wart in the language and in the future it may be changed by tracking the drop flag out of band.</p>\n\n<p>There's <code>#[unsafe_no_drop_flag]</code> that removes the <code>Drop</code> flag, but then Rust doesn't guarantee how many times the destructor will be called (your destructor must run be able to safely on an object that has already been destroyed).</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 264, "favorite_count": 0, "accepted_answer_id": 27976260, "answer_count": 2, "score": 1, "last_activity_date": 1431979961, "creation_date": 1421372628, "last_edit_date": 1421384270, "question_id": 27976061, "link": "https://stackoverflow.com/questions/27976061/why-does-drop-glue-sometimes-not-run", "title": "Why does Drop glue sometimes not run?", "body": "<p>I've had this happen in other circumstances, but not repeatably.</p>\n\n<p>Basically, sometimes when you have a <code>*mut Foo</code>, and you turn it into a <code>Foo</code> using <code>ptr::read()</code>, sometimes your drop glue doesn't seem to run.</p>\n\n<p>Here's a repeatable example that runs on playpen without using FFI (which is the main reason you'd promote a raw pointer back into an object): <a href=\"http://is.gd/X6vdAK\" rel=\"nofollow\">http://is.gd/X6vdAK</a></p>\n\n<pre><code>use std::ptr::read;\nuse std::mem::forget;\n\n#[repr(C)]\nstruct Foo {\n  id: i32,\n  dispose:Option&lt;Box&lt;Fn(Foo) + 'static&gt;&gt; //'\n}\n\nimpl Foo {\n  pub fn new(id:i32) -&gt; Foo {\n    return Foo {\n        id: id,\n        dispose: None\n    };\n  }\n  pub fn release(mut self) {\n    if self.dispose.is_some() {\n      self.dispose.take().unwrap()(self);\n    }\n  }\n}\n\nimpl Drop for Foo {\n  fn drop(&amp;mut self) {\n    println!(\"Discarding a foo with dispose of {:?}\", self.dispose.is_some());\n  }\n}\n\n#[repr(C)]\nstruct Goblin {\n  foo:Foo,\n  angry: bool,\n  friends: i32\n}\n\n#[repr(C)]\nstruct Bat {\n  foo:Foo,\n  hungry: bool\n}\n\n#[repr(C)]\nstruct Dragon {\n  foo:Foo,\n  lairs: i32\n}\n\ntrait IsFoo {\n  fn foo(&amp;mut self) -&gt; &amp;mut Foo; \n  fn as_foo&lt;T: IsFoo&gt;(mut self) -&gt; Foo where Self: Sized {\n    let ptr:*const Foo = self.foo() as *mut Foo;\n    {\n        self.foo().dispose = Some(Box::new(|&amp;:foo:Foo| {\n          println!(\"Incoming release for id {}\", foo.id);\n          unsafe {\n            let tmp = &amp;foo as *const Foo as *const T; // Avoid ICE. :(\n            let mut instance:T = read::&lt;T&gt;(tmp);\n            println!(\"Dropping instance with id: {}\", instance.foo().id);\n            drop(instance);\n          }\n        }));\n    }\n    unsafe { \n        let rtn = read(ptr);\n        forget(self);\n        return rtn;\n    }\n  }\n}\nimpl IsFoo for Bat { fn foo(&amp;mut self) -&gt; &amp;mut Foo { return &amp;mut self.foo; } }\nimpl IsFoo for Goblin { fn foo(&amp;mut self) -&gt; &amp;mut Foo { return &amp;mut self.foo; } }\nimpl IsFoo for Dragon { fn foo(&amp;mut self) -&gt; &amp;mut Foo { return &amp;mut self.foo; } }\n\n// Test drops work\nimpl Drop for Bat { fn drop(&amp;mut self) { println!(\"Dropped a Bat\"); } }\nimpl Drop for Goblin { fn drop(&amp;mut self) { println!(\"Dropped a Goblin....!\"); } }\nimpl Drop for Dragon { fn drop(&amp;mut self) { println!(\"Dropped a Dragon\"); } }\n\nfn main() {\n  {\n    // Generic collection\n    let monsters:Vec&lt;Foo&gt; = vec!(\n      Bat { foo: Foo::new(1), hungry: true }.as_foo::&lt;Bat&gt;(),\n      Goblin { foo: Foo::new(2), angry: true, friends: 100 }.as_foo::&lt;Goblin&gt;(),\n      Dragon { foo: Foo::new(3), lairs: 33 }.as_foo::&lt;Dragon&gt;()\n    );\n\n    println!(\"Vector exists without dropping contents\");\n\n    // Cleanup\n    for m in monsters.into_iter() { \n      println!(\"Dropping an instance: {}\", m.id);\n      m.release(); \n    }\n  }\n}\n</code></pre>\n\n<p>The output here is:</p>\n\n<pre><code>Vector exists without dropping contents\nDropping an instance: 1\nIncoming release for id 1\nDropping instance with id: 1\nDiscarding a foo with dispose of false\nDropping an instance: 2\nIncoming release for id 2\nDropping instance with id: 2\nDiscarding a foo with dispose of false\nDropping an instance: 3\nIncoming release for id 3\nDropping instance with id: 3\nDiscarding a foo with dispose of false\n</code></pre>\n\n<p>i.e. Although I'm converting the reference <code>*mut Foo</code> into a <code>T</code> in the closure, the drop glue for <code>Goblin</code>, <code>Dragon</code> &amp; <code>Bat</code> doesn't run.</p>\n\n<p>If you tweak the code slightly, for example <a href=\"http://is.gd/mRzj8H\" rel=\"nofollow\">http://is.gd/mRzj8H</a>, you can get these (or some of these) to run:</p>\n\n<pre><code>Vector exists without dropping contents\nDropping an instance: 1\nDropped a Bat\nDropping an instance: 2 &lt;--- WTF, the others work but this one doesn't?\nDropping an instance: 3\nDropped a Dragon\n</code></pre>\n\n<p>Am I seeing the artifacts of some kind of race condition here, or something more complex?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1421363155, "post_id": 27974327, "comment_id": 44341921, "body": "I would think that the <a href=\"http://doc.rust-lang.org/1.0.0-alpha/std/string/trait.ToString.html\" rel=\"nofollow noreferrer\">ToString</a> trait should be listed under the Traits of <code>str</code>, but (as I&#39;m sure you&#39;ve noticed) it&#39;s not there. I&#39;m not sure if this was a slip, or if the docs are generated automatically and there is a bug in that process. The place <i>I</i> learned about it is from <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow noreferrer\">the book</a>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 8, "creation_date": 1421363336, "post_id": 27974327, "comment_id": 44341989, "body": "There is no direct link between <code>str</code> and <code>ToString::to_string</code> in the docs -- because <code>ToString</code> has a &quot;blanket&quot; implementation &quot;for all T so that T: String&quot; for a different trait, the formatting trait <code>String</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1421393113, "post_id": 27974327, "comment_id": 44349877, "body": "@user139873: So it&#39;s a documentation generation issue, the documentation would also need to take blanket implementations into account."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1421454165, "post_id": 27974327, "comment_id": 44380080, "body": "Absolutely. It&#39;s always been that the tools don&#39;t quite keep up with the language. Eventually it will get there I think."}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 2, "creation_date": 1423900783, "post_id": 27974327, "comment_id": 45345374, "body": "Note that the <code>String</code> trait has been renamed to <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code></a>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1425133112, "last_edit_date": 1495540404, "creation_date": 1425133112, "answer_id": 28782725, "question_id": 27974327, "link": "https://stackoverflow.com/questions/27974327/how-to-find-in-documentation-that-to-string-is-available-for-str/28782725#28782725", "title": "How to find in documentation that to_string is available for &amp;str?", "body": "<p>There is no direct link between <a href=\"http://doc.rust-lang.org/std/primitive.str.html\" rel=\"nofollow noreferrer\"><code>&amp;str</code></a> and <a href=\"http://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"nofollow noreferrer\"><code>ToString::to_string</code></a> in the docs because <code>ToString</code> has a <em>blanket implementation</em>:</p>\n\n<pre><code>impl&lt;T&gt; ToString for T where T: Display, T: ?Sized\n</code></pre>\n\n<p>This means that <code>ToString</code> is implemented for any item that implements <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code></a>. <code>&amp;str</code> does implement <code>Display</code>.</p>\n\n<p>(Moved from <a href=\"https://stackoverflow.com/users/3616050/user139873\">a comment</a>).</p>\n"}], "owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 28782725, "answer_count": 1, "score": 9, "last_activity_date": 1425133112, "creation_date": 1421361612, "last_edit_date": 1421424607, "question_id": 27974327, "link": "https://stackoverflow.com/questions/27974327/how-to-find-in-documentation-that-to-string-is-available-for-str", "title": "How to find in documentation that to_string is available for &amp;str?", "body": "<p>I was trying to understand what's going on when <a href=\"https://stackoverflow.com/questions/27972686/read-only-one-line-to-string-in-one-line-of-code\">reading a line</a>, but I couldn't find that there is a method <code>to_string</code> in the documentation for <a href=\"http://static.rust-lang.org/doc/master/std/str/index.html\" rel=\"nofollow noreferrer\">str</a>, even though I know it's there.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "is_accepted": true, "score": 2, "last_activity_date": 1421357361, "last_edit_date": 1421357361, "creation_date": 1421356204, "answer_id": 27973038, "question_id": 27972686, "link": "https://stackoverflow.com/questions/27972686/read-a-single-line-from-stdin-to-a-string-in-one-line-of-code/27973038#27973038", "title": "Read a single line from stdin to a string in one line of code", "body": "<p><code>trim()</code> returns an <code>&amp;str</code> view of the <code>String</code> returned by <code>unwrap()</code>.  You can't store this object because the owning <code>String</code> will no longer exist at the end of the statement. So just use <code>to_string()</code> to convert the <code>&amp;str</code> back to a <code>String</code>.</p>\n\n<pre><code>let line = io::stdin().read_line().ok().unwrap().trim().to_string();\n</code></pre>\n"}], "owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1050, "favorite_count": 0, "accepted_answer_id": 27973038, "answer_count": 1, "score": 0, "last_activity_date": 1421454048, "creation_date": 1421354829, "last_edit_date": 1421454048, "question_id": 27972686, "link": "https://stackoverflow.com/questions/27972686/read-a-single-line-from-stdin-to-a-string-in-one-line-of-code", "title": "Read a single line from stdin to a string in one line of code", "body": "<p>I know that I can read one line and convert it to number in one line, i.e.</p>\n\n<pre><code>let lines: u32 = io::stdin().read_line().ok().unwrap().trim().parse().unwrap();\n</code></pre>\n\n<p>How to do the same without parse and in one line? Right now I do this:</p>\n\n<pre><code>let line_u = io::stdin().read_line().ok().unwrap();\nlet line_t = line_u.as_slice().trim();\n</code></pre>\n\n<p><strong>Edit</strong>: Explanation what's going on here:</p>\n\n<pre><code>pub fn stdin() -&gt; StdinReader\nfn read_line(&amp;mut self) -&gt; IoResult&lt;String&gt; // method of StdinReader\ntype IoResult&lt;T&gt; = Result&lt;T, IoError&gt;;\nfn ok(self) -&gt; Option&lt;T&gt;                    // method of Result\nfn unwrap(self) -&gt; T                        // method of Option\nfn trim(&amp;self) -&gt; &amp;str                      // method of str from trait StrExt\nfn to_string(?) -&gt; String // I don't know where is this located in documentation\n</code></pre>\n\n<p>We can use trim on String, because String is a str decoreated with pointer, an owned string.</p>\n\n<p><a href=\"http://doc.rust-lang.org/std/str/trait.StrExt.html#tymethod.parse\" rel=\"nofollow\">parse()</a>,\n<a href=\"http://doc.rust-lang.org/std/io/stdio/fn.stdin.html\" rel=\"nofollow\">stdin()</a>,\n<a href=\"http://doc.rust-lang.org/std/io/stdio/struct.StdinReader.html#method.read_line\" rel=\"nofollow\">read_line()</a>, \n<a href=\"http://doc.rust-lang.org/std/io/type.IoResult.html\" rel=\"nofollow\">IoResult</a>, \n<a href=\"http://doc.rust-lang.org/std/result/enum.Result.html#method.ok\" rel=\"nofollow\">ok()</a>, \n<a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow\">unwrap()</a>,\n<a href=\"http://static.rust-lang.org/doc/master/std/str/trait.StrExt.html#tymethod.trim\" rel=\"nofollow\">trim()</a>,\n<a href=\"http://static.rust-lang.org/doc/master/std/str/index.html\" rel=\"nofollow\">str</a></p>\n"}, {"tags": ["string", "concatenation", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "edited": false, "score": 0, "creation_date": 1421332062, "post_id": 27965529, "comment_id": 44323966, "body": "Ohh, good one, thanks! I&#39;ll accept this as the answer when it lets me. This makes concat! pretty worthless in my opinion, they should take it out to keep a smaller, orthogonal set of features in the language."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "edited": false, "score": 7, "creation_date": 1421333641, "post_id": 27965529, "comment_id": 44325040, "body": "@elleciel: Actually, in a language where performance matters, <code>concat!</code> is essential: a <code>&amp;&#39;static str</code> does not require a memory allocation, and can be stored in read-only memory."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "edited": false, "score": 2, "creation_date": 1421377019, "post_id": 27965529, "comment_id": 44345565, "body": "@elleciel: <code>concat!</code> is not a commonly-used feature, but it\u2019s something of value in macros occasionally."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 10, "last_activity_date": 1421331727, "creation_date": 1421331727, "answer_id": 27965529, "question_id": 27965471, "link": "https://stackoverflow.com/questions/27965471/what-is-the-most-idiomatic-way-to-concatenate-integer-variables/27965529#27965529", "title": "What is the most idiomatic way to concatenate integer variables?", "body": "<p><code>concat!</code> takes literals and produces a <code>&amp;'static str</code> at <em>compile</em> time. You should use <code>format!</code> for this:</p>\n\n<pre><code>fn date(year: u8, month: u8, day: u8) -&gt; String {\n    format!(\"{}/{}/{}\", month, day, year)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "edited": false, "score": 0, "creation_date": 1421449323, "post_id": 27967736, "comment_id": 44378886, "body": "Good catch, I didn&#39;t realize that was the purpose of the <code>stringify!</code> macro, I see interesting use for this."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1421350074, "last_edit_date": 1421350074, "creation_date": 1421337947, "answer_id": 27967736, "question_id": 27965471, "link": "https://stackoverflow.com/questions/27965471/what-is-the-most-idiomatic-way-to-concatenate-integer-variables/27967736#27967736", "title": "What is the most idiomatic way to concatenate integer variables?", "body": "<p>Also note that your example <strong>does not do what you want</strong>! When you compile it, you get these warnings:</p>\n\n<pre><code>&lt;anon&gt;:1:9: 1:13 warning: unused variable: `year`, #[warn(unused_variables)] on by default\n&lt;anon&gt;:1 fn date(year: u8, month: u8, day: u8) -&gt; String\n                 ^~~~\n&lt;anon&gt;:1:19: 1:24 warning: unused variable: `month`, #[warn(unused_variables)] on by default\n&lt;anon&gt;:1 fn date(year: u8, month: u8, day: u8) -&gt; String\n                           ^~~~~\n&lt;anon&gt;:1:30: 1:33 warning: unused variable: `day`, #[warn(unused_variables)] on by default\n&lt;anon&gt;:1 fn date(year: u8, month: u8, day: u8) -&gt; String\n                                      ^~~\n</code></pre>\n\n<p>Note that all the variables are unused! The output of calling the function will <em>always</em> be the string:</p>\n\n<pre><code>month/day/year\n</code></pre>\n"}], "owner": {"reputation": 1545, "user_id": 1744274, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6287be0af95a5e6284e826fdfe14cad9?s=128&d=identicon&r=PG", "display_name": "elleciel", "link": "https://stackoverflow.com/users/1744274/elleciel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 476, "favorite_count": 0, "accepted_answer_id": 27965529, "answer_count": 2, "score": 4, "last_activity_date": 1421350074, "creation_date": 1421331541, "last_edit_date": 1421337763, "question_id": 27965471, "link": "https://stackoverflow.com/questions/27965471/what-is-the-most-idiomatic-way-to-concatenate-integer-variables", "title": "What is the most idiomatic way to concatenate integer variables?", "body": "<p>The compiler doesn't seem to infer that the integer variables are passed as string literals into the <code>concat!</code> macro, so I found the <code>stringify!</code> macro that converts these integer variables into string literals, but this looks ugly:</p>\n\n<pre><code>fn date(year: u8, month: u8, day: u8) -&gt; String\n{\n    concat!(stringify!(month), \"/\",\n            stringify!(day), \"/\",\n            stringify!(year)).to_string()\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5632, "user_id": 923846, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/09e0e62acac2bdbd44edb763d8566df4?s=128&d=identicon&r=PG", "display_name": "obe", "link": "https://stackoverflow.com/users/923846/obe"}, "edited": false, "score": 5, "creation_date": 1594568236, "post_id": 27961879, "comment_id": 111164884, "body": "IMO it&#39;s a poor choice and hurts clarity and searchability. I won&#39;t be surprised if this style recommendation is reverted in the future. It&#39;s great in a single-expression closure, but not in a multi-statement function, and I find it especially awkward when there are multiple return paths..."}], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 1, "creation_date": 1421350917, "post_id": 27962076, "comment_id": 44335962, "body": "as said document-or, I&#39;d agree that your version is how i&#39;d write this for real too. pull request time..."}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1421440972, "post_id": 27962076, "comment_id": 44375634, "body": "Whenever there&#39;s an <code>else</code>, I would rather see <code>match</code> used; it&#39;s much nicer."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 5, "creation_date": 1421476539, "post_id": 27962076, "comment_id": 44383847, "body": "@Tshepang: what, <code>match x { true =&gt; \u2026, false =&gt; \u2026 }</code>? I definitely disagree with you there."}, {"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 2, "creation_date": 1438815914, "post_id": 27962076, "comment_id": 51609955, "body": "I prefer return in those positions, actually. <i>Because</i> Rust is expression-oriented, it becomes a bit more difficult to track which blocks are exited enough times that the whole function returns, and it becomes awkward to see a <code>return</code> stmt or two in the middle when you need to return early... Expression-orientation has so many other style-advantages already but this feels like a _dis_advantage to follow, conversely... (for longer functions, at least)"}, {"owner": {"reputation": 97, "user_id": 1539054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4c9a2e612661483c007e58c3febe7d41?s=128&d=identicon&r=PG", "display_name": "Hui Zhou", "link": "https://stackoverflow.com/users/1539054/hui-zhou"}, "edited": false, "score": 46, "creation_date": 1491015390, "post_id": 27962076, "comment_id": 73381246, "body": "&quot;It just is.&quot; is not a good answer for adults.  Conventions and styles are in the eyes of the users. If the majority of users find using return intuitive, then it is a good style, regardless what the language designers&#39; opinions. [comments too long, read the rest following the link below]  <a href=\"https://gist.github.com/hzhou/432581d0735c035993a1d4bb1863d367\" rel=\"nofollow noreferrer\">gist.github.com/hzhou/432581d0735c035993a1d4bb1863d367</a>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 20, "last_activity_date": 1421476571, "last_edit_date": 1421476571, "creation_date": 1421320249, "answer_id": 27962076, "question_id": 27961879, "link": "https://stackoverflow.com/questions/27961879/why-is-using-return-as-the-last-statement-in-a-function-considered-bad-style/27962076#27962076", "title": "Why is using return as the last statement in a function considered bad style?", "body": "<p>It just <em>is</em>.</p>\n\n<p>Conventions don\u2019t need to have particularly good reasons, they just need to be generally accepted conventions. As it happens, this one does have a comparatively good reason\u2014it\u2019s shorter as you don\u2019t have the <code>return</code> and <code>;</code>. You may think that <code>return x + 1;</code> is more intuitive, but I disagree strongly\u2014it really grates and I feel a compelling need to fix it. I say this as one who, before starting using Rust, had never used an expression-oriented language before. While writing Python, <code>return x + 1</code> in that place looks right, while writing Rust it looks wrong.</p>\n\n<p>Now as it happens, that code should probably be written thus instead:</p>\n\n<pre><code>fn foo(x: i32) -&gt; i32 {\n    if x &lt; 5 {\n        x\n    } else {\n        x + 1\n    }\n}\n</code></pre>\n\n<p>This emphasises the expression orientation of the language.</p>\n"}, {"comments": [{"owner": {"reputation": 4454, "user_id": 272427, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/10f0f1452979307efc4583ba099ba801?s=128&d=identicon&r=PG", "display_name": "dubiousjim", "link": "https://stackoverflow.com/users/272427/dubiousjim"}, "edited": false, "score": 1, "creation_date": 1611400603, "post_id": 52101417, "comment_id": 116442271, "body": "The type of <code>return x</code> is whatever the context needs. If it&#39;s in one arm of an <code>if</code> and the other arm is of a non-unit type, then so too will <code>return x</code> have that type. So you could think of it as having bottom type (a subtype of all other types) and thus no value (since bottom type has no instances). Or with more sophistication, you could give it a continuation type and value. It&#39;s not right to say it has unit type and value."}], "tags": [], "owner": {"reputation": 947, "user_id": 5456794, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/ad6bcc88e5c8701ac8e196f8a902d21a?s=128&d=identicon&r=PG&f=1", "display_name": "mja", "link": "https://stackoverflow.com/users/5456794/mja"}, "is_accepted": false, "score": 14, "last_activity_date": 1611455885, "last_edit_date": 1611455885, "creation_date": 1535645467, "answer_id": 52101417, "question_id": 27961879, "link": "https://stackoverflow.com/questions/27961879/why-is-using-return-as-the-last-statement-in-a-function-considered-bad-style/52101417#52101417", "title": "Why is using return as the last statement in a function considered bad style?", "body": "<p>Copied from <strong>reddit</strong>: <a href=\"https://www.reddit.com/r/rust/comments/2v82ag/why_isnt_the_syntax_of_return_statements_explicit/\" rel=\"nofollow noreferrer\">Why isn't the syntax of return statements explicit?</a></p>\n<hr />\n<p>Answer from <a href=\"https://www.reddit.com/r/rust/comments/2v82ag/why_isnt_the_syntax_of_return_statements_explicit/cof9pma/\" rel=\"nofollow noreferrer\">@pcwalton</a></p>\n<blockquote>\n<p>Explicit return is really annoying in closures.\nFor example,\nit was a major pain in JavaScript before ES6 arrow functions were introduced</p>\n<pre><code>myArray.map(function(x) { return x * 2; })\n</code></pre>\n<p>is gratuitously verbose, even without the <code>function</code> keyword.\nOnce you have implicit returns somewhere in your language,\nyou might as well have them everywhere for consistency's sake.\nThe fact that it makes code less verbose is just an added bonus.</p>\n</blockquote>\n<p>and from <a href=\"https://www.reddit.com/r/rust/comments/2v82ag/why_isnt_the_syntax_of_return_statements_explicit/cofacoe/\" rel=\"nofollow noreferrer\">@mozilla_kmc</a></p>\n<blockquote>\n<p>Rust is an expression-oriented language.\nA block has the form</p>\n<pre><code>{\n    stmt;\n    stmt;\n    ...\n    stmt;\n    expr\n}\n</code></pre>\n<p>The statements are (basically) expressions or <code>let</code> bindings,\nand the trailing expression is implicitly <code>()</code> if not specified.\nThe value of the whole block is the value of this last expression.</p>\n<p>This is not just for functions. You can write</p>\n<pre><code>let foo = if x { y } else { z };\n</code></pre>\n<p>so <code>if</code> also takes the place of C's <code>?:</code> operator.\nEvery kind of block works the same way:</p>\n<pre><code>let result = unsafe {\n    let y = mem::transmute(x);\n    y.frob()\n};\n</code></pre>\n<p>So the implicit return at the end of a function is a natural consequence\nof Rust's expression-oriented syntax.\nThe improved ergonomics are just a nice bonus :)</p>\n<p>Puzzle: <code>return x</code> itself is an expression -- what is its value?</p>\n<p>Answer (suggested by @dubiousjim):</p>\n<blockquote class=\"spoiler\">\n<p> It is a never type <code>!</code>.</p>\n</blockquote>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 814, "user_id": 2430485, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vZThf.png?s=128&g=1", "display_name": "Markus Klein", "link": "https://stackoverflow.com/users/2430485/markus-klein"}, "is_accepted": false, "score": 4, "last_activity_date": 1535653107, "last_edit_date": 1535653107, "creation_date": 1535652587, "answer_id": 52103062, "question_id": 27961879, "link": "https://stackoverflow.com/questions/27961879/why-is-using-return-as-the-last-statement-in-a-function-considered-bad-style/52103062#52103062", "title": "Why is using return as the last statement in a function considered bad style?", "body": "<p>The clippy lint gives the following rational for the <code>needless_return</code> lint:</p>\n\n<blockquote>\n  <p>Removing the return and semicolon will make the code more rusty.</p>\n</blockquote>\n\n<p>This is probably as good as an objective rationale as we will ever get.</p>\n\n<p>As far as intuition goes; I feel that it is shaped by our individual experiences and therefore subjective. While Rust is not a functional programming language itself, many people using and developing it seem to have a strong background in functional programming languages like Haskell, which are entirely based on expressions. The influence can be strongly felt in many areas of Rust (e.g. error handling). So for them (and to be honest, myself included) using an expression instead of a statement seems more elegant.</p>\n"}], "owner": {"reputation": 55324, "user_id": 977038, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=128&d=identicon&r=PG", "display_name": "Abhijit", "link": "https://stackoverflow.com/users/977038/abhijit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9162, "favorite_count": 4, "answer_count": 3, "score": 33, "last_activity_date": 1611455885, "creation_date": 1421319497, "last_edit_date": 1421337639, "question_id": 27961879, "link": "https://stackoverflow.com/questions/27961879/why-is-using-return-as-the-last-statement-in-a-function-considered-bad-style", "title": "Why is using return as the last statement in a function considered bad style?", "body": "<p>I was reading through the Rust documentation and came across the following example and statement</p>\n\n<p>Using a return as the last line of a function works, but is considered poor style:</p>\n\n<pre><code>fn foo(x: i32) -&gt; i32 {\n    if x &lt; 5 { return x; }\n\n    return x + 1;\n}\n</code></pre>\n\n<p>I know I could have written the above as</p>\n\n<pre><code>fn foo(x: i32) -&gt; i32 {\n    if x &lt; 5 { return x; }\n\n    x + 1\n}\n</code></pre>\n\n<p>but I am more tempted to write the former, as that is more intuitive. I do understand that the function return value should be used as an expression so the later works but then why wouldn't the former be encouraged? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 1, "creation_date": 1421314218, "post_id": 27957103, "comment_id": 44314220, "body": "if your monsters are mostly known in advance (i.e. your not creating a game engine allowing everyone to create a new monster) you could alternatively work with an enum"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 5, "creation_date": 1421320934, "post_id": 27957103, "comment_id": 44317729, "body": "See also <a href=\"http://www.reddit.com/r/rust/comments/2sh28k/best_way_to_implement_heterogeneous_collection_of/\" rel=\"nofollow noreferrer\">the discussion on reddit</a>. (BTW, if cross-posting a question, it&#39;s generally polite to at least link between them so that e.g. interested people don&#39;t miss out on discussion.)"}, {"owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "edited": false, "score": 0, "creation_date": 1421467825, "post_id": 27957103, "comment_id": 44382439, "body": "Ok. I am torn between using Traits and a method that returns the shared data... or just using an enum for everything. I am thinking the former is the lesser of two evils. If inheritance is going to be added to the language, what is it going to look like? Apart from this there is hardly anything I miss from C++. A breath of fresh air."}, {"owner": {"reputation": 27478, "user_id": 183120, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fc147f814e1473bb6105db3d924fb590?s=128&d=identicon&r=PG", "display_name": "legends2k", "link": "https://stackoverflow.com/users/183120/legends2k"}, "edited": false, "score": 0, "creation_date": 1588081562, "post_id": 27957103, "comment_id": 108758359, "body": "Rust blog covers this: <a href=\"https://blog.rust-lang.org/2015/05/11/traits.html\" rel=\"nofollow noreferrer\">Abstraction without overhead: traits</a> -- an excellent read IMHO."}], "answers": [{"comments": [{"owner": {"reputation": 408, "user_id": 10259813, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-alOmMsQB0es/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM6E8TX6-Nv7lZ0WMNh4LP5r2ZbEA/mo/photo.jpg?sz=128", "display_name": "sam", "link": "https://stackoverflow.com/users/10259813/sam"}, "edited": false, "score": 1, "creation_date": 1611769055, "post_id": 27957213, "comment_id": 116559188, "body": "Note that an enum takes on the size of its largest option. If your Monster also had an option that was a large array each instance of Monster in your vector would have a memory footprint of the large array."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 24, "last_activity_date": 1612900944, "last_edit_date": 1612900944, "creation_date": 1421298845, "answer_id": 27957213, "question_id": 27957103, "link": "https://stackoverflow.com/questions/27957103/how-do-i-create-a-heterogeneous-collection-of-objects/27957213#27957213", "title": "How do I create a heterogeneous collection of objects?", "body": "<h3>Trait objects</h3>\n<p>The most extensible way to implement a heterogeneous collection (in this case a vector) of objects is exactly what you have:</p>\n<pre><code>Vec&lt;Box&lt;dyn ThingTrait + 'static&gt;&gt;\n</code></pre>\n<p>Although there are times where you might want a lifetime that's not <code>'static</code>, so you'd need something like:</p>\n<pre><code>Vec&lt;Box&lt;dyn ThingTrait + 'a&gt;&gt;\n</code></pre>\n<p>You could also have a collection of <em>references</em> to traits, instead of boxed traits:</p>\n<pre><code>Vec&lt;&amp;dyn ThingTrait&gt;\n</code></pre>\n<p>An example:</p>\n<pre><code>trait ThingTrait {\n    fn attack(&amp;self);\n}\n\nimpl ThingTrait for Monster1 {\n    fn attack(&amp;self) {\n        println!(&quot;monster 1 attacks&quot;)\n    }\n}\n\nimpl ThingTrait for Monster2 {\n    fn attack(&amp;self) {\n        println!(&quot;monster 2 attacks&quot;)\n    }\n}\n\nfn main() {\n    let m1 = Monster1 {\n        thing_record: ThingRecord { x: 42, y: 32 },\n        num_arrows: 2,\n    };\n\n    let m2 = Monster2 {\n        thing_record: ThingRecord { x: 42, y: 32 },\n        num_fireballs: 65,\n    };\n\n    let things: Vec&lt;Box&lt;dyn ThingTrait&gt;&gt; = vec![Box::new(m1), Box::new(m2)];\n}\n</code></pre>\n<p><code>Box&lt;dyn SomeTrait&gt;</code>, <code>Rc&lt;dyn SomeTrait&gt;</code>, <code>&amp;dyn SomeTrait</code>, etc. are all <em>trait objects</em>. These allow implementation of the trait on an infinite number of types, but the tradeoff is that it requires some amount of indirection and dynamic dispatch.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27567849/155423\">What makes something a &quot;trait object&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50650070/155423\">What does &quot;dyn&quot; mean in a type?</a></li>\n</ul>\n<h3>Enums</h3>\n<p>As mentioned in the comments, if you have a fixed number of known alternatives, a less open-ended solution is to use an enum. This doesn't require that the values be <code>Box</code>ed, but it will still have a small amount of dynamic dispatch to decide which concrete enum variant is present at runtime:</p>\n<pre><code>enum Monster {\n    One(Monster1),\n    Two(Monster2),\n}\n\nimpl Monster {\n    fn attack(&amp;self) {\n        match *self {\n            Monster::One(_) =&gt; println!(&quot;monster 1 attacks&quot;),\n            Monster::Two(_) =&gt; println!(&quot;monster 2 attacks&quot;),\n        }\n    }\n}\n\nfn main() {\n    let m1 = Monster1 {\n        thing_record: ThingRecord { x: 42, y: 32 },\n        num_arrows: 2,\n    };\n\n    let m2 = Monster2 {\n        thing_record: ThingRecord { x: 42, y: 32 },\n        num_fireballs: 65,\n    };\n\n    let things = vec![Monster::One(m1), Monster::Two(m2)];\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27324821/155423\">Why does an enum require extra memory size?</a></li>\n</ul>\n"}], "owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4329, "favorite_count": 7, "answer_count": 1, "score": 17, "last_activity_date": 1612900944, "creation_date": 1421298181, "last_edit_date": 1513296094, "question_id": 27957103, "link": "https://stackoverflow.com/questions/27957103/how-do-i-create-a-heterogeneous-collection-of-objects", "title": "How do I create a heterogeneous collection of objects?", "body": "<p>I want to use trait objects in a <code>Vec</code>. In C++ I could make a base class <code>Thing</code> from which is derived <code>Monster1</code> and <code>Monster2</code>. I could then create a <code>std::vector&lt;Thing*&gt;</code>. <code>Thing</code> objects must store some data e.g. <code>x : int, y : int</code>, but derived classes need to add more data.</p>\n\n<p>Currently I have something like</p>\n\n<pre><code>struct Level {\n    // some stuff here\n    pub things: Vec&lt;Box&lt;ThingTrait + 'static&gt;&gt;,\n}\n\nstruct ThingRecord {\n    x: i32,\n    y: i32,\n}\n\nstruct Monster1 {\n    thing_record: ThingRecord,\n    num_arrows: i32,\n}\n\nstruct Monster2 {\n    thing_record: ThingRecord,\n    num_fireballs: i32,\n}\n</code></pre>\n\n<p>I define a <code>ThingTrait</code> with methods for <code>get_thing_record()</code>, <code>attack()</code>, <code>make_noise()</code> etc. and implement them for <code>Monster1</code> and <code>Monster2</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421298450, "post_id": 27956519, "comment_id": 44308670, "body": "I might be misunderstanding something, but I get &quot;YOU GOT THE ANSWER! WOOT!&quot; when I run this. Does that not mean that your code worked? Your example says that <code>864864000</code> isn&#39;t correct, but what <i>is</i> correct?"}], "answers": [{"comments": [{"owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "edited": false, "score": 0, "creation_date": 1421295263, "post_id": 27956569, "comment_id": 44307968, "body": "Same output when took off the f32&#39;s."}], "tags": [], "owner": {"reputation": 111, "user_id": 1890369, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6dfe20523544c972662250eee3beba20?s=128&d=identicon&r=PG", "display_name": "Mutabah", "link": "https://stackoverflow.com/users/1890369/mutabah"}, "is_accepted": true, "score": 3, "last_activity_date": 1421294137, "creation_date": 1421294137, "answer_id": 27956569, "question_id": 27956519, "link": "https://stackoverflow.com/questions/27956519/hidden-logic-errors-in-code/27956569#27956569", "title": "Hidden Logic errors in code?", "body": "<p>Most likely, your errors are coming from converting a very large integer to f32 and then comparing (which loses accuracy)</p>\n"}, {"tags": [], "owner": {"reputation": 138, "user_id": 1144858, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b3cba17cd5c6e976d2a58ff135587aec?s=128&d=identicon&r=PG", "display_name": "David Brown", "link": "https://stackoverflow.com/users/1144858/david-brown"}, "is_accepted": false, "score": 0, "last_activity_date": 1421298783, "creation_date": 1421298783, "answer_id": 27957199, "question_id": 27956519, "link": "https://stackoverflow.com/questions/27956519/hidden-logic-errors-in-code/27957199#27957199", "title": "Hidden Logic errors in code?", "body": "<p>When computing divisors, you cannot stop at the square root of the number.  At best, you could stop at <code>n/i</code> where <code>n</code> is the number you are counting the divisors of, and <code>i</code> is the lowest divisor greater than 1.</p>\n\n<p>For example, when counting the divisors of 12, you would only try dividing by 1, 2 and 3, which would give you a divisor count of 4 instead of six, since it misses that 4 and 6.  This results in you finding many fewer divisors than the numbers actually have.</p>\n\n<p>Possibly this comes from the vector holding the divisors being called <code>fac</code> which suggests that they are factors instead of divisors.</p>\n"}], "owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 27956569, "answer_count": 2, "score": 0, "last_activity_date": 1421299011, "creation_date": 1421293749, "last_edit_date": 1421299011, "question_id": 27956519, "link": "https://stackoverflow.com/questions/27956519/hidden-logic-errors-in-code", "title": "Hidden Logic errors in code?", "body": "<p>My goal here is to find the first triangular number with 500 divisors, from <a href=\"https://projecteuler.net/problem=12\" rel=\"nofollow\">Project Euler</a>. This is what I have so far:</p>\n\n<pre><code>use std::num::Float;\n\nfn main() {\n    let mut num = vec!(1 , 3 , 6 , 10);\n    let mut a = 0us;\n    let mut fac = vec![];\n    for _ in (0us..1000000us) {\n        let x =\n            num[num.len() - 1] - num[num.len() - 2] + 1 +\n                num[num.len() -\n                        1]; //extremely clever way of listing triangle numbers(not to be cocky :))\n        num.push(x);\n    }\n    println!(\"{:?}\" , num);\n    println!(\"Calculating...\");\n    let mut _i = 1is;\n    for _ in (0us..num.len() as usize) {\n        for _ in (1us..(num[a] as f64).sqrt() as usize) {                                        //Logic Error\n            if num[a] % _i == 0 { fac.push(_i); }\n            //print!(\"{},\\n\" , res.len()); }\n            _i += 1;\n        }\n        fac.push(num[a] as isize,);\n        if fac.len() &gt;= 10 {println!(\"Length: {}\\nVector: {:?}\\nValue: {}\\n\\nYOU GOT THE ANSWER! WOOT! \\x07\", fac.len(), fac, num[a]); break;}\n        _i = 1;\n        fac = vec![];\n        a+=1\n    }\n}\n</code></pre>\n\n<p>but this prints '864864000' as the value which isn't correct, which doesn't make sense to me, I have tried <code>499</code>(since the vector doesn't include the number itself) and <code>501</code> and <code>502</code> and I get the same number.</p>\n\n<p>P.S: please don't try to make my code look cleaner or propose the closed form formula, as I'm trying to do this with my bare brain, which now needs a bit of help :)</p>\n"}]