[{"tags": ["c", "arrays", "struct", "rust"], "comments": [{"owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "edited": false, "score": 0, "creation_date": 1441844226, "post_id": 32490756, "comment_id": 52842601, "body": "possible duplicate of: <a href=\"http://stackoverflow.com/questions/31360993/what-is-the-proper-way-to-initialize-a-fixed-length-array\" title=\"what is the proper way to initialize a fixed length array\">stackoverflow.com/questions/31360993/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1441878750, "post_id": 32491644, "comment_id": 52856774, "body": "You should also note that it&#39;s customary to start type names in uppercase."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1441888738, "post_id": 32491644, "comment_id": 52863508, "body": "@llogiq: I&#39;ll edit the code at least, the remark itself would be better as a comment on the question."}, {"owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441889230, "post_id": 32491644, "comment_id": 52863826, "body": "@MatthieuM. rustc would have warned you if you were bothered to actually compile this code.  Also <code>const</code> item <code>str</code> should also be changed to <code>STR</code>, again according to rustc lint messages."}], "tags": [], "owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "is_accepted": true, "score": 4, "last_activity_date": 1441888773, "last_edit_date": 1441888773, "creation_date": 1441848741, "answer_id": 32491644, "question_id": 32490756, "link": "https://stackoverflow.com/questions/32490756/use-c-like-array-of-struct-in-rust/32491644#32491644", "title": "Use C-Like Array of Struct in Rust", "body": "<p>Your attempt was almost correct except you need to write out struct constructor with the name (no shortcut in Rust)</p>\n\n<p>Note also that Rust has <code>const</code> in addition to <code>static</code>. (<code>const</code> in Rust is roughly equivalent to <code>const static</code> in C)</p>\n\n<p>Playpen: <a href=\"http://is.gd/tPRVq4\" rel=\"nofollow\">http://is.gd/tPRVq4</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>const v0: i8 = 0;\nconst v1: i8 = 1;\nconst v2: i8 = 2;\nconst v3: i8 = 3;\n\nstruct Arr {\n    v: i8,\n    s: &amp;'static str,\n}\n\nconst str: [Arr; 4] = [\n    Arr {\n        v: v0,\n        s:\"zero\",\n    },\n    Arr {\n        v: v1,\n        s:\"one\",\n    },\n    Arr {\n        v: v2,\n        s:\"two\",\n    },\n    Arr {\n        v: v3,\n        s:\"three\",\n    },\n];\n\nfn main() {\n    println!(\"{}\", str[2].v);\n}\n</code></pre>\n"}], "owner": {"reputation": 703, "user_id": 1088057, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae08e2025fe2c1ee696d86d0863e147c?s=128&d=identicon&r=PG", "display_name": "cyberboxster", "link": "https://stackoverflow.com/users/1088057/cyberboxster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2350, "favorite_count": 0, "accepted_answer_id": 32491644, "answer_count": 1, "score": 3, "last_activity_date": 1441888773, "creation_date": 1441841704, "last_edit_date": 1441851382, "question_id": 32490756, "link": "https://stackoverflow.com/questions/32490756/use-c-like-array-of-struct-in-rust", "title": "Use C-Like Array of Struct in Rust", "body": "<p>I need help converting the following C code to Rust.</p>\n\n<pre><code>#define v0   0x0\n#define v1   0x1\n#define v2   0x2\n#define v3   0x3\n\nstruct arr {\n    u_int v;\n    const char *s;\n};\n\nstatic const struct arr str[] = {\n    { v0, \"zero\"  },\n    { v1, \"one\"   },\n    { v2, \"two\"   },\n    { v3, \"three\" },\n    { 0, NULL     }\n};\n</code></pre>\n\n<p>I have the following Rust code already done, but I can't figure out the best way to create an array of structs like the C code does.</p>\n\n<pre><code>static v0: u8 = 0;\nstatic v1: u8 = 1;\nstatic v2: u8 = 2;\nstatic v3: u8 = 3;\n\nstruct arr {\n    v: u8,\n    s: &amp;'static str,\n}\n</code></pre>\n\n<p>I have tried the following code, but to no success:</p>\n\n<pre><code>static str: [arr; 4] = [\n    {\n        v: v0,\n        s:\"zero\",\n    },\n    {\n        v: v1,\n        s:\"one\",\n    },\n    {\n        v: v2,\n        s:\"two\",\n    },\n    {\n        v: v3,\n        s:\"three\",\n    },\n];\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 1, "creation_date": 1441830186, "post_id": 32487166, "comment_id": 52837576, "body": "Same issue here I think: <a href=\"https://github.com/carllerche/curl-rust/issues/71\" rel=\"nofollow noreferrer\">github.com/carllerche/curl-rust/issues/71</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441886267, "post_id": 32487166, "comment_id": 52861846, "body": "Please do not include greetings/parting words on SO, and don&#39;t worry, as strange as it sounds, the Rust community appears to be populated by human beings."}, {"owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441976918, "post_id": 32487166, "comment_id": 52906117, "body": "Thanks Matthieu, noted!"}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "edited": false, "score": 0, "creation_date": 1442082230, "post_id": 32487166, "comment_id": 52941461, "body": "Your rust projects seems to be on <code>D:</code>, but the failing commands looks at <code>&#47;c&#47;Users&#47;Me&#47;</code>.  Is your home directory actually <code>C:\\Users\\Me</code>, and is there a .cargo registry there?"}, {"owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 0, "creation_date": 1442237245, "post_id": 32487166, "comment_id": 52987048, "body": "Exactly that, my project dir is on D: , with the cargo depositories under the system user home path. Surely any scripts in the build process should know this?"}], "answers": [{"comments": [{"owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 0, "creation_date": 1442237521, "post_id": 32542310, "comment_id": 52987273, "body": "I moved the project to C: , with the same problem - however my Rust installation is on D: , I will have to remove and reinstall to C: - I&#39;ll give this a try when time allows."}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 0, "creation_date": 1442237982, "post_id": 32542310, "comment_id": 52987617, "body": "Of course, if this is the source of the problem, it should be considered a bug in curl-rust and fixed there."}, {"owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 0, "creation_date": 1442252671, "post_id": 32542310, "comment_id": 52996748, "body": "Indeed.. I have neither MSYS2, mingw or Rust installed to the default locations, so anything with an absolute path will fail. I&#39;ll have a play with setting symlinks (or reinstalling to the default loc) to see if that fixes it when I get a chance."}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "edited": false, "score": 0, "creation_date": 1442345898, "post_id": 32542310, "comment_id": 53042108, "body": "You could try patching your copy of curl-rust ... Everywhere it does something with <code>C:</code>, just do the same for all volumes you have ...  I hope it works and I hope they will accept a pull request for it!  :-)"}], "tags": [], "owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "is_accepted": false, "score": 0, "last_activity_date": 1442082799, "creation_date": 1442082799, "answer_id": 32542310, "question_id": 32487166, "link": "https://stackoverflow.com/questions/32487166/cargo-build-error-file-missing/32542310#32542310", "title": "Cargo Build Error - File Missing", "body": "<p>My guess is that the <code>--prefix=D:/Proj/...</code> part is wrong, and should be <code>--prefix=/d/Proj/...</code>.</p>\n\n<p>In <a href=\"https://github.com/carllerche/curl-rust/blob/master/curl-sys/build.rs#L110\" rel=\"nofollow\">https://github.com/carllerche/curl-rust/blob/master/curl-sys/build.rs#L110</a> , there is a hardcoded <code>replace(\"C:\\\\\", \"/c/\")</code> but no handling of other unit labels.</p>\n\n<p>In other words, it seems curl-rust currently does not support building when your project root is not on <code>C:</code>.  Would it be possible to move your projects directory, or at least the code for this project?</p>\n"}], "owner": {"reputation": 21, "user_id": 5318391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e8d58cec4b900d043792b6b0862858?s=128&d=identicon&r=PG&f=1", "display_name": "Zebedee68", "link": "https://stackoverflow.com/users/5318391/zebedee68"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1400, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1442082799, "creation_date": 1441824724, "last_edit_date": 1441886214, "question_id": 32487166, "link": "https://stackoverflow.com/questions/32487166/cargo-build-error-file-missing", "title": "Cargo Build Error - File Missing", "body": "<p>Trying to compile the example given at <a href=\"https://github.com/gifnksm/twitter-api-rs\" rel=\"nofollow\">https://github.com/gifnksm/twitter-api-rs</a> on a 32bit Windows 10 machine, I get the following error - any ideas as to what to do?</p>\n\n<p>(I had a previous issue with the curl-sys compilation, which required the environment variable CFLAGS setting to '-mmmx -msse' )</p>\n\n<pre><code>D:\\Proj\\Rust\\projects\\twittest&gt;cargo build --verbose\n       Fresh rustc-serialize v0.3.16\n       Fresh pkg-config v0.3.5\n       Fresh libc v0.1.10\n       Fresh winapi v0.2.2\n       Fresh winapi-build v0.1.1\n       Fresh matches v0.1.2\n       Fresh log v0.3.2\n       Fresh url v0.2.37\n       Fresh advapi32-sys v0.1.2\n       Fresh kernel32-sys v0.1.4\n       Fresh rand v0.3.11\n       Fresh gcc v0.3.13\n       Fresh time v0.1.32\n   Compiling curl-sys v0.1.25\n     Running `D:\\Proj\\Rust\\projects\\twittest\\target\\debug\\build\\curl-sys-865cd014190c57f1\\build-script-build`\n       Fresh libz-sys v0.1.8\n       Fresh rust-crypto v0.2.31\nfailed to run custom build command for `curl-sys v0.1.25`\nProcess didn't exit successfully: `D:\\Proj\\Rust\\projects\\twittest\\target\\debug\\build\\curl-sys-865cd014190c57f1\\build-script-build` (exit code: 101)\n--- stdout\ncargo:rustc-link-search=D:\\Proj\\Rust\\projects\\twittest\\target\\debug\\build\\curl-sys-865cd014190c57f1\\out/lib\ncargo:rustc-link-lib=static=curl\ncargo:root=D:\\Proj\\Rust\\projects\\twittest\\target\\debug\\build\\curl-sys-865cd014190c57f1\\out\ncargo:include=D:\\Proj\\Rust\\projects\\twittest\\target\\debug\\build\\curl-sys-865cd014190c57f1\\out/include\ncargo:rustc-flags=-l ws2_32\ncurlsys running: \"sh\" \"-c\" \"/c/Users/Me/.cargo/registry/src/github.com-121aea75f9ef2ce2/curl-sys-0.1.25/curl/configure --with-winssl --enable-static=yes --enable-shared=no --enable-optimize --prefix=D:/Proj/Rust/projects/twittest/target/debug/build/curl-sys-865cd014190c57f1/out --without-librtmp --without-libidn --without-libssh2 --without-nghttp2 --disable-ldap --disable-ldaps --disable-ftp --disable-rtsp --disable-dict --disable-telnet --disable-tftp --disable-pop3 --disable-imap --disable-smtp --disable-gopher --disable-manual\"\n\n--- stderr\nthread '&lt;main&gt;' panicked at 'cmd.status() return the error The system cannot find the file specified.\n (os error 2)', C:\\Users\\Me\\.cargo\\registry\\src\\github.com-121aea75f9ef2ce2\\curl-sys-0.1.25\\build.rs:134\n</code></pre>\n\n<p>I am using <a href=\"http://mingw-w64.org\" rel=\"nofollow\">http://mingw-w64.org</a> but I suspect the problem lies with the 32bit build parameters in the library configure sh files (possibly!)</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1441835377, "last_edit_date": 1441835377, "creation_date": 1441824754, "answer_id": 32487173, "question_id": 32486866, "link": "https://stackoverflow.com/questions/32486866/variable-does-not-live-long-enough-matching-option-type/32487173#32487173", "title": "Variable does not live long enough: matching Option type", "body": "<p>The issue arises because you are <em>taking ownership</em> of the contents of the <code>Option</code> in your match with the binding <code>s</code> (which uses <em>bind-by-value</em>). However, since nothing uses <code>s</code> after the match arm, it would be dropped and cause a invalid reference, so it's prevented.</p>\n\n<p>Instead, you could <em>bind-by-reference</em>:</p>\n\n<pre><code>let string = match foo {\n    Some(ref s) =&gt; Some(Path::new(s)),\n    None        =&gt; None,\n};\n</code></pre>\n\n<p>Or you could get an <code>Option&lt;&amp;T</code>> from the <code>Option&lt;T&gt;</code> using <a href=\"http://doc.rust-lang.org/core/option/enum.Option.html#method.as_ref\" rel=\"nofollow\"><code>as_ref</code></a>:</p>\n\n<pre><code>let string = match foo.as_ref() {\n    Some(s) =&gt; Some(Path::new(s)),\n    None    =&gt; None,\n};\n</code></pre>\n\n<p>I'd probably use the last solution coupled with <a href=\"http://doc.rust-lang.org/core/option/enum.Option.html#method.map\" rel=\"nofollow\"><code>map</code></a>:</p>\n\n<pre><code>let string = foo.as_ref().map(Path::new);\n</code></pre>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 700, "favorite_count": 0, "accepted_answer_id": 32487173, "answer_count": 1, "score": 4, "last_activity_date": 1441835377, "creation_date": 1441823686, "last_edit_date": 1441835284, "question_id": 32486866, "link": "https://stackoverflow.com/questions/32486866/variable-does-not-live-long-enough-matching-option-type", "title": "Variable does not live long enough: matching Option type", "body": "<p>I'm using getopts, and I was previously getting a value from a flag like this:</p>\n\n<pre><code>let file = matches.opt_str(\"f\").unwrap();\nlet file_path = Path::new(&amp;file);\n</code></pre>\n\n<p>But, I would like to handle the possible errors better, by making the path optional. This is my new code:</p>\n\n<pre><code>let file = matches.opt_str(\"f\");\nlet file_path = match file {\n    Some(f) =&gt; Some(Path::new(&amp;f)),\n    None    =&gt; None\n}\n</code></pre>\n\n<p>But, when I try to compile this code, I get the error <code>'f' does not live long enough</code>. I'm completely stumped.</p>\n\n<p>Heres the MCVE of my code:</p>\n\n<pre><code>fn main() {\n    let foo = Some(\"success\".to_string());\n    let string = match foo {\n        Some(s) =&gt; Some(Path::new(&amp;s)),\n        None    =&gt; None\n    };\n}\n</code></pre>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1441815877, "post_id": 32484641, "comment_id": 52830484, "body": "What is the reason you don&#39;t want to use the avenue that you already know? You have to tell us that so that any answers don&#39;t automatically fail for the same reason."}, {"owner": {"reputation": 439, "user_id": 204708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/af5627156aeaebf962636bcfce420429?s=128&d=identicon&r=PG", "display_name": "dodecaphonic", "link": "https://stackoverflow.com/users/204708/dodecaphonic"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441816514, "post_id": 32484641, "comment_id": 52830841, "body": "Mostly lacking proficiency with Rust, Shepmaster. I don&#39;t want to rush to a solution being unaware of the alternatives, if any exist."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441877703, "post_id": 32484641, "comment_id": 52856071, "body": "It&#39;s unclear what are you asking for here, which in turns makes the question too broad I am afraid: do you want to avoid manipulating <code>*mut FILE</code> directly? or what?"}, {"owner": {"reputation": 439, "user_id": 204708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/af5627156aeaebf962636bcfce420429?s=128&d=identicon&r=PG", "display_name": "dodecaphonic", "link": "https://stackoverflow.com/users/204708/dodecaphonic"}, "edited": false, "score": 0, "creation_date": 1441881821, "post_id": 32484641, "comment_id": 52858797, "body": "Sorry, Matthieu. I&#39;ve edited the text in the hopes of making it clearer."}, {"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 0, "creation_date": 1448308240, "post_id": 32484641, "comment_id": 55522932, "body": "So despite the accepted answer it seems like the cleanest thing is to use <code>libc::fopen</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 1, "last_activity_date": 1441882320, "creation_date": 1441882320, "answer_id": 32499884, "question_id": 32484641, "link": "https://stackoverflow.com/questions/32484641/how-can-i-write-binding-to-a-c-function-that-expects-an-open-file-handle-in-rust/32499884#32499884", "title": "How can I write binding to a C function that expects an open file handle in Rust?", "body": "<p>You could of course use a <code>RawFd</code>, transmute and call <code>libc::funcs::posix88::stdio::fdopen(_, mode)</code> with it. That would be highly unportable though.</p>\n"}, {"tags": [], "owner": {"reputation": 933, "user_id": 386398, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/949f531863019049764e4aca8fb1b6ef?s=128&d=identicon&r=PG", "display_name": "santa", "link": "https://stackoverflow.com/users/386398/santa"}, "is_accepted": false, "score": 0, "last_activity_date": 1592303210, "creation_date": 1592303210, "answer_id": 62406339, "question_id": 32484641, "link": "https://stackoverflow.com/questions/32484641/how-can-i-write-binding-to-a-c-function-that-expects-an-open-file-handle-in-rust/62406339#62406339", "title": "How can I write binding to a C function that expects an open file handle in Rust?", "body": "<p><a href=\"https://github.com/flier/rust-cfile\" rel=\"nofollow noreferrer\">cfile</a> (<a href=\"https://docs.rs/cfile/0.5.1/cfile/\" rel=\"nofollow noreferrer\">crate docs</a>) looks like a lightweight wrapper around libcs FILE* that implements the <a href=\"https://doc.rust-lang.org/stable/std/io/#read-and-write\" rel=\"nofollow noreferrer\">io::Read/Write/Seek</a> traits.</p>\n"}], "owner": {"reputation": 439, "user_id": 204708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/af5627156aeaebf962636bcfce420429?s=128&d=identicon&r=PG", "display_name": "dodecaphonic", "link": "https://stackoverflow.com/users/204708/dodecaphonic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 405, "favorite_count": 0, "accepted_answer_id": 32499884, "answer_count": 2, "score": 6, "last_activity_date": 1592303210, "creation_date": 1441815496, "last_edit_date": 1441881787, "question_id": 32484641, "link": "https://stackoverflow.com/questions/32484641/how-can-i-write-binding-to-a-c-function-that-expects-an-open-file-handle-in-rust", "title": "How can I write binding to a C function that expects an open file handle in Rust?", "body": "<p>I've toyed with writing library bindings in Rust before, and it wasn't difficult. Now, however, I'm stuck: I'm trying to write a binding for <a href=\"https://github.com/librsync/librsync\" rel=\"noreferrer\">librsync</a>, and some of its functions expect you to pass an open file handle (a <code>FILE*</code> in C). </p>\n\n<p>For primitive types, there's a straightforward way to pass them into C, (the same for pointers to primitive types). And, to be clear, I'm aware that the <code>libc</code> crate implements <code>fopen</code>, which in turn gives me a <code>mut FILE*</code> (which would eventually do the job). However, I was wondering if there is something in the Rust standard library that gives me a <code>FILE*</code> to pass to <code>librsync</code> \u2014 maybe something analog to <code>std::ffi::CString</code>.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1441786863, "post_id": 32473295, "comment_id": 52809739, "body": "If you&#39;re creating a binary (e.g. if one has <code>src&#47;main.rs</code> instead of <code>src&#47;lib.rs</code>) then you can&#39;t use the functions from it in a doctest: doc tests import the crate they&#39;re from as a library (if it is one)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441807197, "post_id": 32473295, "comment_id": 52823996, "body": "Please take the time to create an <a href=\"/help/mcve\">MCVE</a> when asking for help. As you&#39;ve currently stated your question, we have to do a lot of guessing to know exactly what exists."}], "answers": [{"comments": [{"owner": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "edited": false, "score": 0, "creation_date": 1486494813, "post_id": 32478624, "comment_id": 71366459, "body": "The same was true of C# until they fixed it for tests in exes. Come on rust, remove the gotchas."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 3, "last_activity_date": 1441798952, "creation_date": 1441798952, "answer_id": 32478624, "question_id": 32473295, "link": "https://stackoverflow.com/questions/32473295/how-can-i-use-a-custom-module-inside-a-doctest/32478624#32478624", "title": "How can I use a custom module inside a doctest?", "body": "<p>As huon-dbaupp noted, bin crates cannot be imported from doc tests.</p>\n\n<p>The solution is to define most of your code as a library crate and have one binary that is just a shell around that.</p>\n\n<p>For example, <a href=\"https://github.com/phildawes/racer\" rel=\"nofollow\">racer</a> employs this technique.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1441807360, "creation_date": 1441807360, "answer_id": 32481693, "question_id": 32473295, "link": "https://stackoverflow.com/questions/32473295/how-can-i-use-a-custom-module-inside-a-doctest/32481693#32481693", "title": "How can I use a custom module inside a doctest?", "body": "<p>When you write a doc test, you have to act as the <em>user of your code would</em>. Given these files:</p>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>pub mod simulation {\n    pub mod factory {\n        pub struct FactoryType;\n\n        impl FactoryType {\n            /// ```\n            /// use foo::simulation::factory::FactoryType;\n            ///\n            /// let f = FactoryType;\n            /// assert_eq!(42, f.human_id())\n            /// ```\n            pub fn human_id(&amp;self) -&gt; u8 { 41 }\n        }\n    }\n}\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>extern crate foo;\nuse foo::simulation::factory::FactoryType;\n\nfn main() {\n    let f = FactoryType;\n    println!(\"{}\", f.human_id());\n}\n</code></pre>\n\n<p>Everything works. Note that in <strong>main.rs</strong>, you have to say <code>extern crate</code>, then all your references need to include the crate name. The doctest is the same, except the <code>extern crate</code> is automatically included for you.</p>\n"}], "owner": {"reputation": 16568, "user_id": 257583, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/23defa5e5246750c8d419ee101a257e9?s=128&d=identicon&r=PG", "display_name": "wrongusername", "link": "https://stackoverflow.com/users/257583/wrongusername"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1228, "favorite_count": 1, "accepted_answer_id": 32481693, "answer_count": 2, "score": 6, "last_activity_date": 1441807360, "creation_date": 1441783384, "question_id": 32473295, "link": "https://stackoverflow.com/questions/32473295/how-can-i-use-a-custom-module-inside-a-doctest", "title": "How can I use a custom module inside a doctest?", "body": "<pre><code>mod simulation;\n\nuse simulation::factory::FactoryType;\n</code></pre>\n\n<p>works fine in <code>main.rs</code>, but not in a doctest inside <code>simulation/factory.rs</code>:</p>\n\n<pre><code>impl product_type::ProductType for FactoryType {\n    /// Lorem Ipsum\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use simulation::factory::FactoryType;\n    ///\n    /// ...\n    /// ```\n    fn human_id(&amp;self) -&gt; &amp;String {\n        ...\n    }\n}\n</code></pre>\n\n<p><code>cargo test</code> gives me the error</p>\n\n<pre><code>---- simulation::factory::human_id_0 stdout ----\n    &lt;anon&gt;:2:9: 2:19 error: unresolved import `simulation::factory::FactoryType`. Maybe a missing `extern crate simulation`?\n&lt;anon&gt;:2     use simulation::factory::FactoryType;\n                 ^~~~~~~~~~\nerror: aborting due to previous error\nthread 'simulation::factory::human_id_0' panicked at 'Box&lt;Any&gt;', /home/rustbuild/src/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libsyntax/diagnostic.rs:192\n</code></pre>\n\n<p>How can I get doctests to work?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 10, "last_activity_date": 1539629257, "last_edit_date": 1539629257, "creation_date": 1441781475, "answer_id": 32472705, "question_id": 32472495, "link": "https://stackoverflow.com/questions/32472495/how-do-i-write-a-formatted-string-to-a-file/32472705#32472705", "title": "How do I write a formatted string to a file?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#method.write_fmt\" rel=\"noreferrer\">documentation</a> indicates the issue: the <code>write_fmt</code> method takes one argument, of type <a href=\"https://doc.rust-lang.org/std/fmt/struct.Arguments.html\" rel=\"noreferrer\"><code>std::fmt::Arguments</code></a>, which can be constructed via the <a href=\"https://doc.rust-lang.org/std/macro.format_args.html\" rel=\"noreferrer\"><code>format_args!</code></a> macro. It also suggests the best way to use it:</p>\n\n<blockquote>\n  <p>The <a href=\"https://doc.rust-lang.org/std/macro.write.html\" rel=\"noreferrer\"><code>write!</code></a> macro should be favored to invoke this method instead.</p>\n</blockquote>\n\n<p>One calls <a href=\"https://doc.rust-lang.org/std/macro.write.html\" rel=\"noreferrer\"><code>write!</code></a> (or <a href=\"https://doc.rust-lang.org/std/macro.writeln.html\" rel=\"noreferrer\"><code>writeln!</code></a>) just like <a href=\"https://doc.rust-lang.org/std/macro.println.html\" rel=\"noreferrer\"><code>println!</code></a>, but by passing the location to write to as the first argument:</p>\n\n<pre><code>write!(&amp;mut writer, \"Factorial of {} = {}\", num, factorial);\n</code></pre>\n\n<p>(Note that the docs have a search bar at the top of each page, so one can find documentation on, for example, macros by searching for <code>&lt;name&gt;!</code> there.)</p>\n"}], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9062, "favorite_count": 2, "accepted_answer_id": 32472705, "answer_count": 1, "score": 6, "last_activity_date": 1539629445, "creation_date": 1441780684, "last_edit_date": 1539629445, "question_id": 32472495, "link": "https://stackoverflow.com/questions/32472495/how-do-i-write-a-formatted-string-to-a-file", "title": "How do I write a formatted string to a file?", "body": "<p>I want to write output of my function to a file. I expected that <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#method.write_fmt\" rel=\"noreferrer\"><code>write_fmt</code></a> is what I require:</p>\n\n<pre><code>use std::{\n    fs::File,\n    io::{BufWriter, Write},\n};\n\nfn main() {\n    let write_file = File::create(\"/tmp/output\").unwrap();\n    let mut writer = BufWriter::new(&amp;write_file);\n\n    // From my function\n    let num = 1;\n    let factorial = 1;\n\n    writer.write_fmt(\"Factorial of {} = {}\", num, factorial);\n}\n</code></pre>\n\n<p>Error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0061]: this function takes 1 parameter but 3 parameters were supplied\n  --&gt; src/main.rs:11:12\n   |\n11 |     writer.write_fmt(\"Factorial of {} = {}\", num, factorial);\n   |            ^^^^^^^^^ expected 1 parameter\n</code></pre>\n\n<p>This seems wrong and there isn't much available in the documentation. </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 12, "last_activity_date": 1441704329, "creation_date": 1441704329, "answer_id": 32454009, "question_id": 32452708, "link": "https://stackoverflow.com/questions/32452708/explicit-partial-array-initialisation-in-rust/32454009#32454009", "title": "Explicit partial array initialisation in Rust", "body": "<p>To the best of my knowledge, there is no such shortcut. You do have a few options, though.</p>\n\n<hr>\n\n<p><strong>The direct syntax</strong></p>\n\n<p>The direct syntax to initialize an array works with <code>Copy</code> types (integers are <code>Copy</code>):</p>\n\n<pre><code>let array = [0; 1024];\n</code></pre>\n\n<p>initializes an array of 1024 elements with all 0s.</p>\n\n<p>Based on this, you can afterwards modify the array:</p>\n\n<pre><code>let array = {\n    let mut array = [0; 1024];\n    array[0] = 7;\n    array[1] = 8;\n    array\n};\n</code></pre>\n\n<p><em>Note the trick of using a block expression to isolate the mutability to a smaller section of the code; we'll reuse it below.</em></p>\n\n<hr>\n\n<p><strong>The iterator syntax</strong></p>\n\n<p>There is also support to initialize an array from an iterator:</p>\n\n<pre><code>let array = {\n    let mut array = [0; 1024];\n\n    for (i, element) in array.iter_mut().enumerate().take(2) {\n        *element = (i + 7);\n    }\n\n    array\n};\n</code></pre>\n\n<p>And you can even (optionally) start from an uninitialized state, using an <code>unsafe</code> block:</p>\n\n<pre><code>let array = unsafe {\n    // Create an uninitialized array.\n    let mut array: [i32; 10] = mem::uninitialized();\n\n    let nonzero = 2;\n\n    for (i, element) in array.iter_mut().enumerate().take(nonzero) {\n        // Overwrite `element` without running the destructor of the old value.\n        ptr::write(element, i + 7)\n    }\n\n    for element in array.iter_mut().skip(nonzero) {\n        // Overwrite `element` without running the destructor of the old value.\n        ptr::write(element, 0)\n    }\n\n    array\n};\n</code></pre>\n\n<hr>\n\n<p><strong>The shorter iterator syntax</strong></p>\n\n<p>There is a shorter form, based on <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice\"><code>clone_from_slice</code></a>, it is currently unstable however.</p>\n\n<pre><code>#![feature(clone_from_slice)]\n\nlet array = {\n    let mut array = [0; 32];\n\n    // Override beginning of array\n    array.clone_from_slice(&amp;[7, 8]);\n\n    array\n};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1466547102, "last_edit_date": 1466547102, "creation_date": 1462541374, "answer_id": 37073680, "question_id": 32452708, "link": "https://stackoverflow.com/questions/32452708/explicit-partial-array-initialisation-in-rust/37073680#37073680", "title": "Explicit partial array initialisation in Rust", "body": "<p>Here is macro</p>\n\n<pre><code>macro_rules! array {\n    ($($v:expr),*) =&gt; (\n        {\n            let mut array = Default::default();\n            {\n                let mut e = &lt;_ as ::std::convert::AsMut&lt;[_]&gt;&gt;::as_mut(&amp;mut array).iter_mut();\n                $(*e.next().unwrap() = $v);*;\n            }\n            array\n        }\n    )\n}\n\nfn main() {\n    let a: [usize; 5] = array!(7, 8);\n    assert_eq!([7, 8, 0, 0, 0], a);\n}\n</code></pre>\n"}], "owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1027, "favorite_count": 1, "accepted_answer_id": 32454009, "answer_count": 2, "score": 9, "last_activity_date": 1466547102, "creation_date": 1441700474, "question_id": 32452708, "link": "https://stackoverflow.com/questions/32452708/explicit-partial-array-initialisation-in-rust", "title": "Explicit partial array initialisation in Rust", "body": "<p>In C, I can write <code>int foo[100] = { 7, 8 };</code> and I will get <code>[7, 8, 0, 0, 0...]</code>.</p>\n\n<p>This allows me to explicitly and concisely choose initial values for a contiguous group of elements at the beginning of the array, and the remainder will be initialised as if they had static storage duration (i.e. to the zero value of the appropriate type).</p>\n\n<p>Is there an equivalent in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441693771, "post_id": 32448623, "comment_id": 52763985, "body": "Busy waiting... (ie, loop over all channels peaking to see if they have anything, and yield/sleep at the end of the iteration if you got nothing)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441714783, "post_id": 32448623, "comment_id": 52777218, "body": "@MatthieuM. How can one peek at a blocking iterator? Maybe I&#39;m missing something, but because it&#39;s blocking, control won&#39;t be returned until there is an item available from the iterator being checked. You would have to create a thread per blocking iterator, as OP suggested."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441721134, "post_id": 32448623, "comment_id": 52781888, "body": "@Shepmaster: Damned; glad it was only a comment :p Though I only suggested in jest anyway because it&#39;s more a hack than a real solution :x"}], "answers": [{"comments": [{"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1444829610, "post_id": 32462320, "comment_id": 54065720, "body": "I wish there was a better way too. :/"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1441727897, "creation_date": 1441727897, "answer_id": 32462320, "question_id": 32448623, "link": "https://stackoverflow.com/questions/32448623/reading-two-blocking-iterators/32462320#32462320", "title": "Reading two blocking iterators", "body": "<blockquote>\n  <p>Is there something that can join two blocking iterators and provide output as data comes in? Or any other solution to this issue?</p>\n</blockquote>\n\n<p>Although I certainly hope someone proves me wrong, I think the answer has to be \"no\". By definition, something that blocks will prevent any further work from being done on that thread. You'd need something that can distinguish between the states of \"done\", \"nothing to read\", and \"something to read\" and that cannot be built atop building blocks that only give two of those states.</p>\n\n<blockquote>\n  <p>I'd like to avoid creating a thread for each source of input and managing my own queue.</p>\n</blockquote>\n\n<p>I do not see any way around this. Since a blocking iterator blocks the thread, having multiple threads allows you to add back the state of \"nothing to read\".</p>\n\n<p>The better solution would involve making both input sources have all 3 states.</p>\n\n<pre><code>loop {\n    if let Ok(Message::Text(text)) = receiver.recv_message() {\n        // Do some stuff\n    } else if let Err(TryRecvError::Disconnected) = kill.try_recv() {\n        break;\n    } else {\n        // Something intelligent for the other cases?\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 330, "favorite_count": 0, "accepted_answer_id": 32462320, "answer_count": 1, "score": 5, "last_activity_date": 1441727897, "creation_date": 1441681362, "last_edit_date": 1441681660, "question_id": 32448623, "link": "https://stackoverflow.com/questions/32448623/reading-two-blocking-iterators", "title": "Reading two blocking iterators", "body": "<p>I'm using the Rust <a href=\"https://github.com/cyderize/rust-websocket\">websocket library</a> to talk to things and I have this thread that looks roughly like this:</p>\n\n<pre><code>thread::spawn(move || {\n    while let Ok(Message::Text(text)) = receiver.recv_message() {\n        /* Do some stuff */\n    }\n});\n</code></pre>\n\n<p>The above receiver can also be a blocking iterator:</p>\n\n<pre><code>thread::spawn(move || {\n    for message in receiver.incoming_messages() {\n        /* Do same stuff */\n    }\n});\n</code></pre>\n\n<p>I want to send a signal to this thread telling it to stop doing things. I thought a <code>mpsc::channel</code> would be great for this signal-sending.  <a href=\"https://doc.rust-lang.org/std/macro.select!.html\"><code>select!</code></a> seemed like the way to go, but it only works if all the channels are <code>mpsc::channel</code> types.</p>\n\n<p>Is there something that can join two blocking iterators and provide output as data comes in? Or any other solution to this issue? I'd like to avoid creating a thread for each source of input and managing my own queue.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "edited": false, "score": 0, "creation_date": 1443648375, "post_id": 32446485, "comment_id": 53583121, "body": "For future reference: This question solved my issue in which I was trying to pass boxed closure from a Vector of boxed closures as a parameter to a function. Find my code in this rust playground: <a href=\"https://play.rust-lang.org/?gist=65489db8ac7ed743c572&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 1, "creation_date": 1441669116, "post_id": 32447125, "comment_id": 52757742, "body": "Interesting, thanks.. Sadly, <code>where F: Foo + ?Sized</code> doesn&#39;t work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 3, "creation_date": 1441669269, "post_id": 32447125, "comment_id": 52757772, "body": "@bfops sad indeed. It&#39;s one of the <a href=\"https://github.com/rust-lang/rust/issues/20503\" rel=\"nofollow noreferrer\">more annoying bugs</a> I hit somewhat frequently ;-)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1552045797, "last_edit_date": 1552045797, "creation_date": 1441667920, "answer_id": 32447125, "question_id": 32446485, "link": "https://stackoverflow.com/questions/32446485/coremarkersized-not-implemented-for-foo/32447125#32447125", "title": "core::marker::Sized not implemented for Foo", "body": "<p>The error message wasn't stellar when this question was asked. The same code (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51f7007d2ec47a7c43f47c5142a50b47\" rel=\"nofollow noreferrer\">Playground</a>) shows a better error message today:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `dyn Foo` cannot be known at compilation time\n  --&gt; src/main.rs:26:3\n   |\n26 |   call_foo(&amp;foo);\n   |   ^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `dyn Foo`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box&lt;dyn Foo&gt;`\nnote: required by `call_foo`\n  --&gt; src/main.rs:20:1\n   |\n20 | fn call_foo&lt;F&gt;(foo: &amp;F) where F: Foo {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>The error message links to The Rust Programming Language Book, <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\" rel=\"nofollow noreferrer\">Chapter 19, section 4, <em>\"Dynamically sized types and the <code>Sized</code> trait\"</em></a>.\nThe problem arises because by default, a generic type parameter is assumed to be <code>Sized</code>. However, a <em>trait object</em> (the <code>dyn Foo</code> in <code>Box&lt;dyn Foo&gt;</code>) does not have a known size. That's acceptable in this case, so we modify the blanket implementation to allow boxes things with an unknown size:</p>\n\n<pre><code>impl&lt;F: ?Sized&gt; Foo for Box&lt;F&gt;\n    where F: Foo\n</code></pre>\n\n<p>Here is the fixed code, updated to the Rust 2018 edition:</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self);\n}\n\nimpl Foo for () {\n    fn foo(&amp;self) {\n        println!(\"hello world\");\n    }\n}\n\nimpl&lt;F: ?Sized&gt; Foo for Box&lt;F&gt;\n    where F: Foo\n{\n    fn foo(&amp;self) {\n        (**self).foo()\n    }\n}\n\nfn call_foo&lt;F&gt;(foo: &amp;F)\n    where F: Foo\n{\n    foo.foo()\n}\n\nfn main() {\n    let foo: Box&lt;dyn Foo&gt; = Box::new(());\n    call_foo(&amp;foo);\n}\n</code></pre>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2256, "favorite_count": 0, "accepted_answer_id": 32447125, "answer_count": 1, "score": 6, "last_activity_date": 1552045797, "creation_date": 1441662823, "question_id": 32446485, "link": "https://stackoverflow.com/questions/32446485/coremarkersized-not-implemented-for-foo", "title": "core::marker::Sized not implemented for Foo", "body": "<p>I have this fairly straightforward Rust program:</p>\n\n<pre><code>use std::ops::Deref;\n\ntrait Foo {\n  fn foo(&amp;self);\n}\n\nimpl Foo for () {\n  fn foo(&amp;self) {\n    println!(\"hello world\");\n  }\n}\n\nimpl&lt;F&gt; Foo for Box&lt;F&gt; where F: Foo {\n  fn foo(&amp;self) {\n    let f: &amp;F = self.deref();\n    f.foo()\n  }\n}\n\nfn call_foo&lt;F&gt;(foo: &amp;F) where F: Foo {\n  foo.foo()\n}\n\nfn main() {\n  let foo: Box&lt;Foo&gt; = Box::new(());\n  call_foo(&amp;foo);\n}\n</code></pre>\n\n<p>But I get a compilation errors:</p>\n\n<pre><code>$ rustc main.rs\nmain.rs:26:3: 26:11 error: the trait `core::marker::Sized` is not implemented for the type `Foo` [E0277]\nmain.rs:26   call_foo(&amp;foo);\n             ^~~~~~~~\nmain.rs:26:3: 26:11 help: run `rustc --explain E0277` to see a detailed explanation\nmain.rs:26:3: 26:11 note: `Foo` does not have a constant size known at compile-time\nmain.rs:26   call_foo(&amp;foo);\n             ^~~~~~~~\nmain.rs:26:3: 26:11 note: required by `call_foo`\nmain.rs:26   call_foo(&amp;foo);\n             ^~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>The error explanation for E0277 seems unrelated. How do I fix this?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1441669190, "post_id": 32445780, "comment_id": 52757757, "body": "@Veedrac what alternative would you use? <code>Read</code> is only implemented for a handful of instances of <code>Cursor&lt;T&gt;</code>, but the constructor allows any type."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441669817, "post_id": 32445780, "comment_id": 52757879, "body": "@Shepmaster I meant <code>&amp;&lt;expr&gt;[..]</code>. <a href=\"https://doc.rust-lang.org/std/macro.include_bytes!.html\" rel=\"nofollow noreferrer\"><code>include_bytes!</code> claims to already return a <code>&amp;&#39;static [u8]</code>.</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1441670686, "post_id": 32445780, "comment_id": 52758047, "body": "@Veedrac great point, let&#39;s see if we can <a href=\"https://github.com/rust-lang/rust/pull/28289\" rel=\"nofollow noreferrer\">clarify the docs</a> ^_^."}], "answers": [{"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 4, "last_activity_date": 1441658811, "creation_date": 1441658811, "answer_id": 32445843, "question_id": 32445780, "link": "https://stackoverflow.com/questions/32445780/why-is-it-useful-to-slice-an-entire-array/32445843#32445843", "title": "Why is it useful to slice an entire array?", "body": "<p>It is idiomatic Rust to write functions that take a slice as input because then that function can be used with any collection that can be sliced.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441660071, "post_id": 32446037, "comment_id": 52755582, "body": "Perhaps add <a href=\"http://is.gd/D8wv0T\" rel=\"nofollow noreferrer\">an example</a> or describe why one might want to do this?"}, {"owner": {"reputation": 67, "user_id": 657607, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1bde28102f758c7bedb5106f4961ddbd?s=128&d=identicon&r=PG", "display_name": "louis058", "link": "https://stackoverflow.com/users/657607/louis058"}, "edited": false, "score": 0, "creation_date": 1441660900, "post_id": 32446037, "comment_id": 52755819, "body": "If this was the case though, wouldn&#39;t <code>&amp;include_bytes!</code> be sufficient?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 67, "user_id": 657607, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1bde28102f758c7bedb5106f4961ddbd?s=128&d=identicon&r=PG", "display_name": "louis058", "link": "https://stackoverflow.com/users/657607/louis058"}, "edited": false, "score": 0, "creation_date": 1441664084, "post_id": 32446037, "comment_id": 52756634, "body": "@louis058: no, <code>&amp;include_bytes!()</code> would just be <code>&amp;&amp;[u8; N]</code>. You\u2019re needing to get it as a regular slice so that the I/O stuff of <code>std::io::{Cursor, Read, Seek}</code> works on it."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 6, "last_activity_date": 1441669207, "last_edit_date": 1441669207, "creation_date": 1441660004, "answer_id": 32446037, "question_id": 32445780, "link": "https://stackoverflow.com/questions/32445780/why-is-it-useful-to-slice-an-entire-array/32446037#32446037", "title": "Why is it useful to slice an entire array?", "body": "<p><code>include_bytes!</code> produces something of type <code>&amp;[u8; N]</code>, so the <code>&amp;\u2026[..]</code> wrapping is to get a <code>&amp;[u8]</code> out of it.</p>\n"}], "owner": {"reputation": 67, "user_id": 657607, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1bde28102f758c7bedb5106f4961ddbd?s=128&d=identicon&r=PG", "display_name": "louis058", "link": "https://stackoverflow.com/users/657607/louis058"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 215, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1441670658, "creation_date": 1441658492, "last_edit_date": 1441670658, "question_id": 32445780, "link": "https://stackoverflow.com/questions/32445780/why-is-it-useful-to-slice-an-entire-array", "title": "Why is it useful to slice an entire array?", "body": "<p>I found some code in <a href=\"http://tomaka.github.io/glium/tutorials/03-colors.html\" rel=\"nofollow\">an in-progress tutorial for Glium</a> that seems to take a slice of an entire array:</p>\n\n<pre><code>use std::io::Cursor;\nlet image = image::load(Cursor::new(&amp;include_bytes!(\"/path/to/image.png\")[..]),\n                        image::PNG).unwrap();\n</code></pre>\n\n<p><code>include_bytes!</code> appears to load the given file into memory and then return a reference to it as a static array. What I'm confused about it why you would then take a reference to a slice of the entire array before passing it to <code>Cursor::new</code>.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 1, "creation_date": 1441647840, "post_id": 32443697, "comment_id": 52751081, "body": "I can&#39;t verify this at the moment but I think the problem is the static in <code>BufReader&lt;&amp;&#39;static File&gt;</code>. You&#39;re asking the compiler to guarantee that the reference will be valid for the lifetime of the program, which is not true in this case, and therefore the compiler tells you that your file object doesn&#39;t live long enough."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 4, "last_activity_date": 1441650756, "last_edit_date": 1441650756, "creation_date": 1441649864, "answer_id": 32444195, "question_id": 32443697, "link": "https://stackoverflow.com/questions/32443697/fighting-with-the-rust-borrow-checker/32444195#32444195", "title": "Fighting with the Rust borrow checker", "body": "<p>Firstly, you shouldn't ask for a <code>BufReader&lt;&amp;'static File&gt;</code>. You can't provide one. Ask instead for a <code>BufReader&lt;&amp;'a File&gt;</code> for some lifetime <code>'a</code>.</p>\n\n<pre><code>fn display_screenful&lt;'a&gt;(rb: &amp;RustBox, fr: BufReader&lt;&amp;'a File&gt;, offset: usize)\n</code></pre>\n\n<p>or, for short,</p>\n\n<pre><code>fn display_screenful(rb: &amp;RustBox, fr: BufReader&lt;&amp;File&gt;, offset: usize)\n</code></pre>\n\n<p>That's not enough either - you then end up moving <code>file_reader</code> into the function. You should borrow instead:</p>\n\n<pre><code>fn display_screenful(rb: &amp;RustBox, fr: &amp;mut BufReader&lt;&amp;File&gt;, offset: usize)\n</code></pre>\n\n<p>and then it compiles.</p>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 456, "favorite_count": 0, "accepted_answer_id": 32444195, "answer_count": 1, "score": 2, "last_activity_date": 1441650756, "creation_date": 1441647493, "question_id": 32443697, "link": "https://stackoverflow.com/questions/32443697/fighting-with-the-rust-borrow-checker", "title": "Fighting with the Rust borrow checker", "body": "<p>This code looks like it would work fine to me, but the rust borrow checker doesn't like it:</p>\n\n<pre><code>extern crate rustbox;\n\nuse std::error::Error;\nuse std::default::Default;\n\nuse rustbox::{Color, RustBox};\nuse rustbox::Key;\n\nuse std::fs::File;\nuse std::env;\nuse std::io::BufReader;\nuse std::io::BufRead;\n\nfn display_screenful(rb: &amp;RustBox, fr: BufReader&lt;&amp;'static File&gt;, offset: usize) {\n    for (rline, idx) in fr.lines().zip(0..).skip(offset).take(rb.height()) {\n        match rline {\n            Ok(line) =&gt; (*rb).print(0, idx, rustbox::RB_NORMAL, Color::White, Color::Black, &amp;line),\n            Err(_)   =&gt; (*rb).print(0, idx, rustbox::RB_NORMAL, Color::White, Color::Black, \"\")\n        }\n    }\n}\n\nfn main() {\n    let rustbox = match RustBox::init(Default::default()) {\n        Ok(v) =&gt; v,\n        Err(e) =&gt; panic!(e),\n    };\n\n    let path = env::args().nth(1).unwrap();\n    let file = match File::open(&amp;path) {\n        Ok(file) =&gt; file,\n        Err(e)   =&gt; panic!(e)\n    };\n    let file_reader = BufReader::new(&amp;file);\n\n    display_screenful(&amp;rustbox, file_reader, 0);\n    rustbox.present();\n\n    loop {\n        match rustbox.poll_event(false) {\n            Ok(rustbox::Event::KeyEvent(key)) =&gt; {\n                match key {\n                    Some(Key::Char('q')) =&gt; { break; }\n                    Some(Key::Char(' ')) =&gt; {\n                        display_screenful(&amp;rustbox, file_reader, rustbox.height());\n                        rustbox.present();\n                    }\n                    _ =&gt; { }\n                }\n            },\n            Err(e) =&gt; panic!(\"{}\", e.description()),\n            _ =&gt; { }\n        }\n    }\n}\n</code></pre>\n\n<p>I guess I could not use a separate function, and use two for loop parts, instead, but that isn't idiomatic Rust, nor is it good coding practice. In fact, I've tried that, but it just tells me that I'm using a moved value. Here are some errors that I'm getting:</p>\n\n<pre><code>   Compiling rusted v0.1.0 (file:///Users/christopherdumas/rusted)\nsrc/main.rs:34:39: 34:43 error: `file` does not live long enough\nsrc/main.rs:34     let file_reader = BufReader::new(&amp;file);\n                                                     ^~~~\nnote: reference must be valid for the static lifetime...\nsrc/main.rs:33:7: 55:2 note: ...but borrowed value is only valid for the block suffix following statement 2 at 33:6\nsrc/main.rs:33     };\nsrc/main.rs:34     let file_reader = BufReader::new(&amp;file);\nsrc/main.rs:35\nsrc/main.rs:36     display_screenful(&amp;rustbox, file_reader, 0);\nsrc/main.rs:37     rustbox.present();\nsrc/main.rs:38\n               ...\nsrc/main.rs:45:53: 45:64 error: use of moved value: `file_reader` [E0382]\nsrc/main.rs:45                         display_screenful(&amp;rustbox, file_reader, rustbox.height());\n                                                                   ^~~~~~~~~~~\nsrc/main.rs:45:53: 45:64 help: run `rustc --explain E0382` to see a detailed explanation\nsrc/main.rs:36:33: 36:44 note: `file_reader` moved here because it has type `std::io::buffered::BufReader&lt;&amp;'static std::fs::File&gt;`, which is non-copyable\nsrc/main.rs:36     display_screenful(&amp;rustbox, file_reader, 0);\n                                               ^~~~~~~~~~~\nerror: aborting due to 2 previous errors\nCould not compile `rusted`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 2, "creation_date": 1441637334, "post_id": 32441184, "comment_id": 52746489, "body": "@anjruu: You also have to implement the <code>x&#47;y&#47;z()</code> functions and make <code>Vector</code> implement <code>Copy</code> and <code>Clone</code> for this to work."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 4, "last_activity_date": 1441637772, "last_edit_date": 1441637772, "creation_date": 1441636722, "answer_id": 32441184, "question_id": 32440967, "link": "https://stackoverflow.com/questions/32440967/unexpected-token-in-rust-macro/32441184#32441184", "title": "Unexpected Token in Rust Macro", "body": "<p>This is working:</p>\n\n<pre><code>macro_rules! component_wise_impls {\n    ($T:ident) =&gt; {\n        impl ComponentWise for $T {\n            fn new(x: f32, y: f32, z: f32) -&gt; $T {\n                let x: $T = $T { vals: [x, y, z] };\n                debug_assert!(!x.has_nans());\n                x\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>You cannot use a <code>ty</code> where an expression is needed.</p>\n\n<p>From this <a href=\"http://smallcultfollowing.com/rust-int-variations/imem-umem/guide-macros.html#interpolation-location\" rel=\"nofollow\">page</a>:</p>\n\n<blockquote>\n  <p>The interpolation <code>$argument_name</code> may appear in any location consistent with its fragment specifier (i.e., if it is specified as <code>ident</code>, it may be used anywhere an identifier is permitted).</p>\n</blockquote>\n\n<p>As llogiq pointed out, you have to implement the <code>x</code>, <code>y</code> and <code>z</code> methods, so the complete code is:</p>\n\n<pre><code>pub trait ComponentWise : Clone + Copy {\n  fn new(x: f32, y: f32, z: f32) -&gt; Self;\n\n  fn x(&amp;self) -&gt; f32;\n  fn y(&amp;self) -&gt; f32;\n  fn z(&amp;self) -&gt; f32;\n\n  fn has_nans(&amp;self) -&gt; bool {\n    f32::is_nan(self.x()) || \n    f32::is_nan(self.y()) || \n    f32::is_nan(self.z())\n  }\n}\n\nmacro_rules! component_wise_impls {\n    ($T:ident) =&gt; {\n        impl ComponentWise for $T {\n            fn new(x: f32, y: f32, z: f32) -&gt; $T {\n                let x: $T = $T { vals: [x, y, z] };\n                debug_assert!(!x.has_nans());\n                x\n            }\n\n            fn x(&amp;self) -&gt; f32 {\n                self.vals[0]\n            }\n\n            fn y(&amp;self) -&gt; f32 {\n                self.vals[1]\n            }\n\n            fn z(&amp;self) -&gt; f32 {\n                self.vals[2]\n            }\n        }\n    }\n}\n\n#[derive(Copy, Clone)]\npub struct Vector {\n  pub vals: [f32; 3]\n}\n\ncomponent_wise_impls!(Vector);\n</code></pre>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1051, "favorite_count": 0, "accepted_answer_id": 32441184, "answer_count": 1, "score": 4, "last_activity_date": 1441637772, "creation_date": 1441635912, "last_edit_date": 1592644375, "question_id": 32440967, "link": "https://stackoverflow.com/questions/32440967/unexpected-token-in-rust-macro", "title": "Unexpected Token in Rust Macro", "body": "<p>I am trying to write a macro that expands to a collection of <code>impls</code> for some custom structs I'm writing. This is what I have:</p>\n<pre><code>pub trait ComponentWise : Clone + Copy {\n  fn new(x: f32, y: f32, z: f32) -&gt; Self;\n  \n  fn x(&amp;self) -&gt; f32;\n  fn y(&amp;self) -&gt; f32;\n  fn z(&amp;self) -&gt; f32;\n\n  fn has_nans(&amp;self) -&gt; bool {\n    f32::is_nan(self.x()) || \n    f32::is_nan(self.y()) || \n    f32::is_nan(self.z())\n  }\n}\n\nmacro_rules! component_wise_impls { \n  ($T:ty) =&gt; {\n    impl ComponentWise for $T {\n      fn new(x: f32, y: f32, z: f32) -&gt; $T {\n        let x: $T = $T { vals: [x, y, z] };\n        debug_assert!(!x.has_nans());\n        x\n      }\n   };\n}\n\npub struct Vector {\n  pub vals: [f32; 3]\n}\n\ncomponent_wise_impls!(Vector);\n</code></pre>\n<p>Sadly, I'm being told:</p>\n<blockquote>\n<p>error: unexpected token: Vector</p>\n<p>let x: $T = $T { vals: [x, y, z] };</p>\n</blockquote>\n<p>I'm a little surprised, since I can do <code>Vector { vals: [x, y, z] }</code>, and I would think that is exactly what <code>$T { vals: [x, y, z] };</code> expands to. Is there a way of writing this <code>new</code> function in a macro?</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 6, "last_activity_date": 1441626686, "creation_date": 1441626686, "answer_id": 32438040, "question_id": 32437664, "link": "https://stackoverflow.com/questions/32437664/e0308-mismatched-types-with-simple-generic-function/32438040#32438040", "title": "E0308 mismatched types with simple generic function", "body": "<p>The <code>Add</code> trait define a type called <code>Output</code>, which is the result type of the addition. That type is the result of <code>x + y</code>, not <code>T</code>.</p>\n\n<pre><code>fn templ_sum&lt;T&gt;(x : T, y : T) -&gt; T::Output\n    where T : std::ops::Add\n{\n    let res : T::Output = x + y;\n    res\n}\n</code></pre>\n"}], "owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 658, "favorite_count": 0, "closed_date": 1441633395, "accepted_answer_id": 32438040, "answer_count": 1, "score": 1, "last_activity_date": 1441636230, "creation_date": 1441625500, "last_edit_date": 1441636230, "question_id": 32437664, "link": "https://stackoverflow.com/questions/32437664/e0308-mismatched-types-with-simple-generic-function", "closed_reason": "Duplicate", "title": "E0308 mismatched types with simple generic function", "body": "<p>I'm new to Rust and I'm trying to write my own simple generic function.</p>\n\n<pre><code>fn templ_sum&lt;T&gt;(x : T, y : T) -&gt; T\n    where T : std::ops::Add\n{\n    let res : T = x + y;\n    res\n}\n\nfn main()\n{\n    let x : f32 = 1.0;\n    let y : f32 = 2.0;\n    let z = templ_sum(x, y);\n    println!(\"{}\", z);\n}\n</code></pre>\n\n<p>But compiling failed with message</p>\n\n<blockquote>\n  <p>error: mismatched types:  expected <code>T</code>,\n      found <code>&lt;T as core::ops::Add&gt;::Output</code> (expected type parameter,\n      found associated type) [E0308] main.rs:12     let res : T = x + y;</p>\n</blockquote>\n\n<p>I am confused a little. Can anyone explain to me what I'm doing wrong?</p>\n\n<p>rustc --version: rustc 1.2.0 (082e47636 2015-08-03)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1441627358, "post_id": 32438207, "comment_id": 52740674, "body": "Of course, you could go the unsafe route like in C (and do memory layout per pedes), but this requires higher order shenanigans and will probably be wildly unportable."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": -1, "last_activity_date": 1441627191, "creation_date": 1441627191, "answer_id": 32438207, "question_id": 32436661, "link": "https://stackoverflow.com/questions/32436661/creating-a-struct-view-over-a-buffer-that-includes-dynamically-sized-arrays/32438207#32438207", "title": "Creating a struct &quot;view&quot; over a buffer that includes dynamically sized arrays", "body": "<p>In Rust a struct can have only one dynamically sized field, the last one, and in general you can manipulate unsized types only via pointers or references.</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"nofollow\">this</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1441629101, "creation_date": 1441629101, "answer_id": 32438847, "question_id": 32436661, "link": "https://stackoverflow.com/questions/32436661/creating-a-struct-view-over-a-buffer-that-includes-dynamically-sized-arrays/32438847#32438847", "title": "Creating a struct &quot;view&quot; over a buffer that includes dynamically sized arrays", "body": "<p>Functionally speaking you do not need a <code>struct</code> that is dynamically built, you can instead do with a view (though the <code>struct</code> could potentially be faster).</p>\n\n<p>It is unclear to me whether you require ownership of the buffer or not, so I will assume borrowing here. The basic idea is exposed below; although of course you would want something a bit more sturdy...</p>\n\n<pre><code>struct JobViewer&lt;'a&gt; {\n    nb_sizes: isize,\n    nb_dests: isize,\n    data_size: isize,\n    data: &amp;'a [u8],\n}\n\nimpl&lt;'a&gt; JobViewer&lt;'a&gt; {\n    fn new(nb_sizes: isize, nb_dests: isize, data_size: isize, data: &amp;'a [u8])\n        -&gt; JobViewer&lt;'a&gt;\n    {\n        JobViewer {\n            nb_sizes: nb_sizes, nb_dests: nb_dests, data_size: data_size, data: data\n        }\n    }\n\n    fn size(&amp;self) -&gt; i64 {\n        unsafe { *mem::transmute(self.raw()) }\n    }\n\n    fn sizes(&amp;self) -&gt; &amp;[i64] {\n        slice::from_raw_parts(\n            unsafe { mem::transmute(self.raw().offset(8)) },\n            self.nb_sizes\n        )\n    }\n\n    fn destinations_count(&amp;self) -&gt; &amp;[i16] {\n        slice::from_raw_parts(\n            unsafe { mem::transmute(self.raw().offset(8 + 8 * self.nb_sizes)) },\n            self.nb_sizes\n        )\n    }\n\n    fn destinations(&amp;'b self) -&gt; AddressViewer&lt;'b&gt; {\n        AddressViewer::new(\n            self.nb_dests,\n            self.data[(8 + 8 * self.nb_sizes + 2 * self.nb_sizes)..]\n        )\n    }\n\n    fn data(&amp;self) -&gt; &amp;[u8] {\n        self.data[\n            (8 + 8 * self.nb_sizes + 2 * self.nb_sizes + ADDRESS_SIZE * self.nb_dests)..\n        ]\n    }\n\n    unsafe fn raw(&amp;self) -&gt; *const u8 {\n        let slice: raw::Slice&lt;u8&gt; = self.data;\n        slice.data\n    }\n}\n</code></pre>\n\n<p>Note: as in your code, a change of endianness is NOT handled.</p>\n"}], "owner": {"reputation": 2441, "user_id": 750875, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/e5fa3880a89e30118d71984f18846dde?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/750875/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 1, "accepted_answer_id": 32438847, "answer_count": 2, "score": 3, "last_activity_date": 1441633581, "creation_date": 1441622329, "last_edit_date": 1441633581, "question_id": 32436661, "link": "https://stackoverflow.com/questions/32436661/creating-a-struct-view-over-a-buffer-that-includes-dynamically-sized-arrays", "title": "Creating a struct &quot;view&quot; over a buffer that includes dynamically sized arrays", "body": "<p>In C I can use something like the following to create a struct \"view\" over data received over the network. I'm new to Rust. What would be the best way to do this in Rust?</p>\n\n<pre><code>#define JOB(_a_, _b_, _c_) \\\nstruct { \\\n    int64 size; \\\n    int64 sizes[_a_]; \\\n    int16 destinationsCount[_a_]; \\\n    struct Address destinations[_b_]; \\\n    unsigned char data[_c_]; \\\n} __packed \n</code></pre>\n\n<p>And use it like:</p>\n\n<pre><code>char * buf = ...;\nJOB(1, 3, 1024) * job = (typeof(job))buf;\nsize_t size = sizeof(typeof(*job));\n</code></pre>\n\n<p>where the 1, 3 and 1024 are determined dynamically (which requires a <a href=\"http://www.rowleydownload.co.uk/arm/documentation/gnu/gcc/Variable-Length.html\" rel=\"nofollow\">GCC extension</a>).</p>\n\n<p>How can I best do this, ideally using the same struct \"view\" approach, in Rust? (The data is actually dramatically more complex than the above, and this is the nicest approach to work with.)</p>\n\n<p>Here's what I've tried:</p>\n\n<pre><code>#[repr(C)]\nstruct Job&lt;sizes, destinationsCount, destinations, data&gt; {\n    size: u64,\n    sizes: sizes,\n    destinationsCount: destinationsCount,\n    destinations: destinations,\n    program: data,\n}\nlet job: Job&lt;[u64;1], [u16;1], [Address;3], [u8;1024]&gt;;\n</code></pre>\n\n<p>But of course as soon as I set the 1, 3 and 1024 dynamically it fails to compile.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1441599133, "creation_date": 1441599133, "answer_id": 32430994, "question_id": 32430659, "link": "https://stackoverflow.com/questions/32430659/providing-blanket-trait-implementations-for-a-custom-trait/32430994#32430994", "title": "Providing Blanket Trait Implementations for a Custom Trait", "body": "<p>At present, macros are the only way to do this. Coherence rules prevent multiple implementations that could overlap, so you can\u2019t use a generic solution.</p>\n"}, {"comments": [{"owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "edited": false, "score": 0, "creation_date": 1441630329, "post_id": 32431031, "comment_id": 52742526, "body": "Interesting, thanks. Are there any plans on providing support for something like this?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "edited": false, "score": 1, "creation_date": 1441636951, "post_id": 32431031, "comment_id": 52746292, "body": "I don&#39;t know the exact plans, but to me, it seems like it would be possible to allow this if the trait is private (not exported from the crate) or if the <code>impl</code> could be marked as private (which is not possible right now)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1441599413, "creation_date": 1441599413, "answer_id": 32431031, "question_id": 32430659, "link": "https://stackoverflow.com/questions/32430659/providing-blanket-trait-implementations-for-a-custom-trait/32431031#32431031", "title": "Providing Blanket Trait Implementations for a Custom Trait", "body": "<p>In Rust, it is possible to define generic <code>impl</code>s, but there are some important restrictions that result from the coherence rules. You'd like an <code>impl</code> that goes like this:</p>\n\n<pre><code>impl&lt;T: Components&gt; Add&lt;T&gt; for T {\n  type Output = T;\n  fn add(self, rhs: T) -&gt; T {\n    T::new(\n      self.x() + rhs.x(), \n      self.y() + rhs.y(), \n      self.z() + rhs.z())\n  }\n}\n</code></pre>\n\n<p>Unfortunately, this does not compile:</p>\n\n<blockquote>\n  <p>error: type parameter <code>T</code> must be used as the type parameter for some local type (e.g. <code>MyStruct&lt;T&gt;</code>); only traits defined in the current crate can be implemented for a type parameter [<a href=\"https://doc.rust-lang.org/error-index.html#E0210\" rel=\"noreferrer\">E0210</a>]</p>\n</blockquote>\n\n<p>Why? Suppose your <code>Components</code> trait were public. Now, a type in another crate could implement the <code>Components</code> trait. That type might also try to implement the <code>Add</code> trait. Whose implementation of <code>Add</code> should win, your crate's or that other crate's? By Rust's current coherence rules, the other crate gets this privilege.</p>\n\n<p>For now, the only option, besides repeating the <code>impl</code>s, is to use a macro. Rust's standard library uses macros in many places to avoid repeating <code>impl</code>s (especially for the primitive types), so you don't have to feel dirty! :P</p>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3071, "favorite_count": 0, "accepted_answer_id": 32431031, "answer_count": 2, "score": 6, "last_activity_date": 1441633448, "creation_date": 1441596331, "last_edit_date": 1441633448, "question_id": 32430659, "link": "https://stackoverflow.com/questions/32430659/providing-blanket-trait-implementations-for-a-custom-trait", "title": "Providing Blanket Trait Implementations for a Custom Trait", "body": "<p>I am implementing a quick geometry crate for practice, and I want to implement two structs, <code>Vector</code> and <code>Normal</code> (this is because standard vectors and normal vectors map through certain transformations differently). I've implemented the following trait:</p>\n\n<pre><code>trait Components {\n  fn new(x: f32, y: f32, z: f32) -&gt; Self;\n  fn x(&amp;self) -&gt; f32;\n  fn y(&amp;self) -&gt; f32;\n  fn z(&amp;self) -&gt; f32;\n}\n</code></pre>\n\n<p>I'd also like to be add two vectors together, as well as two normals, so I have blocks that look like this:</p>\n\n<pre><code>impl Add&lt;Vector&gt; for Vector {\n  type Output = Vector;\n  fn add(self, rhs: Vector) -&gt; Vector {\n    Vector { vals: [\n      self.x() + rhs.x(), \n      self.y() + rhs.y(), \n      self.z() + rhs.z()] }\n  }\n}\n</code></pre>\n\n<p>And almost the exact same <code>impl</code> for <code>Normal</code>s. What I really want is to provide a default <code>Add impl</code> for every struct that implements <code>Components</code>, since typically, they all will add the same way (e.g. a third struct called <code>Point</code> will do the same thing). Is there a way of doing this besides writing out three identical implementations for <code>Point</code>, <code>Vector</code>, and <code>Normal</code>? Something that might look like this:</p>\n\n<pre><code>impl Add&lt;Components&gt; for Components {\n  type Output = Components;\n  fn add(self, rhs: Components) -&gt; Components {\n    Components::new(\n      self.x() + rhs.x(), \n      self.y() + rhs.y(), \n      self.z() + rhs.z())\n  }\n}\n</code></pre>\n\n<p>Where \"<code>Components</code>\" would automatically get replaced by the appropriate type. I suppose I could do it in a macro, but that seems a little hacky to me.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 3312, "user_id": 342327, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8fd5badb01bbc9389476e9394ab6607e?s=128&d=identicon&r=PG", "display_name": "snim2", "link": "https://stackoverflow.com/users/342327/snim2"}, "edited": false, "score": 3, "creation_date": 1528463824, "post_id": 32429385, "comment_id": 88530464, "body": "I think in later versions of Rust <code>no_run</code> no longer works, but the book doesn&#39;t seem to be clear about what replaced it."}, {"owner": {"reputation": 659, "user_id": 2485498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9c4f1d3e472a26fb6f2302122f57e9dd?s=128&d=identicon&r=PG", "display_name": "Otto", "link": "https://stackoverflow.com/users/2485498/otto"}, "edited": false, "score": 0, "creation_date": 1614001699, "post_id": 32429385, "comment_id": 117242683, "body": "<code>no_run</code> works again, fwiw"}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 33, "last_activity_date": 1588900175, "last_edit_date": 1588900175, "creation_date": 1441583165, "answer_id": 32429385, "question_id": 32429369, "link": "https://stackoverflow.com/questions/32429369/how-to-opt-out-of-running-a-doc-test/32429385#32429385", "title": "How to opt out of running a doc test?", "body": "<p>This is documented in <a href=\"https://doc.rust-lang.org/rustdoc/\" rel=\"noreferrer\"><em>The rustdoc book</em></a>, specifically the <a href=\"https://doc.rust-lang.org/rustdoc/documentation-tests.html#attributes\" rel=\"noreferrer\">chapter about attributes</a>.</p>\n\n<p>Your opening codeblock delimiter should look like:</p>\n\n<pre><code>/// ```no_run\n</code></pre>\n\n<p>From the book:</p>\n\n<blockquote>\n<pre><code>/// ```no_run\n/// loop {\n///     println!(\"Hello, world\");\n/// }\n/// ```\n</code></pre>\n  \n  <p>The <code>no_run</code> attribute will compile your code, but not run it. This is\n  important for examples such as \"Here's how to retrieve a web page,\"\n  which you would want to ensure compiles, but might be run in a test\n  environment that has no network access.</p>\n</blockquote>\n\n<p>To omit build completely use <code>ignore</code> instead of <code>no_run</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 2086, "user_id": 1644618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0b1b9b9e169f5e077d819493330a7c8?s=128&d=identicon&r=PG", "display_name": "yerlilbilgin", "link": "https://stackoverflow.com/users/1644618/yerlilbilgin"}, "edited": false, "score": 0, "creation_date": 1618217125, "post_id": 66759106, "comment_id": 118525806, "body": "This answer must be accepted."}], "tags": [], "owner": {"reputation": 8841, "user_id": 756233, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/ySRUp.jpg?s=128&g=1", "display_name": "Ray Hulha", "link": "https://stackoverflow.com/users/756233/ray-hulha"}, "is_accepted": false, "score": 2, "last_activity_date": 1616485704, "creation_date": 1616485704, "answer_id": 66759106, "question_id": 32429369, "link": "https://stackoverflow.com/questions/32429369/how-to-opt-out-of-running-a-doc-test/66759106#66759106", "title": "How to opt out of running a doc test?", "body": "<p>Put this in Cargo.toml:</p>\n<pre><code>[lib]\ndoctest = false\n</code></pre>\n<p>Found it here: <a href=\"https://doc.rust-lang.org/cargo/commands/cargo-test.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/cargo/commands/cargo-test.html</a></p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4941, "favorite_count": 2, "accepted_answer_id": 32429385, "answer_count": 2, "score": 32, "last_activity_date": 1616485704, "creation_date": 1441582927, "last_edit_date": 1496329019, "question_id": 32429369, "link": "https://stackoverflow.com/questions/32429369/how-to-opt-out-of-running-a-doc-test", "title": "How to opt out of running a doc test?", "body": "<p>I'm writing a Rust library and I want to provide examples in my documentation that</p>\n\n<ol>\n<li>compile as part of running <code>cargo test</code></li>\n<li>do <em>not</em> run. </li>\n</ol>\n\n<p>Is this possible?</p>\n\n<p>I'm writing a database client library, and the examples make use of a hypothetical, non-existing database server. As such, the examples always fail when run, but it's important that the examples be valid syntactically. Hence my requirements above.</p>\n\n<p>If there's no way to do what I want, then how does one opt out of having <code>cargo test</code> run a specific doc test? I.e., have <code>cargo run</code> compile-and-run some doc tests but completely ignore some others?</p>\n"}, {"tags": ["rust", "memory-alignment"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441573148, "post_id": 32428153, "comment_id": 52721627, "body": "Do you mean you want to have a struct in the heap with a specific alignment? I&#39;m not aware of alignment for stack-allocated types, but the unstable <a href=\"http://doc.rust-lang.org/std/rt/heap/fn.allocate.html\" rel=\"nofollow noreferrer\"><code>allocate</code></a> does have an alignment argument."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441573540, "post_id": 32428153, "comment_id": 52721733, "body": "Also, you mention packing as decreasing alignment; do you mean to say that you need to have a <i>member</i> of a struct always at a specific alignment? You may want to bolster your question with some example code, ASCII-art memory diagrams, or more prose describing why you need to do this so that all the people smarter than I can help you. ^_^"}, {"owner": {"reputation": 3282, "user_id": 3102, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/debc1608fc160fb51ed0b07c9ad7739c?s=128&d=identicon&r=PG", "display_name": "Johannes Hoff", "link": "https://stackoverflow.com/users/3102/johannes-hoff"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441583796, "post_id": 32428153, "comment_id": 52723956, "body": "Thanks for the feedback, @Shepmaster! I meant aligned in general, but yes, my specific use case is for the stack. I&#39;ll update my question to be clearer."}], "answers": [{"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1483004636, "post_id": 32429078, "comment_id": 69955749, "body": "Wouldn&#39;t Foo&#39;s alignment continue to be <code>std::mem::align_of&lt;A&gt;()</code>, but with a potentially increased <code>std::mem::size_of::&lt;Foo&gt;</code> reflecting padding inserted <b>after</b> B, to align <code>_align</code>?  How is <code>Foo</code>&#39;s alignment affected at all by appending <code>_align: [T; 0]</code> to the <code>struct</code>&#39;struct members?  Did you mean prepend?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1483229026, "post_id": 32429078, "comment_id": 70028716, "body": "The field can only be aligned statically if the start of the struct has a known alignment, because it always has a fixed offset from the start. Thus, this trick actually works no matter where the field is in the struct order."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1483260487, "post_id": 32429078, "comment_id": 70032551, "body": "I didn&#39;t know that--thank you.  So instead of requiring <code>(&amp;struct + offset ) % desired_alignment == 0</code>, the compiler ensures `&amp;struct % desired_alignment == 0 &amp;&amp; offset % desired_alignment == 0?  That seems awfully wasteful, but I&#39;m sure there must be a reason--can you point me to any resources on this to learn more?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 1, "creation_date": 1483499458, "post_id": 32429078, "comment_id": 70117562, "body": "The second is the only sensible way to ensure the first that I can think of. Not having the second would mean using a variable offset, which would have to be stored somewhere, and would likely waste more space. Also note that &quot;incredibly wasteful&quot; is a few bytes in a few structs."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 11, "last_activity_date": 1510812975, "last_edit_date": 1510812975, "creation_date": 1441580234, "answer_id": 32429078, "question_id": 32428153, "link": "https://stackoverflow.com/questions/32428153/how-can-i-align-a-struct-to-a-specified-byte-boundary/32429078#32429078", "title": "How can I align a struct to a specified byte boundary?", "body": "<p>There's no way to specify alignment directly at the moment, but it is definitely desirable and useful. It is covered by <a href=\"https://github.com/rust-lang/rust/issues/33626\" rel=\"nofollow noreferrer\">issue #33626</a>, and its <a href=\"https://github.com/rust-lang/rfcs/issues/325\" rel=\"nofollow noreferrer\">RFC issue</a>.</p>\n\n<p>A current work-around to force alignment of some struct <code>Foo</code> to be as large as the alignment of some type <code>T</code> is to include a field of type <code>[T; 0]</code> which has size zero and so won't otherwise affect the behaviour of the struct, e.g. <code>struct Foo { data: A, more_data: B, _align: [T; 0] }</code>. </p>\n\n<p>On nightly, this can be combined with SIMD types to get a specific high alignment, since they have alignment equal to their size (well, the next power of two), e.g.</p>\n\n<pre><code>#[repr(simd)]\nstruct SixteenBytes(u64, u64);\n\nstruct Foo {\n    data: A,\n    more_data: B,\n    _align: [SixteenBytes; 0]\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "is_accepted": true, "score": 14, "last_activity_date": 1530818270, "creation_date": 1530818270, "answer_id": 51198446, "question_id": 32428153, "link": "https://stackoverflow.com/questions/32428153/how-can-i-align-a-struct-to-a-specified-byte-boundary/51198446#51198446", "title": "How can I align a struct to a specified byte boundary?", "body": "<p>huon's answer is good, but it's out of date.</p>\n\n<p>As of Rust 1.25.0, <a href=\"https://github.com/rust-lang/rust/pull/47006\" rel=\"noreferrer\">you may now align a type to <code>N</code> bytes using the attribute <code>#[repr(align(N))]</code></a>. It is documented under <a href=\"https://doc.rust-lang.org/reference/type-layout.html#the-align-representation\" rel=\"noreferrer\">the reference's Type Layout section</a>. Note that the alignment must be a power of 2, you may not mix <code>align</code> and <code>packed</code> representations, and aligning a type may add extra padding to the type. <a href=\"https://play.rust-lang.org/?gist=a8f3adbedb562a6ad68e7ad68adcd6ea&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"noreferrer\">Here's an example of how to use the feature</a>:</p>\n\n<pre><code>#[repr(align(64))]\nstruct S(u8);\n\nfn main() {\n    println!(\"size of S: {}\", std::mem::size_of::&lt;S&gt;());\n    println!(\"align of S: {}\", std::mem::align_of::&lt;S&gt;());\n}\n</code></pre>\n"}], "owner": {"reputation": 3282, "user_id": 3102, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/debc1608fc160fb51ed0b07c9ad7739c?s=128&d=identicon&r=PG", "display_name": "Johannes Hoff", "link": "https://stackoverflow.com/users/3102/johannes-hoff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5370, "favorite_count": 1, "accepted_answer_id": 51198446, "answer_count": 2, "score": 10, "last_activity_date": 1610563944, "creation_date": 1441572443, "last_edit_date": 1610563944, "question_id": 32428153, "link": "https://stackoverflow.com/questions/32428153/how-can-i-align-a-struct-to-a-specified-byte-boundary", "title": "How can I align a struct to a specified byte boundary?", "body": "<p>I need to align a struct to a 16 byte boundary in Rust. It seems possible to give hints about alignment through the <a href=\"https://doc.rust-lang.org/reference/type-layout.html#representations\" rel=\"nofollow noreferrer\"><code>repr</code> attribute</a>, but it doesn't support this exact use case.</p>\n<p>A functional test of what I'm trying to achieve is a type <code>Foo</code> such that</p>\n<pre><code>assert_eq!(mem::align_of::&lt;Foo&gt;(), 16);\n</code></pre>\n<p>or alternatively, a struct <code>Bar</code> with a field <code>baz</code> such that</p>\n<pre><code>println!(&quot;{:p}&quot;, Bar::new().baz);\n</code></pre>\n<p>always prints a number divisible by 16.</p>\n<p>Is this currently possible in Rust? Are there any work-arounds?</p>\n"}, {"tags": ["tcp", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441545480, "post_id": 32423804, "comment_id": 52713302, "body": "<i>there&#39;s no reason to believe socket was closed server-side</i> \u2014 can you prove this one way or the other? Reading zero bytes on a closed socket is a normal case, and it sounds like what you have."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441545612, "post_id": 32423804, "comment_id": 52713351, "body": "Please try to reduce your test case and produce an <a href=\"/help/mcve\">MCVE</a>. As it is, we have no idea what <code>clone_stream</code> does. Additionally, this <i>could</i> just be a bug in the SSL wrapper, so try removing the conditional and pin it down to one or the other."}], "answers": [{"tags": [], "owner": {"reputation": 2883, "user_id": 151652, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abc432bb0450574a25b15ff23d399d5a?s=128&d=identicon&r=PG", "display_name": "Farcaller", "link": "https://stackoverflow.com/users/151652/farcaller"}, "is_accepted": true, "score": 1, "last_activity_date": 1441570225, "creation_date": 1441570225, "answer_id": 32427800, "question_id": 32423804, "link": "https://stackoverflow.com/questions/32423804/bufreaderlines-over-tcpstream-stops-iteration/32427800#32427800", "title": "BufReader::lines() over TcpStream stops iteration", "body": "<p>Surprisingly, this was a \"default timeout\" on client I guess (socket was moving into <code>CLOSE_WAIT</code> state).</p>\n\n<p>I fixed it by first adding:</p>\n\n<pre><code>stream.set_read_timeout(Some(Duration::new(60*5, 0)));\nstream.set_write_timeout(Some(Duration::new(60*5, 0)));\n</code></pre>\n\n<p>that made the iterator fail with <code>ErrorKind::WouldBlock</code> on timeout, at which point I added a code to send a ping packet over the wire, the next iteration worked exactly as expected.</p>\n"}], "owner": {"reputation": 2883, "user_id": 151652, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abc432bb0450574a25b15ff23d399d5a?s=128&d=identicon&r=PG", "display_name": "Farcaller", "link": "https://stackoverflow.com/users/151652/farcaller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 223, "favorite_count": 0, "accepted_answer_id": 32427800, "answer_count": 1, "score": 4, "last_activity_date": 1441716548, "creation_date": 1441544124, "last_edit_date": 1441716548, "question_id": 32423804, "link": "https://stackoverflow.com/questions/32423804/bufreaderlines-over-tcpstream-stops-iteration", "title": "BufReader::lines() over TcpStream stops iteration", "body": "<p>I have a reasonably simple code using <code>TcpStream</code> and <code>SslStream</code> around it, reading the socket line by line with <code>BufReader</code>. Sometime the iterator just stops returning any data with <code>Ok(0)</code>:</p>\n\n<pre><code>let mut stream = TcpStream::connect((self.config.host.as_ref(), self.config.port)).unwrap();\nif self.config.ssl {\n    let context = ssl::SslContext::new(ssl::SslMethod::Tlsv1_2).unwrap();\n    let mut stream = ssl::SslStream::connect(&amp;context, stream).unwrap();\n    self.stream = Some(ssl::MaybeSslStream::Ssl(stream));\n} else {\n    self.stream = Some(ssl::MaybeSslStream::Normal(stream));\n}\n\n...\n\nlet read_stream = clone_stream(&amp;self.stream);\n\nlet line_reader = BufReader::new(read_stream);\n\nfor line in line_reader.lines() {\n    match line {\n        Ok(line) =&gt; {\n            ...\n        }\n        Err(e) =&gt; panic!(\"line read failed: {}\", e),\n    }\n}\nprintln!(\"lines out, {:?}\", self.stream);\n</code></pre>\n\n<p>The loop just stops randomly, as far as I can see and there's no reason to believe socket was closed server-side. Calling <code>self.stream.as_mut().unwrap().read_to_end(&amp;mut buf)</code> after loop ended returns <code>Ok(0)</code>.</p>\n\n<p>Any advice on how this is expected to be handled? I don't get any <code>Err</code> so I can assume socket is still alive but then I can't read anything from it. What is the current state of the socket and how should I proceed?</p>\n\n<p>PS: I'm providing the implementation of <code>clone_stream</code> as the reference, as advied by commenter.</p>\n\n<pre><code>fn clone_stream(stream: &amp;Option&lt;ssl::MaybeSslStream&lt;TcpStream&gt;&gt;) -&gt; ssl::MaybeSslStream&lt;TcpStream&gt; {\n    if let &amp;Some(ref s) = stream {\n        match s {\n            &amp;ssl::MaybeSslStream::Ssl(ref s) =&gt; ssl::MaybeSslStream::Ssl(s.try_clone().unwrap()),\n            &amp;ssl::MaybeSslStream::Normal(ref s) =&gt; ssl::MaybeSslStream::Normal(s.try_clone().unwrap()),\n        }\n    } else {\n        panic!();\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "edited": false, "score": 0, "creation_date": 1441507195, "post_id": 32419421, "comment_id": 52704979, "body": "I realize that in the first case I&#39;m returning a reference to something created inside the function, but if I make getPath() a member function of SomeDatabase, the compiler is smart enough to hold the &amp;Path until the instance of SomeDatabase goes out of scope. I&#39;m asking if there&#39;s a way to tell the compiler that the lifetime of the reference belongs to the function that is calling the getPath() (in the case where getPath() is an associated function). It&#39;s lifetime code should be until the variable that holds the reference goes out of scope in open()."}, {"owner": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "edited": false, "score": 0, "creation_date": 1441507656, "post_id": 32419421, "comment_id": 52705057, "body": "Also have to add that if I leave off as_path(), I get a mismatched types error: &quot;expected &#39;&amp;_&#39;, found &#39;std::path::PathBuf&#39; (expected &amp;-ptr, found struct &#39;std::path::PathBuf&#39;)"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "edited": false, "score": 1, "creation_date": 1441524210, "post_id": 32419421, "comment_id": 52707729, "body": "@AustinWagner The variable <code>path</code> is defined in the body of the <code>getPath()</code> method, its lifetime ends at the end of the scope of this function body, unless you return it. There is no way to avoid this rule. In your case there is no alternative to returning the <code>PathBuf</code> for <code>getPath()</code> function."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "edited": false, "score": 0, "creation_date": 1441542587, "post_id": 32419421, "comment_id": 52712425, "body": "@AustinWagner <i>if I make getPath a member function [...] the compiler hold[s] the &amp;Path until the instance [...] goes out of scope</i> \u2014 This is <a href=\"http://is.gd/T7ZfJu\" rel=\"nofollow noreferrer\">simply not true</a>. You have the same problem in that the <b>local variable</b> is dropped when the function returns because nothing owns it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441542747, "post_id": 32419421, "comment_id": 52712469, "body": "<i><code>SqliteConnection::open</code> takes a value that implements</i> \u2014 note that <a href=\"http://jgallagher.github.io/rusqlite/rusqlite/struct.SqliteConnection.html#method.open\" rel=\"nofollow noreferrer\">it actually takes</a> <b>a reference to</b> a type that implements <code>AsRef</code>. I think this is likely why the sized errors are occurring. This seems like a strange decision on the part of the library..."}, {"owner": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441543957, "post_id": 32419421, "comment_id": 52712821, "body": "@Shepmaster I must have done something wrong when I tested changing getPath to a member function, but it appears you are right. My assumption that it is possible to have the compiler lift the variable into the scope of the caller when returning a reference was obviously wrong. I&#39;m marking this as the accepted answer since the answer and the comments contain enough information to make it useful to others with the same misunderstandings."}], "tags": [], "owner": {"reputation": 1421, "user_id": 412478, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e799a79441c7543be48562403411cd13?s=128&d=identicon&r=PG", "display_name": "Havvy", "link": "https://stackoverflow.com/users/412478/havvy"}, "is_accepted": true, "score": 11, "last_activity_date": 1441541854, "last_edit_date": 1441541854, "creation_date": 1441506075, "answer_id": 32419421, "question_id": 32419252, "link": "https://stackoverflow.com/questions/32419252/how-do-i-return-a-path-from-a-function/32419421#32419421", "title": "How do I return a &amp;Path from a function?", "body": "<p>In your first case, you are creating a value and then trying to return a reference to it. But since you aren't storing that value anywhere, it gets destroyed after the function ends. If it was allowed, it'd be a use-after-free bug.</p>\n\n<p>The reason it suggested returning a <code>&amp;'static Path</code> is because the function isn't parameterized over any lifetimes, so the only lifetime you can be sure outlives anything that wants to use the return value would be <code>'static</code>.</p>\n\n<p>You are correct that you need to return a <code>PathBuf</code> directly instead of an <code>&amp;Path</code>.</p>\n\n<p>I'm not quite sure why you are getting the <code>[u8]</code> sized errors.</p>\n\n<p>You don't need to call \"as_path()\" at all. <code>SqliteConnection::open</code> takes a value that implements <code>AsRef&lt;Path&gt;</code> (<code>AsRef</code> is sort of like <code>Into</code>), and <code>PathBuf</code> does implement that trait.</p>\n"}], "owner": {"reputation": 920, "user_id": 370556, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c332e104cd6ab8057996907338310a12?s=128&d=identicon&r=PG", "display_name": "Austin Wagner", "link": "https://stackoverflow.com/users/370556/austin-wagner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2085, "favorite_count": 1, "accepted_answer_id": 32419421, "answer_count": 1, "score": 14, "last_activity_date": 1441542087, "creation_date": 1441503851, "last_edit_date": 1441542087, "question_id": 32419252, "link": "https://stackoverflow.com/questions/32419252/how-do-i-return-a-path-from-a-function", "title": "How do I return a &amp;Path from a function?", "body": "<p>I'm trying to understand how to write proper Rust code, but I think I may be overestimating the power of the compiler's ability to understand the lifetimes of my objects. This is the code as I expected it to work:</p>\n\n<pre><code>use std::path::Path;\nuse std::env;\nuse rusqlite::SqliteConnection;\n\nstruct SomeDatabase {\n    conn: SqliteConnection,\n}\n\nimpl SomeDatabase {\n    fn getPath() -&gt; &amp;Path {\n        let path = env::home_dir().unwrap();\n        path.push(\"foo.sqlite3\");\n        path.as_path()\n    }\n\n    fn open() -&gt; SomeDatabase {\n        let path = SomeDatabase::getPath()\n        SomeDatabase { conn: SqliteConnection::open(path).unwrap() }\n    }\n}\n\nfn main() {\n    let db = SomeDatabase::open();\n}\n</code></pre>\n\n<p>When I try to compile this, I get an error about a missing lifetime specifier on <code>&amp;Path</code>. I know if this took a reference parameter from the caller, it would take on the same lifetime as that reference has. Here though what I was expecting is that the lifetime would be attached to the variable I am assigning the result to.</p>\n\n<p>I know lifetimes can be added explicitly, but I don't know how to apply them in this case. The compiler suggests trying the <code>'static</code> lifetime, but that doesn't make sense here as far as I know because the source of this function's return value isn't static.</p>\n\n<p>Now, just to try to see what happened if I tried to compile the rest of the code, I changed the return type from <code>&amp;Path</code> to <code>PathBuf</code> and called <code>as_path()</code> in <code>open()</code>. This caused the compiler to output these errors:</p>\n\n<pre><code>src\\main.rs:22:30: 22:52 error: the trait `core::marker::Sized` is not implemented for the type `[u8]` [E0277]\nsrc\\main.rs:22         SomeDatabase { conn: SqliteConnection::open(path).unwrap() }\n                                            ^~~~~~~~~~~~~~~~~~~~~~\nsrc\\main.rs:22:30: 22:52 note: `[u8]` does not have a constant size known at compile-time\nsrc\\main.rs:22         SomeDatabase { conn: SqliteConnection::open(path).unwrap() }\n                                            ^~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p><code>SqliteConnection::open()</code> returns a <code>Result&lt;SqliteConnection, SqliteError&gt;</code> and the only field inside <code>SqliteConnection</code> is a <code>RefCell</code>, so I don't understand where this error about a byte array is coming from.</p>\n\n<p>So, why aren't things working as I expect and what is the most Rusty way to write this code? </p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441492291, "post_id": 32418256, "comment_id": 52702789, "body": "Please produce an <a href=\"/help/mcve\">MCVE</a> that reproduces your problem. Ideally, make it run on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a>. Include that code <i>in your question</i>, else it risks being closed. Emphasis on the <b>M</b>; it&#39;s not appreciated to post hundreds of lines of code."}, {"owner": {"reputation": 1548, "user_id": 892698, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c35f590e9178794d7f4c4f07192d3772?s=128&d=identicon&r=PG", "display_name": "Endel", "link": "https://stackoverflow.com/users/892698/endel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441496040, "post_id": 32418256, "comment_id": 52703481, "body": "Thanks @Shepmaster, I&#39;ve added a playground link in the question, is it ok?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441541587, "post_id": 32418256, "comment_id": 52712122, "body": "@Endel: much better thanks."}], "answers": [{"tags": [], "owner": {"reputation": 1548, "user_id": 892698, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c35f590e9178794d7f4c4f07192d3772?s=128&d=identicon&r=PG", "display_name": "Endel", "link": "https://stackoverflow.com/users/892698/endel"}, "is_accepted": true, "score": 0, "last_activity_date": 1441539729, "creation_date": 1441539729, "answer_id": 32423161, "question_id": 32418256, "link": "https://stackoverflow.com/questions/32418256/troubles-with-ownership-and-borrowing-and-sharing-instance-across-multiple-thre/32423161#32423161", "title": "Troubles with ownership and borrowing, and sharing instance across multiple threads", "body": "<p>I've asked about it on #rust IRC channel, and tomaka <a href=\"http://is.gd/vfIWGj\" rel=\"nofollow\">answered me</a>.</p>\n\n<p>Basically:</p>\n\n<ul>\n<li>Changed <code>&amp;Box&lt;Task&gt;</code> to <code>Box&lt;Task&gt;</code></li>\n<li><code>get_task_by_name</code> now removes an element from the <code>Vec</code></li>\n<li>the Vec is now inside a Mutex so that you can modify it</li>\n</ul>\n"}], "owner": {"reputation": 1548, "user_id": 892698, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c35f590e9178794d7f4c4f07192d3772?s=128&d=identicon&r=PG", "display_name": "Endel", "link": "https://stackoverflow.com/users/892698/endel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 32423161, "answer_count": 1, "score": 0, "last_activity_date": 1441539729, "creation_date": 1441491822, "last_edit_date": 1441493776, "question_id": 32418256, "link": "https://stackoverflow.com/questions/32418256/troubles-with-ownership-and-borrowing-and-sharing-instance-across-multiple-thre", "title": "Troubles with ownership and borrowing, and sharing instance across multiple threads", "body": "<p>I'm trying to learn Rust through a toy project called <a href=\"https://github.com/endel/workers\" rel=\"nofollow\">workers</a>. I am trying to run <code>task.perform()</code> <a href=\"https://github.com/endel/workers/blob/c8a3f5ffe7307acc5be4330eb4caca3dcb64fe33/src/lib.rs#L50-L53\" rel=\"nofollow\">inside a thread pool</a>.</p>\n\n<p>The problem:</p>\n\n<pre><code>    Compiling workers v0.1.0 (file:///Users/endel/Projects/rust/workers)\nsrc/lib.rs:45:21: 45:32 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements\nsrc/lib.rs:45     let next = self.next_task();\n                                  ^~~~~~~~~~~\nsrc/lib.rs:45:16: 45:20 note: first, the lifetime cannot outlive the expression at 45:15...\nsrc/lib.rs:45     let next = self.next_task();\n                             ^~~~\nsrc/lib.rs:45:16: 45:20 note: ...so that auto-reference is valid at the time of borrow\nsrc/lib.rs:45     let next = self.next_task();\n                             ^~~~\nsrc/lib.rs:45:16: 45:32 note: but, the lifetime must be valid for the method call at 45:15...\nsrc/lib.rs:45     let next = self.next_task();\n                             ^~~~~~~~~~~~~~~~\nsrc/lib.rs:45:16: 45:20 note: ...so that method receiver is valid for the method call\nsrc/lib.rs:45     let next = self.next_task();\n                             ^~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>I've asked for help in the #rust IRC channel and they suggested to use <code>Box&lt;Task&gt;</code> (owned) instead of <code>&amp;Box&lt;Task&gt;</code> (borrowed), in order to copy the task during the <code>move || {}</code> statement, I suppose.</p>\n\n<p>Is this a viable solution? There is any other? I've tried changing the <code>Worker</code> impl methods from <code>&amp;self</code> to <code>self</code>, but other problems start to pop out, and I can't get an owned <code>Box&lt;Task&gt;</code> for my <code>work</code> method.</p>\n\n<p>Here is a simplified version in the <a href=\"http://is.gd/Cr4qja\" rel=\"nofollow\">playgound</a> demonstrating the problem.</p>\n"}, {"tags": ["types", "reference", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1441486494, "post_id": 32416302, "comment_id": 52701533, "body": "<code>&amp;vec[..]</code> should be written as just <code>&amp;vec</code> nowadays."}], "answers": [{"comments": [{"owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "edited": false, "score": 0, "creation_date": 1441486834, "post_id": 32417309, "comment_id": 52701614, "body": "Right, that would make this code work, but I do not want to have to create the Vec before creating the <code>Test</code> struct. I should have been more explicit about that. Imagine the <code>Test</code> struct as a socket that is created at the beginning of the process and the <code>vec</code> as ephemeral data that is being passed through it."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "edited": false, "score": 0, "creation_date": 1441489824, "post_id": 32417309, "comment_id": 52702280, "body": "@crhino I added another solution."}, {"owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "edited": false, "score": 0, "creation_date": 1441494825, "post_id": 32417309, "comment_id": 52703263, "body": "That works if I use <code>Vec&lt;u8&gt;</code>, but I would also like to support the use of <code>&amp;[u8]</code> as well. I still unsure as to why the slice needs to have a longer lifetime then the <code>test</code> variable. My understanding is that the slice need only outlive the call to <code>test.test(&amp;slice)</code>. That is what I am trying to accomplish at any rate."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "edited": false, "score": 0, "creation_date": 1441496315, "post_id": 32417309, "comment_id": 52703523, "body": "@crhino The problem is that the inferred Test type get the slice type as T together with its lifetime. This is because the slice is a borrow. You can find more info here: <a href=\"http://stackoverflow.com/questions/26371255/why-do-slices-in-a-structure-require-a-lifetime-but-not-vectors\" title=\"why do slices in a structure require a lifetime but not vectors\">stackoverflow.com/questions/26371255/&hellip;</a>"}, {"owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "edited": false, "score": 0, "creation_date": 1441497376, "post_id": 32417309, "comment_id": 52703701, "body": "Ahh, I see now. Thanks for being patient with me!"}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 2, "last_activity_date": 1441496155, "last_edit_date": 1441496155, "creation_date": 1441484271, "answer_id": 32417309, "question_id": 32416302, "link": "https://stackoverflow.com/questions/32416302/phantomdata-and-mutable-reference-give-a-does-not-live-long-enough-error/32417309#32417309", "title": "PhantomData and mutable reference give a &quot;does not live long enough&quot; error", "body": "<p>This is the corrected code:</p>\n\n<pre><code>fn main() {\n    let vec = vec![1u8];\n    let mut test = Test {\n        data: PhantomData,\n    };\n    let slice = &amp;vec[..];\n    let _res = test.test(&amp;slice);\n}\n</code></pre>\n\n<p>I moved the <code>vec</code> creation first.\nThen the <code>test</code> variable must be mutable, because the <code>test</code> method requires so.</p>\n\n<p><strong>Edit after the comment</strong></p>\n\n<p>The problem with your code is that the generic type <code>T</code> used in the <code>Test</code> type is inferred when you call the <code>test</code> method the first time. In this case that type is a slice with its own lifetime. In fact a slice is a borrow so it has also its own lifetime.\nIn your example that lifetime is shorter than the <code>test</code> variable lifetime so you have the problem.</p>\n\n<p>A possible solution is to use the <code>Vec</code> as type this way:</p>\n\n<pre><code>let mut test = Test {\n    data: PhantomData,\n};\nlet vec = vec![1u8];\nlet _res = test.test(&amp;vec);\n</code></pre>\n"}], "owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 32417309, "answer_count": 1, "score": 0, "last_activity_date": 1441496155, "creation_date": 1441477177, "last_edit_date": 1441496001, "question_id": 32416302, "link": "https://stackoverflow.com/questions/32416302/phantomdata-and-mutable-reference-give-a-does-not-live-long-enough-error", "title": "PhantomData and mutable reference give a &quot;does not live long enough&quot; error", "body": "<p>I am trying to create a type that is sending and receiving data over the network and serializing/deserializing the bytes into a declared type. For this, I have been using the <code>PhantomData</code> type in <code>std</code>. However, I recently came on a situation where I wanted to make my method take a <code>&amp;mut self</code> parameter and rustc would not compile it. In the code below, everything works when there is no mutable reference, but by adding the mutable reference I get <code>&lt;anon&gt;:24:18: 24:21 error: vec does not live long enough</code>.</p>\n\n<p>I also tried using a <code>PhantomData&lt;*const T&gt;</code> type so as not to imply ownership, but that did not work as well. Getting rid of the PhantomData from the struct does allow the code to compile however.</p>\n\n<pre><code>use std::io;\nuse std::marker::PhantomData;\nstruct Test&lt;T&gt; {\n    data: PhantomData&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Test&lt;T&gt; {\n    fn test(&amp;mut self, _t: &amp;T) -&gt; Result&lt;(), io::Error&gt; {\n      Ok(())\n    }\n}\n\n//impl&lt;T&gt; Test&lt;T&gt; {\n//    fn test(&amp;self, _t: &amp;T) -&gt; Result&lt;(), io::Error&gt; {\n//      Ok(())\n//    }\n//}\n\nfn main() {\n    let test = Test {\n        data: PhantomData,\n    };\n    let vec = vec![1u8];\n    let slice = &amp;vec[..];\n    let _res = test.test(&amp;slice);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/okj55K\" rel=\"nofollow\">http://is.gd/okj55K</a></p>\n\n<p>I do not want to move the creation of the <code>vec</code> before the <code>test</code>. Imagine <code>test</code> as a socket bound at the beginning of a process and <code>vec</code> as some ephemeral data that is being passed through it.\nAny insight would be much appreciated!</p>\n\n<p><strong>Edit:</strong>\nI would like to know why this works with <code>&amp;self</code> and not with <code>&amp;mut self</code>. I am looking to understand exactly what is occurring here so that I can decide what my next steps should be. Getting this specific code working is great but secondary to an informative explanation of what the <code>rustc</code> compiler is thinking.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1441477271, "post_id": 32416225, "comment_id": 52699130, "body": "And how I should <code>impl</code> AddPosition and SubPosition then?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1441478088, "post_id": 32416225, "comment_id": 52699341, "body": "See edit, which includes an example of struct implementing AddPosition and SubPosition."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 1, "creation_date": 1441478252, "post_id": 32416225, "comment_id": 52699387, "body": "(Adjacent question for another Rustacean: how is the potential name clash <code>x</code> as a field vs. <code>x()</code> as a method handled? I expected a compiler error here.)"}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1441478402, "post_id": 32416225, "comment_id": 52699433, "body": "BTW, what does <code>Add&lt;Output=T&gt;</code> Output means?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 1, "creation_date": 1441478681, "post_id": 32416225, "comment_id": 52699505, "body": "<a href=\"http://doc.rust-lang.org/nightly/std/ops/trait.Add.html\" rel=\"nofollow noreferrer\"><code>Add</code></a> has a type parameter <code>RHS</code> defaulted to <code>Self</code> (so I didn&#39;t have to explicitly specify it) and an <a href=\"https://doc.rust-lang.org/book/associated-types.html\" rel=\"nofollow noreferrer\">associated type</a> <code>Output</code>, which specifies here the result of method <code>add()</code>. So if my type X is <code>Add&lt;RHS=Y, Output=Z&gt;</code>, I will be able to call <code>(some X) + (some Y)</code>, which desugars as <code>(some X).add((some Y))</code> and get some <code>Z</code>."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 4, "last_activity_date": 1441478063, "last_edit_date": 1441478063, "creation_date": 1441476758, "answer_id": 32416225, "question_id": 32416186, "link": "https://stackoverflow.com/questions/32416186/how-can-i-reuse-code-for-similar-trait-implementations/32416225#32416225", "title": "How can I reuse code for similar trait implementations?", "body": "<p>The best option is probably to factor out the fact that your objects can have a position:</p>\n\n<pre><code>trait Position&lt;T: Display&gt; {\n    fn x(&amp;self) -&gt; T;\n    fn y(&amp;self) -&gt; T;\n}\n\n// trait AAA: BBB --&gt; means AAA must implement BBB\ntrait AddPosition&lt;T: Add&lt;Output=T&gt; + Display&gt;: Position&lt;T&gt; {\n    fn add(&amp;self){\n        println!(\"{:}\", self.x()+self.x()); // ?\n    }\n}\n\ntrait SubPosition&lt;T: Sub&lt;Output=T&gt; + Display&gt;: Position&lt;T&gt; {\n    fn sub(&amp;self){\n        println!(\"{:}\", self.x()-self.y()); // ?\n    }\n}\n\nstruct MyPosition {\n    x: i32,\n    y: i32,\n}\n\nimpl Position&lt;i32&gt; for MyPosition {\n    fn x(&amp;self) -&gt; i32 { self.x }\n    fn y(&amp;self) -&gt; i32 { self.y }\n}\nimpl SubPosition&lt;i32&gt; for MyPosition {}\nimpl AddPosition&lt;i32&gt; for MyPosition {}\n</code></pre>\n\n<p><a href=\"http://is.gd/jcZNbm\" rel=\"nofollow\">(Playground)</a></p>\n\n<p>However, I fail to understand how your code really makes sense (<code>?</code> annotated lines). If this is just for the sake of the minimal example, this is totally fine; however, if this is meant for any serious code, you may want to look into the <code>Add</code> and <code>Sub</code> trait, which will allow you to benefit from operator overloading <code>+</code> and <code>-</code>. Even if you don't use those traits directly, they may inspire you for meaningful signatures of a potential <code>add(&amp;self, rhs: &amp;P) -&gt; P</code> function (where <code>P: Position&lt;T&gt;</code>).</p>\n"}], "owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 230, "favorite_count": 0, "accepted_answer_id": 32416225, "answer_count": 1, "score": 2, "last_activity_date": 1441493368, "creation_date": 1441476447, "last_edit_date": 1441493368, "question_id": 32416186, "link": "https://stackoverflow.com/questions/32416186/how-can-i-reuse-code-for-similar-trait-implementations", "title": "How can I reuse code for similar trait implementations?", "body": "<p>I have a few traits with default implementations that require the same methods, which happen to be field getters.</p>\n\n<pre><code>trait AddPosition&lt;T: Display&gt;{\n    fn x(&amp;self) -&gt; T;\n    fn y(&amp;self) -&gt; T;\n    fn add(&amp;self){\n        println!(\"{:}\", self.x()+self.x());\n    }\n}\n\ntrait SubPosition&lt;T: Display&gt;{\n    fn x(&amp;self) -&gt; T;\n    fn y(&amp;self) -&gt; T;\n    fn sub(&amp;self){\n        println!(\"{:}\", self.x()-self.y());\n    }\n}\n</code></pre>\n\n<p>Instead of manually repeating the same code for each trait implementation, can I have something like this?</p>\n\n<pre><code>impl AddPosition&lt;i32&gt;, SubPosition&lt;i32&gt; for Point{\n    fn x(&amp;self) -&gt; i32{ self.x }\n    fn y(&amp;self) -&gt; i32{ self.y }\n}\n</code></pre>\n"}, {"tags": ["for-loop", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1441470250, "post_id": 32414767, "comment_id": 52697160, "body": "That&#39;s surprising behavior. I wish <code>rustc</code> would at least emit a warning that the a negative value is &quot;wrapped&quot; around."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441471400, "post_id": 32414767, "comment_id": 52697476, "body": "@MatthieuM. Oh, thanks for reminding me! It actually <i>is</i> fixed, see my update. ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1441471372, "last_edit_date": 1441471372, "creation_date": 1441466962, "answer_id": 32414767, "question_id": 32414704, "link": "https://stackoverflow.com/questions/32414704/why-does-a-range-that-starts-at-a-negative-number-not-iterate/32414767#32414767", "title": "Why does a range that starts at a negative number not iterate?", "body": "<p>Type inference is causing both of the numbers in your range to be <code>usize</code>, which cannot represent negative numbers. Thus, the range is from <a href=\"http://doc.rust-lang.org/std/usize/constant.MAX.html\" rel=\"noreferrer\"><code>usize::MAX</code></a> to <code>n</code>, which never has any members.</p>\n\n<p>To find this out, I used a trick to print out the types of things:</p>\n\n<pre><code>let () = -1 .. x.len();\n</code></pre>\n\n<p>Which has this error:</p>\n\n<pre><code>error: mismatched types:\n expected `core::ops::Range&lt;usize&gt;`,\n    found `()`\n(expected struct `core::ops::Range`,\n    found ()) [E0308]\nlet () = -1 .. x.len();\n    ^~\n</code></pre>\n\n<p>Diving into the details, <a href=\"http://doc.rust-lang.org/collections/primitive.slice.html#method.len\" rel=\"noreferrer\"><code>slice::len</code></a> returns a <code>usize</code>. Your <code>-1</code> is an untyped integral value, which will conform to fit whatever context it needs (if there's nothing for it to conform to, it will fall back to an <code>i32</code>).</p>\n\n<p>In this case, it's as if you actually typed <code>(-1 as usize)..x.len()</code>.</p>\n\n<p>The good news is that you probably don't want to start at <code>-1</code> anyway. Slices are zero-indexed:</p>\n\n<pre><code>fn myfunc(x: &amp;[f64]) {\n    let n = x.len();\n    println!(\"    n: {:?}\", n);\n    for i in 0..n {\n        println!(\"    i: {}\", i);\n    }\n}\n</code></pre>\n\n<p><strong>Extra good news</strong> is that this annoyance was <a href=\"https://github.com/rust-lang/rust/pull/27026\" rel=\"noreferrer\">fixed in the newest versions of Rust</a>. It will cause a warning and then eventually an error:</p>\n\n<pre><code>warning: unary negation of unsigned integers will be feature gated in the future\n     for i in -1 .. n {\n              ^~\n</code></pre>\n\n<p>Also note that you should never accept a <code>&amp;Vec&lt;T&gt;</code> as a parameter. Always use a <code>&amp;[T]</code> as it's more flexible and you lose nothing.</p>\n"}], "owner": {"reputation": 1882, "user_id": 1844448, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/78441d7566dfc449add0a5be58c98ef9?s=128&d=identicon&r=PG", "display_name": "Holger", "link": "https://stackoverflow.com/users/1844448/holger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1914, "favorite_count": 0, "accepted_answer_id": 32414767, "answer_count": 1, "score": 4, "last_activity_date": 1441471372, "creation_date": 1441466559, "last_edit_date": 1441467013, "question_id": 32414704, "link": "https://stackoverflow.com/questions/32414704/why-does-a-range-that-starts-at-a-negative-number-not-iterate", "title": "Why does a range that starts at a negative number not iterate?", "body": "<p>I have just started to learn <code>Rust</code>. During my first steps with this language, I found a strange behaviour, when an iteration is performed inside <code>main</code> or in another function as in following example:</p>\n\n<pre><code>fn myfunc(x: &amp;Vec&lt;f64&gt;) {\n    let n = x.len();\n    println!(\"    n: {:?}\", n);\n    for i in -1 .. n {\n        println!(\"    i: {}\", i);\n    }\n}\n\nfn main() {\n    for j in -1 .. 6 {\n        println!(\"j: {}\", j);\n    }\n\n    let field = vec![1.; 6];\n    myfunc(&amp;field);\n}\n</code></pre>\n\n<p>While the loop in <code>main</code> is correctly displayed, nothing is printed for the loop inside <code>myfunc</code> and I get following output:</p>\n\n<pre><code>j: -1\nj: 0\nj: 1\nj: 2\nj: 3\nj: 4\nj: 5\n    n: 6\n</code></pre>\n\n<p>What is the cause of this behaviour?</p>\n"}, {"tags": ["memory-management", "heap", "rust", "ownership"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441466251, "post_id": 32414567, "comment_id": 52696071, "body": "Your question seems to be closer to &quot;How can I use the functionality of <code>box</code> in stable code&quot;. Perhaps you should update your title."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1441469497, "post_id": 32414567, "comment_id": 52696956, "body": "Just a point of &quot;semantics&quot;: <code>box</code> <i>is</i> proper Rust, it&#39;s just not stable Rust for now :)"}], "answers": [{"comments": [{"owner": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 0, "creation_date": 1441467282, "post_id": 32414657, "comment_id": 52696387, "body": "Yes, <code>Box::new</code> creates variable on heap. But to my knowledge, calling <code>Box::new</code> creates variable on the stack, and function call will copy it to heap. <code>box &lt;expr&gt;</code> syntax should create right on heap AFAIK. That might be a problem since I want to create 512 KB buffers."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 0, "creation_date": 1441467455, "post_id": 32414657, "comment_id": 52696447, "body": "@semtexzv can you point to some documentation or disassembly that corroborates that? The optimizers underlying Rust (provided by LLVM) are pretty strong."}, {"owner": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 0, "creation_date": 1441467641, "post_id": 32414657, "comment_id": 52696494, "body": "<code>let mut xx = Box::new([0u8;5000000]);</code> causes stack overflow. It should allocate 5 megs of data. But I&#39;m probably understanding this wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 0, "creation_date": 1441467835, "post_id": 32414657, "comment_id": 52696540, "body": "@semtexzv not if you <a href=\"http://is.gd/uHPkP0\" rel=\"nofollow noreferrer\">compile in release mode</a>, which enables optimizations."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 0, "creation_date": 1441468144, "post_id": 32414657, "comment_id": 52696612, "body": "@semtexzv Also, if you were aware of <code>Box::new</code> but didn&#39;t want to use it, you should have included those restrictions in your question."}, {"owner": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "edited": false, "score": 1, "creation_date": 1441468397, "post_id": 32414657, "comment_id": 52696673, "body": "Problem is not using <code>Box::new</code> problem is allocating  an array at runtime directly on heap."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1591712764, "last_edit_date": 1591712764, "creation_date": 1441466313, "answer_id": 32414657, "question_id": 32414567, "link": "https://stackoverflow.com/questions/32414567/allocating-a-buffer-on-the-heap-at-runtime/32414657#32414657", "title": "Allocating a buffer on the heap at runtime", "body": "<blockquote>\n  <p>I tried using <code>box</code> but it seems that it is experimental and I can't use it with release branch. Any ideas how to implement this with proper Rust semantics?</p>\n</blockquote>\n\n<p>This is covered in <em><a href=\"https://doc.rust-lang.org/stable/book/first-edition/\" rel=\"nofollow noreferrer\">The Rust Programming Language</a></em>, specifically the section \"<a href=\"https://doc.rust-lang.org/stable/book/first-edition/the-stack-and-the-heap.html)\" rel=\"nofollow noreferrer\">The Stack and the Heap</a>\".</p>\n\n<p>Use <a href=\"http://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"nofollow noreferrer\"><code>Box::new</code></a>:</p>\n\n<pre><code>fn main() {\n    let answer: Box&lt;u8&gt; = Box::new(42);\n} \n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/41710952/155423\">Allocate array onto heap with size known at runtime</a></li>\n<li><a href=\"https://stackoverflow.com/q/53691012/155423\">Is there any way to allocate a standard Rust array directly on the heap, skipping the stack entirely?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30242770/155423\">How to allocate arrays on the heap in Rust 1.0?</a></li>\n<li><a href=\"https://stackoverflow.com/q/25805174/155423\">Creating a fixed-size array on heap in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/34399277/155423\">How do I allocate an array at runtime in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28249292/155423\">Thread &#39;&lt;main&gt;&#39; has overflowed its stack when allocating a large array using Box</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441475355, "post_id": 32415222, "comment_id": 52698639, "body": "<i>fill it with objects yourself</i> \u2014 is it worth mentioning zero-sized types and destructors and all the other complexities that explain why <code>Vec</code> is better to use? Any maybe use <code>as *mut i32</code> instead of <code>transmute</code>? And maybe use <code>mem::size_of</code> instead of hard coding <code>4</code>? And for my own curiosity, why align the memory to a 4K chunk? +1 for &quot;just use <code>Vec</code>&quot; ^_^."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441476121, "post_id": 32415222, "comment_id": 52698826, "body": "@Shepmaster: I hesitated in enumerating plenty of potential issues, but I was afraid it would just sound like rambling..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441489651, "post_id": 32415222, "comment_id": 52702246, "body": "One day, you can be a professional rambler, such as myself! ;-)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1591712661, "last_edit_date": 1591712661, "creation_date": 1441470031, "answer_id": 32415222, "question_id": 32414567, "link": "https://stackoverflow.com/questions/32414567/allocating-a-buffer-on-the-heap-at-runtime/32415222#32415222", "title": "Allocating a buffer on the heap at runtime", "body": "<p>Rust is a low-level language; thus you can allocate raw memory and then fill it with objects yourself. Of course, it will require <code>unsafe</code> code, as all fiddling with raw memory does.</p>\n\n<p>Here is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cf7bcba8cb9c68a2058b36905c960197\" rel=\"nofollow noreferrer\">a complete example</a>:</p>\n\n<pre><code>use std::{\n    alloc::{self, Layout},\n    mem, ptr,\n};\n\nfn main() {\n    unsafe {\n        let layout = Layout::from_size_align(512 * 1024, 4 * 1024).expect(\"Invalid layout\");\n        let mut raw: *mut i32 = mem::transmute(alloc::alloc(layout));\n\n        for i in 0..(512 * 1024 / 4) {\n            ptr::write(raw, i as i32);\n            raw = raw.offset(1)\n        }\n    }\n}\n</code></pre>\n\n<p>Of course, in real code, I would just use <code>Vec</code> to safely manage the memory for me. It's just simpler!</p>\n"}, {"tags": [], "owner": {"reputation": 329, "user_id": 1995676, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/311ece173edc8e74ff1f1b8905b7147e?s=128&d=identicon&r=PG", "display_name": "David", "link": "https://stackoverflow.com/users/1995676/david"}, "is_accepted": false, "score": 4, "last_activity_date": 1591712478, "last_edit_date": 1591712478, "creation_date": 1591712163, "answer_id": 62284727, "question_id": 32414567, "link": "https://stackoverflow.com/questions/32414567/allocating-a-buffer-on-the-heap-at-runtime/62284727#62284727", "title": "Allocating a buffer on the heap at runtime", "body": "<p>This will create a pre-allocated mutable 500MB byte buffer of zeros stored on the heap with no need for unsafe rust:</p>\n\n<p>// Correct</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut buffer = vec![0_u8; 536870912];\n</code></pre>\n\n<p>Note that the following code below is not a good idea and will most likely result in a stack overflow because the buffer is created on the stack before being boxed and moved to the heap.</p>\n\n<p>// Incorrect - stack used</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut bytes: Box&lt;[u8]&gt; = Box::new([0_u8; 536870912])\n</code></pre>\n\n<p>// Incorrect - slow</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut bytes = Vec::with_capacity(536870912);\nfor _ in 0..bytes.capacity() {\n    bytes.push(0_u8);\n}\n</code></pre>\n"}], "owner": {"reputation": 109, "user_id": 3153405, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/d1fd66eb9d749636ee8d6eaaa31c4a56?s=128&d=identicon&r=PG&f=1", "display_name": "semtexzv", "link": "https://stackoverflow.com/users/3153405/semtexzv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1925, "favorite_count": 3, "accepted_answer_id": 32415222, "answer_count": 3, "score": 1, "last_activity_date": 1591712764, "creation_date": 1441465699, "last_edit_date": 1441469109, "question_id": 32414567, "link": "https://stackoverflow.com/questions/32414567/allocating-a-buffer-on-the-heap-at-runtime", "title": "Allocating a buffer on the heap at runtime", "body": "<p>I am learning Rust by writing simple binary decoder.</p>\n\n<p>I'm using a <code>BufferedReader</code> with the <a href=\"https://github.com/BurntSushi/byteorder\" rel=\"nofollow\">byteorder crate</a> to read numbers, but I'm having problems with reading byte buffers.</p>\n\n<p>I want to read byte data into buffer allocated at runtime.\nThen I want to pass ownership of this buffer to a struct. When struct is no longer in use, the buffer should be deallocated.</p>\n\n<p>There seems to be no way to allocate array with size determined at runtime on heap except some <code>Vec::with_capacity()</code> hacks. Any ideas how to implement this with proper Rust semantics? </p>\n"}, {"tags": ["rust", "llvm", "jit"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442174246, "post_id": 32543218, "comment_id": 52963793, "body": "Ah, that&#39;s fine then. I thought there might have been a forum or an IRC room where more background detail would be \u2014 you never know what a future searcher might want to know when resolving a similar problem ^_^."}], "tags": [], "owner": {"reputation": 623, "user_id": 2052557, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/faa146c922ff066fff18c7114209305a?s=128&d=identicon&r=PG", "display_name": "Ja\u016dhien Piatlicki", "link": "https://stackoverflow.com/users/2052557/ja%c5%adhien-piatlicki"}, "is_accepted": true, "score": 1, "last_activity_date": 1442153873, "last_edit_date": 1442153873, "creation_date": 1442088460, "answer_id": 32543218, "question_id": 32413217, "link": "https://stackoverflow.com/questions/32413217/how-to-resolve-current-process-symbols-in-llvm-mcjit-based-jit/32543218#32543218", "title": "How to resolve current process symbols in LLVM MCJIT based JIT?", "body": "<p>Thanks to Lang Hames, he has answered my question in other place. I cite the answer here for the case if somebody will look at the same problem as me:</p>\n\n<p>In answer to your question: <code>SectionMemoryManager::getSymbolAddress</code> eventually (through the <code>RTDyldMemoryManager</code> base class) makes a call to <code>llvm::sys::DynamicLibrary::SearchForAddressOfSymbol</code>, which searches all previously loaded dynamic libraries for the symbol. You can call to <code>llvm::sys::DynamicLibrary::LoadLibraryPermanently(nullptr)</code> as part of your JIT initialisation (before any calls to <code>getSymbolAddress</code>) to import the program's symbols into <code>DynamicLibrary</code>'s symbol tables.</p>\n\n<p>If you really want to expose all functions in your program to the JIT'd code this is a good way to go. If you only want to expose a limited set of runtime functions you can put them in a shared library and just load that.</p>\n"}], "owner": {"reputation": 623, "user_id": 2052557, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/faa146c922ff066fff18c7114209305a?s=128&d=identicon&r=PG", "display_name": "Ja\u016dhien Piatlicki", "link": "https://stackoverflow.com/users/2052557/ja%c5%adhien-piatlicki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 0, "accepted_answer_id": 32543218, "answer_count": 1, "score": 3, "last_activity_date": 1442153873, "creation_date": 1441457216, "question_id": 32413217, "link": "https://stackoverflow.com/questions/32413217/how-to-resolve-current-process-symbols-in-llvm-mcjit-based-jit", "title": "How to resolve current process symbols in LLVM MCJIT based JIT?", "body": "<p>I'm creating a simple MCJIT based JIT (implementing <a href=\"https://github.com/jauhien/iron-kaleidoscope\" rel=\"nofollow\">Kaleidoscope tutorial in Rust</a> to be more precise). I'm using SectionMemoryManager::getSymbolAddress for symbol resolution. It sees symbols from libraries (e.g. sin function), but fails to resolve functions from my program (global, visible with nm, marked there by T). Is this the expected behavior? Or should it be some error in my code?</p>\n\n<p>If this is the expected behavior, how should I properly resolve symbols from the current process? I'm adding symbols from the process with LLVMAddSymbol now, so resolution starts to work. Is this the right solution?</p>\n\n<p>For those, who'll read my code. The problem with symbols is not related with the name mangling, as when I tried to make SectionMemoryManager::getSymbolAddress work, I used no_mangle directive, so they were named properly.</p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1441460239, "post_id": 32412625, "comment_id": 52694457, "body": "<i>an Err object</i> \u2014 being pedantic, <code>Err</code> is a <i>variant</i> of the <code>Result</code> enum."}, {"owner": {"reputation": 20629, "user_id": 211277, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/f7fa2926171acb96785c655df3543edd?s=128&d=identicon&r=PG", "display_name": "tolitius", "link": "https://stackoverflow.com/users/211277/tolitius"}, "edited": false, "score": 2, "creation_date": 1510704686, "post_id": 32412625, "comment_id": 81546157, "body": "<code>try!</code> is a <a href=\"https://rustbyexample.com/hello/print/print_display/testcase_list.html\" rel=\"nofollow noreferrer\">no longer recommended</a> way of doing it. use <code>?</code> instead: i.e. <code>write!(f, &quot;(&quot;)?;</code>"}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 3, "last_activity_date": 1441460205, "last_edit_date": 1441460205, "creation_date": 1441453106, "answer_id": 32412625, "question_id": 32412299, "link": "https://stackoverflow.com/questions/32412299/what-is-the-correct-way-to-propagate-errors/32412625#32412625", "title": "What is the correct way to propagate errors?", "body": "<p>For every function call you check if the return is an <code>Err</code> object or not. If it's an <code>Err</code> object you return from the function, if not you continue.\nThere's a convenient macro in the standard library, called <a href=\"https://doc.rust-lang.org/stable/std/macro.try!.html\" rel=\"nofollow\">try!</a> which does exactly this.</p>\n\n<p>So your code would become something like this:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    try!(write!(f, \"(\"));\n    try!(some_helper_function(self.t1, self.ctx, f));\n    try!(write!(f, \" \"));\n    try!(some_helper_function(self.t2, self.ctx, f));\n    try!(write!(f, \")\"))\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1441461118, "last_edit_date": 1495542579, "creation_date": 1441461118, "answer_id": 32413823, "question_id": 32412299, "link": "https://stackoverflow.com/questions/32412299/what-is-the-correct-way-to-propagate-errors/32413823#32413823", "title": "What is the correct way to propagate errors?", "body": "<p><a href=\"https://stackoverflow.com/a/32412625/155423\">Andrea P's answer</a> is spot on for how to fix this. I wanted to add on to this part though:</p>\n\n<blockquote>\n  <p>All of these functions return <code>fmt::Result</code>, but this will be ignored.</p>\n</blockquote>\n\n<p>Note that the compiler tries really hard to help you here:</p>\n\n<pre><code>fn important() -&gt; Result&lt;u8, ()&gt; {\n    Err(())\n}\n\nfn main() {\n    important();\n}\n</code></pre>\n\n<p>Will produce this warning by default:</p>\n\n<pre><code>warning: unused result which must be used, #[warn(unused_must_use)] on by default\n     important();\n     ^~~~~~~~~~~~\n</code></pre>\n\n<p>You can even make it so that all warnings become errors by adding this to your crate:</p>\n\n<pre><code>#![deny(unused_must_use)]\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 4593779, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fbac94eba6b55d111f6587ba58d07e45?s=128&d=identicon&r=PG", "display_name": "Pavel Sergeev", "link": "https://stackoverflow.com/users/4593779/pavel-sergeev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 287, "favorite_count": 0, "accepted_answer_id": 32412625, "answer_count": 2, "score": 1, "last_activity_date": 1441461118, "creation_date": 1441450865, "last_edit_date": 1441460166, "question_id": 32412299, "link": "https://stackoverflow.com/questions/32412299/what-is-the-correct-way-to-propagate-errors", "title": "What is the correct way to propagate errors?", "body": "<p>I'm trying to learn Rust, but I am faced with a difficulty when I implement the <code>fmt::Display</code> trait for one of my types. I want to do something like this:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    write!(f, \"(\");\n    some_helper_function(self.t1, self.ctx, f);\n    write!(f, \" \");\n    some_helper_function(self.t2, self.ctx, f);\n    write!(f, \")\")\n}\n</code></pre>\n\n<p>All of these functions return <code>fmt::Result</code>, but this will be ignored. What is correct way for propagating the error result upward?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441464500, "post_id": 32411645, "comment_id": 52695616, "body": "Note that there&#39;s no guarantee that <code>malloc</code> will use the same underlying allocator as the standard library, which uses jemalloc in most cases. So long as you never attempt to &quot;cross the streams&quot;, having multiple allocators isn&#39;t likely to cause any issues in practice, but is good to know about."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 2, "last_activity_date": 1441446201, "creation_date": 1441446201, "answer_id": 32411645, "question_id": 32411484, "link": "https://stackoverflow.com/questions/32411484/how-to-dynamically-allocate-a-fixed-runtime-sized-array/32411645#32411645", "title": "How to dynamically allocate a fixed runtime-sized array?", "body": "<p>Either use a nightly Rust or you will have to use <code>libc::funcs::c95::stdlib::malloc(size: size_t)</code> from the <a href=\"http://doc.rust-lang.org/libc/libc/funcs/c95/stdlib/fn.malloc.html\" rel=\"nofollow\">libc crate</a>. You'll have to <a href=\"http://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow\">transmute</a> the result of course.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6043, "user_id": 3998522, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/042b8c418b7f1129fa54862a935377b8?s=128&d=identicon&r=PG&f=1", "display_name": "xiver77", "link": "https://stackoverflow.com/users/3998522/xiver77"}, "edited": false, "score": 0, "creation_date": 1441461296, "post_id": 32413065, "comment_id": 52694723, "body": "@xiver77 <code>Vec</code> is used as a defacto allocator though. Simply create a <code>Vec&lt;u8&gt;</code> <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.with_capacity\" rel=\"nofollow noreferrer\">with the desired size</a> and then you can treat it as a slice or convert it to raw pointers."}, {"owner": {"reputation": 6043, "user_id": 3998522, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/042b8c418b7f1129fa54862a935377b8?s=128&d=identicon&r=PG&f=1", "display_name": "xiver77", "link": "https://stackoverflow.com/users/3998522/xiver77"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441462619, "post_id": 32413065, "comment_id": 52695077, "body": "@Shepmaster While I wonder what makes you call it &quot;de facto&quot;, if you&#39;re going get the raw pointer from the storage and break the type system to do interesting things, why not just start with a raw pointer and raw memory. It&#39;s just my personal preference, though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6043, "user_id": 3998522, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/042b8c418b7f1129fa54862a935377b8?s=128&d=identicon&r=PG&f=1", "display_name": "xiver77", "link": "https://stackoverflow.com/users/3998522/xiver77"}, "edited": false, "score": 1, "creation_date": 1441464398, "post_id": 32413065, "comment_id": 52695582, "body": "@xiver77 <i>de facto</i> means &quot;in fact, or in effect, whether by right or not&quot;; if people are using <code>Vec</code> as an allocator, I think it&#39;s appropriate to call it such. It&#39;s a stable way to allocate a chunk of memory that is built in to the standard library."}], "tags": [], "owner": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "is_accepted": false, "score": 3, "last_activity_date": 1441456255, "creation_date": 1441456255, "answer_id": 32413065, "question_id": 32411484, "link": "https://stackoverflow.com/questions/32411484/how-to-dynamically-allocate-a-fixed-runtime-sized-array/32413065#32413065", "title": "How to dynamically allocate a fixed runtime-sized array?", "body": "<p>If you want to do it in high-level Rust (RAII, memory safety, bounds checking), you should allocate by creating a <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html\" rel=\"nofollow\"><code>Vec</code></a>. You can optionally use <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.into_boxed_slice\" rel=\"nofollow\"><code>into_boxed_slice</code></a> to disable resizing the container. See the book's <a href=\"https://doc.rust-lang.org/nightly/book/ffi.html\" rel=\"nofollow\">FFI example</a> (specifically the <code>uncompress</code> function) for an example of using <code>Vec</code> as an allocator.</p>\n"}], "owner": {"reputation": 6043, "user_id": 3998522, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/042b8c418b7f1129fa54862a935377b8?s=128&d=identicon&r=PG&f=1", "display_name": "xiver77", "link": "https://stackoverflow.com/users/3998522/xiver77"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1268, "favorite_count": 1, "accepted_answer_id": 32411645, "answer_count": 2, "score": 1, "last_activity_date": 1441460312, "creation_date": 1441445135, "last_edit_date": 1441460312, "question_id": 32411484, "link": "https://stackoverflow.com/questions/32411484/how-to-dynamically-allocate-a-fixed-runtime-sized-array", "title": "How to dynamically allocate a fixed runtime-sized array?", "body": "<p>I'm essentially looking for <code>malloc</code>/<code>free</code> in Rust.</p>\n\n<p>I found <code>alloc::heap</code>, but when I try to use it I get the following error:</p>\n\n<pre><code>main.rs:1:1: 1:19 error: unstable feature                     \nmain.rs:1 ![feature(alloc)]\nnote: this feature may not be used in the stable release channel                                                                 \n</code></pre>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "edited": false, "score": 0, "creation_date": 1441439348, "post_id": 32408411, "comment_id": 52689053, "body": "Thanks for the answer, yes this would be a solution, however implementing this changes the signature of <code>give</code> function. To be honest what I want is not using generics on trait <code>Trait</code> as this leads to using generics in other traits that depend on it which I want to avoid."}, {"owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "edited": false, "score": 0, "creation_date": 1441456257, "post_id": 32408411, "comment_id": 52693332, "body": "Finally, In my case using your suggestion in combination with declaring the generic of trait <code>Trait</code> as <code>Self</code> when I define other depending traits solved the issue.   An example of defining other trait depending on <code>Trait</code>:  <code>trait NewTrait: Trait&lt;Self&gt; {...}</code>   However I&#39;ll wait for another solution, just in case someone else  can not use <code>Self</code> in trait definitions."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "edited": false, "score": 0, "creation_date": 1441480650, "post_id": 32408411, "comment_id": 52700053, "body": "I&#39;ve added another solution, using associated types."}, {"owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "edited": false, "score": 0, "creation_date": 1441919340, "post_id": 32408411, "comment_id": 52882298, "body": "Yeah that is a nice work around, the only issue is that if you are going to implement <code>NewTrait</code> and <code>Trait</code> for a type that doesn&#39;t use generics bounded by <code>Limit</code> then you have to use <code>PhantomData</code> in order to keep the associated type generic. This <code>PhantomData</code> case gets similar to using <code>Trait&lt;T&gt;</code>, at least in appearance. Anyway, it seems that there is no other way, so thank you one more time for your answer."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1441480634, "last_edit_date": 1441480634, "creation_date": 1441413747, "answer_id": 32408411, "question_id": 32407882, "link": "https://stackoverflow.com/questions/32407882/matching-a-generic-parameter-to-another-generic-parameter-of-an-impl/32408411#32408411", "title": "Matching a generic parameter to another generic parameter of an impl", "body": "<p>As you wrote it, your implementation of <code>Trait</code> must implement <code>give</code> in a way that works for any type that the caller wishes. On the other hand, your implementation of <code>give</code> for <code>Struct&lt;T&gt;</code> only works for a <em>specific</em> type, <code>T</code>.</p>\n\n<p>What about making the trait itself generic, rather than the method?</p>\n\n<pre><code>pub trait Trait&lt;T&gt; where T: Limit {\n    fn give(&amp;self, x: T) -&gt; T;\n}\n\nimpl&lt;T&gt; Trait&lt;T&gt; for Struct&lt;T&gt; where T: Limit {   \n    fn give(&amp;self, x: T) -&gt; T \n    {\n       self.field // does not compile, you can't give away one of your fields\n                  // unless you mem::replace() it with another value\n    }\n} \n</code></pre>\n\n<p>This way, an implementation of <code>Trait&lt;T&gt;</code> only works for a specific <code>T</code> type that is chosen by the <em>implementor</em>, not the caller.</p>\n\n<p>Another option is to use associated types instead:</p>\n\n<pre><code>pub trait Trait {\n    type T: Limit;\n\n    fn give(&amp;self, x: Self::T) -&gt; Self::T;\n}\n\nimpl&lt;T&gt; Trait for Struct&lt;T&gt; where T: Limit {\n    type T = T;\n\n    fn give(&amp;self, x: T) -&gt; T \n    {\n       self.field\n    }\n} \n</code></pre>\n\n<p>Here, <code>Trait</code> is no longer generic, but <code>Struct</code> remains generic, and each instance of <code>Struct</code> implements the same <code>Trait</code> trait.</p>\n"}], "owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 32408411, "answer_count": 1, "score": 2, "last_activity_date": 1441480634, "creation_date": 1441409026, "last_edit_date": 1495542576, "question_id": 32407882, "link": "https://stackoverflow.com/questions/32407882/matching-a-generic-parameter-to-another-generic-parameter-of-an-impl", "title": "Matching a generic parameter to another generic parameter of an impl", "body": "<p>I have this code (<a href=\"https://play.rust-lang.org/?gist=1939f1947a6d662c8161\" rel=\"nofollow noreferrer\">in playground</a>):</p>\n\n<pre><code>trait Limit {}\n\npub trait Trait\n{\n    fn give&lt;T&gt;(&amp;self, x: T) -&gt; T\n    where T: Limit;\n}\n\nstruct Struct&lt;T: Limit&gt; {field: T}\n\nimpl&lt;T&gt; Trait for Struct&lt;T&gt;\n    where T: Limit\n{   \n    fn give&lt;S&gt;(&amp;self, x: S) -&gt; S \n    where S: Limit\n    {\n       self.field\n       //interacts with x parameter and gives an \"S: Limit\" result       \n    }\n} \n</code></pre>\n\n<p>What I want to do is to keep the signature of <code>give</code> function of the trait <code>Trait</code> and at the same time to implement the trait <code>Trait</code> for a the generic struct <code>Struct</code>.</p>\n\n<p>but I get this error</p>\n\n<pre><code>&lt;anon&gt;:17:8: 17:14 error: mismatched types:\n expected `S`,\n    found `T`\n(expected type parameter,\n    found a different type parameter) [E0308]\n&lt;anon&gt;:17        self.field       \n                 ^~~~~~\n</code></pre>\n\n<p>I thought to use what I saw in this <a href=\"https://stackoverflow.com/questions/29345708/matching-a-generic-parameter-to-an-associated-type-in-an-impl\">question</a> which matches an associated parameter with a generic parameter so I changed: </p>\n\n<pre><code>    fn give&lt;S&gt;(&amp;self, x: S) -&gt; S \n    where S: Limit\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>    fn give&lt;S = T&gt;(&amp;self, x: S) -&gt; S \n    where S: Limit\n</code></pre>\n\n<p>I didn't get an error about this syntax but it wasn't the solution of the error above.</p>\n\n<p>Is there any way to achieve what I want to do?</p>\n\n<p>And a side question, what <code>&lt;S = T&gt;</code> actually does in this case?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "is_accepted": false, "score": 4, "last_activity_date": 1441396314, "last_edit_date": 1441396314, "creation_date": 1441394672, "answer_id": 32405219, "question_id": 32404835, "link": "https://stackoverflow.com/questions/32404835/how-to-call-method-with-mut-self-from-inside-another-method-of-the-same-type/32405219#32405219", "title": "How to call method with &amp;mut self from inside another method of the same type?", "body": "<p><code>char_match</code> does not need mutable access to <code>self</code>. Mutable access to <code>self.output</code> and <code>self.state</code> will be enough. If you don't give it access to <code>self.input</code> the compiler will no longer complain.</p>\n"}, {"comments": [{"owner": {"reputation": 18987, "user_id": 2470818, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c3e0df5ee75b18ce0c8aeadf4433e151?s=128&d=identicon&r=PG&f=1", "display_name": "vallentin", "link": "https://stackoverflow.com/users/2470818/vallentin"}, "edited": false, "score": 1, "creation_date": 1603052844, "post_id": 32405737, "comment_id": 113907479, "body": "(To future readers) To avoid all the allocation and copies of the static strings before <code>&#39;q&#39;</code>, then instead consider using and returning <code>Option&lt;std::borrow::Cow&gt;</code>."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 3, "last_activity_date": 1441396853, "creation_date": 1441396853, "answer_id": 32405737, "question_id": 32404835, "link": "https://stackoverflow.com/questions/32404835/how-to-call-method-with-mut-self-from-inside-another-method-of-the-same-type/32405737#32405737", "title": "How to call method with &amp;mut self from inside another method of the same type?", "body": "<p>My suggestion would be to make <code>char_match</code> stateless:</p>\n\n<pre><code>pub fn scan(&amp;mut self) {\n    self.state = ScannerState::CharMode;\n\n    while self.state == ScannerState::CharMode {\n        for character in self.input.chars() {\n            match char_match(character) {\n                Some(string) =&gt; self.output.push(string),\n                None =&gt; self.state = ScannerState::QuitMode\n            }\n        }\n        self.state = ScannerState::Done;\n    }\n}\n\nfn char_match(c: char) -&gt; Option&lt;String&gt; {\n    Some(match c {\n        '+' =&gt; \"Addition operator: +\".into(),\n        '-' =&gt; \"Subtraction operator: -\".into(),\n        '*' =&gt; \"Multiplication operator: *\".into(),\n        '/' =&gt; \"Division operator: /\".into(),\n        '%' =&gt; \"Modulus operator: %\".into(),\n        '^' =&gt; \"Exponent operator: ^\".into(),\n        '=' =&gt; \"Assignment operator: =\".into(),\n        ';' =&gt; \"Statement terminator: ;\".into(),\n        ' ' =&gt; \"Space, ignoring.\".into(),\n\n        'q' =&gt; return None,\n\n        i @ '0'...'9' =&gt; format!(\"Integer digit: {}\", i),\n        c @ 'a'...'z' =&gt; format!(\"Variable name: {}\", c),\n        z @ _         =&gt; format!(\"Unrecognized token: {}\", z)\n    })\n}\n</code></pre>\n\n<p>This avoids borrowing altogether, and is also more composable.</p>\n"}], "owner": {"reputation": 247, "user_id": 4310259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6ac9d888c4d21750189144a59e48bcc6?s=128&d=identicon&r=PG&f=1", "display_name": "bretmattingly", "link": "https://stackoverflow.com/users/4310259/bretmattingly"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1074, "favorite_count": 2, "accepted_answer_id": 32405737, "answer_count": 2, "score": 5, "last_activity_date": 1441396853, "creation_date": 1441392882, "last_edit_date": 1441393567, "question_id": 32404835, "link": "https://stackoverflow.com/questions/32404835/how-to-call-method-with-mut-self-from-inside-another-method-of-the-same-type", "title": "How to call method with &amp;mut self from inside another method of the same type?", "body": "<p>I've got a <code>Scanner</code> struct that has a <code>scan(&amp;mut self)</code> method implemented. It looks like this.</p>\n\n<pre><code>pub struct Scanner {\n    input: String,\n    output: Vec&lt;String&gt;,\n    state: ScannerState,\n}\n\nimpl Scanner {\n    pub fn scan(&amp;mut self) {\n        self.state = ScannerState::CharMode;\n        for character in self.input.chars() {\n            match character {\n                i @ '0'...'9'   =&gt; self.output.push(format!(\"Integer digit: {}\", i)),\n                '+'             =&gt; self.output.push(\"Addition operator: +\".to_string()),\n                '-'             =&gt; self.output.push(\"Subtraction operator: -\".to_string()),\n                '*'             =&gt; self.output.push(\"Multiplication operator: *\".to_string()),\n                '/'             =&gt; self.output.push(\"Division operator: /\".to_string()),\n                '%'             =&gt; self.output.push(\"Modulus operator: %\".to_string()),\n                '^'             =&gt; self.output.push(\"Exponent operator: ^\".to_string()),\n                '='             =&gt; self.output.push(\"Assignment operator: =\".to_string()),\n                ';'             =&gt; self.output.push(\"Statement terminator: ;\".to_string()),\n                c @ 'a'...'z'| c @ 'A'...'Z'\n                                =&gt; self.output.push(format!(\"Variable name: {}\", c)),\n                ' '             =&gt; self.output.push(\"Space, ignoring.\".to_string()),\n                z @ _           =&gt; self.output.push(format!(\"Unrecognized token: {}\", z))\n            }\n        }\n    }        \n}\n</code></pre>\n\n<p>However, as you might suspect, the state of the <code>Scanner</code> will change, and it will need to treat tokens differently in different states. Therefore, it would be useful to call a private method on the <code>Scanner</code> from within the <code>scan()</code> method itself, akin to this:</p>\n\n<pre><code>pub fn scan(&amp;mut self) {\n    self.state = ScannerState::CharMode;\n\n    while self.state == ScannerState::CharMode {\n        for character in self.input.chars() {\n            self.char_match(character);\n        }\n        self.state = ScannerState::Done;\n    }\n}\n\nfn char_match(&amp;mut self, c: char) {\n    match c {\n        '+'             =&gt; self.output.push(\"Addition operator: +\".to_string()),\n        '-'             =&gt; self.output.push(\"Subtraction operator: -\".to_string()),\n        '*'             =&gt; self.output.push(\"Multiplication operator: *\".to_string()),\n        '/'             =&gt; self.output.push(\"Division operator: /\".to_string()),\n        '%'             =&gt; self.output.push(\"Modulus operator: %\".to_string()),\n        '^'             =&gt; self.output.push(\"Exponent operator: ^\".to_string()),\n        '='             =&gt; self.output.push(\"Assignment operator: =\".to_string()),\n        ';'             =&gt; self.output.push(\"Statement terminator: ;\".to_string()),\n        ' '             =&gt; self.output.push(\"Space, ignoring.\".to_string()),\n        'q'             =&gt; self.state = ScannerState::QuitMode,\n        i @ '0'...'9'   =&gt; self.output.push(format!(\"Integer digit: {}\", i)),\n        c @ 'a'...'z'   =&gt; self.output.push(format!(\"Variable name: {}\", c)),\n        z @ _           =&gt; self.output.push(format!(\"Unrecognized token: {}\", z))\n    }\n}\n</code></pre>\n\n<p>But wait! We can't do that, Rust tells us:</p>\n\n<pre><code>src/scanner.rs:34:17: 34:21 error: cannot borrow `*self` as mutable because `self.input` is also borrowed as immutable\nsrc/scanner.rs:34                 self.char_match(character);\n                                  ^~~~\n</code></pre>\n\n<p>Yet our <code>char_match()</code> method NEEDS to have a mutable reference to <code>self</code>, since it pushes, and <code>push()</code>ing on a <code>Vec</code> requires mutability. My question then, is given the preceding knowledge, <strong>what is the ideal way to remedy this situation?</strong></p>\n\n<p>Will I simply have to write <code>scan()</code> as a long method?</p>\n"}, {"tags": ["struct", "event-handling", "rust", "mio"], "answers": [{"comments": [{"owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 1, "creation_date": 1441395298, "post_id": 32404611, "comment_id": 52678971, "body": "!!! Thank you! I knew about destructuring but had no idea you could use it to get simultaneous mutable references. This was a huge help!"}], "tags": [], "owner": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "is_accepted": true, "score": 14, "last_activity_date": 1441396429, "last_edit_date": 1441396429, "creation_date": 1441391965, "answer_id": 32404611, "question_id": 32403895, "link": "https://stackoverflow.com/questions/32403895/whats-the-fastest-idiomatic-way-to-mutate-multiple-struct-fields-at-the-same-ti/32404611#32404611", "title": "What&#39;s the fastest idiomatic way to mutate multiple struct fields at the same time?", "body": "<p>To get simultaneous mutable references to different parts of the struct, use destructuring. Example <a href=\"http://is.gd/VKuP6J\">here</a>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Pair {\n    x: Vec&lt;u32&gt;,\n    y: Vec&lt;u32&gt;,\n}\n\nimpl Pair {\n    fn test(&amp;mut self) -&gt; usize {\n        let Pair{ ref mut x, ref mut y } = *self;\n        // Both references coexist now\n        return x.len() + y.len();\n    }\n}\n\nfn main() {\n    let mut nums = Pair {\n        x: vec![1, 2, 3],\n        y: vec![4, 5, 6, 7],\n    };\n    println!(\"{}\", nums.test());\n}\n</code></pre>\n"}], "owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 311, "favorite_count": 2, "accepted_answer_id": 32404611, "answer_count": 1, "score": 6, "last_activity_date": 1441396429, "creation_date": 1441389058, "last_edit_date": 1441389217, "question_id": 32403895, "link": "https://stackoverflow.com/questions/32403895/whats-the-fastest-idiomatic-way-to-mutate-multiple-struct-fields-at-the-same-ti", "title": "What&#39;s the fastest idiomatic way to mutate multiple struct fields at the same time?", "body": "<p>Many libraries allow you to define a type which implements a given <code>trait</code> to be used as a callback handler. This requires you to lump all of the data you'll need to handle the event together in a single data type, which complicates borrows.</p>\n\n<p>For instance, <a href=\"https://github.com/carllerche/mio\" rel=\"noreferrer\"><code>mio</code></a> allows you to implement <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/trait.Handler.html\" rel=\"noreferrer\"><code>Handler</code></a> and provide your struct when you <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/struct.EventLoop.html#method.run\" rel=\"noreferrer\">run the <code>EventLoop</code></a>. Consider an example with these trivialized data types:</p>\n\n<pre><code>struct A {\n  pub b: Option&lt;B&gt;\n};\n\nstruct B;\n\nstruct MyHandlerType {\n  pub map: BTreeMap&lt;Token, A&gt;,\n  pub pool: Pool&lt;B&gt;\n}\n</code></pre>\n\n<p>Your handler has a map from <code>Token</code> to items of type <code>A</code>. Each item of type <code>A</code> may or may not already have an associated value of type <code>B</code>. In the handler, you want to look up the <code>A</code> value for a given <code>Token</code> and, if it doesn't already have a <code>B</code> value, get one out of the handler's <code>Pool&lt;B&gt;</code>.</p>\n\n<pre><code>impl Handler for MyHandlerType {\n    fn ready(&amp;mut self, event_loop: &amp;mut EventLoop&lt;MyHandlerType&gt;, \n             token: Token, events: EventSet) {\n       let a : &amp;mut A = self.map.get_mut(token).unwrap();\n       let b : B = a.b.take().or_else(|| self.pool.new()).unwrap();\n       // Continue working with `a` and `b`\n       // ...\n    }\n}\n</code></pre>\n\n<p>In this arrangement, even though it's intuitively possible to see that <code>self.map</code> and <code>self.pool</code> are distinct entities, the borrow checker complains that <code>self</code> is already borrowed (via <code>self.map</code>) when we go to access <code>self.pool</code>.</p>\n\n<p>One possible approach to this would be to wrap each field in <code>MyHandlerType</code> in <code>Option&lt;&gt;</code>. Then, at the start of the method call, <code>take()</code> those values out of <code>self</code> and restore them at the end of the call:</p>\n\n<pre><code>struct MyHandlerType {\n  // Wrap these fields in `Option`\n  pub map: Option&lt;BTreeMap&lt;Token, A&gt;&gt;,\n  pub pool: Option&lt;Pool&lt;B&gt;&gt;\n}\n// ...\n\nfn ready(&amp;mut self, event_loop: &amp;mut EventLoop&lt;MyHandlerType&gt;, \n         token: Token, events: EventSet) {\n  // Move these values out of `self`\n  let map = self.map.take().unwrap();\n  let pool = self.pool.take().unwrap();\n\n  let a : &amp;mut A = self.map.get_mut(token).unwrap();\n  let b : B = a.b.take().or_else(|| self.pool.new()).unwrap();\n  // Continue working with `a` and `b`\n  // ...\n\n  // Restore these values to `self`\n  self.map = Some(map);\n  self.pool = Some(pool);\n}\n</code></pre>\n\n<p>This works but feels a bit kluge-y. It also introduces the overhead of moving values in and out of <code>self</code> for each method call.</p>\n\n<p>What's the best way to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441390258, "post_id": 32403837, "comment_id": 52676617, "body": "Uh? Now that&#39;s unexpected, the mutable borrow should be scoped. Oh... unless your lifetimes affect it..."}], "answers": [{"comments": [{"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441393285, "post_id": 32404373, "comment_id": 52678083, "body": "Thank you so much! I always wondered how to do that <code>&#39;b: &#39;a</code> constraint. Where is this documented, and where can I learn more?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441445610, "post_id": 32404373, "comment_id": 52690532, "body": "The lifetimes in general are explained <a href=\"https://doc.rust-lang.org/book/lifetimes.html\" rel=\"nofollow noreferrer\">in the Rust book</a> but I could not find the <code>&#39;b: &#39;a</code> syntax there (it might be buried somewhere)."}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441681828, "post_id": 32404373, "comment_id": 52760390, "body": "For anyone who&#39;s curious, I only found docs about this in the <i>nightly</i> documents <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441692836, "post_id": 32404373, "comment_id": 52763521, "body": "@MichaelEden: Well spotted!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1441391008, "creation_date": 1441391008, "answer_id": 32404373, "question_id": 32403837, "link": "https://stackoverflow.com/questions/32403837/mutable-borrow-seems-to-outlive-its-scope/32404373#32404373", "title": "Mutable borrow seems to outlive its scope", "body": "<p>You are running afoul of a lifetime issue.</p>\n\n<p>There are multiple different lifetimes in your program:</p>\n\n<ul>\n<li><code>type Object&lt;'a&gt; = BTreeMap&lt;&amp;'a str, i32&gt;;</code> => this is one</li>\n<li><code>&amp;'a mut Object&lt;'a&gt;</code> => there are up to TWO here</li>\n<li><code>struct Sub&lt;'a&gt;(&amp;'a mut Object&lt;'a&gt;, &amp;'a str);</code> => there are up to THREE here</li>\n</ul>\n\n<p>There is, apparently, no reason for the reference to <code>Object&lt;'a&gt;</code> to have the same lifetime than the <code>&amp;str</code> inside the <code>BTreeMap</code>. However, you <em>told</em> the compiler that you wanted both lifetimes to be the same!</p>\n\n<p>When you write:</p>\n\n<pre><code>struct Sub&lt;'a&gt;(&amp;'a mut Object&lt;'a&gt;, &amp;'a str);\n</code></pre>\n\n<p>you are telling the compiler that:</p>\n\n<ul>\n<li>the lifetime of the <code>&amp;str</code> inside <code>BTreeMap</code></li>\n<li>the lifetime of the reference to <code>Object&lt;'_&gt;</code></li>\n<li>the lifetime of the <code>&amp;str</code> accompanying the <code>Object&lt;'_&gt;</code></li>\n</ul>\n\n<p>are all one and the same.</p>\n\n<p>You have over-constrained the requirements; and as a result no solution can satisfy them.</p>\n\n<p>Adding one more degree of freedom is sufficient! We'll just make the lifetime of the reference to <code>Object&lt;'_&gt;</code> different from the lifetime of those <code>&amp;str</code> floating around:</p>\n\n<pre><code>struct Sub&lt;'a, 'b: 'a&gt;(&amp;'a mut Object&lt;'b&gt;, &amp;'b str);\n\nimpl&lt;'b&gt; Root&lt;'b&gt; {\n    fn borrow_mut&lt;'a&gt;(&amp;'a mut self, data: &amp;'b str) -&gt; Sub&lt;'a, 'b&gt; {\n        Sub(&amp;mut self.0, data)\n    }\n\n    fn borrow(&amp;self) {\n        println!(\"{:?}\", self.0);\n    }\n}\n</code></pre>\n\n<p>Note the subtle <code>'b: 'a</code>:</p>\n\n<ul>\n<li><code>Object&lt;'b&gt;</code> contains a reference to something whose lifetime is <code>'b</code></li>\n<li>the lifetime of the reference to <code>Object&lt;'b&gt;</code> (denoted <code>'a</code>) must be SHORTER than <code>'b</code> (otherwise you have a reference to something dead?)</li>\n</ul>\n\n<p>Thus, we say that <code>'b</code> outlives <code>'a</code> with <code>'b: 'a</code>.</p>\n\n<p>And that's it. Simply loosening the requirements allow the compiler to allow your code to compile.</p>\n\n<hr>\n\n<p>Note that in general, if you find yourself writing something like <code>&amp;'a &amp;'a str</code> you are doing it wrong. If you think about it, you will realize that in order to create a reference to something, it must first <em>be</em>. And therefore a reference to an object <em>necessarily</em> has a shorter lifetime than the object itself (ever so slightly).</p>\n"}], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 263, "favorite_count": 0, "accepted_answer_id": 32404373, "answer_count": 1, "score": 7, "last_activity_date": 1534916310, "creation_date": 1441388835, "last_edit_date": 1534780564, "question_id": 32403837, "link": "https://stackoverflow.com/questions/32403837/mutable-borrow-seems-to-outlive-its-scope", "title": "Mutable borrow seems to outlive its scope", "body": "<p>Trying to compile this program I get stuck on the borrow checker:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\ntype Object&lt;'a&gt; = BTreeMap&lt;&amp;'a str, i32&gt;;\n\nstruct Root&lt;'a&gt;(Object&lt;'a&gt;);\n\nstruct Sub&lt;'a&gt;(&amp;'a mut Object&lt;'a&gt;, &amp;'a str);\n\nimpl&lt;'a&gt; Root&lt;'a&gt; {\n    fn borrow_mut(&amp;'a mut self, data: &amp;'a str) -&gt; Sub&lt;'a&gt; {\n        Sub(&amp;mut self.0, data)\n    }\n\n    fn borrow(&amp;self) {\n        println!(\"{:?}\", self.0);\n    }\n}\n\nfn main() {\n    let mut me = Root(Object::new());\n    {\n        me.borrow_mut(\"data!\");\n    }\n    me.borrow();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=02a753dca37ce320ae42c8ce9edda4a4&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `me` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:24:5\n   |\n22 |         me.borrow_mut(\"data!\");\n   |         -- mutable borrow occurs here\n23 |     }\n24 |     me.borrow();\n   |     ^^ immutable borrow occurs here\n25 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>It looks like the mutable borrow should end before <code>me.borrow()</code> but the borrow checker insists that it ends when <code>main</code> ends.</p>\n\n<p>To quickly explain what I'm trying to accomplish:</p>\n\n<ol>\n<li>Make a parent struct to hold data</li>\n<li>Make a sub category of data and store it in the parent</li>\n<li>Use this builder style pattern to make MongoDB Queries</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1564654800, "post_id": 32401857, "comment_id": 101106124, "body": "Related issue: <a href=\"https://github.com/rust-lang/rust/issues/60896\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/60896</a>"}], "answers": [{"comments": [{"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441388100, "post_id": 32403439, "comment_id": 52675578, "body": "This solution is great! Although I cannot access data in my map with <code>&amp;str</code> types anymore, which is a must. :/"}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1441388650, "post_id": 32403439, "comment_id": 52675854, "body": "This RFC  looks like what I need, too bad that HashMaps weren&#39;t considered for it."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1555684432, "post_id": 32403439, "comment_id": 98201393, "body": "Would it be technically difficult or impossible to add a <code>fn insert_and_get(&amp;mut self, value: T) -&gt; &amp;T</code> that returns a reference to the newly inserted datum?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1555684823, "post_id": 32403439, "comment_id": 98201556, "body": "@FrenchBoiethios I do not think that it would be hard or impossible, no. I&#39;ve also not tried it myself :-)"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1564654422, "post_id": 32403439, "comment_id": 101105920, "body": "FYI, someone can propose an implementation: <a href=\"https://github.com/rust-lang/rust/pull/60142#issuecomment-487416553\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/60142#issuecomment-487416553</a>"}, {"owner": {"reputation": 4983, "user_id": 375688, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/tyeoy.jpg?s=128&g=1", "display_name": "TinyTimZamboni", "link": "https://stackoverflow.com/users/375688/tinytimzamboni"}, "edited": false, "score": 0, "creation_date": 1592277811, "post_id": 32403439, "comment_id": 110360746, "body": "HashSets have an experimental method for <code>get_or_insert()</code> that returns a reference to what you inserted: <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.get_or_insert\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/collections/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 13, "last_activity_date": 1592307759, "last_edit_date": 1592307759, "creation_date": 1441387177, "answer_id": 32403439, "question_id": 32401857, "link": "https://stackoverflow.com/questions/32401857/how-can-i-keep-a-reference-to-a-key-after-it-has-been-inserted-into-a-hashmap/32403439#32403439", "title": "How can I keep a reference to a key after it has been inserted into a HashMap?", "body": "<p>The short answer is that you can't. When you insert something into the <code>HashMap</code>, you <em>transfer ownership</em>. Doing so invalidates any references that you might have to the key, as the key is <em>moved</em> into the memory allocated by the map.</p>\n\n<p><a href=\"https://rust-lang.github.io/rfcs/1194-set-recovery.html\" rel=\"nofollow noreferrer\">RFC 1194 (Set Recovery)</a> proposes a way to get references to the key stored by a <code>HashSet</code> (not map). Further information and research was needed to justify supporting this for <code>HashMap</code> as well. However, this <strong>still wouldn't help you</strong> as you would need to know the key (or something that can be used to look it up) in order to look it up again. However, you've already put the key in the collection at that point.</p>\n\n<p>Your second solution works because you aren't actually giving ownership of the <code>String</code> to the map, you are giving it ownership of a type that models shared ownership via reference counting. The <code>clone</code> call simply increments the reference count, and this models how a lot of dynamic languages would solve this problem.</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::rc::Rc;\n\nfn main() {\n    let mut map = HashMap::new();\n    let data = Rc::new(\"data\".to_string());\n    map.insert(data.clone(), 5);\n\n    let v = map.get(&amp;data);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<hr>\n\n<p>Some unstable features might help you. The most efficient one is <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.raw_entry_mut\" rel=\"nofollow noreferrer\"><code>HashMap::raw_entry_mut</code></a>:</p>\n\n<pre><code>#![feature(hash_raw_entry)]\n\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    let id = \"data\";\n\n    let (k, _v) = map\n        .raw_entry_mut()\n        .from_key(id)\n        .or_insert_with(|| (String::from(id), 0));\n\n    println!(\"{:?}\", k);\n}\n</code></pre>\n\n<p>A shorter but slightly less efficient solution uses <a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.insert\" rel=\"nofollow noreferrer\"><code>Entry::insert</code></a></p>\n\n<pre><code>#![feature(entry_insert)]\n\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    let id = \"data\";\n\n    let entry = map.entry(String::from(id)).insert(0);\n    let k = entry.key();\n\n    println!(\"{:?}\", k);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/51542024/155423\">How do I use the Entry API with an expensive key that is only constructed if the Entry is Vacant?</a></li>\n</ul>\n"}], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2965, "favorite_count": 2, "answer_count": 1, "score": 11, "last_activity_date": 1592307759, "creation_date": 1441381173, "last_edit_date": 1441387931, "question_id": 32401857, "link": "https://stackoverflow.com/questions/32401857/how-can-i-keep-a-reference-to-a-key-after-it-has-been-inserted-into-a-hashmap", "title": "How can I keep a reference to a key after it has been inserted into a HashMap?", "body": "<p>I want to insert into a HashMap but keep an immutable borrow of the key to pass around to places. In my case the keys are strings.</p>\n\n<p>This is one way:</p>\n\n<pre><code>use std::collections::HashMap;\nlet mut map = HashMap::new();\nlet id = \"data\".to_string();  // This needs to be a String\nlet cloned = id.clone();\n\nmap.insert(id, 5);\n\nlet one = map.get(&amp;cloned);\nlet two = map.get(\"data\");\nprintln!(\"{:?}\", (one, two));\n</code></pre>\n\n<p>But this requires a clone.</p>\n\n<p>This one worked until Rust 1.2.0:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::rc::Rc;\nuse std::string::as_string;\n\nlet mut map = HashMap::new();\nlet data = Rc::new(\"data\".to_string()); // This needs to be a String\nlet copy = data.clone();\nmap.insert(data, 5);\n\nlet one = map.get(&amp;copy);\nlet two = map.get(&amp;*as_string(\"data\"));\nprintln!(\"{:?}\", (one, two));\n</code></pre>\n\n<p>How can I accomplish this with Rust 1.2.0?</p>\n\n<p>Ideally I would want to put a key into a HashMap but keep a reference to it, and allow me to access elements in it with <code>&amp;str</code> types, with no extra allocating.</p>\n"}, {"tags": ["vector", "rust", "subset", "slice", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1441379362, "creation_date": 1441379362, "answer_id": 32401308, "question_id": 32401099, "link": "https://stackoverflow.com/questions/32401099/how-can-i-return-a-subset-of-a-vec/32401308#32401308", "title": "How can I return a subset of a Vec?", "body": "<p>Your <code>'a</code> is simply misplaced.</p>\n\n<p>A lifetime is always used in conjunction with a reference, so if you have a <code>&amp;Vec&lt;Vec&lt;bool&gt;&gt;</code> then the lifetime <code>'a</code> comes right after the <code>&amp;</code>. You do not need, and should not, sprinkle <code>&amp;</code> nilly-willy as there is a very clear difference between something that you own (<code>i32</code>) and something you refer to (<code>&amp;i32</code>).</p>\n\n<p>Thus, the correct version of your function simply is:</p>\n\n<pre><code>fn subset&lt;'a&gt;(csv: &amp;'a Vec&lt;Vec&lt;bool&gt;&gt;, indices: &amp;Vec&lt;usize&gt;) -&gt; Vec&lt;&amp;'a Vec&lt;bool&gt;&gt; {\n    indices.iter().map(|&amp;i|&amp;csv[i]).collect()\n}\n</code></pre>\n\n<p><em>Note: I removed the semi-colon after <code>collect</code>, as you want to return the value of that expression.</em></p>\n\n<p>And we can use this function:</p>\n\n<pre><code>fn main() {\n    let vec = vec!(\n        vec!(false, false, false),\n        vec!(false, false, true ),\n        vec!(false, true , true ),\n        vec!(false, true , false),\n        vec!(true , true , false),\n        vec!(true , true , true ),\n        vec!(true , false, true ),\n        vec!(true , false, false)\n    );\n\n    let indices = vec!(1, 3, 5, 7);\n\n    let sub = subset(&amp;vec, &amp;indices);\n\n    println!(\"{:?}\", sub);\n}\n</code></pre>\n\n<p>Which <a href=\"https://play.rust-lang.org/?gist=e4442c648fd13ecd9afe&amp;version=stable\" rel=\"nofollow\">produces</a>:</p>\n\n<pre><code>[[false, false, true], [false, true, false], [true, true, true], [true, false, false]]\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 307, "favorite_count": 0, "accepted_answer_id": 32401308, "answer_count": 1, "score": 0, "last_activity_date": 1441386616, "creation_date": 1441378648, "last_edit_date": 1441386616, "question_id": 32401099, "link": "https://stackoverflow.com/questions/32401099/how-can-i-return-a-subset-of-a-vec", "title": "How can I return a subset of a Vec?", "body": "<p>I'm trying to avoid copying data as the memory use of this program has to be kept low.</p>\n\n<p>I've seen that you can do something like:</p>\n\n<pre><code>fn subset&lt;'a&gt;(csv: &amp;Vec&lt;&amp;'a Vec&lt;bool&gt;&gt;, indices: &amp;Vec&lt;usize&gt;) -&gt; Vec&lt;&amp;'a Vec&lt;bool&gt;&gt; {\n    indices.iter().map(|&amp;i| &amp;csv[i]).collect();\n}\n</code></pre>\n\n<p>But my data source is actually a <code>&amp;Vec&lt;Vec&lt;bool&gt;&gt;</code> not a <code>&amp;Vec&lt;&amp;Vec&lt;bool&gt;&gt;</code> and <code>'a</code> on it's own doesn't work.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "edited": false, "score": 0, "creation_date": 1441376530, "post_id": 32400354, "comment_id": 52668963, "body": "Thanks for the simple solution; should start reading the man page more often :-)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "edited": false, "score": 4, "creation_date": 1441376671, "post_id": 32400354, "comment_id": 52669061, "body": "@Juxhin: Note that it&#39;s commonly used in a number of Unix tools that invoke other programs; so it&#39;s good to know in general."}], "tags": [], "owner": {"reputation": 59234, "user_id": 496161, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c425873f547d93f4079ca252b42a886d?s=128&d=identicon&r=PG", "display_name": "TartanLlama", "link": "https://stackoverflow.com/users/496161/tartanllama"}, "is_accepted": true, "score": 32, "last_activity_date": 1441376384, "creation_date": 1441376384, "answer_id": 32400354, "question_id": 32400231, "link": "https://stackoverflow.com/questions/32400231/passing-program-arguments-through-cargo/32400354#32400354", "title": "Passing program arguments through Cargo", "body": "<p>You can pass trailing arguments to <code>cargo run</code> using <code>--</code>:</p>\n\n<pre><code>cargo run -- --test\n</code></pre>\n\n<p>From the <code>man</code> page:</p>\n\n<blockquote>\n  <p>All of the trailing arguments are passed to the binary to run. If you're passing\n  arguments to both Cargo and the binary, the ones after <code>--</code> go to the binary,\n  the ones before go to Cargo.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 960, "user_id": 2165903, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/035df23a1929d178009ca7fc2d77ab27?s=128&d=identicon&r=PG", "display_name": "Michael Kopp", "link": "https://stackoverflow.com/users/2165903/michael-kopp"}, "is_accepted": false, "score": 0, "last_activity_date": 1504453039, "creation_date": 1504453039, "answer_id": 46025050, "question_id": 32400231, "link": "https://stackoverflow.com/questions/32400231/passing-program-arguments-through-cargo/46025050#46025050", "title": "Passing program arguments through Cargo", "body": "<p>It looks to me like you had two different problems.\nFirst is, how to pass flags to your executable (this was solved by @TartanLlama), the second is your compile error.</p>\n\n<p>For future reference (this is at least true for my system with rust 1.19, cargo 0.20):\nYou used an external crate <code>getopts</code>, which <code>rustc</code> by default does not know.\n<code>cargo</code> on the other hand understands that.\nBy running <code>cargo rustc</code> (or even better <code>cargo build</code>) instead of <code>rustc</code> the compile error will vanish.</p>\n"}], "owner": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6710, "favorite_count": 0, "accepted_answer_id": 32400354, "answer_count": 2, "score": 15, "last_activity_date": 1504453039, "creation_date": 1441375994, "question_id": 32400231, "link": "https://stackoverflow.com/questions/32400231/passing-program-arguments-through-cargo", "title": "Passing program arguments through Cargo", "body": "<p>I have some sample code that is currently making use of <a href=\"https://crates.io/crates/getopts\" rel=\"noreferrer\">getopts</a> which is specified as a dependency in <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies]\ngetopts = \"0.2\"\n</code></pre>\n\n<p>However I can not seem to pass argument (<code>-t</code>, <code>--test</code>) through Cargo (e.g. <code>cargo run --test</code>) for obvious reasons.</p>\n\n<p>Since I have specified that external dependency, trying to run <code>rustc src/main.rs --test</code> won't work either:</p>\n\n<pre><code>src/main.rs:2:5: 2:21 error: unresolved import `getopts::Options`. There is no `Options` in `getopts`\nsrc/main.rs:2 use getopts::Options;\n              ^~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Is there another way to achieve this or some common alternative for the time being?</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1441341680, "post_id": 32390001, "comment_id": 52649342, "body": "Why the <code>NamedResult</code>? That part is a complete red herring."}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1441341904, "post_id": 32390001, "comment_id": 52649405, "body": "@ChrisMorgan it started out as <code>NamedResult&lt;T&gt; = Result&lt;T, Error&gt;</code>, but then I moved away from that once I got the first batch of errors."}], "answers": [{"comments": [{"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1441342586, "post_id": 32390237, "comment_id": 52649608, "body": "What would it look like to implement the trait so that with <code>Result&lt;T, E&gt;</code>, the types could be whatever the user wants? Or is it not possible to specify it must return a Result, only a type-defined Result?"}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1441343248, "post_id": 32390237, "comment_id": 52649776, "body": "Ultimately, the compiler has to know how big the return type is. Functions must have a return type known at compile time."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 3, "creation_date": 1441343944, "post_id": 32390237, "comment_id": 52649974, "body": "@nathansizemore: \u201cwhatever the user wants\u201d simply doesn\u2019t make sense as a concept. Your code must somehow produce a value of whatever type\u2014how is it going to do so?"}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1441676977, "post_id": 32390237, "comment_id": 52759347, "body": "Well I had this rather dumb idea of allowing a user to initialize my library by way of callback, which one would be an error callback, and when an error occurred I would pass that error into the error callback. Using the method above, it could be used for any type of error or return value, but now that you&#39;ve pointed this out, I can see how non-useful it actually would be."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1441341902, "creation_date": 1441341902, "answer_id": 32390237, "question_id": 32390001, "link": "https://stackoverflow.com/questions/32390001/defining-generic-resultt-e-as-return-type/32390237#32390237", "title": "Defining generic Result&lt;T, E&gt; as return type", "body": "<pre><code>fn bar&lt;T, E&gt;(&amp;self) -&gt; Result&lt;T, E&gt;;\n</code></pre>\n\n<p>This says that you have a function <code>bar</code> which, given arbitrary types <code>T</code> and <code>E</code>, will return a <code>Result&lt;T, E&gt;</code>. Remember that: <em>the user specifies the type</em>. But what the body of your method is doing is returning a <code>Result&lt;i32, _&gt;</code>, but <code>i32</code> is not <code>T</code>.</p>\n\n<p>If <em>you</em> wish to specify the type that will be returned, that needs to be specified on the trait implementation, either as a generic or (more normally) as an associated type:</p>\n\n<pre><code>pub trait Foo {\n    type Bar;\n    type BarError;\n\n    fn bar(&amp;self) -&gt; Result&lt;Self::Bar, Self::BarError&gt;;\n}\n\npub struct Thing;\n\nimpl Foo for Thing {\n    type Bar = i32;\n    type BarError = ();\n\n    pub fn bar(&amp;self) -&gt; Result&lt;i32, ()&gt; {\n        Ok(78i32)\n    }\n}\n</code></pre>\n\n<p>This way, the user is not specifying the type; rather, when you know that you are calling the <code>bar</code> method on a <code>Thing</code>, you know that the output type will be <code>Result&lt;i32, ()&gt;</code>.</p>\n"}], "owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5518, "favorite_count": 1, "accepted_answer_id": 32390237, "answer_count": 1, "score": 4, "last_activity_date": 1441341902, "creation_date": 1441340367, "question_id": 32390001, "link": "https://stackoverflow.com/questions/32390001/defining-generic-resultt-e-as-return-type", "title": "Defining generic Result&lt;T, E&gt; as return type", "body": "<p>I'd like to create a <code>trait</code> that forces the return type of <code>Result&lt;T, E&gt;</code> on some functions, but I cannot figure out the syntax to define this.</p>\n\n<p>I've gotten as far as:</p>\n\n<pre><code>pub type NamedResult&lt;T, E&gt; = Result&lt;T, E&gt;;\n\npub trait Foo {\n    fn bar&lt;T, E&gt;(&amp;self) -&gt; NamedResult&lt;T, E&gt;;\n}\n\npub struct Thing;\n\nimpl Foo for Thing {\n    pub fn bar&lt;T, E&gt;(&amp;self) -&gt; NamedResult&lt;T, E&gt; {\n        Ok(78i32)\n    }\n}\n</code></pre>\n\n<p>Produces the following error:</p>\n\n<pre><code>error: mismatched types: \n    expected 'T', \n    found 'i32'\n(expected type parameter, found i32) [E0308]\n</code></pre>\n\n<p>So I then tried:</p>\n\n<pre><code>pub fn bar&lt;i32, String&gt;(&amp;self) -&gt; NamedResult&lt;i32, String&gt; {\n    Ok(78i32)\n}\n</code></pre>\n\n<p>And received the following error:</p>\n\n<pre><code>error: user-defined types or type parameters cannot shadow the primitive types [E0317]\n</code></pre>\n\n<p>What would the proper syntax be so that I can force the implementer of said trait to return a <code>Result&lt;T, E&gt;</code> type on certain functions?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 1, "last_activity_date": 1441371624, "last_edit_date": 1441371624, "creation_date": 1441353379, "answer_id": 32392929, "question_id": 32389495, "link": "https://stackoverflow.com/questions/32389495/dynamic-dispatch-in-rust/32392929#32392929", "title": "Dynamic dispatch in Rust", "body": "<p>I don't see any guarantee that your <code>Weapon</code> have an <code>AttackStrategy&lt;_&gt;</code> impl for any <code>Target</code>. Thus the <code>attack_with</code> function could not be guaranteed to be <em>complete</em> (which means defined on all possible types it could take) \u2013 and unlike Haskell, Rust disallows creating <em>partial</em> functions.</p>\n\n<p>Your specific problem will probably better solved with a <a href=\"http://gameprogrammingpatterns.com/component.html\" rel=\"nofollow\">component pattern</a> (the text is aimed at C++ coders, but is applicable here, too).</p>\n"}], "owner": {"reputation": 341, "user_id": 384057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b8e6ce842c15ea85bc9a1f4aae300adf?s=128&d=identicon&r=PG", "display_name": "Watts", "link": "https://stackoverflow.com/users/384057/watts"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 302, "favorite_count": 0, "accepted_answer_id": 32392929, "answer_count": 1, "score": 4, "last_activity_date": 1441371624, "creation_date": 1441336415, "question_id": 32389495, "link": "https://stackoverflow.com/questions/32389495/dynamic-dispatch-in-rust", "title": "Dynamic dispatch in Rust", "body": "<p>In something I'm working on, I have a \"data store\" object and a set of operations that can be applied to that data store. I'd like to be able to expand the set of operations easily and create alternate implementations of the data store. Inspired by the <a href=\"https://github.com/reem/rust-modifier\" rel=\"nofollow\">modifier crate</a>, I tried to take its approach, essentially to create a trait for the abstract (store, operation) pair, and then implement it for each concrete pair.</p>\n\n<p>Unfortunately, I can't quite figure out how to tie the per-concrete-pair implementations to the abstract setup. Here is a \"minimal\" version of what I'm trying to do:</p>\n\n<pre><code>use std::fmt::Debug;\n\ntrait Target: Debug {}\nimpl&lt;T: Target + ?Sized&gt; Target for Box&lt;T&gt; {}\n\ntrait Weapon: Debug {}\nimpl&lt;W: Weapon + ?Sized&gt; Weapon for Box&lt;W&gt; {}\n\ntrait AttackStrategy&lt;T: Target&gt; {\n    fn attack(&amp;self, &amp;T);\n}\n\nimpl&lt;T: Target, S: AttackStrategy&lt;T&gt; + ?Sized&gt; AttackStrategy&lt;T&gt; for Box&lt;S&gt; {\n    fn attack(&amp;self, enemy: &amp;T) {\n        &amp;self.attack(enemy);\n    }\n}\n\ntrait Attack {\n    fn attack_with&lt;S: AttackStrategy&lt;Self&gt;&gt;(&amp;self, strategy: &amp;S) where Self: Target + Sized {\n        strategy.attack(self);\n    }\n}\n\nimpl&lt;T: Target&gt; Attack for T {}\n\n#[derive(Debug)]\nstruct Zombie(i32);\nimpl Target for Zombie {}\n\n#[derive(Debug)]\nstruct Bunny(i32);\nimpl Target for Bunny {}\n\n#[derive(Debug)]\nstruct BaseballBat(i32);\nimpl Weapon for BaseballBat {}\n\n#[derive(Debug)]\nstruct Knife(i32);\nimpl Weapon for Knife {}\n\nimpl AttackStrategy&lt;Zombie&gt; for BaseballBat {\n    fn attack(&amp;self, zed: &amp;Zombie) {\n        println!(\"Attacking {:?} with {:?}! Whack whack whack! Whew. That was close!\", zed, self);\n    }\n}\n\nimpl AttackStrategy&lt;Bunny&gt; for BaseballBat {\n    fn attack(&amp;self, hopper: &amp;Bunny) {\n        println!(\"Attacking {:?} with {:?}! Swoosh swoosh swoosh! Dang, he got away!\", hopper, self);\n    }\n}\n\nimpl AttackStrategy&lt;Zombie&gt; for Knife {\n    fn attack(&amp;self, zed: &amp;Zombie) {\n        println!(\"Attacking {:?} with {:?}! Stick stick stick! Oh no! He bit me!\", zed, self);\n    }\n}\n\nimpl AttackStrategy&lt;Bunny&gt; for Knife {\n    fn attack(&amp;self, hopper: &amp;Bunny) {\n        println!(\"Attacking {:?} with {:?}! Stick stick stick! Yum! Dinner!\", hopper, self);\n    }\n}\n\n#[allow(dead_code)]\nfn main() {\n    let louisville_slugger = BaseballBat(5);\n    let rabbit = Bunny(-1);\n    rabbit.attack_with(&amp;louisville_slugger);\n\n    let cleaver: Box&lt;Weapon&gt; = Box::new(Knife(2));\n    let brains_seeker = Zombie(17);\n    brains_seeker.attack_with(&amp;cleaver);\n}\n</code></pre>\n\n<p>This fails with the error:</p>\n\n<pre><code>test.rs:75:19: 75:40 error: the trait `AttackStrategy&lt;Zombie&gt;` is not implemented for the type `Weapon` [E0277]\ntest.rs:75     brains_seeker.attack_with(&amp;cleaver);\n                             ^~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Can someone suggest a better way to do this, or a way to resolve this error?</p>\n"}, {"tags": ["function", "types", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1441332722, "post_id": 32388722, "comment_id": 52647237, "body": "The closest type you can return as of now is a <code>Box&lt;[f64]&gt;</code>, FWIW."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1441341577, "post_id": 32388722, "comment_id": 52649307, "body": "@Veedrac: \u2026 which you should practically always use <code>Vec&lt;f64&gt;</code> in favour of."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1441375898, "post_id": 32388722, "comment_id": 52668547, "body": "@ChrisMorgan If you don&#39;t need to change its length, what advantage does <code>Vec</code> have?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1441377598, "post_id": 32388722, "comment_id": 52669658, "body": "@Veedrac: it\u2019s purely the convenience of consistency. <code>Box&lt;[T]&gt;</code> is practically never used."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1441378377, "post_id": 32388722, "comment_id": 52670166, "body": "@ChrisMorgan I don&#39;t get why consistency is an argument - <code>Box&lt;[T]&gt;</code> is just an owned slice. The semantics you get from it (the lack of length-altering methods) is enough reason to prefer it."}], "answers": [{"comments": [{"owner": {"reputation": 43134, "user_id": 1726343, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/55744f355c4714fd473c50e799165a70?s=128&d=identicon&r=PG", "display_name": "Asad Saeeduddin", "link": "https://stackoverflow.com/users/1726343/asad-saeeduddin"}, "edited": false, "score": 1, "creation_date": 1441330355, "post_id": 32388769, "comment_id": 52646734, "body": "So you would call this by doing something like <code>make_zeroes&lt;3&gt;()</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 43134, "user_id": 1726343, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/55744f355c4714fd473c50e799165a70?s=128&d=identicon&r=PG", "display_name": "Asad Saeeduddin", "link": "https://stackoverflow.com/users/1726343/asad-saeeduddin"}, "edited": false, "score": 1, "creation_date": 1441341543, "post_id": 32388769, "comment_id": 52649302, "body": "That hypothetical future code could be called as <code>make_zeroes::&lt;3&gt;()</code>. Or <code>make_zeroes(): [f64; 3]</code>, <i>&amp;c.</i>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1441330113, "creation_date": 1441330113, "answer_id": 32388769, "question_id": 32388722, "link": "https://stackoverflow.com/questions/32388722/is-it-possible-to-vary-the-return-type-annotation-of-a-function-based-on-its-inp/32388769#32388769", "title": "Is it possible to vary the return type annotation of a function based on its input value?", "body": "<p>Types cannot at present be generic over numbers, which that would require. It is generally expected that something along those lines will happen at some point, but there is no schedule for it.</p>\n\n<p>Your example would end up something like this:</p>\n\n<pre><code>fn make_zeroes&lt;N: usize&gt;() -&gt; [f64; N] {\n    return [0; N]\n}\n</code></pre>\n\n<p>Note that this would be requiring constants; it\u2019s never going to be possible to do it with anything other constants\u2014a type must be known at compile time.</p>\n"}, {"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 2, "last_activity_date": 1441355602, "creation_date": 1441355602, "answer_id": 32393574, "question_id": 32388722, "link": "https://stackoverflow.com/questions/32388722/is-it-possible-to-vary-the-return-type-annotation-of-a-function-based-on-its-inp/32393574#32393574", "title": "Is it possible to vary the return type annotation of a function based on its input value?", "body": "<p>You can of course use macros to provide versions of your function for statically known lengths. Look at the <a href=\"https://github.com/droundy/arrayref\" rel=\"nofollow\">arrayref</a> crate for some macros with a similar scheme.</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "accepted_answer_id": 32388769, "answer_count": 2, "score": 1, "last_activity_date": 1441355602, "creation_date": 1441329684, "last_edit_date": 1441330659, "question_id": 32388722, "link": "https://stackoverflow.com/questions/32388722/is-it-possible-to-vary-the-return-type-annotation-of-a-function-based-on-its-inp", "title": "Is it possible to vary the return type annotation of a function based on its input value?", "body": "<p>I'd like to have a function that takes in a length argument, and returns an array that has that length:</p>\n\n<pre><code>fn make_zeros(length: &amp;i16) -&gt; [f64; length] {\n    return [0; length]\n}\n</code></pre>\n\n<p>Is there a rustic way of doing this, or should I just use a <code>Vec</code>?</p>\n"}, {"tags": ["optimization", "rust", "benchmarking"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 1, "last_activity_date": 1441318150, "creation_date": 1441318150, "answer_id": 32386220, "question_id": 32385805, "link": "https://stackoverflow.com/questions/32385805/how-can-i-prevent-the-rust-benchmark-library-from-optimizing-away-my-code/32386220#32386220", "title": "How can I prevent the Rust benchmark library from optimizing away my code?", "body": "<p>The problem with your benchmark is that the optimizer knows that your CompoundValue is going to be immutable during the benchmark, thus it can strengh-reduce the loop and thus compile it down to a constant value.</p>\n\n<p>The solution is to use test::black_box on the parts of your CompoundValue. Or even better, try to get rid of the loop (unless you want to benchmark loop performance), and let Bencher.iter(..) do it's job.</p>\n"}, {"comments": [{"owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 0, "creation_date": 1441334896, "post_id": 32387099, "comment_id": 52647708, "body": "Thank you for a very thorough explanation!"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1441323794, "creation_date": 1441323794, "answer_id": 32387099, "question_id": 32385805, "link": "https://stackoverflow.com/questions/32385805/how-can-i-prevent-the-rust-benchmark-library-from-optimizing-away-my-code/32387099#32387099", "title": "How can I prevent the Rust benchmark library from optimizing away my code?", "body": "<p>The problem here is the compiler can see that the result of the loop is the same every time <code>iter</code> calls the closure (just add some constant to <code>f</code>) because <code>val</code> never changes.</p>\n\n<p>Looking at the assembly (by passing <code>--emit asm</code> to the compiler) demonstrates this:</p>\n\n\n\n<pre><code>_ZN5tests14bench_in_place20h6a2d53fa00d7c649yaaE:\n    ; ...\n    movq    %rdi, %r14\n    leaq    40(%rsp), %rdi\n    callq   _ZN3sys4time5inner10SteadyTime3now20had09d1fa7ded8f25mjwE@PLT\n    movq    (%r14), %rax\n    testq   %rax, %rax\n    je  .LBB0_3\n    leaq    24(%rsp), %rcx\n    movl    $700000, %edx\n.LBB0_2:\n    movq    $0, 24(%rsp)\n    #APP\n    #NO_APP\n    movq    24(%rsp), %rsi\n    addq    %rdx, %rsi\n    movq    %rsi, 24(%rsp)\n    #APP\n    #NO_APP\n    movq    24(%rsp), %rsi\n    movq    %rsi, 24(%rsp)\n    #APP\n    #NO_APP\n    decq    %rax\n    jne .LBB0_2\n.LBB0_3:\n    leaq    24(%rsp), %rbx\n    movq    %rbx, %rdi\n    callq   _ZN3sys4time5inner10SteadyTime3now20had09d1fa7ded8f25mjwE@PLT\n    leaq    8(%rsp), %rdi\n    leaq    40(%rsp), %rdx\n    movq    %rbx, %rsi\n    callq   _ZN3sys4time5inner30_$RF$$u27$a$u20$SteadyTime.Sub3sub20h940fd3596b83a3c25kwE@PLT\n    movups  8(%rsp), %xmm0\n    movups  %xmm0, 8(%r14)\n    addq    $56, %rsp\n    popq    %rbx\n    popq    %r14\n    retq\n</code></pre>\n\n<p>The section between <code>.LBB0_2:</code> and <code>jne .LBB0_2</code> is what the call to <code>iter</code> compiles down to, it is repeatedly running the code in the closure that you passed to it. The <code>#APP</code> <code>#NO_APP</code> pairs are the <code>black_box</code> calls. You can see that the <code>iter</code> loop doesn't do much: <code>movq</code> is just moving data from register to/from other registers and the stack, and <code>addq</code>/<code>decq</code> are just adding and decrementing some integers.</p>\n\n<p>Looking above that loop, there's <code>movl    $700000, %edx</code>: This is loading the constant <code>700_000</code> into the edx register... and, suspiciously, <code>700000 = ITEARATIONS * (0 + 2 + 0 + 5 + 0)</code>. (The other stuff in the code isn't so interesting.)</p>\n\n<p>The way to disguise this is to <code>black_box</code> the input, e.g. I might start off with the benchmark written like:</p>\n\n<pre><code>#[bench]\nfn bench_in_place(b: &amp;mut Bencher) {\n    let mut compound_value = CompoundValue {\n        a: 0,\n        b: 2,\n        c: 0,\n        d: 5,\n        e: 0,\n    };\n\n    b.iter(|| {\n        let mut f : u64 = 0;\n        let val = black_box(&amp;mut compound_value);\n        for _ in 0..ITERATIONS {\n            f += val.a + val.b + val.c + val.d + val.e;\n        }\n        f\n    });\n}\n</code></pre>\n\n<p>In particular, <code>val</code> is <code>black_box</code>'d inside the closure, so that the compiler can't precompute the addition and reuse it for each call.</p>\n\n<p>However, this is still optimised to be very fast: 1 ns/iter for me. Checking the assembly again reveals the problem (I've trimmed the assembly down to just the loop that contains the <code>APP</code>/<code>NO_APP</code> pairs, i.e. the calls to <code>iter</code>'s closure):</p>\n\n<pre><code>.LBB0_2:\n    movq    %rcx, 56(%rsp)\n    #APP\n    #NO_APP\n    movq    56(%rsp), %rsi\n    movq    8(%rsi), %rdi\n    addq    (%rsi), %rdi\n    addq    16(%rsi), %rdi\n    addq    24(%rsi), %rdi\n    addq    32(%rsi), %rdi\n    imulq   $100000, %rdi, %rsi\n    movq    %rsi, 56(%rsp)\n    #APP\n    #NO_APP\n    decq    %rax\n    jne .LBB0_2\n</code></pre>\n\n<p>Now the compiler has seen that <code>val</code> doesn't change over the course of the <code>for</code> loop, so it has correctly transformed the loop into just summing all the elements of <code>val</code> (that's the sequence of 4 <code>addq</code>s) and then multiplying that by <code>ITERATIONS</code> (the <code>imulq</code>).</p>\n\n<p>To fix this, we can do the same thing: move the <code>black_box</code> deeper, so that the compiler can't reason about the value between different iterations of the loop:</p>\n\n<pre><code>#[bench]\nfn bench_in_place(b: &amp;mut Bencher) {\n    let mut compound_value = CompoundValue {\n        a: 0,\n        b: 2,\n        c: 0,\n        d: 5,\n        e: 0,\n    };\n\n    b.iter(|| {\n        let mut f : u64 = 0;\n        for _ in 0..ITERATIONS {\n            let val = black_box(&amp;mut compound_value);\n            f += val.a + val.b + val.c + val.d + val.e;\n        }\n        f\n    });\n}\n</code></pre>\n\n<p>This version now takes 137,142 ns/iter for me, although the repeated calls to <code>black_box</code> probably cause non-trivial overhead (having to repeatedly write to the stack, and then read it back).</p>\n\n<p>We can look at the asm, just to be sure:</p>\n\n<pre><code>.LBB0_2:\n    movl    $100000, %ebx\n    xorl    %edi, %edi\n    .align  16, 0x90\n.LBB0_3:\n    movq    %rdx, 56(%rsp)\n    #APP\n    #NO_APP\n    movq    56(%rsp), %rax\n    addq    (%rax), %rdi\n    addq    8(%rax), %rdi\n    addq    16(%rax), %rdi\n    addq    24(%rax), %rdi\n    addq    32(%rax), %rdi\n    decq    %rbx\n    jne .LBB0_3\n    incq    %rcx\n    movq    %rdi, 56(%rsp)\n    #APP\n    #NO_APP\n    cmpq    %r8, %rcx\n    jne .LBB0_2\n</code></pre>\n\n<p>Now the call to <code>iter</code> is two loops: the outer loop that calls the closure many times (<code>.LBB0_2:</code> to <code>jne .LBB0_2</code>), and the <code>for</code> loop inside the closure (<code>.LBB0_3:</code> to <code>jne .LBB0_3</code>). The inner loop is indeed doing a call to <code>black_box</code> (<code>APP</code>/<code>NO_APP</code>) followed by 5 additions. The outer loop is setting <code>f</code> to zero (<code>xorl %edi, %edi</code>), running the inner loop, and then <code>black_box</code>ing <code>f</code> (the second <code>APP</code>/<code>NO_APP</code>).</p>\n\n<p>(Benchmarking exactly what you want to benchmark can be tricky!)</p>\n"}], "owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 595, "favorite_count": 0, "accepted_answer_id": 32387099, "answer_count": 2, "score": 4, "last_activity_date": 1441323794, "creation_date": 1441316101, "last_edit_date": 1441319037, "question_id": 32385805, "link": "https://stackoverflow.com/questions/32385805/how-can-i-prevent-the-rust-benchmark-library-from-optimizing-away-my-code", "title": "How can I prevent the Rust benchmark library from optimizing away my code?", "body": "<p>I have a simple idea I'm trying to benchmark in Rust. However, when I go to measure it using <code>test::Bencher</code>, the base case that I'm trying to compare against:</p>\n\n<pre><code>#![feature(test)]\nextern crate test;\n\n#[cfg(test)]\nmod tests {\n\n    use test::black_box;\n    use test::Bencher;\n\n    const ITERATIONS: usize = 100_000;\n\n    struct CompoundValue {\n        pub a: u64,\n        pub b: u64,\n        pub c: u64,\n        pub d: u64,\n        pub e: u64,\n    }\n\n    #[bench]\n    fn bench_in_place(b: &amp;mut Bencher) {\n        let mut compound_value = CompoundValue {\n            a: 0,\n            b: 2,\n            c: 0,\n            d: 5,\n            e: 0,\n        };\n\n        let val: &amp;mut CompoundValue = &amp;mut compound_value;\n\n        let result = b.iter(|| {\n            let mut f : u64 = black_box(0);\n            for _ in 0..ITERATIONS {\n                f += val.a + val.b + val.c + val.d + val.e;\n            }\n            f = black_box(f);\n            return f;\n        });\n        assert_eq!((), result);\n    }\n}\n</code></pre>\n\n<p>is optimized away entirely by the compiler, resulting in:</p>\n\n<pre><code>running 1 test\ntest tests::bench_in_place ... bench:           0 ns/iter (+/- 1)\n</code></pre>\n\n<p>As you can see in the gist, I have tried to employ the suggestions <a href=\"https://doc.rust-lang.org/book/benchmark-tests.html#gotcha:-optimizations\" rel=\"nofollow\">set forth in the documentation</a>, namely:</p>\n\n<ul>\n<li>Making use of the <code>test::black_box</code> method to hide implementation details from the compiler.</li>\n<li>Returning the calculated value from the closure passed to the <code>iter</code> method.</li>\n</ul>\n\n<p>Are there any other tricks I can try?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441311454, "post_id": 32384594, "comment_id": 52640030, "body": "Have you seen <a href=\"http://stackoverflow.com/questions/30555477/try-does-not-compile\">this related question</a> about <code>try!</code>? Or the <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">Rust Book</a> section on error handing?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "edited": false, "score": 1, "creation_date": 1441311771, "post_id": 32384768, "comment_id": 52640177, "body": "@Juxhin it&#39;s often the simple answers that are hardest to find! ^_^"}, {"owner": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "edited": false, "score": 0, "creation_date": 1441311845, "post_id": 32384768, "comment_id": 52640219, "body": "Indeed. I would understand scenarios where you would want to do more than a validation check but since I&#39;m just getting myself used to language for now I wanted to just slowly expose myself to the standard API as I&#39;ve never delved into this programming paradigm before. Thanks again :-)"}, {"owner": {"reputation": 759, "user_id": 9171481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/1c28Z.png?s=128&g=1", "display_name": "mental", "link": "https://stackoverflow.com/users/9171481/mental"}, "edited": false, "score": 7, "creation_date": 1548519308, "post_id": 32384768, "comment_id": 95573759, "body": "It is worth mentioning that <code>Path::exists</code> is an alias to <code>fs::metadata(path).is_ok()</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 114, "last_activity_date": 1565141149, "last_edit_date": 1565141149, "creation_date": 1441311667, "answer_id": 32384768, "question_id": 32384594, "link": "https://stackoverflow.com/questions/32384594/how-to-check-whether-a-path-exists/32384768#32384768", "title": "How to check whether a path exists?", "body": "<p>Note that many times you want to do <em>something</em> with the file, like read it. In those cases, it makes more sense to just try to open it and deal with the <code>Result</code>. This eliminates <a href=\"https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\" rel=\"noreferrer\">a race condition between \"check to see if file exists\" and \"open file if it exists\"</a>. If all you really care about is if it exists...</p>\n\n<h3>Rust 1.5+</h3>\n\n<p><a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.exists\" rel=\"noreferrer\"><code>Path::exists</code></a>... exists:</p>\n\n<pre><code>use std::path::Path;\n\nfn main() {\n    println!(\"{}\", Path::new(\"/etc/hosts\").exists());\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/32384594/how-to-check-whether-a-path-exists/32384768?noredirect=1#comment95573759_32384768\">As mental points out</a>, <code>Path::exists</code> simply <a href=\"https://github.com/rust-lang/rust/blob/1.32.0/src/libstd/path.rs#L2406-L2408\" rel=\"noreferrer\">calls <code>fs::metadata</code> for you</a>:</p>\n\n<blockquote>\n<pre><code>pub fn exists(&amp;self) -&gt; bool {\n    fs::metadata(self).is_ok()\n}\n</code></pre>\n</blockquote>\n\n<h3>Rust 1.0+</h3>\n\n<p>You can check if the <a href=\"https://doc.rust-lang.org/std/fs/fn.metadata.html\" rel=\"noreferrer\"><code>fs::metadata</code></a> method succeeds:</p>\n\n<pre><code>use std::fs;\n\npub fn path_exists(path: &amp;str) -&gt; bool {\n    fs::metadata(path).is_ok()\n}\n\nfn main() {\n    println!(\"{}\", path_exists(\"/etc/hosts\"));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 80945, "user_id": 1002260, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/5ec9c21c8d54825b04def7a41998d18d?s=128&d=identicon&r=PG", "display_name": "Steven Penny", "link": "https://stackoverflow.com/users/1002260/steven-penny"}, "is_accepted": false, "score": 3, "last_activity_date": 1610744024, "last_edit_date": 1610744024, "creation_date": 1606795734, "answer_id": 65084606, "question_id": 32384594, "link": "https://stackoverflow.com/questions/32384594/how-to-check-whether-a-path-exists/65084606#65084606", "title": "How to check whether a path exists?", "body": "<p>You can use <a href=\"//doc.rust-lang.org/std/path/struct.Path.html#method.is_file\" rel=\"nofollow noreferrer\"><code>std::path::Path::is_file</code></a>:</p>\n<pre><code>use std::path::Path;\n\nfn main() {\n   let o = Path::new(&quot;a.rs&quot;);\n   let b = o.is_file();\n   println!(&quot;{}&quot;, b);\n}\n</code></pre>\n"}], "owner": {"reputation": 3866, "user_id": 3364618, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9fbbb284e1a7ec696af1a7ddea4a4290?s=128&d=identicon&r=PG", "display_name": "Juxhin", "link": "https://stackoverflow.com/users/3364618/juxhin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 33559, "favorite_count": 5, "accepted_answer_id": 32384768, "answer_count": 2, "score": 66, "last_activity_date": 1610744024, "creation_date": 1441310997, "last_edit_date": 1498437872, "question_id": 32384594, "link": "https://stackoverflow.com/questions/32384594/how-to-check-whether-a-path-exists", "title": "How to check whether a path exists?", "body": "<p>The choice seems to be between <code>std::fs::PathExt</code> and <code>std::fs::metadata</code>, but the latter is suggested for the time being as it is more stable. Below is the code I have been working with as it is based off the docs:</p>\n\n<pre><code>use std::fs;\n\npub fn path_exists(path: &amp;str) -&gt; bool {\n    let metadata = try!(fs::metadata(path));\n    assert!(metadata.is_file());\n}\n</code></pre>\n\n<p>However, for some odd reason <code>let metadata = try!(fs::metadata(path))</code> still requires the function to return a <code>Result&lt;T,E&gt;</code> even though I simply want to return a boolean as shown from <code>assert!(metadata.is_file())</code>.</p>\n\n<p>Even though there will probably be a lot of changes to this soon enough, how would I bypass the <code>try!()</code> issue? </p>\n\n<p>Below is the relevant compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:20\n  |\n4 |     let metadata = try!(fs::metadata(path));\n  |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found enum `std::result::Result`\n  |\n  = note: expected type `bool`\n             found type `std::result::Result&lt;_, _&gt;`\n  = note: this error originates in a macro outside of the current crate\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:3:40\n  |\n3 |   pub fn path_exists(path: &amp;str) -&gt; bool {\n  |  ________________________________________^\n4 | |     let metadata = try!(fs::metadata(path));\n5 | |     assert!(metadata.is_file());\n6 | | }\n  | |_^ expected (), found bool\n  |\n  = note: expected type `()`\n             found type `bool`\n</code></pre>\n"}, {"tags": ["parsing", "hex", "rust"], "answers": [{"comments": [{"owner": {"reputation": 559, "user_id": 1542937, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a8735f0e08d127b49fc61baead7d5cb5?s=128&d=identicon&r=PG", "display_name": "tsf144", "link": "https://stackoverflow.com/users/1542937/tsf144"}, "edited": false, "score": 0, "creation_date": 1441303227, "post_id": 32381836, "comment_id": 52635409, "body": "That&#39;s great, thanks! Just to clarify, the &#39;[2..]&#39; is how you skip the first two spaces? (like over &#39;0&#39; and &#39;x&#39;)"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 559, "user_id": 1542937, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a8735f0e08d127b49fc61baead7d5cb5?s=128&d=identicon&r=PG", "display_name": "tsf144", "link": "https://stackoverflow.com/users/1542937/tsf144"}, "edited": false, "score": 3, "creation_date": 1441303356, "post_id": 32381836, "comment_id": 52635488, "body": "@tsf144, it is slicing syntax. <code>&amp;raw[2..]</code> is a substring of <code>raw</code> starting at the second byte of <code>raw</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 559, "user_id": 1542937, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a8735f0e08d127b49fc61baead7d5cb5?s=128&d=identicon&r=PG", "display_name": "tsf144", "link": "https://stackoverflow.com/users/1542937/tsf144"}, "edited": false, "score": 0, "creation_date": 1441304933, "post_id": 32381836, "comment_id": 52636353, "body": "@tsf144 Just what Vladimir said. The important part is that it is <b>bytes</b>. In this case, it looks like you have ASCII-encoded strings, so one character == one byte."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 52, "last_activity_date": 1562594717, "last_edit_date": 1562594717, "creation_date": 1441300726, "answer_id": 32381836, "question_id": 32381414, "link": "https://stackoverflow.com/questions/32381414/converting-a-hexadecimal-string-to-a-decimal-integer/32381836#32381836", "title": "Converting a hexadecimal string to a decimal integer", "body": "<p>In most cases, you want to parse more than one hex byte at once. In those cases, use <a href=\"https://crates.io/crates/hex\" rel=\"noreferrer\">the hex crate</a>.</p>\n\n<blockquote>\n  <p>parse this into an integer</p>\n</blockquote>\n\n<p>You want to use <a href=\"https://doc.rust-lang.org/std/primitive.i64.html#method.from_str_radix\" rel=\"noreferrer\"><code>from_str_radix</code></a>. It's implemented on the integer types. </p>\n\n<pre><code>use std::i64;\n\nfn main() {\n    let z = i64::from_str_radix(\"1f\", 16);\n    println!(\"{:?}\", z);\n}\n</code></pre>\n\n<p>If your strings actually have the <code>0x</code> prefix, then you will need to skip over them. The best way to do that is via <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.trim_start_matches\" rel=\"noreferrer\"><code>trim_start_matches</code></a>:</p>\n\n<pre><code>use std::i64;\n\nfn main() {\n    let raw = \"0x1f\";\n    let without_prefix = raw.trim_start_matches(\"0x\");\n    let z = i64::from_str_radix(without_prefix, 16);\n    println!(\"{:?}\", z);\n}\n</code></pre>\n"}], "owner": {"reputation": 559, "user_id": 1542937, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a8735f0e08d127b49fc61baead7d5cb5?s=128&d=identicon&r=PG", "display_name": "tsf144", "link": "https://stackoverflow.com/users/1542937/tsf144"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 21241, "favorite_count": 5, "accepted_answer_id": 32381836, "answer_count": 1, "score": 37, "last_activity_date": 1562594717, "creation_date": 1441299165, "last_edit_date": 1540470429, "question_id": 32381414, "link": "https://stackoverflow.com/questions/32381414/converting-a-hexadecimal-string-to-a-decimal-integer", "title": "Converting a hexadecimal string to a decimal integer", "body": "<p>I'm writing a Rust program that reads off of an I2C bus and saves the data. When I read the I2C bus, I get hex values like <code>0x11</code>, <code>0x22</code>, etc.</p>\n\n<p>Right now, I can only handle this as a string and save it as is. Is there a way I can parse this into an integer? Is there any built in function for it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "edited": false, "score": 0, "creation_date": 1441306755, "post_id": 32371602, "comment_id": 52637433, "body": "Thanks for a great explanation. The only thing I&#39;m missing - I don&#39;t understand why A is Send and Sync. I think I missed that somewhere in the book, but can&#39;t find it anymore. Could you please explain that point?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "edited": false, "score": 1, "creation_date": 1441311285, "post_id": 32371602, "comment_id": 52639955, "body": "<code>A</code> is send and sync because it does not contain anything which is not <code>Send</code> or <code>Sync</code>. These traits are implemented automatically for all types which contain only <code>Send</code> and <code>Sync</code> members inside them, and your structure only contains a single primitive field which is <code>Send</code> and <code>Sync</code>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 16, "last_activity_date": 1542394767, "last_edit_date": 1542394767, "creation_date": 1441271826, "answer_id": 32371602, "question_id": 32370021, "link": "https://stackoverflow.com/questions/32370021/sharing-a-reference-to-an-instance-of-trait-between-threads/32371602#32371602", "title": "Sharing a reference to an instance of trait between threads", "body": "<p>Remember that types of original values which are converted to trait objects are erased. Therefore, the compiler can't know whether the data inside the <code>Arc&lt;Foo&gt;</code> is <code>Send</code> and <code>Sync</code>, and without these traits sharing data across threads may be unsafe. You need to specify that types which can be stored in <code>Arc&lt;Foo&gt;</code> must be <code>Send</code> and <code>Sync</code>:</p>\n\n<pre><code>let mut map: HashMap&lt;u8, Arc&lt;Foo + Sync + Send&gt;&gt; = HashMap::new();\n</code></pre>\n\n<p>(try it <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=32864a09a88f1d141507a4ebb687b832\" rel=\"noreferrer\">here</a>)</p>\n\n<p>The <code>Send</code> bound is required by <code>thread::spawn()</code>, and <code>Sync</code> is required by <code>Arc</code> for it to be <code>Send</code>. Additionally, <code>thread::spawn()</code> also requires <code>'static</code> but it is implicit in this particular <code>Arc&lt;Foo + Sync + Send&gt;</code> type declaration.</p>\n\n<p>Of course, you will be able to store only <code>Sync</code> and <code>Send</code> implementations of <code>Foo</code>, but this is necessary to ensure memory safety. However, in Rust synchronization is implemented with wrappers like <code>Mutex&lt;T&gt;</code> or <code>RwLock&lt;T&gt;</code>. They don't implement <code>Foo</code> even if <code>T</code> implements <code>Foo</code>, therefore you won't be able to store, say, <code>Mutex&lt;Foo + Send&gt;</code> inside your map (unless <code>Foo</code> is your trait and you implemented it for <code>Mutex&lt;Foo&gt;</code>, which could be unwieldy), which would be necessary if your <code>Foo</code> implementations are not <code>Sync</code> but <code>Send</code> (though I'm not sure I can provide an example of such type now).</p>\n\n<p>To solve this you'd need to change map type to contain a mutex inside it explicitly:</p>\n\n<pre><code>let mut map: HashMap&lt;u8, Arc&lt;Mutex&lt;Foo + Send&gt;&gt;&gt; = HashMap::new();\n</code></pre>\n\n<p>This way, there is no need for the <code>Sync</code> bound because <code>Mutex</code> is <code>Sync</code> if its contents are <code>Send</code>.</p>\n\n<p>And naturally, you won't be able to share <code>Foo</code> implementations which are not <code>Send</code> at all, and there is no way around it. This can happen, for example, if <code>Foo</code>'s implementation contains <code>Rc</code>s.</p>\n"}, {"tags": [], "owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "is_accepted": false, "score": 9, "last_activity_date": 1542394927, "last_edit_date": 1542394927, "creation_date": 1441274473, "answer_id": 32372572, "question_id": 32370021, "link": "https://stackoverflow.com/questions/32370021/sharing-a-reference-to-an-instance-of-trait-between-threads/32372572#32372572", "title": "Sharing a reference to an instance of trait between threads", "body": "<p>Vladimir gives one solution to your problem in the first half of his answer: tell Rust that your <code>HashMap</code> contains <code>Foo</code>s which are <code>Send</code> and <code>Sync</code>. Alternatively, you may change the definition of <code>Foo</code> itself to include these trait bounds:</p>\n\n<pre><code>trait Foo: Sync + Send {\n    fn get_foo(&amp;self) -&gt; u8;\n}\n</code></pre>\n\n<p>Since <code>struct A</code> is indeed <code>Send</code> and <code>Sync</code>, and since <code>struct A</code> does indeed implement <code>trait Foo</code>, the type checker will not complain when you use an <code>Arc&lt;A&gt;</code> as an <code>Arc&lt;Foo&gt;</code>.</p>\n\n<p>If instead of sharing <em>immutable</em> (atomically reference counted) references to <code>Foo</code>s you wanted to share <em>mutable</em> (atomically reference counted) references to <code>Foo</code>s, you need to control access to the <code>Foo</code>s. This can be accomplished using e.g. a <code>Mutex</code>. Since the <code>Mutex</code> would then be taking care of the synchronization, the <code>Sync</code> bound on <code>Foo</code> can be dropped. For example:</p>\n\n<pre><code>use std::{\n    collections::HashMap,\n    sync::{Arc, Mutex},\n    thread,\n    time::Duration,\n};\n\n#[derive(Debug)]\nstruct A {\n    foo: u8,\n}\n\ntrait Foo: Send {\n    fn get_foo(&amp;self) -&gt; u8;\n}\n\nimpl Foo for A {\n    fn get_foo(&amp;self) -&gt; u8 {\n        self.foo\n    }\n}\n\nfn main() {\n    let a = Arc::new(Mutex::new(A { foo: 8 }));\n\n    let mut map: HashMap&lt;u8, Arc&lt;Mutex&lt;Foo&gt;&gt;&gt; = HashMap::new();\n    map.insert(8u8, a);\n\n    for _ in 0..2 {\n        let a = map.get(&amp;8u8).expect(\"boom\").clone();\n        thread::spawn(move || {\n            let result = a.lock().ok().expect(\"boom indeed\").get_foo();\n            println!(\"Result: {}\", result);\n        });\n    }\n    thread::sleep(Duration::from_millis(200));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=117a2f18dff8ab95b09c018e44ae1bf9\" rel=\"nofollow noreferrer\">playground</a>)</p>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4020, "favorite_count": 3, "accepted_answer_id": 32371602, "answer_count": 2, "score": 16, "last_activity_date": 1542394927, "creation_date": 1441266969, "last_edit_date": 1542394647, "question_id": 32370021, "link": "https://stackoverflow.com/questions/32370021/sharing-a-reference-to-an-instance-of-trait-between-threads", "title": "Sharing a reference to an instance of trait between threads", "body": "<p>I am playing with Rust's concurrency and trying to wrap my head around <code>Send</code>/<code>Sync</code>/<code>Arc</code>/<code>Mutex</code>. I have problems with sharing a reference to an instance of trait which is held in a <code>HashMap</code>:</p>\n\n<pre><code>use std::{collections::HashMap, sync::Arc, thread, time::Duration};\n\n#[derive(Debug)]\nstruct A {\n    foo: u8,\n}\n\ntrait Foo {\n    fn get_foo(&amp;self) -&gt; u8;\n}\n\nimpl Foo for A {\n    fn get_foo(&amp;self) -&gt; u8 {\n        self.foo\n    }\n}\n\nfn main() {\n    let a = Arc::new(A { foo: 8 });\n\n    let mut map: HashMap&lt;u8, Arc&lt;Foo&gt;&gt; = HashMap::new();\n    map.insert(8u8, a);\n\n    for _ in 0..2 {\n        let a = map.get(&amp;8u8).expect(\"boom\");\n        let a = a.clone();\n        thread::spawn(move || {\n            let _ = a.get_foo();\n        });\n    }\n    thread::sleep(Duration::from_millis(200));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=ed176d906fde27cfd890663a1dc1ab12\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>It gives me these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `dyn Foo` cannot be sent between threads safely\n  --&gt; src/main.rs:27:9\n   |\n27 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `dyn Foo` cannot be sent between threads safely\n   |\n   = help: the trait `std::marker::Send` is not implemented for `dyn Foo`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&lt;dyn Foo&gt;`\n   = note: required because it appears within the type `[closure@src/main.rs:27:23: 29:10 a:std::sync::Arc&lt;dyn Foo&gt;]`\n   = note: required by `std::thread::spawn`\n\nerror[E0277]: `dyn Foo` cannot be shared between threads safely\n  --&gt; src/main.rs:27:9\n   |\n27 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `dyn Foo` cannot be shared between threads safely\n   |\n   = help: the trait `std::marker::Sync` is not implemented for `dyn Foo`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&lt;dyn Foo&gt;`\n   = note: required because it appears within the type `[closure@src/main.rs:27:23: 29:10 a:std::sync::Arc&lt;dyn Foo&gt;]`\n   = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>Could anyone please recommend an approach for this task? I think I'm kinda stuck with Rust's way to work with traits and threading.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 63, "user_id": 4402935, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91f0368f6fb342f9885fea96e6f93f6a?s=128&d=identicon&r=PG&f=1", "display_name": "Microbzz", "link": "https://stackoverflow.com/users/4402935/microbzz"}, "edited": false, "score": 0, "creation_date": 1441254876, "post_id": 32366908, "comment_id": 52606004, "body": "This makes a lot of sense, thank you. I expected the reason to be something along those lines but couldn&#39;t just put words on it."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1441263832, "post_id": 32366908, "comment_id": 52609719, "body": "&quot;both polymorphism and generics&quot; I&#39;d say that it is better written as &quot;both subtyping and generics&quot; since generics are a kind of polymorphism (namely, the <a href=\"https://en.wikipedia.org/wiki/Parametric_polymorphism\" rel=\"nofollow noreferrer\">parametric</a> one)."}, {"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1441292958, "post_id": 32366908, "comment_id": 52629264, "body": "@VladimirMatveev Good point, but I&#39;m imagining most people here are coming from a C++/Java background and understand &#39;polymorphism&#39; to mean &#39;subtyping&#39;; I don&#39;t think it makes the answer harder to read for the haskellers among us either though."}], "tags": [], "owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "is_accepted": true, "score": 4, "last_activity_date": 1441254659, "last_edit_date": 1441254659, "creation_date": 1441254110, "answer_id": 32366908, "question_id": 32366437, "link": "https://stackoverflow.com/questions/32366437/type-mismatch-in-trait-bound-why-cant-rustc-infer-the-type-on-its-own/32366908#32366908", "title": "Type mismatch in trait bound - Why can&#39;t rustc infer the type on its own?", "body": "<p>It could theoretically attempt to 'fix' the type to <code>&amp;Bar</code>. However, you're hitting the variance problem here - a vector of <code>&amp;B</code> is not a vector of <code>&amp;Bar</code> just because a <code>&amp;B</code> is a <code>&amp;Bar</code>, and neither is the inverse true.</p>\n\n<p>Example: Say we treat a vector of <code>&amp;B</code> as a vector of <code>&amp;Bar</code>. Now we have a value of type <code>&amp;C</code> where <code>&amp;C</code> is a <code>&amp;Bar</code> but not a <code>&amp;B</code> - can we put a <code>&amp;C</code> into our vector? Well, obviously not, because the implementation is a vector of <code>&amp;B</code>. So we can only allow reads, not writes. On the other hand, we can attempt to treat a vector of <code>&amp;Bar</code> as a vector of <code>&amp;B</code> - this works fine as long as we only write <code>&amp;B</code>s into our vector (because it's allowed to accept <code>&amp;B</code>s of course) - but since it's still a vector of <code>&amp;Bar</code>, it can contain things that aren't <code>&amp;B</code>s, so we aren't allowed to read from it.</p>\n\n<p>Hence, a container that allows both read and write at the same time needs to be invariant in its generic argument. You'll always have this problems in languages that have both polymorphism <em>and</em> generics in this fashion.</p>\n\n<p>So, back to the actual question: Since this problem exists, there can't be an automatic escape hatch that would turn your expression that is initially going to be inferred to be vector of <code>&amp;B</code> to the type vector of <code>&amp;Bar</code>. Be explicit about your types, and this won't happen. </p>\n\n<hr>\n\n<p>Full type inference <em>maybe</em> could help here, but I'm not sure if full type inference is even possible in a language like rust.</p>\n"}], "owner": {"reputation": 63, "user_id": 4402935, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91f0368f6fb342f9885fea96e6f93f6a?s=128&d=identicon&r=PG&f=1", "display_name": "Microbzz", "link": "https://stackoverflow.com/users/4402935/microbzz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 32366908, "answer_count": 1, "score": 3, "last_activity_date": 1441262507, "creation_date": 1441250612, "last_edit_date": 1441262507, "question_id": 32366437, "link": "https://stackoverflow.com/questions/32366437/type-mismatch-in-trait-bound-why-cant-rustc-infer-the-type-on-its-own", "title": "Type mismatch in trait bound - Why can&#39;t rustc infer the type on its own?", "body": "<p>I just ran into an issue in some code of mine and managed to trim it down to the following minimal example :</p>\n\n<pre><code>use std::iter::IntoIterator;\nuse std::marker::PhantomData;\n\ntrait Bar&lt;'a&gt; {\n    fn compile_plz(&amp;self) -&gt; &amp;'a str;\n}\n\nstruct Foo&lt;'a&gt; {\n    ph: PhantomData&lt;&amp;'a str&gt;\n}\n\nimpl&lt;'a&gt; Bar&lt;'a&gt; for Foo&lt;'a&gt; {\n    fn compile_plz(&amp;self) -&gt; &amp;'a str {\n        \"thx\"\n    }\n}\n\nfn do_something_with_bars&lt;'a, I&gt;(it: I) -&gt; Result&lt;(), ()&gt; where I: IntoIterator&lt;Item=&amp;'a Bar&lt;'a&gt;&gt; {\n    Ok(())\n}\n\nfn take_bar&lt;'a, B&gt;(b: &amp;'a B) where B: Bar&lt;'a&gt; {\n    do_something_with_bars(vec![b]);\n}\n\nfn main() {\n    let f = Foo{ph: PhantomData};\n    take_bar(&amp;f);\n}\n</code></pre>\n\n<p>This fails with the following error :</p>\n\n<blockquote>\n  <p>23:5: 23:27 error: type mismatch resolving <code>&lt;collections::vec::Vec&lt;&amp;B&gt; as core::iter::IntoIterator&gt;::Item == &amp;Bar&lt;'_&gt;</code>:\n  expected type parameter,\n     found trait Bar [E0271]</p>\n</blockquote>\n\n<p>However, changing <code>vec![b]</code> to <code>vec![b as &amp;Bar]</code> works fine. But since <code>b</code> is of type <code>&amp;B</code>, and <code>B</code> has a <code>Bar&lt;'a&gt;</code> bound, why can't the compiler figure out that <code>b</code> is indeed a <code>&amp;Bar</code>?</p>\n"}]