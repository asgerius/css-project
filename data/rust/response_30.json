[{"tags": ["rust", "rust-macros", "rust-decl-macros"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1438806300, "post_id": 31839109, "comment_id": 51605750, "body": "I guess it&#39;s not &quot;token type&quot;, it&#39;s <a href=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/ext/tt/macro_parser.rs#L509\" rel=\"nofollow noreferrer\">&quot;token tree&quot;</a>, but I&#39;m just nitpicking, of course :)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1438842864, "post_id": 31839109, "comment_id": 51617509, "body": "yea, I confused <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/parse/parser/enum.TokenType.html\" rel=\"nofollow noreferrer\">manishearth.github.io/rust-internals-docs/syntax/parse/parse&zwnj;&#8203;r/&hellip;</a> with <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ast/enum.TokenTree.html\" rel=\"nofollow noreferrer\">manishearth.github.io/rust-internals-docs/syntax/ast/&hellip;</a> ..."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 8, "last_activity_date": 1438842883, "last_edit_date": 1438842883, "creation_date": 1438795775, "answer_id": 31839109, "question_id": 31839016, "link": "https://stackoverflow.com/questions/31839016/pass-entire-macro-input-to-another-macro/31839109#31839109", "title": "Pass entire macro input to another macro", "body": "<p>The fragment specifier you want is <code>tt</code> (Token-Tree). A <code>tt</code> is simply an arbitrary valid rust-token like a keyword or an operator or a bracket/block/square-bracket with arbitrary <code>tt</code>s inside. Combined with a variadic macro, you get infinite tokens that can be directly passed to another macro</p>\n\n<pre><code>macro_rules! sorted_vec {\n    ($($x:tt)*) =&gt; {\n        {\n            let mut v = vec![$($x)*];\n            v.sort();\n            v\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 738, "favorite_count": 2, "accepted_answer_id": 31839109, "answer_count": 1, "score": 6, "last_activity_date": 1551127665, "creation_date": 1438795479, "last_edit_date": 1551127665, "question_id": 31839016, "link": "https://stackoverflow.com/questions/31839016/pass-entire-macro-input-to-another-macro", "title": "Pass entire macro input to another macro", "body": "<p>I'm trying to make a simple macro that invokes <code>vec!</code> with whatever it receives then does some simple processing before returning the new vector:</p>\n\n<pre><code>macro_rules! sorted_vec {\n    ($x:expr) =&gt; {\n        {\n            let v = vec![$x];\n            v.sort();\n            v\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is that my macro is trying to parse the syntax, so it complains about commas, etc. That makes sense, but I'm not sure how to get around it. I don't think <code>expr</code> is the correct fragment specifier to use. How do I get it to pass the raw input on to <code>vec!</code> without processing it?</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 9735, "user_id": 112053, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/lObNt.jpg?s=128&g=1", "display_name": "barjak", "link": "https://stackoverflow.com/users/112053/barjak"}, "edited": false, "score": 1, "creation_date": 1438831250, "post_id": 31835647, "comment_id": 51613700, "body": "Your structs are mutually recursive, each one contain a field of the other type by value. This can not compile as is."}, {"owner": {"reputation": 9735, "user_id": 112053, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/lObNt.jpg?s=128&g=1", "display_name": "barjak", "link": "https://stackoverflow.com/users/112053/barjak"}, "edited": false, "score": 1, "creation_date": 1438836308, "post_id": 31835647, "comment_id": 51614927, "body": "I think your impl of <code>Hash</code> should simply be <code>self.pid.hash(state)</code>. To me it is a mistake to call <code>finish</code>."}], "answers": [{"comments": [{"owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "edited": false, "score": 5, "creation_date": 1438788518, "post_id": 31835987, "comment_id": 51595183, "body": "the question is how to write own implementation of hash?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1438796260, "post_id": 31835987, "comment_id": 51599968, "body": "there&#39;s rarely reason to do so... But as @fjh wrote, if you know which trait to implement, look up the documentation. If you run into trouble, post the code you have tried."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 16, "last_activity_date": 1526088324, "last_edit_date": 1526088324, "creation_date": 1438786523, "answer_id": 31835987, "question_id": 31835647, "link": "https://stackoverflow.com/questions/31835647/how-to-implement-eq-and-hash-for-my-own-structs-to-use-them-as-a-hashmap-key/31835987#31835987", "title": "How to implement Eq and Hash for my own structs to use them as a HashMap key?", "body": "<p>You can have the compiler derive these instances for you by inserting the following before your struct declaration:</p>\n\n<pre><code>#[derive(PartialEq, Eq, Hash)]\npub struct A {\n    // ...\n}\n</code></pre>\n\n<p>You could also implement them manually instead. If you want to do that, you should read the documentation on <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-02-traits.html\" rel=\"noreferrer\">traits</a>, <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noreferrer\"><code>Eq</code></a> and <a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\" rel=\"noreferrer\"><code>Hash</code></a>.</p>\n"}, {"tags": [], "owner": {"reputation": 9735, "user_id": 112053, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/lObNt.jpg?s=128&g=1", "display_name": "barjak", "link": "https://stackoverflow.com/users/112053/barjak"}, "is_accepted": true, "score": 17, "last_activity_date": 1526088217, "last_edit_date": 1526088217, "creation_date": 1438832770, "answer_id": 31846475, "question_id": 31835647, "link": "https://stackoverflow.com/questions/31835647/how-to-implement-eq-and-hash-for-my-own-structs-to-use-them-as-a-hashmap-key/31846475#31846475", "title": "How to implement Eq and Hash for my own structs to use them as a HashMap key?", "body": "<p><code>Eq</code> is what we call a marker trait: it has no method on its own, it is just a way for the programmer to express that the struct verifies a certain property. You can implement it like this:</p>\n\n<pre><code>impl Eq for Application {}\n</code></pre>\n\n<p>Or alternatively, use <code>#[derive(Eq)]</code> on top of the <code>Application</code> declaration</p>\n\n<p><code>Eq</code> is a trait bound by <code>PartialEq</code>. This means that you can implement it only on structs that also implement <code>PartialEq</code> (which is the case here). By implementing <code>Eq</code>, you make the promise that your implementation of <code>PartialEq</code> is reflexive (see the docs for what it means).</p>\n"}, {"tags": [], "owner": {"reputation": 13844, "user_id": 12534, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/c248df6104953c22e814d3f4f65b3839?s=128&d=identicon&r=PG", "display_name": "Christian Dav&#233;n", "link": "https://stackoverflow.com/users/12534/christian-dav%c3%a9n"}, "is_accepted": false, "score": 2, "last_activity_date": 1610431202, "creation_date": 1610431202, "answer_id": 65678700, "question_id": 31835647, "link": "https://stackoverflow.com/questions/31835647/how-to-implement-eq-and-hash-for-my-own-structs-to-use-them-as-a-hashmap-key/65678700#65678700", "title": "How to implement Eq and Hash for my own structs to use them as a HashMap key?", "body": "<p>This is how the Rust documentation says you write your own implementation of <code>Hash</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::hash::{Hash, Hasher};\n\nstruct Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\nimpl Hash for Person {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        self.id.hash(state);\n        self.phone.hash(state);\n    }\n}\n</code></pre>\n<p>Source: <a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/std/hash/trait.Hash.html</a></p>\n"}], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9892, "favorite_count": 1, "accepted_answer_id": 31846475, "answer_count": 3, "score": 24, "last_activity_date": 1610431202, "creation_date": 1438785572, "last_edit_date": 1595271621, "question_id": 31835647, "link": "https://stackoverflow.com/questions/31835647/how-to-implement-eq-and-hash-for-my-own-structs-to-use-them-as-a-hashmap-key", "title": "How to implement Eq and Hash for my own structs to use them as a HashMap key?", "body": "<p>I have two structs, <code>A</code> and <code>B</code>, and I want to use a <code>HashMap&lt;A, B&gt;</code>. I have a piece of code like this:</p>\n<pre><code>use std::collections::HashMap;\n\npub struct A {\n    x: i32,\n    y: i32,\n    title: String,\n}\n\npub struct B {\n    a: u32,\n    b: u32,\n}\n\nfn main() {\n    let map = HashMap::new();\n    map.insert(\n        A {\n            x: 10,\n            y: 20,\n            title: &quot;test&quot;.to_string(),\n        },\n        B { a: 1, b: 2 },\n    );\n}\n</code></pre>\n<p>But the compiler gives me these errors:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `A: std::cmp::Eq` is not satisfied\n  --&gt; src/main.rs:16:9\n   |\n16 |     map.insert(\n   |         ^^^^^^ the trait `std::cmp::Eq` is not implemented for `A`\n\nerror[E0277]: the trait bound `A: std::hash::Hash` is not satisfied\n  --&gt; src/main.rs:16:9\n   |\n16 |     map.insert(\n   |         ^^^^^^ the trait `std::hash::Hash` is not implemented for `A`\n</code></pre>\n<p>I know that I must implement these traits, but after hours of searching  the web, I have found nothing about implementing them.</p>\n<p>My actual code is more complicated, and my structs contain other structs (I've edited the code).</p>\n<p>I've implemented the <code>Hash</code> trait:</p>\n<pre><code>impl std::hash::Hash for A {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n</code></pre>\n<p>I made an implementation for <code>PartialEq</code> also:</p>\n<pre><code>impl PartialEq for A {\n    fn eq(&amp;self, other: &amp;A) -&gt; bool {\n        self.x == other.x\n    }\n}\n</code></pre>\n<p>But the compiler continues to complain, this time about <code>Eq</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `A: std::cmp::Eq` is not satisfied\n  --&gt; src/main.rs:16:9\n   |\n16 |     map.insert(\n   |         ^^^^^^ the trait `std::cmp::Eq` is not implemented for `A`\n</code></pre>\n<p>How can I implement <code>Eq</code>? Why is there no implementation in the docs?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "edited": false, "score": 0, "creation_date": 1438772881, "post_id": 31826030, "comment_id": 51583705, "body": "Let&#39;s think about the design here: <code>let sep = Seperator::new(&quot;,:; &quot;);</code> <code>let split_iter = sep.split(mystring);</code> However, if I hold the string inside the seperator, when I want to get a new split_iter2 with <code>let split_iter2 = sep.split(mystring2);</code>, then the split_iter1 will be invalidated, which will cause the <code>does not live long enough</code> error."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 1, "last_activity_date": 1438759700, "creation_date": 1438759700, "answer_id": 31826030, "question_id": 31825650, "link": "https://stackoverflow.com/questions/31825650/how-to-design-a-struct-when-i-need-to-reference-to-itself/31826030#31826030", "title": "How to design a struct when I need to reference to itself", "body": "<p>You can\u2019t. Rust\u2019s iterators are not designed to be used that way. Rearrange things so that you <em>don\u2019t</em> need to store the string inside the iterator. It should only have a reference.</p>\n"}, {"tags": [], "owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "is_accepted": false, "score": 1, "last_activity_date": 1439884144, "last_edit_date": 1495540286, "creation_date": 1439884144, "answer_id": 32066561, "question_id": 31825650, "link": "https://stackoverflow.com/questions/31825650/how-to-design-a-struct-when-i-need-to-reference-to-itself/32066561#32066561", "title": "How to design a struct when I need to reference to itself", "body": "<p>While a field cannot reference another field within a struct, you can usually\nachieve what you need by <strong>moving</strong> them. It works by having one field as data\nand another field as an <code>Option</code> containing some struct taking that data by value \n(and implementing some trait of your interest).</p>\n\n<p>You can find the example in <a href=\"https://stackoverflow.com/a/32046805/5222798\">this answer</a> implementing an itetaror adaptor,\nwhere the data was a <code>HashMap</code> and the <code>Option</code> contained the map's <code>IntoIter</code>.\nDuring the iteration once the access to the map was no longer needed, it was\n<em>moved</em> into <code>IntoIter</code> using <code>std::mem::replace</code>.  </p>\n\n<p>However, in your specific case there is no method in <code>std</code> that would\ncreate <code>Chars</code> iterator by <em>consuming</em> the <code>String</code> (i.e. using <code>self</code> as an argument). You would have to implement it yourself.</p>\n"}], "owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1584, "favorite_count": 1, "closed_date": 1588630217, "answer_count": 2, "score": 4, "last_activity_date": 1588630033, "creation_date": 1438758459, "last_edit_date": 1588630033, "question_id": 31825650, "link": "https://stackoverflow.com/questions/31825650/how-to-design-a-struct-when-i-need-to-reference-to-itself", "closed_reason": "Duplicate", "title": "How to design a struct when I need to reference to itself", "body": "<p>My <a href=\"https://stackoverflow.com/questions/31794503/using-self-in-new-constructor\">previous question</a> tells me that Rust cannot take reference to itself in a struct.</p>\n\n<p>So my question would become: how to design a struct when I need to reference to itself?</p>\n\n<p>We might take this struct as an example:</p>\n\n<pre><code>struct SplitByChars&lt;'a&gt; {\n    seperator: &amp;'a Seperator,\n    string: String,\n    chars_iter: std::str::Chars&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; SplitByChars&lt;'a&gt; {\n    fn new&lt;S&gt;(seperator: &amp;'a Seperator, string: S) -&gt; SplitByChars where S: Into&lt;String&gt; {\n        SplitByChars {\n            seperator: seperator,\n            string: string.into(),\n            chars_iter: self.string.chars(), // error here: I cannot use self (of course, static method)\n        }\n    }\n}\n</code></pre>\n\n<p>I used <code>chars_iter</code> to provide an interface of iterable string splitting.</p>\n\n<p>(This is just an example, so I'd like to know about a more general idea on designing the struct, not specially in this splitting case. Moreover, no std's split.)</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1438739578, "creation_date": 1438739578, "answer_id": 31822171, "question_id": 31820407, "link": "https://stackoverflow.com/questions/31820407/btreeset-range-alternative/31822171#31822171", "title": "BTreeSet.range alternative", "body": "<p>I don't believe there is a way, <em>yet</em>. There is <a href=\"https://github.com/rust-lang/rfcs/pull/1195\" rel=\"nofollow\">an RFC</a> out to add these method to <code>BTreeMap</code>, and then to <code>BTreeSet</code>.</p>\n"}], "owner": {"reputation": 14731, "user_id": 25498, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/3cc2ce3cbc8ee084bf9bd8c9ca1e62d3?s=128&d=identicon&r=PG", "display_name": "Adam Crume", "link": "https://stackoverflow.com/users/25498/adam-crume"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 74, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1438739578, "creation_date": 1438727011, "question_id": 31820407, "link": "https://stackoverflow.com/questions/31820407/btreeset-range-alternative", "title": "BTreeSet.range alternative", "body": "<p>I have a <code>BTreeSet</code> and need the largest element less than a given element.  It looks like I'd use something like:</p>\n\n<pre><code>let set: BTreeSet&lt;T&gt; = ...;\nlet e: T = ...;\nlet result = e.range(Bound::Unbounded, Bound::Excluded(e)).last();\n</code></pre>\n\n<p>but <code>BTreeSet::range</code> is unstable.  How else can I do this?  I know I could use <code>set.iter().rposition(|e2| e2 &lt; e)</code> (or something like that), but I'd like logarithmic time, not linear.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1438726158, "post_id": 31819743, "comment_id": 51565370, "body": "Thanks.. I hadn&#39;t considered that it would be possible to use both the forwards and reverse form of the same iterator."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1438728173, "post_id": 31819743, "comment_id": 51566096, "body": "Now you know what a double ended range is!"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 10, "last_activity_date": 1438730750, "last_edit_date": 1592644375, "creation_date": 1438723991, "answer_id": 31819743, "question_id": 31818329, "link": "https://stackoverflow.com/questions/31818329/is-there-any-reason-not-to-use-doubleendediterator-for-iterators-that-dont-iter/31819743#31819743", "title": "Is there any reason not to use DoubleEndedIterator for iterators that don&#39;t iterate over a range of things?", "body": "<p>First, let's clear up this passing remark in your question:</p>\n<blockquote>\n<p>For example, (1..10) could implement this to be able to go from 1 to 10, or from 10 to 1.</p>\n</blockquote>\n<p><code>1..10</code> is of type <a href=\"http://doc.rust-lang.org/nightly/std/ops/struct.Range.html\" rel=\"noreferrer\"><code>std::ops::Range&lt;T&gt;</code></a> and it iterates to the sequence <em>1, 2, 3, 4, 5, 6, 7, 8, 9</em> regardless if you iterate it from the back or the front. From the back, you get <em>9, 8, ...</em>, from the front you get, <em>1, 2, ...</em>; it is a start inclusive, end exclusive range, also called a <strong>half-open</strong> range.</p>\n<p>If you would iterate the range a bit from the front and then from the back, it will stop where the ends meet:</p>\n<pre><code>let mut range = 1..10;\n\nfor i in &amp;mut range {\n    // Produce 1, 2, 3, 4, 5\n    // then break.\n    if i == 5 { break; }\n}\n\nfor j in range.rev() {\n    // Produces 9, 8, 7, 6\n}\n</code></pre>\n<p>And that shows what a well behaved double ended iterator is like. <a href=\"https://play.rust-lang.org/?gist=904305095674c2771470&amp;version=stable\" rel=\"noreferrer\">(rust playpen link)</a></p>\n<hr />\n<p>Now, for the question of <code>DoubleEndedIterator</code> \u201cabuse\u201d:</p>\n<p>It is problematic.</p>\n<p>The <a href=\"http://doc.rust-lang.org/nightly/std/iter/trait.DoubleEndedIterator.html\" rel=\"noreferrer\">DoubleEndedIterator documentation</a> is clear:</p>\n<blockquote>\n<p>A range iterator able to yield elements from both ends</p>\n<p>A <code>DoubleEndedIterator</code> can be thought of as a deque in that <code>next()</code> and <code>next_back()</code> <strong>exhaust elements from the same range, and do not work independently of each other.</strong></p>\n</blockquote>\n<p>You must understand this as: Regardless if using <code>next</code>, <code>next_back</code>, or combinations of these, any traversal must produce the same range of elements if you keep track of them (and keep track of which end they came from).</p>\n<p>However, there is the case of infinite ranges...</p>\n<p>In an infinitely long range, the ends never meet. An example of such an iterator is <a href=\"http://doc.rust-lang.org/nightly/std/iter/fn.repeat.html\" rel=\"noreferrer\"><code>repeat</code></a>. For this trivial example it's easy to both see why the iterator is infinite, and how both <code>next()</code> and <code>next_back()</code> are logically defined.</p>\n<p>So this is a loophole where you could specify the iterator's sequence as infinitely long, although double ended. I think it is questionable to try to fulfill this interface correctly with our fixed bit width integers.</p>\n<p>Even with the dubious philosophical motivation, it might be a very confusing iterator that defies reasonable expectations. I think it would be horrible to use the trait wrong (say having two completely disagreeing ends of an iterator), but with an inexhaustible range you won't actually break any trait properties.</p>\n"}], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1021, "favorite_count": 0, "accepted_answer_id": 31819743, "answer_count": 1, "score": 7, "last_activity_date": 1438730750, "creation_date": 1438718746, "question_id": 31818329, "link": "https://stackoverflow.com/questions/31818329/is-there-any-reason-not-to-use-doubleendediterator-for-iterators-that-dont-iter", "title": "Is there any reason not to use DoubleEndedIterator for iterators that don&#39;t iterate over a range of things?", "body": "<p>As I understand it, <a href=\"https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\" rel=\"noreferrer\"><code>DoubleEndedIterator</code></a> is meant for iterators that iterate over a range of items and can start at either end. For example, <code>(1..10)</code> could implement this to be able to go from 1 to 10, or from 10 to 1. However, I have a situation where it would be useful to use this trait for an iterator that doesn't iterate over a range of things, but instead can go forwards or backwards from the same position, like this:</p>\n\n<pre><code>struct ExtremeIterator {\n    number: i32\n}\n\nimpl Iterator for ExtremeIterator {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        let result = self.number;\n        self.number += 1;\n        Some(result)\n    }\n}\n\nimpl DoubleEndedIterator for ExtremeIterator {\n    fn next_back(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        let result = self.number;\n        self.number -= 1;\n        Some(result)\n    }\n}\n\nfn main() {\n    let iter = ExtremeIterator { number: 10 };\n\n    for i in iter.rev().take(5) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>So here's my questions: is there anything semantically wrong with using <code>DoubleEndedIterator</code> this way? Is there some reason why it would be a bad idea to use it for a purpose that is different from what the documentation says it is for? Also, is there a better way to achieve the same thing?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438699541, "post_id": 31810168, "comment_id": 51550145, "body": "Do you need the <code>&#39;a</code> in your real case? Removing it and allowing lifetime inference lets the code compile."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438806250, "post_id": 31810168, "comment_id": 51605724, "body": "Yes, I need the lifetime. My code was working without lifetime, but I have to add it, then the code stop compiling, for tha reason I asked the question. Thanks for your help."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 6, "last_activity_date": 1438709993, "creation_date": 1438709993, "answer_id": 31815824, "question_id": 31810168, "link": "https://stackoverflow.com/questions/31810168/type-annotations-required-in-the-context-of-associated-types-an-iterators/31815824#31815824", "title": "type annotations required in the context of associated types an iterators", "body": "<p>I think this is <a href=\"https://github.com/rust-lang/rust/issues/24338\" rel=\"noreferrer\">#24338</a>, and is caused by the compiler getting confused by the lifetime in the trait and the associated type. It can be worked around by moving the body of the <code>f</code> method into a separate function (nested counts as separate, since they're type checked independently):</p>\n\n<pre><code>trait A&lt;'a&gt; {\n    // ...\n\n    fn f(&amp;'a self) {\n        f_body(self);\n\n        fn f_body&lt;'a, T: ?Sized + A&lt;'a&gt;&gt;(x: &amp;'a T) {\n            let _ = x.items().map(|i| x.consume(i) as T::Item);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 894, "favorite_count": 0, "accepted_answer_id": 31815824, "answer_count": 1, "score": 8, "last_activity_date": 1438709993, "creation_date": 1438693504, "question_id": 31810168, "link": "https://stackoverflow.com/questions/31810168/type-annotations-required-in-the-context-of-associated-types-an-iterators", "title": "type annotations required in the context of associated types an iterators", "body": "<p>I have created a minimal example illustrating a type inference problem that I unable to solve.</p>\n\n<pre><code>trait A&lt;'a&gt; {\n    type Item: Copy;\n    type Iter: Iterator&lt;Item=Self::Item&gt;;\n\n    fn items(&amp;'a self) -&gt; Self::Iter;\n\n    fn consume(&amp;'a self, i: Self::Item) -&gt; Self::Item;\n\n    fn f(&amp;'a self) {\n        let _ = self.items().map(|i| self.consume(i) as Self::Item);\n    }\n}\n</code></pre>\n\n<p>The compiler error is</p>\n\n<pre><code>x.rs:10:30: 10:68 error: type annotations required: cannot resolve `&lt;&lt;Self as A&lt;'_&gt;&gt;::Iter as core::iter::Iterator&gt;::Item == _` [E0284]\nx.rs:10         let _ = self.items().map(|i| self.consume(i) as Self::Item);\n</code></pre>\n\n<p>I have looked other questions about requiring type annotations but this seems to be a particular case involving associated types.</p>\n"}, {"tags": ["generics", "matrix", "rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 10, "last_activity_date": 1438710993, "creation_date": 1438710993, "answer_id": 31816082, "question_id": 31809355, "link": "https://stackoverflow.com/questions/31809355/blanket-implementations-of-traits-with-generics/31816082#31816082", "title": "Blanket implementations of traits with generics", "body": "<p><code>T</code> isn't constrained by the information the compiler can see at the use-site of the implementation. By having <code>trait Matrix&lt;T&gt;</code>, a single type can be a matrix over multiple element types, that is, it's perfectly legal for someone to have both <code>impl Matrix&lt;u8&gt; for Foo</code> and <code>impl Matrix&lt;u16&gt; for Foo</code> in the same program. If this happens, then <code>Foo + Foo</code> (i.e. a use of the <code>Add</code> implementation) can't be sure which <code>T</code> to use: both <code>T = u8</code> and <code>T = u16</code> work.</p>\n\n<p>I think the best way to solve this is to remove the <code>T</code> type parameter: a given type is only a matrix over one sort of element (even if it's generic), e.g. <code>Vec&lt;Vec&lt;T&gt;&gt;</code> is a matrix over <code>T</code>, nothing else. This is like <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\"><code>Iterator</code></a>: a given type can only yield one type of element.</p>\n\n<p>In code, this looks like:</p>\n\n<pre><code>trait Matrix {\n    type Elem: num::Num;\n\n    fn dim(&amp;self) -&gt; (usize, usize);\n    fn elem(&amp;self, i: usize, j: usize) -&gt; Option&lt;&amp;Self::Elem&gt;;\n    // ...\n}\n</code></pre>\n\n<p>The <code>Add</code> implementation then becomes</p>\n\n<pre><code>impl&lt;U&gt; Add for U where U: Matrix {\n    type Output = U;\n\n    fn add(self, _rhs: U) -&gt; U {\n        U::new_const(U::Elem::zero(), 5, 5)\n    }\n}\n</code></pre>\n\n<p>However, this also doesn't work, as it hits coherence problems. The compiler can't be sure that this implementation of <code>Add</code> doesn't overlap with other implementations of <code>Add</code>, since one could implement <code>Matrix</code> for a type that already has an <code>Add</code> implementation in some way. One can work around this by making a wrapper type, and using the <code>Matrix</code> trait instead as a \"backing storage\" trait, i.e. it \"just\" controls the internal representation.</p>\n\n<pre><code>struct Matrix&lt;T: Storage&gt; {\n    x: T\n}\ntrait Storage { // renamed `Matrix` trait\n    type Elem;\n    fn dim(&amp;self) -&gt; (usize, usize);\n    // ...\n}\n</code></pre>\n\n<p>The <code>Matrix</code> type then becomes the place to add more methods and trait implementations etc.</p>\n"}], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 553, "favorite_count": 2, "accepted_answer_id": 31816082, "answer_count": 1, "score": 7, "last_activity_date": 1438711750, "creation_date": 1438691220, "last_edit_date": 1438711750, "question_id": 31809355, "link": "https://stackoverflow.com/questions/31809355/blanket-implementations-of-traits-with-generics", "title": "Blanket implementations of traits with generics", "body": "<p>I am practicing Rust by implementing matrix math and I'm running into a few snags. I defined the traits that I thought were relevant to a matrix.</p>\n\n<pre><code>trait Matrix&lt;T&gt; where T : num::Num  {\n    fn dim(&amp;self) -&gt; (usize, usize);\n    fn elem(&amp;self, i : usize, j : usize) -&gt; Option&lt;&amp; T&gt;; \n    fn new_const(v: T, rows : usize, cols : usize) -&gt; Self where T : Clone;\n\n    fn same_dim&lt;U&gt;(&amp;self, other: &amp;U) -&gt; bool where U : Matrix&lt;T&gt; {\n        self.dim() == other.dim()\n    }\n}\n</code></pre>\n\n<p>I have a dumb implementation using <code>Vec&lt;Vec&lt;T&gt;&gt;</code>. I implemented all of the methods and tested them. They are all working. Now I want to simply add two matrices together. So without adding the row iterator that I know will be required and doing an add implementation that I know is going to be incorrect I put the following.</p>\n\n<pre><code>impl &lt;T, U&gt; Add for U where T: num::Num, U: Matrix&lt;T&gt; {\n    type Output = U;\n\n    fn add(self, _rhs: U) -&gt; U {\n        U::new_const(T::zero(), 5, 5)\n    }\n}\n</code></pre>\n\n<p>but I get</p>\n\n<pre><code>lib.rs:41:7: 41:8 error: the type parameter `T` is not constrained by the impl trait, self type, or predicates [E0207]\nlib.rs:41 impl &lt;T, U&gt; Add for U where T: num::Num, U: Matrix&lt;T&gt; {\n                ^\nlib.rs:41:7: 41:8 help: run `rustc --explain E0207` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `matrix`.\nTo learn more, run the command again with --verbose.\nCompilation failed.\n</code></pre>\n\n<p>T does seem constrained to me. Can anyone point me in the right direction?</p>\n"}, {"tags": ["string", "vector", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438691337, "post_id": 31806770, "comment_id": 51544042, "body": "<i>I can&#39;t get this to compile</i> without saying what kind of compilation errors?"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438757682, "post_id": 31806770, "comment_id": 51574208, "body": "Because I&#39;ve tried lots of variations and they give lots of different errors. Question would be about 10 times longer if I included them all!"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1438685072, "creation_date": 1438685072, "answer_id": 31807199, "question_id": 31806770, "link": "https://stackoverflow.com/questions/31806770/generic-operation-on-slice-of-cowstr/31807199#31807199", "title": "Generic operation on slice of Cow&lt;str&gt;", "body": "<p>You can definitely do it.</p>\n\n<pre><code>fn remove_prefix(v: &amp;mut [Cow&lt;str&gt;], prefix: &amp;str) {\n    for t in v.iter_mut() {\n        match *t {\n            Cow::Borrowed(ref mut s) =&gt; *s = s.trim_left_matches(prefix),\n            Cow::Owned(ref mut s) =&gt; *s = s.trim_left_matches(prefix).to_string(),\n        }\n    }\n}\n</code></pre>\n\n<p><code>ref mut s</code> means \u201ctake a mutable reference to the value and call it <code>s</code>\u201d in a pattern. Thus you have <code>s</code> of type <code>&amp;mut &amp;str</code> or <code>&amp;mut String</code>. You must then use <code>*s =\u00a0</code> in order to change what that mutable reference is pointing to (thus, change the string inside the <code>Cow</code>).</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1438691599, "post_id": 31807201, "comment_id": 51544219, "body": "<i>strongly implies you have a faulty mental model of how pattern matching</i> =&gt; while true, I am afraid this could be resented as &quot;too aggressive&quot;; I have no suggestion to make, unfortunately, however it might be worth rewording this sentence; after all, we do not wish to scare the OP away!"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 1, "creation_date": 1438758101, "post_id": 31807201, "comment_id": 51574431, "body": "Nah he&#39;s totally right - my mental model was incomplete. I have read the docs but with rust it seems you have to fight the compiler in mortal combat to really learn it! Thanks all."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1438691699, "last_edit_date": 1438691699, "creation_date": 1438685073, "answer_id": 31807201, "question_id": 31806770, "link": "https://stackoverflow.com/questions/31806770/generic-operation-on-slice-of-cowstr/31807201#31807201", "title": "Generic operation on slice of Cow&lt;str&gt;", "body": "<p>Question #1 strongly implies how you think pattern matching and/or pointers work in Rust doesn't quite line up with how they actually work.  The following code compiles:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn remove_prefix(v: &amp;mut [Cow&lt;str&gt;], prefix: &amp;str) {\n    use std::borrow::Cow::*;\n    for t in v.iter_mut() {\n        match *t {\n            Borrowed(ref mut s) =&gt; *s = s.trim_left_matches(prefix),\n            Owned(ref mut s) =&gt; *s = s.trim_left_matches(prefix).to_string(),\n        }\n    }\n}\n</code></pre>\n\n<p>If your case, <code>Borrowed(&amp;s)</code> is matched against <code>Borrowed(&amp;str)</code>, meaning that <code>s</code> is of type <code>str</code>.  This is impossible: you <em>absolutely cannot</em> have a variable of a dynamically sized type.  It's also counter-productive.  Given that you want to <em>modify</em> <code>s</code>, binding to it by value won't help at all.</p>\n\n<p>What you <em>want</em> is to modify the thing contained in the <code>Borrowed</code> variant.  This means you want a mutable pointer to that storage location.  Hence, <code>Borrowed(ref mut s)</code>: this is <em>not</em> destructuring the value inside the <code>Borrowed</code> at all.  Rather, it binds directly to the <code>&amp;str</code>, meaning that <code>s</code> is of type <code>&amp;mut &amp;str</code>; a mutable pointer to a (pointer to a <code>str</code>).  In other words: a mutable pointer to a string slice.</p>\n\n<p>At that point, mutating the contents of the <code>Borrowed</code> is done by re-assigning the value through the mutable pointer: <code>*s = ...</code>.</p>\n\n<p>Finally, the exact same reasoning applies to the <code>Owned</code> case: you were trying to bind by-value, then mutate it, which cannot possibly do what you want.  Instead, bind by mutable pointer to the storage location, then re-assign it.</p>\n\n<p>As for question #2... not really.  That would imply some kind of overloading, which Rust doesn't do (by deliberate choice).  If you are doing this <em>a lot</em>, you could write an extension trait that adds methods of interest to <code>Cow</code>.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "accepted_answer_id": 31807201, "answer_count": 2, "score": 2, "last_activity_date": 1438766754, "creation_date": 1438683884, "last_edit_date": 1438766754, "question_id": 31806770, "link": "https://stackoverflow.com/questions/31806770/generic-operation-on-slice-of-cowstr", "title": "Generic operation on slice of Cow&lt;str&gt;", "body": "<p>I'm trying to implement the following code, which removes the prefix from a slice of <code>Cow&lt;str&gt;</code>'s.</p>\n\n<pre><code>fn remove_prefix(v: &amp;mut [Cow&lt;str&gt;], prefix: &amp;str) {\n    for t in v.iter_mut() {\n        match *t {\n            Borrowed(&amp;s) =&gt; s = s.trim_left_matches(prefix),\n            Owned(s) =&gt; s = s.trim_left_matches(prefix).to_string(),\n        }\n    }\n}\n</code></pre>\n\n<p>I have two questions:</p>\n\n<ol>\n<li><p>I can't get this to compile - I've tried loads of combinations of <code>&amp;</code>'s and <code>*</code>'s but to no avail.</p></li>\n<li><p>Is there a better way to apply functions to a <code>Cow&lt;str&gt;</code> without having to <code>match</code> it to <code>Borrowed</code> and <code>Owned</code> every time. I mean it seems like I should just be able to do something like <code>*t = t.trim_left_matches(prefix)</code> and if <code>t</code> is a <code>Borrowed(str)</code> it leaves it as a <code>str</code> (since <code>trim_left_matches</code> allows that), and if it is an <code>Owned(String)</code> it leaves it as a <code>String</code>. Similarly for <code>replace()</code> it would realise it has to convert both to a <code>String</code> (since you can't use <code>replace()</code> on a <code>str</code>). Is something like that possible?</p></li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2165, "user_id": 2113881, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/SvllB.png?s=128&g=1", "display_name": "Evan Carslake", "link": "https://stackoverflow.com/users/2113881/evan-carslake"}, "edited": false, "score": 0, "creation_date": 1438656881, "post_id": 31799866, "comment_id": 51526913, "body": "Code review would be better suited for this."}, {"owner": {"reputation": 64429, "user_id": 1188513, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/wNdZG.jpg?s=128&g=1", "display_name": "Mathieu Guindon", "link": "https://stackoverflow.com/users/1188513/mathieu-guindon"}, "reply_to_user": {"reputation": 2165, "user_id": 2113881, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/SvllB.png?s=128&g=1", "display_name": "Evan Carslake", "link": "https://stackoverflow.com/users/2113881/evan-carslake"}, "edited": false, "score": 4, "creation_date": 1438657024, "post_id": 31799866, "comment_id": 51526947, "body": "@EvanCarslake this is totally hypothetical code, which is outside the scope of Code Review. Please see <a href=\"http://meta.codereview.stackexchange.com/a/5778/23788\">A guide to Code Review for Stack Overflow users</a>."}, {"owner": {"reputation": 2165, "user_id": 2113881, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/SvllB.png?s=128&g=1", "display_name": "Evan Carslake", "link": "https://stackoverflow.com/users/2113881/evan-carslake"}, "reply_to_user": {"reputation": 64429, "user_id": 1188513, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/wNdZG.jpg?s=128&g=1", "display_name": "Mathieu Guindon", "link": "https://stackoverflow.com/users/1188513/mathieu-guindon"}, "edited": false, "score": 0, "creation_date": 1438657107, "post_id": 31799866, "comment_id": 51526976, "body": "@Mat&#39;sMug my mistake. I can&#39;t help you though."}], "answers": [{"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 1, "creation_date": 1438662051, "post_id": 31799937, "comment_id": 51528093, "body": "I was using 1) initially. The problem is it looks pretty bad with indented code."}, {"owner": {"user_type": "does_not_exist", "display_name": "user2509848"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1438662069, "post_id": 31799937, "comment_id": 51528103, "body": "@ChrisMorgan Thank you."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1438686599, "post_id": 31799937, "comment_id": 51540889, "body": "@anderspitman: Isn&#39;t it a generic issue with indented code and multi-line? I seem to remember similar issues with Python..."}, {"owner": {"reputation": 137098, "user_id": 874188, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/ZcY77.png?s=128&g=1", "display_name": "tripleee", "link": "https://stackoverflow.com/users/874188/tripleee"}, "edited": false, "score": 0, "creation_date": 1438700332, "post_id": 31799937, "comment_id": 51550796, "body": "You could use spaces in the assignment, then substitute away any line-initial spaces. This is mildly inefficient, of course."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user2509848"}, "is_accepted": false, "score": 0, "last_activity_date": 1438657804, "last_edit_date": 1438657804, "creation_date": 1438657128, "answer_id": 31799937, "question_id": 31799866, "link": "https://stackoverflow.com/questions/31799866/choosing-where-newlines-are-in-a-multi-line-string-literal/31799937#31799937", "title": "Choosing where newlines are in a multi-line string literal", "body": "<p>I see three other possible solutions:</p>\n\n<p>1) Get rid of the spaces:</p>\n\n<pre><code>let lit = \"A -&gt; B\nC -&gt; D\nE -&gt; F\";\n</code></pre>\n\n<p>This way, you lose the neat display in your code.  You could get that back like this:</p>\n\n<p>2) Get rid of the spaces, shift everything down a line, and escape the return.</p>\n\n<pre><code>let lit = \"\\\nA -&gt; B\nC -&gt; D\nE -&gt; F\";\n</code></pre>\n\n<p>I would explain what that \"\\\" is doing in a comment, though, because it isn't obvious otherwise.</p>\n\n<p>3) Combine these two solutions:</p>\n\n<pre><code>let lit = \n\"A -&gt; B\nC -&gt; D\nE -&gt; F\";\n</code></pre>\n\n<p>You can test this at <a href=\"http://ideone.com/TMbkQQ\" rel=\"nofollow\">Ideone</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439644525, "post_id": 31838272, "comment_id": 51951721, "body": "Using a vector here is overkill. <code>[&quot;a&quot;, &quot;b&quot;].connect(&quot;-&quot;)</code> is sufficient."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439644607, "post_id": 31838272, "comment_id": 51951751, "body": "Also note that <code>connect</code> is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1102-rename-connect-to-join.md\" rel=\"nofollow noreferrer\">being renamed</a> to <code>join</code>."}], "tags": [], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "is_accepted": false, "score": 0, "last_activity_date": 1438796020, "last_edit_date": 1438796020, "creation_date": 1438792895, "answer_id": 31838272, "question_id": 31799866, "link": "https://stackoverflow.com/questions/31799866/choosing-where-newlines-are-in-a-multi-line-string-literal/31838272#31838272", "title": "Choosing where newlines are in a multi-line string literal", "body": "<p>Mostly as an exercise, I mimicked Python's <code>join</code> syntax with the following:</p>\n\n<pre><code>trait CanJoin {\n    fn join(&amp;self, in_strings: Vec&lt;&amp;str&gt;) -&gt; String;\n}\n\nimpl CanJoin for str {\n    fn join(&amp;self, in_strings: Vec&lt;&amp;str&gt;) -&gt; String {\n        in_strings.connect(self)\n    }\n}\n\nfn main() {\n    let vector = vec![\"A -&gt; B\", \"B -&gt; C\", \"C -&gt; D\"];\n    let joined = \"\\n\".join(vector);\n}\n</code></pre>\n\n<p>Or as a macro:</p>\n\n<pre><code>macro_rules! join_lines {\n    ($($x:tt)*) =&gt; {\n        {\n            vec![$($x)*].connect(\"\\n\")\n        }\n    }\n}\n\nlet joined = join_lines!(\"A -&gt; B\", \"B -&gt; C\", \"C -&gt; D\");\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 3, "last_activity_date": 1596090242, "last_edit_date": 1596090242, "creation_date": 1458418277, "answer_id": 36106608, "question_id": 31799866, "link": "https://stackoverflow.com/questions/31799866/choosing-where-newlines-are-in-a-multi-line-string-literal/36106608#36106608", "title": "Choosing where newlines are in a multi-line string literal", "body": "<p><a href=\"https://github.com/dtolnay/indoc\" rel=\"nofollow noreferrer\">Indoc</a> is a procedural macro that does what you want. It stands for &quot;indented document.&quot; It provides a macro called <code>indoc!()</code> that takes a multiline string literal and un-indents it so the leftmost non-space character is in the first column.</p>\n<pre><code>let lit = indoc! {&quot;\n    A -&gt; B\n    C -&gt; D\n    E -&gt; F&quot;\n};\n</code></pre>\n<p>The result is <code>&quot;A -&gt; B\\nC -&gt; D\\nE -&gt; F&quot;</code> as you asked for.</p>\n<p>Whitespace is preserved relative to the leftmost non-space character in the document, so the following preserves 2 spaces before &quot;C&quot;:</p>\n<pre><code>let lit = indoc! {&quot;\n    A -&gt; B\n      C -&gt; D\n    E -&gt; F&quot;\n};\n</code></pre>\n<p>The result is <code>&quot;A -&gt; B\\n  C -&gt; D\\nE -&gt; F&quot;</code>.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1036, "favorite_count": 0, "answer_count": 3, "score": 8, "last_activity_date": 1596090242, "creation_date": 1438656676, "last_edit_date": 1438699659, "question_id": 31799866, "link": "https://stackoverflow.com/questions/31799866/choosing-where-newlines-are-in-a-multi-line-string-literal", "title": "Choosing where newlines are in a multi-line string literal", "body": "<p>If I create the following multi-line string literal:</p>\n\n<pre><code>let lit = \"A -&gt; B\n           C -&gt; D\n           E -&gt; F\";\n</code></pre>\n\n<p>It prints out like this:</p>\n\n<pre><code>A -&gt; B\n          C -&gt; D\n          E -&gt; F\n</code></pre>\n\n<p>No surprise. However, if I try this:</p>\n\n<pre><code>let lit = \"A -&gt; B\\\n           C -&gt; D\\\n           E -&gt; F\";\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>A -&gt; BC -&gt; DE -&gt; F\n</code></pre>\n\n<p>What I'm trying to get is this:</p>\n\n<pre><code>A -&gt; B\nC -&gt; D\nE -&gt; F\n</code></pre>\n\n<p>But this is the best thing I've come up with:</p>\n\n<pre><code>let lit = \"A -&gt; B\\n\\\n           C -&gt; D\\n\\\n           E -&gt; F\";\n</code></pre>\n\n<p>Or maybe this:</p>\n\n<pre><code>let lit = vec![\"A -&gt; B\", \"C -&gt; D\", \"E -&gt; F\"].connect(\"\\n\");\n</code></pre>\n\n<p>Both of those feel a little clunky, though not terrible. Just wondering if there's any cleaner way?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 1, "creation_date": 1438655123, "post_id": 31799616, "comment_id": 51526542, "body": "@anderspitman I think my update might have what you are asking for?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1438674873, "post_id": 31799616, "comment_id": 51533562, "body": "I guess that <code>skip(k).next()</code> can be replaced with <code>nth(k)</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1438698246, "post_id": 31799616, "comment_id": 51549167, "body": "@VladimirMatveev Ugh, I do that every time. Thanks!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1438756066, "post_id": 31799616, "comment_id": 51573384, "body": "<i>Most other languages I&#39;m familiar with have an efficient way</i> =&gt; I am afraid you cut the sentence a bit early, the end was <i>to do a comparison like this, using just a view of the strings.</i> which suggests nothing about O(1) or O(N) but was just talking about memory allocation. I would suggest you skip this quote and the associated remark, it adds nothing to the answer anyway."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1438698231, "last_edit_date": 1438698231, "creation_date": 1438654458, "answer_id": 31799616, "question_id": 31799482, "link": "https://stackoverflow.com/questions/31799482/efficiently-extract-prefix-substrings/31799616#31799616", "title": "Efficiently extract prefix substrings", "body": "<p>Yes, you can take subslices of strings using the <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow\"><code>Index</code></a> operation:</p>\n\n<pre><code>fn prefix(s: &amp;str, k: usize) -&gt; &amp;str {\n    &amp;s[..k]\n}\n\nfn main() {\n    let my_string = \"ACGT\".to_string();\n    let same = prefix(&amp;my_string, 3) == prefix(&amp;my_string, 2);\n    println!(\"{}\", same);\n}\n</code></pre>\n\n<p>Note that slicing a string uses <em>bytes</em> as the unit, not characters. It is up to the programmer to ensure that the slice lengths lie on valid UTF-8 boundaries. Additionally, you have to ensure that you don't try to slice past the end of the string. Breaking either of these will result in a <code>panic!</code>.</p>\n\n<p>A bit more defensive version would be</p>\n\n<pre><code>fn prefix(s: &amp;str, k: usize) -&gt; &amp;str {\n    let idx = s.char_indices().nth(k).map(|(idx, _)| idx).unwrap_or(s.len());\n    &amp;s[0..idx]\n}\n</code></pre>\n\n<p>The key difference is that we use the <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.char_indices\" rel=\"nofollow\"><code>char_indices</code></a> iterator, which tells us the byte offsets corresponding to a character. Indexing into a UTF-8 string is an <code>O(n)</code> operation, and Rust doesn't want to hide that algorithmic complexity from you. This still isn't even <em>complete</em>, because there can be combining characters, for example. Dealing with strings is <strong>hard</strong>, thanks to the complexity of human language.</p>\n\n<blockquote>\n  <p>Most other languages I'm familiar with have an efficient way </p>\n</blockquote>\n\n<p>Doubtful :-) To be efficient in time, they'd have to know how many bytes to skip ahead for every character. Either they'd have to keep a lookup table for every string or use a fixed-size character encoding. Both of those solutions can use more memory than needed, and a fixed size encoding doesn't even work when you have combining characters, for example.</p>\n\n<p>Of course, other languages could just say \"LOL, strings are just arrays of bytes, good luck with treating them correctly\", and efficiently ignore your character encoding...</p>\n\n<p>Two additional notes</p>\n\n<ol>\n<li><p>Your predicate doesn't really make sense. A string of 2 letters will <em>never</em> match one of 3 letters. For strings to match, they must have the same amount of bytes.</p></li>\n<li><p>You should <em>never</em> need to take <code>&amp;String</code> as a function argument. Taking a <code>&amp;str</code> is a more accepting argument in all cases except for one teeny tiny little case that no one needs \u2014 knowing the capacity of a <code>String</code>, but without being able to modify the string.</p></li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1438698446, "post_id": 31803943, "comment_id": 51549334, "body": "As Vladimir points out, if you know that you are always dealing with ASCII data, you can make assumptions. ASCII characters always take 1 byte of space, so slicing a <code>&amp;str</code> by bytes is equivalent to slicing by characters. You may want to look into the <a href=\"https://crates.io/crates/ascii\" rel=\"nofollow noreferrer\">ascii crate</a>. If this is the case. Having a type that denotes ASCII-ness is a good thing."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 4, "last_activity_date": 1438675757, "creation_date": 1438675757, "answer_id": 31803943, "question_id": 31799482, "link": "https://stackoverflow.com/questions/31799482/efficiently-extract-prefix-substrings/31803943#31803943", "title": "Efficiently extract prefix substrings", "body": "<p>While Shepmaster's answer is absolutely correct for the general case of string slicing, I'd like to add that sometimes there are easier ways.</p>\n\n<p>If you know in advance the set of characters you're working with (\"ATGC\" example suggests you're working with nucleobases, so it is possible that these are all the characters you need) then you can use slices of bytes <code>&amp;[u8]</code> instead of string slices <code>&amp;str</code>. You can always get a byte slice out of a string slice and a <code>Vec&lt;u8&gt;</code> out of a <code>String</code>, if necessary:</p>\n\n<pre><code>let s: String = \"ATGC\".into();\nlet ss: &amp;str = &amp;s;\n\nlet b: Vec&lt;u8&gt; = s.into_bytes();\nlet bs: &amp;[u8] = ss.as_slice();\n</code></pre>\n\n<p>Also, there are byte slice and byte character literals, just prefix regular string/char literals with <code>b</code>:</p>\n\n<pre><code>let sl: &amp;[u8] = b\"ATGC\";\nlet bl: u8 = b'G'; \n</code></pre>\n\n<p>Working with byte slices give you constant-time indexing (and thus slicing) operations, so checking for prefix equality is easy (like Shepmaster's first variant but without possibility of panics (unless <code>k</code> is too large):</p>\n\n<pre><code>fn prefix(s: &amp;[u8], k: usize) -&gt; &amp;[u8] {\n    &amp;s[..k]\n}\n</code></pre>\n\n<p>If you need, you can turn byte slices/vectors back to strings. This operation, of course, checks validity of UTF-8 encoding so it may fail, but if you only work with ASCII, you can safely ignore these errors and just <code>unwrap()</code>:</p>\n\n<pre><code>let ss2: &amp;str = str::from_utf8(bs).unwrap();\nlet s2: String = String::from_utf8(b).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1286, "favorite_count": 0, "accepted_answer_id": 31799616, "answer_count": 2, "score": 2, "last_activity_date": 1438698231, "creation_date": 1438653306, "last_edit_date": 1438655455, "question_id": 31799482, "link": "https://stackoverflow.com/questions/31799482/efficiently-extract-prefix-substrings", "title": "Efficiently extract prefix substrings", "body": "<p>Currently I'm using the following function to extract prefix substrings:</p>\n\n<pre><code>fn prefix(s: &amp;String, k: usize) -&gt; String {\n    s.chars().take(k).collect::&lt;String&gt;()\n}\n</code></pre>\n\n<p>This can then be used for comparisons like so:</p>\n\n<pre><code>let my_string = \"ACGT\".to_string();\nlet same = prefix(&amp;my_string, 3) == prefix(&amp;my_string, 2);\n</code></pre>\n\n<p>However, this allocates a new <code>String</code> for each call to <code>prefix</code>, in addition to the processing for the iteration. Most other languages I'm familiar with have an efficient way to do a comparison like this, using just a view of the strings. Is there a way in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438647753, "post_id": 31798737, "comment_id": 51524974, "body": "Please make sure to read <a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>. It covers lots of introductory topics."}, {"owner": {"reputation": 667, "user_id": 4055832, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aqOJT.jpg?s=128&g=1", "display_name": "Nsukami _", "link": "https://stackoverflow.com/users/4055832/nsukami"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1438666854, "post_id": 31798737, "comment_id": 51529585, "body": "@Shepmaster, spent some time reading about <a href=\"http://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\">swap</a> and <a href=\"http://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\">replace</a> but not sure if what I need here."}], "answers": [{"comments": [{"owner": {"reputation": 2370, "user_id": 1201238, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/515eecfda83a2212e6782833d491352e?s=128&d=identicon&r=PG", "display_name": "No_name", "link": "https://stackoverflow.com/users/1201238/no-name"}, "edited": false, "score": 2, "creation_date": 1499100765, "post_id": 31798797, "comment_id": 76759157, "body": "can you elaborate on when someone would want to change things in place vs re-binding the variables? Also, what&#39;s wrong with creating new bindings? Not efficient?"}, {"owner": {"reputation": 25199, "user_id": 237105, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/a6e329efbf7cdfd89d8f1f5b5d05896d?s=128&d=identicon&r=PG", "display_name": "Antony Hatchkins", "link": "https://stackoverflow.com/users/237105/antony-hatchkins"}, "reply_to_user": {"reputation": 2370, "user_id": 1201238, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/515eecfda83a2212e6782833d491352e?s=128&d=identicon&r=PG", "display_name": "No_name", "link": "https://stackoverflow.com/users/1201238/no-name"}, "edited": false, "score": 0, "creation_date": 1566536273, "post_id": 31798797, "comment_id": 101694358, "body": "@No_name You can&#39;t re-bind in a loop (well, you can, but the new values will be lost on the next iteration). So for example it can&#39;t be (directly) used for calculating the factorial."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 37, "last_activity_date": 1605385249, "last_edit_date": 1605385249, "creation_date": 1438647684, "answer_id": 31798797, "question_id": 31798737, "link": "https://stackoverflow.com/questions/31798737/how-to-swap-two-variables/31798797#31798797", "title": "How to swap two variables?", "body": "<p>When swapping variables, the most likely thing you want is to create new <em>bindings</em> for <code>a</code> and <code>b</code>.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let (a, b) = (1, 2);\n    let (b, a) = (a, a + b);\n}\n</code></pre>\n<p>However, in your actual case, there isn't a nice solution in stable Rust. When you do as above, you always create new bindings for <code>a</code> and <code>b</code>, but your case wants to <em>modify</em> the existing bindings. One solution I know of is to use a temporary:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn fibonacci(n: u64) -&gt; u64 {\n    if n &lt; 2 {\n        return n;\n    }\n    let mut fib_prev = 1;\n    let mut fib = 1;\n    for _ in 2..n {\n        let next = fib + fib_prev;\n        fib_prev = fib;\n        fib = next;\n    }\n    fib\n}\n</code></pre>\n<p>You could also make it so that you mutate the tuple:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn fibonacci(n: u64) -&gt; u64 {\n    if n &lt; 2 {\n        return n;\n    }\n    let mut fib = (1, 1);\n    for _ in 2..n {\n        fib = (fib.1, fib.0 + fib.1);\n    }\n    fib.1\n}\n</code></pre>\n<p>In <em>nightly</em> Rust, you can use <a href=\"https://github.com/rust-lang/rust/issues/71126\" rel=\"noreferrer\">destructuring assignment</a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(destructuring_assignment)]\n\nfn fibonacci(n: u64) -&gt; u64 {\n    if n &lt; 2 {\n        return n;\n    }\n    let mut fib_prev = 1;\n    let mut fib = 1;\n    for _ in 2..n {\n        (fib_prev, fib) = (fib, fib + fib_prev);\n    }\n    fib\n}\n</code></pre>\n<p>You may also be interested in swapping the contents of two pieces of memory. 99+% of the time, you want to re-bind the variables, but a very small amount of time you want to change things &quot;in place&quot;:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let (mut a, mut b) = (1, 2);\n    std::mem::swap(&amp;mut a, &amp;mut b);\n\n    println!(&quot;{:?}&quot;, (a, b));\n}\n</code></pre>\n<p>Note that it's not concise to do this swap and add the values together in one step.</p>\n<p>For a very concise implementation of the Fibonacci sequence that returns an iterator:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn fib() -&gt; impl Iterator&lt;Item = u128&gt; {\n    let mut state = [1, 1];\n    std::iter::from_fn(move || {\n        state.swap(0, 1);\n        let next = state.iter().sum();\n        Some(std::mem::replace(&amp;mut state[1], next))\n    })\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/34304341/155423\">Can I destructure a tuple without binding the result to a new variable in a let/match/for statement?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27098694/155423\">How can I swap in a new value for a field in a mutable reference to a structure?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 8, "last_activity_date": 1476383772, "last_edit_date": 1476383772, "creation_date": 1438722203, "answer_id": 31819277, "question_id": 31798737, "link": "https://stackoverflow.com/questions/31798737/how-to-swap-two-variables/31819277#31819277", "title": "How to swap two variables?", "body": "<p>In addition, a better way to implement the Fibonacci sequence in Rust is using the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"noreferrer\"><code>Iterator</code></a> trait:</p>\n\n<pre><code>// Iterator data structure\nstruct FibIter(u32, u32);\n\n// Iterator initialization function\nfn fib() -&gt; FibIter {\n    FibIter(0u32, 1u32)\n}\n\n// Iterator trait implementation\nimpl Iterator for FibIter {\n    type Item = u32;\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        *self = FibIter(self.1, self.1 + self.0);\n        Some(self.0)\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", fib().take(15).collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>See <em>The Rust Programming Language</em> <a href=\"https://doc.rust-lang.org/stable/book/iterators.html\" rel=\"noreferrer\">chapter on iterators</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 6, "creation_date": 1575241043, "post_id": 59126948, "comment_id": 104489566, "body": "It&#39;s probably not mentioned because it&#39;s a trick that assumes <a href=\"https://rust.godbolt.org/z/yDHv9w\" rel=\"nofollow noreferrer\">registers are more valuable than instructions</a> (they aren&#39;t), and trades readability for a smug sense of superiority. It&#39;s a brainteaser, not something you should ever write in real code. Furthermore, this doesn&#39;t even really solve the OP&#39;s problem; as Shepmaster&#39;s answer points out, it&#39;s not concise to do the addition and swap in one step, as OP&#39;s Python code does (even if you just use <code>mem::swap</code>)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1575247952, "post_id": 59126948, "comment_id": 104490824, "body": "To avoid falling into the same trap, I should say registers <i>probably</i> aren&#39;t more valuable than instructions. The point is that you need to know a lot about the computer that will be running your program in order to make intelligent decisions about whether XOR-swap is ever &quot;better&quot; than using a temporary, so if unsure, you should stick with the code that&#39;s dead simple."}, {"owner": {"reputation": 648, "user_id": 3811791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/649e85a70c38c5c3b44ea97f82c9e36c?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander Revo", "link": "https://stackoverflow.com/users/3811791/alexander-revo"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1575267179, "post_id": 59126948, "comment_id": 104494760, "body": "Thanks for the comparison, and it&#39;s a fair point that just using a temporary gets optimized better than a XOR-swap; noted in the answer. However, it&#39;s not any more of a brainteaser than any other algorithm, and it still has valid use cases, such as cryptographic systems. Also, in order to make an informed decision on which algorithm to choose, you first need to know that they exist."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1575285342, "post_id": 59126948, "comment_id": 104502518, "body": "How is it <i>not</i> a brainteaser? You need to have seen it before to have any hope of knowing what it does. It has a subtle gotcha (albeit one that is mostly mitigated by the semantics of <code>&amp;mut</code> references, as you note). It has a simple and obvious alternative that any fool can read and is faster. You&#39;d be a fool to ever do an XOR-swap in real code, except <i>maybe</i> on a register starved architecture (and then only after profiling to prove it even makes a difference)."}, {"owner": {"reputation": 648, "user_id": 3811791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/649e85a70c38c5c3b44ea97f82c9e36c?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander Revo", "link": "https://stackoverflow.com/users/3811791/alexander-revo"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1575358092, "post_id": 59126948, "comment_id": 104528994, "body": "Either way I&#39;m not sure why you are so triggered by this answer, especially since I&#39;ve already added the note that the simple temp-variable swap is better to be used in the real-life code."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1575393688, "post_id": 59126948, "comment_id": 104548909, "body": "A Feistel cipher does basically <code>a, b = b, a ^ f(b)</code>, which still derives no advantage from XOR- swapping (for non-trivial f). I&#39;m unaware of any real-world algorithm for which XOR-swap is useful. In my opinion it&#39;s mostly just something people use to show off how clever they are. I appreciate you editing the answer, however."}, {"owner": {"reputation": 648, "user_id": 3811791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/649e85a70c38c5c3b44ea97f82c9e36c?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander Revo", "link": "https://stackoverflow.com/users/3811791/alexander-revo"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1575529678, "post_id": 59126948, "comment_id": 104599169, "body": "What I meant is that Feistel cipher relies on the same property of the XOR operation that XOR-swap is based upon - that if <code>a = b ^ c</code>, then <code>b = a ^ c</code>. IMO understanding XOR-swap is useful for understanding how other algorithms work, even if you don&#39;t ever use the XOR-swap itself."}], "tags": [], "owner": {"reputation": 648, "user_id": 3811791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/649e85a70c38c5c3b44ea97f82c9e36c?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander Revo", "link": "https://stackoverflow.com/users/3811791/alexander-revo"}, "is_accepted": false, "score": 1, "last_activity_date": 1575266582, "last_edit_date": 1575266582, "creation_date": 1575213935, "answer_id": 59126948, "question_id": 31798737, "link": "https://stackoverflow.com/questions/31798737/how-to-swap-two-variables/59126948#59126948", "title": "How to swap two variables?", "body": "<p>I'm surprised none of the answers mention the <a href=\"https://en.wikipedia.org/wiki/XOR_swap_algorithm\" rel=\"nofollow noreferrer\">XOR-swap</a>:</p>\n\n<pre><code>fibPrev ^= fib;\nfib ^= fibPrev;\nfibPrev ^= fib;\n</code></pre>\n\n<p>This is a well-known way to swap two values without using a temporary variable or risking integer overflow.</p>\n\n<p>Note that with modern optimizing compilers, in most cases it's better from performance standpoint to just use a temporary variable (see link in the comment by trentcl). There are, however, some use cases for the XOR-swap, the linked Wikipedia article provides a decent overview of its pros and cons.</p>\n\n<p>Interestingly enough, if you were to implement a XOR-swap as a function in rust, you don't need to check if you're trying to swap a variable with itself (in which case you'll end up with it being set to zero due to the properties of a XOR operation). Compare swap implementations in rust:</p>\n\n<pre><code>fn swap(a: &amp;mut i32, b: &amp;mut i32) {\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n</code></pre>\n\n<p>and C++:</p>\n\n<pre><code>void swap(int&amp; a, int&amp; b) {\n    if (&amp;a == &amp;b) return; // Avoid swapping the variable with itself\n    a ^= b;\n    b ^= a;\n    a ^= b;\n}\n</code></pre>\n\n<p>If you try to call swap like this in rust:</p>\n\n<pre><code>let mut a = 42;\nswap(&amp;mut a, &amp;mut a);\n</code></pre>\n\n<p>You will get a compilation error:</p>\n\n<pre><code>error[E0499]: cannot borrow `a` as mutable more than once at a time\n  --&gt; src/main.rs:27:18\n   |\n27 |     swap(&amp;mut a, &amp;mut a);\n   |     ---- ------  ^^^^^^ second mutable borrow occurs here\n   |     |    |\n   |     |    first mutable borrow occurs here\n   |     first borrow later used by call\n</code></pre>\n"}], "owner": {"reputation": 667, "user_id": 4055832, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aqOJT.jpg?s=128&g=1", "display_name": "Nsukami _", "link": "https://stackoverflow.com/users/4055832/nsukami"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12486, "favorite_count": 5, "accepted_answer_id": 31798797, "answer_count": 3, "score": 28, "last_activity_date": 1605385249, "creation_date": 1438647204, "last_edit_date": 1476383631, "question_id": 31798737, "link": "https://stackoverflow.com/questions/31798737/how-to-swap-two-variables", "title": "How to swap two variables?", "body": "<p>What is the closest equivalent Rust code to this Python code?</p>\n\n<pre><code>a, b = 1, 2\na, b = b, a + b\n</code></pre>\n\n<p>I am trying to write an iterative Fibonacci function. I have Python code I want to convert to Rust. Everything is fine, except for the swap part.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def fibonacci(n):\n    if n &lt; 2:\n        return n\n    fibPrev = 1\n    fib = 1\n    for num in range(2, n):\n        fibPrev, fib = fib, fib + fibPrev\n    return fib\n</code></pre>\n"}, {"tags": ["rust", "readline"], "comments": [{"owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 0, "creation_date": 1438723182, "post_id": 31798354, "comment_id": 51564055, "body": "A few of us have written readline wrappers. Mine <a href=\"https://github.com/shaleh/readline\" rel=\"nofollow noreferrer\">github.com/shaleh/readline</a> is much easier to use for the common cases."}, {"owner": {"reputation": 239, "user_id": 5133587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/445bcc7c806b0c782a93e375d4ecbe51?s=128&d=identicon&r=PG&f=1", "display_name": "EchoLynx", "link": "https://stackoverflow.com/users/5133587/echolynx"}, "reply_to_user": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 0, "creation_date": 1438738772, "post_id": 31798354, "comment_id": 51568705, "body": "@SeanPerry, did you mean <a href=\"https://github.com/shaleh/rust-readline\" rel=\"nofollow noreferrer\">github.com/shaleh/rust-readline</a>? That does look a lot simpler. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1438646281, "creation_date": 1438646281, "answer_id": 31798606, "question_id": 31798354, "link": "https://stackoverflow.com/questions/31798354/converting-readlines-readlinebytes-to-strings/31798606#31798606", "title": "Converting readline&#39;s ReadlineBytes to Strings", "body": "<p>Match arms all have to return the same type. Look at your error message again:</p>\n\n<pre><code>main.rs:18:9: 22:10 error: match arms have incompatible types:\n expected `fn(i32) -&gt; ! {std::process::exit}`,\n    found `()`\n(expected fn item,\n    found ()) [E0308]\n</code></pre>\n\n<p>One of your match arms is returning <code>()</code>, the other is returning the type <code>fn(i32) -&gt; ! {std::process::exit}</code> \u2014 a function. </p>\n\n<p>Look at your code:</p>\n\n<pre><code>\"exit\"  =&gt; std::process::exit,\n</code></pre>\n\n<p>You aren't <em>calling</em> <code>exit</code>, you are just returning a reference to it.</p>\n"}], "owner": {"reputation": 239, "user_id": 5133587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/445bcc7c806b0c782a93e375d4ecbe51?s=128&d=identicon&r=PG&f=1", "display_name": "EchoLynx", "link": "https://stackoverflow.com/users/5133587/echolynx"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 31798606, "answer_count": 1, "score": 0, "last_activity_date": 1438699784, "creation_date": 1438644504, "last_edit_date": 1438699784, "question_id": 31798354, "link": "https://stackoverflow.com/questions/31798354/converting-readlines-readlinebytes-to-strings", "title": "Converting readline&#39;s ReadlineBytes to Strings", "body": "<p>I am trying to create a program with a readline-powered command prompt.</p>\n\n<p>I am using <a href=\"https://crates.io/crates/readline\" rel=\"nofollow\">this</a> crate.</p>\n\n<pre><code>readline = \"0.0.11\"\n</code></pre>\n\n<p>This is the example from the repository. (Link to repository is on the crate's page.)</p>\n\n<pre><code>#![cfg(not(test))]\n\nextern crate readline;\n\nuse readline::readline;\n\nuse std::ffi::CString;\nuse std::io::Write;\nuse std::io;\n\nfn main() {\n    let prompt = CString::new(\"user&gt; \").unwrap();\n    let mut stdout = io::stdout();\n    while let Ok(s) = readline(&amp;prompt) {\n        stdout.write_all(s.to_bytes()).unwrap();\n        stdout.write_all(b\"\\n\").unwrap();\n    }\n    stdout.write_all(b\"\\n\").unwrap();\n}\n</code></pre>\n\n<p>I am trying to convert <code>s</code> from a <code>readline::common::ReadlineBytes</code> to a <code>std::string::String</code> so I can <code>match</code> on it like this.</p>\n\n<pre><code>while let Ok(s) = readline(&amp;prompt){\n    let command = str::from_utf8(&amp;s.to_bytes()).unwrap();\n    match command {\n        \"exit\"  =&gt; std::process::exit,\n        \"again\" =&gt; break,\n        _ =&gt; println!(\"error\")\n    }\n    println!(\"{}\", command);\n}\n</code></pre>\n\n<p>But I keep getting this error:</p>\n\n<pre><code>main.rs:18:9: 22:10 error: match arms have incompatible types:\n expected `fn(i32) -&gt; ! {std::process::exit}`,\n    found `()`\n(expected fn item,\n    found ()) [E0308]\nmain.rs:18         match command {\nmain.rs:19             \"exit\"  =&gt; std::process::exit,\nmain.rs:20             \"again\" =&gt; break,\nmain.rs:21             _ =&gt; println!(\"error\")\nmain.rs:22         }\nnote: in expansion of while let expansion\nmain.rs:16:5: 24:6 note: expansion site\nmain.rs:18:9: 22:10 help: run `rustc --explain E0308` to see a detailed explanation\nmain.rs:21:18: 21:35 note: match arm with an incompatible type\nmain.rs:21             _ =&gt; println!(\"error\")\n                            ^~~~~~~~~~~~~~~~~\nnote: in expansion of while let expansion\nmain.rs:16:5: 24:6 note: expansion site\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2840, "user_id": 709010, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7550d19d9a0b58c9d4b8a16eb1ebb523?s=128&d=identicon&r=PG", "display_name": "Jared", "link": "https://stackoverflow.com/users/709010/jared"}, "edited": false, "score": 3, "creation_date": 1438642066, "post_id": 31797769, "comment_id": 51523536, "body": "So in summary, <code>&amp;cmd[1][..]</code> translates to English as &quot;every character in the String at index 1 of <code>cmd</code> as a string slice&quot;?"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 2, "creation_date": 1516679979, "post_id": 31797769, "comment_id": 83775550, "body": "yep - that&#39;s accurate! &quot;take a slice from the start of <code>cmd[1]</code> to the end of <code>cmd[1]</code>, inclusive&quot;"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 9, "last_activity_date": 1438640752, "creation_date": 1438640752, "answer_id": 31797769, "question_id": 31797599, "link": "https://stackoverflow.com/questions/31797599/what-does-the-two-periods-operator-mean-in-the-context-of-a-subscript-inside-o/31797769#31797769", "title": "What does the &quot;two periods&quot; operator mean in the context of a subscript inside of square brackets?", "body": "<p>This is just a way to explicitly coerce from <code>String</code> to <code>&amp;str</code>. In this case, the <code>[..]</code> is actually unnecessary as <code>Deref</code> coercions means that <code>parse_name(&amp;args[1])</code> is valid too: <code>&amp;String</code> will borrow to <code>&amp;str</code> implicitly.</p>\n\n<p>The <code>[ ]</code> indexing operator is calling the <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"noreferrer\"><code>std::ops::Index</code></a> trait, and the <code>..</code> syntax is creating <a href=\"http://doc.rust-lang.org/std/ops/struct.RangeFull.html\" rel=\"noreferrer\">a <code>std::ops::RangeFull</code> value</a>. <code>cmd</code> is a <code>Vec&lt;String&gt;</code>, since <code>std::env::args()</code> returns <a href=\"http://doc.rust-lang.org/stable/std/env/struct.Args.html\" rel=\"noreferrer\">an <code>Iterator</code> over <code>String</code>s</a>.</p>\n\n<p>Hence, the <code>foo[..]</code> syntax is calling the implementation of <code>Index&lt;RangeFull&gt;</code> for <code>String</code> (which you can see in the list of Implementors on the <code>Index</code> page). The <a href=\"https://github.com/rust-lang/rust/blob/d877e6540431d99b0945a3d27eeb466b0d693902/src/libcollections/string.rs#L974-L981\" rel=\"noreferrer\">implementation</a> looks like:</p>\n\n<pre><code>impl ops::Index&lt;ops::RangeFull&gt; for String {\n    type Output = str;\n\n    #[inline]\n    fn index(&amp;self, _index: ops::RangeFull) -&gt; &amp;str {\n        unsafe { mem::transmute(&amp;*self.vec) }\n    }\n}\n</code></pre>\n\n<p>The <code>&amp;*self.vec</code> is borrowing the <code>String</code>'s internal <code>Vec&lt;u8&gt;</code> to <code>&amp;[u8]</code>, and then the <code>transmute</code> is explicitly casting that to a <code>&amp;str</code>, which is safe because <code>String</code>'s API ensures that the internal <code>Vec&lt;u8&gt;</code> is valid UTF-8, which is what <code>str</code> requires.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 13, "last_activity_date": 1553262343, "last_edit_date": 1553262343, "creation_date": 1438641300, "answer_id": 31797846, "question_id": 31797599, "link": "https://stackoverflow.com/questions/31797599/what-does-the-two-periods-operator-mean-in-the-context-of-a-subscript-inside-o/31797846#31797846", "title": "What does the &quot;two periods&quot; operator mean in the context of a subscript inside of square brackets?", "body": "<p>Two periods (<code>..</code>) is the <em>range operator</em>. You can find this in the <a href=\"https://doc.rust-lang.org/book/appendix-02-operators.html\" rel=\"noreferrer\">Operators and Symbols Appendix</a> of the Rust book. There are six flavors:</p>\n\n<ol>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"noreferrer\"><code>Range</code></a>: <code>1..10</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"noreferrer\"><code>RangeFrom</code></a>: <code>1..</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeTo.html\" rel=\"noreferrer\"><code>RangeTo</code></a>: <code>..10</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFull.html\" rel=\"noreferrer\"><code>RangeFull</code></a>: <code>..</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html\" rel=\"noreferrer\"><code>RangeInclusive</code></a>: <code>1..=10</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html\" rel=\"noreferrer\"><code>RangeToInclusive</code></a>: <code>..=10</code></li>\n</ol>\n\n<p>When no item occupies an end position, the range goes on \"forever\" in that direction. </p>\n\n<p>This combines with the <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"noreferrer\"><code>Index</code></a> trait (or <a href=\"https://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"noreferrer\"><code>IndexMut</code></a>, if mutation is required). In your example, you have a string slice (kind of, see next point) that you are applying indexing to: <code>\"foo\"[2..]</code>.</p>\n\n<p>Specifically, <code>&amp;str</code> implements <code>Index</code> as</p>\n\n<blockquote>\n  <p>Returns a slice of the given string from the byte range</p>\n</blockquote>\n\n<p>Then there's a <em>third</em> bit of ergonomics happening: <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> (or <a href=\"https://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"noreferrer\"><code>DerefMut</code></a> in similar cases). <a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noreferrer\"><code>String</code></a> implements <code>Deref</code> by returning a <code>&amp;str</code>, so any method available to a <code>&amp;str</code> is available to a <code>String</code>. </p>\n"}], "owner": {"reputation": 2840, "user_id": 709010, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7550d19d9a0b58c9d4b8a16eb1ebb523?s=128&d=identicon&r=PG", "display_name": "Jared", "link": "https://stackoverflow.com/users/709010/jared"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4212, "favorite_count": 3, "answer_count": 2, "score": 11, "last_activity_date": 1553262343, "creation_date": 1438639728, "last_edit_date": 1553262217, "question_id": 31797599, "link": "https://stackoverflow.com/questions/31797599/what-does-the-two-periods-operator-mean-in-the-context-of-a-subscript-inside-o", "title": "What does the &quot;two periods&quot; operator mean in the context of a subscript inside of square brackets?", "body": "<p>I was looking through Rust's source code to better acquaint myself with the language. I came across this snippet.</p>\n\n<pre><code>// Collect program arguments as a Vec&lt;String&gt;.\nlet cmd: Vec&lt;_&gt; = env::args().collect();\n\n// Some unrelated code omitted here.\n\nmatch subcommand::parse_name(&amp;cmd[1][..]) {\n    // It did some stuff here.\n}\n</code></pre>\n\n<p>I didn't understand the <code>[..]</code>. So, I went and checked out the declaration of <code>parse_name</code>:</p>\n\n<pre><code>pub fn parse_name(name: &amp;str) -&gt; Option&lt;Box&lt;Subcommand&gt;&gt;\n</code></pre>\n\n<p>It's what I expected, but I still don't get the <code>[..]</code>. What does it mean in this context? Isn't it just passing the first <code>String</code> in <code>cmd</code> as a <code>&amp;str</code>? If so, is this equivalent to just writing <code>cmd[1]</code>? Why did they do it this way?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "edited": false, "score": 1, "creation_date": 1438629267, "post_id": 31794895, "comment_id": 51517853, "body": "Ok, I understand the design. However, is there any help with the design of the structs that needs to reference to itself? How can I redesign my struct to fulfill this need?"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 1, "last_activity_date": 1438628764, "last_edit_date": 1495541677, "creation_date": 1438628764, "answer_id": 31794895, "question_id": 31794503, "link": "https://stackoverflow.com/questions/31794503/initialize-a-field-of-a-struct-using-another-field-of-the-same-struct/31794895#31794895", "title": "Initialize a field of a struct using another field of the same struct", "body": "<blockquote>\n  <p>How can I do it?</p>\n</blockquote>\n\n<p>You can't. Unless I misunderstand your question, this is the same problem as <a href=\"https://stackoverflow.com/questions/25269597/how-to-initialize-struct-fields-which-reference-each-other\">this one</a>. Structs generally cannot have references into themselves.</p>\n"}, {"comments": [{"owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "edited": false, "score": 0, "creation_date": 1438662217, "post_id": 31795270, "comment_id": 51528147, "body": "I&#39;m not asking for spliting the strings, and I think there&#39;re cases that you&#39;ll need to reference yourself in the struct."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": -1, "last_activity_date": 1438630095, "creation_date": 1438630095, "answer_id": 31795270, "question_id": 31794503, "link": "https://stackoverflow.com/questions/31794503/initialize-a-field-of-a-struct-using-another-field-of-the-same-struct/31795270#31795270", "title": "Initialize a field of a struct using another field of the same struct", "body": "<p>I think you're making things overly complicated. Splitting a string at specific chars can be done with:</p>\n\n<pre><code>let s: String = \"Tiger in the snow\".into();\nfor e in s.split(|c| c == 'e') {\n    println!(\"{}\", e);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Tig\nr in th\n snow\n</code></pre>\n\n<p>There are several variations of the split function to suit various needs.</p>\n"}], "owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1681, "favorite_count": 0, "closed_date": 1439692449, "accepted_answer_id": 31794895, "answer_count": 2, "score": 0, "last_activity_date": 1520630377, "creation_date": 1438627298, "last_edit_date": 1520630377, "question_id": 31794503, "link": "https://stackoverflow.com/questions/31794503/initialize-a-field-of-a-struct-using-another-field-of-the-same-struct", "closed_reason": "Duplicate", "title": "Initialize a field of a struct using another field of the same struct", "body": "<p>Below I have a struct <code>SplitByChars</code>. </p>\n\n<pre><code>struct SplitByChars&lt;'a&gt; {\n    seperator: &amp;'a Seperator,\n    string: String,\n    chars_iter: std::str::Chars&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; SplitByChars&lt;'a&gt; {\n    fn new&lt;S&gt;(seperator: &amp;'a Seperator, string: S) -&gt; SplitByChars where S: Into&lt;String&gt; {\n        SplitByChars {\n            seperator: seperator,\n            string: string.into(),\n            chars_iter: self.string.chars(), // ERROR: I cannot use self here!\n        }\n    }\n}\n</code></pre>\n\n<p>I am trying to implement a <code>new</code> static function for it. In particular, I would like to return a <code>SplitByChars</code> instance whose <code>chars_iter</code> field is initialized using the previously initialized <code>string</code> field of the same instance. To do that, I am currently trying to access the same field using <code>self.string</code>, but I am getting an error.</p>\n\n<p>How can I do it?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "edited": false, "score": 0, "creation_date": 1438613774, "post_id": 31790411, "comment_id": 51509134, "body": "Does <code>if let Some(mut state) = self.states.get_mut(state_id) {</code> help?"}, {"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "reply_to_user": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "edited": false, "score": 0, "creation_date": 1438613953, "post_id": 31790411, "comment_id": 51509230, "body": "Nope, tried that already. Oh, and I got it working using <code>RefCell</code>s, but I&#39;d rather not use them because they are slower, and could easily panic if I&#39;m not extremely careful."}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "edited": false, "score": 0, "creation_date": 1438614275, "post_id": 31790411, "comment_id": 51509448, "body": "You seem to want interior mutability then. <a href=\"https://play.rust-lang.org/?gist=7f4cf297788faca19d75&amp;version=stable\" rel=\"nofollow noreferrer\">Playpen example</a>"}, {"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "reply_to_user": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "edited": false, "score": 0, "creation_date": 1438614341, "post_id": 31790411, "comment_id": 51509488, "body": "Yeah, I was just hoping there was a static solution. =("}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "edited": false, "score": 1, "creation_date": 1438614440, "post_id": 31790411, "comment_id": 51509549, "body": "It would be possible if you weren&#39;t using <code>Rc</code>, but even <a href=\"http://doc.rust-lang.org/nightly/std/rc/#examples\" rel=\"nofollow noreferrer\">the <code>Rc</code> documentation</a> uses <code>RefCell</code>s for interior mutability."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438615359, "post_id": 31790411, "comment_id": 51510125, "body": "yea this has nothing todo with <code>HashMap</code>. Rust cannot reason about the mutability of an <code>Rc</code>&#39;s inner value, therefor it forbids mutation as long as the <code>Rc</code> is not unique. You can use <code>get_mut</code> if there&#39;s only a single reference. But then you might as well drop the <code>Rc</code> alltogether"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438621054, "post_id": 31790411, "comment_id": 51513617, "body": "Your error message references code that you don&#39;t include."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1438698199, "post_id": 31790411, "comment_id": 51549127, "body": "@Shien: For a static solution, you need to forego aliasing; do you actually need <code>Rc</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1438626021, "last_edit_date": 1438626021, "creation_date": 1438620105, "answer_id": 31792555, "question_id": 31790411, "link": "https://stackoverflow.com/questions/31790411/how-to-get-mutable-struct-from-hashmap/31792555#31792555", "title": "How to get mutable struct from HashMap?", "body": "<p>A fundamental idea in Rust is: <strong>either Aliasing or Mutability, but not both.</strong></p>\n\n<p>Aliasing means having multiple active pointers to the same value.</p>\n\n<p>What is <code>Rc&lt;T&gt;</code>? It's sharing ownership, aliasing a value. Thus <code>Rc&lt;T&gt;</code> does not allow mutating the value inside.</p>\n\n<p>There is a way around this with <code>Rc</code>, to use <strong>interior mutability</strong> with types like either <code>Cell&lt;U&gt;</code> or <code>RefCell&lt;U&gt;</code>.</p>\n\n<p>(If you write a multithreaded program, you'd use <code>Arc</code> for thread safe shared ownership / aliasing, and you could use <code>Mutex&lt;U&gt;</code> for thread safe interior mutability instead.)</p>\n\n<ul>\n<li><p><code>Rc&lt;Cell&lt;U&gt;&gt;</code> allows mutating <code>U</code> by only allowing write-in and read-out, but no pointers to the inner <code>U</code> value. No pointers, no aliasing!</p></li>\n<li><p><code>Rc&lt;RefCell&lt;U&gt;&gt;</code> allows mutating by the method <code>.borrow_mut()</code> that will keep a borrow count at runtime and dynamically make sure that any mutable borrow is exclusive. No aliasing, you have mutability!</p></li>\n</ul>\n\n<p>Links</p>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/nightly/book/choosing-your-guarantees.html#cell-types\" rel=\"noreferrer\">Rust Book: Choosing your guarantees (Cell types)</a></li>\n<li>A look back in Rust's history: <a href=\"http://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/\" rel=\"noreferrer\">Imagine Never Hearing the Phrase \u2018Aliasable, Mutable\u2019 Again (2012)</a></li>\n</ul>\n"}], "owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1315, "favorite_count": 1, "accepted_answer_id": 31792555, "answer_count": 1, "score": 2, "last_activity_date": 1438626021, "creation_date": 1438613455, "question_id": 31790411, "link": "https://stackoverflow.com/questions/31790411/how-to-get-mutable-struct-from-hashmap", "title": "How to get mutable struct from HashMap?", "body": "<p>I have a hashmap for all my states, which is a <code>HashMap&lt;String, Rc&lt;State&gt;&gt;</code>, and I want to call the current state's member <code>fn init(&amp;mut self)</code>. But I'm getting an error with the following code:</p>\n\n<pre><code>...\nif let Some(state) = self.states.get_mut(state_id) {\n    (*state).init();\n}\n...\n</code></pre>\n\n<p>Here's the error:</p>\n\n<pre><code>src/main.rs:70:25: 70:33 error: cannot borrow immutable borrowed content as mutable\nsrc/main.rs:70                         (*state).shutdown();`\n</code></pre>\n\n<p>afaict from the documentation, the problem is that <code>get_mut</code> returns a mutable reference to the state, not a reference to a mutable state. So how would I get a reference to a mutable state?</p>\n"}, {"tags": ["lambda", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 3, "last_activity_date": 1438604265, "creation_date": 1438604265, "answer_id": 31787087, "question_id": 31786924, "link": "https://stackoverflow.com/questions/31786924/pass-function-as-argument-to-another-function/31787087#31787087", "title": "Pass function as argument to another function", "body": "<p>The following function signature is probably the simplest one that works:</p>\n\n<pre><code>fn call&lt;F: FnOnce(i32, i32) -&gt; i32&gt;(f: F, x: i32) -&gt; i32 {\n    ...\n</code></pre>\n\n<p>There is also a <a href=\"https://doc.rust-lang.org/book/closures.html#taking-closures-as-arguments\" rel=\"nofollow\">section in the book</a> that describes this.</p>\n"}], "owner": {"reputation": 133, "user_id": 2530950, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lmtd9.jpg?s=128&g=1", "display_name": "Volodymyr Prokopyuk", "link": "https://stackoverflow.com/users/2530950/volodymyr-prokopyuk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1182, "favorite_count": 0, "accepted_answer_id": 31787087, "answer_count": 1, "score": 2, "last_activity_date": 1438641512, "creation_date": 1438603820, "last_edit_date": 1438641512, "question_id": 31786924, "link": "https://stackoverflow.com/questions/31786924/pass-function-as-argument-to-another-function", "title": "Pass function as argument to another function", "body": "<p>I want to pass a function as argument to another function:</p>\n\n<pre><code>fn call(f: | i32, i32 | -&gt; i32, x: i32) -&gt; i32 {\n  f(x, x)\n}\n\nfn main() {\n  let res = call(| x, y | { x + y }, 4);\n  println!(\"{}\", res);\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre><code>main.rs:1:12: 1:13 error: expected type, found `|`\nmain.rs:1 fn call(f: | i32, i32 | -&gt; i32, x: i32) -&gt; i32 {\n</code></pre>\n\n<p>What is the correct way to annotate function argument that is another function?</p>\n"}, {"tags": ["vector", "rust", "swap", "undefined-behavior"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1438573074, "post_id": 31778955, "comment_id": 51488003, "body": "A very well defined behaviour: Syntax error! I think you missed a couple semicolons on the unsafe block... :D"}], "answers": [{"comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1438580007, "post_id": 31779406, "comment_id": 51489697, "body": "The actual problem is I want to take two sorted vectors v and w and without creating a new vector (although I may reserve more space for v) merge w into v. It would be nice if the type doesn&#39;t necessarily need to implement Default."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1438609509, "post_id": 31779406, "comment_id": 51506169, "body": "Don&#39;t swap with locations you can&#39;t safely read from. If the location is uninitialized, you can <code>ptr::write</code> to it, but not swap with it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1438575811, "last_edit_date": 1592644375, "creation_date": 1438575811, "answer_id": 31779406, "question_id": 31778955, "link": "https://stackoverflow.com/questions/31778955/is-it-undefined-in-rust-to-temporarily-swap-uninitialized-values-into-a-vector/31779406#31779406", "title": "Is it undefined in Rust to temporarily swap uninitialized values into a vector?", "body": "<p>Yes, this is undefined. From Section 6.1.3.2.3 of the <a href=\"http://doc.rust-lang.org/reference.html#behavior-considered-undefined\" rel=\"nofollow noreferrer\">Rust Reference</a>:</p>\n<blockquote>\n<p>The following is a list of behavior which is forbidden in all Rust code, including within unsafe blocks and unsafe functions. Type checking provides the guarantee that these issues are never caused by safe code.</p>\n<ul>\n<li>...</li>\n<li>Reads of undef (uninitialized) memory</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p><code>p.offset(5)</code> is undefined memory and you have to read it to be able to swap it.</p>\n<p>Of course, I don't really see the point to your question, as even if it were defined, the operation would be a no-op. I suspect that this is an artifact of the <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a>, and that you have an actual problem you are trying to solve.</p>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 189, "favorite_count": 0, "accepted_answer_id": 31779406, "answer_count": 1, "score": 2, "last_activity_date": 1438576135, "creation_date": 1438572083, "last_edit_date": 1438576135, "question_id": 31778955, "link": "https://stackoverflow.com/questions/31778955/is-it-undefined-in-rust-to-temporarily-swap-uninitialized-values-into-a-vector", "title": "Is it undefined in Rust to temporarily swap uninitialized values into a vector?", "body": "<p>Suppose I have a vector, <code>v: Vec&lt;T&gt;</code> with length 5 and capacity 10.  Does the following invoke undefined behavior?</p>\n\n<pre><code>let p = v.as_mut_ptr(); \nunsafe {\n    std::mem::swap(p, p.offset(5));\n    std::mem::swap(p.offset(5), p);\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "edited": false, "score": 0, "creation_date": 1438544906, "post_id": 31775915, "comment_id": 51481952, "body": "I <i>would</i> like to say that I&#39;m aware of <code>docopt</code> et al. in rust, but writing it myself is a good exercise in getting comfortable with the language"}], "answers": [{"comments": [{"owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "edited": false, "score": 0, "creation_date": 1438550959, "post_id": 31776725, "comment_id": 51483520, "body": "I like the indices approach, that way they can be copied more easily and no borrowing is necessary. I&#39;ll give it a try"}, {"owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "edited": false, "score": 0, "creation_date": 1438554644, "post_id": 31776725, "comment_id": 51484617, "body": "This makes me think - the only reason I am putting stuff in the vec is so it can be owned by the <code>OptionMap</code> struct - it seems like there should be a vector type that can be added to but is otherwise immutable, so values that have been added to it can be borrowed while still being able to push new elements onto it."}, {"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "reply_to_user": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "edited": false, "score": 0, "creation_date": 1438598786, "post_id": 31776725, "comment_id": 51499410, "body": "That would result in invalid references once the vector outgrows its capacity and has to reallocate."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 2, "last_activity_date": 1438550703, "last_edit_date": 1438550703, "creation_date": 1438550401, "answer_id": 31776725, "question_id": 31775915, "link": "https://stackoverflow.com/questions/31775915/binding-does-not-live-long-enough-when-storing-a-reference-to-a-vector-item-in-a/31776725#31776725", "title": "Binding does not live long enough when storing a reference to a vector item in a hash map", "body": "<blockquote>\n  <p>I pass a reference to each of the hash maps (so they borrow it) and\n  then pass the option straight to the vector to move it there, so that\n  the option doesn't go out of scope.</p>\n</blockquote>\n\n<p>Once something is borrowed, you can't move it elsewhere.</p>\n\n<p>If you place an element into a vector and borrow it from there, you can't mutate the vector until the borrow ends.</p>\n\n<p>In other words your current approach won't work.</p>\n\n<p>The simplest solution is probably to store indices into the vector in your hash maps. </p>\n\n<p>Alternatively, it might be possible to design a fancy key that can be compared to both the short and long names, and then you can store the option directly in a single hash map. I say \"might\" because I'm not sure if this is currently possible.</p>\n"}], "owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 31776725, "answer_count": 1, "score": 0, "last_activity_date": 1438562962, "creation_date": 1438544808, "last_edit_date": 1438562962, "question_id": 31775915, "link": "https://stackoverflow.com/questions/31775915/binding-does-not-live-long-enough-when-storing-a-reference-to-a-vector-item-in-a", "title": "Binding does not live long enough when storing a reference to a vector item in a hash map", "body": "<p>I'm new at Rust and still struggling with the borrow checker and getting lifetimes right.</p>\n\n<p>Here's a simple struct I've started to build - it stores collections of command-line argument like things (which can be represented by a <code>--string</code> or a <code>-c</code> or both):</p>\n\n<pre><code>struct OptionMap&lt;'a, T: 'a&gt; {\n    name: HashMap&lt;String, &amp;'a T&gt;,\n    short_name: HashMap&lt;char, &amp;'a T&gt;,\n    options: Vec&lt;T&gt;\n}\n\nimpl&lt;'a, T: 'a&gt; OptionMap&lt;'a, T&gt; {\n    pub fn new() -&gt; OptionMap&lt;'a, T&gt; {\n        OptionMap {\n            name: HashMap::new(),\n            short_name: HashMap::new(),\n            options: Vec::new()\n        }\n    }\n\n    pub fn register(&amp;mut self, name: &amp;OptionName, option: T) {        \n        if name.name.is_some() {\n            self.name.insert(name.name.unwrap().to_owned(), &amp;option);\n        }\n\n        if name.short_name.is_some() {\n            self.short_name.insert(name.short_name.unwrap(), &amp;option);\n        }\n\n        self.options.push(option);\n    }\n}\n</code></pre>\n\n<p>I get two of these errors (one for each of the <code>&amp;option</code> parameters I wrote):</p>\n\n<pre><code>   Compiling glam v0.1.0 (file:///Users/carson/Projects/glam)\nsrc/options.rs:57:66: 57:72 error: `option` does not live long enough\nsrc/options.rs:57                 self.name.insert(name.name.unwrap().to_owned(), &amp;option);\n                                                                                   ^~~~~~\nsrc/options.rs:54:62: 66:6 note: reference must be valid for the lifetime 'a as defined on the block at 54:61...\nsrc/options.rs:54     pub fn register(&amp;mut self, name: &amp;OptionName, option: T) {\nsrc/options.rs:55         {\nsrc/options.rs:56             if name.name.is_some() {\nsrc/options.rs:57                 self.name.insert(name.name.unwrap().to_owned(), &amp;option);\nsrc/options.rs:58             }\nsrc/options.rs:59         }\n                  ...\nsrc/options.rs:54:62: 66:6 note: ...but borrowed value is only valid for the scope of parameters for function at 54:61\nsrc/options.rs:54     pub fn register(&amp;mut self, name: &amp;OptionName, option: T) {\nsrc/options.rs:55         {\nsrc/options.rs:56             if name.name.is_some() {\nsrc/options.rs:57                 self.name.insert(name.name.unwrap().to_owned(), &amp;option);\nsrc/options.rs:58             }\nsrc/options.rs:59         }\n                  ...\n</code></pre>\n\n<p>I pass a reference to each of the hash maps (so they borrow it) and then pass the option straight to the vector to move it there, so that the option doesn't go out of scope.</p>\n\n<p>It seems like the scope of <code>'a</code> and the scope of <code>option</code> should be the same to me - since <code>OptionMap</code> is created with lifetime <code>'a</code>, and <code>T</code> is bound by that lifetime as well, and <code>option</code> gets moved into <code>options</code> at the end of the function. What am I missing? I feel like I'm constantly fighting with lifetimes in Rust, like there's something that hasn't clicked for me yet.</p>\n"}, {"tags": ["rust", "static-linking"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1438523341, "post_id": 31770604, "comment_id": 51475652, "body": "Perhaps the -C link-args=&#39;...&#39; option can help you?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438526488, "post_id": 31770604, "comment_id": 51476521, "body": "Note that your question only pertains to Linux - AFAIK, <a href=\"https://developer.apple.com/library/mac/qa/qa1118/_index.html\" rel=\"nofollow noreferrer\">you cannot statically link executables on OS X</a>. I&#39;m not sure about Windows."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 3, "creation_date": 1438528475, "post_id": 31770604, "comment_id": 51477071, "body": "You might want to take a look at <a href=\"https://github.com/rust-lang/rust/pull/24777\" rel=\"nofollow noreferrer\">using musl instead of glibc wih rust</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1438533626, "post_id": 31770604, "comment_id": 51478631, "body": "This <a href=\"https://internals.rust-lang.org/t/static-binary-support-in-rust/2011/10\" rel=\"nofollow noreferrer\">internals thread</a> may also be of interest. It also points towards musl."}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438553405, "post_id": 31770604, "comment_id": 51484320, "body": "@Shepmaster, yes, you can. It even says so on the page you linked: &quot;building crt0.o for yourself&quot;."}, {"owner": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 0, "creation_date": 1438553587, "post_id": 31770604, "comment_id": 51484356, "body": "But surely <code>print</code> relies on system functionality that requires dynamic linkage?"}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1438553685, "post_id": 31770604, "comment_id": 51484381, "body": "@llogiq, rustc doesn&#39;t seem to actually respect the options passed that way when they conflict with default options enabling dynamic linking, but thanks."}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 0, "creation_date": 1438553735, "post_id": 31770604, "comment_id": 51484391, "body": "@RenatoZannon, thank you, that&#39;s actually helpful."}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 1, "creation_date": 1438554108, "post_id": 31770604, "comment_id": 51484481, "body": "@Mikhail, I don&#39;t know the precise details on other systems, but on linux (and give or take register allocation most other unixes) <code>print</code> bottoms out (via either function calls or inlining) to <code>mov eax,1 ; mov ebx,fdout ; mov ecx bufptr ; mov edx buflen</code>. It&#39;s probably <i>possible</i> to design a system call interface that truly requires dynamic linking, but only a raging incompetent would do so for a general purpose OS."}, {"owner": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 0, "creation_date": 1438554285, "post_id": 31770604, "comment_id": 51484526, "body": "@DavidX Well, this is how its done on Windows: <a href=\"http://stackoverflow.com/questions/2540478/how-to-write-to-the-console-in-fasm\" title=\"how to write to the console in fasm\">stackoverflow.com/questions/2540478/&hellip;</a> . Looks like the c  style call uses dynamic linking,<code>&#39;msvcrt.dll&#39;</code>. It is not clear what <code>WriteConsole</code> does."}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 0, "creation_date": 1438554775, "post_id": 31770604, "comment_id": 51484646, "body": "@Mikhail, it probably bottoms out to some undocumented interrupt. (As I said, I don&#39;t know the precise details.) @DavidX, we forgot the <code>int 0x80</code>."}, {"owner": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 0, "creation_date": 1438554863, "post_id": 31770604, "comment_id": 51484665, "body": "@DavidX Yeah, thats how DOS did it (<a href=\"http://eli.thegreenplace.net/2009/12/21/creating-a-tiny-hello-world-executable-in-assembly\" rel=\"nofollow noreferrer\">eli.thegreenplace.net/2009/12/21/&hellip;</a>), but I don&#39;t think we expect the same thing from a modern OS. For example, you need a pointer the output stream, this might be different for each window?"}, {"owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "reply_to_user": {"reputation": 7041, "user_id": 314290, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ffde821f0f9670e601b19f1731a6849?s=128&d=identicon&r=PG", "display_name": "Mikhail", "link": "https://stackoverflow.com/users/314290/mikhail"}, "edited": false, "score": 0, "creation_date": 1438555633, "post_id": 31770604, "comment_id": 51484858, "body": "@Mikhail, you don&#39;t need a pointer the output stream, stdout is identified by the integer one, and it has nothing to do with X11 or any other GUI."}], "answers": [{"comments": [{"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 6, "creation_date": 1554996038, "post_id": 31778003, "comment_id": 97963178, "body": "In 2019, is <code>musl</code> <i>still</i> the only way to get 100% statically linked binary? Can we get 100% statically linked binary with <code>glibc</code> now?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1554996094, "post_id": 31778003, "comment_id": 97963211, "body": "I don\u2019t believe that glibc really intends to ever support it as a first-class thing, though I could be wrong."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1619210139, "post_id": 31778003, "comment_id": 118845840, "body": "Hey Steve, checking in in 2021; any updates that make this easier per your &quot;we hope to make it much easier in the future&quot;?"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 30, "last_activity_date": 1438562459, "creation_date": 1438562459, "answer_id": 31778003, "question_id": 31770604, "link": "https://stackoverflow.com/questions/31770604/how-to-generate-statically-linked-executables/31778003#31778003", "title": "How to generate statically linked executables?", "body": "<p>Rust statically links everything but glibc (and libgcc, iirc) by default.</p>\n\n<p>If you want to get a 100% statically linked binary, you can use MUSL with 1.1. <a href=\"https://github.com/rust-lang/rust/pull/24777\">https://github.com/rust-lang/rust/pull/24777</a> is the initial support, we hope to make it much easier to use in the future.</p>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1605865085, "post_id": 44387312, "comment_id": 114789030, "body": "This compiler option is now also available for <code>linux-gnu</code> targets since 1.48. <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1480-2020-11-19\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/&hellip;</a>"}], "tags": [], "owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "is_accepted": false, "score": 32, "last_activity_date": 1525873024, "last_edit_date": 1525873024, "creation_date": 1496744194, "answer_id": 44387312, "question_id": 31770604, "link": "https://stackoverflow.com/questions/31770604/how-to-generate-statically-linked-executables/44387312#44387312", "title": "How to generate statically linked executables?", "body": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1190-2017-07-20\" rel=\"noreferrer\">Since Rust 1.19</a>, you can statically link the C runtime (CRT) to avoid this very common situation on Windows:</p>\n\n<blockquote>\n  <p>The program can't start because VCRUNTIME140.dll is missing from your\n  computer. Try reinstalling the program to fix this problem.</p>\n</blockquote>\n\n<p>Add this to your <code>.cargo/config</code> file, using the appropriate target triple for your platform:</p>\n\n<pre><code>[target.x86_64-pc-windows-msvc]\nrustflags = [\"-C\", \"target-feature=+crt-static\"]\n</code></pre>\n\n<p>An alternative to editing <code>.cargo/config</code> is to pass <code>-C target-feature=+crt-static</code> to rustc by hand.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1721-crt-static.md\" rel=\"noreferrer\">RFC</a></p></li>\n<li><p><a href=\"https://github.com/rust-lang/rust/pull/37545\" rel=\"noreferrer\">Pull Request</a></p></li>\n<li><p><a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"noreferrer\">Cargo config documentation</a></p></li>\n</ul>\n"}], "owner": {"reputation": 3478, "user_id": 163349, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e99306628617f8c0aedd3c864d238ee8?s=128&d=identicon&r=PG", "display_name": "David X", "link": "https://stackoverflow.com/users/163349/david-x"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14726, "favorite_count": 14, "answer_count": 2, "score": 47, "last_activity_date": 1605862529, "creation_date": 1438508707, "last_edit_date": 1438822917, "question_id": 31770604, "link": "https://stackoverflow.com/questions/31770604/how-to-generate-statically-linked-executables", "title": "How to generate statically linked executables?", "body": "<p>I am trying to create a static executable with Rust. I am <em>not</em> trying to statically link a particular library, I am trying to create a executable which <em>does not use dynamic linking at all</em>. I have the following (otherwise working) test:</p>\n\n<pre><code>$ cat hello.rs\nfn main()\n    {\n    print!(\"Hello, world!\\n\");\n    }\n$ rustc hello.rs -o hello\n$ file hello\nhello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, [etc]\n</code></pre>\n\n<p>Note the <code>dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2</code>. Static executables have <code>statically linked</code> instead. (And in my case <code>corrupted section header size</code>, although I would be pleasantly astonished if I can convince Rust to replicate <em>that</em>.)</p>\n\n<p>What options do I need to pass to <code>rustc</code> to get it to generate a actual static executable (for concreteness: one which even <code>file</code> agrees is statically linked).</p>\n"}, {"tags": ["windows", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1438505064, "post_id": 31769858, "comment_id": 51471332, "body": "The first works. But the build script gives an error, saying <i>&quot;unknown library kind <code>native</code>, expected one of dylib, framework, or static&quot;</i>.  I got it to work by removing <code>=native</code> from both lines."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1438505215, "post_id": 31769858, "comment_id": 51471372, "body": "@BenjaminLindley, it looks like it is some kind of version mismatch for cargo. I took these examples from the official cargo documentation."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1438505612, "post_id": 31769858, "comment_id": 51471453, "body": "Playing around with it some more, it&#39;s strange. I tried putting &quot;dylib&quot; and &quot;static&quot;, and nothing at all in that part of the string (where you put &quot;native&quot;), and they all work fine. Though using &quot;framework&quot; it complains about not being on OSX, as expected."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1438503060, "creation_date": 1438503060, "answer_id": 31769858, "question_id": 31769604, "link": "https://stackoverflow.com/questions/31769604/how-to-tell-rustc-through-cargo-where-to-find-my-dll-import-library/31769858#31769858", "title": "How to tell rustc (through cargo) where to find my dll import library", "body": "<p>First, you can use <code>cargo rustc</code> to pass the <code>-L dir</code> parameters to rustc directly:</p>\n\n<pre><code>cargo rustc -- -L lib\n</code></pre>\n\n<p>if your library is located in <code>lib</code> subdirectory.</p>\n\n<p>Another, probably more convenient, way is to use a <a href=\"http://doc.crates.io/build-script.html\" rel=\"noreferrer\">build script</a> to pass library directory to rustc automatically. It then will be used with other cargo commands as well, like <code>run</code>, <code>test</code>, etc. If you store the following code to <code>build.rs</code>:</p>\n\n<pre><code>fn main() {\n    println!(\"cargo:rustc-link-lib=native=foo\");\n    println!(\"cargo:rustc-link-search=native=lib\");\n}\n</code></pre>\n\n<p>(assuming your library is called <code>libfoo.a</code>)</p>\n\n<p>and then add <code>build</code> key to <code>[package]</code> section in Cargo.toml:</p>\n\n<pre><code>[package]\n...\nbuild = \"build.rs\"\n</code></pre>\n\n<p>then it should find your library automatically upon every build command.</p>\n\n<p>Note that the build script is also a nice place to actually <em>build</em> your library. Cargo documentation contains examples and links on that.</p>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1964, "favorite_count": 1, "accepted_answer_id": 31769858, "answer_count": 1, "score": 5, "last_activity_date": 1438503060, "creation_date": 1438500937, "question_id": 31769604, "link": "https://stackoverflow.com/questions/31769604/how-to-tell-rustc-through-cargo-where-to-find-my-dll-import-library", "title": "How to tell rustc (through cargo) where to find my dll import library", "body": "<p>I'm producing a dll with mingw to be used by rust. I know I can place my <code>libxxx.a</code> file in the <code>\"Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\"</code> directory, and that's what I'm doing now. But I'd rather keep it in my project's directory. How do I get Cargo to tell rustc where to find it?</p>\n"}, {"tags": ["reference", "iterator", "rust", "pass-by-reference", "pass-by-value"], "answers": [{"comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1438490919, "post_id": 31768606, "comment_id": 51468817, "body": "Sorry I should have clarified that I&#39;m actually implementing a trait and also, the type of the item is generic."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1438490935, "post_id": 31768606, "comment_id": 51468824, "body": "Please take another look"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1438527492, "post_id": 31768606, "comment_id": 51476787, "body": "@dspyz I think that update completely changes the question. You can update your title to reflect your much more complicated specific instance or rollback your changes and ask a followup question."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1438490156, "creation_date": 1438490156, "answer_id": 31768606, "question_id": 31768556, "link": "https://stackoverflow.com/questions/31768556/generalize-over-iterators-over-references-and-iterators-over-values/31768606#31768606", "title": "Generalize over iterators over references and iterators over values", "body": "<p>You are looking for the <a href=\"http://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow\"><code>Borrow</code></a> trait:</p>\n\n<blockquote>\n  <p>When writing generic code, it is often desirable to abstract over all ways of borrowing data from a given type</p>\n</blockquote>\n\n<pre><code>use std::borrow::Borrow;\n\nfn print_it&lt;I, T&gt;(iter: I)\n    where I: Iterator&lt;Item = T&gt;,\n          T: Borrow&lt;u8&gt;\n{\n    for v in iter {\n        let a: &amp;u8 = v.borrow();\n        println!(\"{}\", a);\n    }\n}\n\n\nfn main() {\n    let vals = vec![1,2,3];\n    print_it(vals.iter()); // Iterator of references\n    print_it(vals.into_iter()); // Iterator of values\n}\n</code></pre>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1438490836, "creation_date": 1438489701, "last_edit_date": 1438490836, "question_id": 31768556, "link": "https://stackoverflow.com/questions/31768556/generalize-over-iterators-over-references-and-iterators-over-values", "title": "Generalize over iterators over references and iterators over values", "body": "<p>I want to implement a trait for which one of the functions takes an iterator as an argument and then operates on the values returned by that iterator as immutable references.</p>\n\n<p>However I would also like my function to work on iterators over values as well (without having to duplicate code).  How can I do that?</p>\n\n<p>The following does not work:</p>\n\n<pre><code>impl&lt;T, I: Iterator&gt; FilterItem for SortedFilter&lt;I&gt; where  T: Ord, I::Item: Borrow&lt;T&gt; {\n    ...\n}\n</code></pre>\n\n<p>I get</p>\n\n<pre><code>error: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n</code></pre>\n"}, {"tags": ["module", "rust"], "comments": [{"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1438472735, "post_id": 31767266, "comment_id": 51466321, "body": "It&#39;s possible to inline <code>foo.rs</code> into <code>mod.rs</code>, and then have all other modules (e.g. <code>bar</code>) reference <code>foo</code>&#39;s contents by using <code>super::[thing]</code>, but that seems unwieldy, especially when exporting multiple modules&#39; contents."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1438472837, "post_id": 31767266, "comment_id": 51466342, "body": "<a href=\"http://is.gd/4Wsyxn\" rel=\"nofollow noreferrer\">Seems to work</a> as you&#39;ve written it. I&#39;ve defined the module bodies inline as empty because your example has none. Perhaps you need to refine your failing example to produce an <a href=\"/help/mcve\">MCVE</a>?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438474871, "post_id": 31767266, "comment_id": 51466666, "body": "That works, but embedding it in another submodule <a href=\"http://is.gd/uZoJeU\" rel=\"nofollow noreferrer\">doesn&#39;t</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438476042, "post_id": 31767266, "comment_id": 51466831, "body": "Please <a href=\"https://stackoverflow.com/posts/31767266/edit\">edit</a> your question to include the actual failing example, the <a href=\"http://is.gd/uZoJeU\" rel=\"nofollow noreferrer\">one in your comment</a>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1438476389, "last_edit_date": 1495541176, "creation_date": 1438476389, "answer_id": 31767601, "question_id": 31767266, "link": "https://stackoverflow.com/questions/31767266/how-do-i-export-things-from-a-submodule/31767601#31767601", "title": "How do I &quot;export&quot; things from a submodule?", "body": "<p>Here's an <a href=\"/help/mcve\">MCVE</a> of your problem:</p>\n\n<pre><code>pub mod sub {\n    use foo::function;\n\n    pub mod foo {\n        pub fn function() {}\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/a/31767485/155423\">Adrian mentions</a>, the solution is to use the keyword <code>self</code> in the <code>use</code> statement:</p>\n\n<pre><code>pub mod sub {\n    use self::foo::function;\n\n    pub mod foo {\n        pub fn function() {}\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>So, what's going on? <a href=\"http://doc.rust-lang.org/stable/book/crates-and-modules.html#re-exporting-with-pub-use\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> describes the problem:</p>\n\n<blockquote>\n  <p>What about the <code>self</code>? Well, by default, use declarations are absolute paths, starting from your crate root. <code>self</code> makes that path relative to your current place in the hierarchy instead.</p>\n</blockquote>\n\n<p>That is, <code>use foo</code> means to use <code>foo</code> from the root of the crate. <code>use self::foo</code> means to use <code>foo</code> relative to the current module.</p>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 813, "favorite_count": 0, "accepted_answer_id": 31767601, "answer_count": 1, "score": 2, "last_activity_date": 1438476389, "creation_date": 1438472519, "last_edit_date": 1438472861, "question_id": 31767266, "link": "https://stackoverflow.com/questions/31767266/how-do-i-export-things-from-a-submodule", "title": "How do I &quot;export&quot; things from a submodule?", "body": "<p>I'd like to write a <code>mod.rs</code> file like:</p>\n\n<pre><code>pub use foo::*;\n\nmod foo;\npub mod bar;\n</code></pre>\n\n<p>But I get the error <code>unresolved import <code>foo</code></code>. What's the correct way to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "edited": false, "score": 2, "creation_date": 1438466458, "post_id": 31766610, "comment_id": 51465142, "body": "<code>Vec.pop()</code> returns an <code>Option&lt;T&gt;</code> in case the vector is empty, so if <code>T</code> is <code>Option&lt;&amp;str&gt;</code>, it should return <i><code>Option&lt;Option&lt;&amp;str&gt;&gt;</code></i>."}], "answers": [{"tags": [], "owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "is_accepted": true, "score": 1, "last_activity_date": 1438466494, "creation_date": 1438466494, "answer_id": 31766641, "question_id": 31766610, "link": "https://stackoverflow.com/questions/31766610/how-do-i-access-option-types-stored-in-a-vec/31766641#31766641", "title": "How do I access Option types stored in a Vec?", "body": "<p>Just realized what's going on. <code>Vec</code> returns an <code>Option&lt;T&gt;</code>.</p>\n"}], "owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "accepted_answer_id": 31766641, "answer_count": 1, "score": 3, "last_activity_date": 1438466494, "creation_date": 1438466237, "question_id": 31766610, "link": "https://stackoverflow.com/questions/31766610/how-do-i-access-option-types-stored-in-a-vec", "title": "How do I access Option types stored in a Vec?", "body": "<p>I am having trouble with this simple construct:</p>\n\n<pre><code>fn main() { \n    let mut stack: Vec&lt;Option&lt;&amp;str&gt;&gt; = Vec::new();\n    stack.push(None);\n    let item: Option&lt;&amp;str&gt; = stack.pop();\n}\n</code></pre>\n\n<p>I get a compiler error:</p>\n\n<pre><code>src/main.rs:4:30: 4:41 error: mismatched types:\n expected `core::option::Option&lt;&amp;str&gt;`,\n    found `core::option::Option&lt;core::option::Option&lt;&amp;str&gt;&gt;`\n(expected &amp;-ptr,\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:4     let item: Option&lt;&amp;str&gt; = stack.pop();\n                                           ^~~~~~~~~~~\nsrc/main.rs:4:30: 4:41 help: run `rustc --explain E0308` to see a detailed explanation\n</code></pre>\n\n<p>How can I store <code>Option</code> types in a <code>Vec</code>, and access individual elements still wrapped in an <code>Option</code>?</p>\n"}, {"tags": ["rust", "osdev"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438528358, "post_id": 31761132, "comment_id": 51477034, "body": "&quot;<i>Actually I&#39;ve solved my problem</i>&quot; \u2014 you might as well add how you solved it as an answer; that&#39;s perfectly acceptable and encouraged behavior."}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1438532039, "post_id": 31761132, "comment_id": 51478159, "body": "It&#39;s more precisely to say that I just found a workaround to the problem (just copied the corresponded libcore snippet), not solved it. So I cannot add an answer."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 1, "creation_date": 1439000254, "post_id": 31761132, "comment_id": 51695439, "body": "I cannot reproduce your the error you describe on the <a href=\"https://play.rust-lang.org/?gist=7c9ce3e7575ffc7b76e2&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a> (warning! much hacking to get it to compile!).  It compiles fine after addressing all the &quot;missing lang item&quot; errors.  Could you provide a link to a playpen demonstrating your problem?"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 3, "last_activity_date": 1458724685, "last_edit_date": 1458724685, "creation_date": 1444387916, "answer_id": 33036396, "question_id": 31761132, "link": "https://stackoverflow.com/questions/31761132/implementing-basic-operations-for-built-in-types-without-using-libcore/33036396#33036396", "title": "Implementing basic operations for built-in types without using libcore", "body": "<p>This is actually the expected behavior nowadays. Rust requires the \"add\" lang item to be implemented for the type, even if it is a built-in type. The implementation can be completely bogus (as long as it compiles), since it will be <a href=\"https://github.com/rust-lang/rust/issues/27824#issuecomment-133165027\" rel=\"nofollow\">replaced by the built-in operation</a>.</p>\n\n<p>The reason this is done this way is that the code type-checking the built-in types was buggy and complex. Doing it this way simplified the type-checking code and the trait implementations were already there anyway.</p>\n\n<p>Therefor you need to add the following two declarations to be able to use the <code>+</code> operator even on the built-in type <code>u32</code></p>\n\n<pre><code>#[lang = \"add\"]\npub trait Add&lt;RHS=Self&gt; {\n    type Output;\n    fn add(self, rhs: RHS) -&gt; Self::Output;\n}\n\nimpl Add for u32 {\n    type Output = u32;\n    fn add(self, _rhs: u32) -&gt; u32 { 42 }\n}\n</code></pre>\n\n<p>Here's a full example that doesn't link since it's missing some libc stuff: <a href=\"https://play.rust-lang.org/?gist=a223d48b0f2d8533996f&amp;version=nightly\" rel=\"nofollow\">https://play.rust-lang.org/?gist=a223d48b0f2d8533996f&amp;version=nightly</a></p>\n\n<p>Note that you should NOT create a bogus implementation as shown, because you might be using the built-in type in a generic context, where the implementation will actually be used</p>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1458724685, "creation_date": 1438427288, "last_edit_date": 1439109225, "question_id": 31761132, "link": "https://stackoverflow.com/questions/31761132/implementing-basic-operations-for-built-in-types-without-using-libcore", "title": "Implementing basic operations for built-in types without using libcore", "body": "<p>When I write a simple code for bare metal without using libcore I get the following error:</p>\n\n<blockquote>\n  <p>error: binary operation <code>!=</code> cannot be applied to type <code>u32</code> [E0369]</p>\n</blockquote>\n\n<p>Straight forward implementation confronts the chicken-and-egg problem:</p>\n\n<pre><code>#![crate_type = \"lib\"]\n#![feature(no_std, no_core, lang_items)]\n#![no_std]\n#![no_core]\n\n#[lang = \"sized\"]\npub trait Sized {}\n\n#[lang = \"sync\"]\npub trait Sync {}\n\npub const CONST1: u32 = 1;\npub const CONST2: u32 = 2;\n\npub struct Struct {\n    pub field: u32,\n}\n\nimpl Sync for Struct {}\n\npub static VAR: Struct = Struct {\n    field: CONST1 + CONST2,\n};\n</code></pre>\n\n<p>Here I get the following error:</p>\n\n<blockquote>\n  <p>error: binary operation <code>+</code> cannot be applied to type <code>u32</code> [E0369]</p>\n</blockquote>\n"}, {"tags": ["c", "rust", "ffi"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438417417, "post_id": 31759582, "comment_id": 51452438, "body": "this is the other way around, but the explanation is the same: <a href=\"http://stackoverflow.com/a/31238747/1103681\">stackoverflow.com/a/31238747/1103681</a>"}, {"owner": {"reputation": 121, "user_id": 5180198, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1af1ab3e963a8e7e800c60018b6810e?s=128&d=identicon&r=PG&f=1", "display_name": "Zihemu", "link": "https://stackoverflow.com/users/5180198/zihemu"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438419305, "post_id": 31759582, "comment_id": 51452824, "body": "@ker Could you write an answer?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438421883, "post_id": 31759582, "comment_id": 51453452, "body": "i dunnow. I&#39;d just be ripping off @DK&#39;s answer 1:1"}, {"owner": {"reputation": 121, "user_id": 5180198, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1af1ab3e963a8e7e800c60018b6810e?s=128&d=identicon&r=PG&f=1", "display_name": "Zihemu", "link": "https://stackoverflow.com/users/5180198/zihemu"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438422000, "post_id": 31759582, "comment_id": 51453481, "body": "@ker This situation is a bit different. I wasn&#39;t able to get something to work using that answer."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438426986, "post_id": 31759582, "comment_id": 51454815, "body": "please show the code you have tried. The best would be an example in the playpen: <a href=\"http://play.rust-lang.org\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> . Then I will explain how to make your code work and why some changes need to be done. I&#39;m aware that it won&#39;t compile, but just add the ffi that you want and the code how you tried to call it."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438441319, "post_id": 31759582, "comment_id": 51458693, "body": "how would the C-code know how long the array is? or is that hardcoded?"}], "answers": [{"comments": [{"owner": {"reputation": 121, "user_id": 5180198, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1af1ab3e963a8e7e800c60018b6810e?s=128&d=identicon&r=PG&f=1", "display_name": "Zihemu", "link": "https://stackoverflow.com/users/5180198/zihemu"}, "edited": false, "score": 0, "creation_date": 1438448276, "post_id": 31763915, "comment_id": 51460150, "body": "Wow, now this is an answer that will surely help people in need like me. Indeed, the C code does give me the max length, I will try your last code sample, thanks!"}, {"owner": {"reputation": 121, "user_id": 5180198, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1af1ab3e963a8e7e800c60018b6810e?s=128&d=identicon&r=PG&f=1", "display_name": "Zihemu", "link": "https://stackoverflow.com/users/5180198/zihemu"}, "edited": false, "score": 0, "creation_date": 1438448527, "post_id": 31763915, "comment_id": 51460234, "body": "You are a life-saver, thanks so, so much. IMHO, this should be added somewhere in the book, the FFI chapter is still very vague. Again, thanks :)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1438448144, "last_edit_date": 1438448144, "creation_date": 1438447557, "answer_id": 31763915, "question_id": 31759582, "link": "https://stackoverflow.com/questions/31759582/assign-an-array-to-mut-c-void/31763915#31763915", "title": "Assign an array to *mut c_void", "body": "<p>The API you have described looks very suspicious. Remember that there are actually no \"arrays\" in C - arrays are just another name for pointers to the beginning of multiple values of the same type which are laid continuously in the memory. Therefore, it is impossible to just \"assign\" an array in C. There are two concepts which may be understood as \"assigning\" to an array: first, assigning a pointer to the beginning of an array somewhere:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>const char *s1 = \"hello\";\nconst char *s2 = \"world\";\n\nconst char *s = s1;  // make `s` contain a pointer to \"hello\"\ns = s2;  // make `s` contain a pointer to \"world\"\n</code></pre>\n\n<p>Second, it is copying certain pieces of data from one pointer to another, which is usually done with <code>memcpy()</code> or something like it:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>const char *s1 = \"hello\";\n\nchar s2[5];\nmemcpy(s2, s1, 5);  // copy 5 bytes from the memory pointed at by `s1` to the memory pointed at by `s2`\n</code></pre>\n\n<p>You can probably see now what I mean when I'm saying that your API is suspicious. Your callback function is given a <code>void *</code>, however, there is no indication which \"array copy\" method should be used.</p>\n\n<p>If it is the first one, i.e. copying the pointer to the beginning of an array, then <code>void *</code> type is extremely unhelpful. It does not say how this pointer should be represented. It looks like that you're trying to do exactly this; however, it won't work as you probably think. Here is a compiling variant of your code (note that it is wrong and will most likely crash your program; see below):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(libc)]\nextern crate libc;\n\nuse libc::c_void;\n\npub extern fn demo(data: *mut *mut c_void) {\n    let mut vec = vec!(1, 2, 3);\n    unsafe {\n        *data = vec.as_mut_ptr() as *mut c_void;\n    }\n}\n</code></pre>\n\n<p>(Note that you can call <code>as_mut_ptr()</code> on a <code>mut</code> variable containing a vector directly due to autoderef)</p>\n\n<p>The parameter type is now not just <code>*mut c_void</code> but <code>*mut *mut c_void</code>, that is, it is a pointer to <code>*mut c_void</code>. This way the program which calls this function could pass a pointer to a local variable of type <code>void *</code> to this function and get a pointer to an actual array, something like</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>void *data;\nsome_struct.callback_fn(&amp;data);  // pointer to `demo` is stored in `some_struct`\n// data is now whatever your `demo` function has assigned\n</code></pre>\n\n<p>Note that you just <em>can't</em> sensibly make <code>demo</code> accept just <code>*mut c_void</code> because the only thing you can do with it is to reassign the parameter itself, but reassigning the parameter will reassign only this parameter value, i.e. the local variable this parameter represents. This can't be observed outside of the function. In other words, the following code (which is also a variant of the one you provided):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub extern fn demo(mut data: *mut c_void) {\n    let mut vec = vec!(1, 2, 3);\n    data = vec.as_mut_ptr() as *mut c_void;\n}\n</code></pre>\n\n<p>does nothing, and Rust is glad to point this out:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:6:20: 6:28 warning: variable `data` is assigned to, but never used, #[warn(unused_variables)] on by default\n&lt;anon&gt;:6 pub extern fn demo(mut data: *mut c_void) {\n                            ^~~~~~~~\n&lt;anon&gt;:8:5: 8:9 warning: value assigned to `data` is never read, #[warn(unused_assignments)] on by default\n&lt;anon&gt;:8     data = vec.as_mut_ptr() as *mut c_void;\n             ^~~~\n</code></pre>\n\n<p>The reason I said that the code with <code>*mut *mut c_void</code> is wrong is that it actually violates memory safety. If you create a <code>Vec</code> instance and store it to a local variable, when this variable goes out of scope, the vector itself will be destroyed and the memory it wraps will be freed. Therefore, every pointer obtained from it using <code>as_ptr()</code> or <code>as_mut_ptr()</code> will become invalid.</p>\n\n<p>There are several ways to work this around, the simplest one is to just <code>forget()</code> the vector:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\n\nlet mut vec = vec![1, 2, 3];\n*data = vec.as_mut_ptr() as *mut c_void;\nmem::forget(vec);\n</code></pre>\n\n<p>This way the vector is \"forgotten\" - its destructor won't be called. This way, however, a memory leak is introduced to your program. With each call of <code>demo()</code> a bit more memory will be allocated but not freed, so eventually your program will use all of the available memory and probably crash afterwards. It is a sensible things to do in some context, however, especially in low-level code. For example, your API may specify that it will only call this function once.</p>\n\n<p>Another problem with this approach is a logical consequence of the above one. Your API may specify who should free the memory at the pointer provided to it. For example, it may require passing a memory allocated with <code>malloc()</code> so it then will free it with <code>free()</code> by itself. Or it may specify that you should define another function which will be called when all allocated memory should be freed. Either way is somewhat inconvenient to implement in Rust; I won't go in details on how to do it unless this is indeed your case. Anyway, your API must clearly specify the owner of the memory, and you <em>should</em> take it into account because Rust is much more explicit about ownership.</p>\n\n<p>Another possibility is that your API requires you to copy some data to the memory specified by <code>void *</code> pointer. In other words, its implementation contains a code like this one:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>char buffer[256];\nsome_struct.callback_fn(buffer);\n</code></pre>\n\n<p>and it expects that after <code>callback_fn</code> invocation the <code>buffer</code> is filled with data.</p>\n\n<p>If this is the case, the API must, naturally, specify the maximum number of bytes in the buffer that your program may use, and your <code>demo</code> function may look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ptr;\nuse libc::c_void;\n\npub extern fn demo(data: *mut c_void) {\n    let vec: Vec&lt;u8&gt; = vec!(1, 2, 3);\n    unsafe { \n        ptr::copy_nonoverlapping(vec.as_ptr(), data as *mut u8, vec.len());\n    }\n}\n</code></pre>\n\n<p>(alternatively, you can convert <code>data</code> to <code>&amp;mut [u8]</code> with <a href=\"http://doc.rust-lang.org/std/slice/fn.from_raw_parts_mut.html\" rel=\"noreferrer\"><code>std::slice::from_raw_parts_mut()</code></a> and use either <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice\" rel=\"noreferrer\"><code>clone_from_slice()</code></a> method or <a href=\"http://doc.rust-lang.org/std/slice/bytes/fn.copy_memory.html\" rel=\"noreferrer\"><code>bytes::copy_memory()</code></a> function, but they both are unstable, so they can't be used on stable Rust)</p>\n\n<p>In this case you should be especially careful not to overflow the buffer provided by the calling program to you. Its maximum size should be specified in the API.</p>\n\n<p>Another concern is that copying an array is simple only for byte arrays (<code>char *</code> on C side, <code>&amp;[u8]/&amp;mut [u8]</code> on Rust side). When you start using larger types, like <code>i32</code>, you will get a possibility for portability problems. For example, in <code>C</code> <code>int</code> does not have a defined size, so you just can't blindly convert <code>&amp;[i32]</code> to <code>&amp;[u8]</code> with four times the original size and copy bytes from it to <code>*mut u8</code>. These problems should be taken care of very carefully.</p>\n"}], "owner": {"reputation": 121, "user_id": 5180198, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1af1ab3e963a8e7e800c60018b6810e?s=128&d=identicon&r=PG&f=1", "display_name": "Zihemu", "link": "https://stackoverflow.com/users/5180198/zihemu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3673, "favorite_count": 1, "accepted_answer_id": 31763915, "answer_count": 1, "score": 5, "last_activity_date": 1438448144, "creation_date": 1438415385, "last_edit_date": 1438439308, "question_id": 31759582, "link": "https://stackoverflow.com/questions/31759582/assign-an-array-to-mut-c-void", "title": "Assign an array to *mut c_void", "body": "<p>I am writing bindings for a library, where I have a function with a parameter of type <code>void*</code> aka <code>*mut c_void</code> in Rust. I have to assign an array to this parameter, how can I do this in Rust? </p>\n\n<p>I've tried casting, <code>transmute</code>, it doesn't work (<code>transmute</code> says that <code>c_void</code> and <code>[u8]</code> are of different sizes). If it matters, I am getting the slice from a vector.</p>\n\n<p><strong>UPDATE</strong>: Perhaps it would be correct to somehow use vec.as_mut_ptr() instead?</p>\n\n<p><strong>PLAYPEN</strong>: <a href=\"http://is.gd/KjgduZ\" rel=\"noreferrer\">http://is.gd/KjgduZ</a></p>\n"}, {"tags": ["unit-testing", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1438416171, "post_id": 31759389, "comment_id": 51452153, "body": "You might want to add the contents of your <code>Cargo.toml</code> file; that determines the name of things, which is probably where your issue is."}, {"owner": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1438417504, "post_id": 31759389, "comment_id": 51452461, "body": "@DK. please, take a look at my edit with <code>Cargo.toml</code>. Thank you"}], "answers": [{"comments": [{"owner": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "edited": false, "score": 0, "creation_date": 1438417665, "post_id": 31759862, "comment_id": 51452491, "body": "oh, but I intend to make a binary, the result of this project should be an executable file..."}, {"owner": {"reputation": 56, "user_id": 5180246, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jQMED.png?s=128&g=1", "display_name": "Zarathustra30", "link": "https://stackoverflow.com/users/5180246/zarathustra30"}, "reply_to_user": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "edited": false, "score": 2, "creation_date": 1438417974, "post_id": 31759862, "comment_id": 51452549, "body": "Tests directories are used to test function APIs of libraries. Since binaries don&#39;t have those, it doesn&#39;t really make sense to use test directories in that case. You want to use internal test modules for testing binaries."}], "tags": [], "owner": {"reputation": 56, "user_id": 5180246, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jQMED.png?s=128&g=1", "display_name": "Zarathustra30", "link": "https://stackoverflow.com/users/5180246/zarathustra30"}, "is_accepted": false, "score": 2, "last_activity_date": 1438417518, "creation_date": 1438417518, "answer_id": 31759862, "question_id": 31759389, "link": "https://stackoverflow.com/questions/31759389/how-to-make-a-test-dir/31759862#31759862", "title": "How to make a test dir?", "body": "<p>You are compiling a binary instead of a library (crate). Try renaming \"main.rs\" to \"lib.rs\".</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1438418005, "creation_date": 1438418005, "answer_id": 31759928, "question_id": 31759389, "link": "https://stackoverflow.com/questions/31759389/how-to-make-a-test-dir/31759928#31759928", "title": "How to make a test dir?", "body": "<p>There are two problems.  First of all, you're building an executable, not a library, so you can't link against the result to test it.  Secondly, you appear to be confused as to the difference between modules and crates.  You might want to read the <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"noreferrer\">Crates and Modules chapter of the Rust book</a>.</p>\n\n<p>If you want types and methods from your crate to be externally accessible, you need to compile your code into a library.  Often, executables in Rust will just be thin wrappers around a library of the same name.  So, you might have:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// src/main.rs\nextern crate player;\n\nfn main() {\n    println!(\"rep(42): {:?}\", player::rep(42));\n}\n</code></pre>\n\n<p></p>\n\n<pre><code>// src/lib.rs\npub fn rep(arg: i32) -&gt; i32 { arg }\n</code></pre>\n\n<p>This would allow you to test <code>player::rep</code>.</p>\n\n<p>The other thing you can do is just write the test next to the code it's testing.</p>\n\n<pre><code>// src/lib.rs\npub fn rep(arg: i32) -&gt; i32 { arg }\n\n#[test]\nfn test_rep() { assert_eq!(rep(4), 4); }\n</code></pre>\n"}], "owner": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1100, "favorite_count": 1, "accepted_answer_id": 31759928, "answer_count": 2, "score": 7, "last_activity_date": 1438438035, "creation_date": 1438413854, "last_edit_date": 1438438035, "question_id": 31759389, "link": "https://stackoverflow.com/questions/31759389/how-to-make-a-test-dir", "title": "How to make a test dir?", "body": "<p>I'd like to set up a basic hello world project. The unit tests should be in the <code>test/</code> directory as described in <a href=\"https://doc.rust-lang.org/stable/book/testing.html\" rel=\"noreferrer\">the book</a>. My code so far is as follows.</p>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>pub mod player;\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p><strong>src/player.rs</strong></p>\n\n<pre><code>pub fn rep(arg: i32) -&gt; i32 {\n    arg\n}\n</code></pre>\n\n<p><strong>tests/player.rs</strong></p>\n\n<pre><code>extern crate player;\n\n#[test]\nfn it_works() {\n    assert_eq!(4, player::rep(2+2));\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"myapp\"\nversion = \"0.1.0\"\nauthors = [\"My Name &lt;spam@example.com&gt;\"]\n</code></pre>\n\n<p>I believe the code is very similar to the book. However, <code>cargo test</code> fails:</p>\n\n<pre><code>tests/player.rs:1:1: 1:21 error: can't find crate for `player`\ntests/player.rs:1 extern crate player;\n              ^~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>What is the problem? I'm completely lost.</p>\n"}, {"tags": ["struct", "rust", "traits", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438411074, "post_id": 31758933, "comment_id": 51451083, "body": "I don&#39;t think you can box anything that has a non-static lifetime. Also you shouldn&#39;t use &#39;&amp;String&#39; but &#39;&amp;str&#39; when taking a reference. Also I don&#39;t see where the trait you mentioned in the title is."}, {"owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1438414077, "post_id": 31758933, "comment_id": 51451745, "body": "I&#39;m talking about result of get_iterator method. In first case it is struct (std::slice::Iter&lt;&amp;String&gt;) and in the second case it is trait (Iterator&lt;Item=&amp;String&gt;). &amp;String here is just an example, in project I want to use more complex things. If I use &amp;str here, I&#39;ll have to create another struct for Iterator&lt;Item=&amp;str&gt; because std::slice::Iter&lt;&amp;String&gt; cannot be auto-casted to std::slice::Iter&lt;&amp;str&gt;."}, {"owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438414510, "post_id": 31758933, "comment_id": 51451835, "body": "And actually I can box something having non-static lifetime: <code>fn get_first_item(x: &amp;Vec&lt;String&gt;) -&gt; Box&lt;&amp;str&gt; {     Box::new(&amp;x[0]) } </code> works just fine."}], "answers": [{"comments": [{"owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "edited": false, "score": 0, "creation_date": 1438417179, "post_id": 31759704, "comment_id": 51452388, "body": "Thanks a lot for that! I tried things like Box&lt;Iterator&lt;Item=&amp;String+&#39;a&gt;&gt;, but it is hard for me to find needed info. Unfortunately, <a href=\"https://doc.rust-lang.org/nightly/book/lifetimes.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/book/lifetimes.html</a> does not cover this case."}], "tags": [], "owner": {"reputation": 71, "user_id": 4484166, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-XjhIulthrVE/AAAAAAAAAAI/AAAAAAAAACU/Lq4cyDPA-7w/photo.jpg?sz=128", "display_name": "Andrew Miller", "link": "https://stackoverflow.com/users/4484166/andrew-miller"}, "is_accepted": true, "score": 2, "last_activity_date": 1438416688, "last_edit_date": 1438416688, "creation_date": 1438416290, "answer_id": 31759704, "question_id": 31758933, "link": "https://stackoverflow.com/questions/31758933/switching-from-struct-with-lifetime-to-trait/31759704#31759704", "title": "Switching from struct with lifetime to trait", "body": "<p>We want to declare a new lifetime on our StringList reference and make sure our returned, boxed Iterator trait is bound by that lifetime.</p>\n\n<pre><code>pub trait Value {\n    fn get_iterator&lt;'a&gt;(&amp;'a self) -&gt; Box&lt;Iterator&lt;Item=&amp;String&gt; + 'a&gt;;\n}\n\nstruct StringList {\n    strings: Vec&lt;String&gt;\n}\n\nimpl Value for StringList {\n    fn get_iterator&lt;'a&gt;(&amp;'a self) -&gt; Box&lt;Iterator&lt;Item=&amp;String&gt; + 'a&gt; {\n        Box::new(self.strings.iter())\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p><strong>Edit:</strong> \nTo answer your question about the lifetime 'a, it actually is defined, but the docs don't show it. Click on the Iter return object in the Vec documentation and you will see that 'a is declared on that object. The implementation for Vec would have to introduce the lifetime 'a to the Vec reference taken when calling iter().</p>\n"}], "owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 209, "favorite_count": 0, "accepted_answer_id": 31759704, "answer_count": 1, "score": 3, "last_activity_date": 1438438023, "creation_date": 1438409885, "last_edit_date": 1438438023, "question_id": 31758933, "link": "https://stackoverflow.com/questions/31758933/switching-from-struct-with-lifetime-to-trait", "title": "Switching from struct with lifetime to trait", "body": "<p>I'm trying to make a trait to present something as iterator over &amp;Strings. If I use struct std::slice::Iter in get_iterator result everyting is ok.</p>\n\n<pre><code>pub trait Value {\n    fn get_iterator(&amp;self) -&gt; Box&lt;std::slice::Iter&lt;String&gt;&gt;;\n}\n\nstruct StringList {\n    strings: Vec&lt;String&gt;\n}\n\nimpl Value for StringList {\n    fn get_iterator(&amp;self) -&gt; Box&lt;std::slice::Iter&lt;String&gt;&gt; {\n        Box::new(self.strings.iter())\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>But when I switch to trait Iterator&lt;&amp;String> </p>\n\n<pre><code>pub trait Value {\n    fn get_iterator(&amp;self) -&gt; Box&lt;Iterator&lt;Item=&amp;String&gt;&gt;;\n}\n\nstruct StringList {\n    strings: Vec&lt;String&gt;\n}\n\nimpl Value for StringList {\n    fn get_iterator(&amp;self) -&gt; Box&lt;Iterator&lt;Item=&amp;String&gt;&gt; {\n        Box::new(self.strings.iter())\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>rust complains about lifetimes:</p>\n\n<pre><code>&lt;anon&gt;:11:31: 11:37 error: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to conflicting requirements\n&lt;anon&gt;:11         Box::new(self.strings.iter())\n</code></pre>\n\n<p>How should I define trait and make implementation to make it work?</p>\n\n<p>By the way, why does compiler call this lifetime 'a? It is not named anywhere and usually rust complies about \"anonymous lifetime\". Is it a bug that should be reported?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 2, "creation_date": 1438376779, "post_id": 31753989, "comment_id": 51443935, "body": "Can you provide a minimal compilable example of the problem you&#39;re trying to solve? Your present question is about an attempted non-working solution to some problem that hasn&#39;t been described. There&#39;s a good chance you can solve your original problem in safe Rust."}], "answers": [{"comments": [{"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1438383067, "post_id": 31755666, "comment_id": 51446214, "body": "The second code seems to solve it : that was exactly what I <a href=\"http://is.gd/RhZ12g\" rel=\"nofollow noreferrer\">needed</a>. I originaly did not want to use KeyVal&lt;&#39;a&gt; because it will repercute the lifetime all over my program, but seems like I do not have a choice. Thanks for the reply."}, {"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1438384626, "post_id": 31755666, "comment_id": 51446666, "body": "I got happy prematuraly, after completing my test with spawn usage I got back to problems (see <a href=\"http://is.gd/gPtGze\" rel=\"nofollow noreferrer\">playpen</a>), this lifetime as trait parameter seems to conflict with spawn usage (without it does not)."}, {"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1438385289, "post_id": 31755666, "comment_id": 51446836, "body": "Using HRTB for spawning, it seems like I can run my spawn function (I updated the code in the original post), that may be fine (I need to document a bit more about HRTB before being comfortable using this)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1438379704, "last_edit_date": 1438379704, "creation_date": 1438379118, "answer_id": 31755666, "question_id": 31753989, "link": "https://stackoverflow.com/questions/31753989/how-to-return-a-reference-from-a-trait-when-combining-types-into-enum/31755666#31755666", "title": "How to return a reference from a trait when combining types into enum", "body": "<p>I agree with A.B. that your motivation is unclear, so any help we can provide is guessing at best. That being said, here's a guess that uses <a href=\"http://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow\"><code>Borrow</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::borrow::Borrow;\n\ntrait KeyVal&lt;'a&gt; { \n    type Key: Borrow&lt;Self::KeyRef&gt;;\n    type KeyRef: 'a;\n\n    fn get_key(&amp;self) -&gt; Self::Key;\n    fn get_key_ref(&amp;'a self) -&gt; &amp;'a Self::KeyRef;\n}\n\nstruct Example(u8);\n\nimpl&lt;'a&gt; KeyVal&lt;'a&gt; for Example {\n    type Key = u8;\n    type KeyRef = u8;\n\n    fn get_key(&amp;self) -&gt; Self::Key {\n        self.0\n    }  \n\n    fn get_key_ref(&amp;'a self) -&gt; &amp;'a Self::KeyRef {\n        &amp;self.0\n    }\n}\n\nfn main() {\n    let e = Example(42);\n    println!(\"{:?}\", e.get_key());\n    println!(\"{:p}\", e.get_key_ref());\n}\n</code></pre>\n\n<p>The other piece is <code>type KeyRef: 'a</code>, which indicates that the type chosen must outlive <code>'a</code>.</p>\n\n<p>You don't need <code>Borrow</code> though, I suppose:</p>\n\n<pre><code>trait KeyVal&lt;'a&gt; { \n    type Key;\n    type KeyRef: 'a;\n\n    fn get_key(&amp;self) -&gt; Self::Key;\n    fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef;\n}\n\n#[derive(Debug)]\nstruct Example(u8);\n#[derive(Debug)]\nstruct RefWrapper&lt;'a&gt;(&amp;'a u8);\n\nimpl&lt;'a&gt; KeyVal&lt;'a&gt; for Example {\n    type Key = u8;\n    type KeyRef = RefWrapper&lt;'a&gt;;\n\n    fn get_key(&amp;self) -&gt; Self::Key {\n        self.0\n    }  \n\n    fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef {\n        RefWrapper(&amp;self.0)\n    }\n}\n\nfn main() {\n    let e = Example(42);\n    println!(\"{:?}\", e.get_key());\n    println!(\"{:?}\", e.get_key_ref());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "is_accepted": false, "score": 1, "last_activity_date": 1438386269, "creation_date": 1438386269, "answer_id": 31756763, "question_id": 31753989, "link": "https://stackoverflow.com/questions/31753989/how-to-return-a-reference-from-a-trait-when-combining-types-into-enum/31756763#31756763", "title": "How to return a reference from a trait when combining types into enum", "body": "<p>Using Shepmaster's solution (plus HRTB for spawn), it becomes :</p>\n\n<pre><code>use std::fmt::Debug;\n\nuse std::thread;\n\npub trait KeyVal&lt;'a&gt; : Send + Sync + 'static {\n  type Key : Clone + Debug + 'static;\n  type KeyRef : Debug + 'a;\n  fn get_key(&amp;self) -&gt; Self::Key;\n  fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef;\n}\n\npub fn do_something_with_spawn&lt;KV&gt; (kv : KV)\n  where for &lt;'a&gt; KV : KeyVal&lt;'a&gt; {\n  thread::spawn ( move || {\n  println!(\"{:?}\", kv.get_key_ref());\n  });\n}\n#[derive(Debug)]\npub struct StructA (usize);\n#[derive(Debug)]\npub struct StructB (String);\n\n#[derive(Debug)]\npub enum EnumAB {\n  A(StructA),\n  B(StructB),\n}\n\n\nimpl&lt;'a&gt; KeyVal&lt;'a&gt; for StructA {\n  type Key = usize;\n  type KeyRef = &amp;'a usize;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    self.0.clone()\n  }\n  fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef {\n    &amp;self.0\n  }\n}\n\nimpl&lt;'a&gt; KeyVal&lt;'a&gt; for StructB {\n  type Key = String;\n  type KeyRef = &amp;'a String;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    self.0.clone()\n  }\n  fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef {\n    &amp;self.0\n  }\n}\n\n#[derive(Clone,Debug)]\npub enum KeyAB {\n  A(usize),\n  B(String),\n}\n\n#[derive(Clone,Debug)]\npub enum KeyABRef&lt;'a&gt; {\n  A(&amp;'a usize),\n  B(&amp;'a String),\n}\n\nimpl&lt;'a&gt; KeyVal&lt;'a&gt; for EnumAB {\n  type Key = KeyAB;\n  type KeyRef = KeyABRef&lt;'a&gt;;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    match self {\n      &amp;EnumAB::A(ref a) =&gt; KeyAB::A(a.get_key()),\n      &amp;EnumAB::B(ref b) =&gt; KeyAB::B(b.get_key()),\n    }\n  }\n  fn get_key_ref(&amp;'a self) -&gt; Self::KeyRef {\n    match self {\n      &amp;EnumAB::A(ref a) =&gt; KeyABRef::A(a.get_key_ref()),\n      &amp;EnumAB::B(ref b) =&gt; KeyABRef::B(b.get_key_ref()),\n    }\n  }\n}\n\n\n\nfn main () {\n  let d2 = StructB(\"hello\".to_string());\n  let d3 = EnumAB::A(StructA(3));\n  println!(\"{:?}\",d2.get_key());\n  println!(\"{:?}\",d3.get_key());\n  println!(\"{:?}\",d2.get_key_ref());\n  println!(\"{:?}\",d3.get_key_ref());\n  do_something_with_spawn(d3);\n\n}\n</code></pre>\n"}], "owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 235, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1438386269, "creation_date": 1438371733, "last_edit_date": 1438386190, "question_id": 31753989, "link": "https://stackoverflow.com/questions/31753989/how-to-return-a-reference-from-a-trait-when-combining-types-into-enum", "title": "How to return a reference from a trait when combining types into enum", "body": "<p>I am a bit stuck (except by duplicating my memory (see DupKeyEAB in  <a href=\"http://is.gd/gDrntl\" rel=\"nofollow\">playpen</a>), I got this trait:</p>\n\n<pre><code>   pub trait KeyVal : Send + Sync + 'static { \n      type Key : Clone + Debug + 'static;\n      fn get_key(&amp;self) -&gt; Self::Key;\n      fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key;\n    }\n</code></pre>\n\n<p>My problem is that I need something like (to avoid using clone each time I access the key) :</p>\n\n<pre><code>  pub trait KeyVal : Send + Sync + 'static { \n      type Key : Clone + Debug + 'static;\n      type KeyRef&lt;'_&gt; : Debug;\n      fn get_key(&amp;self) -&gt; Self::Key;\n      fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; Self::KeyRef&lt;'a&gt;;\n    }\n</code></pre>\n\n<p>or directly (with KeyRef as a trait)</p>\n\n<pre><code>  fn get_key_ref&lt;'a,K : KeyRef&lt;'a&gt;&gt;(&amp;'a self) -&gt; K;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>   fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; KeyRef&lt;'a&gt;;\n</code></pre>\n\n<p>All those notations are obviously pretty invalid, but it illustrate that I need to return a reference with the same lifetime as the struct implementing my trait but at the same time the reference could not simply be &amp;'a but also a enum with the same lifetime.</p>\n\n<p>That way when using get_key_ref on simple struct my KeyRef is simply &amp;'aKey and when using get_key_ref on <strong>enum combining multiple trait implementation</strong> (see <a href=\"http://is.gd/gDrntl\" rel=\"nofollow\">EnumAB</a>) I could use a wrapper enum over the reference to the key : like <code>KeyABRef&lt;'a&gt;</code>.</p>\n\n<pre><code>  impl EnumAB {\n     fn get_key_ok&lt;'a&gt;(&amp;'a self) -&gt; KeyABRef&lt;'a&gt; {\n       match self {\n         &amp;EnumAB::A(ref a) =&gt; KeyABRef::A(a.get_key_ref()),\n         &amp;EnumAB::B(ref b) =&gt; KeyABRef::B(b.get_key_ref()),\n       }\n     }\n   }\n</code></pre>\n\n<p>Yet I cannot include this function in my trait.\nI wonder if anyone got a solution for this kind of need (KeyVal need to be 'static)?</p>\n\n<p>My original test code was :</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\npub trait KeyVal : Send + Sync + 'static {\n  type Key : Clone + Debug + 'static;\n  fn get_key(&amp;self) -&gt; Self::Key;\n  fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key;\n}\n\npub fn do_something_with_spawn&lt;KV : KeyVal&gt; (kv : KV) {\n  thread::spawn ( move || {\n    println!(\"{:?}\", kv.get_key_ref());\n  });\n}\n#[derive(Debug)]\npub struct StructA (usize);\n#[derive(Debug)]\npub struct StructB (String);\n\n#[derive(Debug)]\npub enum EnumAB {\n  A(StructA),\n  B(StructB),\n}\n\n\nimpl KeyVal for StructA {\n  type Key = usize;\n  // type KeyRef&lt;'_&gt; = &amp;'_ usize;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    self.0.clone()\n  }\n  fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key {\n    &amp;self.0\n  }\n}\n\nimpl KeyVal for StructB {\n  type Key = String;\n  // type KeyRef&lt;'_&gt; = &amp;'_ String;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    self.0.clone()\n  }\n  fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key {\n    &amp;self.0\n  }\n}\n\n#[derive(Clone,Debug)]\npub enum KeyAB {\n  A(usize),\n  B(String),\n}\n\n#[derive(Clone,Debug)]\npub enum KeyABRef&lt;'a&gt; {\n  A(&amp;'a usize),\n  B(&amp;'a String),\n}\n\nimpl KeyVal for EnumAB {\n  type Key = KeyAB;\n  // type KeyRef&lt;'_&gt; = KeyABRef&lt;'_&gt;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    match self {\n      &amp;EnumAB::A(ref a) =&gt; KeyAB::A(a.get_key()),\n      &amp;EnumAB::B(ref b) =&gt; KeyAB::B(b.get_key()),\n    }\n  }\n  fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key {\n    panic!(\"cannot\");\n  }\n}\n\nimpl EnumAB {\n  fn get_key_ok&lt;'a&gt;(&amp;'a self) -&gt; KeyABRef&lt;'a&gt; {\n    match self {\n      &amp;EnumAB::A(ref a) =&gt; KeyABRef::A(a.get_key_ref()),\n      &amp;EnumAB::B(ref b) =&gt; KeyABRef::B(b.get_key_ref()),\n    }\n  }\n}\n\n#[derive(Debug)]\npub struct DupKeyEAB (KeyAB, EnumAB);\nimpl KeyVal for DupKeyEAB {\n  type Key = KeyAB;\n  fn get_key(&amp;self) -&gt; Self::Key {\n    self.0.clone()\n  }\n  fn get_key_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Self::Key {\n    &amp;self.0\n  }\n}\n\nfn main () {\n  let d2 = StructB(\"hello\".to_string());\n  let d3 = EnumAB::A(StructA(3));\n  println!(\"{:?}\",d2.get_key());\n  println!(\"{:?}\",d3.get_key());\n  println!(\"{:?}\",d2.get_key_ref());\n  println!(\"{:?}\",d3.get_key_ok());\n\n do_something_with_spawn(d3);\n}\n</code></pre>\n"}, {"tags": ["unit-testing", "rust", "idioms"], "answers": [{"comments": [{"owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 2, "creation_date": 1438370297, "post_id": 31753126, "comment_id": 51440848, "body": "I had done this at first but I was doing <code>use super::*</code>. If I just explicitly <code>use super::some_function</code> it works as you describe. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 0, "creation_date": 1438379869, "post_id": 31753126, "comment_id": 51445238, "body": "@SeanPerry AFAIK glob imports don&#39;t include functions, only types. One of the few times I use glob imports is when I am writing my test module, as I usually want to test everything in the parent module."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1556094747, "post_id": 31753126, "comment_id": 98316336, "body": "@Shepmaster wouldn&#39;t it be good practice to use <code>#[cfg(test)]</code> on <code>mod test</code>?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1438369864, "last_edit_date": 1438369864, "creation_date": 1438368568, "answer_id": 31753126, "question_id": 31752882, "link": "https://stackoverflow.com/questions/31752882/what-is-the-idiomatic-way-to-have-a-private-function-tested/31753126#31753126", "title": "What is the idiomatic way to have a private function tested?", "body": "<p>Nest your test module inside the module containing the private methods or structs:</p>\n\n<pre><code>mod inners {\n    fn my_func() -&gt; u8 { 42 }\n\n    mod test {\n        #[test]\n        fn is_answer() {\n            assert_eq!(42, super::my_func());\n        }\n    }\n}\n</code></pre>\n\n<p>Of course, I disagree that you should test private stuff in general, but thats a different discussion.</p>\n"}, {"comments": [{"owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 4, "creation_date": 1438370172, "post_id": 31753165, "comment_id": 51440799, "body": "I have simple internals that do not log or print or anything. The public routines which call them do. So my unit tests are quiet, idempotent, etc. This is not testing external access which is often what is buried in the private regions of code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 1, "creation_date": 1438373188, "post_id": 31753165, "comment_id": 51442270, "body": "@SeanPerry I would disagree that one is often testing external access. Indeed, having pure logic exposed as public functions or methods allows downstream consumers is even nicer. You can test that public interface and users of your library deal with the IO bits."}, {"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 1, "creation_date": 1499243581, "post_id": 31753165, "comment_id": 76817585, "body": "Sometimes you need to have access to implementation details to trigger a certain behaviour through the public API. A simple example would be testing an array sort method: At low amounts, ie. around 10 elements, using bubblesort instead of quicksort (or similar) is typically faster. The threshold is a private implementation detail, but you need to know it to reliably trigger both codepaths in your test."}], "tags": [], "owner": {"reputation": 249903, "user_id": 2422776, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2353050223ebecb113741c29458de4b2?s=128&d=identicon&r=PG", "display_name": "Mureinik", "link": "https://stackoverflow.com/users/2422776/mureinik"}, "is_accepted": false, "score": 4, "last_activity_date": 1438368727, "creation_date": 1438368727, "answer_id": 31753165, "question_id": 31752882, "link": "https://stackoverflow.com/questions/31752882/what-is-the-idiomatic-way-to-have-a-private-function-tested/31753165#31753165", "title": "What is the idiomatic way to have a private function tested?", "body": "<p>The idiomatic way to test a private function is not to. Unit tests are supposed to test a class' public behavior. Private methods are just implementation details of the aforementioned public methods which you should test.</p>\n"}], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1399, "favorite_count": 0, "accepted_answer_id": 31753126, "answer_count": 2, "score": 5, "last_activity_date": 1438369864, "creation_date": 1438367605, "last_edit_date": 1438368437, "question_id": 31752882, "link": "https://stackoverflow.com/questions/31752882/what-is-the-idiomatic-way-to-have-a-private-function-tested", "title": "What is the idiomatic way to have a private function tested?", "body": "<p>The Rust book <a href=\"https://doc.rust-lang.org/stable/book/testing.html#the-tests-module\" rel=\"noreferrer\">says</a> that using a \"tests\" module is the idiomatic way to have unit tests. But I cannot see a function from the super module in the tests module if that function is not marked 'pub'. How should one test internal functions then?</p>\n\n<p>My first instinct was to look for a way to <code>#ifdef</code> the keyword <code>pub</code>. I have done this in the past for C++ testing. For Rust what I have done is simply have tests for private functions in the module and then tests for the public interface in the \"tests\" module.</p>\n\n<p>Am I doing it right?</p>\n"}, {"tags": ["struct", "rust", "mutators"], "answers": [{"comments": [{"owner": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "edited": false, "score": 2, "creation_date": 1438364712, "post_id": 31751848, "comment_id": 51437906, "body": "Ok, I think that helps a bit. So it&#39;s as though <code>mut</code> in front of a variable just applies a mutable <i>property</i> to the variable. And that property implies certain things, e.g. rebinding, and struct-field modification. Is that accurate?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "edited": false, "score": 0, "creation_date": 1438441157, "post_id": 31751848, "comment_id": 51458646, "body": "Yes, you&#39;re mostly right (except that <code>mut</code> does not affect rebinding in a sense that you can still write <code>let x = 10; let x = 12</code> even if <code>x</code> is not <code>mut</code>. What <code>mut</code> actually allows is assignment into the value (either the variable itself or a field inside it if it is a structure) and taking <code>&amp;mut</code> references, again, to the value or to a subfield."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 7, "last_activity_date": 1438363538, "creation_date": 1438363538, "answer_id": 31751848, "question_id": 31751642, "link": "https://stackoverflow.com/questions/31751642/understanding-struct-field-mutation/31751848#31751848", "title": "Understanding struct-field mutation", "body": "<p>Here \"binding\" is not a verb, it is a noun. You can say that in Rust bindings are synonymous to variables. Therefore, you can read that passage like</p>\n\n<blockquote>\n  <p>Mutability is a property of the variable, not of the structure itself.</p>\n</blockquote>\n\n<p>Now, I guess, it should be clear - you mark the variable as mutable and so you can modify its contents.</p>\n"}, {"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 10, "last_activity_date": 1438364327, "last_edit_date": 1438364327, "creation_date": 1438363619, "answer_id": 31751866, "question_id": 31751642, "link": "https://stackoverflow.com/questions/31751642/understanding-struct-field-mutation/31751866#31751866", "title": "Understanding struct-field mutation", "body": "<blockquote>\n  <p>This seems counter-intuitive to me because point.x = 5 doesn't look like I'm rebinding the variable point. Is there a way to explain this so it's more intuitive?</p>\n</blockquote>\n\n<p>All this is saying is that whether or not something is mutable is determined by the <code>let</code>- statement (the binding) of the variable, as opposed to being a property of the type or any specific field.</p>\n\n<p>In the example, <code>point</code> and its fields are mutable because <code>point</code> is introduced in a <code>let mut</code> statement (as opposed to a simple <code>let</code> statement) and not because of some property of the <code>Point</code> type in general.</p>\n\n<p>As a contrast, to show why this is interesting: in other languages, like OCaml, you can mark certain fields mutable in the definition of the type:</p>\n\n<pre><code>type point =\n   { x: int;\n     mutable y: int;\n   };\n</code></pre>\n\n<p>This means that you can mutate the <code>y</code> field of every <code>point</code> value, but you can never mutate <code>x</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "edited": false, "score": 0, "creation_date": 1440434932, "post_id": 31765195, "comment_id": 52260364, "body": "You set me on the right track. I needed to write a demo to see it in action (see my answer)."}, {"owner": {"reputation": 1446, "user_id": 2626993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54928fa385db9ab209b2590627af9438?s=128&d=identicon&r=PG", "display_name": "m-n", "link": "https://stackoverflow.com/users/2626993/m-n"}, "reply_to_user": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "edited": false, "score": 0, "creation_date": 1440479535, "post_id": 31765195, "comment_id": 52276847, "body": "@Kelvin Thanks for posting your demo. That&#39;s a nice way of putting it."}], "tags": [], "owner": {"reputation": 1446, "user_id": 2626993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54928fa385db9ab209b2590627af9438?s=128&d=identicon&r=PG", "display_name": "m-n", "link": "https://stackoverflow.com/users/2626993/m-n"}, "is_accepted": true, "score": 7, "last_activity_date": 1438458717, "last_edit_date": 1438458717, "creation_date": 1438455864, "answer_id": 31765195, "question_id": 31751642, "link": "https://stackoverflow.com/questions/31751642/understanding-struct-field-mutation/31765195#31765195", "title": "Understanding struct-field mutation", "body": "<p>I had the same confusion. For me it came from two separate misunderstandings. First, I came from a language where variables (aka bindings) were implicitly references to values. In that language it was important to distinguish between mutating the reference, and mutating the value that was referred to. Second, I thought by \"the structure itself\" the book was referring to the instantiated value, but by \"the structure\" it means the specification/declaration, not a particular value of that type.</p>\n\n<p>Variables in Rust are different. From the <a href=\"http://doc.rust-lang.org/reference.html#variables\">reference</a>:</p>\n\n<blockquote>\n  <p>A variable is a component of a stack frame...</p>\n  \n  <p>A local variable (or stack-local allocation) holds a value directly,\n  allocated within the stack's memory. The value is a part of the stack\n  frame.</p>\n</blockquote>\n\n<p>So a variable is a component of a stack frame -- a chunk of memory -- that <em>directly</em> holds the value. There is no reference to distinguish from the value itself, no reference to mutate. The variable and the value are the same hunk of memory.</p>\n\n<p>A consequence is that rebinding a variable in the sense of changing it to refer to a different hunk of memory is not compatible with Rust's memory model. (n.b. <code>let x = 1; let x = 2;</code> creates two variables.)</p>\n\n<p>So the book is pointing out that mutability is declared at the \"per hunk of memory\" level rather than as part of the definition of a struct.</p>\n\n<blockquote>\n  <p>The only way I can wrap my head around this is to \"imagine\" that I'm\n  rebinding point to a copy of the original Point with a different x\n  value (not even sure that's accurate)</p>\n</blockquote>\n\n<p>Instead imagine you are changing one of the 0's in a hunk of memory to a 5; and that that value resides within the memory designated by <code>point</code>. Interpret \"the binding is mutable\" to mean that you can mutate the hunk of memory designated by the binding, including mutating just part of it, e.g. by setting a struct field. Think of rebinding Rust variables in the way that you describe as not expressible within Rust.</p>\n"}, {"tags": [], "owner": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "is_accepted": false, "score": 6, "last_activity_date": 1440435198, "last_edit_date": 1440435198, "creation_date": 1440434589, "answer_id": 32187463, "question_id": 31751642, "link": "https://stackoverflow.com/questions/31751642/understanding-struct-field-mutation/32187463#32187463", "title": "Understanding struct-field mutation", "body": "<p>@m-n's answer set me on the right track. It's all about stack addresses! Here's a demonstration that solidified in my mind what's actually happening.</p>\n\n<pre><code>struct Point {\n    x: i64,\n    y: i64,\n}\n\nfn main() {\n    {\n        println!(\"== clobber binding\");\n        let a = 1;\n        println!(\"val={} | addr={:p}\", a, &amp;a);\n        // This is completely new variable, with a different stack address\n        let a = 2;\n        println!(\"val={} | addr={:p}\", a, &amp;a);\n    }\n    {\n        println!(\"== reassign\");\n        let mut b = 1;\n        println!(\"val={} | addr={:p}\", b, &amp;b);\n        // uses same stack address\n        b = 2;\n        println!(\"val={} | addr={:p}\", b, &amp;b);\n    }\n    {\n        println!(\"== Struct: clobber binding\");\n        let p1 = Point{ x: 1, y: 2 };\n        println!(\n          \"xval,yval=({}, {}) | pointaddr={:p}, xaddr={:p}, yaddr={:p}\",\n          p1.x, p1.y,            &amp;p1,            &amp;p1.x,      &amp;p1.y);\n\n        let p1 = Point{ x: 3, y: 4 };\n        println!(\n          \"xval,yval=({}, {}) | pointaddr={:p}, xaddr={:p}, yaddr={:p}\",\n          p1.x, p1.y,            &amp;p1,            &amp;p1.x,      &amp;p1.y);\n    }\n    {\n        println!(\"== Struct: reassign\");\n        let mut p1 = Point{ x: 1, y: 2 };\n        println!(\n          \"xval,yval=({}, {}) | pointaddr={:p}, xaddr={:p}, yaddr={:p}\",\n          p1.x, p1.y,            &amp;p1,            &amp;p1.x,      &amp;p1.y);\n\n        // each of these use the same addresses; no new addresses\n        println!(\"   (entire struct)\");\n        p1 = Point{ x: 3, y: 4 };\n        println!(\n          \"xval,yval=({}, {}) | pointaddr={:p}, xaddr={:p}, yaddr={:p}\",\n          p1.x, p1.y,            &amp;p1,            &amp;p1.x,      &amp;p1.y);\n\n        println!(\"   (individual members)\");\n        p1.x = 5; p1.y = 6;\n        println!(\n          \"xval,yval=({}, {}) | pointaddr={:p}, xaddr={:p}, yaddr={:p}\",\n          p1.x, p1.y,            &amp;p1,            &amp;p1.x,      &amp;p1.y);\n    }\n}\n</code></pre>\n\n<p>Output (addresses are obviously slightly different per run):</p>\n\n<pre><code>== clobber binding\nval=1 | addr=0x7fff6112863c\nval=2 | addr=0x7fff6112858c\n== reassign\nval=1 | addr=0x7fff6112847c\nval=2 | addr=0x7fff6112847c\n== Struct: clobber binding\nxval,yval=(1, 2) | pointaddr=0x7fff611282b8, xaddr=0x7fff611282b8, yaddr=0x7fff611282c0\nxval,yval=(3, 4) | pointaddr=0x7fff61128178, xaddr=0x7fff61128178, yaddr=0x7fff61128180\n== Struct: reassign\nxval,yval=(1, 2) | pointaddr=0x7fff61127fd8, xaddr=0x7fff61127fd8, yaddr=0x7fff61127fe0\n   (entire struct)\nxval,yval=(3, 4) | pointaddr=0x7fff61127fd8, xaddr=0x7fff61127fd8, yaddr=0x7fff61127fe0\n   (individual members)\nxval,yval=(5, 6) | pointaddr=0x7fff61127fd8, xaddr=0x7fff61127fd8, yaddr=0x7fff61127fe0\n</code></pre>\n\n<p>The key points are these:</p>\n\n<ul>\n<li>Use <code>let</code> to \"clobber\" an existing binding (new stack address). This happens even if the variable was declared <code>mut</code>, so be careful.</li>\n<li>Use <code>mut</code> to reuse the existing stack address, but don't use <code>let</code> when reassigning.</li>\n</ul>\n\n<p>This test reveals a couple of interesting things:</p>\n\n<ul>\n<li>If you reassign an entire mutable struct, it's equivalent to assigning each member individually.</li>\n<li>The address of the variable holding the struct is the same as the address of the first member. I guess this makes sense if you're coming from a C/C++ background.</li>\n</ul>\n"}], "owner": {"reputation": 17720, "user_id": 498594, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/EYtd3.png?s=128&g=1", "display_name": "Kelvin", "link": "https://stackoverflow.com/users/498594/kelvin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 685, "favorite_count": 0, "accepted_answer_id": 31765195, "answer_count": 4, "score": 17, "last_activity_date": 1440435198, "creation_date": 1438362716, "last_edit_date": 1438379755, "question_id": 31751642, "link": "https://stackoverflow.com/questions/31751642/understanding-struct-field-mutation", "title": "Understanding struct-field mutation", "body": "<p>From the <a href=\"https://doc.rust-lang.org/book/structs.html\">Rust book</a> about how to mutate struct fields:</p>\n\n<pre><code>let mut point = Point { x: 0, y: 0 };\npoint.x = 5;\n</code></pre>\n\n<p>and later:</p>\n\n<blockquote>\n  <p>Mutability is a property of the binding, not of the structure itself.</p>\n</blockquote>\n\n<p>This seems counter-intuitive to me because <code>point.x = 5</code> doesn't look like I'm rebinding the variable <code>point</code>. Is there a way to explain this so it's more intuitive?</p>\n\n<p>The only way I can wrap my head around this is to \"imagine\" that I'm rebinding <code>point</code> to a copy of the original <code>Point</code> with a different <code>x</code> value (not even sure that's accurate).</p>\n"}, {"tags": ["vector", "rust", "placeholder"], "answers": [{"comments": [{"owner": {"reputation": 251, "user_id": 1363630, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/d1ccd28963f5c6509b6e7ed73bd95b80?s=128&d=identicon&r=PG", "display_name": "Singh", "link": "https://stackoverflow.com/users/1363630/singh"}, "edited": false, "score": 0, "creation_date": 1438355252, "post_id": 31749445, "comment_id": 51432673, "body": "Ohh okay thank you! I attempted replacing _ with a T but i didn&#39;t realize i needed to also add &lt;T&gt; after the function name.   In which situations is the type required to be put after the function name?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 251, "user_id": 1363630, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/d1ccd28963f5c6509b6e7ed73bd95b80?s=128&d=identicon&r=PG", "display_name": "Singh", "link": "https://stackoverflow.com/users/1363630/singh"}, "edited": false, "score": 1, "creation_date": 1438355342, "post_id": 31749445, "comment_id": 51432735, "body": "It is always required if you don&#39;t have concrete type like <code>i32</code> or <code>A</code> where <code>A</code> is a struct you defined. In case the function is a method, you also can use generic arguments to the type."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1438355062, "creation_date": 1438355062, "answer_id": 31749445, "question_id": 31749153, "link": "https://stackoverflow.com/questions/31749153/the-type-placeholder-is-not-allowed-within-types-on-item-signatures/31749445#31749445", "title": "The type placeholder `_` is not allowed within types on item signatures", "body": "<p>You would convert your function to a generic function:</p>\n\n<pre><code>fn shuffle&lt;T&gt;(args: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n</code></pre>\n\n<p>See it in the playpen: <a href=\"http://is.gd/MCCxal\" rel=\"nofollow\">http://is.gd/MCCxal</a></p>\n"}], "owner": {"reputation": 251, "user_id": 1363630, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/d1ccd28963f5c6509b6e7ed73bd95b80?s=128&d=identicon&r=PG", "display_name": "Singh", "link": "https://stackoverflow.com/users/1363630/singh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1040, "favorite_count": 0, "accepted_answer_id": 31749445, "answer_count": 1, "score": 5, "last_activity_date": 1569780062, "creation_date": 1438354321, "last_edit_date": 1569780062, "question_id": 31749153, "link": "https://stackoverflow.com/questions/31749153/the-type-placeholder-is-not-allowed-within-types-on-item-signatures", "title": "The type placeholder `_` is not allowed within types on item signatures", "body": "<p>Beginner question; and a search couldn't find anything similar. </p>\n\n<p><strong>Background:</strong> I'm just practising functions in Rust by making a shuffling function. Program takes in any arguments and shuffles them and stores them in '<code>result</code>'</p>\n\n<p><strong>Question:</strong> I guess I can't use <code>V&lt;_&gt;</code> in a function header so what would I use in this situation?</p>\n\n<p><strong>MCVE:</strong></p>\n\n<pre><code>use std::io;\nuse std::cmp::Ordering;\nuse std::env;\n\nfn main()\n{\n    let mut result = shuffle(env::args().collect());\n}//End of main\n\nfn shuffle(args: Vec&lt;_&gt;) -&gt; Vec&lt;_&gt;\n{ \n    let mut temp = Vec::with_capacity((args.capacity()));\n    while args.len() &gt; 1 \n    {\n        //LET N REPRESENT A RANDOM NUMBER GENERATED ON EACH ITERATION\n        let mut n = 2;\n        temp.push(args.swap_remove(n));\n    }\n    return temp;\n}//End of shuffle function\n</code></pre>\n\n<p><strong><a href=\"https://play.rust-lang.org/?gist=60c252f7a696d68e679c&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></strong></p>\n"}, {"tags": ["rust", "channel"], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1438348909, "post_id": 31746816, "comment_id": 51427958, "body": "hmm .. is it always intended to be this round-about ? Do you have any other way ? I&#39;ll wait for sometime before accepting an answer."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 1, "creation_date": 1438350836, "post_id": 31746816, "comment_id": 51429359, "body": "I don&#39;t see how this could be different, because <code>Drop::drop</code> takes a <code>&amp;mut self</code>, which you cannot move out of."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1438347552, "creation_date": 1438347552, "answer_id": 31746816, "question_id": 31746716, "link": "https://stackoverflow.com/questions/31746716/how-to-correctly-exit-the-thread-blocking-on-mpscreceiver/31746816#31746816", "title": "How to correctly exit the thread blocking on mpsc::Receiver", "body": "<p>You can wrap the <code>a</code> field of your <code>B</code> type in an <code>Option</code>. This way in the <code>Drop::drop</code> method you can do <code>drop(self.a.take())</code> which will replace the field with a <code>None</code> and drop the sender. This closes the channel and your thread can now be properly joined.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 0, "last_activity_date": 1438355827, "last_edit_date": 1438355827, "creation_date": 1438351570, "answer_id": 31748184, "question_id": 31746716, "link": "https://stackoverflow.com/questions/31746716/how-to-correctly-exit-the-thread-blocking-on-mpscreceiver/31748184#31748184", "title": "How to correctly exit the thread blocking on mpsc::Receiver", "body": "<p>You can create a new channel and swap your actual sender out with the dummy-sender. Then you can drop your sender and therefor join the thread:</p>\n\n<pre><code>impl Drop for B {\n    fn drop(&amp;mut self) {\n        let (s, _) = channel();\n        drop(replace(&amp;mut self.a.sender, s));\n        self.join_handle.take().unwrap().join().unwrap();\n    }\n}\n</code></pre>\n\n<p>Try it out in the playpen: <a href=\"http://is.gd/y7A9L0\" rel=\"nofollow\">http://is.gd/y7A9L0</a></p>\n\n<p>I don't know what the overhead of creating and immediately dropping a channel is, but it's not free and unlikely to be optimized out (There's an <code>Arc</code> in there).</p>\n\n<hr>\n\n<p>on a side-note, Your infinite loop with a match on <code>receiver.recv()</code> could be replaced by a for loop using the <a href=\"https://doc.rust-lang.org/nightly/std/sync/mpsc/struct.Receiver.html#method.iter\" rel=\"nofollow\"><code>Receiver::iter</code></a> method:</p>\n\n<pre><code>for _ in receiver.iter() {\n    // do something with the value\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438353413, "post_id": 31748498, "comment_id": 51431365, "body": "this is the clean solution, everything else is either a little or a lot hacky"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1438353517, "post_id": 31748498, "comment_id": 51431444, "body": "Closing a channel to indicate the producer is done is idiomatic IMO."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438355645, "post_id": 31748498, "comment_id": 51432923, "body": "true, but catching that indication through the <code>Err</code> feels wrong. Instead <a href=\"https://doc.rust-lang.org/nightly/std/sync/mpsc/struct.Receiver.html#method.iter\" rel=\"nofollow noreferrer\"><code>Receiver::iter</code></a> should be used."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1438853428, "post_id": 31748498, "comment_id": 51623906, "body": "seems cleanest .. went with this approach finally .. thanks !"}], "tags": [], "owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "is_accepted": true, "score": 2, "last_activity_date": 1438352580, "creation_date": 1438352580, "answer_id": 31748498, "question_id": 31746716, "link": "https://stackoverflow.com/questions/31746716/how-to-correctly-exit-the-thread-blocking-on-mpscreceiver/31748498#31748498", "title": "How to correctly exit the thread blocking on mpsc::Receiver", "body": "<p>Why not sending a specific message to shut this thread? I do not know what is your data but most of the time it may be an enum and adding a enum variant like 'MyData::Shutdown' in your receive you can simply break out of the loop.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1315, "favorite_count": 0, "accepted_answer_id": 31748498, "answer_count": 3, "score": 5, "last_activity_date": 1438355827, "creation_date": 1438347257, "question_id": 31746716, "link": "https://stackoverflow.com/questions/31746716/how-to-correctly-exit-the-thread-blocking-on-mpscreceiver", "title": "How to correctly exit the thread blocking on mpsc::Receiver", "body": "<pre><code>impl A {\n    fn new() -&gt; (A, std::sync::mpsc::Receiver&lt;Data&gt;) {\n        let (sender, receiver) = std::sync::mpsc::channel();\n\n        let objA = A { sender: sender, }; // A spawns threads, clones and uses sender etc\n        (objA, receiver)\n    }\n}\n\nimpl B {\n    fn new() -&gt; B {\n        let (objA, receiver) = A::new();\n\n        B {\n            a: objA,\n            join_handle: Some(std::thread::spwan(move || {\n                loop {\n                    match receiver.recv() {\n                        Ok(data) =&gt; /* Do Something, inform main thread etc */,\n                        Err(_) =&gt; break,\n                    }\n                }\n            })),\n        }\n    }\n}\n\nimpl Drop for B {\n    fn drop(&amp;mut self) {\n        // Want to do something like \"sender.close()/receiver.close()\" etc so that the following\n        // thread joins. But there is no such function. How do i break the following thread ?\n        self.join_handle().take().unwrap().join().unwrap();\n    }\n}\n</code></pre>\n\n<p>Is there a way to cleanly exit under such a circumstance ? The thing is that when either receiver or sender is dropped the other sniffs this and gives an error. In case of <code>receiver</code> it will be woken up and will yield an error in which case i am breaking out of the infinite and blocking loop above. However how do i do that explicitly using this very property of channels, without resorting to other flags in conjunction with <code>try_recv()</code>etc., and cleanly exit my thread deterministically?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1438321201, "post_id": 31736656, "comment_id": 51412032, "body": "You need <code>#![feature(slice_patterns)]</code> because of a (likely) error in your code. When you write <code>|&amp;[String]|</code> in closure, you&#39;re not assigning it a <code>&amp;[String]</code> type for the first parameter; you&#39;re using a pattern for a slice with one element which is assigned to <code>String</code> local variable. This pattern is refutable so when you resolve your current type error, you will get an error there because function argument patterns must be irrefutable. You will also most certainly get an error that you&#39;re trying to return a closure from a function returning <code>fn</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439039145, "post_id": 31736656, "comment_id": 51703444, "body": "Please do not update your question with your solved code. Go ahead and put it as a separate answer \u2014 doing so is totally recommended."}], "answers": [{"comments": [{"owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "edited": false, "score": 0, "creation_date": 1438358637, "post_id": 31736907, "comment_id": 51434637, "body": "Thank you. Along the way I was getting a message that said something to the effect of &quot;can&#39;t match impl_foo::call to impl_bar::call_bar&quot;. This stood out over the other mistakes and I focused on it rather than the whole thing. When I looked online I found references to functions with the same type not actually being the same internally and thought I had stepped in something.  This is what happens when I try to cram learning exercises into my lunch break :-)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1438307484, "creation_date": 1438307484, "answer_id": 31736907, "question_id": 31736656, "link": "https://stackoverflow.com/questions/31736656/how-to-implement-a-vector-array-of-functions-in-rust-when-the-functions-co/31736907#31736907", "title": "How to implement a vector (array, ..) of functions in Rust when the functions come from different modules", "body": "<p>Read the error message carefully:</p>\n\n<pre><code>src/main.rs:44:5: 44:50 error: mismatched types:\n   expected `fn(&amp;[collections::string::String]) -&gt;    core::result::Result&lt;i32, (i32, collections::string::String)&gt;`,\nfound `(collections::string::String, fn(&amp;[collections::string::String]) -&gt; core::result::Result&lt;i32, (i32, collections::string::String)&gt; {impl_foo::call})`\n</code></pre>\n\n<p>Let's simplify it:</p>\n\n<pre><code>src/main.rs:44:5: 44:50 error: mismatched types:\n   expected `fn(&amp;[String]) -&gt; Result&lt;i32, (i32, String)&gt;`,\nfound `(String, fn(&amp;[String]) -&gt; Result&lt;i32, (i32, String)&gt; {impl_foo::call})`\n</code></pre>\n\n<p>What this message is telling you is that you're trying to put a tuple of <code>String</code> and a function type into an array that expects only the function type.</p>\n\n<p>You probably meant to define your array like this:</p>\n\n<pre><code>static FUNCTIONS: &amp;'static [(&amp;'static str, fn(&amp;[String]) -&gt; utils::CmdResult]) = &amp;[\n    (\"bar\", impl_bar::call_bar),\n    (\"foo\", impl_foo::call),\n];\n</code></pre>\n"}], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1676, "favorite_count": 0, "accepted_answer_id": 31736907, "answer_count": 1, "score": 0, "last_activity_date": 1438359620, "creation_date": 1438305665, "last_edit_date": 1495542117, "question_id": 31736656, "link": "https://stackoverflow.com/questions/31736656/how-to-implement-a-vector-array-of-functions-in-rust-when-the-functions-co", "title": "How to implement a vector (array, ..) of functions in Rust when the functions come from different modules", "body": "<p>I have seen:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/27491196/rust-array-of-functions?s=1|3.2082\">Rust array of functions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/27312069/rust-iterate-over-vector-of-functions\">Iterate over vector of functions</a></li>\n</ul>\n\n<p>and searched online. I do not want closures. I am trying to implement a classic dynamic(-ish) function lookup table.</p>\n\n<pre><code>mod impl_foo;\nmod impl_bar;\n\nuse utils;\n// a CmdResult is a Result with a tuple of an int and a string\n\nstatic FUNCTIONS: &amp;'static [fn(&amp;[String]) -&gt; utils::CmdResult] = &amp;[\n    (\"bar\".to_string(), impl_bar::call_bar),\n    (\"foo\".to_string(), impl_foo::call),\n];\n\nfn find_action(name: &amp;String) -&gt; (fn(&amp;[String]) -&gt; utils::CmdResult) {\n    match FUNCTIONS.binary_search_by(|item| item[0].cmp(name)) {\n        Ok(action) =&gt; action,\n        Err(_) =&gt; (|&amp;[String]| Err((1, format!(\"Unknown '{}'\", name))))\n    }\n}\n\n// later on in another function ....\n</code></pre>\n\n<p>action = find_action(\"foo\");\n   let result = action(args);\n   // process results</p>\n\n<p>But this does not compile:</p>\n\n<pre><code>src/main.rs:44:5: 44:50 error: mismatched types:\n   expected `fn(&amp;[collections::string::String]) -&gt;    core::result::Result&lt;i32, (i32, collections::string::String)&gt;`,\nfound `(collections::string::String, fn(&amp;[collections::string::String]) -&gt; core::result::Result&lt;i32, (i32, collections::string::String)&gt; {impl_foo::call})`\n</code></pre>\n\n<p>and again for <code>impl_bar::call_bar</code>.</p>\n\n<p>What am I missing? It appears to have something to do with the use of different modules since it clearly works for other people.</p>\n\n<p>I also tried to define a type:</p>\n\n<pre><code>type Action = fn(&amp;[String]) -&gt; utils::CmdResult;\n</code></pre>\n\n<p>and use that to cut down on typing but no luck there either.</p>\n\n<p>BTW, you need <code>#![feature(slice_patterns)]</code> because of the <code>&amp;[String]</code>.</p>\n\n<p>Edit the next morning.....</p>\n\n<p>As Francis points out below my transcription here had a flaw. It did not exactly match the real problem I had but it helped me see with fresh eyes.\nThe slice pattern requirement is because I was trying to handle unknown functions with a closure. Once I removed that the complaint went away. I was trying to be a little too dynamic language style I think :-)</p>\n\n<p>Below is the completed code that actually works so that people finding this question can see working code.</p>\n\n<pre><code>type Action = fn(&amp;[String]) -&gt; utils::CmdResult;\n\nstatic FUNCTIONS: &amp;'static [(&amp;'static str, Action)] = &amp;[\n    (\"bar\", impl_bar::call),\n    (\"foo\", impl_foo::call_foo),\n];\n\nfn find_action(prog: &amp;String) -&gt; Option&lt;Action&gt; {\n    match FUNCTIONS.binary_search_by(|&amp;(name,_)| name.cmp(prog)) {\n        Ok(idx) =&gt; Some(FUNCTIONS[idx].1),\n        Err(_) =&gt; None,\n    }\n}\n\nfn invoke(prog: &amp;String, args: &amp;[String]) -&gt; i32 {\n    let result = match find_action(prog) {\n        Some(action) =&gt; action(args),\n        None =&gt; Err((1, format!(\"Unknown: {}\", prog))),\n    };\n\n    result.unwrap_or_else(|(n, msg)| {\n        writeln!(io::stderr(), \"{}\", msg).ok();\n        n\n    })\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2928, "user_id": 1030462, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f115740b8a3b86d0b3fc50ef02c06766?s=128&d=identicon&r=PG", "display_name": "Aleksandra Zalcman", "link": "https://stackoverflow.com/users/1030462/aleksandra-zalcman"}, "edited": false, "score": 0, "creation_date": 1438381670, "post_id": 31735344, "comment_id": 51445816, "body": "Great, I didn&#39;t pay attention to the Option type, I&#39;ve just started playing with Rust. It&#39;s pretty cool! Thx."}], "tags": [], "owner": {"reputation": 76, "user_id": 5175702, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09fe297293bebde091e48ff468b72167?s=128&d=identicon&r=PG&f=1", "display_name": "Peter Reid", "link": "https://stackoverflow.com/users/5175702/peter-reid"}, "is_accepted": true, "score": 6, "last_activity_date": 1489075287, "last_edit_date": 1489075287, "creation_date": 1438296476, "answer_id": 31735344, "question_id": 31735125, "link": "https://stackoverflow.com/questions/31735125/how-to-access-a-field-of-a-struct-within-a-struct/31735344#31735344", "title": "How to access a field of a struct within a struct?", "body": "<p><code>Vec::pop</code> returns an <code>Option&lt;Child&gt;</code>, not a <code>Child</code>. This allows it to have something reasonable to return in case there are no elements in the <code>Vec</code> to pop off. To get at the <code>a</code> that may be inside, you can convert from <code>Option&lt;Child&gt;</code> to <code>Child</code> using <code>unwrap()</code>, but that will cause your program to <a href=\"http://doc.rust-lang.org/std/macro.panic!.html\" rel=\"nofollow noreferrer\">panic</a> if the <code>Vec</code> was empty. The code for that would look like this:</p>\n\n<pre><code>fn pop(&amp;mut self) -&gt; i32 {\n    return self.vector.pop().unwrap().a;\n}\n</code></pre>\n\n<p>Another option would be to more closely copy <code>Vec</code>'s behavior, and return <code>None</code> in case there are no elements. You could do that using <code>Option</code>'s <a href=\"http://doc.rust-lang.org/core/option/enum.Option.html#method.map\" rel=\"nofollow noreferrer\">map method</a>:</p>\n\n<pre><code>fn pop(&amp;mut self) -&gt; Option&lt;i32&gt; {\n    return self.vector.pop().map(|child| child.a)\n}\n</code></pre>\n"}], "owner": {"reputation": 2928, "user_id": 1030462, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f115740b8a3b86d0b3fc50ef02c06766?s=128&d=identicon&r=PG", "display_name": "Aleksandra Zalcman", "link": "https://stackoverflow.com/users/1030462/aleksandra-zalcman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2180, "favorite_count": 1, "accepted_answer_id": 31735344, "answer_count": 1, "score": 0, "last_activity_date": 1489075287, "creation_date": 1438295205, "last_edit_date": 1489075242, "question_id": 31735125, "link": "https://stackoverflow.com/questions/31735125/how-to-access-a-field-of-a-struct-within-a-struct", "title": "How to access a field of a struct within a struct?", "body": "<p>I have a struct container of <code>Child</code>ren and a method <code>pop()</code> that removes the last added <code>Child</code> and returns it's <code>a</code> value:</p>\n\n<pre><code>struct Child {\n    a: i32,\n    b: String,\n}\n\nstruct Container&lt;'a&gt; {\n    vector: &amp;'a mut Vec&lt;Child&gt;,\n}\n\nimpl&lt;'a&gt; Container&lt;'a&gt; {\n    fn pop(&amp;mut self) -&gt; i32 {\n        return self.vector.pop().a;\n    }\n}\n</code></pre>\n\n<p>I get the error during compilation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no field `a` on type `std::option::Option&lt;Child&gt;`\n  --&gt; src/main.rs:12:34\n   |\n12 |         return self.vector.pop().a;\n   |                                  ^\n</code></pre>\n\n<p>Does the scope of <code>Container</code>'s <code>pop()</code> not allow access to values of its  <code>Child</code>ren's scope?</p>\n"}]