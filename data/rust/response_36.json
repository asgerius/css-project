[{"tags": ["makefile", "rust"], "comments": [{"owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442467644, "post_id": 32620348, "comment_id": 53096296, "body": "The question came up in an embedded project; the project I used as a template didn&#39;t use cargo. I guess it just didn&#39;t occur to me, thanks for your input!"}, {"owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442468901, "post_id": 32620348, "comment_id": 53096733, "body": "@Shepmaster I have edited my question slightly. I think it&#39;s open enough for your suggestion, in case you would like to add this as an answer."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442451675, "post_id": 32620349, "comment_id": 53092287, "body": "Note that wildcards are often frowned upon, as your Makefile won&#39;t know to rebuild if you <i>delete</i> a source file."}], "tags": [], "owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "is_accepted": false, "score": 1, "last_activity_date": 1442451830, "last_edit_date": 1442451830, "creation_date": 1442445962, "answer_id": 32620349, "question_id": 32620348, "link": "https://stackoverflow.com/questions/32620348/make-doesnt-notice-modifications-in-a-rust-module-how-to-better-integrate-r/32620349#32620349", "title": "`make` doesn&#39;t notice modifications in a Rust module - how to better integrate Rust into the build?", "body": "<p>The pattern</p>\n\n<pre><code>%.o: %.rs\n</code></pre>\n\n<p>is familiar from building C projects, but that's not the only way a target can be written. Specific to the setup above, this would fix the situation:</p>\n\n<pre><code>main.o: main.rs module.rs\n    $(RUSTC) $(RUSTFLAGS) -o main.o main.rs\n</code></pre>\n\n<p>A noteworthy difference to the original code is that the names of the inputs is not really what matters for the command. We can generalize this as follows:</p>\n\n<pre><code>main.o: $(wildcard *.rs)\n    $(RUSTC) $(RUSTFLAGS) -o ${@} ${@:.o=.rs}\n</code></pre>\n\n<p>This is a start, but it still has some downsides I couldn't get rid of:</p>\n\n<ul>\n<li>The <code>main.o:</code> part is hardcoded. If there are multiple top-level modules to compile, there would be code duplication</li>\n<li>All Rust files will be considered for all top-level modules, due to the wildcard. In other words, changing any Rust file will require a full recompilation.</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1442537155, "creation_date": 1442537155, "answer_id": 32642162, "question_id": 32620348, "link": "https://stackoverflow.com/questions/32620348/make-doesnt-notice-modifications-in-a-rust-module-how-to-better-integrate-r/32642162#32642162", "title": "`make` doesn&#39;t notice modifications in a Rust module - how to better integrate Rust into the build?", "body": "<p>The best way to use Make is to encode every single dependency into the Makefile. That's what gives Make the power to know what to rebuild in order to reach a goal state.</p>\n\n<p>To do this for a C project, you'll often use something like the GCC command line option <code>-M</code>. This brings the compiler into the mix as it's the best tool to parse C source code and understand the dependencies between the \nfiles.</p>\n\n<p>There is actually an equivalent switch for rustc, the Rust compiler: <code>--emit=dep-info</code>. When you run this on a source file, it will output a file with the extension <code>.d</code>, which contains an almost-Makefile-compatible list of dependencies. If you had a <code>main.rs</code> that referenced the module <code>foo.rs</code>, it would output something like:</p>\n\n<pre><code>main.d: main.rs foo.rs\n</code></pre>\n\n<p>With a bit of sed tweaking you can get this to play nicely. You can then include this in your Makefile:</p>\n\n<pre><code>main.o:\n    rustc -o $@ $&lt;\n\nmain.d: main.rs\n    rustc --emit=dep-info $&lt;\n    # Add the object file as a rule\n    gsed 's/:/ $(@:.d=.o):/' -i $@\n\n-include main.d\n</code></pre>\n\n<p>Here, I've specified <code>main</code> in a few parts, but I believe that you can easily modify them into pattern rules.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1442537814, "creation_date": 1442537814, "answer_id": 32642252, "question_id": 32620348, "link": "https://stackoverflow.com/questions/32620348/make-doesnt-notice-modifications-in-a-rust-module-how-to-better-integrate-r/32642252#32642252", "title": "`make` doesn&#39;t notice modifications in a Rust module - how to better integrate Rust into the build?", "body": "<p>The pragmatic solution is to just use <a href=\"http://doc.crates.io/\" rel=\"nofollow\">Cargo</a>, the Rust build tool and package manager. Let it deal with dependencies (both local modules <em>and</em> other crates).</p>\n\n<pre><code>libbar.dylib: target/debug/libbar.dylib\n    cp $&lt; $@\n\n.PHONY: target/debug/libbar.dylib\ntarget/debug/libbar.dylib:\n    cargo build --verbose\n</code></pre>\n\n<p>Here, I've marked the rule as <code>PHONY</code>, which says \"always run this rule\". I've added <code>--verbose</code> to have Cargo print out what it is doing so you can verify when things are rebuilt.</p>\n\n<p>I'd recommend dropping off the <code>cp</code> step if you can and instead just use the nested path, but the copy might be needed if other things rely on the current location.</p>\n"}], "owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 365, "favorite_count": 1, "answer_count": 3, "score": 2, "last_activity_date": 1442537814, "creation_date": 1442445962, "last_edit_date": 1442468495, "question_id": 32620348, "link": "https://stackoverflow.com/questions/32620348/make-doesnt-notice-modifications-in-a-rust-module-how-to-better-integrate-r", "title": "`make` doesn&#39;t notice modifications in a Rust module - how to better integrate Rust into the build?", "body": "<p>In a simple embedded project, i have two files <code>main.rs</code> and <code>module.rs</code>. To build the project, I use something similar to this:</p>\n\n<pre><code>all: main.o\n    $(CC) main.o $(LDFLAGS)\n\n%.o: %.rs\n    $(RUSTC) $(RUSTFLAGS) -o ${@} ${&lt;}\n</code></pre>\n\n<p>If only <code>module.rs</code> is changed, <code>make all</code> won't recompile my Rust code. How can I fix this?</p>\n\n<hr>\n\n<p>I'm posting a suboptimal self-answer as a first step, but would love to see better ways.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1442451289, "post_id": 32619964, "comment_id": 53092193, "body": "FWIW, it&#39;s probably idiomatic to do <code>for row in &amp;board { for field in row { ... }}</code>, without calling <code>iter</code>."}], "answers": [{"comments": [{"owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442444342, "post_id": 32620047, "comment_id": 53090567, "body": "Thanks, that worked. Is my code not idiomatic or is this really the correct way to do it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442470538, "post_id": 32620047, "comment_id": 53097316, "body": "@Kreisquadratur: If it&#39;s for debugging purposes, then <code>println!(&quot;{:?}&quot;, board);</code> would work by itself. I believe there is also the possibility to ask for fancier formatting in Debug printing."}, {"owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442481041, "post_id": 32620047, "comment_id": 53102824, "body": "@matthieu-m Right, my snippet is indeed from <code>impl fmt::Debug for GameState</code> which is a struct holding Board. I just wanted (i) learn how to write your own Debug implementation and (ii) was not happy about the default output."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442481240, "post_id": 32620047, "comment_id": 53102946, "body": "@Kreisquadratur Yeah, I think your code is fine. Is there something in particular that you don&#39;t like about it?"}, {"owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442483388, "post_id": 32620047, "comment_id": 53104191, "body": "@fjh I guess the &quot;dislike&quot; is a discrepancy of beginner&#39;s expected and actual syntax + application. Three examples: (i) When do I use <code>&amp;</code> vs <code>ref</code>; couldn&#39;t <code>ref</code> be replaced by <code>&amp;</code> and does &quot;the right thing&quot;(tm) case by case? (ii) why can <code>Println!(&quot;{}&quot;, foo)</code> infer that I actually need <code>Println!(&quot;{}&quot;, *foo)</code> but <code>match</code> can&#39;t/won&#39;t? (iii) Why does <code>iter()</code> exist if I can omit it?"}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1442496654, "post_id": 32620047, "comment_id": 53112102, "body": "For (ii): <code>println!</code> and <code>write!</code> macros have are specifically make to work with references (macros have the flexibility to do this). Pretty much everything else in the language needs to specify between references and values."}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1442497067, "post_id": 32620047, "comment_id": 53112423, "body": "For (iii): the for loop takes a value that has an implementation of the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> trait. There&#39;s generally two ways to work with iterators: for loops and function chaining. <code>iter()</code> is used for function chaining."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1442497762, "post_id": 32620047, "comment_id": 53112913, "body": "@ChristopherStevenson @Kreisquadratur re iii) <code>iter()</code> is needed wherever you need to pass in a value that implements <code>Iterator</code>. You can omit it when the value is expected to implement <code>IntoIterator</code> (like in for loops)."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442498005, "post_id": 32620047, "comment_id": 53113085, "body": "@Kreisquadratur Re (i): <a href=\"http://rustbyexample.com/scope/borrow/ref.html\" rel=\"nofollow noreferrer\">this</a> might be useful to you. I don&#39;t think <code>ref</code> could be replaced by <code>&amp;</code> in general. The distinction isn&#39;t that intuitive at first, but it will start making sense when you have used it a few times."}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1442498059, "post_id": 32620047, "comment_id": 53113130, "body": "Dang, I had it wrong, thanks. There really needs to a beginner explanation of how the traits in <code>std::iter</code> work together."}, {"owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "edited": false, "score": 0, "creation_date": 1442500132, "post_id": 32620047, "comment_id": 53114634, "body": "@jfh Thanks both of you. One can&#39;t read <i>Docs</i> and <i>ByExample</i> often enough :-/"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 7, "last_activity_date": 1442443959, "creation_date": 1442443959, "answer_id": 32620047, "question_id": 32619964, "link": "https://stackoverflow.com/questions/32619964/iterate-over-two-dimensional-vector-of-options/32620047#32620047", "title": "Iterate over two-dimensional Vector of Options", "body": "<p>The iterator returned by <code>Vec::iter</code> yields references, not the values themselves, i.e. in your case <code>&amp;Option&lt;String&gt;</code> instead of <code>Option&lt;String&gt;</code>. You will have to dereference the values you get from the iterator, as follows:</p>\n\n<pre><code>match *field {\n    Some(ref val) =&gt; print!(\"{}\", val),\n    None =&gt; print!(\" \")\n}\n</code></pre>\n\n<p>Note that you also need to use <code>ref</code> in the <code>Some</code> arm of the pattern match, to avoid moving <code>val</code>.</p>\n"}], "owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1074, "favorite_count": 0, "accepted_answer_id": 32620047, "answer_count": 1, "score": 1, "last_activity_date": 1442451255, "creation_date": 1442443441, "last_edit_date": 1442451255, "question_id": 32619964, "link": "https://stackoverflow.com/questions/32619964/iterate-over-two-dimensional-vector-of-options", "title": "Iterate over two-dimensional Vector of Options", "body": "<p>I try to print a two-dimensional vector of options for debugging purpose:</p>\n\n<pre><code>type Board = Vec&lt;Vec&lt;Option&lt;String&gt;&gt;&gt;;\nlet board: Board = vec![vec![None; 100]; 100];\nfor row in board.iter() {\n    for field in row.iter() {\n        match field {\n            Some(val) =&gt; print!(\"{}\", val),\n            None =&gt; print!(\" \")\n        }\n    }\n    println!(\"\");\n}\n</code></pre>\n\n<p>However, I get the following error:</p>\n\n<pre><code>error: type mismatch resolving `&lt;core::slice::Iter&lt;'_, core::option::Option&lt;String&gt;&gt; as\n                                core::iter::Iterator&gt;::Item == core::option::Option&lt;_&gt;`:\n expected &amp;-ptr,\n    found enum `core::option::Option` [E0271]\n</code></pre>\n\n<p>It seems somehow <code>iter()</code> does not return what I believe to be an iterator, but I am not sure what to make out of that error message. I tried variations of <code>iter_mut</code>, references, <code>ref</code>s, mutable references.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1442442670, "post_id": 32618872, "comment_id": 53090085, "body": "For future readers, this method is already implemented for iterators, under the name <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partition\" rel=\"nofollow noreferrer\"><code>partition</code></a>."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 21, "last_activity_date": 1510699043, "last_edit_date": 1510699043, "creation_date": 1442441260, "answer_id": 32619597, "question_id": 32618872, "link": "https://stackoverflow.com/questions/32618872/sized-is-not-implemented-for-the-type-fn/32619597#32619597", "title": "Sized is not implemented for the type Fn", "body": "<p>You should read the official Rust book, especially <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch13-01-closures.html\" rel=\"noreferrer\">the chapter on closures</a>. Your function declaration is incorrect; you are specifying that <code>f</code> has a bare trait type, which is impossible; that's exactly what the error about <code>Sized</code> is about. You should use a generic type parameter instead:</p>\n\n<pre><code>fn split_filter&lt;T: Clone, F&gt;(a: &amp;[T], f: F) -&gt; (Vec&lt;T&gt;, Vec&lt;T&gt;)\nwhere\n    F: for&lt;'a&gt; Fn(&amp;'a T) -&gt; bool,\n</code></pre>\n\n<p>I have also changed the type of <code>a</code> from <code>&amp;Vec&lt;T&gt;</code> to <code>&amp;[T]</code>; there is no situation in which you would prefer the former to the latter. <code>&amp;Vec&lt;T&gt;</code> is automatically coerced to <code>&amp;[T]</code> when necessary. See <a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String) or Vec (&amp;Vec) as a function argument?</a></p>\n\n<p>The second error is closely tied to the mistake in the function declaration; your original function declaration specified a bare trait type, but closures do not have this type, they just implement the function trait.</p>\n\n<p>The final program looks like this:</p>\n\n<pre><code>fn split_filter&lt;T: Clone, F&gt;(a: &amp;[T], f: F) -&gt; (Vec&lt;T&gt;, Vec&lt;T&gt;)\nwhere\n    F: Fn(&amp;T) -&gt; bool,\n{\n    let mut i: Vec&lt;T&gt; = vec![];\n    let mut e: Vec&lt;T&gt; = vec![];\n    for u in a.iter().cloned() {\n        if f(&amp;u) {\n            i.push(u);\n        } else {\n            e.push(u);\n        }\n    }\n\n    return (i, e);\n}\n\nfn main() {\n    let v = vec![10, 40, 30, 20, 60, 50];\n    println!(\"{:?}\", split_filter(&amp;v, |&amp;a| a % 3 == 0));\n}\n</code></pre>\n\n<p>Try it on the <a href=\"https://play.rust-lang.org/?gist=1dcdd8827b01e3a3174c035c3721775f&amp;version=stable\" rel=\"noreferrer\">playground</a>.</p>\n"}], "owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5525, "favorite_count": 2, "accepted_answer_id": 32619597, "answer_count": 1, "score": 14, "last_activity_date": 1510699043, "creation_date": 1442438177, "last_edit_date": 1510698892, "question_id": 32618872, "link": "https://stackoverflow.com/questions/32618872/sized-is-not-implemented-for-the-type-fn", "title": "Sized is not implemented for the type Fn", "body": "<p>I want to build a function that splits a list into two: one list that contains the elements of the original list that satisfy a certain predicate, and another that contains all the ones which do not. Below is my attempt:</p>\n\n<pre><code>fn split_filter&lt;T: Clone + Sized&gt;(a: &amp;Vec&lt;T&gt;, f: Fn(&amp;T) -&gt; bool) -&gt; (Vec&lt;T&gt;, Vec&lt;T&gt;) {\n    let i: Vec&lt;T&gt; = vec![];\n    let e: Vec&lt;T&gt; = vec![];\n    for u in a.iter().cloned() {\n        if f(&amp;u) {\n            i.push(u)\n        } else {\n            e.push(u)\n        }\n    }\n\n    return (i, e);\n}\n\nfn main() {\n    let v = vec![10, 40, 30, 20, 60, 50];\n    println!(\"{:?}\", split_filter(&amp;v, |&amp;a| a % 3 == 0));\n}\n</code></pre>\n\n<p>However, I get two errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; std::ops::Fn(&amp;'r T) -&gt; bool + 'static: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:1:47\n  |\n1 | fn split_filter&lt;T: Clone + Sized&gt;(a: &amp;Vec&lt;T&gt;, f: Fn(&amp;T) -&gt; bool) -&gt; (Vec&lt;T&gt;, Vec&lt;T&gt;) {\n  |                                               ^ `for&lt;'r&gt; std::ops::Fn(&amp;'r T) -&gt; bool + 'static` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r&gt; std::ops::Fn(&amp;'r T) -&gt; bool + 'static`\n  = note: all local variables must have a statically known size\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:17:39\n   |\n17 |     println!(\"{:?}\", split_filter(&amp;v, |&amp;a| a % 3 == 0));\n   |                                       ^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n   |\n   = note: expected type `for&lt;'r&gt; std::ops::Fn(&amp;'r {integer}) -&gt; bool + 'static`\n              found type `[closure@src/main.rs:17:39: 17:54]`\n</code></pre>\n\n<p>The second error seems to imply that a closure is not a <code>Fn</code>. I tried using the syntax <code>f: |&amp;T| -&gt; bool</code> which I found online somewhere, but that does not seem to work in the latest version of Rust.</p>\n\n<p>As for the first error, I had hoped that making <code>T</code> <code>Sized</code> would make it so that the function has a known size, but apparently it doesn't.</p>\n"}, {"tags": ["performance", "rust", "code-generation"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1442441919, "creation_date": 1442441919, "answer_id": 32619717, "question_id": 32618663, "link": "https://stackoverflow.com/questions/32618663/why-are-literal-values-copied-from-read-only-memory-to-the-stack-before-being-pl/32619717#32619717", "title": "Why are literal values copied from read-only memory to the stack before being placed in the heap?", "body": "<p>Your findings are correct; this is a consequence that <code>Box::new()</code> is a regular function.</p>\n\n<p>The proper way to put a value directly on the heap is to use placement operator; however, no such thing is currently available in Rust, but there are two RFCs, <a href=\"https://github.com/rust-lang/rfcs/pull/809\">this</a> (accepted) and <a href=\"https://github.com/rust-lang/rfcs/pull/1228\">this</a> (pending, but seems likely to be accepted). Also if you're using Rust nightly, you can use an unstable <code>box</code> syntax:</p>\n\n<pre><code>let v: Box&lt;[u32]&gt; = box [1u32,2,3456,4,5,6];\n</code></pre>\n"}], "owner": {"reputation": 208, "user_id": 2035105, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/26a0e77d71e65f16fd786a97f8110830?s=128&d=identicon&r=PG", "display_name": "A. Mikhaylov", "link": "https://stackoverflow.com/users/2035105/a-mikhaylov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 32619717, "answer_count": 1, "score": 3, "last_activity_date": 1442476056, "creation_date": 1442437381, "last_edit_date": 1442476056, "question_id": 32618663, "link": "https://stackoverflow.com/questions/32618663/why-are-literal-values-copied-from-read-only-memory-to-the-stack-before-being-pl", "title": "Why are literal values copied from read-only memory to the stack before being placed in the heap?", "body": "<p>When I experimented with Rust, I had noticed that if a boxed array is created from a literal with <code>Box::new</code>, there is extra copying to the stack from read only memory. Why can't the Rust compiler copy directly from read only memory to space allocated on the heap?</p>\n\n<p>The fragment of Rust code:</p>\n\n<pre><code>fn main() {\n    let v: Box&lt;[u32]&gt; = Box::new([1u32,2,3456,4,5,6]);\n    println!(\"vector {}\", v.len());\n}\n</code></pre>\n\n<p>The appropriate fragment of assembly:</p>\n\n<pre><code>00000000000049d4         mov        rax, qword [ds:0x39ad0]\n00000000000049db         mov        qword [ss:rsp+arg_F8], rax\n00000000000049e3         movaps     xmm0, xmmword [ds:const1050]\n00000000000049ea         movaps     xmmword [ss:rsp+arg_E8], xmm0\n00000000000049f2         mov        ecx, 0x18\n00000000000049f7         mov        edi, ecx                                    ; argument #1 for method _ZN4heap15exchange_malloc20h356508549306a536JeaE\n00000000000049f9         mov        ecx, 0x4\n00000000000049fe         mov        esi, ecx                                    ; argument #2 for method _ZN4heap15exchange_malloc20h356508549306a536JeaE\n0000000000004a00         call       _ZN4heap15exchange_malloc20h356508549306a536JeaE ; heap::exchange_malloc::h356508549306a536Jea\n0000000000004a05         mov        rsi, qword [ss:rsp+arg_F8]\n0000000000004a0d         mov        qword [ds:rax+0x10], rsi\n0000000000004a11         movaps     xmm0, xmmword [ss:rsp+arg_E8]\n0000000000004a19         movups     xmmword [ds:rax], xmm0\n</code></pre>\n\n<p>The array resides at <code>0x39ad0</code> and <code>const1050</code> in the binary:</p>\n\n<pre><code>0000000000039ac8         db  0x80 ; '.'\n0000000000039ac9         db  0x0d ; '.'\n0000000000039aca         db  0x00 ; '.'\n0000000000039acb         db  0x00 ; '.'\n0000000000039acc         db  0x04 ; '.'\n0000000000039acd         db  0x00 ; '.'\n0000000000039ace         db  0x00 ; '.'\n0000000000039acf         db  0x00 ; '.'\n0000000000039ad0         dq  0x0000000600000005                          ; XREF=_ZN4main20h90e2c514439f0097eaaE+52\n</code></pre>\n"}, {"tags": ["rust", "lint", "lifetime", "internals"], "answers": [{"tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 3, "last_activity_date": 1442447062, "creation_date": 1442447062, "answer_id": 32620505, "question_id": 32609686, "link": "https://stackoverflow.com/questions/32609686/how-to-create-a-lintpass-that-is-both-visitor-and-exprusevisitor/32620505#32620505", "title": "How to create a LintPass that is both Visitor and ExprUseVisitor?", "body": "<p>The problem is in your implementation of <code>euv::Delegate</code>.  Specifically, you tried to implement <code>euv::Delegate&lt;'v&gt; for CowVisitor&lt;'v, 't&gt;</code> when you meant to implement <code>euv::Delegate&lt;'t&gt; for CowVisitor&lt;'v, 't&gt;</code>.</p>\n\n<p>In general, if you're doing anything complicated with lifetimes, the error messages are nearly useless; don't trust that they're actually pointing at the error.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 0, "accepted_answer_id": 32620505, "answer_count": 1, "score": 2, "last_activity_date": 1442447062, "creation_date": 1442409324, "question_id": 32609686, "link": "https://stackoverflow.com/questions/32609686/how-to-create-a-lintpass-that-is-both-visitor-and-exprusevisitor", "title": "How to create a LintPass that is both Visitor and ExprUseVisitor?", "body": "<p>I am currently writing a lint to find places where the use of <code>std::borrow::Cow</code> may be beneficial. Those places may include local variables, but also struct fields and enum arguments, unless they are part of the public interface (at which point I intend to bail; I don't want to ask people to change official interfaces at this point).</p>\n\n<p>However, to do this, we have to check the whole crate for definitions before reporting. Since the <code>LintPass</code> trait has no callback that is called unconditionally <em>after</em> the crate has been walked, I am trying to implement <code>rustc_front::visit::Visitor</code> by my own visitor struct that encapsulates the <code>rustc::lint::Context</code> and our data.</p>\n\n<p>Furthermore, I want to check fields of type <code>String</code> which are somewhere instantiated from a <code>&amp;'static str</code>. To make this feasible, I'd like to use the <code>ExprUseVisitor</code> trait with my visitor struct.</p>\n\n<p>The code as of now is <a href=\"https://github.com/Manishearth/rust-clippy/blob/8392a05e6de02870a2d7db3966645c2b0f39424e/src/cow.rs\" rel=\"nofollow\">here</a>.</p>\n\n<p>I get the following error:</p>\n\n<pre><code>src/cow.rs:56:44: 56:48 error: cannot infer an appropriate lifetime for lifetime parameter `'v` due to conflicting requirements\nsrc/cow.rs:56         let vis = euv::ExprUseVisitor::new(self as &amp;mut euv::Delegate&lt;'t&gt;, &amp;infcx);\n                                                         ^~~~\nsrc/cow.rs:51:5: 58:6 help: consider using an explicit lifetime parameter as shown: fn visit_fn(&amp;mut self, _: FnKind, fd: &amp;FnDecl, b: &amp;Block, _: Span, id: NodeId)\nsrc/cow.rs:51     fn visit_fn(&amp;mut self, _: FnKind, fd: &amp;FnDecl, b: &amp;Block,\nsrc/cow.rs:52             _: Span, id: NodeId) {\nsrc/cow.rs:53         let tcx = &amp;self.cx.tcx;\nsrc/cow.rs:54         let param_env = Some(ty::ParameterEnvironment::for_item(tcx, id));\nsrc/cow.rs:55         let infcx = infer::new_infer_ctxt(tcx, &amp;tcx.tables, param_env, false);\nsrc/cow.rs:56         let vis = euv::ExprUseVisitor::new(self as &amp;mut euv::Delegate&lt;'t&gt;, &amp;infcx);\n              ...\n</code></pre>\n\n<p>This error is quite surprising, to say the least. Note that the suggested \"explicit lifetime\" is actually the same as my code.</p>\n\n<p>So how do I get my code to compile?</p>\n"}, {"tags": ["stack", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 16568, "user_id": 257583, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/23defa5e5246750c8d419ee101a257e9?s=128&d=identicon&r=PG", "display_name": "wrongusername", "link": "https://stackoverflow.com/users/257583/wrongusername"}, "edited": false, "score": 0, "creation_date": 1442468957, "post_id": 32604855, "comment_id": 53096762, "body": "Thanks, it works! But there&#39;s a lot I don&#39;t understand here, how can you return an <code>A</code> of lifetime <code>static</code> when you&#39;re creating it on the fly? Not sure what &quot;owned variant of <code>Cow</code>&quot; means and why that makes <code>&#39;static</code> possible. We&#39;re not ever modifying <code>some_attr</code> at any point -- isn&#39;t that usually the point of &quot;copy on write&quot;, to allow for writes? Does <code>orig.to_owned</code> remove ownership from whoever&#39;s calling this function? That sounds like it would be inconvenient. As far as I can tell <code>String</code> implements <code>Into&lt;Vec&lt;u8&gt;&gt;</code> but not <code>str</code>, so how can we call <code>into()</code> in the 2nd example?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 16568, "user_id": 257583, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/23defa5e5246750c8d419ee101a257e9?s=128&d=identicon&r=PG", "display_name": "wrongusername", "link": "https://stackoverflow.com/users/257583/wrongusername"}, "edited": false, "score": 0, "creation_date": 1442475282, "post_id": 32604855, "comment_id": 53099566, "body": "Whoa, that&#39;s a lot of questions! I&#39;ve updated my answer, hopefully it would be helpful :)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 14, "last_activity_date": 1501191284, "last_edit_date": 1501191284, "creation_date": 1442396166, "answer_id": 32604855, "question_id": 32603817, "link": "https://stackoverflow.com/questions/32603817/return-something-thats-allocated-on-the-stack/32604855#32604855", "title": "Return something that&#39;s allocated on the stack", "body": "<p>This question most certainly was answered before, but I'm not closing it as a duplicate because the code here is somewhat different and I think it is important.</p>\n\n<p>Note how you defined your function:</p>\n\n<pre><code>fn combine(orig: &amp;'a str) -&gt; A&lt;'a&gt;\n</code></pre>\n\n<p>It says that it will return a value of type <code>A</code> whose insides live exactly as long as the provided string. However, the body of the function violates this declaration:</p>\n\n<pre><code>let attr = &amp;*(orig.to_string() + \"suffix\");\nA {\n    some_attr: attr\n}\n</code></pre>\n\n<p>Here you construct a <em>new</em> <code>String</code> obtained from <code>orig</code>, take a slice of it and try to return it inside <code>A</code>. However, the lifetime of the implicit variable created for <code>orig.to_string() + \"suffix\"</code> is strictly smaller than the lifetime of the input parameter. Therefore, your program is rejected.</p>\n\n<p>Another, more practical way to look at this is consider that the string created by <code>to_string()</code> and concatenation has to live somewhere. However, you only return a borrowed slice of it. Thus when the function exits, the string is destroyed, and the returned slice becomes invalid. This is exactly the situation which Rust prevents.</p>\n\n<p>To overcome this you can either store a <code>String</code> inside <code>A</code>:</p>\n\n<pre><code>pub struct A {\n    some_attr: String\n}\n</code></pre>\n\n<p>or you can use <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>std::borrow::Cow</code></a> to store either a slice or an owned string:</p>\n\n<pre><code>pub struct A&lt;'a&gt; {\n    some_attr: Cow&lt;'a, str&gt;\n}\n</code></pre>\n\n<p>In the last case your function could look like this:</p>\n\n<pre><code>fn combine(orig: &amp;str) -&gt; A&lt;'static&gt; {\n    let attr = orig.to_owned() + \"suffix\";\n    A {\n        some_attr: attr.into()\n    }\n}\n</code></pre>\n\n<p>Note that because you construct the string inside the function, it is represented as an owned variant of <code>Cow</code> and so you can use <code>'static</code> lifetime parameter for the resulting value. Tying it to <code>orig</code> is also possible but there is no reason to do so.</p>\n\n<p>With <code>Cow</code> it is also possible to create values of <code>A</code> directly out of slices without allocations:</p>\n\n<pre><code>fn new(orig: &amp;str) -&gt; A {\n    A { some_attr: orig.into() }\n}\n</code></pre>\n\n<p>Here the lifetime parameter of <code>A</code> will be tied (through lifetime elision) to the lifetime of the input string slice. In this case the borrowed variant of <code>Cow</code> is used, and no allocation is done.</p>\n\n<p>Also note that it is better to use <code>to_owned()</code> or <code>into()</code> to convert string slices to <code>String</code>s because these methods do not require formatting code to run and so they are more efficient.</p>\n\n<blockquote>\n  <p>how can you return an <code>A</code> of lifetime <code>'static</code> when you're creating it on the fly? Not sure what \"owned variant of <code>Cow</code>\" means and why that makes <code>'static</code> possible.</p>\n</blockquote>\n\n<p>Here is the definition of <code>Cow</code>:</p>\n\n<pre><code>pub enum Cow&lt;'a, B&gt; where B: 'a + ToOwned + ?Sized {\n    Borrowed(&amp;'a B),\n    Owned(B::Owned),\n}\n</code></pre>\n\n<p>It looks complex but it is in fact simple. An instance of <code>Cow</code> may either contain a reference to some type <code>B</code> or an owned value which could be derived from <code>B</code> via the <code>ToOwned</code> trait. Because <code>str</code> implements <code>ToOwned</code> where <code>Owned</code> associated type equals to <code>String</code> (written as <code>ToOwned&lt;Owned = String&gt;</code>, when this enum is specialized for <code>str</code>, it looks like this:</p>\n\n<pre><code>pub enum Cow&lt;'a, str&gt; {\n    Borrowed(&amp;'a str),\n    Owned(String)\n}\n</code></pre>\n\n<p>Therefore, <code>Cow&lt;str&gt;</code> may represent either a string slice or an owned string - and while <code>Cow</code> does indeed provide methods for clone-on-write functionality, it is just as often used to hold a value which can be either borrowed or owned in order to avoid extra allocations. Because <code>Cow&lt;'a, B&gt;</code> implements <code>Deref&lt;Target = B&gt;</code>, you can get <code>&amp;B</code> from <code>Cow&lt;'a, B&gt;</code> with simple reborrowing: if <code>x</code> is <code>Cow&lt;str&gt;</code>, then <code>&amp;*x</code> is <code>&amp;str</code>, regardless of what is contained inside of <code>x</code> - naturally, you can get a slice out of both variants of <code>Cow</code>.</p>\n\n<p>You can see that the <code>Cow::Owned</code> variant does not contain any references inside it, only <code>String</code>. Therefore, when a value of <code>Cow</code> is created using <code>Owned</code> variant, <em>you</em> can choose any lifetime you want (remember, lifetime parameters are much like generic type parameters; in particular, it is the caller who gets to choose them) - there are no restrictions on it. So it makes sense to choose <code>'static</code> as the greatest lifetime possible.</p>\n\n<blockquote>\n  <p>Does <code>orig.to_owned</code> remove ownership from whoever's calling this function? That sounds like it would be inconvenient.</p>\n</blockquote>\n\n<p>The <code>to_owned()</code> method belongs to <code>ToOwned</code> trait:</p>\n\n<pre><code>pub trait ToOwned {\n    type Owned: Borrow&lt;Self&gt;;\n    fn to_owned(&amp;self) -&gt; Self::Owned;\n}\n</code></pre>\n\n<p>This trait is implemented by <code>str</code> with <code>Owned</code> equal to <code>String</code>. <code>to_owned()</code> method returns an owned variant of whatever value it is called on. In this particular case, it creates a <code>String</code> out of <code>&amp;str</code>, effectively copying contents of the string slice into a new allocation. Therefore no, <code>to_owned()</code> does not imply ownership transfer, it's more like it implies a \"smart\" clone.</p>\n\n<blockquote>\n  <p>As far as I can tell String implements <code>Into&lt;Vec&lt;u8&gt;&gt;</code> but not <code>str</code>, so how can we call <code>into()</code> in the 2nd example?</p>\n</blockquote>\n\n<p>The <code>Into</code> trait is very versatile and it is implemented for lots of types in the standard library. <code>Into</code> is usually implemented through the <code>From</code> trait: if <code>T: From&lt;U&gt;</code>, then <code>U: Into&lt;T&gt;</code>. There are two important implementations of <code>From</code> in the standard library:</p>\n\n<pre><code>impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Cow&lt;'a, str&gt;\n\nimpl&lt;'a&gt; From&lt;String&gt; for Cow&lt;'a, str&gt;\n</code></pre>\n\n<p>These implementations are very simple - they just return <code>Cow::Borrowed(value)</code> if <code>value</code> is <code>&amp;str</code> and <code>Cow::Owned(value)</code> if <code>value</code> is <code>String</code>.</p>\n\n<p>This means that <code>&amp;'a str</code> and <code>String</code> implement <code>Into&lt;Cow&lt;'a, str&gt;&gt;</code>, and so they can be converted to <code>Cow</code> with <code>into()</code> method. That's exactly what happens in my example - I'm using <code>into()</code> to convert <code>String</code> or <code>&amp;str</code> to <code>Cow&lt;str&gt;</code>. Without this explicit conversion you will get an error about mismatched types.</p>\n"}], "owner": {"reputation": 16568, "user_id": 257583, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/23defa5e5246750c8d419ee101a257e9?s=128&d=identicon&r=PG", "display_name": "wrongusername", "link": "https://stackoverflow.com/users/257583/wrongusername"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 697, "favorite_count": 0, "accepted_answer_id": 32604855, "answer_count": 1, "score": 6, "last_activity_date": 1501191284, "creation_date": 1442393461, "last_edit_date": 1501191100, "question_id": 32603817, "link": "https://stackoverflow.com/questions/32603817/return-something-thats-allocated-on-the-stack", "title": "Return something that&#39;s allocated on the stack", "body": "<p>I have the following simplified code, where a struct <code>A</code> contains a certain attribute. I'd like to create new instances of <code>A</code> from an existing version of that attribute, but how do I make the lifetime of the attribute's new value last past the function call?</p>\n\n<pre><code>pub struct A&lt;'a&gt; {\n    some_attr: &amp;'a str,\n}\n\nimpl&lt;'a&gt; A&lt;'a&gt; {\n    fn combine(orig: &amp;'a str) -&gt; A&lt;'a&gt; {\n        let attr = &amp;*(orig.to_string() + \"suffix\");\n        A { some_attr: attr }\n    }\n}\n\nfn main() {\n    println!(\"{}\", A::combine(\"blah\").some_attr);\n}\n</code></pre>\n\n<p>The above code produces</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/main.rs:7:22\n  |\n7 |         let attr = &amp;*(orig.to_string() + \"suffix\");\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\n8 |         A { some_attr: attr }\n9 |     }\n  |     - temporary value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'a as defined on the impl at 5:1...\n --&gt; src/main.rs:5:1\n  |\n5 | / impl&lt;'a&gt; A&lt;'a&gt; {\n6 | |     fn combine(orig: &amp;'a str) -&gt; A&lt;'a&gt; {\n7 | |         let attr = &amp;*(orig.to_string() + \"suffix\");\n8 | |         A { some_attr: attr }\n9 | |     }\n10| | }\n  | |_^\n</code></pre>\n"}, {"tags": ["loops", "reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3589, "user_id": 303940, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/ce7dcd1712b04217df9da2e3c26b94f2?s=128&d=identicon&r=PG", "display_name": "KChaloux", "link": "https://stackoverflow.com/users/303940/kchaloux"}, "edited": false, "score": 1, "creation_date": 1442338953, "post_id": 32592070, "comment_id": 53038360, "body": "Honestly surprised there isn&#39;t some very subtle and unexpected &#39;gotcha&#39; difference. Also, wow, do you just have <i>all</i> the Rust answers? +1."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3589, "user_id": 303940, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/ce7dcd1712b04217df9da2e3c26b94f2?s=128&d=identicon&r=PG", "display_name": "KChaloux", "link": "https://stackoverflow.com/users/303940/kchaloux"}, "edited": false, "score": 0, "creation_date": 1442340179, "post_id": 32592070, "comment_id": 53039029, "body": "@KChaloux Absolutely not all the answers. Just a good amount of time and almost one year of reading lots of good questions and answers. Note that I&#39;m one of the top question <b>askers</b> as well. ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1442352682, "last_edit_date": 1442352682, "creation_date": 1442337722, "answer_id": 32592070, "question_id": 32591985, "link": "https://stackoverflow.com/questions/32591985/when-looping-how-does-iter-differ-from-a-reference/32592070#32592070", "title": "When looping, how does .iter() differ from a reference (&amp;)?", "body": "<blockquote>\n  <p>Are both methods of looping over a collection functionally identical</p>\n</blockquote>\n\n<p>Yes, they are identical.</p>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/1.2.0/src/libcollections/vec.rs#L1534-L1542\" rel=\"nofollow\">The implementation of <code>IntoIterator</code> for <code>&amp;Vec&lt;T&gt;</code></a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a Vec&lt;T&gt; {\n    type Item = &amp;'a T;\n    type IntoIter = slice::Iter&lt;'a, T&gt;;\n\n    fn into_iter(self) -&gt; slice::Iter&lt;'a, T&gt; {\n        self.iter()\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/1.2.0/src/libstd/collections/hash/map.rs#L1351-L1361\" rel=\"nofollow\">The implementation of <code>IntoIterator</code> for <code>&amp;HashMap&lt;K, V, S&gt;</code></a>:</p>\n\n<pre><code>impl&lt;'a, K, V, S&gt; IntoIterator for &amp;'a HashMap&lt;K, V, S&gt;\n    where K: Eq + Hash, S: HashState\n{\n    type Item = (&amp;'a K, &amp;'a V);\n    type IntoIter = Iter&lt;'a, K, V&gt;;\n\n    fn into_iter(self) -&gt; Iter&lt;'a, K, V&gt; {\n        self.iter()\n    }\n}\n</code></pre>\n\n<p>Note that both just call <code>iter()</code>.</p>\n\n<blockquote>\n  <p>I notice that .iter() seems to be the universally preferred approach in examples that I've found.</p>\n</blockquote>\n\n<p>I use <code>collection.iter()</code> whenever I want to use an iterator adapter, and I use <code>&amp;collection</code> whenever I want to just iterate directly on the collection.</p>\n"}], "owner": {"reputation": 3589, "user_id": 303940, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/ce7dcd1712b04217df9da2e3c26b94f2?s=128&d=identicon&r=PG", "display_name": "KChaloux", "link": "https://stackoverflow.com/users/303940/kchaloux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 0, "accepted_answer_id": 32592070, "answer_count": 1, "score": 8, "last_activity_date": 1442352682, "creation_date": 1442337456, "question_id": 32591985, "link": "https://stackoverflow.com/questions/32591985/when-looping-how-does-iter-differ-from-a-reference", "title": "When looping, how does .iter() differ from a reference (&amp;)?", "body": "<p>While playing with Rust, I discovered that you can loop over <code>Vec</code>s and <code>HashMap</code>s (and probably others) by reference, instead of using <code>.iter()</code>.</p>\n\n<pre><code>let xs = vec![1, 2, 3, 4, 5];\nfor x in &amp;xs {\n    println!(\"x == {}\", x);\n}\n</code></pre>\n\n<p>The <code>.iter()</code> function seems to have the same behavior.</p>\n\n<pre><code>let xs = vec![1, 2, 3, 4, 5];\nfor x in xs.iter() {\n    println!(\"x == {}\", x);\n}\n</code></pre>\n\n<p>Are both methods of looping over a collection functionally identical, or are there subtle differences between how the two behave? I notice that <code>.iter()</code> seems to be the universally preferred approach in examples that I've found.</p>\n"}, {"tags": ["reference", "rust", "mutability", "interior-mutability"], "answers": [{"comments": [{"owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "edited": false, "score": 0, "creation_date": 1442340664, "post_id": 32591861, "comment_id": 53039291, "body": "Sorry I put the <code>mut</code> in the linked code and I didn&#39;t update the code in the post. Anyway (regarding the first issue), also if I use <code>RefCell::new(x)</code> (without reference) I am storing a immutable value in <code>RefCell</code>, but this don&#39;t generate any error. The reason why I&#39;m using a reference here is that my original code is actually a little more complicated (you can check here: <a href=\"http://is.gd/XoROad\" rel=\"nofollow noreferrer\">is.gd/XoROad</a>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "edited": false, "score": 1, "creation_date": 1442340887, "post_id": 32591861, "comment_id": 53039415, "body": "<i><code>RefCell::new(x)</code> [is] storing a immutable value</i> \u2014 this is a common misconception, but it is <b>not</b> an immutable value. You might have an immutable <i>binding</i> to the value, but when you transfer ownership, you can <a href=\"http://is.gd/di1UDT\" rel=\"nofollow noreferrer\">pick what mutability you have</a>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "edited": false, "score": 2, "creation_date": 1442353304, "post_id": 32591861, "comment_id": 53045713, "body": "@KillKRT Although Shepmaster is correct, it could be more clear. What you need to understand is that values have a fixed location (on the stack, heap or whatever). Those can be immutable. However, when you move from one value to another <code>foo = bar</code>, ownership of the contained memory is transferred. This transfer can be to a mutable location, which can then give transitive mutable access to the contents. But you can&#39;t do this with references because you can&#39;t move out of references, so you can never move the referenced data to a mutable location."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "edited": false, "score": 2, "creation_date": 1442353587, "post_id": 32591861, "comment_id": 53045839, "body": "@KillKRT <code>RefCell</code> is also a bit special, because it allows breaking the transitivity of mutability: an immutable <code>RefCell</code> can give you mutable access to its contents. If its contents is a value, it can give <code>&amp;mut T</code>. If its contents, though, is a reference, it can only give you an <code>&amp;mut &amp;T</code>, which lets you modify where the inner reference points to but not the value pointed to by the inner reference."}, {"owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1442401219, "post_id": 32591861, "comment_id": 53064461, "body": "@Veedrac thank you for your clarification, it helped me a lot."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1442340979, "last_edit_date": 1442340979, "creation_date": 1442337048, "answer_id": 32591861, "question_id": 32591523, "link": "https://stackoverflow.com/questions/32591523/difference-between-borrow-mut-on-a-refcellx-and-refcellx/32591861#32591861", "title": "Difference between borrow_mut on a RefCell&lt;X&gt; and RefCell&lt;&amp;X&gt;", "body": "<p>The problem stems from the fact that you've stored an <strong>immutable reference</strong> in the <code>RefCell</code>. I'm unclear why you would want such a thing. The normal pattern is to put the entire value into the <code>RefCell</code>, not just a reference:</p>\n\n<pre><code>fn main () {\n    let rcx = RefCell::new(X(5));\n\n    let mut mutx = rcx.borrow_mut();\n    mutx.foo();\n}\n</code></pre>\n\n<p><strong>Problem from original question</strong></p>\n\n<p>You have two compounding errors. Let's check the entire error message:</p>\n\n<pre><code>&lt;anon&gt;:16:5: 16:12 error: cannot borrow immutable borrowed content as mutable\n&lt;anon&gt;:16     (*mutx).foo();\n              ^~~~~~~\n&lt;anon&gt;:16:7: 16:11 error: cannot borrow immutable local variable `mutx` as mutable\n&lt;anon&gt;:16     (*mutx).foo();\n                ^~~~\n</code></pre>\n\n<p>Note the second error \u2014 \"cannot borrow immutable local variable <code>mutx</code>\". That's because you need to declare the <code>mutx</code> variable mutable:</p>\n\n<pre><code>let mut mutx: std::cell::RefMut&lt;&amp;X&gt; = rcx.borrow_mut();\n</code></pre>\n\n<p>That will allow <code>mutx</code> to participate in <code>DerefMut</code>. </p>\n"}], "owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 793, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1545155540, "creation_date": 1442335917, "last_edit_date": 1545155540, "question_id": 32591523, "link": "https://stackoverflow.com/questions/32591523/difference-between-borrow-mut-on-a-refcellx-and-refcellx", "title": "Difference between borrow_mut on a RefCell&lt;X&gt; and RefCell&lt;&amp;X&gt;", "body": "<p>If I get correctly it is not possible to create a mutable borrow <em>over</em> a <code>std::rc::Rc</code> in Rust, you have to use <code>Cell</code> or <code>RefCell</code>.\nBut anyway I cannot understand how to use them. For example consider this simple <a href=\"http://is.gd/41aQR1\" rel=\"nofollow\">example</a>:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct X (i32);\n\nimpl X {\n    fn foo(&amp;mut self) {\n        self.0 = 0;\n    }\n}\n\nfn main () {\n    let x = X(5);\n    let rcx = RefCell::new(&amp;x);\n\n    let mut mutx: std::cell::RefMut&lt;&amp;X&gt; = rcx.borrow_mut();\n    (*mutx).foo();\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre><code>16:5: 16:9 error: cannot borrow immutable local variable `mutx` as mutable\n16     mutx.foo();\n</code></pre>\n\n<p>But if I remove the reference from line (and update type of <code>mutx</code>):</p>\n\n<pre><code>let rcx = RefCell::new(x);\n</code></pre>\n\n<p>Everything is fine. But I cannot understand why, since <code>RefMut::deref_mut() -&gt; &amp;mut T</code> the deference called at line 16 should return <code>&amp;&amp;mut T</code> in the first case, while <code>&amp;mut T</code> in the second case. But since the compiler should apply many <code>*</code> as needed (If I get how <a href=\"https://doc.rust-lang.org/stable/book/deref-coercions.html\" rel=\"nofollow\">deref coercion</a> works) there should be no difference between <code>RefMut&lt;X&gt;::deref_mut()</code> and <code>RefMut&lt;&amp;X&gt;::deref_mut()</code></p>\n\n<p><strong>Edit</strong>:\nBy mistake I forgot to write <code>mut</code> at line 15 as in the linked example is correctly is written. So now it's <code>let mut mutx...</code></p>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 165665, "user_id": 721269, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/346ca03edfbde2a468adc289867ab975?s=128&d=identicon&r=PG", "display_name": "David Schwartz", "link": "https://stackoverflow.com/users/721269/david-schwartz"}, "edited": false, "score": 2, "creation_date": 1442303370, "post_id": 32580220, "comment_id": 53015210, "body": "I would suggest 100% confirming that all the data you are trying to get is sent in a single datagram by analyzing the UDP packets on the wire."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "reply_to_user": {"reputation": 165665, "user_id": 721269, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/346ca03edfbde2a468adc289867ab975?s=128&d=identicon&r=PG", "display_name": "David Schwartz", "link": "https://stackoverflow.com/users/721269/david-schwartz"}, "edited": false, "score": 0, "creation_date": 1442331975, "post_id": 32580220, "comment_id": 53034411, "body": "Thanks, I&#39;ll double check, but the size we&#39;re talking about is 129 bytes. This is way under standard MTUs."}, {"owner": {"reputation": 165665, "user_id": 721269, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/346ca03edfbde2a468adc289867ab975?s=128&d=identicon&r=PG", "display_name": "David Schwartz", "link": "https://stackoverflow.com/users/721269/david-schwartz"}, "edited": false, "score": 0, "creation_date": 1442337230, "post_id": 32580220, "comment_id": 53037394, "body": "The MTU has nothing to do with anything. That just determines how datagrams are split into packets. I asked you to confirm it&#39;s sent in a single <i>datagram</i>. That will be determined by how the sending software works because datagrams are application-level things. Yes, how datagrams are mapped to packets is up to UDP, but UDP makes that invisible to the application."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "reply_to_user": {"reputation": 165665, "user_id": 721269, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/346ca03edfbde2a468adc289867ab975?s=128&d=identicon&r=PG", "display_name": "David Schwartz", "link": "https://stackoverflow.com/users/721269/david-schwartz"}, "edited": false, "score": 0, "creation_date": 1442463518, "post_id": 32580220, "comment_id": 53095090, "body": "So, after TCPDumping a lot, I think I have a different problem going on, where my test is shutting down the socket early for some reason. It looks like my client is throwing back ICMP packets after receiving the packet response from the remote side.  what this means is that I&#39;m misusing the run_once() method, I thought that meant run for one event, but I&#39;m guessing now it means run for one tick, which causes the client to return before the packet is received. I need to rethink the way that I&#39;m managing my client event_loop()."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "reply_to_user": {"reputation": 165665, "user_id": 721269, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/346ca03edfbde2a468adc289867ab975?s=128&d=identicon&r=PG", "display_name": "David Schwartz", "link": "https://stackoverflow.com/users/721269/david-schwartz"}, "edited": false, "score": 0, "creation_date": 1442463898, "post_id": 32580220, "comment_id": 53095183, "body": "Yes, that was it... the bug here was the abuse of run_once() not anything to do with partial packets. I misidentified the EOF error that was getting, which means that I also need to fix my logic around my buffer management to make sure that I can&#39;t have a question of it being filled, not-filled, or never received anything. Thanks for the help!"}], "answers": [{"tags": [], "owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "is_accepted": false, "score": 1, "last_activity_date": 1442464072, "creation_date": 1442464072, "answer_id": 32622587, "question_id": 32580220, "link": "https://stackoverflow.com/questions/32580220/receiving-partial-udp-packets-from-mioudpudpsocket-recv/32622587#32622587", "title": "receiving partial UDP packets from mio::udp::UdpSocket.recv", "body": "<p>Just to follow up, the bug in the above logic, is that run_once() runs for a tick, not for one 'event', which was a bad assumption (though to be fair, the interface is currently not documented well).</p>\n\n<p>In any case, this is not a partial packet issue, it's an issue of the packet not being delivered before the run_once() logic ran, didn't see anything on the socket and immediately returned.</p>\n\n<p>I've changed my handler to do an event_loop.shutdown() after receiving the packet and using run() instead of run_once().</p>\n"}], "owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 591, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1442464072, "creation_date": 1442302347, "last_edit_date": 1442302763, "question_id": 32580220, "link": "https://stackoverflow.com/questions/32580220/receiving-partial-udp-packets-from-mioudpudpsocket-recv", "title": "receiving partial UDP packets from mio::udp::UdpSocket.recv", "body": "<p>I'm using mio::udp::UdpSocket to receive a response to a request from a client. It looks like I'm getting partial UDP packets on the triggered event. I'm not sure if this is a bug in the mio library or not.</p>\n\n<p>I've tried PollOpt::level(), all(), empty(), edge(), etc. I think I generally want level() based on the poll() docs, but none of them work. By adding a sleep of 20 ms I get the full packets.</p>\n\n<p>As reference, when using the blocking std::net::UdpSocket I see no issues. Honestly, if the std::net::SocketOpts was stable I'd just use that. The intention of using mio is to gain timeout on the socket, it looks like net2 is going to replace std::net, but even net2 doesn't have timeout on recv.</p>\n\n<p>Here's the code for the eventloop:</p>\n\n<pre><code>sleep_ms(20);\n\nlet mut event_loop: EventLoop&lt;Response&gt; = try!(EventLoop::new());\n\nif event_loop.timeout_ms((), 5000).is_err() { return Err(ClientError::TimerError) };\ntry!(event_loop.register_opt(&amp;self.socket, RESPONSE, EventSet::readable(), PollOpt::all()));\n\nlet mut response: Response = Response::new(&amp;self.socket);\n\ntry!(event_loop.run_once(&amp;mut response));\n</code></pre>\n\n<p>Here's the code for the Handler:</p>\n\n<pre><code>fn ready(&amp;mut self, _: &amp;mut EventLoop&lt;Self&gt;, token: Token, events: EventSet) {\n  match token {\n    RESPONSE =&gt; {\n      if !events.is_readable() {\n        debug!(\"got woken up, but not readable: {:?}\", token);\n        return\n      }\n\n      let recv_result = self.socket.recv_from(&amp;mut self.buf);\n      if recv_result.is_err() {\n        // debug b/c we're returning the error explicitly\n        debug!(\"could not recv_from on {:?}: {:?}\", self.socket, recv_result);\n        self.error = Some(recv_result.unwrap_err().into());\n        return\n      }\n\n      if recv_result.as_ref().unwrap().is_none() {\n        // debug b/c we're returning the error explicitly\n        debug!(\"no return address on recv_from: {:?}\", self.socket);\n        self.error = Some(ClientError::NoAddress);\n        return\n      }\n\n      let addr = Some(recv_result.unwrap().unwrap());\n      debug!(\"bytes: {:?} from: {:?}\", self.buf.len(), addr);\n    },\n    _ =&gt; error!(\"unrecognized token: {:?}\", token),\n  }\n}\n</code></pre>\n"}, {"tags": ["rust", "traits", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1951, "user_id": 436418, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4303cfd99ed956c6b9bfb14bbdb593d5?s=128&d=identicon&r=PG", "display_name": "Emil Eriksson", "link": "https://stackoverflow.com/users/436418/emil-eriksson"}, "edited": false, "score": 0, "creation_date": 1442325113, "post_id": 32577369, "comment_id": 53029341, "body": "The <code>?Sized</code>, is that because it doesn&#39;t really matter whether the target is sized or not if you&#39;re taking it by reference?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 1951, "user_id": 436418, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4303cfd99ed956c6b9bfb14bbdb593d5?s=128&d=identicon&r=PG", "display_name": "Emil Eriksson", "link": "https://stackoverflow.com/users/436418/emil-eriksson"}, "edited": false, "score": 0, "creation_date": 1442349956, "post_id": 32577369, "comment_id": 53044231, "body": "@EmilEriksson By default all bounds have an implicit <code>Sized</code> attribute, which prevents taking unsized types. If, however, you only use the bound through an indirection (eg. <code>&amp;T</code> or <code>Box&lt;T&gt;</code>), this is unwanted and <code>?Sized</code> removes the restriction."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 7, "last_activity_date": 1442288886, "creation_date": 1442288886, "answer_id": 32577369, "question_id": 32576875, "link": "https://stackoverflow.com/questions/32576875/can-i-make-a-struct-that-works-with-both-values-and-borrowed-references-to-a-tra/32577369#32577369", "title": "Can I make a struct that works with both values and borrowed references to a trait?", "body": "<p>Yes, your solution is probably fine if you can support it. <code>Iterator</code> does the same thing with</p>\n\n<pre><code>impl&lt;'a, I&gt; Iterator for &amp;'a mut I where I: Iterator + ?Sized\n</code></pre>\n\n<p>You should probably also add the <code>?Sized</code> bound too, for flexibility.</p>\n"}], "owner": {"reputation": 1951, "user_id": 436418, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4303cfd99ed956c6b9bfb14bbdb593d5?s=128&d=identicon&r=PG", "display_name": "Emil Eriksson", "link": "https://stackoverflow.com/users/436418/emil-eriksson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 32577369, "answer_count": 1, "score": 5, "last_activity_date": 1442288886, "creation_date": 1442285005, "last_edit_date": 1442285402, "question_id": 32576875, "link": "https://stackoverflow.com/questions/32576875/can-i-make-a-struct-that-works-with-both-values-and-borrowed-references-to-a-tra", "title": "Can I make a struct that works with both values and borrowed references to a trait?", "body": "<p>I want to make a struct that wraps another type but can take both owned and borrowed version of values that implement a given trait.</p>\n\n<p>For example, let's say I have the trait <code>Foobar</code>:</p>\n\n<pre><code>trait Foobar {\n    fn foobar(&amp;self);\n}\n</code></pre>\n\n<p>I now want to make a struct that wraps values or borrowed references of this trait:</p>\n\n<pre><code>struct FoobarWrapper&lt;T: Foobar&gt; {\n    wrapped: T,\n    extra_stuff: Stuff\n}\n</code></pre>\n\n<p>Here, I want FoobarWrapper to work with both <code>Baz</code> and <code>&amp;Baz</code> given that <code>impl Foobar for Baz</code>.</p>\n\n<p>I have come up with one solution that might work but I don't know if it's idiomatic and that's to simply do:</p>\n\n<pre><code>impl&lt;'a, T: Foobar&gt; Foobar for &amp;'a T  {\n    fn foobar(&amp;self) {\n        (*self).foobar()\n    }\n}\n</code></pre>\n\n<p>If I'm not mistaken, this makes any reference to a value that implements Foobar also an implementor of Foobar. But is this the way you're supposed to do it?</p>\n"}, {"tags": ["generics", "rust", "traits"], "owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 21, "favorite_count": 0, "closed_date": 1442266307, "answer_count": 0, "score": 1, "last_activity_date": 1442265581, "creation_date": 1442265581, "question_id": 32574122, "link": "https://stackoverflow.com/questions/32574122/how-can-i-force-a-stdops-trait-to-have-a-specific-generic-output", "closed_reason": "Duplicate", "title": "How can I force a std::ops trait to have a specific generic output?", "body": "<p>I'm trying to implement a generic <code>gcd</code> function, but I can't figure out how to force <code>a % b</code> to have a specific type. What I have is this:</p>\n\n<pre><code>use std::ops::{Div,Rem};\nuse std::cmp::Eq;\nuse std::num::Zero;\n\nfn gcd&lt;T: Rem + Eq + Zero&gt;(a: T, b: T) -&gt; T {\n    if b == T::zero() { a } \n    else { gcd(b, a % b) }\n}\n</code></pre>\n\n<p>This fails because <code>a % b</code> has type <code>T::Output</code>, not <code>T</code>.</p>\n\n<p>I tried:</p>\n\n<pre><code>// This doesn't even make sense, since Output is a member of T\nfn gcd&lt;T: Rem + Eq + Zero, Output = T&gt;(a: T, b: T) -&gt; T { \n\n// Syntax Error\nfn gcd&lt;T: Rem + Eq + Zero, T::Output = T&gt;(a: T, b: T) -&gt; T {\n\n// Equality constraints not supported in where clauses.\nfn gcd&lt;T: Rem + Eq + Zero&gt;(a: T, b: T) -&gt; T \n    where T::Output = T {\n</code></pre>\n\n<p>How can I do this, and is there a better way?</p>\n"}, {"tags": ["string", "format", "rust", "literals"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442263720, "post_id": 32572486, "comment_id": 53002404, "body": "Probably a duplicate of <a href=\"http://stackoverflow.com/questions/28333612/how-can-i-append-a-formatted-string-to-an-existing-string\" title=\"how can i append a formatted string to an existing string\">stackoverflow.com/questions/28333612/&hellip;</a>"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442293370, "post_id": 32572486, "comment_id": 53010679, "body": "@Shepmaster: not a duplicate; it\u2019s the other way round: the format string is the dynamic bit in this question."}], "answers": [{"comments": [{"owner": {"reputation": 397, "user_id": 2791236, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/NUsEw.jpg?s=128&g=1", "display_name": "Sune", "link": "https://stackoverflow.com/users/2791236/sune"}, "edited": false, "score": 1, "creation_date": 1442330494, "post_id": 32580595, "comment_id": 53033421, "body": "Thank you for your reply. I think I&#39;m gonna go with replace instead though as I&#39;m doing this to learn rust and not for something specific."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 18, "last_activity_date": 1603257619, "last_edit_date": 1603257619, "creation_date": 1442303527, "answer_id": 32580595, "question_id": 32572486, "link": "https://stackoverflow.com/questions/32572486/how-can-i-use-a-dynamic-format-string-with-the-format-macro/32580595#32580595", "title": "How can I use a dynamic format string with the format! macro?", "body": "<p>Short answer: it cannot be done.</p>\n<hr />\n<p>Long answer: the <code>format!</code> macro (and its derivatives) requires a string literal, that is a string known at compilation-time. In exchange for this requirement, if the arguments provided do not match the format, a compilation error is raised.</p>\n<hr />\n<p>What you are looking for is known as a template engine. A non-exhaustive list of Rust template engines in no particular order:</p>\n<ul>\n<li><a href=\"https://github.com/sunng87/handlebars-rust\" rel=\"nofollow noreferrer\">Handlebars</a></li>\n<li><a href=\"https://github.com/rustache/rustache\" rel=\"nofollow noreferrer\">Rustache</a></li>\n<li><a href=\"https://github.com/lambda-fairy/maud\" rel=\"nofollow noreferrer\">Maud</a></li>\n<li><a href=\"https://github.com/Stebalien/horrorshow-rs\" rel=\"nofollow noreferrer\">Horrorshow</a></li>\n<li><a href=\"https://github.com/krdln/fomat-macros\" rel=\"nofollow noreferrer\">fomat-macros</a></li>\n<li>...</li>\n</ul>\n<p>Template engines have different characteristics, and notably differ by the degree of validation occurring at compile-time or run-time and their flexibility (I seem to recall that Maud was very HTML-centric, for example). It's up to you to find the one most fitting for your use case.</p>\n"}, {"tags": [], "owner": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "is_accepted": false, "score": 5, "last_activity_date": 1480462131, "last_edit_date": 1480462131, "creation_date": 1480458220, "answer_id": 40876877, "question_id": 32572486, "link": "https://stackoverflow.com/questions/32572486/how-can-i-use-a-dynamic-format-string-with-the-format-macro/40876877#40876877", "title": "How can I use a dynamic format string with the format! macro?", "body": "<p>Check out the <a href=\"https://github.com/vitiral/strfmt\" rel=\"noreferrer\">strfmt</a> library, it is the closest I've found to do dynamic string formatting.</p>\n"}], "owner": {"reputation": 397, "user_id": 2791236, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/NUsEw.jpg?s=128&g=1", "display_name": "Sune", "link": "https://stackoverflow.com/users/2791236/sune"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7113, "favorite_count": 2, "accepted_answer_id": 32580595, "answer_count": 2, "score": 25, "last_activity_date": 1603257619, "creation_date": 1442259082, "last_edit_date": 1599546804, "question_id": 32572486, "link": "https://stackoverflow.com/questions/32572486/how-can-i-use-a-dynamic-format-string-with-the-format-macro", "title": "How can I use a dynamic format string with the format! macro?", "body": "<p>I want to use the <code>format!</code> macro with a <code>String</code> as first argument, but because the macro expects a string literal, I am not able pass anything different to it.</p>\n<p>I want to do this to dynamically add strings into the current string for use in a view engine. I'm open for suggestions if there might be a better way to do it.</p>\n<pre><code>let test = String::from(&quot;Test: {}&quot;);\nlet test2 = String::from(&quot;Not working!&quot;);\nprintln!(test, test2);\n</code></pre>\n<p>What I actually want to achieve is the below example, where main.html contains <code>{content}</code>.</p>\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\nuse std::io;\n\nfn main() {\n    let mut buffer = String::new();\n    read_from_file_using_try(&amp;mut buffer);\n\n    println!(&amp;buffer, content=&quot;content&quot;);\n}\n\nfn read_from_file_using_try(buffer: &amp;mut String) -&gt; Result&lt;(), io::Error&gt; {\n    let mut file = try!(File::open(&quot;main.html&quot;));\n    try!(file.read_to_string(buffer));\n    Ok(())\n}\n</code></pre>\n<p>So I want to print the contents of main.html after I formatted it.</p>\n"}, {"tags": ["memory-management", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3589, "user_id": 303940, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/ce7dcd1712b04217df9da2e3c26b94f2?s=128&d=identicon&r=PG", "display_name": "KChaloux", "link": "https://stackoverflow.com/users/303940/kchaloux"}, "edited": false, "score": 0, "creation_date": 1442264400, "post_id": 32573802, "comment_id": 53002738, "body": "The breakdown of what a each type is comprised of is very elucidating."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 18, "last_activity_date": 1442264248, "creation_date": 1442264248, "answer_id": 32573802, "question_id": 32571441, "link": "https://stackoverflow.com/questions/32571441/what-is-the-difference-between-storing-a-vec-vs-a-slice/32573802#32573802", "title": "What is the difference between storing a Vec vs a Slice?", "body": "<p>A <code>Vec</code> is composed of three parts:</p>\n\n<ol>\n<li>A pointer to a chunk of memory</li>\n<li>A count of how much memory is allocated (the <em>capacity</em>)</li>\n<li>A count of how many items are stored (the <em>size</em>)</li>\n</ol>\n\n<p>A slice is composed of two parts:</p>\n\n<ol>\n<li>A pointer to a chunk of memory</li>\n<li>A count of how many items are stored (the <em>size</em>)</li>\n</ol>\n\n<p>Whenever you move either of these, those fields are all that will be copied. As you might guess, that's pretty lightweight. The actual chunk of memory on the heap will not be copied or moved.</p>\n\n<p>A <code>Vec</code> indicates ownership of the memory, and a slice indicates a borrow of memory. A <code>Vec</code> needs to deallocate all the items and the chunk of memory when it is itself deallocated (<em>dropped</em> in Rust-speak). This happens when it goes out of scope. The slice does nothing when it is dropped.</p>\n\n<p>There are no dangers of using slices, as that is what Rust <em>lifetimes</em> handle. These make sure that you <strong>never</strong> use a reference after it would be invalidated.</p>\n"}], "owner": {"reputation": 3589, "user_id": 303940, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/ce7dcd1712b04217df9da2e3c26b94f2?s=128&d=identicon&r=PG", "display_name": "KChaloux", "link": "https://stackoverflow.com/users/303940/kchaloux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1603, "favorite_count": 1, "accepted_answer_id": 32573802, "answer_count": 1, "score": 11, "last_activity_date": 1442264248, "creation_date": 1442254960, "last_edit_date": 1442258227, "question_id": 32571441, "link": "https://stackoverflow.com/questions/32571441/what-is-the-difference-between-storing-a-vec-vs-a-slice", "title": "What is the difference between storing a Vec vs a Slice?", "body": "<p>Rust provides a few ways to store a collection of elements inside a user-defined struct. The struct can be given a custom lifetime specifier, and a reference to a slice:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    elements: &amp;'a [i32]\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; { \n    fn new(elements: &amp;'a [i32]) -&gt; Foo&lt;'a&gt; { \n        Foo { elements: elements }\n    }\n}\n</code></pre>\n\n<p>Or it can be given a <code>Vec</code> object:</p>\n\n<pre><code>struct Bar {\n    elements: Vec&lt;i32&gt;\n}\n\nimpl Bar {\n    fn new(elements: Vec&lt;i32&gt;) -&gt; Bar {\n        Bar { elements: elements }\n    }\n}\n</code></pre>\n\n<p>What are the major differences between these two approaches? </p>\n\n<ul>\n<li>Will using a <code>Vec</code> force the language to copy memory whenever I call <code>Bar::new(vec![1, 2, 3, 4, 5])</code>? </li>\n<li>Will the contents of <code>Vec</code> be implicitly destroyed when the owner <code>Bar</code> goes out of scope? </li>\n<li>Are there any dangers associated with passing a slice in by reference if it's used outside of the struct that it's being passed to?</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1442251950, "post_id": 32570446, "comment_id": 52996335, "body": "<i>a value on the stack</i> \u2014 everything is on the stack in some way or the other. Sometimes, the item on the stack points to something on the heap though."}, {"owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "edited": false, "score": 1, "creation_date": 1442252260, "post_id": 32570446, "comment_id": 52996515, "body": "Copy vs move - that depends on the <code>Copy</code> trait, not on stack vs heap, right?"}, {"owner": {"reputation": 854, "user_id": 2285066, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/4z2o8.jpg?s=128&g=1", "display_name": "Nam Hoang", "link": "https://stackoverflow.com/users/2285066/nam-hoang"}, "edited": false, "score": 0, "creation_date": 1442253093, "post_id": 32570446, "comment_id": 52996954, "body": "I use the phrase &quot;a value on the stack&quot; because it is in the book chapter&#39;s exlaination. What I think the author means is when self is a primitive type which implements the Copy trait. Thank you."}], "answers": [{"tags": [], "owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "is_accepted": true, "score": 3, "last_activity_date": 1442252119, "creation_date": 1442252119, "answer_id": 32570599, "question_id": 32570446, "link": "https://stackoverflow.com/questions/32570446/what-are-the-typical-use-cases-that-require-taking-ownership-of-self/32570599#32570599", "title": "What are the typical use cases that require taking ownership of self?", "body": "<p>Taking ownership makes sense when the object is invalidated by the method. Imagine a method <code>Iterator.drop(u32)</code>, implemented as returning a new object instead of modifying the existing one. Calling additional methods on the original iterator would lead to inconsistencies.</p>\n\n<p>Other examples for such invalidation would be different sorts of wrappers.</p>\n"}], "owner": {"reputation": 854, "user_id": 2285066, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/4z2o8.jpg?s=128&g=1", "display_name": "Nam Hoang", "link": "https://stackoverflow.com/users/2285066/nam-hoang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 246, "favorite_count": 0, "accepted_answer_id": 32570599, "answer_count": 1, "score": 4, "last_activity_date": 1442252119, "creation_date": 1442251545, "last_edit_date": 1442251899, "question_id": 32570446, "link": "https://stackoverflow.com/questions/32570446/what-are-the-typical-use-cases-that-require-taking-ownership-of-self", "title": "What are the typical use cases that require taking ownership of self?", "body": "<p>In the Rust book <a href=\"http://doc.rust-lang.org/nightly/book/method-syntax.html\" rel=\"nofollow\">Method Syntax chapter</a>, there's an example of taking ownership of self:</p>\n\n<pre><code>struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn reference(&amp;self) {\n        println!(\"taking self by reference!\");\n    }\n\n   fn mutable_reference(&amp;mut self) {\n       println!(\"taking self by mutable reference!\");\n   }\n\n   fn takes_ownership(self) {\n      println!(\"taking ownership of self!\");\n   }\n}\n</code></pre>\n\n<p>What are the typical use cases that require taking ownership of self? Is it only when self is a value on the stack (where it will be copied)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442233896, "post_id": 32564455, "comment_id": 52984667, "body": "I suppose there&#39;s good reason to not have a vector of structs where each struct contains a feature and a class?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442233932, "post_id": 32564455, "comment_id": 52984693, "body": "@Shepmaster I&#39;m passing it into libsvm which requires them to be separate, so unfortunately yes."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 4, "creation_date": 1442234730, "post_id": 32564455, "comment_id": 52985163, "body": "One way to minimise allocations is to only allocate a vector of indices (if you&#39;ll have fewer than 4 billion elements, they only need to be <code>u32</code>, so 4 bytes per elem) and sort that via <code>sort_by</code> indexing into <code>labels</code>. The result can then be used to permute <code>data</code> and <code>labels</code> into the right order. (Unfortunately still allocates O(n) memory, of course.)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1442235322, "post_id": 32564455, "comment_id": 52985599, "body": "As <code>sort_by</code> doesn\u2019t do it itself, you\u2019d need to implement the sorting yourself, probably using <code>sort_by</code> as the basis. Oh, and it <i>can\u2019t</i> just give you the indices, because they\u2019re not constant. If you really were to insist on using <code>sort_by</code>, you\u2019d need to do pointer comparison to get the index of an element in the slice and then figure out what <code>sort_by</code> is going to do with your response and do it to the other vector yourself, which would be an utterly mad and fragile way of doing it. So yeah, just look at what <code>sort_by</code> does and copy it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1442239978, "post_id": 32564455, "comment_id": 52989019, "body": "@ChrisMorgan: For clarification, the point about indices not being constant is that when you are going to shuffle the label and data vectors by reading the sorted indices vector, then after the first shuffle the indices are no longer referring to the same items they were before. Or is it something else?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1442241169, "post_id": 32564455, "comment_id": 52989838, "body": "Maybe <a href=\"https://github.com/benashford/rust-lazysort\" rel=\"nofollow noreferrer\">github.com/benashford/rust-lazysort</a> ? It still allocates, but the iterator abstraction might help allocate less with less code, I don&#39;t know."}, {"owner": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "edited": false, "score": 4, "creation_date": 1442251148, "post_id": 32564455, "comment_id": 52995915, "body": "Note that <code>sort_by</code> already allocates 2n space, so you&#39;re not going to avoid allocation unless you use a different sorting function."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442291481, "post_id": 32564455, "comment_id": 53010133, "body": "@MatthieuM.: correct, <a href=\"http://is.gd/Z5QowO\" rel=\"nofollow noreferrer\">as in this example</a>. Note how the addresses of <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code> and <code>&#39;c&#39;</code> vary from comparison to comparison."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "edited": false, "score": 0, "creation_date": 1442297973, "post_id": 32564455, "comment_id": 53012315, "body": "@WillFischer: Ouch, that hurts. Do you know why such allocation was chosen? I know that in C++ for example, <code>std::sort</code> specifically avoids allocating."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1442403293, "post_id": 32564455, "comment_id": 53065781, "body": "<code>[T]::sort&#47;sort_by</code> is a stable sort. There are alternatives on crates.io if you need a non-stable nonallocating sort."}, {"owner": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442508217, "post_id": 32564455, "comment_id": 53119957, "body": "@Matthieu It looks like C++&#39;s stable sort also allocates, but it&#39;s capable of falling back on a non-allocating less efficient algorithm. Rust currently has much worse support for allocation failure, so I&#39;m not surprised that it doesn&#39;t have that fallback. <a href=\"http://en.cppreference.com/w/cpp/algorithm/stable_sort\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/algorithm/stable_sort</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1442508485, "post_id": 32564455, "comment_id": 53120110, "body": "@bluss: Ah! I did not know it was stable, nice."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1490563649, "post_id": 43029671, "comment_id": 73154818, "body": "Thank you for contributing to the Rust community. For my purposes, it&#39;s a shame that this is licensed under the GPL and not MIT / Apache, like the majority of Rust libraries."}, {"owner": {"reputation": 7066, "user_id": 94102, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/622606bdd7ad08e2d2e177a8a8bb507a?s=128&d=identicon&r=PG", "display_name": "Jeremy Salwen", "link": "https://stackoverflow.com/users/94102/jeremy-salwen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1493590724, "post_id": 43029671, "comment_id": 74467891, "body": "I have updated the license to be dual licensed under Apache / MIT, like Rust is."}], "tags": [], "owner": {"reputation": 7066, "user_id": 94102, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/622606bdd7ad08e2d2e177a8a8bb507a?s=128&d=identicon&r=PG", "display_name": "Jeremy Salwen", "link": "https://stackoverflow.com/users/94102/jeremy-salwen"}, "is_accepted": false, "score": 12, "last_activity_date": 1490539180, "last_edit_date": 1490539180, "creation_date": 1490536706, "answer_id": 43029671, "question_id": 32564455, "link": "https://stackoverflow.com/questions/32564455/how-can-i-co-sort-two-vecs-based-on-the-values-in-one-of-the-vecs/43029671#43029671", "title": "How can I co-sort two Vecs based on the values in one of the Vecs?", "body": "<p>I just wrote <a href=\"https://crates.io/crates/permutation\" rel=\"noreferrer\">a crate \"permutation\"</a> that allows you to do this :)</p>\n\n<pre><code>let names = vec![\"Bob\", \"Steve\", \"Jane\"];\nlet salary = vec![10, 5, 15];\nlet permutation = permutation::sort(&amp;salary[..]);\nlet ordered_names = permutation.apply_slice(&amp;names[..]);\nlet ordered_salaries = permutation.apply_slice(&amp;salary[..]);\nassert!(ordered_names == vec![\"Steve\", \"Bob\", \"Jane\"]);\nassert!(ordered_salaries == vec![5, 10, 15]);\n</code></pre>\n\n<p>It likely will support this in a single function call in the future.</p>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1959, "favorite_count": 2, "answer_count": 1, "score": 19, "last_activity_date": 1490563345, "creation_date": 1442232625, "last_edit_date": 1490563345, "question_id": 32564455, "link": "https://stackoverflow.com/questions/32564455/how-can-i-co-sort-two-vecs-based-on-the-values-in-one-of-the-vecs", "title": "How can I co-sort two Vecs based on the values in one of the Vecs?", "body": "<p>I have two <code>Vec</code>s that correspond to a list of feature vectors and their corresponding class labels, and I'd like to co-sort them by the class labels.</p>\n\n<p>However, Rust's <code>sort_by</code> operates on a slice rather than being a generic function over a trait (or similar), and the closure only gets the elements to be compared rather than the indices so I can sneakily hack the sort to be parallel.</p>\n\n<p>I've considered the solution:</p>\n\n<pre><code>let mut both = data.iter().zip(labels.iter()).collect();\nboth.sort_by( blah blah );\n// Now split them back into two vectors\n</code></pre>\n\n<p>I'd prefer not to allocate a whole new vector to do this every time because the size of the data can be extremely large.</p>\n\n<p>I can always implement my own sort, of course, but if there's a builtin way to do this it would be much better.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 1, "creation_date": 1442201412, "post_id": 32556825, "comment_id": 52969810, "body": "Your <code>starts_with</code> example clears up a lot. However, I&#39;ve read the book section about <code>AsRef</code> and <code>Borrow</code>\u2014still not clear. Does <code>AsRef</code> allow for coercion into a <code>&amp;str</code> but without allowing for the <code>starts_with</code> example? What are some cases that I should implement <code>AsRef instead of </code>Deref`? Should I ever implement both?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 2, "creation_date": 1442211733, "post_id": 32556825, "comment_id": 52972702, "body": "<code>Deref</code> is magic and can be done for one type. <code>AsRef</code> is completely non-magic and can be done for multiple types. Implementing both is common."}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1550619111, "post_id": 32556825, "comment_id": 96332785, "body": "I changed the link to the (deprecated) first-edition for two reasons: The <a href=\"http://doc.rust-lang.org/book/borrow-and-asref.html\" rel=\"nofollow noreferrer\">old desired link</a> is more or less dead, and the page did not make it into second edition. However, you may add links to the documentation for <a href=\"https://doc.rust-lang.org/std/convert/trait.AsRef.html\" rel=\"nofollow noreferrer\"><code>AsRef</code></a> and <a href=\"https://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow noreferrer\"><code>Borrow</code></a>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 12, "last_activity_date": 1550618825, "last_edit_date": 1550618825, "creation_date": 1442200642, "answer_id": 32556825, "question_id": 32556714, "link": "https://stackoverflow.com/questions/32556714/when-to-use-asref-or-other-conversion-traits-for-string-like-type/32556825#32556825", "title": "When to use AsRef or other conversion traits for string-like type", "body": "<p>If a <code>Foo</code> <em>is</em> semantically a string, then implementing <code>Deref&lt;Target = str&gt;</code> (or possibly <code>Deref&lt;Target = String&gt;</code> and <code>DerefMut</code>) is the main thing to do. That will allow <code>&amp;Foo</code> to coerce to <code>&amp;str</code>, so you can write things like <code>&amp;*foo</code> to get a <code>&amp;str</code> out of a <code>Foo</code>, and <code>foo.starts_with(\"bar\")</code> and such, calling methods that are defined on <code>str</code>.</p>\n\n<p>Implementing <code>AsRef</code> is also going to be beneficial for some things. <code>Borrow</code> is another thing you <em>may</em> want to have, <a href=\"https://doc.rust-lang.org/1.29.0/book/first-edition/borrow-and-asref.html\" rel=\"nofollow noreferrer\">though there are things to consider before doing so</a>.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1272, "favorite_count": 1, "accepted_answer_id": 32556825, "answer_count": 1, "score": 13, "last_activity_date": 1550618825, "creation_date": 1442199624, "question_id": 32556714, "link": "https://stackoverflow.com/questions/32556714/when-to-use-asref-or-other-conversion-traits-for-string-like-type", "title": "When to use AsRef or other conversion traits for string-like type", "body": "<p>I'm defining a crate API in Rust stable (as of now, version 1.2) and am perplexed about best practices for defining my own string-like types.</p>\n\n<p>For example, I have a <code>Foo</code> type that wraps a string.</p>\n\n<pre><code>pub struct Foo(String);\n</code></pre>\n\n<p>My API hides construction of <code>Foo</code> instances, and, furthermore, because the tuple field is private, the application cannot mistakenly construct an invalid <code>Foo</code> value for itself. This means my API restricts the application to work only with valid <code>Foo</code> values. So far so good.</p>\n\n<p>However, I want the application to be able to use a <code>Foo</code> instance as though it's a string\u2014say, printing it, logging it, writing it to a file, passing it to a third-party crate that accepts <code>&amp;str</code>, constructing a copy via <code>to_string()</code> and mutating the copy, etc. In short, I want the application to be able to \u201ccast away\u201d <code>Foo</code>-ness and work with a reference to the underlying string. Because the application cannot convert the raw string back into a <code>Foo</code> instance, type-safety is preserved.</p>\n\n<p>My question is: What conversion traits, if any, should my crate implement for <code>Foo</code> to allow the application to \u201ccast away\u201d <code>Foo</code>-ness and work with the underlying string as a raw string? It's important that <code>Foo</code> convert to <code>&amp;str</code> so as to obviate any unnecessary copying of the underlying string.</p>\n\n<p>For example, how about?</p>\n\n<pre><code>impl AsRef&lt;str&gt; for Foo\n</code></pre>\n\n<p>Is that the right thing to do? Is it enough to be idiomatic? Are there any other conversion traits I should consider implementing for <code>Foo</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1442188137, "post_id": 32555589, "comment_id": 52967235, "body": "Do you mean a <a href=\"http://doc.rust-lang.org/stable/book/compiler-plugins.html\" rel=\"nofollow noreferrer\">plugin for the Rust compiler</a>, like a syntax extension?"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442189394, "post_id": 32555589, "comment_id": 52967465, "body": "Yes, I mean a plugin for the Rust compiler."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442189856, "post_id": 32555589, "comment_id": 52967559, "body": "Note that your example of a singleton is <i>broken</i> for parallel access. There are other questions (<a href=\"http://stackoverflow.com/questions/27747785/\">1</a>, <a href=\"http://stackoverflow.com/questions/27791532\">2</a>, <a href=\"http://stackoverflow.com/questions/27221504\">3</a>) that should help you create one correctly. I believe (but am not sure) that parallel access is highly likely in the compiler."}], "answers": [{"tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": true, "score": 5, "last_activity_date": 1452453494, "last_edit_date": 1452453494, "creation_date": 1452453148, "answer_id": 34709679, "question_id": 32555589, "link": "https://stackoverflow.com/questions/32555589/is-there-a-clean-way-to-have-a-global-mutable-state-in-a-rust-plugin/34709679#34709679", "title": "Is there a clean way to have a global mutable state in a Rust plugin?", "body": "<p>The <code>lazy_static!</code> macro can help with having a global would initializer is not static. <a href=\"https://crates.io/crates/lazy_static/\" rel=\"noreferrer\">https://crates.io/crates/lazy_static/</a> It does something similar to your <code>if hash_map == 0 as *mut HashSet&lt;String&gt;</code>, but takes care of the data race in case more than one thread tries to do this at the same time.</p>\n\n<p>As to mutability, to avoid more data races you\u2019ll have to protect it somehow, probably with a <code>Mutex</code>.</p>\n\n<p>All together:</p>\n\n<pre><code>#[macro_use] extern crate lazy_static;\nuse std::sync::Mutex;\nuse std::collections::HashSet;\n\nlazy_static! {\n    static ref THINGS: Mutex&lt;HashSet&lt;String&gt;&gt; = Mutex::new(HashSet::new());\n}\n\nfn usage() {\n    // unwrap only fails if the lock is poisoned:\n    // if another thread panicked while holding the lock.\n    THINGS.lock().unwrap().insert(\"thing\".to_owned())\n}\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1509, "favorite_count": 0, "accepted_answer_id": 34709679, "answer_count": 1, "score": 6, "last_activity_date": 1452453494, "creation_date": 1442187618, "last_edit_date": 1442193049, "question_id": 32555589, "link": "https://stackoverflow.com/questions/32555589/is-there-a-clean-way-to-have-a-global-mutable-state-in-a-rust-plugin", "title": "Is there a clean way to have a global mutable state in a Rust plugin?", "body": "<p>The only way I have found to do this is with an unsafe singleton function:</p>\n\n<pre><code>fn singleton() -&gt; &amp;'static mut HashSet&lt;String&gt; {\n    static mut hash_map: *mut HashSet&lt;String&gt; = 0 as *mut HashSet&lt;String&gt;;\n\n    let map: HashSet&lt;String&gt; = HashSet::new();\n    unsafe {\n        if hash_map == 0 as *mut HashSet&lt;String&gt; {\n            hash_map = mem::transmute(Box::new(map));\n        }\n        &amp;mut *hash_map\n    }\n}\n</code></pre>\n\n<p>Is there a better way? Perhaps we could do something in the <code>plugin_registrar</code> function?</p>\n\n<p>By global mutable state, I mean a mutable variable that can be used by multiple procedural macros and/or attributes.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>I am writing a compiler plugin to provide a <code>sql!</code> procedural macro. I have a <code>#[sql_table]</code> attribute to be used on structs so that I can get the name and columns of the SQL table.</p>\n\n<p>I need global mutable state to save the name and fields of the <code>struct</code> in the attribute, so that the procedural macro can check that all the identifiers exist.</p>\n"}, {"tags": ["vector", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442177977, "post_id": 32554336, "comment_id": 52964822, "body": "Removing the scope after the declaration <a href=\"http://is.gd/kI9O3U\" rel=\"nofollow noreferrer\">does not</a> have any errors... ?"}], "answers": [{"comments": [{"owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "edited": false, "score": 0, "creation_date": 1442181262, "post_id": 32554388, "comment_id": 52965772, "body": "Good! Thank you. So I guess this behaviour is due to how the iterators work (lazy evaluation), right? Since of that if I write <code>let ... = self.cells.iter().find(...).is_some()</code> it also works."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1442177273, "creation_date": 1442177273, "answer_id": 32554388, "question_id": 32554336, "link": "https://stackoverflow.com/questions/32554336/find-and-push-element-in-a-vector-in-the-same-method/32554388#32554388", "title": "Find and push element in a vector in the same method", "body": "<p>You should read over and commit to memory the methods of the <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"noreferrer\"><code>Iterator</code> trait</a>. Specifically, you want <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any\" rel=\"noreferrer\"><code>any</code></a> here. I also flipped the polarity on your variable name to match.</p>\n\n<pre><code>pub fn add_cell(&amp;mut self, cell: Cell) {\n    let is_present = self.cells.iter().any(|c| c.position == cell.position);\n    if !is_present {\n        self.cells.push(Rc::new(cell).clone());\n    }\n}\n</code></pre>\n\n<p>Additionally, <code>Rc::new(cell).clone()</code> doesn't make any sense \u2014 you might as well shorten it to <code>Rc::new(cell)</code>.</p>\n"}], "owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1074, "favorite_count": 0, "accepted_answer_id": 32554388, "answer_count": 1, "score": 0, "last_activity_date": 1442177864, "creation_date": 1442176826, "last_edit_date": 1442177864, "question_id": 32554336, "link": "https://stackoverflow.com/questions/32554336/find-and-push-element-in-a-vector-in-the-same-method", "title": "Find and push element in a vector in the same method", "body": "<p>I've the feeling that my implementation is too cumbersome and I guess there is a better way to implement this simple thing.</p>\n\n<p>I have a <code>Grid</code> struct representing a game board, I have a method to add a cell into grid, this method (<code>add_cell</code>) checks if a cell already exists in the grid before to add it.</p>\n\n<pre><code>struct Cell {\n    // A simplified version with only one coordinate\n    position: i8,\n}\n\nstruct Grid {\n    // List of cells in the grid\n    cells: Vec&lt;Rc&lt;Cell&gt;&gt;,\n}\n\nimpl Grid {\n    // Add a cell in to the grid\n    pub fn add_cell(&amp;mut self, cell: Cell) {\n        let is_not_yet_in;\n        {\n            if self.cells.iter().find(|&amp;c| c.position == cell.position).is_some() {\n                is_not_yet_in = false;\n            } else {\n                is_not_yet_in = true;\n            }\n        }\n        if is_not_yet_in {\n            self.cells.push(Rc::new(cell).clone());\n        }\n    }\n}\n</code></pre>\n\n<p>I put the <em>fake</em> scope, after <code>is_not_yet_in</code> declaration, in order to avoid compiling error on mutable/immutable borrowing of <code>self.cells</code>. Anyway I think this trick can be avoid using a different approach.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 0, "creation_date": 1442178696, "post_id": 32554285, "comment_id": 52965040, "body": "Not related to your question, but could you please tell me what the syntax <code>Add(Add)</code> means? What is the first <code>Add</code> and what is the second one?"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 3, "creation_date": 1442201414, "post_id": 32554285, "comment_id": 52969812, "body": "@moose: The first <code>Add</code> is the name of the enum variant. The second one is the type of that variant, and it presumes the existence of another type (a <code>struct</code> or another <code>enum</code>, or perhaps a type alias) named <code>Add</code>, whose definition is not shown here. Note that the names for the variants do not need to be the same as the names of the types of those variants, that&#39;s just how the OP chose to name them."}], "answers": [{"comments": [{"owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "edited": false, "score": 0, "creation_date": 1442177115, "post_id": 32554326, "comment_id": 52964599, "body": "Thanks! I will edit my original post to reflect the correct language. Do you have an idea of the overhead of the double matching?"}, {"owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "edited": false, "score": 1, "creation_date": 1442179782, "post_id": 32554326, "comment_id": 52965378, "body": "The <a href=\"http://doc.rust-lang.org/std/intrinsics/fn.discriminant_value.html\" rel=\"nofollow noreferrer\">discriminant_value</a> exists to do this though being an intrinsic it is unstable. It is at least used when generating code for <code>deriving</code> so atleast the ==, &lt; etc operators are as fast as they could be when automatically derived."}, {"owner": {"reputation": 6788, "user_id": 4422856, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e0c127cf5100001386e8663cb8fed33?s=128&d=identicon&r=PG", "display_name": "shakram02", "link": "https://stackoverflow.com/users/4422856/shakram02"}, "edited": false, "score": 0, "creation_date": 1490019774, "post_id": 32554326, "comment_id": 72911669, "body": "how can I make this function be generic over enum types ? or can it be put as a macro ?"}, {"owner": {"reputation": 1960, "user_id": 549531, "user_type": "registered", "accept_rate": 18, "profile_image": "https://i.stack.imgur.com/qV5qe.png?s=128&g=1", "display_name": "Evgeni Nabokov", "link": "https://stackoverflow.com/users/549531/evgeni-nabokov"}, "edited": false, "score": 1, "creation_date": 1587235386, "post_id": 32554326, "comment_id": 108433548, "body": "It is still ugly. I would like to have something like <code>some_variant == SomeEnum::Variant(_)</code>. Instead, I have to write dozens of helpers."}, {"owner": {"reputation": 552, "user_id": 4398194, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27aa20e586603771aac6489468530905?s=128&d=identicon&r=PG&f=1", "display_name": "RecursiveExceptionException", "link": "https://stackoverflow.com/users/4398194/recursiveexceptionexception"}, "edited": false, "score": 0, "creation_date": 1600186483, "post_id": 32554326, "comment_id": 113006096, "body": "Why don&#39;t you just do <code>if let SomeEnum::Variant(..) = some_variant { &#47;*...*&#47; }</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 552, "user_id": 4398194, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27aa20e586603771aac6489468530905?s=128&d=identicon&r=PG&f=1", "display_name": "RecursiveExceptionException", "link": "https://stackoverflow.com/users/4398194/recursiveexceptionexception"}, "edited": false, "score": 1, "creation_date": 1600186817, "post_id": 32554326, "comment_id": 113006245, "body": "@RecursiveExceptionException because that&#39;s not the goal of the OP. They have two instances of an enum that they wish to compare to each other. Your code solves the problem of &quot;is this one instance this specific variant&quot;. That&#39;s covered by <a href=\"https://stackoverflow.com/q/51429501/155423\">How do I conditionally check if an enum is one variant or another?</a>"}, {"owner": {"reputation": 552, "user_id": 4398194, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27aa20e586603771aac6489468530905?s=128&d=identicon&r=PG&f=1", "display_name": "RecursiveExceptionException", "link": "https://stackoverflow.com/users/4398194/recursiveexceptionexception"}, "edited": false, "score": 0, "creation_date": 1600187025, "post_id": 32554326, "comment_id": 113006351, "body": "@Shepmaster Should&#39;ve read the question better, sorry for that!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 46, "last_activity_date": 1507830791, "last_edit_date": 1507830791, "creation_date": 1442176755, "answer_id": 32554326, "question_id": 32554285, "link": "https://stackoverflow.com/questions/32554285/compare-enums-only-by-variant-not-value/32554326#32554326", "title": "Compare enums only by variant, not value", "body": "<p>As of Rust 1.21.0, you can use <a href=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\" rel=\"noreferrer\"><code>std::mem::discriminant</code></a>:</p>\n\n<pre><code>fn variant_eq(a: &amp;Op, b: &amp;Op) -&gt; bool {\n    std::mem::discriminant(a) == std::mem::discriminant(b)\n}\n</code></pre>\n\n<p>This is nice because it can be very generic:</p>\n\n<pre><code>fn variant_eq&lt;T&gt;(a: &amp;T, b: &amp;T) -&gt; bool {\n    std::mem::discriminant(a) == std::mem::discriminant(b)\n}\n</code></pre>\n\n<hr>\n\n<p>Before Rust 1.21.0, I'd match on the tuple of both arguments and ignore the contents of the tuple with <code>_</code> or <code>..</code>:</p>\n\n<pre><code>struct Add(u8);\nstruct Sub(u8);\n\nenum Op {\n    Add(Add),\n    Sub(Sub),\n}\n\nfn variant_eq(a: &amp;Op, b: &amp;Op) -&gt; bool {\n    match (a, b) {\n        (&amp;Op::Add(..), &amp;Op::Add(..)) =&gt; true,\n        (&amp;Op::Sub(..), &amp;Op::Sub(..)) =&gt; true,\n        _ =&gt; false,\n    }\n}\n\nfn main() {\n    let a = Op::Add(Add(42));\n\n    let b = Op::Add(Add(42));\n    let c = Op::Add(Add(21));\n    let d = Op::Sub(Sub(42));\n\n    println!(\"{}\", variant_eq(&amp;a, &amp;b));\n    println!(\"{}\", variant_eq(&amp;a, &amp;c));\n    println!(\"{}\", variant_eq(&amp;a, &amp;d));\n}\n</code></pre>\n\n<p>I took the liberty of renaming the function though, as the components of enums are called <em>variants</em>, and really you are testing to see if they are equal, not comparing them (which is usually used for ordering / sorting).</p>\n\n<p>For performance, let's look at the LLVM IR in generated by Rust 1.16.0 in release mode. The <a href=\"https://play.rust-lang.org/\" rel=\"noreferrer\">Rust Playground</a> can show you this easily:</p>\n\n<pre><code>define internal fastcc zeroext i1 @_ZN10playground10variant_eq17h3a88b3837dfe66d4E(i8 %.0.0.val, i8 %.0.0.val1) unnamed_addr #0 {\nentry-block:\n  %switch2 = icmp eq i8 %.0.0.val, 1\n  %switch = icmp ne i8 %.0.0.val1, 1\n  br i1 %switch2, label %bb5, label %bb4\n\nbb3:                                              ; preds = %bb5, %bb4\n  br label %bb6\n\nbb4:                                              ; preds = %entry-block\n  br i1 %switch, label %bb6, label %bb3\n\nbb5:                                              ; preds = %entry-block\n  br i1 %switch, label %bb3, label %bb6\n\nbb6:                                              ; preds = %bb5, %bb4, %bb3\n  %_0.0 = phi i1 [ false, %bb3 ], [ true, %bb4 ], [ true, %bb5 ]\n  ret i1 %_0.0\n}\n</code></pre>\n\n<p>The short version is that we do a switch on one enum variant, then compare to the other enum variant. It's overall pretty efficient, but I am surprised that it doesn't just directly compare the variant numbers. Perhaps this is something that an optimization pass could take care of?</p>\n\n<p>If you wanted to have a macro to generate the function, something like this might be good start.</p>\n\n<pre><code>struct Add(u8);\nstruct Sub(u8);\n\nmacro_rules! foo {\n    (enum $name:ident {\n        $($vname:ident($inner:ty),)*\n    }) =&gt; {\n        enum $name {\n             $($vname($inner),)*\n        }\n\n        impl $name {\n            fn variant_eq(&amp;self, b: &amp;Self) -&gt; bool {\n                match (self, b) {\n                    $((&amp;$name::$vname(..), &amp;$name::$vname(..)) =&gt; true,)*\n                    _ =&gt; false,\n                }\n            }\n        }\n    }\n}\n\nfoo! {\n    enum Op {\n        Add(Add),\n        Sub(Sub),\n    }\n}\n\nfn main() {\n    let a = Op::Add(Add(42));\n\n    let b = Op::Add(Add(42));\n    let c = Op::Add(Add(21));\n    let d = Op::Sub(Sub(42));\n\n    println!(\"{}\", Op::variant_eq(&amp;a, &amp;b));\n    println!(\"{}\", Op::variant_eq(&amp;a, &amp;c));\n    println!(\"{}\", Op::variant_eq(&amp;a, &amp;d));\n}\n</code></pre>\n\n<p>The macro does have limitations though - all the variants need to have a single variant. Supporting unit variants, variants with more than one type, struct variants, visibility, etc are all <em>real hard</em>. Perhaps a procedural macro would make it a bit easier.</p>\n"}], "owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10414, "favorite_count": 8, "accepted_answer_id": 32554326, "answer_count": 1, "score": 41, "last_activity_date": 1507830791, "creation_date": 1442176487, "last_edit_date": 1490020615, "question_id": 32554285, "link": "https://stackoverflow.com/questions/32554285/compare-enums-only-by-variant-not-value", "title": "Compare enums only by variant, not value", "body": "<p>I have an enum with the following structure:</p>\n\n<pre><code>enum Expression {\n    Add(Add),\n    Mul(Mul),\n    Var(Var),\n    Coeff(Coeff)\n}\n</code></pre>\n\n<p>where the 'members' of each variant are structs.</p>\n\n<p>Now I want to compare if two enums have the same variant. So if I have</p>\n\n<pre><code>let a = Expression::Add({something});\nlet b = Expression::Add({somethingelse});\n</code></pre>\n\n<p><code>cmpvariant(a, b)</code> should be <code>true</code>. I can imagine a simple double <code>match</code> code that goes through all the options for both enum instances. However, I am looking for a fancier solution, if it exists. If not, is there overhead for the double match? I imagine that internally I am just comparing two ints (ideally).</p>\n"}, {"tags": ["inheritance", "struct", "rust"], "comments": [{"owner": {"reputation": 1233, "user_id": 2614160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7e0c3e2e0d321d8ae7c6cf34caa8e363?s=128&d=identicon&r=PG", "display_name": "Jan", "link": "https://stackoverflow.com/users/2614160/jan"}, "edited": false, "score": 0, "creation_date": 1601461349, "post_id": 32552593, "comment_id": 113413505, "body": "I think it will always be sub-optimal to answer this question without knowing the context in which you want to use the newly generated struct and why. In my opinion these design decisions highly depend on the specific use-case."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 36, "last_activity_date": 1486140179, "last_edit_date": 1486140179, "creation_date": 1442166358, "answer_id": 32552688, "question_id": 32552593, "link": "https://stackoverflow.com/questions/32552593/is-it-possible-for-one-struct-to-extend-an-existing-struct-keeping-all-the-fiel/32552688#32552688", "title": "Is it possible for one struct to extend an existing struct, keeping all the fields?", "body": "<p>Rust does not have struct inheritance of any kind.  If you want <code>StructB</code> to contain the same fields as <code>StructA</code>, then you need to use composition.</p>\n\n<pre><code>struct StructB {\n    a: StructA,\n    // other fields...\n}\n</code></pre>\n\n<p>Also, to clarify, traits are <em>only</em> able to define methods and associated types; they <em>cannot</em> define fields.</p>\n\n<p>If you want to be able to use a <code>StructB</code> as a <code>StructA</code>, you can get <em>some</em> of the way there by implementing the <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> and <a href=\"http://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"noreferrer\"><code>DerefMut</code></a> traits, which will allow the compiler to implicitly cast pointers to <code>StructB</code>s to pointers to <code>StructA</code>s:</p>\n\n<pre><code>struct StructA;\n\nimpl StructA {\n    fn name(&amp;self) -&gt; &amp;'static str {\n        \"Anna\"\n    }\n}\n\nstruct StructB {\n    a: StructA, \n    // other fields...\n}\n\nimpl std::ops::Deref for StructB {\n    type Target = StructA;\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.a\n    }\n}\n\nfn main() {\n    let b = StructB { a: StructA };\n    println!(\"{}\", b.name());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1274, "user_id": 268567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8c35a22f83b0796b4a993ea264ffbc9?s=128&d=identicon&r=PG", "display_name": "drebabels", "link": "https://stackoverflow.com/users/268567/drebabels"}, "edited": false, "score": 1, "creation_date": 1442175355, "post_id": 32552698, "comment_id": 52964132, "body": "This is what I suspected. Thanks for confirming and thanks for the quick answer! For the rest of the noobs out there... do these snippets compile for you? If I don&#39;t have the return type for <code>new</code>  I get a compile error."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1274, "user_id": 268567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8c35a22f83b0796b4a993ea264ffbc9?s=128&d=identicon&r=PG", "display_name": "drebabels", "link": "https://stackoverflow.com/users/268567/drebabels"}, "edited": false, "score": 0, "creation_date": 1442175833, "post_id": 32552698, "comment_id": 52964262, "body": "@drebabels no, that&#39;s my mistake when transferring it across. I made sure it compiles now :-)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1442189933, "post_id": 32552698, "comment_id": 52967577, "body": "@Shepmaster: implementing <code>Deref&lt;Target = Person&gt;</code> and <code>DerefMut</code> for <code>Child</code> would go a long way to making composition approach work nicely. Because then you can in most cases treat a <code>Child</code> as though it were a <code>Person</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1442190091, "post_id": 32552698, "comment_id": 52967614, "body": "@ChrisMorgan that may be true, but I&#39;m in the camp of people who believe that&#39;s not semantically correct ^_^. One of these days I&#39;ll write up my RFC for a proposed alternative... someday..."}, {"owner": {"reputation": 609, "user_id": 1439382, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/cd9ccf39d5db5939dcb67e6dcadfcdf7?s=128&d=identicon&r=PG&f=1", "display_name": "xoxox", "link": "https://stackoverflow.com/users/1439382/xoxox"}, "edited": false, "score": 0, "creation_date": 1490089273, "post_id": 32552698, "comment_id": 72944070, "body": "Are there any news on this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 609, "user_id": 1439382, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/cd9ccf39d5db5939dcb67e6dcadfcdf7?s=128&d=identicon&r=PG&f=1", "display_name": "xoxox", "link": "https://stackoverflow.com/users/1439382/xoxox"}, "edited": false, "score": 0, "creation_date": 1490101825, "post_id": 32552698, "comment_id": 72953466, "body": "@xoxox news on <b>what</b>? The code in this answer still compiles, the text appears to be valid. We aren&#39;t mindreaders here on Stack Overflow, so you need to be more specific."}, {"owner": {"reputation": 22172, "user_id": 1263942, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b272a5e1d5d3589192d942552e51e2a8?s=128&d=identicon&r=PG", "display_name": "Bruno Grieder", "link": "https://stackoverflow.com/users/1263942/bruno-grieder"}, "edited": false, "score": 0, "creation_date": 1588861199, "post_id": 32552698, "comment_id": 109067972, "body": "@Shepmaster It would be nice to have composition of structs the way golang does it: <a href=\"https://play.golang.org/p/sskWaTpJgr\" rel=\"nofollow noreferrer\">playground example</a>. It avoids implementing delegates yourselves. Have you pushed an RFC yet ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22172, "user_id": 1263942, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b272a5e1d5d3589192d942552e51e2a8?s=128&d=identicon&r=PG", "display_name": "Bruno Grieder", "link": "https://stackoverflow.com/users/1263942/bruno-grieder"}, "edited": false, "score": 0, "creation_date": 1588862109, "post_id": 32552698, "comment_id": 109068559, "body": "@BrunoGrieder the closest I know of is <a href=\"https://github.com/rust-lang/rfcs/pull/2393\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/2393</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 49, "last_activity_date": 1486140517, "last_edit_date": 1495541894, "creation_date": 1442166414, "answer_id": 32552698, "question_id": 32552593, "link": "https://stackoverflow.com/questions/32552593/is-it-possible-for-one-struct-to-extend-an-existing-struct-keeping-all-the-fiel/32552698#32552698", "title": "Is it possible for one struct to extend an existing struct, keeping all the fields?", "body": "<p>There is nothing that exactly matches that. There are two concepts that come to mind.</p>\n\n<ol>\n<li><p>Structural composition</p>\n\n<pre><code>struct Person {\n    age: u8,\n}\n\nstruct Child {\n    person: Person,\n    has_toy: bool,\n}\n\nimpl Person {\n    fn new(age: u8) -&gt; Self {\n        Person { age: age }\n    }\n\n    fn age(&amp;self) -&gt; u8 {\n        self.age\n    }\n}\n\nimpl Child {\n    fn new(age: u8, has_toy: bool) -&gt; Self {\n        Child { person: Person::new(age), has_toy: has_toy }\n    }\n\n    fn age(&amp;self) -&gt; u8 {\n        self.person.age()\n    }\n}\n\nfn main() {\n    let p = Person::new(42);\n    let c = Child::new(7, true);\n\n    println!(\"I am {}\", p.age());\n    println!(\"My child is {}\", c.age());\n}\n</code></pre>\n\n<p>You can simply embed one struct into another. The memory layout is nice and compact, but you have to manually delegate all the methods from <code>Person</code> to <code>Child</code> or lend out a <code>&amp;Person</code>.</p></li>\n<li><p>Traits</p>\n\n<pre><code>trait SayHi {\n    fn say_hi(&amp;self);\n}\n\nstruct Person {\n    age: u8,\n}\n\nstruct Child {\n    age: u8,\n    has_toy: bool,\n}\n\nimpl SayHi for Person {\n    fn say_hi(&amp;self) {\n        println!(\"Greetings. I am {}\", self.age)\n    }\n}\n\nimpl SayHi for Child {\n    fn say_hi(&amp;self) {\n        if self.has_toy {\n            println!(\"I'm only {}, but I have a toy!\", self.age)\n        } else {\n            println!(\"I'm only {}, and I don't even have a toy!\", self.age)\n        }\n    }\n}\n\nfn greet&lt;T&gt;(thing: T)\n    where T: SayHi\n{\n    thing.say_hi()\n}\n\nfn main() {\n    let p = Person { age: 42 };\n    let c = Child { age: 7, has_toy: true };\n\n    greet(p);\n    greet(c);\n}\n</code></pre></li>\n</ol>\n\n<p>You can combine these two concepts, of course.</p>\n\n<hr>\n\n<p>As <a href=\"https://stackoverflow.com/a/32552688/155423\">DK. mentions</a>, you could choose to implement <code>Deref</code> or <code>DerefMut</code>. However, I do not agree that these traits should be used in this manner. My argument is akin to the argument that using classical object-oriented inheritance simply for code reuse is the wrong thing. \"Favor composition over inheritance\" => \"favor composition over <code>Deref</code>\". However, I do hold out hope for a language feature that enables succinct <em>delegation</em>, reducing the annoyance of composition.</p>\n"}, {"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1616254755, "post_id": 64433649, "comment_id": 117947044, "body": "This is a good solution, but the other Rust programmers may laugh at you for naming traits <code>ITraitName</code>. Just <code>TraitName</code> is fine. Traits and types aren&#39;t part of the same namespace, so there&#39;s rarely any confusion (at least, as long as you use <code>dyn</code> for trait object types)."}], "tags": [], "owner": {"reputation": 636, "user_id": 986730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2605883a1352c96af1e097687971b97?s=128&d=identicon&r=PG", "display_name": "user986730", "link": "https://stackoverflow.com/users/986730/user986730"}, "is_accepted": false, "score": 3, "last_activity_date": 1616254598, "last_edit_date": 1616254598, "creation_date": 1603134171, "answer_id": 64433649, "question_id": 32552593, "link": "https://stackoverflow.com/questions/32552593/is-it-possible-for-one-struct-to-extend-an-existing-struct-keeping-all-the-fiel/64433649#64433649", "title": "Is it possible for one struct to extend an existing struct, keeping all the fields?", "body": "<p>Another alternative is to use generics:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait IAnimalData {}\n\nstruct Animal&lt;D: IAnimalData&gt; {\n    name: String,\n    age: i64,\n    child_data: D,\n}\n\nstruct Dog {\n    favorite_toy: String,\n}\n\nimpl IAnimalData for Dog {}\n</code></pre>\n<p>And then you can implement &quot;child&quot; methods like this, which will only apply to dogs:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl Animal&lt;Dog&gt; {\n    pub fn bark(&amp;self) -&gt; String {\n        return &quot;bark!&quot;.to_owned();\n    }\n}\n</code></pre>\n<p>And if you want parent methods that apply to all animals, you can implement them like this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// implements the 'breathe' method for all animals\nimpl&lt;T: IAnimalData&gt; Animal&lt;T&gt; {\n    fn breathe() {}\n}\n</code></pre>\n<p>The good part is that you don't have to go through the pain of forwarding methods in <code>Dog</code> to methods in <code>Animal</code>; you can use them directly inside <code>impl Animal&lt;Dog&gt;</code>. Also, you can access any fields defined in <code>Animal</code> from any method of <code>Animal&lt;Dog&gt;</code>. The bad part is that your inheritance chain is always visible (that is, you will probably never use <code>Dog</code> in your code, but rather <code>Animal&lt;Dog&gt;</code>). Also, if the inheritance chain is long, you might get some very silly, long-winded types, like <code>Animal&lt;Dog&lt;Chihuahua&gt;&gt;</code>. I guess at that point a type alias would be advisable.</p>\n"}], "owner": {"reputation": 1274, "user_id": 268567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8c35a22f83b0796b4a993ea264ffbc9?s=128&d=identicon&r=PG", "display_name": "drebabels", "link": "https://stackoverflow.com/users/268567/drebabels"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 24676, "favorite_count": 14, "accepted_answer_id": 32552698, "answer_count": 3, "score": 55, "last_activity_date": 1616254598, "creation_date": 1442165777, "last_edit_date": 1442171786, "question_id": 32552593, "link": "https://stackoverflow.com/questions/32552593/is-it-possible-for-one-struct-to-extend-an-existing-struct-keeping-all-the-fiel", "title": "Is it possible for one struct to extend an existing struct, keeping all the fields?", "body": "<p>Using <code>rust 1.2.0</code></p>\n\n<p><strong>Problem</strong></p>\n\n<p>I'm still in the process of learning Rust (coming from a Javascript background) and am trying to figure out if it is possible for one struct <code>StructB</code> to extend an existing struct <code>StructA</code> such that <code>StructB</code> has all the fields defined on <code>StructA</code>.</p>\n\n<p>In Javascript (ES6 syntax) I could essentially do something like this...</p>\n\n<pre><code>class Person {\n    constructor (gender, age) {\n        this.gender = gender;\n        this.age = age;\n    }\n}\nclass Child extends Person {\n    constructor (name, gender, age) {\n        super(gender, age);\n        this.name = name;\n    }\n}\n</code></pre>\n\n<p><strong>Constraints</strong></p>\n\n<ul>\n<li><code>StructA</code> is from an external <code>cargo</code> package that I have no control over.</li>\n</ul>\n\n<p><strong>Current Progress</strong></p>\n\n<p>I found this <a href=\"http://smallcultfollowing.com/babysteps/blog/2013/10/24/single-inheritance/\" rel=\"noreferrer\">blog post on single-inheritance</a> which sounds like exactly what I need.</p>\n\n<p>But trying to implement it resulted in this error message <code>error: virtual structs have been removed from the language</code>. Some searching later and I found out that it had been <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0341-remove-virtual-structs.md\" rel=\"noreferrer\">implemented and then removed per RFC-341</a> rather quickly.</p>\n\n<p>Also found this <a href=\"https://users.rust-lang.org/t/oop-how-to-override/1980\" rel=\"noreferrer\">thread about using traits</a>, but since <code>StructA</code> is from an external cargo package I don't think it is possible for me to turn it into a trait.</p>\n\n<p>So what would be the correct way to accomplish this in Rust?</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442159540, "post_id": 32551177, "comment_id": 52958906, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/31490913/rust-generics-expected-t-found-foo\" title=\"rust generics expected t found foo\">stackoverflow.com/questions/31490913/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/31060851/generics-error-expected-type-parameter-found-struct\" title=\"generics error expected type parameter found struct\">stackoverflow.com/questions/31060851/&hellip;</a>"}, {"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1442160283, "post_id": 32551177, "comment_id": 52959140, "body": "You may use <a href=\"http://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait objects</a>, to achieve the kind of polymorphism your code seems to involve."}], "answers": [{"comments": [{"owner": {"reputation": 3629, "user_id": 379639, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/4fa63505dd4dd4691b87d30508b1bfd3?s=128&d=identicon&r=PG", "display_name": "Xavier Shay", "link": "https://stackoverflow.com/users/379639/xavier-shay"}, "edited": false, "score": 0, "creation_date": 1442163435, "post_id": 32551408, "comment_id": 52960262, "body": "thank you! I didn&#39;t realise I could &quot;specialise&quot; things in <code>impl</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 35, "last_activity_date": 1589218407, "last_edit_date": 1589218407, "creation_date": 1442158845, "answer_id": 32551408, "question_id": 32551177, "link": "https://stackoverflow.com/questions/32551177/expected-type-parameter-error-in-the-constructor-of-a-generic-struct/32551408#32551408", "title": "&quot;Expected type parameter&quot; error in the constructor of a generic struct", "body": "<p>Here's a reproduction of your error:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    val: T,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn new() -&gt; Self {\n        Foo { val: true }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>The problem arises because you tried to lie to the compiler. This code:</p>\n\n<pre><code>impl&lt;T&gt; Foo&lt;T&gt; {\n    fn new() -&gt; Self {\n        /* ... */\n    }\n}\n</code></pre>\n\n<p>Says \"For whatever <code>T</code> the <strong>caller</strong> chooses, I will create a <code>Foo</code> with that type\". Then your actual implementation picks a <em>concrete type</em> \u2014 in the example, a <code>bool</code>. There's no guarantee that <code>T</code> is a <code>bool</code>. Note that your <code>new</code> function doesn't even accept any parameter of type <code>T</code>, which is highly suspect as that's how the caller picks the concrete type 99% of the time.</p>\n\n<p>The correct way of saying this would be</p>\n\n<pre><code>impl Foo&lt;bool&gt; {\n    fn new() -&gt; Self {\n        Foo { val: true }\n    }\n}\n</code></pre>\n\n<p>Although you probably want to pick a more specific name than <code>new</code>, as it looks as if you are trying to make your struct generic. Presumably there would be <em>other</em> constructors with different types.</p>\n\n<p>For your exact code, you probably want something like</p>\n\n<pre><code>impl TextureFactory&lt;gfx_device_gl::Resources&gt; { /* ... */ }\n</code></pre>\n\n<p>Another possible solution would be to remove the generic type parameter from your struct. If you only ever construct it with a <code>gfx_device_gl::Resources</code>, then there's no reason to make it generic.</p>\n\n<p>In other cases, you may be trying to return a type that implements a trait. For that, you can use a boxed trait object:</p>\n\n<pre><code>impl Foo&lt;Box&lt;dyn std::fmt::Display&gt;&gt; {\n    fn new() -&gt; Self {\n        Foo { val: Box::new(true) }\n    }\n}\n</code></pre>\n\n<p>In the future, you may also be able to use <code>impl Trait</code> (a.k.a. <em>existential types</em>):</p>\n\n<pre><code>#![feature(type_alias_impl_trait)]\n\nstruct Foo&lt;T&gt; {\n    val: T,\n}\n\ntype SomeConcreteButOpaqueType = impl std::fmt::Display;\n\nimpl Foo&lt;SomeConcreteButOpaqueType&gt; {\n    fn new() -&gt; Self {\n        Foo { val: true }\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n</ul>\n"}], "owner": {"reputation": 3629, "user_id": 379639, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/4fa63505dd4dd4691b87d30508b1bfd3?s=128&d=identicon&r=PG", "display_name": "Xavier Shay", "link": "https://stackoverflow.com/users/379639/xavier-shay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5408, "favorite_count": 3, "accepted_answer_id": 32551408, "answer_count": 1, "score": 24, "last_activity_date": 1589218407, "creation_date": 1442157427, "last_edit_date": 1495541392, "question_id": 32551177, "link": "https://stackoverflow.com/questions/32551177/expected-type-parameter-error-in-the-constructor-of-a-generic-struct", "title": "&quot;Expected type parameter&quot; error in the constructor of a generic struct", "body": "<p>I am trying to store piston textures in a struct.</p>\n\n<pre><code>struct TextureFactory&lt;R&gt; where R: gfx::Resources {\n    block_textures: Vec&lt;Rc&lt;Texture&lt;R&gt;&gt;&gt;,\n}\n\nimpl&lt;R&gt; TextureFactory&lt;R&gt; where R: gfx::Resources  {\n    fn new(window: PistonWindow) -&gt; Self {\n        let texture = Rc::new(gfx_texture::Texture::from_path(\n            &amp;mut *window.factory.borrow_mut(),\n            \"assets/element_red_square.png\",\n            Flip::None, &amp;TextureSettings::new()\n        ).unwrap());\n        let block_textures = Vec::new();\n        block_textures.push(texture);\n\n        TextureFactory {\n            block_textures: block_textures,\n        }\n    }\n}\n</code></pre>\n\n<p>This does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:37:9: 39:10 error: mismatched types:\n expected `TextureFactory&lt;R&gt;`,\n    found `TextureFactory&lt;gfx_device_gl::Resources&gt;`\n(expected type parameter,\n    found enum `gfx_device_gl::Resources`)\n</code></pre>\n\n<p><code>gfx_device_gl::Resources</code> <a href=\"http://www.piston.rs/docs/piston_window/gfx/device/trait.Resources.html\" rel=\"noreferrer\">implements <code>gfx::Resources</code></a> though (I think it's just the device specific implementation.) I don't actually care what type this is, but I need to know so that I can store it in the struct.</p>\n\n<p>I made a <a href=\"https://github.com/xaviershay/rust-puzzlefighter/tree/repro\" rel=\"noreferrer\">compilable repo on Github</a>.</p>\n\n<p>(I suspect <a href=\"https://stackoverflow.com/questions/26063593/rust-generics-traits-expected-foob-found-foofoo2\">Rust generics/traits: &quot;expected &#39;Foo&lt;B&gt;&#39;, found &#39;Foo&lt;Foo2&gt;&#39;&quot;</a> is the same question, but I can't figure out how to apply it to my problem.)</p>\n"}, {"tags": ["string", "rust", "stdin"], "answers": [{"tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": true, "score": 5, "last_activity_date": 1442156213, "last_edit_date": 1442156213, "creation_date": 1442152799, "answer_id": 32550420, "question_id": 32549784, "link": "https://stackoverflow.com/questions/32549784/is-it-possible-to-read-characters-from-iostdin-without-caching-input-line/32550420#32550420", "title": "Is it possible to read characters from `io::stdin()` without caching input line-by-line?", "body": "<p>You can do this by having a single byte array, and continuing to read till the <code>Result</code> becomes an <code>Err</code>. There is a problem with this however, as this can become if you're not reading in ASCII characters. If you are going to come with up against this problem, it would be better to just allocate a <code>String</code>, and use the <code>chars</code> iterator, as it handles this problem.</p>\n\n<p>Sample code:</p>\n\n<pre><code>use std::io::{stdin, Read};\n\nfn main() {\n    loop {\n        let mut character = [0];\n        while let Ok(_) = stdin().read(&amp;mut character) {\n            println!(\"CHAR {:?}\", character[0] as char);\n        }\n    }\n}\n</code></pre>\n\n<p>Sample output:</p>\n\n<pre><code>Hello World\nCHAR Some('H')\nCHAR Some('e')\nCHAR Some('l')\nCHAR Some('l')\nCHAR Some('o')\nCHAR Some(' ')\nCHAR Some('W')\nCHAR Some('o')\nCHAR Some('r')\nCHAR Some('l')\nCHAR Some('d')\nCHAR Some('\\n')\n\u4f60\u597d\u4e16\u754c\nCHAR Some('\\u{e4}')\nCHAR Some('\\u{bd}')\nCHAR Some('\\u{a0}')\nCHAR Some('\\u{e5}')\nCHAR Some('\\u{a5}')\nCHAR Some('\\u{bd}')\nCHAR Some('\\u{e4}')\nCHAR Some('\\u{b8}')\nCHAR Some('\\u{96}')\nCHAR Some('\\u{e7}')\nCHAR Some('\\u{95}')\nCHAR Some('\\u{8c}')\nCHAR Some('\\n')\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1588337134, "last_edit_date": 1588337134, "creation_date": 1442156681, "answer_id": 32551031, "question_id": 32549784, "link": "https://stackoverflow.com/questions/32549784/is-it-possible-to-read-characters-from-iostdin-without-caching-input-line/32551031#32551031", "title": "Is it possible to read characters from `io::stdin()` without caching input line-by-line?", "body": "<p><a href=\"https://stackoverflow.com/a/32550420/155423\">XAMPPRocky's answer</a> is correct for the case that you probably care about, <strong>ASCII characters</strong>. I want to address the question as you phrased it:</p>\n\n<blockquote>\n  <p>I just want to iterate over the characters in the standard input of my CLI application.</p>\n</blockquote>\n\n<p>In Rust, a <code>char</code> is a 32-bit (4-byte) type that represents a Unicode codepoint. However, the IO abstraction operates on the level of bytes. You need to bring <em>some</em> kind of encoding that maps codepoints to sequences of bytes, and the current winner in that war is UTF-8.</p>\n\n<p>UTF-8 will use a <a href=\"https://stackoverflow.com/q/9533258/155423\">maximum of 4 bytes</a> to represent a single codepoint, but in a different bit pattern than native. To properly read character-by-character, you will <em>always</em> need to have some kind of buffer.</p>\n\n<p>Then there's the problem of having a partial character at the end of your buffer that needs to be moved back to the beginning of the buffer, which is comparatively expensive. The best solution there is to amortize the cost over many characters, thus why reading in larger chunks can be faster.</p>\n"}], "owner": {"reputation": 1298, "user_id": 181800, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad9a8f4d64371c641c16481bc7871e7d?s=128&d=identicon&r=PG", "display_name": "kirushik", "link": "https://stackoverflow.com/users/181800/kirushik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1763, "favorite_count": 0, "accepted_answer_id": 32550420, "answer_count": 2, "score": 3, "last_activity_date": 1588337134, "creation_date": 1442148150, "last_edit_date": 1442157561, "question_id": 32549784, "link": "https://stackoverflow.com/questions/32549784/is-it-possible-to-read-characters-from-iostdin-without-caching-input-line", "title": "Is it possible to read characters from `io::stdin()` without caching input line-by-line?", "body": "<p><em>This question refers to the stable Rust version <strong>1.2.0</em></strong></p>\n\n<p>I just want to iterate over the characters in the standard input of my CLI application. It's perfectly possible to do read <code>stdin</code>'s <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line\" rel=\"nofollow\">read_line</a> method into a temporary <code>String</code> instance and then iterate over it's <code>chars()</code> iterator.</p>\n\n<p>But I don't like this approach, as it allocates a totally unnecessary <code>String</code> object. <code>Stdin</code> trait's documentations implements <code>Read</code> trait, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.chars\" rel=\"nofollow\">which has</a> <code>chars()</code> iterator, but it is marked as unstable (and thus can't be used with a stable compiler version).</p>\n\n<p>Is there an alternative, possible less obvious way to read stdin char-by-char without any additional Rust-side buffering?</p>\n"}, {"tags": ["rust", "type-erasure"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1442117381, "post_id": 32546054, "comment_id": 52949107, "body": "You may need to define what you mean by &quot;type erasure&quot; in order to get the most useful responses."}, {"owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1442185235, "post_id": 32546054, "comment_id": 52966695, "body": "@Shepmaster Type erasure for generics is <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/erasure.html\" rel=\"nofollow noreferrer\">a well-defined concept</a> in JVM languages like Java and Scala, but does not occur with generics in any other language I know.  People who are proficient in modern Java will know what &quot;type erasure&quot; means."}, {"owner": {"reputation": 16645, "user_id": 402322, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/GWEWt.gif?s=128&g=1", "display_name": "ceving", "link": "https://stackoverflow.com/users/402322/ceving"}, "edited": false, "score": 0, "creation_date": 1560757820, "post_id": 32546054, "comment_id": 99826046, "body": "This explains it quite well: <a href=\"https://gist.github.com/Kimundi/8391398\" rel=\"nofollow noreferrer\">A light comparison between Rust and Java generics and type system features.</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442117293, "post_id": 32546093, "comment_id": 52949092, "body": "Looks like you and I disagree ^_^. Perhaps there is a nuance to the question I am missing..."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1442117951, "post_id": 32546093, "comment_id": 52949187, "body": "@Shepmaster: In Java, type erasure is relevant because it&#39;s as if the type parameters were never there. For example, you can store a <code>String</code> in an <code>ArrayList&lt;Integer&gt;</code>, because there is no such thing as an <code>ArrayList&lt;Integer&gt;</code> at runtime; it&#39;s just an <code>ArrayList</code>. The only advantage to using generics in Java is that the compiler will insert casts for you where it&#39;s safe, whereas without generics, you&#39;d have to type the casts yourself (and you could get them wrong)."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1442339042, "post_id": 32546093, "comment_id": 53038418, "body": "What about <code>Vec&lt;Box&lt;Any&gt;&gt;</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 2, "creation_date": 1442363171, "post_id": 32546093, "comment_id": 53048638, "body": "@aochagavia: I don&#39;t consider this type erasure in the same way as in Java. A <code>Vec&lt;Box&lt;Any&gt;&gt;</code> would allow you to store objects of any type that implements <code>Any</code>, but you could not use it as if it was, say, a <code>Vec&lt;i32&gt;</code> or a <code>Vec&lt;String&gt;</code>. In Java, type erasure is only possible because type parameters can only be replaced with reference types (you can&#39;t use primitive types like <code>int</code>). Since all reference types have the same size (a pointer), all instantiations of a generic class or method would be identical (bar a few oddities such as <code>new T[]</code> which doesn&#39;t work)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 18, "last_activity_date": 1608411722, "last_edit_date": 1608411722, "creation_date": 1442116017, "answer_id": 32546093, "question_id": 32546054, "link": "https://stackoverflow.com/questions/32546054/does-rust-erase-generic-types-or-not/32546093#32546093", "title": "Does Rust erase generic types or not?", "body": "<p>When you use a generic function or a generic type, the compiler generates a separate instance for each distinct set of type parameters (I believe lifetime parameters are ignored, as they have no influence on the generated code). This process is called <em>monomorphization</em>. For instance, <code>Vec&lt;i32&gt;</code> and <code>Vec&lt;String&gt;</code> are different types, and therefore <code>Vec&lt;i32&gt;::len()</code> and <code>Vec&lt;String&gt;::len()</code> are different functions. This is necessary, because <code>Vec&lt;i32&gt;</code> and <code>Vec&lt;String&gt;</code> have different memory layouts, and thus need different machine code! Therefore, <strong>no</strong>, there is no type erasure.</p>\n<p>If we use <a href=\"http://doc.rust-lang.org/stable/std/any/trait.Any.html#tymethod.type_id\" rel=\"nofollow noreferrer\"><code>Any::type_id()</code></a>, as in the following example:</p>\n<pre><code>use std::any::Any;\n\nfn main() {\n    let v1: Vec&lt;i32&gt; = Vec::new();\n    let v2: Vec&lt;String&gt; = Vec::new();\n    \n    let a1 = &amp;v1 as &amp;dyn Any;\n    let a2 = &amp;v2 as &amp;dyn Any;\n    \n    println!(&quot;{:?}&quot;, a1.type_id());\n    println!(&quot;{:?}&quot;, a2.type_id());\n}\n</code></pre>\n<p>we obtain different type IDs for two instances of <code>Vec</code>. This supports the fact that <code>Vec&lt;i32&gt;</code> and <code>Vec&lt;String&gt;</code> are distinct types.</p>\n<p>However, reflection capabilities in Rust are limited; <code>Any</code> is pretty much all we've got for now. You cannot obtain more information about the type of a runtime value, such as its name or its members. In order to be able to work with <code>Any</code>, you must cast it (using <a href=\"http://doc.rust-lang.org/stable/std/any/trait.Any.html#method.downcast_ref\" rel=\"nofollow noreferrer\"><code>Any::downcast_ref()</code></a> or <a href=\"http://doc.rust-lang.org/stable/std/any/trait.Any.html#method.downcast_mut\" rel=\"nofollow noreferrer\"><code>Any::downcast_mut()</code></a> to a type that is known at compile time.</p>\n"}, {"tags": [], "owner": {"reputation": 1143, "user_id": 11588505, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc506473f38d0dc9a703179a853a1ebf?s=128&d=identicon&r=PG&f=1", "display_name": "Camelid", "link": "https://stackoverflow.com/users/11588505/camelid"}, "is_accepted": false, "score": 0, "last_activity_date": 1608251291, "last_edit_date": 1608251291, "creation_date": 1608250958, "answer_id": 65350192, "question_id": 32546054, "link": "https://stackoverflow.com/questions/32546054/does-rust-erase-generic-types-or-not/65350192#65350192", "title": "Does Rust erase generic types or not?", "body": "<p>Rust does have type erasure in the form of virtual method dispatch via <a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\"><code>dyn Trait</code></a>, which allows you to have a <code>Vec</code> where the elements have different concrete types:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let list: Vec&lt;Box&lt;dyn ToString&gt;&gt; = vec![Box::new(1), Box::new(&quot;hello&quot;)];\n\n    for item in list {\n        println!(&quot;{}&quot;, item.to_string());\n    }\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7655a569ad733cb5e73a2780eac3495f\" rel=\"nofollow noreferrer\">(playground)</a></p>\n<p>Note that the compiler requires you to manually box the elements since it must know the size of every value at compile time. You can use a <code>Box</code>, which has the same size no matter what it points to since it's just a pointer to the heap. You can also use <code>&amp;</code>-references:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let list: Vec&lt;&amp;dyn ToString&gt; = vec![&amp;1, &amp;&quot;hello&quot;];\n\n    for item in list {\n        println!(&quot;{}&quot;, item.to_string());\n    }\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=60d57be69a84a9d623e637a974463d50\" rel=\"nofollow noreferrer\">(playground)</a></p>\n<p>However, note that if you use <code>&amp;</code>-references you may run into lifetime issues.</p>\n"}], "owner": {"reputation": 2034, "user_id": 706798, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/edd4f46b96f5194781ddbe75527f8e23?s=128&d=identicon&r=PG", "display_name": "Anton", "link": "https://stackoverflow.com/users/706798/anton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2338, "favorite_count": 0, "accepted_answer_id": 32546093, "answer_count": 2, "score": 12, "last_activity_date": 1608411722, "creation_date": 1442115417, "last_edit_date": 1442117055, "question_id": 32546054, "link": "https://stackoverflow.com/questions/32546054/does-rust-erase-generic-types-or-not", "title": "Does Rust erase generic types or not?", "body": "<p>Is there type erasure of generics in Rust (like in Java) or not? I am unable to find a definitive answer.</p>\n"}, {"tags": ["rust", "identifier", "mio"], "answers": [{"comments": [{"owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 0, "creation_date": 1442160125, "post_id": 32551094, "comment_id": 52959086, "body": "Ah, my mistake. The <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/struct.EventLoop.html#method.timeout_ms\" rel=\"nofollow noreferrer\">timeout_ms</a> method of EventLoop takes a parameter called &#39;token&#39;, but I didn&#39;t notice that it&#39;s not of type &#39;Token&#39;. I&#39;m surprised that the Tokens aren&#39;t being stored somewhere; does mio not pre-allocate Slabs for keeping track of the connections it maintains? How is it maintaining an association between the Token I provide and the OS notification that a Stream is readable?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 1, "creation_date": 1442162235, "post_id": 32551094, "comment_id": 52959826, "body": "No, I don&#39;t think mio really tracks the connections at all. The tokens are passed to epoll/kqueue when registering a file descriptor and epoll/kqueue pass them back up with the events. I don&#39;t really know much about the internal data structures of epoll or kqueue, but I don&#39;t think they use the tokens to identify anything (looking at the man pages, mio tokens are just opaque &#39;user data&#39; as far as the underlying APIs are concerned)."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 2, "last_activity_date": 1442159820, "last_edit_date": 1442159820, "creation_date": 1442156988, "answer_id": 32551094, "question_id": 32544641, "link": "https://stackoverflow.com/questions/32544641/what-constraints-should-i-be-aware-of-when-generating-mios-tokens/32551094#32551094", "title": "What constraints should I be aware of when generating mio&#39;s Tokens?", "body": "<p>The short version: <code>mio</code> doesn't actually do anything with the tokens except pass them back to you when you receive the corresponding event, so you can use whatever tokens you want as far as <code>mio</code> is concerned. To answer your questions individually:</p>\n\n<blockquote>\n  <p>If I have two threads who each have their own EventLoop, can they both use Token=0 to listen for events on two different streams? (i.e. are Tokens bound to a particular EventLoop instance?)</p>\n</blockquote>\n\n<p>Sure, that's fine.</p>\n\n<blockquote>\n  <p>Can I use Token=0 to simultaneously represent both a TcpStream and a pending Timeout, or are they both stored in the same collection of Tokens?</p>\n</blockquote>\n\n<p><code>mio</code> doesn't have a collection of tokens. If you don't need unique tokens to identify things in your application code, you're free to use the same token in different places. (I'm a bit confused by this question though, since as far as I can tell, timeouts don't use mio <code>Token</code>s at all)</p>\n\n<blockquote>\n  <p>Is there any harm in jumping from 0 to 1,000,000? (e.g. Are they being stored in a data structure that's optimized for sequential numbers?)</p>\n</blockquote>\n\n<p>No. As I said above, mio doesn't care about the value of your tokens.</p>\n"}], "owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "accepted_answer_id": 32551094, "answer_count": 1, "score": 2, "last_activity_date": 1442159820, "creation_date": 1442099076, "last_edit_date": 1442118132, "question_id": 32544641, "link": "https://stackoverflow.com/questions/32544641/what-constraints-should-i-be-aware-of-when-generating-mios-tokens", "title": "What constraints should I be aware of when generating mio&#39;s Tokens?", "body": "<p><a href=\"https://github.com/carllerche/mio\" rel=\"nofollow\">The <code>mio</code> library</a> for asynchronous I/O relies on the developer to provide instances of <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/struct.Token.html\" rel=\"nofollow\">the <code>Token</code> type</a> in order to correlate events that have happened back to the source, e.g. a particular <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/tcp/struct.TcpStream.html\" rel=\"nofollow\"><code>TcpStream</code></a> or <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/trait.Handler.html\" rel=\"nofollow\"><code>Handler::Timeout</code></a>.</p>\n\n<p>As you can see from <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/src/mio/token.rs.html#2\" rel=\"nofollow\">the implementation</a>, <code>Token</code> is just a wrapper type around a <code>usize</code>. It's tempting to simply increment a counter each time a <code>Token</code> is needed, but it will eventually overflow.</p>\n\n<p>What rules should I keep in mind as I go to generate <code>Tokens</code> to pass to the <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/master/mio/struct.EventLoop.html\" rel=\"nofollow\"><code>EventLoop</code></a>? Some specific questions:</p>\n\n<ul>\n<li>If I have two threads who each have their own <code>EventLoop</code>, can they both use <code>Token=0</code> to listen for events on two different streams? (i.e. are <code>Tokens</code> bound to a particular <code>EventLoop</code> instance?)</li>\n<li>Can I use <code>Token=0</code> to simultaneously represent both a <code>TcpStream</code> and a pending <code>Timeout</code>, or are they both stored in the same collection of Tokens?</li>\n<li>Is there any harm in jumping from <code>0</code> to <code>1,000,000</code>? (e.g. Are they being stored in a data structure that's optimized for sequential numbers?)</li>\n</ul>\n\n<p>Thanks!</p>\n"}, {"tags": ["swift", "rust", "ffi"], "comments": [{"owner": {"reputation": 8617, "user_id": 3477950, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/mC5xL.jpg?s=128&g=1", "display_name": "The Paramagnetic Croissant", "link": "https://stackoverflow.com/users/3477950/the-paramagnetic-croissant"}, "edited": false, "score": 4, "creation_date": 1442057028, "post_id": 32538097, "comment_id": 52934004, "body": "Probably not any immediate way. The memory management philosophies of Rust and Swift are very different."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1442134904, "post_id": 32538097, "comment_id": 52952243, "body": "Given the layers of indirection you laid out (Rust -&gt; C -&gt; ObjC -&gt; Swift), your best bet is probably going to be boring old RPC."}], "answers": [{"tags": [], "owner": {"reputation": 1250, "user_id": 5545202, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/TntZx.jpg?s=128&g=1", "display_name": "Brendan Molloy", "link": "https://stackoverflow.com/users/5545202/brendan-molloy"}, "is_accepted": false, "score": 6, "last_activity_date": 1448700453, "creation_date": 1448700453, "answer_id": 33969417, "question_id": 32538097, "link": "https://stackoverflow.com/questions/32538097/whats-the-best-way-to-use-a-rust-library-in-swift-code/33969417#33969417", "title": "What&#39;s the best way to use a Rust library in Swift code?", "body": "<p>I am working on a project similar to this right now (porting a C++ library to function on both iOS and Android).</p>\n\n<p>The only sane way to do this is to <code>extern \"C\"</code> your Rust interfaces and write a simple .h file for it, and create a simple ObjC class wrapping for those. You then pop the <code>#import &lt;someframework/someframework.h&gt;</code> into the Objective C to Swift binding header and it all just works.</p>\n\n<p>It's a bit tedious but it's really not all that much work in practice. It only gets painful if you try to transfer complex objects across boundaries, which results in writing a bunch of structs, and then everything goes downhill. I advise you against that, stick to primitives and arrays.</p>\n\n<p>If your model is more complex than that, consider something like IPC as others have said, though that might be much more painful in practice.</p>\n\n<p>So yep, tedious. The good news though is that this actually does work, though. :)</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2073, "favorite_count": 1, "answer_count": 1, "score": 25, "last_activity_date": 1488476090, "creation_date": 1442056028, "last_edit_date": 1488476090, "question_id": 32538097, "link": "https://stackoverflow.com/questions/32538097/whats-the-best-way-to-use-a-rust-library-in-swift-code", "title": "What&#39;s the best way to use a Rust library in Swift code?", "body": "<p>I'd like to be able to use Rust objects in Swift, somehow notify Swift when Rust objects change/events happen, and leverage Swift's ARC to keep Rust objects alive.</p>\n\n<p>So far what comes to my mind is to write a plain C API for the Rust objects, then write an Objective-C wrapper for the C API, and then export that to Swift, like this:</p>\n\n<p><a href=\"https://i.stack.imgur.com/e9Mce.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/e9Mce.jpg\" alt=\"adapting adapters\"></a></p>\n\n<p>Is there a less tedious way? Something that can automatically generate wrapper functions and C header files?</p>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1442049210, "post_id": 32537015, "comment_id": 52931994, "body": "I think too much is explicit in Rust which only burdens users, while it could actually happen &quot;behind the scenes&quot;. The concept of a pointer is probably the working theory for anyone starting to use Rust if it comes to passing by reference. As such, the closures captures in the code would be: a Reference to an u32. It is not easy to see why that should be a problem. And what most would expect would be that the compiler checks the code written, not a space of possible applications of <code>make_counter()</code>. Only if someone violates the lifetime, the compiler should complain, imho."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 4, "creation_date": 1442051982, "post_id": 32537015, "comment_id": 52932715, "body": "@BitTickler This is a huge debate, but here&#39;s a few points: (1) Once you know your way around it, 99% of the time appeasing the borrow checker has very little cognitive overhead. (2) Declaring the lifetime relationships up front in the function signature is valuable documentation (if you know how to read it, of course) and (3) Not thinking about it and letting it be inferred will result in even more confusing error messages when caller and function disagree about a lifetime. It will also allow people to write &quot;wrong&quot; functions and not get an error until they call them in tricky circumstances."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1442053771, "post_id": 32537015, "comment_id": 52933164, "body": "Clearly, there is no right and wrong in this debate. But is it not amusing, that type inference and omission of giving types is quite popular, right now, yet &quot;lifetime inference&quot; vs &quot;explicit lifetime specification&quot; is still an open question?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 5, "creation_date": 1442055290, "post_id": 32537015, "comment_id": 52933592, "body": "@BitTickler Type inference is generally good, but the consensus of communities experienced with whole-program type inference (Haskell, ML variants) is that it&#39;s better to type annotate top-level definitions by default. The situation is similar in Rust, within each function lifetimes are mostly inferred, but there is no cross-function inference. There is lifetime <i>elision</i>, which serves the same purpose to a degree but is simpler, easily predictable, and local (only depends on the rest of the signature, not on other functions)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1442065932, "post_id": 32537015, "comment_id": 52936355, "body": "@BitTickler some of that is touched upon in <a href=\"http://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31612025#31612025\">this question</a>"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 5, "last_activity_date": 1442048322, "creation_date": 1442048322, "answer_id": 32537015, "question_id": 32536757, "link": "https://stackoverflow.com/questions/32536757/why-is-function-argument-lifetime-different-to-the-lifetime-of-a-binding-inside/32537015#32537015", "title": "Why is function argument lifetime different to the lifetime of a binding inside a function?", "body": "<p>The difference is not in using a local variable vs. using a parameter. Parameters are perfectly ordinary locals. In fact, this version of <code>alt_make_counter</code> works<sup>1</sup>:</p>\n\n<pre><code>fn alt_make_counter (mut state: u32) -&gt; Box&lt;FnMut() -&gt; u32&gt; {\n    Box::new(move || {let ret = state; state = state + 1; ret })\n}\n</code></pre>\n\n<p>The problem is that the closure in <code>make_counter</code> closes over a <code>&amp;mut u32</code> instead of <code>u32</code>. It doesn't have its own state, it uses an integer somewhere else as its scratch space. And thus it needs to worry about the lifetime of that location. The function signature needs to communicate that the closure can only work while it can still use the reference that was passed in. This can be expressed with a lifetime parameter:</p>\n\n<pre><code>fn make_counter&lt;'a&gt;(state: &amp;'a mut u32) -&gt; Box&lt;FnMut() -&gt; u32 + 'a&gt; {\n    Box::new(move || {let ret = *state; *state = *state + 1; ret })\n}\n</code></pre>\n\n<p>Note that <code>'a</code> is also attached to the <code>FnMut() -&gt; u32</code> (though with a different syntax because it's a trait).</p>\n\n<p>The simplest rule to avoid such trouble is to <em>not use references</em> when they cause problems. There is no good reason for this closure to borrow its state, so don't do it. I don't know whether you fall under this, but I've seen a bunch of people that were under the impression that <code>&amp;mut</code> is the primary or only way to mutate something. <strong>That is wrong.</strong> You can just store it by value and then just mutate that directly by storing it, or the larger structure in which it is contained, in a local variable that is tagged as <code>mut</code>. A mutable <em>reference</em> is only useful if the results of the mutation needs to be shared with some other code and you can't just pass the new value to that code.</p>\n\n<p>Of course, sometimes juggling references in complicated ways is necessary. Unfortunately there doesn't seem to be a quick and easy way to learn to deal with those confidently. It's a big pedagogic challenge, but so far it appears everyone just struggled for a while and then progressively had fewer problems as they get more experienced. No, there is no single simple rule that solves all lifetime woes.</p>\n\n<p><sup>1</sup> The return type has to be <code>FnMut</code> in all cases. You just didn't get an error about that yet because your current error happens at an earlier stage in the compilation.</p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 32537015, "answer_count": 1, "score": 2, "last_activity_date": 1442048322, "creation_date": 1442046269, "question_id": 32536757, "link": "https://stackoverflow.com/questions/32536757/why-is-function-argument-lifetime-different-to-the-lifetime-of-a-binding-inside", "title": "Why is function argument lifetime different to the lifetime of a binding inside a function?", "body": "<p>Gave VisualRust another try and to see how far they got, I wrote a few lines of code. And as usual, the code causes me to write a question on stackoverflow...</p>\n\n<p>See first, read my question later:</p>\n\n<pre><code>fn make_counter( state : &amp;mut u32  ) -&gt; Box&lt;Fn()-&gt;u32&gt; \n{\n    Box::new(move || {let ret = *state; *state = *state + 1; ret })\n}\n\nfn test_make_counter() {\n    let mut cnt : u32 = 0;\n    {\n        let counter = make_counter( &amp; mut cnt );\n        let x1 = counter();\n        let x2 = counter();\n        println!(\"x1 = {}  x2 = {}\",x1,x2);\n    }\n}\n\nfn alt_make_counter ( init : u32 ) -&gt; Box&lt;Fn()-&gt;u32&gt; {\n    let mut state = init;\n    Box::new(move || {let ret = state; state = state + 1; ret })\n}   \n\n\nfn test_alt_make_counter() {\n    let counter = alt_make_counter( 0u32 );\n    let x1 = counter();\n    let x2 = counter();\n    println!(\"x1 = {}  x2 = {}\",x1,x2);\n}\n\nfn main() {\n    test_make_counter();\n    test_alt_make_counter();\n}\n</code></pre>\n\n<p>The difference between <code>make_counter()</code> and <code>alt_make_counter()</code> is, that in one case, the state is a pointer to a mutable u32 passed to the function and in the other case, it is a mutable u32 defined inside the function. As the test_make_counter() function shows clearly, there is no way, that the closure lives longer than the variable <code>cnt</code>. Even if I removed the block inside <code>test_make_counter()</code> they would still have the identical lifetime. With the block, the <code>counter</code> will die before <code>cnt</code>. And yet, Rust complains: </p>\n\n<blockquote>\n  <p>src\\main.rs(4,2): error : captured variable <code>state</code> does not outlive the enclosing closure\n  src\\main.rs(3,1): warning : note: captured variable is valid for the anonymous lifetime #1 defined on the block at 3:0</p>\n</blockquote>\n\n<p>If you look at the <code>alt_make_counter()</code> function now, the lifetime of <code>state</code> should basically cause the same error message, right? If the code captures the state for the closure, it should not matter if the pointer is passed in or if the variable is bound inside the function, right? But obviously, those 2 cases are magically different.</p>\n\n<p>Who can explain, why they are different (bug, feature, deep insight, ...?) and if there is a simple rule one can adopt which prevents wasting time over such issues now and then?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 5198, "user_id": 186580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/51af0a007f1bdc7134c0f02d3a156abb?s=128&d=identicon&r=PG", "display_name": "Oleksandr Kravchuk", "link": "https://stackoverflow.com/users/186580/oleksandr-kravchuk"}, "edited": false, "score": 0, "creation_date": 1441973268, "post_id": 32522870, "comment_id": 52903852, "body": "which rust version are you using? it seems to be your problem: <a href=\"https://github.com/rust-lang/rust/issues/18699\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/18699</a>"}, {"owner": {"reputation": 71, "user_id": 5325152, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hVnXt.jpg?s=128&g=1", "display_name": "jherkel", "link": "https://stackoverflow.com/users/5325152/jherkel"}, "reply_to_user": {"reputation": 5198, "user_id": 186580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/51af0a007f1bdc7134c0f02d3a156abb?s=128&d=identicon&r=PG", "display_name": "Oleksandr Kravchuk", "link": "https://stackoverflow.com/users/186580/oleksandr-kravchuk"}, "edited": false, "score": 0, "creation_date": 1441973570, "post_id": 32522870, "comment_id": 52904023, "body": "I have tried 1.2.0 and also 1.3.0-beta.3 (2a89bb6ba 2015-08-11)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5198, "user_id": 186580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/51af0a007f1bdc7134c0f02d3a156abb?s=128&d=identicon&r=PG", "display_name": "Oleksandr Kravchuk", "link": "https://stackoverflow.com/users/186580/oleksandr-kravchuk"}, "edited": false, "score": 1, "creation_date": 1441979084, "post_id": 32522870, "comment_id": 52907731, "body": "@OleksandrKravchuk: How is the <code>flexible</code> function of the <code>csv::Reader</code> related to flexible target specification?"}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442079759, "post_id": 32522870, "comment_id": 52940763, "body": "The error is reported for <code>src&#47;lib.rs</code> but we only see the source for <code>build.rs</code>.  I believe the answer from @Shepmaster is correct."}, {"owner": {"reputation": 790, "user_id": 1727842, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/sRI5E.jpg?s=128&g=1", "display_name": "Ty_", "link": "https://stackoverflow.com/users/1727842/ty"}, "edited": false, "score": 0, "creation_date": 1541278809, "post_id": 32522870, "comment_id": 93164103, "body": "Thanks for the thread! Helped me a bit with a small issue.  Check out the walkdir crate btw."}], "answers": [{"comments": [{"owner": {"reputation": 71, "user_id": 5325152, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hVnXt.jpg?s=128&g=1", "display_name": "jherkel", "link": "https://stackoverflow.com/users/5325152/jherkel"}, "edited": false, "score": 0, "creation_date": 1442072869, "post_id": 32525798, "comment_id": 52938530, "body": "I didn&#39;t describe my problem correctly, I forgot to mention that I had problem with the file build.rs. So I assume &quot;build-dependecies&quot; should be used for this case. I also tried to copy &quot;csv&quot; to &quot;dependecies&quot; and yes it works. But I think it is not correct and in cargo (or rust compiler) there is some error how dependencies are resolved."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 71, "user_id": 5325152, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hVnXt.jpg?s=128&g=1", "display_name": "jherkel", "link": "https://stackoverflow.com/users/5325152/jherkel"}, "edited": false, "score": 1, "creation_date": 1442077376, "post_id": 32525798, "comment_id": 52939926, "body": "@now2 <i>problem with the file build.rs</i> \u2014 but your error message says <code>src&#47;lib.rs [...] can&#39;t find crate for csv</code>. That&#39;s why I assumed that the code you were showing was the contents of <code>src&#47;lib.rs</code>. Your question still doesn&#39;t actually show <code>src&#47;lib.rs</code>, but see the last sentence of my edited answer for a guess."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1442077206, "last_edit_date": 1442077206, "creation_date": 1441981555, "answer_id": 32525798, "question_id": 32522870, "link": "https://stackoverflow.com/questions/32522870/unable-to-find-crate-that-is-listed-in-build-dependencies-section/32525798#32525798", "title": "Unable to find crate that is listed in [build-dependencies] section", "body": "<p>Changing <code>flexible(false)</code> for <code>flexible(true)</code> makes no difference for me; both fail. The problem is that you've chosen <code>build-dependencies</code> for some reason, instead of just <code>dependencies</code>.</p>\n\n<p>Using the <strong>src/lib.rs</strong> file that you provided in your answer, and this <strong>Cargo.toml</strong> file:</p>\n\n<pre><code>[package]\nname = \"stack-overflow\"\nversion = \"0.1.0\"\nauthors = [\"A. Developer &lt;a.developer@example.com&gt;\"]\n\n[dependencies]\ncsv = \"*\"\n</code></pre>\n\n<p>It compiles fine.</p>\n\n<p>If you need to access a dependency both in your <strong>build.rs</strong> and in your project, you need to include the dependency in <em>both</em> sections.</p>\n"}, {"comments": [{"owner": {"reputation": 71, "user_id": 5325152, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hVnXt.jpg?s=128&g=1", "display_name": "jherkel", "link": "https://stackoverflow.com/users/5325152/jherkel"}, "edited": false, "score": 0, "creation_date": 1442073192, "post_id": 32535956, "comment_id": 52938638, "body": "I have edited my question see my comment to Shepmaster&#39;s answer."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 4, "last_activity_date": 1442039583, "creation_date": 1442039583, "answer_id": 32535956, "question_id": 32522870, "link": "https://stackoverflow.com/questions/32522870/unable-to-find-crate-that-is-listed-in-build-dependencies-section/32535956#32535956", "title": "Unable to find crate that is listed in [build-dependencies] section", "body": "<p>A build dependency is a dependency for <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow\">a build script</a>, which is a helper binary compiled and run before your main crate is built (designed to be used for code-generation, and building/finding native C libraries, etc.).</p>\n\n<p>Normal dependencies used by the main code should just fall into the \"dependencies\" section, e.g.</p>\n\n<pre><code>[dependencies]\ncsv = \"0.14\"\n</code></pre>\n\n<p>There's also a \"dev-dependencies\" section, which are dependencies that are only needed for testing, i.e. they are compiled and used only for <code>cargo test</code>. This allows crates to depend on, for example, <a href=\"https://crates.io/crates/quickcheck\" rel=\"nofollow\"><code>quickcheck</code></a> for running tests without contaminating the main artifact.</p>\n\n<p>In summary, running <code>cargo build</code> will do something like:</p>\n\n<ol>\n<li>build any <code>build-dependencies</code></li>\n<li>build the build script (pointing the compiler to the built build-dependencies), and run it</li>\n<li>build any <code>dependencies</code></li>\n<li>build the main crate (pointing the compiler to the built dependencies)</li>\n</ol>\n\n<p>Running <code>cargo test</code> adds:</p>\n\n<ol start=\"5\">\n<li>build any <code>dev-dependencies</code></li>\n<li>build the main crate with <code>--test</code> to create a test runner for any in-source <code>#[test]</code>s (pointing the compiler to both the dependencies and dev-dependencies)</li>\n<li>build any external examples or tests, also pointing to both the dependencies and dev-dependencies</li>\n</ol>\n"}], "owner": {"reputation": 71, "user_id": 5325152, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hVnXt.jpg?s=128&g=1", "display_name": "jherkel", "link": "https://stackoverflow.com/users/5325152/jherkel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1621, "favorite_count": 1, "accepted_answer_id": 32525798, "answer_count": 2, "score": 5, "last_activity_date": 1442077206, "creation_date": 1441972316, "last_edit_date": 1592644375, "question_id": 32522870, "link": "https://stackoverflow.com/questions/32522870/unable-to-find-crate-that-is-listed-in-build-dependencies-section", "title": "Unable to find crate that is listed in [build-dependencies] section", "body": "<p>I try to compile my project with the command <code>cargo build</code>.</p>\n<p><strong>build.rs</strong></p>\n<pre><code>extern crate csv;\n\nuse std::path::Path;\nuse std::fs::OpenOptions;\nuse std::io::BufWriter;\nuse std::io::Write;\n\n#[allow(non_snake_case)]\nfn processCSV(filename: &amp;str, sourcePath: &amp;str, enumName: &amp;str) {\n    println!(&quot;Generate rust source code from schema {}&quot;,filename);\n\n    let mut ret: Vec&lt;String&gt; = Vec::new();\n    let mut rdr = csv::Reader::from_file(filename).unwrap().flexible(true);\n    for record in rdr.records().map(|r| r.unwrap()) {\n    }\n    let path = Path::new(sourcePath);\n    let file = match OpenOptions::new().write(true).create(true).open(&amp;path) {\n        Ok(file) =&gt; file,\n        Err(..) =&gt; panic!(&quot;Cannot create file {}&quot;,path.display()),\n    };\n    let mut writer = BufWriter::new(file);\n\n    writer.write_all(b&quot;test\\n&quot;);\n}\n\nfn main() {\n    processCSV(&quot;../schemas/Test.csv&quot;, &quot;./src/mod/common/StatusCode.rs&quot;, &quot;StatusCode&quot;);\n}\n</code></pre>\n<p>and <strong>Cargo.toml</strong></p>\n<pre><code>[package]\nname = &quot;rust-test&quot;\nversion = &quot;0.0.1&quot;\nbuild = &quot;build.rs&quot;\n\n[lib]\npath = &quot;src/lib.rs&quot;\n\n[dependencies]\n\n[build-dependencies]\ncsv = &quot;*&quot;\n</code></pre>\n<p>I can see this error :</p>\n<blockquote>\n<p>src/lib.rs:1:1: 1:18 error: can't find crate for <code>csv</code></p>\n<p>src/lib.rs:1 extern crate csv;</p>\n</blockquote>\n<p>but when I change <code>flexible(true)</code> to <code>flexible(false)</code> it compiles just fine without any errors. What do I need to do to fix this?</p>\n<p>I am using Rust 1.2.0 on Windows 7 64-bit.</p>\n"}, {"tags": ["rust", "code-coverage", "kcov"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1441983477, "post_id": 32521800, "comment_id": 52910775, "body": "<i>the function is public, so it cannot be optimized out from the library</i> \u2014 it absolutely can be. Everything is statically compiled, so the compiler knows which functions are used (and how!) when it creates the binary. This is a huge benefit due to monomorphization."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441983524, "post_id": 32521800, "comment_id": 52910818, "body": "@Shepmaster Good point, I didn&#39;t think about it."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441978743, "post_id": 32523033, "comment_id": 52907486, "body": "I suppose that at the very least the functions should remain when the &quot;coverage&quot; switch is turned on."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441982994, "post_id": 32523033, "comment_id": 52910458, "body": "@MatthieuM. The problem is that this is not the case, as far as I can see."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 1, "creation_date": 1441984297, "post_id": 32523033, "comment_id": 52911338, "body": "@brt: Indeed, which is fairly amusing."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442018729, "post_id": 32523033, "comment_id": 52926061, "body": "@MatthieuM. there&#39;s no &quot;coverage&quot; switch at the moment (kcov just piggybacks on the standard DWARF debug info)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442061302, "post_id": 32523033, "comment_id": 52935089, "body": "@huon-dbaupp: to be honest, I would say this is a bug in <code>kcov</code> (though it is likely due to it being language agnostic); at the very least it should report the percentage of ignored lines (and which they are)."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1442061550, "post_id": 32523033, "comment_id": 52935164, "body": "I don&#39;t see how kcov can know about functions that don&#39;t appear in the binary. (It could just assume that all lines that aren&#39;t mentioned in debuginfo are code lines that weren&#39;t hit... but there&#39;s a lot of comments/whitespace/<code>}</code>s in most programs, to the point of making that metric useless.)"}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1442092079, "post_id": 32523033, "comment_id": 52944349, "body": "@huon-dbaupp Is there any workaround allowing to build without stripping down unused functions?"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1441972811, "creation_date": 1441972811, "answer_id": 32523033, "question_id": 32521800, "link": "https://stackoverflow.com/questions/32521800/why-does-kcov-calculate-incorrect-code-coverage-statistics-for-rust-programs/32523033#32523033", "title": "Why does kcov calculate incorrect code coverage statistics for Rust programs?", "body": "<p>You're correct: totally unused functions are stripped at the moment, so coverage tools like kcov are only good for branch coverage within used functions (at least, the summary functionality of such tools). There is <a href=\"https://internals.rust-lang.org/t/disabling-gc-sections-when-test-is-specified/2163\" rel=\"nofollow\">some discussion</a> about making this not happen by default for test/debug builds.</p>\n"}, {"tags": [], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "is_accepted": false, "score": 13, "last_activity_date": 1541580890, "last_edit_date": 1541580890, "creation_date": 1468491801, "answer_id": 38371687, "question_id": 32521800, "link": "https://stackoverflow.com/questions/32521800/why-does-kcov-calculate-incorrect-code-coverage-statistics-for-rust-programs/38371687#38371687", "title": "Why does kcov calculate incorrect code coverage statistics for Rust programs?", "body": "<p>There is a workaround: the <code>RUSTFLAGS='-C link-dead-code'</code> environment variable. Use it while building and the Rust compiler will link dead code as well:</p>\n\n<pre><code>RUSTFLAGS='-C link-dead-code' cargo test\n</code></pre>\n"}], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1506, "favorite_count": 2, "accepted_answer_id": 32523033, "answer_count": 2, "score": 12, "last_activity_date": 1541580890, "creation_date": 1441969059, "last_edit_date": 1468491852, "question_id": 32521800, "link": "https://stackoverflow.com/questions/32521800/why-does-kcov-calculate-incorrect-code-coverage-statistics-for-rust-programs", "title": "Why does kcov calculate incorrect code coverage statistics for Rust programs?", "body": "<p>I've tried to use <a href=\"https://simonkagstrom.github.io/kcov/\" rel=\"noreferrer\">kcov</a> to get code coverage for a Rust library. I've followed <a href=\"https://users.rust-lang.org/t/tutorial-how-to-collect-test-coverages-for-rust-project/650\" rel=\"noreferrer\">this tutorial</a> to build and use kcov. The coverage seems to work, however I'm facing a strange high coverage. Some files in the project gets a 100% coverage, even if they are actually not covered at all!</p>\n\n<p>This is a minimal project reproducing the problem:</p>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"mypackage\"\nversion = \"0.1.0\"\nauthors = [\"mbrt\"]\n</code></pre>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>pub mod subm;\n\npub fn coverage1(i : bool) -&gt; bool {\n    if i {\n        true\n    }\n    else {\n        false\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::coverage1;\n\n    #[test]\n    fn test_coverage1() {\n        assert!(coverage1(true));\n    }\n}\n</code></pre>\n\n<p><strong>src/subm.rs</strong></p>\n\n<pre><code>pub fn coverage2(i : bool) -&gt; bool {\n    if i {\n        true\n    }\n    else {\n        false\n    }\n}\n\n#[cfg(test)]\nmod test {\n    #[test]\n    fn test_coverage2() {\n    }\n}\n</code></pre>\n\n<p>There are two identical functions, one in the root of the crate, and another in a submodule. The only difference is that the first test stimulates one function, and the other does nothing at all. In this case I'd expect a coverage not greater than 50%.</p>\n\n<p>However <code>kcov</code> reports this:</p>\n\n<p><a href=\"https://i.stack.imgur.com/gOYbG.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/gOYbG.png\" alt=\"coverage summary\"></a></p>\n\n<p>The coverage for <code>lib.rs</code> is correct:</p>\n\n<p><a href=\"https://i.stack.imgur.com/lAz1x.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lAz1x.png\" alt=\"coverage1\"></a></p>\n\n<p>But the coverage for <code>subm.rs</code> is wrong! Note that the function is public, so it cannot be optimized out from the library:</p>\n\n<p><a href=\"https://i.stack.imgur.com/tKUx3.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tKUx3.png\" alt=\"coverage2\"></a></p>\n\n<p>Here we can verify that <code>kcov</code> is working, because it is able to compute code coverage for one file, but it is not able to see that the second file is not covered at all.</p>\n\n<p>What is the problem here? Maybe test binaries strip down unused functions and kcov cannot see them?</p>\n"}, {"tags": ["scala", "compare", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1441926923, "post_id": 32510337, "comment_id": 52884982, "body": "FWIW, I voted to close as &quot;There are either too many possible answers, or good answers would be too long for this format. Please add details to narrow the answer set or to isolate an issue that can be answered in a few paragraphs.&quot;. A <a href=\"http://arewewebyet.com/\" rel=\"nofollow noreferrer\">single one of your points</a> requires an entire web site to answer, and it would only go out of date immediately if answered here."}, {"owner": {"reputation": 2034, "user_id": 706798, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/edd4f46b96f5194781ddbe75527f8e23?s=128&d=identicon&r=PG", "display_name": "Anton", "link": "https://stackoverflow.com/users/706798/anton"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441930594, "post_id": 32510337, "comment_id": 52885911, "body": "Fair enough, I guess I was too optimistic/lazy."}, {"owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "edited": false, "score": 0, "creation_date": 1442162429, "post_id": 32510337, "comment_id": 52959894, "body": "Perhaps this question should be deleted since it was replaced by  <a href=\"https://stackoverflow.com/questions/32546054/does-rust-erase-generic-types-or-not\" title=\"does rust erase generic types or not\">stackoverflow.com/questions/32546054/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 7629, "user_id": 1119997, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4a485e339c4de35684dfe31dc758041e?s=128&d=identicon&r=PG", "display_name": "tuxdna", "link": "https://stackoverflow.com/users/1119997/tuxdna"}, "edited": false, "score": 0, "creation_date": 1441919685, "post_id": 32510490, "comment_id": 52882454, "body": "After reading about ownership, I can say it is the most important part of Rust. Thanks !"}, {"owner": {"reputation": 60081, "user_id": 298389, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9359760602e36ed0e43ff61a14f1812d?s=128&d=identicon&r=PG", "display_name": "om-nom-nom", "link": "https://stackoverflow.com/users/298389/om-nom-nom"}, "reply_to_user": {"reputation": 7629, "user_id": 1119997, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4a485e339c4de35684dfe31dc758041e?s=128&d=identicon&r=PG", "display_name": "tuxdna", "link": "https://stackoverflow.com/users/1119997/tuxdna"}, "edited": false, "score": 0, "creation_date": 1441977199, "post_id": 32510490, "comment_id": 52906324, "body": "Care to explain downvote?"}], "tags": [], "owner": {"reputation": 60081, "user_id": 298389, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9359760602e36ed0e43ff61a14f1812d?s=128&d=identicon&r=PG", "display_name": "om-nom-nom", "link": "https://stackoverflow.com/users/298389/om-nom-nom"}, "is_accepted": false, "score": 4, "last_activity_date": 1441914679, "creation_date": 1441914679, "answer_id": 32510490, "question_id": 32510337, "link": "https://stackoverflow.com/questions/32510337/type-erasure-rust-vs-scala/32510490#32510490", "title": "Type erasure: Rust vs Scala", "body": "<p>Scala is GC language and has JVM runtime so it can tap into JVM ecosystem (clojure, java, groovy, ...), Rust is well known for it's trademark <a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">ownership approach</a> which gives a lot more safety guarantees at compile time.\nRest of the differences can be neglected I believe.</p>\n"}], "owner": {"reputation": 2034, "user_id": 706798, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/edd4f46b96f5194781ddbe75527f8e23?s=128&d=identicon&r=PG", "display_name": "Anton", "link": "https://stackoverflow.com/users/706798/anton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1077, "favorite_count": 1, "closed_date": 1441916704, "answer_count": 1, "score": 3, "last_activity_date": 1441931087, "creation_date": 1441914147, "last_edit_date": 1495541802, "question_id": 32510337, "link": "https://stackoverflow.com/questions/32510337/type-erasure-rust-vs-scala", "closed_reason": "Opinion-based", "title": "Type erasure: Rust vs Scala", "body": "<p>I program in Scala. I'm fairly versed.</p>\n\n<p>Now, Rust has caught my eye. It looks good. Like it might be another language I would like to have under my belt.</p>\n\n<p>From time to time, when I want to go crazy with types and still have compile time safety, I run into problems, one of which is type erasure.</p>\n\n<p>Is there much difference between the two? Would it be easier to implement <a href=\"https://stackoverflow.com/questions/11498069/how-to-declare-a-map-with-variable-generics\">this question</a> in Rust? Does Rust have type erasure?</p>\n\n<p>PS. I hope this question is not too vague. Just want to have an overview of the main difference when it comes to types and generics.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441914650, "post_id": 32510287, "comment_id": 52880035, "body": "Please create an <a href=\"/help/mcve\">MCVE</a> that compiles on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a>. For example, this <a href=\"http://is.gd/0GYnam\" rel=\"nofollow noreferrer\">works just fine</a>."}, {"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441914812, "post_id": 32510287, "comment_id": 52880108, "body": "hmm that works because you are only adding to one element.. I want to set a range as mentioned in the heading. <a href=\"http://is.gd/ULkN6j\" rel=\"nofollow noreferrer\">is.gd/ULkN6j</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441916388, "post_id": 32510287, "comment_id": 52880907, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice\" title=\"how to idiomatically copy a slice\">stackoverflow.com/questions/28219231/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/25225346/how-do-you-copy-between-arrays-of-different-sizes-in-rust\" title=\"how do you copy between arrays of different sizes in rust\">stackoverflow.com/questions/25225346/&hellip;</a>"}, {"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441918733, "post_id": 32510287, "comment_id": 52882020, "body": "Unfortunately not. Both of these methods append to the beginning of the array. I found something in the link from the first one, i.e. <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.move_from\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.slice.html#method.move_from</a> however it is unstable with a comment on whether it should be in the API. Is there a better way? Also, why the downvote?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441919478, "post_id": 32510287, "comment_id": 52882362, "body": "<i>Both of these methods append to the beginning of the array</i> \u2014 partially true (look into what &quot;array&quot;, &quot;Vec&quot; and &quot;slice&quot; all mean in Rust). However, you can always create a new slice that starts later. That&#39;s what <code>chunks_mut</code> does."}], "answers": [{"comments": [{"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1441920010, "post_id": 32511671, "comment_id": 52882598, "body": "No I understand copy &amp; swap..... Albeit the example is contrived. I would be storing the chunk I collected and then replacing it with something else as opposed to how the example is written, so it would not be duplicated elements.  Can I not collect a chunk_mut to replace it in entirety? Is there no way to move data internally without an entire copy? Seems a little excessive to double memory consumption for a move op."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1441919531, "last_edit_date": 1495542577, "creation_date": 1441919531, "answer_id": 32511671, "question_id": 32510287, "link": "https://stackoverflow.com/questions/32510287/how-to-set-a-range-in-a-vec-or-slice/32511671#32511671", "title": "How to set a range in a Vec or slice?", "body": "<p>Your code, as you'd like to write it, can never work. You have an array that you are trying to read from and write to at the same time. This will cause you to have duplicated data:</p>\n\n<pre><code>[1, 2, 3, 4]\n// Copy last two to first two\n[3, 4, 3, 4]\n// Copy first two to last two\n[3, 4, 3, 4]\n</code></pre>\n\n<p>Rust will prevent you from having mutable and immutable references to the same thing for this very reason.</p>\n\n<blockquote>\n  <p>cannot index a value of type <code>core::slice::ChunksMut&lt;'_, _&gt;</code></p>\n</blockquote>\n\n<p><code>chunks_mut</code> returns an iterator. The <em>only</em> thing that an iterator is guaranteed to do is return \"the next thing\". You cannot index it, it is not all available in contiguous memory.</p>\n\n<p>To move things around, you are going to need somewhere temporary to store the data. One way is to copy the array:</p>\n\n<pre><code>let scores = [7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet mut new_scores = scores;\n\nfor (old, new) in scores[0..3].iter().zip(new_scores[6..9].iter_mut()) {\n    *new = *old;\n}\n\nfor (old, new) in scores[3..6].iter().zip(new_scores[0..3].iter_mut()) {\n    *new = *old;\n}\n\nfor (old, new) in scores[6..9].iter().zip(new_scores[3..6].iter_mut()) {\n    *new = *old;\n}\n</code></pre>\n\n<p>Then it's a matter of following <a href=\"https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice\">one</a> of these <a href=\"https://stackoverflow.com/questions/25225346/how-do-you-copy-between-arrays-of-different-sizes-in-rust\">existing questions</a> to copy from one to the other.</p>\n"}, {"tags": [], "owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "is_accepted": true, "score": 0, "last_activity_date": 1441932762, "last_edit_date": 1441932762, "creation_date": 1441924937, "answer_id": 32512757, "question_id": 32510287, "link": "https://stackoverflow.com/questions/32510287/how-to-set-a-range-in-a-vec-or-slice/32512757#32512757", "title": "How to set a range in a Vec or slice?", "body": "<p>I ended up doing a loop over and an element by element swap which seems like a cleaner implementation to me:</p>\n\n<pre><code>    fn swap_row&lt;T&gt;(matrix: &amp;mut [T], row_src: usize, row_dest: usize, cols: usize){\n      for c in 0..cols {\n        matrix.swap(cols * row_src + c, cols * row_dest + c);\n      }\n    }\n</code></pre>\n"}], "owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3179, "favorite_count": 0, "accepted_answer_id": 32512757, "answer_count": 2, "score": 0, "last_activity_date": 1441932762, "creation_date": 1441913864, "last_edit_date": 1441914846, "question_id": 32510287, "link": "https://stackoverflow.com/questions/32510287/how-to-set-a-range-in-a-vec-or-slice", "title": "How to set a range in a Vec or slice?", "body": "<p>My end goal is to shuffle the rows of a matrix (for which I am using nalgebra).</p>\n\n<p>To address this I need to set a mutable range (slice) of an array.\nSupposing I have an array as such (let's say it's a 3x3 matrix):</p>\n\n<pre><code>let mut scores = [7, 8, 9, 10, 11, 12, 13, 14, 15];\n</code></pre>\n\n<p>I have extracted a row like this:</p>\n\n<pre><code>let r = &amp;scores[..].chunks(3).collect::&lt;Vec&lt;_&gt;&gt;()[1];\n</code></pre>\n\n<p>Now, for the knuth shuffle I need to swap this with another row. What I need to do is:</p>\n\n<pre><code>scores.chunks_mut(3)[0] = r;\n</code></pre>\n\n<p>however this fails as such:</p>\n\n<pre><code>cannot index a value of type `core::slice::ChunksMut&lt;'_, _&gt;`\n</code></pre>\n\n<p>Example: <a href=\"http://is.gd/ULkN6j\" rel=\"nofollow\">http://is.gd/ULkN6j</a></p>\n"}, {"tags": ["function", "pointers", "reference", "rust", "move"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1441898893, "post_id": 32505429, "comment_id": 52871093, "body": "<i>if it was the case that it&#39;s faster to copy a small structure than access it through a pointer</i> - it is."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441899060, "post_id": 32505429, "comment_id": 52871198, "body": "I&#39;m voting to close this question as off-topic because there should be an obviously &quot;best&quot; answer, and questions asking for &quot;lists of reasons&quot; tend to be open-ended and have all equally valid answers."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441899120, "post_id": 32505429, "comment_id": 52871237, "body": "(otherwise, for a cool application, search for &quot;session types in Rust&quot; on Google, or in general think about encoding state machines with such a system: it&#39;s guaranteed you won&#39;t move from an obsolete state!)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441911504, "post_id": 32505429, "comment_id": 52878402, "body": "I just wanted to note that such a question would probably be welcome on either r/rust or on users.rust-lang.org."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441956283, "post_id": 32505429, "comment_id": 52893652, "body": "@Shepmaster That&#39;s what I thought. However, it would be an easy optimization to make, wouldn&#39;t it? The semantics wouldn&#39;t change if it was all immutable."}], "answers": [{"comments": [{"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 0, "creation_date": 1441955644, "post_id": 32505747, "comment_id": 52893321, "body": "<code>&#47;&#47; here we invalidate digest as it finished its work</code> -- can you elaborate? Also, your second example as well. How is <code>PizzaBuilder</code> destroyed? And what does bake do?"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 0, "creation_date": 1441956685, "post_id": 32505747, "comment_id": 52893885, "body": "In most implementations the hash engine has inner state (i.e. <code>bool</code>) that signals if it has calculated the hash (as it adds data to the message and do some more fancy things). In Rust instead of that additional inner state I just  destroy engine. About second question <code>PizzaBuilder::bake(self) -&gt; Pizza</code> is method that bake (create) your pizza."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 0, "creation_date": 1441957312, "post_id": 32505747, "comment_id": 52894200, "body": "OK so the mechanism which destroys/invalidates these objects is a method that takes <code>self</code> through a move?"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 1, "creation_date": 1441964097, "post_id": 32505747, "comment_id": 52898046, "body": "Yes. See the @Veedrac answer where he states that when you change one object into another then you want to invalidate old one to keep it safe (changing slice into Vec invalidates values inside slice, changing <code>Result</code> into <code>Option</code> does the same, etc.)"}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 2, "last_activity_date": 1441909360, "last_edit_date": 1441909360, "creation_date": 1441898196, "answer_id": 32505747, "question_id": 32505429, "link": "https://stackoverflow.com/questions/32505429/situations-where-a-move-to-a-function-is-actually-wanted-in-rust/32505747#32505747", "title": "Situations where a move to a function is actually wanted in Rust", "body": "<p>There are some situations like that, all of them are related to lifetime of structure, i.e. I'm writing Octavo (crypto library) where we have some hash functions (i.e. SHA1):</p>\n\n<pre><code>let mut digest = SHA1::new();\ndigest.update(\"Ala ma kota!\");\n\nlet result = digest.result(); // here we invalidate digest as it finished its work\n</code></pre>\n\n<p>Other usage for case like above is builder pattern:</p>\n\n<pre><code>PizzaBuilder::new()\n    .add_sauce()\n    .add_cheese()\n    .add_topping(Topping::Tomato)\n    .add_topping(Topping::Bacon)\n    .add_topping(Topping::Jalapenio)\n    .bake() // here we destroy PizzaBuilder as this setup isn't usable  anymore\n            // you should create new PizzaBuilder for another pizza\n            // (you cannot reuse dough once you bake pizza)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 0, "last_activity_date": 1441907977, "creation_date": 1441907977, "answer_id": 32508720, "question_id": 32505429, "link": "https://stackoverflow.com/questions/32505429/situations-where-a-move-to-a-function-is-actually-wanted-in-rust/32508720#32508720", "title": "Situations where a move to a function is actually wanted in Rust", "body": "<p>One of applications of move semantics is type-safe state machines. Suppose that you have an object which can be in two states, uninitialized and initialized, and going from uninitialized to initialized has side effects and can possibly fail. This is naturally modeled with two types with a transition method which accepts an object of the first type by value and returns an object of the second type:</p>\n\n<pre><code>pub struct UninitFoo {\n    ...\n}\n\nimpl UninitFoo {\n    pub fn new() -&gt; UninitFoo { ... }\n    pub fn configure_something(&amp;mut self) { ... }\n    pub fn configure_something else(&amp;mut self) { ... }\n    pub fn initialize(self) -&gt; Result&lt;InitFoo, SomeError&gt; { ... }\n}\n\npub struct InitFoo {\n    ...\n}\n\nimpl InitFoo {\n    pub fn do_some_work(&amp;mut self) { ... }\n}\n</code></pre>\n\n<p>The example above is really contrived but I guess you get the idea. This way your set of types essentially forms a state machine, where methods like <code>initialize()</code> are transitions between states.</p>\n"}, {"comments": [{"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 0, "creation_date": 1441956211, "post_id": 32514050, "comment_id": 52893614, "body": "<i>A good example is <code>Vec::into_boxed_slice</code>.</i> -- could you elaborate?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 1, "creation_date": 1441959199, "post_id": 32514050, "comment_id": 52895172, "body": "@jco Consider if <code>Vec::into_boxed_slice</code> merely borrowed the <code>Vec</code>. You then couldn&#39;t move the boxed slice into an object that might outlive the <code>Vec</code>, or even just move the <code>Vec</code> somewhere to make it live longer. Further, when the <code>Box&lt;[T]&gt;</code> is destroyed, it deallocates its memory... leaving the <code>Vec</code> invalid! You could get around this by making <code>into_boxed_slice</code> leave the <code>Vec</code> empty, but that seems like a strange contrivance to get sane behaviour. Plus, <code>mem::replace(&amp;mut vec, vec![]).into_boxed_slice()</code> does the same thing if you really want it."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1441934393, "creation_date": 1441934393, "answer_id": 32514050, "question_id": 32505429, "link": "https://stackoverflow.com/questions/32505429/situations-where-a-move-to-a-function-is-actually-wanted-in-rust/32514050#32514050", "title": "Situations where a move to a function is actually wanted in Rust", "body": "<p>Consider a conversion function <code>fn(T) -&gt; U</code>. If <code>T</code> was taken by reference, all operations on <code>U</code> would be required to uphold the invariants in <code>T</code>. This means that one would not be allowed to destroy <code>T</code> in any way. Further, the caller would be responsible for keeping the input in place in order for <code>U</code> to remain valid. A good example is <code>Vec::into_boxed_slice</code>.</p>\n\n<p>Another example is a function that moves its input. Evidently this cannot accept a <code>&amp;mut</code> without worrisome semantics. An example would be <code>Vec::insert</code>.</p>\n\n<p>Another option is when <code>&amp;mut Trait: Trait</code>. In this case taking <code>T: Trait</code> allows the caller to decide whether to borrow with dynamic dispatch or pass arguments, which has ramifications for ease of use (in both directions), speed and code bloat.</p>\n\n<p>Another example might just be the preference of convenient syntax for the common case, where cloning is cheap. An example could be <code>Index&lt;Range&lt;usize&gt;&gt;</code> for <code>Vec</code>.</p>\n\n<p>There are also compelling safety reasons if you want to restrict the number of times a function can be called on a given object. The simplest example is <code>drop</code>, which you rightly can only call once. A very fancy example are \"session types\" for channel communication.</p>\n"}], "owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "answer_count": 3, "score": 3, "last_activity_date": 1441934393, "creation_date": 1441897366, "question_id": 32505429, "link": "https://stackoverflow.com/questions/32505429/situations-where-a-move-to-a-function-is-actually-wanted-in-rust", "title": "Situations where a move to a function is actually wanted in Rust", "body": "<p>I'd like to determine in which general (or specific) situations one would not want to use a reference to pass an object into a function in Rust.</p>\n\n<p>I'm mostly interested in <em>functionality</em> (e.g. a function is made so that it cleans up a resource moved into it), but <em>performance</em> reasons would also be interesting (e.g. if it was the case that it's faster to copy a small structure than access it through a pointer).</p>\n\n<p>This regards non-<code>Copy</code> types, of course.</p>\n\n<p>Note: it's clear why move semantics are used in <em>assignments</em>, in order to prevent aliasing e.g., but in functions that would not be a problem.</p>\n"}, {"tags": ["rust", "code-coverage"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441891766, "post_id": 32501718, "comment_id": 52865738, "body": "<a href=\"http://stackoverflow.com/help/how-to-ask\"><i>Include just enough code to allow others to reproduce the problem &lt;...&gt; include the code in your question itself</i></a>. Please produce an <a href=\"/help/mcve\">MCVE</a>, preferably one that doesn&#39;t require an answerer to create a project that runs in Travis CI."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441896149, "post_id": 32501718, "comment_id": 52869219, "body": "@Shepmaster I thought it was simpler to use my project, since travis-ci is configured and the results are visible in the web page. However it is not MCVE. In case of a minimal example, I&#39;d have to link to a tutorial on how to setup <code>kcov</code> locally, I suppose. What do you think?"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1441950341, "post_id": 32501718, "comment_id": 52890817, "body": "Please add the Cargo.toml at least. Without knowing if you have debug-symbols on, we cannot outrule this as possible problem source."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1441956647, "post_id": 32501718, "comment_id": 52893862, "body": "@llogiq I&#39;ve reproduced the problem locally. I&#39;ll post a new question as soon as I get a minimal reproducible example."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441969498, "post_id": 32501718, "comment_id": 52901422, "body": "Why not just <a href=\"https://stackoverflow.com/posts/32501718/edit\">edit</a> this question?"}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441971364, "post_id": 32501718, "comment_id": 52902633, "body": "@Shepmaster I thought a complete rewrite implies a new question. Doesn&#39;t it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1441972948, "post_id": 32501718, "comment_id": 52903650, "body": "@brt only if it invalidates existing answers. Otherwise it&#39;s just a step along the journey to a really good question. Besides, the main question is the same, you just have a much better way of asking it now. ^_^"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441978723, "post_id": 32501718, "comment_id": 52907471, "body": "@brt: well, the new question is much better; however I advise you to avoid deleting your own questions too often, as it could trigger a question-ban. One is fine of course, just avoid doing it for some time now :)"}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1441983087, "post_id": 32501718, "comment_id": 52910514, "body": "@MatthieuM. Ok, I&#39;ll simply mark this question as duplicate."}], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "delete_vote_count": 1, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 92, "favorite_count": 0, "closed_date": 1441983095, "answer_count": 0, "score": 0, "last_activity_date": 1441969205, "creation_date": 1441887612, "last_edit_date": 1495535201, "question_id": 32501718, "link": "https://stackoverflow.com/questions/32501718/why-does-coveralls-kcov-calculate-incorrect-code-coverage-statistics-for-rust", "closed_reason": "Duplicate", "title": "Why does coveralls / kcov calculate incorrect code coverage statistics for Rust programs?", "body": "<p><strong>EDIT: I've replaced this question with <a href=\"https://stackoverflow.com/q/32521800/1667955\">this one</a>. I will delete this question soon. Thanks for the feedback.</strong></p>\n\n<p>I've setup code coverage in my Rust project, by using <a href=\"https://travis-ci.org/mbrt/ruplicity\" rel=\"nofollow noreferrer\">travis ci</a> and <a href=\"https://coveralls.io/github/mbrt/ruplicity?branch=master\" rel=\"nofollow noreferrer\">coveralls</a>. To do this I've used <a href=\"https://github.com/huonw/travis-cargo\" rel=\"nofollow noreferrer\">travis-cargo</a> following its documentation. This is my <code>.travis.yml</code> file:</p>\n\n<pre><code>language: rust\nsudo: required\n\nbefore_script:\n  - pip install 'travis-cargo&lt;0.2' --user &amp;&amp; export PATH=$HOME/.local/bin:$PATH\n\nrust:\n  - stable\n  - beta\n  - nightly\n\nscript:\n  - cargo test\n\nafter_success:\n  - travis-cargo coveralls\n</code></pre>\n\n<p>However I'm facing a strange high coverage. Some files in the project gets a 100% coverage, even if they are actually not covered at all! Consider for example <a href=\"https://coveralls.io/builds/3532092/source?filename=src%2Fcollections%2Fmod.rs\" rel=\"nofollow noreferrer\">this file</a>; the only test it contains is a dummy one:</p>\n\n<pre><code>#[cfg(test)]\nmod test {\n    #[test]\n    fn it_works() {\n    }\n}\n</code></pre>\n\n<p>And the reported coverage is 100%. As you can see by coverage highlights in the coveralls page, all the source code lines are ignored, except the dummy test function.</p>\n\n<p>What is the problem here? Maybe test binaries strip down unused functions and <code>kcov</code> cannot see them?</p>\n"}, {"tags": ["pattern-matching", "rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1441887818, "post_id": 32501296, "comment_id": 52862866, "body": "It&#39;s more idiomatic to use <code>to_owned()</code> or <code>into()</code> (in case the target type is known) rather than <code>to_string()</code>. The latter works through <code>Display</code> trait which invokes formatting code which introduces some overhead. Maybe if Rust gets impl specialization, this could be fixed, but we&#39;re not there yet."}, {"owner": {"reputation": 59234, "user_id": 496161, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c425873f547d93f4079ca252b42a886d?s=128&d=identicon&r=PG", "display_name": "TartanLlama", "link": "https://stackoverflow.com/users/496161/tartanllama"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1441888201, "post_id": 32501296, "comment_id": 52863138, "body": "@VladimirMatveev thanks, still pretty new to Rust, so I guess I shouldn&#39;t be making such assertions based on minimal experience."}, {"owner": {"reputation": 59234, "user_id": 496161, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c425873f547d93f4079ca252b42a886d?s=128&d=identicon&r=PG", "display_name": "TartanLlama", "link": "https://stackoverflow.com/users/496161/tartanllama"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1441888531, "post_id": 32501296, "comment_id": 52863365, "body": "Is the downvote due to the above or are there other issues with this solution?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1441888730, "post_id": 32501296, "comment_id": 52863501, "body": "@TartanLlama My issue with your answer is that it will panic if <code>input</code> is <code>None</code> which doesn&#39;t seem terribly useful to me. (Not downvoting you, though)"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1441892163, "post_id": 32501296, "comment_id": 52866044, "body": "@TartanLlama I wouldn&#39;t go so far as Vladamir to say that to_owned is more idiomatic, there are disagreements among which of the three or four ways are best."}], "tags": [], "owner": {"reputation": 59234, "user_id": 496161, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c425873f547d93f4079ca252b42a886d?s=128&d=identicon&r=PG", "display_name": "TartanLlama", "link": "https://stackoverflow.com/users/496161/tartanllama"}, "is_accepted": false, "score": 15, "last_activity_date": 1441888228, "last_edit_date": 1441888228, "creation_date": 1441886367, "answer_id": 32501296, "question_id": 32500974, "link": "https://stackoverflow.com/questions/32500974/expected-string-found-str-when-matching-an-optional-string/32501296#32501296", "title": "Expected String, found &amp;str when matching an optional string", "body": "<p>The way you usually convert a <code>&amp;str</code> to a <code>String</code> is <code>to_owned</code>, e.g.</p>\n\n<pre><code>\"me\".to_owned()\n</code></pre>\n\n<p>However, you can't do pattern matching on a <code>String</code>. You could <code>expect</code> a success, get a <code>&amp;str</code> from the <code>String</code> then pattern match on that:</p>\n\n<pre><code>fn player_starts() -&gt; bool {                                                    \n    println!(\"Who will start (me/you)\");                                       \n    loop {                                                                      \n        let input = readline::readline(\"&gt;\");\n        match input.expect(\"Failed to read line\").as_ref() {\n            \"me\" =&gt; return true,                                          \n            \"you\" =&gt; return false,\n            _ =&gt; println!(\"Enter me or you\"),\n        }                                                                          \n    }                                                                           \n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 17, "last_activity_date": 1441891626, "last_edit_date": 1441891626, "creation_date": 1441887299, "answer_id": 32501602, "question_id": 32500974, "link": "https://stackoverflow.com/questions/32500974/expected-string-found-str-when-matching-an-optional-string/32501602#32501602", "title": "Expected String, found &amp;str when matching an optional string", "body": "<p>This should work:</p>\n\n<pre><code>fn player_starts() -&gt; bool {                      \n    println!(\"Who will start me/you)\");                    \n    loop {\n        let input = readline::readline(\"&gt;\");\n        match input.as_ref().map(String::as_ref) {\n            Some(\"me\") =&gt; return true,\n            Some(\"you\") =&gt; return false,\n            _ =&gt; ()\n        }\n    }\n}\n</code></pre>\n\n<p>Note the expression in the match statement, where we convert from an <code>Option&lt;String&gt;</code> to an <code>Option&lt;&amp;str&gt;</code>.</p>\n"}], "owner": {"reputation": 1829, "user_id": 271789, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/6932023eeb2a104850f74c77854e22fb?s=128&d=identicon&r=PG", "display_name": "zefciu", "link": "https://stackoverflow.com/users/271789/zefciu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15907, "favorite_count": 3, "accepted_answer_id": 32501602, "answer_count": 2, "score": 18, "last_activity_date": 1441891626, "creation_date": 1441885436, "last_edit_date": 1441890237, "question_id": 32500974, "link": "https://stackoverflow.com/questions/32500974/expected-string-found-str-when-matching-an-optional-string", "title": "Expected String, found &amp;str when matching an optional string", "body": "<p>I am trying to write a simple function in Rust that will ask user a question expecting answer of \"you\" or \"me\". It should return a boolean value or ask again if the user answers wrong. I came up with:</p>\n\n<pre><code>fn player_starts() -&gt; bool {                                                    \n    println!(\"Who will start (me/you)\");                                       \n    loop {                                                                      \n        let input = readline::readline(\"&gt;\");                                    \n        match input {                                                           \n            Some(\"me\") =&gt; return true,                                          \n            Some(\"you\") =&gt; return false,                                        \n            _ =&gt; None,                                                          \n        }                                                                          \n    }                                                                           \n}       \n</code></pre>\n\n<p>What I get is:</p>\n\n<pre><code>error: mismatched types:\n expected `collections::string::String`,\n    found `&amp;'static str`\n(expected struct `collections::string::String`,\nfound &amp;-ptr) [E0308]\n</code></pre>\n\n<p>Is there some way to coerce the literal to work here or is there some better way to achieve my goal?</p>\n"}]