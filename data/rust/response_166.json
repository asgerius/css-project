[{"tags": ["rust", "visibility", "elf"], "owner": {"reputation": 280, "user_id": 2250903, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/35b6e1021e53f54702f69c88d676faca?s=128&d=identicon&r=PG", "display_name": "Kevin Boos", "link": "https://stackoverflow.com/users/2250903/kevin-boos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 243, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1521061721, "creation_date": 1521059643, "last_edit_date": 1521061721, "question_id": 49287168, "link": "https://stackoverflow.com/questions/49287168/public-symbols-not-exported-as-visible-symbols-in-rust-crate-built-as-a-static-l", "title": "Public symbols not exported as visible symbols in Rust crate built as a static library ELF file", "body": "<p>I'm building a Rust crate as a static library, and wish to export all publicly-visible symbols at the Rust level such that they are also visible in the ELF file, namely with GLOBAL binding and DEFAULT visibility. </p>\n\n<p>However, some symbols show up as GLOBAL binding with <strong>HIDDEN</strong> visibility, which means that when I load this static library, those symbols aren't visible. In C with GCC extensions, you can use <code>__attribute__((visibility(\"default\")))</code> to accomplish this on a per-symbol basis, which is tedious but I guess would be okay for my use case. How can I do this in Rust? </p>\n\n<p>Here's a code example to further illustrate my issue. </p>\n\n<p>In <code>lib.rs</code> of my crate:</p>\n\n<pre><code>extern crate compiler_builtins;\n// readelf shows these symbols as GLOBAL, HIDDEN, which is not what I want.\npub use compiler_builtins::float::conv::__floatundidf;\npub use compiler_builtins::int::mul::__muloti4;\npub use compiler_builtins::int::udiv::{__udivti3, __umodti3};\n\npub fn my_func() -&gt; {...}   // readelf shows this as GLOBAL, DEFAULT, which is good!\n</code></pre>\n\n<p>I'm building a static library, so all of the symbols do appear in the ELF file (I'm not using <code>--gc-sections</code> because I want them to appear), it's just that the imported ones don't have the proper DEFAULT visibility. Hopefully there's a way I can force them to have DEFAULT visibility at the source level (maybe an annotation or attribute), but I haven't been able to find one, so I'd accept a linker argument or script addition as well. </p>\n"}, {"tags": ["module", "rust", "arguments"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1521059436, "post_id": 49286608, "comment_id": 85577300, "body": "Modules are not values, but functions are. You should take the function as an argument."}], "answers": [{"comments": [{"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "edited": false, "score": 0, "creation_date": 1521112606, "post_id": 49287579, "comment_id": 85597783, "body": "I decided to go with the second one as I felt it better fit the API."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1521061354, "creation_date": 1521061354, "answer_id": 49287579, "question_id": 49286608, "link": "https://stackoverflow.com/questions/49286608/what-is-the-proper-way-to-pass-a-module-as-an-argument/49287579#49287579", "title": "What is the proper way to pass a module as an argument?", "body": "<p>As stated in the comments, a module is not a concrete concept like that; what you are attempting to do is not possible.</p>\n\n<p>Instead, you can pass something that can be a value:</p>\n\n<pre><code>mod basic {\n    pub fn generate() -&gt; u8 {\n        0\n    }\n}\n\nmod advanced {\n    pub fn generate() -&gt; u8 {\n        42\n    }\n}\n\nfn play_the_game(generator: fn() -&gt; u8) {\n    let dungeon = generator();\n    println!(\"{}\", dungeon);\n}\n\nfn main() {\n    play_the_game(basic::generate);\n    play_the_game(advanced::generate);\n}\n</code></pre>\n\n<p>You could also introduce a trait and pass the implementing type as a generic:</p>\n\n<pre><code>trait DungeonGenerator {\n    fn generate() -&gt; u8;\n}\n\nmod basic {\n    use DungeonGenerator;\n\n    pub struct Basic;\n\n    impl DungeonGenerator for Basic {\n        fn generate() -&gt; u8 {\n            0\n        }\n    }\n}\n\nmod advanced {\n    use DungeonGenerator;\n\n    pub struct Advanced;\n\n    impl DungeonGenerator for Advanced {\n        fn generate() -&gt; u8 {\n            42\n        }\n    }\n}\n\nfn play_the_game&lt;G&gt;()\nwhere\n    G: DungeonGenerator,\n{\n    let dungeon = G::generate();\n    println!(\"{}\", dungeon);\n}\n\nfn main() {\n    play_the_game::&lt;basic::Basic&gt;();\n    play_the_game::&lt;advanced::Advanced&gt;();\n}\n</code></pre>\n"}], "owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 680, "favorite_count": 0, "accepted_answer_id": 49287579, "answer_count": 1, "score": 1, "last_activity_date": 1521061354, "creation_date": 1521057258, "last_edit_date": 1521061065, "question_id": 49286608, "link": "https://stackoverflow.com/questions/49286608/what-is-the-proper-way-to-pass-a-module-as-an-argument", "title": "What is the proper way to pass a module as an argument?", "body": "<p>I have a module file (<code>src/map/map.rs</code>):</p>\n\n<pre><code>type Layer = Vec&lt;Vec&lt;Tile&gt;&gt;;\n\npub struct Map {\n    height: i32,\n    width: i32,\n    data: Layer,\n    rooms: Vec&lt;Rect&gt;,\n}\n\nimpl Map {\n    pub fn new(width: i32, height: i32) -&gt; Self {\n        Map {\n            height: height,\n            width: width,\n            data: vec![vec![Tile::wall(); height as usize]; width as usize],\n            rooms: vec![Rect],\n        }\n    }\n    pub fn generate_with(&amp;self, creator: module) {\n        creator::generate(&amp;self)\n    }\n}\n</code></pre>\n\n<p>a nested module <code>map::gen::dungeon::basic</code> (<code>src/map/gen/dungeon/basic.rs</code>)\nwith one function in the file:</p>\n\n<pre><code>pub fn generate(map: &amp;mut Map) -&gt; (Map, (i32, i32)) {}\n</code></pre>\n\n<p>and the <code>map</code> module file (<code>src/map/mod.rs</code>): </p>\n\n<pre><code>mod rect;\nmod tile;\nmod map;\npub mod room;\npub mod gen;\n\npub use self::map::Map;\npub use self::rect::Rect;\npub use self::tile::Tile;\n</code></pre>\n\n<p>imported into main.rs like this:</p>\n\n<pre><code>mod map;\n\nuse map::*;\nuse map::gen;\n</code></pre>\n\n<p>I want to be able to use it like this:</p>\n\n<pre><code>let (map, (player_x, player_y)) = Map::new(MAP_WIDTH, MAP_HEIGHT).generate_with(gen::dungeon::basic);\n</code></pre>\n\n<p>the error I get though is: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[cargo] expected value, found module 'gen::dungeon::basic': not a value [E]\n</code></pre>\n\n<p>A complete <a href=\"https://github.com/Thermatix/cyber_rogue\" rel=\"nofollow noreferrer\">repo is available</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1703, "user_id": 801247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c78b0a3f8999559564de3cd9769a9bec?s=128&d=identicon&r=PG", "display_name": "user801247", "link": "https://stackoverflow.com/users/801247/user801247"}, "is_accepted": true, "score": 4, "last_activity_date": 1521045392, "creation_date": 1521045392, "answer_id": 49283214, "question_id": 49283092, "link": "https://stackoverflow.com/questions/49283092/how-to-check-if-a-symlink-not-the-file-it-points-to-exists-in-rust/49283214#49283214", "title": "How to check if a symlink, not the file it points to, exists in Rust?", "body": "<p><code>std::fs::read_link</code> seems what you want.</p>\n\n<blockquote>\n  <p>This function will return an error in the following situations, but is not limited to just these cases:</p>\n  \n  <ul>\n  <li>path is not a symbolic link.</li>\n  <li>path does not exist.</li>\n  </ul>\n</blockquote>\n\n<p>The documentation for this function is <a href=\"https://doc.rust-lang.org/std/fs/fn.read_link.html\" rel=\"nofollow noreferrer\">here</a></p>\n"}, {"tags": [], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "is_accepted": false, "score": 4, "last_activity_date": 1521130190, "last_edit_date": 1521130190, "creation_date": 1521046991, "answer_id": 49283687, "question_id": 49283092, "link": "https://stackoverflow.com/questions/49283092/how-to-check-if-a-symlink-not-the-file-it-points-to-exists-in-rust/49283687#49283687", "title": "How to check if a symlink, not the file it points to, exists in Rust?", "body": "<p>Another option is to use <code>std::fs::symlink_metadata</code> (<a href=\"https://doc.rust-lang.org/1.21.0/std/fs/fn.symlink_metadata.html\" rel=\"nofollow noreferrer\">docs</a>).</p>\n\n<blockquote>\n  <p>Query the metadata about a file without following symlinks.\n  This function will return an error ... [when] <code>path</code> does not exist.</p>\n</blockquote>\n\n<p>The upside of this is that the returned <code>Metadata</code> struct contains a <code>FileType</code> struct (<a href=\"https://doc.rust-lang.org/1.21.0/std/fs/struct.Metadata.html#method.file_type\" rel=\"nofollow noreferrer\">docs</a>), which you can query about whether the path is a plain file, a directory or a symbolic link. This could be useful if the possible outcomes were more than \"link exists\" and \"link does not exist\".</p>\n"}], "owner": {"reputation": 387, "user_id": 6186709, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/G5lWJ.png?s=128&g=1", "display_name": "I60R", "link": "https://stackoverflow.com/users/6186709/i60r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1156, "favorite_count": 0, "accepted_answer_id": 49283214, "answer_count": 2, "score": 4, "last_activity_date": 1521130190, "creation_date": 1521045068, "last_edit_date": 1521048050, "question_id": 49283092, "link": "https://stackoverflow.com/questions/49283092/how-to-check-if-a-symlink-not-the-file-it-points-to-exists-in-rust", "title": "How to check if a symlink, not the file it points to, exists in Rust?", "body": "<p><code>Path::exists</code> is not suitable, since its documentation states:</p>\n\n<blockquote>\n  <p>This function will traverse symbolic links to query information about the destination file. In case of broken symbolic links this will return false.</p>\n</blockquote>\n"}, {"tags": ["rust", "llvm"], "answers": [{"comments": [{"owner": {"reputation": 3502, "user_id": 118875, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/2yCMQ.png?s=128&g=1", "display_name": "pndc", "link": "https://stackoverflow.com/users/118875/pndc"}, "edited": false, "score": 0, "creation_date": 1610036315, "post_id": 49278721, "comment_id": 116011386, "body": "<code>--llvm-root</code> no longer seems to work for this purpose: <code>.&#47;x.py</code> will just clobber whatever was in that directory with a download of Rust&#39;s own LLVM fork."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1521033222, "creation_date": 1521033222, "answer_id": 49278721, "question_id": 49278444, "link": "https://stackoverflow.com/questions/49278444/how-to-build-the-rust-compiler-to-use-a-custom-fork-of-llvm/49278721#49278721", "title": "How to build the Rust compiler to use a custom fork of LLVM?", "body": "<p>As of <a href=\"https://github.com/rust-lang/rust/tree/1ad094d81c97b3d2dd8e980ccd1475a80647540d\" rel=\"nofollow noreferrer\">Rust 1ad094</a>, when configuring Rust, you can pass various LLVM-related options:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>./configure --help | grep -i llvm\n    --enable-llvm-static-stdcpp    statically link to libstdc++ for LLVM\n    --enable-llvm-link-shared      prefer shared linking to LLVM (llvm-config --link-shared)\n    --enable-llvm-version-check    check if the LLVM version is supported, build anyway\n    --enable-ninja                 build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\n    --enable-emscripten            compile the emscripten backend as well as LLVM\n    --enable-optimize-llvm         build optimized LLVM\n    --enable-llvm-assertions       build LLVM with assertions\n    --enable-llvm-release-debuginfo build LLVM with debugger metadata\n    --llvm-root=VAL                set LLVM root\n    --experimental-targets=VAL     experimental LLVM targets to build\n    --build=VAL                    GNUs ./configure syntax LLVM build triple\n    --host=VAL                     GNUs ./configure syntax LLVM host triples\n    --target=VAL                   GNUs ./configure syntax LLVM target triples\n</code></pre>\n\n<p>If the version of LLVM in the fork you want to use is compatible with the version of LLVM that Rust needs, then you should just be able to use <code>--llvm-root=</code></p>\n"}], "owner": {"reputation": 23, "user_id": 9491556, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "CNAmira", "link": "https://stackoverflow.com/users/9491556/cnamira"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 0, "accepted_answer_id": 49278721, "answer_count": 1, "score": 1, "last_activity_date": 1521033249, "creation_date": 1521032407, "last_edit_date": 1521033249, "question_id": 49278444, "link": "https://stackoverflow.com/questions/49278444/how-to-build-the-rust-compiler-to-use-a-custom-fork-of-llvm", "title": "How to build the Rust compiler to use a custom fork of LLVM?", "body": "<p>AMD released an optimized version of the LLVM toolchain named AOCC. Rust uses LLVM as the native code generator. Is it possible to use this LLVM instead of the fork from the Rust team?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 1, "last_activity_date": 1521032983, "last_edit_date": 1521032983, "creation_date": 1521031408, "answer_id": 49278112, "question_id": 49277733, "link": "https://stackoverflow.com/questions/49277733/what-is-a-nominal-type-in-the-context-of-an-inherent-implementation/49278112#49278112", "title": "What is a &quot;nominal type&quot; in the context of an inherent implementation?", "body": "<p>An inherent implementation is the equivalent of creating a class in a OOP language. The difference in Rust is that data is separated from implementation:</p>\n\n<pre><code>/* Data */\nstruct Foo {\n    // all data there\n    //...\n}\n\n/* Inherent implementation */\nimpl Foo {\n    fn bar(&amp;self) {\n        //...\n    }\n}\n</code></pre>\n\n<ul>\n<li>The <em>nominal type</em> is the data that you implement.</li>\n<li>The <em>associable items</em> are the methods that you add to the data. Those functions are special because you can call them with the syntax <code>foo.bar()</code>.</li>\n</ul>\n\n<hr>\n\n<p>The <em>inherent implementation</em> is called like that as opposed to <em>trait implementation</em>:</p>\n\n<pre><code>/* Trait implementation */\nimpl Debug for Foo {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result&lt;(), Error&gt; {\n        //...\n    }\n}\n</code></pre>\n\n<ul>\n<li>In the case of inherent implementation, the method is bound to the data only. It has a sense only with <em>this</em> data.</li>\n<li>In the case of a trait implementation, the method can be implemented for any data that implements the trait.</li>\n</ul>\n\n<hr>\n\n<p>The equivalent in C++ could be:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>struct Debug {\n    virtual std::string fmt() = 0;\n}\n\nclass Foo: public Debug {\n    // all data there\n    //...\n\npublic:\n    /* Equivalent of inherent implementation */\n    void bar() {\n        //...\n    }\n\n    /* Equivalent of trait implementation:\n       implementation of base class */\n    std::string fmt() {\n        //...\n    }\n}\n</code></pre>\n\n<p>In C++, you cannot separate \"inherent implementation\" from \"trait implementation\" (I put those between quotes, because those terms do not make sense in C++, of course).</p>\n\n<hr>\n\n<p>Note that unlike in C++, in Rust the methods are not really different that a free function. You can call the <code>bar</code> method like this:</p>\n\n<pre><code>Foo::bar(foo);\n</code></pre>\n\n<p>and if you define this function:</p>\n\n<pre><code>fn qux(f: &amp;Foo) {\n    //...\n}\n</code></pre>\n\n<p>it will have the same signature as <code>Foo::bar</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1521031530, "creation_date": 1521031530, "answer_id": 49278145, "question_id": 49277733, "link": "https://stackoverflow.com/questions/49277733/what-is-a-nominal-type-in-the-context-of-an-inherent-implementation/49278145#49278145", "title": "What is a &quot;nominal type&quot; in the context of an inherent implementation?", "body": "<p>Well, that's the language reference.  Learning Rust with that is certainly possible, but a little bit like trying to learn English by reading a dictionary.  Have you tried the <a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\">Rust Book</a>?</p>\n\n<p>Anyway, as the first paragraph states, the \"nominal type\" is, well:</p>\n\n<pre><code>impl /* --&gt; */ Point /* &lt;-- this is the \"nominal type\" */ {\n    fn log(&amp;self) { ... }\n}\n</code></pre>\n\n<p>It's the type which is the subject of the inherent <code>impl</code>.  An \"associable item\" is an item (like a <code>fn</code>, <code>const</code>, or <code>type</code>) which is associated with the nominal type.</p>\n\n<p>If you had the paragraph:</p>\n\n<blockquote>\n  <p>Let's talk about Raymond.  His hair is brown.  He knows how to dance.</p>\n</blockquote>\n\n<p>That would be roughly equivalent to:</p>\n\n<pre><code>struct Raymond; // introduce the Raymond type.\n\nimpl Raymond { // associate some items with Raymond.\n    const HAIR: Colour = Colour::Brown;\n\n    fn dance(&amp;mut self) { ... }\n}\n\nfn main() {\n    let mut ray = Raymond;\n    println!(\"Raymond's hair is {}\", Raymond::HAIR);\n    ray.dance();\n}\n</code></pre>\n\n<p>(As an aside: the pronouns in the paragraph (like \"he\" or \"him\") would become <code>self</code> or <code>Self</code> in the <code>impl</code>.)</p>\n\n<p>The <code>impl</code> is associating those items with the nominal type.  Notice how <code>HAIR</code> is \"inside\" of the <code>Raymond</code> type.  You could <em>also</em> write the above code as:</p>\n\n<pre><code>struct Raymond;\n\nconst RAYMOND_HAIR: Colour = Colour::Brown;\n\nfn raymond_dance(ray: &amp;mut Raymond) { ... }\n\nfn main() {\n    let mut ray = Raymond;\n    println!(\"Raymond's hair is {}\", RAYMOND_HAIR);\n    raymond_dance(&amp;mut ray);\n}\n</code></pre>\n\n<p>Here, there're no inherent <code>impl</code>s, so the <code>RAYMOND_HAIR</code> and <code>raymond_dance</code> items aren't associated with the <code>Raymond</code> type directly.  There's no fundamental difference between the two, other than convenience.</p>\n\n<p>As for tying this back to C++... that's tricky since Rust distinguishes between inherent and non-inherent <code>impl</code>s and C++... <em>doesn't</em>.  The closest analogue would be to say that they're like the parts of a <code>struct</code> body that aren't fields and aren't overriding methods in a base class.</p>\n"}], "owner": {"reputation": 375, "user_id": 952603, "user_type": "registered", "accept_rate": 41, "profile_image": "https://i.stack.imgur.com/j5PSa.jpg?s=128&g=1", "display_name": "Roo", "link": "https://stackoverflow.com/users/952603/roo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 152, "favorite_count": 1, "accepted_answer_id": 49278145, "answer_count": 2, "score": 3, "last_activity_date": 1521032983, "creation_date": 1521030300, "last_edit_date": 1521032277, "question_id": 49277733, "link": "https://stackoverflow.com/questions/49277733/what-is-a-nominal-type-in-the-context-of-an-inherent-implementation", "title": "What is a &quot;nominal type&quot; in the context of an inherent implementation?", "body": "<p>I am currently going through <a href=\"https://doc.rust-lang.org/beta/reference/items/implementations.html#inherent-implementations\" rel=\"nofollow noreferrer\">the Rust Documentation</a> to understand inherent implementations. What is the \"nominal type\" and what are they referring to when then they say \"associable items to the implementing type\"?</p>\n\n<p>Is there a related analog to this in C or C++?</p>\n"}, {"tags": ["iterator", "rust", "skip"], "comments": [{"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 1, "creation_date": 1521024202, "post_id": 49275455, "comment_id": 85553561, "body": "I don&#39;t think there exists a specific method to do that, but you could <code>enumerate().filter(|(i, v)| (i + 1) != n).map(|(i, v)| v)</code> to skip the <code>n</code>th element."}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 13, "last_activity_date": 1521027926, "last_edit_date": 1521027926, "creation_date": 1521024504, "answer_id": 49275722, "question_id": 49275455, "link": "https://stackoverflow.com/questions/49275455/how-can-i-skip-the-nth-element-in-a-rust-iterator/49275722#49275722", "title": "How can I skip the Nth element in a Rust iterator?", "body": "<p>That seems to be a very specific operation. There is no adaptor for that in the standard library or the <code>itertools</code> crate.</p>\n\n<p>It's easy to implement nonetheless. One could enumerate each element and filter on the index:</p>\n\n<pre><code>iter.enumerate().filter(|&amp;(i, _)| i != n).map(|(_, v)| v)\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2cb98ca031dd8e13b7cf84965d558828&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 0, "creation_date": 1521044512, "post_id": 49279058, "comment_id": 85568390, "body": "What does this buy over <code>.filter(..)</code>? It seems longer for no gain."}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "reply_to_user": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 1, "creation_date": 1521045613, "post_id": 49279058, "comment_id": 85569142, "body": "The solution that just uses <code>filter</code> returns tuples including the index, this returns the underlying elements without the index. It depends on what outcome you want"}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 10, "last_activity_date": 1521034193, "creation_date": 1521034193, "answer_id": 49279058, "question_id": 49275455, "link": "https://stackoverflow.com/questions/49275455/how-can-i-skip-the-nth-element-in-a-rust-iterator/49279058#49279058", "title": "How can I skip the Nth element in a Rust iterator?", "body": "<p>I am partial to the <code>filter_map</code> version</p>\n\n<pre><code>fn main() {\n    let v = vec![1, 2, 3];\n    let n = 1;\n    let x: Vec&lt;_&gt; = v.into_iter()\n        .enumerate()\n        .filter_map(|(i, e)| if i != n { Some(e) } else { None })\n        .collect();\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=469447ea5572ccfa7d7c9677c8cebefd&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 2, "last_activity_date": 1548148919, "last_edit_date": 1548148919, "creation_date": 1521034916, "answer_id": 49279295, "question_id": 49275455, "link": "https://stackoverflow.com/questions/49275455/how-can-i-skip-the-nth-element-in-a-rust-iterator/49279295#49279295", "title": "How can I skip the Nth element in a Rust iterator?", "body": "<p>I already wanted to skip some range. The best in my opinion is to create an iterator:</p>\n\n<pre><code>mod skip_range {\n    use std::ops::Range;\n    use std::iter::Skip;\n\n    /// Either the user provided iterator, or a `Skip` one.\n    enum Either&lt;I: Iterator&gt; {\n        Iter(I),\n        Skip(Skip&lt;I&gt;),\n    }\n\n    pub struct SkipRange&lt;I: Iterator&gt; {\n        it: Option&lt;Either&lt;I&gt;&gt;,\n        count: usize,\n        range: Range&lt;usize&gt;,\n    }\n\n    impl&lt;I: Iterator&gt; SkipRange&lt;I&gt; {\n        pub fn new(it: I, range: Range&lt;usize&gt;) -&gt; Self {\n            SkipRange { it: Some(Either::Iter(it)), count: 0, range }\n        }\n    }\n\n    impl&lt;I: Iterator&gt; Iterator for SkipRange&lt;I&gt; {\n        type Item = I::Item;\n\n        fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n            // If we are in the part we must skip, change the iterator to `Skip`\n            if self.count == self.range.start {\n                self.count = self.range.end;\n                if let Some(Either::Iter(it)) = self.it.take() {\n                    self.it = Some(Either::Skip(it.skip(self.range.end - self.range.start)));\n                }\n            } else {\n                self.count += 1;\n            }\n            match &amp;mut self.it {\n                Some(Either::Iter(it)) =&gt; it.next(),\n                Some(Either::Skip(it)) =&gt; it.next(),\n                _ =&gt; unreachable!(),\n            }\n        }\n    }\n}\n\nuse skip_range::SkipRange;\n\nfn main() {\n    let v = vec![0, 1, 2, 3, 4, 5];\n    let it = SkipRange::new(v.into_iter(), 2..4);\n\n    let res: Vec&lt;_&gt; = it.collect();\n    assert_eq!(res, vec![0, 1, 4, 5]);\n}\n</code></pre>\n\n<p>The principle is to use 2 different iterators: the first one is given by the user, the second one is a <code>Skip</code> iterator, created from the first one.</p>\n"}, {"tags": [], "owner": {"reputation": 1778, "user_id": 117220, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6c5b9841f23e69b08f121b06df6ed1c8?s=128&d=identicon&r=PG", "display_name": "Petr Gladkikh", "link": "https://stackoverflow.com/users/117220/petr-gladkikh"}, "is_accepted": false, "score": 0, "last_activity_date": 1565631210, "creation_date": 1565631210, "answer_id": 57465708, "question_id": 49275455, "link": "https://stackoverflow.com/questions/49275455/how-can-i-skip-the-nth-element-in-a-rust-iterator/57465708#57465708", "title": "How can I skip the Nth element in a Rust iterator?", "body": "<p>If you have access to original collection, it could be</p>\n\n<pre><code>let items = [\"a\", \"b\", \"c\", \"d\"];\nlet skipped_2nd = items.iter().take(1).chain(items.iter().skip(2));\n</code></pre>\n"}], "owner": {"reputation": 379, "user_id": 5903025, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AH2NX.jpg?s=128&g=1", "display_name": "eisterman", "link": "https://stackoverflow.com/users/5903025/eisterman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5854, "favorite_count": 0, "accepted_answer_id": 49275722, "answer_count": 4, "score": 10, "last_activity_date": 1565631210, "creation_date": 1521023767, "last_edit_date": 1521035241, "question_id": 49275455, "link": "https://stackoverflow.com/questions/49275455/how-can-i-skip-the-nth-element-in-a-rust-iterator", "title": "How can I skip the Nth element in a Rust iterator?", "body": "<p>Iterators have a <code>skip</code> method that skips the first <code>n</code> elements:</p>\n\n<pre><code>let list = vec![1, 2, 3];\nlet iterator = list.iter();\nlet skip_iter = iterator.skip(2); //skip the first 2 elements\n</code></pre>\n\n<p>I could not find a method to skip only the <code>n</code>-th element in the iterator. Do I need to implement something on my own or is there a method somewhere I haven't found?</p>\n"}, {"tags": ["rust", "optional", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 5, "creation_date": 1521024568, "post_id": 49274075, "comment_id": 85553819, "body": "<code>Option&lt;T&gt;</code> is <code>Copy</code> if and only if <code>T</code> is <code>Copy</code>."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 4, "last_activity_date": 1521032193, "last_edit_date": 1521032193, "creation_date": 1521020039, "answer_id": 49274075, "question_id": 49273965, "link": "https://stackoverflow.com/questions/49273965/why-is-an-optioni32-not-consumed-when-it-is-passed-to-a-function/49274075#49274075", "title": "Why is an Option&lt;i32&gt; not consumed when it is passed to a function?", "body": "<p><code>i32</code> is <code>Copy</code>. An <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#impl-Copy\" rel=\"nofollow noreferrer\"><code>Option</code> of something that is <code>Copy</code> is also <code>Copy</code></a>:</p>\n\n<pre><code>impl&lt;T&gt; Copy for Option&lt;T&gt;\nwhere\n    T: Copy, \n</code></pre>\n\n<p>Thus, passing <code>five</code> to <code>plus_one</code> copies instead of moves.</p>\n"}], "owner": {"reputation": 1375, "user_id": 6780389, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/e0e4a17ac5c2908e5c892f6f8f87feb2?s=128&d=identicon&r=PG&f=1", "display_name": "saga", "link": "https://stackoverflow.com/users/6780389/saga"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1521032193, "creation_date": 1521019754, "last_edit_date": 1521032133, "question_id": 49273965, "link": "https://stackoverflow.com/questions/49273965/why-is-an-optioni32-not-consumed-when-it-is-passed-to-a-function", "title": "Why is an Option&lt;i32&gt; not consumed when it is passed to a function?", "body": "<p>The <code>plus_one</code> function doesn't take a reference as an argument. Shouldn't the ownership of five be passed to <code>plus_one</code>? Why is <code>five</code> still usable?</p>\n\n<pre><code>fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n    match x {\n        None =&gt; None,\n        Some(i) =&gt; Some(i + 1),\n    }\n}\n\nfn main() {\n    let five = Some(5);\n    let six = plus_one(five);\n    println!(\"{}\", five.unwrap());\n    println!(\"{}\", six.unwrap());\n    let none = plus_one(None);\n}\n</code></pre>\n"}, {"tags": ["rust", "traits", "dereference"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1521013366, "post_id": 49271585, "comment_id": 85546929, "body": "<code>&amp;[T]</code> is a slice; <code>[T]</code> is an array."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1521032821, "last_edit_date": 1521032821, "creation_date": 1521014612, "answer_id": 49272435, "question_id": 49271585, "link": "https://stackoverflow.com/questions/49271585/why-does-calling-a-method-on-a-dereferenced-trait-object-or-slice-compile/49272435#49272435", "title": "Why does calling a method on a dereferenced trait object or slice compile?", "body": "<p>Judging by the MIR produced by the first piece of code, <code>(*f).filter()</code> is equivalent to <code>f.filter()</code>; it appears that the compiler is aware that since <code>filter</code> is a method on <code>&amp;self</code>, dereferencing it doesn't serve any purpose and is omitted altogether.</p>\n\n<p>The second case, however, is different, because dereferencing the slice introduces bounds-checking code. In my opinion the compiler should also be able to tell that this operation (dereferencing) doesn't introduce any meaningful changes (and/or that there won't be an out-of-bounds error) and treat it as regular slice indexing, but there might be some reason behind this.</p>\n"}, {"comments": [{"owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 0, "creation_date": 1521096951, "post_id": 49272644, "comment_id": 85588836, "body": "(also @ljedrz)  Thanks! if <code>self</code> is received by value and I do <code>f.filter()</code>, it gives 2 errors .First, <code>cannot move a value of type Function: the size of Function cannot be statically determined</code> and Second, <code>cannot move out of borrowed content</code>. Second error is obvious. First one I can&#39;t fully understand why it is complaining about size of <code>Function</code> and not size of <code>self</code> . Could you please elaborate and why it (i.e <code>f.filter()</code>) works fine with receiver <code>self </code> as a reference."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 1, "creation_date": 1521100351, "post_id": 49272644, "comment_id": 85590299, "body": "@soupybionics Although this is more or less a different question, the same answer applies. If you have <code>fn filter(self)</code> all the compiler knows is that the type <code>Self</code> implements <code>Function</code>. It does not know the size of <code>self</code> because any type could be hiding behind in <code>f: &amp;Function</code>. If you try <code>k.filter()</code> instead it should work because the size of <code>k: Kidney</code> is known at compile time."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 1, "creation_date": 1521100800, "post_id": 49272644, "comment_id": 85590487, "body": "Or simply put, moving a value into another variable such as <code>let k1 = (*f)</code> and moving it as argument into a function is basically the same thing."}, {"owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 0, "creation_date": 1521102336, "post_id": 49272644, "comment_id": 85591182, "body": "Thanks! That helped."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": true, "score": 3, "last_activity_date": 1521100663, "last_edit_date": 1521100663, "creation_date": 1521015391, "answer_id": 49272644, "question_id": 49271585, "link": "https://stackoverflow.com/questions/49271585/why-does-calling-a-method-on-a-dereferenced-trait-object-or-slice-compile/49272644#49272644", "title": "Why does calling a method on a dereferenced trait object or slice compile?", "body": "<p>Dereferencing a trait object is no problem. In fact, it must be dereferenced at some point, otherwise it would be quite useless. </p>\n\n<p><code>let k1 = (*f);</code> fails not because of dereferencing but because you try to put the raw trait object on the stack (this is where local variables live). Values on the stack must have a size known at compile time, which is not the case for trait objects because any type could implement the trait.</p>\n\n<p>Here is an example where a structs with different sizes implement the trait:</p>\n\n<pre><code>trait Function {\n    fn filter (&amp;self);\n}\n\n#[derive(Debug, Copy, Clone)]\nstruct Kidney {}\n\nimpl Function for Kidney {\n    fn filter (&amp;self)  {\n        println!(\"filtered\");\n    }  \n}\n\n#[derive(Debug, Copy, Clone)]\nstruct Liver {\n    size: f32\n}\n\nimpl Function for Liver {\n    fn filter (&amp;self)  {\n        println!(\"filtered too!\");\n    }  \n}\n\nfn main() {\n    let k = Kidney {};\n    let l = Liver {size: 1.0};\n\n    let f: &amp;Function;\n    if true {\n        f = &amp;k;\n    } else {\n        f = &amp;l;\n    }\n\n    // Now what is the size of *f - Kidney (0 bytes) or Liver (4 bytes)?\n}\n</code></pre>\n\n<p><code>(*f).filter();</code> works because the temporarily dereferenced object is not put on the stack. In fact, this is the same as <code>f.filter()</code>. Rust automatically applies as many dereferences as required to get to an actual object. This is documented <a href=\"https://doc.rust-lang.org/book/first-edition/deref-coercions.html#deref-and-method-calls\" rel=\"nofollow noreferrer\">in the book</a>.</p>\n\n<p>What happens in the second case is that <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Deref\" rel=\"nofollow noreferrer\"><code>Vec</code> implements <code>Deref</code></a> to slices, so it gets all methods implemented for slices for free. <code>*v</code> gives you a dereferenced slice, which you assign to a slice. This is an obvious type error.</p>\n"}], "owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 299, "favorite_count": 0, "accepted_answer_id": 49272644, "answer_count": 2, "score": 1, "last_activity_date": 1521100663, "creation_date": 1521011263, "last_edit_date": 1521032691, "question_id": 49271585, "link": "https://stackoverflow.com/questions/49271585/why-does-calling-a-method-on-a-dereferenced-trait-object-or-slice-compile", "title": "Why does calling a method on a dereferenced trait object or slice compile?", "body": "<p>Given the following code:</p>\n\n<pre><code>trait Function {\n    fn filter (&amp;self);\n}\n\n#[derive(Debug, Copy, Clone)]\nstruct Kidney {}\n\nimpl Function for Kidney {\n    fn filter (&amp;self)  {\n        println!(\"filtered\");\n    }  \n}\n\nfn main() {\n    let k = Kidney {};\n    let f: &amp;Function = &amp;k;\n    //let k1 = (*f);   //--&gt; This gives a \"size not satisfied\" error\n    (*f).filter();     //--&gt; Works; what exactly happens here?\n}\n</code></pre>\n\n<p>I am not sure why it compiles. I was expecting the last statement to fail. I guess I have overlooked some fundamentals while learning Rust, as I am failing to understand why dereferencing a trait (that lives behind a pointer) should compile.</p>\n\n<p>Is this issue similar to the following case?</p>\n\n<pre><code>let v = vec![1, 2, 3, 4];\n//let s: &amp;[i32] = *v;\nprintln!(\"{}\", (*v)[0]);\n</code></pre>\n\n<p><code>*v</code> gives a slice, but a slice is unsized, so again it is not clear to me how this compiles. If I uncomment the second statement I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   |     let s:&amp;[i32]= *v;\n   |                   ^^\n   |                   |\n   |                   expected &amp;[i32], found slice\n   |                   help: consider borrowing here: `&amp;*v`\n   |\n   = note: expected type `&amp;[i32]`\n              found type `[{integer}]`\n</code></pre>\n\n<p>Does <code>expected type &amp;[i32]</code> mean \"expected a reference of slice\"?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 1, "creation_date": 1521007422, "post_id": 49269892, "comment_id": 85544341, "body": "&quot;<i>You should think of traits as a radical novelty.</i>&quot; I don&#39;t understand what this means. Traits are not a novelty in Rust. They implement basic functionality like <code>==</code> and <code>&lt;</code> and formatting for printing. <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#implementations\" rel=\"nofollow noreferrer\"><code>i32</code> implements dozens of traits</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1521033649, "post_id": 49269892, "comment_id": 85560135, "body": "@Schwern I believe that the meaning is &quot;traits are a novelty <i>when comparing Rust to other languages</i>&quot;, not that traits are a novelty within Rust."}, {"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 1, "creation_date": 1521046576, "post_id": 49269892, "comment_id": 85569805, "body": "Traits are not a novelty to Rust - they are just Haskell type classes without HKTs renamed for a wider audience. If you want to understand traits really well, start from Haskell."}, {"owner": {"reputation": 1792, "user_id": 965934, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ca34909148008c2a960071d06e3ff6a8?s=128&d=identicon&r=PG", "display_name": "01d55", "link": "https://stackoverflow.com/users/965934/01d55"}, "edited": false, "score": 1, "creation_date": 1521089612, "post_id": 49269892, "comment_id": 85586279, "body": "The phrase &quot;radical novelty&quot; is from EWD 1036. While Traits are indeed not novel to a Haskell programmer, the question clearly indicates that JavaScript, not Haskell, is the language from which the asker draws metaphors."}, {"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 1, "creation_date": 1521137628, "post_id": 49269892, "comment_id": 85615219, "body": "Ah; could you clarify that in the answer?"}, {"owner": {"reputation": 436, "user_id": 1319821, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FUPof.jpg?s=128&g=1", "display_name": "Y. E.", "link": "https://stackoverflow.com/users/1319821/y-e"}, "edited": false, "score": 1, "creation_date": 1618797936, "post_id": 49269892, "comment_id": 118703148, "body": "@01d55 Traits are not novelty in programming, so the final phrase of the answer is confusing and misleading. And what is EWD 1036?"}, {"owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "reply_to_user": {"reputation": 436, "user_id": 1319821, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FUPof.jpg?s=128&g=1", "display_name": "Y. E.", "link": "https://stackoverflow.com/users/1319821/y-e"}, "edited": false, "score": 0, "creation_date": 1618801285, "post_id": 49269892, "comment_id": 118703655, "body": "@Y.E. It&#39;s an essay by E. W. Dijkstra, <a href=\"https://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1036.html\" rel=\"nofollow noreferrer\">On The Cruelty Of Really Teaching Computer Science</a> from 1988. I&#39;m not sure how it applies here."}, {"owner": {"reputation": 436, "user_id": 1319821, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FUPof.jpg?s=128&g=1", "display_name": "Y. E.", "link": "https://stackoverflow.com/users/1319821/y-e"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1618801683, "post_id": 49269892, "comment_id": 118703703, "body": "@Schwern yep. I suggested to remove the obscure phrase that causes so many questions here. Not sure the edit will be accepted, though."}], "tags": [], "owner": {"reputation": 1792, "user_id": 965934, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ca34909148008c2a960071d06e3ff6a8?s=128&d=identicon&r=PG", "display_name": "01d55", "link": "https://stackoverflow.com/users/965934/01d55"}, "is_accepted": false, "score": 2, "last_activity_date": 1521033586, "last_edit_date": 1521033586, "creation_date": 1521002384, "answer_id": 49269892, "question_id": 49269231, "link": "https://stackoverflow.com/questions/49269231/are-rust-traits-analogous-to-javascript-mixins/49269892#49269892", "title": "Are Rust traits analogous to JavaScript mixins?", "body": "<p>Thinking of traits as mixins will lead you away from, rather than towards, understanding. Traits are fundamentally about the strict type system, which will be quite alien to a programmer whose native language is JavaScript.</p>\n\n<p>Like most programming constructs, traits are flexible enough that one could use them in a way that resembles how mixins are idiomatically used, but that won't resemble at all how most other programmers, including the standard library, use traits.</p>\n\n<p>You should think of traits as a radical novelty.</p>\n"}, {"tags": [], "owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "is_accepted": false, "score": 10, "last_activity_date": 1521033567, "last_edit_date": 1521033567, "creation_date": 1521007077, "answer_id": 49270638, "question_id": 49269231, "link": "https://stackoverflow.com/questions/49269231/are-rust-traits-analogous-to-javascript-mixins/49270638#49270638", "title": "Are Rust traits analogous to JavaScript mixins?", "body": "<p>\"Traits\" (or \"Roles\" in Perl) are a way to add multiple units of functionality to a class (or struct in Rust) without the problems of multiple inheritance. Traits are \"cross cutting concerns\" meaning they're not part of the class hierarchy, they can be potentially implemented on any class.</p>\n\n<p>Traits define an interface, meaning in order for anything to implement that trait it must define all the required methods. Like you can require that method parameters be of a certain classes, you can require that certain parameters implement certain traits.</p>\n\n<p>A good example is writing output. In many languages, you have to decide if you're writing to a <code>FileHandle</code> object or a <code>Socket</code> object. This can get frustrating because sometimes things will only write to files, but not sockets or vice versa, or maybe you want to capture the output in a string for debugging.</p>\n\n<p>If you instead define a trait, you can write to anything that implements that trait. This is exactly what Rust does with <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"noreferrer\"><code>std::io::Write</code></a>.</p>\n\n<pre><code>pub trait Write {\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; Result&lt;usize&gt;;\n\n    fn flush(&amp;mut self) -&gt; Result&lt;()&gt;;\n\n    fn write_all(&amp;mut self, mut buf: &amp;[u8]) -&gt; Result&lt;()&gt; {\n        while !buf.is_empty() {\n            match self.write(buf) {\n                Ok(0) =&gt; return Err(Error::new(ErrorKind::WriteZero,\n                                               \"failed to write whole buffer\")),\n                Ok(n) =&gt; buf = &amp;buf[n..],\n                Err(ref e) if e.kind() == ErrorKind::Interrupted =&gt; {}\n                Err(e) =&gt; return Err(e),\n            }\n        }\n        Ok(())\n    }\n\n    ...and a few more...\n}\n</code></pre>\n\n<p>Anything which wants to implement <code>Write</code> <strong><em>must</em></strong> implement <code>write</code> and <code>flush</code>. A default <code>write_all</code> is provided, but you can implement your own if you like.</p>\n\n<p>Here's how <code>Vec&lt;u8&gt;</code> implements <code>Write</code> so you can \"print\" to a vector of bytes.</p>\n\n<pre><code>impl Write for Vec&lt;u8&gt; {\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n        self.extend_from_slice(buf);\n        Ok(buf.len())\n    }\n\n    fn write_all(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;()&gt; {\n        self.extend_from_slice(buf);\n        Ok(())\n    }\n\n    fn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; { Ok(()) }\n}\n</code></pre>\n\n<p>Now when you write something that needs to output stuff instead of deciding if it should write to a <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"noreferrer\"><code>File</code></a> or a <a href=\"https://doc.rust-lang.org/std/net/struct.TcpStream.html\" rel=\"noreferrer\"><code>TcpStream</code></a> (a network socket) or whatever, you say it just has to have the <code>Write</code> trait.</p>\n\n<pre><code>fn display( out: Write ) {\n    out.write(...whatever...)\n}\n</code></pre>\n\n<hr>\n\n<p>Mixins are a severely watered down version of this. Mixins are a collection of methods which get injected into a class. That's about it. They solve the problem of multiple inheritance and cross-cutting concerns, but little else. There's no formal promise of an interface, you just call the methods and hope for the best.</p>\n\n<p>Mixins are mostly functionally equivalent, but provide none of the compile time checks and high performance that traits do.</p>\n\n<p>If you're familiar with mixins, traits will be a familiar way to compose functionality. The requirement to define an interface will be the struggle, but strong typing will be a struggle for anyone coming to Rust from JavaScript.</p>\n\n<hr>\n\n<p>Unlike in JavaScript, where mixins are a neat add-on, traits are a fundamental part of Rust. They allow Rust to be strongly-typed, high-performance, very safe, but also extremely flexible. Traits allow Rust to perform extensive compile time checks on the validity of function arguments without the traditional restrictions of a strongly typed language.</p>\n\n<p>Many core pieces of Rust are implemented with traits. <code>std::io::Writer</code> has already been mentioned. There's also <code>std::cmp::PartialEq</code> which handles <code>==</code> and <code>!=</code>. <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"noreferrer\"><code>std::cmp::PartialOrd</code></a> for <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code> and <code>&lt;=</code>. <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>std::fmt::Display</code></a> for how a thing should be printed with <code>{}</code>. And so on.</p>\n"}, {"tags": [], "owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "is_accepted": false, "score": 0, "last_activity_date": 1521033904, "last_edit_date": 1521033904, "creation_date": 1521009783, "answer_id": 49271242, "question_id": 49269231, "link": "https://stackoverflow.com/questions/49269231/are-rust-traits-analogous-to-javascript-mixins/49271242#49271242", "title": "Are Rust traits analogous to JavaScript mixins?", "body": "<p>To add to <a href=\"https://stackoverflow.com/a/49270638/155423\">schwern's answer</a></p>\n\n<blockquote>\n  <p>A mixin is a subclass specification that may be applied to various\n  parent classes in order to extend them with the same set of features. - <a href=\"http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf\" rel=\"nofollow noreferrer\">Traits: Composable Units of Behaviour</a>.</p>\n</blockquote>\n\n<p>The major difference compared to trait is that they have \"total ordering\". Changing the order in which mixins are implemented for a <code>class</code> or <code>strut</code> can cause the behaviour of the <code>class</code> or <code>struct</code> to change. If mixins <code>X</code>, <code>Y</code> were applied to a struct or class <code>A</code>, then applying <code>X</code> after <code>Y</code> <strong>can</strong> give you a different behaviour compared to when you apply <code>Y</code> after <code>X</code>. Traits are independent of implementation order - i.e has flattened code.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521055107, "post_id": 49285833, "comment_id": 85574893, "body": "<i>Haskell, which is where Rust got traits from</i> \u2014 do you have any citations for that? I agree that they are similar, but I&#39;ve never heard that there was a direct lineage / causal relationship."}, {"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521056134, "post_id": 49285833, "comment_id": 85575483, "body": "See: <a href=\"https://air.mozilla.org/rust-typeclasses/\" rel=\"nofollow noreferrer\">air.mozilla.org/rust-typeclasses</a>  and <a href=\"https://en.wikipedia.org/wiki/Type_class\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Type_class</a> &quot;Type classes first appeared in the Haskell programming language&quot;, &quot;Rust supports traits, which are a limited form of type classes with coherence.&quot; -- If you don&#39;t trace lineage, you can still see that Rust traits are type classes modulo some syntactic differences (dot syntax) and that Rust doesn&#39;t have GATs, HKTs, ConstraintKinds, yet which Haskell does.. The term &quot;associated type&quot; is also borrowed directly from Haskell."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1521076833, "post_id": 49285833, "comment_id": 85583300, "body": "@FrancisGagn&#233; Rust&#39;s trait are certainly <i>influenced</i> by Haskell, but stating that Rust &quot;got its traits from Haskell&quot; is a much stronger statement than pure influence. I wouldn&#39;t say that &quot;Rust got its channels from Newsqueak&quot;, for example."}, {"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521126540, "post_id": 49285833, "comment_id": 85607823, "body": "@Shepmaster Influenced and &quot;got&quot; are essentially the same verb to me. Of course, there were some minor changes along the way. The video from 2012 also shows that traits were based on type classes. Of mainstream languages, there are essentially two that have type classes: Haskell and Rust - and given that Haskell had them first, the reasonable conclusion must be that Rust got them from Haskell. To me, the assertion is even too weak, I&#39;ll do one better: <b>Traits are typeclasses</b>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521126615, "post_id": 49285833, "comment_id": 85607882, "body": "@Centril perhaps you would be interested in answering <a href=\"https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell\">What is the difference between traits in Rust and typeclasses in Haskell?</a> then."}], "tags": [], "owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "is_accepted": false, "score": 2, "last_activity_date": 1521057116, "last_edit_date": 1521057116, "creation_date": 1521054252, "answer_id": 49285833, "question_id": 49269231, "link": "https://stackoverflow.com/questions/49269231/are-rust-traits-analogous-to-javascript-mixins/49285833#49285833", "title": "Are Rust traits analogous to JavaScript mixins?", "body": "<p>Traits or <a href=\"https://en.wikipedia.org/wiki/Type_class\" rel=\"nofollow noreferrer\">\"type classes\"</a> (in Haskell, <a href=\"https://air.mozilla.org/rust-typeclasses/\" rel=\"nofollow noreferrer\">which is where Rust got traits from</a>) are fundamentally about <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/01/26/lowering-rust-traits-to-logic/\" rel=\"nofollow noreferrer\">logical</a> <strong>constraints on types</strong>. Traits are not fundamentally about values. Since JavaScript is unityped, mixins, which are about values, are nothing like traits/type-classes in a statically typed language like Rust or Haskell. <strong>Traits let us talk in a principled way about the commonalities between types.</strong> Unlike C++, which has \"templates\", Haskell and <a href=\"https://blog.rust-lang.org/2015/05/11/traits.html\" rel=\"nofollow noreferrer\">Rust type check implementations <strong>before monomorphization</strong></a>.</p>\n\n<p>Assuming a generic function:</p>\n\n<pre><code>fn foo&lt;T: Trait&gt;(x: T) { /* .. */ }\n</code></pre>\n\n<p>or in Haskell:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>foo :: Trait t =&gt; t -&gt; IO ()\nfoo = ...\n</code></pre>\n\n<p>The bound <code>T: Trait</code> means that any type <code>T</code> you pick must satisfy the <code>Trait</code>. To satisfy the <code>Trait</code>, the type must explicitly say that it is implementing the <code>Trait</code> and therein provide a definition of all items required by the <code>Trait</code>. In order to be sound, Rust also guarantees that each type implements a given trait at most once - therefore, there can never be overlapping implementations.</p>\n\n<p>Consider the following marker trait and a type which implements it:</p>\n\n<pre><code>trait Foo {}\nstruct Bar;\nimpl Foo for Bar {}\n</code></pre>\n\n<p>or in Haskell:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>class Foo x where\ndata Bar = Bar\ninstance Foo Bar where\n</code></pre>\n\n<p>Notice that <code>Foo</code> does not have any methods, functions, or any other items. A difference between Haskell and Rust here is that <code>x</code> is absent in the Rust definition. This is because the first type parameter to a trait is implicit in Rust (and referred to by with <code>Self</code>) while it is explicit in Haskell.</p>\n\n<p>Speaking of type parameters, we can define the trait <code>StudentOf</code> between two types like so:</p>\n\n<pre><code>trait StudentOf&lt;A&gt; {}\nstruct AlanTuring;\nstruct AlonzoChurch;\nimpl StudentOf&lt;AlonzoChurch&gt; for AlanTuring {}\n</code></pre>\n\n<p>or in Haskell:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>class StudentOf self a where\ndata AlanTuring = AlanTuring\ndata AlonzoChurch = AlonzoChurch\ninstance StudentOf AlanTuring AlonzoChurch where\n</code></pre>\n\n<p>Until now, we've not introduced any functions - let's do that:</p>\n\n<pre><code>trait From&lt;T&gt; {\n    fn from(x: T) -&gt; Self;\n}\n\nstruct WrapF64(f64);\nimpl From&lt;f64&gt; for WrapF64 {\n    fn from(x: f64) -&gt; Self {\n        WrapF64(x)\n    }\n}\n</code></pre>\n\n<p>or in Haskell:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>class From self t where\n    from :: t -&gt; self\n\nnewtype WrapDouble = WrapDouble Double\ninstance From WrapDouble Double where\n    from d = WrapDouble d\n</code></pre>\n\n<p>What you've seen here is also a form of <a href=\"https://eli.thegreenplace.net/2018/return-type-polymorphism-in-haskell/\" rel=\"nofollow noreferrer\">return type polymorphism</a>. Let's make it a bit more clear and consider a <code>Monoid</code> trait:</p>\n\n<pre><code>trait Monoid {\n    fn mzero() -&gt; Self;\n    fn mappend(self, rhs: Self) -&gt; Self;\n}\n\nstruct Sum(usize);\nimpl Monoid for Sum {\n    fn mzero() -&gt; Self { Sum(0) }\n    fn mappend(self, rhs: Self) -&gt; Self { Sum(self.0 + rhs.0) }\n}\n\nfn main() {\n    let s: Sum = Monoid::mzero();\n    let s2 = s.mappend(Sum(2));\n    // or equivalently:\n    let s2 = &lt;Sum as Monoid&gt;::mappend(s, Sum(2));\n}\n</code></pre>\n\n<p>or in Haskell:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>class Monoid m where\n    mzero :: m    -- Notice that we don't have any inputs here.\n    mappend :: m -&gt; m -&gt; m\n\n...\n</code></pre>\n\n<p>The implementation of <code>mzero</code> here is inferred by the required return type <code>Sum</code>, which is why it is called return type polymorphism. Another subtle difference here is the <code>self</code> syntax in <code>mappend</code> - this is mostly a syntactic difference that allows us to do <code>s.mappend(Sum(2));</code> in Rust.</p>\n\n<p>Traits also allow us to require that each type which implements the trait must provide an associated item, such as associated constants:</p>\n\n<pre><code>trait Identifiable {\n    const ID: usize; // Each impl must provide a constant value.\n}\n\nimpl Identifiable for bool {\n    const ID: usize = 42;\n}\n</code></pre>\n\n<p>or <a href=\"https://doc.rust-lang.org/book/first-edition/associated-types.html\" rel=\"nofollow noreferrer\">associated types</a>:</p>\n\n<pre><code>trait Iterator {\n    type Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n\nstruct Once&lt;T&gt;(Option&lt;T&gt;);\nimpl&lt;T&gt; Iterator for Once&lt;T&gt; {\n    type Item = T;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.0.take()\n    }\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/first-edition/associated-types.html\" rel=\"nofollow noreferrer\">Associated types</a> also allow us to define functions on the type level rather than functions on the value level:</p>\n\n<pre><code>trait UnaryTypeFamily { type Output: Clone; }\nimpl UnaryTypeFamily for InputType { Output = String; }\n\nfn main() {\n    // Apply the function UnaryTypeFamily with InputType.\n    let foo: &lt;InputType as UnaryTypeFamily&gt;::Output = String::new();\n}\n</code></pre>\n\n<p>Some traits such as <code>Iterator</code> are also <a href=\"https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety\">object safe</a>. This means that you can erase the actual type behind a pointer, and a vtable will be created for you:</p>\n\n<pre><code>fn use_boxed_iter(iter: Box&lt;Iterator&lt;Item = u8&gt;&gt;) { /* .. */ }\n</code></pre>\n\n<p>The Haskell equivalent of trait objects are <a href=\"https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types#Example:_heterogeneous_lists\" rel=\"nofollow noreferrer\">existentially quantified types</a>, which in fact trait objects are in a type theoretical sense.</p>\n\n<p>Finally, there's the issue of <a href=\"http://dev.stephendiehl.com/fun/001_basics.html#higher-kinded-types\" rel=\"nofollow noreferrer\">higher kinded types</a>, which lets us be generic over type constructors. In Haskell, you can formulate what it means to be an (endo)functor like so:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>class Functor (f :: * -&gt; *) where\n    fmap :: (a -&gt; b) -&gt; (f a -&gt; f b)\n</code></pre>\n\n<p>At this point, Rust does not have an equivalent notion, but will be equally expressive with <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/\" rel=\"nofollow noreferrer\"><em>generic associated types (GATs)</em></a> soon:</p>\n\n<pre><code>trait FunctorFamily {\n    type Functor&lt;T&gt;;\n    fn fmap&lt;A, B, F&gt;(self: Self::Functor&lt;A&gt;, mapper: F) -&gt; Self::Functor&lt;B&gt;\n    where F: Fn(A) -&gt; B;\n}\n</code></pre>\n"}], "owner": {"reputation": 719, "user_id": 1775741, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/d6aa3192116631a30e6d2012e6385ef5?s=128&d=identicon&r=PG", "display_name": "Ian Danforth", "link": "https://stackoverflow.com/users/1775741/ian-danforth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1716, "favorite_count": 0, "answer_count": 4, "score": 5, "last_activity_date": 1521057116, "creation_date": 1520997496, "last_edit_date": 1521033381, "question_id": 49269231, "link": "https://stackoverflow.com/questions/49269231/are-rust-traits-analogous-to-javascript-mixins", "title": "Are Rust traits analogous to JavaScript mixins?", "body": "<p>The <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html\" rel=\"nofollow noreferrer\">Rust book (2nd Edition)</a> suggests that \"Traits are similar to a feature often called \u2018interfaces\u2019 in other languages, though with some differences.\" For those not familiar with interfaces, the analogy doesn't illuminate. Can traits be reasonably thought of as <a href=\"https://en.wikipedia.org/wiki/Mixin\" rel=\"nofollow noreferrer\">mixins</a> such as those found commonly in JavaScript?</p>\n\n<p>They both seem to be a way to share code and add methods to multiple types/objects without inheritance, but how crucial are the differences for conceptual understanding?</p>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 2, "creation_date": 1520975420, "post_id": 49265674, "comment_id": 85535198, "body": "That sounds like some kind of network error fetching that page. Does that URL load if you stick it in your browser?"}, {"owner": {"reputation": 1540, "user_id": 9260060, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ISj3q.png?s=128&g=1", "display_name": "David Kamer", "link": "https://stackoverflow.com/users/9260060/david-kamer"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1520977903, "post_id": 49265674, "comment_id": 85536228, "body": "Http is working. Trying that specific url now. I&#39;ll only comment about it if it doesn&#39;t load."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520979233, "post_id": 49265674, "comment_id": 85536778, "body": "Could try <code>cargo run --verbose</code>"}, {"owner": {"reputation": 1540, "user_id": 9260060, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ISj3q.png?s=128&g=1", "display_name": "David Kamer", "link": "https://stackoverflow.com/users/9260060/david-kamer"}, "edited": false, "score": 0, "creation_date": 1520980229, "post_id": 49265674, "comment_id": 85537162, "body": "<code>cargo run --verbose</code> is returning <code>Caused by:   the given version requirement is invalid</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520981051, "post_id": 49265674, "comment_id": 85537448, "body": "You might have corrupted your local cache of the registry. You could try moving <code>$HOME&#47;.cargo</code> to a new name and try again."}, {"owner": {"reputation": 1540, "user_id": 9260060, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ISj3q.png?s=128&g=1", "display_name": "David Kamer", "link": "https://stackoverflow.com/users/9260060/david-kamer"}, "edited": false, "score": 0, "creation_date": 1520981177, "post_id": 49265674, "comment_id": 85537485, "body": "Can I just delete the <code>github.com-XXX</code> file in <code>~&#47;.cargo&#47;registry&#47;index</code> ?"}, {"owner": {"reputation": 863, "user_id": 5849285, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/UwK2I.jpg?s=128&g=1", "display_name": "Charles Shiller", "link": "https://stackoverflow.com/users/5849285/charles-shiller"}, "edited": false, "score": 0, "creation_date": 1521009144, "post_id": 49265674, "comment_id": 85545109, "body": "Just a small heads up in case you&#39;re not aware, but <a href=\"https://github.com/iron/iron\" rel=\"nofollow noreferrer\">iron is not maintained anymore</a>, so you may want to find another package."}], "owner": {"reputation": 1540, "user_id": 9260060, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ISj3q.png?s=128&g=1", "display_name": "David Kamer", "link": "https://stackoverflow.com/users/9260060/david-kamer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 193, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1520980924, "creation_date": 1520974368, "last_edit_date": 1520980924, "question_id": 49265674, "link": "https://stackoverflow.com/questions/49265674/external-dependency-in-rust-not-loading-from-cargo-run-command", "title": "External dependency in Rust not loading from cargo run command", "body": "<p>I am attempting to replicate code I found in a tutorial. I am using the following dependencies in my Cargo.toml file:</p>\n\n<pre><code>[dependencies]\niron = \"0.5.1\"\nmime = \"0.2.3\"\nrouter = \"0.5.1\"\nurlencoded = \"0.5.0\"\n</code></pre>\n\n<p>I receive the following error message when I execute <code>cargo run</code> from the project's <code>src</code> directory:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Updating registry `https://github.com/rust-lang/crates.io-index`\nAn unknown error occurred\n</code></pre>\n\n<p>It hangs at \"Updating registry\" for roughly 15 minutes before the error appears. I would guess versioning as the issue, however the tutorial that I am using directly states that they included them as a way to avoid version mismatch with the example code.</p>\n\n<p>I attempted to search for an answer but the error code is too vague to find anything. </p>\n\n<p>The results of <code>cargo run --verbose</code> added:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Caused by:\n  the given version requirement is invalid\n</code></pre>\n\n<p>I am now getting: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>failed to parse registry's information for: serde_json\n</code></pre>\n\n<p>and </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>failed to parse registry's information for: serde\n</code></pre>\n\n<p>when I compile/run with <code>cargo</code> with my listed dependencies and with <code>\"*\"</code> as the version, respectively. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1746, "user_id": 2535188, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0dd9c2fd17c813080b04fdee2a874ee1?s=128&d=identicon&r=PG", "display_name": "tleyden", "link": "https://stackoverflow.com/users/2535188/tleyden"}, "edited": false, "score": 0, "creation_date": 1520973839, "post_id": 49264561, "comment_id": 85534465, "body": "Thanks!  I verified that it worked, and it was actually inline with my tests which were per-type anyway."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1520970275, "last_edit_date": 1520970275, "creation_date": 1520969900, "answer_id": 49264561, "question_id": 49264428, "link": "https://stackoverflow.com/questions/49264428/how-do-i-create-a-vector-of-functions-with-generic-type-parameters/49264561#49264561", "title": "How do I create a vector of functions with generic type parameters?", "body": "<p>You cannot have a function pointer with a generic type. You will need to pick a specific type for <code>T</code>:</p>\n\n<pre><code>use std::fmt::Debug;\n\npub fn selection_sort&lt;T: Ord + Debug&gt;(v: &amp;mut [T]) {}\n\npub fn insertion_sort&lt;T: Ord + Debug&gt;(v: &amp;mut [T]) {}\n\nfn main() {\n    let sorters_u8: &amp;[fn(&amp;mut [u8])] = &amp;[selection_sort, insertion_sort];\n    let sorters_bool: &amp;[fn(&amp;mut [bool])] = &amp;[selection_sort, insertion_sort];\n}\n</code></pre>\n\n<p>The intuition here is that a function pointer has to <em>point to something</em>. Until a specific type has been provided to the function, there isn't any actual code generated \u2014 the compiler cannot create an infinite number of functions just in case one of them is chosen later.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40064700/155423\">Vector of Generic Structs in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/47360392/155423\">Function pointers in Rust using constrained generics</a></li>\n</ul>\n"}], "owner": {"reputation": 1746, "user_id": 2535188, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0dd9c2fd17c813080b04fdee2a874ee1?s=128&d=identicon&r=PG", "display_name": "tleyden", "link": "https://stackoverflow.com/users/2535188/tleyden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 604, "favorite_count": 0, "accepted_answer_id": 49264561, "answer_count": 1, "score": 1, "last_activity_date": 1520970275, "creation_date": 1520969390, "last_edit_date": 1520969608, "question_id": 49264428, "link": "https://stackoverflow.com/questions/49264428/how-do-i-create-a-vector-of-functions-with-generic-type-parameters", "title": "How do I create a vector of functions with generic type parameters?", "body": "<p>I have a few functions with the same generic type signature:</p>\n\n<pre><code>pub fn selection_sort&lt;T: Ord + Debug&gt;(v: &amp;mut [T]) {}\n\npub fn insertion_sort&lt;T: Ord + Debug&gt;(v: &amp;mut [T]) {}\n</code></pre>\n\n<p>I want to put them into a <code>Vec</code> or array so that I can iterate over them and run the same tests on them, as follows:</p>\n\n<pre><code>let mut sorters: Vec&lt;fn&lt;T: Ord + Debug&gt;(v: &amp;mut [T])&gt; = Vec::new();\n</code></pre>\n\n<p>However I get this compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected `(`, found `&lt;`\n --&gt; src/main.rs:8:28\n  |\n8 |     let mut sorters: Vec&lt;fn&lt;T: Ord + Debug&gt;(v: &amp;mut [T])&gt; = Vec::new();\n  |         -----------        ^\n  |         |\n  |         while parsing the type for `mut sorters`\n</code></pre>\n\n<p>How can I put these functions into a vector?  Is there a better approach to re-use tests against functions that satisfy this signature?</p>\n\n<p>I'm using Rust 1.24.0.</p>\n"}, {"tags": ["openssl", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520966988, "post_id": 49263452, "comment_id": 85530960, "body": "Have you done a clean build and rebuilt? Your output indicates that no compilation actually occurred, otherwise we&#39;d see &quot;Compiling&quot; in the output. See also <a href=\"https://stackoverflow.com/q/34612395/155423\">OpenSSL crate fails compilation on Mac OS X 10.11</a>, which includes the same advice."}, {"owner": {"reputation": 74982, "user_id": 128967, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e6ce48656d5e39227a10b37a51754134?s=128&d=identicon&r=PG", "display_name": "Naftuli Kay", "link": "https://stackoverflow.com/users/128967/naftuli-kay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520968075, "post_id": 49263452, "comment_id": 85531518, "body": "@Shepmaster I have done a clean build."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1520987523, "post_id": 49263452, "comment_id": 85539421, "body": "It is not clear, where you get precompiled <code>libssl.a</code> and where you put it? Not sure that something like <code>openssl-dev</code> package contains staticaly linked openssl."}, {"owner": {"reputation": 74982, "user_id": 128967, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e6ce48656d5e39227a10b37a51754134?s=128&d=identicon&r=PG", "display_name": "Naftuli Kay", "link": "https://stackoverflow.com/users/128967/naftuli-kay"}, "edited": false, "score": 0, "creation_date": 1520989096, "post_id": 49263452, "comment_id": 85539791, "body": "I am installing openssl-static which contains the static code."}], "answers": [{"comments": [{"owner": {"reputation": 74982, "user_id": 128967, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e6ce48656d5e39227a10b37a51754134?s=128&d=identicon&r=PG", "display_name": "Naftuli Kay", "link": "https://stackoverflow.com/users/128967/naftuli-kay"}, "edited": false, "score": 0, "creation_date": 1520998720, "post_id": 49268370, "comment_id": 85541952, "body": "<a href=\"https://github.com/naftulikay/rust-openssl-static-example/pull/3\" rel=\"nofollow noreferrer\">THANK YOU SO MUCH</a>! I should have gone to source."}, {"owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "reply_to_user": {"reputation": 74982, "user_id": 128967, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e6ce48656d5e39227a10b37a51754134?s=128&d=identicon&r=PG", "display_name": "Naftuli Kay", "link": "https://stackoverflow.com/users/128967/naftuli-kay"}, "edited": false, "score": 0, "creation_date": 1520999393, "post_id": 49268370, "comment_id": 85542090, "body": "I raised <a href=\"https://github.com/sfackler/rust-openssl/issues/878\" rel=\"nofollow noreferrer\">a bug</a> on rust-openssl about this."}], "tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": true, "score": 5, "last_activity_date": 1520990525, "last_edit_date": 1520990525, "creation_date": 1520990273, "answer_id": 49268370, "question_id": 49263452, "link": "https://stackoverflow.com/questions/49263452/how-do-i-statically-link-the-openssl-sys-crate-into-a-shared-library/49268370#49268370", "title": "How do I statically link the openssl-sys crate into a shared library?", "body": "<p>Inspecting the <code>build.rs</code> file supplied with openssl-sys, I noticed two things.</p>\n\n<ol>\n<li><p>If you do not set both <code>OPENSSL_LIB_DIR</code> and <code>OPENSSL_INCLUDE_DIR</code>, then it will try to detect the OpenSSL directories by calling pkg-config. If that succeeds (and it does in my system) then it will exit early, and never even considers the value of <code>OPENSSL_STATIC</code>. </p>\n\n<p>Arguably that's a bug, but I found that if I used this command line:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>OPENSSL_STATIC=1 OPENSSL_LIB_DIR=/usr/lib64 OPENSSL_INCLUDE_DIR=/usr/include/openssl cargo build\n</code></pre>\n\n<p>then it would perform static linking.</p></li>\n<li><p>On my Centos 7 system, it was not enough to install <code>openssl-devel</code>. The static libraries are included in the <code>openssl-static</code> package.</p></li>\n</ol>\n\n<p>Even after all this, it did not successfully build - there were a lot of undefined symbol references. Within the comments in <code>build.rs</code> it states that compilation options used when compiling OpenSSL may affect which API components are available - I assume this is the reason for the link failure. Apparently this is less of a problem from OpenSSL 1.1.0 (my system had 1.0.2).</p>\n\n<p>My advice would be to compile OpenSSL 1.1.0 from source and link against that.</p>\n"}], "owner": {"reputation": 74982, "user_id": 128967, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e6ce48656d5e39227a10b37a51754134?s=128&d=identicon&r=PG", "display_name": "Naftuli Kay", "link": "https://stackoverflow.com/users/128967/naftuli-kay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1683, "favorite_count": 0, "accepted_answer_id": 49268370, "answer_count": 1, "score": 2, "last_activity_date": 1520990525, "creation_date": 1520965959, "last_edit_date": 1520966821, "question_id": 49263452, "link": "https://stackoverflow.com/questions/49263452/how-do-i-statically-link-the-openssl-sys-crate-into-a-shared-library", "title": "How do I statically link the openssl-sys crate into a shared library?", "body": "<p>I am using a library which depends on <a href=\"https://github.com/sfackler/rust-openssl\" rel=\"nofollow noreferrer\">openssl-sys</a>. According to the documentation, if I specify <code>OPENSSL_STATIC=1</code> as an environment variable, OpenSSL will be statically linked into the shared library output. </p>\n\n<p>Due to <a href=\"https://stackoverflow.com/q/49262694/128967\">a host of complicated problems</a>, I need to statically link OpenSSL into my shared library output. </p>\n\n<p>Here is my <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"api\"\nversion = \"0.1.0\"\nauthors = [\"Naftuli Kay &lt;me@naftuli.wtf&gt;\"]\npublish = false\n\n[lib]\nname = \"lambda\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nchrono = { version = \"0.4\", features = [\"serde\"] }\nconstant_time_eq = \"0.1.3\"\ncpython = { version = \"0.1\", default-features = false }\ncrowbar = { version = \"0.2\", default-features = false }\nlibc = \"0.2.29\"\nlazy_static = \"1.0\"\nlog = \"0.4.1\"\nlog4rs = \"0.8.0\"\nopenssl-sys = \"0.9.27\"\nparking_lot =\"0.5.4\"\nrand = \"0.4.2\"\nrusoto_core = \"0.32.0\"\nrusoto_kms = \"0.32.0\"\nserde = \"1.0.27\"\nserde-aux = \"0.5.2\"\nserde_derive = \"1.0.27\"\nserde_json = \"1.0.9\"\nserde_qs = \"0.3.0\"\ntokio = \"0.1.3\"\ntokio-reactor = \"0.1.0\"\n\n[features]\ndefault = [\"cpython/python3-sys\"]\n</code></pre>\n\n<p>Here is my <code>lib.rs</code>:</p>\n\n<pre><code>#[link(name=\"openssl\", kind=\"static\")]\nextern crate openssl_sys;\n</code></pre>\n\n<p>When I look at my <code>liblambda.so</code> produced, I still see it is linked against <code>libssl</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[vagrant@api vagrant]$ OPENSSL_STATIC=1 cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.94 secs\n[vagrant@api vagrant]$ ldd target/debug/liblambda.so | grep -i ssl\n        libssl.so.10 =&gt; /lib64/libssl.so.10 (0x00007faa5f5bf000)\n</code></pre>\n\n<p>I seem to have told it in every way I know how to statically link <code>libssl</code> into the shared library output. </p>\n\n<p>What am I missing?</p>\n"}, {"tags": ["types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520967314, "post_id": 49263160, "comment_id": 85531121, "body": "Thanks. Is there a way to give a single name to a set of traits? In short: can I return &quot;Cake&quot; instead of &quot;Dough + Chocolate&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520967382, "post_id": 49263160, "comment_id": 85531160, "body": "Yes. See <a href=\"https://stackoverflow.com/q/26070559/155423\">Type alias for multiple traits</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1532621491, "last_edit_date": 1532621491, "creation_date": 1520964919, "answer_id": 49263160, "question_id": 49263023, "link": "https://stackoverflow.com/questions/49263023/is-there-a-way-to-signal-that-an-impl-trait-type-also-implements-additional-trai/49263160#49263160", "title": "Is there a way to signal that an impl trait type also implements additional traits?", "body": "<p>Yes, combine multiple traits with a <code>+</code>, just like in trait bounds:</p>\n\n<pre><code>use std::fmt::Debug;\n\ntrait Foo {}\n\nfn new() -&gt; impl Foo + Debug {\n    Dummy\n}\n\n#[derive(Debug)]\nstruct Dummy;\nimpl Foo for Dummy {}\n\nfn main() {\n    println!(\"{:?}\", new());\n}\n</code></pre>\n"}], "owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 49263160, "answer_count": 1, "score": 1, "last_activity_date": 1532621491, "creation_date": 1520964500, "last_edit_date": 1520964765, "question_id": 49263023, "link": "https://stackoverflow.com/questions/49263023/is-there-a-way-to-signal-that-an-impl-trait-type-also-implements-additional-trai", "title": "Is there a way to signal that an impl trait type also implements additional traits?", "body": "<p>I have a function that returns an impl trait:</p>\n\n<pre><code>pub fn new(buf: &amp;[u8]) -&gt; Result&lt;impl Temperature, u8&gt;\n</code></pre>\n\n<p>Is there a way to signal that the underlying struct also implements <code>Debug</code> (via <code>#[derive(...)]</code>), so I can format the value?</p>\n"}, {"tags": ["macros", "rust", "reqwest"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1520962693, "creation_date": 1520962693, "answer_id": 49262520, "question_id": 49262369, "link": "https://stackoverflow.com/questions/49262369/is-there-a-way-i-can-access-a-macro-from-a-dependencys-dependency-without-expli/49262520#49262520", "title": "Is there a way I can access a macro from a dependency&#39;s dependency without explicitly including it?", "body": "<p>No, you must directly import a macro to be able to use it. This is the same behavior as functions, types, and traits. </p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32804217/155423\">Cannot use macros imported in a library in an executable that uses that library</a></li>\n<li><a href=\"https://stackoverflow.com/q/48132095/155423\">Why must I use macros only used by my dependencies</a></li>\n<li><a href=\"https://stackoverflow.com/q/45033782/155423\">Cannot use the `doc!` macro from the mongodb crate in the scope of a sub sub module</a></li>\n</ul>\n"}], "owner": {"reputation": 53, "user_id": 1560585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/99967d8de0060e5df4ed5d3d111b55e3?s=128&d=identicon&r=PG", "display_name": "user1560585", "link": "https://stackoverflow.com/users/1560585/user1560585"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 111, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1520962743, "creation_date": 1520962201, "last_edit_date": 1520962743, "question_id": 49262369, "link": "https://stackoverflow.com/questions/49262369/is-there-a-way-i-can-access-a-macro-from-a-dependencys-dependency-without-expli", "title": "Is there a way I can access a macro from a dependency&#39;s dependency without explicitly including it?", "body": "<p>Reqwest is built on top of Hyper which includes a <code>header!</code> macro to create custom headers. Is there a way I can access the <code>header!</code> macro without explicitly including Hyper as a separate crate? </p>\n\n<pre><code>#[macro_use] extern crate reqwest;\n\nheader! { (XRequestGuid, \"X-Request-Guid\") =&gt; [String] }\n</code></pre>\n\n<blockquote>\n  <p>cannot find macro <code>header!</code> in this scope</p>\n</blockquote>\n"}, {"tags": ["file", "iterator", "rust", "fasta"], "comments": [{"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 2, "creation_date": 1520944836, "post_id": 49255924, "comment_id": 85515880, "body": "There are some crates for parsing FASTA files: <a href=\"https://crates.io/crates/bio\" rel=\"nofollow noreferrer\">bio</a> seems to be me most used one, is that enough for you ?"}, {"owner": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "reply_to_user": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 0, "creation_date": 1520945212, "post_id": 49255924, "comment_id": 85516130, "body": "they have implemented what I am looking for now I have to understand it. thanks"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1520945818, "post_id": 49255924, "comment_id": 85516548, "body": "@RomainL. One strength of Rust is the ease of use extern crate. Do not forget to search if something already exists before reinventing the wheel."}], "answers": [{"comments": [{"owner": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "edited": false, "score": 1, "creation_date": 1520946052, "post_id": 49256785, "comment_id": 85516719, "body": "Usually I use what exist but in this case is because I&#39;am trying to learn. I have a question relative to your answer: It seems to me that you reading the file and push all struct in a Vec&lt;FastaSeq&gt;. Does it is possible to make an iterator over the bufReader? When dealing on very large file you want to avoid put all in memory."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "edited": false, "score": 1, "creation_date": 1520955009, "post_id": 49256785, "comment_id": 85523327, "body": "@RomainL. Yes, you can. You can read a file line by line: see <a href=\"https://stackoverflow.com/questions/31192956/whats-the-de-facto-way-of-reading-and-writing-files-in-rust-1-x\">this question</a> Buffered read is useful if you have <b>very large files</b>, like in the order of GBytes."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 0, "last_activity_date": 1520945674, "creation_date": 1520945674, "answer_id": 49256785, "question_id": 49255924, "link": "https://stackoverflow.com/questions/49255924/what-should-be-the-code-design-to-use-to-iterate-over-a-fasta-file-and-return-a/49256785#49256785", "title": "What should be the code design to use to iterate over a FASTA file and return a struct?", "body": "<p>As said in a comment, the better is to use <a href=\"https://rust-bio.github.io/\" rel=\"nofollow noreferrer\">an existing crate</a>. If you want <strong>absolutely</strong> write your own code, you must try something like:</p>\n\n<pre><code>use std::io::Read;\nuse std::fs::File;\n\nstruct FastaSeq {\n    identifier: String,\n    sequence: String,\n}\n\nfn main() {\n    fn process_file(file_name: &amp;str) -&gt; Result&lt;Vec&lt;FastaSeq&gt;, std::io::Error&gt; {\n        let mut lines = String::new();\n        File::open(file_name)?.read_to_string(&amp;mut lines)?;\n        let mut ret = Vec::new();\n        let mut lines = lines.split('\\n');\n\n        // I assume that the first line begin with '&gt;'\n        while let Some(line) = lines.by_ref().next() {\n            ret.push(FastaSeq {\n                identifier: line.into(),\n                sequence: lines\n                    .by_ref()\n                    .take_while(|s| s.chars().next().map(|c| c != '&gt;').unwrap_or(false))\n                    .collect(),\n            });\n        }\n        Ok(ret)\n    }\n\n    if let Err(e) = process_file(\"your file\") {\n        println!(\"An error occured: {}\", e);\n        std::process::exit(1);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "is_accepted": false, "score": 0, "last_activity_date": 1521014688, "last_edit_date": 1521014688, "creation_date": 1520957741, "answer_id": 49260972, "question_id": 49255924, "link": "https://stackoverflow.com/questions/49255924/what-should-be-the-code-design-to-use-to-iterate-over-a-fasta-file-and-return-a/49260972#49260972", "title": "What should be the code design to use to iterate over a FASTA file and return a struct?", "body": "<p>I managed to get something working. It's clearly a beginner-level implementation but it works. </p>\n\n<pre><code>struct FastaSeq {\n    identifier: String,\n    sequence: String,\n}\n\n// come from: https://docs.rs/bio/0.17.0/src/bio/io/fasta.rs.html#7-1013\nstruct FastaReader&lt;R: io::Read&gt; {\n    reader: io::BufReader&lt;R&gt;,\n}\n\n// come from: https://docs.rs/bio/0.17.0/src/bio/io/fasta.rs.html#7-1013\nimpl&lt;R: io::Read&gt; FastaReader&lt;R&gt; {\n    /// Create a new Fasta reader given an instance of `io::Read`.\n    pub fn new(reader: R) -&gt; Self {\n        FastaReader {\n            reader: io::BufReader::new(reader),\n        }\n    }\n}\n\nimpl&lt;B: BufRead&gt; Iterator for FastaReader&lt;B&gt; {\n    type Item = Result&lt;FastaSeq, io::Error&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Result&lt;FastaSeq, io::Error&gt;&gt; {\n        let mut this_string = String::new();\n        let mut buf = vec![];\n        match self.reader.read_until(b'&gt;', &amp;mut buf) {\n            Ok(0) =&gt; None,\n\n            Ok(my_buf) =&gt; {\n                this_string = from_utf8(&amp;buf).unwrap().to_string();\n                if this_string == \"&gt;\" {\n                    self.reader.read_until(b'&gt;', &amp;mut buf);\n                    this_string = from_utf8(&amp;buf).unwrap().to_string();\n                }\n                this_string = this_string.trim_matches('&gt;').to_string();\n\n                let split_str = this_string.split(\"\\n\");\n                let split_vec = split_str.collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n                let identifier = split_vec[0];\n                let sequence = split_vec[1..].join(\"\");\n                return Some(Ok(FastaSeq {\n                    identifier: identifier.to_string(),\n                    sequence: sequence.to_string(),\n                }));\n            }\n\n            Err(e) =&gt; Some(Err(e)),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 269, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1521014688, "creation_date": 1520943205, "last_edit_date": 1520945347, "question_id": 49255924, "link": "https://stackoverflow.com/questions/49255924/what-should-be-the-code-design-to-use-to-iterate-over-a-fasta-file-and-return-a", "title": "What should be the code design to use to iterate over a FASTA file and return a struct?", "body": "<p>I'm working on FASTA files. FASTA files are used in biology to store sequences.</p>\n\n<blockquote>\n  <p>>sequence1 identifier (a string)</p>\n  \n  <p>sequence on one or several line (a string)</p>\n  \n  <p>...</p>\n  \n  <p>>last sequence identifier (a string)</p>\n  \n  <p>the sequence on one or several line (a string)</p>\n</blockquote>\n\n<p>I want to make an iterator that returns a struct while reading the file:</p>\n\n<pre><code>struct fasta_seq {\n    identifier: String,\n    sequence: String,\n}\n</code></pre>\n\n<p>In Python, it's easy. This code returns a tuple but the idea is the same</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def get_seq_one_by_one(file_):\n    \"\"\"Generator return prompt sequence for each sequence\"\"\"\n\n   sequence = ''\n   prompt = ''\n\n   for line in file_:\n\n       if line.startswith('&gt;'):\n\n           if sequence:\n               yield (prompt, sequence)\n\n           sequence = ''\n           prompt = line.strip()[1:]\n\n       else:\n            sequence += line.strip()\n\n   yield (prompt, sequence)\n</code></pre>\n\n<p>This is convenient and allows me to make clearer code because I can iterate through the file with a simple for loop.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>for identifier, sequence in get_seq_one_by_one(open_file):\n    do\n</code></pre>\n\n<p>I found similar topics:</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/25410028/how-to-read-a-struct-from-a-file-in-rust\">How to read a struct from a file in Rust?</a></p></li>\n<li><p><a href=\"https://users.rust-lang.org/t/file-reading-iterator/613\" rel=\"nofollow noreferrer\">https://users.rust-lang.org/t/file-reading-iterator/613</a></p></li>\n</ul>\n\n<p>If I understand correctly, they know the size of the buffer to read.\nIn my case I don't know it because the identifier and/or sequence length may change.</p>\n\n<p>I have checked and using Rust's <code>yield</code> seems to not be a great idea, because is described as unstable.</p>\n\n<p>I do not want you to code in my place, I am trying to learn by rewriting a script I have done in Python in Rust. I don't know what to use here to answer my problem. </p>\n\n<p>If you can point out the overall idea how to achieve this goal, it would be really nice. If there is no need for unsafe code it will be even better.</p>\n"}, {"tags": ["rust", "future", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 331, "user_id": 607523, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c5db78fbfddbb2ddf9a429338e9c0580?s=128&d=identicon&r=PG", "display_name": "edrevo", "link": "https://stackoverflow.com/users/607523/edrevo"}, "edited": false, "score": 3, "creation_date": 1575876068, "post_id": 49267241, "comment_id": 104698690, "body": "<code>loop_fn</code> doesn&#39;t seem to exist in futures 0.3 anymore, unfortunately"}], "tags": [], "owner": {"reputation": 121, "user_id": 5327218, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec9913c411058f1730f9c80e10cf91f?s=128&d=identicon&r=PG", "display_name": "Joel Dice", "link": "https://stackoverflow.com/users/5327218/joel-dice"}, "is_accepted": false, "score": 1, "last_activity_date": 1520989223, "last_edit_date": 1520989223, "creation_date": 1520982144, "answer_id": 49267241, "question_id": 49254699, "link": "https://stackoverflow.com/questions/49254699/how-do-i-schedule-a-repeating-task-in-tokio/49267241#49267241", "title": "How do I schedule a repeating task in Tokio?", "body": "<p>Using <a href=\"https://docs.rs/futures/0.2.0-alpha/futures/future/fn.loop_fn.html\" rel=\"nofollow noreferrer\"><code>loop_fn</code></a> should work:</p>\n\n<pre><code>let read_task =\n    futures::future::loop_fn((socket, in_buf, 0), |(socket, in_buf, bytes_read)| {\n        if bytes_read &gt; 0 { /* handle bytes */ }\n\n        tokio::io::read(socket, in_buf).map(Loop::Continue)\n    });\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 801, "user_id": 1364755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/718e0543b3f4792aca11a852c0ac0742?s=128&d=identicon&r=PG", "display_name": "Nicholas Rishel", "link": "https://stackoverflow.com/users/1364755/nicholas-rishel"}, "is_accepted": false, "score": 0, "last_activity_date": 1554766122, "creation_date": 1554766122, "answer_id": 55583137, "question_id": 49254699, "link": "https://stackoverflow.com/questions/49254699/how-do-i-schedule-a-repeating-task-in-tokio/55583137#55583137", "title": "How do I schedule a repeating task in Tokio?", "body": "<p>A clean way to accomplish this and not have to fight the type system is to use <a href=\"https://crates.io/crates/tokio-codec\" rel=\"nofollow noreferrer\"><code>tokio-codec</code></a> crate; if you want to interact with the reader as a stream of bytes instead of defining a codec you can use <code>tokio_codec::BytesCodec</code>.</p>\n\n<pre><code>use tokio::codec::Decoder;\nuse futures::Stream;\n...\n\nlet tokio::net::listener = TcpListener::bind(&amp;sock_addr).unwrap();\nlet server_task = listener.incoming().for_each(move |socket| {\n    let (_writer, reader) = tokio_codec::BytesCodec::new().framed(socket).split();\n    let read_task = reader.for_each(|bytes| {\n            /* ... Logic I want to happen repeatedly as bytes are read ... */\n    });\n    tokio::spawn(read_task);\n    Ok(())\n}).map_err(|err| {\n    error!(\"Accept error = {:?}\", err);\n});\ntokio::run(server_task);\n</code></pre>\n"}], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1885, "favorite_count": 2, "answer_count": 2, "score": 4, "last_activity_date": 1554766122, "creation_date": 1520939493, "last_edit_date": 1520946533, "question_id": 49254699, "link": "https://stackoverflow.com/questions/49254699/how-do-i-schedule-a-repeating-task-in-tokio", "title": "How do I schedule a repeating task in Tokio?", "body": "<p>I am replacing synchronous socket code written in Rust with the asynchronous equivalent using Tokio. Tokio uses futures for asynchronous activity so tasks are chained together and queued onto an executor to be executed by a thread pool.</p>\n\n<p>The basic pseudocode for what I want to do is like this:</p>\n\n<pre><code>let tokio::net::listener = TcpListener::bind(&amp;sock_addr).unwrap();\nlet server_task = listener.incoming().for_each(move |socket| {\n    let in_buf = vec![0u8; 8192];\n    // TODO this should happen continuously until an error happens\n    let read_task = tokio::io::read(socket, in_buf).and_then(move |(socket, in_buf, bytes_read)| {\n        /* ... Logic I want to happen repeatedly as bytes are read ... */\n        Ok(())\n    };\n    tokio::spawn(read_task);\n    Ok(())\n}).map_err(|err| {\n    error!(\"Accept error = {:?}\", err);\n});\ntokio::run(server_task);\n</code></pre>\n\n<p>This pseudocode would only execute my task once. How do I run it continuously? I want it to execute and then execute again and again etc. I only want it to stop executing if it panics or has an error result code. What's the simplest way of doing that?</p>\n"}, {"tags": ["rust", "benchmarking"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user9128740"}, "edited": false, "score": 0, "creation_date": 1520950642, "post_id": 49255777, "comment_id": 85520065, "body": "Thanks for the info. No, I was not looking to a manual solution as writing a wrapper, something more automatic."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1520942791, "creation_date": 1520942791, "answer_id": 49255777, "question_id": 49253496, "link": "https://stackoverflow.com/questions/49253496/is-it-possible-to-change-rust-benchmark-results-to-a-different-time-unit/49255777#49255777", "title": "Is it possible to change Rust benchmark results to a different time unit?", "body": "<p>No, it is not possible. </p>\n\n<p>Unless you want to write a wrapper script that runs a regex and replaces the numbers after dividing them, but I doubt that\u2019s what you meant. </p>\n\n<p>There are 10^9 nanoseconds in a second. </p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user9128740"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "accepted_answer_id": 49255777, "answer_count": 1, "score": 1, "last_activity_date": 1520942822, "creation_date": 1520936079, "last_edit_date": 1520942822, "question_id": 49253496, "link": "https://stackoverflow.com/questions/49253496/is-it-possible-to-change-rust-benchmark-results-to-a-different-time-unit", "title": "Is it possible to change Rust benchmark results to a different time unit?", "body": "<p>I just ran some Rust benchmarks and I see that the results are always displayed in <code>ns</code>. Is is possible to change the time units of the benchmark to something else? For example, to <code>ms</code>?</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1520926714, "post_id": 49250607, "comment_id": 85504554, "body": "<code>phineas.insert(&quot;father&quot;, lawrence);</code> did you mean &quot;lawrence&quot;? Elsewise there is your problem, that you can&#39;t insert two different types into the same hashmap"}], "answers": [{"tags": [], "owner": {"reputation": 199, "user_id": 8572843, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Jf3W8.png?s=128&g=1", "display_name": "gotocoffee", "link": "https://stackoverflow.com/users/8572843/gotocoffee"}, "is_accepted": false, "score": 0, "last_activity_date": 1520945505, "last_edit_date": 1520945505, "creation_date": 1520927116, "answer_id": 49250768, "question_id": 49250607, "link": "https://stackoverflow.com/questions/49250607/cannot-add-a-value-other-than-a-string-to-a-nested-hashmap/49250768#49250768", "title": "Cannot add a value other than a string to a nested hashmap", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a> is a generic. When you insert the first time the compiler determines the type and won't let you use another type.</p>\n\n<pre><code>pub struct HashMap&lt;K, V, S = RandomState&gt; { /* fields omitted */ }\n\npub fn insert(&amp;mut self, k: K, v: V) -&gt; Option&lt;V&gt;\n</code></pre>\n\n<p><code>V</code> is the type of your values and <code>K</code> the type of the keys. Since Rust has a static type system, this must be considered.</p>\n"}, {"comments": [{"owner": {"reputation": 3638, "user_id": 114904, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8e7f89dbe697baaef1fb80098f6db29d?s=128&d=identicon&r=PG", "display_name": "MichielB", "link": "https://stackoverflow.com/users/114904/michielb"}, "edited": false, "score": 0, "creation_date": 1520927873, "post_id": 49250873, "comment_id": 85505154, "body": "Yes, I come from dynamic languages; I know I was making a rookie mistake here; thanks for the pointers!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1520927552, "creation_date": 1520927552, "answer_id": 49250873, "question_id": 49250607, "link": "https://stackoverflow.com/questions/49250607/cannot-add-a-value-other-than-a-string-to-a-nested-hashmap/49250873#49250873", "title": "Cannot add a value other than a string to a nested hashmap", "body": "<p>I'm assuming you're coming from a dynamically-typed language.  In that case, you <em>really</em> need to read through the <a href=\"https://doc.rust-lang.org/book/first-edition/\" rel=\"nofollow noreferrer\">Rust Book</a>, as Rust is a <em>very</em> different beast.  Rust is statically typed, so what you're trying to do here is pretty much just not going to work, and definitely isn't how you're meant to use the language.</p>\n\n<p>In this particular case, there's no easy answer because I don't know what your goal here is.  Data structure modelling in Rust is done through a combination of <a href=\"https://doc.rust-lang.org/book/first-edition/structs.html\" rel=\"nofollow noreferrer\"><code>struct</code></a>s, <a href=\"https://doc.rust-lang.org/book/first-edition/enums.html\" rel=\"nofollow noreferrer\"><code>enum</code></a>s, collections like <code>Vec</code> and <code>HashMap</code>, utility types like <code>Option</code>, and the various pointer types like <code>Box</code>, <code>Rc</code>, <em>etc.</em>  What specific combination of these you need is down to what you're trying to represent, how you intend to build it, and how you intend to use it.</p>\n\n<p>One <em>possible</em> formulation would be:</p>\n\n<pre><code>struct Person {\n    kind: PersonKind,\n    name: String,\n    father: Option&lt;Box&lt;Person&gt;&gt;,\n}\n\nenum PersonKind {\n    Boy,\n    Man,\n}\n</code></pre>\n"}], "owner": {"reputation": 3638, "user_id": 114904, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8e7f89dbe697baaef1fb80098f6db29d?s=128&d=identicon&r=PG", "display_name": "MichielB", "link": "https://stackoverflow.com/users/114904/michielb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 189, "favorite_count": 0, "accepted_answer_id": 49250873, "answer_count": 2, "score": 0, "last_activity_date": 1520945505, "creation_date": 1520926460, "last_edit_date": 1520945479, "question_id": 49250607, "link": "https://stackoverflow.com/questions/49250607/cannot-add-a-value-other-than-a-string-to-a-nested-hashmap", "title": "Cannot add a value other than a string to a nested hashmap", "body": "<p>I want to create a <code>HashMap</code> with a nested structure like this convoluted example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{\n   type: boy\n   name: Phineas\n   father:\n       type: man\n       name: Lawrence\n}\n</code></pre>\n\n<p>In Rust, this would be:</p>\n\n<pre><code>use std::collections::HashMap;\n\nlet mut lawrence = HashMap::new();\nlawrence.insert(\"type\", \"man\");\nlawrence.insert(\"name\", \"Lawrence\");\nlet mut phineas = HashMap::new();\nphineas.insert(\"type\", \"boy\");\nphineas.insert(\"name\", \"Phineas\");\nphineas.insert(\"father\", lawrence);\n</code></pre>\n\n<p>But <code>HashMap</code> values only can be strings, it seems; if I try to compile I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>expected &amp;str, found struct `std::collections::HashMap`\n</code></pre>\n\n<p>I checked the documentation but could not find an easy solution to build up a similar data structure.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1520926513, "post_id": 49250494, "comment_id": 85504456, "body": "It&#39;s the same question as the one you linked. The type for the sequence is given in that question as well (it is <code>Range&lt;i32&gt;</code>)."}, {"owner": {"reputation": 1463, "user_id": 3055694, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26f026d096c8019ceb5dc1331485027a?s=128&d=identicon&r=PG&f=1", "display_name": "tahsmith", "link": "https://stackoverflow.com/users/3055694/tahsmith"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1521505842, "post_id": 49250494, "comment_id": 85750318, "body": "I confirmed with the Rust by Example team that it is a typo error."}], "answers": [{"comments": [{"owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "edited": false, "score": 0, "creation_date": 1520936842, "post_id": 49250749, "comment_id": 85510704, "body": "Doesn&#39;t that read &quot;specifying the type of <b>intermediate_sums</b>&quot;, ie the array being summed, not the sum result? OP already does that"}, {"owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "reply_to_user": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "edited": false, "score": 0, "creation_date": 1520939828, "post_id": 49250749, "comment_id": 85512558, "body": "hmmm, I&#39;m not sure. Even with <b>intermediate_sums</b> as <code>Vec&lt;u32&gt;</code>, the compiler still cannot infer type and gives a suggestion &quot;consider giving <code>final_result</code> a type&quot;"}], "tags": [], "owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "is_accepted": true, "score": 1, "last_activity_date": 1520927013, "creation_date": 1520927013, "answer_id": 49250749, "question_id": 49250494, "link": "https://stackoverflow.com/questions/49250494/why-cant-rust-infer-the-result-of-sum-when-given-an-explicit-type-of-a-sequence/49250749#49250749", "title": "Why can&#39;t Rust infer the result of sum when given an explicit type of a sequence", "body": "<blockquote>\n  <p>This seems to be implying that this should be possible. Or have I misinterpreted this suggestion?</p>\n</blockquote>\n\n<p>I think it's a misinterpretation.</p>\n\n<pre><code>// TODO: try without the turbofish, by instead explicitly\n// specifying the type of intermediate_sums\nlet final_result = intermediate_sums.iter().sum::&lt;u32&gt;();\n</code></pre>\n\n<p>It says you can do without the turbo fish by <strong>explicitly specifying the type</strong>, that is by doing:</p>\n\n<pre><code>let final_result: u32 = intermediate_sums.iter().sum();\n</code></pre>\n\n<p>In this respect, your main function can be written as:</p>\n\n<pre><code>fn main() {\n    let l: Vec&lt;u32&gt; = vec![];\n    let s: u32 = l.iter().sum();\n    println!(\"{:?}\", s);\n}\n</code></pre>\n"}], "owner": {"reputation": 1463, "user_id": 3055694, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26f026d096c8019ceb5dc1331485027a?s=128&d=identicon&r=PG&f=1", "display_name": "tahsmith", "link": "https://stackoverflow.com/users/3055694/tahsmith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 371, "favorite_count": 0, "closed_date": 1520942963, "accepted_answer_id": 49250749, "answer_count": 1, "score": 0, "last_activity_date": 1520927013, "creation_date": 1520926074, "question_id": 49250494, "link": "https://stackoverflow.com/questions/49250494/why-cant-rust-infer-the-result-of-sum-when-given-an-explicit-type-of-a-sequence", "closed_reason": "Duplicate", "title": "Why can&#39;t Rust infer the result of sum when given an explicit type of a sequence", "body": "<p>The following code is unable to deduce the type of s</p>\n\n<pre><code>fn main() {\n    let l: Vec&lt;u32&gt; = vec![];\n    let s = l.iter().sum();\n    println!(\"{:?}\", s);\n}\n</code></pre>\n\n<p>This is motivated by something in Rust by Example <a href=\"https://rustbyexample.com/std_misc/threads/testcase_mapreduce.html\" rel=\"nofollow noreferrer\">https://rustbyexample.com/std_misc/threads/testcase_mapreduce.html</a> </p>\n\n<pre><code>// collect each thread's intermediate results into a new Vec\nlet mut intermediate_sums = vec![];\nfor child in children {\n    // collect each child thread's return-value\n    let intermediate_sum = child.join().unwrap();\n    intermediate_sums.push(intermediate_sum);\n}\n\n// combine all intermediate sums into a single final sum.\n//\n// we use the \"turbofish\" ::&lt;&gt; to provide sum() with a type hint.\n//\n// TODO: try without the turbofish, by instead explicitly\n// specifying the type of intermediate_sums\nlet final_result = intermediate_sums.iter().sum::&lt;u32&gt;();\n</code></pre>\n\n<p>This seems to be implying that this should be possible. Or have I misinterpreted this suggestion?</p>\n\n<p>N.B. I see some related ticket e.g., <a href=\"https://stackoverflow.com/questions/41017140/why-cant-rust-infer-the-resulting-type-of-iteratorsum\">Why can&#39;t Rust infer the resulting type of Iterator::sum?</a>, however in that case there is no type given for the sequence.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1520922042, "creation_date": 1520922042, "answer_id": 49249517, "question_id": 49249380, "link": "https://stackoverflow.com/questions/49249380/can-a-struct-implement-two-traits-with-conflicting-method-names-in-rust/49249517#49249517", "title": "Can a struct implement two traits with conflicting method names in Rust?", "body": "<p>You want <a href=\"https://doc.rust-lang.org/book/first-edition/ufcs.html\" rel=\"noreferrer\">universal function call syntax</a>.  The following are all equivalent:</p>\n\n<pre><code>let v = 32;\nlet _ = v.clone();\nlet _ = Clone::clone(&amp;v);\nlet _ = &lt;i32 as Clone&gt;::clone(&amp;v);\n</code></pre>\n"}], "owner": {"reputation": 99733, "user_id": 165495, "user_type": "registered", "accept_rate": 91, "profile_image": "https://graph.facebook.com/219001761/picture?type=large", "display_name": "Casebash", "link": "https://stackoverflow.com/users/165495/casebash"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 842, "favorite_count": 0, "closed_date": 1520944342, "accepted_answer_id": 49249517, "answer_count": 1, "score": 1, "last_activity_date": 1520944364, "creation_date": 1520921463, "question_id": 49249380, "link": "https://stackoverflow.com/questions/49249380/can-a-struct-implement-two-traits-with-conflicting-method-names-in-rust", "closed_reason": "Duplicate", "title": "Can a struct implement two traits with conflicting method names in Rust?", "body": "<p>Is it possible to implement two traits with conflicting method names in Rust? I know that it gives you a <code>multiple applicable methods in scope</code> error, but is there a way to resolve this? For example, some languages handle multiple inheritance by allowing you to explicitly specify which one method should take precedence</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1520921663, "creation_date": 1520921663, "answer_id": 49249429, "question_id": 49249085, "link": "https://stackoverflow.com/questions/49249085/match-inside-macro-rules-can-not-use/49249429#49249429", "title": "match inside macro_rules - can not use &#39;_&#39;", "body": "<p>Consider what happens when you <em>expand</em> that macro.  The <code>match</code> in question will look like:</p>\n\n<pre><code>let obj = match s {\n    \"a\" =&gt; Foo::Aa , \"b\" =&gt; Foo::Bb\n        _ =&gt; {}\n};\n</code></pre>\n\n<p>Note the lack of a comma between the <code>\"b\"</code> and <code>_</code> arms.  The simplest fix is to ensure there's always a comma after each arm:</p>\n\n<pre><code>let obj = match s {\n    $($StrVar =&gt; $Name::$Variant,)*\n    _ =&gt; return Err(BaseError)\n};\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 238, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1520933414, "creation_date": 1520920024, "last_edit_date": 1520933414, "question_id": 49249085, "link": "https://stackoverflow.com/questions/49249085/match-inside-macro-rules-can-not-use", "title": "match inside macro_rules - can not use &#39;_&#39;", "body": "<p>I am trying to define macro for simplification of creation of enum\nthat is possible convert to/from str:</p>\n\n<pre><code>macro_rules! define_enum_with_str_values {\n    ($Name:ident { $($Variant:ident =&gt; $StrVar:expr),* $(,)* }) =&gt; {\n        #[derive(Debug, Clone, Copy, PartialEq)]\n        pub enum $Name {\n            $($Variant),*,\n        }\n        impl Into&lt;&amp;'static str&gt; for $Name {\n            fn into(self) -&gt; &amp;'static str {\n                match self {\n                    $($Name::$Variant =&gt; $StrVar),*\n                }\n            }\n        }\n        impl FromStr for $Name {\n            type Err = BaseError;\n            fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n                let obj = match s {\n                    $($StrVar =&gt; $Name::$Variant),*\n                };\n                Ok(obj)\n            }\n        }\n    }\n}\n\ndefine_enum_with_str_values!(Foo { Aa =&gt; \"a\", Bb =&gt; \"b\" });\n</code></pre>\n\n<p>This code doesn't compiled, because of I did not define <code>'_'</code> rule,\nbut if I define <code>'_'</code> rule:</p>\n\n<pre><code>    impl FromStr for $Name {\n        type Err = BaseError;\n        fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n            let obj = match s {\n                $($StrVar =&gt; $Name::$Variant),*\n                    _ =&gt; {}\n            };\n            Ok(obj)\n        }\n    }\n</code></pre>\n\n<p>I got such compile time error:</p>\n\n<pre><code>error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator, found `_`\n  --&gt; foo.rs:74:25\n   |\n73 |                     $($StrVar =&gt; $Name::$Variant),*\n   |                                                 - expected one of 8 possible tokens here\n74 |                         _ =&gt; {}\n   |                         ^ unexpected token\n...\n82 | define_enum_with_str_values!(Foo { Aa =&gt; \"a\", Bb =&gt; \"b\" });\n   | ----------------------------------------------------------- in this macro invocation\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 2, "last_activity_date": 1520945804, "last_edit_date": 1520945804, "creation_date": 1520926445, "answer_id": 49250596, "question_id": 49247879, "link": "https://stackoverflow.com/questions/49247879/mutably-borrowing-in-match-statement-and-result/49250596#49250596", "title": "Mutably borrowing in match statement and result", "body": "<p>Put the change in a function, and use early return instead of an <code>else</code> branch:</p>\n\n<pre><code>fn find_val_or_insert(container: &amp;mut Vec&lt;i32&gt;, to_find: i32) {\n    if let Some(x) = find_val(&amp;container, to_find) {\n        println!(\"Found {}\", x);\n        return; // &lt;- return here instead of an else branch\n    }\n    container.push(to_find);\n    println!(\"Added {}\", to_find);\n}\n</code></pre>\n\n<p>See also <a href=\"https://stackoverflow.com/questions/49067348/mutable-borrow-more-than-once/49068081\">Mutable borrow more than once</a> and <a href=\"https://stackoverflow.com/questions/47395171/how-to-update-or-insert-on-a-vec\">How to update-or-insert on a Vec?</a></p>\n"}], "owner": {"reputation": 746, "user_id": 2480711, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2cf2031176ea40b5be577a9a1b025ada?s=128&d=identicon&r=PG", "display_name": "dempzorz", "link": "https://stackoverflow.com/users/2480711/dempzorz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 540, "favorite_count": 0, "accepted_answer_id": 49250596, "answer_count": 1, "score": 2, "last_activity_date": 1520945804, "creation_date": 1520911945, "last_edit_date": 1520945731, "question_id": 49247879, "link": "https://stackoverflow.com/questions/49247879/mutably-borrowing-in-match-statement-and-result", "title": "Mutably borrowing in match statement and result", "body": "<p>I'm trying to determine if a container has an object and return the found object if it does, or add it if it doesn't.</p>\n\n<p>I've found <a href=\"https://stackoverflow.com/questions/26908383/rust-borrow-mutable-self-inside-match-expression\">Rust borrow mutable self inside match expression</a>\nwhich has an answer which says what I am trying to do can't (couldn't?) be done.</p>\n\n<p>In my situation, I've got some objects that have vectors of children. I don't want to expose the internals of my object, because I may want to change the representation underneath.  </p>\n\n<p><a href=\"https://stackoverflow.com/questions/43023441/how-can-you-resolve-the-need-to-mutably-borrow-in-different-match-arms-in-rust/\">How can you resolve the need to mutably borrow in different match arms in Rust?</a> seems to suggest I may be able to do what I want if I get the lifetimes correct, but I haven't been able to figure out how.</p>\n\n<p>Here's a representation of the issue I'm having:</p>\n\n<pre><code>fn find_val&lt;'a&gt;(container: &amp;'a mut Vec&lt;i32&gt;, to_find: i32) -&gt; Option&lt;&amp;'a mut i32&gt; {\n    for item in container.iter_mut() {\n        if *item == to_find {\n            return Some(item);\n        }\n    }\n\n    None\n}\n\nfn main() {\n    let mut container = Vec::&lt;i32&gt;::new();\n    container.push(1);\n    container.push(2);\n    container.push(3);\n\n    let to_find = 4;\n\n    match find_val(&amp;mut container, to_find) {\n        Some(x) =&gt; {\n            println!(\"Found {}\", x);\n        }\n        _ =&gt; {\n            container.push(to_find);\n            println!(\"Added {}\", to_find);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d97d531b2c7d0c6a3fb793efed4c186b&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `container` as mutable more than once at a time\n  --&gt; src/main.rs:24:13\n   |\n19 |     match find_val(&amp;mut container, to_find) {\n   |                         --------- first mutable borrow occurs here\n...\n24 |             container.push(to_find);\n   |             ^^^^^^^^^ second mutable borrow occurs here\n...\n27 |     }\n   |     - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "edited": false, "score": 0, "creation_date": 1521237509, "post_id": 49250642, "comment_id": 85662218, "body": "I think the better approach is to run <code>rustc --version -v</code> and  parse output (btw this is exactly what <code>rustc_version</code> does)"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 3, "last_activity_date": 1520926555, "creation_date": 1520926555, "answer_id": 49250642, "question_id": 49247618, "link": "https://stackoverflow.com/questions/49247618/check-whether-compiler-is-nightly-at-compile-time/49250642#49250642", "title": "Check whether compiler is nightly at compile time", "body": "<p>There are two options that I'm aware of.</p>\n\n<p>1.\nUse a feature for this in your <a href=\"https://github.com/serde-rs/serde/blob/master/serde/Cargo.toml#L45\" rel=\"nofollow noreferrer\">Cargo.toml</a> and use it in your code like this: <a href=\"https://github.com/serde-rs/serde/blob/master/serde/src/lib.rs#L89\" rel=\"nofollow noreferrer\"><code>#![cfg_attr(feature = \"unstable\", feature(nonzero, specialization))]</code></a></p>\n\n<p>2.\nUse a build.rs file and check the environment variable <a href=\"https://github.com/rust-lang-nursery/rls/blob/master/build.rs#L38\" rel=\"nofollow noreferrer\">CFG_RELEASE_CHANNEL</a>. Beware, that I can't find it in the official <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html\" rel=\"nofollow noreferrer\">Documentation</a>, so try it out beforehand.</p>\n"}, {"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 4, "last_activity_date": 1520927027, "creation_date": 1520927027, "answer_id": 49250753, "question_id": 49247618, "link": "https://stackoverflow.com/questions/49247618/check-whether-compiler-is-nightly-at-compile-time/49250753#49250753", "title": "Check whether compiler is nightly at compile time", "body": "<p>You can do it with the <a href=\"https://crates.io/crates/rustc_version\" rel=\"nofollow noreferrer\">rustc_version</a> crate and a build.rs script:</p>\n\n<pre><code>extern crate rustc_version;\nuse rustc_version::{version_meta, Channel}\n\nfn main() {\n    // Set cfg flags depending on release channel\n    match version_meta().unwrap().channel {\n        Channel::Stable =&gt; {\n            println!(\"cargo:rustc-cfg=RUSTC_IS_STABLE\");\n        }\n        Channel::Beta =&gt; {\n            println!(\"cargo:rustc-cfg=RUSTC_IS_BETA\");\n        }\n        Channel::Nightly =&gt; {\n            println!(\"cargo:rustc-cfg=RUSTC_IS_NIGHTLY\");\n        }\n        Channel::Dev =&gt; {\n            println!(\"cargo:rustc-cfg=RUSTC_IS_DEV\");\n        }\n    }\n}\n</code></pre>\n\n<p>Then check it with <code>#[cfg(feature = \"RUSTC_IS_STABLE\")]</code></p>\n"}], "owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1242, "favorite_count": 0, "closed_date": 1520952174, "accepted_answer_id": 49250753, "answer_count": 2, "score": 3, "last_activity_date": 1521235071, "creation_date": 1520910007, "last_edit_date": 1521235071, "question_id": 49247618, "link": "https://stackoverflow.com/questions/49247618/check-whether-compiler-is-nightly-at-compile-time", "closed_reason": "Needs more focus", "title": "Check whether compiler is nightly at compile time", "body": "<p>That is it: how do I know whether the project is building by nightly or stable compiler? Something like this: </p>\n\n<pre><code>#[cfg(nightly_build)]\nuse std::ptr::Shared; // on nightly use system's version\n\n#[cfg(not(nightly_build))]\nuse myshared::Shared; // on stable use my unoptimized Shared\n</code></pre>\n"}, {"tags": ["asynchronous", "rust", "stdio", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 572, "user_id": 542747, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d427162f12a3dfec0d036378338114a?s=128&d=identicon&r=PG", "display_name": "Ruslan Prokopchuk", "link": "https://stackoverflow.com/users/542747/ruslan-prokopchuk"}, "edited": false, "score": 0, "creation_date": 1520900761, "post_id": 49246125, "comment_id": 85496630, "body": "Thanks! I think it will not work well with new tokio yet (<a href=\"https://github.com/alexcrichton/tokio-process/issues/27\" rel=\"nofollow noreferrer\">github.com/alexcrichton/tokio-process/issues/27</a>) which I want to use to leverage its runtime feature. I&#39;ll update my question with that clarification."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user9482405"}, "is_accepted": false, "score": 2, "last_activity_date": 1520898332, "creation_date": 1520898332, "answer_id": 49246125, "question_id": 49245907, "link": "https://stackoverflow.com/questions/49245907/how-to-read-subprocess-output-asynchronously/49246125#49246125", "title": "How to read subprocess output asynchronously", "body": "<p>The <a href=\"https://docs.rs/tokio-process\" rel=\"nofollow noreferrer\"><code>tokio-process</code></a> crate provides you with a <code>CommandExt</code> trait that allows you to spawn a command asynchronously.</p>\n\n<p>The resulting <code>Child</code> has a getter for <code>ChildStdout</code> which implements <code>Read</code> and is non-blocking.</p>\n\n<p>Wrapping <code>tokio_process::ChildStdout</code> into <code>AllowStdIo</code> as you did in your example should make it work!</p>\n"}], "owner": {"reputation": 572, "user_id": 542747, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d427162f12a3dfec0d036378338114a?s=128&d=identicon&r=PG", "display_name": "Ruslan Prokopchuk", "link": "https://stackoverflow.com/users/542747/ruslan-prokopchuk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1108, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1520903804, "creation_date": 1520896836, "last_edit_date": 1520903804, "question_id": 49245907, "link": "https://stackoverflow.com/questions/49245907/how-to-read-subprocess-output-asynchronously", "title": "How to read subprocess output asynchronously", "body": "<p>I want to implement a <code>futures::Stream</code> for reading and parsing the standard output of a child subprocess.</p>\n\n<p>What I'm doing at the moment:</p>\n\n<ul>\n<li><p>spawn subprocess and obtain its stdout via <code>std::process</code> methods: <code>let child = Command::new(...).stdout(Stdio.pipe()).spawn().expect(...)</code></p></li>\n<li><p>add <code>AsyncRead</code> and <code>BufRead</code> to stdout:</p>\n\n<pre><code>let stdout = BufReader::new(tokio_io::io::AllowStdIo::new(\n    child.stdout.expect(\"Failed to open stdout\"),\n));\n</code></pre></li>\n<li><p>declare a wrapper struct for stdout:</p>\n\n<pre><code>struct MyStream&lt;Io: AsyncRead + BufRead&gt; {\n    io: Io,\n}\n</code></pre></li>\n<li><p>implement <code>Stream</code>:</p>\n\n<pre><code>impl&lt;Io: AsyncRead + BufRead&gt; Stream for MyStream&lt;Io&gt; {\n    type Item = Message;\n    type Error = Error;\n\n    fn poll(&amp;mut self) -&gt; Poll&lt;Option&lt;Message&gt;, Error&gt; {\n        let mut line = String::new();\n        let n = try_nb!(self.io.read_line(&amp;mut line));\n        if n == 0 {\n            return Ok(None.into());\n        }\n        //...read &amp; parse further\n    }\n}\n</code></pre></li>\n</ul>\n\n<p>The problem is that <code>AllowStdIo</code> doesn't make <code>ChildStdout</code> magically asynchronous and the <code>self.io.read_line</code> call still blocks.</p>\n\n<p>I guess I need to pass something different instead of <code>Stdio::pipe()</code> to have it asynchronous, but what? Or is there a different solution for that?</p>\n\n<p>This question is different from <a href=\"https://stackoverflow.com/questions/41932137/what-is-the-best-approach-to-encapsulate-blocking-i-o-in-future-rs\">What is the best approach to encapsulate blocking I/O in future-rs?</a> because I  want to get asynchronous I/O for the specific case of a subprocess and not solve the problem of encapsulation of synchronous I/O.</p>\n\n<p>Update: I'm using <code>tokio = \"0.1.3\"</code> to leverage its runtime feature and using <code>tokio-process</code> is not an option at the moment (<a href=\"https://github.com/alexcrichton/tokio-process/issues/27\" rel=\"nofollow noreferrer\">https://github.com/alexcrichton/tokio-process/issues/27</a>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520895131, "post_id": 49245465, "comment_id": 85495104, "body": "Perhaps you would read <a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a> and then <a href=\"https://stackoverflow.com/posts/49245465/edit\">edit</a> your question to explain how it&#39;s different?"}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 2, "creation_date": 1520895523, "post_id": 49245465, "comment_id": 85495235, "body": "I haven&#39;t tried to compile (please post your errors instead), but the thing that seems immediately wrong is <code>.into_iter()</code>. That call consumes the original value. If you want <code>entries</code> to exist after you iterate them, you want <a href=\"https://doc.rust-lang.org/1.21.0/std/vec/struct.Vec.html#method.iter\" rel=\"nofollow noreferrer\">iter</a> instead to iterate over references."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520896737, "post_id": 49245465, "comment_id": 85495609, "body": "@Shepmaster It&#39;s different at least in that I&#39;m passing in a reference to the object I&#39;d like the response to refer to, <code>&amp;self</code>."}], "answers": [{"comments": [{"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1520898359, "post_id": 49245942, "comment_id": 85496078, "body": "Awesome! The error about moving out of borrowed content pointed to the <code>self.entries</code> line, so I thought it was unrelated to the <code>into_iter</code> call."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1520897648, "last_edit_date": 1520897648, "creation_date": 1520897191, "answer_id": 49245942, "question_id": 49245465, "link": "https://stackoverflow.com/questions/49245465/how-to-return-a-struct-with-a-reference-to-self-in-rust/49245942#49245942", "title": "How to return a struct with a reference to self in Rust?", "body": "<p>As described in <a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a>, you cannot create a value in a function and return a reference to it. Nothing would own the result of your iterator chain, thus the reference would point at invalid data.</p>\n\n<p>That doesn't even really matter: as pointed out in the comments, you cannot call <code>into_iter</code> on <code>self.entries</code> because you cannot move out of borrowed content to start with, as described in <a href=\"https://stackoverflow.com/q/28158738/155423\">Cannot move out of borrowed content</a>. This means that we cannot have an owned value of an <code>Entry</code> as the result of the iterator chain to start with.</p>\n\n<p><code>Crontab</code> owns the <code>Entry</code>; as soon as the <code>Crontab</code> moves, any reference to any <code>Entry</code> becomes invalid. This means that any references need to be tied to how long <code>self</code> lives; the generic lifetime <code>'a</code> cannot come into play:</p>\n\n<pre><code>fn next_run(&amp;self, from: NaiveDateTime) -&gt; Run {\n    self.entries\n        .iter()\n        .map(|entry| Run {\n            entry,\n            datetime: entry.recurrence.next_match(from),\n        })\n        .min_by(|this, other| this.datetime.cmp(&amp;other.datetime))\n        .unwrap()\n}\n</code></pre>\n\n<p>Or the explicit version:</p>\n\n<pre><code>fn next_run&lt;'b&gt;(&amp;'b self, from: NaiveDateTime) -&gt; Run&lt;'b&gt; { /* ... */ }\n</code></pre>\n"}], "owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2742, "favorite_count": 0, "accepted_answer_id": 49245942, "answer_count": 1, "score": 1, "last_activity_date": 1520897648, "creation_date": 1520894173, "last_edit_date": 1520897327, "question_id": 49245465, "link": "https://stackoverflow.com/questions/49245465/how-to-return-a-struct-with-a-reference-to-self-in-rust", "title": "How to return a struct with a reference to self in Rust?", "body": "<p>I've <a href=\"https://github.com/l0b0/cronlist/tree/5c0ec9c63580a8ee9c18307964c2153cdb25d1b0\" rel=\"nofollow noreferrer\">implemented</a> a <code>struct</code> which has a list of crontab entries, each of which knows its own recurrence (such as <code>*/5 * * * *</code> in crontab):</p>\n\n<pre><code>extern crate chrono;\n\nuse chrono::NaiveDateTime;\n\npub struct Crontab&lt;'a&gt; {\n    entries: Vec&lt;Entry&lt;'a&gt;&gt;,\n}\n\npub struct Entry&lt;'a&gt; {\n    pub recurrence: Recurrence,\n    pub command: &amp;'a str,\n}\n\npub struct Recurrence {\n    minutes: Vec&lt;u8&gt;,\n    hours: Vec&lt;u8&gt;,\n    days_of_month: Vec&lt;u8&gt;,\n    months: Vec&lt;u8&gt;,\n    days_of_week: Vec&lt;u8&gt;,\n}\n</code></pre>\n\n<p>Based on the current time you can get the next occurrence of a command:</p>\n\n<pre><code>impl Recurrence {\n    pub fn next_match(&amp;self, after: NaiveDateTime) -&gt; NaiveDateTime {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>I'm trying to write a function on <code>Crontab</code> to get the <code>Entry</code> which will run next (that is, for which <code>recurrence.next_match()</code> is the lowest).</p>\n\n<pre><code>impl&lt;'a&gt; Crontab&lt;'a&gt; {\n    fn next_run(&amp;self, from: NaiveDateTime) -&gt; Run&lt;'a&gt; {\n        &amp;self.entries\n            .into_iter()\n            .map(|entry| Run {\n                entry: &amp;entry,\n                datetime: entry.recurrence.next_match(from),\n            })\n            .min_by(|this, other| this.datetime.cmp(&amp;other.datetime))\n            .unwrap()\n    }\n}\n\nstruct Run&lt;'a&gt; {\n    entry: &amp;'a Entry&lt;'a&gt;,\n    datetime: NaiveDateTime,\n}\n</code></pre>\n\n<p>This generates the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:30:9\n   |\n29 |       fn next_run(&amp;self, from: NaiveDateTime) -&gt; Run&lt;'a&gt; {\n   |                                                  ------- expected `Run&lt;'a&gt;` because of return type\n30 | /         &amp;self.entries\n31 | |             .into_iter()\n32 | |             .map(|entry| Run {\n33 | |                 entry: &amp;entry,\n...  |\n36 | |             .min_by(|this, other| this.datetime.cmp(&amp;other.datetime))\n37 | |             .unwrap()\n   | |_____________________^ expected struct `Run`, found &amp;Run&lt;'_&gt;\n   |\n   = note: expected type `Run&lt;'a&gt;`\n              found type `&amp;Run&lt;'_&gt;`\n</code></pre>\n\n<p>Similar variants I've tried fail to compile with messages such as \"cannot move out of borrowed content\" (if changing the return type to <code>&amp;Run&lt;'a&gt;</code>) or that the <code>&amp;entry</code> does not live long enough.</p>\n\n<p>It seems to make most sense that the <code>Run</code> should have a reference to rather than a copy of the <code>Entry</code>, but I'm not sure how to juggle both the lifetimes and references to get to that point (and I don't know whether <code>'a</code> refers to the same lifetime in both structs). What am I missing here?</p>\n"}, {"tags": ["build", "compilation", "linker", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523447720, "post_id": 49236704, "comment_id": 86563694, "body": "Is cargo embedded as a static library? And if so, would embedding it as a dynamic library (at least in Debug) not speed up link time?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1523239837, "post_id": 49723720, "comment_id": 86463237, "body": "This does not seem like it will answer the question as it asks about fixing the <i>linking time</i>, which would not be changed with this solution."}, {"owner": {"reputation": 420, "user_id": 5133139, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qltJF.jpg?s=128&g=1", "display_name": "\u30af\u30ea\u30db", "link": "https://stackoverflow.com/users/5133139/%e3%82%af%e3%83%aa%e3%83%9b"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523252065, "post_id": 49723720, "comment_id": 86465988, "body": "Sorry, if I misunderstood the question. I thought it might help because it looked like compiling servo is what takes OP so long. Does linking in Rust not happen after compiling? Should I delete my answer?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1523627376, "post_id": 49723720, "comment_id": 86651715, "body": "@\u30af\u30ea\u30db I&#39;d wait for the OP&#39;s comment."}, {"owner": {"reputation": 452, "user_id": 829264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e2ecd7bb790d0fc0c6d26bc8cf2f98?s=128&d=identicon&r=PG", "display_name": "Alex Koz.", "link": "https://stackoverflow.com/users/829264/alex-koz"}, "edited": false, "score": 0, "creation_date": 1523637686, "post_id": 49723720, "comment_id": 86658545, "body": "I suppose that a Divide-and-conquer solution is universal and the best. This is because it is universal and the only one."}, {"owner": {"reputation": 452, "user_id": 829264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e2ecd7bb790d0fc0c6d26bc8cf2f98?s=128&d=identicon&r=PG", "display_name": "Alex Koz.", "link": "https://stackoverflow.com/users/829264/alex-koz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523637782, "post_id": 49723720, "comment_id": 86658603, "body": "Summon @Shepmaster ."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 452, "user_id": 829264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e2ecd7bb790d0fc0c6d26bc8cf2f98?s=128&d=identicon&r=PG", "display_name": "Alex Koz.", "link": "https://stackoverflow.com/users/829264/alex-koz"}, "edited": false, "score": 0, "creation_date": 1523641813, "post_id": 49723720, "comment_id": 86660741, "body": "@AlexKoz. if the solution <i>works</i>, then it&#39;s a good solution. I just don&#39;t understand how linking the same amount of code could be slower or faster. It makes me think that the problem isn&#39;t related to linking, but perhaps to something else."}, {"owner": {"reputation": 452, "user_id": 829264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e2ecd7bb790d0fc0c6d26bc8cf2f98?s=128&d=identicon&r=PG", "display_name": "Alex Koz.", "link": "https://stackoverflow.com/users/829264/alex-koz"}, "edited": false, "score": 0, "creation_date": 1523642117, "post_id": 49723720, "comment_id": 86660896, "body": "This solution speeds up <i>compile time</i> including <i>linking time</i>. But <i>linking time</i> <b>probably</b> does not decreasing. Anyway... I&#39;ll wait couple of hours and will give <code>+50</code>."}], "tags": [], "owner": {"reputation": 420, "user_id": 5133139, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qltJF.jpg?s=128&g=1", "display_name": "\u30af\u30ea\u30db", "link": "https://stackoverflow.com/users/5133139/%e3%82%af%e3%83%aa%e3%83%9b"}, "is_accepted": false, "score": 6, "last_activity_date": 1523239884, "last_edit_date": 1523239884, "creation_date": 1523229315, "answer_id": 49723720, "question_id": 49236704, "link": "https://stackoverflow.com/questions/49236704/is-it-possible-to-speed-up-rust-compilation-when-linking-a-large-library/49723720#49723720", "title": "Is it possible to speed up Rust compilation when linking a large library?", "body": "<p>One thing you can do is separating your code that directly interacts with Servo from the rest of your project into its own library within your project. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>project-rs\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 bin\n\u2502   \u2502   \u2514\u2500\u2500 main.rs\n\u2502   \u251c\u2500\u2500 this_needs_servo\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u2502   \u2502   \u2514\u2500\u2500 lib.rs\n\u2502   \u2514\u2500\u2500 ui\n\u2502       \u2514\u2500\u2500 Cargo.toml\n\u2502       \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 tests.rs\n</code></pre>\n\n<p>You would add </p>\n\n<pre><code>[dependencies.this_needs_servo]\npath = \"src/this_needs_servo\"\n</code></pre>\n\n<p>to the Cargo.toml in your projects root dir and move the dependency of <code>servo</code> into the Cargo.toml under your <code>this_needs_servo</code> lib.</p>\n\n<p>To use this library you can add <code>extern crate this_needs_servo;</code> plus all the required <code>use</code> statements to your main.rs.</p>\n\n<p>Now <code>servo</code> should only get compiled when you change something in the <code>this_needs_servo</code> lib.</p>\n"}], "owner": {"reputation": 542, "user_id": 166128, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32d4563a0685d91b5770a9d58d0983b2?s=128&d=identicon&r=PG", "display_name": "tnajdek", "link": "https://stackoverflow.com/users/166128/tnajdek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 4, "answer_count": 1, "score": 18, "last_activity_date": 1523239884, "creation_date": 1520862095, "last_edit_date": 1520874598, "question_id": 49236704, "link": "https://stackoverflow.com/questions/49236704/is-it-possible-to-speed-up-rust-compilation-when-linking-a-large-library", "title": "Is it possible to speed up Rust compilation when linking a large library?", "body": "<p>I'm experiencing long consecutive build times when embedding <a href=\"https://github.com/servo/servo/\" rel=\"noreferrer\">Servo</a> as part of my binary. For example, using this <a href=\"https://github.com/paulrouget/servo-embedding-example\" rel=\"noreferrer\">tutorial for embedding Servo</a>, after the initial build is done, any modification to my code will require 40s+ to rebuild the binary on 4th gen quad-core i7:</p>\n\n<p>Here is sample output from Cargo:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u276f cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.1 secs\n\n\u276f touch src/main.rs\n\u276f cargo build\n    Compiling servo-embedding-example v0.1.0\n     Finished dev [unoptimized + debuginfo] target(s) in 57.9 secs\n</code></pre>\n\n<p>I'm running a very recent nightly toolchain:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u276f rustc --version\nrustc 1.25.0-nightly (15a1e2844 2018-01-20)\n\u276f cargo --version\ncargo 0.26.0-nightly (6a8eb71f6 2018-01-13)\n</code></pre>\n\n<p>And incremental build is on:</p>\n\n<pre><code>\u276f echo $CARGO_INCREMENTAL\n1\n</code></pre>\n\n<p>I'm not planning on updating Servo often but I need it my application. Is there any way to speed up the build time?</p>\n"}, {"tags": ["rust", "flamegraph", "performance-measuring"], "owner": {"reputation": 579, "user_id": 832818, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5857f550fb66aeaf5912b63c4e9589ce?s=128&d=identicon&r=PG&f=1", "display_name": "Darakian", "link": "https://stackoverflow.com/users/832818/darakian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 107, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1520874421, "creation_date": 1520860625, "last_edit_date": 1520874421, "question_id": 49236247, "link": "https://stackoverflow.com/questions/49236247/how-do-i-get-detailed-flamegraphs-with-the-flame-crate-for-code-written-using-ra", "title": "How do I get detailed flamegraphs with the flame crate for code written using Rayon?", "body": "<p>I'm trying to get some performance metrics using the <a href=\"https://crates.io/crates/flame\" rel=\"nofollow noreferrer\">flame crate</a> with code I've written using <a href=\"https://crates.io/crates/rayon\" rel=\"nofollow noreferrer\">Rayon</a>:</p>\n\n<pre><code>extern crate flame;\n\nflame::start(\"TAG-A\");\n//Assume vec is a Vec&lt;i32&gt;\nvec.par_iter_mut().filter(|a| a == 1).for_each(|b| func(b));\n//func(b) operates on each i32 and sends some results to a channel\nflame::end(\"TAG-A\");\n//More code but unrelated\nflame::dump_stdout();\n</code></pre>\n\n<p>This works fine, but only gives information for the entire parallel iterator. I would like to get some more fine grained details on the function <code>func</code>.</p>\n\n<p>I've tried adding a start/end within the function, but the runtime information is only available when I call <code>flame::commit_thread()</code> and then it seems to only print this to stdout. Ideally I'd like to print out the time spent without a given tag when I call dump at the end of my code.</p>\n\n<p>Is there a way to dump tags from all threads? The documentation for flame isn't great.</p>\n"}, {"tags": ["stream", "rust", "future", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520944456, "post_id": 49256002, "comment_id": 85515602, "body": "Can you explain further how this <i>cancels</i> the repeating interval?"}, {"owner": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "edited": false, "score": 0, "creation_date": 1521029071, "post_id": 49256002, "comment_id": 85556930, "body": "I did try take_while, the issue I had with that was I couldn&#39;t use some_vars in take_while closure and also for_each (mutable) closure. If the ownership could be solved then it solves the immediate problem."}, {"owner": {"reputation": 42, "user_id": 4479201, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/33bc8d93c06a47f2314e207225a71c9d?s=128&d=identicon&r=PG&f=1", "display_name": "wolandr", "link": "https://stackoverflow.com/users/4479201/wolandr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521033841, "post_id": 49256002, "comment_id": 85560279, "body": "@Shepmaster If you need <i>pause</i> the interval stream then it could implemented by using <a href=\"https://docs.rs/futures/0.1.18/futures/stream/trait.Stream.html#method.filter\" rel=\"nofollow noreferrer\">filer</a> method between <code>take_while</code> and <code>for_each</code> parts. Or exactly in <code>for_each</code> closure."}, {"owner": {"reputation": 42, "user_id": 4479201, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/33bc8d93c06a47f2314e207225a71c9d?s=128&d=identicon&r=PG&f=1", "display_name": "wolandr", "link": "https://stackoverflow.com/users/4479201/wolandr"}, "reply_to_user": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "edited": false, "score": 0, "creation_date": 1521033908, "post_id": 49256002, "comment_id": 85560330, "body": "@opensourcegeek So you need to synchronize shard object used for example types from <code>std::sync::*</code>"}, {"owner": {"reputation": 5684, "user_id": 870207, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/50fa4a2d71492f94030da21388aecd54?s=128&d=identicon&r=PG", "display_name": "teknopaul", "link": "https://stackoverflow.com/users/870207/teknopaul"}, "edited": false, "score": 0, "creation_date": 1572894317, "post_id": 49256002, "comment_id": 103695335, "body": "I tried take_while and it does not interrupt the interval, it still fires on the same schedule, if you put a println!() in the take_while closure this is pretty clear"}], "tags": [], "owner": {"reputation": 42, "user_id": 4479201, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/33bc8d93c06a47f2314e207225a71c9d?s=128&d=identicon&r=PG&f=1", "display_name": "wolandr", "link": "https://stackoverflow.com/users/4479201/wolandr"}, "is_accepted": false, "score": -2, "last_activity_date": 1521090208, "last_edit_date": 1521090208, "creation_date": 1520943484, "answer_id": 49256002, "question_id": 49235832, "link": "https://stackoverflow.com/questions/49235832/how-to-cancel-an-infinite-stream-from-within-the-stream-itself/49256002#49256002", "title": "How to cancel an infinite stream from within the stream itself?", "body": "<p><code>tokio_timer::Interval</code> implements <code>futures::Stream</code>, so try to use the <a href=\"https://docs.rs/tokio-timer/0.1.2/tokio_timer/struct.Interval.html#method.take_while\" rel=\"nofollow noreferrer\"><code>take_while</code></a> method:</p>\n\n<pre><code>let s = timer\n    .take_while(|()| \n        future::ok(is_net_completed()))\n    .for_each(move |_| {\n        println!(\"Woke up\");\n        // ...\n    })\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5684, "user_id": 870207, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/50fa4a2d71492f94030da21388aecd54?s=128&d=identicon&r=PG", "display_name": "teknopaul", "link": "https://stackoverflow.com/users/870207/teknopaul"}, "is_accepted": false, "score": 0, "last_activity_date": 1573125361, "last_edit_date": 1573125361, "creation_date": 1572902703, "answer_id": 58701281, "question_id": 49235832, "link": "https://stackoverflow.com/questions/49235832/how-to-cancel-an-infinite-stream-from-within-the-stream-itself/58701281#58701281", "title": "How to cancel an infinite stream from within the stream itself?", "body": "<p>I created a copy of Tokio's <code>Interval</code> struct, adding a reference to a method of my application to indicate when to interrupt early.  </p>\n\n<p>In my case, I want to interrupt the <code>Interval</code> to shutdown.</p>\n\n<p>My Interval poll method looks like this:</p>\n\n<pre><code>fn poll(&amp;mut self) -&gt; Poll&lt;Option&lt;Self::Item&gt;, Self::Error&gt; {\n    if self.session.read().unwrap().shutdown {\n        return Ok(Async::Ready(Some(Instant::now())));\n    }\n\n    // Wait for the delay to be done\n    let _ = match self.delay.poll() {\n</code></pre>\n\n<p>Then you need to keep a handle on the task (call <code>task = futures::task::current()</code> when running inside the timeout task).</p>\n\n<p>At any point you can then call <code>task.notify()</code> to kick the interval into action and hit your break out code, interrupting the <code>Interval</code> early.</p>\n\n<p>Inside <code>Interval</code> there is a <code>Delay</code> struct that can be modified, you could create an <code>Interval</code> that you can interrupt and change the timeout, this way you could interrupt once and then continue.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1572968956, "creation_date": 1572968956, "answer_id": 58714908, "question_id": 49235832, "link": "https://stackoverflow.com/questions/49235832/how-to-cancel-an-infinite-stream-from-within-the-stream-itself/58714908#58714908", "title": "How to cancel an infinite stream from within the stream itself?", "body": "<p>For cases where you want to cancel a stream from <em>outside</em> of the stream, see <a href=\"https://docs.rs/stream-cancel/0.4.4/stream_cancel/\" rel=\"nofollow noreferrer\">stream-cancel</a>.</p>\n\n<hr>\n\n<p>For your specific case, it's easiest to convert your collection into a stream  and zip it together with the interval timer. This way, the resulting stream naturally stops when the collection is empty:</p>\n\n<pre><code>use futures::{future, stream, Stream}; // 0.1.29\nuse std::time::Duration;\nuse tokio; // 0.1.22\nuse tokio_timer::Interval; // 0.2.11\n\nfn main() {\n    tokio::run({\n        let some_vars = vec![1, 2, 3, 4, 5, 6, 7, 8];\n\n        let timer =\n            Interval::new_interval(Duration::from_millis(100)).map_err(|e| panic!(\"Error: {}\", e));\n\n        let some_vars = stream::iter_ok(some_vars.into_iter().rev());\n        let combined = timer.zip(some_vars);\n\n        combined.for_each(move |(_, item)| {\n            eprintln!(\"Woke up\");\n\n            tokio::spawn(future::lazy(move || {\n                println!(\"{:?}\", item);\n                Ok(())\n            }));\n\n            Ok(())\n        })\n    });\n}\n</code></pre>\n\n<p>Otherwise, you can stop the stream by using <code>and_then</code> to both remove the value from the collection and control if the stream should continue:</p>\n\n<pre><code>use futures::{future, Stream}; // 0.1.29\nuse std::time::Duration;\nuse tokio; // 0.1.22\nuse tokio_timer::Interval; // 0.2.11\n\nfn main() {\n    tokio::run({\n        let mut some_vars = vec![1, 2, 3, 4, 5, 6, 7, 8];\n\n        let timer =\n            Interval::new_interval(Duration::from_millis(100)).map_err(|e| panic!(\"Error: {}\", e));\n\n        let limited = timer.and_then(move |_| {\n            if some_vars.len() &lt;= 4 {\n                Err(())\n            } else {\n                some_vars.pop().ok_or(())\n            }\n        });\n\n        limited.for_each(move |item| {\n            eprintln!(\"Woke up\");\n\n            tokio::spawn(future::lazy(move || {\n                println!(\"{:?}\", item);\n                Ok(())\n            }));\n\n            Ok(())\n        })\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1070, "favorite_count": 0, "accepted_answer_id": 58714908, "answer_count": 3, "score": 6, "last_activity_date": 1573125361, "creation_date": 1520859430, "last_edit_date": 1572966379, "question_id": 49235832, "link": "https://stackoverflow.com/questions/49235832/how-to-cancel-an-infinite-stream-from-within-the-stream-itself", "title": "How to cancel an infinite stream from within the stream itself?", "body": "<p>I'm trying to cancel an interval (<code>interval_timer</code>) after emptying a queue but not sure what is the right strategy.</p>\n\n<pre><code>let mut some_vars = vec![1, 2, 3, 4, 5, 6, 7, 8];\nlet interval_timer = tokio_timer::Timer::default();\n\nlet timer = interval_timer\n    .interval(Duration::from_millis(1000))\n    .map_err(|_| {\n        println!(\"Errored out\");\n    });\n\nlet s = timer.for_each(move |_| {\n    println!(\"Woke up\");\n    let item = some_vars.pop().unwrap();\n\n    let f = futures::future::ok(item).map(|x| {\n        println!(\"{:?}\", x);\n    });\n    tokio::spawn(f)\n});\n\ntokio::run(s);\n</code></pre>\n\n<p>I tried <code>drop</code> as suggested in gitter but that ended up with an error:</p>\n\n<pre><code>let mut some_vars = vec![1, 2, 3, 4, 5, 6, 7, 8];\nlet mut interval_timer = tokio_timer::Timer::default();\n\nlet timer = interval_timer\n    .interval(Duration::from_millis(1000))\n    .map_err(|_| {\n        println!(\"Errored out\");\n    });\n\nlet s = timer.for_each(move |_| {\n    println!(\"Woke up\");\n    if some_vars.len() == 1 {\n        drop(interval_timer);\n    }\n\n    let item = some_vars.pop().unwrap();\n\n    let f = futures::future::ok(item).map(|x| {\n        println!(\"{:?}\", x);\n    });\n    tokio::spawn(f)\n});\n\ntokio::run(s);\n</code></pre>\n\n<p>The error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n--&gt; src/main.rs:72:22\n   |\n60 |     let mut interval_timer = tokio_timer::Timer::default();\n   |         ------------------ captured outer variable\n...\n72 |                 drop(interval_timer);\n   |                      ^^^^^^^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 227, "user_id": 3740219, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edd0aaf2ca00de2ce7edb1003471071e?s=128&d=identicon&r=PG", "display_name": "Nuchs", "link": "https://stackoverflow.com/users/3740219/nuchs"}, "is_accepted": true, "score": 13, "last_activity_date": 1520876687, "last_edit_date": 1520876687, "creation_date": 1520844506, "answer_id": 49231175, "question_id": 49229332, "link": "https://stackoverflow.com/questions/49229332/should-trait-bounds-be-duplicated-in-struct-and-impl/49231175#49231175", "title": "Should trait bounds be duplicated in struct and impl?", "body": "<p>It really depends on what the type is for. If it is only intended to hold values which implement the trait, then yes, it should have the trait bound e.g.</p>\n\n<pre><code>trait Child {\n    fn name(&amp;self);\n}\n\nstruct School&lt;T: Child&gt; {\n    pupil: T,\n}\n\nimpl&lt;T: Child&gt; School&lt;T&gt; {\n    fn role_call(&amp;self) -&gt; bool {\n        // check everyone is here\n    }\n}\n</code></pre>\n\n<p>In this example, only children are allowed in the school so we have the bound on the struct.</p>\n\n<p>If the struct is intended to hold any value but you want to offer extra behaviour when the trait is implemented, then no, the bound shouldn't be on the struct e.g.</p>\n\n<pre><code>trait GoldCustomer {\n    fn get_store_points(&amp;self) -&gt; i32;\n}\n\nstruct Store&lt;T&gt; {\n    customer: T,\n}\n\nimpl&lt;T: GoldCustomer&gt; Store {\n    fn choose_reward(customer: T) {\n        // Do something with the store points\n    }\n}\n</code></pre>\n\n<p>In this example, not all customers are gold customers and it doesn't make sense to have the bound on the struct.</p>\n"}, {"comments": [{"owner": {"reputation": 547, "user_id": 2011659, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/8563cfe6fbe311b834c416e07369bf25?s=128&d=identicon&r=PG", "display_name": "user2011659", "link": "https://stackoverflow.com/users/2011659/user2011659"}, "edited": false, "score": 4, "creation_date": 1520885891, "post_id": 49241055, "comment_id": 85491317, "body": "The RFC is the answer to the redundancy that struck me in the first place."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 547, "user_id": 2011659, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/8563cfe6fbe311b834c416e07369bf25?s=128&d=identicon&r=PG", "display_name": "user2011659", "link": "https://stackoverflow.com/users/2011659/user2011659"}, "edited": false, "score": 1, "creation_date": 1520886177, "post_id": 49241055, "comment_id": 85491463, "body": "@user2011659 yep, I&#39;m in the same boat. Previously, I tended to <i>not</i> put the bounds on the struct because of that (even to my own detriment). It will be interesting to see if removing the requirement to type the same bounds in both places will make people more or less confused. After the RFC, now the code <code>impl&lt;T&gt; Foo&lt;T&gt; { ... }</code> might have a whole bunch of restrictions on it that you won&#39;t know unless you look at the struct..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 12, "last_activity_date": 1520875229, "creation_date": 1520875229, "answer_id": 49241055, "question_id": 49229332, "link": "https://stackoverflow.com/questions/49229332/should-trait-bounds-be-duplicated-in-struct-and-impl/49241055#49241055", "title": "Should trait bounds be duplicated in struct and impl?", "body": "<p>Trait bounds that apply to <em>every</em> instance of the struct should be applied to the struct:</p>\n\n<pre><code>struct IteratorThing&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    a: I,\n    b: Option&lt;I::Item&gt;,\n}\n</code></pre>\n\n<p>Trait bounds that only apply to certain instances should only be applied to the <code>impl</code> block they pertain to:</p>\n\n<pre><code>struct Pair&lt;T&gt; {\n    a: T,\n    b: T,\n}\n\nimpl&lt;T&gt; Pair&lt;T&gt;\nwhere\n    T: std::ops::Add&lt;T, Output = T&gt;,\n{\n    fn sum(self) -&gt; T {\n        self.a + self.b\n    }\n}\n\nimpl&lt;T&gt; Pair&lt;T&gt;\nwhere\n    T: std::ops::Mul&lt;T, Output = T&gt;,\n{\n    fn product(self) -&gt; T {\n        self.a * self.b\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>to conform to the DRY principle</p>\n</blockquote>\n\n<p>The redundancy will be removed by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\" rel=\"noreferrer\">RFC 2089</a>:</p>\n\n<blockquote>\n  <p>Eliminate the need for \u201credundant\u201d bounds on functions and impls where\n  those bounds can be inferred from the input types and other trait\n  bounds. For example, in this simple program, the impl would no longer\n  require a bound, because it can be inferred from the <code>Foo&lt;T&gt;</code> type:</p>\n\n<pre><code>struct Foo&lt;T: Debug&gt; { .. }\nimpl&lt;T: Debug&gt; Foo&lt;T&gt; {\n  //    ^^^^^ this bound is redundant\n  ...\n}\n</code></pre>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 10, "last_activity_date": 1614299252, "last_edit_date": 1614299252, "creation_date": 1614261296, "answer_id": 66369912, "question_id": 49229332, "link": "https://stackoverflow.com/questions/49229332/should-trait-bounds-be-duplicated-in-struct-and-impl/66369912#66369912", "title": "Should trait bounds be duplicated in struct and impl?", "body": "<p>I believe that the existing answers are misleading. In most cases, you should not put a bound on a struct unless the struct <strong>literally will not compile</strong> without it.</p>\n<p>I'll explain, but first, let's get one thing out of the way: this is not about reducing typing. Currently in Rust you have to repeat every struct's bounds on every <code>impl</code> that touches it, which is a good enough reason not to put bounds on structs <em>right now</em>. However, this is <em>not</em> my reasoning for recommending to omit trait bounds from structs. The <code>implied_bounds</code> RFC will eventually be implemented, but I will still recommend not putting bounds on structs.</p>\n<hr />\n<h2>tl;dr</h2>\n<p>Bounds on structs express the wrong thing for most people. They are infectious, redundant, sometimes nearsighted, and often confusing. Even when a bound feels right, you should usually leave it off until it's proven necessary.</p>\n<p>(In this answer, anything I say about structs applies equally to enums.)</p>\n<hr />\n<h3>1. Bounds on structs leak out of abstractions.</h3>\n<p>Your data structure is special. &quot;<code>Object&lt;T&gt;</code> only makes sense if <code>T</code> is <code>Trait</code>,&quot; you say. And perhaps you are right. But the decision affects not just <code>Object</code>, but any other data structure that contains an <code>Object&lt;T&gt;</code>, even if it does not <em>always</em> contain an <code>Object&lt;T&gt;</code>. Consider a programmer who wants to wrap your <code>Object</code> in an <code>enum</code>:</p>\n<pre><code>enum MyThing&lt;T&gt; {  // error[E0277]: the trait bound `T: Trait` is not satisfied\n    Wrapped(your::Object&lt;T&gt;),\n    Plain(T),\n}\n</code></pre>\n<p>Within the downstream code this makes sense because <code>MyThing::Wrapped</code> is only used with <code>T</code>s that do implement <code>Thing</code>, while <code>Plain</code> can be used with any type. But if <code>your::Object&lt;T&gt;</code> has a bound on <code>T</code>, this <code>enum</code> can't be compiled without that same bound, even if there are lots of uses for a <code>Plain(T)</code> that don't require such a bound. Not only does this not work, but even if adding the bound doesn't make it entirely useless, it also exposes the bound in the public API of any struct that happens to use <code>MyThing</code>.</p>\n<h3>2. You don't know what the future holds.</h3>\n<p>Perhaps the enum above is a bit silly, but forbidding its existence is sillier. Bounds on structs limit what other people can do with them. Bounds on code (<code>impl</code>s and functions) do too, of course, but those constraints are (presumably) required by your own code, while bounds on structs are a preemptive strike against anyone downstream who might use your struct in an innovative way. Unnecessary bounds are particularly annoying for such innovators because they constrain what can compile without usefully constraining what can actually <em>run</em> (more on that in a moment).</p>\n<p>For one example of a struct that originally had a trait bound which was eventually removed, look no farther than <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"noreferrer\"><code>Cell&lt;T&gt;</code></a>, which originally had a <code>T: Copy</code> bound. In <a href=\"https://github.com/rust-lang/rfcs/pull/1651\" rel=\"noreferrer\">the RFC to remove the bound</a> many people initially made the same kinds of arguments you may be thinking of right now, but the eventual consensus was that &quot;<code>Cell</code> requires <code>Copy</code>&quot; was <em>always</em> the wrong way to think about <code>Cell</code>. The RFC was merged, paving the way for innovations like <a href=\"https://doc.rust-lang.org/stable/std/cell/struct.Cell.html#method.as_slice_of_cells\" rel=\"noreferrer\"><code>Cell::as_slice_of_cells</code></a>, which lets you do things you couldn't before in safe code, including <a href=\"https://ryhl.io/blog/temporary-shared-mutation/\" rel=\"noreferrer\">temporarily opt-in to shared mutation</a>. The point is that <code>T: Copy</code> was never a useful bound on <code>Cell&lt;T&gt;</code>, and it would have done no harm (and possibly some good) to leave it off from the beginning.</p>\n<h3>3. Bounds on structs are redundant with bounds on code.</h3>\n<p>So you don't think downstream innovation is possible? That's no justification for ruling it out preemptively. You may have <em>small</em> reason to allow such code, but you have <em>no</em> reason to forbid it: If you want to say that it's impossible to make an <code>Object&lt;T&gt;</code> without <code>T: Trait</code>, you can say that on the <code>impl</code> that contains <code>Object</code>'s constructors; if it's impossible to call <code>a_method</code> on an <code>Object&lt;T&gt;</code> without <code>T: Trait</code> you can say that on the <code>impl</code> that contains <code>a_method</code>, or perhaps on <code>a_method</code> itself. (Until <code>implied_bounds</code> is implemented, you have to, anyway, so you don't even have the weak justification of &quot;saving keystrokes.&quot; But that'll change eventually.)</p>\n<p>Even <em>and especially</em> when you can't think of any way for downstream to use an un-bounded <code>Object&lt;T&gt;</code>, you should not forbid it <em>a priori</em>, because...</p>\n<h3>4. Bounds on structs actually mean something different than bounds on code.</h3>\n<p>A <code>T: Trait</code> bound on <code>Object&lt;T&gt;</code> means <em>more</em> than &quot;all <code>Object&lt;T&gt;</code>s have to have <code>T: Trait</code>&quot;; it actually means something like &quot;the concept of <code>Object&lt;T&gt;</code> itself does not make sense unless <code>T: Trait</code>&quot;, which is a more abstract idea. Think about natural language: I've never seen a purple elephant, but I can easily name the concept of &quot;purple elephant&quot; despite the fact that it corresponds to no real-world animal. Types are a kind of language and it can make sense to refer to the idea of <code>Elephant&lt;Purple&gt;</code>, even when you don't know how to create one and you certainly have no use for one. Similarly, it can make sense to express the type <code>Object&lt;NotTrait&gt;</code> in the abstract even if you don't and can't have one in hand right now. Especially when <code>NotTrait</code> is a type parameter, which may not be known <em>in this context</em> to implement <code>Trait</code> but in some other context does.</p>\n<p>This kind of abstract constraint can be hard to wrap one's head around, which is probably one reason why it's so often misused. Which relates to my last point:</p>\n<h3>5. Unnecessary bounds invite unnecessary parameters (which are worse).</h3>\n<p>This does not apply to all cases of bounds on structs, but it is a common point of confusion. You may, for instance, have a struct with a type parameter that must implement a generic trait, but not know what parameter(s) the trait should take. In such cases it is tempting to use <code>PhantomData</code> to add a type parameter to the main struct, but this is usually a mistake, not least because <code>PhantomData</code> is hard to use correctly. Here are some examples of unnecessary parameters added because of unnecessary bounds: <a href=\"https://stackoverflow.com/q/50671177/3650362\">1</a> <a href=\"https://stackoverflow.com/q/40484154/3650362\">2</a> <a href=\"https://stackoverflow.com/q/65960825/3650362\">3</a> <a href=\"https://stackoverflow.com/q/52188141/3650362\">4</a> In the majority of such cases, the correct solution is simply to remove the bound.</p>\n<h2>Exceptions to the rule</h2>\n<p>Okay, when <em>do</em> you need a bound on a struct? I can think of two reasons. In <a href=\"https://stackoverflow.com/a/49241055/3650362\">Shepmaster's answer</a>, the struct will simply not compile without a bound, because the <code>Iterator</code> implementation for <code>I</code> actually defines what the struct contains; it's not just an arbitrary rule. Also, if you're writing <code>unsafe</code> code and you want it to rely on a bound (<code>T: Send</code>, for example), you might need to put that bound on the struct. <code>unsafe</code> code is special because it can rely on invariants that are guaranteed by non-<code>unsafe</code> code, so just putting the bound on the <code>impl</code> that contains the <code>unsafe</code> is not necessarily enough. But in all other cases, unless you <em>really</em> know what you're doing, you should avoid bounds on structs entirely.</p>\n"}], "owner": {"reputation": 547, "user_id": 2011659, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/8563cfe6fbe311b834c416e07369bf25?s=128&d=identicon&r=PG", "display_name": "user2011659", "link": "https://stackoverflow.com/users/2011659/user2011659"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2067, "favorite_count": 3, "accepted_answer_id": 49231175, "answer_count": 3, "score": 28, "last_activity_date": 1618591974, "creation_date": 1520836456, "last_edit_date": 1614262168, "question_id": 49229332, "link": "https://stackoverflow.com/questions/49229332/should-trait-bounds-be-duplicated-in-struct-and-impl", "title": "Should trait bounds be duplicated in struct and impl?", "body": "<p>The following code uses a struct with generic type. While its implementation is only valid for the given trait bound, the struct can be defined with or without the same bound. The struct's fields are private so no other code could create an instance anyway.</p>\n<pre><code>trait Trait {\n    fn foo(&amp;self);\n}\n\nstruct Object&lt;T: Trait&gt; {\n    value: T,\n}\n\nimpl&lt;T: Trait&gt; Object&lt;T&gt; {\n    fn bar(object: Object&lt;T&gt;) {\n        object.value.foo();\n    }\n}\n</code></pre>\n<p>Should the trait bound for the structure should be omitted to conform to the DRY principle, or should it be given to clarify the dependency? Or are there circumstances one solution should be preferred over the other?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1520831727, "post_id": 49227286, "comment_id": 85460471, "body": "What&#39;s the method that&#39;s being dynamically dispatched? <code>Fetcher::fetch</code>? I&#39;m surprised that Rust doesn&#39;t automatcally static-dispatch an <code>impl</code>&#39;d function, but I&#39;m also not too familiar with the nuances of static vs dynamic dispatch in Rust."}, {"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1520832229, "post_id": 49227286, "comment_id": 85460639, "body": "<code>fetch</code> is what would be dynamically dispatched. You can read more about it here: <a href=\"https://doc.rust-lang.org/book/second-edition/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/second-edition/&hellip;</a>"}, {"owner": {"reputation": 1253, "user_id": 103192, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a0a0bf451db6d1e06be88b4ce3cd72a1?s=128&d=identicon&r=PG", "display_name": "Rawler", "link": "https://stackoverflow.com/users/103192/rawler"}, "edited": false, "score": 3, "creation_date": 1520928380, "post_id": 49227286, "comment_id": 85505418, "body": "Before avoiding dynamic dispatch, make sure it&#39;s not a case of premature optimization. dynamic dispatch HAS overhead, that overhead is often negligible. <a href=\"https://www.reddit.com/r/rust/comments/7v4kfj/impl_trait_vs_boxtrait_or_how_i_learned_to_stop\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/7v4kfj/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 3, "creation_date": 1520825400, "post_id": 49227483, "comment_id": 85459076, "body": "I guess the advantage of a boxed trait is that someone who uses this library, could extend the <code>Fetcher</code> trait for their own struct, while it would be harder to add another enum variant (of that struct implementing a <code>fetcher()</code> method directly) to <code>AnyFetcher</code> (other than (re)defining one&#39;s own <code>AnyFetcher</code> enum)?"}, {"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "edited": false, "score": 0, "creation_date": 1520832407, "post_id": 49227483, "comment_id": 85460691, "body": "Enum was definitely a solution I was considering. Although as @Evert pointed out that makes it hard to write an extensible library (indeed, the ability to add new types easily is the exact argument the Rust book makes for using Trait Objects).  I think the last point about not needing a <code>Fetcher</code> trait might be the real realization here. Let me think about this a little more..."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 3, "creation_date": 1520864790, "post_id": 49227483, "comment_id": 85478496, "body": "@Evert If you have a mix of known and unknown implementations, you can add a variant holding a <code>Box&lt;Fetcher&gt;</code> to the enum to handle the unknown implementations. If you <i>only</i> have unknown implementations (or the known implementations are not important enough to warrant their own enum variant), then you can&#39;t avoid dynamic dispatch (unless you take an extreme approach such as dynamic code generation)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1520873366, "post_id": 49227483, "comment_id": 85484512, "body": "Stating the point more bluntly: if you have <i>dynamic</i> implementations of code, you cannot avoid <i>dynamic</i> dispatch. It&#39;s all about what requirements you have for your code."}, {"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "edited": false, "score": 1, "creation_date": 1520898268, "post_id": 49227483, "comment_id": 85496059, "body": "Oooo. &quot;have a catch all enum that uses dynamic dispatch for the ones you don&#39;t know about, and concrete ones for the rest&quot; a really interesting approach."}, {"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520898315, "post_id": 49227483, "comment_id": 85496068, "body": "@shepmaster I think has the ultimate point here. My code seems to be dynamic, perhaps I should just not fight that."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1520823245, "last_edit_date": 1520823245, "creation_date": 1520822868, "answer_id": 49227483, "question_id": 49227286, "link": "https://stackoverflow.com/questions/49227286/how-can-i-avoid-dynamic-dispatch/49227483#49227483", "title": "How can I avoid dynamic dispatch?", "body": "<p>If you know in advance all the types of <code>Fetcher</code>s that you'll be using, you can define an <code>enum</code> containing a variant for each type.</p>\n\n<pre><code>pub enum AnyFetcher {\n    Fetcher1(Fetcher1),\n    Fetcher2(Fetcher2),\n    Fetcher3(Fetcher3),\n//  ^^^^^^^^ ^^^^^^^^\n//      |        |\n//      |      name of a struct/enum that implements `Fetcher`\n//      |\n//    name of the enum variant\n}\n</code></pre>\n\n<p>Then, instead of using <code>Box&lt;Fetcher&gt;</code>, you can use <code>AnyFetcher</code>. You'll have to <code>match</code> on the enum to do the dispatching yourself, but you'll be dispatching to statically known methods, so this has the benefit that the CPU will be able to see the destination of the function call (contrarily to a true dynamic call).</p>\n\n<pre><code>// AnyFetcher doesn't necessarily have to implement Fetcher.\nimpl Fetcher for AnyFetcher {\n    fn fetch(&amp;self, artist: String) -&gt; ArtistInfo {\n        match *self {\n            AnyFetcher::Fetcher1(ref fetcher) =&gt; fetcher.fetch(artist),\n            AnyFetcher::Fetcher2(ref fetcher) =&gt; fetcher.fetch(artist),\n            AnyFetcher::Fetcher3(ref fetcher) =&gt; fetcher.fetch(artist),\n//                                   ^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^\n//                                      |                  |\n//                                      |        these are static calls...\n//                                      |\n//              ...because each fetcher variable has a distinct type,\n//              which is the type of a concrete Fetcher implementation\n        }\n    }\n}\n</code></pre>\n\n<p>If you're going with this approach, you may realize that the <code>Fetcher</code> trait doesn't actually serve a purpose at this point; <code>fetch</code> could just as well be an inherent method on each fetcher type.</p>\n"}], "owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1147, "favorite_count": 0, "accepted_answer_id": 49227483, "answer_count": 1, "score": 2, "last_activity_date": 1520873237, "creation_date": 1520821092, "last_edit_date": 1520873237, "question_id": 49227286, "link": "https://stackoverflow.com/questions/49227286/how-can-i-avoid-dynamic-dispatch", "title": "How can I avoid dynamic dispatch?", "body": "<p>I have the following trait:</p>\n\n<pre><code>struct ArtistInfo {\n    // some fields\n}\n\npub trait Fetcher {\n    fn fetch(&amp;self, artist: String) -&gt; ArtistInfo;\n}\n</code></pre>\n\n<p>I want to have several different fetchers that I can use under different circumstances. My first instinct is to reach for a map and use trait objects like so:</p>\n\n<pre><code>type MusicService = String;\nlet fetchers: HashMap&lt;MusicService, Box&lt;Fetcher&gt;&gt; = HashMap::new();\n</code></pre>\n\n<p>This will allow me to make the set of available music services configurable at run time.</p>\n\n<p>This will result in dynamic dispatch for each of my <code>Fetcher</code>s. I'd hazard to guess that this kind of duck typing is a very Object-Oriented way of approaching the problem at hand. Is there potentially a different approach that would avoid the dynamic dispatching?</p>\n"}, {"tags": ["rust", "observer-pattern"], "answers": [{"tags": [], "owner": {"reputation": 227, "user_id": 3740219, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edd0aaf2ca00de2ce7edb1003471071e?s=128&d=identicon&r=PG", "display_name": "Nuchs", "link": "https://stackoverflow.com/users/3740219/nuchs"}, "is_accepted": false, "score": 1, "last_activity_date": 1520847309, "creation_date": 1520847309, "answer_id": 49231951, "question_id": 49227046, "link": "https://stackoverflow.com/questions/49227046/does-this-code-follow-observer-pattern/49231951#49231951", "title": "Does this code follow Observer pattern?", "body": "<p>No, it does not represent the observer pattern.</p>\n\n<p>From <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" rel=\"nofollow noreferrer\">wikipedia</a></p>\n\n<blockquote>\n  <p>The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.</p>\n</blockquote>\n\n<p>What's missing from your implementation is that the observers are not being notified when the observable changes.</p>\n"}, {"tags": [], "owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "is_accepted": true, "score": 4, "last_activity_date": 1520856261, "creation_date": 1520856261, "answer_id": 49234802, "question_id": 49227046, "link": "https://stackoverflow.com/questions/49227046/does-this-code-follow-observer-pattern/49234802#49234802", "title": "Does this code follow Observer pattern?", "body": "<blockquote>\n  <p>So does the above given code represent an Observer Pattern from a\n  technical point of view?</p>\n</blockquote>\n\n<p><strong>NO</strong> </p>\n\n<blockquote>\n  <p>But just wanted to know what constitutes an Observer Pattern?</p>\n</blockquote>\n\n<p>I have updated your code to simulate the Observer Pattern.</p>\n\n<pre><code>#[allow(unused_variables)]\npub trait Events {\n    fn on_value(&amp;self, value: &amp;str) {}\n}\nstruct Observable {\n    value: String,\n    observers: Vec&lt;Box&lt;Events&gt;&gt;,\n}\n\nimpl Observable {\n    fn new(value: &amp;str) -&gt; Observable {\n        Observable {\n            value: value.to_owned(),\n            observers: Vec::new(),\n        }\n    }\n\n    fn set_value(&amp;mut self, value: &amp;str) {\n        self.value = value.to_owned();\n        // send event to observers\n        for observer in &amp;self.observers {\n            observer.on_value(value);\n        }\n    }\n\n    fn register&lt;E: Events + 'static&gt;(&amp;mut self, observer: E) {\n        self.observers.push(Box::new(observer));\n    }\n}\n\nstruct Observer;\n\nimpl Events for Observer {\n    fn on_value(&amp;self, value: &amp;str) {\n        println!(\"received value: {:?}\", value);\n    }\n}\n\nfn main() {\n    let mut observable = Observable::new(\"initial value\");\n    observable.register(Observer);\n    observable.set_value(\"updated value\");\n}\n</code></pre>\n\n<p>The <strong>Observable</strong> is the subject and it maintains a list of <strong>observers</strong>.\nWhen an new value is set, the Observable notifies the observers.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d29f04553301ccaa0c44d9c7b69a7287&amp;version=stable\" rel=\"nofollow noreferrer\">Link to playground</a></p>\n\n<p><a href=\"http://mattgathu.github.io/simple-events-hook-rust/\" rel=\"nofollow noreferrer\">Blog post about the Observer Pattern in Rust</a></p>\n"}], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 324, "favorite_count": 0, "accepted_answer_id": 49234802, "answer_count": 2, "score": 5, "last_activity_date": 1520856261, "creation_date": 1520819136, "last_edit_date": 1520842383, "question_id": 49227046, "link": "https://stackoverflow.com/questions/49227046/does-this-code-follow-observer-pattern", "title": "Does this code follow Observer pattern?", "body": "<p>I was trying to apply observer pattern to Rust. As in other GC languages such as JS or Java, I wanted to send references to the data in <code>Observable</code> in an event to <code>Observer</code>. But the compiler kept on giving me headache because of the borrow checker. So because of that I learned of using <code>Rc</code> but it did not let me mutate the value in <code>Observable</code> then I used a <code>RefCell</code> for internal mutability which worked as I wanted. Hoorah I said. But then I realised the <code>Rc</code> causes a single location to be referred from different places which made the event system on the <code>Observer</code> obsolete. So after removing the event method from <code>Observer</code>, I got:</p>\n\n<pre><code>struct Observable&lt;T: Clone&gt; {\n    value: Rc&lt;RefCell&lt;T&gt;&gt;\n}\n\nimpl&lt;T: Clone&gt; Observable&lt;T&gt; {\n    fn new(value: T) -&gt; Observable&lt;T&gt; {\n        Observable {\n            value: Rc::new(RefCell::new(value))\n        }\n    }\n\n    fn set_value(&amp;mut self, value: T) {\n        *self.value.borrow_mut() = value;\n    }\n\n    fn register(&amp;mut self) -&gt; Observer&lt;T&gt; {\n        Observer::new(self.value.clone())\n    }\n}\n\nstruct Observer&lt;T: Clone&gt; {\n    value: Rc&lt;RefCell&lt;T&gt;&gt;\n}\n\nimpl&lt;T: Clone&gt; Observer&lt;T&gt; {\n    fn new(value: Rc&lt;RefCell&lt;T&gt;&gt;) -&gt; Observer&lt;T&gt; {\n        Observer {\n            value\n        }\n    }\n\n    fn value(&amp;self) -&gt; T {\n        (*self.value.borrow()).clone()\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0d48d04e3ef38151ce570e318d60ae3d&amp;version=stable\" rel=\"nofollow noreferrer\">Link to Rust Playground</a></p>\n\n<p>So does the above given code represent an Observer Pattern from a technical point of view? Because otherwise it works for me. But just wanted to know what constitutes an Observer Pattern?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520873593, "post_id": 49226783, "comment_id": 85484671, "body": "See also <a href=\"https://stackoverflow.com/q/42101070/155423\">How to match a file extension represented as an OsStr?</a>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1520873158, "creation_date": 1520873158, "answer_id": 49240424, "question_id": 49226783, "link": "https://stackoverflow.com/questions/49226783/is-there-any-way-to-represent-an-osstr-or-osstring-literal/49240424#49240424", "title": "Is there any way to represent an OsStr or OsString literal?", "body": "<p>No, there is not (yet).</p>\n\n<p>However, <code>OsStr::new</code> cannot fail (it does not return a <code>Result</code> or list any panic conditions). <code>AsRef</code> is \"a cheap reference-to-reference conversion\".</p>\n\n<p>This means you can create a string literal and convert it to an <code>OsStr</code> at the site of use and expect there to be basically no overhead. Inspecting the assembly may even show that the types completely disappear at compile time (zero overhead).</p>\n"}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 931, "favorite_count": 1, "accepted_answer_id": 49240424, "answer_count": 1, "score": 5, "last_activity_date": 1520873158, "creation_date": 1520816725, "last_edit_date": 1520872888, "question_id": 49226783, "link": "https://stackoverflow.com/questions/49226783/is-there-any-way-to-represent-an-osstr-or-osstring-literal", "title": "Is there any way to represent an OsStr or OsString literal?", "body": "<p>I'd like to define an <code>OsStr</code> constant for an extension comparison that's going to happen many times. For example:</p>\n\n<pre><code>const DCM_EXTENSION: Option&lt;&amp;'static OsStr&gt; = Some(\"dcm\");\nconst DCM_EXTENSION: Option&lt;&amp;'static OsStr&gt; = Some(OsStr::new(\"dcm\"));\n</code></pre>\n\n<p>This should make it trivial and unfallable to do the comparison:</p>\n\n<pre><code>if entry.file_type().is_file() &amp;&amp; entry.path().extension() == DCM_EXTENSION:\n</code></pre>\n\n<p>Neither method works due to lack of const fn and a type mismatch, respectively.</p>\n\n<p>My current workaround is to convert at runtime before doing any comparisons:</p>\n\n<pre><code>const DCM_EXTENSION_STR: Option&lt;&amp;'static str&gt; = Some(\"dcm\");\n\nmain!(|args: Cli, log_level: verbosity| {\n    let dcm_extension = DCM_EXTENSION_STR.map(OsStr::new);\n    // ...\n});\n</code></pre>\n\n<p>I figure this avoids a per-access penalty that lazy_static would impose and works out to a one-time runtime penalty that is negligible.</p>\n"}, {"tags": ["vector", "iterator", "rust", "invalidation"], "comments": [{"owner": {"reputation": 24454, "user_id": 5108418, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/AN6Pg.png?s=128&g=1", "display_name": "Tamas Hegedus", "link": "https://stackoverflow.com/users/5108418/tamas-hegedus"}, "edited": false, "score": 7, "creation_date": 1520808169, "post_id": 49225860, "comment_id": 85455432, "body": "I am not a rust expert but it looks you iterate over a clone, not the original vec."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520876166, "post_id": 49225860, "comment_id": 85486233, "body": "TL;DR the answer: yes, but that only comes into play if you are actually pushing to the vector you are iterating over."}], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1520825311, "post_id": 49226060, "comment_id": 85459057, "body": "As an aside: The &quot;expansion&quot; mechanics of Rust are actually required for handling trait collisions. if <code>trait Foo</code> and <code>trait Bar</code> both implement an <code>fn qux(&amp;self)</code>, and you have an object of type <code>FooBar</code> which implements <i>both</i> <code>Foo</code> and <code>Bar</code>, you pick the implementation to use by writing <code>&lt;FooBar as Foo&gt;::qux(&amp;foobar_obj)</code> (or <code>as Bar</code> as necessary). <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation\" rel=\"nofollow noreferrer\">Per the book.</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520875591, "post_id": 49226060, "comment_id": 85485926, "body": "<i>calling <code>clone()</code> on a basic reference (<code>&amp;</code>) to an object does not clone the reference,</i> \u2014 not universally true.  It does clone the reference when  the referenced type does not implement <code>Clone</code>."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520926834, "post_id": 49226060, "comment_id": 85504611, "body": "@Shepmaster - I wasn&#39;t aware of this. I figured that trying to call <code>clone</code> on a reference to something that doesn&#39;t define <code>clone</code> would raise an error, or that there would be a special way to clone references as compared to cloning the referenced objects to avoid confusion. TIL."}], "tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 5, "last_activity_date": 1520875509, "last_edit_date": 1520875509, "creation_date": 1520809518, "answer_id": 49226060, "question_id": 49225860, "link": "https://stackoverflow.com/questions/49225860/does-rust-protect-me-from-iterator-invalidation-when-pushing-to-a-vector-while-i/49226060#49226060", "title": "Does Rust protect me from iterator invalidation when pushing to a vector while iterating over it?", "body": "<p>In Rust, most methods take an <code>&amp;self</code> - a <em>reference</em> to self. In most circumstances, a call like <code>some_string.len()</code> internally \"expands\" to something like this:</p>\n\n<pre><code>let a: String = \"abc\".to_string();\nlet a_len: usize = String::len(&amp;a); // This is identical to calling `a.len()`.\n</code></pre>\n\n<p>However, consider a reference to an object: <code>a_ref</code>, which is an <code>&amp;String</code> that references <code>a</code>. Rust is smart enough to determine whether a reference needs to be added or removed, like we saw above (<code>a</code> becomes <code>&amp;a</code>); In this case, <code>a_ref.len()</code> expands to:</p>\n\n<pre><code>let a: String = \"abc\".to_string();\nlet a_ref: &amp;String = &amp;a;\nlet a_len: usize = String::len(a_ref); // This is identical to calling `a_ref.len();`. Since `a_ref` is a reference already, it doesn't need to be altered.\n</code></pre>\n\n<p>Notice that this is basically equivalent to the original example, except that we're using an explicitly-set reference to <code>a</code> rather than <code>a</code> directly.</p>\n\n<p>This means that <code>v.clone()</code> expands to <code>Vec::clone(&amp;v)</code>, and similarly, <code>v_ref.clone()</code> expands to <code>Vec::clone(v_ref)</code>, and since <code>v_ref</code>is <code>&amp;v</code> (or, specifically, <code>&amp;mut v</code>), we can simplify this back into <code>Vec::clone(&amp;v)</code>. In other words, these calls are <strong>equivalent</strong> - calling <code>clone()</code> on a basic reference (<code>&amp;</code>) to an object does not clone the <em>reference</em>, it clones the <em>referenced object</em>.</p>\n\n<p>In other words, Tamas Hedgeus' comment is correct: <em>You are iterating over a new vector, which contains elements that are clones of the elements in <code>v</code></em>. The item being iterated over in your <code>for</code> loop is not a <code>&amp;Vec</code>, it's a <code>Vec</code> that is separate from <code>v</code>, and therefore iterator invalidation is not an issue.</p>\n\n<p>As for your question about the guarantees Rust provides, you'll find that Rust's borrow checker handles this rather well without any strings attached.</p>\n\n<p>If you were to <a href=\"https://play.rust-lang.org/?gist=0029ac7195bf54127fc228a12dd4ba64&amp;version=stable\" rel=\"nofollow noreferrer\">remove <code>clone()</code> from the <code>for</code> loop,</a> though, you would receive an error message, <code>use of moved value: '*v_ref'</code>, because <code>v_ref</code> is considered 'moved' into the <code>for</code> loop when you iterate over it, and cannot be used for the remainder of the function; to avoid this, the <code>iter</code> function creates an iterator object that only <em>borrows</em> the vector, allowing you to reuse the vector after the loop ends (and the iterator is dropped). And if you were to try <a href=\"https://play.rust-lang.org/?gist=354a24abe554b17d7e67d8e3991ef67b&amp;version=stable\" rel=\"nofollow noreferrer\">iterating over and mutating <code>v</code></a> without the <code>v_ref</code> abstraction, the error reads <code>cannot borrow 'v' as mutable because it is also borrowed as immutable</code>. <code>v</code> is borrowed immutably within the iterator spawned by <code>v.iter()</code> (which has type signature of <code>fn iter(&amp;self) -&gt; Iter&lt;T&gt;</code> - note, it makes a <em>borrow</em> to the vector), and will not allow you to mutate the vector as a result of Rust's borrow checker, until the iterator is dropped (at the end of the <code>for</code> loop). However, since you can have multiple <em>immutable</em> references to a single object, you can still <em>read</em> from the vector within the for loop, just not write into it.</p>\n\n<p>If you need to mutate an <em>element</em> of a vector while iterating over the vector, you can use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter_mut\" rel=\"nofollow noreferrer\"><code>iter_mut</code></a>, which returns <em>mutable</em> references to one element at a time and lets you change that element <em>only</em>. You still cannot mutate the iterated vector itself with <code>iter_mut</code>, because Rust ensures that there is only <em>one</em> mutable reference to an object at a time, as well as ensuring there are no mutable references to an object in the same scope as immutable references to that object.</p>\n"}], "owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 674, "favorite_count": 1, "accepted_answer_id": 49226060, "answer_count": 1, "score": 2, "last_activity_date": 1520876104, "creation_date": 1520807899, "last_edit_date": 1520876104, "question_id": 49225860, "link": "https://stackoverflow.com/questions/49225860/does-rust-protect-me-from-iterator-invalidation-when-pushing-to-a-vector-while-i", "title": "Does Rust protect me from iterator invalidation when pushing to a vector while iterating over it?", "body": "<p>Does Rust protect me from iterator invalidation here or am I just lucky with <code>realloc</code>? What guarantees are given for an iterator returned for <code>&amp;'a Vec&lt;T&gt;</code>? </p>\n\n<pre><code>fn main() {\n    let mut v = vec![0; 2];\n\n    println!(\"capacity: {}\", v.capacity());\n\n    {\n        let v_ref = &amp;mut v;\n        for _each in v_ref.clone() {\n            for _ in 0..101 {\n                (*v_ref).push(1); // ?\n            }\n        }\n    }\n\n    println!(\"capacity: {}\", v.capacity());\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1520797608, "post_id": 49223801, "comment_id": 85452203, "body": "In addition to what Shepmaster said, consider giving that mutable vector some thought: What would be the lifetime of the <code>&amp;Gamepad</code> values in it? Also, does it make sense to have a <code>Rc&lt;&amp;Gamepad&gt;</code>? The sections of the Rust book on ownership, borrowing and lifetimes might help you if you cannot answer these sub-questions."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520803418, "post_id": 49223801, "comment_id": 85454118, "body": "This question is basically a duplicate of <a href=\"https://stackoverflow.com/q/47618823/155423\">Cannot borrow as mutable because it is also borrowed as immutable</a>. If you agree, we can mark it as a duplicate. If you disagree, please further <a href=\"https://stackoverflow.com/posts/49223801/edit\">edit</a> your question to show how they are different or to clarify your question towards which aspects you don&#39;t understand."}, {"owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "edited": false, "score": 0, "creation_date": 1520881901, "post_id": 49223801, "comment_id": 85489333, "body": "Maybe I&#39;m not understanding the intent here, but couldn&#39;t you make <code>Gamepad</code> derive <code>Clone</code>, change <code>vec</code> to <code>Vec&lt;Gamepad&gt;</code>, and <code>vec.push(gp.clone())</code>?"}, {"owner": {"reputation": 1237, "user_id": 407712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/6d1a04833a1759348f01f57ae885825b?s=128&d=identicon&r=PG", "display_name": "Paul Praet", "link": "https://stackoverflow.com/users/407712/paul-praet"}, "reply_to_user": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "edited": false, "score": 0, "creation_date": 1520886832, "post_id": 49223801, "comment_id": 85491789, "body": "@NovaDenizen : you can assume Gamepad has certain fields which cannot be cloned."}, {"owner": {"reputation": 1237, "user_id": 407712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/6d1a04833a1759348f01f57ae885825b?s=128&d=identicon&r=PG", "display_name": "Paul Praet", "link": "https://stackoverflow.com/users/407712/paul-praet"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520972037, "post_id": 49223801, "comment_id": 85533554, "body": "@Shepmaster: I don&#39;t agree this is a duplicate. I am still struggling to see why the immutable borrow lasts so long that it prevents me to call update_game (which is outside of the lexical scope of the borrow above). I also tried updating the code with a Rc but that did not help either."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521079814, "post_id": 49223801, "comment_id": 85583992, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/84h7y2/help_immutable_borrow_lasts_longer_than_expected/?ref=share&amp;ref_source=link\" rel=\"nofollow noreferrer\">cross-posted to Reddit</a>."}], "answers": [{"comments": [{"owner": {"reputation": 1237, "user_id": 407712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/6d1a04833a1759348f01f57ae885825b?s=128&d=identicon&r=PG", "display_name": "Paul Praet", "link": "https://stackoverflow.com/users/407712/paul-praet"}, "edited": false, "score": 0, "creation_date": 1521292004, "post_id": 49225500, "comment_id": 85674031, "body": "Thanks for your detailed explanation !"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 1237, "user_id": 407712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/6d1a04833a1759348f01f57ae885825b?s=128&d=identicon&r=PG", "display_name": "Paul Praet", "link": "https://stackoverflow.com/users/407712/paul-praet"}, "edited": false, "score": 0, "creation_date": 1521356598, "post_id": 49225500, "comment_id": 85690550, "body": "@PaulPraet worth noting: Collecting into a <code>Vec</code>, and then doing something with each item in the <code>Vec</code>, is probably unnecessary to begin with. Unless you need to be able to reference all the Gamepads at once, you may be better of simply doing what you need to do in the body of the <code>for</code> loop itself. But, I don&#39;t know the specifics of your code, so do what you have to."}], "tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 1, "last_activity_date": 1520989351, "last_edit_date": 1520989351, "creation_date": 1520805062, "answer_id": 49225500, "question_id": 49223801, "link": "https://stackoverflow.com/questions/49223801/why-does-an-immutable-borrow-in-a-loop-last-outside-of-its-lexical-scope/49225500#49225500", "title": "Why does an immutable borrow in a loop last outside of its lexical scope?", "body": "<p>The error is a bit poorly worded, but I see your problem.</p>\n\n<p>The error says the immutable borrow occurs in the <code>for</code> loop, which isn't quite correct. Instead, it occurs on the line you marked: <code>vec.push(gp)</code>.</p>\n\n<p><code>gp</code> is an immutable reference to <em>an object contained within <code>pong.players</code></em>. When you exit the loop, there is no immutable reference to <code>pong.players</code> <em>itself</em>, but there <em>is</em> a vector full of references to objects inside that vector.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>pong.players : [ a,  b,  c,  d,  e]\n                 ^   ^   ^   ^   ^\nvec          : [&amp;a, &amp;b, &amp;c, &amp;d, &amp;e]\n</code></pre>\n\n<p>Since you have outstanding immutable references to objects within <code>pong.players</code>, Rust has to consider <code>pong.players</code> as \"implicitly\" immutably borrowed, to ensure that none of its contents are mutated while there is still an immutable reference to that item. Since <code>pong.players</code> is a component of <code>pong</code> and is \"implicitly\" borrowed, <code>pong</code> itself has to be \"implicitly\" borrowed immutably as well.</p>\n\n<p>In other words, the borrow of <code>pong</code> in <code>game_loop</code> lasts as such:</p>\n\n<pre><code>fn game_loop(pong: &amp;mut Pong) {\n    let mut vec: Vec&lt;&amp;Gamepad&gt; = Vec::new();    // &lt;+ `vec`'s lifetime begins here\n    {                                           //  |\n        for playerdata in pong.players.iter() { // &lt;+ `pong.players.iter()` temporarily immutably borrows\n                                                //  | `players` from `pong` for the iterator. `playerdata`\n                                                //  | is a borrowed portion of `pong.players`.\n                                                //  | As long as any `playerdata` exists, `pong.players`\n                                                //  | is immutably borrowed by extension.\n            match playerdata.player {           // &lt;+ `playerdata.player` is a portion of `playerdata`.\n                Player::Human(ref gp) =&gt; {      // &lt;+ `gp` is a borrow of an element of `playerdata`.\n                    if gp.str == \"mydev\" {      //  |\n                        vec.push(gp);           // &lt;! At this point, `gp` is added to `vec`.\n                                                //  | Since `gp` is inside `vec`, the reference to `gp`\n                                                //  | is not dropped *until `vec` is dropped.\n                    }                           //  |\n                }                               //  &lt;- `gp`'s *lexical* lifetime ends here, but it may still\n                                                //  | be inside `vec`. Any `gp` added to `vec` is still\n                                                //  | considered borrowed.\n                _ =&gt; {}                         //  |\n            }                                   // &lt;- `playerdata.player` is not longer lexically borrowed.\n                                                //  | However, since `gp`, a portion of `playerdata.player`,\n                                                //  | may still be borrowed, the compiler flags\n                                                //  | `playerdata.player` as still borrowed.\n        }                                       // &lt;- `playerdata`'s borrow scope ends here, but since\n                                                //  | `playerdata.player` may still be borrowed (due to the\n                                                //  | fact that `vec` may contain references to elements of\n                                                //  | playerdata.player), `playerdata` is still considered borrowed\n    }                                           // &lt;- the iterator over `pong.players` is dropped here. But since\n                                                //  | `playerdata` might still be referenced in `vec`, `pong.players`\n                                                //  | is still considered borrowed... and since `pong.players` is\n                                                //  | implicitly borrowed, `pong` is implicitly borrowed.\n    update_game(pong);                          // &lt;! When you reach this line, `pong` is implicitly borrowed because\n                                                //  | there are references to something 'inside' it. Since you can't\n                                                //  | have an immutable borrow and a mutable borrow at the same time\n                                                //  | (to ensure you can't change something at the same time another\n                                                //  | part of the program views it), `update_game(pong)` cannot accept\n                                                //  | a mutable reference to `pong`.\n}                                               // &lt;- At this point, `vec` is dropped, releasing all references to the\n                                                //  | contents of `pong`. `pong` is also dropped here, because it is the\n                                                //  | end of the function.\n</code></pre>\n\n<p>That explains the <strong>why</strong>. As for the <strong>how</strong> to solve it: Theoretically, the <em>easiest</em> solution would be to implement <code>Clone</code> on <code>Gamepad</code> (which can be easily done with <code>#[derive(Clone)]</code> if all of <code>Gamepad</code>'s fields implement <code>clone</code>; the standard implementation is basically creating a new object by calling <code>.clone</code> on all of the fields of the original) and then use <code>gp.clone()</code> rather than just <code>gp</code>.</p>\n\n<p>This has a (probably negligible) impact on the memory use of your program, but moreover, it can be infeasible if <code>Gamepad</code> uses external-library types that do not implement <code>Clone</code> - you can't implement <code>Clone</code> on those external types, because you don't define <code>Clone</code> or <code>SomeExternalType</code> in your project.</p>\n\n<p>If <code>impl Clone</code> isn't available to you, you may need to refactor your code; reconsider <em>why</em> you need certain mutable or immutable borrows, and remove them if they're unnecessary. If that fails, you might need to look into other types of pointers like <code>Cell</code>, which I'm not qualified to give information about!</p>\n\n<p>If you don't need to keep <code>vec</code> around and do stuff with it after <code>update_game</code> is called, consider this solution:</p>\n\n<pre><code>fn game_loop(pong: &amp;mut Pong) {\n    {\n        let mut vec: Vec&lt;&amp;Gamepad&gt; = Vec::new(); // &lt;+ Vec is created\n        for playerdata in pong.players.iter() {  //  |\n            match playerdata.player {            //  |\n                Player::Human(ref gp) =&gt; {       //  |\n                    if gp.str == \"mydev\" {       //  |\n                        vec.push(gp);            //  |\n                    }                            //  |\n                }                                //  |\n                _ =&gt; {}                          //  |\n            }                                    //  |\n        }                                        //  |\n        for g_pad in vec {                       //  |\n            // Do something with each gamepad    //  |\n        }                                        //  |\n    }                                            // &lt;- `vec` is dropped\n    // Since `vec` no longer exists, there are no more references\n    // to the contents of `pong`, and `update_game` can be called.\n    update_game(pong);\n}\n</code></pre>\n\n<p>Hope this helps.</p>\n"}], "owner": {"reputation": 1237, "user_id": 407712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/6d1a04833a1759348f01f57ae885825b?s=128&d=identicon&r=PG", "display_name": "Paul Praet", "link": "https://stackoverflow.com/users/407712/paul-praet"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 515, "favorite_count": 0, "accepted_answer_id": 49225500, "answer_count": 1, "score": 1, "last_activity_date": 1520989351, "creation_date": 1520794422, "last_edit_date": 1520972743, "question_id": 49223801, "link": "https://stackoverflow.com/questions/49223801/why-does-an-immutable-borrow-in-a-loop-last-outside-of-its-lexical-scope", "title": "Why does an immutable borrow in a loop last outside of its lexical scope?", "body": "<p>I am stuck on the borrow checker.</p>\n\n<pre><code>pub struct Gamepad {\n    str: String,\n}\n\npub enum Player {\n    Human(Gamepad),\n    Computer,\n}\n\npub struct PlayerData {\n    pub player: Player, /* actually this should be private */\n}\n\nstruct Pong {\n    players: Vec&lt;PlayerData&gt;,\n}\n\nfn update_game(_pong: &amp;mut Pong) {}\n\nfn main() {\n    println!(\"Hello, world!\");\n    let mut pong = Pong {\n        players: vec![\n            PlayerData {\n                player: Player::Computer,\n            },\n            PlayerData {\n                player: Player::Human(Gamepad {\n                    str: \"mydev\".to_string(),\n                }),\n            },\n        ],\n    };\n\n    game_loop(&amp;mut pong);\n}\n\nfn game_loop(pong: &amp;mut Pong) {\n    let mut vec: Vec&lt;&amp;Gamepad&gt; = Vec::new();\n    {\n        for playerdata in pong.players.iter() {\n            match playerdata.player {\n                Player::Human(ref gp) =&gt; {\n                    if gp.str == \"mydev\" {\n                        vec.push(gp); //omitting this line of code fixes borrow checker issues\n                    }\n                }\n                _ =&gt; {}\n            }\n        }\n    }\n    update_game(pong);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=68324c93ab71143413c9f9a7aebffce8&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>This gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*pong` as mutable because `pong.players` is also borrowed as immutable\n  --&gt; src/main.rs:52:17\n   |\n41 |         for playerdata in pong.players.iter() {\n   |                           ------------ immutable borrow occurs here\n...\n52 |     update_game(pong);\n   |                 ^^^^ mutable borrow occurs here\n53 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>While I <em>can</em> understand the error to some extent, but coming from a C and Java background, I really struggle to get out of this problem. I am mainly confused why the immutable borrow is not released after the for loop ends. How would you write this in idiomatic Rust? </p>\n"}, {"tags": ["rust", "x11"], "owner": {"reputation": 21, "user_id": 9471929, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/642831a9f49c31753f3ee06fe9c1849d?s=128&d=identicon&r=PG&f=1", "display_name": "Fizzy Snails", "link": "https://stackoverflow.com/users/9471929/fizzy-snails"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 276, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1520793604, "creation_date": 1520769163, "last_edit_date": 1520793604, "question_id": 49219696, "link": "https://stackoverflow.com/questions/49219696/drawing-to-the-x-root-window-with-glutin", "title": "Drawing to the X root window with glutin", "body": "<p>I would like to render a live wallpaper into the X root window. This is <a href=\"https://github.com/tomaka/glutin/issues/947\" rel=\"nofollow noreferrer\">currently not possible directly through the API glutin exposes</a>.</p>\n\n<p>I found a post where the asker seems to eventually figure it out: <a href=\"https://stackoverflow.com/questions/45527720/how-can-i-make-a-window-override-redirect-with-glutin\">How can I make a window override-redirect with glutin?</a>.</p>\n\n<p>However, it seems that the code snippet from the answer is not enough to achieve the desired effect: once the flag is set, the previously-created window disappears, but nothing is rendered to the root window. What am I missing?</p>\n\n<p>Here's what I have so far:</p>\n\n<pre><code>let mut events_loop = glium::glutin::EventsLoop::new();\nlet context = glium::glutin::ContextBuilder::new();\nlet window = glium::glutin::WindowBuilder::new()\n    .with_dimensions(800, 600)\n    .with_title(\"TEST\");\nlet display = glium::Display::new(window, context, &amp;events_loop).unwrap();\n\nunsafe {\n    use glium::glutin::os::unix::WindowExt;\n    use winit::os::unix::x11::XConnection;\n    use winit::os::unix::x11::ffi::{Display, XID, CWOverrideRedirect, XSetWindowAttributes};\n    let x_connection = std::sync::Arc::&lt;XConnection&gt;::into_raw(display.gl_window().get_xlib_xconnection().unwrap());\n    let x_display = display.gl_window().get_xlib_display().unwrap() as *mut Display;\n    let x_window = display.gl_window().get_xlib_window().unwrap() as XID;\n    ((*x_connection).xlib.XChangeWindowAttributes)(\n        x_display,\n        x_window,\n        CWOverrideRedirect,\n        &amp;mut XSetWindowAttributes {\n            background_pixmap: 0,\n            background_pixel: 0,\n            border_pixmap: 0,\n            border_pixel: 0,\n            bit_gravity: 0,\n            win_gravity: 0,\n            backing_store: 0,\n            backing_planes: 0,\n            backing_pixel: 0,\n            save_under: 0,\n            event_mask: 0,\n            do_not_propagate_mask: 0,\n            override_redirect: 1,\n            colormap: 0,\n            cursor: 0,\n        }\n    );\n    ((*x_connection).xlib.XUnmapWindow)(x_display, x_window);\n    ((*x_connection).xlib.XMapWindow)(x_display, x_window);\n}\n</code></pre>\n"}, {"tags": ["ubuntu", "rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520769250, "post_id": 49219008, "comment_id": 85442968, "body": "I don&#39;t know about linux, but on windows outputting to a file is much faster than outputting to a visible console. You might try redirecting the output to <code>&#47;dev&#47;nul</code>. And of course there is some startup overhead (create process, setup memory manager, cold caches, etc.)."}], "answers": [{"tags": [], "owner": {"reputation": 1253, "user_id": 103192, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a0a0bf451db6d1e06be88b4ce3cd72a1?s=128&d=identicon&r=PG", "display_name": "Rawler", "link": "https://stackoverflow.com/users/103192/rawler"}, "is_accepted": false, "score": 1, "last_activity_date": 1520803749, "last_edit_date": 1520803749, "creation_date": 1520803599, "answer_id": 49225280, "question_id": 49219008, "link": "https://stackoverflow.com/questions/49219008/why-is-my-program-slower-than-the-benchmark-shows/49225280#49225280", "title": "Why is my program slower than the benchmark shows?", "body": "<p>My guess would be a combination of delay in console output, cold caches in the CPU (compared to <code>cargo bench</code>, which runs the benchmark multiple times) and linking.</p>\n\n<p>One quick way to drill down is to time your <code>main()</code> using <code>std::time::Instant</code>. If this is closer to 8ms, it's most likely overhead in preparing execution (fork, link exec).</p>\n\n<p>If you <em>really</em> want to know, system-wide profiling (i.e. <code>perf</code> in Linux) is probably the only way to know for sure.</p>\n"}, {"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 1, "last_activity_date": 1520873405, "last_edit_date": 1520873405, "creation_date": 1520841283, "answer_id": 49230434, "question_id": 49219008, "link": "https://stackoverflow.com/questions/49219008/why-is-my-program-slower-than-the-benchmark-shows/49230434#49230434", "title": "Why is my program slower than the benchmark shows?", "body": "<p>The results <em>don't</em> indicate that it takes 8ms to run the whole program, but that it takes roughly 8ms to run the <code>fizz</code> function <em>once</em>. However, the bencher runs the function more than once to ensure that the results are repeatable. Hence the <code>+/-\u00a0681,134</code> which gives a measure of how much variation there was between runs.</p>\n\n<p>More specifically, 8ms is the median time of several runs, while  <code>+/-\u00a0681,134\u00a0ns</code> is the difference between the maximum and minimum observed run times.</p>\n\n<p>See also <a href=\"https://stackoverflow.com/q/48323487/155423\">How do I interpret the output of `cargo bench`?</a></p>\n"}], "owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "answer_count": 2, "score": -1, "last_activity_date": 1520873405, "creation_date": 1520764282, "last_edit_date": 1520793548, "question_id": 49219008, "link": "https://stackoverflow.com/questions/49219008/why-is-my-program-slower-than-the-benchmark-shows", "title": "Why is my program slower than the benchmark shows?", "body": "<p>I have this code:</p>\n\n<pre><code>fn main() {\n    let s = \"string\";\n    let res = fizz(s);\n    println(\"{}\", res);\n}\n\nfn fizz(s: &amp;str) -&gt; String {\n    // Does something heavy\n}\n\n#[bench]\nfn fizz_time(b: &amp;mut Bencher) {\n    let s = \"string\";\n    b.iter(|| {\n        fizz(s);\n    });\n}\n</code></pre>\n\n<p>The benchmark result is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u27e9 cargo bench\nrunning 1 tests\ntest test::fizz_time ... bench:   8,215,412 ns/iter (+/- 681,134)\n</code></pre>\n\n<p>This indicates that takes about 8ms to execute the whole program, but when I run a executable built by <code>cargo build --release</code>, it takes about 50ms to execute:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u27e9 time -v ./target/release/fizz_test \n03b14f36de9aa6c85a87f29cceb21c6f972e94170d8f32c321ae7b6785c4043b5f\n        Command being timed: \"./target/release/fizz_test\"\n        User time (seconds): 0.05\n        System time (seconds): 0.00\n        Percent of CPU this job got: 95%\n        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.06\n        Average shared text size (kbytes): 0\n        Average unshared data size (kbytes): 0\n        Average stack size (kbytes): 0\n        Average total size (kbytes): 0\n        Maximum resident set size (kbytes): 2876\n        Average resident set size (kbytes): 0\n        Major (requiring I/O) page faults: 0\n        Minor (reclaiming a frame) page faults: 136\n        Voluntary context switches: 0\n        Involuntary context switches: 75\n        Swaps: 0\n        File system inputs: 0\n        File system outputs: 0\n        Socket messages sent: 0\n        Socket messages received: 0\n        Signals delivered: 0\n        Page size (bytes): 4096\n        Exit status: 0\n</code></pre>\n\n<p>Why would this happen? Is executing <code>main</code> a heavy task compared to the functions? Is the benchmark not properly written?</p>\n\n<p>I'm using Ubuntu 17.10 64bit (kernel 4.13.0-36-lowlatency).</p>\n"}, {"tags": ["functional-programming", "rust", "purely-functional"], "owner": {"reputation": 586, "user_id": 5566407, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/96f6a5bd6884a8436fe3cabf85be2e94?s=128&d=identicon&r=PG&f=1", "display_name": "xuq01", "link": "https://stackoverflow.com/users/5566407/xuq01"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 53, "favorite_count": 0, "closed_date": 1520781906, "answer_count": 0, "score": 1, "last_activity_date": 1520806003, "creation_date": 1520764230, "last_edit_date": 1520806003, "question_id": 49218998, "link": "https://stackoverflow.com/questions/49218998/equivalent-to-nested-match-in-rust", "closed_reason": "Duplicate", "title": "Equivalent to &quot;nested match&quot; in Rust", "body": "<p>I'm trying to implement a purely functional red-black tree in Rust, following Okasaki's example. When I insert into a red-black tree, I might have to insert into the tree. Here's Haskell code for the <code>balance</code> function:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>balance :: Ord a =&gt; Color -&gt; Tree a -&gt; a -&gt; Tree a -&gt; Tree a\nbalance Black (T Red (T Red a x b) y c) z d = T Red (T Black a x b) y (T Black c z d)\nbalance Black (T Red a x (T Red b y c)) z d = T Red (T Black a x b) y (T Black c z d)\nbalance Black a x (T Red (T Red b y c) z d) = T Red (T Black a x b) y (T Black c z d)\nbalance Black a x (T Red b y (T Red c z d)) = T Red (T Black a x b) y (T Black c z d)\nbalance c l v r = T c l v r\n</code></pre>\n\n<p>This code uses nested matching. However, this is not possible in Rust as one has to use a \"boxed\" representation for the left and right branches. I'm using an <code>Rc</code>. Here's my data definition for <code>Tree&lt;A&gt;</code>: </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Clone, Debug, Eq, PartialEq)]\nenum Tree&lt;A&gt; {\n    E,\n    T(Color, Rc&lt;Tree&lt;A&gt;&gt;, A, Rc&lt;Tree&lt;A&gt;&gt;)\n}\n</code></pre>\n\n<p>How can I achieve the equivalent of \"nested matching\" when I have <code>Rc</code>s?</p>\n\n<p><strong>I am well aware that it is impossible to match into <code>Rc</code>s</strong>. Instead, I am wondering if there are equivalent programming idioms that can achieve the same effect.</p>\n"}, {"tags": ["rust", "subprocess", "exec", "stdin"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1520793416, "post_id": 49218691, "comment_id": 85450711, "body": "Presumably the OP (and any future readers) doesn&#39;t know <i>how</i> to do any of the things you&#39;ve suggested; perhaps you could take to the time to show working code?"}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": false, "score": 1, "last_activity_date": 1520761818, "creation_date": 1520761818, "answer_id": 49218691, "question_id": 49218599, "link": "https://stackoverflow.com/questions/49218599/write-to-child-process-stdin-in-rust/49218691#49218691", "title": "Write to child process&#39; stdin in Rust?", "body": "<p>You need to request the use of a pipe at the time you create the subprocess.  Then you can write to the write end of the pipe in order to pass data to the subprocess.</p>\n\n<p>Alternatively, you could write the data to a temporary file and specify a <code>File</code> object.  This way, you do not have to take of feeding the data piecewise to the subprocess, which can be a bit tricky if you are also reading from its standard output.  (There's a risk of deadlocks.)</p>\n\n<p>If an inherited descriptor is used for standard input, the parent process does not necessarily have the capability to inject the data into that.</p>\n"}, {"tags": [], "owner": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "is_accepted": false, "score": 9, "last_activity_date": 1606408713, "last_edit_date": 1606408713, "creation_date": 1522583895, "answer_id": 49597789, "question_id": 49218599, "link": "https://stackoverflow.com/questions/49218599/write-to-child-process-stdin-in-rust/49597789#49597789", "title": "Write to child process&#39; stdin in Rust?", "body": "<p>You can create a stdin pipe and write the bytes on it.</p>\n<ul>\n<li>As <code>Command::output</code> immediately closes the stdin, you'll have to use <code>Command::spawn</code>.</li>\n<li><code>Command::spawn</code> inherits stdin by default. You'll have to use <code>Command::stdin</code> to change the behavior.</li>\n</ul>\n<p>Here is the example (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=2f64d7130d7e58b0a7ac179edd9bc335\" rel=\"nofollow noreferrer\">playground</a>):</p>\n<pre><code>use std::io::{self, Write};\nuse std::process::{Command, Stdio};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut child = Command::new(&quot;cat&quot;)\n        .stdin(Stdio::piped())\n        .stdout(Stdio::piped())\n        .spawn()?;\n\n    let child_stdin = child.stdin.as_mut().unwrap();\n    child_stdin.write_all(b&quot;Hello, world!\\n&quot;)?;\n    // Close stdin to finish and avoid indefinite blocking\n    drop(child_stdin);\n    \n    let output = child.wait_with_output()?;\n\n    println!(&quot;output = {:?}&quot;, output);\n\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 16549, "user_id": 836390, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/tNl4E.jpg?s=128&g=1", "display_name": "joshlf", "link": "https://stackoverflow.com/users/836390/joshlf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2629, "favorite_count": 2, "answer_count": 2, "score": 5, "last_activity_date": 1606408713, "creation_date": 1520761030, "question_id": 49218599, "link": "https://stackoverflow.com/questions/49218599/write-to-child-process-stdin-in-rust", "title": "Write to child process&#39; stdin in Rust?", "body": "<p>Rust's <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"noreferrer\"><code>std::process::Command</code></a> allows configuring the process' stdin via the <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html#method.stdin\" rel=\"noreferrer\"><code>stdin</code></a> method, but it appears that that method only accepts existing files or pipes.</p>\n\n<p>Given a slice of bytes, how would you go about writing it to the stdin of a <code>Command</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520781741, "post_id": 49218474, "comment_id": 85446694, "body": "See also <a href=\"https://stackoverflow.com/q/41540882/155423\">Convert boxed trait to mutable trait reference in Rust</a>"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1520761627, "creation_date": 1520761627, "answer_id": 49218657, "question_id": 49218474, "link": "https://stackoverflow.com/questions/49218474/how-to-convert-a-boxed-trait-into-a-trait-reference/49218657#49218657", "title": "How to convert a boxed trait into a trait reference?", "body": "<p>Borrow the contents of the <code>Box</code>, rather than the <code>Box</code> itself:</p>\n\n<pre><code>let trait_ref: &amp;T = &amp;*trait_box;\n</code></pre>\n\n<p>The reason the line involving <code>&amp;S</code> works is because the only way for Rust to get from <code>Box&lt;S&gt;</code> to <code>&amp;S</code> is via \"deref coercion\"; that is, it repeatedly dereferences the value until either the types match, or it can't dereference any further.</p>\n\n<p>Coercing to a trait object, on the other hand, isn't done using dereferencing at all; it involves constructing a new pointer directly from the given one.  If it can't do that, it fails.</p>\n"}, {"tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 12, "last_activity_date": 1520761664, "creation_date": 1520761664, "answer_id": 49218665, "question_id": 49218474, "link": "https://stackoverflow.com/questions/49218474/how-to-convert-a-boxed-trait-into-a-trait-reference/49218665#49218665", "title": "How to convert a boxed trait into a trait reference?", "body": "<p><code>Box&lt;T&gt;</code> implements <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"noreferrer\">the <code>AsRef&lt;T&gt;</code> trait</a>, which provides the method <code>as_ref()</code>, so you can turn it into a reference that way:</p>\n\n<pre><code>let trait_ref: &amp;T = trait_box.as_ref();\n</code></pre>\n\n<p>Normally, <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch15-02-deref.html\" rel=\"noreferrer\"><em>deref coercions</em></a> mean that you don't usually need to write this out explicitly. If you pass a value of type <code>Box&lt;T&gt;</code> to a function that takes <code>&amp;T</code>, the compiler will insert the conversion for you. If you want to call one of the methods on <code>T</code> that takes <code>&amp;self</code>, the compiler will insert the conversion for you. <strong>However</strong>, deref coercions don't apply to traits, so this won't happen for trait objects.</p>\n"}], "owner": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1805, "favorite_count": 1, "accepted_answer_id": 49218665, "answer_count": 2, "score": 5, "last_activity_date": 1520781644, "creation_date": 1520759995, "last_edit_date": 1520781644, "question_id": 49218474, "link": "https://stackoverflow.com/questions/49218474/how-to-convert-a-boxed-trait-into-a-trait-reference", "title": "How to convert a boxed trait into a trait reference?", "body": "<p>I have the following code that tries to take a reference to a trait object from a boxed trait:</p>\n\n<pre><code>trait T {}\n\nstruct S {}\n\nimpl T for S {}\n\nfn main() {\n    let struct_box: Box&lt;S&gt; = Box::new(S {});\n    let struct_ref: &amp;S = &amp;struct_box;\n\n    let trait_box: Box&lt;T&gt; = Box::new(S {});\n    let trait_ref: &amp;T = &amp;trait_box;\n}\n</code></pre>\n\n<p>The compiler returns the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::boxed::Box&lt;T&gt;: T` is not satisfied\n  --&gt; src/main.rs:12:25\n   |\n12 |     let trait_ref: &amp;T = &amp;trait_box;\n   |                         ^^^^^^^^^^ the trait `T` is not implemented for `std::boxed::Box&lt;T&gt;`\n   |\n   = note: required for the cast to the object type `T`\n</code></pre>\n\n<p>How do I properly borrow <code>&amp;T</code> from <code>Box&lt;T&gt;</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "edited": false, "score": 0, "creation_date": 1520820266, "post_id": 49218712, "comment_id": 85458040, "body": "<code>Ok(serde_yaml::from_reader(config_file)?)</code> Yea, I think this is what I was looking for. It totally make sense. Thanks for the help :)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1520761944, "creation_date": 1520761944, "answer_id": 49218712, "question_id": 49218306, "link": "https://stackoverflow.com/questions/49218306/convert-result-in-place/49218712#49218712", "title": "Convert Result in place", "body": "<p>You have two different error types.  Different types aren't compatible.  There's nothing more to it than that.</p>\n\n<p>It's worth noting that you're not <em>just</em> \"re-wrapping\" the value; you're pulling the initial <code>Result</code> value apart, doing a conversion of the error type, branching out of the function if there <em>was</em> an error, then re-wrapping the value into a different <code>Result</code> type.  Also, you don't even need the variable there; you could equally write it as <code>Ok(serde_yaml::from_reader(config_file)?)</code>.</p>\n\n<p>If you really don't want to use <code>?</code> and <code>Ok</code>, you can do the error conversion another way:</p>\n\n<pre><code>serde_yaml::from_reader(config_file)\n    .map_err(|e| e.into())\n</code></pre>\n\n<p>But that's essentially the same thing, sans the \"early return on error\" part.</p>\n"}], "owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 910, "favorite_count": 0, "accepted_answer_id": 49218712, "answer_count": 1, "score": 0, "last_activity_date": 1520781818, "creation_date": 1520758641, "last_edit_date": 1520781818, "question_id": 49218306, "link": "https://stackoverflow.com/questions/49218306/convert-result-in-place", "title": "Convert Result in place", "body": "<p>I have the following code:</p>\n\n<pre><code>/// An error that encapsulates all possible configuration errors.\n#[derive(Debug)]\npub enum Error {\n    /// An error that occured while parsing a yaml configuration.\n    Yaml(serde_yaml::Error),\n}\n\nimpl From&lt;serde_yaml::Error&gt; for Error {\n    fn from(err: serde_yaml::Error) -&gt; Error {\n        Error::Yaml(err)\n    }\n}\n\n/// A `Result` type alias for this config module's `Error` type.\npub type Result&lt;T&gt; = ::std::result::Result&lt;T, Error&gt;;\n\npub fn new(mut args: env::Args) -&gt; Result&lt;Config, Error&gt; {\n    // initialize config_file variable\n    let config = serde_yaml::from_reader(config_file)?;\n    Ok(config)\n}\n</code></pre>\n\n<p><code>serde_yaml::from_reader</code> returns a <code>serde_yaml::Result</code> which uses <code>serde_yaml::Error</code> for the <code>Result</code>'s error type. The code above compiles just fine. </p>\n\n<p>That said, it seems a little funny that I should have to unwrap the <code>Result</code> given back to me from calling <code>serde_yaml::from_reader</code> only to then immediately repackage in into a new <code>Ok</code>. In other words, I'd really like to be able to just write:</p>\n\n<pre><code>pub fn new(mut args: env::Args) -&gt; Result&lt;Config&gt; {\n    // initialize config_file variable\n    serde_yaml::from_reader(config_file)\n}\n</code></pre>\n\n<p>But when I try to do this, I get the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/config.rs:28:9\n   |\n18 |     pub fn new(mut args: env::Args) -&gt; Result&lt;Config&gt; {\n   |                                        -------------- expected `std::result::Result&lt;config::Config, config::Error&gt;` because of return type\n...\n28 |         serde_yaml::from_reader(config_file)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `config::Error`, found struct `serde_yaml::Error`\n   |\n   = note: expected type `std::result::Result&lt;config::Config, config::Error&gt;`\n              found type `std::result::Result&lt;_, serde_yaml::Error&gt;`\n</code></pre>\n\n<p>What's going on here and what's the most idiomatic thing to do in this situation? Should I just leave my code as is?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1520755606, "post_id": 49217517, "comment_id": 85439713, "body": "What is your <code>bool</code> variable in <code>doit_ugly()</code> good for? The <code>if</code> condition is always <code>true</code> in your code."}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1520756199, "post_id": 49217517, "comment_id": 85439836, "body": "exactly! the only purpose of this boolean is to escape the scope created with <code>{}</code> where I can borrow <code>self.data</code> immutably and drop it before I can access it mutably"}, {"owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 0, "creation_date": 1520756559, "post_id": 49217517, "comment_id": 85439907, "body": "You do not need it. <a href=\"https://play.rust-lang.org/?gist=e42f1e2cb221d28773b875bb7cb50ab2&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520756745, "post_id": 49217517, "comment_id": 85439949, "body": "See updated post. The point here is not the boolean, but the scope. If I want to call <code>self.data.insert</code> based on some condition on <code>a</code>, than there is no way to do this without ugly crap like this one with boolean"}], "answers": [{"comments": [{"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520763795, "post_id": 49218430, "comment_id": 85441568, "body": "unfortunately this isn&#39;t wotking. neither of map blocks get called <a href=\"https://play.rust-lang.org/?gist=e42f1e2cb221d28773b875bb7cb50ab2&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "reply_to_user": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520764624, "post_id": 49218430, "comment_id": 85441751, "body": "@OlegAntonyan The map closures get called if  and only if <code>data</code> contains &quot;some key&quot;."}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520764914, "post_id": 49218430, "comment_id": 85441841, "body": "sure, but what if it does not contain &quot;some key&quot;? oh, I see. <code>map</code>s only help to create closures with separate scopes, so I can still mutate <code>self.data</code> outside of them, or inside of each other"}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520766431, "post_id": 49218430, "comment_id": 85442251, "body": "well, it works in this case, but fails if I want to mutate self.data inside first closure <a href=\"https://play.rust-lang.org/?gist=9f17b052a51f3e4f4d8aecf8c90cd45e&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "reply_to_user": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520767618, "post_id": 49218430, "comment_id": 85442570, "body": "@OlegAntonyan Why would you want to mutate <code>self.data</code> in the first closure? Referring to your original code: <code>&#47;&#47; do something with a</code> goes into the first closure; code within <code>if mutate { ... }</code> goes into the second closure."}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520768026, "post_id": 49218430, "comment_id": 85442659, "body": "this is synthetic example to keep code snippet small. in real project I need to modify a value if it exists in <code>self.data</code>, and than insert another value to <code>self.data</code>"}, {"owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "reply_to_user": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520769694, "post_id": 49218430, "comment_id": 85443090, "body": "@OlegAntonyan In this case, your synthetic example does not represent the actual issue. If <code>&#47;&#47; do something with a</code> contained code mutating <code>self.data</code>, your <code>doit_ugly</code> wouldn&#39;t compile either."}], "tags": [], "owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "is_accepted": true, "score": 0, "last_activity_date": 1520759595, "creation_date": 1520759595, "answer_id": 49218430, "question_id": 49217517, "link": "https://stackoverflow.com/questions/49217517/cannot-borrow-hashmap-as-mutable-because-it-is-also-borrowed-as-immutable/49218430#49218430", "title": "Cannot borrow HashMap as mutable because it is also borrowed as immutable", "body": "<p>You could use <code>map</code>:</p>\n\n<pre><code>self.data.get(\"some key\")\n    .map(|a| println!(\"{:?}\", a)) // do something with a if there is some a\n    .map(|_| self.data.insert(\"another key\", String::new())); \n</code></pre>\n\n<p>It maps <code>a</code> to <code>()</code> enabling <code>self.data.insert</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 8219355, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ac912efce5240ccbae62b6e8cfd0a14e?s=128&d=identicon&r=PG&f=1", "display_name": "Masqq", "link": "https://stackoverflow.com/users/8219355/masqq"}, "is_accepted": false, "score": 1, "last_activity_date": 1520798651, "last_edit_date": 1520798651, "creation_date": 1520798058, "answer_id": 49224424, "question_id": 49217517, "link": "https://stackoverflow.com/questions/49217517/cannot-borrow-hashmap-as-mutable-because-it-is-also-borrowed-as-immutable/49224424#49224424", "title": "Cannot borrow HashMap as mutable because it is also borrowed as immutable", "body": "<p>After looking at <a href=\"https://doc.rust-lang.org/error-index.html#E0502\" rel=\"nofollow noreferrer\">the description for error 502</a>, I can suggest only one option: place your immutable borrow after the mutable one and use your original data to check the <code>if</code> statement instead of <code>a</code>:</p>\n\n<pre><code>pub fn doit(&amp;mut self) {\n    if self.data.get(\"some key\").is_some() {\n        self.data.insert(\"another key\", String::new());\n    }\n\n    let a = self.data.get(\"some key\");\n}\n</code></pre>\n"}], "owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 954, "favorite_count": 0, "accepted_answer_id": 49218430, "answer_count": 2, "score": 0, "last_activity_date": 1520798651, "creation_date": 1520751666, "last_edit_date": 1520756569, "question_id": 49217517, "link": "https://stackoverflow.com/questions/49217517/cannot-borrow-hashmap-as-mutable-because-it-is-also-borrowed-as-immutable", "title": "Cannot borrow HashMap as mutable because it is also borrowed as immutable", "body": "<p>This question was asked zillion times, but it always has kind of unique solution. I understand why it's happening and how to fix it, but my fix is ugly and I'm probably missing something.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut s = Trololo { data: HashMap::new() };\n    s.doit();\n    s.doit_ugly();\n}\n\nstruct Trololo {\n    data: HashMap&lt;&amp;'static str, String&gt;\n}\n\nimpl Trololo {\n    pub fn doit(&amp;mut self) {\n        let a = self.data.get(\"some key\");\n        // do something with a\n        if a.is_some() {\n            // here I don't need 'a' anymore, but because self.data borrowed immutably I can't do anything with it mutably\n            self.data.insert(\"another key\", String::new());\n        }\n    }\n\n    pub fn doit_ugly(&amp;mut self) {\n        let mut mutate = false;\n        {\n            let a = self.data.get(\"some key\");\n            // do something with a\n            if a.is_some() {\n                mutate = true;\n            }\n        }   // borrow end here, so I can borrow self.data mutably now\n        if mutate {\n            self.data.insert(\"another key\", String::new());\n        }\n\n    }\n}\n</code></pre>\n\n<p>The problem here in method <code>doit()</code>. I can't borrow <code>self.data</code> as mutable because <code>a</code> holds a reference to immutably borrowed <code>self.data</code>. </p>\n\n<p>It's possible to fix this in <code>doit_ugly()</code> method, but it's look terrible.</p>\n\n<p>Is there a better way to deal with this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1520723023, "post_id": 49214650, "comment_id": 85434142, "body": "The error given by your simplified playground code is not the same error that you&#39;ve posted in the question. Perhaps your playground example has been simplified too much?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520745709, "post_id": 49214650, "comment_id": 85437881, "body": "<code>R: FnMut(&amp;mut MutexGuard&lt;Runnable&gt;)</code> is the same as <code>R: FnMut(&amp;mut MutexGuard&lt;Runnable + &#39;static&gt;)</code>.  You want <code>R: for &lt;&#39;a&gt; FnMut(&amp;mut MutexGuard&lt;Runnable + &#39;a&gt;)</code>"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1520748657, "post_id": 49214650, "comment_id": 85438386, "body": "@Shepmaster If you write <code>R: FnMut(&amp;mut MutexGuard&lt;Runnable + &#39;static&gt;)</code> though, the code compiles fine."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1520763167, "post_id": 49214650, "comment_id": 85441428, "body": "@Francis Cagn&#233; indeed it does! Now I&#39;ll go and study why! :-) If you want to submit an answer I&#39;ll accept it. If not, thanks anyway!"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1520766504, "post_id": 49214650, "comment_id": 85442273, "body": "The problem was wierder than I expected. In my example I stripped out a later call after &quot;runner(...)&quot;. In my real code it continued to fail until I did a deref on that code line which is AFTER the line the compiler was reporting the error on. I&#39;ll probably post a new playground example to illustrate when I get a moment. Adding a deref to the <i>subsequent</i> line fixed it!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1520781490, "post_id": 49214650, "comment_id": 85446613, "body": "@FrancisGagn&#233; interesting \u2014 reopened."}], "answers": [{"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1520763507, "post_id": 49215472, "comment_id": 85441508, "body": "I understand that since MutexGuard implements Deref and DerefMut, that is done for you by the compiler. <a href=\"https://doc.rust-lang.org/std/sync/struct.MutexGuard.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/sync/struct.MutexGuard.html</a>   Although, I actually prefer to make things more explicit and quite like your suggestion."}], "tags": [], "owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "is_accepted": false, "score": 1, "last_activity_date": 1520745254, "last_edit_date": 1520745254, "creation_date": 1520728680, "answer_id": 49215472, "question_id": 49214650, "link": "https://stackoverflow.com/questions/49214650/calling-method-on-trait-object-behind-arc-mutex/49215472#49215472", "title": "Calling method on Trait object behind Arc &amp; Mutex", "body": "<p>You are passing a reference to the <code>MutexGuard</code> to your <code>runner</code> instead of a reference to the wrapped runnable. You need to insert a deref:</p>\n\n<pre><code>pub fn run&lt;R&gt;(&amp;mut self, index: usize, mut runner: R)\nwhere\n    R: FnMut(&amp;mut Runnable),\n{\n    let runnable_arc = self.runnables[index].clone();\n    let mut runnable = runnable_arc.lock().unwrap();\n    runner(&amp;mut *runnable);\n}\n</code></pre>\n\n<p>From my understanding, this construct - <code>&amp;mut *</code> - shouldn't be necessary here, because <code>MutexGuard</code> implements the <code>DerefMut</code> trait. Apparently, this is a known issue: <a href=\"https://stackoverflow.com/q/46472082\">Why does a mutable borrow of a closure through DerefMut not work?</a></p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1520786868, "creation_date": 1520786868, "answer_id": 49222484, "question_id": 49214650, "link": "https://stackoverflow.com/questions/49214650/calling-method-on-trait-object-behind-arc-mutex/49222484#49222484", "title": "Calling method on Trait object behind Arc &amp; Mutex", "body": "<p>You seem to be running into a glitch in the compiler's inference system. Changing <code>MutexGuard&lt;Runnable&gt;</code> to <code>MutexGuard&lt;Runnable + 'static&gt;</code> fixes the error:</p>\n\n<pre><code>impl RunList {\n    pub fn run&lt;R&gt;(&amp;mut self, index: usize, mut runner: R)\n    where\n        R: FnMut(&amp;mut MutexGuard&lt;Runnable + 'static&gt;),\n    {\n        let runnable_arc = self.runnables[index].clone();\n        let mut runnable = runnable_arc.lock().unwrap();\n        runner(&amp;mut runnable);\n    }\n}\n</code></pre>\n\n<p>But interestingly, changing it to <code>MutexGuard&lt;'static, Runnable + 'static&gt;</code> preserves the error:</p>\n\n<pre><code>impl RunList {\n    pub fn run&lt;R&gt;(&amp;mut self, index: usize, mut runner: R)\n    where\n        R: FnMut(&amp;mut MutexGuard&lt;'static, Runnable + 'static&gt;),\n    {\n        let runnable_arc = self.runnables[index].clone();\n        let mut runnable = runnable_arc.lock().unwrap();\n        runner(&amp;mut runnable);\n    }\n}\n</code></pre>\n\n<p>Why would the compiler infer the latter rather than the former? Well, let's look at the definition of <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.MutexGuard.html\" rel=\"nofollow noreferrer\"><code>MutexGuard</code></a>:</p>\n\n<pre><code>pub struct MutexGuard&lt;'a, T: ?Sized + 'a&gt; { /* fields omitted */ }\n</code></pre>\n\n<p>In <code>MutexGuard&lt;Runnable&gt;</code>, <code>Runnable</code> is a trait object and gets an implicit <code>+ 'static</code> bound because there are no explicit lifetimes. It seems that the compiler tries to unify both occurrences of <code>'a</code> by reasoning that, if we need to replace the second occurrence with <code>'static</code>, then we need to do the same with the first occurrence. However, that logic forgets an important detail: <code>'static</code> outlives any lifetime <code>'a</code>, so there's no reason to force the first <code>'a</code> to be <code>'static</code>. Indeed, when we write <code>MutexGuard&lt;Runnable + 'static&gt;</code>, that's the same as <code>MutexGuard&lt;'a, Runnable + 'static&gt;</code> (how <code>'a</code> is defined depends on the context). That's valid because <code>Runnable + 'static: 'a</code> (you can always pass an object with some lifetime <code>'x</code> as an argument to a function that expects a <em>shorter</em> lifetime <code>'y</code>).</p>\n\n<hr>\n\n<p>For the record, the issue has nothing to do with the <code>FnMut</code> trait; a normal function also shows this behavior:</p>\n\n<pre><code>impl RunList {\n    pub fn run(&amp;mut self, index: usize) {\n        fn runner2(runnable: &amp;mut MutexGuard&lt;Runnable&gt;) {\n            println!(\"Hello, {}\", runnable.run().unwrap());\n        }\n\n        let runnable_arc = self.runnables[index].clone();\n        let mut runnable = runnable_arc.lock().unwrap();\n        runner2(&amp;mut runnable);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1224, "favorite_count": 1, "accepted_answer_id": 49222484, "answer_count": 2, "score": 3, "last_activity_date": 1520786868, "creation_date": 1520720871, "last_edit_date": 1520745327, "question_id": 49214650, "link": "https://stackoverflow.com/questions/49214650/calling-method-on-trait-object-behind-arc-mutex", "title": "Calling method on Trait object behind Arc &amp; Mutex", "body": "<p>This <a href=\"https://play.rust-lang.org/?gist=1c57c05b8f306cbe2083858a8c2ebb18&amp;version=stable\" rel=\"nofollow noreferrer\">playground project</a> has a simplified version of the code I'm trying to compile. </p>\n\n<pre><code>use std::sync::{Arc, Mutex, MutexGuard};\n\npub trait Runnable {\n    fn run(&amp;mut self) -&gt; Option&lt;String&gt;;\n}\n\npub struct Value {}\n\nimpl Runnable for Value {\n    fn run(&amp;mut self) -&gt; Option&lt;String&gt; {\n        Some(\"Value\".to_string())\n    }\n}\n\npub struct RunList {\n    runnables: Vec&lt;Arc&lt;Mutex&lt;Runnable&gt;&gt;&gt;,\n}\n\nimpl RunList {\n    pub fn run&lt;R&gt;(&amp;mut self, index: usize, mut runner: R)\n    where\n        R: FnMut(&amp;mut MutexGuard&lt;Runnable&gt;),\n    {\n        let runnable_arc = self.runnables[index].clone();\n        let mut runnable = runnable_arc.lock().unwrap();\n        runner(&amp;mut runnable);\n    }\n}\n\nfn main() {\n    let mut runnables = Vec::&lt;Arc&lt;Mutex&lt;Runnable&gt;&gt;&gt;::with_capacity(1);\n    runnables.push(Arc::new(Mutex::new(Value {})));\n\n    let mut run_list = RunList { runnables };\n\n    run_list.run(0, |runnable| {\n        println!(\"Hello, {}\", runnable.run().unwrap());\n    });\n}\n</code></pre>\n\n<p>I want a vector of trait objects, where each object is protected by an <code>Arc</code> and a <code>Mutex</code>, and then to be able to call a trait method on each object.</p>\n\n<p>I have a \"borrowed value does not live long enough\" error but I can't see the difference from <a href=\"https://stackoverflow.com/questions/37379952/arc-lifetime-does-not-live-long-enough-from-clone\">this question/answer</a>. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `runnable_arc` does not live long enough\n  --&gt; src/main.rs:25:28\n   |\n25 |         let mut runnable = runnable_arc.lock().unwrap();\n   |                            ^^^^^^^^^^^^ borrowed value does not live long enough\n26 |         runner(&amp;mut runnable);\n27 |     }\n   |     - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n"}, {"tags": ["rust", "petgraph"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1520716314, "post_id": 49212726, "comment_id": 85432542, "body": "Try <code>impl Iterator&lt;Item = (EdgeIdx, NodeIdx)&gt; + &#39;a</code> maybe?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1520746168, "post_id": 49212726, "comment_id": 85437959, "body": "If you are going to use advanced, unstable Rust features, you should probably already be familiar with the <i>basic</i> Rust language. You <a href=\"https://stackoverflow.com/q/32682876/155423\">shouldn&#39;t be attempting to return references to variables created in  functions because it can never work</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520746283, "post_id": 49212726, "comment_id": 85437977, "body": "Please also provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> of your problem; doing so will generally get you better quality answers in a shorter timeframe."}, {"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1520746905, "post_id": 49212726, "comment_id": 85438089, "body": "This isn&#39;t a duplicate question. The answer might be the same, but the question is different. This is important, e.g., because it&#39;s not likely to Google my question and find that answer."}, {"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1520747357, "post_id": 49212726, "comment_id": 85438167, "body": "As for minimal and complete - could you please elaborate? What part of my question is left out? I&#39;m happy to update it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520794588, "post_id": 49212726, "comment_id": 85451106, "body": "@masonk Answers being the same <i>is</i> the important part of marking things as duplicates here on SO. When a question is marked as a duplicate, the question remains around forever, providing a signpost for those exact Google searches you mention. Those visitors end up here, can see if their question is close to yours (or the linked ones) and can then read the answers that are provided."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520794978, "post_id": 49212726, "comment_id": 85451239, "body": "The missing parts of the question include the entire definition of <code>Self</code>. The amount of code / work that you are requesting any potential answerer create out of thin air based on the code you have provided is immense \u2014 they have to guess at what all the types should be, what fields are present, what crates and exact imports are needed, they have to create a driver program and data to reproduce the error, etc. If you <a href=\"https://stackoverflow.com/posts/49212726/edit\">edit</a> your question to contain such, I usually add a comment applying the duplicate(s) answers to your specific case when I close it."}, {"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1520799220, "post_id": 49212726, "comment_id": 85452762, "body": "&quot;The missing parts of the question include the entire definition of Self&quot;.  Those parts of Self aren&#39;t relevant. All that matters, really, is that this function borrows self, and its return value can&#39;t outlive self. I will try to rephrase this more generally later though. I think the problem is that I did an X,Y. I wanted X, but I asked how to do Y."}], "answers": [{"comments": [{"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1520799618, "post_id": 49224338, "comment_id": 85452894, "body": "Thank you bluss!  I&#39;m confused, because I thought that only references could have lifetimes, but it looks like you&#39;re showing an owned type with a lifetime here. Shepmaster is definitely right that  I&#39;ve missed something fundamental about Rust lifetimes which I have to go back and figure out."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1520800785, "post_id": 49224338, "comment_id": 85453287, "body": "@masonk <code>Box&lt;Iterator&gt;</code> and <code>impl Iterator</code> let&#39;s you \u201cforget\u201d about the specific type behind the iterator.. but there is one thing that Rust will never let you forget about.. how long that value is valid to use! (Lifetimes!). That&#39;s the short story of it."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 4, "last_activity_date": 1520797870, "last_edit_date": 1520797870, "creation_date": 1520797537, "answer_id": 49224338, "question_id": 49212726, "link": "https://stackoverflow.com/questions/49212726/how-do-i-return-a-reference-to-an-iterator-using-conservative-impl-trait/49224338#49224338", "title": "How do I return a reference to an iterator using conservative_impl_trait?", "body": "<p>How to return an iterator is already covered <a href=\"https://stackoverflow.com/questions/27535289/what-is-the-correct-way-to-return-an-iterator-or-any-other-trait\">in this question</a>.</p>\n\n<ol>\n<li><p>Note that you <a href=\"https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function\">don't need to return a reference</a>: you want to return an iterator <strong>value</strong> directly, so if we remove the first <code>&amp;</code> in both the method body and the return type, that's closer to what we need.</p></li>\n<li><p>We will use <code>impl Iterator</code> so that we don't have to name the actual iterator type exactly. Just note (code below) that we <a href=\"https://stackoverflow.com/questions/42028470/why-is-adding-a-lifetime-to-a-trait-with-the-plus-operator-iteratoritem-foo\">need to use the <code>impl Iterator&lt;..&gt; + 'a</code> syntax</a>, which means that the (anonymous) iterator contains references valid to use for at least the lifetime <code>'a</code>.</p></li>\n<li><p>We can't use <code>&amp;mut self</code> here! Note that we need to borrow <code>self.search_tree</code> twice: once for the <code>.neighbors()</code> iterator and once for the <code>self.search_tree</code> that's used <em>in</em> the <code>map</code> closure. Multiple borrowing is incompatible with mutable references.</p></li>\n<li><p>We put <code>move</code> as the capture mode on the closure, so that it captures the <code>self</code> reference directly, and not by reference (this is important so that we can return the iterator and the closure.</p></li>\n<li><p>Petgraph specific, but we replace <code>g.node_weight(node_index).unwrap()</code> with just <code>&amp;g[node_index]</code> which is equivalent, but the latter is easier to read.</p></li>\n</ol>\n\n<p>Here is a reproduction of your code, but with modifications along 1-5 to make it compile:</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\nextern crate petgraph;\n\nuse petgraph::Graph;\nuse petgraph::graph::{NodeIndex, EdgeIndex};\n\nstruct Foo {\n    search_tree: Graph&lt;Node, i32&gt;,\n}\n\nstruct Node {\n    parent_edge_idx: Option&lt;EdgeIndex&gt;,\n}\n\nimpl Foo {\n    fn children&lt;'a&gt;(&amp;'a self, node_idx: NodeIndex)\n        -&gt; impl Iterator&lt;Item = (EdgeIndex, NodeIndex)&gt; + 'a\n    {\n        self.search_tree.neighbors(node_idx).map(move |child_idx| {\n            let node = &amp;self.search_tree[child_idx];\n            let edge_idx = node.parent_edge_idx.unwrap();\n            (edge_idx, child_idx)\n        })\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 242, "favorite_count": 0, "accepted_answer_id": 49224338, "answer_count": 1, "score": 1, "last_activity_date": 1580252365, "creation_date": 1520707378, "last_edit_date": 1580252365, "question_id": 49212726, "link": "https://stackoverflow.com/questions/49212726/how-do-i-return-a-reference-to-an-iterator-using-conservative-impl-trait", "title": "How do I return a reference to an iterator using conservative_impl_trait?", "body": "<p>I have a <code>petgraph::Graph</code> structure onto which I have imposed a tree structure by giving every node weight a <code>parent_edge_idx</code> which is an <code>Option&lt;EdgeIdx&gt;</code> of the edge that connects from its parent to itself.</p>\n\n<p>I need to iterate over a node's children. I need the edge weight of the connecting edge <em>and</em> the node weight of the child.</p>\n\n<p>I wanted to factor that iteration into a helper function that returns a reference to an <code>Iterator&lt;Item = (EdgeIdx, NodeIdx)&gt;</code>. I want to do this cost-free; since I have to borrow <code>self.search_tree</code> in order to do this, the iterator is only valid for the lifetime of <code>self</code>.</p>\n\n<ol>\n<li>Is this a reasonable function to want to write?</li>\n<li>Is it possible to write this function? </li>\n</ol>\n\n<p>Any gated features are ok; I'm on nightly.</p>\n\n<pre><code>fn children&lt;'a&gt;(\n    &amp;'a mut self,\n    node_idx: NodeIdx,\n) -&gt; &amp;'a impl Iterator&lt;Item = (EdgeIdx, NodeIdx)&gt; {\n    &amp;self.search_tree.neighbors(node_idx).map(|child_idx| {\n        let node = self.search_tree.node_weight(child_idx).unwrap();\n        let edge_idx = node.parent_edge_idx.unwrap();\n        (edge_idx, child_idx)\n    })\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520696274, "post_id": 49210815, "comment_id": 85426083, "body": "Does Windows even have the concept of &quot;signal&quot;? If not, there&#39;s probably nothing in the standard library."}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520696720, "post_id": 49210815, "comment_id": 85426245, "body": "Oh, windows... :("}, {"owner": {"reputation": 1419, "user_id": 488095, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ro1E0.jpg?s=128&g=1", "display_name": "jamieguinan", "link": "https://stackoverflow.com/users/488095/jamieguinan"}, "edited": false, "score": 0, "creation_date": 1520702362, "post_id": 49210815, "comment_id": 85428166, "body": "Windows has <a href=\"https://msdn.microsoft.com/en-us/library/xdkz3x12.aspx\" rel=\"nofollow noreferrer\">signal</a>."}, {"owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "edited": false, "score": 0, "creation_date": 1520707763, "post_id": 49210815, "comment_id": 85429952, "body": "Does this mean that there is a valid reason to have this functionality in std?"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1520709229, "post_id": 49210815, "comment_id": 85430440, "body": "Windows only appears to support a very limited subset of the POSIX and SUS signal sets. But at least TERM might be useful to allow a child shut down more gracefully before trying to kill it. But you can just grab the pid and use <code>libc</code> instead with some OS-specific code paths."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1520715466, "post_id": 49210815, "comment_id": 85432345, "body": "On Windows, the closest native equivalent to <code>SIGTERM</code> is <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa376890(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>WM_QUERYENDSESSION</code></a> + <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa376889(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>WM_ENDSESSION</code></a> for GUI applications and <a href=\"https://docs.microsoft.com/en-us/windows/console/generateconsolectrlevent\" rel=\"nofollow noreferrer\"><code>GenerateConsoleCtrlEvent</code></a> for console applications."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1419, "user_id": 488095, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ro1E0.jpg?s=128&g=1", "display_name": "jamieguinan", "link": "https://stackoverflow.com/users/488095/jamieguinan"}, "edited": false, "score": 3, "creation_date": 1520716029, "post_id": 49210815, "comment_id": 85432483, "body": "@jamieguinan There is no <code>kill</code> though, which is how you actually send a signal. The C run-time library emulates signals by converting some native OS events to signals. An application can only get a <code>SIGTERM</code> signal by calling <a href=\"https://msdn.microsoft.com/en-us/library/dwwzkt4c.aspx\" rel=\"nofollow noreferrer\"><code>raise</code></a> to send it to itself. However, <code>SIGINT</code> and <code>SIGBREAK</code> can be generated from console control events."}], "answers": [{"comments": [{"owner": {"reputation": 6186, "user_id": 11324, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/dca5d128e87793d471460d1c3a46617b?s=128&d=identicon&r=PG", "display_name": "Alistair", "link": "https://stackoverflow.com/users/11324/alistair"}, "edited": false, "score": 11, "creation_date": 1569809458, "post_id": 58156963, "comment_id": 102703621, "body": "For those looking to do with just libc:   <code>pub fn kill_gracefully(child: &amp;Child) {     unsafe {         libc::kill(child.id() as i32, libc::SIGTERM);     } }</code>"}], "tags": [], "owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "is_accepted": false, "score": 12, "last_activity_date": 1569802695, "last_edit_date": 1569802695, "creation_date": 1569773309, "answer_id": 58156963, "question_id": 49210815, "link": "https://stackoverflow.com/questions/49210815/how-do-i-send-a-signal-to-a-child-subprocess/58156963#58156963", "title": "How do I send a signal to a `Child` subprocess?", "body": "<p>The <a href=\"https://docs.rs/nix\" rel=\"noreferrer\"><code>nix</code></a> library does a good job of providing idiomatic rust wrappers around low-level UNIX operations, including sending and handling signals. In this case, you would create a <a href=\"https://docs.rs/nix/0.15.0/nix/unistd/struct.Pid.html\" rel=\"noreferrer\"><code>nix::Pid</code></a> from <code>child_process.id()</code>, then pass it to <a href=\"https://docs.rs/nix/0.15.0/nix/sys/signal/fn.kill.html\" rel=\"noreferrer\"><code>kill</code></a> like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use nix::unistd::Pid;\nuse nix::sys::signal::{self, Signal};\n\n// Spawn child process.\nlet mut child = std::process::Command::new();\n/* build rest of command */\nchild.spawn().unwrap();\n\n// Send SIGTERM to child process.\nsignal::kill(Pid::from_raw(child.id()), Signal::SIGTERM).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 2359, "user_id": 1837084, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/67dya.jpg?s=128&g=1", "display_name": "Oleg Antonyan", "link": "https://stackoverflow.com/users/1837084/oleg-antonyan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2390, "favorite_count": 0, "answer_count": 1, "score": 15, "last_activity_date": 1569802695, "creation_date": 1520695965, "last_edit_date": 1520696219, "question_id": 49210815, "link": "https://stackoverflow.com/questions/49210815/how-do-i-send-a-signal-to-a-child-subprocess", "title": "How do I send a signal to a `Child` subprocess?", "body": "<p><a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.kill\" rel=\"noreferrer\"><code>Child::kill</code></a> sends a <code>SIGKILL</code>, but how can I send any other signal such as <code>SIGTERM</code>? I can probably use <code>libc</code> and its signal API, but is there a better way to do this?</p>\n"}, {"tags": ["rust", "directed-acyclic-graphs"], "answers": [{"comments": [{"owner": {"reputation": 203, "user_id": 7390340, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46cf56cb38dd07f4825a6cfa064608be?s=128&d=identicon&r=PG&f=1", "display_name": "Nemanja Beric", "link": "https://stackoverflow.com/users/7390340/nemanja-beric"}, "edited": false, "score": 0, "creation_date": 1520691017, "post_id": 49209780, "comment_id": 85424494, "body": "Thank you. What do you mean by &quot;stored visited data elsewhere&quot;? Having the depth data and the visited data in a vector? Wouldn&#39;t I then just have the same issue with those vectors? I am missing something"}], "tags": [], "owner": {"reputation": 135, "user_id": 883985, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8b22ad9684154abc9312777e86d4ee04?s=128&d=identicon&r=PG", "display_name": "Rcxdude", "link": "https://stackoverflow.com/users/883985/rcxdude"}, "is_accepted": true, "score": 0, "last_activity_date": 1520695596, "last_edit_date": 1520695596, "creation_date": 1520689657, "answer_id": 49209780, "question_id": 49207986, "link": "https://stackoverflow.com/questions/49207986/multiple-mutable-borrows-with-graph-like-data-structures/49209780#49209780", "title": "Multiple mutable borrows with Graph-like data structures", "body": "<p>You are modifying your <code>graph</code> structure while iterating through a vector contained within it. The compiler has no way of verifying that you do not add or remove from the vector during the iteration, which would invalidate the iterator. This is the intuitive reason for the error. </p>\n\n<p>The easiest way to avoid this is to take a copy of the vector before iterating over it, so the compiler can see that the iterator does not change. This is a little suboptimal but resolves the error for now. Another lifetime error is solved in a similar way (but without much cost) by copying the depth into a variable before doing a comparison.</p>\n\n<pre><code>use std::io;\nuse std::env;\n\nstruct Node {\n    neighbours: Vec&lt;usize&gt;,\n    depth: usize,\n    visited: bool,\n}\n\nimpl Node {\n    fn new() -&gt; Node {\n        Node {\n            neighbours: Vec::new(),\n            depth: 0,\n            visited: false,\n        }\n    }\n    fn add_neighbour(&amp;mut self, node: usize) {\n        self.neighbours.push(node);\n    }\n    fn neighbourhood_size(&amp;self) -&gt; usize {\n        self.neighbours.len()\n    }\n}\n\nstruct Graph {\n    nodes: Vec&lt;Node&gt;,\n    depth: usize,\n}\n\nimpl Graph {\n    fn new() -&gt; Graph {\n        Graph {\n            nodes: Vec::new(),\n            depth: 0,\n        }\n    }\n    fn nodes_number(&amp;self) -&gt; usize {\n        self.nodes.len()\n    }\n    fn add_node(&amp;mut self) {\n        self.nodes.push(Node::new());\n    }\n    fn node(&amp;mut self, i: usize) -&gt; &amp;mut Node {\n        &amp;mut self.nodes[i]\n    }\n\n    fn dfs(graph: &amp;mut Graph, index: usize) {\n        if !graph.node(index).visited {\n            graph.node(index).visited = true;\n        }\n        match graph.node(index).neighbourhood_size() == 0 {\n            true =&gt; {\n                graph.node(index).depth = 1;\n            }\n            false =&gt; {\n                let neighbours = graph.node(index).neighbours.clone();\n                for &amp;i in neighbours.iter() {\n                    // multiple mutable references\n                    Graph::dfs(graph, i);\n                }\n                graph.node(index).depth = 1\n                    + neighbours\n                        .iter()\n                        .map(|&amp;x| graph.node(x).depth)\n                        .max()\n                        .unwrap();\n            }\n        }\n        let depth = graph.node(index).depth;\n        if depth &gt; graph.depth {\n            graph.depth = graph.node(index).depth;\n        }\n    }\n}\n\nfn main() {\n    env::set_var(\"RUST_BACKTRACE\", \"1\");\n    let mut input_line = String::new();\n    io::stdin().read_line(&amp;mut input_line);\n    let n = input_line.trim().parse::&lt;usize&gt;().unwrap();\n    // to avoid counting from 0 or excessive use of (-1)\n    let mut graph = Graph::new();\n    graph.add_node();\n    for _ in 0..n {\n        let mut input_line = String::new();\n        io::stdin().read_line(&amp;mut input_line);\n        let separated = input_line.split(\" \").collect::&lt;Vec&lt;_&gt;&gt;();\n        let u = separated[0].trim().parse::&lt;usize&gt;().unwrap();\n        let v = separated[1].trim().parse::&lt;usize&gt;().unwrap();\n        if graph.nodes_number() &lt;= u {\n            graph.add_node();\n        }\n        if graph.nodes_number() &lt;= v {\n            graph.add_node();\n        }\n        graph.node(u).add_neighbour(v);\n    }\n    let n = graph.nodes_number();\n    for i in 1..n {\n        if !graph.node(i).visited {\n            Graph::dfs(&amp;mut graph, i);\n        }\n    }\n    println!(\"{}\", graph.depth);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6b2069db255193d41c359cc2f4076ea2&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>If you were to modify your approach so that you did not mutate the structure during the search (i.e. you stored the visited data elsewhere), the code would work without this copy. This would also be more friendly to concurrent use.</p>\n"}, {"tags": [], "owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "is_accepted": false, "score": 1, "last_activity_date": 1520706517, "last_edit_date": 1520706517, "creation_date": 1520702581, "answer_id": 49211900, "question_id": 49207986, "link": "https://stackoverflow.com/questions/49207986/multiple-mutable-borrows-with-graph-like-data-structures/49211900#49211900", "title": "Multiple mutable borrows with Graph-like data structures", "body": "<p>Instead of taking a copy of the vector before iterating over it, you could also iterate over the indices:</p>\n\n<pre><code>for ni in 0..graph.node(index).neighbours.len() {\n    let neighbour = graph.node(index).neighbours[ni];\n    Graph::dfs(graph, neighbour);\n}\n</code></pre>\n\n<p>The <code>neighbours</code> vector gets still borrowed for performing the iteration, but not for the whole course of the iteration: </p>\n\n<ol>\n<li><code>graph.node(index).neighbours.len()</code>: once at the beginning of the iteration for getting the length</li>\n<li><code>let neighbour = graph.node(index).neighbours[ni];</code>: in each iteration step for getting the neighbour at the current index</li>\n</ol>\n\n<p>Like the copy approach, this solution is based on the constraint that the <code>neighbours</code> vector you are iterating over will not be changed by the call to <code>dfs</code>.</p>\n\n<p>You can solve the remaining issues regarding multiple references in your code by providing immutable access to the graph nodes:</p>\n\n<pre><code>fn node_mut(&amp;mut self, i: usize) -&gt; &amp;mut Node {\n    &amp;mut self.nodes[i]\n}\nfn node(&amp;self, i: usize) -&gt; &amp;Node {\n    &amp;self.nodes[i]\n}\n</code></pre>\n\n<p>Only make use of the mutable access via <code>node_mut</code> where necessary. For example when adding a neighbour: <code>graph.node_mut(u).add_neighbour(v);</code></p>\n"}], "owner": {"reputation": 203, "user_id": 7390340, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46cf56cb38dd07f4825a6cfa064608be?s=128&d=identicon&r=PG&f=1", "display_name": "Nemanja Beric", "link": "https://stackoverflow.com/users/7390340/nemanja-beric"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 1, "accepted_answer_id": 49209780, "answer_count": 2, "score": 0, "last_activity_date": 1520706517, "creation_date": 1520677709, "last_edit_date": 1520696445, "question_id": 49207986, "link": "https://stackoverflow.com/questions/49207986/multiple-mutable-borrows-with-graph-like-data-structures", "title": "Multiple mutable borrows with Graph-like data structures", "body": "<p>I am trying to write a program that will find the longest path in the graph (i.e. the greatest depth) for a directed graph which is always a rooted or multi-rooted tree.</p>\n\n<p>The specs of the assignment require I use DFS and memoization, but multiple mutable references occur when performing the DFS. Is there any other way to do this?</p>\n\n<p>I thought about using <code>HashMap</code>s instead of internal <code>Graph</code> fields, but it would just produce the same error on mutability of the <code>HashMap</code>. I've found several other questions on the Rust user forum and here, but none of them gives the advise on how to resolve this. Am I supposed to use \"unsafe\" code or some other strategy? </p>\n\n<pre><code>use std::io;\n\nstruct Node {\n    neighbours: Vec&lt;usize&gt;,\n    depth: usize,\n    visited: bool,\n}\n\nimpl Node {\n    fn new() -&gt; Node { Node { neighbours: Vec::new(), depth: 0, visited: false } }\n    fn add_neighbour(&amp;mut self, node: usize) { self.neighbours.push(node); }\n    fn neighbourhood_size(&amp;self) -&gt; usize { self.neighbours.len() }\n}\n\nstruct Graph {\n    nodes: Vec&lt;Node&gt;,\n    depth: usize,\n}\n\nimpl Graph {\n    fn new() -&gt; Graph { Graph { nodes: Vec::new(), depth: 0} }\n    fn nodes_number(&amp;self) -&gt; usize { self.nodes.len()}\n    fn add_node(&amp;mut self) { self.nodes.push(Node::new()); }\n    fn node(&amp;mut self, i: usize) -&gt; &amp;mut Node { &amp;mut self.nodes[i] }\n\n    fn dfs(graph: &amp;mut Graph, index: usize) {\n        if !graph.node(index).visited {\n            graph.node(index).visited = true;\n        }\n        match graph.node(index).neighbourhood_size() == 0 {\n            true =&gt; { graph.node(index).depth = 1; },\n            false =&gt; {\n                for &amp;i in graph.node(index).neighbours.iter() {\n                    // multiple mutable references \n                    Graph::dfs(graph, i);\n                }\n                graph.node(index).depth = \n                    1 + graph.node(index).\n                    neighbours.iter().\n                    map(|&amp;x| graph.node(x).depth).\n                    max().unwrap();\n            }\n        }\n        if graph.node(index).depth &gt; graph.depth {\n            graph.depth = graph.node(index).depth;\n        }\n    }\n}\n\n\nfn main() {\n    let mut input_line = String::new();\n    io::stdin().read_line(&amp;mut input_line);\n    let n = input_line.trim().parse::&lt;usize&gt;().unwrap();\n    // to avoid counting from 0 or excessive use of (-1)\n    let mut graph = Graph::new(); graph.add_node();\n    for _ in 0 .. n {\n        let mut input_line = String::new();\n        io::stdin().read_line(&amp;mut input_line);\n        let separated = input_line.\n            split(\" \").\n            collect::&lt;Vec&lt;_&gt;&gt;();\n        let u = separated[0].trim().parse::&lt;usize&gt;().unwrap();\n        let v = separated[1].trim().parse::&lt;usize&gt;().unwrap();\n        if graph.nodes_number() &lt;= u { graph.add_node(); }\n        if graph.nodes_number() &lt;= v { graph.add_node(); }\n        graph.node(u).add_neighbour(v);\n    }\n    let n = graph.nodes_number();\n    for i in 1 .. n {\n        if !graph.node(i).visited { Graph::dfs(&amp;mut graph, i); }\n    }\n    println!(\"{}\", graph.depth);\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 1, "last_activity_date": 1520676448, "last_edit_date": 1520676448, "creation_date": 1520674290, "answer_id": 49207502, "question_id": 49207210, "link": "https://stackoverflow.com/questions/49207210/i-cant-find-definition-for-mock/49207502#49207502", "title": "I can&#39;t find definition for `mock!`", "body": "<p>Macros defined by <code>macro_rules!</code> are called <em>macro by example</em>. These are the simplest, but not the only kinds of macros you can define in Rust! In particular, <code>mocker</code> uses unstable Rust features to register a more powerful kind of macro. </p>\n\n<p>You can see the code for registering the macro <a href=\"https://github.com/kriomant/mockers/blob/1c07617b052d5548b829de80900aa4b44ca3c1de/mockers_codegen/src/lib.rs#L35\" rel=\"nofollow noreferrer\">in <code>mockers_codegen/src/lib.rs</code></a>:</p>\n\n<pre><code>pub fn register(reg: &amp;mut rustc_plugin::Registry) {\n    // ...\n    reg.register_macro(\"mock\", generate_mock);\n    // ...\n}\n</code></pre>\n\n<p>And the function \"defining\" the macro is <a href=\"https://github.com/kriomant/mockers/blob/0d9c084d0c37369dbca16356d712044ec7ca2f82/mockers_codegen/src/lib.in.rs#L108-L130\" rel=\"nofollow noreferrer\"><code>generate_mock</code></a>.</p>\n\n<p>These kinds of macros work fundamentally different than <code>macro_rules!</code>. Explaining the details of all different kinds of macros and compiler plugins would be too much for this answer. You could take a look at <a href=\"https://stackoverflow.com/a/41213128/2408867\">this (unfortunately slightly outdated) answer of mine</a>. </p>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 49207502, "answer_count": 1, "score": 0, "last_activity_date": 1520676448, "creation_date": 1520672095, "question_id": 49207210, "link": "https://stackoverflow.com/questions/49207210/i-cant-find-definition-for-mock", "title": "I can&#39;t find definition for `mock!`", "body": "<p>I'm curious about <a href=\"https://github.com/kriomant/mockers\" rel=\"nofollow noreferrer\">mocker</a>'s macro <code>mock!</code>, so I cloned the project and try to find the definition. Unfortunately I checked every sentences include <code>macro_rules!</code> by full-text search and can't find it. Is there anyone who can tell me where the <code>mock!</code> defined?</p>\n"}, {"tags": ["macos", "rust", "keyboard-events", "keycode", "core-foundation"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520699043, "post_id": 49204294, "comment_id": 85427021, "body": "Does iOS not support another API for sending unicode characters? For example on windows you&#39;d send a <code>WM_CHAR</code>/<code>WM_UNICHAR</code> instead of a <code>WM_KEYDOWN</code>/<code>WM_KEYUP</code> in this scenario. <a href=\"https://developer.apple.com/documentation/coregraphics/1456028-cgeventkeyboardsetunicodestring?language=objc\" rel=\"nofollow noreferrer\"><code>CGEventKeyboardSetUnicodeString</code></a> looks like a likely candidate."}], "owner": {"reputation": 812, "user_id": 2867076, "user_type": "registered", "accept_rate": 75, "profile_image": "https://graph.facebook.com/100003035657402/picture?type=large", "display_name": "Hannes Karppila", "link": "https://stackoverflow.com/users/2867076/hannes-karppila"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 199, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1520701803, "creation_date": 1520643766, "last_edit_date": 1520701803, "question_id": 49204294, "link": "https://stackoverflow.com/questions/49204294/mapping-unicode-character-to-key-code-in-rust-using-core-foundation", "title": "Mapping Unicode character to key code in Rust using Core Foundation", "body": "<p>I have a Unicode representation of a key, e.g. \"a\", \"!\", \"\u00e4\" or \"\u20ac\", and I want to find out what key code (sequence) is used to produce that character. The resulting virtual key code will be given to <a href=\"https://developer.apple.com/documentation/coregraphics/1456564-cgeventcreatekeyboardevent?language=objc\" rel=\"nofollow noreferrer\"><code>CGEventCreateKeyboardEvent</code></a> to simulate keyboard events.</p>\n\n<p>The solution must be keyboard layout independent, e.g. sending \"A\" must work with any keyboard layout (e.g. Dvorak).</p>\n\n<p>The solution will probably require using  something like <code>TISCopyCurrentKeyboardInputSource</code>, but that seems to be deprecated (and I couldn't get it to work either).</p>\n\n<p>I'm using Rust and <code>core_graphics</code> crate. Adding more crates isn't an issue. <a href=\"https://stackoverflow.com/a/1971027\">This Objective-C solution</a> might be possible to adapt.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1520641143, "post_id": 49203561, "comment_id": 85413497, "body": "I would check out the FFI module. For example there is <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/ffi/struct.CString.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 672, "user_id": 7254247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffdeb233783cfab7ea49517265777cf0?s=128&d=identicon&r=PG&f=1", "display_name": "Spent Death", "link": "https://stackoverflow.com/users/7254247/spent-death"}, "is_accepted": false, "score": 2, "last_activity_date": 1520647199, "last_edit_date": 1520647199, "creation_date": 1520642143, "answer_id": 49204152, "question_id": 49203561, "link": "https://stackoverflow.com/questions/49203561/how-do-i-convert-a-str-to-a-const-u8/49204152#49204152", "title": "How do I convert a &amp;str to a *const u8?", "body": "<p><code>&amp;[u8]</code> is called a slice in Rust, and <code>*u8</code> is a raw pointer. You can go back and forth between the two types using <code>from_ptr()</code> and <code>as_ptr()</code>. </p>\n\n<pre><code>extern \"C\" {\n    fn log_impl(ptr: *const u8);\n}\n\nfn log(s: &amp;str) {\n    log_impl(s.as_bytes().as_ptr() as *const u8);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1520647162, "post_id": 49204203, "comment_id": 85414517, "body": "This function probably doesn&#39;t need to be marked as <code>unsafe</code> and should instead use an <code>unsafe</code> block internally."}, {"owner": {"reputation": 1894, "user_id": 69671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2d7fea476293de2148f3b0de6f9a6339?s=128&d=identicon&r=PG", "display_name": "Jordan Miner", "link": "https://stackoverflow.com/users/69671/jordan-miner"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1520887975, "post_id": 49204203, "comment_id": 85492328, "body": "I agree. I just did that since it made the example shorter and it could still be copied-and-pasted to the Rust playground. I edited it to add the unsafe block instead."}], "tags": [], "owner": {"reputation": 1894, "user_id": 69671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2d7fea476293de2148f3b0de6f9a6339?s=128&d=identicon&r=PG", "display_name": "Jordan Miner", "link": "https://stackoverflow.com/users/69671/jordan-miner"}, "is_accepted": true, "score": 7, "last_activity_date": 1520887752, "last_edit_date": 1520887752, "creation_date": 1520642684, "answer_id": 49204203, "question_id": 49203561, "link": "https://stackoverflow.com/questions/49203561/how-do-i-convert-a-str-to-a-const-u8/49204203#49204203", "title": "How do I convert a &amp;str to a *const u8?", "body": "<p>Rust strings are not NUL-terminated like most C functions expect. You can convert a <code>&amp;str</code> to <code>*const u8</code> by using <code>&amp;s.as_bytes()[0] as *const u8</code> or by using <code>s.as_ptr()</code>, but that will not be valid to pass to any C function expecting a NUL-terminated string.</p>\n\n<p>Instead, you probably need to use <code>CString</code> which will copy the string to a buffer and add a NUL terminator to the end. Here is an example assuming that <code>log_impl</code> doesn't store a pointer to the string:</p>\n\n<pre><code>fn log(s: &amp;str) {\n    unsafe {\n        let c_str = CString::new(s).unwrap();\n        log_impl(c_str.as_ptr() as *const u8);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 672, "user_id": 7254247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffdeb233783cfab7ea49517265777cf0?s=128&d=identicon&r=PG&f=1", "display_name": "Spent Death", "link": "https://stackoverflow.com/users/7254247/spent-death"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5464, "favorite_count": 0, "closed_date": 1520647301, "accepted_answer_id": 49204203, "answer_count": 2, "score": 4, "last_activity_date": 1520887752, "creation_date": 1520637275, "last_edit_date": 1520647058, "question_id": 49203561, "link": "https://stackoverflow.com/questions/49203561/how-do-i-convert-a-str-to-a-const-u8", "closed_reason": "Duplicate", "title": "How do I convert a &amp;str to a *const u8?", "body": "<p>I have a function</p>\n\n<pre><code>extern \"C\" {\n    fn log_impl(ptr: *const u8);\n}\n\nfn log(s: &amp;str) {\n    log_impl(s.as_bytes() as *const u8);\n}\n</code></pre>\n\n<p>This gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0606]: casting `&amp;[u8]` as `*const u8` is invalid\n --&gt; src/main.rs:6:14\n  |\n6 |     log_impl(s.as_bytes() as *const u8);\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>The most similar question to what I'm trying to do is \n<a href=\"https://stackoverflow.com/questions/31289588/converting-a-str-to-a-u8\">Converting a str to a &amp;[u8]</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "edited": false, "score": 0, "creation_date": 1520610111, "post_id": 49197217, "comment_id": 85399406, "body": "Oh, by the way, from the information <a href=\"https://doc.rust-lang.org/std/fmt/struct.Formatter.html\" rel=\"nofollow noreferrer\">here</a>, I can see that doing <code>if f.sign_aware_zero_pad() { write!(...) } else { write!(...) }</code> can do what I want to, but I don&#39;t believe that this is the proper way..."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1520610491, "post_id": 49197217, "comment_id": 85399646, "body": "Maybe a look at the source code from rust can help? <a href=\"https://doc.rust-lang.org/src/core/fmt/num.rs.html#63\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/core/fmt/num.rs.html#63</a>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1520610783, "post_id": 49197217, "comment_id": 85399834, "body": "Not sure if I understand. You want to make <code>println</code> working dynamically?"}, {"owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1520612187, "post_id": 49197217, "comment_id": 85400702, "body": "@hellow: Thanks, in that way do I have to do all the re-inventing for the format options I get?"}, {"owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1520612202, "post_id": 49197217, "comment_id": 85400706, "body": "@Boiethios: Sort of... maybe passing <code>f</code> and the value to another formatter could be good enough, like <code>format!(&quot;Coordinates(x: {}, y: {})&quot;), format(f, self.x), format(f, self.y))</code>. Just can&#39;t find out how."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1520613087, "post_id": 49197217, "comment_id": 85401191, "body": "@Todoroki You can get a callback that take an int and return a formatted string I guess (or that take a formatter and return it with the needed information)"}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1520613794, "post_id": 49197217, "comment_id": 85401605, "body": "A callback with signature <code>Fn(&amp;i64, &amp;mut fmt::Formatter) -&gt; fmt::Result</code> would probably the best approach."}], "answers": [{"comments": [{"owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "edited": false, "score": 1, "creation_date": 1520616355, "post_id": 49198810, "comment_id": 85403092, "body": "Oh! You can do that because you&#39;re in the same trait! I never came up to that! thank you."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 7, "last_activity_date": 1520627793, "last_edit_date": 1520627793, "creation_date": 1520615424, "answer_id": 49198810, "question_id": 49197217, "link": "https://stackoverflow.com/questions/49197217/how-can-i-pass-down-format-string-options-from-the-user-to-my-components/49198810#49198810", "title": "How can I pass down format string options from the user to my components?", "body": "<p>You could write <code>self.x.fmt(f)</code> to forward the call to its inner members reusing the same formatter.</p>\n\n<pre><code>use std::fmt;\n\nstruct Coordinates {\n    x: i64,\n    y: i64,\n}\n\nimpl fmt::Display for Coordinates {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Coordinates(x: \")?;\n        self.x.fmt(f)?;\n        write!(f, \", y: \")?;\n        self.y.fmt(f)?;\n        write!(f, \")\")?;\n        Ok(())\n    }\n}\n\nimpl fmt::LowerHex for Coordinates {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Coordinates(x: \")?;\n        self.x.fmt(f)?;\n        write!(f, \", y: \")?;\n        self.y.fmt(f)?;\n        write!(f, \")\")?;\n        Ok(())\n    }\n}\n\nfn main() {\n    let c = Coordinates { x: 10, y: 20 };\n\n    assert_eq!(format!(\"{}\", c), \"Coordinates(x: 10, y: 20)\");\n    assert_eq!(\n        format!(\"{:010x}\", c),\n        \"Coordinates(x: 000000000a, y: 0000000014)\"\n    );\n}\n</code></pre>\n"}], "owner": {"reputation": 355, "user_id": 4145123, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/442717345212a9a3023420a5c12ebe35?s=128&d=identicon&r=PG&f=1", "display_name": "Todoroki", "link": "https://stackoverflow.com/users/4145123/todoroki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 0, "accepted_answer_id": 49198810, "answer_count": 1, "score": 6, "last_activity_date": 1520627793, "creation_date": 1520609914, "last_edit_date": 1520627771, "question_id": 49197217, "link": "https://stackoverflow.com/questions/49197217/how-can-i-pass-down-format-string-options-from-the-user-to-my-components", "title": "How can I pass down format string options from the user to my components?", "body": "<p>I want to have the user decide the formatting of my struct, and just pass it to the struct underneath it.</p>\n\n<p>For example:</p>\n\n<pre><code>struct Coordinates {\n    x: i64,\n    y: i64,\n}\n\nimpl fmt::Display for Coordinates {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Coordinates(x: {}, y: {})\", self.x, self.y)\n    }\n}\n\nimpl fmt::LowerHex for Coordinates {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Coordinates(x: {:x}, y: {:x})\", self.x, self.y)\n    }\n}\n</code></pre>\n\n<p>I want this to work like</p>\n\n<pre><code>let c = Coordinates { x: 10, y: 20 };\n\nprintln!(\"{}\", c);\n// =&gt; Coordinates(x: 10, y: 20)\n\nprintln!(\"{:010x}, c\");\n// =&gt; Coordinates(x: 000000000a, y: 0000000014)\n</code></pre>\n\n<p>I want to have <code>\"{:010x}\"</code> passed directly into <code>\"Coordinates(x: {here}, y: {and here})\"</code>. How can I achieve this?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1520596770, "post_id": 49192205, "comment_id": 85391239, "body": "I don&#39;t see anything wrong with your code.  You could use <code>buf.iter_mut().for_each(|x| *x = 0)</code> instead if you prefer, but I personally wouldn&#39;t."}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1520605938, "post_id": 49192205, "comment_id": 85396767, "body": "Coming from higher level languages this seems unnecessarily pedestrian. But I guess <code>for_each()</code> is ok."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1520606684, "post_id": 49192205, "comment_id": 85397225, "body": "Java is the only &quot;higher level language&quot; I can think of that supports something like this without an explicit loop (<code>Arrays.fill</code>). Python, for instance, doesn&#39;t."}, {"owner": {"reputation": 15050, "user_id": 8605791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae3be140b26db13a86d624dba4ef1c8?s=128&d=identicon&r=PG&f=1", "display_name": "llllllllll", "link": "https://stackoverflow.com/users/8605791/llllllllll"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1520606912, "post_id": 49192205, "comment_id": 85397382, "body": "@trentcl Python&#39;s <code>numpy</code> has <code>fill</code>, as well as C++ <code>std::fill</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 15050, "user_id": 8605791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae3be140b26db13a86d624dba4ef1c8?s=128&d=identicon&r=PG&f=1", "display_name": "llllllllll", "link": "https://stackoverflow.com/users/8605791/llllllllll"}, "edited": false, "score": 0, "creation_date": 1520607264, "post_id": 49192205, "comment_id": 85397604, "body": "@liliscent NumPy&#39;s <code>fill</code> only works on <code>ndarray</code>s, not Python arrays, but sure."}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520607390, "post_id": 49192205, "comment_id": 85397689, "body": "You caught me, I&#39;m usually on the JVM. Kotlin has <code>myArray.fill(element: T, fromIndex: Int = 0, toIndex: Int = size)</code>. Its an incredibly ergonomic language."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1520607730, "post_id": 49192205, "comment_id": 85397896, "body": "There is an issue for such a feature (<a href=\"https://github.com/rust-lang/rfcs/issues/2067\" rel=\"nofollow noreferrer\">#2067</a>), but not too much discussion."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1520608736, "post_id": 49192205, "comment_id": 85398534, "body": "Also maybe worth noting is the <code>T: Clone</code> bound in DK&#39;s answer. That isn&#39;t necessary in Java where everything is references that can be copied freely. I don&#39;t know about Kotlin, but if it has affine types, I would assume that <code>fill</code> in that language also has some kind of restriction. Defining the exact nature of this restriction in Rust is part of the discussion on the issue I linked earlier (<code>Copy</code> vs. <code>Clone</code>, basically)."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1520597448, "last_edit_date": 1520597448, "creation_date": 1520596764, "answer_id": 49193323, "question_id": 49192205, "link": "https://stackoverflow.com/questions/49192205/how-to-reset-all-array-elements/49193323#49193323", "title": "How to reset all array elements?", "body": "<blockquote>\n  <p>Is there really no way to make this a one-liner, like <code>buf.set_all(0)</code>?</p>\n</blockquote>\n\n<p>Sure you can make it a one-liner...</p>\n\n<pre><code>for elem in buf.iter_mut() { *elem = 0; }\n</code></pre>\n\n<p>Okay, okay... if you do this a lot, you can define an extension trait that provides a <code>set_all</code> method.</p>\n\n<pre><code>trait SetAll {\n    type Elem;\n    fn set_all(&amp;mut self, value: Self::Elem);\n}\n\nimpl&lt;T&gt; SetAll for [T] where T: Clone {\n    type Elem = T;\n    fn set_all(&amp;mut self, value: T) {\n        for e in self {\n            *e = value.clone();\n        }\n    }\n}\n</code></pre>\n\n<p>But in terms of <em>just</em> using what's in the standard library, there's <code>for_each</code> (as noted by Sven Marnach):</p>\n\n<pre><code>buf.iter_mut().for_each(|x| *x = 0)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520605729, "post_id": 49193940, "comment_id": 85396654, "body": "In my example the array size is known, but thats not always the case, e.g. when using <code>&amp;mut [u8]</code>."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520607420, "post_id": 49193940, "comment_id": 85397709, "body": "@MichaelB&#246;ckling You asked about arrays. <code>[u8]</code> is a slice, not an array."}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1520607584, "post_id": 49193940, "comment_id": 85397806, "body": "Guess I was imprecise. I&#39;m only starting to come to terms with the Rust type system, its a strange beast."}], "tags": [], "owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "is_accepted": false, "score": 2, "last_activity_date": 1520605445, "last_edit_date": 1520605445, "creation_date": 1520598819, "answer_id": 49193940, "question_id": 49192205, "link": "https://stackoverflow.com/questions/49192205/how-to-reset-all-array-elements/49193940#49193940", "title": "How to reset all array elements?", "body": "<p>You could simply construct a new array and move it into the array you want to change.</p>\n\n<pre><code>buf = [0u8; 200];\n</code></pre>\n\n<p>If the compiler is decent, it can optimize out the temporary array and write directly to the target.</p>\n"}, {"tags": [], "owner": {"reputation": 1148, "user_id": 5067875, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SeC0a.jpg?s=128&g=1", "display_name": "Flyq", "link": "https://stackoverflow.com/users/5067875/flyq"}, "is_accepted": false, "score": 0, "last_activity_date": 1590849778, "creation_date": 1590849778, "answer_id": 62104046, "question_id": 49192205, "link": "https://stackoverflow.com/questions/49192205/how-to-reset-all-array-elements/62104046#62104046", "title": "How to reset all array elements?", "body": "<p>in your scene, this is my solution:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut buf = [1u8; 200];\nunsafe {\n    std::ptr::write_volatile(&amp;mut buf, [0u8;200]);\n}\n</code></pre>\n\n<blockquote>\n  <p>Is there really no way to make this a one-liner, like buf.set_all(0)?</p>\n</blockquote>\n\n<p>and you also can do like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Buf([u8;200]);\nimpl Buf {\n    fn clear(&amp;mut self) {\n        unsafe {\n            std::ptr::write_volatile(&amp;mut self.0, [0u8;200]);\n        }\n    }\n}\n\nfn main() {\n    let mut buf1 = Buf([1u8; 200]);\n    let mut buf2 = Buf([2u8; 200]);\n    buf1.clear();\n    buf2.clear();\n    println!(\"{}, {}\", buf1.0[199], buf2.0[0]);\n}\n</code></pre>\n"}], "owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1976, "favorite_count": 0, "accepted_answer_id": 49193323, "answer_count": 3, "score": 3, "last_activity_date": 1590849778, "creation_date": 1520593039, "last_edit_date": 1520596061, "question_id": 49192205, "link": "https://stackoverflow.com/questions/49192205/how-to-reset-all-array-elements", "title": "How to reset all array elements?", "body": "<p>This is the shortest I came up with, after extensive googling and studying the sources:</p>\n\n<pre><code>let mut buf = [0u8; 200];\nfor elem in buf.iter_mut() {\n    *elem = 0;\n}\n</code></pre>\n\n<p>Is there really no way to make this a one-liner, like <code>buf.set_all(0)</code>?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520627239, "post_id": 49186751, "comment_id": 85408417, "body": "<i>I&#39;m going to have to remember to update match statement in the term function</i> \u2014 the compiler will remind you of that."}, {"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520692722, "post_id": 49186751, "comment_id": 85424986, "body": "@Shepmaster sure. The complier will catch that. Perhaps what I should&#39;ve said was &quot;now I have to update code in two places everytime there&#39;s a change and the feels like I&#39;m doing something wrong&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "edited": false, "score": 0, "creation_date": 1520692645, "post_id": 49186945, "comment_id": 85424953, "body": "Perfect. This is exactly what I was looking for."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 17, "last_activity_date": 1520572102, "creation_date": 1520572102, "answer_id": 49186945, "question_id": 49186751, "link": "https://stackoverflow.com/questions/49186751/sharing-a-common-value-in-all-enum-values/49186945#49186945", "title": "Sharing a common value in all enum values", "body": "<blockquote>\n  <p>Is there some way to say \"hey, every value for this enum will have also have a <code>Term</code> value associated with it.</p>\n</blockquote>\n\n<p>No.  This is usually handled by splitting the <code>enum</code> into two parts, with a <code>struct</code> containing all the common parts:</p>\n\n<pre><code>pub struct Message {\n    term: Term,\n    kind: MessageKind,\n}\n\npub enum MessageKind {\n    AppendRequest,\n    AppendResponse,\n    VoteRequest,\n    VoteResponse,\n}\n</code></pre>\n"}], "owner": {"reputation": 28653, "user_id": 527288, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9e175031c4adde62f40456f86a5e91b0?s=128&d=identicon&r=PG", "display_name": "Kurtis Nusbaum", "link": "https://stackoverflow.com/users/527288/kurtis-nusbaum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1240, "favorite_count": 0, "answer_count": 1, "score": 10, "last_activity_date": 1520627220, "creation_date": 1520570804, "last_edit_date": 1520627220, "question_id": 49186751, "link": "https://stackoverflow.com/questions/49186751/sharing-a-common-value-in-all-enum-values", "title": "Sharing a common value in all enum values", "body": "<p>I have the following code where every variant of the enum <code>Message</code> has a <code>Term</code> value associated with it:</p>\n\n<pre><code>type Term = usize;\npub enum Message {\n    AppendRequest(Term),\n    AppendResponse(Term),\n    VoteRequest(Term),\n    VoteResponse(Term),\n}\n\nimpl Message {\n    pub fn term(&amp;self) -&gt; Term {\n        match *self {\n            Message::AppendRequest(term)  =&gt; term,\n            Message::AppendResponse(term) =&gt; term,\n            Message::VoteRequest(term) =&gt; term,\n            Message::VoteResponse(term) =&gt;term,\n        }\n    }\n}\n</code></pre>\n\n<p>I want to, given a <code>Message</code> be able to get its term without having to deconstruct the actual <code>Message</code> value I have. The best I could come up with was creating a public function that unpacked the value for me, but this feels clunky. If I ever add a new enum value, I'm going to have to remember to update match statement in the <code>term</code> function. </p>\n\n<p>Is there a more succinct/ergonomic way to express the code above? Is there some way to say \"hey, every value for this enum will have also have a <code>Term</code> value associated with it.</p>\n"}, {"tags": ["rust", "self"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 8, "last_activity_date": 1520551082, "creation_date": 1520551082, "answer_id": 49184114, "question_id": 49184075, "link": "https://stackoverflow.com/questions/49184075/what-is-the-meaning-of-use-pathself/49184114#49184114", "title": "What is the meaning of `use path::{self}`?", "body": "<p><code>self</code> here refers to the module itself, i.e. your line is equivalent to the two lines</p>\n\n<pre><code>use fmt::Debug;\nuse fmt;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520552641, "post_id": 49184200, "comment_id": 85374534, "body": "could you point why i would need to use both in case of fmt (why it&#39;s not   enough to write just fmt::Debug).?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1520552853, "post_id": 49184200, "comment_id": 85374599, "body": "<code>fmt</code> contains the struct <code>Result</code>. Personally I don&#39;t want to overwrite <code>Result</code> in my namespace, so I use <code>fmt::Result</code>. I.e. <code>fn fmt(&amp;self, f: Formatter) -&gt; fmt::Result;</code>. You only need this, if you want to use the module itself."}, {"owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "reply_to_user": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1520630912, "post_id": 49184200, "comment_id": 85410104, "body": "@Tim, what role does &#39;self&#39; play in example provided in the question.?   from my understaning, after removing &#39;self&#39; I will still be able to use &#39;fmt&#39;, since it&#39;s introduced erlier into the root scope."}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520631089, "post_id": 49184200, "comment_id": 85410184, "body": "@GreenTree no, you won&#39;t be able to use <code>fmt</code>, if you remove <code>self</code>"}, {"owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "reply_to_user": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1520632369, "post_id": 49184200, "comment_id": 85410710, "body": "@Tim <a href=\"https://ideone.com/n4tXWB\" rel=\"nofollow noreferrer\">ideone.com/n4tXWB</a> but why such &#39;direct&#39; usage in &#39;goo&#39;   allowed, right after mod declaration, without no &#39;use&#39; statement.?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520632474, "post_id": 49184200, "comment_id": 85410756, "body": "@GreenTree You declared the mod <code>boo</code> just before. Why accepting an answer if you don&#39;t understand it?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520632573, "post_id": 49184200, "comment_id": 85410805, "body": "@GreenTree use the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a> instead of <a href=\"https://ideone.com/\" rel=\"nofollow noreferrer\">ideone.com</a> for rust."}, {"owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "reply_to_user": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1520634049, "post_id": 49184200, "comment_id": 85411404, "body": "@Tim, because it does answer the question raised. i&#39;m trying to clarify what i&#39;m missing in the example. if <code>use</code> allows only absolute paths, &#39;fmt&#39; should be start of the path, module, right.? so it should be at least declared with <code>mod fmt</code> erlier - if so, use fmt::{self} is redeclaration."}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520634115, "post_id": 49184200, "comment_id": 85411422, "body": "@GreenTree not necessarily earlier, but anywhere, yes."}, {"owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "reply_to_user": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1520634701, "post_id": 49184200, "comment_id": 85411697, "body": "@Tim, so why the build does not fail with error (<code>fmt</code> reimported here).?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "edited": false, "score": 0, "creation_date": 1520634763, "post_id": 49184200, "comment_id": 85411724, "body": "@GreenTree it does not. The mod is defined somewhere else."}], "tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": true, "score": 6, "last_activity_date": 1520551882, "last_edit_date": 1520551882, "creation_date": 1520551566, "answer_id": 49184200, "question_id": 49184075, "link": "https://stackoverflow.com/questions/49184075/what-is-the-meaning-of-use-pathself/49184200#49184200", "title": "What is the meaning of `use path::{self}`?", "body": "<p>Using <code>self</code> in that context allows you to bind a module plus some of it's child elements into the current scope with a single <code>use</code> statement.</p>\n\n<p>Without self:</p>\n\n<pre><code>use a::b::{c,d};\n// Now you can refer to a::b::c as c and a::b::d as d\n// but if you need to refer to a::b as a::b\n</code></pre>\n\n<p>With self:</p>\n\n<pre><code>use a::b::{self, c, d};\n// Now b refers to a::b as well\n</code></pre>\n"}], "owner": {"reputation": 1396, "user_id": 4625005, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/jm809.gif?s=128&g=1", "display_name": "Green Tree", "link": "https://stackoverflow.com/users/4625005/green-tree"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 232, "favorite_count": 2, "accepted_answer_id": 49184200, "answer_count": 2, "score": 6, "last_activity_date": 1537463089, "creation_date": 1520550880, "last_edit_date": 1537463089, "question_id": 49184075, "link": "https://stackoverflow.com/questions/49184075/what-is-the-meaning-of-use-pathself", "title": "What is the meaning of `use path::{self}`?", "body": "<p>I recently read the <a href=\"https://github.com/rust-lang/rust/blob/c90f68224b069f5bb2a80e30e2737e4bb17c1466/src/libstd/collections/hash/map.rs#L17\" rel=\"noreferrer\">following line of code</a>: </p>\n\n<pre><code>use fmt::{self, Debug}; \n</code></pre>\n\n<p>What does the <code>self</code> keyword in the above statement mean?</p>\n"}, {"tags": ["garbage-collection", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 1163, "user_id": 2487009, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/0J0ot.png?s=128&g=1", "display_name": "Demurgos", "link": "https://stackoverflow.com/users/2487009/demurgos"}, "is_accepted": true, "score": 3, "last_activity_date": 1520945110, "last_edit_date": 1520945110, "creation_date": 1520626317, "answer_id": 49201455, "question_id": 49183195, "link": "https://stackoverflow.com/questions/49183195/lifetime-constraints-to-model-scoped-garbage-collection/49201455#49201455", "title": "Lifetime constraints to model scoped garbage collection", "body": "<p>This is one of the hardest problems I had with lifetimes with Rust so far, but I managed to find a solution. Thank you to panicbit and mbrubeck for having helped me on IRC.</p>\n\n<p>What helped me to move forward was the explanation of the error I posted at the end of my question:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `scope` does not live long enough\n  --&gt; src/test.rs:50:3\n   |\n50 |   scope.alloc(String::from(\"Hello, World!\")).unwrap();\n   |   ^^^^^ borrowed value does not live long enough\n51 | }\n   | - `scope` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>I did not understand this error because it wasn't clear to me why <code>scope</code> was borrowed, for how long, or why it needs to no longer be borrowed at the end of the scope.</p>\n\n<p>The reason is that during the allocation of the value, the <code>scope</code> is immutably borrowed for the duration of the allocated value. The issue now is that the scope contains a state object that implements \"Drop\": <strong>custom implementations of <code>drop</code> use <code>&amp;mut self</code></strong> -> it is not possible to get a mutable borrow for the drop while the value is already immutably borrowed.</p>\n\n<p>Understanding that drop requires <code>&amp;mut self</code> and that it is incompatible with immutable borrows unlocked the situation.</p>\n\n<p>It turns out that the inner-outer approach described in the question above had the correct lifetimes with <code>alloc</code>:</p>\n\n<pre><code>impl&lt;'outer&gt; GcScope&lt;'outer&gt; {\n    // ...\n\n    pub fn alloc&lt;'inner, T: Trace + 'outer&gt;(\n        &amp;'inner self,\n        value: T,\n    ) -&gt; Result&lt;Gc&lt;'inner, T&gt;, GcAllocErr&gt; {\n        // ...\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>The returned <code>Gc</code> lives as long as <code>GcScope</code> and the allocated values must live longer than the current <code>GcScope</code>. As mentioned in the question, the issue with this solution is that it did not support circular values.</p>\n\n<p>The circular values failed to work not because of the lifetimes of <code>alloc</code> but due to the custom <code>drop</code>. Removing <code>drop</code> allowed all the tests to pass (but leaked memory).</p>\n\n<p>The explanation is quite interesting:</p>\n\n<p>The lifetime of <code>alloc</code> expresses the properties of the allocated values. The allocated values cannot outlive their <code>GcScope</code> but their content must live as long or longer than <code>GcScope</code>. When creating a cycle, the value is subject to both of these constraints: it is allocated so must live as long or shorter than <code>GcScope</code> but also referenced by another allocated value so it must live as long or longer than <code>GcScope</code>. Because of this there is only one solution: the allocated value must live <strong>exactly as long</strong> as its scope.</p>\n\n<p>It means that the lifetime of <code>GcScope</code> and its allocated values is exactly the same. <strong>When two lifetimes are the same, Rust does not guarantee the order of the drops</strong>. The reason why this happens is that the <code>drop</code> implementations could try to access each other and since there's no ordering it would be unsafe (the value might already have been freed).</p>\n\n<p>This is explained in the <a href=\"https://doc.rust-lang.org/nomicon/dropck.html\" rel=\"nofollow noreferrer\">Drop Check chapter of the Rustonomicon</a>.</p>\n\n<p>In our case, the <code>drop</code> implementation of the state of the garbage collected does not dereference the allocated values (quite the opposite, it frees their memory) so the Rust compiler is overly cautious by preventing us from implementing <code>drop</code>.</p>\n\n<p>Fortunately, the Nomicon also explains how to work around these check of values with the same lifetimes. The solution is to use the <code>may_dangle</code> attribute on the lifetime parameter of the <code>Drop</code> implementation.\nThis is as unstable attribute that requires to enable the <code>generic_param_attrs</code> and <code>dropck_eyepatch</code> features.</p>\n\n<p>Concretely, my <code>drop</code> implementation became:</p>\n\n<pre><code>unsafe impl&lt;'gc&gt; Drop for GcState&lt;'gc&gt; {\n    fn drop(&amp;mut self) {\n        // Free all the values allocated in this scope\n        // Might require changes to make sure there's no use after free\n    }\n}\n</code></pre>\n\n<p>And I added the following lines to <code>lib.rs</code>:</p>\n\n<pre><code>#![feature(generic_param_attrs)]\n#![feature(dropck_eyepatch)]\n</code></pre>\n\n<p>You can read more about these features:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/48848\" rel=\"nofollow noreferrer\"><code>generic_param_attrs</code></a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/34761\" rel=\"nofollow noreferrer\"><code>may_dangle</code></a></li>\n</ul>\n\n<p>I updated my library <a href=\"https://github.com/open-flash/rust-scoped-gc\" rel=\"nofollow noreferrer\">scoped-gc</a> with the fix for this issue if you want to take a closer look at it.</p>\n"}], "owner": {"reputation": 1163, "user_id": 2487009, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/0J0ot.png?s=128&g=1", "display_name": "Demurgos", "link": "https://stackoverflow.com/users/2487009/demurgos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 294, "favorite_count": 1, "accepted_answer_id": 49201455, "answer_count": 1, "score": 4, "last_activity_date": 1520945110, "creation_date": 1520546427, "last_edit_date": 1520612627, "question_id": 49183195, "link": "https://stackoverflow.com/questions/49183195/lifetime-constraints-to-model-scoped-garbage-collection", "title": "Lifetime constraints to model scoped garbage collection", "body": "<p>I'm working with a friend to define a safe public API for lifetimes of a \"scoped\" garbage collector. The lifetimes are either overly constrained and correct code does not compile or the lifetimes are too loose and they may allow invalid behavior. After trying multiple approaches, we are still stuck getting a correct API. This is especially frustrating because Rust's lifetimes can help avoid bugs in this situation but right now it just looks stubborn.</p>\n\n<h1>Scoped garbage collection</h1>\n\n<p>I am implementing an ActionScript interpreter and need a garbage collector. I studied <a href=\"https://github.com/Manishearth/rust-gc\" rel=\"nofollow noreferrer\">rust-gc</a> but it did not suit my needs. The main reason is that it requires the garbage collected values to have <a href=\"https://github.com/Manishearth/rust-gc/blob/e362a0687260534305b2749f986da3f0df1ec356/gc/src/gc.rs#L79\" rel=\"nofollow noreferrer\">a static lifetime</a> because the GC state is a thread-local static variable. I need to get garbage-collected bindings to a dynamically created host object. The other reason to avoid globals is that it is easier for me to handle multiple independent garbage-collected scopes, control their memory limits or serialize them.</p>\n\n<p>A scoped garbage collector is similar to a <a href=\"https://github.com/SimonSapin/rust-typed-arena\" rel=\"nofollow noreferrer\">typed-arena</a>. You can use it to allocate values and they are all freed once the garbage collector is dropped. The difference is that you can also trigger garbage collection during its lifetime and it will clean-up the unreachable data (and is not limited to a single type).</p>\n\n<p>I have <a href=\"https://github.com/open-flash/rust-scoped-gc/tree/master/scoped-gc/src\" rel=\"nofollow noreferrer\">a working implementation implemented (mark &amp; sweep GC with scopes)</a>, but the interface is not yet safe to use.</p>\n\n<p>Here is a usage example of what I want:</p>\n\n<pre><code>pub struct RefNamedObject&lt;'a&gt; {\n    pub name: &amp;'a str,\n    pub other: Option&lt;Gc&lt;'a, GcRefCell&lt;NamedObject&lt;'a&gt;&gt;&gt;&gt;,\n}\n\nfn main() {\n    // Initialize host settings: in our case the host object will be replaced by a string\n    // In this case it lives for the duration of `main`\n    let host = String::from(\"HostConfig\");\n\n    {\n        // Create the garbage-collected scope (similar usage to `TypedArena`)\n        let gc_scope = GcScope::new();\n\n        // Allocate a garbage-collected string: returns a smart pointer `Gc` for this data\n        let a: Gc&lt;String&gt; = gc_scope.alloc(String::from(\"a\")).unwrap();\n\n        {\n            let b = gc_scope.alloc(String::from(\"b\")).unwrap();\n        }\n\n        // Manually trigger garbage collection: will free b's memory\n        gc_scope.collect_garbage();\n\n        // Allocate data and get a Gc pointer, data references `host`\n        let host_binding: Gc&lt;RefNamed&gt; = gc_scope\n            .alloc(RefNamedObject {\n                name: &amp;host,\n                other: None,\n            })\n            .unwrap();\n\n        // At the end of this block, gc_scope is dropped with all its\n        // remaining values (`a` and `host_bindings`)\n    }\n}\n</code></pre>\n\n<h1>Lifetime properties</h1>\n\n<p>The basic intuition is that <code>Gc</code> can only contain data that lives as long (or longer) than the corresponding <code>GcScope</code>. <code>Gc</code> is similar to <code>Rc</code> but supports cycles. You need to use <code>Gc&lt;GcRefCell&lt;T&gt;&gt;</code> to mutate values (similar to <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>).</p>\n\n<p>Here are the properties that must be satisfied by the lifetimes of my API:</p>\n\n<h2><code>Gc</code> cannot live longer than its <code>GcScope</code></h2>\n\n<p>The following code must <strong>fail</strong> because <code>a</code> outlives <code>gc_scope</code>:</p>\n\n<pre><code>let a: Gc&lt;String&gt;;\n{\n    let gc_scope = GcScope::new();\n    a = gc_scope.alloc(String::from(\"a\")).unwrap();\n}\n// This must fail: the gc_scope was dropped with all its values\nprintln(\"{}\", *a); // Invalid\n</code></pre>\n\n<h2><code>Gc</code> cannot contain data that lives shorter than its <code>GcScope</code></h2>\n\n<p>The following code must <strong>fail</strong> because <code>msg</code> does not live as long (or longer) as <code>gc_scope</code></p>\n\n<pre><code>let gc_scope = GcScope::new();\nlet a: Gc&lt;&amp;string&gt;;\n{\n    let msg = String::from(\"msg\");\n    a = gc.alloc(&amp;msg).unwrap();\n}\n</code></pre>\n\n<h2>It must be possible to allocate multiple <code>Gc</code> (no exclusion on <code>gc_scope</code>)</h2>\n\n<p>The following code must compile</p>\n\n<pre><code>let gc_scope = GcScope::new();\n\nlet a = gc_scope.alloc(String::from(\"a\"));\nlet b = gc_scope.alloc(String::from(\"b\"));\n</code></pre>\n\n<h2>It must be possible to allocate values containing references with lifetimes longer than <code>gc_scope</code></h2>\n\n<p>The following code must compile</p>\n\n<pre><code>let msg = String::from(\"msg\");\nlet gc_scope = GcScope::new();\nlet a: Gc&lt;&amp;str&gt; = gc_scope.alloc(&amp;msg).unwrap();\n</code></pre>\n\n<h2>It must be possible to create cycles of Gc pointers (that's the whole point)</h2>\n\n<p>Similarly to the <code>Rc&lt;Refcell&lt;T&gt;&gt;</code> pattern, you can use <code>Gc&lt;GcRefCell&lt;T&gt;&gt;</code> to mutate values and create cycles:</p>\n\n<pre><code>// The lifetimes correspond to my best solution so far, they can change\nstruct CircularObj&lt;'a&gt; {\n    pub other: Option&lt;Gc&lt;'a, GcRefCell&lt;CircularObj&lt;'a&gt;&gt;&gt;&gt;,\n}\n\nlet gc_scope = GcScope::new();\n\nlet n1 = gc_scope.alloc(GcRefCell::new(CircularObj { other: None }));\nlet n2 = gc_scope.alloc(GcRefCell::new(CircularObj {\n    other: Some(Gc::clone(&amp;n1)),\n}));\nn1.borrow_mut().other = Some(Gc::clone(&amp;n2));\n</code></pre>\n\n<h1>Solutions so far</h1>\n\n<h2>Automatic lifetime / lifetime tag</h2>\n\n<p>Implemented on the <a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc_scope.rs\" rel=\"nofollow noreferrer\"><code>auto-lifetime</code> branch</a></p>\n\n<p>This solution is inspired by <a href=\"https://github.com/neon-bindings/neon\" rel=\"nofollow noreferrer\"><code>neon</code></a>'s handles.\nThis lets any valid code compile (and allowed me to test my implementation) but is too loose and allows invalid code. <strong>It allows <code>Gc</code> to outlive the <code>gc_scope</code> that created it</strong>. (Violates the first property)</p>\n\n<p>The idea here is that I add a single lifetime <code>'gc</code> to all my structs. The idea is that this lifetime represents \"how long gc_scope lives\".</p>\n\n<pre><code>// A smart pointer for `T` valid during `'gc`\npub struct Gc&lt;'gc, T: Trace + 'gc&gt; {\n    pub ptr: NonNull&lt;GcBox&lt;T&gt;&gt;,\n    pub phantom: PhantomData&lt;&amp;'gc T&gt;,\n    pub rooted: Cell&lt;bool&gt;,\n}\n</code></pre>\n\n<p>I call it automatic lifetimes because the methods never mix these struct lifetimes with the lifetime of the references they receive.</p>\n\n<p>Here is the impl for gc_scope.alloc:</p>\n\n<pre><code>impl&lt;'gc&gt; GcScope&lt;'gc&gt; {\n    // ...\n    pub fn alloc&lt;T: Trace + 'gc&gt;(&amp;self, value: T) -&gt; Result&lt;Gc&lt;'gc, T&gt;, GcAllocErr&gt; {\n        // ...\n    }\n}\n</code></pre>\n\n<h2>Inner/outer lifetimes</h2>\n\n<p>Implemented on the <a href=\"https://github.com/open-flash/rust-scoped-gc/blob/inner-outer/scoped-gc/src/gc_scope.rs\" rel=\"nofollow noreferrer\"><code>inner-outer</code> branch</a></p>\n\n<p>This implementation tries to fix the previous issue by relating <code>Gc</code> to the lifetime of <code>GcScope</code>. <strong>It is overly constrained and prevents the creation of cycles.</strong> This violates the last property.</p>\n\n<p>To constrain <code>Gc</code> relative to its <code>GcScope</code>, I introduce two lifetimes: <code>'inner</code> is the lifetime of <code>GcScope</code> and the result is <code>Gc&lt;'inner, T&gt;</code>. <code>'outer</code> represents a lifetime longer than <code>'inner</code> and is used for the allocated value.</p>\n\n<p>Here is the alloc signature:</p>\n\n<pre><code>impl&lt;'outer&gt; GcScope&lt;'outer&gt; {\n    // ...\n\n    pub fn alloc&lt;'inner, T: Trace + 'outer&gt;(\n        &amp;'inner self,\n        value: T,\n    ) -&gt; Result&lt;Gc&lt;'inner, T&gt;, GcAllocErr&gt; {\n        // ...\n    }\n\n    // ...\n}\n</code></pre>\n\n<h2>Closure (context management)</h2>\n\n<p>Implemented on the <a href=\"https://github.com/open-flash/rust-scoped-gc/blob/with/scoped-gc/src/gc_scope.rs\" rel=\"nofollow noreferrer\"><code>with</code> branch</a></p>\n\n<p>Another idea was to not let the user create a <code>GcScope</code> manually with <code>GcScope::new</code> but instead expose a function <code>GcScope::with(executor)</code> providing a reference to the <code>gc_scope</code>. The closure <code>executor</code> corresponds to the <code>gc_scope</code>. So far, it either prevents the use of external references or allows to leak data to external <code>Gc</code> variables (first and fourth properties).</p>\n\n<p>Here is the alloc signature:</p>\n\n<pre><code>impl&lt;'gc&gt; GcScope&lt;'gc&gt; {\n    // ...\n    pub fn alloc&lt;T: Trace + 'gc&gt;(&amp;self, value: T) -&gt; Result&lt;Gc&lt;'gc, T&gt;, GcAllocErr&gt; {\n        // ...\n    }\n}\n</code></pre>\n\n<p>Here is a usage example showing the violation of the first property:</p>\n\n<pre><code>let message = GcScope::with(|scope| {\n    scope\n        .alloc(NamedObject {\n            name: String::from(\"Hello, World!\"),\n        })\n        .unwrap()\n});\nprintln!(\"{}\", message.name);\n</code></pre>\n\n<h2>What I'd like</h2>\n\n<p>From what I understand, the <code>alloc</code> signature I'd like is:</p>\n\n<pre><code>impl&lt;'gc&gt; GcScope&lt;'gc&gt; {\n    pub fn alloc&lt;T: Trace + 'gc&gt;(&amp;'gc self, value: T) -&gt; Result&lt;Gc&lt;'gc, T&gt;, GcAllocErr&gt; {\n        // ...\n    }\n}\n</code></pre>\n\n<p>Where everything lives as long or longer than <code>self</code> (the <code>gc_scope</code>). But this blows up with the most simple tests:</p>\n\n<pre><code>fn test_gc() {\n    let scope: GcScope = GcScope::new();\n    scope.alloc(String::from(\"Hello, World!\")).unwrap();\n}\n</code></pre>\n\n<p>causes </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `scope` does not live long enough\n  --&gt; src/test.rs:50:3\n   |\n50 |   scope.alloc(String::from(\"Hello, World!\")).unwrap();\n   |   ^^^^^ borrowed value does not live long enough\n51 | }\n   | - `scope` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>I have no idea what happens here. <a href=\"https://play.rust-lang.org/?gist=a8ccbd120c5f99464346c5f20ec188f4&amp;version=nightly\" rel=\"nofollow noreferrer\">Playground link</a></p>\n\n<p><strong>Edit</strong>: As explained to me on IRC, this is because I implement <code>Drop</code> which requires <code>&amp;mut self</code>, but the <code>scope</code> is already borrowed in read-only mode. </p>\n\n<h1>Overview</h1>\n\n<p>Here is a quick overview of the main components of my library.\n<a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc_scope.rs\" rel=\"nofollow noreferrer\"><code>GcScope</code></a> contains a <code>RefCell</code> to its mutable state. This was introduced to not require <code>&amp;mut self</code> for <code>alloc</code> because it \"locked\" the gc_scope and violated property 3: allocate multiple values.\nThis mutable state is <a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc_state.rs\" rel=\"nofollow noreferrer\"><code>GcState</code></a>. It keeps track of all the allocated values. The values are stored as a forward-only linked list of <a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc_box.rs\" rel=\"nofollow noreferrer\"><code>GcBox</code></a>. This <code>GcBox</code> is heap-allocated and contains the actual value with some metadata (how many active <code>Gc</code> pointers have it as their root and a boolean flag used to check if the value is reachable from the root (see <a href=\"https://github.com/Manishearth/rust-gc\" rel=\"nofollow noreferrer\">rust-gc</a>). The value here must outlive its <code>gc_scope</code> so <code>GcBox</code> uses a lifetime, and in turn <code>GcState</code> must then use a lifetime as well as <code>GcScope</code>: this is always the same lifetime meaning \"longer than <code>gc_scope</code>\". The fact that <code>GcScope</code> has a <code>RefCell</code> (interior mutability) and lifetime is maybe the reason why I can't get my lifetimes to work (it causes invariance?).</p>\n\n<p><a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc.rs\" rel=\"nofollow noreferrer\"><code>Gc</code></a> is a smart pointer to some <code>gc_scope</code>-allocated data. You can only get it through <code>gc_scope.alloc</code> or by cloning it.\n<a href=\"https://github.com/open-flash/rust-scoped-gc/blob/auto-lifetime/scoped-gc/src/gc_ref_cell.rs\" rel=\"nofollow noreferrer\"><code>GcRefCell</code></a> is most likely fine, it's just a <code>RefCell</code> wrapper adding metadata and behavior to properly support borrows.</p>\n\n<h1>Flexibility</h1>\n\n<p>I'm fine with the following requirements to get a solution:</p>\n\n<ul>\n<li>unsafe code</li>\n<li>nightly features</li>\n<li>API changes (see for example my <code>with</code> approach). What matters is that I can create a temporary zone where I can manipulate garbage-collected values and that they are all dropped after this. These garbage-collected values need to be able to access longer-lived (but not static) variables outside of the scope.</li>\n</ul>\n\n<p><a href=\"https://github.com/open-flash/rust-scoped-gc/tree/auto-lifetime\" rel=\"nofollow noreferrer\">The repository</a> has a few tests in <code>scoped-gc/src/lib.rs</code> (compile-fail) as <code>scoped-gc/src/test.rs</code>.</p>\n\n<p><strong>I found a solution, I'll post it once redacted.</strong></p>\n"}, {"tags": ["rust", "visual-studio-code"], "comments": [{"owner": {"reputation": 4591, "user_id": 3887945, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/7Nb72.jpg?s=128&g=1", "display_name": "Theyouthis", "link": "https://stackoverflow.com/users/3887945/theyouthis"}, "edited": false, "score": 0, "creation_date": 1544203536, "post_id": 49176784, "comment_id": 94206028, "body": "ever figure this out?"}], "owner": {"reputation": 101, "user_id": 3266287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/961cc8f60f7053301bb261431e6bfe2f?s=128&d=identicon&r=PG&f=1", "display_name": "wchips", "link": "https://stackoverflow.com/users/3266287/wchips"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 265, "favorite_count": 0, "answer_count": 0, "score": 6, "last_activity_date": 1520526615, "creation_date": 1520523026, "last_edit_date": 1520526615, "question_id": 49176784, "link": "https://stackoverflow.com/questions/49176784/how-do-i-show-the-standard-output-of-my-rust-program-in-the-output-window-of-vs", "title": "How do I show the standard output of my Rust program in the output window of VS Code?", "body": "<p>I am trying to show the standard output of my Rust program in the output window of VS Code.  Right now the output goes to an external command shell.  Could I do it with <code>OutputDebugString</code> somehow? The <code>terminal.integrated</code> user settings do not seem to do anything.</p>\n\n<p><a href=\"https://i.stack.imgur.com/Klv0z.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Klv0z.png\" alt=\"vscode output window\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/8zlXk.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8zlXk.png\" alt=\"User Settings\"></a></p>\n"}, {"tags": ["rust", "undefined-behavior", "lifetime"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520518735, "post_id": 49174630, "comment_id": 85355576, "body": "Transfer one to another thread and write to it in one thread, read it on the other. Happy race conditions."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520519122, "post_id": 49174630, "comment_id": 85355864, "body": "@CodesInChaos Question edited."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 4, "creation_date": 1520519390, "post_id": 49174630, "comment_id": 85356042, "body": "In a single threaded scenario you could use <code>&amp;Cell&lt;T&gt;</code> which is pretty close to the semantics you want. It precludes some compiler optimizations and unfortunately the compiler lacks some syntax sugar to make working with cells convenient."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1520536733, "post_id": 49174630, "comment_id": 85367216, "body": "Also answered in <a href=\"https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/\" rel=\"nofollow noreferrer\"><i>The Problem With Single-threaded Shared Mutability</i></a>"}, {"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 1, "creation_date": 1520538482, "post_id": 49174630, "comment_id": 85368138, "body": "Abusing iterators is probably the classical example of violating safety. <a href=\"https://play.rust-lang.org/?gist=f33cba7d223dc6fec12bbb7c29b8ed97&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1520591286, "post_id": 49174630, "comment_id": 85388214, "body": "The Nomicon also covers part of this. <a href=\"https://doc.rust-lang.org/nomicon/aliasing.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/aliasing.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": false, "score": 15, "last_activity_date": 1520522225, "creation_date": 1520522225, "answer_id": 49176515, "question_id": 49174630, "link": "https://stackoverflow.com/questions/49174630/why-does-rust-disallow-mutable-aliasing/49176515#49176515", "title": "Why does Rust disallow mutable aliasing?", "body": "<p>A really common pitfall in C++ programs, and even in Java programs, is modifying a collection while iterating over it, like this:</p>\n\n<pre><code>for (it: collection) {\n    if (predicate(*it)) {\n        collection.remove(it);\n    }\n}\n</code></pre>\n\n<p>For C++ standard library collections, this causes undefined behaviour. Maybe the iteration will work until you get to the last entry, but the last entry will dereference a dangling pointer or read off the end of an array. Maybe the whole array underlying the collection will be relocated, and it'll fail immediately. Maybe it works most of the time but fails if a reallocation happens at the wrong time. In most Java standard collections, it's also undefined behaviour according to the language specification, but the collections tend to throw <code>ConcurrentModificationException</code> - a check which causes a runtime cost even when your code is correct. Neither language can detect the error during compilation.</p>\n\n<p>This is a common example of a data race caused by concurrency, even in a single-threaded environment. Concurrency doesn't just mean parallelism: it can also mean nested computation. In Rust, this kind of mistake is detected during compilation because the iterator has an immutable borrow of the collection, so you can't mutate the collection while the iterator is alive.</p>\n\n<p>An easier-to-understand but less common example is pointer aliasing when you pass multiple pointers (or references) to a function. A concrete example would be passing overlapping memory ranges to <code>memcpy</code> instead of <code>memmove</code>. Actually, <a href=\"https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\" rel=\"noreferrer\">Rust's <code>memcpy</code> equivalent</a> is <code>unsafe</code> too, but that's because it takes pointers instead of references. The linked page shows how you can make a safe <em>swap</em> function using the guarantee that mutable <em>references</em> never alias.</p>\n\n<p>A more contrived example of reference aliasing is like this:</p>\n\n<pre><code>int f(int *x, int *y) { return (*x)++ + (*y)++; }\nint i = 3;\nf(&amp;i, &amp;i); // result is undefined\n</code></pre>\n\n<p>You couldn't write a function call like that in Rust because you'd have to take two mutable borrows of the same variable.</p>\n"}, {"comments": [{"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 1, "creation_date": 1520588375, "post_id": 49186393, "comment_id": 85386372, "body": "&quot;in a single threaded environment you can avoid that sort of problem if you&#39;re careful&quot; - you can avoid any bug if you&#39;re careful enough, but if you think that way, why would you want a borrow checker at all?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1520592297, "post_id": 49186393, "comment_id": 85388825, "body": "@DanHulme If I understand his point, he says that the rule &quot;do not use something after move&quot; (that&#39;s the example everyone give, see other answer) is not the same as &quot;do not have multiple mutable aliasing&quot;. For example, if you work with a mutable slice, you <b>cannot</b> use an item after move because a slice is only some borrowed memory, and you must own something to move it. However, this answer says that multiple mutable aliases to a slice is still bad, because the compiler has wrong information to work with. I prefer this answer because it is more precise."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1520592978, "post_id": 49186393, "comment_id": 85389228, "body": "I&#39;ve heard &quot;maybe a future compiler can optimize better this way&quot; as a justification of so many bad programming practices in C++, it&#39;s a shame to hear the same rhetoric in the Rust world when preventing programming errors is a genuine benefit of disallowing multiple mutable references."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1520605001, "post_id": 49186393, "comment_id": 85396192, "body": "@Boiethios Yes, I read it several times, and I was confused afterwards. You bring up &quot;use after move&quot; as an error, but that&#39;s not what your example illustrates, it&#39;s not what my examples illustrate, and it doesn&#39;t seem to be mentioned in this answer at all."}, {"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1614805055, "post_id": 49186393, "comment_id": 117500330, "body": "@DanHulme Because peoples are not that careful, and we make mistakes."}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": true, "score": 5, "last_activity_date": 1589756112, "last_edit_date": 1592644375, "creation_date": 1520567900, "answer_id": 49186393, "question_id": 49174630, "link": "https://stackoverflow.com/questions/49174630/why-does-rust-disallow-mutable-aliasing/49186393#49186393", "title": "Why does Rust disallow mutable aliasing?", "body": "<blockquote>\n<p>How can I do do something bad (e.g. segmentation fault, undefined behavior, etc.) with multiple mutable references to the same thing?</p>\n</blockquote>\n<p>I believe that although you trigger 'undefined behavior' by doing this, <em>technically</em> the <code>noalias</code> flag is not used by the Rust compiler for <code>&amp;mut</code> references, so <em>practically</em> speaking, right now, you probably can't actually trigger undefined behavior this way. What you're triggering is 'implementation specific behavior', which is 'behaves like C++ according to LLVM'.</p>\n<p>See <a href=\"https://stackoverflow.com/questions/57259126/why-does-the-rust-compiler-not-optimize-code-assuming-that-two-mutable-reference\">Why does the Rust compiler not optimize code assuming that two mutable references cannot alias?</a> for more information.</p>\n<blockquote>\n<p>I can see how there might be problems when threads are introduced, but why is it prevented even if I do everything in one thread?</p>\n</blockquote>\n<p>Have a read of <a href=\"https://blog.regehr.org/archives/213\" rel=\"nofollow noreferrer\">this series of blog articles about undefined behavior</a></p>\n<p>In my opinion, race conditions (like iterators) aren't really a good example of what you're talking about; in a single threaded environment you can avoid that sort of problem if you're careful. This is no different to creating an arbitrary pointer to invalid memory and writing to it; just don't do it. You're no worse off than using C.</p>\n<p>To understand the issue here, consider when compiling in release mode the compiler may or may not reorder statements when optimizations are performed; that means that although your code may run in the linear sequence:</p>\n<pre><code>a; b; c;\n</code></pre>\n<p>There is no guarantee the compiler will execute them in that sequence when it runs, if (according to what the compiler knows), there is no logical reason that the statements must be performed in a specific atomic sequence. Part 3 of the blog I've linked to above demonstrates how this can cause undefined behavior.</p>\n<p><strong>tl;dr</strong>: Basically, the compiler may perform various optimizations; these are guaranteed to continue to make your program behave in a deterministic fashion <em>if and only if</em> your program does not trigger undefined behavior.</p>\n<p>As far as I'm aware the Rust compiler <strong>currently</strong> doesn't use many 'advanced optimizations' that may cause this kind of failure, but there is no guarantee that it won't in the future. It is not a 'breaking change' to introduce new compiler optimizations.</p>\n<p>So... it's actually probably quite unlikely you'll be able to trigger actual undefined behavior just via mutable aliasing right now; but the restriction allows the possibility of future performance optimizations.</p>\n<p>Pertinent quote:</p>\n<blockquote>\n<p>The C FAQ defines \u201cundefined behavior\u201d like this:</p>\n<p>Anything at all can happen; the Standard imposes no requirements. The program may fail to compile, or it may execute incorrectly (either crashing or silently generating incorrect results), or it may fortuitously do exactly what the programmer intended.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 2, "last_activity_date": 1589755900, "creation_date": 1589755900, "answer_id": 61859826, "question_id": 49174630, "link": "https://stackoverflow.com/questions/49174630/why-does-rust-disallow-mutable-aliasing/61859826#61859826", "title": "Why does Rust disallow mutable aliasing?", "body": "<blockquote>\n  <p><strong>Author's Note:</strong> The following answer was originally written for <a href=\"https://stackoverflow.com/questions/61851916/how-do-intertwined-scopes-create-a-data-race\">How do intertwined scopes create a &quot;data race&quot;?</a></p>\n</blockquote>\n\n<p>The compiler is allowed to optimize <code>&amp;mut</code> pointers under the assumption that they are exclusive (not aliased). Your code breaks this assumption.</p>\n\n<p>The example in the question is a little too trivial to exhibit any kind of interesting wrong behavior, but consider passing <code>ref_to_i_1</code> and <code>ref_to_i_2</code> to a function that modifies both and then does something with them:</p>\n\n<pre><code>fn main() {\n    let mut i = 42;\n    let ref_to_i_1 = unsafe { &amp;mut *(&amp;mut i as *mut i32) };\n    let ref_to_i_2 = unsafe { &amp;mut *(&amp;mut i as *mut i32) };\n\n    foo(ref_to_i_1, ref_to_i_2);\n}\n\nfn foo(r1: &amp;mut i32, r2: &amp;mut i32) {\n    *r1 = 1;\n    *r2 = 2;\n    println!(\"{}\", r1);\n    println!(\"{}\", r2);\n}\n</code></pre>\n\n<p>The compiler may (or may not) decide to de-interleave the accesses to <code>r1</code> and <code>r2</code>, because they are not allowed to alias:</p>\n\n<pre><code>// The following is an illustration of how the compiler might rearrange\n// side effects in a function to optimize it. Optimization passes in the\n// compiler actually work on (MIR and) LLVM IR, not on raw Rust code. \nfn foo(r1: &amp;mut i32, r2: &amp;mut i32) {\n    *r1 = 1;\n    println!(\"{}\", r1);\n    *r2 = 2;\n    println!(\"{}\", r2);\n}\n</code></pre>\n\n<p>It might even realize that the <code>println!</code>s always print the same value and take advantage of that fact to further rearrange <code>foo</code>:</p>\n\n<pre><code>fn foo(r1: &amp;mut i32, r2: &amp;mut i32) {\n    println!(\"{}\", 1);\n    println!(\"{}\", 2);\n    *r1 = 1;\n    *r2 = 2;\n}\n</code></pre>\n\n<p>It's good that a compiler can do this optimization! (Even if Rust's currently doesn't, as <a href=\"https://stackoverflow.com/a/49186393/3650362\">Doug's answer</a> mentions.) Optimizing compilers are great because they can use transformations like those above to make code run faster (for instance, by better pipelining the code through the CPU, or by enabling the compiler to do more aggressive optimizations in a later pass). All else being equal, everybody likes their code to run fast, right?</p>\n\n<p>You might say \"Well, that's an invalid optimization because it doesn't do the same thing.\" But you'd be wrong: the whole <em>point</em> of <code>&amp;mut</code> references is that they do not alias. There is no way to make <code>r1</code> and <code>r2</code> alias without breaking the rules&dagger;, which is what makes this optimization valid to do.</p>\n\n<p>You might also think that this is a problem that only appears in more complicated code, and the compiler should therefore allow the simple examples. But bear in mind that these transformations are part of a long multi-step optimization process. It's important to uphold the properties of <code>&amp;mut</code> references everywhere, so that the compiler can make minor optimizations to <em>one</em> section of code without needing to understand <em>all</em> the code.</p>\n\n<p>One more thing to consider: it is your job as the programmer to choose and apply the appropriate types for your problem; asking the compiler for occasional exceptions to the <code>&amp;mut</code> aliasing rule is basically asking it to do your job for you.</p>\n\n<p>If you want shared mutability and to forego those optimizations, it's simple: don't use <code>&amp;mut</code>. In the example, you can use <code>&amp;Cell&lt;i32&gt;</code> instead of <code>&amp;mut i32</code>, as the comments mentioned:</p>\n\n<pre><code>fn main() {\n    let mut i = std::cell::Cell::new(42);\n    let ref_to_i_1 = &amp;i;\n    let ref_to_i_2 = &amp;i;\n\n    foo(ref_to_i_1, ref_to_i_2);\n}\n\nfn foo(r1: &amp;Cell&lt;i32&gt;, r2: &amp;Cell&lt;i32&gt;) {\n    r1.set(1);\n    r2.set(2);\n    println!(\"{}\", r1.get()); // prints 2, guaranteed\n    println!(\"{}\", r2.get()); // also prints 2\n}\n</code></pre>\n\n<p>The types in <code>std::cell</code> provide <em>interior mutability</em>, which is jargon for \"disallow certain optimizations because <code>&amp;</code> references may mutate things\". They aren't always quite as convenient as using <code>&amp;mut</code>, but that's because using them gives you more flexibility to write code like the above.</p>\n\n<h2>Also read</h2>\n\n<ul>\n<li><a href=\"https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/\" rel=\"nofollow noreferrer\">The Problem With Single-threaded Shared Mutability</a> describes how having multiple mutable references can cause soundness issues even in the absence of multiple threads and data races.</li>\n<li><a href=\"https://stackoverflow.com/a/49176515/3650362\">Dan Hulme's answer</a> illustrates how aliased mutation of more complex data can also cause undefined behavior (even before compiler optimizations).</li>\n</ul>\n\n<hr>\n\n<p>&dagger; Be aware that using <code>unsafe</code> by itself does not count as \"breaking the rules\". <code>&amp;mut</code> references cannot be aliased, <em>even when using <code>unsafe</code></em>, in order for your code to have defined behavior.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1249, "favorite_count": 5, "accepted_answer_id": 49186393, "answer_count": 3, "score": 11, "last_activity_date": 1589756112, "creation_date": 1520516689, "last_edit_date": 1525721495, "question_id": 49174630, "link": "https://stackoverflow.com/questions/49174630/why-does-rust-disallow-mutable-aliasing", "title": "Why does Rust disallow mutable aliasing?", "body": "<p>Rust disallows this kind of code because it is unsafe:</p>\n\n<pre><code>fn main() {\n    let mut i = 42;\n    let ref_to_i_1 = unsafe { &amp;mut *(&amp;mut i as *mut i32) };\n    let ref_to_i_2 = unsafe { &amp;mut *(&amp;mut i as *mut i32) };\n\n    *ref_to_i_1 = 1;\n    *ref_to_i_2 = 2;\n}\n</code></pre>\n\n<p>How can I do do something bad (<em>e.g.</em> segmentation fault, undefined behavior, etc.) with multiple mutable references to the same thing? </p>\n\n<p>The only possible issues I can see come from the lifetime of the data. Here, if <code>i</code> is alive, each mutable reference to it should be ok.</p>\n\n<p>I can see how there might be problems when threads are introduced, but why is it prevented even if I do everything in one thread?</p>\n"}, {"tags": ["rust", "readability"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1520495006, "post_id": 49164470, "comment_id": 85340717, "body": "As long as you want to return a <code>Vec&lt;u8&gt;</code>, you need at least 1 collect"}], "answers": [{"comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1520499685, "post_id": 49167949, "comment_id": 85343325, "body": "Wouldn&#39;t <code>inclusive_range_syntax</code> fix the overflow in <code>&quot;0-255&quot;</code> that the first version has?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1520537783, "post_id": 49167949, "comment_id": 85367768, "body": "You could also avoid the <code>collect</code> by returning a <code>std::ops::Range&lt;u8&gt;</code> and not need nightly. Unfortunately you still need nightly to return <code>RangeInclusive</code>, but maybe one of these days..."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520596956, "post_id": 49167949, "comment_id": 85391346, "body": "In the nightly implementation I&#39;d rather return the <code>RangeInclusive</code> from the function and leave turning it into a vector (or treating it as iterator) to the caller."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1520597116, "post_id": 49167949, "comment_id": 85391412, "body": "@CodesInChaos that&#39;s what I did. Well... I didn&#39;t returned <code>RangeInclusive</code>, but it&#39;s the callers decision to collect the result or do something else with it."}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 3, "last_activity_date": 1520514852, "last_edit_date": 1520514852, "creation_date": 1520495309, "answer_id": 49167949, "question_id": 49164470, "link": "https://stackoverflow.com/questions/49164470/how-to-translate-x-y-to-vecx-x1-y-1-y/49167949#49167949", "title": "How to translate &quot;x-y&quot; to vec![x, x+1, \u2026 y-1, y]?", "body": "<h1>Trivial implementation</h1>\n\n<pre><code>fn parse_range(string_value: &amp;str) -&gt; Vec&lt;u8&gt; {\n    let pos = string_value.find(|c| c == '-').expect(\"No valid string\");\n    let (first, second) = string_value.split_at(pos);\n\n    let first: u8 = first.parse().expect(\"Not a number\");\n    let second: u8 = second[1..].parse().expect(\"Not a number\");\n\n    { first..second + 1 }.collect()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=74a1dfb2c83f0ea005257821b71ac67b&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I would recommend returning a <code>Result&lt;Vec&lt;u8&gt;, Error&gt;</code> instead of panicking  with <code>expect/unwrap</code>.</p>\n\n<h1>Nightly implementation</h1>\n\n<p>My next thought was about the second collect. Here is a code example which uses nightly code, but you won't need any collect at all.</p>\n\n<pre><code>#![feature(conservative_impl_trait, inclusive_range_syntax)]\n\nfn parse_range(string_value: &amp;str) -&gt; impl Iterator&lt;Item = u8&gt; {\n    let pos = string_value.find(|c| c == '-').expect(\"No valid string\");\n    let (first, second) = string_value.split_at(pos);\n\n    let first: u8 = first.parse().expect(\"Not a number\");\n    let second: u8 = second[1..].parse().expect(\"Not a number\");\n\n    first..=second\n}\n\nfn main() {\n    println!(\"{:?}\", parse_range(\"3-7\").collect::&lt;Vec&lt;u8&gt;&gt;());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1520539430, "post_id": 49174238, "comment_id": 85368657, "body": "I don&#39;t like the implicitness of using <code>next()</code> twice (it&#39;s still implicit that there must be exactly two values), but the <code>unwrap()</code> tip and returning an iterator are both great!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1520539974, "post_id": 49174238, "comment_id": 85368931, "body": "@l0b0 I&#39;m not sure you are using the word &quot;implicit&quot; the way that I understand it. Calling <code>next</code> seems very <i>explicit</i>, and the fact that there are two variables is also very <i>explicit</i>."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 1, "creation_date": 1520541501, "post_id": 49174238, "comment_id": 85369674, "body": "I mean that it&#39;s not explicit that we&#39;ve consumed all the available entries in <code>values</code>. If I could say <code>(first, last)=</code> instead it would be a runtime error if the value was for example &quot;5--6&quot; or &quot;5-6-&quot;. Currently I have to rely on less obvious logic: That <code>parse()</code> won&#39;t simply ignore leading or trailing dashes, and that I&#39;ve given the right <code>n</code> to <code>splitn</code> - my original implementation used <code>n</code>=<code>1</code> because I intuited that <code>n</code> was the number of <i>splits</i> and not the number of returned items. If for whatever reason <code>n</code> is set to three there would be an undetected bug when handling invalid input."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 1, "creation_date": 1520541770, "post_id": 49174238, "comment_id": 85369843, "body": "<i>because I intuited that n was the number of splits and not the number of returned items</i> \u2014 that would be <a href=\"https://github.com/rust-lang/rfcs/pull/979\" rel=\"nofollow noreferrer\">because of me</a>, you&#39;re welcome!"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 1, "creation_date": 1520541907, "post_id": 49174238, "comment_id": 85369919, "body": "@l0b0 I seem to recall there being some suggestion of <code>impl FromIterator&lt;T&gt; for Result&lt;(T, T, ...), NotEnoughItems&gt;</code> which would permit something like that. However, I can&#39;t find it now. I think it was blocked waiting on const generics or some other future feature..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1520542195, "last_edit_date": 1520542195, "creation_date": 1520515642, "answer_id": 49174238, "question_id": 49164470, "link": "https://stackoverflow.com/questions/49164470/how-to-translate-x-y-to-vecx-x1-y-1-y/49174238#49174238", "title": "How to translate &quot;x-y&quot; to vec![x, x+1, \u2026 y-1, y]?", "body": "<p>Instead of calling <code>collect</code> the first time, just advance the iterator:</p>\n\n<pre><code>let mut values = string_value\n    .splitn(2, \"-\")\n    .map(|part| part.parse().unwrap());\n\nlet start = values.next().unwrap();\nlet end = values.next().unwrap();\n</code></pre>\n\n<p>Do not call <code>.ok().unwrap()</code> \u2014\u00a0that converts the <code>Result</code> with useful error information to an <code>Option</code>, which has no information. Just call <code>unwrap</code> directly on the <code>Result</code>.</p>\n\n<p>As already mentioned, if you want to return a <code>Vec</code>, you'll want to call <code>collect</code> to create it. If you want to <a href=\"https://stackoverflow.com/q/27535289/155423\">return an iterator</a>, you can. It's not bad even in stable Rust:</p>\n\n<pre><code>fn parse_range(string_value: &amp;str) -&gt; std::ops::Range&lt;u8&gt; {\n    let mut values = string_value\n        .splitn(2, \"-\")\n        .map(|part| part.parse().unwrap());\n\n    let start = values.next().unwrap();\n    let end = values.next().unwrap();\n\n    start..end + 1\n}\n\nfn main() {\n    assert!(parse_range(\"1-5\").eq(1..6));\n}\n</code></pre>\n\n<p>Sadly, <a href=\"https://stackoverflow.com/q/43698191/155423\">inclusive ranges are not yet stable</a>, so you'll need to continue to use <code>+1</code> or switch to nightly.</p>\n\n<hr>\n\n<blockquote>\n  <p>Since <code>splitn(2, \"-\")</code> returns exactly two results for any valid <code>string_value</code>, it would be better to assign the tuple directly to two variables first and last rather than a seemingly arbitrary-length <code>Vec</code>. I can't seem to do this with a tuple.</p>\n</blockquote>\n\n<p>This is not possible with Rust's type system. You are asking for <a href=\"https://en.wikipedia.org/wiki/Dependent_type\" rel=\"nofollow noreferrer\"><em>dependent types</em></a>, a way for runtime values to interact with the type system. You'd want <code>splitn</code> to return a <code>(&amp;str, &amp;str)</code> for a value of <code>2</code> and a (<code>&amp;str</code>, <code>&amp;str</code>, <code>&amp;str</code>) for a value of <code>3</code>. That gets even more complicated when the argument is a variable, especially when it's set at run time.</p>\n\n<p>The closest workaround would be to have a runtime check that there are no more values:</p>\n\n<pre><code>assert!(values.next().is_none());\n</code></pre>\n\n<p>Such a check doesn't feel valuable to me. </p>\n\n<hr>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43698191/155423\">How do I include the end value in a range?</a></li>\n</ul>\n"}], "owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1520542195, "creation_date": 1520476525, "question_id": 49164470, "link": "https://stackoverflow.com/questions/49164470/how-to-translate-x-y-to-vecx-x1-y-1-y", "title": "How to translate &quot;x-y&quot; to vec![x, x+1, \u2026 y-1, y]?", "body": "<p>This solution seems rather inelegant:</p>\n\n<pre><code>fn parse_range(&amp;self, string_value: &amp;str) -&gt; Vec&lt;u8&gt; {\n    let values: Vec&lt;u8&gt; = string_value\n        .splitn(2, \"-\")\n        .map(|part| part.parse().ok().unwrap())\n        .collect();\n\n    { values[0]..(values[1] + 1) }.collect()\n}\n</code></pre>\n\n<ul>\n<li>Since <code>splitn(2, \"-\")</code> returns exactly two results for any valid <code>string_value</code>, it would be better to assign the tuple directly to two variables <code>first</code> and <code>last</code> rather than a seemingly arbitrary-length <code>Vec</code>. I can't seem to do this with a tuple.</li>\n<li>There are two instances of <code>collect()</code>, and I wonder if it can be reduced to one (or even zero).</li>\n</ul>\n"}, {"tags": ["rust", "closures", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 2, "last_activity_date": 1520552064, "last_edit_date": 1592644375, "creation_date": 1520486539, "answer_id": 49165962, "question_id": 49164343, "link": "https://stackoverflow.com/questions/49164343/whats-the-real-meaning-of-the-error-closure-may-outlive-the-current-function/49165962#49165962", "title": "What&#39;s the real meaning of the error &quot;closure may outlive the current function&quot;?", "body": "<p><strong>The short version:</strong> Adding explicit lifetime annotation makes a <strong>guarantee</strong> about <code>ClosureTest</code> which isn't necessarily implied without it.</p>\n<hr />\n<h1>The long version</h1>\n<p>Assume you did this:</p>\n<pre><code>fn main() {\n    let closure_parameter = &quot;a parameter value&quot;.to_string();\n\n    let returned_ct = do_something(v);\n\n    println!(&quot;{}&quot;, (returned_ct.cls)(&amp;closure_parameter));\n}\n\nfn do_something() -&gt; ClosureTest {\n    let captured_val = &quot;a captured value&quot;.to_string();\n\n    let mut ct = ClosureTest {\n        cls: |param| &amp;captured_val,\n    };\n    ct // !!!\n}\n\nstruct ClosureTest&lt;T&gt;\nwhere\n    T: FnMut(&amp;str) -&gt; &amp;str,\n{\n    cls: T,\n}\n</code></pre>\n<p>On the line marked with <code>!!!</code>, notice that <code>ct</code> is <em>moved</em> out of the function as a return value. The object now 'lives' in <code>main</code>, but it contains a reference to something that is deleted when <code>do_something</code> ends. <code>ct.cls</code> is returning a <em>reference</em> to <code>captured_val</code>, which would no longer exist if <code>ct</code> is moved out of the function.</p>\n<p>By modifying <code>ClosureTest</code> to include the lifetime, you are saying the following:</p>\n<ul>\n<li>A <code>ClosureTest</code> object <code>obj</code> has some lifetime <code>'a</code></li>\n<li>The <code>str</code> reference returned by <code>obj.cls</code> lives for the entirety of the lifetime defined as <code>'a</code> on <code>obj</code>, if not longer</li>\n<li>Therefore, any reference returned by <code>obj.cls</code> has the same scope as the <code>ClosureTest</code> that returned it. <code>obj</code> will be dropped at the same time as the object its closure references, <em>or sooner</em>. In other words, any <code>ClosureType&lt;'a, T&gt; where T: FnMut(&amp;str) -&gt; &amp;'a str</code> can only live while the object <code>T</code>'s return references exists, and must be dropped when that object is dropped.</li>\n</ul>\n<p>The borrow checker doesn't get annoyed at the original value because <code>ct</code> and <code>captured_value</code> <em>have</em> different lifetimes, it's because they <em>could</em> have different life times - hence the 'may' in 'may outlive borrowed value <code>captured_val</code>'. When you add the lifetime parameter in your example, the borrow checker can now confirm that it should only compile if <code>captured_val</code> lives as long as <code>ct</code>, which it does (they are both dropped at the end of <code>main</code>).</p>\n"}], "owner": {"reputation": 841, "user_id": 1718984, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/481cb1668e6353180bc8d08fb670a668?s=128&d=identicon&r=PG", "display_name": "ParkCheolu", "link": "https://stackoverflow.com/users/1718984/parkcheolu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1739, "favorite_count": 0, "accepted_answer_id": 49165962, "answer_count": 1, "score": 1, "last_activity_date": 1520552064, "creation_date": 1520475669, "last_edit_date": 1520514035, "question_id": 49164343, "link": "https://stackoverflow.com/questions/49164343/whats-the-real-meaning-of-the-error-closure-may-outlive-the-current-function", "title": "What&#39;s the real meaning of the error &quot;closure may outlive the current function&quot;?", "body": "<p>I wrote the following to test closures:</p>\n\n<pre><code>fn main() {\n    let captured_val = \"a captured value\".to_string();\n    let closure_parameter = \"a parameter value\".to_string();\n\n    let mut ct = ClosureTest {\n        cls: |closure_parameter| &amp;captured_val,\n    };\n    println!(\"{}\", (ct.cls)(&amp;closure_parameter));\n}\n\nstruct ClosureTest&lt;T&gt;\nwhere\n    T: FnMut(&amp;str) -&gt; &amp;str,\n{\n    cls: T,\n}\n</code></pre>\n\n<p>I got the following compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `captured_val`, which is owned by the current function\n --&gt; src/main.rs:6:14\n  |\n6 |         cls: |closure_parameter| &amp;captured_val,\n  |              ^^^^^^^^^^^^^^^^^^^  ------------ `captured_val` is borrowed here\n  |              |\n  |              may outlive borrowed value `captured_val`\nhelp: to force the closure to take ownership of `captured_val` (and any other referenced variables), use the `move` keyword\n  |\n6 |         cls: move |closure_parameter| &amp;captured_val,\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I added a lifetime parameter to the struct and it compiled and worked fine:</p>\n\n<pre><code>struct ClosureTest&lt;'a, T&gt;\nwhere\n    T: FnMut(&amp;str) -&gt; &amp;'a str,\n{\n    cls: T,\n}\n</code></pre>\n\n<p>Both variables (<code>captured_val</code> and <code>closure_parameter</code>) are in the same scope, but it seems like that the compiler does not see them having the same lifetime without the lifetime parameter <code>'a</code> I added to <code>ClosureTest&lt;T&gt;</code>. Is this because of Rust's lifetime inference with closures?</p>\n\n<p>I don't understand the first line in the error message I got: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `captured_val`, which is owned by the current function\n</code></pre>\n\n<p>How could the closure outlive the current function? The closure is defined just in the current function, so I think the closure is going to be gone at the end of the current function.</p>\n\n<p>What's the real meaning of the error message and why is it solved with adding the lifetime parameter as I did?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1520472521, "creation_date": 1520472521, "answer_id": 49163947, "question_id": 49163824, "link": "https://stackoverflow.com/questions/49163824/how-can-you-modify-the-value-in-a-raw-pointer-without-converting-it-to-a-referen/49163947#49163947", "title": "How can you modify the value in a raw pointer without converting it to a reference?", "body": "<p>You can write a value into a raw pointer by dereferencing it and storing directly to it:</p>\n\n<pre><code>unsafe fn example(ptr: *mut u8) {\n    *ptr = 42;\n}\n\nfn main() {\n    let mut a = 0;\n    unsafe { example(&amp;mut a); }\n    println!(\"{}\", a);\n}\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 580, "favorite_count": 0, "accepted_answer_id": 49163947, "answer_count": 1, "score": 0, "last_activity_date": 1520472521, "creation_date": 1520471356, "last_edit_date": 1520472366, "question_id": 49163824, "link": "https://stackoverflow.com/questions/49163824/how-can-you-modify-the-value-in-a-raw-pointer-without-converting-it-to-a-referen", "title": "How can you modify the value in a raw pointer without converting it to a reference?", "body": "<p>In <a href=\"https://stackoverflow.com/questions/49143327/storing-value-of-a-pointer-in-another-pointer-in-rust/49143569?noredirect=1#comment85312759_49143569\">Storing value of a pointer in another pointer in Rust</a>, it has been suggested that you can modify the value in a raw pointer in Rust without converting it to a reference (emphasis added):</p>\n\n<blockquote>\n  <p>You don't need transmute for this at all; saying that \"Box is equivalent to a *T\" is only barely accurate; <strong>you do not have to convert to a reference to modify data</strong>; the calls to drop are unneeded; the mention of a Mutex seems to come out left field (there are no threads here); and there's disagreement about when mutable aliasing occurs. Although there are some correct points in this answer, I cannot recommend that people use it unless they already know what they are doing (which isn't really the point of Stack Overflow). \u2013 Shepmaster 10 hours ago </p>\n</blockquote>\n\n<p>How can this be done?</p>\n\n<p>Does it violate the mutable aliasing rules, and if not, why not?</p>\n"}]