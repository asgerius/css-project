[{"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432766839, "post_id": 30494316, "comment_id": 49066403, "body": "Your code compiles as-is <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">in the Playpen</a>, and you haven&#39;t provided any example code that shows what you want to do, what you have <i>already tried</i>, or any errors that prevent you from achieving your goal. We aren&#39;t mind readers. ^_^ At the very least, you should give us some pseudocode or function signatures to go on."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432773213, "post_id": 30494316, "comment_id": 49068163, "body": "You wish to return a trait object (like <code>Box&lt;Card&gt;</code>), but <i>none of your trait methods</i> require mutability (they all take <code>&amp;self</code>). How are you planning on mutating the objects?"}, {"owner": {"reputation": 53, "user_id": 3537473, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/264af44b55d514ddde5f2117d3f97d29?s=128&d=identicon&r=PG&f=1", "display_name": "kemanuel", "link": "https://stackoverflow.com/users/3537473/kemanuel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432773645, "post_id": 30494316, "comment_id": 49068256, "body": "I really don&#39;t need mutability at this point, it&#39;s more for the future, in case I need to implement more complicated cards. I might be misunderstanding &amp;self though, I was thinking it was comparable to python&#39;s self."}], "answers": [{"comments": [{"owner": {"reputation": 53, "user_id": 3537473, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/264af44b55d514ddde5f2117d3f97d29?s=128&d=identicon&r=PG&f=1", "display_name": "kemanuel", "link": "https://stackoverflow.com/users/3537473/kemanuel"}, "edited": false, "score": 0, "creation_date": 1432772715, "post_id": 30494625, "comment_id": 49068063, "body": "Thanks. I&#39;m looking at your suggestions now. I added more to my original question to clarify also. I need copies or clones or the cards, not references."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1432774025, "last_edit_date": 1432774025, "creation_date": 1432768080, "answer_id": 30494625, "question_id": 30494316, "link": "https://stackoverflow.com/questions/30494316/best-way-to-implement-a-collection-of-items-for-copying/30494625#30494625", "title": "Best way to implement a collection of items for copying?", "body": "<p>If you aren't worried about allocating too much memory, you have everything you need right now:</p>\n\n<pre><code>fn main() {\n    let hand: Vec&lt;_&gt; = (0..5).map(|_| get_random_card()).collect();\n    for card in &amp;hand {\n        println!(\"{}\", card.get_name());\n    }\n}\n</code></pre>\n\n<p>We simply grab 5 cards and store them in a <code>Vec</code>. We can then iterate over the vector and print out the card names.</p>\n\n<p>If you are worried about memory and you are going to have a bunch of cards you want to \"reuse\", you could do as above and then take references to them:</p>\n\n<pre><code>fn main() {\n    let deck: Vec&lt;_&gt; = (0..52).map(|_| get_random_card()).collect();\n\n    let hand1 = &amp;deck[0..5];\n    let hand2 = &amp;deck[5..10];\n    let hand3 = &amp;deck[10..15];\n    let hand4 = &amp;deck[15..20];\n\n    for card in hand1 {\n        println!(\"{}\", card.get_name());\n    }\n}\n</code></pre>\n\n<p>Here, the compiler will prevent you from attempting to use a card after the deck goes out of scope. If you need more flexibility, you could use <code>Rc</code> in addition to <code>Box</code>:</p>\n\n<pre><code>use std::rc::Rc;\n\npub fn get_random_card() -&gt; Rc&lt;Box&lt;Card&gt;&gt; {\n    Rc::new(Box::new(Creature {\n        name: \"My Card\".to_string(), \n        card_type: CardType::Creature, \n        cost: 1, \n        attack: 2, \n        defense: 2,\n        tapped: false,\n    }))\n}\n\nfn main() {\n    let deck: Vec&lt;_&gt; = (0..52).map(|_| get_random_card()).collect();\n\n    let hand1 = deck[0..5].to_owned();\n    let hand2 = deck[5..10].to_owned();\n    let hand3 = deck[10..15].to_owned();\n    let hand4 = deck[15..20].to_owned();\n\n    for card in &amp;hand1 {\n        println!(\"{}\", card.get_name());\n    }\n}\n</code></pre>\n\n<p>This lets each card manage a reference-count of active references. When the references go to 0, the card is freed.</p>\n\n<p><strong>Note</strong> In the Rust nightlies, you can use just <code>Rc&lt;T&gt;</code> instead of <code>Rc&lt;Box&lt;T&gt;&gt;</code>.</p>\n\n<blockquote>\n  <p>Feel free to point out anything else I am doing wrong.</p>\n</blockquote>\n\n<p>Three things stood out to me:</p>\n\n<ol>\n<li>You should probably use <code>#[derive(Debug)]</code> on every struct. Other things to potentially derive are <code>Copy</code> and/or <code>Clone</code>, <code>PartialEq</code> and <code>Hash</code>. Of course, you can wait until you need one of those before adding it, but <code>Debug</code> is super useful right away.</li>\n<li>Return <code>&amp;str</code> instead of <code>&amp;String</code>. 99.9% of the time, you want to use <code>&amp;str</code> instead of <code>&amp;String</code> \u2014 it's more flexible.</li>\n<li>There's no reason to return references to small types like <code>CardType</code> or <code>i32</code> - just return them directly.</li>\n</ol>\n"}], "owner": {"reputation": 53, "user_id": 3537473, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/264af44b55d514ddde5f2117d3f97d29?s=128&d=identicon&r=PG&f=1", "display_name": "kemanuel", "link": "https://stackoverflow.com/users/3537473/kemanuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1432774025, "creation_date": 1432766345, "last_edit_date": 1432772609, "question_id": 30494316, "link": "https://stackoverflow.com/questions/30494316/best-way-to-implement-a-collection-of-items-for-copying", "title": "Best way to implement a collection of items for copying?", "body": "<p>I am writing my first program in Rust that takes a list of Cards and attempts to find the best deck from those cards.\nI want to have a catalog of Cards that can be copied to decks. I'm trying to find an idiomatic way of doing this. My first thought was a vector or array containing one of every card and a function to return a copy of that card to a deck.</p>\n\n<p>Here is my code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Card {\n    fn get_name(&amp;self) -&gt; &amp;String;\n    fn get_card_type(&amp;self) -&gt; &amp;CardType;\n    fn get_cost(&amp;self) -&gt; Option&lt;&amp;i32&gt;;\n\n    fn play(&amp;self){\n        println!(\"Played {} for {} mana.\", self.get_name(), self.get_cost().unwrap());\n    }\n}\n\npub enum CardType {\n    Creature,\n    Spell,\n    Land,\n}\n\npub struct Creature {\n    pub name: String,\n    pub card_type: CardType,\n    pub cost: i32,\n    pub attack: i32,\n    pub defense: i32,\n    pub tapped: bool,\n}\n\nimpl Card for Creature{\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n\n    fn get_card_type(&amp;self) -&gt; &amp;CardType {\n        &amp;self.card_type\n    }\n\n    fn get_cost(&amp;self) -&gt; Option&lt;&amp;i32&gt; {\n        Some(&amp;self.cost)\n    }\n}\n\npub struct Spell {\n    pub name: String,\n    pub card_type: CardType,\n    pub cost: i32,\n    pub damage: i32,\n}\n\nimpl Card for Spell{\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n\n    fn get_card_type(&amp;self) -&gt; &amp;CardType {\n        &amp;self.card_type\n    }\n\n    fn get_cost(&amp;self) -&gt; Option&lt;&amp;i32&gt; {\n        Some(&amp;self.cost)\n    }\n}\n\npub struct Land {\n    pub name: String,\n    pub card_type: CardType,\n    pub tapped: bool,\n}\n\nimpl Card for Land{\n    fn play(&amp;self) {\n        println!(\"Played {}.\", self.get_name());\n    }\n\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n\n    fn get_card_type(&amp;self) -&gt; &amp;CardType {\n        &amp;self.card_type\n    }\n\n    fn get_cost(&amp;self) -&gt; Option&lt;&amp;i32&gt; {\n        None\n    }\n}\n\npub fn get_random_card() -&gt; Box&lt;Card&gt; {\n    Box::new( Creature{\n        name: \"My Card\".to_string(), \n        card_type: CardType::Creature, \n        cost: 1, \n        attack: 2, \n        defense: 2,\n        tapped: false,\n    })\n}\n</code></pre>\n\n<p>The get_random_card() function contains a sample card. So essentially I just need a static array or vector of cards and a function to copy them in to a deck, but I haven't been able to implement it. \nAny suggestions? Feel free to point out anything else I am doing wrong.</p>\n\n<p>Edit: Some clarification -</p>\n\n<p>The code here works, but I want a variable containing a list of available cards. For example</p>\n\n<pre><code>// some pseudocode, in file cards.rs\nlet cards = [\n    Creature {\n        name = \"Creature 1\"\n        //...\n    },\n    Land {\n        name = \"Land 1\"\n        //...\n    },\n    Spell {\n        name = \"Spell 1\"\n        //...\n    },\n];\n\nfn get_card(name) -&gt; mut Card {\n    // return a mutable copy/clone of a card, not a reference\n}\n</code></pre>\n\n<p>And I would prefer to have it declared outside of the main function, in a separate file. I've tried several different things trying to make the compiler happy, but I'm pretty sure I'm missing something obvious. Memory isn't a big concern at the moment, there won't be that many cards in the \"cards\" var. But decks will be generated dynamically, so I need somewhere to get the cards in the deck from.</p>\n\n<p>Thanks.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432756110, "post_id": 30488928, "comment_id": 49061540, "body": "Can you explain why this is not a duplicate of <a href=\"http://stackoverflow.com/q/27535289/155423\">Correct way to return an Iterator</a>?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432756675, "post_id": 30488928, "comment_id": 49061891, "body": "I think Nashenas has got returning an iterator down actually, but there&#39;s another problem -- borrowing a local."}, {"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432825330, "post_id": 30488928, "comment_id": 49096020, "body": "@bluss is correct. I named the question based on what I was trying to accomplish, but it looks like it should be renamed based on what I&#39;ve learned. What would you all recommend?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432884358, "post_id": 30488928, "comment_id": 49120830, "body": "Nice summary. I&#39;d say the assessment is not entirely correct. You can&#39;t remedy this borrowing error by moving the borrowed from value too, rust isn&#39;t that \u201csmart\u201d. <code>decode</code> just borrows the <code>Reader</code>."}, {"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 0, "creation_date": 1433518746, "post_id": 30488928, "comment_id": 49403218, "body": "I&#39;ve updated the title, and fixed the assessment. I found another post that ran into the same issue, but in a much simpler case (added link in the assessment). It really helped clear up exactly what the error is."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433558823, "post_id": 30488928, "comment_id": 49418125, "body": "Also, don&#39;t worry <i>too much</i> about retitling your question after you get the answer - think about how future searchers might find this question. For example, if you have to know the name of the solution to find the question, it won&#39;t be too helpful. ^_^"}, {"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433612954, "post_id": 30488928, "comment_id": 49431382, "body": "Sorry about that @Shepmaster. I&#39;ve moved the answer out."}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 10, "last_activity_date": 1432830975, "last_edit_date": 1432830975, "creation_date": 1432756180, "answer_id": 30491885, "question_id": 30488928, "link": "https://stackoverflow.com/questions/30488928/how-do-i-return-an-iterator-thats-generated-by-a-function-that-takes-a-mut-se/30491885#30491885", "title": "How do I return an Iterator that&#39;s generated by a function that takes &amp;&#39;a mut self (when self is created locally)?", "body": "<p>Returning iterators is possible, but it comes with some restrictions.</p>\n\n<p>To demonstrate it's possible, two examples, (A) with explicit iterator type and (B) using boxing <a href=\"https://play.rust-lang.org/?gist=da3064ae22d0d24e2526&amp;version=stable\" rel=\"noreferrer\">(playpen link).</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::FilterMap;\n\nfn is_even(elt: i32) -&gt; Option&lt;i32&gt; {\n    if elt % 2 == 0 {\n        Some(elt)\n    } else { None }\n}\n\n/// (A)\npub fn evens&lt;I: IntoIterator&lt;Item=i32&gt;&gt;(iter: I)\n    -&gt; FilterMap&lt;I::IntoIter, fn(I::Item) -&gt; Option&lt;I::Item&gt;&gt;\n{\n    iter.into_iter().filter_map(is_even)\n}\n\n/// (B)\npub fn cumulative_sums&lt;'a, I&gt;(iter: I) -&gt; Box&lt;Iterator&lt;Item=i32&gt; + 'a&gt;\n    where I: IntoIterator&lt;Item=i32&gt;,\n          I::IntoIter: 'a,\n{\n    Box::new(iter.into_iter().scan(0, |acc, x| {\n        *acc += x;\n        Some(*acc)\n    }))\n}\n\nfn main() {\n    // The output is:\n    //  0 is even, 10 is even, \n    //  1, 3, 6, 10, \n    for even in evens(vec![0, 3, 7, 10]) {\n        print!(\"{} is even, \", even);\n    }\n    println!(\"\");\n\n    for cs in cumulative_sums(1..5) {\n        print!(\"{}, \", cs);\n    }\n    println!(\"\");\n}\n</code></pre>\n\n<p>You experienced a problem with (A) -- explicit type! Unboxed closures, that we get from regular lambda expressions with <code>|a, b, c| ..</code> syntax, have unique anonymous types. Functions require explicit return types, so that doesn't work here.</p>\n\n<p>Some solutions for returning closures:</p>\n\n<ul>\n<li>Use a function pointer <code>fn()</code> as in example (A). Often you don't need a closure environment anyway.</li>\n<li>Box the closure. This is reasonable, even if the iterators don't support calling it at the moment. Not your fault.</li>\n<li>Box the iterator</li>\n<li>Return a custom iterator struct. Requires some boilerplate.</li>\n</ul>\n\n<p>You can see that in example (B) we have to be quite careful with lifetimes. It says that the return value is <code>Box&lt;Iterator&lt;Item=i32&gt; + 'a&gt;</code>, what is this <code>'a</code>? This is the least lifetime required of anything inside the box! We also put the <code>'a</code> bound on <code>I::IntoIter</code> -- this ensures we can put that inside the box.</p>\n\n<p>If you just say <code>Box&lt;Iterator&lt;Item=i32&gt;&gt;</code> it will assume <code>'static</code>.</p>\n\n<p>We have to explicitly declare the lifetimes of the contents of our box. Just to be safe.</p>\n\n<p>This is actually the fundamental problem with your function. You have this: <code>DecodedRecords&lt;'a, Box&lt;Read&gt;, Row&gt;, F&gt;</code></p>\n\n<p>See that, an <code>'a</code>! This type borrows something. The problem is it doesn't borrow it from the inputs. There are no <code>'a</code> on the inputs.</p>\n\n<p>You'll realize that it borrows from a value you create during the function, and that value's lifespan ends when the function returns. <a href=\"http://doc.rust-lang.org/nightly/book/references-and-borrowing.html#the-rules\" rel=\"noreferrer\">We cannot return <code>DecodedRecords&lt;'a&gt;</code> from the function, because it wants to borrow a local variable.</a></p>\n\n<p>Where to go from here? My easiest answer would be to perform the same split that csv does. One part (Struct or value) that owns the reader, and one part (struct or value) that is the iterator and borrows from the reader.</p>\n\n<p>Maybe the csv crate has an owning decoder that takes ownership of the reader it is processing. In that case you can use that to dispel the borrowing trouble.</p>\n"}, {"tags": [], "owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "is_accepted": true, "score": 2, "last_activity_date": 1433612840, "last_edit_date": 1495542650, "creation_date": 1433612840, "answer_id": 30685840, "question_id": 30488928, "link": "https://stackoverflow.com/questions/30488928/how-do-i-return-an-iterator-thats-generated-by-a-function-that-takes-a-mut-se/30685840#30685840", "title": "How do I return an Iterator that&#39;s generated by a function that takes &amp;&#39;a mut self (when self is created locally)?", "body": "<p>This answer is based on <a href=\"https://stackoverflow.com/users/3616050/bluss\">@bluss</a>'s <a href=\"https://stackoverflow.com/a/30491885/1483396\">answer</a> + help from #rust on irc.mozilla.org</p>\n\n<p>One issue that's <em>not</em> obvious from the code, and which was causing the final error displayed just above, has to do with the definition of <code>csv::Reader::decode</code> (see its <a href=\"http://burntsushi.net/rustdoc/src/csv/reader.rs.html#279-284\" rel=\"nofollow noreferrer\">source</a>). It takes <code>&amp;'a mut self</code>, the explanation of this problem is covered in this <a href=\"https://stackoverflow.com/a/30435544/1483396\">answer</a>. This essentially causes the lifetime of the reader to be bounded to the block it's called in. The way to fix this is to split the function in half (since I can't control the function definition, as recommended in the previous answer link). I needed a lifetime on the reader that was valid within the <code>main</code> function, so the reader could then be passed down into the <code>search</code> function. See the code below (It could definitely be cleaned up more):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn population_count&lt;'a, I&gt;(iter: I, city: &amp;'a str)\n    -&gt; Box&lt;Iterator&lt;Item=Result&lt;PopulationCount,csv::Error&gt;&gt; + 'a&gt;\n    where I: IntoIterator&lt;Item=Result&lt;Row,csv::Error&gt;&gt;,\n          I::IntoIter: 'a,\n{\n    Box::new(iter.into_iter().filter_map(move |row| {\n        let row = match row {\n            Ok(row) =&gt; row,\n            Err(err) =&gt; return Some(Err(err)),\n        };\n\n        match row.population {\n            None =&gt; None,\n            Some(count) if row.city == city =&gt; {\n                Some(Ok(PopulationCount {\n                    city: row.city,\n                    country: row.country,\n                    count: count,\n                }))\n            },\n            _ =&gt; None,\n        }\n    }))\n}\n\nfn get_reader&lt;P: AsRef&lt;Path&gt;&gt;(file_path: &amp;Option&lt;P&gt;)\n    -&gt; Result&lt;csv::Reader&lt;Box&lt;io::Read&gt;&gt;, CliError&gt;\n{\n    let input: Box&lt;io::Read&gt; = match *file_path {\n        None =&gt; Box::new(io::stdin()),\n        Some(ref file_path) =&gt; Box::new(try!(fs::File::open(file_path))),\n    };\n\n    Ok(csv::Reader::from_reader(input))\n}\n\nfn search&lt;'a&gt;(reader: &amp;'a mut csv::Reader&lt;Box&lt;io::Read&gt;&gt;, city: &amp;'a str)\n    -&gt; Box&lt;Iterator&lt;Item=Result&lt;PopulationCount, csv::Error&gt;&gt; + 'a&gt;\n{\n    population_count(reader.decode::&lt;Row&gt;(), city)\n}\n\nfn main() {\n    let args: Args = Docopt::new(USAGE)\n        .and_then(|d| d.decode())\n        .unwrap_or_else(|err| err.exit());\n\n    let reader = get_reader(&amp;args.arg_data_path);\n    let mut reader = match reader {\n        Err(err) =&gt; fatal!(\"{}\", err),\n        Ok(reader) =&gt; reader,\n    };\n\n    let populations = search(&amp;mut reader, &amp;args.arg_city);\n    let mut found = false;\n    for pop in populations {\n        found = true;\n        match pop {\n            Err(err) =&gt; fatal!(\"fatal !! {}\", err),\n            Ok(pop) =&gt; println!(\"{}, {}: {}\", pop.city, pop.country, pop.count),\n        }\n    }\n\n    if !(found || args.flag_quiet) {\n        fatal!(\"{}\", CliError::NotFound);\n    }\n}\n</code></pre>\n\n<p>I've learned a lot trying to get this to work, and have much more appreciation for the compiler errors. It's now clear that had this been C, the last error above could actually have caused segfaults, which would have been much harder to debug. I've also realized that converting from a pre-computed vec to an iterator requires more involved thinking about when the memory comes in and out of scope; I can't just change a few function calls and return types and call it a day.</p>\n"}], "owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1421, "favorite_count": 1, "accepted_answer_id": 30685840, "answer_count": 2, "score": 6, "last_activity_date": 1433612900, "creation_date": 1432746353, "last_edit_date": 1433612900, "question_id": 30488928, "link": "https://stackoverflow.com/questions/30488928/how-do-i-return-an-iterator-thats-generated-by-a-function-that-takes-a-mut-se", "title": "How do I return an Iterator that&#39;s generated by a function that takes &amp;&#39;a mut self (when self is created locally)?", "body": "<p><strong>Update: The title of the post has been updated, and the answer has been moved out of the question. The short answer is you can't. Please see my answer to this question.</strong></p>\n\n<p>I'm following an Error Handling blog post <a href=\"http://blog.burntsushi.net/rust-error-handling/\" rel=\"nofollow\">here</a> (github for it is <a href=\"https://github.com/BurntSushi/rust-error-handling-case-study\" rel=\"nofollow\">here</a>), and I tried to make some modifications to the code so that the <code>search</code> function returns an <code>Iterator</code> instead of a <code>Vec</code>. This has been insanely difficult, and I'm stuck.</p>\n\n<p>I've gotten up to this point:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn search&lt;'a, P: AsRef&lt;Path&gt;&gt;(file_path: &amp;Option&lt;P&gt;, city: &amp;str)\n    -&gt; Result&lt;FilterMap&lt;csv::reader::DecodedRecords&lt;'a, Box&lt;Read&gt;, Row&gt;,\n                        FnMut(Result&lt;Row, csv::Error&gt;)\n                            -&gt; Option&lt;Result&lt;PopulationCount, csv::Error&gt;&gt;&gt;,\n              CliError&gt;  {\n    let mut found = vec![];\n    let input: Box&lt;io::Read&gt; = match *file_path {\n        None =&gt; Box::new(io::stdin()),\n        Some(ref file_path) =&gt; Box::new(try!(fs::File::open(file_path))),\n    };\n\n    let mut rdr = csv::Reader::from_reader(input);\n    let closure = |row: Result&lt;Row, csv::Error&gt;| -&gt; Option&lt;Result&lt;PopulationCount, csv::Error&gt;&gt; {\n        let row = match row {\n            Ok(row) =&gt; row,\n            Err(err) =&gt; return Some(Err(From::from(err))),\n        };\n        match row.population {\n            None =&gt; None,\n            Some(count) =&gt; if row.city == city {\n                Some(Ok(PopulationCount {\n                    city: row.city,\n                    country: row.country,\n                    count: count,\n                }))\n            } else {\n                None\n            }\n        }\n    };\n    let found = rdr.decode::&lt;Row&gt;().filter_map(closure);\n\n    if !found.all(|row| match row {\n        Ok(_) =&gt; true,\n        _ =&gt; false,\n    }) {\n        Err(CliError::NotFound)\n    } else {\n        Ok(found)\n    }\n}\n</code></pre>\n\n<p>with the following error from the compiler:</p>\n\n<pre><code>src/main.rs:97:1: 133:2 error: the trait `core::marker::Sized` is not implemented for the type `core::ops::FnMut(core::result::Result&lt;Row, csv::Error&gt;) -&gt; core::option::Option&lt;core::result::Result&lt;PopulationCount, csv::Error&gt;&gt;` [E0277]\nsrc/main.rs:97 fn search&lt;'a, P: AsRef&lt;Path&gt;&gt;(file_path: &amp;Option&lt;P&gt;, city: &amp;str) -&gt; Result&lt;FilterMap&lt;csv::reader::DecodedRecords&lt;'a, Box&lt;Read&gt;, Row&gt;, FnMut(Result&lt;Row, csv::Error&gt;) -&gt; Option&lt;Result&lt;PopulationCount, csv::Error&gt;&gt;&gt;, CliError&gt;  {\nsrc/main.rs:98     let mut found = vec![];\nsrc/main.rs:99     let input: Box&lt;io::Read&gt; = match *file_path {\nsrc/main.rs:100         None =&gt; Box::new(io::stdin()),\nsrc/main.rs:101         Some(ref file_path) =&gt; Box::new(try!(fs::File::open(file_path))),\nsrc/main.rs:102     };\n                ...\nsrc/main.rs:97:1: 133:2 note: `core::ops::FnMut(core::result::Result&lt;Row, csv::Error&gt;) -&gt; core::option::Option&lt;core::result::Result&lt;PopulationCount, csv::Error&gt;&gt;` does not have a constant size known at compile-time\nsrc/main.rs:97 fn search&lt;'a, P: AsRef&lt;Path&gt;&gt;(file_path: &amp;Option&lt;P&gt;, city: &amp;str) -&gt; Result&lt;FilterMap&lt;csv::reader::DecodedRecords&lt;'a, Box&lt;Read&gt;, Row&gt;, FnMut(Result&lt;Row, csv::Error&gt;) -&gt; Option&lt;Result&lt;PopulationCount, csv::Error&gt;&gt;&gt;, CliError&gt;  {\nsrc/main.rs:98     let mut found = vec![];\nsrc/main.rs:99     let input: Box&lt;io::Read&gt; = match *file_path {\nsrc/main.rs:100         None =&gt; Box::new(io::stdin()),\nsrc/main.rs:101         Some(ref file_path) =&gt; Box::new(try!(fs::File::open(file_path))),\nsrc/main.rs:102     };\n                ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>I've also tried this function definition:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn search&lt;'a, P: AsRef&lt;Path&gt;, F&gt;(file_path: &amp;Option&lt;P&gt;, city: &amp;str)\n    -&gt; Result&lt;FilterMap&lt;csv::reader::DecodedRecords&lt;'a, Box&lt;Read&gt;, Row&gt;, F&gt;,\n              CliError&gt;\n    where F:  FnMut(Result&lt;Row, csv::Error&gt;)\n                  -&gt; Option&lt;Result&lt;PopulationCount, csv::Error&gt;&gt; {\n</code></pre>\n\n<p>with these errors from the compiler:</p>\n\n<pre><code>src/main.rs:131:12: 131:17 error: mismatched types:\n expected `core::iter::FilterMap&lt;csv::reader::DecodedRecords&lt;'_, Box&lt;std::io::Read&gt;, Row&gt;, F&gt;`,\n found    `core::iter::FilterMap&lt;csv::reader::DecodedRecords&lt;'_, Box&lt;std::io::Read&gt;, Row&gt;, [closure src/main.rs:105:19: 122:6]&gt;`\n(expected type parameter,\nfound closure) [E0308]\nsrc/main.rs:131         Ok(found)\n</code></pre>\n\n<p>I can't <code>Box</code> the closure because then it won't be accepted by <code>filter_map</code>.</p>\n\n<p>I then tried this out:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn search&lt;'a, P: AsRef&lt;Path&gt;&gt;(file_path: &amp;Option&lt;P&gt;, city: &amp;'a str)\n    -&gt; Result&lt;(Box&lt;Iterator&lt;Item=Result&lt;PopulationCount, csv::Error&gt;&gt; + 'a&gt;, csv::Reader&lt;Box&lt;io::Read&gt;&gt;), CliError&gt; {\n    let input: Box&lt;io::Read&gt; = match *file_path {\n        None =&gt; box io::stdin(),\n        Some(ref file_path) =&gt; box try!(fs::File::open(file_path)),\n    };\n\n    let mut rdr = csv::Reader::from_reader(input);\n    let mut found = rdr.decode::&lt;Row&gt;().filter_map(move |row| {\n        let row = match row {\n            Ok(row) =&gt; row,\n            Err(err) =&gt; return Some(Err(err)),\n        };\n        match row.population {\n            None =&gt; None,\n            Some(count) if row.city == city =&gt; {\n                Some(Ok(PopulationCount {\n                    city: row.city,\n                    country: row.country,\n                    count: count,\n                }))\n            },\n            _ =&gt; None,\n        }\n    });\n\n    if found.size_hint().0 == 0 {\n        Err(CliError::NotFound)\n    } else {\n        Ok((box found, rdr))\n    }\n}\n\nfn main() {\n    let args: Args = Docopt::new(USAGE)\n                            .and_then(|d| d.decode())\n                            .unwrap_or_else(|err| err.exit());\n\n\n    match search(&amp;args.arg_data_path, &amp;args.arg_city) {\n        Err(CliError::NotFound) if args.flag_quiet =&gt; process::exit(1),\n        Err(err) =&gt; fatal!(\"{}\", err),\n        Ok((pops, rdr)) =&gt; for pop in pops {\n            match pop {\n                Err(err) =&gt; panic!(err),\n                Ok(pop) =&gt; println!(\"{}, {}: {} - {:?}\", pop.city, pop.country, pop.count, rdr.byte_offset()),\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Which gives me this error:</p>\n\n<pre><code>src/main.rs:107:21: 107:24 error: `rdr` does not live long enough\nsrc/main.rs:107     let mut found = rdr.decode::&lt;Row&gt;().filter_map(move |row| {\n                                    ^~~\nsrc/main.rs:100:117: 130:2 note: reference must be valid for the lifetime 'a as defined on the block at 100:116...\nsrc/main.rs:100     -&gt; Result&lt;(Box&lt;Iterator&lt;Item=Result&lt;PopulationCount, csv::Error&gt;&gt; + 'a&gt;, csv::Reader&lt;Box&lt;io::Read&gt;&gt;), CliError&gt; {\nsrc/main.rs:101     let input: Box&lt;io::Read&gt; = match *file_path {\nsrc/main.rs:102         None =&gt; box io::stdin(),\nsrc/main.rs:103         Some(ref file_path) =&gt; box try!(fs::File::open(file_path)),\nsrc/main.rs:104     };\nsrc/main.rs:105     \n                ...\nsrc/main.rs:106:51: 130:2 note: ...but borrowed value is only valid for the block suffix following statement 1 at 106:50\nsrc/main.rs:106     let mut rdr = csv::Reader::from_reader(input);\nsrc/main.rs:107     let mut found = rdr.decode::&lt;Row&gt;().filter_map(move |row| {\nsrc/main.rs:108         let row = match row {\nsrc/main.rs:109             Ok(row) =&gt; row,\nsrc/main.rs:110             Err(err) =&gt; return Some(Err(err)),\nsrc/main.rs:111         };\n                ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>Have I designed something wrong, or am I taking the wrong approach? Am I missing something really simple and stupid? I'm not sure where to go from here.</p>\n"}, {"tags": ["pattern-matching", "rust"], "answers": [{"comments": [{"owner": {"reputation": 689, "user_id": 3403431, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f58796ad71127d05d2087d690409ddb?s=128&d=identicon&r=PG&f=1", "display_name": "chapman", "link": "https://stackoverflow.com/users/3403431/chapman"}, "edited": false, "score": 0, "creation_date": 1432746101, "post_id": 30488773, "comment_id": 49055835, "body": "Great, thanks! And also that trait stuff looks great, I&#39;ll give it a shot! :)"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 689, "user_id": 3403431, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f58796ad71127d05d2087d690409ddb?s=128&d=identicon&r=PG&f=1", "display_name": "chapman", "link": "https://stackoverflow.com/users/3403431/chapman"}, "edited": false, "score": 0, "creation_date": 1432746341, "post_id": 30488773, "comment_id": 49055987, "body": "You&#39;re welcome! Also, you can upvote the answer if it looks good to you! :)"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1432759522, "post_id": 30488773, "comment_id": 49063375, "body": "To note: In your second example, storing directly a trait in <code>Entity</code> makes it unsized, which can have a lot of undesirable effects."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432812071, "post_id": 30488773, "comment_id": 49085590, "body": "That&#39;s right, in this case two alternatives are 1) <code>Entity&lt;E: EntityKind&gt;</code> (not very versatile, but works) and 2) <code>pub kind: Box&lt;EntityKind&gt;</code>, but this adds an indirection overhead (and heap alloc upon construction)"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 3, "last_activity_date": 1432746116, "last_edit_date": 1432746116, "creation_date": 1432745870, "answer_id": 30488773, "question_id": 30488653, "link": "https://stackoverflow.com/questions/30488653/matching-complex-inheritance-y-thing/30488773#30488773", "title": "Matching complex inheritance-y thing", "body": "<p>A solution while keeping your design with newtypes (<a href=\"https://aturon.github.io/features/types/newtype.html\" rel=\"nofollow\">learn more about newtypes</a>):</p>\n\n<pre><code>struct Entity {\n    pub kind: EntityKind,\n}\n\npub enum EntityKind {\n    Player(PlayerData),\n    Weapon(WeaponData),\n}\n\npub struct PlayerData {\n    pub name: String,\n}\n\npub struct WeaponData {\n    pub damage_per_shot: i32,\n}\n\nfn f(e: EntityKind) {\n    match e {\n        EntityKind::Player(player_data) =&gt; { /* do sth with player data */ },\n        EntityKind::Weapon(weapon_data) =&gt; { /* do sth with weapon data */ },\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/ud2i0e\" rel=\"nofollow\">(Playground)</a></p>\n\n<hr>\n\n<p>However, I would rather leverage the trait system for that:</p>\n\n<pre><code>struct Entity {\n    pub kind: EntityKind,\n}\n\npub trait EntityKind { \n    fn do_something(&amp;self); // or &amp;mut self, if needed\n}\n\npub struct PlayerData {\n    pub name: String,\n}\nimpl EntityKind for PlayerData {\n    fn do_something(&amp;self) {\n        // do sth with player data\n    }\n}\n\npub struct WeaponData {\n    pub damage_per_shot: i32,\n}\nimpl EntityKind for WeaponData {\n    fn do_something(&amp;self) {\n        // do sth with weapon data\n    }\n}\n\n// Dynamic dispatch version\nfn f(e: &amp;EntityKind) {\n    e.do_something();\n}\n\n// Static dispatch version (a la C++ template)\nfn g&lt;E: EntityKind&gt;(e: E) {\n    e.do_something();\n}\n</code></pre>\n"}], "owner": {"reputation": 689, "user_id": 3403431, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f58796ad71127d05d2087d690409ddb?s=128&d=identicon&r=PG&f=1", "display_name": "chapman", "link": "https://stackoverflow.com/users/3403431/chapman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 0, "accepted_answer_id": 30488773, "answer_count": 1, "score": 1, "last_activity_date": 1432754766, "creation_date": 1432745459, "last_edit_date": 1432754766, "question_id": 30488653, "link": "https://stackoverflow.com/questions/30488653/matching-complex-inheritance-y-thing", "title": "Matching complex inheritance-y thing", "body": "<p>I have a kind of complex inheritance-y thing I'm trying to match in Rust:</p>\n\n<pre><code>struct Entity {\n    pub kind: EntityKind,\n}\n\npub enum EntityKind {\n    Player(PlayerData),\n}\n\npub struct PlayerData {\n    pub name: String,\n}\n</code></pre>\n\n<p>How do I match it with the pattern matching stuff, for instance:</p>\n\n<pre><code>// pretend theres a vector of entities called E\nmatch E[i] {\n    // match PlayerKind,\n    // match another kind here\n}\n</code></pre>\n\n<p>How would I do that so I can get the PlayerData when E[i] is a Player enum item?</p>\n"}, {"tags": ["random", "rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1432779759, "post_id": 30488108, "comment_id": 49069572, "body": "Perhaps the reason that no range distribution is provided for <code>char</code> is that code points U+D800 to u+DFFF (which correspond to the surrogates) are not valid."}, {"owner": {"reputation": 293, "user_id": 478658, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/357dd2bc31ed5785c639b641415c3db5?s=128&d=identicon&r=PG", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/478658/sebastian"}, "edited": false, "score": 0, "creation_date": 1461147051, "post_id": 30488108, "comment_id": 61063031, "body": "According to <a href=\"https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.gen_range\" rel=\"nofollow noreferrer\">the docs</a>, <code>gen_range</code> generates in the range [low, high), so not including high. How would I change the code to make Z999999 an option?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 293, "user_id": 478658, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/357dd2bc31ed5785c639b641415c3db5?s=128&d=identicon&r=PG", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/478658/sebastian"}, "edited": false, "score": 0, "creation_date": 1461151857, "post_id": 30488108, "comment_id": 61066289, "body": "@Sebastian, <code>rng.gen_range(0, 1000000)</code>?"}, {"owner": {"reputation": 293, "user_id": 478658, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/357dd2bc31ed5785c639b641415c3db5?s=128&d=identicon&r=PG", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/478658/sebastian"}, "edited": false, "score": 0, "creation_date": 1461152217, "post_id": 30488108, "comment_id": 61066517, "body": "That would work. And <code>rng.gen_range(b&#39;A&#39;, b&#39;Z&#39;+1) as char</code> for the letter. I think a function with an inclusive range [low, high] would be nice to have..."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1432744222, "last_edit_date": 1432744222, "creation_date": 1432743878, "answer_id": 30488108, "question_id": 30487833, "link": "https://stackoverflow.com/questions/30487833/generate-random-letter-and-fixed-number-combination/30488108#30488108", "title": "generate random letter and fixed number combination", "body": "<p>First, a working program:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate rand;\n\nuse rand::Rng;\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    let letter: char = rng.gen_range(b'A', b'Z') as char;\n    let number: u32 = rng.gen_range(0, 999999);\n    let s = format!(\"{}{:06}\", letter, number);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Next, an explanation.</p>\n\n<p><code>rand::random::&lt;char&gt;()</code> returns a random value from the whole <code>char</code> range, that is, it may return arbitrary Unicode code point. That's why you see weird glyphs - these are likely values from upper Unicode planes.</p>\n\n<p>You need to define boundaries of what you need to generate. First, you need a letter, then you need six digits. A letter is any character between 'A' and 'Z', and six digits can be represented by a number from 0 to 999999 which is padded with zeros when printing.</p>\n\n<p>So, first, we generate a <code>u8</code> which corresponds to a letter in ASCII and convert it to <code>char</code> (unfortunately, <code>rand</code> crate does not provide range distribution for <code>char</code>s, so we have to use such indirection).</p>\n\n<p>Second, we generate a <code>u32</code> between 0 and 999999.</p>\n\n<p>Then we print them in the desired format. Here are a few values which this program generates: V285490, Y865809, A704620.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1459, "favorite_count": 1, "accepted_answer_id": 30488108, "answer_count": 1, "score": 4, "last_activity_date": 1432744222, "creation_date": 1432743100, "question_id": 30487833, "link": "https://stackoverflow.com/questions/30487833/generate-random-letter-and-fixed-number-combination", "title": "generate random letter and fixed number combination", "body": "<p>I need to generate a random sequence of a single letter and 6 digit combination, example: <code>F841257</code></p>\n\n<p>I was looking into <code>rand</code> crate, but something doesn't quite work.</p>\n\n<pre><code>extern crate rand;\n\nfn main() {\n    println!(\"{:?}\", rand::random::&lt;char&gt;());\n}\n</code></pre>\n\n<p>prints something like <code>'\\u{6ae02}'</code> and <code>println!(\"{}\", rand::random::&lt;char&gt;());</code> produces some weird glyph.</p>\n\n<p>Can someone point me in the right direction of how I could achieve this?</p>\n"}, {"tags": ["reflection", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432739668, "post_id": 30486227, "comment_id": 49051476, "body": "Do you know about <i>traits</i> in Rust? They are used to specify a common interface to multiple implementations."}], "answers": [{"comments": [{"owner": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "edited": false, "score": 0, "creation_date": 1432741537, "post_id": 30486568, "comment_id": 49052875, "body": "Thank you: So traits are a little bit like Haskell typeclasses? Anyway, that gets round the type checking problem, but now when I try to use this, I get <code>the trait `crypto::digest::Digest` is not implemented for the type `Box&lt;crypto::digest::Digest&gt;`</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "edited": false, "score": 0, "creation_date": 1432743527, "post_id": 30486568, "comment_id": 49054221, "body": "huh... that is odd... as a hack you can try to get a reference to the inner object by using <code>&amp;*digest</code>. But without knowing more details on what you tried I can&#39;t help."}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "reply_to_user": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "edited": false, "score": 0, "creation_date": 1432976107, "post_id": 30486568, "comment_id": 49161161, "body": "@Xophmeister What is the definition of <code>Digest</code>? The code ker gave will only work if the trait is <a href=\"https://huonw.github.io/blog/2015/01/object-safety/\" rel=\"nofollow noreferrer\">object safe</a>."}, {"owner": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "reply_to_user": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1433008384, "post_id": 30486568, "comment_id": 49171066, "body": "@LambdaFairy I&#39;m a complete Rust newbie, so the best I can do is <a href=\"https://github.com/DaGenix/rust-crypto/blob/master/src/digest.rs\" rel=\"nofollow noreferrer\">link to the code</a>"}, {"owner": {"reputation": 28979, "user_id": 266720, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9333e1816aefc7fc97f64b09afe05c?s=128&d=identicon&r=PG", "display_name": "Vi.", "link": "https://stackoverflow.com/users/266720/vi"}, "reply_to_user": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "edited": false, "score": 0, "creation_date": 1450781278, "post_id": 30486568, "comment_id": 56569029, "body": "@Xophmeister, Yes, traits are like Haskell&#39;s typeclasses and trait objects (like <code>Box&lt;Digest&gt;</code>) are like ExistentialTypes."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450785895, "post_id": 30486568, "comment_id": 56571918, "body": "actually <code>Box&lt;Trait&gt;</code> doesn&#39;t implement <code>Trait</code>, but it implements <code>Deref&lt;Target=Trait&gt;</code> which means that you can simply use <code>&amp;*digest</code> to get <code>T:Digest</code> for a generic function. I&#39;m assuming that&#39;s where the error came from"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1432740781, "last_edit_date": 1432740781, "creation_date": 1432739780, "answer_id": 30486568, "question_id": 30486227, "link": "https://stackoverflow.com/questions/30486227/idiomatic-alternative-to-reflection/30486568#30486568", "title": "Idiomatic alternative to reflection", "body": "<p>Since all the algorithms implement the same trait <code>Digest</code>, which offers everything you need, you can box all the algorithms and convert them to a common <code>Box&lt;Digest&gt;</code>:</p>\n\n<pre><code>let mut digest: Box&lt;Digest&gt; = match my_algorithm {\n    \"sha256\" =&gt; Box::new(Sha256::new()),\n    ...\n};\n</code></pre>\n\n<p>Now you don't know anymore what the type was, but you still know it's a <code>Digest</code>.</p>\n\n<p>The python and javascript do the boxing (dynamic heap allocation) for you in the background. Rust is very picky about such things and therefor requires you to explicitly state what you mean.</p>\n\n<p>It would be interesting to have reflection in Rust to be able to enumerate all types in scope that implement a trait, but such a system would require quite some effort in the rust compiler and in the brains of of the rust community members. Don't expect it any time soon.</p>\n"}], "owner": {"reputation": 7683, "user_id": 876937, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6bc562fd4d7d98d1a2688ea44e196968?s=128&d=identicon&r=PG", "display_name": "Xophmeister", "link": "https://stackoverflow.com/users/876937/xophmeister"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 481, "favorite_count": 0, "accepted_answer_id": 30486568, "answer_count": 1, "score": 6, "last_activity_date": 1432754786, "creation_date": 1432738823, "last_edit_date": 1432754786, "question_id": 30486227, "link": "https://stackoverflow.com/questions/30486227/idiomatic-alternative-to-reflection", "title": "Idiomatic alternative to reflection", "body": "<p>I am trying to select a digest algorithm (from rust-crypto) based on a configuration string. In Python or JavaScript, say, I'd probably use reflection to get at this:</p>\n\n<pre><code>getattr(Digest, myAlgorithm)\n</code></pre>\n\n<p>...but from what I've been able to Google, this isn't best practice in a language such as Rust (plus I've found no details on how it could be done). My initial thought was to use a pattern match:</p>\n\n<pre><code>let mut digest = match myAlgorithm {\n  \"sha256\" =&gt; Sha256::new(),\n  ...\n};\n</code></pre>\n\n<p>However, this doesn't work because, while all the branches of the match implement the same trait, they're ultimately different types. Moreover, presuming there were a way around this, it's a lot of hassle to manually enumerate all these options in the code.</p>\n\n<p>What's the right way to do this in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1432740811, "post_id": 30485961, "comment_id": 49052379, "body": "Is it true that all asserts except the last two compile?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1432741147, "post_id": 30485961, "comment_id": 49052610, "body": "It&#39;s hard to dig into this because you provided only part of the implementation (which is understandable, given the complexity). Not sure this will help, but: does <code>get_class()</code> return something of lifetime <code>&#39;a</code> ? Alternatively, maybe you could consider annotating as follows: <code>T1: &#39;aa + JObject&lt;&#39;a&gt;, T2: &#39;bb + JObject&lt;&#39;b&gt;</code>  and specify <code>where &#39;a: &#39;aa, &#39;b: &#39;bb</code>? (<code>:</code> means &quot;outlives&quot;)"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1432746596, "post_id": 30485961, "comment_id": 49056137, "body": "Here I thought that JVM uses a singleton pattern and you can get it from anywhere with <code>getjvm</code> or something. A cursory googling seems to support that: <a href=\"http://database.developer-works.com/article/15552998/Multiple+JVM+instances\" rel=\"nofollow noreferrer\">database.developer-works.com/article/15552998/&hellip;</a>"}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "edited": false, "score": 0, "creation_date": 1432746634, "post_id": 30485961, "comment_id": 49056155, "body": "@delnan, yes, it&#39;s true."}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1432746722, "post_id": 30485961, "comment_id": 49056203, "body": "@ArtemGr, this is why I provided a link to the code: it&#39;s not that big and complicated. <code>fn get_class(&amp;&#39;a self, _cap: &amp;Capability) -&gt; JavaClass&lt;&#39;a&gt;;</code> Everywhere through the code I pass &#39;a lifetime from JavaEnv to children objects."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1432747620, "post_id": 30485961, "comment_id": 49056759, "body": "@monnoroch, It&#39;s certainly simpler than sourceforge.net/projects/jvm-bridge/ which I tacked some years back, but I can&#39;t take a look now, sorry. Passing lifetimes could be a bitch. Can&#39;t you just return an error if someone uses a method without initializing the JVM first? You could even <code>panic!</code>, since this is something that shouldn&#39;t happen if the code logic is intact. Sounds to me like you&#39;re trying to emulate the wrong abstractions: JVM is a global thread-safe singleton but you&#39;re trying to tell the Rust borrowchecker that it&#39;s something local."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432755528, "post_id": 30485961, "comment_id": 49061165, "body": "Please be considerate when asking questions on Stack Overflow. Your example code doesn&#39;t even state the errors you are getting, just that it &quot;doesn&#39;t compile&quot;. It&#39;s also overly complex. You ask us to go to a third-party site to get your code to fix it for you. Take the time to produce a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>. This can help you understand the problem or produce a laser-focused example that we can grasp quickly."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1432755950, "creation_date": 1432755950, "answer_id": 30491812, "question_id": 30485961, "link": "https://stackoverflow.com/questions/30485961/variables-have-different-lifetimes-when-they-should-have-the-same/30491812#30491812", "title": "Variables have different lifetimes, when they should have the same", "body": "<p>I believe your basic premise has an issue. Check out this example code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn are_equal&lt;'a&gt;(a: &amp;'a u8, b: &amp;'a u8) -&gt; bool {\n    *a == *b\n}\n\nfn main() {\n    let a = 42;\n\n    {\n        let b = 84;\n        println!(\"{}\", are_equal(&amp;a, &amp;b));\n    }\n}\n</code></pre>\n\n<p>Here, we have a method that takes two reference arguments with the lifetime parameter <code>'a</code>. However, you can clearly see that the actual lifetimes of <code>a</code> and <code>b</code> (in <code>main</code>) are <strong>not the same</strong> \u2014 <code>a</code> outlives <code>b</code> due to the block ending.</p>\n\n<p>All that is required is that there is <em>some lifetime</em> that can unify both parameters, and there is - the scope of the inner block. It doesn't mean that the entire lifetime has to be exactly equal.</p>\n"}], "owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1432755950, "creation_date": 1432738186, "last_edit_date": 1432755009, "question_id": 30485961, "link": "https://stackoverflow.com/questions/30485961/variables-have-different-lifetimes-when-they-should-have-the-same", "title": "Variables have different lifetimes, when they should have the same", "body": "<p>To learn Rust, I am writing a <a href=\"https://github.com/Monnoroch/RustJni\" rel=\"nofollow\">library</a> wrapping JNI. I have encountered lots of lifetime issues and fought the compiler bravely to resolve them, but with this one I just give up. Here's the problem.</p>\n\n<p>Now, JNI is the interface to Java virtual machine, so every java object has to be tied to the VM. In order to do that, I have created th \"VM pointer\" type JavaVM, which is mostly just a wrapper for the pointer and an interface for creating JavaEnv objects, which are just wrappers for JNIEnv*, and also providers of a safer interface for most of JNI methods.</p>\n\n<p>In order to declare that JavaEnv object is tied to the VM I did the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct JavaEnv&lt;'a&gt; {\n    phantom: PhantomData&lt;&amp;'a JavaVM&gt;,\n    ...\n}\n</code></pre>\n\n<p>Now, if I understand correctly, all JavaEnv objects will be tied to some JavaVM object by the lifetime, and will not outlive it, which is exactly what I want.</p>\n\n<p>JavaEnv -- is an interface for manipulating java objects (and some other stuff). Now, all types of JNI objects implement a trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait JObject&lt;'a&gt;: Drop {\n    fn get_env(&amp;self) -&gt; &amp;'a JavaEnv&lt;'a&gt;;\n    ...\n}\n</code></pre>\n\n<p>and themselves all look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct JavaObject&lt;'a&gt; {\n    env: &amp;'a JavaEnv&lt;'a&gt;,\n    ...\n}\n\npub struct JavaClass&lt;'a&gt; {\n    env: &amp;'a JavaEnv&lt;'a&gt;,\n    ...\n}\n</code></pre>\n\n<p>Now, if again I understand correctly, all JavaObject-s will be tied to some JavaEnv object by the lifetime, which in turn is tied to a JavaVM object.</p>\n\n<p>Finally, Java is the language with default reference semantics, so object comparison is just a shallow reference comparison and I wanted to reflect it in the Rust interface:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, R: 'a + JObject&lt;'a&gt;&gt; PartialEq&lt;R&gt; for JavaObject&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;R) -&gt; bool {\n        self.get_env().is_same_object(self, other)\n    }\n}\n\nimpl&lt;'a, R: 'a + JObject&lt;'a&gt;&gt; PartialEq&lt;R&gt; for JavaClass&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;R) -&gt; bool {\n        self.get_env().is_same_object(self, other)\n    }\n}\n\npub fn JavaEnv::is_same_object&lt;T1: 'a + JObject&lt;'a&gt;, T2: 'a + JObject&lt;'a&gt;&gt;(&amp;self, obj1: &amp;T1, obj2: &amp;T2) -&gt; bool {\n    unsafe {\n        ((**self.ptr).IsSameObject)(self.ptr, obj1.get_obj(), obj2.get_obj()) == JNI_TRUE\n    }\n}\n</code></pre>\n\n<p>This doesn't work. Here's a test:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let (cls, cap) = JavaClass::find(&amp;env, \"java/lang/String\", cap).unwrap();\nlet (obj /*of class java/lang/String*/, cap) = cls.alloc(cap).unwrap();\nlet cls1 /*also java/lang/String*/ = obj.get_class(&amp;cap);\nassert!(cls1 == cls); \nlet (sobj /*also of java/lang/String*/, cap) = JavaString::new(&amp;env, \"hi!\", cap).unwrap();\nassert!(cls1 != sobj);\nlet scls /*also java/lang/String*/ = sobj.get_class(&amp;cap);\nassert!(scls == cls1);\nassert!(scls == cls);\n// TODO: somehow these cls1, scls and cls have different lifetimes (or not?)\n// So those two asserts do not compile!!\nassert!(cls1 == scls);\nassert!(cls == scls);\n</code></pre>\n\n<p>To \"fix\" this I had to change the eq code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, 'b, R: 'b + JObject&lt;'b&gt;&gt; PartialEq&lt;R&gt; for JavaObject&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;R) -&gt; bool {\n        self.get_env().is_same_object(self, other)\n    }\n}\n\nimpl&lt;'a, 'b, R: 'b + JObject&lt;'b&gt;&gt; PartialEq&lt;R&gt; for JavaClass&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;R) -&gt; bool {\n        self.get_env().is_same_object(self, other)\n    }\n}\n\npub fn JavaEnv::is_same_object&lt;'b, T1: 'a + JObject&lt;'a&gt;, T2: 'b + JObject&lt;'b&gt;&gt;(&amp;self, obj1: &amp;T1, obj2: &amp;T2) -&gt; bool {\n    unsafe {\n        ((**self.ptr).IsSameObject)(self.ptr, obj1.get_obj(), obj2.get_obj()) == JNI_TRUE\n    }\n}\n</code></pre>\n\n<p>But I DON'T want to compare JObjects attached to different VM's!\nAnd, even more: I just don't get, how those objects ended up having different lifetime parameters? They all were obtained from the same JavaEnv and hence the same JavaVM!</p>\n\n<p>So, the questions are: what did I do wrong, why this is happening and how to fix this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1432724360, "post_id": 30480406, "comment_id": 49039607, "body": "What exactly are you trying to achieve here?"}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1432725188, "post_id": 30480406, "comment_id": 49040206, "body": "@DanielFath updated with context code"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1432725456, "post_id": 30480477, "comment_id": 49040383, "body": "To clarify: <code>concat!</code> does its job <i>entirely at compile time</i>; there&#39;s simply no way for it to join runtime values.  What you <i>want</i> is something like <code>format!(&quot;{} {}&quot;, first, second)</code>."}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1432725849, "post_id": 30480477, "comment_id": 49040659, "body": "@DK. Thanks, this is exactly what I needed."}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 3, "last_activity_date": 1432726999, "last_edit_date": 1432726999, "creation_date": 1432724256, "answer_id": 30480477, "question_id": 30480406, "link": "https://stackoverflow.com/questions/30480406/string-concat-error-expected-a-literal/30480477#30480477", "title": "string concat error: expected a literal", "body": "<p>Rust <code>concat!</code> expects a literal as in a symbol literal (like <code>true</code>, <code>32</code> <code>'c'</code>, <code>\"string\"</code>) since it works in earliest parts of compile stages. During that time runtime value of types aren't resolved yet.</p>\n\n<p>Based on your postgress example it seems like the best course of action is to simply create a function that returns full name or whatever you need:</p>\n\n<pre><code>struct User {\n    ... //same\n}\n\nimpl User {\n\n   fn get_fullname(&amp;self) -&gt; String\n   {\n       let mut fullname = String::new();\n       fullname.push_str(&amp;self.firstname);\n       fullname.push_str(\" \");\n       fullname.push_str(&amp;self.lastname);\n       fullname\n   }\n}\n\nfn main() {\n\n    let user = User {\n        reference: \"ref\".to_string(),\n        email: \"em@ail.com\".to_string(),\n        firstname: \"John\".to_string(),\n        lastname: \"Doe\".to_string()\n    };\n    let x = &amp;[&amp;user.email, &amp;user.get_fullname()];\n    conn.execute(query, &amp;[x]);\n</code></pre>\n\n<p>I propose this, because it seems getting fullname is something you'll want to use often on your structs. However if not, you could format the values as Matthiueu M. suggested and just concatenate them assuming this is a one-time thing.</p>\n\n<p>(<a href=\"http://is.gd/aEEMka\" rel=\"nofollow\">Playground</a>)</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 11, "last_activity_date": 1432725889, "creation_date": 1432725889, "answer_id": 30481077, "question_id": 30480406, "link": "https://stackoverflow.com/questions/30480406/string-concat-error-expected-a-literal/30481077#30481077", "title": "string concat error: expected a literal", "body": "<p>There are misunderstandings here.</p>\n\n<p><code>concat!</code> is a macro, that is a \"code-generation\" mechanism; as a result it is expanded at the first stages of the compilation, before type resolution/ownership checks/etc...</p>\n\n<p>A literal is a value written <em>as-is</em> in the code: <code>true</code>, <code>1</code>, <code>\"hello\"</code>; the result of an expression <em>cannot</em> be a literal (by definition). The resulting types may look similar (or even be identical) but types are irrelevant here.</p>\n\n<hr>\n\n<p>So, what do you really want? I guess you just want to concatenate strings. For <code>String</code>, you can just use <code>+</code>:</p>\n\n<pre><code>let fullname = user.firstname + \" \" + user.lastname;\nconn.execute(query, &amp;[&amp;user.email, &amp;fullname]).unwrap();\n</code></pre>\n\n<p>Alternatively, if you need some more complex formatting, you can use the <code>format!</code> macro (which does not require literals), here it would be:</p>\n\n<pre><code>let fullname = format!(\"{} {}\", user.firstname, user.lastname);\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2830, "favorite_count": 1, "accepted_answer_id": 30481077, "answer_count": 2, "score": 3, "last_activity_date": 1432726999, "creation_date": 1432724056, "last_edit_date": 1432725165, "question_id": 30480406, "link": "https://stackoverflow.com/questions/30480406/string-concat-error-expected-a-literal", "title": "string concat error: expected a literal", "body": "<p>So I have this:</p>\n\n<pre><code>struct User {\n    reference: String,\n    email: String,\n    firstname: String,\n    lastname: String\n}\n\nfn main() {\n\n    let user = User {\n        reference: \"ref\".to_string(),\n        email: \"em@ail.com\".to_string(),\n        firstname: \"John\".to_string(),\n        lastname: \"Doe\".to_string()\n    };\n\n    concat!(&amp;user.firstname.as_string(), \" \", &amp;user.lastname.as_string());\n\n}\n</code></pre>\n\n<p>that's returning an error:</p>\n\n<pre><code>error: expected a literal\nconcat!(&amp;user.firstname.as_string(), \" \", &amp;user.lastname.as_string());\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>But I thought that <code>.as_string()</code> already makes it a literal, does it not?  I am also finding <code>as_slice()</code> and <code>as_str()</code> references all over the place and it's confusing. Which one is it?</p>\n\n<p><strong>UPDATE</strong> OK, I was hoping I don't have to paste the whole thing here, but I guess I just have to do that anyway:</p>\n\n<pre><code>extern crate postgres;\n\nuse postgres::{Connection, SslMode};\n\nstruct User {\n    reference: String,\n    email: String,\n    firstname: String,\n    lastname: String\n}\n\nfn main() {\n\n    let conn = Connection::connect(\"postgres://postgres:postgres@localhost/mydb\", &amp;SslMode::None).unwrap();\n\n    let user = User {\n        reference: \"ref\".to_string(),\n        email: \"em@ail.com\".to_string(),\n        firstname: \"John\".to_string(),\n        lastname: \"Doe\".to_string()\n    };\n    let query = \"INSERT INTO foo (user_id, name) VALUES ((SELECT id FROM user WHERE email = $1), $2)\";\n    conn.execute(query, &amp;[&amp;user.email, concat!(&amp;user.firstname.as_slice(), \" \", &amp;user.lastname.as_slice())]).unwrap();\n\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 4, "creation_date": 1432680201, "post_id": 30470172, "comment_id": 49020796, "body": "<a href=\"https://doc.rust-lang.org/book/generics.html#generic-functions\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/generics.html#generic-functions</a>"}, {"owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1432680294, "post_id": 30470172, "comment_id": 49020834, "body": "That is exactly what I was looking for thank you"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1432708914, "post_id": 30470172, "comment_id": 49029461, "body": "@TM90: you will have to learn about <i>bounds</i> (in this case, <code>std::fmt::Display</code>) for Rust will only accept to print your argument if you statically guarantee that it is printable."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1432681201, "creation_date": 1432681201, "answer_id": 30470414, "question_id": 30470172, "link": "https://stackoverflow.com/questions/30470172/how-can-i-create-a-function-which-accepts-any-type/30470414#30470414", "title": "How can I create a function which accepts any type?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/generics.html#generic-functions\" rel=\"nofollow\">the documentation</a>:</p>\n\n<blockquote>\n  <p>We can write functions that take generic types with a similar syntax:</p>\n\n<pre><code>fn takes_anything&lt;T&gt;(x: T) {\n    // do something with x\n}\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 325, "favorite_count": 1, "accepted_answer_id": 30470414, "answer_count": 1, "score": 1, "last_activity_date": 1432681201, "creation_date": 1432680008, "last_edit_date": 1432681088, "question_id": 30470172, "link": "https://stackoverflow.com/questions/30470172/how-can-i-create-a-function-which-accepts-any-type", "title": "How can I create a function which accepts any type?", "body": "<p>How can I create a function in Rust which accepts any type or more than one type as function argument?</p>\n\n<p>My first approach :</p>\n\n<pre><code>fn multiple_types(argument : _) {\n    println!(\"{}\",argument);\n}\n</code></pre>\n\n<p>I tried the type placeholder \"_\" as argument but this is not allowed...</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 625, "user_id": 3834754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8749cd6261f1c0b80d0afba519cdd2b?s=128&d=identicon&r=PG&f=1", "display_name": "WillEngler", "link": "https://stackoverflow.com/users/3834754/willengler"}, "edited": false, "score": 1, "creation_date": 1432670082, "post_id": 30467433, "comment_id": 49015846, "body": "Thank you! I picked this answer because it walked me through how I might have used the compiler to figure it out on my own. I also appreciated the links to learn more."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 39, "last_activity_date": 1617029232, "last_edit_date": 1617029232, "creation_date": 1432669152, "answer_id": 30467433, "question_id": 30467085, "link": "https://stackoverflow.com/questions/30467085/how-to-iterate-over-and-filter-an-array/30467433#30467433", "title": "How to iterate over and filter an array?", "body": "<p>In cases like this, it's very useful to force the compiler to tell you the type of the variable. Let's trigger a type error by assigning the closure argument to an incompatible type:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>array_iter.filter(|x| { let _: () = x; x == 2 });\n</code></pre>\n<p>This fails with:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:4:41\n  |\n4 |     array_iter.filter(|x| { let _: () = x; x == 2 });\n  |                                    --   ^ expected `()`, found `&amp;&amp;{integer}`\n  |                                    |\n  |                                    expected due to this\n</code></pre>\n<p>Now we know the type of <code>x</code> is a <code>&amp;&amp;{integer}</code> - a reference to a reference to <em>some</em> kind of integer. We can then match against that instead:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn hooray() {\n    let array = [1, 4, 3, 2, 2];\n    let array_iter = array.into_iter();\n    array_iter.filter(|&amp;&amp;x| x == 2);\n}\n</code></pre>\n<p>The question now becomes &quot;why is it a reference to a reference&quot;? The short version is that the <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html#impl-Iterator\" rel=\"nofollow noreferrer\">iterator of an array returns references</a> (see the <code>type Item = &amp;'a T</code> part). In addition, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\"><code>Iterator::filter</code> passes a reference</a> to the closure to prevent moving and subsequently losing non-<code>Copy</code> types.</p>\n<p>In Rust 1.51, you can use <a href=\"https://doc.rust-lang.org/std/array/struct.IntoIter.html\" rel=\"nofollow noreferrer\"><code>array::IntoIter</code></a> to get a by-value iterator:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn hooray() {\n    let array = [1, 4, 3, 2, 2];\n    let array_iter = std::array::IntoIter::new(array);\n    array_iter.filter(|&amp;x| x == 2);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 32, "last_activity_date": 1617028152, "last_edit_date": 1617028152, "creation_date": 1432669342, "answer_id": 30467494, "question_id": 30467085, "link": "https://stackoverflow.com/questions/30467085/how-to-iterate-over-and-filter-an-array/30467494#30467494", "title": "How to iterate over and filter an array?", "body": "<p>Arrays are the type <code>[T; N]</code> in Rust, for any element type <code>T</code> and a constant number <code>N</code>. It's a fixed size array.</p>\n<p>Rust doesn't implement <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> for arrays at the moment. All arrays coerce to slices (type <code>[T]</code>) and the slice methods are available on the array because of this. The arrays also get the slice's iterator, which is called <code>std::slice::Iter&lt;'a, T&gt;</code> and has elements of type <code>&amp;'a T</code>: it iterates by reference!</p>\n<p>This is why <code>into_iter()</code> on a <code>Range&lt;i32&gt;</code> produces an iterator of <code>i32</code> and <code>into_iter()</code> on a <code>[i32; 5]</code> produces an iterator of <code>&amp;i32</code>.</p>\n<p>If you need by value iterators for arrays and</p>\n<ul>\n<li><p>You are using Rust 1.51 or newer, you can use <a href=\"https://doc.rust-lang.org/std/array/struct.IntoIter.html\" rel=\"nofollow noreferrer\"><code>array::IntoIter</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn does_now_compile() {\n    let array = [1, 4, 3, 2, 2];\n    let array_iter = std::array::IntoIter::new(array);\n    array_iter.filter(|&amp;x| x == 2);\n}\n</code></pre>\n</li>\n<li><p>You are using older versions of Rust, by-value iterators have been implemented in the broader ecosystem, see <a href=\"https://crates.io/crates/arrayvec\" rel=\"nofollow noreferrer\">arrayvec</a> and <a href=\"https://github.com/kmcallister/literator\" rel=\"nofollow noreferrer\">literator</a>.</p>\n</li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1617027924, "post_id": 41528997, "comment_id": 118179355, "body": "The maximum length of 32 is generally lifted as of <a href=\"https://github.com/rust-lang/rust/blob/1.47.0/RELEASES.md#libraries\" rel=\"nofollow noreferrer\">Rust 1.47</a>."}], "tags": [], "owner": {"reputation": 109, "user_id": 1206291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qGvGp.jpg?s=128&g=1", "display_name": "Boris", "link": "https://stackoverflow.com/users/1206291/boris"}, "is_accepted": false, "score": 3, "last_activity_date": 1503958220, "last_edit_date": 1503958220, "creation_date": 1483844218, "answer_id": 41528997, "question_id": 30467085, "link": "https://stackoverflow.com/questions/30467085/how-to-iterate-over-and-filter-an-array/41528997#41528997", "title": "How to iterate over and filter an array?", "body": "<p>As Shepmaster and bluss said, you can check the <a href=\"https://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow noreferrer\">documentation for the array type</a>, which mentions:</p>\n\n<blockquote>\n  <p>Arrays of sizes from 0 to 32 (inclusive) implement the following\n  traits if the element type allows it:</p>\n  \n  <ul>\n  <li><code>IntoIterator</code> (implemented for <code>&amp;[T; N]</code> and <code>&amp;mut [T; N]</code>)</li>\n  </ul>\n</blockquote>\n\n<p>As it says, this is only for references, and is reflected in its <code>Item</code> type: <code>type Item = &amp;'a T</code> and <code>type Item = &amp;'a mut T</code>.</p>\n"}], "owner": {"reputation": 625, "user_id": 3834754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8749cd6261f1c0b80d0afba519cdd2b?s=128&d=identicon&r=PG&f=1", "display_name": "WillEngler", "link": "https://stackoverflow.com/users/3834754/willengler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 25902, "favorite_count": 5, "accepted_answer_id": 30467433, "answer_count": 3, "score": 48, "last_activity_date": 1617029232, "creation_date": 1432667952, "last_edit_date": 1525263315, "question_id": 30467085, "link": "https://stackoverflow.com/questions/30467085/how-to-iterate-over-and-filter-an-array", "title": "How to iterate over and filter an array?", "body": "<p>I'm trying to write a program that involves filtering and folding over arrays. I've been using <a href=\"https://doc.rust-lang.org/book/first-edition/iterators.html\" rel=\"noreferrer\"><em>The Rust Programming Language</em>, first edition</a> as a reference, but I don't understand what happens when I form iterators over arrays. Here is an example:</p>\n\n<pre><code>fn compiles() {\n    let range = (1..6);\n    let range_iter = range.into_iter();\n    range_iter.filter(|&amp;x| x == 2);\n}\n\nfn does_not_compile() {\n    let array = [1, 4, 3, 2, 2];\n    let array_iter = array.into_iter();\n    //13:34 error: the trait `core::cmp::PartialEq&lt;_&gt;` is not implemented for the type `&amp;_` [E0277]\n    array_iter.filter(|&amp;x| x == 2);\n}\n\nfn janky_workaround() {\n    let array = [1, 4, 3, 2, 2];\n    let array_iter = array.into_iter();\n    // Note the dereference in the lambda body\n    array_iter.filter(|&amp;x| *x == 2);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=8afca446c40e23f597b4&amp;version=stable\" rel=\"noreferrer\">Rust playground</a>)</p>\n\n<p>In the first function, I follow that the iterator over the range does not take ownership, so I must take a <code>&amp;x</code> in <code>filter</code>'s lambda, but I don't understand why the second example with the array behaves differently.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432656754, "post_id": 30463630, "comment_id": 49007904, "body": "@Shepmaster It reminds me of some of the unusual styles used by particular schools of JavaScript development. Stacked commas look really odd without <code>var</code> there to align things."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432656783, "post_id": 30463630, "comment_id": 49007918, "body": "When I run this code, I see multiple philosophers eating concurrently: <code>Baruch Spinoza is eating. Karl Marx is eating. Baruch Spinoza is done eating. Michel Foucault is eating.</code>"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432656956, "post_id": 30463630, "comment_id": 49008032, "body": "@Shepmaster personally, I find that unreadable (too sparse), but I guess it&#39;s good Rust does not enforce a single style opinion :)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1432657820, "post_id": 30463630, "comment_id": 49008601, "body": "we have rustfmt for enforcing the Rust-style ;)"}, {"owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "edited": false, "score": 2, "creation_date": 1432666175, "post_id": 30463630, "comment_id": 49013581, "body": "I love curly brackets style though - in separate lines :) I&#39;m using this style too"}, {"owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "reply_to_user": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "edited": false, "score": 0, "creation_date": 1432694803, "post_id": 30463630, "comment_id": 49024764, "body": "@evilone I&#39;m glad to see someone with similar coding style.  That said, I wonder why people like to enforce others&#39; coding style when they are perfectly clear and readable, while they talk about freedom blah blah on the other hand."}, {"owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "edited": false, "score": 0, "creation_date": 1432702159, "post_id": 30463630, "comment_id": 49026739, "body": "@shinkou Usually different languages have developed their own style. So it&#39;ll be nice to follow code formatting style of the language that you write :)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1432772968, "post_id": 30463630, "comment_id": 49068108, "body": "@shinkou: your code was deviating substantially from the established standard style and was substantially impairing readadbility for the sorts of people that will be referring to this question. Some styles are clear enough that I\u2019ll leave them as they are, others are different enough\u2014harmfully so, in my opinion\u2014that I will normalise them for ease of reference. Stack Overflow is not about you, it\u2019s about the question, and if changing the formatting makes the problem easier to understand or answer, <i>it should be changed</i>. Accepted conventions <i>should</i> be followed in such places."}, {"owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432820540, "post_id": 30463630, "comment_id": 49092076, "body": "@Shepmaster I&#39;ve updated the post as you have requested."}, {"owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1432820789, "post_id": 30463630, "comment_id": 49092270, "body": "@ChrisMorgan Impairing readability?  That&#39;s the first time I&#39;ve ever heard that.  Interesting.  Every time when people complained about my coding style, it was because of the format being overly clear which takes them more time to type if they follow the style.  lol  Anyway, thanks for the edit."}], "owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 179, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1432850117, "creation_date": 1432656329, "last_edit_date": 1432850117, "question_id": 30463630, "link": "https://stackoverflow.com/questions/30463630/threads-not-running-in-parallel", "title": "Threads Not Running In Parallel", "body": "<p>I'm trying to follow the official documentation to get a grasp of the sense of the language.  However, I come across the issue that threads are not being run in parallel in <a href=\"http://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow\">this tutorial</a>.</p>\n\n<p>I tried to make the issue more obvious by introducing some changes in the code, but nothing has changed.  Here is the source:</p>\n\n<p><code>src/main.rs</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate rand;\n\nuse rand::Rng;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\nstruct Philosopher {\n    name: String,\n    left: usize,\n    right: usize,\n}\n\nstruct Table {\n    forks: Vec&lt;Mutex&lt;()&gt;&gt;,\n}\n\nimpl Philosopher {\n    fn new(name: &amp;str, left: usize, right: usize) -&gt; Philosopher {\n        Philosopher {\n            name: name.to_string(),\n            left: left,\n            right: right,\n        }\n    }\n\n    fn eat(&amp;self, table: &amp;Table) {\n        let _left = table.forks[self.left].lock().unwrap();\n        let _right = table.forks[self.right].lock().unwrap();\n        let sleeptime = rand::thread_rng().gen_range(1, 1001);\n\n        println!(\"{} is eating for {} milliseconds.\", self.name, sleeptime);\n        thread::sleep_ms(sleeptime);\n        println!(\"{} is done eating.\", self.name);\n    }\n}\n\nfn main() {\n    let table = Arc::new(Table {\n        forks: vec![\n            Mutex::new(()),\n            Mutex::new(()),\n            Mutex::new(()),\n            Mutex::new(()),\n            Mutex::new(()),\n        ],\n    });\n    let philosophers = vec![\n        Philosopher::new(\"Baruch Spinoza\", 0, 1),\n        Philosopher::new(\"Gilles Deleuze\", 1, 2),\n        Philosopher::new(\"Karl Marx\", 2, 3),\n        Philosopher::new(\"Friedrich Nietzsche\", 3, 4),\n        Philosopher::new(\"Michel Foucault\", 0, 4),\n    ];\n\n    let handles: Vec&lt;_&gt; = philosophers.into_iter().map(|p| {\n        let table = table.clone();\n        thread::spawn(move || p.eat(&amp;table))\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n\n<p><code>Cargo.toml</code>:</p>\n\n<pre class=\"lang-toml prettyprint-override\"><code>[package]\nname = \"philosophers\"\nversion = \"0.1.0\"\nauthors = [\"shinkou &lt;someone@somewhere.com&gt;\"]\n\n[dependencies]\nrand = \"0.3.0\"\n</code></pre>\n\n<p>I'm not sure if my setup is the cause, but I'm testing it on a VM (Ubuntu 14.10) under Win7.</p>\n\n<p>I ran the code a numerous (20+) times. Without a single exception, the order was always</p>\n\n<pre><code>Michel Foucault is eating for 214 milliseconds.\nMichel Foucault is done eating.\nFriedrich Nietzsche is eating for 34 milliseconds.\nFriedrich Nietzsche is done eating.\nKarl Marx is eating for 167 milliseconds.\nKarl Marx is done eating.\nGilles Deleuze is eating for 813 milliseconds.\nGilles Deleuze is done eating.\nBaruch Spinoza is eating for 207 milliseconds.\nBaruch Spinoza is done eating.\n</code></pre>\n\n<p>However, when I got home and ran it on my Slackware64 (14.1) box, the order changes randomly.</p>\n\n<p>EDIT: added code to print out the random eating time</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 4, "creation_date": 1432656242, "post_id": 30463490, "comment_id": 49007556, "body": "The error you&#39;ve given appears to be from a completely different part of your code.  Also, without a minimal test case, no one will be able to reproduce your problem.  <i>Blind guess</i>: try either removing the <code>&amp;</code> or replacing it with <code>ref </code>."}, {"owner": {"reputation": 1281, "user_id": 680794, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/fc0bbdeb0c23ceb9afbf2a658fc888f2?s=128&d=identicon&r=PG", "display_name": "Alex Botev", "link": "https://stackoverflow.com/users/680794/alex-botev"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1432656285, "post_id": 30463490, "comment_id": 49007582, "body": "Sorry i&#39;ve posted a wrong error message."}, {"owner": {"reputation": 1281, "user_id": 680794, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/fc0bbdeb0c23ceb9afbf2a658fc888f2?s=128&d=identicon&r=PG", "display_name": "Alex Botev", "link": "https://stackoverflow.com/users/680794/alex-botev"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1432656518, "post_id": 30463490, "comment_id": 49007730, "body": "For some reason I posted somthing totally different initially, my guess is I might have 2 stackoverflow windows open and posted the wrong ones. Nevertheless your suggestion with using ref resolved it so you an post it as an answer."}], "owner": {"reputation": 1281, "user_id": 680794, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/fc0bbdeb0c23ceb9afbf2a658fc888f2?s=128&d=identicon&r=PG", "display_name": "Alex Botev", "link": "https://stackoverflow.com/users/680794/alex-botev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 43, "favorite_count": 0, "closed_date": 1432681589, "answer_count": 0, "score": 0, "last_activity_date": 1432681463, "creation_date": 1432655986, "last_edit_date": 1432681463, "question_id": 30463490, "link": "https://stackoverflow.com/questions/30463490/cannot-move-out-of-borrowed-content-when-matching-on-an-option-of-an-enum", "closed_reason": "Duplicate", "title": "Cannot move out of borrowed content when matching on an Option of an enum", "body": "<p>I'm very new to Rust, so please bare with what I do not understand.\nI'm trying to match on an reference to a struct. It has a field <code>op</code> of type <code>Option&lt;Operator&gt;</code>, where <code>Operator</code> is a defined enum. This is the code:</p>\n\n<pre><code>fn formatNodeName(node: &amp;ComputeNode) -&gt; String{\n    match node.op{\n        Some(ref operator) =&gt;   format!(\"{}[label=\\\"{}[{}]\\\\n{}\\\"];\",node.id, node.name, node.id, operator),\n        _ =&gt;    format!(\"{}[label=\\\"{}[{}]\\\"];\",node.id, node.name, node.id)\n    }\n}\n</code></pre>\n\n<p>But I get the following error, which I sort of understand and sort of don't:</p>\n\n<pre><code>   src/codegen/graph_viz.rs:43:8: 43:12 error: cannot move out of borrowed content\nsrc/codegen/graph_viz.rs:43     match node.op{\n                                      ^~~~\nsrc/codegen/graph_viz.rs:44:8: 44:16 note: attempting to move value to here\nsrc/codegen/graph_viz.rs:44         Some(operator) =&gt;   format!(\"{}[label=\\\"{}[{}]\\\\n{}\\\"];\",node.id, node.name, node.id, operator),\n                                         ^~~~~~~~\nsrc/codegen/graph_viz.rs:44:8: 44:16 help: to prevent the move, use `ref operator` or `ref mut operator` to capture value by reference\nerror: aborting due to previous error\n</code></pre>\n\n<p>How should such thing be \"properly\" implemented to match? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1432662949, "post_id": 30463454, "comment_id": 49011708, "body": "Thanks, but you write <code>impl&lt;T&gt; Node&lt;T&gt; where T: std::fmt::Display</code> when I write <code>impl&lt;T:std::fmt::Display&gt; Node&lt;T&gt;</code> and they both compiles. Is here any difference, some (co)variance and others niceties?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 2, "creation_date": 1432664637, "post_id": 30463454, "comment_id": 49012688, "body": "They are the same in this case. I swear there was a full question about this, but there&#39;s a <a href=\"http://doc.rust-lang.org/stable/book/traits.html#where-clause\" rel=\"nofollow noreferrer\">description in the docs</a>. Feel free to ask another question about that if there is any further confusion."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1523299820, "last_edit_date": 1592644375, "creation_date": 1432655887, "answer_id": 30463454, "question_id": 30463162, "link": "https://stackoverflow.com/questions/30463162/use-of-undeclared-type-or-module-corefmtdisplay/30463454#30463454", "title": "Use of undeclared type or module core::fmt::Display", "body": "<p>This is an ugly wart of Rust, and I hope it gets addressed some day. The short version is that you want <code>std::fmt::Display</code>, not <code>core::fmt::Display</code>:</p>\n<pre><code>impl&lt;T&gt; Node&lt;T&gt;\nwhere\n    T: std::fmt::Display,\n{\n    // ...\n}\n</code></pre>\n<p>The longer answer is that the Rust standard library is split into two parts: <code>std</code> and <code>core</code>. <code>core</code> is <a href=\"https://doc.rust-lang.org/core/\" rel=\"noreferrer\">a lower-level library</a> (emphasis mine):</p>\n<blockquote>\n<p>The Rust Core Library is the dependency-free foundation of The Rust Standard Library. It is the portable glue between the language and its libraries, defining the intrinsic and primitive building blocks of all Rust code. It links to no upstream libraries, no system libraries, and no libc.</p>\n<p>The core library is minimal: it isn't even aware of heap allocation, nor does it provide concurrency or I/O. These things require platform integration, and this library is platform-agnostic.</p>\n<p>It is not recommended to use the core library. <strong>The stable functionality of libcore is reexported from the standard library</strong>. The composition of this library is subject to change over time; only the interface exposed through libstd is intended to be stable.</p>\n</blockquote>\n<p>It would be silly to implement items once in <code>core</code> and once in <code>std</code>, so the standard library <em>re-exports</em> the items from <code>core</code> under itself. However, the code from <code>core</code> knows itself as <code>core</code>, not <code>std</code>, so error messages refer to the lower level.</p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2173, "favorite_count": 0, "accepted_answer_id": 30463454, "answer_count": 1, "score": 4, "last_activity_date": 1523299820, "creation_date": 1432655082, "last_edit_date": 1592644375, "question_id": 30463162, "link": "https://stackoverflow.com/questions/30463162/use-of-undeclared-type-or-module-corefmtdisplay", "title": "Use of undeclared type or module core::fmt::Display", "body": "<p>I have some code that works fine with exact types, but when I add generics it throws an error.</p>\n<p>It gives me the following error, my code is below:</p>\n<blockquote>\n<p>The trait <code>core::fmt::Display</code> is not implemented for the type <code>T</code> [E0277]</p>\n</blockquote>\n<pre><code>fn own&lt;T&gt;(x: T) -&gt; T \n{ \n    x \n}\n\nstruct Node&lt;T&gt;\n{\n    value: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;\n}\n\nimpl&lt;T&gt; Node&lt;T&gt;\n{\n    fn print(&amp;self)\n    {\n        let mut current = self;\n        loop {\n            println!(&quot;{}&quot;, current.value);\n            match current.next {\n                Some(ref next) =&gt; { current = &amp;**next; },\n                None =&gt; break,\n            }\n        } \n    }\n    \n    fn add(&amp;mut self, node: Node&lt;T&gt;)\n    {\n        let item = Some(Box::new(node));\n        let mut current = self;\n        loop {\n            match own(current).next {\n                ref mut slot @ None =&gt; { *slot = item; return },\n                Some(ref mut next) =&gt; current = next\n            }\n        } \n    }\n}\n\nfn main() {  \n    let leaf = Node { value: 10, next: None };\n    let branch = Node { value : 50, next: Some(Box::new(leaf)) };\n    let mut root = Node { value : 100, next: Some(Box::new(branch)) };\n    root.print(); \n    \n    let new_leaf = Node { value: 5, next: None };\n    root.add(new_leaf);\n    root.print();\n}\n</code></pre>\n<p>I understand that this is a common error for generics in all languages, but when I try to add constraints to generics I get another error:</p>\n<blockquote>\n<p><code>&lt;anon&gt;:12:8: 12:26 error: failed to resolve. Use of undeclared type or module core::fmt</code></p>\n<p><code>&lt;anon&gt;:12 impl&lt;T:core::fmt::Display&gt; Node&lt;T&gt;</code></p>\n</blockquote>\n<p>Why does it appear if I have copied the full qualified name from error and inserted it as a constraint?<br />\nIt also doesn't work with another traits, for example <code>impl&lt;T:Num&gt;</code></p>\n<p><a href=\"http://is.gd/67BdMW\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n"}, {"tags": ["csv", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1432657874, "post_id": 30463099, "comment_id": 49008636, "body": "If you want to be more robust with respect to encoding, <code>rust-encoding</code> should help: <a href=\"https://lifthrasiir.github.io/rust-encoding/encoding/\" rel=\"nofollow noreferrer\">lifthrasiir.github.io/rust-encoding/encoding</a> --- Alternatively, you can decode into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> if you just want to ignore encoding altogether."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1432655570, "creation_date": 1432655570, "answer_id": 30463342, "question_id": 30463099, "link": "https://stackoverflow.com/questions/30463099/handle-runtime-panic-with-try-macro/30463342#30463342", "title": "Handle runtime panic with try macro", "body": "<p>You are facing two problems:</p>\n\n<ol>\n<li>That's not how the <code>try!</code> macro works</li>\n<li>You can't use <code>try!</code> in <code>main</code></li>\n</ol>\n\n<p>The <a href=\"http://doc.rust-lang.org/std/macro.try!.html\"><code>try!</code> macro</a> is pretty simple. All it does is see if the argument is a <code>Result::Err</code>. If it is, the error is returned <em>from the current function</em>. If the argument is a <code>Result::Ok</code>, then the inner value is extracted and is the result of evaluating <code>try!</code>. Note that the argument must always be of type <code>Result</code>.</p>\n\n<p>The second problem is that <code>main</code> is defined to <em>not return any values</em>. That means you can't use <code>try!</code> in main, as <code>try!</code> wants to return a value. Instead, you need to handle errors the \"manual\" way:</p>\n\n<pre><code>extern crate csv;\n\nfn main() {\n    let mut rdr = match csv::Reader::from_file(\"data.csv\") {\n        Ok(file) =&gt; file,\n        Err(e) =&gt; println!(\"Put nicer error handling here\"),\n    };\n\n    for record in rdr.decode() {\n        let rec: Vec&lt;String&gt; = match record {\n            Ok(rec) =&gt; rec,\n            Err(e) =&gt; println!(\"Put nicer error handling here\"),\n        };\n        println!(\"{}\", rec[0]);\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>I'd like to error handle that panic situation somehow</p>\n</blockquote>\n\n<p>This is a common misconception. You <strong>can't</strong> handle panics. They aren't exceptions (and Rust doesn't have exceptions). Panics mean <em>thread death</em>. The best you can do is spawn a thread and deal with that thread dying. You don't really get to do anything specific. This is what the <code>Result</code> type is all about. <code>Result::unwrap</code> and <code>Option::unwrap</code> are methods that mean \"If this isn't {<code>Ok</code>, <code>Some</code>}, then panic right now\".</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 247, "favorite_count": 1, "accepted_answer_id": 30463342, "answer_count": 1, "score": 0, "last_activity_date": 1432655776, "creation_date": 1432654905, "last_edit_date": 1432655776, "question_id": 30463099, "link": "https://stackoverflow.com/questions/30463099/handle-runtime-panic-with-try-macro", "title": "Handle runtime panic with try macro", "body": "<p>I'm trying to import a CSV file using <a href=\"https://crates.io/crates/csv\" rel=\"nofollow\">the <code>csv</code> crate</a>, but the problem is that some fields contain non UTF8 values, so I'm getting a runtime panic:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: Decode(\"Could not convert bytes \\'FromUtf8Error { bytes: [75, 108, 105, 110, 63, 101, 107, 111, 118, 225], error: Utf8Error { valid_up_to: 9 } }\\' to UTF-8.\")', /home/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/result.rs:729\n</code></pre>\n\n<p>This is how my code looks like:</p>\n\n<pre><code>extern crate csv;\n\nfn main() {\n    let mut rdr = csv::Reader::from_file(\"data.csv\").unwrap();\n    for record in rdr.decode() {\n        let rec: Vec&lt;String&gt; = record.unwrap();\n        println!(\"{}\", rec[0]);\n    }\n}\n</code></pre>\n\n<p>I'd like to error handle that panic situation somehow, so I was wondering should I maybe use a <code>try!</code> macro for that? Something like this:</p>\n\n<pre><code>let rec: Vec&lt;String&gt; = try!(record.unwrap());\n</code></pre>\n\n<p>Of course this is producing an error </p>\n\n<pre><code>error: the trait `rustc_serialize::serialize::Decodable` is not implemented for the type `core::result::Result&lt;_, _&gt;` [E0277]\n</code></pre>\n\n<p>What would be the correct syntax?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432651393, "post_id": 30461503, "comment_id": 49003961, "body": "It&#39;s only part of the solution, of course, as then you need to map the position you get from <code>enumerate</code> to the line/column in a human readable way. Still, I think this approach is superior to tracking the line/column in that the &quot;happy path&quot; does not pay the maintenance cost of updating those variables."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 5, "last_activity_date": 1432651398, "last_edit_date": 1432651398, "creation_date": 1432650712, "answer_id": 30461503, "question_id": 30461406, "link": "https://stackoverflow.com/questions/30461406/how-to-know-the-current-position-of-an-iterator/30461503#30461503", "title": "How to know the current position of an iterator?", "body": "<p>You could use <a href=\"http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.enumerate\" rel=\"nofollow\"><code>Iterator::enumerate()</code></a>.</p>\n\n<p>Here is an example tailored to your use case:</p>\n\n<pre><code>fn one_indexed&lt;T&gt;((n, x): (usize, T)) -&gt; (usize, T) {\n    (n+1, x)\n}\nfn main() {\n    let s = \"abc def\\nghi jkl\";\n    for (line_n, line) in s.lines().enumerate().map(one_indexed) {\n        for (char_n, char) in line.chars().enumerate().map(one_indexed) {\n            println!(\"character {} at {}:{}\", char, line_n, char_n);\n        }\n    }\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>character a at 1:1\ncharacter b at 1:2\ncharacter c at 1:3\ncharacter   at 1:4\ncharacter d at 1:5\ncharacter e at 1:6\ncharacter f at 1:7\ncharacter g at 2:1\ncharacter h at 2:2\ncharacter i at 2:3\ncharacter   at 2:4\ncharacter j at 2:5\ncharacter k at 2:6\ncharacter l at 2:7\n</code></pre>\n"}], "owner": {"reputation": 1479, "user_id": 4673683, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/106a6b52825462b10ef0904466351c00?s=128&d=identicon&r=PG", "display_name": "user19018", "link": "https://stackoverflow.com/users/4673683/user19018"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1186, "favorite_count": 0, "accepted_answer_id": 30461503, "answer_count": 1, "score": 3, "last_activity_date": 1432651398, "creation_date": 1432650444, "question_id": 30461406, "link": "https://stackoverflow.com/questions/30461406/how-to-know-the-current-position-of-an-iterator", "title": "How to know the current position of an iterator?", "body": "<p>My problem is the following, but I would like to ask the slightly broader question in the title. </p>\n\n<p>I have an iterator <code>a</code> of type <code>Chars</code> other a string. Suppose that I found an error while reading the string, and I would like to print an error message. This message should mention the position of the error in the string (line number, etc.) Is there any method in the Rust standard library which could help me?</p>\n"}, {"tags": ["rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 6980, "user_id": 1544347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ad87bb0303238ee876a147dacd557a1?s=128&d=identicon&r=PG", "display_name": "Markus Unterwaditzer", "link": "https://stackoverflow.com/users/1544347/markus-unterwaditzer"}, "edited": false, "score": 2, "creation_date": 1448802391, "post_id": 30451360, "comment_id": 55721968, "body": "I don&#39;t understand why you&#39;d call those macros a &quot;special case&quot;. This kind of implicit reference-passing can be implemented for any macro."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 6980, "user_id": 1544347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ad87bb0303238ee876a147dacd557a1?s=128&d=identicon&r=PG", "display_name": "Markus Unterwaditzer", "link": "https://stackoverflow.com/users/1544347/markus-unterwaditzer"}, "edited": false, "score": 13, "creation_date": 1449147349, "post_id": 30451360, "comment_id": 55886119, "body": "@MarkusUnterwaditzer: Sure, but the thing is that it looks normal but isn\u2019t. And sure, other macros can make themselves special cases too. The fact is that it\u2019s strongly advised against in general."}, {"owner": {"reputation": 124, "user_id": 3973184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d502a462c35c19ec4ffa72d0b933a94e?s=128&d=identicon&r=PG&f=1", "display_name": "mauleros", "link": "https://stackoverflow.com/users/3973184/mauleros"}, "edited": false, "score": 0, "creation_date": 1602813775, "post_id": 30451360, "comment_id": 113845235, "body": "Maybe this could be pointed out in the book? Got me confused as well."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 67, "last_activity_date": 1591209461, "last_edit_date": 1591209461, "creation_date": 1432622845, "answer_id": 30451360, "question_id": 30450399, "link": "https://stackoverflow.com/questions/30450399/does-println-borrow-or-own-the-variable/30451360#30451360", "title": "Does println! borrow or own the variable?", "body": "<p>The macros <code>print!</code>, <code>println!</code>, <code>eprint!</code>, <code>eprintln!</code>, <code>write!</code>, <code>writeln!</code> and <code>format!</code> are a special case and implicitly take a reference to any arguments to be formatted.</p>\n\n<p>These macros do not behave as normal functions and macros do for reasons of convenience; the fact that they take references silently is part of that difference.</p>\n\n<pre><code>fn main() {\n    let x = 5;\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>Run it through <code>rustc -Z unstable-options --pretty expanded</code> on the nightly compiler and we can see what <code>println!</code> expands to:</p>\n\n<pre><code>#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::v1::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let x = 5;\n    {\n        ::std::io::_print(::core::fmt::Arguments::new_v1(\n            &amp;[\"\", \"\\n\"],\n            &amp;match (&amp;x,) {\n                (arg0,) =&gt; [::core::fmt::ArgumentV1::new(\n                    arg0,\n                    ::core::fmt::Display::fmt,\n                )],\n            },\n        ));\n    };\n}\n</code></pre>\n\n<p>Tidied further, it\u2019s this:</p>\n\n<pre><code>use std::{fmt, io};\n\nfn main() {\n    let x = 5;\n    io::_print(fmt::Arguments::new_v1(\n        &amp;[\"\", \"\\n\"],\n        &amp;[fmt::ArgumentV1::new(&amp;x, fmt::Display::fmt)],\n        //                     ^^\n    ));\n}\n</code></pre>\n\n<p>Note the <code>&amp;x</code>.</p>\n\n<p>If you write <code>println!(\"{}\", &amp;x)</code>, you are then dealing with two levels of references; this has the same result because there is an implementation of <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>std::fmt::Display</code></a> for <code>&amp;T</code> where <code>T</code> implements <code>Display</code> (shown as <code>impl&lt;'a, T&gt; Display for &amp;'a T where T: Display + ?Sized</code>) which just passes it through. You could just as well write <code>&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;x</code>.</p>\n"}], "owner": {"reputation": 977, "user_id": 3800474, "user_type": "registered", "profile_image": "https://graph.facebook.com/1326889668/picture?type=large", "display_name": "kevinyu", "link": "https://stackoverflow.com/users/3800474/kevinyu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3968, "favorite_count": 9, "accepted_answer_id": 30451360, "answer_count": 1, "score": 56, "last_activity_date": 1591209461, "creation_date": 1432619329, "last_edit_date": 1539545791, "question_id": 30450399, "link": "https://stackoverflow.com/questions/30450399/does-println-borrow-or-own-the-variable", "title": "Does println! borrow or own the variable?", "body": "<p>I am confused with borrowing and ownership. In the Rust <a href=\"https://doc.rust-lang.org/book/first-edition/references-and-borrowing.html\" rel=\"noreferrer\">documentation about reference and borrowing</a></p>\n\n<pre><code>let mut x = 5;\n{\n    let y = &amp;mut x;\n    *y += 1;\n}\nprintln!(\"{}\", x);\n</code></pre>\n\n<p>They say</p>\n\n<blockquote>\n  <p><code>println!</code> can borrow <code>x</code>.</p>\n</blockquote>\n\n<p>I am confused by this. If <code>println!</code> borrows <code>x</code>, why does it pass <code>x</code> not <code>&amp;x</code>?</p>\n\n<p>I try to run this code below</p>\n\n<pre><code>fn main() {\n    let mut x = 5;\n    {\n        let y = &amp;mut x;\n        *y += 1;\n    }\n    println!(\"{}\", &amp;x);\n}\n</code></pre>\n\n<p>This code is identical with the code above except I pass <code>&amp;x</code> to <code>println!</code>. It prints '6' to the console which is correct and is the same result as the first code.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432645438, "post_id": 30458728, "comment_id": 48999381, "body": "@Shepmaster how did you do that trick with the syntax highlighting colors?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432645482, "post_id": 30458728, "comment_id": 48999418, "body": "Check the <a href=\"http://stackoverflow.com/posts/30458728/revisions\">revision history</a> :-)"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432645685, "post_id": 30458728, "comment_id": 48999572, "body": "Oh... I had tried <code>rust</code> but it was <code>lang-rust</code>. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432683515, "post_id": 30458728, "comment_id": 49021810, "body": "Specifically, you are running into <a href=\"https://github.com/rust-lang/rust/issues/22050\" rel=\"nofollow noreferrer\">bug #22050</a>, which coincidentally is the exact same library and trait you have! To work around it, add <code>use crypto::symmetriccipher::Encryptor;</code> to your code."}, {"owner": {"reputation": 261, "user_id": 2407776, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1738d99b3c543b63e1c05bcee6b31689?s=128&d=identicon&r=PG", "display_name": "Erik", "link": "https://stackoverflow.com/users/2407776/erik"}, "edited": false, "score": 0, "creation_date": 1432684753, "post_id": 30458728, "comment_id": 49022186, "body": "That worked perfectly, thanks! Also for the syntax highlighting tip Shepmaster, that will come in handy."}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 2, "last_activity_date": 1432649783, "last_edit_date": 1432649783, "creation_date": 1432643636, "answer_id": 30458728, "question_id": 30448596, "link": "https://stackoverflow.com/questions/30448596/how-can-i-change-the-return-type-of-this-function/30458728#30458728", "title": "How can I change the return type of this function?", "body": "<p>I think you have come across a bug of the compiler. Your code should compile</p>\n\n<p>You can <code>use crypto::symmetriccipher::Encryptor;</code> as a workaround:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn aes_enc_ecb_128(key: &amp;[u8], data: &amp;[u8]) \n                       -&gt; Result&lt;Vec&lt;u8&gt;, &amp;'static str&gt; {\n    use crypto::symmetriccipher::Encryptor;\n    let mut encryptor = aes::ecb_encryptor(\n            aes::KeySize::KeySize128,\n            key,\n            blockmodes::NoPadding);\n    let mut final_result = Vec::&lt;u8&gt;::new();\n    let mut read_buffer = buffer::RefReadBuffer::new(data);\n    let mut buffer = [0; 4096];\n    let mut write_buffer = buffer::RefWriteBuffer::new(&amp;mut buffer);\n\n    loop {\n        let result = encryptor.encrypt(&amp;mut read_buffer,\n                                       &amp;mut write_buffer,\n                                       true);\n\n        final_result.extend(write_buffer\n                            .take_read_buffer()\n                            .take_remaining().iter().map(|&amp;i| i));\n        match result {\n            Ok(BufferResult::BufferUnderflow) =&gt; break,\n            Ok(_) =&gt; {},\n            Err(_) =&gt; return Err(\"Encryption failed\")\n        }\n    }\n\n    Ok(final_result)\n}\n</code></pre>\n"}], "owner": {"reputation": 261, "user_id": 2407776, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1738d99b3c543b63e1c05bcee6b31689?s=128&d=identicon&r=PG", "display_name": "Erik", "link": "https://stackoverflow.com/users/2407776/erik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 279, "favorite_count": 0, "accepted_answer_id": 30458728, "answer_count": 1, "score": 4, "last_activity_date": 1432649783, "creation_date": 1432608162, "last_edit_date": 1432645307, "question_id": 30448596, "link": "https://stackoverflow.com/questions/30448596/how-can-i-change-the-return-type-of-this-function", "title": "How can I change the return type of this function?", "body": "<p>I'm going through the <a href=\"http://cryptopals.com/\" rel=\"nofollow\">matasano crypto challenges</a> using rust, with rust-crypto for the AES implementation. I have this function to do basic ECB mode encryption (basically taken nearly verbatim from the <a href=\"https://github.com/DaGenix/rust-crypto/blob/master/examples/symmetriccipher.rs#L17-L73\" rel=\"nofollow\">rust-crypto repository's example</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn aes_enc_ecb_128(key: &amp;[u8], data: &amp;[u8]) \n                       -&gt; Result&lt;Vec&lt;u8&gt;, symmetriccipher::SymmetricCipherError&gt; {\n    let mut encryptor = aes::ecb_encryptor(\n            aes::KeySize::KeySize128,\n            key,\n            blockmodes::NoPadding);\n    let mut final_result = Vec::&lt;u8&gt;::new();\n    let mut read_buffer = buffer::RefReadBuffer::new(data);\n    let mut buffer = [0; 4096];\n    let mut write_buffer = buffer::RefWriteBuffer::new(&amp;mut buffer);\n\n    loop {\n        let result = encryptor.encrypt(&amp;mut read_buffer,\n                                       &amp;mut write_buffer,\n                                       true);\n\n        final_result.extend(write_buffer\n                            .take_read_buffer()\n                            .take_remaining().iter().map(|&amp;i| i));\n        match result {\n            Ok(BufferResult::BufferUnderflow) =&gt; break,\n            Ok(_) =&gt; {},\n            Err(e) =&gt; return Err(e)\n        }\n    }\n\n    Ok(final_result)\n}\n</code></pre>\n\n<p>The above version compiles with no problem, and works as expected. However, to make it fit with the rest of my error handling scheme I'd like to change the return type to <code>Result&lt;Vec&lt;u8&gt;,&amp;'static str&gt;</code>. This is the function with that change applied:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn aes_enc_ecb_128(key: &amp;[u8], data: &amp;[u8]) \n                       -&gt; Result&lt;Vec&lt;u8&gt;, &amp;'static str&gt; {\n    let mut encryptor = aes::ecb_encryptor(\n            aes::KeySize::KeySize128,\n            key,\n            blockmodes::NoPadding);\n    let mut final_result = Vec::&lt;u8&gt;::new();\n    let mut read_buffer = buffer::RefReadBuffer::new(data);\n    let mut buffer = [0; 4096];\n    let mut write_buffer = buffer::RefWriteBuffer::new(&amp;mut buffer);\n\n    loop {\n        let result = encryptor.encrypt(&amp;mut read_buffer,\n                                       &amp;mut write_buffer,\n                                       true);\n\n        final_result.extend(write_buffer\n                            .take_read_buffer()\n                            .take_remaining().iter().map(|&amp;i| i));\n        match result {\n            Ok(BufferResult::BufferUnderflow) =&gt; break,\n            Ok(_) =&gt; {},\n            Err(_) =&gt; return Err(\"Encryption failed\")\n        }\n    }\n\n    Ok(final_result)\n}\n</code></pre>\n\n<p>When I attempt to compile this version, I get the following error (paths removed for clarity):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: source trait is private\n         let result = encryptor.encrypt(&amp;mut read_buffer,\n                                        &amp;mut write_buffer,\n                                        true);\nerror: source trait is private\nlet r = decryptor.decrypt(&amp;mut read_buffer, &amp;mut write_buffer, true);\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>The only way I've been able to change this type is to wrap the original function in a conversion function like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn converted_enc(key: &amp;[u8], data: &amp;[u8]) \n                       -&gt; Result&lt;Vec&lt;u8&gt;, &amp;'static str&gt; {\n   match aes_enc_ecb_128(key,data) {\n       Ok(v) =&gt; Ok(v),\n       Err(_) =&gt; Err(\"Encryption failed\")\n   } \n}\n</code></pre>\n\n<p>What should I do instead of the above in order to get the return value to fit with the rest of my API, and why is the more direct method failing?</p>\n\n<p>I'm using the following versions of rust/cargo:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.2.0-nightly (0cc99f9cc 2015-05-17) (built 2015-05-18)\ncargo 0.2.0-nightly (ac61996 2015-05-17) (built 2015-05-17)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1432662669, "post_id": 30446876, "comment_id": 49011527, "body": "I feel that the simplest cases are just as you described, but that there are other cases where you don&#39;t know why something isn&#39;t working and it would be great to see what the compiler thinks the lifetimes are. Somethings that are fuzzy to me are: what happens when something is cloned? is it all curl braces? what about inside a match block? is there a way to reference the parent lifetime? what about structs/functions with custom lifetimes? etc. So i understand the simple case, really want to make sure I see what the compiler thinks in the more complex case."}, {"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1432665506, "post_id": 30446876, "comment_id": 49013190, "body": "Marking answer correct as it appears that at this time there isn&#39;t any way to have the compiler spit out lifetimes and in most cases it seems unnecessary. Thanks for the answer!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1432593335, "last_edit_date": 1495540713, "creation_date": 1432593335, "answer_id": 30446876, "question_id": 30446760, "link": "https://stackoverflow.com/questions/30446760/how-can-i-get-the-compiler-to-emit-the-lifetimes-of-variables-in-my-crate-fi/30446876#30446876", "title": "How can I get the compiler to emit the lifetime(s) of variable(s) in my crate/file?", "body": "<p>Lifetimes have a fancy name, but really they aren't super special. In fact, your source code <em>already shows the lifetimes</em>!</p>\n\n<pre><code>fn example() {\n    let v1 = Vec::new();\n\n    {\n        let v2 = Vec::new();\n    } // v2 goes out of scope here\n\n} // v1 goes out of scope here\n</code></pre>\n\n<p>The lifetime of an item is basically <strong>just the braces</strong> in the source code where the variable is valid. There's a little bit of extra complexity when you have two items, but it's a straightforward extension:</p>\n\n<pre><code>fn example() {\n    let v1 = Vec::new();  // | Lifetime of v1  \n    let v2 = Vec::new();  // |                 | Lifetime of v2\n}\n</code></pre>\n\n<p>In this example, <code>v1</code> lives a bit longer than <code>v2</code>, which is only really important if you tried to refer to one in the other:</p>\n\n<pre><code>fn example() {\n    let mut v1 = vec![];    // | Lifetime of v1  \n    let mut v2 = vec![()];  // |                | Lifetime of v2\n    v1.push(&amp;v2);           // |                |\n}\n</code></pre>\n\n<p>Here, <code>v2</code> will be dropped <em>before</em> <code>v1</code> (there's a LIFO ordering to the drops), and so the reference to <code>v2</code> would be invalid between when <code>v2</code> is dropped and <code>v1</code> is dropped.</p>\n\n<p>If you are more curious about how <em>generic lifetime parameters</em> interact, I'd recommend checking out <a href=\"https://stackoverflow.com/a/29837514/155423\">this answer</a>.</p>\n"}], "owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "accepted_answer_id": 30446876, "answer_count": 1, "score": 4, "last_activity_date": 1432593335, "creation_date": 1432592410, "last_edit_date": 1432592609, "question_id": 30446760, "link": "https://stackoverflow.com/questions/30446760/how-can-i-get-the-compiler-to-emit-the-lifetimes-of-variables-in-my-crate-fi", "title": "How can I get the compiler to emit the lifetime(s) of variable(s) in my crate/file?", "body": "<p>I know that you can call something like:</p>\n\n<pre><code>rustc -Z unstable-options --pretty=expanded\n</code></pre>\n\n<p>to see the macro expansion, is there something similar to show the lifetimes of the variables in the file/crate?</p>\n\n<p>I saw there is a <code>pretty=typed</code>, but it doesn't show the lifetimes as much as it shows what the type of everything is.</p>\n\n<p>I could see an option to show lifetimes being really helpful for new Rust programmers (like me).</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432572685, "post_id": 30442476, "comment_id": 48967453, "body": "Out of pure curiosity, are you working on Conway&#39;s Game of Life?"}, {"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432573180, "post_id": 30442476, "comment_id": 48967677, "body": "Nope, minesweeper :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432573423, "post_id": 30442476, "comment_id": 48967789, "body": "You should update your example to be an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>. As it is right now, we don&#39;t have values or types for many of the variables."}], "answers": [{"comments": [{"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1432575009, "post_id": 30442919, "comment_id": 48968553, "body": "Shouldn&#39;t there be a way to do this with iterators? My idea was to make an iterator chain that would do it, but I could write a custom iterator if that&#39;s not possible."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1432573393, "creation_date": 1432573393, "answer_id": 30442919, "question_id": 30442476, "link": "https://stackoverflow.com/questions/30442476/iterator-over-elements-around-specific-index-in-vecvecobject/30442919#30442919", "title": "Iterator over elements around specific index in Vec&lt;Vec&lt;Object&gt;&gt;", "body": "<p>You want to get mutable references to all surrounding elements, right? I don't think this is possible to do it directly. The problem is, Rust cannot statically prove that you want mutable references to <em>different</em> cells. If it ignored this, then, for example, you could make a slight mistake in indexing and get two mutable references to the same data, which is something Rust guarantees to prevent. Hence it disallows this.</p>\n\n<p>On the language level this is caused by <a href=\"http://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"nofollow\"><code>IndexMut</code></a> trait. You can see how its only method's <code>self</code> parameter lifetime is tied to the result lifetime:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn index_mut(&amp;'a mut self, index: Idx) -&gt; &amp;'a mut Self::Output;\n</code></pre>\n\n<p>This means that if this method is called (implicitly through an indexing operation) then the <em>whole</em> object will be borrowed mutably until the resulting reference goes out of scope. This prevents calling <code>&amp;mut a[i]</code> multiple times.</p>\n\n<p>The most simple and safest way to fix this would be to refactor your code in a \"double buffering\" manner - you have two instances of the field and copy data between each other on the each step. Alternatively, you can create a temporary field on each step and replace the main one with it after all computations but it is probably less efficient than swapping two fields.</p>\n\n<p>Another way to solve this would be, naturally, using raw <code>*mut</code> pointers. This is <code>unsafe</code> and should only be used directly as the last resort. You can use unsafety, however, to implement a safe abstraction, something like</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn index_multiple_mut&lt;'a, T&gt;(input: &amp;'a mut [Vec&lt;T&gt;], indices: &amp;[(usize, usize)]) -&gt; Vec&lt;&amp;'a mut T&gt;\n</code></pre>\n\n<p>where you first check that all indices are different and then use <code>unsafe</code> with some pointer casts (with <a href=\"http://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow\"><code>transmute</code></a>, probably) to create the resulting vector.</p>\n\n<p>A third possible way would be to use <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow\"><code>split_at_mut()</code></a> method in some clever way, but I'm not that sure that it is possible, and if it is, it is likely not very convenient.</p>\n"}, {"comments": [{"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1432589258, "post_id": 30444407, "comment_id": 48974456, "body": "Interesting, there is no way to implement a <code>get_mut</code> method for <code>IterMut</code> that accepts negative integers, thus turning <code>IterMut</code> itself into a view, because <code>IterMut</code> has no starting pointer."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1432582379, "last_edit_date": 1432582379, "creation_date": 1432579860, "answer_id": 30444407, "question_id": 30442476, "link": "https://stackoverflow.com/questions/30442476/iterator-over-elements-around-specific-index-in-vecvecobject/30444407#30444407", "title": "Iterator over elements around specific index in Vec&lt;Vec&lt;Object&gt;&gt;", "body": "<p>Personally, I am not sure I would be comfortable working with an iterator when the relative positions of the elements can be important. Instead, I would seek to create a \"view\" of those elements.</p>\n\n<p>The <a href=\"https://play.rust-lang.org/?gist=998b550ed7a589b1721e&amp;version=stable\" rel=\"nofollow\">gist can be found here</a>, but the idea is simple so here are the core structures.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\nstruct NeighbourhoodRow&lt;'a, T&gt;\n    where T: 'a\n{\n    pub left    : Option&lt;&amp;'a mut T&gt;,\n    pub center  : Option&lt;&amp;'a mut T&gt;,\n    pub right   : Option&lt;&amp;'a mut T&gt;,\n}\n\n#[derive(Debug)]\nstruct Neighbourhood&lt;'a, T&gt;\n    where T: 'a\n{\n    pub top     : NeighbourhoodRow&lt;'a, T&gt;,\n    pub center  : NeighbourhoodRow&lt;'a, T&gt;,\n    pub bottom  : NeighbourhoodRow&lt;'a, T&gt;,\n}\n</code></pre>\n\n<p>To build them, I use a healthy dose of <code>split_at_mut</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn take_centered_trio&lt;'a, T&gt;(row: &amp;'a mut [T], x: usize) -&gt;\n    (Option&lt;&amp;'a mut T&gt;, Option&lt;&amp;'a mut T&gt;, Option&lt;&amp;'a mut T&gt;)\n{\n    fn extract&lt;'a, T&gt;(row: &amp;'a mut [T], x: usize) -&gt; (Option&lt;&amp;'a mut T&gt;, &amp;'a mut [T]) {\n        if x+1 &gt; row.len() {\n            (None, row)\n        } else {\n            let (h, t) = row.split_at_mut(x+1);\n            (Some(&amp;mut h[x]), t)\n        }\n    }\n\n    let (prev, row) = if x &gt; 0 { extract(row, x-1) } else { (None, row) };\n    let (elem, row) = extract(row, 0);\n    let (next,  _ ) = extract(row, 0);\n\n    (prev, elem, next)\n}\n</code></pre>\n\n<p>and the rest is just some uninteresting constructors.</p>\n\n<p>Of course, you can then build some kind of iterator over <em>those</em>.</p>\n"}, {"tags": [], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "is_accepted": true, "score": 2, "last_activity_date": 1432587856, "last_edit_date": 1432587856, "creation_date": 1432586140, "answer_id": 30445688, "question_id": 30442476, "link": "https://stackoverflow.com/questions/30442476/iterator-over-elements-around-specific-index-in-vecvecobject/30445688#30445688", "title": "Iterator over elements around specific index in Vec&lt;Vec&lt;Object&gt;&gt;", "body": "<p>In the end I made a custom iterator with the help of the guys in <code>#rust</code></p>\n\n<p>I've <code>type</code>d my struct out to give you the actual code. As pointed out by the guys in <code>#rust</code> you cannot return <code>&amp;mut</code> safely from an iterator without using a different iterator that uses <code>unsafe</code> anyway, and given that the math here is simple enough to ensure it doesn't go wrong an unsafe was the way to go.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type FieldSquare = u8;\n\nuse std::iter::Iterator;\n\npub struct SurroundingSquaresIter&lt;'a&gt; {\n    squares: &amp;'a mut Vec&lt;Vec&lt;FieldSquare&gt;&gt;,\n    center_x: usize,\n    center_y: usize,\n    current_x: usize,\n    current_y: usize,\n}\n\npub trait HasSurroundedSquares&lt;'a&gt; {\n    fn surrounding_squares(&amp;'a mut self, x: usize, y:usize) -&gt; SurroundingSquaresIter&lt;'a&gt;;\n}\n\nimpl&lt;'a&gt; HasSurroundedSquares&lt;'a&gt; for Vec&lt;Vec&lt;FieldSquare&gt;&gt; {\n    fn surrounding_squares(&amp;'a mut self, x: usize, y:usize) -&gt; SurroundingSquaresIter&lt;'a&gt; {\n        SurroundingSquaresIter {\n            squares: self,\n            center_x: x,\n            center_y: y,\n            current_x: if x == 0 { x } else { x - 1 },\n            current_y: if y == 0 { y } else { y - 1 },\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for SurroundingSquaresIter&lt;'a&gt; {\n    type Item = &amp;'a mut FieldSquare;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a mut FieldSquare&gt; {\n        if self.current_y + 1 &gt; self.squares.len() || self.current_y &gt; self.center_y + 1 {\n            return None;\n        }\n\n        let ret_x = self.current_x;\n        let ret_y = self.current_y;\n\n        if self.current_x &lt; self.center_x + 1 &amp;&amp; self.current_x + 1 &lt; self.squares[self.current_y].len() {\n            self.current_x += 1;\n        }\n        else {\n            self.current_x = if self.center_x == 0 { self.center_x } else { self.center_x - 1 };\n            self.current_y += 1;\n        }\n\n        if ret_x == self.center_x &amp;&amp; ret_y == self.center_y {\n            return self.next();\n        }\n\n        Some(unsafe { &amp;mut *(&amp;mut self.squares[ret_y][ret_x] as *mut _) })\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 593, "favorite_count": 0, "accepted_answer_id": 30445688, "answer_count": 3, "score": 1, "last_activity_date": 1432587856, "creation_date": 1432571604, "question_id": 30442476, "link": "https://stackoverflow.com/questions/30442476/iterator-over-elements-around-specific-index-in-vecvecobject", "title": "Iterator over elements around specific index in Vec&lt;Vec&lt;Object&gt;&gt;", "body": "<p>I have a grid: <code>Vec&lt;Vec&lt;Object&gt;&gt;</code> and a pair of x/y indices. I want to find all the elements <em>surrounding</em> the one indexed.</p>\n\n<p>Unfortunately, I can't simply loop over the elements because that ends up borrowing the <code>Vec</code> twice and the borrow checker screams at me:</p>\n\n<pre><code>let mut cells = Vec::with_capacity(8);\n\nfor cx in xstart..xend {\n    for cy in ystart..yend {\n        if cx != x || cy != y {\n            cells.push(&amp;mut squares[cy as usize][cx as usize]);\n        }\n    }\n}\n\ncells.into_iter()\n</code></pre>\n\n<p>My best attempt at changing this into an iterator chain has also failed spectacularly:</p>\n\n<pre><code>let xstart = if x == 0 { x } else { x - 1 };\nlet xlen = if x + 2 &gt; squares[0].len() { x + 1 } else { 3 };\nlet ystart = if y == 0 { y } else { y - 1 };\nlet ylen = if y + 2 &gt; squares.len() { y + 1 } else { 3 };\n\nlet xrel = x - xstart;\nlet yrel = y - ystart;\n\nsquares.iter().enumerate()\n    .skip(ystart).take(ylen).flat_map(|(i, ref row)|\n        row.iter().enumerate()\n            .skip(xstart).take(xlen).filter(|&amp;(j, &amp;c)| i != yrel || j != xrel))\n</code></pre>\n\n<p>Does anyone know how I can do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432569382, "post_id": 30441927, "comment_id": 48966084, "body": "Maybe a duplicate of <a href=\"http://stackoverflow.com/q/29250386/155423\">stackoverflow.com/q/29250386/155423</a>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1432569601, "post_id": 30441927, "comment_id": 48966169, "body": "Yes, this is an almost exact duplicate of that."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432569626, "post_id": 30441927, "comment_id": 48966183, "body": "Oh! I had not realized we finally had a user with Mjolnir in the Rust tag! Gratz Vladimir :)"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1432576980, "post_id": 30441927, "comment_id": 48969534, "body": "<a href=\"http://rust-ci.org/Kimundi/lazy-static.rs/doc/lazy_static/\" rel=\"nofollow noreferrer\">This</a> is a helpful crate for defining variables that get initialized at runtime."}], "owner": {"reputation": 531, "user_id": 462339, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bcfab37e26f793feedfada91dfdd9ec9?s=128&d=identicon&r=PG", "display_name": "jdferreira", "link": "https://stackoverflow.com/users/462339/jdferreira"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 47, "favorite_count": 0, "closed_date": 1432569579, "answer_count": 0, "score": 0, "last_activity_date": 1432569356, "creation_date": 1432569130, "last_edit_date": 1432569306, "question_id": 30441927, "link": "https://stackoverflow.com/questions/30441927/power-expression-in-a-constant", "closed_reason": "Duplicate", "title": "Power expression in a constant", "body": "<p>I have the following code</p>\n\n<pre><code>pub const EXP: u32 = 4;\npub const POW: u32 = 3u32.pow(EXP);\n</code></pre>\n\n<p>This fails to compile since I'm using an expression:</p>\n\n<pre><code>src/t.rs:4:22: 4:35 error: constant contains unimplemented expression type [E0019]\nsrc/t.rs:4 pub const POW: u32 = 3u32.pow(EXP);\n                                ^~~~~~~~~~~~~\n</code></pre>\n\n<p>Can I have this value (3 ** EXP) be a constant in any other way? I can only think, at the moment, to have a function</p>\n\n<pre><code>#[inline(always)]\npub fn POW() -&gt; { 3u32.pow(EXP); }\n</code></pre>\n\n<p>but I was wondering if it can be done with the constants as well.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 41627, "user_id": 239168, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/7a3ea02e7284280e5df3d01a28a26af5?s=128&d=identicon&r=PG", "display_name": "Eran Medan", "link": "https://stackoverflow.com/users/239168/eran-medan"}, "edited": false, "score": 0, "creation_date": 1432569789, "post_id": 30441736, "comment_id": 48966272, "body": "Nice, so the <code>FromIterator</code> is Rust&#39;s <code>CanBuildFrom</code> :) (I know it&#39;s not but it&#39;s surely easier to understand...)"}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1576173525, "post_id": 30441736, "comment_id": 104822831, "body": "What we have duplicate keys: <code>let tuples = vec![(&quot;one&quot;, 1), (&quot;two&quot;, 2), (&quot;one&quot;, 11)];</code>. How does the current solution behave? And what change should I make so that I get all the values with <i>same</i> key stored in a <code>Vec</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1576175584, "post_id": 30441736, "comment_id": 104823718, "body": "@Nawaz <i>How does the current solution behave</i> \u2014 does something prevent you from trying this yourself? The <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">playground</a> is an excellent resource for that type of question."}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 1, "creation_date": 1576176601, "post_id": 30441736, "comment_id": 104824116, "body": "@Shepmaster: Yes, I should have tried that on the playground. Thanks. :-).. and thanks for the updating the solution as well. I came up with <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d5a652229d6c44f8e68432f33cf4c7c0\" rel=\"nofollow noreferrer\">almost same solution, using <code>fold</code> though instead of explicit <code>for</code> loop</a>:"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 75, "last_activity_date": 1576248814, "last_edit_date": 1576248814, "creation_date": 1432568434, "answer_id": 30441736, "question_id": 30441698, "link": "https://stackoverflow.com/questions/30441698/how-do-i-create-a-map-from-a-list-in-a-functional-way/30441736#30441736", "title": "How do I create a map from a list in a functional way?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"noreferrer\"><code>Iterator::collect</code></a>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let tuples = vec![(\"one\", 1), (\"two\", 2), (\"three\", 3)];\n    let m: HashMap&lt;_, _&gt; = tuples.into_iter().collect();\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p><code>collect</code> leverages the <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html\" rel=\"noreferrer\"><code>FromIterator</code> trait</a>. Any iterator can be collected into a type that implements <code>FromIterator</code>. In this case, <code>HashMap</code> implements it as:</p>\n\n<pre><code>impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for HashMap&lt;K, V, S&gt;\nwhere\n    K: Eq + Hash,\n    S: HashState + Default,\n</code></pre>\n\n<p>Said another way, any iterator of tuples where the first value can <a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\" rel=\"noreferrer\">be hashed</a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noreferrer\">compared for total equality</a> can be converted to a <code>HashMap</code>. The <code>S</code> parameter isn't exciting to talk about, it just defines what the hashing method is.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/47802539/155423\">Collect iterators of length 2 into HashMap</a></li>\n</ul>\n\n<hr>\n\n<blockquote>\n  <p>what change should I make so that I get all the values with same key stored in a <code>Vec</code>?</p>\n</blockquote>\n\n<p>There's no one-line / functional method for this in the standard library. Instead, use the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"noreferrer\"><code>entry</code></a> API:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let tuples = vec![(\"one\", 1), (\"two\", 2), (\"one\", 3)];\n    let mut m = HashMap::new();\n    for (k, v) in tuples {\n        m.entry(k).or_insert_with(Vec::new).push(v)\n    }\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p>If you found yourself doing this frequently, you could create your own type and implement <code>FromIterator</code> for it:</p>\n\n<pre><code>use std::{cmp::Eq, collections::HashMap, hash::Hash, iter::FromIterator};\n\nstruct MyCoolType&lt;K: Eq + Hash, V&gt;(HashMap&lt;K, Vec&lt;V&gt;&gt;);\n\nimpl&lt;K: Eq + Hash, V&gt; FromIterator&lt;(K, V)&gt; for MyCoolType&lt;K, V&gt; {\n    fn from_iter&lt;I&gt;(tuples: I) -&gt; Self\n    where\n        I: IntoIterator&lt;Item = (K, V)&gt;,\n    {\n        let mut m = HashMap::new();\n        for (k, v) in tuples {\n            m.entry(k).or_insert_with(Vec::new).push(v)\n        }\n        Self(m)\n    }\n}\n\nfn main() {\n    let tuples = vec![(\"one\", 1), (\"two\", 2), (\"one\", 3)];\n    let MyCoolType(m) = tuples.into_iter().collect();\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28512394/155423\">How to lookup from and insert into a HashMap efficiently?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 80945, "user_id": 1002260, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/5ec9c21c8d54825b04def7a41998d18d?s=128&d=identicon&r=PG", "display_name": "Steven Penny", "link": "https://stackoverflow.com/users/1002260/steven-penny"}, "is_accepted": false, "score": 0, "last_activity_date": 1604294083, "last_edit_date": 1604294083, "creation_date": 1604289072, "answer_id": 64639566, "question_id": 30441698, "link": "https://stackoverflow.com/questions/30441698/how-do-i-create-a-map-from-a-list-in-a-functional-way/64639566#64639566", "title": "How do I create a map from a list in a functional way?", "body": "<p>Since it wasnt already mentioned, here is a single line (albeit long) method:</p>\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n   let m: HashMap&lt;&amp;str, u16&gt; = [(&quot;year&quot;, 2019), (&quot;month&quot;, 12)].iter().cloned().collect();\n   println!(&quot;{:?}&quot;, m);\n}\n</code></pre>\n<p>Or you can do a Trait:</p>\n<pre><code>use std::collections::HashMap;\n\ntrait Hash {\n   fn to_map(&amp;self) -&gt; HashMap&lt;&amp;str, u16&gt;;\n}\n\nimpl Hash for [(&amp;str, u16)] {\n   fn to_map(&amp;self) -&gt; HashMap&lt;&amp;str, u16&gt; {\n      self.iter().cloned().collect()\n   }\n}\n\nfn main() {\n   let m = [(&quot;year&quot;, 2019), (&quot;month&quot;, 12)].to_map();\n   println!(&quot;{:?}&quot;, m)\n}\n</code></pre>\n<p><a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#examples\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/std/collections/struct.HashMap.html#examples</a></p>\n"}], "owner": {"reputation": 41627, "user_id": 239168, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/7a3ea02e7284280e5df3d01a28a26af5?s=128&d=identicon&r=PG", "display_name": "Eran Medan", "link": "https://stackoverflow.com/users/239168/eran-medan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 18058, "favorite_count": 4, "accepted_answer_id": 30441736, "answer_count": 2, "score": 41, "last_activity_date": 1604294083, "creation_date": 1432568255, "last_edit_date": 1516377232, "question_id": 30441698, "link": "https://stackoverflow.com/questions/30441698/how-do-i-create-a-map-from-a-list-in-a-functional-way", "title": "How do I create a map from a list in a functional way?", "body": "<p>In Scala, there is a method named <code>toMap</code> that works on any list of tuples and converts it to a map where the key is the first item on the tuple and the value is the second one:</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>val listOfTuples = List((\"one\", 1), (\"two\", 2))\nval map = listOfTuples.toMap \n</code></pre>\n\n<p>What is the closest thing to <code>toMap</code> in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1432567634, "post_id": 30441456, "comment_id": 48965297, "body": "What makes you think that <code>kind</code> should be a reference (<code>&amp;mut T</code>) instead of a plain value (<code>T</code>) ?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432567720, "post_id": 30441456, "comment_id": 48965335, "body": "Because leaf becomes a branch after value is inserted. In code above leaf with <code>value</code> should be a branch after <code>newLeaf</code> added"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432568111, "post_id": 30441456, "comment_id": 48965524, "body": "@MatthieuM. I believe OP wants to specify that <code>kind</code> is mutable; but it is forbidden to simply write <code>kind: mut NodeKind</code>. The solution is to understand that mutability is inherited: nothing in the struct is <code>mut</code> <i>per se</i>, but a given instance <i>of the whole struct</i> is either <code>mut</code> or not. (I tried to find a good doc resource about that, but I couldn&#39;t find one?)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432568126, "post_id": 30441456, "comment_id": 48965534, "body": "@AlexZhukovskiy: A reference is not necessary for this; I guess this is the source of your issue."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432568292, "post_id": 30441456, "comment_id": 48965598, "body": "@mdup perhaps <a href=\"http://doc.rust-lang.org/stable/book/mutability.html#field-level-mutability\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/&hellip;</a> ?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432568319, "post_id": 30441456, "comment_id": 48965610, "body": "@Shepmaster ok, I agree, see edit, I tried to explain as legibly as possible"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432568362, "post_id": 30441456, "comment_id": 48965624, "body": "@mdup: and then the next hurdle is that you cannot modify the content of a <code>Rc&lt;T&gt;</code>, you need either a <code>Box&lt;T&gt;</code> or <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432568562, "post_id": 30441456, "comment_id": 48965706, "body": "@Shepmaster perfect; for some reason it didn&#39;t show up while googling &quot;rust mutability inheritance&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432568800, "post_id": 30441456, "comment_id": 48965812, "body": "@mdup yeah, it doesn&#39;t say &quot;inheritance&quot; on that page :-)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432568807, "post_id": 30441456, "comment_id": 48965815, "body": "@mdup: if you feel like putting together an explanation (I&#39;m working on something else right now), please feel free to use: <a href=\"https://play.rust-lang.org/?gist=420bf067ca0ca572bdbc&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> (the compiling version); I moved to <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> and moved print to recursive."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432568934, "post_id": 30441456, "comment_id": 48965867, "body": "Perhaps a duplicate of <a href=\"http://stackoverflow.com/q/27750985/155423\">stackoverflow.com/q/27750985/155423</a> then? The answer explains how to create a singly-linked list."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432569543, "post_id": 30441456, "comment_id": 48966147, "body": "@Shepmaster: I would be reluctant to call it a duplicate; I would be surprised if Alex was not more interested in understanding why rather than getting some linked-list code. Here, it appears the issue is (first and foremost) an issue of inherited mutability and lifetime. I also noted extraneous &quot;mut&quot; sprinkled in main, so maybe deep down a misunderstanding of what requires mutability and what does not. That moving does not require mutability can be surprising too, I guess."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432569671, "post_id": 30441456, "comment_id": 48966207, "body": "@MatthieuM. yeah, that&#39;s why I just added it as a comment, not a close vote (which I can&#39;t do anymore, it turns out \u2014 yay gold badge!)."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432570419, "post_id": 30441456, "comment_id": 48966581, "body": "@MatthieuM. thanks for understanding, there is lack of info about Rust and those things, so only cut and try method is left and I&#39;m grateful for any help."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1432574279, "post_id": 30441456, "comment_id": 48968174, "body": "@AlexZhukovskiy: no worries, we&#39;re all in the same boat :)"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1432631897, "post_id": 30441456, "comment_id": 48989497, "body": "Just a small nitpick: You <i>prepend</i>, <i>append</i> or <i>insert</i> into a list. Addition is usually a commutative and associative operation."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1432632126, "post_id": 30441456, "comment_id": 48989655, "body": "@llogiq append, of course. In most cases it&#39;s standard name for this method. <code>List.Add</code> in .Net or <code>ArrayList.Add</code> in Java, etc..."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1432659004, "post_id": 30441456, "comment_id": 49009345, "body": "In the rust dictionary (see <code>std::collections::LinkedList</code>) it says you <code>push_back</code> an element but you can <code>append</code> one list to another.."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432662628, "post_id": 30441456, "comment_id": 49011495, "body": "@bluss thanks, it sounds like something new to me, but i&#39;l consider it the next time"}], "answers": [{"comments": [{"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 1, "creation_date": 1432639683, "post_id": 30456454, "comment_id": 48995058, "body": "Well, I&#39;ve checked that <code>Some(ref mut next) =&gt; current = next</code> can be used as well. First step is clear too, but I can&#39;t understand the second step with braces. Why does they change behaviour so much?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 1, "creation_date": 1432639920, "post_id": 30456454, "comment_id": 48995218, "body": "Oh good point! I&#39;ll update the answer with more explanation I think"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1432644077, "post_id": 30456454, "comment_id": 48998329, "body": "Thanks, I got the point with Identity function - afaik function always &quot;consume&quot; an argument if it isn&#39;t passed with <code>&amp;</code> borrowed reference symbol, so it&#39;s clear, but I still don&#39;t understand why temp variable or code block works. I&#39;m surprised that code block is valid because of lifetimes and all this stuff (it creates a temp variable that lives in this block only, but it&#39;s finishing right in the same moment as variable is created). Sorry if I&#39;m annoying or my grammar is bad - I&#39;m working hard on it :)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 1, "creation_date": 1432644622, "post_id": 30456454, "comment_id": 48998747, "body": "The temporary variable forces a move, that feels natural. <i>Why</i> the block works is not clear, it&#39;s natural to move there, but I think it could also reborrow. Not sure there is a <i>why</i>."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 5, "last_activity_date": 1525743595, "last_edit_date": 1525743595, "creation_date": 1432637529, "answer_id": 30456454, "question_id": 30441456, "link": "https://stackoverflow.com/questions/30441456/how-to-implement-an-addition-method-of-linked-list/30456454#30456454", "title": "How to implement an addition method of linked list?", "body": "<p>This is how you need to write it <a href=\"https://play.rust-lang.org/?gist=ae2db7d9cf49a9c8f23ca241a10a149e&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">(playground link)</a></p>\n\n<pre><code>fn add(&amp;mut self, node: Node) {\n    let item = Some(Box::new(node));\n    let mut current = self;\n    loop {\n        match moving(current).next {\n            ref mut slot @ None =&gt; {\n                *slot = item;\n                return;\n            }\n            Some(ref mut next) =&gt; current = next,\n        };\n    }\n}\n</code></pre>\n\n<p>Ok, so what is this?</p>\n\n<p><strong>Step 1</strong>, we need to <code>return</code> immediately after using the value <code>item</code>. Then the compiler correctly sees that it is only moved from once.</p>\n\n<pre><code>ref mut slot @ None =&gt; {\n    *slot = item;\n    return;\n}\n</code></pre>\n\n<p><strong>Step 2</strong>, to loop with a <code>&amp;mut</code> pointer that we update along the way is tricky.</p>\n\n<p>By default, Rust will <strong>reborrow</strong> a <code>&amp;mut</code> that is dereferenced. It doesn't consume the reference, it just considers it borrowed, as long as the product of the borrow is still alive.</p>\n\n<p>Obviously, this doesn't work very well here. We want a \u201chand off\u201d from the old <code>current</code> to the new <code>current</code>. We can force the <code>&amp;mut</code> pointer to obey\nmove semantics instead.</p>\n\n<p>We need this (the <code>identity</code> function forces move!):</p>\n\n<pre><code>match moving(current).next \n</code></pre>\n\n<p>we can also write it like this:</p>\n\n<pre><code>let tmp = current;\nmatch tmp.next\n</code></pre>\n\n<p>or this:</p>\n\n<pre><code>match {current}.next\n</code></pre>\n\n<p><strong>Step 3</strong>, we have no current pointer after we looked up inside it, so adapt the code to that.</p>\n\n<ul>\n<li>Use <code>ref mut slot</code> to get a hold on the location of the next value. </li>\n</ul>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 502, "favorite_count": 1, "accepted_answer_id": 30456454, "answer_count": 1, "score": 3, "last_activity_date": 1525743595, "creation_date": 1432567208, "last_edit_date": 1494855486, "question_id": 30441456, "link": "https://stackoverflow.com/questions/30441456/how-to-implement-an-addition-method-of-linked-list", "title": "How to implement an addition method of linked list?", "body": "<p>I want to create a simple linked list and add a value into it. How should the <code>add</code> method be implemented to make this code output <code>100 50 10 5</code> at line 42, the second <code>root.print()</code> call?</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Node {\n    value: i32,\n    next: Option&lt;Box&lt;Node&gt;&gt;,\n}\n\nimpl Node {\n    fn print(&amp;self) {\n        let mut current = self;\n        loop {\n            println!(\"{}\", current.value);\n            match current.next {\n                Some(ref next) =&gt; {\n                    current = &amp;**next;\n                }\n                None =&gt; break,\n            }\n        }\n    }\n\n    fn add(&amp;mut self, node: Node) {\n        let item = Some(Box::new(node));\n        let mut current = self;\n        loop {\n            match current.next {\n                None =&gt; current.next = item,\n                _ =&gt; {} \n                //Some(next) =&gt; { current = next; }\n            }\n        }\n    }\n}\n\nfn main() {\n    let leaf = Node {\n        value: 10,\n        next: None,\n    };\n    let branch = Node {\n        value: 50,\n        next: Some(Box::new(leaf)),\n    };\n    let mut root = Node {\n        value: 100,\n        next: Some(Box::new(branch)),\n    };\n    root.print();\n\n    let new_leaf = Node {\n        value: 5,\n        next: None,\n    };\n    root.add(new_leaf);\n    root.print();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1b7c616277149ef01f5891e7e4e17da8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n\n<p>I rewrote the function like this:</p>\n\n<pre><code>fn add(&amp;mut self, node: Node) {\n    let item = Some(Box::new(node));\n    let mut current = self;\n    loop {\n        match current {\n            &amp;mut Node {\n                     value: _,\n                     next: None,\n                 } =&gt; current.next = item,\n            _ =&gt; {} \n            //Some(next) =&gt; { current = next; }\n        }\n    }\n}\n</code></pre>\n\n<p>but the compiler says </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `item`\n  --&gt; &lt;anon&gt;:28:40\n   |\n28 |                 None =&gt; current.next = item,\n   |                                        ^^^^ value moved here in previous iteration of loop\n   |\n   = note: move occurs because `item` has type `std::option::Option&lt;std::boxed::Box&lt;Node&gt;&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I don't understand why it says that item was previously moved if it's used only once, and how the <code>Some(_)</code> branch should be implemented to iterate through the list?</p>\n"}, {"tags": ["module", "namespaces", "rust", "super"], "answers": [{"comments": [{"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1432566164, "post_id": 30440818, "comment_id": 48964614, "body": "Apologies, I did not mean <code>local_hello()</code> to be marked as <code>pub</code> and I do not mean it to be exported outside this crate (pretend this is a lib crate for a moment).  Similarly, I want to use <code>lib_hello()</code> but do not want to re-export it from this crate, which is what I think <code>pub use</code> does.  Does this change the answer?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432566469, "post_id": 30440818, "comment_id": 48964752, "body": "Relevant Rust book link: <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html#re-exporting-with-pub-use\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1432569305, "post_id": 30440818, "comment_id": 48966048, "body": "@goertzenator, yes, it does change the answer in the sense that it is not possible to <code>use</code> something which is not exported from parent or sibling module and which is not defined in the parent or sibling module itself."}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1432572066, "post_id": 30440818, "comment_id": 48967228, "body": "Thanks, but I feel... unsatisfied.  The docs lead me to believe that a name can only be public or private, but from what I&#39;m seeing here there is really a third mode which is &quot;private-with-extra-restrictions&quot;.  Is there good reason for Rust to work like this or is this a use-case that was maybe overlooked/postponed?"}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 1, "creation_date": 1432622392, "post_id": 30440818, "comment_id": 48983567, "body": "@goertzenator You&#39;re mistaking the meaning of &quot;private&quot; here, names are <i>local to the module</i>, which doesn&#39;t include child modules. There are only two modes. I don&#39;t see any reason to have this feature; <code>use</code> is pretty lightweight. Since modules are generally split into files, <code>use</code> is important to be able to trace back an identifier without needing to step out of the file."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 4, "last_activity_date": 1432565017, "last_edit_date": 1432565017, "creation_date": 1432564810, "answer_id": 30440818, "question_id": 30440713, "link": "https://stackoverflow.com/questions/30440713/cant-use-super-to-refer-to-a-name-that-was-brought-in-by-use-from-another-c/30440818#30440818", "title": "Can&#39;t use &quot;super&quot; to refer to a name that was brought in by &quot;use&quot; from another crate", "body": "<p><code>use</code> statements only import to the local scope. If you want to reexport, use <code>pub use</code></p>\n\n<pre><code>// crate mylib\n\npub fn lib_hello() {println!(\"Hello from mylib!\");}\n\n\n// crate mybin\n\nextern crate mylib;\npub use mylib::lib_hello;\n\npub fn local_hello() {println!(\"Hello from here!\");}\n\nmod mymod {\n    fn f() { super::local_hello() } // Ok\n    fn g() { super::lib_hello() }   // error: unresolved name `super::lib_hello`\n}\n\nfn main() {\n    lib_hello(); // Ok\n}\n</code></pre>\n\n<p><code>pub use</code> will make the item seem like it exists in the module being reexported from.</p>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 30440818, "answer_count": 1, "score": 1, "last_activity_date": 1537463022, "creation_date": 1432564458, "last_edit_date": 1537463022, "question_id": 30440713, "link": "https://stackoverflow.com/questions/30440713/cant-use-super-to-refer-to-a-name-that-was-brought-in-by-use-from-another-c", "title": "Can&#39;t use &quot;super&quot; to refer to a name that was brought in by &quot;use&quot; from another crate", "body": "<p>I am using <code>super</code> inside a module to refer to names in the parent namespace.  However, I cannot get this to work when I refer to a name in the parent namespace that was brought in with a <code>use</code> statement.  What am I doing wrong?</p>\n\n<pre><code>// crate mylib\n\npub fn lib_hello() {println!(\"Hello from mylib!\");}\n\n\n// crate mybin\n\nextern crate mylib;\nuse mylib::lib_hello;\n\nfn local_hello() {println!(\"Hello from here!\");}\n\nmod mymod {\n    fn f() { super::local_hello() } // Ok\n    fn g() { super::lib_hello() }   // error: unresolved name `super::lib_hello`\n}\n\nfn main() {\n    lib_hello(); // Ok\n}\n</code></pre>\n\n<p><strong>edit: remove <code>pub</code> from local_hello</strong></p>\n\n<p><strong>Further clarification on what I am asking</strong>:  The function <code>local_hello()</code> is declared as private in the crate namespace.  The function <code>lib_hello()</code> is brought in with <code>use</code> and also becomes a private name in the crate namespace.  At this point the names <code>local_hello</code> and <code>lib_hello</code> have equal stature: they are both in the crate namespace, and both are private.  In <code>mymod</code> I use <code>super</code> to refer to the crate namespace and can get access to <code>local_hello</code> but not <code>lib_hello</code>.  What gives?</p>\n\n<p>I know about Python and C++ namespaces.  Perhaps there is some crucial bit I need to unlearn?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "edited": false, "score": 0, "creation_date": 1443792499, "post_id": 30440474, "comment_id": 53644337, "body": "Just thought I&#39;d mention I&#39;m running into the exact same issue, however I don&#39;t have the luxury of wrapping the blanket impl in an <code>Ugly</code>, as <code>MyTrait</code> is a public trait exposed to users, and requiring them to use an <code>Ugly</code> thoroughly ruins the API by adding unnecessary complexity."}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1480193974, "post_id": 30440474, "comment_id": 68865068, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/32430659/providing-blanket-trait-implementations-for-a-custom-trait\">Providing Blanket Trait Implementations for a Custom Trait</a>"}], "answers": [{"comments": [{"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1432567069, "post_id": 30440965, "comment_id": 48964994, "body": "thanks, I thought about associated type, but I am in the case where I need multiple implementations per type, otherwise it would have done the job (my use case is not <code>Display</code>)."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1432590556, "last_edit_date": 1432590556, "creation_date": 1432565406, "answer_id": 30440965, "question_id": 30440474, "link": "https://stackoverflow.com/questions/30440474/how-to-implement-a-trait-for-a-parameterized-trait/30440965#30440965", "title": "How to implement a trait for a parameterized trait", "body": "<p><a href=\"http://is.gd/h3NJwR\" rel=\"nofollow\">Here\u2019s an implementation using associated types</a> (which means that you can only implement <code>MyTrait</code> for one <code>K</code> per type):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt;\n\npub trait MyTrait {\n    type K: fmt::Display;\n    fn get_some_k(&amp;self) -&gt; Option&lt;Self::K&gt;;\n}\n\nimpl&lt;S: MyTrait&gt; fmt::Display for S {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.get_some_k().unwrap())\n    }\n}\n\nfn main() { }\n</code></pre>\n\n<p>However, when clarified like this it becomes clear that this approach won\u2019t work either, because you\u2019re implementing <code>Display</code> for all types that implement <code>MyTrait</code>\u2014types that could have their own <code>Display</code> implementation. This is forbidden, and so you get E0210:</p>\n\n<blockquote>\n  <p>error: type parameter <code>S</code> must be used as the type parameter for some local type (e.g. <code>MyStruct&lt;T&gt;</code>); only traits defined in the current crate can be implemented for a type parameter [E0210]</p>\n</blockquote>\n\n<p>Wrapping it in something\u2014like your <code>Ugly</code> did\u2014is the only way to allow such an implementation. Or implement a trait in your own crate rather than one in someone else\u2019s (like <code>Display</code> is).</p>\n"}], "owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2027, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1432590556, "creation_date": 1432563640, "last_edit_date": 1432565440, "question_id": 30440474, "link": "https://stackoverflow.com/questions/30440474/how-to-implement-a-trait-for-a-parameterized-trait", "title": "How to implement a trait for a parameterized trait", "body": "<p>I have a design issue, when using something like :</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait MyTrait&lt;K: OtherTrait&gt; { ... }\n\nimpl&lt;K: OtherTrait, M: MyTrait&lt;K&gt;&gt; AnyTrait for M { ... }\n</code></pre>\n\n<p>I cannot implement trait for this trait due to E207 error (\"the type parameter <code>K</code> is not constrained by the impl trait, self type, or predicates\").</p>\n\n<p>Finding no way to get rid of this error, I apply <a href=\"http://is.gd/PyowCE\" rel=\"noreferrer\">this not-so-good-looking workaround</a> (verbose and struct with no intrinsic value):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt;\nuse std::marker::PhantomData;\n\npub trait MyTrait&lt;K: fmt::Display&gt; {\n    fn get_some_k(&amp;self) -&gt; Option&lt;K&gt;;\n}\n\n/* // This is my target impl but results in E207 due to K not constrained\nimpl&lt;K: fmt::Display, S: MyTrait&lt;K&gt;&gt; fmt::Display for S {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.get_some_k().unwrap())\n    }\n} */\npub struct Ugly&lt;'a, K: fmt::Display, S: 'a + MyTrait&lt;K&gt;&gt;(&amp;'a S, PhantomData&lt;K&gt;);\nimpl&lt;'a, K: fmt::Display, S: MyTrait&lt;K&gt;&gt; fmt::Display for Ugly&lt;'a, K, S&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.0.get_some_k().unwrap())\n    }\n}\n\nfn main() { }\n</code></pre>\n\n<p>I think there should be some nicer way to implement a trait for this kind of parameterized trait.</p>\n\n<p>I did not find good example in std (for instance no <code>Display</code> implementation in traits with associated type like <code>Iterator</code>)?</p>\n"}, {"tags": ["ruby", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 8378, "user_id": 2076787, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2bfe965ab5ef94a0568bc61c36b46d4c?s=128&d=identicon&r=PG", "display_name": "D-side", "link": "https://stackoverflow.com/users/2076787/d-side"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1432563964, "post_id": 30440241, "comment_id": 48963547, "body": "@DK. true. Someone <a href=\"http://stackoverflow.com/a/24148033/2076787\">appears to have already taken time to explain</a> how to do this."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1432568574, "post_id": 30440241, "comment_id": 48965713, "body": "Thanks; I&#39;ve added the link to my answer."}], "tags": [], "owner": {"reputation": 8378, "user_id": 2076787, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2bfe965ab5ef94a0568bc61c36b46d4c?s=128&d=identicon&r=PG", "display_name": "D-side", "link": "https://stackoverflow.com/users/2076787/d-side"}, "is_accepted": false, "score": 0, "last_activity_date": 1432563546, "last_edit_date": 1495542685, "creation_date": 1432562849, "answer_id": 30440241, "question_id": 30440068, "link": "https://stackoverflow.com/questions/30440068/segmentation-fault-when-calling-a-rust-lib-with-ruby-ffi/30440241#30440241", "title": "Segmentation fault when calling a Rust lib with Ruby FFI", "body": "<p>That happens because definitions of \"string\" in Ruby and Rust don't match.</p>\n\n<p>Ruby FFI expects it to be a <code>char*</code> from C, that is, a pointer to array of characters (<a href=\"https://github.com/ffi/ffi/wiki/Examples#common-usage\" rel=\"nofollow noreferrer\">see here</a>, <code>create_object</code> function). So Ruby attempts to dereference it as a pointer to get character data and fails, because it's not really a pointer.</p>\n\n<p>Rust has its own <code>String</code> class that is not just <code>char*</code> from C. Exporting strings from Rust in form of pointers is tricky and generic enough to <a href=\"https://stackoverflow.com/questions/24145823/rust-ffi-c-string-handling\">deserve a separate question</a>, and <a href=\"https://stackoverflow.com/a/24148033/2076787\">this answer</a> should help you out.</p>\n"}, {"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 3, "creation_date": 1432575631, "post_id": 30440289, "comment_id": 48968850, "body": "&quot;A String in Rust is (presently) three times larger!&quot; is technically true, in the sense that a String is a pointer and two integers and a <code>char *</code> is one pointer. But that doesn&#39;t mean that &quot;lolfoobarthisisastring&quot; is three times larger in Rust than in C."}, {"owner": {"reputation": 4297, "user_id": 2116183, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/395a0d25ee95b91dfc568f56a0377a00?s=128&d=identicon&r=PG", "display_name": "xijo", "link": "https://stackoverflow.com/users/2116183/xijo"}, "edited": false, "score": 0, "creation_date": 1432578842, "post_id": 30440289, "comment_id": 48970331, "body": "Thanks, your answer pointed me in the right direction. I stumbled over <a href=\"https://github.com/vrinek/ruby-rust-examples/tree/master/messages\" rel=\"nofollow noreferrer\">github.com/vrinek/ruby-rust-examples/tree/master/messages</a>. Although I had to adjust the example to the new rust version I could get it to work."}, {"owner": {"reputation": 4297, "user_id": 2116183, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/395a0d25ee95b91dfc568f56a0377a00?s=128&d=identicon&r=PG", "display_name": "xijo", "link": "https://stackoverflow.com/users/2116183/xijo"}, "edited": false, "score": 0, "creation_date": 1432578890, "post_id": 30440289, "comment_id": 48970355, "body": "Funny side note: my rust implementation is way slower than my pure ruby. Damn learning curve :D"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4297, "user_id": 2116183, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/395a0d25ee95b91dfc568f56a0377a00?s=128&d=identicon&r=PG", "display_name": "xijo", "link": "https://stackoverflow.com/users/2116183/xijo"}, "edited": false, "score": 0, "creation_date": 1432582076, "post_id": 30440289, "comment_id": 48971718, "body": "@Joe are you compiling with optimizations? That bites every newbie!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432582159, "post_id": 30440289, "comment_id": 48971749, "body": "It&#39;s currently my belief that you <a href=\"https://github.com/rust-lang/rust/pull/25777\" rel=\"nofollow noreferrer\">can&#39;t easily return allocated strings</a> via FFI. You could allocate them using <code>malloc</code> and <code>free</code> I suppose though."}, {"owner": {"reputation": 4297, "user_id": 2116183, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/395a0d25ee95b91dfc568f56a0377a00?s=128&d=identicon&r=PG", "display_name": "xijo", "link": "https://stackoverflow.com/users/2116183/xijo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432665347, "post_id": 30440289, "comment_id": 49013100, "body": "@Shepmaster Jep, I tried the optimizations, but it&#39;s about the same result. Seems like the JSON parsing is quite slow. I&#39;ll try <code>serde</code> instead of the <code>rustc_serialize</code> version."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1432568558, "last_edit_date": 1432568558, "creation_date": 1432563007, "answer_id": 30440289, "question_id": 30440068, "link": "https://stackoverflow.com/questions/30440068/segmentation-fault-when-calling-a-rust-lib-with-ruby-ffi/30440289#30440289", "title": "Segmentation fault when calling a Rust lib with Ruby FFI", "body": "<p><em>Disclaimer</em>: I've never used Ruby-FFI before; I'm going on what I can find in the documentation.</p>\n\n<p>According to the <a href=\"https://github.com/ffi/ffi/wiki/Types\" rel=\"nofollow\">Ruby-FFI wiki page on types</a>, <code>:string</code> is equivalent to a NUL-terminated C string.  <em>This is <strong>not</strong> the same as a Rust <code>String</code></em>.  A <code>String</code> in Rust is (presently) three times larger!</p>\n\n<p>The corresponding type in Rust would be <code>*const ::libc::c_char</code>.  Of note, there is also <a href=\"http://doc.rust-lang.org/std/ffi/struct.CString.html\" rel=\"nofollow\"><code>std::ffi::CString</code></a>, which is designed for creating C strings, and <a href=\"http://doc.rust-lang.org/std/ffi/struct.CStr.html\" rel=\"nofollow\"><code>std::ffi::CStr</code></a> which is the safe wrapper type which can be created from <em>either</em> a <code>CString</code> or a <code>*const c_char</code>.  Note that <em>neither of these is compatible with <code>*const c_char</code>!</em></p>\n\n<p>In summary, to deal with C strings in Rust, you're going to have to juggle the types.  Also keep in mind that, depending on what you're actually trying to do, you may need to also deal with manually managing memory using <code>libc::malloc</code> and <code>libc::free</code>.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/24145823/rust-ffi-c-string-handling/24148033#24148033\">This answer to \"Rust FFI C string handling\"</a> gives more details on how to deal with C strings in Rust.  Although the context for the question is integrating with C code, it should be equally useful in your case.</p>\n"}], "owner": {"reputation": 4297, "user_id": 2116183, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/395a0d25ee95b91dfc568f56a0377a00?s=128&d=identicon&r=PG", "display_name": "xijo", "link": "https://stackoverflow.com/users/2116183/xijo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 919, "favorite_count": 2, "accepted_answer_id": 30440289, "answer_count": 2, "score": 7, "last_activity_date": 1432568558, "creation_date": 1432562260, "last_edit_date": 1432562855, "question_id": 30440068, "link": "https://stackoverflow.com/questions/30440068/segmentation-fault-when-calling-a-rust-lib-with-ruby-ffi", "title": "Segmentation fault when calling a Rust lib with Ruby FFI", "body": "<p>I want to pass in a <code>String</code> to a Rust lib, but it always throws a segmentation fault.</p>\n\n<p>Here's the code:</p>\n\n<pre><code> // lib.rs\n #[no_mangle]\n pub extern fn process(foo: String) -&gt; String {\n     foo\n }\n</code></pre>\n\n<p>And the Ruby file:</p>\n\n<pre><code> # embed.rb\n require 'ffi'\n\n module Hello\n   extend FFI::Library\n   ffi_lib 'target/release/libembed.dylib'\n   attach_function :process, [ :string ], :string\n end\n\n puts Hello.process(\"foo\")\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1432549452, "post_id": 30435544, "comment_id": 48955512, "body": "1) I think you&#39;re wrong on lifetime bounds: the syntax is <code>&#39;long: &#39;short</code> (for <code>&#39;long</code> outlives <code>&#39;short</code>). Thus, it should be written <code>fn update&lt;&#39;b&gt;(&amp;&#39;b mut self) where &#39;a: &#39;b { ... }</code> <a href=\"http://is.gd/EEKFnB\" rel=\"nofollow noreferrer\">is.gd/EEKFnB</a>"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432549464, "post_id": 30435544, "comment_id": 48955522, "body": "2) It doesn&#39;t address the line <code>self.p = &amp;self.v.last().unwrap();</code> which fails to compile. The explanation is that the reference taken precisely at this line doesn&#39;t live further than the block in <code>update()</code>, which the borrow checker correctly rejects. <a href=\"http://is.gd/mlhHvb\" rel=\"nofollow noreferrer\">is.gd/mlhHvb</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432549949, "post_id": 30435544, "comment_id": 48955812, "body": "@mdup, indeed, you&#39;re right about the lifetimes syntax. Somehow I thought it was the other way around. <code>&#39;a: &#39;b</code> should be read as &quot;<code>&#39;a</code> is at least as long as <code>&#39;b</code>&quot;, then everything starts making sense."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1432550516, "post_id": 30435544, "comment_id": 48956149, "body": "@mdup, the line in <code>update()</code> fails not because the reference does not live further than the block. It fails because this reference would point into the structure itself, and this is impossible in Rust."}, {"owner": {"reputation": 2196, "user_id": 775195, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fd0baf309d203f280bfe819cda1eda1b?s=128&d=identicon&r=PG", "display_name": "loudandclear", "link": "https://stackoverflow.com/users/775195/loudandclear"}, "edited": false, "score": 0, "creation_date": 1432590218, "post_id": 30435544, "comment_id": 48974742, "body": "Thanks, this was a very helpful answer! I was indeed trying to make the update fail by making the pointer point into the structure itself. However, I do not remember seeing the <code>&#39;a: &#39;b</code> notation in the Rust Programming Language book. Where is this documented? I can&#39;t also find it in the reference."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2196, "user_id": 775195, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fd0baf309d203f280bfe819cda1eda1b?s=128&d=identicon&r=PG", "display_name": "loudandclear", "link": "https://stackoverflow.com/users/775195/loudandclear"}, "edited": false, "score": 1, "creation_date": 1432595358, "post_id": 30435544, "comment_id": 48976101, "body": "@loudandclear, frankly, I don&#39;t know :) I believe I saw this in someone else&#39;s code a long time ago. It is quite possible that this notation is not documented yet."}, {"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 0, "creation_date": 1433519509, "post_id": 30435544, "comment_id": 49403641, "body": "Thank you! This really helped clear up what I was experiencing in <a href=\"http://stackoverflow.com/q/30488928/1483396\">this</a> post."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1432550889, "last_edit_date": 1432550889, "creation_date": 1432547503, "answer_id": 30435544, "question_id": 30435152, "link": "https://stackoverflow.com/questions/30435152/why-doesnt-my-struct-live-long-enough/30435544#30435544", "title": "Why doesn&#39;t my struct live long enough?", "body": "<p>The reference this error talks about is the one which is implicitly created when you call <code>update()</code>. Because <code>update()</code> takes <code>&amp;'a mut self</code>, it means that it accepts a value of type <code>&amp;'a mut MyStruct&lt;'a&gt;</code>. It means that in theory you should call <code>update()</code> like this:</p>\n\n<pre><code>(&amp;mut mystruct).update();\n</code></pre>\n\n<p>It would be very inconvenient to write this everywhere, and so Rust is able to automatically insert necessary <code>&amp;</code>s, <code>&amp;mut</code>s and <code>*</code>s in order to call a method. This is called \"autoreference\", and the only place it happens is method invocations/field access.</p>\n\n<p>The problem is the definition of <code>update()</code> method:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; MyStruct&lt;'a&gt; {\n    ...\n    fn update(&amp;'a mut self) { ... }\n    ...\n}\n</code></pre>\n\n<p>Here you are requesting that <code>update()</code> receives the value it is called at via a reference with lifetime <code>'a</code>, where <code>'a</code> is the lifetime of the reference stored in the structure.</p>\n\n<p>However, when you have a structure value you're calling this method on, there should be already a reference to <code>i32</code> you stored in this structure. Hence the lifetime of the structure value is strictly smaller than the lifetime designated by the lifetime parameter, so it is just impossible to construct <code>&amp;'a mut MyStruct&lt;'a&gt;</code> with local variables (as in your case).</p>\n\n<p>The solution is to use <code>&amp;mut self</code> instead of <code>&amp;'a mut self</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn update(&amp;mut self) { ... }\n// essentially equivalent to\nfn update&lt;'b&gt;(&amp;'b mut self) where 'a: 'b { ... }\n// `'b` is a fresh local lifetime parameter\n</code></pre>\n\n<p>This way the lifetime of the structure in this method call is not tied to the reference this structure contains and can be smaller.</p>\n\n<p>More in-depth explanation follows below.</p>\n\n<p>By itself your definition is not nonsense. For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct IntRefWrapper&lt;'a&gt; {\n    value: &amp;'a i32\n}\n\nstatic X: i32 = 12345;\nstatic Y: IntRefWrapper&lt;'static&gt; = IntRefWrapper { value: &amp;X };\n\nimpl&lt;'a&gt; IntRefWrapper&lt;'a&gt; {\n    fn update(&amp;'a self) { ... }\n}\n\nY.update();\n</code></pre>\n\n<p>Here <code>update()</code> invocation won't cause compilation errors because both lifetimes (of <code>Y</code> and of <code>X</code>, reference to which is contained in <code>Y</code>) are <code>'static</code>.</p>\n\n<p>Let's consider your example, for comparison:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; MyStruct&lt;'a&gt; {\n    fn new(arg : &amp;'a i32) -&gt; MyStruct&lt;'a&gt; {\n        let initial = vec![Box::new(1), Box::new(2)];\n        let mystruct = MyStruct { v : initial, p : &amp;arg };\n\n        mystruct.update();\n\n        mystruct\n    }\n}\n</code></pre>\n\n<p>Here we have a lifetime parameter, <code>'a</code>, which is supplied by the <em>caller</em> of the function. For example, the caller could call this function with a static reference:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>static X: i32 = 12345;\n\nMyStruct::new(&amp;X);  // here &amp;X has static lifetime\n</code></pre>\n\n<p>However, when <code>update()</code> method is invoked, <code>mystruct</code> lifetime is bounded by the block it is called in:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>{\n    let initial = vec![Box::new(1), Box::new(2)];\n    let mystruct = MyStruct { v : initial, p : &amp;arg };  // +\n                                                        // |\n    mystruct.update();                                  // |\n                                                        // |\n    mystruct                                            // |\n}\n</code></pre>\n\n<p>Naturally, the borrow checker can't prove that this lifetime is the same as the lifetime provided by the caller (and for any possible \"external\" lifetime it is indeed impossible for them to match), so it throws an error.</p>\n\n<p>When update is defined like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn update(&amp;mut self) { ... }\n// or, equivalently\nfn update&lt;'b&gt;(&amp;'b mut self) where 'a: 'b { ... }\n</code></pre>\n\n<p>then when you call it, it is no longer required that the value you call this method on must live exactly as long as <code>'a</code> - it is sufficient for it to live for any lifetime which is smaller than or equal to <code>'a</code> - and the lifetime inside the function perfectly matches these requirements. Thus you can call such method on your value, and the compiler won't complain.</p>\n\n<p>Additionally (as noticed in the comments) the following line is indeed invalid and there is no way around it:</p>\n\n<pre><code>self.p = &amp;self.v.last().unwrap();\n</code></pre>\n\n<p>The borrow check fails here because you're trying to store a reference with lifetime of the structure into the structure itself. In general this can't be done because it has nasty soundness issues. For example, suppose you were indeed able to store this reference into the structure. But now you can't mutate <code>Vec&lt;Box&lt;i32&gt;&gt;</code> in the structure because it may destroy an element which the previously stored references points at, making the code memory unsafe.</p>\n\n<p>It is impossible to check for such things statically, and so it is disallowed on the borrow checking level. In fact, it is just a nice consequence of general borrow checking rules.</p>\n"}], "owner": {"reputation": 2196, "user_id": 775195, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fd0baf309d203f280bfe819cda1eda1b?s=128&d=identicon&r=PG", "display_name": "loudandclear", "link": "https://stackoverflow.com/users/775195/loudandclear"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 574, "favorite_count": 3, "accepted_answer_id": 30435544, "answer_count": 1, "score": 5, "last_activity_date": 1432550889, "creation_date": 1432546244, "last_edit_date": 1432549486, "question_id": 30435152, "link": "https://stackoverflow.com/questions/30435152/why-doesnt-my-struct-live-long-enough", "title": "Why doesn&#39;t my struct live long enough?", "body": "<p>In Rust, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:14:9: 14:17 error: `mystruct` does not live long enough\n&lt;anon&gt;:14         mystruct.update();\n                  ^~~~~~~~\n&lt;anon&gt;:10:5: 17:6 note: reference must be valid for the lifetime 'a as defined on the block at 10:4...\n&lt;anon&gt;:10     {\n&lt;anon&gt;:11         let initial = vec![Box::new(1), Box::new(2)];\n&lt;anon&gt;:12         let mystruct = MyStruct { v : initial, p : &amp;arg };\n&lt;anon&gt;:13         \n&lt;anon&gt;:14         mystruct.update();\n&lt;anon&gt;:15         \n          ...\n&lt;anon&gt;:12:59: 17:6 note: ...but borrowed value is only valid for the block suffix following statement 1 at 12:58\n&lt;anon&gt;:12         let mystruct = MyStruct { v : initial, p : &amp;arg };\n&lt;anon&gt;:13         \n&lt;anon&gt;:14         mystruct.update();\n&lt;anon&gt;:15         \n&lt;anon&gt;:16         mystruct\n&lt;anon&gt;:17     }\nerror: aborting due to previous error\n</code></pre>\n\n<p>for the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyStruct&lt;'a&gt;\n{\n    v : Vec&lt;Box&lt;i32&gt;&gt;,\n    p : &amp;'a i32\n}\n\nimpl&lt;'a&gt; MyStruct&lt;'a&gt;\n{\n    fn new(arg : &amp;'a i32) -&gt; MyStruct&lt;'a&gt;\n    {\n        let initial = vec![Box::new(1), Box::new(2)];\n        let mystruct = MyStruct { v : initial, p : &amp;arg };\n\n        mystruct.update();\n\n        mystruct\n    }\n\n    fn update(&amp;'a mut self)\n    {\n        self.p = &amp;self.v.last().unwrap();\n    }\n\n}\n\nfn main() {\n    let x = 5;\n    let mut obj = MyStruct::new(&amp;x);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/IqMGWt\" rel=\"nofollow\">(Playground)</a></p>\n\n<p>I don't understand why <code>mystruct</code> does not live enough. If I comment out the <code>mystruct.update()</code> line it works fine though. What's more is, if I comment out the body of <code>update</code> the code still fails. Why does calling an empty function which borrows a mutable <code>self</code> changes things?</p>\n\n<p>I don't understand which reference is the one the error talks about. Can somebody explain this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439133904, "post_id": 30429920, "comment_id": 51725392, "body": "I did actually try to land a patch to Rust to add this. However, it turns out that it&#39;s not easy to add this to the language as it exists at version 1.1. One of the main issues is that <code>None</code> would become ambiguous, and you would have to specify <i>which kind of <code>None</code></i> you meant: <code>None::&lt;u8&gt;</code>. Obviously, this is pretty terrible for ergonomics."}, {"owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "edited": false, "score": 0, "creation_date": 1462723691, "post_id": 30429920, "comment_id": 61745950, "body": "This is not a very good answer. So how do you do the equality check? With <code>map</code>?"}, {"owner": {"reputation": 5760, "user_id": 1863564, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XU4XS.png?s=128&g=1", "display_name": "Fund Monica&#39;s Lawsuit", "link": "https://stackoverflow.com/users/1863564/fund-monicas-lawsuit"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1552672589, "post_id": 30429920, "comment_id": 97114626, "body": "@Shepmaster Wait, why? What about <code>==</code> breaks type inference?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5760, "user_id": 1863564, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XU4XS.png?s=128&g=1", "display_name": "Fund Monica&#39;s Lawsuit", "link": "https://stackoverflow.com/users/1863564/fund-monicas-lawsuit"}, "edited": false, "score": 1, "creation_date": 1552676770, "post_id": 30429920, "comment_id": 97116593, "body": "@NicHartley in the proposed patch, it was something like <code>impl PartialEq&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt; where U: PartialEq&lt;T&gt;</code>. This means that <code>Option&lt;String&gt;</code> can be compared to <code>Option&lt;&amp;str&gt;</code>, but <code>None</code> by itself is ambiguous as to what type it contains. Should <code>Some(String::new()) == None</code> use the comparison code for <code>String</code> or for <code>&amp;str</code>?"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 0, "last_activity_date": 1432515059, "creation_date": 1432515059, "answer_id": 30429920, "question_id": 30429801, "link": "https://stackoverflow.com/questions/30429801/whats-the-most-idiomatic-way-to-test-two-options-for-equality-when-they-contain/30429920#30429920", "title": "What&#39;s the most idiomatic way to test two Options for equality when they contain values which can be tested for equality?", "body": "<p>There doesn't seem to be technical reason blocking this, it looks like it's just a matter of doing the implementation work.</p>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 6, "last_activity_date": 1581346228, "last_edit_date": 1581346228, "creation_date": 1524066478, "answer_id": 49903940, "question_id": 30429801, "link": "https://stackoverflow.com/questions/30429801/whats-the-most-idiomatic-way-to-test-two-options-for-equality-when-they-contain/49903940#49903940", "title": "What&#39;s the most idiomatic way to test two Options for equality when they contain values which can be tested for equality?", "body": "<p>As of Rust 1.40, you can use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref\" rel=\"nofollow noreferrer\"><code>as_deref()</code></a> so you don't have to remember what is what: </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>assert_eq!(a.as_deref(), b.as_deref());\n</code></pre>\n\n<p>Before Rust 1.40, I would do something like this:</p>\n\n<pre><code>match (&amp;a, &amp;b) {\n    (Some(a), Some(b)) =&gt; assert_eq!(a, b),\n    (None, None) =&gt; (),\n    _ =&gt; panic!(\"a and b not equal\"),\n}\n</code></pre>\n\n<hr>\n\n<p>Another option is a custom assertion, based on <a href=\"https://doc.rust-lang.org/src/core/macros.rs.html#53-80\" rel=\"nofollow noreferrer\"><code>assert_eq!</code></a>:</p>\n\n<pre><code>macro_rules! cmp_eq_option {\n    ($left:expr, $right:expr) =&gt; {{\n        match (&amp;$left, &amp;$right) {\n            (Some(left_val), Some(right_val)) =&gt; *left_val == *right_val,\n            (None, None) =&gt; true,\n            _ =&gt; false,\n        }\n    }};\n}\n\n#[macro_export]\nmacro_rules! assert_eq_option {\n    ($left:expr, $right:expr) =&gt; ({\n        if !cmp_eq_option!($left, $right) {\n            panic!(r#\"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`\"#, $left, $right)\n        }\n    });\n    ($left:expr, $right:expr,) =&gt; ({\n        assert_eq_option!($left, $right)\n    });\n    ($left:expr, $right:expr, $($arg:tt)+) =&gt; ({\n        if !cmp_eq_option!($left, $right) {\n            panic!(r#\"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`: {}\"#, $left, $right, format_args!($($arg)+))\n        }\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3778, "favorite_count": 2, "accepted_answer_id": 49903940, "answer_count": 2, "score": 13, "last_activity_date": 1581346228, "creation_date": 1432513986, "last_edit_date": 1546858793, "question_id": 30429801, "link": "https://stackoverflow.com/questions/30429801/whats-the-most-idiomatic-way-to-test-two-options-for-equality-when-they-contain", "title": "What&#39;s the most idiomatic way to test two Options for equality when they contain values which can be tested for equality?", "body": "<p>I have two types that can be tested for equality. However, once I wrap them in <code>Option</code>s, the nicety provided by various <code>PartialEq</code> implementations goes right out the window. I have to use <code>map</code> or otherwise convert them.</p>\n\n<p>As an example, let's use <code>&amp;str</code> and <code>String</code>:  </p>\n\n<pre><code>fn main() {\n    let a = \"hello\";\n    let b = \"hello\".to_owned();\n\n    assert_eq!(a, b); // Just fine\n\n    let a = Some(a);\n    let b = Some(b);\n\n    // error: mismatched types\n    assert_eq!(a, b);\n\n    // error: mismatched types\n    assert_eq!(a, b.as_ref());\n\n    // works, but highly tied to strings or slices,\n    // requires me to remember which is which\n    assert_eq!(a, b.as_ref().map(|x| &amp;x[..]));\n}\n</code></pre>\n\n<p>There surely must be a simpler or more straight-forward way to do this?</p>\n\n<p>Side-question \u2014 what prevents <code>Option</code> from implementing <code>PartialEq</code> a bit more broadly? I'm guessing coherence, my <em>old nemesis</em>.</p>\n\n<pre><code>impl&lt;T, U&gt; PartialEq&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt;\nwhere\n    T: PartialEq&lt;U&gt;,\n</code></pre>\n\n<p>There's some chatter about this in the <a href=\"https://github.com/rust-lang/rfcs/issues/917\" rel=\"nofollow noreferrer\">RFCs</a> and Rust issues (<a href=\"https://github.com/rust-lang/rust/issues/20063\" rel=\"nofollow noreferrer\">1</a>, <a href=\"https://github.com/rust-lang/rust/issues/20927\" rel=\"nofollow noreferrer\">2</a>).</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 4, "last_activity_date": 1432540753, "last_edit_date": 1432540753, "creation_date": 1432499943, "answer_id": 30428105, "question_id": 30427927, "link": "https://stackoverflow.com/questions/30427927/is-it-possible-to-specify-that-two-type-parameters-are-different-types/30428105#30428105", "title": "Is it possible to specify that two type parameters are different types?", "body": "<p>Unfortunately this is not yet possible and the best approach to this problem has not really been decided yet. One proposal that is slightly relevant to this situation is the idea of <a href=\"https://github.com/rust-lang/rfcs/pull/586\" rel=\"nofollow\">negative bounds</a> (specifically <a href=\"https://github.com/kennytm/rfcs/blob/neg-bounds/text/0000-negative-bounds.md#syntax\" rel=\"nofollow\">equality bounds</a>), but I think it has been deemed too complex. See the <a href=\"https://github.com/rust-lang/rfcs/issues/1053\" rel=\"nofollow\">latest issue</a> on the subject for more information, where the team members are considering different ideas, including specialization.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "accepted_answer_id": 30428105, "answer_count": 1, "score": 3, "last_activity_date": 1491222578, "creation_date": 1432498831, "last_edit_date": 1491222578, "question_id": 30427927, "link": "https://stackoverflow.com/questions/30427927/is-it-possible-to-specify-that-two-type-parameters-are-different-types", "title": "Is it possible to specify that two type parameters are different types?", "body": "<p>I have a simple wrapper structure with a <code>map</code> method. I also have a hierarchy of error enums where I've implemented <code>From</code> to be able to convert an <code>Error1</code> to an <code>Error2</code>, allowing the <code>try!</code> macro to automatically convert for me: </p>\n\n<pre><code>struct Span&lt;T&gt;(T);\n\nimpl&lt;T&gt; Span&lt;T&gt; {\n    fn map&lt;F, U&gt;(self, f: F) -&gt; Span&lt;U&gt;\n        where F: FnOnce(F) -&gt; U\n    {\n        Span(f(self.0))\n    }\n}\n\nenum Error1 { One }\nenum Error2 { Two }\n\nimpl From&lt;Error1&gt; for Error2 {\n    fn from(v: Error1) -&gt; Error2 { Error2::Two }\n}\n</code></pre>\n\n<p>I'd like to be able to add a <code>From</code> implementation so that I can also automatically convert the insides of the <code>Span</code> structure: </p>\n\n<pre><code>impl&lt;T,U&gt; From&lt;Span&lt;T&gt;&gt; for Span&lt;U&gt;\n    where U: From&lt;T&gt;\n{\n    fn from(v: Span&lt;T&gt;) -&gt; Span&lt;U&gt; {\n        v.map(|v| v.into())\n    }\n}\n</code></pre>\n\n<p>Unfortunately, <a href=\"https://play.integer32.com/?gist=d7fc7597a54ef362de469a99ea0c1af1&amp;version=stable\" rel=\"nofollow noreferrer\">this fails</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::convert::From&lt;Span&lt;_&gt;&gt;` for type `Span&lt;_&gt;`:\n  --&gt; src/main.rs:18:1\n   |\n18 |   impl&lt;T,U&gt; From&lt;Span&lt;T&gt;&gt; for Span&lt;U&gt;\n   |  _^ starting here...\n19 | |     where U: From&lt;T&gt;\n20 | | {\n21 | |     fn from(v: Span&lt;T&gt;) -&gt; Span&lt;U&gt; {\n22 | |         v.map(|v| v.into())\n23 | |     }\n24 | | }\n   | |_^ ...ending here\n   |\n   = note: conflicting implementation in crate `core`\n</code></pre>\n\n<p>The error message doesn't point to a <a href=\"http://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\">specific implementation of <code>From</code></a>, but my guess is it's this one:</p>\n\n<pre><code>impl&lt;T&gt; From&lt;T&gt; for T\n</code></pre>\n\n<p>And that my implementation could conflict if my <code>T</code> and <code>U</code> happen to be the same concrete type. Is there any way I can implement my trait for all <code>T</code> and <code>U</code> where <code>T</code> != <code>U</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "edited": false, "score": 0, "creation_date": 1432539181, "post_id": 30427561, "comment_id": 48950478, "body": "I see, thank you. What would Rust need to offer in order to make this work? Negated trait bounds? Specialized trait implementations?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432542186, "post_id": 30427561, "comment_id": 48951679, "body": "Some kind of specialization is needed. We don&#39;t know exactly which solution works best yet."}, {"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1516821742, "post_id": 30427561, "comment_id": 83850837, "body": "But how do you know that <code>&amp;&#39;a u32</code> wont, at some point, implement <code>Iterator</code>? I don&#39;t think this really explains why impling for references works?"}], "tags": [], "owner": {"reputation": 466, "user_id": 3260594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/seNDu.png?s=128&g=1", "display_name": "Snorre", "link": "https://stackoverflow.com/users/3260594/snorre"}, "is_accepted": true, "score": 5, "last_activity_date": 1432496219, "creation_date": 1432496219, "answer_id": 30427561, "question_id": 30427372, "link": "https://stackoverflow.com/questions/30427372/implement-trait-for-iteratorclone-conflicting-implementations/30427561#30427561", "title": "Implement trait for Iterator+Clone: conflicting implementations", "body": "<p>The short answer is, that you can't. Since you can't make sure that <code>u32</code> won't at some point implement <code>Iterator</code>, the implementations do indeed conflict. If you really want to implement it for both <code>Iterator</code> and <code>u32</code>, you'll have to somehow make the implementations separate. One way to do this would be to implement it for <code>&amp;'a FI</code> instead, since <code>u32</code> can never become a reference. Alternatively you could wrap the iterator in a struct, though this would make it slightly less ergonomic to use.</p>\n"}], "owner": {"reputation": 764, "user_id": 240760, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5483d38c83f881636c400abab782f3c5?s=128&d=identicon&r=PG", "display_name": "Adrian Willenb&#252;cher", "link": "https://stackoverflow.com/users/240760/adrian-willenb%c3%bccher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 211, "favorite_count": 0, "accepted_answer_id": 30427561, "answer_count": 1, "score": 3, "last_activity_date": 1432496876, "creation_date": 1432495172, "last_edit_date": 1432496876, "question_id": 30427372, "link": "https://stackoverflow.com/questions/30427372/implement-trait-for-iteratorclone-conflicting-implementations", "title": "Implement trait for Iterator+Clone: conflicting implementations", "body": "<p>I want to implement a trait <code>Foo</code> for <code>Iterator</code> (i.e., for all types that implement <code>Iterator</code>), so I wrote this:</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self);\n}\n\nimpl&lt;F, FI&gt; Foo for FI\n    where F: Foo,\n          FI: Iterator&lt;Item=F&gt; + Clone,\n{\n    fn foo(&amp;self) {\n        // Just for demonstration\n        for x in self.clone() {\n            x.foo();\n        }\n    }\n}\n</code></pre>\n\n<p>So far, it compiles. However, when I additionally implement <code>Foo</code> for another type, like</p>\n\n<pre><code>impl Foo for u32 {\n    fn foo(self) { println!(\"{} u32\", self); }\n}\n</code></pre>\n\n<p>I get the following error message:</p>\n\n<pre><code>t.rs:5:1: 7:2 error: conflicting implementations for trait `Foo` [E0119]\nt.rs:5 impl Foo for u32 {\nt.rs:6     fn foo(self) { println!(\"{} u32\", self); }\nt.rs:7 }\nt.rs:9:1: 18:2 note: note conflicting implementation here\nt.rs:9 impl&lt;F, FI&gt; Foo for FI\nt.rs:10     where F: Foo,\nt.rs:11           FI: Iterator&lt;Item=F&gt; + Clone,\nt.rs:12 {\nt.rs:13     fn foo(&amp;self) {\nt.rs:14         for x in self.clone() {\n</code></pre>\n\n<p>How do I resolve this?</p>\n\n<p><a href=\"http://is.gd/CDEH9q\" rel=\"nofollow\">(Playground)</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1432494636, "post_id": 30427171, "comment_id": 48939517, "body": "I&#39;m setting up a minimal example on the Rust Playground. Your code does fail to compile, but not the way you describe it to (at least, that&#39;s not the first error coming up). Anyway, here&#39;s the link, it should provide a good starting point to solve your specific problem: <a href=\"http://is.gd/HleNDJ\" rel=\"nofollow noreferrer\">is.gd/HleNDJ</a>"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432494774, "post_id": 30427171, "comment_id": 48939576, "body": "And here is the minimal example which does trigger your error: <a href=\"http://is.gd/laiDuZ\" rel=\"nofollow noreferrer\">is.gd/laiDuZ</a>"}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432494978, "post_id": 30427171, "comment_id": 48939640, "body": "Whoops, I took the lifetime specifiers out of the code when I moved it to SO, forgetting that they were necessary.  Lemme add those back, thanks.  The second one does indeed fail the way I&#39;m asking about.  Thanks for the MWE link."}], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1432495780, "post_id": 30427384, "comment_id": 48939928, "body": "Gotcha. Is it really valid to say that the reference may live as long as the Linked (which is <code>self</code> in this method)? For example, might the Node owned by the <code>head</code> be deleted, invalidating the iterator?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 2, "creation_date": 1432498686, "post_id": 30427384, "comment_id": 48940692, "body": "This won&#39;t be possible, because if you hold an iterator <code>LinkedIter</code>, it means you&#39;ve borrowed a piece of the owner <code>Linked</code> (or <code>head</code>, as you mention) to populate it. Therefore, the borrow checker would reject any attempt to modify the <code>Linked</code> until you release the <code>LinkedIter</code>."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1432498763, "post_id": 30427384, "comment_id": 48940712, "body": "Gotcha. That makes sense."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 4, "last_activity_date": 1432495251, "creation_date": 1432495251, "answer_id": 30427384, "question_id": 30427171, "link": "https://stackoverflow.com/questions/30427171/allowing-reference-lifetime-to-outlive-a-closure/30427384#30427384", "title": "Allowing reference lifetime to outlive a closure", "body": "<p>The idea is to inform the compiler that the reference you're taking in <code>map()</code> lives as long as the iterator. I got it working like that:</p>\n\n<pre><code>impl&lt;T&gt; Linked&lt;T&gt; {\n    fn iter&lt;'a&gt;(&amp;'a self) -&gt; LinkedIter&lt;T&gt; {\n        LinkedIter { node:\n            self.head.as_ref().map(|b: &amp;'a Box&lt;Node&lt;T&gt;&gt;| &amp;**b)\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 960, "favorite_count": 1, "accepted_answer_id": 30427384, "answer_count": 1, "score": 4, "last_activity_date": 1432495251, "creation_date": 1432493894, "last_edit_date": 1592644375, "question_id": 30427171, "link": "https://stackoverflow.com/questions/30427171/allowing-reference-lifetime-to-outlive-a-closure", "title": "Allowing reference lifetime to outlive a closure", "body": "<p>I'm getting to grips with Rust by trying to implement a singly-linked list.  Here are my data structures:</p>\n<pre><code>struct Linked&lt;T&gt; {\n    head: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;\n}\n\nstruct Node&lt;T&gt; {\n    data: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;\n}\n</code></pre>\n<p>Now, I'd like to add an iterator to this:</p>\n<pre><code>struct LinkedIter&lt;'a, T: 'a&gt; {\n    node: Option&lt;&amp;'a Node&lt;T&gt;&gt;,\n}\n</code></pre>\n<p>I've written a <code>.iter()</code> method for <code>Linked&lt;T&gt;</code>, which compiles and works fine.</p>\n<pre><code>impl&lt;T&gt; Linked&lt;T&gt; {\n    fn iter(&amp;self) -&gt; LinkedIter&lt;T&gt; {\n        LinkedIter { node: match self.head {\n                Some(ref node) =&gt; Some(&amp;**node),\n                None           =&gt; None\n            }\n        }\n    }\n}\n</code></pre>\n<p>Now, this <code>match</code> block is converting an <code>Option&lt;Box&lt;Linked&lt;T&gt;&gt;&gt;</code> to an <code>Option&lt;&amp;Linked&lt;T&gt;&gt;</code>.  This is exactly what the <code>Option::map()</code> method is for.  So I reimplemented this method, using <code>head.as_ref()</code> instead of <code>head</code> to avoid taking ownership of the <code>Option</code>'s contents in the closure.</p>\n<pre><code>impl&lt;T&gt; Linked&lt;T&gt; {\n    fn iter(&amp;self) -&gt; LinkedIter&lt;T&gt; {\n        LinkedIter { node:\n            self.head.as_ref().map(|b: &amp;Box&lt;Node&lt;T&gt;&gt;| &amp;**b)\n        }\n    }\n}\n</code></pre>\n<p>Unfortunately, the reference created in the closure cannot be allowed to outlive the closure, because it refers to something passed into the closure as a parameter.  The compiler complains (paraphrased a bit):</p>\n<blockquote>\n<p>error: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements:</p>\n<p>first, the lifetime cannot outlive the anonymous lifetime #1 defined [in the closure]</p>\n<p>but, the lifetime must be valid for [the lifetime of the <code>iter</code> function]</p>\n<p>so that the [<code>node:</code>] expression is assignable</p>\n</blockquote>\n<p>How can I explain to the compiler that the reference will still be valid after the closure ends?</p>\n<p><a href=\"http://is.gd/laiDuZ\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6551, "user_id": 49107, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/1e8f141e7857d397d8020ed3b759e88a?s=128&d=identicon&r=PG", "display_name": "Maciej Piechotka", "link": "https://stackoverflow.com/users/49107/maciej-piechotka"}, "edited": false, "score": 0, "creation_date": 1436642020, "post_id": 30424923, "comment_id": 50702577, "body": "As a side note - the <code>$T</code> might be Droppable so you should probably at least forget it (<a href=\"https://doc.rust-lang.org/std/mem/fn.forget.html\" rel=\"nofollow noreferrer\"><code>std::mem::forget</code></a>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6551, "user_id": 49107, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/1e8f141e7857d397d8020ed3b759e88a?s=128&d=identicon&r=PG", "display_name": "Maciej Piechotka", "link": "https://stackoverflow.com/users/49107/maciej-piechotka"}, "edited": false, "score": 0, "creation_date": 1436696759, "post_id": 30424923, "comment_id": 50713187, "body": "@MaciejPiechotka: You are right, I actually the issue in actual code but never thought about coming back here and patching the question!"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1432480897, "post_id": 30424983, "comment_id": 48935447, "body": "Ah! No you are not misunderstanding. I tested <code>Self</code> in the alias and <code>type X = Self;</code> did not compile (<i>use of undeclared type name <code>Self</code></i>) so I did not think about testing it in the macro. I guess 1.0 has many inconsistencies still."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432480991, "post_id": 30424983, "comment_id": 48935483, "body": "@MatthieuM. that seems a little strange and it may be worth filing an issue. At least there is a workaround for now!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432481044, "post_id": 30424983, "comment_id": 48935502, "body": "I guess technically my answer <i>isn&#39;t</i> an answer to your question, it&#39;s just a solution to your problem..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1432480054, "creation_date": 1432480054, "answer_id": 30424983, "question_id": 30424923, "link": "https://stackoverflow.com/questions/30424923/how-do-i-alias-the-type-of-self-in-a-struct-method/30424983#30424983", "title": "How do I alias the type of self in a struct method?", "body": "\n\n<p>I may be misunderstanding you, but there already is an alias for the type of self \u2014 <code>Self</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(core)]\n\nstruct Test&lt;T&gt; { a: T }\n\nimpl&lt;T&gt; Test&lt;T&gt; {\n    fn new(a: T) -&gt; Test&lt;T&gt;\n        where T: 'static\n    {\n        println!(\"{}\", unsafe { std::intrinsics::type_id::&lt;Self&gt;() });\n        Test { a: a }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I had to add the feature gates, make <code>T</code> <code>'static</code> to satisfy <code>type_id</code>, and add an unsafe block. I hope that none of that seems suspicious. This seems to work with your alias, as well:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! offset_of(\n    ($T:ty, $field:ident) =&gt; {\n        unsafe {\n            let exemplar: $T = std::mem::uninitialized();\n            let base: *const u8 = std::mem::transmute(&amp;exemplar);\n            let attr: *const u8 = std::mem::transmute(&amp;exemplar.$field);\n            (attr as isize) - (base as isize)\n        }\n    }\n);\n\nstruct Test&lt;T&gt; { a: T, b: T, c: T }\n\nimpl&lt;T&gt; Test&lt;T&gt; {\n    fn new(a: T) -&gt; Test&lt;T&gt;\n        where T: Copy\n    {\n        println!(\"{}\", offset_of!(Self, a));\n        println!(\"{}\", offset_of!(Self, b));\n        println!(\"{}\", offset_of!(Self, c));\n        Test { a: a, b: a, c: a }\n    }\n}\n\nfn main() {\n    Test::new(1u16);\n}\n</code></pre>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 727, "favorite_count": 0, "accepted_answer_id": 30424983, "answer_count": 1, "score": 1, "last_activity_date": 1436696740, "creation_date": 1432479762, "last_edit_date": 1436696740, "question_id": 30424923, "link": "https://stackoverflow.com/questions/30424923/how-do-i-alias-the-type-of-self-in-a-struct-method", "title": "How do I alias the type of self in a struct method?", "body": "<p>If I have a small struct <code>Test</code>:</p>\n\n<pre><code>struct Test&lt;T&gt; { a: T }\n</code></pre>\n\n<p>And I wish, in a method of <code>Test</code> to refer to its full type:</p>\n\n<pre><code>impl&lt;T&gt; Test&lt;T&gt; {\n    fn new(a: T) -&gt; Test&lt;T&gt; {\n        type X = Test::&lt;T&gt;;\n        println!(\"{}\", std::intrinsics::type_id::&lt;X&gt;());\n        Test { a: a }\n    }\n}\n</code></pre>\n\n<p>This <a href=\"https://play.rust-lang.org/?gist=46e326cb57e181fd302b&amp;version=stable\" rel=\"nofollow\">fails</a> with <em>expected ident, found <code>&lt;</code></em>, and the following fail too:</p>\n\n<ul>\n<li><code>type X = Test;</code>: <em>wrong number of type arguments: expected 1, found 0 <code>[E0243]</code></em></li>\n<li><code>type X = Test&lt;T&gt;;</code>: <em>can't use type parameters from outer function; try using a local type parameter instead</em> with a note <em>use of undeclared type name <code>T</code></em></li>\n</ul>\n\n<p>Actually, it makes sense that the former two are rejected; the latter however is slightly more mysterious.</p>\n\n<p>This came about in trying to implement an <code>offset_of!</code> macro: <code>offset_of($T:ty, $field:ident)</code>; the macro works rather well, however <code>ty</code> does not accept <code>Test&lt;T&gt;</code> (but accept a parameter-less alias).</p>\n\n<p>Is there any way to either:</p>\n\n<ul>\n<li>craft an alias to the type of <code>self</code>, even in generics?</li>\n<li>or, alternatively, make it so that the macro accepts <code>Test&lt;T&gt;</code> as a \"type\" argument?</li>\n</ul>\n\n<p><em>Note: I would prefer a solution to the former, if possible, as aliases are really handy.</em></p>\n\n<hr>\n\n<p>For reference, here is the <code>offset_of</code> macro I crafted:</p>\n\n<pre><code>macro_rules! offset_of(\n    ($T:ty, $field:ident) =&gt; {\n        unsafe {\n            let exemplar: $T = std::mem::uninitialized();\n            let base: *const u8 = std::mem::transmute(&amp;exemplar);\n            let attr: *const u8 = std::mem::transmute(&amp;exemplar.$field);\n            std::mem::forget(exemplar);\n            (attr as isize) - (base as isize)\n        }\n    }\n);\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 93, "user_id": 4934131, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-RYMSdTGwq-o/AAAAAAAAAAI/AAAAAAAACWc/2laAmWg-lns/photo.jpg?sz=128", "display_name": "Mike Krasnenkov", "link": "https://stackoverflow.com/users/4934131/mike-krasnenkov"}, "edited": false, "score": 0, "creation_date": 1432475120, "post_id": 30424150, "comment_id": 48933742, "body": "Thanks for pointing out, got it working by specifying type in trait declaration: <code>trait Alias: Trait&lt;Item=char&gt; {}</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1432474807, "creation_date": 1432474807, "answer_id": 30424150, "question_id": 30424100, "link": "https://stackoverflow.com/questions/30424100/aliasing-trait-with-associated-types/30424150#30424150", "title": "Aliasing trait with associated types", "body": "<p>You still need to specify the associated type in your <code>print_alias</code> method:</p>\n\n<pre><code>fn print_alias&lt;T&gt;(value: T)\n    where T: Alias&lt;Item=char&gt;\n{\n    print(value)\n}\n</code></pre>\n\n<p>The problem is that you've specified that every <code>Trait&lt;Item=char&gt;</code> also implements <code>Alias</code> (and thus <code>Alias&lt;Item=char&gt;</code>), but that doesn't mean that every <code>Alias</code> implements <code>Trait&lt;Item=char&gt;</code>!</p>\n"}, {"comments": [{"owner": {"reputation": 93, "user_id": 4934131, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-RYMSdTGwq-o/AAAAAAAAAAI/AAAAAAAACWc/2laAmWg-lns/photo.jpg?sz=128", "display_name": "Mike Krasnenkov", "link": "https://stackoverflow.com/users/4934131/mike-krasnenkov"}, "edited": false, "score": 0, "creation_date": 1432475454, "post_id": 30424200, "comment_id": 48933850, "body": "Thank you for help. I was able to understand the idea behind this after @Shepmaster explained the concept to me."}], "tags": [], "owner": {"reputation": 466, "user_id": 3260594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/seNDu.png?s=128&g=1", "display_name": "Snorre", "link": "https://stackoverflow.com/users/3260594/snorre"}, "is_accepted": false, "score": 3, "last_activity_date": 1432475050, "creation_date": 1432475050, "answer_id": 30424200, "question_id": 30424100, "link": "https://stackoverflow.com/questions/30424100/aliasing-trait-with-associated-types/30424200#30424200", "title": "Aliasing trait with associated types", "body": "<p>You have currently only required that all values of <code>Alias</code> must implement <code>Trait</code>, but not that the type of <code>Item</code> must be <code>char</code>. To do that you have to use the following:</p>\n\n<pre><code>trait Alias: Trait&lt;Item=char&gt; {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 93, "user_id": 4934131, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-RYMSdTGwq-o/AAAAAAAAAAI/AAAAAAAACWc/2laAmWg-lns/photo.jpg?sz=128", "display_name": "Mike Krasnenkov", "link": "https://stackoverflow.com/users/4934131/mike-krasnenkov"}, "edited": false, "score": 0, "creation_date": 1432475639, "post_id": 30424219, "comment_id": 48933913, "body": "Thanks for help. I got it now: <code>Trait&lt;Item=char&gt;</code> in <code>impl</code> means every <code>Trait&lt;Item=char&gt;</code> is <code>Alias</code>, but to make every <code>Alias</code> <code>Trait&lt;Item=char&gt;</code>, I need same constraint in trait declaration."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 6, "last_activity_date": 1432475145, "creation_date": 1432475145, "answer_id": 30424219, "question_id": 30424100, "link": "https://stackoverflow.com/questions/30424100/aliasing-trait-with-associated-types/30424219#30424219", "title": "Aliasing trait with associated types", "body": "<p>@Shepmaster's solution solves the problem locally; but you would have to specify the <code>where T: Alias&lt;Item=char&gt;</code> each time. Alternatively, you can solve it globally by requiring that all <code>Alias</code> implements <code>Trait&lt;Item=char&gt;</code>:</p>\n\n<pre><code>trait Alias: Trait&lt;Item=char&gt; {}\nimpl&lt;T: Trait&lt;Item=char&gt;&gt; Alias for T {}\n</code></pre>\n\n<p>Which of the global or local solutions is preferred is totally up to you.</p>\n"}], "owner": {"reputation": 93, "user_id": 4934131, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-RYMSdTGwq-o/AAAAAAAAAAI/AAAAAAAACWc/2laAmWg-lns/photo.jpg?sz=128", "display_name": "Mike Krasnenkov", "link": "https://stackoverflow.com/users/4934131/mike-krasnenkov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2055, "favorite_count": 2, "closed_date": 1485739128, "accepted_answer_id": 30424219, "answer_count": 3, "score": 9, "last_activity_date": 1432475145, "creation_date": 1432474472, "last_edit_date": 1495540890, "question_id": 30424100, "link": "https://stackoverflow.com/questions/30424100/aliasing-trait-with-associated-types", "closed_reason": "Duplicate", "title": "Aliasing trait with associated types", "body": "<p>Is it possible to create a trait alias with specified associated types? I'm using a method from similar question <a href=\"https://stackoverflow.com/questions/26070559/alias-on-compound-type-in-rust\">Type alias for multiple traits</a></p>\n\n<pre><code>trait Trait {\n    type Item;\n}\n\nfn print&lt;T&gt;(value: T) where T: Trait&lt;Item=char&gt; {\n}\n\ntrait Alias: Trait {}\nimpl&lt;T: Trait&lt;Item=char&gt;&gt; Alias for T {}\n\nfn print_alias&lt;T: Alias&gt;(value: T) {\n    print(value)\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>However it fails to compile with following error:</p>\n\n<pre><code>&lt;anon&gt;:12:5: 12:10 error: type mismatch resolving `&lt;T as Trait&gt;::Item == char`:\n expected associated type,\n    found char [E0271]\n&lt;anon&gt;:12     print(value)\n              ^~~~~\n&lt;anon&gt;:12:5: 12:10 note: required by `print`\n&lt;anon&gt;:12     print(value)\n              ^~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Playpen link: <a href=\"http://is.gd/LE4h6a\" rel=\"nofollow noreferrer\">http://is.gd/LE4h6a</a></p>\n"}, {"tags": ["rust", "variable-length-array", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 1, "creation_date": 1432510023, "post_id": 30429005, "comment_id": 48943541, "body": "This is awesome Simon, props to bluss for creating it!"}], "tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": true, "score": 6, "last_activity_date": 1432509065, "last_edit_date": 1432509065, "creation_date": 1432506707, "answer_id": 30429005, "question_id": 30423786, "link": "https://stackoverflow.com/questions/30423786/how-to-convert-c-variable-length-array-code-to-rust/30429005#30429005", "title": "How to convert C variable-length array code to Rust?", "body": "<p><a href=\"https://crates.io/crates/arrayvec\" rel=\"noreferrer\"><code>arrayvec</code></a> is a library that does what you\u2019re looking for. (Also, you probably want <code>iter_mut</code> and <code>as_mut</code> instead of <code>iter</code> and <code>as_ref</code>.)</p>\n\n<pre><code>for y in 0..height {\n    let tmp: ArrayVec&lt;[_; 4]&gt; = img.channel.iter_mut().map(|channel| {\n        &amp;mut channel.pixels.as_mut().unwrap()[width * y .. width * (y+1)]\n    }).collect();\n    callback(&amp;tmp);\n}\n</code></pre>\n\n<p>It allocates a fixed amount of storage (here 4 items) on the stack, and behaves like a <code>Vec</code> whose size is bounded (up to the capacity specified at compile time) but variable.</p>\n\n<p>Most of the complexity in <code>arrayvec</code> is to deal with running destructors for a variable number of items. But since <code>&amp;mut _</code> doesn\u2019t have a destructor, you can also get a way with just a fixed-size array. But you have to use <code>unsafe</code> code and be careful not to read un-initialized items. (Fixed-size arrays don\u2019t implement <code>FromIterator</code>, which is what <code>Iterator::collect</code> uses.)</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=429be71d05fd0ced50ad&amp;version=stable\" rel=\"noreferrer\">Playpen</a>)</p>\n\n<pre><code>let n_channels = img.channel.len();\nfor y in 0..height {\n    let tmp: [_; 4] = unsafe { mem::uninitialized() }\n    for (i, channel) in img.channel.iter_mut().enumerate() {\n        tmp[i] = &amp;mut channel.pixels.as_mut().unwrap()[width * y .. width * (y+1)];\n    }\n    // Careful to only touch initialized items...\n    callback(&amp;tmp[..n_channels]);\n}\n</code></pre>\n\n<p><strong>Edit</strong>: The unsafe code can be replaced with:</p>\n\n<pre><code>let mut tmp: [&amp;mut [_]; 4] = [&amp;mut [], &amp;mut [], &amp;mut [], &amp;mut []];\n</code></pre>\n\n<p>The shorter <code>[&amp;mut []; 4]</code> initializer syntax does not apply here because <code>&amp;mut [_]</code> is not implicitly copyable. The type annotation is necessary so you don\u2019t get <code>[&amp;mut [_; 0]; 4]</code>.</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 660, "favorite_count": 0, "accepted_answer_id": 30429005, "answer_count": 1, "score": 8, "last_activity_date": 1432509065, "creation_date": 1432472426, "last_edit_date": 1432490247, "question_id": 30423786, "link": "https://stackoverflow.com/questions/30423786/how-to-convert-c-variable-length-array-code-to-rust", "title": "How to convert C variable-length array code to Rust?", "body": "<p>I know Rust doesn't support variable-length arrays, but that leaves me wondering what to replace them with, given that:</p>\n\n<ul>\n<li>I don't want to allocate and deallocate a tiny Vec in a loop</li>\n<li>The borrow checker doesn't let me move the code outside the loop</li>\n<li>There are many limitations on fixed-size arrays, so I can't figure out how to use them</li>\n</ul>\n\n<p>The C code I'm converting processes an image by calling a callback on each line, passing a small array of pointers:</p>\n\n<pre><code>float *tmp[img-&gt;channels]; // Small, up to 4 elements\nfor(int y = 0; y &lt; height; y++) {\n    for(int ch = 0; ch &lt; img-&gt;channels; ch++) {\n        tmp[ch] = &amp;img-&gt;channel[ch]-&gt;pixels[width * y];\n    }\n    callback(tmp, img-&gt;channels);\n}\n</code></pre>\n\n<p>My Rust attempt (<a href=\"https://play.rust-lang.org/?code=%0Afn%20callback(rows%3A%20%26%5B%26mut%20%5Bf32%5D%5D)%20%7B%0A%7D%0A%0Astruct%20img%20%7B%0A%20%20%20%20channel%3A%20Vec%3Cchan%3E%2C%0A%7D%0A%0Astruct%20chan%20%7B%0A%20%20%20%20pixels%3A%20Option%3CVec%3Cf32%3E%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20height%20%3D%20100%3B%0A%20%20%20%20let%20width%20%3D%20100%3B%0A%20%20%20%20let%20img%20%3D%20img%7Bchannel%3AVec%3A%3Anew()%7D%3B%0A%20%20%20%20%0A%20%20%20%20for%20y%20in%200..height%20%7B%0A%20%20%20%20%20%20%20%20let%20tmp%20%3D%20%26img.channel.iter().map(%7Cchannel%7C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%26mut%20channel.pixels.as_ref().unwrap()%5Bwidth%20*%20y%20..%20width%20*%20(y%2B1)%5D%0A%20%20%20%20%20%20%20%20%7D).collect()%3B%0A%20%20%20%20%20%20%20%20callback(tmp)%3B%0A%20%20%20%20%7D%0A%7D&amp;version=stable\">example in playpen</a>):</p>\n\n<pre><code>for y in 0..height {\n    let tmp = &amp;img.channel.iter().map(|channel| {\n        &amp;mut channel.pixels.as_ref().unwrap()[width * y .. width * (y+1)]\n    }).collect();\n    callback(tmp);\n}\n</code></pre>\n\n<p>But it's rejected:</p>\n\n<blockquote>\n  <p>a collection of type <code>[&amp;mut [f32]]</code> cannot be built from an iterator over elements of type <code>&amp;mut [f32]</code></p>\n</blockquote>\n\n<p>Sadly, that sounds exactly like what I was trying to do!</p>\n\n<p>I've tried using a fixed-size array, but Rust doesn't support generics on them, so I can't populate it from an iterator, and I can't populate them in a C-like loop, because references taken in the loop don't outlive it.</p>\n\n<blockquote>\n  <p>the trait <code>core::iter::FromIterator&lt;&amp;mut [f32]&gt;</code> is not implemented for the type <code>[&amp;mut [f32]; 4]</code></p>\n</blockquote>\n\n<hr>\n\n<p>Another approach with taking slice of memory from a fixed-size array, also fails:</p>\n\n<pre><code>let mut row_tmp: [&amp;mut [f32]; 4] = unsafe{mem::zeroed()};\nfor y in 0..height {\n    row_tmp[0..channels].iter_mut().zip(img.chan.iter_mut()).map(|(t, chan)| {\n        *t = &amp;mut chan.img.as_ref().unwrap()[(width * y) as usize .. (width * (y+1)) as usize]\n    });\n    cb(&amp;row_tmp[0..channels], y, width, image_data);\n}\n</code></pre>\n\n<blockquote>\n  <p>error: cannot borrow <code>img.chan</code> as mutable more than once at a time</p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 12, "last_activity_date": 1562588539, "last_edit_date": 1562588539, "creation_date": 1432466691, "answer_id": 30422958, "question_id": 30422848, "link": "https://stackoverflow.com/questions/30422848/how-do-i-compute-the-dot-product-of-two-rust-arrays-slices-vectors/30422958#30422958", "title": "How do I compute the dot product of two Rust arrays / slices / vectors?", "body": "<p>In <code>map()</code>, you don't have to deal with the fact that the iterator returns an <code>Option</code>. This is taken care of by <code>map()</code>. You need to supply a function taking the tuple of both borrowed values. You were close with your second try, but with the wrong syntax. This is the right one:</p>\n\n<pre><code>a.iter().zip(b.iter()).map(|(x, y)| x * y).sum()\n</code></pre>\n\n<p>Your final program required an annotation on <code>r</code>:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    let b = a.clone();\n\n    let r: i32 = a.iter().zip(b.iter()).map(|(x, y)| x * y).sum();\n\n    println!(\"{}\", r);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a9496c28a87579e8e826125bfea28c25\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/41017140/155423\">Why can&#39;t Rust infer the resulting type of Iterator::sum?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29548819/155423\">How do I sum a vector using fold?</a></li>\n</ul>\n\n<hr>\n\n<p>More info on the closure passed to <code>map</code>: I have written <code>...map(|(x, y)| x * y)</code>, but for more complicated operations you would need to delimit the closure body with <code>{}</code>: </p>\n\n<pre><code>.map(|(x, y)| {\n    do_something();\n    x * y\n})\n</code></pre>\n"}], "owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3088, "favorite_count": 0, "accepted_answer_id": 30422958, "answer_count": 1, "score": 6, "last_activity_date": 1562588539, "creation_date": 1432465927, "last_edit_date": 1562588282, "question_id": 30422848, "link": "https://stackoverflow.com/questions/30422848/how-do-i-compute-the-dot-product-of-two-rust-arrays-slices-vectors", "title": "How do I compute the dot product of two Rust arrays / slices / vectors?", "body": "<p>I'm trying to find the dot product of two vectors:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    let b = a.clone();\n    let r = a.iter().zip(b.iter()).map(|x, y| Some(x, y) =&gt; x * y).sum();\n    println!(\"{}\", r);\n}\n</code></pre>\n\n<p>This fails with</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=&gt;`\n --&gt; src/main.rs:4:58\n  |\n4 |     let r = a.iter().zip(b.iter()).map(|x, y| Some(x, y) =&gt; x * y).sum();\n  |                                                          ^^ expected one of `)`, `,`, `.`, `?`, or an operator here\n</code></pre>\n\n<p>I've also tried these, all of which failed:</p>\n\n<pre><code>let r = a.iter().zip(b.iter()).map(|x, y| =&gt; x * y).sum();\nlet r = a.iter().zip(b.iter()).map(Some(x, y) =&gt; x * y).sum();\n</code></pre>\n\n<p>What is the correct way of doing this?</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e650008c52d67f105acd2a898bf154c9\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n"}, {"tags": ["iterator", "rust", "lifetime"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1432465201, "post_id": 30422177, "comment_id": 48930980, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/24574741/iterator-returning-items-by-reference-lifetime-issue\">Iterator returning items by reference, lifetime issue</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432470972, "post_id": 30422177, "comment_id": 48932524, "body": "FYI, <code>loop { match i.next() { ... }}</code> is basically what <code>for v in i {}</code> desugars to."}], "answers": [{"comments": [{"owner": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "edited": false, "score": 0, "creation_date": 1432466368, "post_id": 30422716, "comment_id": 48931271, "body": "Does this mean that the iterator cannot return references, at all? I am not sure I fully understand the implications. You said that the iterator cannot return a reference into itself. What if I have another object storing the state and the iterator has to return reference into that object? How do I express the lifetime in that case?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "edited": false, "score": 0, "creation_date": 1432468995, "post_id": 30422716, "comment_id": 48932016, "body": "@elszben, yes, it is possible to do the thing with a separate object for state. Please see my update on how to write lifetimes out in this case."}, {"owner": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "edited": false, "score": 0, "creation_date": 1432479225, "post_id": 30422716, "comment_id": 48934945, "body": "Thank you! I cut the thing into two pieces, now the Permutation object holds the vectors and the iterator has the mutable indices vector and a ref to the permutation and everything works as expected:)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 38, "last_activity_date": 1432468980, "last_edit_date": 1432468980, "creation_date": 1432464986, "answer_id": 30422716, "question_id": 30422177, "link": "https://stackoverflow.com/questions/30422177/how-do-i-write-an-iterator-that-returns-references-to-itself/30422716#30422716", "title": "How do I write an iterator that returns references to itself?", "body": "<p>As far as I understand, you want want the iterator to return a vector of references into itself, right? Unfortunately, it is not possible in Rust.</p>\n\n<p>This is the trimmed down <code>Iterator</code> trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Iterator {\n    type Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Item&gt;;\n}\n</code></pre>\n\n<p>Note that <em>there is no lifetime connection</em> between <code>&amp;mut self</code> and <code>Option&lt;Item&gt;</code>. This means that <code>next()</code> method can't return references into the iterator itself. You just can't express a lifetime of the returned references. This is basically the reason that you couldn't find a way to specify the correct lifetime - it would've looked like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;Vec&lt;&amp;'a T&gt;&gt;\n</code></pre>\n\n<p>except that this is not a valid <code>next()</code> method for <code>Iterator</code> trait.</p>\n\n<p>Such iterators (the ones which can return references into themselves) are called <em>streaming iterators</em>. You can find more <a href=\"https://www.reddit.com/r/rust/comments/303a09/looking_for_more_information_on_streaming/\" rel=\"noreferrer\">here</a>, <a href=\"https://www.reddit.com/r/rust/comments/2t1rxx/more_general_iterator_trait/\" rel=\"noreferrer\">here</a> and <a href=\"https://github.com/emk/rust-streaming\" rel=\"noreferrer\">here</a>, if you want.</p>\n\n<p><strong>Update.</strong> However, you can return a reference to some other structure from your iterator - that's how most of collection iterators work. It could look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct PermutationIterator&lt;'a, T&gt; {\n    vs: &amp;'a [Vec&lt;T&gt;],\n    is: Vec&lt;usize&gt;\n}\n\nimpl&lt;'a, T&gt; Iterator for PermutationIterator&lt;'a, T&gt; {\n    type Item = Vec&lt;&amp;'a T&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Vec&lt;&amp;'a T&gt;&gt; {\n        ...\n    }\n}\n</code></pre>\n\n<p>Note how lifetime <code>'a</code> is now declared on <code>impl</code> block. It is OK to do so (required, in fact) because you need to specify the lifetime parameter on the structure. Then you can use the same <code>'a</code> both in <code>Item</code> and in <code>next()</code> return type. Again, that's how most of collection iterators work.</p>\n"}, {"comments": [{"owner": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "edited": false, "score": 0, "creation_date": 1432479149, "post_id": 30423124, "comment_id": 48934926, "body": "I want the Permutation object to own the vectors that hold the values, so I&#39;ll use values instead of refs there. I don&#39;t fully understand your motivation to limit that a specific vector can only be added once. Why is that useful? Anyway, thanks for the effort. It really helped me that so many versions got implemented:)"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "edited": false, "score": 0, "creation_date": 1432479753, "post_id": 30423124, "comment_id": 48935106, "body": "The motivation for my suggestion was to behave like other iterators in Rust&#39;s stdlib: the iterator is created all at once over the container, not in several steps. (e.g <code>myvec.iter()</code>). After one use, the iterator becomes consumed, i.e. unusable. Your <code>add()</code> design suggests the opposite. But that&#39;s not necessarily a bad thing :)"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 9, "last_activity_date": 1432470869, "last_edit_date": 1495535479, "creation_date": 1432467795, "answer_id": 30423124, "question_id": 30422177, "link": "https://stackoverflow.com/questions/30422177/how-do-i-write-an-iterator-that-returns-references-to-itself/30423124#30423124", "title": "How do I write an iterator that returns references to itself?", "body": "\n\n<p><a href=\"https://stackoverflow.com/a/30422716/155423\">@VladimirMatveev's answer</a> is correct in how it explains <em>why</em> your code cannot compile. In a nutshell, it says that an Iterator cannot yield borrowed values from within itself.</p>\n\n<p>However, it can yield borrowed values from something else. This is what is achieved with <code>Vec</code> and <code>Iter</code>: the <code>Vec</code> owns the values, and the the <code>Iter</code> is just a wrapper able to yield references within the <code>Vec</code>.</p>\n\n<p>Here is a design which achieves what you want. The iterator is, like with <code>Vec</code> and <code>Iter</code>, just a wrapper over other containers who actually own the values.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::Iterator;\n\nstruct PermutationIterator&lt;'a, T: 'a&gt; {\n    vs : Vec&lt;&amp;'a [T]&gt;,\n    is : Vec&lt;usize&gt;\n}\n\nimpl&lt;'a, T&gt; PermutationIterator&lt;'a, T&gt; {\n    fn new() -&gt; PermutationIterator&lt;'a, T&gt; { ... }\n\n    fn add(&amp;mut self, v : &amp;'a [T]) { ... }\n}\n\nimpl&lt;'a, T&gt; Iterator for PermutationIterator&lt;'a, T&gt; {\n    type Item = Vec&lt;&amp;'a T&gt;;\n    fn next(&amp;mut self) -&gt; Option&lt;Vec&lt;&amp;'a T&gt;&gt; { ... }\n}\n\nfn main() {\n    let v1 : Vec&lt;i32&gt; = (1..3).collect();\n    let v2 : Vec&lt;i32&gt; = (3..5).collect();\n    let v3 : Vec&lt;i32&gt; = (1..6).collect();\n\n    let mut i = PermutationIterator::new();\n    i.add(&amp;v1);\n    i.add(&amp;v2);\n    i.add(&amp;v3);\n\n    loop {\n        match i.next() {\n            Some(v) =&gt; { println!(\"{:?}\", v); }\n            None =&gt; {break;}\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/qJZHk0\" rel=\"noreferrer\">(Playground)</a></p>\n\n<hr>\n\n<p>Unrelated to your initial problem. If this were just me, I would ensure that all borrowed vectors are taken at once. The idea is to remove the repeated calls to <code>add</code> and to pass directly all borrowed vectors at construction:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::{Iterator, repeat};\n\nstruct PermutationIterator&lt;'a, T: 'a&gt; {\n    ...\n}\n\nimpl&lt;'a, T&gt; PermutationIterator&lt;'a, T&gt; {\n    fn new(vs: Vec&lt;&amp;'a [T]&gt;) -&gt; PermutationIterator&lt;'a, T&gt; {\n        let n = vs.len();\n        PermutationIterator {\n            vs: vs,\n            is: repeat(0).take(n).collect(),\n        }\n    }\n}\n\nimpl&lt;'a, T&gt; Iterator for PermutationIterator&lt;'a, T&gt; {\n    ...\n}\n\nfn main() {\n    let v1 : Vec&lt;i32&gt; = (1..3).collect();\n    let v2 : Vec&lt;i32&gt; = (3..5).collect();\n    let v3 : Vec&lt;i32&gt; = (1..6).collect();\n    let vall: Vec&lt;&amp;[i32]&gt; = vec![&amp;v1, &amp;v2, &amp;v3];\n\n    let mut i = PermutationIterator::new(vall);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/iZ2pIP\" rel=\"noreferrer\">(Playground)</a></p>\n\n<p>(<strong>EDIT</strong>: Changed the iterator design to take a <code>Vec&lt;&amp;'a [T]&gt;</code> rather than a <code>Vec&lt;Vec&lt;&amp;'a T&gt;&gt;</code>. It's easier to take a ref to container than to build a container of refs.)</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1522982775, "creation_date": 1522982775, "answer_id": 49684475, "question_id": 30422177, "link": "https://stackoverflow.com/questions/30422177/how-do-i-write-an-iterator-that-returns-references-to-itself/49684475#49684475", "title": "How do I write an iterator that returns references to itself?", "body": "<p>As mentioned in other answers, this is called a <em>streaming iterator</em> and it requires different guarantees from Rust's <code>Iterator</code>. One crate that provides such functionality is aptly called <a href=\"https://crates.io/crates/streaming-iterator\" rel=\"nofollow noreferrer\">streaming-iterator</a> and it provides the <a href=\"https://docs.rs/streaming-iterator/0.1.3/streaming_iterator/trait.StreamingIterator.html\" rel=\"nofollow noreferrer\"><code>StreamingIterator</code></a> trait.</p>\n\n<p>Here is one example of implementing the trait:</p>\n\n<pre><code>extern crate streaming_iterator;\n\nuse streaming_iterator::StreamingIterator;\n\nstruct Demonstration {\n    scores: Vec&lt;i32&gt;,\n    position: usize,\n}\n\n// Since `StreamingIterator` requires that we be able to call\n// `advance` before `get`, we have to start \"before\" the first\n// element. We assume that there will never be the maximum number of\n// entries in the `Vec`, so we use `usize::MAX` as our sentinel value.\nimpl Demonstration {\n    fn new() -&gt; Self {\n        Demonstration {\n            scores: vec![1, 2, 3],\n            position: std::usize::MAX,\n        }\n    }\n\n    fn reset(&amp;mut self) {\n        self.position = std::usize::MAX;\n    }\n}\n\nimpl StreamingIterator for Demonstration {\n    type Item = i32;\n\n    fn advance(&amp;mut self) {\n        self.position = self.position.wrapping_add(1);\n    }\n\n    fn get(&amp;self) -&gt; Option&lt;&amp;Self::Item&gt; {\n        self.scores.get(self.position)\n    }\n}\n\nfn main() {\n    let mut example = Demonstration::new();\n\n    loop {\n        example.advance();\n        match example.get() {\n            Some(v) =&gt; {\n                println!(\"v: {}\", v);\n            }\n            None =&gt; break,\n        }\n    }\n\n    example.reset();\n\n    loop {\n        example.advance();\n        match example.get() {\n            Some(v) =&gt; {\n                println!(\"v: {}\", v);\n            }\n            None =&gt; break,\n        }\n    }\n}\n</code></pre>\n\n<p>Unfortunately, streaming iterators will be limited until <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\"><em>generic associated types</em> (GATs)</a> from RFC 1598 are implemented.</p>\n"}], "owner": {"reputation": 375, "user_id": 4933761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a61bc63522ce3222e4e0f060ea8c3f2?s=128&d=identicon&r=PG&f=1", "display_name": "elszben", "link": "https://stackoverflow.com/users/4933761/elszben"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15598, "favorite_count": 8, "accepted_answer_id": 30422716, "answer_count": 3, "score": 36, "last_activity_date": 1522982775, "creation_date": 1432461243, "last_edit_date": 1506966514, "question_id": 30422177, "link": "https://stackoverflow.com/questions/30422177/how-do-i-write-an-iterator-that-returns-references-to-itself", "title": "How do I write an iterator that returns references to itself?", "body": "<p>I am having trouble expressing the lifetime of the return value of an <code>Iterator</code> implementation. How can I compile this code without changing the return value of the iterator? I'd like it to return a vector of references.</p>\n\n<p>It is obvious that I am not using the lifetime parameter correctly but after trying various ways I just gave up, I have no idea what to do with it.</p>\n\n<pre><code>use std::iter::Iterator;\n\nstruct PermutationIterator&lt;T&gt; {\n    vs: Vec&lt;Vec&lt;T&gt;&gt;,\n    is: Vec&lt;usize&gt;,\n}\n\nimpl&lt;T&gt; PermutationIterator&lt;T&gt; {\n    fn new() -&gt; PermutationIterator&lt;T&gt; {\n        PermutationIterator {\n            vs: vec![],\n            is: vec![],\n        }\n    }\n\n    fn add(&amp;mut self, v: Vec&lt;T&gt;) {\n        self.vs.push(v);\n        self.is.push(0);\n    }\n}\n\nimpl&lt;T&gt; Iterator for PermutationIterator&lt;T&gt; {\n    type Item = Vec&lt;&amp;'a T&gt;;\n    fn next(&amp;mut self) -&gt; Option&lt;Vec&lt;&amp;T&gt;&gt; {\n        'outer: loop {\n            for i in 0..self.vs.len() {\n                if self.is[i] &gt;= self.vs[i].len() {\n                    if i == 0 {\n                        return None; // we are done\n                    }\n                    self.is[i] = 0;\n                    self.is[i - 1] += 1;\n                    continue 'outer;\n                }\n            }\n\n            let mut result = vec![];\n\n            for i in 0..self.vs.len() {\n                let index = self.is[i];\n                result.push(self.vs[i].get(index).unwrap());\n            }\n\n            *self.is.last_mut().unwrap() += 1;\n\n            return Some(result);\n        }\n    }\n}\n\nfn main() {\n    let v1: Vec&lt;_&gt; = (1..3).collect();\n    let v2: Vec&lt;_&gt; = (3..5).collect();\n    let v3: Vec&lt;_&gt; = (1..6).collect();\n\n    let mut i = PermutationIterator::new();\n    i.add(v1);\n    i.add(v2);\n    i.add(v3);\n\n    loop {\n        match i.next() {\n            Some(v) =&gt; {\n                println!(\"{:?}\", v);\n            }\n            None =&gt; {\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=5043a6c209abf337921630e8064ad4a7&amp;version=stable\" rel=\"noreferrer\">Playground link</a>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0261]: use of undeclared lifetime name `'a`\n  --&gt; src/main.rs:23:22\n   |\n23 |     type Item = Vec&lt;&amp;'a T&gt;;\n   |                      ^^ undeclared lifetime\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 4, "creation_date": 1432458212, "post_id": 30421726, "comment_id": 48929179, "body": "We should add, this is intentional: description is for a <i>cheap</i> error description, use <code>Display</code> trait for an allocated/formatted error text. (You can&#39;t get a long lived borrow out of the RefCell either)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1432465131, "post_id": 30421726, "comment_id": 48930962, "body": "Eagerly constructing a string in <code>new</code> is hardly <i>lazy</i>\u2026 \ud83d\ude1b"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1432466811, "post_id": 30421726, "comment_id": 48931405, "body": "@ChrisMorgan: It&#39;s <i>very</i> lazy, after all, to do it lazily would require more effort.  (Can&#39;t see that last character, no idea what tone you were going for)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432467891, "post_id": 30421726, "comment_id": 48931703, "body": "You are mixing the lazy programming term with the English lazy. The former means to wait to do something until the last second (on demand) and usually cache the result. The latter is the amount of effort the human puts into the code. A non-lazy human can create lazily-evaluated code. ^_^"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1432461885, "last_edit_date": 1432461885, "creation_date": 1432457948, "answer_id": 30421726, "question_id": 30421603, "link": "https://stackoverflow.com/questions/30421603/implementing-error-description-with-own-string/30421726#30421726", "title": "Implementing Error description with own string", "body": "<p>No; the method signature simply does not allow you to dynamically construct the string.  Also, because it uses <code>&amp;self</code> (<em>i.e.</em> an immutable pointer), you can't use your second workaround.</p>\n\n<p>Since all types that implement <code>Error</code> must <em>also</em> implement <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\"><code>Display</code></a> (whose whole purpose is to format a value for display to the user), <em>that</em> would be the appropriate place to generate a non-trivial message.</p>\n\n<p>Or as you suggested, if you're feeling lazy, do it in <code>MissingParamError::new</code>.</p>\n\n<hr>\n\n<p><s>Actually, you <em>can</em> use the second workaround if you switch to <code>RefCell&lt;Option&lt;String&gt;&gt;</code> in order to get interior mutability, but that's a bit overkill.</s></p>\n\n<p>Actually actually, you can't, since you can't get a long-lived borrow from a <code>RefCell</code> (thanks, @bluss).</p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 825, "favorite_count": 0, "accepted_answer_id": 30421726, "answer_count": 1, "score": 5, "last_activity_date": 1432470742, "creation_date": 1432456893, "last_edit_date": 1432470742, "question_id": 30421603, "link": "https://stackoverflow.com/questions/30421603/implementing-error-description-with-own-string", "title": "Implementing Error description with own string", "body": "<p>I'd like to implement an error description which uses one of the error's parameters, but I can't find a way to return a description which doesn't disappear.</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\npub struct MissingParamError {\n    name: Box&lt;String&gt;\n}\n\nimpl Error for MissingParamError {\n    fn description(&amp;self) -&gt; &amp;str {\n        &amp;format!(\"Missing parameter {}\", self.name)\n    }\n}\n</code></pre>\n\n<p>This of course causes an error due to the generated description going out of scope.</p>\n\n<p>Is there any workaround for this apart from:</p>\n\n<ul>\n<li>adding <code>MissingParamError::new</code> which will pre-render full description</li>\n<li>adding an <code>Option&lt;String&gt;</code> which would render the description on demand and keep it around</li>\n</ul>\n"}, {"tags": ["recursion", "rust", "ownership"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1432456134, "post_id": 30418966, "comment_id": 48928698, "body": "You could pass ownership, and have the function return a tuple with the answer and the cache: <a href=\"http://is.gd/tUadZ0\" rel=\"nofollow noreferrer\">PlayPen</a>"}], "answers": [{"comments": [{"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 0, "creation_date": 1432466204, "post_id": 30419013, "comment_id": 48931238, "body": "Hmm. I didn&#39;t know I could have a mutable value in an immutable variable. Are you sure? <code>let mut cache = </code> makes both mutable - is there a way to declare just the structure mutable? Also, if I add <code>cache = &amp;mut HashMap::new();</code> to the top of <code>fib</code>, I get a lifetime error, but not a &quot;you can&#39;t re-assign this variable&quot; error."}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 0, "creation_date": 1432466259, "post_id": 30419013, "comment_id": 48931250, "body": "Also: interesting that &quot;this is a mutable borrow&quot; is checked via a type. Thanks for helping me understand. :)"}, {"owner": {"reputation": 466, "user_id": 3260594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/seNDu.png?s=128&g=1", "display_name": "Snorre", "link": "https://stackoverflow.com/users/3260594/snorre"}, "reply_to_user": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 0, "creation_date": 1432468776, "post_id": 30419013, "comment_id": 48931956, "body": "@NathanLong You can indeed have a mutable reference in an immutable variable. This is because Rust just needs the mutable reference to be unique: no other piece of code may be able to read or modify the value. It is part of the borrow checker of the compiler to make sure, that all <code>&amp;mut</code> are guaranteed to be unique (the same isn&#39;t required for <code>&amp;</code>). Since variables are always unique (since you own them), an immutable <code>&amp;mut</code> reference is still unique, and it can therefore be modified. You may want to check out <a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">this</a> too. :)"}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 1, "creation_date": 1432474824, "post_id": 30419013, "comment_id": 48933640, "body": "Ah, right, of course. <code>main</code> could have a hash that <i>it</i> intends to mutate, but lend it to <code>print</code> immutably - &quot;I&#39;m just giving you permission to read this, not modify it&quot;."}], "tags": [], "owner": {"reputation": 466, "user_id": 3260594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/seNDu.png?s=128&g=1", "display_name": "Snorre", "link": "https://stackoverflow.com/users/3260594/snorre"}, "is_accepted": true, "score": 12, "last_activity_date": 1432428371, "creation_date": 1432428371, "answer_id": 30419013, "question_id": 30418966, "link": "https://stackoverflow.com/questions/30418966/why-do-i-not-need-to-explicitly-lend-a-borrowed-mutable-variable/30419013#30419013", "title": "Why do I not need to explicitly lend a borrowed, mutable variable?", "body": "<p>Your three points are pretty much spot-on. When the compiler won't allow you to pass <code>&amp;mut cache</code>, it is because the value is actually already borrowed. The type of <code>cache</code> is <code>&amp;mut HashMap&lt;i32, i32&gt;</code>, so passing <code>&amp;mut cache</code> results in a value of type <code>&amp;mut &amp;mut HashMap&lt;i32, i32&gt;</code>. Just passing <code>cache</code> results in the expected type.</p>\n\n<p>The specific error message <code>cannot borrow immutable local variable cache as mutable</code> is triggered because the variable <code>cache</code> isn't itself mutable, even though the memory it points to (the <code>HashMap</code>) is. This is because the argument declaration <code>cache: &amp;mut HashMap&lt;i32, i32&gt;</code> doesn't declare a <code>mut</code> variable. This is similar to how a <code>let</code> differs in mutability from a <code>let mut</code>. Rust does support mutable arguments, which in this case would look like <code>mut cache: &amp;mut HashMap&lt;i32, i32&gt;</code>.</p>\n"}], "owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 814, "favorite_count": 0, "accepted_answer_id": 30419013, "answer_count": 1, "score": 9, "last_activity_date": 1432465516, "creation_date": 1432427850, "last_edit_date": 1432465516, "question_id": 30418966, "link": "https://stackoverflow.com/questions/30418966/why-do-i-not-need-to-explicitly-lend-a-borrowed-mutable-variable", "title": "Why do I not need to explicitly lend a borrowed, mutable variable?", "body": "<p>I've just written a small Rust program which calculates Fibonacci numbers and memoizes the calculation. It works, but I'm a little confused about why, especially the recursive call. (It also probably isn't idiomatic.)</p>\n\n<p>Here's the program:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let n = 42; // hardcoded for simplicity\n    let mut cache = HashMap::new();\n    let answer = fib(n, &amp;mut cache);\n    println!(\"fib of {} is {}\", n, answer);\n}\n\nfn fib(n: i32, cache: &amp;mut HashMap&lt;i32,i32&gt;) -&gt; i32 {\n    if cache.contains_key(&amp;n) {\n        return cache[&amp;n];\n    } else {\n        if n &lt; 1 { panic!(\"must be &gt;= 1\") }\n\n        let answer = if n == 1 {\n            0\n        } else if n == 2 {\n            1\n        } else {\n            fib(n - 1, cache) + fib(n - 2, cache)\n        };\n        cache.insert(n, answer);\n        answer\n    }\n}\n</code></pre>\n\n<p>Here's how I understand what's going on:</p>\n\n<ul>\n<li>In <code>main</code>, <code>let mut cache</code> means \"I want to be able to mutate this hashmap (or re-assign the variable)\".</li>\n<li>When <code>main</code> calls <code>fib</code>, it passes <code>&amp;mut cache</code> to say \"I'm lending you this, and you're allowed to mutate it.\"</li>\n<li>In the signature of <code>fib</code>, <code>cache: &amp;mut Hashmap</code> means \"I expect to be lent a mutable HashMap - to borrow it with permission to mutate\"</li>\n</ul>\n\n<p>(Please correct me if I'm wrong.)</p>\n\n<p>But when <code>fib</code> recurses, calling <code>fib(n -1, cache)</code>, I do not need to use <code>fib(n -1, &amp;mut cache)</code>, and I get an error if I do: \"cannot borrow immutable local variable <code>cache</code> as mutable\". Huh? It's not an immutable local variable, it's a mutable borrow - right?</p>\n\n<p>If I try <code>fib(n - 1, &amp;cache)</code>, I get a slightly different error:</p>\n\n<pre><code>error: mismatched types:\nexpected `&amp;mut std::collections::hash::map::HashMap&lt;i32, i32&gt;`,\n   found `&amp;&amp;mut std::collections::hash::map::HashMap&lt;i32, i32&gt;`\n</code></pre>\n\n<p>Which looks like it's saying \"I expected a mutable reference and got a reference to a mutable reference\".</p>\n\n<p>I know that <code>fib</code> is lending in the recursive call because if it gave up ownership, it couldn't call <code>cache.insert</code> afterwards. And I know that this isn't a special case for recursion, because if I define <code>fib2</code> to be nearly identical to <code>fib</code>, I can have them recurse via each other and it works fine.</p>\n\n<p><strong>Why do I not need to explicitly lend a borrowed, mutable variable</strong>?</p>\n"}, {"tags": ["plugins", "compiler-construction", "loading", "rust"], "answers": [{"tags": [], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "is_accepted": true, "score": 4, "last_activity_date": 1432421839, "creation_date": 1432421839, "answer_id": 30418370, "question_id": 30418297, "link": "https://stackoverflow.com/questions/30418297/how-do-i-properly-register-a-rust-compiler-plugin/30418370#30418370", "title": "How do I properly register a Rust compiler plugin?", "body": "<p>Turns out i need to add this to <code>rust_to_glsl/Cargo.toml</code></p>\n\n<pre><code>[lib]\nname = \"rust_to_glsl\"\ncrate-type = [\"dylib\"]\n</code></pre>\n\n<p>And then include it not as a <code>build-dependency</code> but normal <code>dependency</code></p>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 485, "favorite_count": 0, "accepted_answer_id": 30418370, "answer_count": 1, "score": 2, "last_activity_date": 1432428535, "creation_date": 1432421227, "last_edit_date": 1432428535, "question_id": 30418297, "link": "https://stackoverflow.com/questions/30418297/how-do-i-properly-register-a-rust-compiler-plugin", "title": "How do I properly register a Rust compiler plugin?", "body": "<p>I've been pulling my hair out over trying to get a Rust compiler plugin to register properly.</p>\n\n<p>I have a separate crate called <code>rust_to_glsl</code> that is in a subdirectory of my main code.</p>\n\n<p>Inside the <code>rust_to_glsl/src/lib.rs</code> file I have the following</p>\n\n<pre><code>#![feature(plugin_registrar)]\n#![feature(rustc_private)]\n#![crate_type=\"dylib\"]\n\nextern crate rustc;\nextern crate syntax;\n\n#[doc(hidden)]\n#[plugin_registrar]\npub fn registrar(registry: &amp;mut rustc::plugin::Registry) {\n    println!(\"Test\");\n    registry.register_macro(\"to_glsl\", expand);\n}\n</code></pre>\n\n<p>Plus I have defined the actual <code>expand</code> function.</p>\n\n<p>In <code>src/main.rs</code> I'm trying to pull in that plugin/crate.</p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(rust_to_glsl)]\n</code></pre>\n\n<p>And then I'm trying to use that macro here:</p>\n\n<pre><code>fn main() {\n    let glsl = to_glsl!(\n        const x: uint = 5;\n\n        static texture: &amp;Texture2d = 1;\n\n        fn hello() {\n            min(5, 3 * 1 + 5)\n        }\n    );\n\n    println!(\"{}\", glsl);\n}\n</code></pre>\n\n<p>If I compile that, I get this error:</p>\n\n<pre><code>Compiling opal v0.1.0 (file:///Users/chris/Code/Rust/gl)\nsrc/main.rs:2:11: 2:23 error: can't find crate for `rust_to_glsl`\nsrc/main.rs:2 #![plugin(rust_to_glsl)]\n</code></pre>\n\n<p>During the build process I notice that <code>rust_to_glsl</code> isn't being compiled (with <code>cargo build</code>).</p>\n\n<p>If I add in <code>extern crate rust_to_glsl</code>, then it compiles <code>rust_to_glsl</code>.\nBut then squarks by saying</p>\n\n<pre><code>49:23 error: macro undefined: 'to_glsl!'\nsrc/main.rs:49     let glsl = to_glsl!(\n</code></pre>\n\n<p>I'm not sure if I need to <code>use</code> the macro or if all macros are global.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "edited": false, "score": 0, "creation_date": 1432415294, "post_id": 30417517, "comment_id": 48921187, "body": "I had to initialize received_message_buf but that works."}, {"owner": {"reputation": 2003, "user_id": 342155, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/43ce3211f662d8627fbc3996af378ec8?s=128&d=identicon&r=PG", "display_name": "krzysz00", "link": "https://stackoverflow.com/users/342155/krzysz00"}, "reply_to_user": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "edited": false, "score": 0, "creation_date": 1432415415, "post_id": 30417517, "comment_id": 48921219, "body": "Yeah. Didn&#39;t notice that variable was initialized. It&#39;s always a good idea to initialize your variables, since Rust doesn&#39;t have C&#39;s &quot;magic auto zero&quot; rule."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432416607, "post_id": 30417517, "comment_id": 48921468, "body": "@krzysz00 &quot;magic auto zero rule&quot;? Last I checked, local variables <i>aren&#39;t</i> initialized to anything in C. This is an example of where Rust is trying to prevent you from using uninitialized values that would have otherwise bit you in C."}, {"owner": {"reputation": 2003, "user_id": 342155, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/43ce3211f662d8627fbc3996af378ec8?s=128&d=identicon&r=PG", "display_name": "krzysz00", "link": "https://stackoverflow.com/users/342155/krzysz00"}, "edited": false, "score": 0, "creation_date": 1432598886, "post_id": 30417517, "comment_id": 48976835, "body": "I mis-spoke. I meant the zero-initialized global rule."}], "tags": [], "owner": {"reputation": 2003, "user_id": 342155, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/43ce3211f662d8627fbc3996af378ec8?s=128&d=identicon&r=PG", "display_name": "krzysz00", "link": "https://stackoverflow.com/users/342155/krzysz00"}, "is_accepted": true, "score": 3, "last_activity_date": 1432414627, "creation_date": 1432414627, "answer_id": 30417517, "question_id": 30417483, "link": "https://stackoverflow.com/questions/30417483/expected-mut-u8-when-calling-readread/30417517#30417517", "title": "Expected &amp;mut [u8] when calling Read::read", "body": "<p>You need to use <code>&amp;mut received_message_buf</code> instead of <code>&amp;</code>. </p>\n\n<p><code>&amp;mut</code> creates a mutable reference (so <code>read()</code> can put things into your buffer), while <code>&amp;</code> creates an immutable reference.</p>\n"}], "owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1488, "favorite_count": 0, "accepted_answer_id": 30417517, "answer_count": 1, "score": 0, "last_activity_date": 1432415753, "creation_date": 1432414435, "last_edit_date": 1432415753, "question_id": 30417483, "link": "https://stackoverflow.com/questions/30417483/expected-mut-u8-when-calling-readread", "title": "Expected &amp;mut [u8] when calling Read::read", "body": "<pre><code>use std::io::Read;\nuse std::net::TcpListener;\n\nstruct Server&lt;'a&gt; {\n    ip_addr: &amp;'a str,\n}\n\nimpl&lt;'a&gt; Server&lt;'a&gt; {\n    fn receive(&amp;self) {\n        let mut received_message_buf: [u8; 100];\n\n        let tcp_listener = TcpListener::bind(self.ip_addr).unwrap();\n        tcp_listener.accept().unwrap().0.read(&amp;received_message_buf);\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I'm getting mismatched types:</p>\n\n<pre><code>&lt;anon&gt;:13:47: 13:68 error: mismatched types:\n expected `&amp;mut [u8]`,\n    found `&amp;[u8; 100]`\n(values differ in mutability) [E0308]\n&lt;anon&gt;:13         tcp_listener.accept().unwrap().0.read(&amp;received_message_buf);\n                                                        ^~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 11225, "user_id": 471129, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec5a6cce700294c7c564becb11fa3c1?s=128&d=identicon&r=PG", "display_name": "Erik Eidt", "link": "https://stackoverflow.com/users/471129/erik-eidt"}, "edited": false, "score": 1, "creation_date": 1432409539, "post_id": 30416320, "comment_id": 48919526, "body": "The lifetime of &#39;b is supplied (at compile-time of course) as &#39;a in the + operation, allowing the compiler to enforce/ensure the lifetime requirements of &#39;b out to &#39;a, and then out to the variables in main, right?  So, &#39;b is not unused, per se, it is an expression of a requirement that callers (transitively) must honor."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1545405490, "post_id": 30416320, "comment_id": 94620825, "body": "Your question already says what version it applies to: <i>I&#39;m implementing a trait for a reference type <b>using Rust 1.30</b>.</i>"}], "answers": [{"comments": [{"owner": {"reputation": 11225, "user_id": 471129, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec5a6cce700294c7c564becb11fa3c1?s=128&d=identicon&r=PG", "display_name": "Erik Eidt", "link": "https://stackoverflow.com/users/471129/erik-eidt"}, "edited": false, "score": 0, "creation_date": 1432412489, "post_id": 30416959, "comment_id": 48920355, "body": "I think the lifetime, even when elided by elision rules, is still conceptually present and must be supplied by and honored by callers, no?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 11225, "user_id": 471129, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec5a6cce700294c7c564becb11fa3c1?s=128&d=identicon&r=PG", "display_name": "Erik Eidt", "link": "https://stackoverflow.com/users/471129/erik-eidt"}, "edited": false, "score": 3, "creation_date": 1432413252, "post_id": 30416959, "comment_id": 48920610, "body": "Lifetimes are still totally present. Elision rules indicate how the compiler can resolve missing lifetimes at compile-time, avoiding you to write &quot;obvious&quot;, boilerplate annotations. Yes, they must be honored by callers, but in turn, those callers can benefit from elision themselves in their relevant part of the code."}, {"owner": {"reputation": 11225, "user_id": 471129, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec5a6cce700294c7c564becb11fa3c1?s=128&d=identicon&r=PG", "display_name": "Erik Eidt", "link": "https://stackoverflow.com/users/471129/erik-eidt"}, "edited": false, "score": 0, "creation_date": 1432513589, "post_id": 30416959, "comment_id": 48944169, "body": "Right. So one thing the OP is asking about is the apparent <code>unspecified ... &#39;b</code>, and my point is that it is not unspecified, that in some sense callers specify it by passing it in (effectively at compile time, and also transitively by callers of callers) and that this is true independent of (textual) elision working or not.  Of course, I may have misunderstood the OP..."}, {"owner": {"reputation": 3363, "user_id": 473899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1930c667fbd3884fd581e95eb4d5b15c?s=128&d=identicon&r=PG", "display_name": "Esteis", "link": "https://stackoverflow.com/users/473899/esteis"}, "reply_to_user": {"reputation": 11225, "user_id": 471129, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec5a6cce700294c7c564becb11fa3c1?s=128&d=identicon&r=PG", "display_name": "Erik Eidt", "link": "https://stackoverflow.com/users/471129/erik-eidt"}, "edited": false, "score": 0, "creation_date": 1432547179, "post_id": 30416959, "comment_id": 48954195, "body": "Thank you @ErikEidt and mdup for reading and answering my question so carefully. Your answers &quot;there must always be a lifetime, either explicit or deduced&quot; (Erik) + &quot;the compiler can&#39;t infer this one yet&quot; (mdup), together answer both parts of my question &#39;why add a lifetime at all, and why can&#39;t I elide it&#39;. Thank you both."}, {"owner": {"reputation": 3363, "user_id": 473899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1930c667fbd3884fd581e95eb4d5b15c?s=128&d=identicon&r=PG", "display_name": "Esteis", "link": "https://stackoverflow.com/users/473899/esteis"}, "edited": false, "score": 1, "creation_date": 1432547403, "post_id": 30416959, "comment_id": 48954313, "body": "And special thanks for adding the link to the RFC and the issue. Pointing new people to primary sources and fora is invaluable for teaching people where to research answers, but also for drawing people into communities."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 12, "last_activity_date": 1545404966, "last_edit_date": 1545404966, "creation_date": 1432410735, "answer_id": 30416959, "question_id": 30416320, "link": "https://stackoverflow.com/questions/30416320/why-is-a-lifetime-needed-when-implementing-a-trait-on-a-reference-type-if-the-li/30416959#30416959", "title": "Why is a lifetime needed when implementing a trait on a reference type if the lifetime is otherwise unused, in Rust &lt; 1.31?", "body": "<h1>Rust 1.31 and above</h1>\n\n<p>The reason is simple: it wasn't implemented until Rust 1.31.</p>\n\n<p>Now, the initial example compiles, and you can write <code>impl Add for &amp;Inches</code> instead of <code>impl&lt;'b&gt; Add for &amp;'b Inches</code>. This is because 1.31.0 <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1310-2018-12-06\" rel=\"nofollow noreferrer\">stabilized new lifetime elision rules</a>.</p>\n\n<h1>Before Rust 1.31</h1>\n\n<p>If you look at the <a href=\"https://github.com/rust-lang/rfcs/blob/704f0060176418659698eb63642e2071b109e029/active/0000-lifetime-elision.md\" rel=\"nofollow noreferrer\">RFC for lifetime elision</a> you can see that your use case should be covered:</p>\n\n<pre><code>impl Reader for BufReader { ... }                       // elided\nimpl&lt;'a&gt; Reader for BufReader&lt;'a&gt; { .. }                // expanded\n</code></pre>\n\n<p>However, I tried in the playground and <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=f318afaf11baef16d338821d1e359b1e\" rel=\"nofollow noreferrer\">it doesn't work</a>. The reason is that <a href=\"https://github.com/rust-lang/rust/issues/15872\" rel=\"nofollow noreferrer\">it's not implemented yet</a>.</p>\n\n<p>I grepped Rust's source code for such cases, but there are suprisingly few of them. I could only find this series of implementations for <code>Add</code> on native types:</p>\n\n<pre><code>impl Add&lt;u8&gt; for u8\nimpl&lt;'a&gt; Add&lt;u8&gt; for &amp;'a u8\nimpl&lt;'a&gt; Add&lt;&amp;'a u8&gt; for u8\nimpl&lt;'a, 'b&gt; Add&lt;&amp;'a u8&gt; for &amp;'b u8\n</code></pre>\n\n<p>As you can see the lifetimes are all explicit here; no elision happens. </p>\n\n<p>For your specific problem, I believe you'll have to stick with explicit lifetimes until the RFC implementation is done!</p>\n"}], "owner": {"reputation": 3363, "user_id": 473899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1930c667fbd3884fd581e95eb4d5b15c?s=128&d=identicon&r=PG", "display_name": "Esteis", "link": "https://stackoverflow.com/users/473899/esteis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3279, "favorite_count": 2, "accepted_answer_id": 30416959, "answer_count": 1, "score": 13, "last_activity_date": 1545405928, "creation_date": 1432406492, "last_edit_date": 1545405928, "question_id": 30416320, "link": "https://stackoverflow.com/questions/30416320/why-is-a-lifetime-needed-when-implementing-a-trait-on-a-reference-type-if-the-li", "title": "Why is a lifetime needed when implementing a trait on a reference type if the lifetime is otherwise unused, in Rust &lt; 1.31?", "body": "<p>I'm implementing a trait for a reference type using a Rust older than 1.31. <strong>Why does Rust want an explicit lifetime when I tell it what reference type I'm implementing the trait for?</strong></p>\n\n<p>Here's a simple example. A struct <code>Inches</code>, an implementation of the\n<code>Add</code> trait for <code>&amp;Inches</code>, and a function that uses that implementation.</p>\n\n<h3>Initial example</h3>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=f7681a92c690b9452cab7590f8540462\" rel=\"nofollow noreferrer\">(Rust playground link)</a></p>\n\n<pre><code>use std::ops::Add;\n\nstruct Inches(i32);\n\n// this would work: impl&lt;'b&gt; Add for &amp;'b Inches\nimpl Add for &amp;Inches {\n    type Output = Inches;\n\n    fn add(self, other: &amp;Inches) -&gt; Inches {\n        let &amp;Inches(x) = self;\n        let &amp;Inches(y) = other;\n\n        Inches(x + y)\n    }\n}\n\n// lifetime specifier needed here because otherwise \n// `total = hilt + blade` doesn't know whether `total` should live\n// as long as `hilt`, or as long as `blade`.\nfn add_inches&lt;'a&gt;(hilt: &amp;'a Inches, blade: &amp;'a Inches) {\n    let total = hilt + blade;\n    let Inches(t) = total;\n    println!(\"length {}\", t);\n}\n\nfn main() {\n    let hilt = Inches(10);\n    let blade = Inches(20);\n\n    add_inches(&amp;hilt, &amp;blade);\n}\n</code></pre>\n\n<p>Compilation fails with the following error:</p>\n\n<pre><code>error: missing lifetime specifier [E0106]\n    impl Add for &amp;Inches {\n                 ^~~~~~~\n</code></pre>\n\n<h3>I add the missing lifetime specifier (still doesn't compile)</h3>\n\n<pre><code>// was: impl Add for &amp;Inches {\nimpl Add for &amp;'b Inches {\n    ...\n}\n</code></pre>\n\n<p>Compilation error:</p>\n\n<pre><code>error: use of undeclared lifetime name `'b` [E0261]\n    impl Add for &amp;'b Inches {\n</code></pre>\n\n<h3>I declare the lifetime on the <code>impl</code> (now it compiles)</h3>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=bd67f0bbc30977eb86f3523fc1346cf6\" rel=\"nofollow noreferrer\">(Rust playground link)</a></p>\n\n<pre><code>// was: impl Add for &amp;'b Inches {\nimpl&lt;'b&gt; Add for &amp;'b Inches {\n    ...\n}\n</code></pre>\n\n<p>This, finally, compiles correctly.</p>\n\n<h3>My question</h3>\n\n<blockquote>\n  <p>Why is <code>&amp;Inches</code> in <code>impl Add for &amp;Inches</code> considered to lack a\n  lifetime specifier? What problem is solved by telling the compiler\n  that this Add method is for <code>&amp;Inches</code> with some unspecified non-static\n  lifetime <code>'b</code>, and then never referring to that lifetime anywhere\n  else?</p>\n</blockquote>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432400836, "post_id": 30415354, "comment_id": 48916739, "body": "Is there a reason that you can&#39;t use a <code>Vec</code> in this case?"}, {"owner": {"reputation": 3589, "user_id": 711380, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/645d55fac31440e2cd1bc6432690199f?s=128&d=identicon&r=PG", "display_name": "remram", "link": "https://stackoverflow.com/users/711380/remram"}, "edited": false, "score": 3, "creation_date": 1432408815, "post_id": 30415354, "comment_id": 48919333, "body": "For anyone else going &quot;WTF&quot;, <a href=\"https://github.com/rust-lang/rust/blob/1.0.0/src/libcore/array.rs#L41\" rel=\"nofollow noreferrer\">here is the implementation</a>"}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 7, "last_activity_date": 1432401198, "last_edit_date": 1432401198, "creation_date": 1432400863, "answer_id": 30415422, "question_id": 30415354, "link": "https://stackoverflow.com/questions/30415354/how-to-clone-an-array-with-length-bigger-than-32/30415422#30415422", "title": "How to clone an array with length bigger than 32?", "body": "<p>You can't add the <code>impl Clone</code> in your own code. This problem will be fixed at some point, in the mean time you can mostly work around it with varying amount of effort:</p>\n\n<ul>\n<li>If you just have a local variable of a concrete type and the type is <code>Copy</code> (as in your example), you can simply <em>copy</em> rather than <em>cloning</em>, i.e., <code>let _cloned = source;</code>.</li>\n<li>If the array is a field of a struct you want to implement <code>Clone</code> for (and <code>derive</code> won't work), you can still manually implement <code>Clone</code> and using the above trick in the implementation.</li>\n<li>Cloning an array of non-<code>Copy</code> types is trickier, because <code>Clone</code> can fail. You could write out <code>[x[0].clone(), x[1].clone(), ...]</code> for as many times as you need, it's a lot of work but at least it's certain to be correct.</li>\n<li>If all else fails, you can still create a newtype wrapper. This requires quite a bit of boilerplate to delegate all the other traits you need, but then you can (again, manually) implement <code>Clone</code>.</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "is_accepted": false, "score": 5, "last_activity_date": 1532870634, "last_edit_date": 1532870634, "creation_date": 1532853281, "answer_id": 51578604, "question_id": 30415354, "link": "https://stackoverflow.com/questions/30415354/how-to-clone-an-array-with-length-bigger-than-32/51578604#51578604", "title": "How to clone an array with length bigger than 32?", "body": "<p>You can clone arbitrary-length arrays since Rust 1.21.0. The \"Libraries\" section of the <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1210-2017-10-12\" rel=\"nofollow noreferrer\">CHANGELOG</a> says:</p>\n\n<blockquote>\n  <p>Generate builtin impls for <code>Clone</code> for all arrays and tuples that are <code>T: Clone</code></p>\n</blockquote>\n"}], "owner": {"reputation": 609, "user_id": 1670894, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7fcce9d3b958e074a85d4a3625563961?s=128&d=identicon&r=PG", "display_name": "Luigi Sgro", "link": "https://stackoverflow.com/users/1670894/luigi-sgro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2821, "favorite_count": 2, "accepted_answer_id": 30415422, "answer_count": 2, "score": 12, "last_activity_date": 1532870634, "creation_date": 1432400449, "last_edit_date": 1432400625, "question_id": 30415354, "link": "https://stackoverflow.com/questions/30415354/how-to-clone-an-array-with-length-bigger-than-32", "title": "How to clone an array with length bigger than 32?", "body": "<p>A fixed-length array of a native type (or of a type that implements the <code>Copy</code> trait) can be cloned in Rust up to the length of 32. That is, this compiles:</p>\n\n<pre><code>fn main() {\n    let source: [i32; 32] = [0; 32]; // length 32\n    let _cloned = source.clone();\n}\n</code></pre>\n\n<p>But this doesn't:</p>\n\n<pre><code>fn main() {\n    let source: [i32; 33] = [0; 33]; // length 33\n    let _cloned = source.clone(); // &lt;-- compile error\n}\n</code></pre>\n\n<p>In fact, the <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\">trait <code>Clone</code></a> only declares a method for each generic array length, from 0 to 32.</p>\n\n<p>What is an efficient and idiomatic way to clone a generic array of length, say, 33?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1432399211, "post_id": 30415096, "comment_id": 48916209, "body": "I noticed the pattern that if it comes to cargo questions, the usual result is: build without cargo. Some things in the rust/cargo infrastructure are not really finished yet."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432400201, "post_id": 30415096, "comment_id": 48916533, "body": "Could you update your question with some specifics? Maybe include your <code>Cargo.toml</code> that shows the options you have?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432400355, "post_id": 30415096, "comment_id": 48916573, "body": "<i>If so, what&#39;s the point of having cargo?</i> seems overly fatalistic. Many projects are using Cargo just fine, but it&#39;s certainly possible that not every use case that exists in the entire spectrum of programming is captured. It&#39;s rather like asking &quot;If Rust doesn&#39;t garbage-collect my memory for me, what&#39;s the point of having Rust?&quot;"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1432400411, "post_id": 30415096, "comment_id": 48916590, "body": "You <i>can</i> have a binary and a library in the same Cargo project. I&#39;m doing that myself. If you&#39;re trying to do that and something is not working, please show code/<code>Cargo.toml</code> and explain the problem in detail."}, {"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432589818, "post_id": 30415096, "comment_id": 48974614, "body": "@shepmaster  can you look at my edit? I hope it provides more insight into what I was trying to do. Thank you for your responses and apologies for my moment of anger/frustration."}, {"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1432589847, "post_id": 30415096, "comment_id": 48974624, "body": "@delnan I&#39;ve added the <code>Cargo.toml</code> nothing fancy. Perhaps thats what I&#39;m missing?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432592044, "post_id": 30415096, "comment_id": 48975288, "body": "@sbditto85 no worries, we&#39;ve all been there with software at some point in time! ^_^"}], "answers": [{"comments": [{"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1432590668, "post_id": 30446443, "comment_id": 48974875, "body": "what if the cfg was more like dosomething=&quot;value&quot; ? could I still use features? Thanks for the quick response!"}, {"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1432590725, "post_id": 30446443, "comment_id": 48974897, "body": "Also something I just stumbled upon is that cargo can take a build script. I think I&#39;ll look further into that (<a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow noreferrer\">doc.crates.io/build-script.html</a>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 1, "creation_date": 1432591535, "post_id": 30446443, "comment_id": 48975149, "body": "@sbditto85 I don&#39;t believe so. Features are implemented as <code>--cfg feature=&quot;dosomething&quot;</code>, so they are <i>already</i> the parameter. However, you should be able to flatten the namespace. Instead of <code>dosomething(1)</code>, you can have <code>dosomething-1</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1432590481, "creation_date": 1432590481, "answer_id": 30446443, "question_id": 30415096, "link": "https://stackoverflow.com/questions/30415096/how-to-build-a-binary-and-a-library-with-the-same-configuration-options/30446443#30446443", "title": "How to build a binary and a library with the same configuration options?", "body": "<p>If I understand you correctly, then Cargos <em>features</em> should help out here:</p>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>#[cfg(feature = \"dosomething\")]\npub use self::with_cfg::dosomething;\n\n#[cfg(not(feature = \"dosomething\"))]\npub use self::without_cfg::dosomething;\n\n#[cfg(feature = \"dosomething\")]\nmod with_cfg {\n    pub fn dosomething() {\n        println!(\"config option\");\n    }\n}\n\n#[cfg(not(feature = \"dosomething\"))]\nmod without_cfg {\n    pub fn dosomething() {\n        println!(\"no config option\");\n    }\n}\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>extern crate what;\n\nuse what::dosomething;\n\nfn main() {\n    dosomething();\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"what\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\n\n[features]\ndosomething = []\n</code></pre>\n\n<p>Now, when I can compile or run in either mode:</p>\n\n<pre><code>$ cargo run\n   Compiling what v0.1.0 (file:///private/tmp/what)\n     Running `target/debug/what`\nno config option\n\n$ cargo run --features dosomething\n   Compiling what v0.1.0 (file:///private/tmp/what)\n     Running `target/debug/what`\nconfig option\n</code></pre>\n"}], "owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4082, "favorite_count": 1, "accepted_answer_id": 30446443, "answer_count": 1, "score": 7, "last_activity_date": 1432590481, "creation_date": 1432399036, "last_edit_date": 1592644375, "question_id": 30415096, "link": "https://stackoverflow.com/questions/30415096/how-to-build-a-binary-and-a-library-with-the-same-configuration-options", "title": "How to build a binary and a library with the same configuration options?", "body": "<p>As of the time of asking, if you have a bin and a lib in the same cargo project and would like to build the bin and lib with specific rustc cfg options it doesn't work.</p>\n<p>You can build one or the other with rustc cfg options, but not both. And if you try and build the lib then the bin when the bin is compiled it recompiled the lib without the rustc options.</p>\n<p>Is there a way to do both and if not why? Am I doomed to have to create my own build script anyways? If so, what's the point of having cargo?</p>\n<h1>EDIT</h1>\n<p><em>ok so maybe i was being a little dramatic</em></p>\n<h3>Background/Expansion</h3>\n<p>Say I had something like:</p>\n<p>src/lib.rs</p>\n<pre><code>pub mod mylib {\n\n    #[cfg(not(dosomething))]\n    pub use self::without_cfg::dosomething;\n\n    #[cfg(dosomething)]\n    pub use self::with_cfg::dosomething;\n\n\n    mod with_cfg {\n        pub fn dosomething() {\n            println!(&quot;config option&quot;);\n        }\n    }\n\n    mod without_cfg {\n        pub fn dosomething() {\n            println!(&quot;no config option&quot;);\n        }\n    }\n\n} \n</code></pre>\n<p>src/main.rs</p>\n<pre><code>extern crate modules;\n\nuse modules::mylib::dosomething;\n\nfn main() {\n    dosomething();\n}\n</code></pre>\n<p>So that if I compiled with the cfg option of dosomething I would get one version of a function, but if I didn't have the config I would get the &quot;default&quot; behavior or whatever.</p>\n<p>Now if I try and compile with cargo rustc I can never get a version of the bin with the cfg dosomething set in the lib.</p>\n<p>The closest I've come to being able to do it all in cargo is:</p>\n<pre><code>cargo rustc -v --lib -- --cfg dosomething\ncargo rustc -v --bin [bin name] -- --cfg dosomething\n</code></pre>\n<p>which the first command will compile the lib with the cfg but the second command with <em>recompile</em> the lib without the cfg in order to create the bin.</p>\n<p>the only workaround I've come up with is to:</p>\n<pre><code>cargo rustc -v --bin [bin name] -- --cfg dosomething\n</code></pre>\n<p>copy what it spits out for the command to compile such as:</p>\n<pre><code>rustc src/main.rs --crate-name [bin name] --crate-type bin -g --cfg dosomething --out-dir [/path/to/project]/target/debug --emit=dep-info,link -L dependency=[/path/to/project]/target/debug -L dependency=[/path/to/project]/target/debug/deps --extern modules=[/path/to/project]/target/debug/libmodules.rlib`\n</code></pre>\n<p>then run:</p>\n<pre><code>cargo rustc -v --lib -- --cfg dosomething\n</code></pre>\n<p>and finally copy and paste the rustc command from earlier in order to compile the bin with the lib having the cfg option set.</p>\n<p>Is that the only way? Why can't I somehow specify which libs/bins get the rustc cfg options I want, even if its in the Cargo.toml? Or can I and I don't realize it?</p>\n<p>For those that asked...</p>\n<p>Cargo.toml:</p>\n<pre><code>[package]\nname = &quot;[bin name]&quot;\nversion = &quot;0.1.0&quot;\nauthors = [&quot;[Me] &lt;[my email]&gt;&quot;]\n\n[lib]\nname = &quot;modules&quot;\npath = &quot;src/lib.rs&quot;\n</code></pre>\n<p><strong>P.S. Thank you to all those who have worked on rust and cargo, all in all I find it a pleasant environment to work in and LOVE the language. Keep up the good work.</strong></p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1893, "user_id": 3831435, "user_type": "registered", "accept_rate": 77, "profile_image": "https://graph.facebook.com/829983118/picture?type=large", "display_name": "Luke Dupin", "link": "https://stackoverflow.com/users/3831435/luke-dupin"}, "edited": false, "score": 4, "creation_date": 1516814553, "post_id": 30414450, "comment_id": 83846893, "body": "Is IndexMut expected to be implemented in the future?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1893, "user_id": 3831435, "user_type": "registered", "accept_rate": 77, "profile_image": "https://graph.facebook.com/829983118/picture?type=large", "display_name": "Luke Dupin", "link": "https://stackoverflow.com/users/3831435/luke-dupin"}, "edited": false, "score": 3, "creation_date": 1516852972, "post_id": 30414450, "comment_id": 83862230, "body": "@LukeDupin doubtful. In its place the hypothetical <code>IndexSet</code> trait would be implemented."}, {"owner": {"reputation": 2035, "user_id": 2123400, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/214ff1ea0cbbe0819244fdb421495363?s=128&d=identicon&r=PG&f=1", "display_name": "Eftekhari", "link": "https://stackoverflow.com/users/2123400/eftekhari"}, "edited": false, "score": 2, "creation_date": 1561936078, "post_id": 30414450, "comment_id": 100209741, "body": "<code>*my_map.entry(&quot;a&quot;).or_insert(42) += 10;</code> Whad does that * do? Dereferencing for what part?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2035, "user_id": 2123400, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/214ff1ea0cbbe0819244fdb421495363?s=128&d=identicon&r=PG&f=1", "display_name": "Eftekhari", "link": "https://stackoverflow.com/users/2123400/eftekhari"}, "edited": false, "score": 3, "creation_date": 1562025711, "post_id": 30414450, "comment_id": 100239068, "body": "@Eftekhari with added parenthesis: <code>(*(my_map.entry(&quot;a&quot;).or_insert(42))) += 10;</code>"}, {"owner": {"reputation": 420, "user_id": 9300379, "user_type": "registered", "profile_image": "https://graph.facebook.com/10213319949658135/picture?type=large", "display_name": "German Faller", "link": "https://stackoverflow.com/users/9300379/german-faller"}, "edited": false, "score": 0, "creation_date": 1585543013, "post_id": 30414450, "comment_id": 107786600, "body": "hello, How can  I split the last line, imagine Im working with stucts and I want to change 2 values, I will not call get twice so... <code>(*example_map.get_mut(&amp;1).unwrap()).field1+=55;</code> some one can explain this to me, Im dealing with this and I dont know what to write, if let. let mut, let &amp;mut ... Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 420, "user_id": 9300379, "user_type": "registered", "profile_image": "https://graph.facebook.com/10213319949658135/picture?type=large", "display_name": "German Faller", "link": "https://stackoverflow.com/users/9300379/german-faller"}, "edited": false, "score": 1, "creation_date": 1585576601, "post_id": 30414450, "comment_id": 107801014, "body": "@GermanFaller <code>let tmp = my_map.entry(&quot;a&quot;).or_insert(some_default); tmp.a += 1; tmp.b += 2</code>."}, {"owner": {"reputation": 85, "user_id": 8396319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b7c26dd40b33adf458b92dd23f516f5?s=128&d=identicon&r=PG&f=1", "display_name": "Artyom Gevorgyan", "link": "https://stackoverflow.com/users/8396319/artyom-gevorgyan"}, "edited": false, "score": 0, "creation_date": 1600098490, "post_id": 30414450, "comment_id": 112974094, "body": "Also, if I understand correctly, if you just want to update the value of a certain key, you can simply insert the new pair <code>(key, map)</code> into a map and get what you want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 85, "user_id": 8396319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b7c26dd40b33adf458b92dd23f516f5?s=128&d=identicon&r=PG&f=1", "display_name": "Artyom Gevorgyan", "link": "https://stackoverflow.com/users/8396319/artyom-gevorgyan"}, "edited": false, "score": 0, "creation_date": 1600101333, "post_id": 30414450, "comment_id": 112975398, "body": "@ArtemHevorhian perhaps, but that&#39;s not how I&#39;d usually interpret &quot;update&quot;. To me, update means &quot;based on the previous value&quot;, while inserting again would be closer to replacing. Additionally for Rust, you may wish to mutate the value (e.g. add something to a <code>Vec</code>) instead of creating a whole new value."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 127, "last_activity_date": 1496410227, "last_edit_date": 1496410227, "creation_date": 1432394988, "answer_id": 30414450, "question_id": 30414424, "link": "https://stackoverflow.com/questions/30414424/how-can-i-update-a-value-in-a-mutable-hashmap/30414450#30414450", "title": "How can I update a value in a mutable HashMap?", "body": "<p>Indexing immutably and indexing mutably are provided by two different traits: <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"noreferrer\"><code>Index</code></a> and <a href=\"http://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"noreferrer\"><code>IndexMut</code></a>, respectively.</p>\n\n<p>Currently, <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a> does not implement <code>IndexMut</code>, while <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\"><code>Vec</code> does</a>.</p>\n\n<p><a href=\"https://github.com/rust-lang/rust/pull/23559\" rel=\"noreferrer\">The commit that removed <code>HashMap</code>'s <code>IndexMut</code> implementation</a> states:</p>\n\n<blockquote>\n  <p>This commit removes the IndexMut impls on HashMap and BTreeMap, in\n  order to future-proof the API against the eventual inclusion of an\n  IndexSet trait.</p>\n</blockquote>\n\n<p>It's my understanding that a hypothetical <code>IndexSet</code> trait would allow you to assign brand-new values to a <code>HashMap</code>, and not just read or mutate existing entries:</p>\n\n<pre><code>let mut map = HashMap::new();\nmap[\"key\"] = \"value\";\n</code></pre>\n\n<p>For now, you can use <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut\" rel=\"noreferrer\"><code>get_mut</code></a>:</p>\n\n<pre><code>*my_map.get_mut(\"a\").unwrap() += 10;\n</code></pre>\n\n<p>Or the <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"noreferrer\"><code>entry</code></a> API:</p>\n\n<pre><code>*my_map.entry(\"a\").or_insert(42) += 10;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 9, "last_activity_date": 1580987029, "creation_date": 1580987029, "answer_id": 60093507, "question_id": 30414424, "link": "https://stackoverflow.com/questions/30414424/how-can-i-update-a-value-in-a-mutable-hashmap/60093507#60093507", "title": "How can I update a value in a mutable HashMap?", "body": "<p>Considering:</p>\n\n<pre><code>let mut m = std::collections::HashMap::new();\nm.insert(\"a\", 1);\nm.insert(\"b\", 3);\nlet k = \"c\";\n</code></pre>\n\n<p>If the key already exists:  </p>\n\n<pre><code>    m.insert(k, 10 + m[k] );\n</code></pre>\n\n<p>If the key not exists:</p>\n\n<ol>\n<li>You may update a value of the key:</li>\n</ol>\n\n<pre><code>    m.insert(k, 10 + if m.contains_key(k) { m[k] } else { 0 });\n</code></pre>\n\n<ol start=\"2\">\n<li>Or first insert a key only if it doesn't already exist:</li>\n</ol>\n\n<pre><code>    m.entry(k).or_insert(0);\n    m.insert(k, 200 + m[k]);\n</code></pre>\n\n<ol start=\"3\">\n<li>Or update a key, guarding against the key possibly not being set:</li>\n</ol>\n\n<pre><code>    *m.entry(k).or_insert(0) += 3000;\n</code></pre>\n\n<p>Finally print the value:</p>\n\n<pre><code>    println!(\"{}\", m[k]); // 3210\n</code></pre>\n\n<p>See:<br>\n<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\">https://doc.rust-lang.org/std/collections/struct.HashMap.html</a></p>\n"}, {"tags": [], "owner": {"reputation": 420, "user_id": 9300379, "user_type": "registered", "profile_image": "https://graph.facebook.com/10213319949658135/picture?type=large", "display_name": "German Faller", "link": "https://stackoverflow.com/users/9300379/german-faller"}, "is_accepted": false, "score": 2, "last_activity_date": 1585545461, "creation_date": 1585545461, "answer_id": 60924470, "question_id": 30414424, "link": "https://stackoverflow.com/questions/30414424/how-can-i-update-a-value-in-a-mutable-hashmap/60924470#60924470", "title": "How can I update a value in a mutable HashMap?", "body": "<p>I will share my own Answer because I had this issue but I was working with Structs so, that way in my case was a little bit tricky</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(Debug)]\nstruct ExampleStruct {\n    pub field1: usize,\n    pub field2: f64,\n}\n\nfn main() {\n    let mut example_map = HashMap::new();\n    &amp;example_map.insert(1usize, ExampleStruct { field1: 50, field2: 184.0});\n    &amp;example_map.insert(6usize, ExampleStruct { field1: 60, field2: 486.0});\n\n    //First Try\n    (*example_map.get_mut(&amp;1).unwrap()).field1 += 55; //50+55=105\n    (*example_map.get_mut(&amp;6).unwrap()).field1 -= 25; //60-25=35\n\n    //Spliting lines\n    let op_elem = example_map.get_mut(&amp;6);\n    let elem = op_elem.unwrap();\n    (*elem).field2 = 200.0;\n\n    let op_ok_elem = example_map.get_mut(&amp;1);\n    let elem = op_ok_elem.unwrap_or_else(|| panic!(\"This msg should not appear\"));\n    (*elem).field2 = 777.0;\n\n    println!(\"Map at this point: {:?}\", example_map);\n    let op_err_elem = example_map.get_mut(&amp;8);\n    let _elem = op_err_elem.unwrap_or_else(|| panic!(\"Be careful, check you key\"));\n\n    println!(\"{:?}\", example_map);\n}\n</code></pre>\n\n<p>You can play with this on <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b5e793571c97d82cd11130bc29eea821\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32631, "favorite_count": 7, "accepted_answer_id": 30414450, "answer_count": 3, "score": 80, "last_activity_date": 1585545461, "creation_date": 1432394789, "last_edit_date": 1553106685, "question_id": 30414424, "link": "https://stackoverflow.com/questions/30414424/how-can-i-update-a-value-in-a-mutable-hashmap", "title": "How can I update a value in a mutable HashMap?", "body": "<p>Here is what I am trying to do:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut my_map = HashMap::new();\n    my_map.insert(\"a\", 1);\n    my_map.insert(\"b\", 3);\n\n    my_map[\"a\"] += 10;\n    // I expect my_map becomes {\"b\": 3, \"a\": 11}\n}\n</code></pre>\n\n<p>But this raises an error:</p>\n\n<p><strong>Rust 2015</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to immutable indexed content\n --&gt; src/main.rs:8:5\n  |\n8 |     my_map[\"a\"] += 10;\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n  |\n  = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap&lt;&amp;str, i32&gt;`\n</code></pre>\n\n<p><strong>Rust 2018</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to data in a `&amp;` reference\n --&gt; src/main.rs:8:5\n  |\n8 |     my_map[\"a\"] += 10;\n  |     ^^^^^^^^^^^^^^^^^ cannot assign\n</code></pre>\n\n<p>I don't really understand what that means, since I made the <code>HashMap</code> mutable. When I try to update an element in a <code>vector</code>, I get the expected result:</p>\n\n<pre><code>let mut my_vec = vec![1, 2, 3];\n\nmy_vec[0] += 10;\nprintln! {\"{:?}\", my_vec};\n// [11, 2, 3]\n</code></pre>\n\n<p>What is different about <code>HashMap</code> that I am getting the above error? Is there a way to update a value?</p>\n"}, {"tags": ["optimization", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432393231, "post_id": 30414145, "comment_id": 48914406, "body": "Going by the name, I&#39;m assuming that <code>NonZero</code> disallows zero values. What about values other than zero? In my example, zero might be valid, but 255 is not."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432394461, "post_id": 30414145, "comment_id": 48914781, "body": "@Shepmaster: It&#39;s hardcoded to non-0, I suppose with a trait and associated constants one could extend this... however for now you&#39;ll have to settle for mathematics. If 255 is your magic value, then applying a <code>+1</code> going to storage and <code>-1</code> coming from storage (with wrapping arithmetic) will suffice for the <code>NonZero</code> magic to work :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1432394568, "post_id": 30414145, "comment_id": 48914807, "body": "@MatthieuM. certainly, I&#39;ll just have to do more profiling to see if it&#39;s truly worth it. Using less bytes seems like an obvious win; using less bytes <i>and</i> mandatory math everywhere is less sure-fire."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432395567, "post_id": 30414145, "comment_id": 48915103, "body": "@Shepmaster: Certainly; although, with 0 being an oft-used magic value, a good number of branching instructions are specialized for it (<code>jz</code> and <code>jnz</code> come to mind), so it&#39;s unclear whether an associated constant could beat that."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1528649791, "post_id": 30414145, "comment_id": 88578465, "body": "BTW <code>NonZeroU*</code> will be stabilized in 1.28."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 23, "last_activity_date": 1540386861, "last_edit_date": 1540386861, "creation_date": 1432393114, "answer_id": 30414145, "question_id": 30414068, "link": "https://stackoverflow.com/questions/30414068/can-i-use-the-null-pointer-optimization-for-my-own-non-pointer-types/30414145#30414145", "title": "Can I use the &quot;null pointer optimization&quot; for my own non-pointer types?", "body": "<p>As of Rust 1.28, you can use <a href=\"https://doc.rust-lang.org/std/num/struct.NonZeroU8.html\" rel=\"noreferrer\"><code>std::num::NonZeroU8</code></a> (and friends).  This acts as a wrapper that tells the compiler the contents of a number will <em>never</em> contain a literal zero.  It's also why <code>Option&lt;Box&lt;T&gt;&gt;</code> is pointer-sized.</p>\n\n<p>Here's an example showing how to create an <code>Age</code> and read its payload.</p>\n\n<pre><code>use std::num::NonZeroU8;\n\nstruct Age(NonZeroU8);\n\nimpl Age {\n    pub fn new(age: u8) -&gt; Age {\n        let age = NonZeroU8::new(age).expect(\"Age cannot be zero!\");\n        Age(age)\n    }\n\n    pub fn age(&amp;self) -&gt; u8 {\n        self.0.get()\n    }\n}\n\nstruct Player {\n    age: Option&lt;Age&gt;,\n}\n\nfn main() {\n    println!(\"size: {}\", std::mem::size_of::&lt;Player&gt;());\n    // Output: size: 1\n}\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3011, "favorite_count": 4, "accepted_answer_id": 30414145, "answer_count": 1, "score": 31, "last_activity_date": 1540386861, "creation_date": 1432392579, "last_edit_date": 1495542749, "question_id": 30414068, "link": "https://stackoverflow.com/questions/30414068/can-i-use-the-null-pointer-optimization-for-my-own-non-pointer-types", "title": "Can I use the &quot;null pointer optimization&quot; for my own non-pointer types?", "body": "<p>When you have an <code>Option&lt;&amp;T&gt;</code>, the compiler knows that <code>NULL</code> is never a possible value for <code>&amp;T</code>, and <a href=\"https://stackoverflow.com/q/16504643/155423\">encodes the <code>None</code> variant as <code>NULL</code> instead</a>. This allows for space-saving:</p>\n\n<pre><code>use std::mem;\n\nfn main() {\n    assert_eq!(mem::size_of::&lt;&amp;u8&gt;(), mem::size_of::&lt;Option&lt;&amp;u8&gt;&gt;());\n}\n</code></pre>\n\n<p>However, if you do the same with a non-pointer type, there's no extra bits to store that value in and extra space is required:</p>\n\n<pre><code>use std::mem;\n\nfn main() {\n    // fails because left is 1 and right is 2\n    assert_eq!(mem::size_of::&lt;u8&gt;(), mem::size_of::&lt;Option&lt;u8&gt;&gt;()); \n}\n</code></pre>\n\n<p>In general, this is correct. However, I'd like to opt-in to the optimization because I know that my type has certain impossible values. As a made-up-example, I might have a player character that has an age. The age may be unknown, but will never be as high as <code>255</code>:</p>\n\n<pre><code>struct Age(u8);\n\nstruct Player {\n    age: Option&lt;Age&gt;,\n}\n</code></pre>\n\n<p>I'd like to be able to inform the optimizer of this constraint - <code>Age</code> can never be <code>255</code>, so it's safe to use that bit pattern as <code>None</code>. Is this possible?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "edited": false, "score": 0, "creation_date": 1577110487, "post_id": 30413545, "comment_id": 105094681, "body": "And what if the <code>4</code> is a variable instead? I can&#39;t get <code>pow</code> to work on variables at all: <i>no method named <code>pow</code> found for type <code>f64</code> in the current scope</i>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 11, "last_activity_date": 1432390995, "last_edit_date": 1432390995, "creation_date": 1432389468, "answer_id": 30413545, "question_id": 30413090, "link": "https://stackoverflow.com/questions/30413090/no-i32-f64-fallback-when-using-pow/30413545#30413545", "title": "No i32/f64 fallback when using pow()", "body": "<p>I believe this is because the fallback only happens when all the constraints on the literal have been considered (and it finds that there <em>aren't</em> any).</p>\n\n<p>In this case, to know what the type of <code>4</code> is, it has to know what <code>pow</code> is.  But <code>pow</code> is defined separately for each integral type.  So to know what <code>pow</code> you're talking about, it has to know what the type of <code>4</code> is.  But to know what the type of <code>4</code> is... and so on.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1541, "favorite_count": 0, "accepted_answer_id": 30413545, "answer_count": 1, "score": 9, "last_activity_date": 1432391601, "creation_date": 1432386735, "last_edit_date": 1432391601, "question_id": 30413090, "link": "https://stackoverflow.com/questions/30413090/no-i32-f64-fallback-when-using-pow", "title": "No i32/f64 fallback when using pow()", "body": "<p>With the following:</p>\n\n<pre><code>4.pow(2)\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>error: no method named `pow` found for type `_` in the current scope\n</code></pre>\n\n<p>I have to be more explicit about it, e.g.:</p>\n\n<pre><code>4_i32.pow(2)\n</code></pre>\n\n<p>With floats, I get a similar problem (and solution), where:</p>\n\n<pre><code>4.0.powf(2.0)\n</code></pre>\n\n<p>Must also be explicit:</p>\n\n<pre><code>4.0_f64.powf(2.0)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "edited": false, "score": 0, "creation_date": 1432392420, "post_id": 30413877, "comment_id": 48914131, "body": "Thanks.. doesn&#39;t take() consume the reader? My usecase is that i have a tcpstream (part of a struct) from which i read lines. Sometimes in between i don&#39;t need to read a line but a specific amount of bytes. Afterwards i&#39;ll need to read lines again..."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1432392542, "post_id": 30413877, "comment_id": 48914176, "body": "It does, but &quot;the reader&quot; can be a <code>&amp;mut R</code> i.e a temporary mutable reference to another reader. Take uses a by-value API so that all use cases are supported. This model appears in some different corners of rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "edited": false, "score": 0, "creation_date": 1432392644, "post_id": 30413877, "comment_id": 48914211, "body": "@buster as bluss points out, <code>&amp;mut R</code> also implements the <code>Read</code> trait. My example uses that to good effect - that&#39;s why I pass in <code>&amp;mut reader</code> in the main method of the example."}, {"owner": {"reputation": 1118, "user_id": 2041237, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a7859f6e07d3b2bc6ba92acb6617ee2b?s=128&d=identicon&r=PG", "display_name": "Kaeros", "link": "https://stackoverflow.com/users/2041237/kaeros"}, "reply_to_user": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "edited": false, "score": 0, "creation_date": 1567713637, "post_id": 30413877, "comment_id": 102055886, "body": "@buster @Shepmaster how did you guys figure out that <code>Read::take</code> also accepts a <code>&amp;mut reader</code>? Wondering how I would be able to figure that out myself next time. :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1118, "user_id": 2041237, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a7859f6e07d3b2bc6ba92acb6617ee2b?s=128&d=identicon&r=PG", "display_name": "Kaeros", "link": "https://stackoverflow.com/users/2041237/kaeros"}, "edited": false, "score": 2, "creation_date": 1568052717, "post_id": 30413877, "comment_id": 102144541, "body": "@Kaeros <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"nofollow noreferrer\"><code>take</code></a> comes from <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"nofollow noreferrer\"><code>Read</code></a> and <a href=\"https://doc.rust-lang.org/1.37.0/std/io/trait.Read.html#impl-Read-12\" rel=\"nofollow noreferrer\"><code>Read</code> is implemented for any mutable reference to a type that implements <code>Read</code></a>. See also <a href=\"https://stackoverflow.com/q/39464237/155423\">Whats the idiomatic way reference BufReader/BufWriter when passing between functions?</a>;"}, {"owner": {"reputation": 15119, "user_id": 8182118, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d321a0bcd7b3d7831b54d1d9b5b70f60?s=128&d=identicon&r=PG", "display_name": "Masklinn", "link": "https://stackoverflow.com/users/8182118/masklinn"}, "edited": false, "score": 0, "creation_date": 1617788682, "post_id": 30413877, "comment_id": 118401925, "body": "Also <code>Read</code> has <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>by_ref</code></a> which specifically creates a sub-reader by reference. So even without knowing that you can just create a mutable reference and that&#39;s also <code>Read</code>, you can always call <code>reader.by_ref()</code> and pass <i>that</i> in."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1617798572, "last_edit_date": 1617798572, "creation_date": 1432391435, "answer_id": 30413877, "question_id": 30412521, "link": "https://stackoverflow.com/questions/30412521/how-to-read-a-specific-number-of-bytes-from-a-stream/30413877#30413877", "title": "How to read a specific number of bytes from a stream?", "body": "<p>It sounds like you want <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"nofollow noreferrer\"><code>Read::take</code></a> and <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_end\" rel=\"nofollow noreferrer\"><code>Read::read_to_end</code></a>.</p>\n<p>This will allow you to read data into a <code>&amp;mut Vec&lt;u8&gt;</code>, which is useful when you want to reuse an existing buffer or don't have an appropriately sized slice already. This allows you to avoid initializing the data with dummy values before overwriting them with the newly-read information:</p>\n<pre><code>use std::{\n    io::{prelude::*, BufReader},\n    str,\n};\n\nfn read_n&lt;R&gt;(reader: R, bytes_to_read: u64) -&gt; Vec&lt;u8&gt;\nwhere\n    R: Read,\n{\n    let mut buf = vec![];\n    let mut chunk = reader.take(bytes_to_read);\n    // Do appropriate error handling for your situation\n    // Maybe it's OK if you didn't read enough bytes?\n    let n = chunk.read_to_end(&amp;mut buf).expect(&quot;Didn't read enough&quot;);\n    assert_eq!(bytes_to_read as usize, n);\n    buf\n}\n\nfn main() {\n    let input_data = b&quot;hello world&quot;;\n    let mut reader = BufReader::new(&amp;input_data[..]);\n\n    let first = read_n(&amp;mut reader, 5);\n    let _ = read_n(&amp;mut reader, 1);\n    let second = read_n(&amp;mut reader, 5);\n\n    println!(\n        &quot;{:?}, {:?}&quot;,\n        str::from_utf8(&amp;first),\n        str::from_utf8(&amp;second)\n    );\n}\n</code></pre>\n<p>If you are worried that <code>Read::take</code> consumes the reader by reference, note that <code>take</code> comes from <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"nofollow noreferrer\"><code>Read</code></a> and <a href=\"https://doc.rust-lang.org/1.51.0/std/io/trait.Read.html#impl-Read-13\" rel=\"nofollow noreferrer\"><code>Read</code> is implemented for any mutable reference to a type that implements <code>Read</code></a>. You can also use <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>Read::by_ref</code></a> to create this mutable reference.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39464237/155423\">Whats the idiomatic way to reference BufReader/BufWriter when passing it between functions?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31374051/155423\">Why does Iterator::take_while take ownership of the iterator?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 0, "creation_date": 1536116481, "post_id": 46225116, "comment_id": 91303258, "body": "It&#39;s also not clear what happens if EOF is returned before bytes_to_read."}, {"owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "reply_to_user": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 3, "creation_date": 1536258279, "post_id": 46225116, "comment_id": 91369632, "body": "That&#39;s specified in the documentation: &quot;If this function encounters an &quot;end of file&quot; before completely filling the buffer, it returns an error of the kind <code>ErrorKind::UnexpectedEof</code>.&quot;"}, {"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 0, "creation_date": 1536259714, "post_id": 46225116, "comment_id": 91370237, "body": "True, so I guess you can&#39;t actually do this. In the sense that it&#39;s not defined what happens to the buffer contents/impossible to recover."}, {"owner": {"reputation": 186, "user_id": 2498708, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7548c84be4e2bc9d083da1a954d138d6?s=128&d=identicon&r=PG&f=1", "display_name": "NathanFrasier", "link": "https://stackoverflow.com/users/2498708/nathanfrasier"}, "edited": false, "score": 0, "creation_date": 1570800018, "post_id": 46225116, "comment_id": 103039382, "body": "How can you use a Vec as the target, when I attempt to do this with a <code>Vec::with_capacity(bytes_to_read)</code> the vec &quot;length&quot; is zero and nothing gets read"}, {"owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "reply_to_user": {"reputation": 186, "user_id": 2498708, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7548c84be4e2bc9d083da1a954d138d6?s=128&d=identicon&r=PG&f=1", "display_name": "NathanFrasier", "link": "https://stackoverflow.com/users/2498708/nathanfrasier"}, "edited": false, "score": 0, "creation_date": 1572788533, "post_id": 46225116, "comment_id": 103661205, "body": "@Nanos Hopefully you&#39;ve already figured this out elsewhere, but, the answer is you need to fill the <code>Vec</code> with some value first, (or unsafely set the length I guess). The <code>vec![0u8; bytes_to_read]</code> used above fills the <code>Vec</code> with <code>bytes_to_read</code> zeroes."}], "tags": [], "owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "is_accepted": false, "score": 19, "last_activity_date": 1505410656, "last_edit_date": 1505410656, "creation_date": 1505410086, "answer_id": 46225116, "question_id": 30412521, "link": "https://stackoverflow.com/questions/30412521/how-to-read-a-specific-number-of-bytes-from-a-stream/46225116#46225116", "title": "How to read a specific number of bytes from a stream?", "body": "<p>Since Rust 1.6, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\" rel=\"noreferrer\"><code>Read::read_exact</code></a> can be used to do this. If <code>bytes_to_read</code> is the number of bytes you need to read, possibly determined at runtime, and <code>reader</code> is the stream to read from:</p>\n\n<pre><code>let mut buf = vec![0u8; bytes_to_read];\nreader.read_exact(&amp;mut buf)?;\n</code></pre>\n\n<p>The part that wasn't clear to me from the <code>read_exact</code> documentation was that the target buffer can be a dynamically-allocated <code>Vec</code>.</p>\n\n<p>Thanks to the Rust Gitter community for pointing me to this solution.</p>\n"}], "owner": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14279, "favorite_count": 3, "answer_count": 2, "score": 18, "last_activity_date": 1617798572, "creation_date": 1432383156, "last_edit_date": 1505410955, "question_id": 30412521, "link": "https://stackoverflow.com/questions/30412521/how-to-read-a-specific-number-of-bytes-from-a-stream", "title": "How to read a specific number of bytes from a stream?", "body": "<p>I have a struct with a <code>BufStream&lt;T&gt;</code> where <code>T: Read+Write</code>.\nThe <code>BufStream</code> can be a <code>TcpStream</code> and I'd like to read n bytes from it.\nNot a fixed amount of bytes in a predefined buffer, but I have a string/stream which indicates the number of bytes to read next.</p>\n\n<p>Is there a nice way to do that?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 1, "last_activity_date": 1432387576, "creation_date": 1432387576, "answer_id": 30413248, "question_id": 30412437, "link": "https://stackoverflow.com/questions/30412437/reference-associated-type-in-trait-bounds/30413248#30413248", "title": "Reference associated type in trait bounds", "body": "<p>You can refer to the implementing type via <code>Self</code> and since <code>B: A</code>, <code>Self::MyAssoc</code> already exists.</p>\n\n<pre><code>trait B: A where Self::MyAssoc : AssocB {}\n</code></pre>\n\n<p>This prohibits <code>impl B for T {}</code> when <code>&lt;T as A&gt;::MyAssoc</code> does not implement <code>AssocB</code>. <a href=\"https://play.rust-lang.org/?gist=27a783f2de89c2400ddc&amp;version=stable\" rel=\"nofollow\">(example)</a></p>\n"}], "owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 358, "favorite_count": 0, "accepted_answer_id": 30413248, "answer_count": 1, "score": 0, "last_activity_date": 1432387576, "creation_date": 1432382631, "question_id": 30412437, "link": "https://stackoverflow.com/questions/30412437/reference-associated-type-in-trait-bounds", "title": "Reference associated type in trait bounds", "body": "<p>I have a trait which is meant to tighten constraints on another trait, e.g.:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait AssocA {}\ntrait AssocB: AssocA {}\ntrait A { type MyAssoc: AssocA; }\ntrait B: A { type MyAssoc: AssocB; }\n</code></pre>\n\n<p>If I were using generics rather than associated types, I'd be able to tell Rust that <code>MyAssoc</code> is the same across traits <code>A</code> and <code>B</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait AssocA {}\ntrait AssocB: AssocA {}\ntrait A&lt;MyAssoc&gt; where MyAssoc: AssocA {}\ntrait B&lt;MyAssoc&gt;: A&lt;MyAssoc&gt; where MyAssoc: AssocB { }\n</code></pre>\n\n<p>How can I do the same with associated types?</p>\n"}, {"tags": ["string", "rust"], "answers": [{"tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 4, "last_activity_date": 1521211963, "last_edit_date": 1521211963, "creation_date": 1432380000, "answer_id": 30412048, "question_id": 30412011, "link": "https://stackoverflow.com/questions/30412011/how-can-i-coerce-a-string-into-a-str-for-the-purposes-of-implementing-the-tosoc/30412048#30412048", "title": "How can I coerce a String into a &amp;str for the purposes of implementing the ToSocketAddrs trait?", "body": "<p>As <code>std::net::ToSocketAddrs</code> is implemented only on <code>(&amp;str, _)</code> you need to take a slice of of the string using the <code>&amp;url[..]</code> slice syntax:</p>\n\n<pre><code>let tcp = TcpStream::connect((&amp;url[..], port));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3078, "user_id": 161711, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/ef8fc9ba9d8516c33de7e52fb0a8a020?s=128&d=identicon&r=PG", "display_name": "Paul Thompson", "link": "https://stackoverflow.com/users/161711/paul-thompson"}, "edited": false, "score": 0, "creation_date": 1432427366, "post_id": 30413894, "comment_id": 48923562, "body": "Thanks to the link to the RFC. I&#39;d been pulling my hair out wondering why functions would coerce and this wouldn&#39;t"}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 8, "last_activity_date": 1432391533, "creation_date": 1432391533, "answer_id": 30413894, "question_id": 30412011, "link": "https://stackoverflow.com/questions/30412011/how-can-i-coerce-a-string-into-a-str-for-the-purposes-of-implementing-the-tosoc/30413894#30413894", "title": "How can I coerce a String into a &amp;str for the purposes of implementing the ToSocketAddrs trait?", "body": "<p>hauleth's answer will work for you, but it's not quite the whole story. In particular, your <code>String</code> isn't coercing to a <code>&amp;str</code> because auto deref coercion does not kick in when trait matching, as per <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\" rel=\"noreferrer\">RFC 0401</a>. Therefore, using a plain <code>&amp;url</code> won't work in this case because auto deref won't be applied to it. Instead of getting an <code>&amp;str</code>, you'll just get a <code>&amp;String</code>, which doesn't have a matching impl for <code>ToSocketAddrs</code>. However, you can explicitly cause deref to happen with the dereference operator. In particular, <code>&amp;*url</code> should work. (<code>&amp;url[..]</code> also works because <code>[..]</code> is the syntax for \"take a slice over everything\", but it's a bit more verbose.)</p>\n"}], "owner": {"reputation": 3078, "user_id": 161711, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/ef8fc9ba9d8516c33de7e52fb0a8a020?s=128&d=identicon&r=PG", "display_name": "Paul Thompson", "link": "https://stackoverflow.com/users/161711/paul-thompson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 486, "favorite_count": 0, "accepted_answer_id": 30413894, "answer_count": 2, "score": 6, "last_activity_date": 1521211963, "creation_date": 1432379679, "last_edit_date": 1521211744, "question_id": 30412011, "link": "https://stackoverflow.com/questions/30412011/how-can-i-coerce-a-string-into-a-str-for-the-purposes-of-implementing-the-tosoc", "title": "How can I coerce a String into a &amp;str for the purposes of implementing the ToSocketAddrs trait?", "body": "<p>When a string is stored as a <code>String</code> rather than a <code>&amp;str</code> it fails to implement the trait <code>ToSocketAddrs</code>. The closest possible one that does is <code>impl&lt;'a&gt; ToSocketAddrs for (&amp;'a str, u16)</code>. </p>\n\n<pre><code>use std::net::TcpStream;\n\nfn main() {\n    let url = \"www.google.com\".to_string(); // String\n    let url2 = \"www.google.com\";            // &amp;'static str\n    let port = 80;\n\n    // Does not work\n    let tcp = TcpStream::connect((url, port));\n\n    // Works\n    let tcp2 = TcpStream::connect((url2, port));\n}\n</code></pre>\n\n<p>This fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `(std::string::String, {integer}): std::net::ToSocketAddrs` is not satisfied\n --&gt; src/main.rs:9:11\n  |\n9 | let tcp = TcpStream::connect((url, port));\n  |           ^^^^^^^^^^^^^^^^^^ the trait `std::net::ToSocketAddrs` is not implemented for `(std::string::String, {integer})`\n  |\n  = help: the following implementations were found:\n            &lt;(std::net::Ipv6Addr, u16) as std::net::ToSocketAddrs&gt;\n            &lt;(std::net::Ipv4Addr, u16) as std::net::ToSocketAddrs&gt;\n            &lt;(&amp;'a str, u16) as std::net::ToSocketAddrs&gt;\n            &lt;(std::net::IpAddr, u16) as std::net::ToSocketAddrs&gt;\n  = note: required by `std::net::TcpStream::connect`\n</code></pre>\n\n<p>How can I coerce a <code>String</code> into a <code>&amp;str</code> for the purposes of implementing the <code>ToSocketAddrs</code> trait? From the documentation for Rust 1.0, I thought that <code>String</code> would automatically move to <code>&amp;str</code>. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 0, "creation_date": 1432378434, "post_id": 30411758, "comment_id": 48910040, "body": "Thanks for the answer.Using the actual closure type is not an option for me since I need to be able to store different closures in the enum. I don&#39;t know how to make the <code>Box&lt;FnMut&gt;</code> suggestion work, I get an error when I try that. What I&#39;ve managed to do instead is to just say <code>Box&lt;fn(i32)&gt;</code>. That helped me compile the example above. However, I cannot create an enum using that type since it doesn&#39;t match the type of the closure. So I guess I&#39;m left with trying a nightly compiler."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 0, "creation_date": 1432378556, "post_id": 30411758, "comment_id": 48910070, "body": "@svenningsson: Use <code>Box&lt;FnMut(i32)&gt;</code> instead; because <code>FnMut</code> is &quot;object safe&quot;, you <i>can</i> call one through a <code>Box</code> (or any indirection, really).  The only thing you can&#39;t do is have the closure consume values (though you can work around that with <code>Option</code>)."}, {"owner": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 0, "creation_date": 1432378714, "post_id": 30411758, "comment_id": 48910112, "body": "The error I get when I try <code>Box&lt;FnMut(i32)&gt;</code> is the following: cannot borrow immutable <code>Box</code> content <code>*f</code> as mutable src/lib.rs:36     Foo::Bar(f) =&gt; f(i)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 1, "creation_date": 1432380587, "post_id": 30411758, "comment_id": 48910602, "body": "@svenningsson: A <code>FnMut</code> needs to be able to mutate the closure value when called, so use <code>Foo::Bar(mut f) =&gt; f(i)</code> instead to make the <code>f</code> binding mutable."}, {"owner": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 0, "creation_date": 1432388876, "post_id": 30411758, "comment_id": 48913031, "body": "Ok thanks. That makes my example compile. Unfortunately, using <code>FnMut</code> prevents me from creating the kind of closures I like, but that&#39;s a different problem and maybe I can find a way around that."}, {"owner": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "edited": false, "score": 0, "creation_date": 1432395421, "post_id": 30411758, "comment_id": 48915055, "body": "Just want to confirm that <code>FnBox</code> solves my problem. Thanks again!"}, {"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 0, "creation_date": 1498988711, "post_id": 30411758, "comment_id": 76717667, "body": "There&#39;s another choice: Just copy the <code>FnBox</code> implementation. This is what crossbeam does, and it&#39;s pretty simple - just a few lines - since they only need a specific function, which might be ok for you too. See <a href=\"https://github.com/crossbeam-rs/crossbeam/blob/07245b3f3d2d938017581a71c02754be9e794ae8/src/lib.rs#L43\" rel=\"nofollow noreferrer\">github.com/crossbeam-rs/crossbeam/blob/&hellip;</a>"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 17, "last_activity_date": 1589112933, "last_edit_date": 1589112933, "creation_date": 1432378008, "answer_id": 30411758, "question_id": 30411594, "link": "https://stackoverflow.com/questions/30411594/cannot-move-a-value-of-type-fnonce-when-moving-a-boxed-function/30411758#30411758", "title": "&quot;cannot move a value of type FnOnce&quot; when moving a boxed function", "body": "<p>Here's the <code>FnOnce</code> trait's definition (simplified a little):</p>\n\n<pre><code>pub trait FnOnce&lt;Args&gt; {\n    type Output;\n\n    fn call_once(self, args: Args) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>To call a <code>FnOnce</code> closure, you need to be able to move the closure value itself into the invocation.  Note that <code>self</code> has to be the <em>actual</em> closure type; a <code>Box&lt;dyn FnOnce&gt;</code> is a different type altogether.</p>\n\n<h1><a href=\"https://blog.rust-lang.org/2019/05/23/Rust-1.35.0.html#fn-closure-traits-implemented-for-boxdyn-fn\" rel=\"nofollow noreferrer\">Rust 1.35</a></h1>\n\n<p><code>Box&lt;dyn FnOnce&gt;</code> is now able to be called; your original code works as-is. </p>\n\n<h1>Prior versions</h1>\n\n<p>There <em>is</em> a type in the standard library for working around this situation: <a href=\"http://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\"><code>FnBox</code></a>. <em>Unfortunately</em>, it's unstable.</p>\n\n<p>Your alternate choices are:</p>\n\n<ul>\n<li>Refactor the code so that instead of <code>Box&lt;FnOnce&gt;</code>, you preserve the <em>actual</em> closure type.</li>\n<li>Use <code>Box&lt;FnMut&gt;</code> instead.</li>\n<li>Wait for <code>FnBox</code> to stabilise.</li>\n<li>Switch to a nightly compiler.</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 2, "last_activity_date": 1486991438, "creation_date": 1486991438, "answer_id": 42204868, "question_id": 30411594, "link": "https://stackoverflow.com/questions/30411594/cannot-move-a-value-of-type-fnonce-when-moving-a-boxed-function/42204868#42204868", "title": "&quot;cannot move a value of type FnOnce&quot; when moving a boxed function", "body": "<p>It is unlikely <a href=\"http://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\"><code>FnBox</code></a> becomes stable, but for the time being you can wrap the <code>F: FnOnce(...) -&gt; ...</code> in an <code>Option&lt;F&gt;</code>, bind it in a mutable closure and unwrap and call it inside (so it panics if it gets called more than once); the resulting closure can be boxed as <code>Box&lt;FnMut(...) -&gt; ...&gt;</code>, which you might want to wrap somehow to make sure it only gets used (\"called\") once.</p>\n\n<p>See (my) <a href=\"https://crates.io/crates/boxfnonce\" rel=\"nofollow noreferrer\"><code>boxfnonce</code></a> crate.</p>\n"}], "owner": {"reputation": 3961, "user_id": 176015, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/398c96f77ec9b99b1e8122214227305d?s=128&d=identicon&r=PG", "display_name": "svenningsson", "link": "https://stackoverflow.com/users/176015/svenningsson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2432, "favorite_count": 3, "accepted_answer_id": 30411758, "answer_count": 2, "score": 12, "last_activity_date": 1589112933, "creation_date": 1432376927, "last_edit_date": 1486993063, "question_id": 30411594, "link": "https://stackoverflow.com/questions/30411594/cannot-move-a-value-of-type-fnonce-when-moving-a-boxed-function", "title": "&quot;cannot move a value of type FnOnce&quot; when moving a boxed function", "body": "<p>I'm trying to do some higher order programming in Rust, but I'm having some difficulty dealing with closures. Here's a code snippet that illustrates one of the problems I'm having:</p>\n\n<pre><code>pub enum Foo {\n    Bar(Box&lt;FnOnce(i32)&gt;),\n}\n\npub fn app(i: i32, arg: Foo) {\n    match arg {\n        Foo::Bar(f) =&gt; f(i),\n    }\n}\n</code></pre>\n\n<p>When I compile this piece of code I get the following error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0161]: cannot move a value of type std::ops::FnOnce(i32) + 'static: the size of std::ops::FnOnce(i32) + 'static cannot be statically determined\n --&gt; src/main.rs:7:24\n  |\n7 |         Foo::Bar(f) =&gt; f(i),\n  |                        ^\n</code></pre>\n\n<p>Since I put the function in a <code>Box</code>, I would have thought that that would deal with the problem of the compiler not knowing the size. How can I make the above program compile?</p>\n"}, {"tags": ["std", "rust", "sync", "atomic"], "comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 6, "creation_date": 1432337765, "post_id": 30407121, "comment_id": 48902167, "body": "The memory orderings are the same as LLVM&#39;s (or C++&#39;s; the rust docs are inconsistent), so you may find <a href=\"http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync\" rel=\"nofollow noreferrer\">this</a>, <a href=\"http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\" rel=\"nofollow noreferrer\">this</a>, and <a href=\"http://llvm.org/docs/Atomics.html#atomic-orderings\" rel=\"nofollow noreferrer\">this</a> useful."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1432344379, "post_id": 30407121, "comment_id": 48903371, "body": "FWIW, I use <i>Sequentially Consistent</i> (<code>SeqCst</code>) because it&#39;s the most restrictive (least likely for me to screw it up) and I don&#39;t know what all the others mean. ^_^"}, {"owner": {"reputation": 510, "user_id": 1544694, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xRSRy.jpg?s=128&g=1", "display_name": "mdh.heydari", "link": "https://stackoverflow.com/users/1544694/mdh-heydari"}, "edited": false, "score": 1, "creation_date": 1445538369, "post_id": 30407121, "comment_id": 54376094, "body": "<a href=\"http://en.cppreference.com/w/cpp/atomic/memory_order\" rel=\"nofollow noreferrer\">Read here</a>"}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1445566513, "post_id": 30407121, "comment_id": 54387364, "body": "@Shepmaster: in c++, seq_cst usually results in an <code>MFENCE</code> instruction on x86, while all of the weaker orderings don&#39;t (because x86 does them for free with every load and store).  Jeff Preshing&#39;s blog has some great material that will help you understand memory ordering, e.g. <a href=\"http://preshing.com/20120710/memory-barriers-are-like-source-control-operations/\" rel=\"nofollow noreferrer\">preshing.com/20120710/&hellip;</a>.  I wrote an answer recently with a lot of links to that and other sources: <a href=\"http://stackoverflow.com/questions/32384901/atomic-operations-stdatomic-and-ordering-of-writes/32394427#32394427\" title=\"atomic operations stdatomic and ordering of writes\">stackoverflow.com/questions/32384901/&hellip;</a>"}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 0, "creation_date": 1515790513, "post_id": 30407121, "comment_id": 83450263, "body": "Herb Sutter has a great talk about atomics in C++: <a href=\"https://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-1-of-2\" rel=\"nofollow noreferrer\">channel9.msdn.com/Shows/Going+Deep/&hellip;</a>. I think essentially all of that applies to Rust. The summary of the talk is that SeqCst is what you want the vast majority of the time."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1564035924, "post_id": 30407121, "comment_id": 100899684, "body": "&quot;The documentation uses confusing \u201cload\u201d and \u201cstore\u201d terms which I don\u2019t really understand.&quot; - I would say that understanding these terms is a prerequisite to using atomics at all. So make sure to read the excellent links in the other comments and answers."}], "answers": [{"comments": [{"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 2, "creation_date": 1445566666, "post_id": 33293463, "comment_id": 54387407, "body": "I found <a href=\"http://preshing.com/20120710/memory-barriers-are-like-source-control-operations/\" rel=\"nofollow noreferrer\">preshing.com/20120710/&hellip;</a> and Preshing&#39;s other articles excellent for wrapping my head around this stuff.  SeqCst requires the CPU to prevent even StoreLoad re-ordering, which requires an MFENCE instruction on x86.  This is expensive.  It&#39;s not that it &quot;locks down the bus&quot;, it&#39;s just that it can&#39;t use prefetched data that was read before the last store became globally visible.  On x86, though, all read-modify-write ops (like atomic increment, or compare-and-swap) are also full memory barriers, so seqcst comes for free with them.)"}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 0, "creation_date": 1445570023, "post_id": 33293463, "comment_id": 54388167, "body": "I did introduce one error, which I just fixed:  seq_cst loads of atomic variables don&#39;t require an MFENCE, only stores.  I linked to some c++ compiler output on godbolt, from <a href=\"http://stackoverflow.com/questions/32384901/atomic-operations-stdatomic-and-ordering-of-writes/32394427#32394427\" title=\"atomic operations stdatomic and ordering of writes\">stackoverflow.com/questions/32384901/&hellip;</a>.  If there&#39;s something similar for Rust, that would be ideal, but I don&#39;t know Rust at all myself.  I just jumped in since the API is the same as C++ atomics."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 1, "creation_date": 1445578950, "post_id": 33293463, "comment_id": 54390439, "body": "@PeterCordes Godbolt has a <a href=\"https://rust.godbolt.org/\" rel=\"nofollow noreferrer\">Rust version</a> and the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a> likewise allows for ASM output. I&#39;d recommend adding the Rust-specific output if possible."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445590246, "post_id": 33293463, "comment_id": 54395690, "body": "@Shepmaster: Thanks for the links.  I have literally never used Rust, so I&#39;ll leave that for someone else (perhaps Michael).  I agree that Rust code would be better for this answer."}], "tags": [], "owner": {"reputation": 618, "user_id": 371553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae9a752a5fd9bf94a3f9e9dfc39fea0c?s=128&d=identicon&r=PG", "display_name": "Michael Younkin", "link": "https://stackoverflow.com/users/371553/michael-younkin"}, "is_accepted": false, "score": 20, "last_activity_date": 1564034582, "last_edit_date": 1564034582, "creation_date": 1445563770, "answer_id": 33293463, "question_id": 30407121, "link": "https://stackoverflow.com/questions/30407121/which-stdsyncatomicordering-to-use/33293463#33293463", "title": "Which std::sync::atomic::Ordering to use?", "body": "<p>I'm not an expert on this, and it's really complicated, so please feel free to critique my post. As pointed out by mdh.heydari, cppreference.com has <a href=\"http://en.cppreference.com/w/cpp/atomic/memory_order\" rel=\"noreferrer\">much better documentation of orderings</a> than Rust (C++ has an almost identical API).</p>\n\n<hr>\n\n<h1>For your question</h1>\n\n<p>You'd need to use \"release\" ordering in your producer and \"acquire\" ordering in your consumer. This ensures that the data mutation occurs before the <code>AtomicBool</code> is set to true.</p>\n\n<p>If your queue is asynchronous, then the consumer will need to keep trying to read from it in a loop, since the producer could get interrupted between setting the <code>AtomicBool</code> and putting something in the queue.</p>\n\n<p>If the producer code might run multiple times before client runs, then you can't use <code>RefCell</code> because they could mutate the data while the client is reading it. Otherwise it's fine.</p>\n\n<p>There are other better and simpler ways to implement this pattern, but I assume you were just giving it as an example.</p>\n\n<hr>\n\n<h1>What are orderings?</h1>\n\n<p>The different orderings have to do with what another thread sees happen when an atomic operation occurs. Compilers and CPUs are normally both allowed to reorder instructions in order to optimize code, and the orderings effect how much they're allowed to reorder instructions.</p>\n\n<p>You could just always use <code>SeqCst</code>, which basically guarantees everyone will see that instruction as having occurred wherever you put it relative to other instructions, but in some cases if you specify a less restrictive ordering then LLVM and the CPU can better optimize your code.</p>\n\n<p>You should think of these orderings as applying to a memory location (instead of applying to an instruction).</p>\n\n<h1>Ordering Types</h1>\n\n<h2>Relaxed Ordering</h2>\n\n<p>There are no constraints besides any modification to the memory location being atomic (so it either happens completely or not at all). This is fine for something like a counter if the values retrieved by/set by individual threads don't matter as long as they're atomic.</p>\n\n<h2>Acquire Ordering</h2>\n\n<p>This constraint says that any variable reads that occur in your code after \"acquire\" is applied can't be reordered to occur before it. So, say in your code you read some shared memory location and get value <code>X</code>, which was stored in that memory location at time <code>T</code>, and then you apply the \"acquire\" constraint. Any memory locations that you read from after applying the constraint will have the value they had at time <code>T</code> or later.  </p>\n\n<p>This is probably what most people would expect to happen intuitively, but because a CPU and optimizer are allowed to reorder instructions as long as they don't change the result, it isn't guaranteed.</p>\n\n<p>In order for \"acquire\" to be useful, it has to be paired with \"release\", because otherwise there's no guarantee that the other thread didn't reorder its write instructions that were supposed to occur at time <code>T</code> to an earlier time.</p>\n\n<p>Acquire-reading the flag value you're looking for means you won't see a stale value somewhere else that was actually changed by a write before the release-store to the flag.</p>\n\n<h2>Release Ordering</h2>\n\n<p>This constraint says that any variable writes that occur in your code before \"release\" is applied can't be reordered to occur after it. So, say in your code you write to a few shared memory locations and then set some memory location t at time <code>T</code>, and then you apply the \"release\" constraint. Any writes that appear in your code before \"release\" is applied are guaranteed to have occurred before it.</p>\n\n<p>Again, this is what most people would expect to happen intuitively, but it isn't guaranteed without constraints.</p>\n\n<p>If the other thread trying to read value <code>X</code> doesn't use \"acquire\", then it isn't guaranteed to see the new value with respect to changes in other variable values. So it could get the new value, but it might not see new values for any other shared variables.  Also keep in mind that testing is <em>hard</em>.  Some hardware won't in practice show re-ordering with some unsafe code, so problems can go undetected.</p>\n\n<p><a href=\"http://preshing.com/20120913/acquire-and-release-semantics/\" rel=\"noreferrer\">Jeff Preshing wrote a nice explanation of acquire and release semantics</a>, so read that if this isn't clear.</p>\n\n<h2>AcqRel Ordering</h2>\n\n<p>This does both <code>Acquire</code> and <code>Release</code> ordering (ie. both restrictions apply). I'm not sure when this is necessary - it might be helpful in situations with 3 or more threads if some <code>Release</code>, some <code>Acquire</code>, and some do both, but I'm not really sure.</p>\n\n<h2>SeqCst Ordering</h2>\n\n<p>This is most restrictive and, therefore, slowest option. It forces memory accesses to appear to occur in one, identical order to every thread.  This requires an <code>MFENCE</code> instruction on x86 on all writes to atomic variables (full memory barrier, including StoreLoad), while the weaker orderings don't.  (SeqCst loads don't require a barrier on x86, as you can see in <a href=\"https://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%2C%22intel%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4CGAXA9gWxBAPgCgiBnDOALks13xRjFJAHMwE4koswWCkAggG4SRbryRoIEBKVIAKAG5YQcAJRIA3kgBOCDDB1hBAOm5o488lUo4EOLDoCeAfUeIdLqQEcYIPWpCSAC%2BYjwsktKypC4Q5Eoq6lq6%2BobGAmZYFlYU1HYOzm46Hi6kCN6x5IEhYRLkjgjy4hEAHhraegZGgkgAvEgtQaFAA%22%2C%22compiler%22%3A%22g520%22%2C%22options%22%3A%22-std%3Dgnu%2B%2B1y%20-O3%20-march%3Dnative%20-mtune%3Dnative%22%7D%5D%7D\" rel=\"noreferrer\">this C++ compiler output</a>.)</p>\n\n<p>Read-Modify-Write accesses, like atomic increment, or compare-and-swap, are done on x86 with <code>lock</code>ed instructions, which are already full memory barriers.  If you care at all about compiling to efficient code on non-x86 targets, it makes sense to avoid SeqCst when you can, even for atomic read-modify-write ops.  <a href=\"http://preshing.com/20120515/memory-reordering-caught-in-the-act/\" rel=\"noreferrer\">There are cases where it's needed</a>, though.</p>\n\n<p>For more examples of how atomic semantics turn into ASM, see <a href=\"https://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4CGAXA9gWxBAPgCgB6EgZwzgC5rNd8VwMA2AFgH0MCk0BuJILJIIuAA4goyAO4gMACyQBaHAGYATEgBmWAE5IF4AObkDWJEYQYkzBLoSVjRSjTrY8EJmG68%2BRZkgARgAUAAwAlH4utPQeXj4QfkQw5MZIYGg4DmJoEMguSQBuWCBwSORWwcWl4UQA3kSCgUgAvEjqfkIkvK1IAIwCwuSZyGimaAB0lHoIwX0ANOVUtFk4egCeHHqIuhwVAI4cEJSRRI1IZLH4eyBGGVAcWgiQs6sbW7o7HLmH9lCnXSuEBudzQDyeL2Cb10m22dg4fwQYwQkS6SzQYDgSjBWDAyAAyth7ISZkE0LpdCA7OdLlMibMFkhobDPvC%2FmgAB4IOCnc6Tab2OaLZkfL6I5Goi7dIwQCBBGBGAD8SFkCiwMGsQJB90ezzywXFFXCixlcqkaEKDiQ6usCmQgRamkCCB09gM8hApmCHIAHCxrWAoOtwhNBNAMUYkHAsA4wAByDATc6CFOptPp1PCexiPQYbm8UzyDAYMTkahkU0TO4wCZ6IwkQIKgBekigaAo8iw0g4jaMEwgRhAitKLRYAHY2ABWH1nQF0mZCpkINYw0Xwn4wED2SXCMS6LBwGB5Uw4CF5ZVIACSABEANIq%2BSYHoCmRyRQbrfILIY8izoK9VQBClJA9wPI8rTQdpMSWUlsCCRZUhed1kAwaRzDGVI7iybxxjdXFrTEHNUjzcpSitLAtGfekzCo1wgQMdYxAQGlukCLAFAI0xwGQ8oRnKBB9hgPVkBzAJXW0BBpDsCSXnIC8ADksCYk1ZSQAArFJrGjWME345caKUjAQDwJsUPkZAIGRB87DMmzeDdMBzCgLA0DgcgkzRYI5TadRwiQABqJBgkgto%2BlOABfM5qjKCoMGcpSqhKHkkAaQRxOCAIQBaUIBBAFBAJsfz%2FL81KU2aNoxyA4RRBwCQpH0Sz42sMQYCgKB3U9GC8I1a1KLtJB4rEIIEEslIZBkSkSLQZNeHnQUWAQ5ZqBFOFdkNFFBm6EL%2Bk6JBIsi0huhwVqjLEKQZOPRYEEtMADDQskIAAayUbAlECXJHoDJAAEEACUAFkgsc6w%2Fv%2B9hwmoJAixLMsK1lKswBrOsG2bVt23ITtu17ftB2HOBRwnFg%2BiIaLSNqqQ9kqaLwjqXgWgGOmGbQFoCogR0BGZgqDoCexXI4RygUSmoUqQewMBgXRbsCARIp5pEdiF5LSrFiWpYC3wiFl7xRfl74IEEz9FZKlielEMByBgLJ9G4yDQMPPJdCUM2LatpkDwQKB5hNxtrGdaRyTMp8VtZXZnctr8kXN8pcCsD0wEjD2KnOFXJdm5zXKhZd3lWvWDe3PwtesXm4C4NDvncfByCNlLk6sVWekCxI0VNXhoPDeOgnYxQtDQSQaLG3g4DKVV3yXFd1gIuwMTgJMDpJpK3bgEAtHWavSsCIrdrQTfNfn0pF%2BXzZ2S5OA175CYngwCB5G%2BIfgjYYUs9XHPj%2B5Hdul9FhIccNqemcp6QL2C0CADkixnSjQqEgT%2BUMxjpHMF3aS%2Ft1i71JmsJeK9c4Ig9mfQQkxL7X1vqfB%2BY9s4h0wX8d%2BUC%2FTfyMr%2FSC%2F9Pp7hdCAsBI00AD2gY%2BUwjlrR2n0Eg3eAQaqBHALMamNc0Qp1upBfybRpZogYVA1yZRggIA5NfCMoxoLKL8nBXEQYdauVwYIXEeQ%2BQBTkbtKRGtC4GAcBgHBNhKLBWNqmaxTdgLLxEDYcgTVeAVwgCpOUY1xgiDWIUGw5s8xGIoj0QIugMTX3OJFQQ1jpa72EKASAsBECoDBEYPQb4cDEACDgTkhQwSOOsZBHgEBlSQUhokFi1jojLU5MFMBEUzilPKWCXOm5BTiNKgEDA21Jjp1PsHL4H587AQADIuTgAsox70KRUn0OZN0oE8wQAwKYfq9hKC13FqnUZSBakTAmZncea41oe05G%2FJAioZppjOY0y5izrmkLFPck%2BlCf7tQmaE9Q0EjJZFDEgRSRdfn5meOqIwihyzNLrqnVpZSOQdKCF0%2Fw2t0UVIeI5MAHBOxrMCFIRx7C4JnLaOMz5Uz1z6wGRtPkGpzBX16BAD5Gd6V3LbH8qxKLbpnJ4Oy5UbyDBNLniQAAVEgRosr8Byj6KoJkaBHpWhJZSMlFl3baD0DxYu0ktAwEgEZXE1B5VMjPPaF0MwSBoC0HmfQSJr4DUWYsEed1zA21Fl2SJPE8BDykEQaVJAgAA%3D%3D%22%2C%22compiler%22%3A%22g520%22%2C%22options%22%3A%22-std%3Dc%2B%2B11%20-O3%22%7D%5D%7D\" rel=\"noreferrer\">this larger set of simple functions on C++ atomic variables</a>.  I know this is a Rust question, but it's supposed to have basically the same API as C++.  godbolt can target x86, ARM, ARM64, and PowerPC.  Interestingly, ARM64 has load-acquire (<code>ldar</code>) and store-release (<code>stlr</code>) instructions, so it doesn't always have to use separate barrier instructions.</p>\n\n<hr>\n\n<p>By the way, x86 CPUs are always \"strongly ordered\" by default, which means they always act as if at least <code>AcqRel</code> mode was set. So for x86 \"ordering\" only affects how LLVM's optimizer behaves. ARM, on the other hand, is weakly ordered.  <code>Relaxed</code> is set by default, to allow the compiler full freedom to reorder things, and to not require extra barrier instructions on weakly-ordered CPUs.</p>\n"}], "owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5248, "favorite_count": 6, "answer_count": 1, "score": 41, "last_activity_date": 1564034582, "creation_date": 1432336102, "question_id": 30407121, "link": "https://stackoverflow.com/questions/30407121/which-stdsyncatomicordering-to-use", "title": "Which std::sync::atomic::Ordering to use?", "body": "<p>All the methods of <a href=\"http://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html\"><code>std::sync::atomic::AtomicBool</code></a> take a memory ordering (Relaxed, Release, Acquire, AcqRel, and SeqCst), which I have not used before. Under what circumstances should these values be used? The documentation uses confusing \u201cload\u201d and \u201cstore\u201d terms which I don\u2019t really understand. For example:</p>\n\n<p>A producer thread mutates some state held by a <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\"><code>Mutex</code></a>, then calls <a href=\"http://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html\"><code>AtomicBool</code></a>::<code>compare_and_swap(false, true, ordering)</code> (to coalesce invalidations), and if it swapped, posts an \u201cinvalidate\u201d message to a concurrent queue (e.g. <a href=\"http://doc.rust-lang.org/std/sync/mpsc/index.html\"><code>mpsc</code></a> or a winapi <code>PostMessage</code>). A consumer thread resets the <code>AtomicBool</code>, reads from the queue, and reads the state held by the Mutex. Can the producer use Relaxed ordering because it is preceded by a mutex, or must it use Release? Can the consumer use <code>store(false, Relaxed)</code>, or must it use <code>compare_and_swap(true, false, Acquire)</code> to receive the changes from the mutex?</p>\n\n<p>What if the producer and consumer share a <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\"><code>RefCell</code></a> instead of a <code>Mutex</code>?</p>\n"}, {"tags": ["data-structures", "rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1432335449, "post_id": 30407009, "comment_id": 48901687, "body": "FYI what you&#39;re trying to do usually goes under the term &quot;reflection&quot;."}, {"owner": {"reputation": 31, "user_id": 2994207, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/8b08e4f58144dfc0f19616ce51a028a5?s=128&d=identicon&r=PG&f=1", "display_name": "Reginald", "link": "https://stackoverflow.com/users/2994207/reginald"}, "edited": false, "score": 0, "creation_date": 1432335538, "post_id": 30407009, "comment_id": 48901712, "body": "@delnan Is there a better I could phrase my title / post?"}, {"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "edited": false, "score": 1, "creation_date": 1432339110, "post_id": 30407009, "comment_id": 48902414, "body": "I would just use <code>pub</code> struct fields. And perhaps a tuple struct."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 2, "last_activity_date": 1432335852, "creation_date": 1432335852, "answer_id": 30407075, "question_id": 30407009, "link": "https://stackoverflow.com/questions/30407009/using-reflection-to-enumerate-through-the-fields-of-a-struct-at-runtime/30407075#30407075", "title": "Using reflection to enumerate through the fields of a struct at runtime", "body": "<p>Rust does not really support this kind of reflection at runtime, no.</p>\n\n<p>In theory, you <em>might</em> be able to write a syntax extension that would let you generate some code that would do something like this, maybe...</p>\n"}, {"comments": [{"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 1, "creation_date": 1432392215, "post_id": 30410295, "comment_id": 48914074, "body": "To clarify why Rust can&#39;t accomplish the same thing for methods: Rust does not have a virtual machine counter-part like Java or C#. It is only compiled to assembly, and doesn&#39;t have type information stored with objects when they&#39;re created."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1432367377, "creation_date": 1432367377, "answer_id": 30410295, "question_id": 30407009, "link": "https://stackoverflow.com/questions/30407009/using-reflection-to-enumerate-through-the-fields-of-a-struct-at-runtime/30410295#30410295", "title": "Using reflection to enumerate through the fields of a struct at runtime", "body": "<p>In fact, there is a way to (ab)use <a href=\"http://doc.rust-lang.org/rustc-serialize/rustc_serialize/trait.Encodable.html\" rel=\"nofollow\"><code>Encodable</code></a> or <a href=\"http://serde-rs.github.io/serde/serde/ser/trait.Serialize.html\" rel=\"nofollow\"><code>Serialize</code></a> traits to obtain reflection-like information about structure contents (not methods, though).</p>\n\n<p><code>Encodable</code>/<code>Serialize</code> are used primarily for writing a structure to some serialized representation, e.g. a JSON object. Their implementations can be automatically generated (e.g. with <code>#[derive(RustcEncodable)]</code> for <code>Encodable</code>) for any structure whose contents also implement corresponding trait.</p>\n\n<p>Implementations of these traits capture information about the structure and they pass it to an implementation of <a href=\"http://doc.rust-lang.org/rustc-serialize/rustc_serialize/trait.Encoder.html\" rel=\"nofollow\"><code>Encoder</code></a> or <a href=\"http://serde-rs.github.io/serde/serde/ser/trait.Serializer.html\" rel=\"nofollow\"><code>Serializer</code></a>. Implementors of the latter traits usually use this information (field names, types and values) to serialize objects but of course you can write your own implementation of <code>Encoder</code>/<code>Serializer</code> which will do with this information whatever you want. I'm not providing an example of such implementation here because they tend to be boilerplate-y, but you can find some through the links above.</p>\n\n<p>The limitation is that you always need a value of a structure in order to get information about fields. You can't just get a list of fields of an arbitrary type, like e.g. Java reflection allows. I <em>think</em> it is possible to write an internally unsafe implementation of <code>Encoder</code>/<code>Serializer</code> and a function like <code>fn type_info&lt;T: Encodable&gt;() -&gt; TypeInfo</code> which collects information about a type by creating an uninitialized piece of memory of the corresponding type and running its <code>Encodable</code> methods, but I'm not 100% sure about this.</p>\n"}], "owner": {"reputation": 31, "user_id": 2994207, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/8b08e4f58144dfc0f19616ce51a028a5?s=128&d=identicon&r=PG&f=1", "display_name": "Reginald", "link": "https://stackoverflow.com/users/2994207/reginald"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1432367377, "creation_date": 1432335371, "last_edit_date": 1432343566, "question_id": 30407009, "link": "https://stackoverflow.com/questions/30407009/using-reflection-to-enumerate-through-the-fields-of-a-struct-at-runtime", "title": "Using reflection to enumerate through the fields of a struct at runtime", "body": "<p>If I have a data structure like this: </p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Point {\n    fn setX(&amp;mut self, x: i32) -&gt; &amp;mut Point {\n        self.x = x;\n        self\n    }\n}\n</code></pre>\n\n<p>Is it possible to iterate through <code>Point</code> and see both each member and the name of each member?</p>\n\n<p>Is it also possible to go through the implementation and see what each function's name is?</p>\n\n<p>Is it possible to do the above two tasks at runtime, without special implementations?</p>\n"}, {"tags": ["rust", "strict-aliasing", "borrow-checker"], "comments": [{"owner": {"reputation": 168120, "user_id": 102937, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/1233ec65168f4aae4d939ae8fe6cde1e?s=128&d=identicon&r=PG", "display_name": "Robert Harvey", "link": "https://stackoverflow.com/users/102937/robert-harvey"}, "edited": false, "score": 0, "creation_date": 1432334414, "post_id": 30406852, "comment_id": 48901377, "body": "Aren&#39;t you going to have two different functions anyway, if they have different semantics?"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 168120, "user_id": 102937, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/1233ec65168f4aae4d939ae8fe6cde1e?s=128&d=identicon&r=PG", "display_name": "Robert Harvey", "link": "https://stackoverflow.com/users/102937/robert-harvey"}, "edited": false, "score": 0, "creation_date": 1432334582, "post_id": 30406852, "comment_id": 48901427, "body": "@RobertHarvey Semantic are the same: take input from the first pointer and write output to the second pointer. There&#39;s just an important optimization that input and output buffers can be the same."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1432334721, "post_id": 30406852, "comment_id": 48901472, "body": "You can use <code>* const</code> and <code>* mut</code>, but then you lose all the safety guarantees relating to those pieces of memory. This is no coincidence, the absence of mutable aliasing is central to many of Rust&#39;s guarantees."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 5, "last_activity_date": 1432336025, "creation_date": 1432336025, "answer_id": 30407103, "question_id": 30406852, "link": "https://stackoverflow.com/questions/30406852/how-to-use-unsafe-aliasing/30407103#30407103", "title": "How to use (unsafe) aliasing?", "body": "<p>Rust does not allow you to parameterize over mutabilty, no.</p>\n\n<p>In theory, you could write some unsafe code that aliases pointers, but you'd have to use raw pointers directly.</p>\n\n<p><code>&amp;mut</code> implies that the pointer is not aliased, and the optimizer will treat it as such. Using one raw pointer and one <code>&amp;mut</code> pointer can still cause problems.</p>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1432453605, "post_id": 30407192, "comment_id": 48928113, "body": "since you are already creating a facade, you could internally use whatever you want. Therefore i suggest to use <a href=\"http://stackoverflow.com/a/30411267/1103681\">my macro solution</a> internally to keep this in safe code. You should never use unsafe code when there&#39;s an equal safe code version."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1432336632, "creation_date": 1432336632, "answer_id": 30407192, "question_id": 30406852, "link": "https://stackoverflow.com/questions/30406852/how-to-use-unsafe-aliasing/30407192#30407192", "title": "How to use (unsafe) aliasing?", "body": "<p>Your main function will have to be implemented using unsafe code in order to use raw pointers. Raw pointers allow you to bypass Rust's aliasing rules. You can then have two functions that act as safe fa\u00e7ades for this unsafe implementation.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>unsafe fn foo(src: *const u8, dst: *mut u8, len: usize) {\n    for i in 0..len - 1 {\n        *dst.offset(i as isize) = *src.offset(i as isize + 1) * 2;\n    }\n}\n\nfn foo_inplace(buf: &amp;mut [u8]) {\n    unsafe { foo(buf.as_ptr(), buf.as_mut_ptr(), buf.len()) }\n}\n\nfn foo_separate(src: &amp;[u8], dst: &amp;mut [u8]) {\n    assert!(src.len() == dst.len());\n    unsafe { foo(src.as_ptr(), dst.as_mut_ptr(), src.len()) }\n}\n\nfn main() {\n    let src = &amp;[0, 1, 2, 3, 4, 5];\n    let dst = &amp;mut [0, 0, 0, 0, 0, 0];\n\n    let buf = &amp;mut [11, 22, 33, 44, 55, 66];\n\n    foo_separate(src, dst);\n    foo_inplace(buf);\n\n    println!(\"src: {:?}\", src);\n    println!(\"dst: {:?}\", dst);\n    println!(\"buf: {:?}\", buf);\n}\n</code></pre>\n\n<p><code>as_ptr()</code>, <code>as_mut_ptr()</code> and <code>len()</code> are methods on <a href=\"http://doc.rust-lang.org/std/primitive.slice.html\" rel=\"nofollow\">slices</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1432374685, "creation_date": 1432374685, "answer_id": 30411267, "question_id": 30406852, "link": "https://stackoverflow.com/questions/30406852/how-to-use-unsafe-aliasing/30411267#30411267", "title": "How to use (unsafe) aliasing?", "body": "<p>You can use a macro to achieve this in safe code. It'll work for all arguments that have a <code>len</code> function and support indexing. This is basically duck-typing.</p>\n\n<pre><code>macro_rules! inplace(\n    ($a:ident, $b:ident) =&gt; (for i in 0..($a.len()-1) {\n        $a[i] = $b[i + 1] * 2;\n    })\n);\n\nfn main() {\n    let mut arr = [1, 2, 3, 4, 5];\n    inplace!(arr, arr);\n    println!(\"{:?}\", arr);\n}\n</code></pre>\n\n<p>outputs</p>\n\n<blockquote>\n  <p>[4, 6, 8, 10, 5]</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1432388597, "creation_date": 1432388597, "answer_id": 30413411, "question_id": 30406852, "link": "https://stackoverflow.com/questions/30406852/how-to-use-unsafe-aliasing/30413411#30413411", "title": "How to use (unsafe) aliasing?", "body": "<p>No, you cannot do so in safe Rust. You can use unsafe code to work around aliasing limitations if you wish to but...</p>\n\n<blockquote>\n  <p>but it has a clever optimization that allows the input and output buffer to be the same</p>\n</blockquote>\n\n<p>what you call an optimization, I call a pessimization.</p>\n\n<p>When the two buffers are guaranteed not to be the same, the optimizer can vectorize your code. It means 4x or 8x less comparisons for the loop, greatly speeding up the execution for larger inputs.</p>\n\n<p>In the absence of aliasing information, however, it must pessimistically assume that the inputs could be aliased and therefore cannot do such optimization. Worse, not knowing <em>how</em> they are aliased, it does not even know whether <code>&amp;dst[i] == &amp;src[i-1]</code> or <code>&amp;dst[i] == &amp;src[i]</code> or <code>&amp;dst[i] == &amp;src[i+1]</code>; it means pre-fetching is out etc...</p>\n\n<hr>\n\n<p>In safe Rust, however, this information is available. It does force you to write two routines (one for a single input, one for two inputs) but both can be optimized accordingly.</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 618, "favorite_count": 0, "accepted_answer_id": 30407192, "answer_count": 4, "score": 5, "last_activity_date": 1432388597, "creation_date": 1432334266, "last_edit_date": 1432343663, "question_id": 30406852, "link": "https://stackoverflow.com/questions/30406852/how-to-use-unsafe-aliasing", "title": "How to use (unsafe) aliasing?", "body": "<p>Rust has strict aliasing rules. But can I work around them if \"I know what I'm doing\"?</p>\n\n<p>I'm trying to convert to Rust a C function that performs a complicated operation by reading from input buffer and writing to a destination buffer, but it has a clever optimization that allows the input and output buffer to be the same:</p>\n\n<pre><code>foo(src, dst); // result is written to dst\nfoo(buf, buf); // legal in C, does the operation in-place\n</code></pre>\n\n<p>For the sake of the question let's say it's something like:</p>\n\n<pre><code>void inplace(char *src, char *dst, int len) {\n   for(int i=0; i &lt; len-1; i++) {\n      dst[i] = src[i+1] * 2; // algorithm works even if src == dst\n   }\n}\n</code></pre>\n\n<p>In safe subset of Rust I'd have to have two nearly copy &amp; pasted versions of the function <code>fn(&amp;mut)</code> and <code>fn(&amp;, &amp;mut)</code>. </p>\n\n<p>Is there a way to cheat Rust to get both mutable and immutable reference to the same buffer?</p>\n"}, {"tags": ["generics", "struct", "rust"], "answers": [{"comments": [{"owner": {"reputation": 549, "user_id": 4396823, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e7493ed20de304e4d88666ff6977ae33?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/4396823/steve"}, "edited": false, "score": 0, "creation_date": 1432306931, "post_id": 30400004, "comment_id": 48887673, "body": "Why don&#39;t you need to specify the &lt;T&gt; in MyStruct when it&#39;s being created? Also, whats the difference between impl&lt;T&gt; and MyStruct&lt;T&gt;?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1432307279, "post_id": 30400004, "comment_id": 48887893, "body": "To expand on this: you can get what you want by using <code>MyStruct::&lt;T&gt;</code>, but as Shepmaster said, you really don&#39;t need to."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 549, "user_id": 4396823, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e7493ed20de304e4d88666ff6977ae33?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/4396823/steve"}, "edited": false, "score": 1, "creation_date": 1432307405, "post_id": 30400004, "comment_id": 48887979, "body": "@Steve: Because it would be redundant with Rust&#39;s type inference.  As for the second question: the <code>&lt;T&gt;</code> in <code>impl&lt;T&gt;</code> <i>introduces</i> a type parameter; <code>MyStruct&lt;T&gt;</code> is simply using it.  It&#39;s not obvious in this specific case, but the distinction is important for more complicated <code>impl</code> blocks (such as on traits with <code>where</code> clauses)."}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1488860164, "post_id": 30400004, "comment_id": 72407548, "body": "You <i>do</i> need to specify the template, sometimes. In current versions of Rust, if I fail to get lifetimes correct, I get &quot;lifetime of reference outlives lifetime of borrowed content&quot; <i>only</i> if I specify the template parameters. If I don&#39;t (leaving the compiler to infer them) I get a much more terse &quot;cannot infer an appropriate lifetime due to conflicting requirements&quot; that doesn&#39;t show the lifetimes like the former error. It is good to know this syntax, and AFAICT, the book doesn&#39;t document this aspect."}, {"owner": {"reputation": 1094, "user_id": 887205, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/15460344f262499461a93b2aafbb41a2?s=128&d=identicon&r=PG", "display_name": "fanlix", "link": "https://stackoverflow.com/users/887205/fanlix"}, "edited": false, "score": 0, "creation_date": 1619080787, "post_id": 30400004, "comment_id": 118798210, "body": "what if test_field is not an Option&lt;T&gt;, but a T?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1094, "user_id": 887205, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/15460344f262499461a93b2aafbb41a2?s=128&d=identicon&r=PG", "display_name": "fanlix", "link": "https://stackoverflow.com/users/887205/fanlix"}, "edited": false, "score": 0, "creation_date": 1619112648, "post_id": 30400004, "comment_id": 118812949, "body": "@fanlix I don&#39;t follow \u2014 you <i>have</i> to provide a value for every field when instantiating <code>MyStruct</code>. If you have a <code>T</code>, then you&#39;ll need a value for the <code>T</code>, which will already specify the concrete type. Perhaps if you provide a playground demonstrating what you  mean."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1555892793, "last_edit_date": 1555892793, "creation_date": 1432306728, "answer_id": 30400004, "question_id": 30399953, "link": "https://stackoverflow.com/questions/30399953/what-is-the-proper-way-to-create-a-new-generic-struct/30400004#30400004", "title": "What is the proper way to create a new generic struct?", "body": "<p>I <strong>highly recommend</strong> reading <a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a>. It covers basics like this, and the Rust team spent a lot of time to make it good! Specifically, the <a href=\"https://doc.rust-lang.org/book/ch10-00-generics.html\" rel=\"noreferrer\">section on generics</a> would probably have helped here.</p>\n\n<p>You don't need to use <code>&lt;T&gt;</code> when instantiating the struct. The type for <code>T</code> will be inferred. You will need to declare that <code>T</code> is a generic type on the <code>impl</code> block:</p>\n\n<pre><code>struct MyStruct&lt;T&gt; {\n    test_field: Option&lt;T&gt;,\n    name: String,\n    age: i32,\n}\n\nimpl&lt;T&gt; MyStruct&lt;T&gt; {\n//  ^^^\n    fn new(new_age: i32, new_name: String) -&gt; MyStruct&lt;T&gt; {\n        MyStruct {\n            test_field: None,\n            age: new_age,\n            name: new_name,\n        }\n    }\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/30399953/what-is-the-proper-way-to-create-a-new-generic-struct/30400004?noredirect=1#comment48887893_30400004\">DK. points out</a>, you could choose to specify the type parameter using the <em>turbofish</em> syntax (<code>::&lt;&gt;</code>):</p>\n\n<pre><code>MyStruct::&lt;T&gt; {\n//      ^^^^^\n    test_field: None,\n    age: new_age,\n    name: new_name,\n}\n</code></pre>\n\n<p>Modern compiler versions actually tell you this now:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  = help: use `::&lt;...&gt;` instead of `&lt;...&gt;` if you meant to specify type arguments\n  = help: or use `(...)` if you meant to specify fn arguments\n</code></pre>\n\n<p>I've only ever seen something like this when the types are ambiguous, which doesn't happen very often.</p>\n"}], "owner": {"reputation": 549, "user_id": 4396823, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e7493ed20de304e4d88666ff6977ae33?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/4396823/steve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5701, "favorite_count": 1, "accepted_answer_id": 30400004, "answer_count": 1, "score": 5, "last_activity_date": 1555892949, "creation_date": 1432306599, "last_edit_date": 1555892949, "question_id": 30399953, "link": "https://stackoverflow.com/questions/30399953/what-is-the-proper-way-to-create-a-new-generic-struct", "title": "What is the proper way to create a new generic struct?", "body": "<p>I'm trying to make a generic struct that can be initialized to something of type <code>T</code>. It looks like this:</p>\n\n<pre><code>pub struct MyStruct&lt;T&gt; {\n    test_field: Option&lt;T&gt;,\n    name: String,\n    age: i32,\n}\n\nimpl MyStruct&lt;T&gt; {\n    fn new(new_age: i32, new_name: String) -&gt; MyStruct&lt;T&gt; {\n        MyStruct&lt;T&gt; {\n            test_field: None,\n            age: new_age,\n            name: new_name,\n        }\n    }\n}\n</code></pre>\n\n<p>This doesn't seem to work. Among other errors, I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: chained comparison operators require parentheses\n --&gt; src/lib.rs:9:17\n  |\n9 |         MyStruct&lt;T&gt; {\n  |                 ^^^^^\n  |\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 1, "creation_date": 1432306804, "post_id": 30399780, "comment_id": 48887592, "body": "Ah - <a href=\"https://doc.rust-lang.org/std/vec/\" rel=\"nofollow noreferrer\">the docs say</a> it&#39;s &quot;written Vec&lt;T&gt; but pronounced &#39;vector.&#39;&quot;"}], "answers": [{"tags": [], "owner": {"reputation": 1406, "user_id": 1379930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/373e9e09bd32347a059d56cba8691d84?s=128&d=identicon&r=PG", "display_name": "Jeff Ames", "link": "https://stackoverflow.com/users/1379930/jeff-ames"}, "is_accepted": false, "score": 2, "last_activity_date": 1432306501, "creation_date": 1432306501, "answer_id": 30399914, "question_id": 30399780, "link": "https://stackoverflow.com/questions/30399780/what-does-vect-mean/30399914#30399914", "title": "What does `Vec&lt;T&gt;` mean?", "body": "<p><code>Vec&lt;T&gt;</code> is a generic type indicating a vector where each element has type <code>T</code>. See the sections on <a href=\"https://doc.rust-lang.org/book/vectors.html\" rel=\"nofollow\">vectors</a> and <a href=\"https://doc.rust-lang.org/book/generics.html\" rel=\"nofollow\">generics</a> for more details.</p>\n"}, {"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1432307494, "post_id": 30399922, "comment_id": 48888035, "body": "I feel like we need a T-shirt with <code>Vec&lt;</code> on one side and <code>&gt;</code> on the other."}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1432315536, "post_id": 30399922, "comment_id": 48892696, "body": "@DK. Nice. :) Or we could just print <code>Vec&lt;_&gt;</code> on the front."}, {"owner": {"reputation": 158, "user_id": 1230116, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/13508258b2800bd09279a4c7f4703f9c?s=128&d=identicon&r=PG", "display_name": "jking", "link": "https://stackoverflow.com/users/1230116/jking"}, "edited": false, "score": 1, "creation_date": 1595294651, "post_id": 30399922, "comment_id": 111418535, "body": "The answer has help me understand Rust better. Thanks. I feel good, before now, i felt lost :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1432308653, "last_edit_date": 1432308653, "creation_date": 1432306521, "answer_id": 30399922, "question_id": 30399780, "link": "https://stackoverflow.com/questions/30399780/what-does-vect-mean/30399922#30399922", "title": "What does `Vec&lt;T&gt;` mean?", "body": "<p><code>Vec&lt;T&gt;</code> means \"A vector of items. The items are of type <code>T</code>\". Let's unpack that a bit...</p>\n\n<p>A <em>vector</em> is a data structure that contains zero-or-more items of the same type. The items have an order, and you can access the items by index (0, 1, ...). You can add and remove items. The items themselves are stored in a contiguous heap-allocated area.</p>\n\n<p><code>T</code> is a common <em>generic type parameter</em>. A type parameter allows you to write code that abstracts over a specific type, without caring what that type is. In this example, we can create a <code>MyThing</code> with <strong>any kind</strong> of inner value:</p>\n\n<pre><code>struct MyThing&lt;T&gt; {\n    thing: T,\n}\n</code></pre>\n\n<p>Here, <code>T</code> is a type parameter, as it is enclosed in the <code>&lt;&gt;</code>. It doesn't have to be a <code>T</code>, it could be <code>S</code> or <code>Z</code> or <code>MyLittlePony</code>. However, it's common to use <code>T</code> as a shorthand for \"type\". It's also common to use single-letter names to avoid clashing with concrete type names.</p>\n\n<p>As humans, we will sometimes be a little fast-and-loose with terminology and use <code>T</code> in the same way we might use <code>x</code> in mathematics or <code>foo</code> in programming - a thing we don't care to specify yet.</p>\n\n<p>I would pronounce it aloud as \"vec tee\" or \"a vec of tee\", but this is pretty subjective.</p>\n"}], "owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 463, "favorite_count": 0, "accepted_answer_id": 30399922, "answer_count": 2, "score": 4, "last_activity_date": 1432308653, "creation_date": 1432306108, "question_id": 30399780, "link": "https://stackoverflow.com/questions/30399780/what-does-vect-mean", "title": "What does `Vec&lt;T&gt;` mean?", "body": "<p><a href=\"https://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow\">The Rust Book</a> sometimes says things like \"here we want a <code>Vec&lt;T&gt;</code>\".</p>\n\n<p>Does this mean anything other than \"a thing of type Vector?\" Also, how would you pronounce it - \"vec tee\"?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1432395455, "post_id": 30399738, "comment_id": 48915065, "body": "The &quot;fixed&quot; version of the non-working program mentioned above is <a href=\"http://is.gd/nSw4vY\" rel=\"nofollow noreferrer\">is.gd/nSw4vY</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 1, "creation_date": 1432395354, "post_id": 30400472, "comment_id": 48915039, "body": "Your use of brace matching illustrated how I needed to fix my original broken version.  The example you&#39;ve provided couples the parameters of nif_inner to nif_init.  This is avoidable by moving the brace matching to nif_inner and using a token tree matcher in nif_init.  Parenthesis do work, but I agree that braces are less confusing.  See <a href=\"http://is.gd/6fZ9q7\" rel=\"nofollow noreferrer\">is.gd/6fZ9q7</a> for the decoupled version of your example.  And thanks for pulling me out of the muck once again!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1432395548, "post_id": 30400472, "comment_id": 48915100, "body": "@goertzenator I&#39;m glad my example helped! I was a bit worried that I&#39;d misread your original question and was answering the wrong thing!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1432308162, "creation_date": 1432308162, "answer_id": 30400472, "question_id": 30399738, "link": "https://stackoverflow.com/questions/30399738/cant-forward-parameters-to-nested-macros/30400472#30400472", "title": "Can&#39;t forward parameters to nested macros", "body": "<p>For this case, you can't use parentheses as grouping, you need to use them as part of your macro pattern. I'd avoid using parens to avoid this confusion.</p>\n\n<p>Here, I changed your macro a bit to accept zero-or-more sets of <code>{}</code>. You can macro-iterate over each of them and call your inner macro:</p>\n\n<pre><code>macro_rules! nif_inner {\n    ($name:expr, $args:expr, $meth:expr) =&gt; ()\n}\n\nmacro_rules! nif_init {\n    ($module:expr, $({ $name:expr, $args:expr, $meth:expr }),*) =&gt; (\n        $(nif_inner!(name, $args, $meth);)*\n    )\n}\n\nnif_init!(\n    \"hello\",\n    { \"name1\", 1, true },\n    { \"name2\", 2, false }\n);\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 452, "favorite_count": 0, "accepted_answer_id": 30400472, "answer_count": 1, "score": 2, "last_activity_date": 1432308162, "creation_date": 1432306017, "last_edit_date": 1432306569, "question_id": 30399738, "link": "https://stackoverflow.com/questions/30399738/cant-forward-parameters-to-nested-macros", "title": "Can&#39;t forward parameters to nested macros", "body": "<p>I am working on Rust macros to generate a static array of structures that describe FFI callbacks.  What I currently have is...</p>\n\n<pre><code>// some trivial callback functions\nextern \"C\" fn my_fun_1(argc: u32, argv: *const i32) -&gt; i32 { 1 }\nextern \"C\" fn my_fun_2(argc: u32, argv: *const i32) -&gt; i32 { 2 }\n\n\n// create static array of ErlNifFunc describing above callbacks\nnif_init!(b\"my_module\\0\", \n    nif!(b\"my_fun_1\\0\", 3, my_fun_1),\n    nif!(b\"my_fun_2\\0\", 5, my_fun_2));\n</code></pre>\n\n<p>(whole thing is <a href=\"https://play.rust-lang.org/?gist=cd6f9ee69392277ad03c&amp;version=stable\" rel=\"nofollow\">here</a>)</p>\n\n<p>This works because I only need to provide one expansion of the information provided to the <code>nif!</code> macro.  But now, in addition to generating an array of structs, I want to work towards generating wrapper functions for the provided functions.  So, I can't invoke <code>nif!</code> right away because I now need to do more than one expansion pass on the underlying parameters.  I effectively need to move the <code>nif!</code> invocations inside <code>nif_init!</code>, and this is where I drown.  I think the top level <code>nif_init!</code> needs to look like this...</p>\n\n<pre><code>nif_init!(b\"my_module\\0\", \n    (b\"my_fun_1\\0\", 3, my_fun_1),\n    (b\"my_fun_2\\0\", 5, my_fun_2));\n</code></pre>\n\n<p>... with the inner parenthesised parameters getting passed on to sub-macros, but I just cannot make it go.  The full non-working thing is <a href=\"https://play.rust-lang.org/?gist=72b0f16ac7b04d2d0dbc&amp;version=stable\" rel=\"nofollow\">here</a>.  To clarify, this version just tries to do the macro invocation internally.  I'm not trying to generate any wrapper functions yet.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1432287859, "post_id": 30392979, "comment_id": 48874642, "body": "What is the upside of using a <code>&amp;mut F</code> / <code>FnMut</code> compared to the simpler naive <code>&amp;F</code> / <code>Fn</code> ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1432289994, "post_id": 30392979, "comment_id": 48875997, "body": "<code>F: FnMut</code> is <i>more broadly useful</i>.  Look at it like this: there is no particular reason to <i>not</i> allow closures that mutate their environment, so we might as well allow them.  <code>F: Fn</code> is not really any simpler, either, just <i>different</i>.  A different trait, and it only requires an immutable pointer rather than a mutable one.  The semantics of the <code>explore</code> function are simple enough that the pointer being mutable isn&#39;t even inconvenient.  <code>&#47;shrug</code>"}, {"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1432292080, "post_id": 30392979, "comment_id": 48877325, "body": "Can we have several calls of <code>&amp;mut operate_i32</code> ? Shouldn&#39;t that lock the function for other calls ? But i see your point. Thanks"}, {"owner": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "edited": false, "score": 0, "creation_date": 1432298961, "post_id": 30392979, "comment_id": 48882006, "body": "Is it possible to avoid the enum wrappers if I knew that the vectors were homogeneous, and the only unknown was the number of dimensions? eg <code>Vec&lt;Vec&lt;T&gt;&gt;</code> or <code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1432307014, "post_id": 30392979, "comment_id": 48887722, "body": "@tafia: In this case, no.  There&#39;s nothing to <i>persist</i> the borrow beyond the call to <code>explore</code>.  We take a borrow, pass it to <code>explore</code>, and then it goes away."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "edited": false, "score": 0, "creation_date": 1432307129, "post_id": 30392979, "comment_id": 48887791, "body": "@Dale: That sounds like a different question.  In <i>that</i> case, you&#39;re dealing with progressively deconstructing a type.  Short answer: you&#39;d want a trait that both <code>Vec&lt;X&gt;</code> and <code>T</code> implement with a method that somehow abstracts the behaviour that differs between the two cases.  In other words: traits are how you do overloading in Rust.  If you need more than that, it might be best to ask a more specific question."}, {"owner": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "edited": false, "score": 0, "creation_date": 1432314131, "post_id": 30392979, "comment_id": 48891998, "body": "@DK: Thanks. It is a bit of a side question. I tried using traits to no avail. I might just leave it for now."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1432286561, "creation_date": 1432286561, "answer_id": 30392979, "question_id": 30392512, "link": "https://stackoverflow.com/questions/30392512/recursively-explore-a-multidimensional-vector/30392979#30392979", "title": "Recursively explore a multidimensional vector", "body": "<p>Yes.  There are a few ways you could potentially do it, but without more details, I'm just going to suggest the following, relatively simple approach:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// In Rust, prefer to use an enum over dynamic dispatch.\nenum Item&lt;T&gt; {\n    Collection(Vec&lt;Item&lt;T&gt;&gt;),\n    Value(T),\n}\n\n// This explore function is generic over both the type being stored (T),\n// and the operation to be performed on values.\nfn explore&lt;T, F&gt;(collection: &amp;[Item&lt;T&gt;], operate: &amp;mut F)\nwhere F: FnMut(&amp;T) {\n    for item in collection {\n        match item {\n            &amp;Item::Collection(ref items) =&gt; explore(items, operate),\n            &amp;Item::Value(ref value) =&gt; operate(value)\n        }\n    }\n}\n\nfn operate_i32(value: &amp;i32) {\n    println!(\"operate({})\", value);\n}\n\nfn main() {\n    use Item::*;\n\n    let root = vec![\n        Value(1),\n        Collection(vec![\n            Value(2),\n            Value(3),\n        ]),\n        Value(4),\n    ];\n\n    explore(&amp;root, &amp;mut operate_i32)\n}\n</code></pre>\n\n<p>Further pertinent reading can be found in the Rust Book chapters on <a href=\"http://doc.rust-lang.org/book/enums.html\" rel=\"nofollow\">Enums</a>, <a href=\"http://doc.rust-lang.org/book/match.html\" rel=\"nofollow\">the <code>match</code> construct</a> and <a href=\"http://doc.rust-lang.org/book/closures.html\" rel=\"nofollow\">closures</a>.</p>\n"}], "owner": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 441, "favorite_count": 0, "accepted_answer_id": 30392979, "answer_count": 1, "score": 1, "last_activity_date": 1432300293, "creation_date": 1432285265, "last_edit_date": 1432300293, "question_id": 30392512, "link": "https://stackoverflow.com/questions/30392512/recursively-explore-a-multidimensional-vector", "title": "Recursively explore a multidimensional vector", "body": "<p>I am currently learning Rust. I am trying to convert a small project written in a dynamic language as I learn. I have come across a problem which I am struggling find a solution for.</p>\n\n<p>I wish to recursively visit each element of a vector of <em>n</em> dimensions.</p>\n\n<p>The following is generalised code of the problem:</p>\n\n<pre><code>explore(collection) {\n    for item in collection {\n        if item is Collection {\n            explore(item)\n        }\n        else {\n            operate(item)\n        }\n    }\n}\n</code></pre>\n\n<p>I am using <code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)</code></p>\n\n<p>It sort of feels like this isn't possible without resorting to using unsafe code (which I have yet to learn).</p>\n\n<p>My questions are as follows:</p>\n\n<ol>\n<li>Is this currently possible in Rust?</li>\n<li>If so, then what would be the most Rust-like approach?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1432295091, "post_id": 30389043, "comment_id": 48879300, "body": "<i>it seems like it&#39;s difficult to create one without having all of the fields set</i> =&gt; Actually, it&#39;s impossible in safe Rust: the compiler keeps you honest."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432300394, "post_id": 30389043, "comment_id": 48883005, "body": "And this is <i>a good thing</i>. No more accidentally using things that are NULL! Even better, no more accidentally using things that aren&#39;t NULL but also aren&#39;t initialized!"}], "answers": [{"comments": [{"owner": {"reputation": 91, "user_id": 4708913, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9fc1cfa396adc631d5ae5460a593a2d0?s=128&d=identicon&r=PG", "display_name": "Mape", "link": "https://stackoverflow.com/users/4708913/mape"}, "edited": false, "score": 0, "creation_date": 1524513391, "post_id": 30389229, "comment_id": 86994417, "body": "Can someone explain the syntax of <code>if let Some(ref mut stream) = self.stream {</code>?"}, {"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "reply_to_user": {"reputation": 91, "user_id": 4708913, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9fc1cfa396adc631d5ae5460a593a2d0?s=128&d=identicon&r=PG", "display_name": "Mape", "link": "https://stackoverflow.com/users/4708913/mape"}, "edited": false, "score": 2, "creation_date": 1524513567, "post_id": 30389229, "comment_id": 86994508, "body": "Sure. That should&#39;ve just been <code>ref stream</code>, I&#39;ve fixed it. It just means that a reference to the stream within the <code>Option</code> is obtained, rather than the moving the value entirely. For further information, check out <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">the Rust book</a>."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 14, "last_activity_date": 1524513679, "last_edit_date": 1524513679, "creation_date": 1432273778, "answer_id": 30389229, "question_id": 30389043, "link": "https://stackoverflow.com/questions/30389043/how-are-you-able-to-create-partially-initialised-structs/30389229#30389229", "title": "How are you able to create partially initialised structs?", "body": "<p>One thing you can do is to wrap the <code>TcpStream</code> in an <code>Option</code>, i.e. <code>Option&lt;TcpStream&gt;</code>. When you first construct the struct, it'll be <code>None</code>, and when you initialize it you make it <code>self.stream = Some(&lt;initialize tcp stream&gt;)</code>. Wherever you use the <code>TCPStream</code>, you'll have to check if it's <code>Some</code>, i.e. if it has already been initialized. If you can guarantee your behavior then you can just <code>unwrap()</code>, but it's probably better to make a check anyways.</p>\n\n<pre><code>struct Connection {\n    url: String,\n    stream: Option&lt;TcpStream&gt;\n}\n\nimpl Connection {\n    pub fn new() -&gt; Connection {\n        Connection {\n            url: \"www.google.com\".to_string(),\n            stream: None,\n        }\n    }\n\n    pub fn initialize_stream(&amp;mut self) {\n        self.stream = Some(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n    }\n\n    pub fn method_that_uses_stream(&amp;self) {\n        if let Some(ref stream) = self.stream {\n            // can use the stream here\n        } else {\n            println!(\"the stream hasn't been initialized yet\");\n        }\n    }\n}\n</code></pre>\n\n<p>This is similar to what is done in Swift, in case you're familiar with that language.</p>\n"}, {"tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 4, "last_activity_date": 1524513699, "last_edit_date": 1524513699, "creation_date": 1432274113, "answer_id": 30389306, "question_id": 30389043, "link": "https://stackoverflow.com/questions/30389043/how-are-you-able-to-create-partially-initialised-structs/30389306#30389306", "title": "How are you able to create partially initialised structs?", "body": "<p>All fields indeed have to be initialized when creating the <code>struct</code> instance (there is no <em>null</em> in Rust) so all the memory is allocated.\nThere is often a dedicated method (like <code>new</code>) that sets default values for fields which are supposed to be modified at a later stage.</p>\n\n<p>I'd use the <code>Box</code> when you don't know the size of the field (like <code>Vec</code> does).</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1600270142, "creation_date": 1600270142, "answer_id": 63923342, "question_id": 30389043, "link": "https://stackoverflow.com/questions/30389043/how-are-you-able-to-create-partially-initialised-structs/63923342#63923342", "title": "How are you able to create partially initialised structs?", "body": "<p>As an extension to <a href=\"https://stackoverflow.com/a/30389229/155423\">Jorge Israel Pe\u00f1a's answer</a>, you can use a <em>builder</em>. The builder has all the optional fields and produces the final value without <code>Option</code>s:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::net::TcpStream;\n\nstruct ConnectionBuilder {\n    url: String,\n    stream: Option&lt;TcpStream&gt;,\n}\n\nimpl ConnectionBuilder {\n    fn new(url: impl Into&lt;String&gt;) -&gt; Self {\n        Self {\n            url: url.into(),\n            stream: None,\n        }\n    }\n\n    fn stream(mut self, stream: TcpStream) -&gt; Self {\n        self.stream = Some(stream);\n        self\n    }\n\n    fn build(self) -&gt; Connection {\n        let url = self.url;\n        let stream = self\n            .stream\n            .expect(&quot;Perform actual error handling or default value&quot;);\n        Connection { url, stream }\n    }\n}\n\nstruct Connection {\n    url: String,\n    stream: TcpStream,\n}\n\nimpl Connection {\n    fn method_that_uses_stream(&amp;self) {\n        // can use self.stream here\n    }\n}\n</code></pre>\n<p>This means that you don't have to litter your code with checks to see if the stream has been set yet.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44170735/155423\">How to initialize a struct with a series of arguments</a></li>\n<li><a href=\"https://stackoverflow.com/q/43840415/155423\">Do Rust builder patterns have to use redundant struct code?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38158167/155423\">Is it possible to create a macro to implement builder pattern methods?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41617182/155423\">How to write an idiomatic build pattern with chained method calls in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 3078, "user_id": 161711, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/ef8fc9ba9d8516c33de7e52fb0a8a020?s=128&d=identicon&r=PG", "display_name": "Paul Thompson", "link": "https://stackoverflow.com/users/161711/paul-thompson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8662, "favorite_count": 2, "accepted_answer_id": 30389229, "answer_count": 3, "score": 17, "last_activity_date": 1600270142, "creation_date": 1432272919, "last_edit_date": 1524513610, "question_id": 30389043, "link": "https://stackoverflow.com/questions/30389043/how-are-you-able-to-create-partially-initialised-structs", "title": "How are you able to create partially initialised structs?", "body": "<p>When creating a struct in Rust it seems like it's difficult to create one without having all of the fields set. For example with the following code</p>\n\n<pre><code>struct Connection {\n    url: String,\n    stream: TcpStream\n}\n</code></pre>\n\n<p>You aren't able to set <code>url</code> without giving <code>stream</code> as well.</p>\n\n<pre><code>// Compilation error asking for 'stream'\nlet m = Connection { url: \"www.google.com\".to_string() }; \n</code></pre>\n\n<p>How are you able to create these references that might be <code>Option&lt;None&gt;</code> until a later time?</p>\n\n<p>The best I have found is using the <code>Default</code> trait, but I'd rather not have to create the <code>TcpStream</code> until a later time than when the struct is initialised. Am I able to do this with something like a <code>Box</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1141, "user_id": 5802468, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/yqeEu.gif?s=128&g=1", "display_name": "Majora320", "link": "https://stackoverflow.com/users/5802468/majora320"}, "edited": false, "score": 1, "creation_date": 1502483851, "post_id": 30385954, "comment_id": 78246242, "body": "2017: See <a href=\"https://github.com/rust-lang/rust/issues/28229\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/28229</a>, <a href=\"https://github.com/rust-lang/rust/pull/43690\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/43690</a>."}], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 3, "last_activity_date": 1432251801, "creation_date": 1432251801, "answer_id": 30386183, "question_id": 30385954, "link": "https://stackoverflow.com/questions/30385954/clone-not-implemented-on-function-sometimes/30386183#30386183", "title": "Clone not implemented on function... sometimes", "body": "<p>The current implementation of <code>Clone</code> for <code>fn</code>s <a href=\"http://doc.rust-lang.org/src/core/clone.rs.html#92\" rel=\"nofollow\">isn't complete</a>, so this isn't possible as-is, though it's intended to be fixed at some point.</p>\n\n<p>In the meantime one thing you can do, albeit at the cost of an extra indirection, is to put it inside something like an <code>Rc</code> or <code>Arc</code>, since that is indeed <code>Clone</code>.</p>\n\n<p>See this example which assumes you want thread-safety, hence the <code>Arc</code>, though a simple <code>Rc</code> may suffice in your case:</p>\n\n<pre><code>use std::sync::Arc;\n\n#[derive(Clone)]\nenum Action {\n    Function (Arc&lt;fn(&amp;mut Vec&lt;i32&gt;)&gt;)\n}\nfn pop(vec:&amp;mut Vec&lt;i32&gt;) {\n    let _ = vec.pop();\n}\nfn main() {\n    let actions = vec![ Action::Function(Arc::new(pop)), Action::Function(Arc::new(pop)) ];\n    let actions_copy = actions.to_vec();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=bdb1e081501bdb9faac6&amp;version=stable\" rel=\"nofollow\">playpen</a></p>\n"}], "owner": {"reputation": 185, "user_id": 1525075, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d7ee8d588036ad4598f1495f277eba6?s=128&d=identicon&r=PG", "display_name": "Roy", "link": "https://stackoverflow.com/users/1525075/roy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 258, "favorite_count": 0, "accepted_answer_id": 30386183, "answer_count": 1, "score": 3, "last_activity_date": 1432252454, "creation_date": 1432250462, "last_edit_date": 1432252454, "question_id": 30385954, "link": "https://stackoverflow.com/questions/30385954/clone-not-implemented-on-function-sometimes", "title": "Clone not implemented on function... sometimes", "body": "<p>I have a vector of functiony enums. I want to clone this vector en masse. However, my Action enum can't derive Clone because Clone isn't implemented for a </p>\n\n<pre><code>fn(&amp;mut Vec&lt;i32&gt;)\n</code></pre>\n\n<p>It works if it's </p>\n\n<pre><code>fn(Vec&lt;i32&gt;)\n</code></pre>\n\n<p>though. It doesn't seem to like fns that borrow their parameters. Why is this? Is there a way for me to do this?</p>\n\n<pre><code>#[derive(Clone)]\nenum Action {\n    Function (fn(&amp;mut Vec&lt;i32&gt;))\n}\nfn pop(vec:&amp;mut Vec&lt;i32&gt;) {\n    let _ = vec.pop();\n}\nfn main() {\n    let actions = vec![ Action::Function(pop), Action::Function(pop) ];\n    let actions_copy = actions.to_vec();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2481, "user_id": 1106456, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/60b23f3de35058180807f35b623fcf83?s=128&d=identicon&r=PG", "display_name": "GolDDranks", "link": "https://stackoverflow.com/users/1106456/golddranks"}, "edited": false, "score": 0, "creation_date": 1432241489, "post_id": 30383934, "comment_id": 48857344, "body": "If we someday have write-only &amp;out references that turn to &amp;mut on write, maybe, writing this kind of thing without unsafe becomes easier? But the iterator still needs to convince the compiler that it&#39;s gonna loop exhaustively."}], "answers": [{"comments": [{"owner": {"reputation": 2481, "user_id": 1106456, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/60b23f3de35058180807f35b623fcf83?s=128&d=identicon&r=PG", "display_name": "GolDDranks", "link": "https://stackoverflow.com/users/1106456/golddranks"}, "edited": false, "score": 0, "creation_date": 1432252474, "post_id": 30385382, "comment_id": 48861669, "body": "Btw. to make initializing fixed-size arrays in a &quot;progressive&quot; way possible, would it suffice to have another, &quot;array builder&quot; type, that would be like a vector, but heap-allocated, with fixed capacity that would equal the final size of fixed-size array? After the builder have been fully initialized, it would be converted into a normal fixed-size array."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 2481, "user_id": 1106456, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/60b23f3de35058180807f35b623fcf83?s=128&d=identicon&r=PG", "display_name": "GolDDranks", "link": "https://stackoverflow.com/users/1106456/golddranks"}, "edited": false, "score": 0, "creation_date": 1432258129, "post_id": 30385382, "comment_id": 48863119, "body": "Such a mechanism would be nice to have in the future, and would help to increase the standing of arrays, but it depends on being able to express the length of an array generically. It will almost certainly happen eventually, but not for quite some time."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436221761, "post_id": 30385382, "comment_id": 50510318, "body": "crate <a href=\"https://crates.io/crates/arrayvec\" rel=\"nofollow noreferrer\">arrayvec</a> implements that kind of array builder, and indeed only for a selected lot of array sizes. I fear it will not optimize so well for array building, but we have no better way to implement it in Rust right now."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1432247768, "last_edit_date": 1432247768, "creation_date": 1432247250, "answer_id": 30385382, "question_id": 30383934, "link": "https://stackoverflow.com/questions/30383934/convincing-the-compiler-that-every-index-of-an-array-will-be-initialized/30385382#30385382", "title": "Convincing the compiler that every index of an array will be initialized", "body": "<p>You won\u2019t be able to convince the compiler of this, because it\u2019s not necessarily true.</p>\n\n<p>There are two unknown types here, <code>T</code> and <code>R</code>, and their interactions could break things here. Here\u2019s a couple of possible implementations of <code>Rand</code> and <code>Rng</code> that would make it blow up:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct T(Box&lt;u32&gt;);\n\nimpl Rand for T {\n    fn rand&lt;R: Rng&gt;(rng: &amp;mut R) -&gt; Self {\n        T(Box::new(rng.next_u32()))\n    }\n}\n\nstruct R(u32);\n\nimpl Rng for R {\n    fn next_u32(&amp;mut self) -&gt; u32 {\n        let next = self.0;\n        self.0 += 1;\n        if self.0 &gt; 10 {\n            panic!();\n        }\n        next\n    }\n}\n</code></pre>\n\n<p>Basically, if it is possible for <code>R</code> to trigger a panic and the <code>T</code> has a destructor, you\u2019re entering undefined behaviour, because the elements of the array may not all not be initialised at that stage. <code>Box&lt;T&gt;</code> is a particularly good example of such undefined behaviour, because you\u2019ll be trying to free an undefined memory address.</p>\n\n<p>This is why such usage of an array would need to either (a) have a length member to show how many of the items in the array have data so that you can skip destructors on the rest (this would require more unsafe code, of course, and simply disabling destructors is not something that is supported natively at present), or else (b) wrap each item with <code>Option</code>, setting the uninitialised values to <code>None</code> so that the illegal value\u2019s destructor won\u2019t be run.</p>\n\n<p>Or (c) you could use vectors.</p>\n\n<p>Fixed-size arrays are very much second class citizens in Rust at present.</p>\n"}], "owner": {"reputation": 2481, "user_id": 1106456, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/60b23f3de35058180807f35b623fcf83?s=128&d=identicon&r=PG", "display_name": "GolDDranks", "link": "https://stackoverflow.com/users/1106456/golddranks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 171, "favorite_count": 0, "accepted_answer_id": 30385382, "answer_count": 1, "score": 2, "last_activity_date": 1436220386, "creation_date": 1432240861, "last_edit_date": 1436220386, "question_id": 30383934, "link": "https://stackoverflow.com/questions/30383934/convincing-the-compiler-that-every-index-of-an-array-will-be-initialized", "title": "Convincing the compiler that every index of an array will be initialized", "body": "<p>I'm trying to implement the <code>Rand</code> trait for a buffer of 20 elements that implement the <code>Rand</code> trait themselves. I iterate the buffer through and initialize every element with a random value. However, I'm unable to convince the compiler that <code>buff</code> will end up fully initialized.</p>\n\n<p>What should I do to get it to accept this?</p>\n\n<pre><code>extern crate rand;\nuse rand::{Rand, Rng};\n\nstruct Buf20&lt;T&gt;([T; 20]);\n\nimpl&lt;T: Rand&gt; Rand for Buf20&lt;T&gt; {\n    fn rand&lt;R: Rng&gt;(rng: &amp;mut R) -&gt; Self {\n        let mut buff : [T; 20];\n        for element in &amp;mut buff {\n            *element = rng.gen();\n        }\n        Buf20(buff)\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "println"], "comments": [{"owner": {"reputation": 47296, "user_id": 2152082, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1e4e4a832231681b8a80323832e8af00?s=128&d=identicon&r=PG", "display_name": "Stephan", "link": "https://stackoverflow.com/users/2152082/stephan"}, "edited": false, "score": 0, "creation_date": 1432226769, "post_id": 30379341, "comment_id": 48848697, "body": "try to use TAB instead of SPACE. Should work fine with numbers or strings less than 8 characters."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1432230850, "post_id": 30379341, "comment_id": 48851228, "body": "If you do use tabs, then I wrote a crate to do elastic tabstops, which will align columns regardless of their length: <a href=\"https://github.com/BurntSushi/tabwriter\" rel=\"nofollow noreferrer\">github.com/BurntSushi/tabwriter</a>"}], "answers": [{"comments": [{"owner": {"reputation": 508, "user_id": 11950764, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8213f0ffc9106d7663c4b5f29f4ec9e5?s=128&d=identicon&r=PG", "display_name": "joe", "link": "https://stackoverflow.com/users/11950764/joe"}, "edited": false, "score": 1, "creation_date": 1567548319, "post_id": 30380640, "comment_id": 101993345, "body": "Curious: why not <code>{: &lt;10} | {: &lt;10} ...</code> instead of <code>{0: &lt;10} | {1: &lt;10} ...</code>? I just tested the former and it seems to do the same thing."}], "tags": [], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "is_accepted": true, "score": 25, "last_activity_date": 1543435061, "last_edit_date": 1543435061, "creation_date": 1432229598, "answer_id": 30380640, "question_id": 30379341, "link": "https://stackoverflow.com/questions/30379341/how-to-print-well-formatted-tables-to-the-console/30380640#30380640", "title": "How to print well-formatted tables to the console?", "body": "<p>The syntax is like the str.format syntax in Python. This:</p>\n\n<pre><code>fn main() {\n    println!(\n        \"{0: &lt;10} | {1: &lt;10} | {2: &lt;10} | {3: &lt;10}\",\n        \"total\", \"blanks\", \"comments\", \"code\"\n    );\n    println!(\"{0: &lt;10} | {1: &lt;10} | {2: &lt;10} | {3: &lt;10}\", 0, 0, 0, 0);\n    println!(\"{0: &lt;10} | {1: &lt;10} | {2: &lt;10} | {3: &lt;10}\", 77, 0, 3, 74);\n    println!(\"{0: &lt;10} | {1: &lt;10} | {2: &lt;10} | {3: &lt;10}\", 112, 0, 6, 106);\n    println!(\n        \"{0: &lt;10} | {1: &lt;10} | {2: &lt;10} | {3: &lt;10}\",\n        460, 0, 10, 1371\n    );\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=926795b7097824f91a4c5b629b4e44ea\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>produces the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>total      | blanks     | comments   | code      \n0          | 0          | 0          | 0         \n77         | 0          | 3          | 74        \n112        | 0          | 6          | 106       \n460        | 0          | 10         | 1371  \n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 590, "user_id": 507654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c36b6d3a9f80b1ee31cbd47ec45af3c6?s=128&d=identicon&r=PG", "display_name": "hbobenicio", "link": "https://stackoverflow.com/users/507654/hbobenicio"}, "is_accepted": false, "score": 4, "last_activity_date": 1543434818, "last_edit_date": 1543434818, "creation_date": 1543431239, "answer_id": 53526239, "question_id": 30379341, "link": "https://stackoverflow.com/questions/30379341/how-to-print-well-formatted-tables-to-the-console/53526239#53526239", "title": "How to print well-formatted tables to the console?", "body": "<p>Or you could use a specialized crate for formatting tables like <a href=\"https://github.com/phsym/prettytable-rs\" rel=\"nofollow noreferrer\">prettytable-rs</a></p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7249, "favorite_count": 6, "accepted_answer_id": 30380640, "answer_count": 2, "score": 16, "last_activity_date": 1543435061, "creation_date": 1432225468, "last_edit_date": 1543434966, "question_id": 30379341, "link": "https://stackoverflow.com/questions/30379341/how-to-print-well-formatted-tables-to-the-console", "title": "How to print well-formatted tables to the console?", "body": "<p>I have a program that prints out data that should be printed into a format that looks like a table. However, the table breaks when the numbers are longer than 2. I know about the <a href=\"https://doc.rust-lang.org/std/fmt/#syntax\" rel=\"noreferrer\"><code>width</code></a> parameter in <a href=\"https://doc.rust-lang.org/std/fmt\" rel=\"noreferrer\"><code>std::fmt</code></a>, but I can't get my head around it.</p>\n\n<p>Current output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>---------------------------------------\n| total | blanks: | comments: | code: |\n---------------------------------------\n|  0   |    0    |    0     |    0  |\n|  77   |    0    |    3     |    74  |\n|  112   |    0    |    6     |    106  |\n|  178   |    0    |    6     |    172  |\n|  218   |    0    |    7     |    211  |\n|  289   |    0    |    8     |    281  |\n|  380   |    0    |    9     |    371  |\n|  460   |    0    |    10     |    450  |\n|  535   |    0    |    11     |    524  |\n|  611   |    0    |    12     |    599  |\n|  692   |    0    |    14     |    678  |\n|  772   |    0    |    17     |    755  |\n|  873   |    0    |    18     |    855  |\n|  963   |    0    |    19     |    944  |\n|  1390   |    0    |    19     |    1371  |\n|  1808   |    0    |    19     |    1789  |\n|  2011   |    0    |    19     |    1992  |\n|  2259   |    0    |    19     |    2240  |\n|  2294   |    0    |    19     |    2275  |\n|  2349   |    0    |    19     |    2330  |\n|  2376   |    0    |    19     |    2357  |\n|  2430   |    0    |    19     |    2411  |\n|  2451   |    0    |    19     |    2432  |\n|  2515   |    13    |    19     |    2483  |\n|  2559   |    13    |    19     |    2527  |\n</code></pre>\n"}, {"tags": ["ssl", "github", "rust", "ssl-certificate", "rust-cargo"], "comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1432195957, "post_id": 30368027, "comment_id": 48826747, "body": "It&#39;s weird that you get an SSL warning on github.com... Are you behind an SSL proxy which would MITM your connection?"}, {"owner": {"reputation": 71, "user_id": 4923084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/23554991cbe307aefd03b96c64cf4280?s=128&d=identicon&r=PG&f=1", "display_name": "Tuxdevo", "link": "https://stackoverflow.com/users/4923084/tuxdevo"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1432196355, "post_id": 30368027, "comment_id": 48827016, "body": "I suspect my provider does it. The question is what to do..."}, {"owner": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 7, "creation_date": 1432198520, "post_id": 30368027, "comment_id": 48828338, "body": "@tuxdevo change provider, that is definitely unwanted behaviour from an internet provider."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 6, "creation_date": 1432216486, "post_id": 30368027, "comment_id": 48841255, "body": "To add to @rubenvb&#39;s point, if your ISP modifies your SSL certificates, then you <i>can&#39;t trust anything secure</i> on the Internet. Like online shopping, or banking. Run away quickly. You can probably name and shame them somewhere online too."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432216572, "post_id": 30368027, "comment_id": 48841328, "body": "It looks like ignoring the SSL certificate <a href=\"https://github.com/rust-lang/cargo/issues/1180\" rel=\"nofollow noreferrer\">is not currently supported in Cargo</a>."}, {"owner": {"reputation": 71, "user_id": 4923084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/23554991cbe307aefd03b96c64cf4280?s=128&d=identicon&r=PG&f=1", "display_name": "Tuxdevo", "link": "https://stackoverflow.com/users/4923084/tuxdevo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432217211, "post_id": 30368027, "comment_id": 48841857, "body": "Thanks, @Shepmaster."}], "answers": [{"tags": [], "owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "is_accepted": false, "score": 0, "last_activity_date": 1487957682, "creation_date": 1487957682, "answer_id": 42444885, "question_id": 30368027, "link": "https://stackoverflow.com/questions/30368027/invalid-ssl-certificate-when-building-a-crate-with-cargo/42444885#42444885", "title": "Invalid SSL certificate when building a crate with cargo", "body": "<p>As said in the comments this may be someone between you and Github modifying your communication (<a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\" rel=\"nofollow noreferrer\">MITM</a>) or a misconfiguration on your system (like missing certificates). (A problem on the side of Github is not likely.)</p>\n\n<p>Do debug first try with plain git: <code>git clone https://github.com/rust-lang/crates.io-index.git</code></p>\n\n<p>To get the details on what exactly failed use <code>openssl s_client -debug -showcerts -connect github.com:443</code> and if it doesn't exit on its own (because connecting worked) press <code>CTRL-C</code> to exit. The output contains information on what certificates were presented by the remote and how it was verified or failed to verify.</p>\n\n<p>If it is someone modifying your communication please publish the output of this and of a <code>traceroute github.com</code> or something equivalent so others can avoid that provider.</p>\n"}, {"tags": [], "owner": {"reputation": 3497, "user_id": 1773961, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f874a90dd15a5f5db1a8fb7e8c08ee25?s=128&d=identicon&r=PG&f=1", "display_name": "Indradhanush Gupta", "link": "https://stackoverflow.com/users/1773961/indradhanush-gupta"}, "is_accepted": false, "score": 1, "last_activity_date": 1512741225, "last_edit_date": 1512741225, "creation_date": 1512740908, "answer_id": 47715690, "question_id": 30368027, "link": "https://stackoverflow.com/questions/30368027/invalid-ssl-certificate-when-building-a-crate-with-cargo/47715690#47715690", "title": "Invalid SSL certificate when building a crate with cargo", "body": "<p>I ran into the same problem today and found that my <code>$HOME/.gitconfig</code> had this:</p>\n\n<pre><code>[url \"git@github.com:\"]\n    insteadOf = https://github.com/\n</code></pre>\n\n<p>I had added this to make <code>go get</code> to work over SSH for private repos. Commenting this out fixed the error.</p>\n"}], "owner": {"reputation": 71, "user_id": 4923084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/23554991cbe307aefd03b96c64cf4280?s=128&d=identicon&r=PG&f=1", "display_name": "Tuxdevo", "link": "https://stackoverflow.com/users/4923084/tuxdevo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2067, "favorite_count": 0, "answer_count": 2, "score": 7, "last_activity_date": 1512741225, "creation_date": 1432195759, "last_edit_date": 1487969728, "question_id": 30368027, "link": "https://stackoverflow.com/questions/30368027/invalid-ssl-certificate-when-building-a-crate-with-cargo", "title": "Invalid SSL certificate when building a crate with cargo", "body": "<p>While trying an example from the tutorial (guessing game) after defining a dependency (<code>rand=\"0.3.0\"</code>) I got this:</p>\n\n<pre><code>$ cargo build --verbose\n    Updating registry `https://github.com/rust-lang/crates.io-index`\nUnable to update registry https://github.com/rust-lang/crates.io-index\n\nCaused by:\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\n\nCaused by:\n  [16] The SSL certificate is invalid\n</code></pre>\n\n<p>Added this to cargo registry git repo, but without success:</p>\n\n<pre><code>[http]\n    sslVerify = false\n</code></pre>\n\n<p>Where to dig?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1432218408, "post_id": 30365904, "comment_id": 48842763, "body": "you might be interested in <a href=\"https://github.com/rust-lang/rfcs/issues/1038\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1038</a> and the corresponding PR about generic value parameters"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 7, "last_activity_date": 1432191601, "creation_date": 1432191601, "answer_id": 30366662, "question_id": 30365904, "link": "https://stackoverflow.com/questions/30365904/mutable-multidimensional-array-as-a-function-argument/30366662#30366662", "title": "Mutable multidimensional array as a function argument", "body": "<p>This comes down to a matter of memory layout. Assuming a type <code>T</code> with a size known at compile time (this constraint can be written <code>T: Sized</code>), the size of <code>[T; n]</code> is known at compile time (it takes <code>n</code> times as much memory as <code>T</code> does); but <code>[T]</code> is an unsized type; its length is not known at compile time. Therefore it can only be used through some form of indirection, such as a reference (<code>&amp;[T]</code>) or a box (<code>Box&lt;[T]&gt;</code>, though this is of limited practical value, with <code>Vec&lt;T&gt;</code> which allows you to add and remove items without needing to reallocate every single time by using overallocation).</p>\n\n<p>A slice of an unsized type doesn\u2019t make sense; it\u2019s <em>permitted</em> for reasons that are not clear to me, but you can never actually have an instance of it. (<code>Vec&lt;T&gt;</code>, by comparison, requires <code>T: Sized</code>.)</p>\n\n<p><code>&amp;[T; n]</code> can coerce to <code>&amp;[T]</code>, and <code>&amp;mut [T; n]</code> to <code>&amp;mut [T]</code>, but this only applies at the outermost level; the contents of slice is fixed (you\u2019d need to create a new array or vector to achieve such a transformation, because the memory layout of each item is different). The effect of this is that arrays work for single\u2010dimensional work, but for multi\u2010dimensional work they fall apart. Arrays are currently very much second\u2010class citizens in Rust, and will be until the language supports making slices generic over length, which it is likely to eventually.</p>\n\n<p>I recommend that you use either a single\u2010dimensional array (suitable for square matrices, indexed by <code>x * width + y</code> or similar), or vectors (<code>Vec&lt;Vec&lt;T&gt;&gt;</code>). There may also be libraries already out there abstracting over a suitable solution.</p>\n"}], "owner": {"reputation": 390, "user_id": 867695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d415e223f7bb2407cd53114ef2d0aff5?s=128&d=identicon&r=PG", "display_name": "romanows", "link": "https://stackoverflow.com/users/867695/romanows"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2088, "favorite_count": 3, "accepted_answer_id": 30366662, "answer_count": 1, "score": 7, "last_activity_date": 1432191601, "creation_date": 1432189013, "question_id": 30365904, "link": "https://stackoverflow.com/questions/30365904/mutable-multidimensional-array-as-a-function-argument", "title": "Mutable multidimensional array as a function argument", "body": "<p>In rustc 1.0.0, I'd like to write a function that mutates a two dimensional array supplied by the caller.  I was hoping this would work:</p>\n\n<pre><code>fn foo(x: &amp;mut [[u8]]) {\n    x[0][0] = 42;\n}\n\nfn main() {\n    let mut x: [[u8; 3]; 3] = [[0; 3]; 3];\n    foo(&amp;mut x);\n}\n</code></pre>\n\n<p>It fails to compile:</p>\n\n<pre><code>$ rustc fail2d.rs\nfail2d.rs:7:9: 7:15 error: mismatched types:\n expected `&amp;mut [[u8]]`,\n    found `&amp;mut [[u8; 3]; 3]`\n(expected slice,\n    found array of 3 elements) [E0308]\nfail2d.rs:7     foo(&amp;mut x);\n                    ^~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>I believe this is telling me I need to somehow feed the function a slice of slices, but I don't know how to construct this.</p>\n\n<p>It \"works\" if I hard-code the nested array's length in the function signature.  This isn't acceptable because I want the function to operate on multidimensional arrays of arbitrary dimension:</p>\n\n<pre><code>fn foo(x: &amp;mut [[u8; 3]]) {  // FIXME: don't want to hard code length of nested array\n    x[0][0] = 42;\n}\n\nfn main() {\n    let mut x: [[u8; 3]; 3] = [[0; 3]; 3];\n    foo(&amp;mut x);\n}\n</code></pre>\n\n<p>tldr; any zero-cost ways of passing a reference to a multidimensional array such that the function use statements like $x[1][2] = 3;$?</p>\n"}, {"tags": ["enums", "rust"], "answers": [{"tags": [], "owner": {"reputation": 718, "user_id": 4869038, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a3Kxj.jpg?s=128&g=1", "display_name": "spektr", "link": "https://stackoverflow.com/users/4869038/spektr"}, "is_accepted": false, "score": 1, "last_activity_date": 1432188283, "creation_date": 1432188283, "answer_id": 30365736, "question_id": 30365055, "link": "https://stackoverflow.com/questions/30365055/cannot-move-out-of-borrowed-content-when-matching-an-enum/30365736#30365736", "title": "Cannot move out of borrowed content when matching an enum", "body": "<p>I can't figure out the issue with 1) yet, but I did find an answer for 2).</p>\n\n<p>At the top, you need to use:</p>\n\n<p><code>use std::rc::Rc;</code></p>\n\n<p>instead of</p>\n\n<p><code>use std::rc;</code></p>\n"}, {"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1432191132, "post_id": 30366003, "comment_id": 48823938, "body": "Sure you can borrow in a <code>match</code> clause, but in your case you are limited by the way your structure is created. Even if you borrowed, you&#39;d still need to clone it either explicitly via <code>Clone</code> or implicitly via <code>Copy</code>. What you seem to be looking for is Iterator to traverse the tree."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1432191702, "post_id": 30366003, "comment_id": 48824243, "body": "Well maybe I should write <code>let mut current = Rc::new(root)</code>, so idea that I want to copy only Rc and i32, but don&#39;t want to copy a whole struct. I just want to read Rc address, dereference it, copy i32 and print it, then read address of the next Node and assign current to this address until leaf node encountered. There is only copying of Rc and i32 (that&#39;s implemented in standard lib as well as Rc)."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1432197116, "post_id": 30366003, "comment_id": 48827433, "body": "I see, so current doesn&#39;t need to be a  concrete value, but a reference. That changes things."}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 3, "last_activity_date": 1502588070, "last_edit_date": 1502588070, "creation_date": 1432189363, "answer_id": 30366003, "question_id": 30365055, "link": "https://stackoverflow.com/questions/30365055/cannot-move-out-of-borrowed-content-when-matching-an-enum/30366003#30366003", "title": "Cannot move out of borrowed content when matching an enum", "body": "<p>The error is displayed because by default <code>match</code> will perform a move. </p>\n\n<p>After a value is moved (i.e. wasn't taken by reference or method that takes <code>self</code> was called) subsequent calls fail. You'll probably need to clone, which is a property both of your <code>struct</code> and <code>enum</code> lack. Once you add those (<code>#[derive(Clone)</code>) and change <code>current = *next;</code> into <code>current = (*next).clone();</code>, your program will work again!</p>\n\n<pre><code>use std::io;\nuse std::rc::Rc;\n\n#[derive(Clone)]\nenum NodeKind {\n    Branch(Rc&lt;Node&gt;),\n    Leaf,\n}\n\n#[derive(Clone)]\nstruct Node {\n    value: i32,\n    kind: NodeKind,\n}\n\nfn main() {\n    let leaf = Node { value: 10, kind: NodeKind::Leaf };\n    let branch = Node { value: 50, kind: NodeKind::Branch(std::rc::Rc::new(leaf)) };\n    let root = Node { value: 100, kind: NodeKind::Branch(std::rc::Rc::new(branch)) };\n\n    let mut current = root;\n    while true {\n        println!(\"{}\", current.value);\n        match current.kind {\n            NodeKind::Branch(next) =&gt; {\n                current = (*next).clone();\n            }\n            NodeKind::Leaf =&gt; {\n                break;\n            }\n        }\n    }\n\n    let reader = io::stdin();\n    let buff = &amp;mut String::new();\n    let read = reader.read_line(buff);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=07c6516da3a37ecce6cd4fe88b18cf43&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>If you <code>let mut current = &amp;root</code> then you can avoid <code>clone()</code> as per Vladimir's response below (<a href=\"https://play.rust-lang.org/?gist=6cbbdec0937fc10447c56194e482d794&amp;version=stable\" rel=\"nofollow noreferrer\">playpen of Vladimir's version</a>). </p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1502587878, "last_edit_date": 1502587878, "creation_date": 1432195283, "answer_id": 30367893, "question_id": 30365055, "link": "https://stackoverflow.com/questions/30365055/cannot-move-out-of-borrowed-content-when-matching-an-enum/30367893#30367893", "title": "Cannot move out of borrowed content when matching an enum", "body": "<p>There is no need to clone here, it is absolutely possible to do what you want to achieve with references:</p>\n\n<pre><code>use std::rc::Rc;\n\nenum NodeKind {\n    Branch(Rc&lt;Node&gt;),\n    Leaf,\n}\n\nstruct Node {\n    value: i32,\n    kind: NodeKind,\n}\n\nfn main() {\n    let leaf = Node { value: 10, kind: NodeKind::Leaf };\n    let branch = Node { value: 50, kind: NodeKind::Branch(Rc::new(leaf)) };\n    let root = Node { value: 100, kind: NodeKind::Branch(Rc::new(branch)) };\n\n    let mut current = &amp;root;\n    loop {\n        println!(\"{}\", current.value);\n        match current.kind {\n            NodeKind::Branch(ref next) =&gt; {\n                current = &amp;**next;\n            }\n            NodeKind::Leaf =&gt; break,\n        }\n    }\n}\n</code></pre>\n\n<p>The only important changes from your code is that the pattern in the match is <code>ref next</code> and <code>current</code> is of type <code>&amp;Node</code>.</p>\n\n<p><code>ref</code> patterns bind their variables by reference, that is, <code>next</code> has type <code>&amp;Rc&lt;Node&gt;</code>. To get <code>&amp;Node</code> from it, you need to dereference it two times to get <code>Node</code> and then reference again to get <code>&amp;Node</code>. Due to Deref coercions, it is also possible to write <code>current = &amp;next</code>, and the compiler will insert an appropriate number of <code>*</code>s for you automatically.</p>\n\n<p>I also changed from <code>while (true)</code> to <code>loop</code> because it is more idiomatic and it helps the compiler to reason about your code.</p>\n\n<p>All traversals of tree-like structures are done like this in Rust. <code>ref</code> patterns allow not to move out of variables, which is absolutely necessary when you only need to read data. You can find more about patterns and how they interact with ownership and borrowing <a href=\"http://blog.rust-lang.org/2015/04/17/Enums-match-mutation-and-moves.html\" rel=\"nofollow noreferrer\">here</a>.</p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2958, "favorite_count": 0, "accepted_answer_id": 30367893, "answer_count": 3, "score": 6, "last_activity_date": 1502588315, "creation_date": 1432185110, "last_edit_date": 1502588315, "question_id": 30365055, "link": "https://stackoverflow.com/questions/30365055/cannot-move-out-of-borrowed-content-when-matching-an-enum", "title": "Cannot move out of borrowed content when matching an enum", "body": "<p>I'm trying to print out a tree (it's a <code>LinkedList</code> right now, but that will be fixed):</p>\n\n<pre><code>use std::io;\nuse std::rc::Rc;\n\nenum NodeKind {\n    Branch(Rc&lt;Node&gt;),\n    Leaf,\n}\n\nstruct Node {\n    value: i32,\n    kind: NodeKind,\n}\n\nfn main() {\n    let leaf = Node { value: 10, kind: NodeKind::Leaf };\n    let branch = Node { value: 50, kind: NodeKind::Branch(Rc::new(leaf)) };\n    let root = Node { value: 100, kind: NodeKind::Branch(Rc::new(branch)) };\n\n    let mut current = root;\n    while true {\n        println!(\"{}\", current.value);\n        match current.kind {\n            NodeKind::Branch(next) =&gt; {\n                current = *next;\n            }\n            NodeKind::Leaf =&gt; {\n                break;\n            }\n        }\n    }\n\n    let mut reader = io::stdin();\n    let buff = &amp;mut String::new();\n    let read = reader.read_line(buff);\n}\n</code></pre>\n\n<p>The compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:24:27\n   |\n24 |                 current = *next;\n   |                           ^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>I'm reading the value only, not changing anything. I'm assigning a value from a reference to another value, trying to dereference an <code>Rc&lt;T&gt;</code> value and store it in a local <code>mut</code> variable.</p>\n\n<p>maybe something like this may work:</p>\n\n<pre><code>while true {\n    println!(\"{}\", current.value);\n    match &amp;current.kind {\n        &amp;NodeKind::Branch(next) =&gt; {\n            current = next;\n        }\n        &amp;NodeKind::Leaf =&gt; {\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>or maybe</p>\n\n<pre><code>let mut current = &amp;Rc::new(root);\nwhile true {\n    println!(\"{}\", current.value);\n    match current.kind {\n        NodeKind::Branch(next) =&gt; {\n            current = &amp;next;\n        }\n        NodeKind::Leaf =&gt; {\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>but I get the same error plus <code>'next' does not live long enough</code></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1432172780, "creation_date": 1432172780, "answer_id": 30363205, "question_id": 30362979, "link": "https://stackoverflow.com/questions/30362979/how-to-run-pathbufnew-with-an-argument/30363205#30363205", "title": "How to run PathBuf::new with an argument", "body": "<p>The methods listed under <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#deref-methods\" rel=\"nofollow\"><em>Methods from Deref</em></a> are only applicable when calling methods on a <code>PathBuf</code> object. This section describes methods that are implemented on <code>Path</code>, but that are available thanks to the <code>Deref&lt;Target=Path&gt;</code> trait implementation on <code>PathBuf</code>.</p>\n\n<p>The <code>new</code> method does not take <code>self</code> as an argument, so <code>Deref</code> does not apply (I think it's a bug that this method is listed here). I suspect you did not pay attention to the method's signature: it returns a <code>&amp;Path</code>, not a <code>PathBuf</code>. That would have told you that the method is unrelated to <code>PathBuf</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1432195905, "creation_date": 1432195905, "answer_id": 30368080, "question_id": 30362979, "link": "https://stackoverflow.com/questions/30362979/how-to-run-pathbufnew-with-an-argument/30368080#30368080", "title": "How to run PathBuf::new with an argument", "body": "<p>While it is indeed not possible to call <code>Path::new()</code> method over a <code>PathBuf</code> because it is static, the correct way to obtain a <code>PathBuf</code> from a string is just to use the generic conversion:</p>\n\n<pre><code>let p: PathBuf = \"foo.txt\".into();\n</code></pre>\n\n<p>This is possible because <code>PathBuf</code> implements <code>From</code> for everything which can be converted to a reference to <code>OsStr</code>:</p>\n\n<pre><code>impl&lt;'a, T: ?Sized + AsRef&lt;OsStr&gt;&gt; From&lt;&amp;'a T&gt; for PathBuf\n</code></pre>\n\n<p>And <code>&amp;str</code> does implement <code>AsRef&lt;OsStr&gt;</code>.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 268, "favorite_count": 0, "accepted_answer_id": 30363205, "answer_count": 2, "score": 2, "last_activity_date": 1432200347, "creation_date": 1432171109, "last_edit_date": 1432200347, "question_id": 30362979, "link": "https://stackoverflow.com/questions/30362979/how-to-run-pathbufnew-with-an-argument", "title": "How to run PathBuf::new with an argument", "body": "<p>Given:</p>\n\n<pre><code>PathBuf::new(\"foo.txt\")\n</code></pre>\n\n<p>I get an error:</p>\n\n<pre><code>this function takes 0 parameters but 1 parameter was supplied [E0061]\n</code></pre>\n\n<p>Shouldn't it work, given that the method with the argument is listed in the API documentation, under he section <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#deref-methods\" rel=\"nofollow\">Methods from Deref</a>. The few methods I've checked from that section work with <strong>PathBuf</strong>.</p>\n"}]