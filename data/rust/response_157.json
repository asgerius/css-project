[{"tags": ["rust", "command-line-arguments", "std"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515607718, "post_id": 48193529, "comment_id": 83367694, "body": "<i>how my Rust program appears</i> ... <i>what all my threads are doing</i> \u2014 which is it? Do you care about the program as a whole or specific threads?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515607976, "post_id": 48193529, "comment_id": 83367815, "body": "<i>In Ruby I would modify the <code>argv[0]</code> entry</i> \u2014 did you mean <code>ARGV</code>? I wasn&#39;t aware that this would change anything outside of the process. Searching for this functionality seems to be difficult, do you have any links so I can learn more about that functionality of Ruby?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515608702, "post_id": 48193529, "comment_id": 83368221, "body": "(just realized that my link was wrong), A thread is NOT a process, why not use name when building the thread ? <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html#method.name\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/thread/struct.Builder.html#method.name</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1641, "user_id": 3848765, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ITRqu.jpg?s=128&g=1", "display_name": "amonk", "link": "https://stackoverflow.com/users/3848765/amonk"}, "edited": false, "score": 0, "creation_date": 1516885490, "post_id": 48194019, "comment_id": 83878458, "body": "kudos for the answer"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1515611125, "last_edit_date": 1515611125, "creation_date": 1515609347, "answer_id": 48194019, "question_id": 48193529, "link": "https://stackoverflow.com/questions/48193529/how-can-i-replace-an-entry-in-stdenvargs/48194019#48194019", "title": "How can I replace an entry in std::env:args()?", "body": "<blockquote>\n  <p>How can I replace an entry in <code>std::env:args()</code></p>\n</blockquote>\n\n<p>You cannot. Immutable means immutable.</p>\n\n<blockquote>\n  <p>I would like to change how my Rust program appears in <code>top</code>/<code>htop</code></p>\n</blockquote>\n\n<p>There is nothing like this in the standard library. As far as I know, there's no cross-platform solution, so it would be a hard fight to put in there.</p>\n\n<h3>Linux</h3>\n\n<p>Seems to have a simple enough solution: <a href=\"https://stackoverflow.com/q/16165667/155423\">Change process name without changing argv[0] in Linux</a></p>\n\n<p>If you only care about Linux, you can use the <a href=\"https://crates.io/crates/prctl\" rel=\"noreferrer\">prctl</a> crate:</p>\n\n<pre><code>prctl::set_name(\"new_process\")\n</code></pre>\n\n<h3>macOS</h3>\n\n<p>Has various concepts of \"process name\" and the solution is complex and uses undocumented / hidden APIs: <a href=\"https://stackoverflow.com/q/4217947/155423\">Setting process name on Mac OS X at runtime</a></p>\n\n<p>Everything in that answer could be written in Rust using the appropriate bindings to the macOS APIs.</p>\n\n<h3>Windows</h3>\n\n<p>Does not seem to have such a concept: <a href=\"https://stackoverflow.com/q/3722852/155423\">Changing a process name in runtime</a></p>\n\n<h3>Cross-Platform</h3>\n\n<p>Someone could write a crate that abstracts across these different mechanisms, but I'm not aware of one.</p>\n\n<hr>\n\n<blockquote>\n  <p>so I can easily spot what all my threads are doing</p>\n</blockquote>\n\n<p>As mentioned in the comments, when you create a thread, you can <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html#method.name\" rel=\"noreferrer\">give it a name</a>. Some work was recently put into <a href=\"https://github.com/rust-lang/rust/pull/44258\" rel=\"noreferrer\">renaming threads at run time</a>, but that work stalled out.</p>\n"}, {"tags": [], "owner": {"reputation": 125, "user_id": 5163269, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba934bc9b125cefa0539d1ee6e3398f8?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas Hurst", "link": "https://stackoverflow.com/users/5163269/thomas-hurst"}, "is_accepted": false, "score": 2, "last_activity_date": 1556540141, "creation_date": 1556540141, "answer_id": 55903185, "question_id": 48193529, "link": "https://stackoverflow.com/questions/48193529/how-can-i-replace-an-entry-in-stdenvargs/55903185#55903185", "title": "How can I replace an entry in std::env:args()?", "body": "<p>I wrote the <a href=\"https://crates.io/crates/proctitle\" rel=\"nofollow noreferrer\">proctitle crate</a> for setting process titles in a cross-platform manner.  On Linux it does happen to name the current <em>thread</em>, but this is a quirk of the APIs it provides rather than a deliberate choice.</p>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 520, "favorite_count": 0, "accepted_answer_id": 48194019, "answer_count": 2, "score": 3, "last_activity_date": 1556540141, "creation_date": 1515607324, "last_edit_date": 1515611310, "question_id": 48193529, "link": "https://stackoverflow.com/questions/48193529/how-can-i-replace-an-entry-in-stdenvargs", "title": "How can I replace an entry in std::env:args()?", "body": "<p>I would like to provide individual names to the threads in my Rust program. These names should appear in <code>top</code>/<code>htop</code> so I can differentiate the thread's job. In Ruby I would modify the <code>argv[0]</code> entry, or maybe <code>Process.setproctitle(\"foo\")</code>. My inspiration is from Ruby's <a href=\"https://varaneckas.com/blog/unicorn-procline/\" rel=\"nofollow noreferrer\">Unicorn web server</a>.</p>\n\n<p>The <code>env::args</code> function returns an <code>Args</code> value. The <code>Args</code> value wraps the platform-specific <code>std::sys::args::args()</code> function which is not reexported for general use. <a href=\"https://doc.rust-lang.org/std/env/struct.ArgsOs.html\" rel=\"nofollow noreferrer\"><code>ArgsOs</code></a> doesn't have a usable mutator (so yes, the stdlib makes it clear it is immutable).</p>\n\n<p>How do I mutate the arguments some other way? I am happy with a Linux-only solution since that is where the real work will happen. Solutions outside the stdlib are also fine.</p>\n\n<p>What path should I take in order to modify the first argument in the environment of my process?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1515612091, "post_id": 48190709, "comment_id": 83369930, "body": "Also note that <code>for &amp;item in \u2026</code> actually tries to move the value into <code>item</code> (because <code>T</code> is not <code>Copy</code>), which is not allowed since we can&#39;t move a borrowed value.  And if we add a <code>Copy</code> bound for <code>T</code>, we would be allowed to do <code>for &amp;item in \u2026</code>, but it would still be useless, since we could not store a reference to <code>item</code> in <code>largest</code> \u2013 since <code>item</code> is a copy, it would only live for the loop iteration it was created for.  So <code>for &amp;item</code> can never work here."}, {"owner": {"reputation": 391, "user_id": 4170115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAsbs.png?s=128&g=1", "display_name": "gogoout", "link": "https://stackoverflow.com/users/4170115/gogoout"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1617187667, "post_id": 48190709, "comment_id": 118232429, "body": "@SvenMarnach can you elaborate more?  According to the offical book example 10-15 Using <code>Copy</code> does seems to work here."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 391, "user_id": 4170115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAsbs.png?s=128&g=1", "display_name": "gogoout", "link": "https://stackoverflow.com/users/4170115/gogoout"}, "edited": false, "score": 1, "creation_date": 1617199098, "post_id": 48190709, "comment_id": 118237652, "body": "@gogoout Take a look at the function prototype in the question. The function is supposed to return a reference to the largest element. That&#39;s not possible if you write your loop as <code>for &amp;item in \u2026</code>, even with <code>T: Copy</code>."}], "tags": [], "owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "is_accepted": true, "score": 18, "last_activity_date": 1515598784, "last_edit_date": 1515598784, "creation_date": 1515597943, "answer_id": 48190709, "question_id": 48190402, "link": "https://stackoverflow.com/questions/48190402/rust-book-listing-10-16-expected-type-t-found-type-t/48190709#48190709", "title": "Rust book listing 10-16: expected type `T` found type `&amp;T`", "body": "<p><code>list.iter()</code> gives you an iterator over <em>references</em> to elements of <code>list</code>.</p>\n\n<p>Using the <code>for &amp;item in ...</code> syntax, notably the <code>&amp;item</code> pattern, you dereference it and use it as a <code>T</code>. It might be counter-intuitive at first, but <code>&amp;item</code> in this case does the <em>opposite</em> of what <code>&amp;item</code> would do in most other contexts (e.g. when passing to a function).</p>\n\n<p>However, <code>largest</code> is explicitly defined as a <code>&amp;T</code>, so in this case the <code>&lt;</code> operator tries to compare two different types: <code>T</code> and <code>&amp;T</code></p>\n\n<p>Remove the <code>&amp;</code> from the pattern and it all works out.</p>\n\n<pre><code>for item in list.iter() {\n    if item &gt; largest {\n        largest = item;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2227, "user_id": 1037094, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/7949edc53b97713ab2030bffa38b3610?s=128&d=identicon&r=PG", "display_name": "Manuel Schmidt", "link": "https://stackoverflow.com/users/1037094/manuel-schmidt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 820, "favorite_count": 0, "accepted_answer_id": 48190709, "answer_count": 1, "score": 8, "last_activity_date": 1515599783, "creation_date": 1515596980, "last_edit_date": 1515599783, "question_id": 48190402, "link": "https://stackoverflow.com/questions/48190402/rust-book-listing-10-16-expected-type-t-found-type-t", "title": "Rust book listing 10-16: expected type `T` found type `&amp;T`", "body": "<p>I am stuck at <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html\" rel=\"noreferrer\">Listing 10-16</a> when I try to implement the following modification:</p>\n\n<blockquote>\n  <p>If we change the return type to be <code>&amp;T</code> instead of <code>T</code> and change the body\n  of the function to return a reference, we wouldn\u2019t need either the\n  <code>Clone</code> or <code>Copy</code> trait bounds and we wouldn\u2019t be doing any heap\n  allocations. Try implementing these alternate solutions on your own!</p>\n</blockquote>\n\n<p>My code is</p>\n\n<pre><code>use std::cmp::PartialOrd;\n\nfn largest&lt;T: PartialOrd&gt;(list: &amp;[T]) -&gt; &amp;T {\n    let mut largest: &amp;T = &amp;list[0];\n\n    for &amp;item in list.iter() {\n        if item &gt; largest {\n            largest = &amp;item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&amp;number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n\n    let result = largest(&amp;char_list);\n    println!(\"The largest char is {}\", result);\n}\n</code></pre>\n\n<p>I get the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:7:19\n  |\n7 |         if item &gt; largest {\n  |                   ^^^^^^^ expected type parameter, found &amp;T\n  |\n  = note: expected type `T`\n             found type `&amp;T`\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1515659174, "post_id": 48182725, "comment_id": 83386056, "body": "I recommend NOT tracking timestamps of the build time.  See <a href=\"https://reproducible-builds.org/docs/timestamps/\" rel=\"nofollow noreferrer\">reproducible-builds.org/docs/timestamps</a>"}], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515573872, "post_id": 48183156, "comment_id": 83346348, "body": "I think you could do this in a <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\">script</a>, you can see the <a href=\"https://play.rust-lang.org/?gist=fbf50cc18cece4c4f01c1f38cb51f68f&amp;version=stable\" rel=\"nofollow noreferrer\">list</a> of all env variable, and cargo documentation <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html\" rel=\"nofollow noreferrer\">list</a> some. But currently cargo don&#39;t define a environnement variable for compile date, you could ask it on the github to add this feature but I not sure it&#39;s will be accepted."}, {"owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515574524, "post_id": 48183156, "comment_id": 83346771, "body": "Very interesting, from my reading of those pages perhaps my <code>build.rs</code> could call <code>date +%Y%m%d</code> and put its output on the command line like <code>cargo:rustc-env=COMPILED_AT=20180110</code>..."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1515574689, "post_id": 48183156, "comment_id": 83346867, "body": "call date... or use <a href=\"https://github.com/chronotope/chrono\" rel=\"nofollow noreferrer\">chrono</a> in the build.rs ;)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515575487, "post_id": 48183156, "comment_id": 83347276, "body": "@Stargateur: I&#39;d rather have the ability to supply custom variables than a hardcoded &quot;COMPILED_AT&quot; one :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1515575640, "post_id": 48183156, "comment_id": 83347377, "body": "I really think that rather than looking at a custom invocation of <code>cargo</code> or a script over cargo, you should look into <code>build.rs</code>. The intent of <code>build.rs</code> is specifically to &quot;script&quot; the build so that creating a Rust project is always the same command (<code>cargo build</code>). This uniformity is what makes integrating 3rd party dependencies so painless, it should not be discarded without really good reasons :)"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1515735315, "post_id": 48183156, "comment_id": 83421877, "body": "If you don&#39;t want the build to fail just because the environment variable is missing, use <a href=\"https://doc.rust-lang.org/stable/std/macro.option_env.html\" rel=\"nofollow noreferrer\"><code>option_env!</code></a> instead of <code>env!</code>."}], "tags": [], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "is_accepted": true, "score": 8, "last_activity_date": 1517577641, "last_edit_date": 1517577641, "creation_date": 1515572930, "answer_id": 48183156, "question_id": 48182725, "link": "https://stackoverflow.com/questions/48182725/how-can-i-compile-a-string-supplied-on-the-command-line-during-compilation-into/48183156#48183156", "title": "How can I compile a string supplied on the command line during compilation into my Rust binary?", "body": "<p>There are two ways to do this.</p>\n\n<h1>Use a <code>build.rs</code> script</h1>\n\n<p>The benefit of using a <code>build.rs</code> script is that other users compiling your program will not have to invoke <code>cargo</code> in a special way or set up their environment. Here is a minimal example of how to do that.</p>\n\n<h2><code>build.rs</code></h2>\n\n<pre><code>use std::process::{Command, exit};\nuse std::str;\n\nstatic CARGOENV: &amp;str = \"cargo:rustc-env=\";\n\nfn main() {\n    let time_c = Command::new(\"date\").args(&amp;[\"+%Y%m%d\"]).output();\n\n    match time_c {\n        Ok(t) =&gt; {\n            let time;\n            unsafe {\n                time = str::from_utf8_unchecked( &amp;t.stdout );\n            }   \n            println!(\"{}COMPILED_AT={}\", CARGOENV, time);\n        }   \n        Err(_) =&gt; exit(1)\n    }   \n}\n</code></pre>\n\n<h2><code>src/main.rs</code></h2>\n\n<pre><code>fn main() {\n    println!(\"This is Example Program {} compiled at {}\", env!(\"CARGO_PKG_VERSION\"), env!(\"COMPILED_AT\"));\n}\n</code></pre>\n\n<h2><code>Cargo.toml</code></h2>\n\n<pre><code>[package]\nname = \"compiled_at\"\nversion = \"0.1.0\"\nauthors = [\"Fredrick Brennan &lt;copypaste@kittens.ph&gt;\"]\nbuild = \"build.rs\"\n\n[dependencies]\n</code></pre>\n\n<p>Obviously this can be tweaked to get it to work on other platforms which don't have a <code>/bin/date</code> or to compile in other things such as the Git version number. This script was based on the example provided by Jmb, which shows how to add Mercurial information into your program at compile time.</p>\n\n<p>This guarantees that <code>COMPILED_AT</code> will either be set or the build will fail. This way other Rust programmers can build just by doing <code>cargo build</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[osboxes@osboxes compiled_at]$ cargo run\n   Compiling compiled_at v0.1.0 (file:///home/osboxes/Workspace/rust/compiled_at)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.27 secs\n     Running `target/debug/compiled_at`\nThis is Example Program 0.1.0 compiled at 20180202\n</code></pre>\n\n<h1>Use <code>env!()</code>, then require users to set their environment prior to building</h1>\n\n<p>It occurred to me after I asked this question to try the following, and it does work (<code>vim</code> is in use, thus the escaped <code>%</code>s), <code>cargo</code> does pass my environment down to <code>rustc</code>:</p>\n\n<pre><code>COMPILED_AT=`date +\\%Y\\%m\\%d` cargo run\n</code></pre>\n\n<p>Then, in Rust:</p>\n\n<pre><code>fn main() {\n    eprintln!(\"{}\", env!(\"COMPILED_AT\"));\n}\n</code></pre>\n\n<p>The Rust compiler refuses to compile the code if I don't supply the environment variable, which is a nice touch.</p>\n\n<pre><code>error: environment variable `COMPILED_AT` not defined\n   --&gt; src/main.rs:147:21\n    |\n147 |     eprintln!(\"{}\", env!(\"COMPILED_AT\"));\n    |                     ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>This way is extremely hacky and is guaranteed to annoy other Rust programmers who just expect to build with <code>cargo build</code>, but it does work. If you can, it is recommended to use the <code>build.rs</code> instead.</p>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1515578241, "post_id": 48184597, "comment_id": 83349114, "body": "I think your example don&#39;t need so much feature. One simple working environnement variable is enough."}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 1, "last_activity_date": 1515578181, "last_edit_date": 1515578181, "creation_date": 1515577988, "answer_id": 48184597, "question_id": 48182725, "link": "https://stackoverflow.com/questions/48182725/how-can-i-compile-a-string-supplied-on-the-command-line-during-compilation-into/48184597#48184597", "title": "How can I compile a string supplied on the command line during compilation into my Rust binary?", "body": "<p>You can use the <code>build.rs</code> script to add an environment variable to the cargo environment or to create an extra source file that contains the information you need. That way you can add a lot of information about the build environment. Here is a <a href=\"https://bitbucket.org/jmb/rnbench/src/887f6f4fcf204f8e55f351ea51bffc39aec26eb5/build.rs?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow noreferrer\">full example</a> that creates a <code>build_info.rs</code> source file containing:</p>\n\n<ul>\n<li>Version information built from the Mercurial tag, revision hash and status (including the date if the source folder is different from the Mercurial folder).</li>\n<li>Toolchain information, including the compiler version and the build profile (eg. <code>debug</code> or <code>release</code>) thanks to the <code>rustc_version</code> crate.</li>\n<li>Plus it extracts some information from cargo (like the package name) so it doesn't have to be duplicated between the <code>Cargo.toml</code> and the source code).</li>\n</ul>\n\n<hr>\n\n<pre><code>#[macro_use] extern crate map_for;\nextern crate rustc_version;\nextern crate time;\n\nuse rustc_version::{ Channel, version_meta };\nuse std::collections::HashMap;\nuse std::env;\nuse std::ffi::OsStr;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader, Write};\nuse std::process::Command;\n\n/// Run mercurial with the given arguments and return the output.\nfn run_hg&lt;S: AsRef&lt;OsStr&gt;&gt; (args: &amp;[S]) -&gt; Option&lt;String&gt; {\n   Command::new (\"hg\")\n      .env (\"HGRCPATH\", \"\")\n      .env (\"LANG\", \"C\")\n      .args (args)\n      .output()\n      .ok()\n      .and_then (|output|\n                 String::from_utf8 (output.stdout)\n                 .ok())\n}\n\n/// Get the version from a mercurial repository.\n///\n/// Version  numbers  follow the  Python  PEP440  conventions. If  the\n/// current folder corresponds to a version tag, then return that tag.\n/// Otherwise, identify  the closest  tag and return  a string  of the\n/// form _tag_.dev_N_+_hash_. In both cases, if the current folder has\n/// been  modified, then  add the  current date  as `YYYYMMDD`  to the\n/// local version label.\nfn get_mercurial_version_tag() -&gt; Option&lt;String&gt; {\n   let output = run_hg (&amp;[ \"id\", \"-i\", \"-t\" ]);\n   let mut iter = output.iter().flat_map (|s| s.split_whitespace()).fuse();\n   let hash = match iter.next() {\n      Some (hash) =&gt; hash,\n      _ =&gt; { return None },\n   };\n\n   let clean = !hash.ends_with (\"+\");\n\n   fn mkdate() -&gt; String { time::strftime (\"%Y%m%d\", &amp;time::now()).unwrap() }\n\n   map_for!(\n      version &lt;- iter.find (|s| s.chars().next()\n                            .map (|c| ('0' &lt;= c) &amp;&amp; (c &lt;= '9'))\n                            .unwrap_or (false));\n         // The current folder corresponds to a version tag (i.e. a\n         // tag that starts with a digit).\n         =&gt; (if clean { version.into() }\n             else { format!(\"{}+{}\", version, mkdate()) }))\n      .or_else (|| {\n         // The current folder does not correspond to a version tag.\n         // Find the closest tag and build the version from that. Note\n         // that this may return a wrong version number if the closest\n         // tag is not a version tag.\n         let version = run_hg (\n            &amp;[ \"parents\",\n                \"--template\",\n                \"{latesttag}.dev{latesttagdistance}+{node|short}\" ]);\n         if clean { version }\n         else { version.map (|s| format!(\"{}.{}\", s, mkdate())) }\n      })\n}\n\n/// Get the version from Mercurial archive information.\n///\n/// The   Mercurial   `archive`   command   creates   a   file   named\n/// `.hg_archival.txt`  that contains  information about  the archived\n/// version. This function  tries to use this information  to create a\n/// version string  similar to what  `get_mercurial_version_tag` would\n/// have created for this version.\nfn get_mercurial_archived_version_tag() -&gt; Option&lt;String&gt; {\n   use map_for::FlatMap;\n\n   // Parse the contents of `.hg_archival.txt` into a hash map.\n   let info = &amp;File::open (\".hg_archival.txt\")\n      .iter()\n      .flat_map (|f| BufReader::new (f).lines())\n      .filter_map (|l| l.ok())\n      .map (|l| l.splitn (2, ':')\n            .map (String::from)\n            .collect::&lt;Vec&lt;_&gt;&gt;())\n      .filter_map (\n         |v| if v.len() == 2\n         { Some ((String::from (v[0].trim()),\n                  String::from (v[1].trim()))) }\n         else { None })\n      .collect::&lt;HashMap&lt;_,_&gt;&gt;();\n   // Extract version information from the hash map.\n   map_for!(\n      tag &lt;- info.get (\"tag\");\n      =&gt; format!(\"{}+archive.{}\", tag, time::strftime (\"%Y%m%d\", &amp;time::now()).unwrap()))\n      .or_else (|| map_for!{\n         tag      &lt;- info.get (\"latesttag\");\n         distance &lt;- info.get (\"latesttagdistance\");\n         node     &lt;- info.get (\"node\");\n         =&gt; format!(\"{}.dev{}+archive.{:.12}.{}\",\n                    tag, distance, node,\n                    time::strftime (\"%Y%m%d\", &amp;time::now()).unwrap()) })\n      .map (String::from)\n}\n\n/// Get the version information.\n///\n/// This function will  first try to get the version  from a Mercurial\n/// repository. If that  fails, it will try to get  the version from a\n/// `.hg_archival.txt` file. If both fail, it will return a version of\n/// the form: \"unknown-date\".\nfn get_version() -&gt; String {\n   get_mercurial_version_tag()\n      .or_else (get_mercurial_archived_version_tag)\n      .unwrap_or_else (\n         || format!(\"{}+cargo.{}\",\n                    env::var (\"CARGO_PKG_VERSION\").unwrap(),\n                    time::strftime (\"%Y%m%d\", &amp;time::now()).unwrap())\n            .into())\n}\n\nfn main()\n{\n   let mut f = File::create (\"src/build_info.rs\").unwrap();\n\n   let version = version_meta().unwrap();\n   writeln!(f, \"pub const RUST_VERSION: &amp;'static str = \\\"{} {} v{}\\\";\",\n            env::var (\"RUSTC\").unwrap_or (\"rustc\".into()),\n            match version.channel {\n               Channel::Dev =&gt; \"dev\",\n               Channel::Nightly =&gt; \"nightly\",\n               Channel::Beta =&gt; \"beta\",\n               Channel::Stable =&gt; \"stable\",\n            },\n            version.semver).unwrap();\n   writeln!(f, \"pub const PROFILE: &amp;'static str = \\\"{}\\\";\",\n            env::var (\"PROFILE\").unwrap_or (\"unknown\".into()))\n      .unwrap();\n   writeln!(f, \"pub const TARGET: &amp;'static str = \\\"{}\\\";\",\n            env::var (\"TARGET\").unwrap_or (\"unknown\".into()))\n      .unwrap();\n   writeln!(f, \"pub const PKG_NAME: &amp;'static str = \\\"{} {} {}\\\";\",\n            env::var (\"CARGO_PKG_NAME\").unwrap(),\n            get_version(),\n            env::var (\"PROFILE\").unwrap_or (\"\".into()))\n      .unwrap();\n   writeln!(f, \"pub const PKG_VERSION: &amp;'static str = \\\"{}\\\";\",\n            get_version())\n      .unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 853, "favorite_count": 1, "accepted_answer_id": 48183156, "answer_count": 2, "score": 4, "last_activity_date": 1517577641, "creation_date": 1515571142, "last_edit_date": 1515571587, "question_id": 48182725, "link": "https://stackoverflow.com/questions/48182725/how-can-i-compile-a-string-supplied-on-the-command-line-during-compilation-into", "title": "How can I compile a string supplied on the command line during compilation into my Rust binary?", "body": "<p>I want to make it so that when my program starts it prints to stderr:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>This is Program X v. 0.1.0 compiled on 20180110. Now listening on stdin,\nquit with SIGINT (^C). EOF is ignored. For licensing  information,  read \nLICENSE. To suppress this message, supply --quiet or --suppress-greeting\n</code></pre>\n\n<p>In C/C++, I would achieve this with a Makefile, e.g.:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>VERSION = 0.1.0\nFLAGS = -Wall -pipe -O3 -funroll-loops -Wall -DVERSION=\"\\\"$(VERSION)\\\"\" -DCOMPILED_AT=\"\\\"`date +%Y%m%d`\\\"\"\n</code></pre>\n\n<p>Then, in the source code, I would use those constants as I pleased, perhaps in a call to <code>fprintf</code>. After checking if they actually existed with <code>#ifdef</code>, of course.</p>\n\n<p>How can this be achieved in Rust? Do I need to use a procedural macro? Can I use <code>cargo</code> somehow?</p>\n\n<p>I know that <code>env!(\"CARGO_PKG_VERSION\")</code> can be used as a replacement for <code>VERSION</code>, but what about <code>COMPILED_AT</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 7, "creation_date": 1515567542, "post_id": 48180428, "comment_id": 83343338, "body": "Sounds like an xy question, why do you need an iterator of references"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1515577523, "post_id": 48180428, "comment_id": 83348633, "body": "You can create an iterator over consecutive numbers using the range syntax: <code>0..n</code> is an iterator yielding the numbers <code>0</code>, <code>1</code>, \u2026, <code>n - 1</code>.  If you want references to these numbers, you first need to have an owner for them \u2013 what shoudl the references refer to otherwise?  However, I agree with the previous comment that it does not seem useful to yield references instead of integers.  (For what it&#39;s worth, here&#39;s an <a href=\"https://play.rust-lang.org/?gist=40d28da526e2754a142b31bb08444a16&amp;version=stable\" rel=\"nofollow noreferrer\">example to show how to get an iterator over references</a> anyway.)"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1515588929, "post_id": 48180428, "comment_id": 83355550, "body": "As already said, if you want a reference, you must have an owner. Your first thought is the only way to do this: first creating a collection, and then have a reference on each element. Can you please answer the question? Why do you need this? What issue are you trying to solve?"}], "answers": [{"tags": [], "owner": {"reputation": 2524, "user_id": 1000145, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/ed1f474d23ef1e028ef377c4f638d409?s=128&d=identicon&r=PG", "display_name": "Tim Vis&#233;e", "link": "https://stackoverflow.com/users/1000145/tim-vis%c3%a9e"}, "is_accepted": false, "score": 3, "last_activity_date": 1515663410, "last_edit_date": 1515663410, "creation_date": 1515577887, "answer_id": 48184556, "question_id": 48180428, "link": "https://stackoverflow.com/questions/48180428/what-is-the-most-efficient-way-to-have-a-iterator-over-the-references-of-a-given/48184556#48184556", "title": "What is the most efficient way to have a iterator over the references of a given numeric range?", "body": "<p>For iterating over a list of numbers, you might want to use Rust's <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow noreferrer\">range iterator</a>.</p>\n\n<p>Take a look at this iterator example, where a range is used:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for element in 0..100 {\n    println!(\"{}\", element);\n}\n</code></pre>\n\n<p>Changing this to <code>0..max</code> is also perfectly fine. Don't forget to wrap this range between brackets like <code>(0..100).map(...)</code>  if you want to use iterator functions on it.</p>\n\n<p>About borrowing; for borrowing iterator items, you need to have an owner for them. I recommend to keep your implementation as simple as possible. Why don't you borrow iterator items after you iterated over it, like this?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for element in 0..100 {\n    println!(\"{}\", &amp;element);\n    //             ^- borrow here\n}\n</code></pre>\n"}], "owner": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1515663410, "creation_date": 1515559351, "last_edit_date": 1515599076, "question_id": 48180428, "link": "https://stackoverflow.com/questions/48180428/what-is-the-most-efficient-way-to-have-a-iterator-over-the-references-of-a-given", "title": "What is the most efficient way to have a iterator over the references of a given numeric range?", "body": "<p>One way of doing this is to create an array or vector (<code>[0, 1, 2, ..., n]</code> and then use the <code>iter()</code> method. However, it is not memory efficient at all. </p>\n\n<p>I tried the following implementation:</p>\n\n<pre><code>pub struct StaticIxIter {\n    max: usize,\n    current: usize,\n    next: usize,\n}\n\nimpl StaticIxIter {\n    pub fn new(max: usize) -&gt; Self {\n        StaticIxIter {\n            max,\n            current: 0,\n            next: 0,\n        }\n    }\n}\n\nimpl Iterator for StaticIxIter {\n    type Item = &amp;usize;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.next &gt;= self.max {\n            return None;\n        }\n        self.current = self.next;\n        self.next += 1;\n        Some(&amp;self.current)\n    }\n}\n\nfn main() {\n    for element in StaticIxIter::new(10) {\n        println!(\"{}\", element);\n    }\n}\n</code></pre>\n\n<p>It won't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n  --&gt; src/main.rs:18:17\n   |\n18 |     type Item = &amp;usize;\n   |                 ^ expected lifetime parameter\n</code></pre>\n"}, {"tags": ["iterator", "rust", "boxing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515556394, "post_id": 48180008, "comment_id": 83340090, "body": "And what happened when you followed the two &quot;help&quot; lines in the error message?"}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515556815, "post_id": 48180008, "comment_id": 83340185, "body": "@Shepmaster that would restrict the types that can be used in the function, would it not? Unless the necessary impl somehow just happens to exist..."}], "answers": [{"comments": [{"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1515557040, "post_id": 48180117, "comment_id": 83340230, "body": "Interesting, I was not aware this was possible. Nothing in the documentation for <code>as</code> indicates it can be used this way..."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1515557410, "post_id": 48180117, "comment_id": 83340315, "body": "<a href=\"https://doc.rust-lang.org/book/first-edition/casting-between-types.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/first-edition/casting-between-types.h&zwnj;&#8203;tml</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1515557643, "post_id": 48180117, "comment_id": 83340378, "body": "@AlphaModder indeed. The best book link I can find is <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html\" rel=\"nofollow noreferrer\">in the second edition</a>."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 1, "creation_date": 1515578153, "post_id": 48180117, "comment_id": 83349059, "body": "@AlphaModder The reason why you don&#39;t need an explicit cast in the function is that the last statement of a block is a <i>coercion site</i> and coercions happen implicitly at these sites.  See the <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">chapter on coercions in the nomicon</a> for further details."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1553958695, "last_edit_date": 1553958695, "creation_date": 1515556903, "answer_id": 48180117, "question_id": 48180008, "link": "https://stackoverflow.com/questions/48180008/how-can-i-box-the-contents-of-an-iterator-of-a-type-that-implements-a-trait/48180117#48180117", "title": "How can I box the contents of an iterator of a type that implements a trait?", "body": "<p>You need to cast the <code>Box&lt;I::Item&gt;</code> into a <code>Box&lt;A&gt;</code>:</p>\n\n<pre><code>fn test2&lt;'a, I&gt;(iterator: I) -&gt; Vec&lt;Box&lt;dyn A + 'a&gt;&gt;\nwhere\n    I: IntoIterator,\n    I::Item: A + 'a,\n{\n    iterator\n        .into_iter()\n        .map(|a| Box::new(a) as Box&lt;dyn A&gt;)\n        .collect()\n}\n</code></pre>\n\n<blockquote>\n  <p>How is [returning <code>Box::new</code> directly] any different?</p>\n</blockquote>\n\n<p>As <a href=\"https://stackoverflow.com/questions/48180008/how-can-i-box-the-contents-of-an-iterator-of-a-type-that-implements-a-trait/48180117?noredirect=1#comment83349059_48180117\">Sven Marnach points out</a>:</p>\n\n<blockquote>\n  <p>The reason why you don't need an explicit cast in the function is that the last statement of a block is a <em>coercion site</em> and coercions happen implicitly at these sites. See <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">the chapter on coercions in the nomicon</a> for further details.</p>\n</blockquote>\n"}], "owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 550, "favorite_count": 1, "accepted_answer_id": 48180117, "answer_count": 1, "score": 2, "last_activity_date": 1553958695, "creation_date": 1515556022, "last_edit_date": 1515556369, "question_id": 48180008, "link": "https://stackoverflow.com/questions/48180008/how-can-i-box-the-contents-of-an-iterator-of-a-type-that-implements-a-trait", "title": "How can I box the contents of an iterator of a type that implements a trait?", "body": "<p>I'm taking an iterator of some type that must implement the trait <code>A</code>, and trying to convert it into a <code>Vec</code> of <code>Box</code>es of that trait:</p>\n\n<pre><code>trait A {}\n\nfn test2&lt;'a, I&gt;(iterator: I) -&gt; Vec&lt;Box&lt;A + 'a&gt;&gt;\nwhere\n    I: IntoIterator,\n    I::Item: A + 'a,\n{\n    iterator\n        .into_iter()\n        .map(|a| Box::new(a))\n        .collect::&lt;Vec&lt;Box&lt;A + 'a&gt;&gt;&gt;()\n}\n</code></pre>\n\n<p>However, this fails to compile, saying:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;std::boxed::Box&lt;A + 'a&gt;&gt;: std::iter::FromIterator&lt;std::boxed::Box&lt;&lt;I as std::iter::IntoIterator&gt;::Item&gt;&gt;` is not satisfied\n  --&gt; src/main.rs:11:10\n   |\n11 |         .collect::&lt;Vec&lt;Box&lt;A + 'a&gt;&gt;&gt;()\n   |          ^^^^^^^ a collection of type `std::vec::Vec&lt;std::boxed::Box&lt;A + 'a&gt;&gt;` cannot be built from an iterator over elements of type `std::boxed::Box&lt;&lt;I as std::iter::IntoIterator&gt;::Item&gt;`\n   |\n   = help: the trait `std::iter::FromIterator&lt;std::boxed::Box&lt;&lt;I as std::iter::IntoIterator&gt;::Item&gt;&gt;` is not implemented for `std::vec::Vec&lt;std::boxed::Box&lt;A + 'a&gt;&gt;`\n   = help: consider adding a `where std::vec::Vec&lt;std::boxed::Box&lt;A + 'a&gt;&gt;: std::iter::FromIterator&lt;std::boxed::Box&lt;&lt;I as std::iter::IntoIterator&gt;::Item&gt;&gt;` bound\n</code></pre>\n\n<p>This error kind of makes sense, but then I don't see why there's no problem with the following:</p>\n\n<pre><code>fn test&lt;'a, T: A + 'a&gt;(t: T) -&gt; Box&lt;A + 'a&gt; {\n    Box::new(t)\n}\n</code></pre>\n\n<p>How is that any different? How can I express that I'd like to <code>Box</code> them as <code>A</code>s, rather than whatever type they may be?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1515555772, "creation_date": 1515555772, "answer_id": 48179979, "question_id": 48179328, "link": "https://stackoverflow.com/questions/48179328/what-does-it-mean-to-be-uniformly-allocated-in-rust/48179979#48179979", "title": "What does it mean to be uniformly allocated in Rust?", "body": "<p>It simply means that all <code>Node</code> objects are allocated on the heap (via <code>Box</code>), while no <code>List</code> objects are boxed (or need to be boxed), though they may be part of a boxed <code>Node</code>. This particular representation has the effect that there is exactly one heap allocation per node, and no heap allocations for links to <code>Empty</code>.</p>\n\n<p>When operating on lists, we have to manipulate the nodes. In particular, it may be necessary to <em>move</em> a node from one list to another. If you had a mix of boxed and unboxed nodes, then transferring ownership of a node from one list to another either involves unboxing and reboxing the node (i.e. allocating a new box and freeing the old one), or writing duplicate or moderately complicated generic code to box/unbox only if necessary. On the other hand, if you always have a <code>Box&lt;Node&gt;</code>, then it's much simpler to handle: just move the whole <code>Box&lt;Node&gt;</code> (which only copies a pointer).</p>\n"}], "owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 48179979, "answer_count": 1, "score": 2, "last_activity_date": 1515555902, "creation_date": 1515550424, "last_edit_date": 1515555902, "question_id": 48179328, "link": "https://stackoverflow.com/questions/48179328/what-does-it-mean-to-be-uniformly-allocated-in-rust", "title": "What does it mean to be uniformly allocated in Rust?", "body": "<p>In <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/first-layout.html\" rel=\"nofollow noreferrer\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a>, the author claims that this code is uniformly allocated. What does that mean?</p>\n\n<pre><code>struct Node {\n    elem: i32,\n    next: List,\n}\n\npub enum List {\n    Empty,\n    More(Box&lt;Node&gt;),\n}\n</code></pre>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515556596, "post_id": 48178811, "comment_id": 83340135, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Your question has numerous undefined types, types which are probably not even relevant to the question. Prune down your code to the bare minimum. In addition, <b>always</b> include the <i>entire</i> error message, not just the one line summary."}], "answers": [{"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 2, "last_activity_date": 1515556653, "last_edit_date": 1515556653, "creation_date": 1515552300, "answer_id": 48179552, "question_id": 48178811, "link": "https://stackoverflow.com/questions/48178811/implementing-hyperservice-on-a-reference-to-a-struct/48179552#48179552", "title": "Implementing hyper::Service on a reference to a struct", "body": "<p>Note that these futures are going to be compute-intensive, it would make sense to run them on a <a href=\"https://crates.io/crates/futures-cpupool\" rel=\"nofollow noreferrer\">CPU pool</a> and avoid running them on the asynchronous single-threaded Tokio Core stack.</p>\n\n<p>The <code>&amp;self</code> in the <code>call</code> is a reference to a memory managed by the call site. The call site might free that memory right after the call, or at some other time we don't control, therefore saving the reference in the closure (\"closing over the reference\") for some later use is wrong.</p>\n\n<p>In order to manage the memory in a way that lends better to sharing you'd often use a reference-counting pointer. The <code>Oracle</code> memory will then be owned by the reference-counting pointer rather than the call site, allowing you to freely share the <code>Oracle</code> with closures and threads.</p>\n\n<p>If you want to process these futures in parallel, you'd need a thread-safe reference-counting pointer, such as <code>Arc</code>.</p>\n\n<p>To use the <code>Arc</code>, you could turn the <code>call</code> into a free function:</p>\n\n<pre><code>fn call(oracle: Arc&lt;Oracle&gt;, req: Request) -&gt; OracleFuture\n</code></pre>\n\n<p>Or use a trait to implement the <code>call</code> on the pointer:</p>\n\n<pre><code>struct Oracle { /* Tons of stuff */}\n\ntype OraclePt = Arc&lt;Oracle&gt;;\n\ntrait OracleIf {\n  fn call(&amp;self, req: Request) -&gt; Self::Future\n}\n\nimpl OracleIf for OraclePt {\n  fn call(&amp;self, req: Request) -&gt; Self::Future {\n    ...\n            let oracle: OraclePt = self.clone();\n            Box::new(req.body().concat2().map(move |b| {  // Close over `oracle`.\n                let query: Query = deserialize_req(&amp;b.as_ref());\n                let ans = get_answer(&amp;*oracle, &amp;query);\n                Response::new()\n                    .with_header(ContentLength(ans.len() as u64))\n                    .with_body(ans)\n            }))\n  }\n}\n</code></pre>\n\n<p>We close over the copy of the reference-counting pointer here.</p>\n\n<p>If you don't like the idea of using the reference-counting pointers, then another option is to use a \"scoped thread pool\", a thread pool that guarantees that the child threads are terminated before the parent thread, making it possible to safely share the <code>Oracle</code> reference with the child threads.<br>\nIt might be easier to do the latter without wrapping the computation in a <code>Future</code>.</p>\n"}], "owner": {"reputation": 107, "user_id": 569349, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/101466804065795b1a0b8dbfc2b6cfc2?s=128&d=identicon&r=PG", "display_name": "E. J. Winkleberry", "link": "https://stackoverflow.com/users/569349/e-j-winkleberry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 467, "favorite_count": 0, "accepted_answer_id": 48179552, "answer_count": 1, "score": 0, "last_activity_date": 1515557776, "creation_date": 1515545488, "last_edit_date": 1515557776, "question_id": 48178811, "link": "https://stackoverflow.com/questions/48178811/implementing-hyperservice-on-a-reference-to-a-struct", "title": "Implementing hyper::Service on a reference to a struct", "body": "<p>I'm trying to make a question and answer server for a huge data structure. The user would send JSON questions to the server and the server would use the huge data structure to answer.</p>\n\n<p>I'm trying to do this by implementing the <code>hyper::server::Service</code> trait for my <code>Oracle</code> struct.</p>\n\n<p>I've got something like this:</p>\n\n<pre><code>use self::hyper::server::{Http, Service, Request, Response};\n// ...other imports\n\nstruct Oracle { /* Tons of stuff */}\n\nimpl&lt;'a&gt; Service for &amp;'a Oracle {\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, req: Request) -&gt; Self::Future {\n         match (req.method(), req.path()) {\n            // could be lots of question types\n            (&amp;hyper::Method::Post, \"/query\") =&gt; {\n                Box::new(req.body().concat2().map(|b| {\n                    let query: Query = deserialize_req(&amp;b.as_ref());\n                    let ans = get_answer(&amp;self, &amp;query);\n                    Response::new()\n                        .with_header(ContentLength(ans.len() as u64))\n                        .with_body(ans)\n                }))\n            },\n            _ =&gt; {\n                let response = Response::new()\n                    .with_status(hyper::StatusCode::NotFound);\n                Box::new(futures::future::ok(response))\n            },\n        }\n    }\n}\n</code></pre>\n\n<p>This causes lifetime problems (<code>cannot infer an appropriate lifetime due to conflicting requirements</code>) when I try to put <code>&amp;self</code> in a future. </p>\n\n<p>My inclination is that this is totally the wrong way to approach this problem, but I'm having a hard time figuring out the best way to do this.</p>\n"}, {"tags": ["rust", "trigonometry"], "comments": [{"owner": {"reputation": 7614, "user_id": 1364007, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2d106de3dec9586b56ed7f110497689e?s=128&d=identicon&r=PG", "display_name": "Wai Ha Lee", "link": "https://stackoverflow.com/users/1364007/wai-ha-lee"}, "edited": false, "score": 3, "creation_date": 1515540393, "post_id": 48178000, "comment_id": 83336424, "body": "<code>90</code> may be a value which can be precisely represented, but <code>angle.to_radians()</code> is pi/2, which cannot. Clearly you expect tan(pi/2) to be infinity, but actually it&#39;s calculating tan(pi/2 * x) where x is some value very close to one. Try <code>180.to_radians().tan()</code> and you&#39;ll see what I mean."}], "owner": {"reputation": 415, "user_id": 3316999, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000078978858/picture?type=large", "display_name": "dawid", "link": "https://stackoverflow.com/users/3316999/dawid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 217, "favorite_count": 0, "closed_date": 1515557919, "answer_count": 0, "score": 1, "last_activity_date": 1515557957, "creation_date": 1515539452, "last_edit_date": 1515555454, "question_id": 48178000, "link": "https://stackoverflow.com/questions/48178000/what-is-the-meaning-of-tangent-of-90-degrees", "closed_reason": "Duplicate", "title": "What is the meaning of tangent of 90 degrees", "body": "<p>I was trying to get my head around how invalid mathematical values are handled in Rust, so I thought I will have a look at what happens if I take the tangent of 90 degrees. What I didn't expect is that I will get a 'proper' value so when I run this <a href=\"https://play.rust-lang.org/?gist=b3ec20a41f25ecd7428807267d5df1fe&amp;version=stable\" rel=\"nofollow noreferrer\">code</a>:</p>\n\n<pre><code>fn main() {\n    use std::f32;\n\n    for i in 89997..90003 {\n        let angle = (i as f32) / 1000.0;\n        println!(\"tan of {}: {}\", angle, angle.to_radians().tan());\n    }\n}\n</code></pre>\n\n<p>I get the following result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>tan of 89.997: 19124.42\ntan of 89.998: 28665.936\ntan of 89.999: 57208.06\ntan of 90: -22877334\ntan of 90.001: -57312.285\ntan of 90.002: -28692.08\n</code></pre>\n\n<p>What is the meaning of -22877334 in this context?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1515476451, "post_id": 48161995, "comment_id": 83303417, "body": "Relevant: <a href=\"https://stackoverflow.com/a/37987197/2731452\">Obtaining a mutable reference by iterating a recursive structure</a>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1515504478, "post_id": 48161995, "comment_id": 83317709, "body": "See also <a href=\"https://github.com/nikomatsakis/nll-rfc/blob/master/0000-nonlexical-lifetimes.md#problem-case-4-mutating-mut-references\" rel=\"nofollow noreferrer\">this example</a> in the RFC for non-lexical lifetimes.  Your code just works with NLLs enabled (<a href=\"https://play.rust-lang.org/?gist=758460768747fffc359ece9747c6ab4e&amp;version=nightly\" rel=\"nofollow noreferrer\">playgorund</a>)."}, {"owner": {"reputation": 29, "user_id": 4280576, "user_type": "registered", "profile_image": "https://graph.facebook.com/1331280120/picture?type=large", "display_name": "Bokwan D.", "link": "https://stackoverflow.com/users/4280576/bokwan-d"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1515547582, "post_id": 48161995, "comment_id": 83338166, "body": "@SvenMarnach wow thanks! This is <i>exactly</i> what I was looking for!!"}], "owner": {"reputation": 29, "user_id": 4280576, "user_type": "registered", "profile_image": "https://graph.facebook.com/1331280120/picture?type=large", "display_name": "Bokwan D.", "link": "https://stackoverflow.com/users/4280576/bokwan-d"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 395, "favorite_count": 0, "closed_date": 1515483504, "answer_count": 0, "score": 2, "last_activity_date": 1515511200, "creation_date": 1515476195, "last_edit_date": 1515511200, "question_id": 48161995, "link": "https://stackoverflow.com/questions/48161995/update-a-mutable-reference-in-a-loop", "closed_reason": "Duplicate", "title": "Update a mutable reference in a loop", "body": "<p>This is an example that doesn't work:</p>\n\n<pre><code>fn main() {\n    struct Node {\n        children: Vec&lt;Node&gt;,\n    }\n    impl Node {\n        fn new() -&gt; Node {\n            Node {\n                children: Vec::new(),\n            }\n        }\n    }\n\n    let mut node = Node::new();\n    node.children.push(Node::new());\n\n    let mut x = &amp;mut node;\n    loop {\n        x = &amp;mut x.children[0];\n    }\n}\n</code></pre>\n\n<p>Running this, I get an error of: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `x` because it is borrowed\n  --&gt; src/main.rs:18:9\n   |\n18 |         x = &amp;mut x.children[0];\n   |         ^^^^^^^^^----------^^^\n   |         |        |\n   |         |        borrow of `x` occurs here\n   |         assignment to borrowed `x` occurs here\n\nerror[E0499]: cannot borrow `x.children` as mutable more than once at a time\n  --&gt; src/main.rs:18:18\n   |\n18 |         x = &amp;mut x.children[0];\n   |                  ^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n19 |     }\n20 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>Is there any way to update <code>x</code> to a mutable reference of one of <code>x</code>'s child nodes without re-borrowing <code>x</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "edited": false, "score": 0, "creation_date": 1515452258, "post_id": 48159170, "comment_id": 83297967, "body": "Thank you. Indeed I got bitten by the magic numbers, didn&#39;t recognize that shift amount."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1515493344, "post_id": 48159170, "comment_id": 83311041, "body": "Actually I am not sure that <code>u32</code> is necessarily 4 bytes on every system. In C, <code>uint32_t</code> is not necessarily available on all platforms, because some platforms don&#39;t have 8-bits bytes (ie <code>CHAR_BIT != 8</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1515511857, "post_id": 48159170, "comment_id": 83322536, "body": "@MatthieuM. I&#39;ve always been under the impression that Rust&#39;s <code>u32</code> is always exactly 32 bits. Even on Arduino (8-bit register size), <code>i128</code> exist as groupings of  smaller registers."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1515512522, "post_id": 48159170, "comment_id": 83322957, "body": "@Shepmaster: It&#39;s easy to compose an integer out of 8-bits blocks, but when your blocks are 9 or 10 bits, then what do you do? From <a href=\"https://stackoverflow.com/questions/2098149/what-platforms-have-something-other-than-8-bit-char\" title=\"what platforms have something other than 8 bit char\">stackoverflow.com/questions/2098149/&hellip;</a> there appears to be 24-bits DSP for example, the same also mentions that POSIX requires 8-bits bytes so a lot of system should be okay."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1515512636, "post_id": 48159170, "comment_id": 83323029, "body": "@MatthieuM. I understand that there are such platforms, and that <i>C</i> may or may not handle them, but does <i>Rust</i> actually attempt to work for any of these types of platforms?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1515515345, "post_id": 48159170, "comment_id": 83324764, "body": "@Shepmaster: <i>Rust All The Platforms!</i>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1515456269, "last_edit_date": 1515456269, "creation_date": 1515451899, "answer_id": 48159170, "question_id": 48158788, "link": "https://stackoverflow.com/questions/48158788/converting-large-number-stored-in-array-of-u32-to-bytes-and-back/48159170#48159170", "title": "Converting large number stored in array of u32 to bytes and back", "body": "<p>Learning how to create a <a href=\"/help/mcve\">MCVE</a> is a crucial skill when programming. For example, why do you have an array at all? Why do you <em>reuse</em> variables?</p>\n\n<p>Your original first number is <code>0x4F9B1BD6</code>, the output first number is <code>0x000B1BD6</code>. </p>\n\n<p>Comparing the intermediate bytes shows that you have garbage: </p>\n\n<pre><code>let num = 0x4F9B1BD6_u32;\nprintln!(\"{:08X}\", num);\n\nlet mut bytes = [0u8; BYTES_PER_U32];\nfor i in 0..bytes.len() {\n    let k = (i % BYTES_PER_U32) as u32;\n    bytes[i] = (num &gt;&gt; (4 * k)) as u8;\n}\n\nfor b in &amp;bytes {\n    print!(\"{:X}\", b);\n}\nprintln!();\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>4F9B1BD6\nD6BD1BB1\n</code></pre>\n\n<p>Printing out the values of <code>k</code>:</p>\n\n<pre><code>for i in 0..bytes.len() {\n    let k = (i % BYTES_PER_U32) as u32;\n    println!(\"{} / {}\", k, 4 * k);\n    bytes[i] = (num &gt;&gt; (4 * k)) as u8;\n}\n</code></pre>\n\n<p>Shows that you are trying to shift by multiples of <strong>4</strong> bits:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0 / 0\n1 / 4\n2 / 8\n3 / 12\n</code></pre>\n\n<p>I'm pretty sure that every common platform today uses <strong>8</strong> bits for a byte, not <strong>4</strong>.</p>\n\n<p>This is <em>why magic numbers are bad</em>. If you had used constants for the values, you would have noticed the problem much sooner.</p>\n\n<blockquote>\n  <p>since u32 is 4 bytes in my system</p>\n</blockquote>\n\n<p>A <code>u32</code> <strong>better</strong> be 4 bytes on <em>every system</em> \u2014 that's why it's a <em><code>u32</code></em>. </p>\n\n<hr>\n\n<p>Overall, don't reinvent the wheel. Use the byteorder crate or equivalent:</p>\n\n<pre><code>extern crate byteorder;\n\nuse byteorder::{BigEndian, ReadBytesExt, WriteBytesExt};\n\nconst LENGTH: usize = 24;\nconst BYTES_PER_U32: usize = 4;\n\nfn main() {\n    let num: [u32; LENGTH] = [\n        1335565270, 4203813549, 2020505583, 2839365494, 2315860270, 442833049, 1854500981,\n        2254414916, 4192631541, 2072826612, 1479410393, 718887683, 1421359821, 733943433,\n        4073545728, 4141847560, 1761299410, 3068851576, 1582484065, 1882676300, 1565750229,\n        4185060747, 1883946895, 4146,\n    ];\n    println!(\"original_num: {:?}\", num);\n\n    let mut bytes = [0u8; LENGTH * BYTES_PER_U32];\n    {\n        let mut bytes = &amp;mut bytes[..];\n        for &amp;n in &amp;num {\n            bytes.write_u32::&lt;BigEndian&gt;(n).unwrap();\n        }\n    }\n\n    let mut num = [0u32; LENGTH];\n    {\n        let mut bytes = &amp;bytes[..];\n        for n in &amp;mut num {\n            *n = bytes.read_u32::&lt;BigEndian&gt;().unwrap();\n        }\n    }\n\n    println!(\"recovered_num: {:?}\", num);\n}\n</code></pre>\n"}], "owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1045, "favorite_count": 1, "accepted_answer_id": 48159170, "answer_count": 1, "score": 2, "last_activity_date": 1515456269, "creation_date": 1515449476, "question_id": 48158788, "link": "https://stackoverflow.com/questions/48158788/converting-large-number-stored-in-array-of-u32-to-bytes-and-back", "title": "Converting large number stored in array of u32 to bytes and back", "body": "<p>I'm doing some computational mathematics in Rust, and I have some large numbers which I store in an array of 24 values. I have functions that convert them to bytes and back, but it doesn't work fine for <code>u32</code> values, whereas it works fine for <code>u64</code>. The code sample can be found below:</p>\n\n<pre><code>fn main() {\n    let mut bytes = [0u8; 96]; // since u32 is 4 bytes in my system, 4*24 = 96\n    let mut j;\n    let mut k: u32;\n\n    let mut num: [u32; 24] = [1335565270, 4203813549, 2020505583, 2839365494, 2315860270, 442833049, 1854500981, 2254414916, 4192631541, 2072826612, 1479410393, 718887683, 1421359821, 733943433, 4073545728, 4141847560, 1761299410, 3068851576, 1582484065, 1882676300, 1565750229, 4185060747, 1883946895, 4146];\n    println!(\"original_num: {:?}\", num);\n\n    for i in 0..96 {\n        j = i / 4;\n        k = (i % 4) as u32;\n        bytes[i as usize] = (num[j as usize] &gt;&gt; (4 * k)) as u8;\n    }\n\n    println!(\"num_to_ytes: {:?}\", &amp;bytes[..]);\n    num = [0u32; 24];\n\n    for i in 0..96 {\n        j = i / 4;\n        k = (i % 4) as u32;\n        num[j as usize] |= (bytes[i as usize] as u32) &lt;&lt; (4 * k);\n    }\n\n    println!(\"recovered_num: {:?}\", num);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=fdb11b2d8fd7fc256cace5c5b6962c89&amp;version=stable\" rel=\"nofollow noreferrer\">Rust playground</a></p>\n\n<p>The above code does not retrieve the correct number from the byte array. But, if I change all <code>u32</code> to <code>u64</code>, all <code>4</code>s to <code>8</code>s, and reduce the size of <code>num</code> from 24 values to 12, it works all fine. I assume I have some logical problem for the <code>u32</code> version. The correctly working <code>u64</code> version can be found in <a href=\"https://play.rust-lang.org/?gist=569917b7e971703908e5d0d3c21640e7&amp;version=stable\" rel=\"nofollow noreferrer\">this Rust playground</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1515446356, "post_id": 48158063, "comment_id": 83295806, "body": "This indeed looks surprising.  For what it&#39;s worth, your code <a href=\"https://play.rust-lang.org/?gist=ac8b62c05dd2eb79b6185a3415c1c011&amp;version=nightly\" rel=\"nofollow noreferrer\">compiles on nightly with non-lexical lifetimes enabled</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515448196, "post_id": 48158063, "comment_id": 83296578, "body": "I&#39;m not totally sure that the NLL version working is <i>correct</i>. It seems like it has <a href=\"https://github.com/rust-lang/rust/issues/47279\" rel=\"nofollow noreferrer\">at least one bug</a>."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515448481, "post_id": 48158063, "comment_id": 83296690, "body": "@Shepmaster I noticed the bug as well \u2013 thanks for reporting it!  I&#39;m not sure it&#39;s related to NLL."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1515448612, "post_id": 48158063, "comment_id": 83296740, "body": "@SvenMarnach right. As <a href=\"https://github.com/rust-lang/rust/issues/47279#issuecomment-356104081\" rel=\"nofollow noreferrer\">noted</a>, non-NLL reports both an error <i>and</i> the warning, which is what makes me think that the fact the NLL version compiles is incorrect."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515519864, "post_id": 48158063, "comment_id": 83327321, "body": "If it helps anyone, <a href=\"https://play.rust-lang.org/?gist=43602054ad031b97ad6d2f69ab81476d&amp;version=undefined\" rel=\"nofollow noreferrer\">here&#39;s a greatly reduced example</a> that shows the <code>init_</code> functions aren&#39;t necessary to unify the lifetimes; a struct behaves just the same on its own."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1515532166, "post_id": 48158063, "comment_id": 83333280, "body": "@trentcl Nice! Here&#39;s the minimal fix from my answer applied to that reduced version: <a href=\"https://play.rust-lang.org/?gist=6033a44a2cc9f6bc73934230180ba7f6&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1515479390, "post_id": 48158546, "comment_id": 83304284, "body": "The code can be simplified. <a href=\"https://play.rust-lang.org/?gist=739b95c2b3e42bd797b54bda14791154&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a> <code>C&lt;&#39;a, &#39;b&gt;</code> is variant over <code>&#39;a</code> and invariant over <code>&#39;b</code>. This allows to write <code>sd: &amp;&#39;a mut C&lt;&#39;b, &#39;b&gt;</code>."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1515480146, "post_id": 48158546, "comment_id": 83304528, "body": "Another way to make the original code compile: <a href=\"https://play.rust-lang.org/?gist=59218f6657f4b7b9db53b2d404926167&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a> <code>let (mut b, mut c, d);</code> makes lifetimes of <code>b</code>, <code>c</code>, and <code>d</code> exactly the same."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1515513556, "post_id": 48158546, "comment_id": 83323654, "body": "@red75prime you should go ahead and make that an answer (along with the explanation of why it works)"}, {"owner": {"reputation": 1348, "user_id": 269515, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c36f2b6ca4c0a5955da7d497341c9653?s=128&d=identicon&r=PG", "display_name": "Ben Clifford", "link": "https://stackoverflow.com/users/269515/ben-clifford"}, "edited": false, "score": 0, "creation_date": 1515516678, "post_id": 48158546, "comment_id": 83325569, "body": "I understand that I can jiggle the code around to make it compile: for example I can also,in my real use case, stop using references at all and transfer ownership of <code>a</code> to <code>b</code>, and then of <code>b</code> to <code>c</code> and so on - so that everything goes out of scope all at once with <code>d</code>.  What I was really wondering is why this compiles with <code>A</code>, <code>B</code>, and <code>C</code>, but not when I add in <code>D</code>."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515517344, "post_id": 48158546, "comment_id": 83325962, "body": "@Shepmaster, I&#39;ve a draft of the answer, but I need to make it clearer for everyone, me included. There&#39;s nontrivial interplay of lifetimes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1515517582, "post_id": 48158546, "comment_id": 83326087, "body": "@red75prime indeed. Perhaps <a href=\"https://gitter.im/rust-impl-period/WG-compiler-nll?at=5a54ddf219147ac3231b60dd\" rel=\"nofollow noreferrer\">some discussion between nikomatsakis and pnkfelix</a> would help?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 1348, "user_id": 269515, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c36f2b6ca4c0a5955da7d497341c9653?s=128&d=identicon&r=PG", "display_name": "Ben Clifford", "link": "https://stackoverflow.com/users/269515/ben-clifford"}, "edited": false, "score": 0, "creation_date": 1515518530, "post_id": 48158546, "comment_id": 83326617, "body": "@BenClifford The function calls are making all reference lifetimes equal in your code, so you end up with the types <code>A</code>, <code>B&lt;&#39;a&gt;</code>, <code>C&lt;&#39;a&gt;</code>, <code>D&lt;&#39;a&gt;</code>.  This is fine up until <code>c</code>, since the lifetime <code>&#39;a</code> can be the scope of <code>b</code>.  However, once you add <code>d</code> to the mix, there is no single lifetime <code>&#39;a</code> that would make all references valid, so you have to use more than one.  I&#39;ve gone a bit overboard by simply giving everything a separate lifetime \u2013 it&#39;s possible to make to with less, but I&#39;m too lazy to work out the details."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1515532716, "post_id": 48158546, "comment_id": 83333527, "body": "@red75prime I&#39;ve updated the answer with simpler code as you suggested and also added more detail to the explanation I gave."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 2, "last_activity_date": 1515532663, "last_edit_date": 1515532663, "creation_date": 1515448086, "answer_id": 48158546, "question_id": 48158063, "link": "https://stackoverflow.com/questions/48158063/reference-does-not-live-long-enough-in-nested-structure/48158546#48158546", "title": "Reference does not live long enough in nested structure", "body": "<p>The <code>init_*()</code> functions in your original code always return a type with a lifetime parameter equal to the lifetime of the reference you passed in.  Since you build a chain of references this way, all your lifetimes will end up the same, and the types of <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> will end up being <code>A</code>, <code>B&lt;'a&gt;</code>, <code>C&lt;'a&gt;</code>, <code>D&lt;'a&gt;</code>.  This is fine up until <code>c</code>, since the lifetime <code>'a</code> can be the scope of <code>b</code>, which satisfies all constraints.</p>\n\n<p>However, once you add <code>d</code> to the mix, there is no single lifetime <code>'a</code> that would make all references valid.  The lifetime <code>'a</code> can't be the scope of <code>b</code> anymore, since <code>c</code> does not live long enough.  Neither can it be the scope of <code>c</code>, since this is too short for <code>b</code>, so the compiler errors out.</p>\n\n<p>By decoupling the lifetimes, it's possible for all variables to have their own lifetime and everything works as expected.  Since the problem only starts with <code>D</code>, it's enough do introduce an additional lifetime at that point.</p>\n\n<pre><code>struct A;\n\nfn init_a() -&gt; A {\n    A {}\n}\n\nstruct B&lt;'a&gt; {\n    ed: &amp;'a mut A,\n}\n\nfn init_b(ed: &amp;mut A) -&gt; B {\n    B { ed }\n}\n\nstruct C&lt;'b&gt; {\n    pd: &amp;'b mut B&lt;'b&gt;,\n}\n\nfn init_c&lt;'b&gt;(pd: &amp;'b mut B&lt;'b&gt;) -&gt; C&lt;'b&gt; {\n    C { pd }\n}\n\nstruct D&lt;'c, 'b: 'c&gt; {\n    sd: &amp;'c mut C&lt;'b&gt;,\n}\n\nfn init_d&lt;'c, 'b: 'c&gt;(sd: &amp;'c mut C&lt;'b&gt;) -&gt; D&lt;'c, 'b&gt; {\n    D { sd }\n}\n\nfn main() {\n    let mut a = init_a();\n    let mut b = init_b(&amp;mut a);\n    let mut c = init_c(&amp;mut b);\n    let d = init_d(&amp;mut c);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6e0e82bac3b5b319d42a8772fb202f91&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}, {"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 4, "last_activity_date": 1515598968, "last_edit_date": 1515598968, "creation_date": 1515573822, "answer_id": 48183381, "question_id": 48158063, "link": "https://stackoverflow.com/questions/48158063/reference-does-not-live-long-enough-in-nested-structure/48183381#48183381", "title": "Reference does not live long enough in nested structure", "body": "<p>I'll address the point why the code in question doesn't work.</p>\n\n<p>TL;DR: Invariance over the lifetimes of types <code>C&lt;'l&gt;</code> and <code>D&lt;'l&gt;</code> and the use of a single lifetime parameter (<code>'l</code>) for them cause variables of those types to keep their borrows for as long as variable <code>b</code> exists, but variable <code>c</code> (borrowed by <code>d</code>) is dropped before <code>b</code>.</p>\n\n<p>The borrow checker is essentially a constraint solver. It searches for the shortest lifetimes<sup>0</sup> which satisfy various constraints: a reference must not live longer than a value it references, lifetimes must obey constraints specified in function signatures and types, and lifetimes must obey variance rules<sup>1</sup>.</p>\n\n<p><strong>0</strong> \u2014 The shortest lifetime of a reference is the best because then the reference doesn't borrow a value for longer than necessary.</p>\n\n<p><strong>1</strong> \u2014 Rust has a concept of <a href=\"https://doc.rust-lang.org/beta/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">variance</a> which determines whether it is possible to use a value with longer lifetime in a place which expects a value of lesser lifetime. The Rustonomicon link explains it in detail.</p>\n\n<p>The code below is a simplified version of the code in question and it fails with the same error: <code>c</code> does not live long enough. The blocks are marked with the lifetimes of variables. <code>'a</code> is the lifetime of variable <code>a</code> and so on. Those lifetimes are determined by the structure of the code and they are fixed.</p>\n\n<p>Lifetimes in type annotations (<code>B(&amp;'ar A) -&gt; B&lt;'ar&gt;</code> and so on) are variables. The borrow checker tries to find valid assignments of fixed lifetimes (<code>'a</code>, <code>'b</code>, <code>'c</code>, '<code>d</code>) to these variables.</p>\n\n<p>The comments below the <code>let</code> statements show the lifetime constraints which I'll explain below.</p>\n\n<pre><code>struct A;\n\nstruct B&lt;'l&gt;(&amp;'l mut A);\n\nstruct C&lt;'l&gt;(&amp;'l mut B&lt;'l&gt;);\n\nstruct D&lt;'l&gt;(&amp;'l mut C&lt;'l&gt;);\n\nfn main() {\n    // lifetime 'a\n    let mut a = A;\n    { // lifetime 'b\n        // B(&amp;'r mut A) -&gt; B&lt;'ar&gt;   \n        let mut b = B(&amp;mut a); \n        // 'r &gt;= 'ar &amp; 'r &lt;= 'a\n        { // lifetime 'c\n            // C(&amp;'br mut B&lt;'ar&gt;) -&gt; C&lt;'abr&gt;  \n            let mut c = C(&amp;mut b); \n            // 'br &lt;= 'b &amp; 'abr = 'ar &amp; 'br &gt;= 'abr\n            { // lifetime 'd\n                // D(&amp;'cr mut C&lt;'abr&gt;) -&gt; D&lt;'cabr&gt; \n                let d = D(&amp;mut c); \n                // 'cr &lt;= 'c &amp; 'cabr = 'abr &amp; 'cr &gt;= 'cabr\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>First assignment </p>\n\n<pre><code>// B(&amp;'r mut A) -&gt; B&lt;'ar&gt;   \nlet mut b = B(&amp;mut a); \n// 'r &lt;= 'a &amp; 'r &gt;= 'ar\n</code></pre>\n\n<p>Reference to <code>a</code> cannot outlive <code>a</code>, hence <code>'r &lt;= 'a</code>.</p>\n\n<p><code>&amp;'r mut A</code> is variant over 'r, so we can pass it into the type constructor of <code>B&lt;'ar&gt;</code> which expects <code>&amp;'ar mut A</code> iff <code>'r &gt;= 'ar</code>.</p>\n\n<p>Second assignment</p>\n\n<pre><code> // C(&amp;'br mut B&lt;'ar&gt;) -&gt; C&lt;'abr&gt;  \n let mut c = C(&amp;mut b); \n // 'br &lt;= 'b &amp; 'abr = 'ar &amp; 'br &gt;= 'abr\n</code></pre>\n\n<p>Reference cannot outlive <code>b</code> (<code>'br &lt;= 'b</code>), <code>&amp;mut B</code> is invariant over <code>B</code> (<code>'abr = 'ar</code>), <code>&amp;'br mut B</code> is variant over <code>'br</code> (<code>'br &gt;= 'abr</code>)</p>\n\n<p><code>d</code>'s assignment is analogous to <code>c</code>.</p>\n\n<p>Rust doesn't seem to consider lifetimes it hasn't encountered yet as possible assignments. The possible assignments for <code>'ar</code> thus are <code>'a</code> or <code>'b</code>, the ones for <code>'abr</code> are <code>'a</code>, <code>'b</code>, or <code>'c</code> and so on.</p>\n\n<p>This set of constraints boils down to <code>'ar = 'abr = 'cabr</code> and the smallest allowed assignment for <code>'ar</code> is <code>'b</code>. Therefore the types of <code>b</code>, <code>c</code>, and <code>d</code> are <code>B&lt;'b&gt;</code>, <code>C&lt;'b&gt;</code>, <code>D&lt;'b&gt;</code>. That is, the variable <code>d</code> holds a reference to <code>c</code> for the lifetime <code>'b</code>, but <code>c</code> is dropped at the end of the <code>'c</code> lifetime.</p>\n\n<p>If we remove <code>d</code>, then <code>c</code> still keeps <code>b</code> borrowed to the end of the lifetime <code>'b</code>, but it isn't a problem because <code>b</code> doesn't outlive the lifetime <code>'b</code>.</p>\n\n<p>This description is still simplified. For example, while the type of <code>c</code> is <code>C&lt;'b&gt;</code>, <code>c</code> doesn't borrow <code>b</code> for the entire lifetime <code>'b</code>, it borrows it for a part of <code>'b</code> starting after definition of <code>c</code>, but it is something I don't have clear understanding yet.</p>\n"}], "owner": {"reputation": 1348, "user_id": 269515, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c36f2b6ca4c0a5955da7d497341c9653?s=128&d=identicon&r=PG", "display_name": "Ben Clifford", "link": "https://stackoverflow.com/users/269515/ben-clifford"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 520, "favorite_count": 0, "answer_count": 2, "score": 6, "last_activity_date": 1515598968, "creation_date": 1515445622, "last_edit_date": 1515445775, "question_id": 48158063, "link": "https://stackoverflow.com/questions/48158063/reference-does-not-live-long-enough-in-nested-structure", "title": "Reference does not live long enough in nested structure", "body": "<p>I'm creating a series of data structures containing mutable references to lower level structures. I've been fairly happily working with <code>A</code>, <code>B</code>, and <code>C</code> below but I've attempted to add a new layer <code>D</code>. <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> are actually the states of a state machine for protocol decoding, but I've deleted all of that here:</p>\n\n<pre><code>struct A {}\n\nfn init_A() -&gt; A {\n    A {}\n}\n\nstruct B&lt;'l&gt; {\n    ed: &amp;'l mut A,\n}\n\nfn init_B(mut e: &amp;mut A) -&gt; B {\n    B { ed: e }\n}\n\nstruct C&lt;'l&gt; {\n    pd: &amp;'l mut B&lt;'l&gt;,\n}\n\nfn init_C&lt;'l&gt;(mut p: &amp;'l mut B&lt;'l&gt;) -&gt; C&lt;'l&gt; {\n    C { pd: p }\n}\n\nstruct D&lt;'lifetime&gt; {\n    sd: &amp;'lifetime mut C&lt;'lifetime&gt;,\n}\n\nfn init_D&lt;'l&gt;(mut p: &amp;'l mut C&lt;'l&gt;) -&gt; D&lt;'l&gt; {\n    D { sd: p }\n}\n\nfn main() {\n    let mut a = init_A();\n    let mut b = init_B(&amp;mut a);\n    let mut c = init_C(&amp;mut b);\n\n    // COMMENT OUT THE BELOW LINE FOR SUCCESSFUL COMPILE\n    let mut d = init_D(&amp;mut c);\n}\n</code></pre>\n\n<p>I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `c` does not live long enough\n  --&gt; src/main.rs:38:1\n   |\n37 |     let mut d = init_D(&amp;mut c);\n   |                             - borrow occurs here\n38 | }\n   | ^ `c` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>I'm completely lacking understanding of what is happening differently for <code>D</code> compared to <code>C</code> as far as lifetimes go: I don't understand what the lifetime mismatch is.</p>\n"}, {"tags": ["generics", "vector", "iterator", "rust", "slice"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1515402397, "post_id": 48146804, "comment_id": 83272225, "body": "<code>T: IntoIterator&lt;Item=&amp;Tag&gt;</code>? You may have to fiddle with the lifetimes."}, {"owner": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1515406929, "post_id": 48146804, "comment_id": 83274741, "body": "@SebastianRedl I tried that before but you inspired me to go back to it. See my edit."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1515419900, "post_id": 48146804, "comment_id": 83281926, "body": "You should put your edit as an answer"}, {"owner": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1515422720, "post_id": 48146804, "comment_id": 83283706, "body": "@Boiethios I was kind of hoping that someone might give a better answer, or at least comment on those points."}], "answers": [{"comments": [{"owner": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "edited": false, "score": 0, "creation_date": 1515425544, "post_id": 48152777, "comment_id": 83285465, "body": "Thanks for the follow up. Good point regarding (1) - I didn&#39;t consider that. Regarding (2), in the original formulation the lifetimes of <code>&amp;self</code> and <code>Option&lt;&amp;str&gt;</code> are directly linked (albeit via elision). In the new formulation, my intuition is that any useful <code>self</code> type will contain a reference to <code>&#39;a</code> and thus have the same lifetime as <code>Option&lt;&amp;&#39;a str&gt;</code>, but I am not sure how to formalize that. Regarding (3), is there any way to get the compiler to dump a fully-qualified AST so I can know what it did? In particular, I&#39;m not sure if it&#39;s using the <code>&amp;&#39;a Vec&lt;T&gt;</code> or <code>&amp;&#39;a [T]</code> instance."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "edited": false, "score": 1, "creation_date": 1515426029, "post_id": 48152777, "comment_id": 83285762, "body": "@BenChallenor (2) Yes, any correct implementation of the trait will involve <code>Self</code> having some reference with the lifetime <code>&#39;a</code>. I don&#39;t know how to formalize that for you, but it&#39;s a consequence of the first part \u2014 you cannot &quot;magic up&quot; a reference that wold life long enough (3) No, but that&#39;s why I linked to the question I did. It will try <code>Vec</code>, <code>&amp;Vec</code>, <code>*Vec</code>, then <code>&amp;*Vec</code> in order, picking the first that implements it."}, {"owner": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "edited": false, "score": 0, "creation_date": 1515449995, "post_id": 48152777, "comment_id": 83297250, "body": "thanks. (2) The worst I can come up with is implementing the trait for <code>()</code> by returning a <code>&#39;static</code> reference, but to be fair you can do this with the original formulation too. You certainly can&#39;t return the key <code>&amp;str</code>. So I think I understand this now. (3) I think I&#39;ll have to try some more examples to get a feel for the auto-dereferencing rules, but I&#39;m happy with this answer."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "edited": false, "score": 1, "creation_date": 1515462332, "post_id": 48152777, "comment_id": 83300310, "body": "@BenChallenor If an iterator emits <code>&#39;static</code> references, then it will only implement <code>TagFinder&lt;&#39;static&gt;</code>, not <code>TagFinder&lt;&#39;a&gt;</code> for any other lifetime <code>&#39;a</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1515424011, "last_edit_date": 1515424011, "creation_date": 1515423394, "answer_id": 48152777, "question_id": 48146804, "link": "https://stackoverflow.com/questions/48146804/how-to-implement-trait-once-for-all-iterables-of-t-e-g-vect-and-t/48152777#48152777", "title": "How to implement trait once for all iterables of &amp;T (e.g. Vec&lt;T&gt; and &amp;[T])", "body": "<blockquote>\n  <p>How to implement trait once for all iterables of <code>&amp;T</code></p>\n</blockquote>\n\n<p>Pretty much as you've specified:</p>\n\n<pre><code>trait Foo {}\n\nimpl&lt;'a, T: 'a, I&gt; Foo for I\nwhere\n    I: Iterator&lt;Item = &amp;'a T&gt;,\n{\n}\n</code></pre>\n\n<p>You can substitute <code>IntoIterator</code> for <code>Iterator</code> if you'd like.</p>\n\n<p>For your specific case:</p>\n\n<pre><code>trait TagFinder&lt;'a&gt; {\n    fn find_tag(self, key: &amp;str) -&gt; Option&lt;&amp;'a str&gt;;\n}\n\nimpl&lt;'a, I&gt; TagFinder&lt;'a&gt; for I\nwhere\n    I: IntoIterator&lt;Item = &amp;'a Tag&gt;,\n{\n    fn find_tag(self, key: &amp;str) -&gt; Option&lt;&amp;'a str&gt; {\n        self.into_iter()\n            .filter(|tag| tag.key == key)\n            .map(|tag| tag.value.as_ref())\n            .next()\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>The trait now consumes <code>self</code>, which would not be at all desirable, except for the fact that the only implementers of <code>IntoIterator&lt;Item = &amp;'a Tag&gt;</code> seem to be borrowing types, so the <code>self</code> that is destroyed is only a reference. I'm a bit wary because there is nothing (except convention) stopping someone implementing that for an owning type like <code>Vec</code>.</p>\n</blockquote>\n\n<p>If you can find some way to take an owning value and return a reference to it, then you've found a critical hole in Rust's memory safety. See <a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a>.</p>\n\n<blockquote>\n  <p>Moving the lifetime parameter from the method (elided) to the trait is weird. I'm finding it hard to understand how the return value ends up with a sensible lifetime.</p>\n</blockquote>\n\n<p>I don't understand the confusion. You've explicitly specified the lifetime, so in what manner would it not be reasonable? You aren't removing it from the method, you are just adding it to the trait because now the trait has to know that <code>'a</code> is something from \"outside\" the trait itself.</p>\n\n<blockquote>\n  <p>Why does <code>v.find_tag(...)</code> work? The receiver here is a <code>Vec</code> not a reference. How is Rust converting it to a reference?</p>\n</blockquote>\n\n<p>The same way any other method call that takes a reference works when called on a value. See <a href=\"https://stackoverflow.com/q/28519997/155423\">What are Rust&#39;s exact auto-dereferencing rules?</a></p>\n"}], "owner": {"reputation": 3285, "user_id": 161298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef05976e914b716ecefcc3cbf5277af2?s=128&d=identicon&r=PG", "display_name": "Ben Challenor", "link": "https://stackoverflow.com/users/161298/ben-challenor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 48152777, "answer_count": 1, "score": 2, "last_activity_date": 1515424011, "creation_date": 1515401306, "last_edit_date": 1515406880, "question_id": 48146804, "link": "https://stackoverflow.com/questions/48146804/how-to-implement-trait-once-for-all-iterables-of-t-e-g-vect-and-t", "title": "How to implement trait once for all iterables of &amp;T (e.g. Vec&lt;T&gt; and &amp;[T])", "body": "<p>I have a trait method that finds a reference to an element in a collection by linearly scanning through its elements.</p>\n\n<p>I'd like to be able to implement this once for both <code>Vec&lt;Tag&gt;</code> and <code>&amp;'a [Tag]</code> (and ideally support other iterable data structures too).</p>\n\n<p>In the code below, the instances of <code>TagFinder</code> are identically implemented for <code>Vec&lt;Tag&gt;</code> and <code>&amp;'a [Tag]</code>, but I can't find a way to express this generically. Is it possible?</p>\n\n<p>This <a href=\"https://stackoverflow.com/questions/39989581\">other question</a> seems relevant, but I have an extra level of indirection here in that I'm dealing with \"iterables\" and not iterators.</p>\n\n<p>Relatedly, it seems it would be handy if there were a trait like <code>IntoIterator</code> that exposed an iterator of references (i.e. <code>Vec&lt;T&gt;</code> and <code>&amp;[T]</code> would both iterate over <code>&amp;T</code>, rather than <code>Vec&lt;T&gt;</code> exposing an owning iterator). I'm not sure why such a thing doesn't exist.</p>\n\n<pre><code>struct Tag {\n    key: String,\n    value: String,\n}\n\ntrait TagFinder {\n    fn find_tag(&amp;self, key: &amp;str) -&gt; Option&lt;&amp;str&gt;;\n}\n\nimpl&lt;'a&gt; TagFinder for &amp;'a [Tag] {\n    fn find_tag(&amp;self, key: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n        find_tag(self.into_iter(), key)\n    }\n}\n\nimpl TagFinder for Vec&lt;Tag&gt; {\n    fn find_tag(&amp;self, key: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n        find_tag(self.into_iter(), key)\n    }\n}\n\nfn find_tag&lt;'a, I&gt;(tags: I, key: &amp;str) -&gt; Option&lt;&amp;'a str&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a Tag&gt;,\n{\n    tags.filter_map(|tag| match tag {\n        &amp;Tag {\n            key: ref k,\n            value: ref v,\n        } if k == key =&gt;\n        {\n            Some(v as &amp;str)\n        }\n        _ =&gt; None,\n    }).next()\n}\n\nfn main() {\n    let v = vec![\n        Tag {\n            key: \"a\".to_owned(),\n            value: \"1\".to_owned(),\n        },\n        Tag {\n            key: \"b\".to_owned(),\n            value: \"2\".to_owned(),\n        },\n    ];\n\n    let s: &amp;[Tag] = &amp;v;\n\n    assert!(v.find_tag(\"b\") == Some(\"2\"));\n    assert!(s.find_tag(\"b\") == Some(\"2\"));\n}\n</code></pre>\n\n<h1>Edit</h1>\n\n<p>After some playing around I've come up with the following. It works, but I'm not really comfortable with <em>why</em> it works.</p>\n\n<ol>\n<li><p>The trait now consumes <code>self</code>, which would not be at all desirable, except for the fact that the only implementers of <code>IntoIterator&lt;Item = &amp;'a Tag&gt;</code> seem to be borrowing types, so the <code>self</code> that is destroyed is only a reference. I'm a bit wary because there is nothing (except convention) stopping someone implementing that for an owning type like <code>Vec</code>.</p></li>\n<li><p>Moving the lifetime parameter from the method (elided) to the trait is weird. I'm finding it hard to understand how the return value ends up with a sensible lifetime.</p></li>\n<li><p>Why does <code>v.find_tag(...)</code> work? The receiver here is a <code>Vec</code> not a reference. How is Rust converting it to a reference?</p></li>\n</ol>\n\n<p>Thanks. :)</p>\n\n<pre><code>trait TagFinder&lt;'a&gt; {\n    fn find_tag(self, key: &amp;str) -&gt; Option&lt;&amp;'a str&gt;;\n}\n\nimpl&lt;'a, T&gt; TagFinder&lt;'a&gt; for T\nwhere\n    T: IntoIterator&lt;Item = &amp;'a Tag&gt;,\n{\n    fn find_tag(self, key: &amp;str) -&gt; Option&lt;&amp;'a str&gt; {\n        find_tag(self.into_iter(), key)\n    }\n}\n</code></pre>\n"}, {"tags": ["enums", "rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1515389316, "creation_date": 1515389316, "answer_id": 48144666, "question_id": 48144646, "link": "https://stackoverflow.com/questions/48144646/how-to-tell-the-compiler-the-variant-of-the-enum-im-returning-always-has-no-lif/48144666#48144666", "title": "How to tell the compiler the variant of the enum I&#39;m returning always has no lifetime?", "body": "<p>Instead of applying the <code>'a</code> lifetime parameter on the <em>reference</em>, apply it on <code>Types</code>, as you already did with the return type. The lifetime on the reference is not important when you call <code>.clone()</code> on it.</p>\n\n<pre><code>fn always_returns_no_lifetime&lt;'a&gt;(some_type: &amp;Types&lt;'a&gt;) -&gt; Types&lt;'a&gt; {\n    match *some_type {\n        Types::HasLifetime(text) =&gt; panic!(\"I only return the type that has no lifetime\"),\n        _ =&gt; some_type.clone()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515402261, "post_id": 48146922, "comment_id": 83272168, "body": "Thanks for the answer, but I don&#39;t really understand what you are trying to show in the second example. I see what you did with the scopes at the bottom, but what is the tie function supposed to be showing?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515402361, "post_id": 48146922, "comment_id": 83272206, "body": "@Keatinge: The <code>tie</code> function is creating a <code>Types&lt;&#39;a&gt;</code> which ties the value to the lifetime of its input (note it has the same lifetime). This is what results in <code>has_lifetime</code> having the same lifetime as the <code>string</code> variable. If you try to return <code>has_lifetime</code> from the block, the compiler will warn that you cannot, as the <code>string</code> is destroyed at the end of the block."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1515424498, "last_edit_date": 1515424498, "creation_date": 1515401852, "answer_id": 48146922, "question_id": 48144646, "link": "https://stackoverflow.com/questions/48144646/how-to-tell-the-compiler-the-variant-of-the-enum-im-returning-always-has-no-lif/48146922#48146922", "title": "How to tell the compiler the variant of the enum I&#39;m returning always has no lifetime?", "body": "<p>The return type of your function is wrong. If the return value is guaranteed not to have any lifetime, then it should be marked as such, and not tied down to an arbitrary lifetime:</p>\n\n<pre><code>fn always_returns_no_lifetime(...) -&gt; Types&lt;'static&gt;;\n</code></pre>\n\n<p>With this change, you actually no longer need any <em>input</em> lifetime either, since they are only useful to tie the input and output, leading the following signature:</p>\n\n<pre><code>fn always_returns_no_lifetime(some_type: &amp;Types) -&gt; Types&lt;'static&gt;;\n</code></pre>\n\n<p>Unfortunately, this means that <code>clone</code> is now out of the table, as it clones the lifetime, so the implementation has to change too:</p>\n\n<pre><code>fn always_returns_no_lifetime(some_type: &amp;Types) -&gt; Types&lt;'static&gt; {\n    match *some_type {\n        Types::HasLifetime(_)\n            =&gt; panic!(\"I only return values that have no lifetime\"),\n        Types::NoLifetime(i) =&gt; Types::NoLifetime(i),\n        Types::AlsoNoLifetime(i) =&gt; Types::AlsoNoLifetime(i),\n        Types::AlsoAlsoNoLifetime(i) =&gt; Types::AlsoAlsoNoLifetime(i),\n    }\n}\n</code></pre>\n\n<p>The benefit of this implementation can be demonstrated in the following example:</p>\n\n<pre><code>fn tie&lt;'a&gt;(text: &amp;'a str) -&gt; Types&lt;'a&gt; {\n    if text[0] == 'a' {\n        Types::HasLifetime(text)\n    } else {\n        Types::NoLifetime(0)\n    }\n}\n\nfn main() {\n    let no_lifetime = {\n        let string = String::from(\"Hello, world\");\n        let has_lifetime = tie(&amp;*string);\n        always_returns_no_lifetime(&amp;has_lifetime)\n    };\n\n    //  Requires deriving Debug, all structs really should...\n    println!(\"{:?}\", no_lifetime);\n}\n</code></pre>\n\n<p>If you preserve the lifetime when you don't need it, you cannot compile this example, it's an unnecessary restriction.</p>\n"}], "owner": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 525, "favorite_count": 0, "accepted_answer_id": 48146922, "answer_count": 2, "score": 3, "last_activity_date": 1515424498, "creation_date": 1515389123, "last_edit_date": 1515424442, "question_id": 48144646, "link": "https://stackoverflow.com/questions/48144646/how-to-tell-the-compiler-the-variant-of-the-enum-im-returning-always-has-no-lif", "title": "How to tell the compiler the variant of the enum I&#39;m returning always has no lifetime?", "body": "<p>The below code won't compile because the compiler thinks I shouldn't assign to <code>t1</code> since it is borrowed, but in reality the function <code>always_returns_no_lifetime</code> will always be returning a variant of the enum that actually doesn't have an lifetime, so it is okay for me to modify <code>t1</code>. How can I get the compiler to understand this or how should I reorganize my code to make this error not happen? </p>\n\n<pre><code>#[derive(Clone)]\nenum Types&lt;'a&gt; {\n    NoLifetime(i32),\n    AlsoNoLifetime(i32),\n    AlsoAlsoNoLifetime(i32),\n    HasLifetime(&amp;'a str)\n}\n\nfn always_returns_no_lifetime&lt;'a&gt;(some_type: &amp;'a Types) -&gt; Types&lt;'a&gt; {\n    match *some_type {\n        Types::HasLifetime(text) =&gt; panic!(\"I only return the type that has no lifetime\"),\n        _ =&gt; some_type.clone()\n    }\n}\n\n\nfn main() {\n    let mut t1 = Types::NoLifetime(20);\n\n    let copy = always_returns_no_lifetime(&amp;t1);\n\n    t1 = Types::NoLifetime(30);\n\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5a5419800bcc138ea3b735c671c8dd0d&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `t1` because it is borrowed\n  --&gt; src/main.rs:23:5\n   |\n21 |     let copy = always_returns_no_lifetime(&amp;t1);\n   |                                            -- borrow of `t1` occurs here\n22 |     \n23 |     t1 = Types::NoLifetime(30);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `t1` occurs here\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 12, "last_activity_date": 1601319144, "last_edit_date": 1601319144, "creation_date": 1515385567, "answer_id": 48144226, "question_id": 48143889, "link": "https://stackoverflow.com/questions/48143889/why-cant-i-reuse-a-mut-reference-after-passing-it-to-a-function-that-accepts-a/48144226#48144226", "title": "Why can&#39;t I reuse a &amp;mut reference after passing it to a function that accepts a generic type?", "body": "<p>Normally, when you pass a mutable reference to a function, the compiler implicitly performs a <em>reborrow</em>. This produces a new borrow with a shorter lifetime.</p>\n<p>When the parameter is generic (and is not of the form <code>&amp;mut T</code>), the compiler doesn't do this reborrowing automatically<sup>1</sup>. However, you can do it manually by dereferencing your existing mutable reference and then referencing it again:</p>\n<pre><code>fn take_reference(data: &amp;mut Vec&lt;u8&gt;) {\n    {\n        let mut buf = io::Cursor::new(&amp;mut *data);\n\n        use_cursor(&amp;mut buf);\n    }\n\n    data.len();\n}\n</code></pre>\n<hr />\n<p><strong>1</strong> \u2014 This is because the current compiler architecture only allows a chance to do a coercion if both the source and target types are known at the coercion site.</p>\n"}], "owner": {"reputation": 808, "user_id": 1025817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37189d25c4bf5679bd6d24d361978e88?s=128&d=identicon&r=PG", "display_name": "Samuel Moriarty", "link": "https://stackoverflow.com/users/1025817/samuel-moriarty"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 779, "favorite_count": 3, "accepted_answer_id": 48144226, "answer_count": 1, "score": 11, "last_activity_date": 1601319144, "creation_date": 1515382171, "last_edit_date": 1574688137, "question_id": 48143889, "link": "https://stackoverflow.com/questions/48143889/why-cant-i-reuse-a-mut-reference-after-passing-it-to-a-function-that-accepts-a", "title": "Why can&#39;t I reuse a &amp;mut reference after passing it to a function that accepts a generic type?", "body": "<p>Why doesn't this code compile:</p>\n\n<pre><code>fn use_cursor(cursor: &amp;mut io::Cursor&lt;&amp;mut Vec&lt;u8&gt;&gt;) {\n    // do some work\n}\n\nfn take_reference(data: &amp;mut Vec&lt;u8&gt;) {\n    {\n        let mut buf = io::Cursor::new(data);\n\n        use_cursor(&amp;mut buf);\n    }\n\n    data.len();\n}\n\nfn produce_data() {\n    let mut data = Vec::new();\n    take_reference(&amp;mut data);\n    data.len();\n}\n</code></pre>\n\n<p>The error in this case is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `*data`\n  --&gt; src/main.rs:14:5\n   |\n9  |         let mut buf = io::Cursor::new(data);\n   |                                       ---- value moved here\n...\n14 |     data.len();\n   |     ^^^^ value used here after move\n   |\n   = note: move occurs because `data` has type `&amp;mut std::vec::Vec&lt;u8&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>The signature of <code>io::Cursor::new</code> is such that it takes ownership of its argument. In this case, the argument is a mutable reference to a <code>Vec</code>.</p>\n\n<pre><code>pub fn new(inner: T) -&gt; Cursor&lt;T&gt;\n</code></pre>\n\n<p>It sort of makes sense to me; because <code>Cursor::new</code> takes ownership of its argument (and not a reference) we can't use that value later on. At the same time it doesn't make sense: we essentially only pass a mutable reference and the cursor goes out of scope afterwards anyway.\nIn the <code>produce_data</code> function we also pass a mutable reference to <code>take_reference</code>, and it doesn't produce a error when trying to use <code>data</code> again, unlike inside <code>take_reference</code>.</p>\n\n<p>I found it possible to 'reclaim' the reference by using <code>Cursor.into_inner()</code>, but it feels a bit weird to do it manually, since in normal use-cases the borrow-checker is perfectly capable of doing it itself.</p>\n\n<p>Is there a nicer solution to this problem than using <code>.into_inner()</code>? Maybe there's something else I don't understand about the borrow-checker?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1515366199, "post_id": 48142322, "comment_id": 83262759, "body": "&quot;burrow&quot; != &quot;borrow&quot;"}, {"owner": {"reputation": 5661, "user_id": 2541276, "user_type": "registered", "accept_rate": 55, "profile_image": "https://graph.facebook.com/100001587714573/picture?type=large", "display_name": "Rajkumar Natarajan", "link": "https://stackoverflow.com/users/2541276/rajkumar-natarajan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515366455, "post_id": 48142322, "comment_id": 83262811, "body": "hey Shepmaster, what you mean by &quot;burrow&quot; != &quot;borrow&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1515366560, "post_id": 48142322, "comment_id": 83262843, "body": "<a href=\"http://www.dictionary.com/browse/burrow\" rel=\"nofollow noreferrer\">burrow</a>: <i>a hole or tunnel in the ground made by a rabbit, fox, or similar animal for habitation and refuge</i>. <a href=\"http://www.dictionary.com/browse/borrow\" rel=\"nofollow noreferrer\">borrow</a>: <i>to take or obtain with the promise to return the same or an equivalent</i>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1515402498, "post_id": 48142322, "comment_id": 83272270, "body": "Note that you can write this <code>let v: Vec&lt;_&gt; = (1..10).collect();</code> instead of the loop."}, {"owner": {"reputation": 5661, "user_id": 2541276, "user_type": "registered", "accept_rate": 55, "profile_image": "https://graph.facebook.com/100001587714573/picture?type=large", "display_name": "Rajkumar Natarajan", "link": "https://stackoverflow.com/users/2541276/rajkumar-natarajan"}, "edited": false, "score": 0, "creation_date": 1515432672, "post_id": 48142322, "comment_id": 83289423, "body": "Boiethios - good to know!!! :)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1515899742, "last_edit_date": 1515899742, "creation_date": 1515367007, "answer_id": 48142454, "question_id": 48142322, "link": "https://stackoverflow.com/questions/48142322/why-does-v1-v2-have-the-same-result-as-v1-v2-in-rust/48142454#48142454", "title": "Why does &amp;v[1] + &amp;v[2] have the same result as v[1] + v[2] in Rust?", "body": "<p>The index operator (<code>[]</code>) for a <code>Vec&lt;T&gt;</code> returns a <code>T</code>. In this case, that's an <code>i32</code>. Thus <code>v[0]</code> returns an <code>i32</code> and <code>&amp;v[0]</code> returns an <code>&amp;i32</code>:</p>\n\n<pre><code>let a: i32 = v[0];\nlet b: &amp;i32 = &amp;v[0];\n</code></pre>\n\n<p><code>v[0]</code> only works because <code>i32</code> implements <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a>.</p>\n\n<p><code>i32</code> has implemented <code>Add</code> for both the (left-hand side, right-hand-side) pairs of <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#impl-Add%3Ci32%3E-1\" rel=\"nofollow noreferrer\">(<code>i32</code>, <code>i32</code>)</a> and <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#impl-Add%3C%26%27a%20i32%3E-1\" rel=\"nofollow noreferrer\">(<code>&amp;i32</code>, <code>&amp;i32</code>)</a>. The two implementations add values in the same way, so you get the same result.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27879161/155423\">What is the return type of the indexing operation on a slice?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43360850/155423\">Understanding (automatic?) Deref/coercion when adding references and values of numbers</a></li>\n</ul>\n"}], "owner": {"reputation": 5661, "user_id": 2541276, "user_type": "registered", "accept_rate": 55, "profile_image": "https://graph.facebook.com/100001587714573/picture?type=large", "display_name": "Rajkumar Natarajan", "link": "https://stackoverflow.com/users/2541276/rajkumar-natarajan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 1, "accepted_answer_id": 48142454, "answer_count": 1, "score": 0, "last_activity_date": 1515899742, "creation_date": 1515365781, "last_edit_date": 1515432631, "question_id": 48142322, "link": "https://stackoverflow.com/questions/48142322/why-does-v1-v2-have-the-same-result-as-v1-v2-in-rust", "title": "Why does &amp;v[1] + &amp;v[2] have the same result as v[1] + v[2] in Rust?", "body": "<p>I'm learning about ownership and borrowing.</p>\n\n<p>The difference between <code>borrow1</code> and <code>borrow2</code> is the usage of <code>&amp;</code> while printing in <code>borrow2</code>:</p>\n\n<pre><code>fn borrow1(v: &amp;Vec&lt;i32&gt;) {\n    println!(\"{}\", &amp;v[10] + &amp;v[12]);\n}\n\nfn borrow2(v: &amp;Vec&lt;i32&gt;) {\n    println!(\"{}\", v[10] + v[12]);\n}\n\nfn main() {\n    let mut v = Vec::new();\n\n    for i in 1..1000 {\n        v.push(i);\n    }\n\n    borrow1(&amp;v);\n    println!(\"still own v {} , {}\", v[0], v[1]);\n\n    borrow2(&amp;v);\n    println!(\"still own v {} , {}\", v[0], v[1]);\n}\n</code></pre>\n\n<p>Why do they give the same output, even though <code>borrow1</code> doesn't have <code>&amp;</code>?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515364883, "post_id": 48142195, "comment_id": 83262470, "body": "Simply <code>iter_mut()</code>"}, {"owner": {"reputation": 5147, "user_id": 334761, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/ZXRM5.jpg?s=128&g=1", "display_name": "Stefan Majewsky", "link": "https://stackoverflow.com/users/334761/stefan-majewsky"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515396043, "post_id": 48142195, "comment_id": 83269647, "body": "@Shepmaster So I spent half an hour looking at the wrong half of the iterator chain. Thanks very much!"}], "owner": {"reputation": 5147, "user_id": 334761, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/ZXRM5.jpg?s=128&g=1", "display_name": "Stefan Majewsky", "link": "https://stackoverflow.com/users/334761/stefan-majewsky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 24, "favorite_count": 0, "closed_date": 1515364922, "answer_count": 0, "score": 0, "last_activity_date": 1515364640, "creation_date": 1515364566, "last_edit_date": 1515364640, "question_id": 48142195, "link": "https://stackoverflow.com/questions/48142195/how-to-mutably-borrow-a-boxed-pointer-when-iterating-over-a-vecboxsometrait", "closed_reason": "Duplicate", "title": "How to mutably borrow a boxed pointer when iterating over a `Vec&lt;Box&lt;SomeTrait&gt;&gt;`?", "body": "<p>I have a custom trait like this:</p>\n\n<pre><code>pub struct SomeObject;\n\npub trait Renderer {\n    fn render(&amp;self) -&gt; Vec&lt;SomeObject&gt;;\n}\n</code></pre>\n\n<p>and a module with multiple structs implementing said trait. The module exposes a single function:</p>\n\n<pre><code>mod renderer {\n    use super::*;\n    pub fn all() -&gt; Vec&lt;Box&lt;Renderer&gt;&gt; {\n        vec![]\n    }\n}\n</code></pre>\n\n<p>which gets used in the main function like so:</p>\n\n<pre><code>fn main() {\n    let renderers = renderer::all();\n\n    loop {\n        // ...\n\n        let objects: Vec&lt;SomeObject&gt; = renderers.iter().flat_map(|r| r.render()).collect();\n\n        // ...\n    }\n}\n</code></pre>\n\n<p>That's working nicely so far. </p>\n\n<p>I now need to change the <code>render()</code> method to take a mutable reference to <code>self</code>. Doing so gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable `Box` content `**r` as mutable\n  --&gt; src/main.rs:20:74\n   |\n20 |             let objects: Vec&lt;SomeObject&gt; = renderers.iter().flat_map(|r| r.render()).collect();\n   |                                                                          ^ cannot borrow as mutable\n</code></pre>\n\n<p>How can I rectify this? The <code>renderers</code> instance is not used passed to any other place, so I should be able to borrow mutably within the scope of this line, at least according to my intuition.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1515361120, "post_id": 48141703, "comment_id": 83261480, "body": "Stuff it in an option?"}, {"owner": {"reputation": 111, "user_id": 6410634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/351cf24529a4a9b6e37275046e0ce010?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/6410634/evan"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1515361790, "post_id": 48141703, "comment_id": 83261660, "body": "@CodesInChaos That would still require runtime overhead. If I were programming in c++, I wouldn&#39;t have to sacrifice performance for flexibility. Rust claims that it never sacrifices performance from c++ and that I can just wrap unsafe code to deal with these scenarios."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 2, "creation_date": 1515362849, "post_id": 48141703, "comment_id": 83261929, "body": "Even in C++ this would be tricky, since you need to ensure that the destructor doesn&#39;t run when the variable goes out of scope."}, {"owner": {"reputation": 111, "user_id": 6410634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/351cf24529a4a9b6e37275046e0ce010?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/6410634/evan"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1515363246, "post_id": 48141703, "comment_id": 83262056, "body": "I now realize that in c++, when a move is done on a vector, it goes through the same nullification that would be setting it equal to an empty vector in rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1515363998, "post_id": 48141703, "comment_id": 83262243, "body": "@Evan That&#39;s one thing that leads to the possibility of Rust being <i>faster</i> than C++. Since Rust doesn&#39;t <i>have</i> to fill in a zero-value, it can conceptually do fewer operations. As @CodesInChaos shows, you can choose that path by replacing the value with an empty <code>Vec</code>."}], "answers": [{"comments": [{"owner": {"reputation": 111, "user_id": 6410634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/351cf24529a4a9b6e37275046e0ce010?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/6410634/evan"}, "edited": false, "score": 0, "creation_date": 1515361418, "post_id": 48141762, "comment_id": 83261555, "body": "But the location where there is only a chance of consumption might not always be as simple as an if (it might be a loop). A better question would be, &quot;can you prove that there will always be some mathematical equivalent of an else statement&quot;."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 111, "user_id": 6410634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/351cf24529a4a9b6e37275046e0ce010?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/6410634/evan"}, "edited": false, "score": 1, "creation_date": 1515591702, "post_id": 48141762, "comment_id": 83357217, "body": "@Evan Moving a value out of a variable in a loop won&#39;t compile, since the variable will be invalid starting from the second iteration."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1515363308, "last_edit_date": 1515363308, "creation_date": 1515360968, "answer_id": 48141762, "question_id": 48141703, "link": "https://stackoverflow.com/questions/48141703/is-there-a-way-to-force-rust-to-let-me-use-a-possibly-moved-value/48141762#48141762", "title": "Is there a way to force Rust to let me use a possibly moved value?", "body": "<p>No.</p>\n\n<blockquote>\n  <p>I know for sure that I didn't consume it</p>\n</blockquote>\n\n<p>Just because you didn't write any code that didn't consume it doesn't mean that it wasn't consumed. <a href=\"https://stackoverflow.com/q/28948716/155423\">Ownership and conditionally executed code</a> discusses the mechanics of type- and stack-based <em>drop flags</em> further, but conceptually your code is:</p>\n\n<pre><code>let v = vec![1, 2, 3];\n\nif false {\n    let _t = v;\n    drop(_t);\n} else {\n    drop(v);\n}\n\nprintln!(\"{:?}\", v);\n</code></pre>\n\n<p>Once the conditional is over, your value is as good as gone. (implementation-wise, the <a href=\"https://play.rust-lang.org/?gist=4d65daafe4dc9e71ee98f2b1c48e015a&amp;version=stable\" rel=\"nofollow noreferrer\">drops <em>do</em> happen at the end of the function</a>, but the semantics don't express that).</p>\n\n<blockquote>\n  <p>in some condition</p>\n</blockquote>\n\n<p>That condition would be the <code>else</code> block of your <code>if</code> statement:</p>\n\n<pre><code>if false {\n    let _t = v;\n} else {\n    println!(\"{:?}\", v);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "is_accepted": true, "score": 11, "last_activity_date": 1515407952, "last_edit_date": 1515407952, "creation_date": 1515362367, "answer_id": 48141939, "question_id": 48141703, "link": "https://stackoverflow.com/questions/48141703/is-there-a-way-to-force-rust-to-let-me-use-a-possibly-moved-value/48141939#48141939", "title": "Is there a way to force Rust to let me use a possibly moved value?", "body": "<p>The compiler won't let you access a variable you may have moved the value out of, even in unsafe code.</p>\n\n<p>Some workarounds:</p>\n\n<ul>\n<li><p>Wrap it in an <code>Option</code>. You can then move the data out using the <code>take</code> method, leaving a <code>None</code> value behind.</p>\n\n<p>This is the approach I recommend for local variables.</p></li>\n<li><p>Replace the original vector by an empty vector. This is cheap, since empty vectors don't allocate.</p>\n\n<pre><code>let t = std::mem::replace(&amp;mut v, Vec::new());\n</code></pre>\n\n<p>This is the closest equivalent to C++ moving, which is described as:</p>\n\n<blockquote>\n  <p>Unless otherwise specified, such moved-from objects shall be\n  placed in a valid but unspecified state.</p>\n</blockquote></li>\n<li><p>Wrap it in <code>ManuallyDrop</code> (this is safer than <code>mem::forget</code> because it doesn't drop the value when a panic happens). Drop it manually at the end on the path where it's still initialized. Use deref to access it while it is still valid. <code>ptr::read</code> to copy the value out, treating the original location as invalid/uninitialized.</p>\n\n<p>This shouldn't have any runtime overhead, but I <em>strongly</em> recommend not using this on local variables. It's just not worth the complexity and risks.</p>\n\n<pre><code>use std::mem::ManuallyDrop;\nuse std::ptr;\n\nfn main() {\n    let flag = //...;\n    unsafe {\n        let mut v = ManuallyDrop::new(vec![1, 2, 3]); // I have some uncopyable value\n\n        if flag {\n            let t = ptr::read(&amp;*v); // I might do something that consumes it\n            // don't touch *v from now on\n            println!(\"{:?}\", t);\n        }\n\n        if !flag {\n            println!(\"{:?}\", *v); // in some condition, I know for sure that I didn't consume it\n            ManuallyDrop::drop(&amp;mut v);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4775bf415675617158813bc26d54abcd&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515429045, "post_id": 48146394, "comment_id": 83287524, "body": "&quot;no runtime overhead&quot; is overstating it a bit. <a href=\"https://godbolt.org/g/JU23TD\" rel=\"nofollow noreferrer\"><code>mem::replace</code> does more work than <code>ManuallyDrop</code> and less than <code>Option</code>, by instruction count</a>, although <code>Option</code> would likely be further optimized in real-life code."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515431918, "post_id": 48146394, "comment_id": 83289056, "body": "@trentcl, no runtime overhead as compared to C++ implementation."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515440729, "post_id": 48146394, "comment_id": 83293293, "body": "I&#39;d expect C++ to do something similar to <code>ManuallyDrop</code>, but I admit I don&#39;t understand how move semantics work in that language."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 2, "last_activity_date": 1515407187, "last_edit_date": 1515407187, "creation_date": 1515399130, "answer_id": 48146394, "question_id": 48141703, "link": "https://stackoverflow.com/questions/48141703/is-there-a-way-to-force-rust-to-let-me-use-a-possibly-moved-value/48146394#48146394", "title": "Is there a way to force Rust to let me use a possibly moved value?", "body": "<p>Just use <code>mem::replace</code>, if you want to imitate C++ move semantics.</p>\n\n<pre><code>use std::mem;\n\nlet mut v = vec![1, 2, 3]; // I have some uncopyable value\n\nif false {\n    let t = mem::replace(&amp;mut v, vec![]); // I might do something that consumes it\n}\n\nprintln!(\"{:?}\", v);\n</code></pre>\n\n<p><code>vec![]</code> is guarantied to not allocate memory, so there's no runtime overhead. In the general case you will need some \"zero\" value for your uncopiable type just like in C++. If you can't come up with \"zero\" value, you can always use <code>Option</code> as CodesInChaos answer suggests.</p>\n"}], "owner": {"reputation": 111, "user_id": 6410634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/351cf24529a4a9b6e37275046e0ce010?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/6410634/evan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 348, "favorite_count": 0, "accepted_answer_id": 48141939, "answer_count": 3, "score": 5, "last_activity_date": 1515407952, "creation_date": 1515360392, "last_edit_date": 1515362301, "question_id": 48141703, "link": "https://stackoverflow.com/questions/48141703/is-there-a-way-to-force-rust-to-let-me-use-a-possibly-moved-value", "title": "Is there a way to force Rust to let me use a possibly moved value?", "body": "<p>Have I just forgotten how borrows and moves work?</p>\n\n<pre><code>let mut v = vec![1, 2, 3]; // I have some uncopyable value\n\nif false {\n    let t = v; // I might do something that consumes it\n}\n\nprintln!(\"{:?}\", v); // in some condition, I know for sure that I didn't consume it\n</code></pre>\n\n<p>Can I somehow use an <code>unsafe</code> clause to tell the compiler to trust me?</p>\n\n<p>Any solution must have no runtime overhead.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1515357646, "creation_date": 1515357646, "answer_id": 48141317, "question_id": 48141196, "link": "https://stackoverflow.com/questions/48141196/differences-in-syntax-for-invoking-trait-method-on-generic-type/48141317#48141317", "title": "Differences in syntax for invoking trait method on generic type", "body": "<p>I agree with your rewrites \u2014 they are more clear and are what I would recommend for that function.</p>\n\n<blockquote>\n  <p>am I missing a good reason for the linked answer to have written it more verbosely? </p>\n</blockquote>\n\n<p>My guess is that the author simply was tired of writing that function and stopped. If they took a look at it again, they might refine it to be shorter.</p>\n\n<blockquote>\n  <p>Is it considered good style? </p>\n</blockquote>\n\n<p>I don't think there's a general community stylistic preference around this yet, other than the general \"shorter is better until it isn't\". </p>\n\n<blockquote>\n  <p>Are the two semantically different under certain conditions?</p>\n</blockquote>\n\n<p>They shouldn't be.</p>\n\n<hr>\n\n<p>There are times where the <code>&lt;&gt;::</code> syntax <em>is</em> needed because otherwise it would be ambiguous. One example <a href=\"https://stackoverflow.com/a/48129778/155423\">from a recent question</a>:</p>\n\n<pre><code>let array = &lt;&amp;mut [u8; 3]&gt;::try_from(slice);\n</code></pre>\n\n<p>Another time is when you don't have a nicely-named intermediate type or the intermediate type is ambiguous across multiple traits. One <a href=\"https://stackoverflow.com/a/47880065/155423\">gross example</a> is from a <code>where</code> clause but shows the same issue as an expression would:</p>\n\n<pre><code>&lt;&lt;Tbl as OrderDsl&lt;Desc&lt;Expr&gt;&gt;&gt;::Output as LimitDsl&gt;::Output: QueryId,\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44445730/155423\">How to call a method when a trait and struct use the same name?</a></li>\n</ul>\n"}], "owner": {"reputation": 2028, "user_id": 394331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/30FMc.jpg?s=128&g=1", "display_name": "peterdn", "link": "https://stackoverflow.com/users/394331/peterdn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 42, "favorite_count": 0, "accepted_answer_id": 48141317, "answer_count": 1, "score": 0, "last_activity_date": 1515357646, "creation_date": 1515356535, "last_edit_date": 1515356808, "question_id": 48141196, "link": "https://stackoverflow.com/questions/48141196/differences-in-syntax-for-invoking-trait-method-on-generic-type", "title": "Differences in syntax for invoking trait method on generic type", "body": "<p>I'm trying to understand the need for the <code>Trait::</code> and <code>&lt;T as Trait&gt;::</code> method invocation syntax. In particular, I'm looking at the following function from <a href=\"https://stackoverflow.com/a/38169182/394331\">this answer</a>:</p>\n\n<pre><code>fn clone_into_array&lt;A, T&gt;(slice: &amp;[T]) -&gt; A\nwhere\n    A: Default + AsMut&lt;[T]&gt;,\n    T: Clone,\n{\n    assert_eq!(\n        slice.len(),\n        std::mem::size_of::&lt;A&gt;() / std::mem::size_of::&lt;T&gt;()\n    );\n\n    let mut a = Default::default();\n    &lt;A as AsMut&lt;[T]&gt;&gt;::as_mut(&amp;mut a).clone_from_slice(slice);\n    a\n}\n</code></pre>\n\n<p>It seems that the middle two method invocation lines can be rewritten as:</p>\n\n<pre><code>let mut a = A::default();\na.as_mut().clone_from_slice(slice);\n</code></pre>\n\n<p>I believe this is more readable, as we already know that <code>A</code> implements <code>Default</code> and <code>AsMut&lt;[T]&gt;</code> and we can invoke <code>as_mut</code> directly as a method instead of having to pass <code>a</code> to it explicitly.</p>\n\n<p>However, am I missing a good reason for the linked answer to have written it more verbosely? Is it considered good style? Are the two semantically different under certain conditions?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 6, "creation_date": 1515350560, "post_id": 48140355, "comment_id": 83258504, "body": "Either use the <a href=\"https://doc.rust-lang.org/std/num/struct.Wrapping.html\" rel=\"nofollow noreferrer\"><code>Wrapping</code></a> wrapper, or use appropriate functions, like <code>wrapping_sub</code> or <code>wrapping_add</code>."}, {"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1515357976, "post_id": 48140355, "comment_id": 83260607, "body": "@CodesInChaos Thanks, <code>wrapping_sub</code> worked for my case. If you can write it as an answer, I can accept."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1515373357, "last_edit_date": 1515373357, "creation_date": 1515361243, "answer_id": 48141786, "question_id": 48140355, "link": "https://stackoverflow.com/questions/48140355/wrapping-around-negative-numbers-in-rust/48141786#48141786", "title": "Wrapping around negative numbers in Rust", "body": "<p>As <a href=\"https://stackoverflow.com/questions/48140355/wrapping-around-negative-numbers-in-rust#comment83258504_48140355\">mentioned in the comments</a>, the literal answer to your question is to use <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_sub\" rel=\"nofollow noreferrer\"><code>u32::wrapping_sub</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_add\" rel=\"nofollow noreferrer\"><code>u32::wrapping_add</code></a>:</p>\n\n<pre><code>const NWORDS: u32 = 24;\nconst ZERO_WORDS: u32 = 11;\n\nfn main() {\n    for i in 0..NWORDS {\n        for j in 0..i {\n            if j &lt; i.wrapping_sub(ZERO_WORDS).wrapping_add(1) {}\n        }\n    }\n}\n</code></pre>\n\n<p>However, I'd advocate avoiding relying on wrapping operations unless you are performing hashing / cryptography / compression / something similar. Wrapping operations are non-intuitive. For example, <code>j &lt; i-ZERO_WORDS+1</code> doesn't have the same results as <code>j+ZERO_WORDS &lt; i+1</code>.</p>\n\n<p>Even better would be to rewrite the logic. I <em>can't even tell</em> in which circumstances that <code>if</code> expression will be true without spending a lot of time thinking about it!</p>\n\n<p>It turns out that the condition <em>will</em> be evaluated for <code>i=9, j=8</code>, but not for <code>i=10, j=0</code>. Perhaps all of this is clearer in the real code, but devoid of context it's very confusing.</p>\n\n<p>This appears to have the same logic, but seems much more understandable to me:</p>\n\n<pre><code>i &lt; ZERO_WORDS - 1 || i - j &gt; ZERO_WORDS - 1;\n</code></pre>\n\n<p>Compare:</p>\n\n<pre><code>j &lt; i.wrapping_sub(ZERO_WORDS).wrapping_add(1);\n</code></pre>\n"}], "owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 663, "favorite_count": 0, "accepted_answer_id": 48141786, "answer_count": 1, "score": 0, "last_activity_date": 1515373357, "creation_date": 1515350374, "last_edit_date": 1515358485, "question_id": 48140355, "link": "https://stackoverflow.com/questions/48140355/wrapping-around-negative-numbers-in-rust", "title": "Wrapping around negative numbers in Rust", "body": "<p>I'm rewriting C code in Rust which heavily relies on <code>u32</code> variables and wrapping them around. For example, I have a loop defined like this:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#define NWORDS 24\n#define ZERO_WORDS 11\n\nint main()\n{\n    unsigned int i, j;\n\n    for (i = 0; i &lt; NWORDS; i++) {\n        for (j = 0; j &lt; i; j++) {\n            if (j &lt; (i-ZERO_WORDS+1)) {\n            }\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>Now, the <code>if</code> statement will need to wrap around <code>u32</code> for a few values as initially <code>i = 0</code>. I came across the <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_neg\" rel=\"nofollow noreferrer\"><code>wrapping_neg</code> method</a> but it seems to just compute <code>-self</code>. Is there any more flexible way to work with <code>u32</code> in Rust by also allowing wrapping?</p>\n"}, {"tags": ["rust", "reqwest"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1515346038, "post_id": 48139634, "comment_id": 83257054, "body": "You probably meant <code>Body::from(v)</code>, since <code>Body</code> implements <code>From&lt;Vec&lt;u8&gt;&gt;</code>. The brief answer to the question is &quot;you can&#39;t, <code>Body</code> needs to own the content`&quot;."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1515348324, "post_id": 48139634, "comment_id": 83257816, "body": "It may still be worth mentioning how you obtained the <code>&amp;[u8]</code> in the first place. Can&#39;t the original source be moved to the request body?"}, {"owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1515401710, "post_id": 48139634, "comment_id": 83271927, "body": "@E_net4 This is actually an <code>impl Write</code> that writes the buffer to an external web service"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 63, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1515347998, "creation_date": 1515345428, "last_edit_date": 1515347998, "question_id": 48139634, "link": "https://stackoverflow.com/questions/48139634/can-i-create-a-body-object-without-copying-memory", "title": "Can I create a Body object without copying memory?", "body": "<p>I'm trying to implement a <code>PUT</code> request that transmits some bits to a web service:</p>\n\n<pre><code>extern crate reqwest;\n\nfn put(buf: &amp;[u8]) {\n    let v = Vec::from(buf);\n    let body = ::reqwest::Body::from(v);\n    // execute the request\n}\n</code></pre>\n\n<p>Is there a way to avoid the memory copy (which, if I understand correctly, occurs when constructing the vector) when constructing the <code>Body</code>? </p>\n\n<p>I'm potentially sending large buffers and I'd prefer to avoid unnecessary copies (even if they're negligible compared to the network IO)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515343968, "post_id": 48139243, "comment_id": 83256332, "body": "Idiomatic Rust does not use redundant type annotations. All of the <code>: u32</code> inside the body of your function should be removed."}], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1515347702, "post_id": 48139414, "comment_id": 83257636, "body": "&quot;Evaluation occurs at run-time, and this code cannot even be compiled.&quot; - Well, if the decision to put <code>false</code> or <code>true</code> under <code>cfg!(feature = &quot;complex&quot;)</code> is done at compile time, so what prevents the compiler/optimizer to delete these branches at all (<code>if false</code> because it is unreachable and <code>if true</code> because it is meaningless). So, there will be no evaluation at runtime at all."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1515348444, "post_id": 48139414, "comment_id": 83257852, "body": "@VictorPolevoy you are mostly right \u2014 <code>if false</code> and <code>if true</code> <i>should</i> be removed at compile time, at least when optimizing. The body of <code>if false</code> should be removed, but the body if <code>if true</code> should be kept. Then whichever blocks are <code>true</code> will be evaluated at run time. This is another reason to use <code>else</code> \u2014 to prevent <i>both</i> feature&#39;s code blocks from being evaluated! Note also that this type of optimization should not change the behavior of the program."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1515349421, "post_id": 48139414, "comment_id": 83258185, "body": "@Shepmaster that was what I meant :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1578067564, "last_edit_date": 1578067564, "creation_date": 1515343845, "answer_id": 48139414, "question_id": 48139243, "link": "https://stackoverflow.com/questions/48139243/what-is-the-proper-way-to-use-the-cfg-macro-to-choose-between-multiple-implem/48139414#48139414", "title": "What is the proper way to use the `cfg!` macro to choose between multiple implementations?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/macro.cfg.html\" rel=\"nofollow noreferrer\">documentation for <code>cfg!</code></a> states:</p>\n\n<blockquote>\n  <p>Boolean evaluation of configuration flags.</p>\n</blockquote>\n\n<p>That means that <code>cfg!(...)</code> is replaced with a Boolean (<code>true</code> / <code>false</code>). Your code would look something like this, after it's expanded:</p>\n\n<pre><code>fn test() -&gt; u32 {\n    let x = 3;\n    if true {\n        let y = 2;\n        x + y\n    }\n    if true {\n        let y = 1;\n        x + y\n    }\n}\n</code></pre>\n\n<p>The easiest solution is to add an <code>else</code>:</p>\n\n<pre><code>fn test() -&gt; u32 {\n    let x = 3;\n    if cfg!(feature = \"complex\") {\n        let y = 2;\n        x + y\n    } else {\n        let y = 1;\n        x + y\n    }\n}\n</code></pre>\n\n<p>You can also use the attribute form of <code>cfg</code>. In this case, the attribute can prevent the entire next expression from being compiled:</p>\n\n<pre><code>fn test() -&gt; u32 {\n    let x: u32 = 3;\n\n    #[cfg(feature = \"complex\")]\n    {\n        let y: u32 = 2;\n        x + y\n    }\n\n    #[cfg(feature = \"simple\")]\n    {\n        let y: u32 = 1;\n        x + y\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>as it tries to evaluate both expressions.</p>\n</blockquote>\n\n<p>No, it doesn't. Evaluation occurs at run-time, and this code cannot even be compiled.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/24396293/155423\">Is it possible to conditionally compile a code block inside a function?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34777302/155423\">Example of how to use Conditional Compilation Macros in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/39291850/155423\">How many lines are covered by the Rust conditional compilation attribute?</a></li>\n</ul>\n"}], "owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1676, "favorite_count": 0, "accepted_answer_id": 48139414, "answer_count": 1, "score": 0, "last_activity_date": 1578067564, "creation_date": 1515342790, "last_edit_date": 1515343869, "question_id": 48139243, "link": "https://stackoverflow.com/questions/48139243/what-is-the-proper-way-to-use-the-cfg-macro-to-choose-between-multiple-implem", "title": "What is the proper way to use the `cfg!` macro to choose between multiple implementations?", "body": "<p>I have specified a few features inside <code>Cargo.toml</code>:</p>\n\n<pre><code>[features]\ncomplex = []\nsimple = []\n</code></pre>\n\n<p>When I build my project I use <code>cargo build --features=\"complex\"</code> or <code>simple</code>.</p>\n\n<p>In some functions, I want to return a value based on which feature is used:</p>\n\n<pre><code>fn test() -&gt; u32 {\n    let x: u32 = 3;\n    if cfg!(feature = \"complex\") {\n        let y: u32 = 2;\n        x + y\n    }\n    if cfg!(feature = \"simple\") {\n        let y: u32 = 1;\n        x + y\n    }\n}\n</code></pre>\n\n<p>But this doesn't work as it tries to evaluate both expressions. What is the proper way to use the <code>cfg!</code> macro in my case?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1515341097, "post_id": 48138841, "comment_id": 83255393, "body": "Your example tries to compare a single string to an array of strings. The problem has nothing to do with <code>str</code> vs. <code>String</code>."}], "answers": [{"comments": [{"owner": {"reputation": 88, "user_id": 8430827, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/73KMW.jpg?s=128&g=1", "display_name": "Cassandra O&#39;Connell", "link": "https://stackoverflow.com/users/8430827/cassandra-oconnell"}, "edited": false, "score": 1, "creation_date": 1515341556, "post_id": 48138977, "comment_id": 83255534, "body": "super helpful, makes total sense, and compiled perfectly. thanks a ton my dude"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 88, "user_id": 8430827, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/73KMW.jpg?s=128&g=1", "display_name": "Cassandra O&#39;Connell", "link": "https://stackoverflow.com/users/8430827/cassandra-oconnell"}, "edited": false, "score": 1, "creation_date": 1515342087, "post_id": 48138977, "comment_id": 83255700, "body": "@CassandraO&#39;Connell Since you probably want to dispatch based on the command, it will likely be more useful to have a hash map mapping the command name to a function pointer or an integer id.  Otherwise you will still need to compare <code>command</code> to each possible value, making the array of commands somewhat useless."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1515342587, "post_id": 48138977, "comment_id": 83255878, "body": "@SvenMarnach for a smaller, static set of items, I&#39;d probably <a href=\"https://play.rust-lang.org/?gist=c91e74868f1e1622087841c0a2a29db7&amp;version=stable\" rel=\"nofollow noreferrer\">just use a <code>match</code></a>. Creating a <code>HashMap</code> has that allocation overhead which we can avoid for a little while longer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1515341179, "creation_date": 1515341179, "answer_id": 48138977, "question_id": 48138841, "link": "https://stackoverflow.com/questions/48138841/how-do-i-initialize-an-array-so-that-rust-knows-its-an-array-of-strings-and-n/48138977#48138977", "title": "How do I initialize an array so that Rust knows it&#39;s an array of `String`s and not `str`?", "body": "<p>You should go back and re-read <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, specifically the <a href=\"https://doc.rust-lang.org/book/second-edition/ch08-02-strings.html\" rel=\"nofollow noreferrer\">chapter on strings</a>. <code>String</code> and <code>&amp;str</code> are <em>two different types</em>.</p>\n\n<p>You can create <code>String</code>s in a <a href=\"https://stackoverflow.com/q/31331356/155423\">number of ways</a>, but I commonly use <code>String::from</code>:</p>\n\n<pre><code>let commands = [\n    String::from(\"one thing\"),\n    String::from(\"another thing\"),\n    String::from(\"something else\"),\n];\n</code></pre>\n\n<p>However, this is inefficient as you are allocating memory each time. It's better to instead go the other way, from <code>&amp;String</code> to <code>&amp;str</code>. Additionally, this doesn't solve your problem because you are attempting to compare a single value to a collection. We can solve both at once:</p>\n\n<pre><code>let commands = [\"one thing\", \"another thing\", \"something else\"];\n\nfor command in commands.iter() {\n    if request.iter().any(|r| r == command) {\n        // do something\n    } else {\n        // throw error\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/24158114/155423\">What are the differences between Rust&#39;s `String` and `str`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31331356/155423\">How to create a String directly?</a></li>\n</ul>\n"}], "owner": {"reputation": 88, "user_id": 8430827, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/73KMW.jpg?s=128&g=1", "display_name": "Cassandra O&#39;Connell", "link": "https://stackoverflow.com/users/8430827/cassandra-oconnell"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 907, "favorite_count": 1, "accepted_answer_id": 48138977, "answer_count": 1, "score": 2, "last_activity_date": 1515341179, "creation_date": 1515340262, "last_edit_date": 1515340563, "question_id": 48138841, "link": "https://stackoverflow.com/questions/48138841/how-do-i-initialize-an-array-so-that-rust-knows-its-an-array-of-strings-and-n", "title": "How do I initialize an array so that Rust knows it&#39;s an array of `String`s and not `str`?", "body": "<p>I'm relatively new to Rust and am trying to do the following:</p>\n\n<pre><code>pub fn route(request: &amp;[String]) {\n    let commands = [\"one thing\", \"another thing\", \"something else\"];\n\n    for command in commands.iter() {\n        if command == request {\n            // do something\n        } else {\n            // throw error\n        }\n    }\n}\n</code></pre>\n\n<p>When I try to build this, I get a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;str: std::cmp::PartialEq&lt;[std::string::String]&gt;` is not satisfied\n --&gt; src/main.rs:5:20\n  |\n5 |         if command == request {\n  |                    ^^ can't compare `&amp;str` with `[std::string::String]`\n  |\n  = help: the trait `std::cmp::PartialEq&lt;[std::string::String]&gt;` is not implemented for `&amp;str`\n  = note: required because of the requirements on the impl of `std::cmp::PartialEq&lt;&amp;[std::string::String]&gt;` for `&amp;&amp;str`\n</code></pre>\n"}, {"tags": ["rust", "immutability", "mutability"], "comments": [{"owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1515336976, "post_id": 48137307, "comment_id": 83254056, "body": "Maybe not exactly the same. In my case, I want the update logic to alter the original map, not a specific value inside the map. Moreover, the problem I am facing can happen with any mutable object, not only with a HashMap. I just took a HashMap as a simple example."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1515338594, "post_id": 48137307, "comment_id": 83254551, "body": "Your problem isn&#39;t really just checking, then modifying based on the result.  The function <code>do_someth()</code> you defined is fundamentally impossible to call in the way you intend to, since it expects both a mutable reference to the hash map and an immutable reference to one of the strings owned by the hash map.  In Rust you can&#39;t have both at the same time.  That said, you may want to take a look at <a href=\"https://github.com/nikomatsakis/nll-rfc/blob/master/0000-nonlexical-lifetimes.md#problem-case-2-conditional-control-flow\" rel=\"nofollow noreferrer\">this example</a> and the following one in the NLL RFC."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1515341402, "post_id": 48137307, "comment_id": 83255482, "body": "Building on what @SvenMarnach said, if you modify the <code>HashMap</code> while you have a reference into the <code>HashMap</code>, the reference might be invalidated. Accessing the string would then lead to memory unsafety (crashes, code execution, etc.) You have to clone the value to disassociate it from the <code>HashMap</code> before modifying it. <a href=\"https://play.rust-lang.org/?gist=42ba09656e7db6387ae4b9124bd37ed5&amp;version=stable\" rel=\"nofollow noreferrer\">The duplicate applied to your situtation</a>."}, {"owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "edited": false, "score": 0, "creation_date": 1516084679, "post_id": 48137307, "comment_id": 83534103, "body": "Thank you all.  The article that Sven shared was extremely helpful."}], "owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 69, "favorite_count": 0, "closed_date": 1515341312, "answer_count": 0, "score": 1, "last_activity_date": 1515341429, "creation_date": 1515329781, "last_edit_date": 1515340164, "question_id": 48137307, "link": "https://stackoverflow.com/questions/48137307/check-a-mutable-object-and-then-alter-it-using-a-member-of-the-object", "closed_reason": "Duplicate", "title": "Check a mutable object and then alter it using a member of the object", "body": "<p>I want to do something similar to this code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut vars = HashMap::&lt;String, String&gt;::new();\n    find_and_do_someth(&amp;mut vars);\n}\n\nfn find_and_do_someth(map: &amp;mut HashMap&lt;String, String&gt;) {\n    match map.get(\"test\") {\n        None =&gt; { /* Do nothing */ }\n        Some(string) =&gt; do_someth(map, string),\n    }\n}\n\nfn do_someth(map: &amp;mut HashMap&lt;String, String&gt;, val: &amp;str) {\n    // Do something that alters map\n}\n</code></pre>\n\n<p>I get the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:11:35\n   |\n9  |     match map.get(\"test\") {\n   |           --- immutable borrow occurs here\n10 |         None =&gt; { /* Do nothing */ }\n11 |         Some(string) =&gt; do_someth(map, string),\n   |                                   ^^^ mutable borrow occurs here\n12 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>Is there a general Rust-friendly work-around for this use case?</p>\n\n<ul>\n<li>Check something on an object</li>\n<li>If condition is verified, alter the object</li>\n</ul>\n\n<p>The above is just a simple example using a <code>HashMap</code>.</p>\n\n<p>Case by case, I seem to always find a convoluted solution, however I am not used yet to the way of thinking necessary to master Rust.</p>\n"}, {"tags": ["character-encoding", "rust", "shift-jis"], "answers": [{"tags": [], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "is_accepted": false, "score": 3, "last_activity_date": 1515328933, "last_edit_date": 1515328933, "creation_date": 1515328191, "answer_id": 48137110, "question_id": 48136939, "link": "https://stackoverflow.com/questions/48136939/how-do-i-use-the-shift-jis-encoding-in-rust/48137110#48137110", "title": "How do I use the SHIFT-JIS encoding in Rust?", "body": "<p><a href=\"https://docs.rs/encoding_rs/0.2.4/encoding_rs/constant.SHIFT_JIS.html\" rel=\"nofollow noreferrer\"><code>encoding_rs::SHIFT_JIS</code></a>, a crate made for Firefox, can be used instead! :)</p>\n\n<pre><code>extern crate encoding_rs;\nuse encoding_rs::SHIFT_JIS;\n\nfn main() {\n    let data = vec![142,75,130,209,130,189,142,169,147,93,142,212,130,198,141,98,138,107,151,222];\n    let (res, _enc, errors) = SHIFT_JIS.decode(&amp;data);\n    if errors {\n        eprintln!(\"Failed\");\n    } else {\n        println!(\"{}\", res);\n    }   \n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>\u9306\u3073\u305f\u81ea\u8ee2\u8eca\u3068\u7532\u6bbb\u985e\n</code></pre>\n\n<p>Note that <code>res</code> is a <code>Cow&lt;'_, str&gt;</code> - you may need to use <code>into_owned()</code> depending on your use case.</p>\n"}], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 792, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1515338910, "creation_date": 1515327000, "last_edit_date": 1515338910, "question_id": 48136939, "link": "https://stackoverflow.com/questions/48136939/how-do-i-use-the-shift-jis-encoding-in-rust", "title": "How do I use the SHIFT-JIS encoding in Rust?", "body": "<p>According to <a href=\"https://github.com/lifthrasiir/rust-encoding/issues/18\" rel=\"nofollow noreferrer\">this Github issue</a>, the rust-encoding crate is missing SHIFT-JIS support. What's the best way to decode SHIFT-JIS in Rust in light of this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1515326575, "post_id": 48136879, "comment_id": 83251063, "body": "Try <code>use amd64::fp64::*;</code> (drop <code>pub</code>)."}, {"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1515327009, "post_id": 48136879, "comment_id": 83251151, "body": "@ljedrz Thanks, but see my modified question. If I drop <code>pub</code> the complains about <code>amd64</code> not being present are gone, but other files complain that they cannot find <code>Element</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1515327219, "post_id": 48136879, "comment_id": 83251207, "body": "Showing the <code>Element</code>-revelant code might help here. In addition, why the type alias <code>pub type Element = amd64::fp64::Element;</code>? <code>Element</code> should already work as as shorthand for <code>amd64::fp64::Element</code> after the import."}, {"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1515327312, "post_id": 48136879, "comment_id": 83251230, "body": "@ljedrz Because, I use conditional compilation, depending on the architecture I assign different definition of <code>Element</code>. The above is just a small snippet. In any case, <code>Element</code> is defined such as this <code>pub struct Element(pub (crate) [u64; 12]);</code>"}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "edited": false, "score": 0, "creation_date": 1515332645, "post_id": 48136879, "comment_id": 83252665, "body": "Library or Executable project?"}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1515330143, "creation_date": 1515330143, "answer_id": 48137349, "question_id": 48136879, "link": "https://stackoverflow.com/questions/48136879/module-visibility-in-rust/48137349#48137349", "title": "Module visibility in Rust", "body": "<p>It appears that you need to add a new <code>src/lib.rs</code> file containing the following lines:</p>\n\n<pre><code>pub mod fp;\npub mod amd64;\n</code></pre>\n"}], "owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 48137349, "answer_count": 1, "score": -1, "last_activity_date": 1515339661, "creation_date": 1515326471, "last_edit_date": 1515339661, "question_id": 48136879, "link": "https://stackoverflow.com/questions/48136879/module-visibility-in-rust", "title": "Module visibility in Rust", "body": "<p>I have a Rust project that has the following directory structure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src-\n   |\n   amd64-\n   |    |\n   |    fp64.rs\n   |    mod.rs\n   |\n   fp.rs\n</code></pre>\n\n<p>Inside <code>src/amd64/mod.rs</code> I only have the following line of code <code>pub mod fp64;</code>. Inside <code>src/fp.rs</code>, I tried to do something like this:</p>\n\n<pre><code>pub use amd64::fp64::*;\npub type Element = amd64::fp64::Element;\n</code></pre>\n\n<p>This throws an error because it apparently cannot find <code>amd64</code>. If I switch to using just <code>use amd64::fp64::*</code>, then I get error in multiple files that there is no <code>Element</code>, so it kind of skips the above type assignment. Please note that <code>Element</code> inside <code>amd64/fp64</code> is a struct. <code>Element</code> inside <code>amd64/fp64.rs</code> is defined such as this: <code>pub struct Element(pub (crate) [u64; 12]);</code>.</p>\n"}, {"tags": ["datetime", "rust", "datetime-format", "rust-chrono"], "answers": [{"tags": [], "owner": {"reputation": 3583, "user_id": 1391026, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/af98bdbeea8772f2d90d47d507098256?s=128&d=identicon&r=PG", "display_name": "musicmatze", "link": "https://stackoverflow.com/users/1391026/musicmatze"}, "is_accepted": true, "score": 7, "last_activity_date": 1515325476, "creation_date": 1515325476, "answer_id": 48136784, "question_id": 48136419, "link": "https://stackoverflow.com/questions/48136419/rust-chrono-gives-parseerrornotenough/48136784#48136784", "title": "Rust chrono gives ParseError(NotEnough)", "body": "<p>This:</p>\n\n<pre><code>extern crate chrono;\nuse chrono::DateTime;\nuse std::error::Error;\n\nfn main() {\n    println!(\"{:?}\", DateTime::parse_from_str(\"09-January-2018 12:00:00\", \"%d-%B-%Y %T\").unwrap_err().description());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=9c0231ea189c589009a46308864dd9bc&amp;version=stable\" rel=\"noreferrer\">https://play.rust-lang.org/?gist=9c0231ea189c589009a46308864dd9bc&amp;version=stable</a>)</p>\n\n<p>gives more information:</p>\n\n<pre><code>\"input is not enough for unique date and time\"\n</code></pre>\n\n<p>Apparently, <code>DateTime</code> needs Timezone information, which you don't provide in your input. Using <code>NaiveDateTime</code> should work:</p>\n\n<pre><code>extern crate chrono;\nuse chrono::NaiveDateTime;\n\nfn main() {\n    println!(\"{:?}\", NaiveDateTime::parse_from_str(\"09-January-2018 12:00:00\", \"%d-%B-%Y %T\"));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=1acbae616c7f084a748e4f9cfaf1ef7f&amp;version=stable\" rel=\"noreferrer\">https://play.rust-lang.org/?gist=1acbae616c7f084a748e4f9cfaf1ef7f&amp;version=stable</a>)</p>\n"}], "owner": {"reputation": 155, "user_id": 7440344, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7eeff7a4866114e47bc652c4ef7f1bf0?s=128&d=identicon&r=PG", "display_name": "Catman155", "link": "https://stackoverflow.com/users/7440344/catman155"}, "delete_vote_count": 1, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1475, "favorite_count": 0, "closed_date": 1515338887, "accepted_answer_id": 48136784, "answer_count": 1, "score": 3, "last_activity_date": 1521656523, "creation_date": 1515322440, "last_edit_date": 1521656523, "question_id": 48136419, "link": "https://stackoverflow.com/questions/48136419/rust-chrono-gives-parseerrornotenough", "closed_reason": "Duplicate", "title": "Rust chrono gives ParseError(NotEnough)", "body": "<p>I am trying to parse a datetime string to <code>DateTime</code> object, but when I try this I am getting this ParseError. I don't understand what is going on, can someone help me out?</p>\n\n<p>datetime string: <code>09-January-2018 12:00:00</code></p>\n\n<p>code: <code>let date = DateTime::parse_from_str(date.trim(), \"%d-%B-%Y %T\");</code></p>\n"}, {"tags": ["generics", "rust", "template-specialization"], "comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1515317949, "post_id": 48135833, "comment_id": 83249108, "body": "Do you want a solution for <i>stable</i>?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1515318027, "post_id": 48135833, "comment_id": 83249126, "body": "@VictorPolevoy if possible. However, nighly is better than nothing."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1515345508, "post_id": 48135833, "comment_id": 83256858, "body": "Now we have nightly solution, Still waiting if someone has a solution for stable compiler."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515514337, "post_id": 48135833, "comment_id": 83324116, "body": "You may want to read <a href=\"https://stackoverflow.com/q/31628572/3650362\">How do I decide when to mark a trait as unsafe?</a> Another possibility is that neither <code>trait Unpack</code> nor <code>fn unpack(&amp;self)</code> is unsafe, but in fact <code>CVec</code> exposes a safe interface and <i>creating a <code>CVec</code></i> is the only unsafe part (being analogous to <code>Vec::from_raw_parts</code>). Just a thought"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515515907, "post_id": 48135833, "comment_id": 83325116, "body": "@trentcl thank you for a comment! However, vector is creating via <code>Default</code> trait which basically use <code>::std::ptr::null_mut::&lt;T&gt;()</code> which is safe, and then is populated via FFI call, because for now all usages of these types are of <code>output variable</code> type. But your consideration are really valuable. However, if I had to populate it on Rust side i&#39;d rather create a safe constructor that takes <code>Vec&lt;T&gt;</code>, which is also safe, I guess :)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515517265, "post_id": 48135833, "comment_id": 83325925, "body": "Then <i>populating</i> a <code>CVec</code> is the only unsafe part. My point is, do you want <code>CVec</code> to constitute a guarantee, like &quot;when <code>array</code> is non-null, it always points to an array of <code>size</code> elements&quot;? If not, you can&#39;t safely implement <code>Drop</code>, but if so, <code>unpack</code> doesn&#39;t need to be <code>unsafe</code> (when <code>array</code> is null, <code>unpack</code> could return an empty <code>Vec</code>)."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515517430, "post_id": 48135833, "comment_id": 83326001, "body": "@trentcl let&#39;s move our discussion to the gist. You can then provide your arguments. I&#39;m quite confused what are you talking about: <a href=\"https://gist.github.com/Pzixel/76ab59e545ac3c06fca752322b5aec82\" rel=\"nofollow noreferrer\">gist.github.com/Pzixel/76ab59e545ac3c06fca752322b5aec82</a> . The only unsafe here is <code>unpack</code> func itself, because it&#39;s using <code>transmute</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515517955, "post_id": 48135833, "comment_id": 83326290, "body": "I can&#39;t get involved in a long discussion right now, but I&#39;ll try to respond later today."}], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1515515983, "last_edit_date": 1515515983, "creation_date": 1515405071, "answer_id": 48147759, "question_id": 48135833, "link": "https://stackoverflow.com/questions/48135833/specialize-method-for-one-specific-generic-type/48147759#48147759", "title": "Specialize method for one specific generic type", "body": "<p>In stable Rust implementations of traits cannot intersect and we can't use negative trait bounds. It makes impossible to use straightforward implementation like:</p>\n\n<pre><code>impl&lt;T: Copy&gt; Unpack for CVec&lt;T&gt; { // copies elements  } \nimpl&lt;T: Unpack&gt; Unpack for CVec&lt;T&gt; { // calls `unpack` for elements }\n</code></pre>\n\n<p>but we can modify the trait and use the fact that <code>CVec</code> doesn't implement <code>Copy</code>.</p>\n\n<p>The code below is sufficiently self-explanatory, I think.</p>\n\n<pre><code>#[repr(C)]\n#[derive(Debug, Clone)]\npub struct CVec&lt;T: Sized&gt; {\n    array: *mut T,\n    size: usize,\n}\n\n// Unsafe because CVec is not guaranteed to contain valid pointer and size\nunsafe fn unpack&lt;T, U, F&gt;(v: &amp;CVec&lt;T&gt;, mut f: F) -&gt; Vec&lt;U&gt;\nwhere\n    F: FnMut(&amp;T) -&gt; U,\n{\n    (0..v.size)\n        .map(|i| f(&amp;*v.array.offset(i as isize)))\n        .collect()\n}\n\ntrait Unpack {\n    type Out;\n    unsafe fn unpack(&amp;self) -&gt; Self::Out;\n}\n\nimpl&lt;T: Unpack&gt; Unpack for CVec&lt;T&gt; {\n    type Out = Vec&lt;T::Out&gt;;\n    unsafe fn unpack(&amp;self) -&gt; Self::Out {\n        unpack(self, |e| e.unpack())\n    }\n}\n\nimpl&lt;T: Copy&gt; Unpack for T {\n    type Out = T;\n    unsafe fn unpack(&amp;self) -&gt; Self::Out {\n        *self\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=43243136256a143ffc5d85e7498e23e1&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1420, "favorite_count": 0, "accepted_answer_id": 48147759, "answer_count": 1, "score": 1, "last_activity_date": 1515515983, "creation_date": 1515316708, "last_edit_date": 1515339252, "question_id": 48135833, "link": "https://stackoverflow.com/questions/48135833/specialize-method-for-one-specific-generic-type", "title": "Specialize method for one specific generic type", "body": "<p>I'm writing a wrapper for a C library and I'm stuck writing tons of types like <code>CVecOf&lt;anything&gt;</code>:</p>\n\n<pre><code>#[repr(C)]\npub struct CVecOfPoint {\n    pub array: *mut Point2i,\n    pub size: usize,\n}\n\nimpl CVecOfPoint {\n    pub fn rustify(&amp;self) -&gt; Vec&lt;Point2i&gt; {\n        (0..self.size)\n            .map(|i| unsafe { *(self.array.offset(i as isize)) })\n            .collect::&lt;Vec&lt;_&gt;&gt;()\n    }\n}\n\n#[repr(C)]\npub struct CVecOfPoints {\n    pub array: *mut CVecOfPoint,\n    pub size: usize,\n}\n\nimpl CVecOfPoints {\n    pub fn rustify(&amp;self) -&gt; Vec&lt;Vec&lt;Point2i&gt;&gt; {\n        (0..self.size)\n            .map(|i| unsafe {\n                let vec = &amp;*self.array.offset(i as isize);\n                vec.rustify()\n            })\n            .collect::&lt;Vec&lt;_&gt;&gt;()\n    }\n}\n\npub struct CVecOfPointsOfPoints;\npub struct CVecOfPointsOfPointsOfPoints; \npub struct CVecOfPointsOfPointsOfPointsOfPoints;\n</code></pre>\n\n<p>I'd like to write just <code>CVec&lt;T&gt;</code> with following mapping rules: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustify :=\n   T -&gt; T\n   CVec&lt;T&gt; -&gt; Vec&lt;T&gt;\n</code></pre>\n\n<p>Thus <code>CVecOfPointsOfPointsOfPointsOfPoints</code> is just <code>CVec&lt;CVec&lt;CVec&lt;CVec&lt;Cvec&lt;Point&gt;&gt;&gt;&gt;&gt;</code>. </p>\n\n<p>Thanks to @red75prime, I have written the following, but it requires an unstable feature:</p>\n\n<pre><code>#![feature(specialization)]\n#![deny(trivial_casts)]\n\nuse std::fmt::Debug;\nuse std::mem;\n\n#[repr(C)]\n#[derive(Debug)]\npub struct CVec&lt;T: Sized&gt; {\n    array: *mut T,\n    size: usize,\n}\n\nunsafe fn unpack_unsafe&lt;T, R&gt;(v: &amp;CVec&lt;T&gt;) -&gt; Vec&lt;R&gt; {\n    (0..v.size)\n        .map(|i| mem::transmute_copy(&amp;*v.array.offset(i as isize)))\n        .collect()\n}\n\npub fn unpack&lt;T, U, F&gt;(v: &amp;CVec&lt;T&gt;, mut f: F) -&gt; Vec&lt;U&gt;\nwhere\n    F: FnMut(&amp;T) -&gt; U,\n{\n    (0..v.size)\n        .map(|i| unsafe { f(&amp;*v.array.offset(i as isize)) })\n        .collect()\n}\n\ntrait Unpack {\n    type R: Debug;\n    fn unpack(&amp;self) -&gt; Vec&lt;Self::R&gt;;\n}\n\nimpl&lt;T: Debug&gt; Unpack for CVec&lt;T&gt; {\n    default type R = T;\n    default fn unpack(&amp;self) -&gt; Vec&lt;Self::R&gt; {\n        unsafe { unpack_unsafe(self) }\n    }\n}\n\nimpl&lt;T: Unpack + Debug&gt; Unpack for CVec&lt;T&gt; {\n    type R = Vec&lt;T::R&gt;;\n    fn unpack(&amp;self) -&gt; Vec&lt;Self::R&gt; {\n        unpack(self, |v| v.unpack())\n    }\n}\n\nfn main() {\n    let mut vs = [1, 2, 3];\n    let mut v1 = CVec {\n        array: vs.as_mut_ptr(),\n        size: vs.len(),\n    };\n    let mut v2 = CVec {\n        array: &amp;mut v1 as *mut _,\n        size: 1,\n    };\n    let mut v3 = CVec {\n        array: &amp;mut v2 as *mut _,\n        size: 1,\n    };\n    let v4 = CVec {\n        array: &amp;mut v3 as *mut _,\n        size: 1,\n    };\n    let v = v4.unpack();\n    println!(\"{:?}\", v);\n\n    let ptr: *mut () = &amp;mut v3 as *mut _ as *mut _;\n}\n</code></pre>\n\n<p>Is it possible to rewrite it with the stable compiler?</p>\n\n<p>Important note: <code>CVec&lt;T&gt;</code> implements <code>Drop</code> because it must free allocated <code>array</code> memory so it cannot be <code>Copy</code>.</p>\n"}, {"tags": ["rust", "rustup"], "owner": {"reputation": 33, "user_id": 5408485, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/74cfa147fe8c4b1b349990a7d80bc148?s=128&d=identicon&r=PG", "display_name": "Stephen S.", "link": "https://stackoverflow.com/users/5408485/stephen-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 58, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1515338859, "creation_date": 1515313652, "last_edit_date": 1515338859, "question_id": 48135539, "link": "https://stackoverflow.com/questions/48135539/is-it-possible-to-update-rustup-once-and-share-the-downloads-with-other-systems", "title": "Is it possible to update rustup once and share the downloads with other systems?", "body": "<p>I'd like to save bandwidth by invoking <code>rustup update</code> and updating the installed toolchains, then sharing the updated toolchains to another system without having to download the toolchains again. Is this possible?</p>\n\n<p>Looking at the .rustup directory, it seems copying the toolchains directory might work but I'm afraid of causing a mismatch between rustup's metadata on what it has installed and what's actually installed, or other such problems. Unless someone says it's OK to do this, I don't think this is an option.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1515274554, "post_id": 48132095, "comment_id": 83241385, "body": "A macro gets expanded in the place where it is used. So anything it uses must be available at the expansion site."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 2, "creation_date": 1515274643, "post_id": 48132095, "comment_id": 83241403, "body": "Though normally you shouldn&#39;t need to bring functions used by the macro into scope, since a well written macro uses an absolute name when using a function."}], "answers": [{"comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1515312447, "post_id": 48132795, "comment_id": 83247978, "body": "You need to use <code>$crate</code> at the start of absolute paths in macros when referring to functions from the macro defining crate."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1515334500, "post_id": 48132795, "comment_id": 83253253, "body": "True! I&#39;ll try to find a way to work that into the answer."}], "tags": [], "owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "is_accepted": true, "score": 4, "last_activity_date": 1515283414, "last_edit_date": 1515283414, "creation_date": 1515280172, "answer_id": 48132795, "question_id": 48132095, "link": "https://stackoverflow.com/questions/48132095/why-must-i-use-macros-only-used-by-my-dependencies/48132795#48132795", "title": "Why must I use macros only used by my dependencies", "body": "<p>Macros are hygenic, but they don't \"bring in\" things from the scope they are defined in.</p>\n\n<p>If you define a macro in one crate, and use relative names rather than absolute ones (if the macro produces code using <code>der_read_element_name</code> rather than <code>::der_parser::der_read_element_name</code>), then you are required to use <code>use</code> to bring those methods into scope.</p>\n\n<p>The solution to this is to always use absolute names when defining macros, or to 'use' them inside the macro scope. For instance, if you have a macro which opened a file, you do one of two things. Either import:</p>\n\n<pre><code>macro_rules! open {\n    ($file:expr) =&gt; ({\n        // note: this has to be inside the macro expansion\n        // `::std` means this works anywhere, not just in\n        // the crate root where `std` is in scope.\n        use ::std::fs::File;\n\n        File::open($file)\n    })\n}\n</code></pre>\n\n<p>or use absolute paths directly:</p>\n\n<pre><code>macro_rules! open {\n    ($file:expr) =&gt; ({\n        ::std:fs::File::open($file)\n    })\n}\n</code></pre>\n\n<hr>\n\n<p>A similar thing happens with macros using other macros! If you have two crates, say, <code>cratea</code> with:</p>\n\n<pre><code>macro_rules! say_hello {\n    () =&gt; (println!(\"hi\"))\n}\n</code></pre>\n\n<p>and <code>crateb</code> with:</p>\n\n<pre><code>#[macro_use]\nextern crate cratea;\n\nmacro_rules! conversation {\n    () =&gt; ({\n        say_hello!();\n        println!(\"goodbye\");\n    })\n}\n</code></pre>\n\n<p>then when someone uses <code>crateb</code> with <code>conversation!()</code>, it literally expands to <code>say_hello!(); println!(\"goodbye\");</code>, and this will error if <code>say_hello</code> doesn't exist in the target crate.</p>\n\n<p>The solution to this is to re-export all macros from <code>cratea</code> to <code>crateb</code>. You can do this with the following:</p>\n\n<pre><code>extern crate cratea;\npub use cratea::*;\n</code></pre>\n\n<p>This will mean anyone who depends using <code>#[macro_use]</code> on <code>crateb</code> will have access to all of <code>cratea</code>'s macros too. So, when your macro in <code>crateb</code> expands to reference a macro in <code>cratea</code>, it will work.</p>\n\n<hr>\n\n<p>On workflow, personal anecdote:</p>\n\n<p>I've found <code>cargo check</code> with <a href=\"https://github.com/passcod/cargo-watch\" rel=\"nofollow noreferrer\">cargo-watch</a> to be the best workflow I know of. I'll start <code>cargo watch</code> in a terminal, and whenever a file is saved it will start a check and just report syntax errors.</p>\n\n<p>Once I feel pretty confident and there are no errors, I'll actually run <code>cargo run</code> and/or <code>cargo test</code> depending on the project.</p>\n"}], "owner": {"reputation": 130791, "user_id": 266795, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/3b59ae9a92deace346db01f415789f20?s=128&d=identicon&r=PG", "display_name": "Peter Lyons", "link": "https://stackoverflow.com/users/266795/peter-lyons"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 439, "favorite_count": 0, "accepted_answer_id": 48132795, "answer_count": 1, "score": 1, "last_activity_date": 1515283414, "creation_date": 1515274205, "last_edit_date": 1515274754, "question_id": 48132095, "link": "https://stackoverflow.com/questions/48132095/why-must-i-use-macros-only-used-by-my-dependencies", "title": "Why must I use macros only used by my dependencies", "body": "<p>Why must I explicitly <code>macro_use</code> macros not directly used by my code, but only used by my codes dependencies?</p>\n\n<p>There are 2 cases illustrated below:</p>\n\n<ol>\n<li>Macros only used by my dependencies\n\n<ul>\n<li><code>call</code>, <code>do_parse</code>, <code>map</code>, <code>take</code>, <code>error_if</code></li>\n</ul></li>\n<li>Other scope names only used by my dependencies\n\n<ul>\n<li><code>parse_der_defined</code> (a function), <code>fold_parsers</code> (a function), <code>DerObject</code> (a struct), <code>DerObjectContent</code> (a struct)</li>\n</ul></li>\n</ol>\n\n<p><strong>Bonus Question</strong> </p>\n\n<p>What's the best workflow to deal with this while coding? Just compiler error, add the name, rinse, repeat?</p>\n\n<hr>\n\n<pre><code>// Why is this necessary? My code does not directly use macros from this scope.\n#[macro_use(call, do_parse, map, take)]\nextern crate nom;\n\n// Why is this necessary? My code does not directly use macros from this scope.\n#[macro_use(error_if)]\nextern crate rusticata_macros;\n\n// Why is this necessary? My code does not directly use macros from this scope.\n#[macro_use(parse_der_sequence_defined, parse_der_defined, fold_parsers)]\nextern crate der_parser;\n\n// My code does not directly use these names. Why do I need to `use` them?\nuse der_parser::{der_read_element_header, DerObjectContent};\n\n// Why is this necessary? My code does not directly use these names.\nuse nom::{Err, ErrorKind};\n\n// I actually use these\nuse nom::IResult;\nuse der_parser::DerObject;\n\nfn seq_of_integers(input: &amp;[u8]) -&gt; IResult&lt;&amp;[u8], DerObject&gt; {\n    parse_der_sequence_defined!(input, der_parser::parse_der_integer)\n}\n\nfn main() {\n    let input = [\n    0x30, // ASN.1 sequence\n    0x03, // length 3 bytes\n    0x02, // ASN.1 Integer\n    0x01, // length 1 byte\n    0x07, // 7\n    ];\n    let der_result = seq_of_integers(&amp;input);\n    match der_result {\n        IResult::Done(_unparsed_suffix, der) =&gt; {\n            assert_eq!(_unparsed_suffix.len(), 0);\n            let der_objects = der.as_sequence().unwrap();\n            for (index, der_object) in der_objects.iter().enumerate() {\n                println!(\"{}: {}\", index, der_object.content.as_u32().unwrap());\n            }\n        }\n        IResult::Error(error) =&gt; {\n            eprintln!(\"{}\", error);\n        }\n        IResult::Incomplete(_needed) =&gt; {\n            eprintln!(\"{:?}\", _needed);\n        }\n    };\n}\n</code></pre>\n"}, {"tags": ["rust", "nom", "ais"], "comments": [{"owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "edited": false, "score": 1, "creation_date": 1515971162, "post_id": 48131656, "comment_id": 83492811, "body": "For part 2, it seems the problem isn&#39;t that big; I just need to write all of my parsers without being <code>bits!</code>-aware, then put the <code>bits!</code> in the very top level parser that I call. I&#39;ll write up more if I can figure out part 1. (Right now, I am manually building up that bit vector.)"}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 3, "creation_date": 1516746319, "post_id": 48131656, "comment_id": 83813473, "body": "Yes, I&#39;ve done something similar, and the answer to 2 is that you need to separate your byte-oriented and bit-oriented parsing, and call <code>bits!</code> once, when you change mode."}, {"owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1517012168, "post_id": 48131656, "comment_id": 83936579, "body": "@DanHulme thanks for that. I&#39;ve started getting that part worked out. Was hoping for a big insight into part 1, but it&#39;s looking like it&#39;ll just be a 2-step process. I&#39;ll post an answer here with some code next chance I get."}], "owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 452, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1515295191, "creation_date": 1515270926, "last_edit_date": 1515295191, "question_id": 48131656, "link": "https://stackoverflow.com/questions/48131656/how-can-i-combine-nom-parsers-to-get-a-more-bit-oriented-interface-to-the-data", "title": "How can I combine nom parsers to get a more bit-oriented interface to the data?", "body": "<p>I'm working on decoding <a href=\"https://en.wikipedia.org/wiki/Automatic_identification_system\" rel=\"nofollow noreferrer\">AIS</a> messages in Rust using <a href=\"http://rust.unhandledexpression.com/nom/\" rel=\"nofollow noreferrer\">nom</a>.</p>\n\n<p>AIS messages are made up of a bit vector; the various fields in each message are an arbitrary number of bits long, and they don't always align on byte boundaries.</p>\n\n<p>This bit vector is then ASCII encoded, and embedded in an <a href=\"https://en.wikipedia.org/wiki/NMEA_0183\" rel=\"nofollow noreferrer\">NMEA</a> sentence.</p>\n\n<p>From <a href=\"http://catb.org/gpsd/AIVDM.html\" rel=\"nofollow noreferrer\">http://catb.org/gpsd/AIVDM.html</a>:</p>\n\n<blockquote>\n  <p>The data payload is an ASCII-encoded bit vector. Each character represents six bits of data. To recover the six bits, subtract 48 from the ASCII character value; if the result is greater than 40 subtract 8. According to [IEC-PAS], the valid ASCII characters for this encoding begin with \"0\" (64) and end with \"w\" (87); however, the intermediate range \"X\" (88) to \"_\" (95) is not used.</p>\n</blockquote>\n\n<h2>Example</h2>\n\n<ul>\n<li><code>!AIVDM,1,1,,A,D03Ovk1T1N&gt;5N8ffqMhNfp0,0*68</code> is the NMEA sentence</li>\n<li><code>D03Ovk1T1N&gt;5N8ffqMhNfp0</code> is the encoded AIS data</li>\n<li><code>010100000000000011011111111110110011000001100100000001011110001110000101011110001000101110101110111001011101110000011110101110111000000000</code> is the decoded AIS data as a bit vector</li>\n</ul>\n\n<h2>Problems</h2>\n\n<p>I list these together because I think they may be related...</p>\n\n<h3>1. Decoding ASCII to bit vector</h3>\n\n<p>I can do this manually, by iterating over the characters, subtracting the appropriate values, and building up a byte array by doing lots of work bitshifting, and so on. That's fine, but it seems like I should be able to do this inside nom, and chain it with the actual AIS bit parser, eliminating the interim byte array.</p>\n\n<h3>2. Reading arbitrary number of bits</h3>\n\n<p>It's possible to read, say, 3 bits from a byte array in nom. But, each call to <code>bits!</code> seems to consume a full byte at once (if reading into a <code>u8</code>).</p>\n\n<p>For example:</p>\n\n<pre><code>named!(take_3_bits&lt;u8&gt;, bits!(take_bits!(u8, 3)));\n</code></pre>\n\n<p>will read 3 bits into a <code>u8</code>. But if I run <code>take_3_bits</code> twice, I'll have consumed 16 bits of my stream.</p>\n\n<p>I can combine reads:</p>\n\n<pre><code>named!(get_field_1_and_2&lt;(u8, u8)&gt;, bits!(pair!(take_bits!(u8, 2), take_bits!(u8, 3))));\n</code></pre>\n\n<p>Calling <code>get_field_1_and_2</code> will get me a <code>(u8, u8)</code> tuple, where the first item contains the first 2 bits, and the second item contains the next 3 bits, but nom will then still advance a full byte after that read.</p>\n\n<p>I can use <code>peek</code> to prevent the nom's read pointer from advancing, and then manually manage it, but again, that seems like unnecessary extra work.</p>\n"}, {"tags": ["arrays", "rust", "slice"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1515257482, "post_id": 48129565, "comment_id": 83235888, "body": "<code>[&amp;x[0], &amp;x[1], &amp;x[2]]</code>?"}, {"owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1515257550, "post_id": 48129565, "comment_id": 83235909, "body": "That&#39;s an [&amp;u8; 3]."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1515258071, "post_id": 48129565, "comment_id": 83236088, "body": "Why would you need that?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515258704, "post_id": 48129565, "comment_id": 83236275, "body": "Also see the related but different <a href=\"https://stackoverflow.com/q/25428920/155423\">How to get a slice as an array in Rust?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1515259719, "post_id": 48129731, "comment_id": 83236653, "body": "I&#39;d quibble over the phrasing &quot;this can&#39;t be safe&quot;. It is most definitely <i>safe</i> \u2014 as long as you check the length of the slice. If it actually could never be safe, then it should never be written in the first place. It&#39;s a pedantic argument but the concept of &quot;safety&quot; is muddled enough for Rust newcomers that I find it worth pointing out."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1515267393, "post_id": 48129731, "comment_id": 83239170, "body": "He might have meant &quot;this can&#39;t be non-unsafe&quot;."}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "edited": false, "score": 1, "creation_date": 1515271339, "post_id": 48129731, "comment_id": 83240502, "body": "Yes I agree. Maybe better phrasing is <i>cannot be done without unsafe code</i>."}, {"owner": {"reputation": 5620, "user_id": 2281094, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/519338ca46fa26b27cd23ea7db40c2c5?s=128&d=identicon&r=PG", "display_name": "Zorf", "link": "https://stackoverflow.com/users/2281094/zorf"}, "edited": false, "score": 0, "creation_date": 1578690889, "post_id": 48129731, "comment_id": 105534817, "body": "Nothing can be &quot;done without unsafe code&quot; by that logic since the stdlib necessarily needs unsafe code, everything one shall ever use internally has that. I think the correct phrasing is &quot;this problem has no total solution&quot;; any solution to it has to be partial and account for the error case where the slice does not have at least 3 elements, somehow."}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "reply_to_user": {"reputation": 5620, "user_id": 2281094, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/519338ca46fa26b27cd23ea7db40c2c5?s=128&d=identicon&r=PG", "display_name": "Zorf", "link": "https://stackoverflow.com/users/2281094/zorf"}, "edited": false, "score": 0, "creation_date": 1578768225, "post_id": 48129731, "comment_id": 105549615, "body": "@Zorf the phrasing I like to use is to draw a difference between <i>safe</i> and <i>sound</i>. The code is not safe because you have to use the <code>unsafe</code> keyword, no way around that. But it is sound because we check the length of the slice, as the compiler is trusting us to do."}], "tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": false, "score": 6, "last_activity_date": 1515364700, "last_edit_date": 1515364700, "creation_date": 1515258312, "answer_id": 48129731, "question_id": 48129565, "link": "https://stackoverflow.com/questions/48129565/how-to-convert-a-slice-into-an-array-reference/48129731#48129731", "title": "How to convert a slice into an array reference?", "body": "<p>Just to re-emphasize, this can't be done without unsafe code because you don't know until runtime that the slice has three elements in it.</p>\n\n<pre><code>fn slice_to_arr3&lt;T&gt;(slice: &amp;[T]) -&gt; Option&lt;&amp;[T; 3]&gt; {\n    if slice.len() == 3 {\n        Some(unsafe { &amp;*(slice as *const [T] as *const [T; 3]) })\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>This can't be generic over the length of the array until <a href=\"https://rust-lang.github.io/rfcs/2000-const-generics.html\" rel=\"nofollow noreferrer\">const generics</a> are implemented.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 9, "last_activity_date": 1515258324, "creation_date": 1515258324, "answer_id": 48129734, "question_id": 48129565, "link": "https://stackoverflow.com/questions/48129565/how-to-convert-a-slice-into-an-array-reference/48129734#48129734", "title": "How to convert a slice into an array reference?", "body": "<p>They <a href=\"https://docs.rs/arrayref/\" rel=\"noreferrer\">arrayref</a> crate implements this.</p>\n\n<p>Here's an example, you can of course use it in different ways:</p>\n\n<pre><code>#[macro_use]\nextern crate arrayref;\n\n/// Get the first 3 elements of `bytes` as a reference to an array\n/// **Panics** if `bytes` is too short.\nfn first3(bytes: &amp;[u8]) -&gt; &amp;[u8; 3] {\n     array_ref![bytes, 0, 3]\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 14053, "user_id": 650891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/01dc99801914d08b2aa5889777970c0e?s=128&d=identicon&r=PG", "display_name": "Stephen Chung", "link": "https://stackoverflow.com/users/650891/stephen-chung"}, "edited": false, "score": 1, "creation_date": 1577097443, "post_id": 48129778, "comment_id": 105089239, "body": "If you&#39;re passing it into a function that expects such a parameter, you can also use <code>try_into().unwrap()</code> to avoid the need to write out the array type, and if you&#39;re sure the slice is large enough."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1555011015, "last_edit_date": 1555011015, "creation_date": 1515258601, "answer_id": 48129778, "question_id": 48129565, "link": "https://stackoverflow.com/questions/48129565/how-to-convert-a-slice-into-an-array-reference/48129778#48129778", "title": "How to convert a slice into an array reference?", "body": "<p>As of Rust 1.34, you can use <code>TryFrom</code> / <code>TryInto</code>:</p>\n\n<pre><code>use std::convert::TryFrom;\n\nfn example(slice: &amp;[u8]) {\n    let array = &lt;&amp;[u8; 3]&gt;::try_from(slice);\n    println!(\"{:?}\", array);\n}\n\nfn example_mut(slice: &amp;mut [u8]) {\n    let array = &lt;&amp;mut [u8; 3]&gt;::try_from(slice);\n    println!(\"{:?}\", array);\n}\n</code></pre>\n"}], "owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3636, "favorite_count": 1, "accepted_answer_id": 48129778, "answer_count": 3, "score": 7, "last_activity_date": 1555011015, "creation_date": 1515257402, "last_edit_date": 1515259567, "question_id": 48129565, "link": "https://stackoverflow.com/questions/48129565/how-to-convert-a-slice-into-an-array-reference", "title": "How to convert a slice into an array reference?", "body": "<p>I have an <code>&amp;[u8]</code> and would like to turn it into an <code>&amp;[u8; 3]</code> without copying. It should reference the original array. How can I do this?</p>\n"}, {"tags": ["rust", "toml"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user9180011"}, "edited": false, "score": 0, "creation_date": 1515211353, "post_id": 48124086, "comment_id": 83225196, "body": "instead of just calling &quot;.as_str()&quot; I should use the crate for this?"}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 1, "last_activity_date": 1515212313, "last_edit_date": 1515212313, "creation_date": 1515210749, "answer_id": 48124086, "question_id": 48123998, "link": "https://stackoverflow.com/questions/48123998/a-string-value-read-from-a-toml-file-contains-extra-quotation-marks/48124086#48124086", "title": "A string value read from a toml file contains extra quotation marks", "body": "<p><code>val1</code> is the <a href=\"http://alexcrichton.com/toml-rs/toml/value/enum.Value.html\" rel=\"nofollow noreferrer\">Value</a> enum of toml, you need to transform it to str:</p>\n\n<pre><code>let val = format!(\"value is: {}\", val1.as_str().unwrap());\n</code></pre>\n\n<p>But, you should use <a href=\"https://docs.serde.rs/serde/index.html\" rel=\"nofollow noreferrer\">serde</a> crate that will do the work for you.</p>\n\n<p>For exemple:</p>\n\n<pre><code>extern crate toml;\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Foo {\n    string_key: String,\n}\n\nfn main() {\n    let foo: Foo = toml::from_str(\"string_key = \\\"fdsafdsafdsfds\\\"\").unwrap();\n    println!(\"{:?}\", foo);\n\n    // or\n    use std::collections::BTreeMap;\n    let foo: BTreeMap&lt;String, String&gt; = toml::from_str(\"string_key = \\\"fdsafdsafdsfds\\\"\").unwrap();\n    println!(\"{:?}\", foo);\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user9180011"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 395, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1515212313, "creation_date": 1515209430, "question_id": 48123998, "link": "https://stackoverflow.com/questions/48123998/a-string-value-read-from-a-toml-file-contains-extra-quotation-marks", "title": "A string value read from a toml file contains extra quotation marks", "body": "<p>A string value read from a toml file contains extra quotation marks:</p>\n\n<pre><code>  # Toml file\n  string_key = \"fdsafdsafdsfds\"\n</code></pre>\n\n<p>Code:</p>\n\n<pre><code>let cfg_file_content = get_config_file_content();\nlet cfg_data: Value = toml::from_str(&amp;cfg_file_content).expect(\"failed to parse toml\");\ncfg_data.as_table().unwrap();\n\n//1\nlet val1 = cfg_data.get(\"string_key\").unwrap();\n\n// ====&gt; \\\"\"fdsafdsafdsfds\\\"\"\n// or String(\"fdsafdsafdsfds\")\n\n\n\n//2\nlet val = format!(\"value is: {}\", val1);\nprintln!(\"{:?}\", val);\n\n// ====&gt; \"value is: \\\"fdsafdsafdsfds\\\"\"\n</code></pre>\n\n<p>How to remove these additional quotation marks?</p>\n\n<p>Crate:</p>\n\n<pre><code>toml = \"0.4.5\"\n</code></pre>\n"}, {"tags": ["sockets", "networking", "tcp", "rust"], "answers": [{"comments": [{"owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "edited": false, "score": 0, "creation_date": 1515194157, "post_id": 48122574, "comment_id": 83221978, "body": "Thanks for the answer! This means that in this case, <code>BufReader</code> read everything, and thus, there&#39;s nothing left to be read, right? I need the feature <code>read_line</code> and also to be able to read afterwards from the original <code>stream</code>. Any idea?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "edited": false, "score": 3, "creation_date": 1515197414, "post_id": 48122574, "comment_id": 83222833, "body": "@Blas don&#39;t unwrap it. Just leave it in the <code>BufReader</code> forever."}, {"owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515226509, "post_id": 48122574, "comment_id": 83227656, "body": "@Shepmaster could you give me an example where a BufReader is wrapped in a struct? In that case, I could use it across several methods. I don&#39;t mind creating a new question, if that would be the proper way here."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "edited": false, "score": 1, "creation_date": 1515230802, "post_id": 48122574, "comment_id": 83228594, "body": "@Blas not sure what you mean with &quot;wrapped in a struct&quot;, but maybe my updated answer contains what you&#39;re looking for."}, {"owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "edited": false, "score": 0, "creation_date": 1515236280, "post_id": 48122574, "comment_id": 83229906, "body": "That was the best answer. I never realized that I could pass it by value. Thanks a lot, @Stefan"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 3, "last_activity_date": 1515243178, "last_edit_date": 1515243178, "creation_date": 1515193852, "answer_id": 48122574, "question_id": 48122437, "link": "https://stackoverflow.com/questions/48122437/cannot-read-data-from-underlying-reader-after-wrapping-it-in-bufreader/48122574#48122574", "title": "Cannot read data from underlying reader after wrapping it in BufReader", "body": "<p>The point of a <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\"><code>BufReader</code></a> is to read \"ahead\" - you only did small reads, but the <code>BufReader</code> read a large block from the underlying reader, stored it in a buffer, and serves the <code>read</code> requests from that.  This buffer is owned by the <code>BufReader</code> - you can't expect to read from that buffer when you call <code>read</code> (or <code>read_exact</code>) on the underlying reader.</p>\n\n<p>As the <code>BufReader</code> interface doesn't expose the internal buffer it usually doesn't make sense to use the underlying reader again later (you can't reliably get to a state where the buffer is empty).  So instead of passing a reference to <code>BufReader::new</code> simply pass it by value.  That way you can leave it there forever and still move the <code>BufReader</code>/<code>TcpStream</code> around if necessary.</p>\n\n<p>You still can access the underlying reader through <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html#method.get_ref\" rel=\"nofollow noreferrer\"><code>get_ref</code></a> and <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>get_mut</code></a> if you need to call other (not <code>Read</code>-related) functions (or even get it back with <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html#method.into_inner\" rel=\"nofollow noreferrer\"><code>into_inner</code></a>, but you'll lose buffered data).</p>\n"}], "owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 75, "favorite_count": 0, "accepted_answer_id": 48122574, "answer_count": 1, "score": 0, "last_activity_date": 1515243178, "creation_date": 1515192800, "last_edit_date": 1515197325, "question_id": 48122437, "link": "https://stackoverflow.com/questions/48122437/cannot-read-data-from-underlying-reader-after-wrapping-it-in-bufreader", "title": "Cannot read data from underlying reader after wrapping it in BufReader", "body": "<p>My intention is to access to a <code>TcpStream</code> and perform two read operations in two different methods of a struct that holds the <code>TcpStream</code> as attribute.</p>\n\n<p>The first operation performs fine but when I try to load the remaining bytes on the second method, the buffer cannot be filled. </p>\n\n<p>I have tried to create a very simple recreation. This is how it works:</p>\n\n<ol>\n<li>Some data is sent to a socket (8 bytes)</li>\n<li>1 byte is read using <code>read</code> and a buffer of 1 byte size. Everything is fine.</li>\n<li>1 byte is read using <code>read_exact</code> and a buffer of 1 byte size. Everything is fine.</li>\n<li>1 byte <em>should be read</em> using <code>read_exact</code> over the underlying <code>read</code> object (<code>stream</code> object). The buffer cannot be filled. I get an error if I unwrap, or the buffer with the initial values. </li>\n</ol>\n\n\n\n<pre><code>#[cfg(test)]\nmod tests {\n    use std::net::{TcpListener, TcpStream};\n    use std::io::{BufReader, Read, Write};\n\n    #[test]\n    fn test_read_twice() {\n        let listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n        let local_addr = listener.local_addr().unwrap();\n        let mut stream = TcpStream::connect(local_addr).unwrap();\n        match listener.accept() {\n            Ok((mut socket, _)) =&gt; {\n                let _ = socket.write_all(&amp;[0, 1, 2, 4, 5, 7]);\n            }\n            Err(e) =&gt; println!(\"couldn't get client: {:?}\", e),\n        }\n        {\n            let mut reader = BufReader::new(&amp;mut stream);\n            let mut buff = vec![0u8; 1];\n            let _ = reader.read(&amp;mut buff[..]).unwrap();\n            assert_eq!(buff, vec![0]);\n            let mut buff = vec![0u8; 1];\n            let _ = reader.read_exact(&amp;mut buff[..]).unwrap();\n            assert_eq!(buff, vec![1]);\n        }\n        let mut buff = vec![88u8; 1];\n        let _ = stream.read_exact(&amp;mut buff[..]);\n        assert_eq!(buff, vec![2]);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/blasrodri/0d1e963266feaa7020fca33b38b79379\" rel=\"nofollow noreferrer\">gist</a></p>\n"}, {"tags": ["enums", "rust", "type-safety", "type-parameter", "downcast"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515186271, "post_id": 48120780, "comment_id": 83219100, "body": "No; enum variants are not their own types thus they cannot participate in the type system. See also <a href=\"https://stackoverflow.com/q/29935878/155423\">Can struct-like enums be used as types?</a>"}, {"owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515186552, "post_id": 48120780, "comment_id": 83219214, "body": "@Shepmaster Is there another way without enums to accomplish what I&#39;ve tried to do? I mentioned making <code>EntryType</code> a trait, and trying to use two structs which both implement <code>EntryType</code>. However I ran into issues there because I couldn&#39;t downcast <code>Entry&lt;EntryType&gt;</code> into <code>EntryType&lt;DirectoryEntryInfo&gt;</code> or <code>EntryType&lt;FileEntryInfo&gt;</code>. I&#39;m not set on using enums, I&#39;m open to anything that&#39;ll get the kind of behavior I mentioned in the question."}, {"owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515186955, "post_id": 48120780, "comment_id": 83219388, "body": "@Shepmaster I&#39;m aware enum variants are not their own type, I should have been more specific. I&#39;m just looking for a way to do something similar as a workaround, regardless of whether it involves enums or not."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515188216, "post_id": 48120780, "comment_id": 83219919, "body": "I wrote an answer based on <code>enum</code>, but there&#39;s a downcasting solution too, using <code>Box</code>, if you make <code>EntryType</code> require <code>Any</code>. <a href=\"https://stackoverflow.com/a/47642317/3650362\">I wrote this too, which may help.</a>"}, {"owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "edited": false, "score": 0, "creation_date": 1515188391, "post_id": 48120780, "comment_id": 83219986, "body": "Thanks! I&#39;m gonna try out both of those, but I have a feeling the <code>enum</code> based one will be best for my use case."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515259895, "post_id": 48120780, "comment_id": 83236707, "body": "@trentcl it&#39;s probably worth putting that into your answer (or even a second answer if you feel they are different enough). Comments are ephemeral and useful solutions shouldn&#39;t be lost."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515726648, "post_id": 48120780, "comment_id": 83419826, "body": "@Shepmaster well, I gave it a shot, but <a href=\"https://play.rust-lang.org/?gist=b5db46d5f8815d9d4bbcdde5a624905c&amp;version=stable\" rel=\"nofollow noreferrer\">the solution I came up with using <code>Box</code></a> is such an abomination that I think, on the whole, I&#39;d rather not! (Anyone reading this may feel free to use it in their own answer, or as an example of what <i>not</i> to do.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1515727780, "post_id": 48120780, "comment_id": 83420082, "body": "@trentcl sometimes an answer showing a poor solution and explaining why it is poor is useful too ;-)"}], "answers": [{"comments": [{"owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "edited": false, "score": 0, "creation_date": 1515195785, "post_id": 48121598, "comment_id": 83222425, "body": "Thanks, this worked great and is exactly what I needed!"}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 3, "last_activity_date": 1515723548, "last_edit_date": 1515723548, "creation_date": 1515188031, "answer_id": 48121598, "question_id": 48120780, "link": "https://stackoverflow.com/questions/48120780/defining-a-method-for-a-struct-only-when-a-field-is-a-certain-enum-variant/48121598#48121598", "title": "Defining a method for a struct only when a field is a certain enum variant?", "body": "<p>Unfortunately, you can't do <em>quite</em> that, because (as mentioned in the question comments) <a href=\"https://stackoverflow.com/questions/29935878/can-struct-like-enums-be-used-as-types\">enum variants are not types</a> and information about the variant isn't available to the type system.</p>\n\n<p>One possible approach is to \"hoist\" the <code>enum</code> to the outer layer and have each variant contain a <code>struct</code> that wraps the shared data:</p>\n\n<pre><code>struct EntryInfo {\n    index: usize,\n    name: String,\n    filename_offset: u64,\n}\n\npub struct FileEntry {\n    info: EntryInfo,\n    file_offset: u64,\n    length: usize,\n}\n\npub struct DirEntry {\n    info: EntryInfo,\n    parent_index: usize,\n    next_index: usize,\n}\n\npub enum Entry {\n    File(FileEntry),\n    Dir(DirEntry),\n}\n</code></pre>\n\n<p>Then you can easily define <code>as_file</code> and <code>as_dir</code> along the following lines:</p>\n\n<pre><code>impl Entry {\n    pub fn as_dir(&amp;self) -&gt; Option&lt;&amp;DirEntry&gt; {\n        match *self {\n            Entry::Dir(ref d) =&gt; Some(d),\n            _ =&gt; None,\n        }\n    }\n\n    pub fn as_file(&amp;self) -&gt; Option&lt;&amp;FileEntry&gt; {\n        match *self {\n            Entry::File(ref f) =&gt; Some(f),\n            _ =&gt; None,\n        }\n    }\n}\n</code></pre>\n\n<p>It's not ideal, because any code you would have written on <code>Entry</code> before now needs to defer to <code>EntryInfo</code> in the appropriate variant. One thing that can make things easier is writing a helper method to find the wrapped <code>EntryInfo</code>:</p>\n\n<pre><code>fn as_info(&amp;self) -&gt; &amp;EntryInfo {\n    match *self {\n        Entry::Dir(ref d) =&gt; &amp;d.info,\n        Entry::File(ref f) =&gt; &amp;f.info,\n    }\n}\n</code></pre>\n\n<p>Then you can use <code>self.as_info()</code> instead of <code>self.info</code> in the implementation of <code>Entry</code>.</p>\n"}], "owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1064, "favorite_count": 0, "accepted_answer_id": 48121598, "answer_count": 1, "score": 5, "last_activity_date": 1515723548, "creation_date": 1515183849, "last_edit_date": 1515187921, "question_id": 48120780, "link": "https://stackoverflow.com/questions/48120780/defining-a-method-for-a-struct-only-when-a-field-is-a-certain-enum-variant", "title": "Defining a method for a struct only when a field is a certain enum variant?", "body": "<p>I have the following struct:</p>\n\n<pre><code>#[derive(Debug)]\npub struct Entry {\n    pub index: usize,\n    pub name: String,\n    pub filename_offset: u64,\n    pub entry_type: EntryType,\n}\n\n#[derive(Debug)]\npub enum EntryType {\n    File {\n        file_offset: u64,\n        length: usize,\n    },\n\n    Directory {\n        parent_index: usize,\n        next_index: usize,\n    },\n}\n</code></pre>\n\n<p><code>Entry</code> is an entry in a GameCube ROM file system table which describes a file or directory. I defined various methods for <code>Entry</code> such as <code>Entry::read_filename</code> and <code>Entry::write_to_disk</code>. However, I have some methods that don't make sense to be available to both regular files and directories. For example, <code>Entry::iter_contents</code> iterates over all of a directory's child entries.</p>\n\n<p>I want to be able to define certain methods such as <code>Entry::iter_contents</code> only for entries where <code>entry_type</code> is a certain variant. </p>\n\n<p>I tried turning <code>EntryType</code> into a trait and made a <code>DirectoryEntryInfo</code> and <code>FileEntryInfo</code> struct, which both implemented <code>EntryType</code>.</p>\n\n<p>Sadly, there were some problems with this approach. I have a <code>Vec&lt;Entry&gt;</code> elsewhere and with this change it would become <code>Vec&lt;Entry&lt;EntryType&gt;&gt;</code>. Using a trait like this, I have no way to downcast <code>Entry&lt;EntryList&gt;</code> to <code>Entry&lt;DirectoryEntryInfo&gt;</code>. I also tried doing something with <code>Any</code>, as that is the only way I am aware of to downcast in Rust, but I was only able to cast <code>entry_type</code>, not the entire <code>Entry</code> itself.</p>\n\n<p>Ultimately, I'd like to end up with something similar to this:</p>\n\n<pre><code>impl&lt;T: EntryType&gt; Entry&lt;T&gt; {\n    pub fn as_dir(&amp;self) -&gt; Option&lt;Entry&lt;DirectoryEntryInfo&gt;&gt; { ... }\n    pub fn as_file(&amp;self) -&gt; Option&lt;Entry&lt;FileEntryInfo&gt;&gt; { ... }\n    ...\n}\n\nimpl Entry&lt;DirectoryEntryInfo&gt; {\n    ...\n}\n\nimpl Entry&lt;FileEntryInfo&gt; {\n    ...\n}\n</code></pre>\n\n<p>This way, I could access all of the entries fields without knowing whether or not it's a directory or file, as well as be able to cast it to a type that would provide me with all of the <code>Entry</code> fields in addition to methods based on the type parameter like <code>Entry::iter_contents</code>.</p>\n\n<p>Is there a good way to do this without something like <a href=\"https://github.com/rust-lang/rfcs/pull/1450\" rel=\"nofollow noreferrer\">RFC 1450</a>?</p>\n\n<p>I'm aware that enum variants are not their own types and cannot be used as type parameters. I am just looking for an alternate way to conditionally define a method for a struct and still be able to have a way to store any variant of this struct in something like a <code>Vec</code>. <a href=\"https://rreverser.com/conditional-enum-variants-in-rust/\" rel=\"nofollow noreferrer\">This article</a> is extremely close to what I am trying to do. However, using the example from it, there is no way to store a <code>MyEnum&lt;Bool&gt;</code> without knowing whether that <code>Bool</code> is <code>True</code> or <code>False</code> at compile time. Being able to downcast something like <code>MyEnum&lt;Box&lt;Bool&gt;&gt;</code> to <code>MyEnum&lt;False&gt;</code> would fix this, but I'm not aware of anything like that in Rust.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515177634, "post_id": 48119344, "comment_id": 83215242, "body": "<i>I also read a bunch of articles and answers to other similar questions here at StackOverflow, but it didn&#39;t help.</i> \u2014 <b>which</b> did you read, <b>why</b> didn&#39;t they help? If you don&#39;t tell us, then what prevents an answerer from stating the exact same thing you&#39;ve already read, wasting your time and theirs?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1515177843, "post_id": 48119344, "comment_id": 83215326, "body": "<a href=\"https://play.rust-lang.org/?gist=ca6e6e2bf6dda402b34d5fe0f26658e1&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ? Your <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is maybe too simple ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515177866, "post_id": 48119344, "comment_id": 83215337, "body": "See also: <a href=\"https://stackoverflow.com/q/26920789/155423\">stackoverflow.com/q/26920789/155423</a>; <a href=\"https://stackoverflow.com/q/23969191/155423\">stackoverflow.com/q/23969191/155423</a>; <a href=\"https://stackoverflow.com/q/37508081/155423\">stackoverflow.com/q/37508081/155423</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515178136, "post_id": 48119344, "comment_id": 83215486, "body": "<a href=\"https://docs.rs/itertools/0.7.4/itertools/fn.merge.html\" rel=\"nofollow noreferrer\"><code>itertools::merge</code></a> has already implemented this functionality."}, {"owner": {"reputation": 6077, "user_id": 273699, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/df3fb5eed615107632dbc0d071535a3d?s=128&d=identicon&r=PG", "display_name": "DNNX", "link": "https://stackoverflow.com/users/273699/dnnx"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515178273, "post_id": 48119344, "comment_id": 83215563, "body": "Oh wow, that&#39;s awesome. Thanks @Shepmaster!"}, {"owner": {"reputation": 6077, "user_id": 273699, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/df3fb5eed615107632dbc0d071535a3d?s=128&d=identicon&r=PG", "display_name": "DNNX", "link": "https://stackoverflow.com/users/273699/dnnx"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515179092, "post_id": 48119344, "comment_id": 83215998, "body": "@Shepmaster may I ask what search queries did you use to find those posts?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515179398, "post_id": 48119344, "comment_id": 83216134, "body": "<a href=\"https://www.google.com/search?q=site:stackoverflow.com%20rust%20mutable%20more%20than%20once%20at%20a%20time%20peekable\" rel=\"nofollow noreferrer\">site:stackoverflow.com rust mutable more than once at a time peekable</a> and <a href=\"https://www.google.com/search?q=site%3Astackoverflow.com+rust+mutable+more+than+once+at+a+time+iterator\" rel=\"nofollow noreferrer\">site:stackoverflow.com rust mutable more than once at a time iterator</a> \u2014 a part of the error message without the variable name in it and then &quot;peekable&quot; and widening out to &quot;iterator&quot;."}, {"owner": {"reputation": 6077, "user_id": 273699, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/df3fb5eed615107632dbc0d071535a3d?s=128&d=identicon&r=PG", "display_name": "DNNX", "link": "https://stackoverflow.com/users/273699/dnnx"}, "edited": false, "score": 0, "creation_date": 1515180460, "post_id": 48119344, "comment_id": 83216572, "body": "What should I do with the question now that it&#39;s answered?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1515182123, "post_id": 48119344, "comment_id": 83217329, "body": "@DNNX: If your answer is in one of the linked questions, please tell us which and we can vote to close as duplicate. If it&#39;s the <code>itertools::merge</code>, it would be really nice if you answered the question yourself citing the tool and exposing why it works (hint: it uses two phases, first comparing then releasing the borrows, then advancing the right iterator). For bonus points, you can try and implement it for an arbitrary number of iterators (hint: use a heap for efficiency)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515200843, "post_id": 48123311, "comment_id": 83223580, "body": "Solving someones problem only enables them to get over that single problem. Explaining why the problem exists and the general approach to solving it will go a lot further."}, {"owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515201944, "post_id": 48123311, "comment_id": 83223753, "body": "Sometimes monkey-see monkey-do is the best way to learn.  We learn by imitation."}], "tags": [], "owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "is_accepted": false, "score": -1, "last_activity_date": 1515200535, "creation_date": 1515200535, "answer_id": 48123311, "question_id": 48119344, "link": "https://stackoverflow.com/questions/48119344/how-to-fix-an-error-with-borrowing-peekable-iterator-twice-in-rust/48123311#48123311", "title": "How to fix an error with borrowing peekable iterator twice in Rust?", "body": "<p>The <code>Option::cloned(&amp;self)</code> method turns an <code>Option&lt;&amp;T&gt;</code> into a <code>Option&lt;T&gt;</code>, given that <code>T:Clone</code>.  It gets rid of the reference by making a copy of the value.</p>\n\n<pre><code>let mut iter = (1..3).peekable();\nlet h = iter.peek().cloned();\niter.next();\n</code></pre>\n"}], "owner": {"reputation": 6077, "user_id": 273699, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/df3fb5eed615107632dbc0d071535a3d?s=128&d=identicon&r=PG", "display_name": "DNNX", "link": "https://stackoverflow.com/users/273699/dnnx"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 253, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1515200535, "creation_date": 1515177123, "last_edit_date": 1515177674, "question_id": 48119344, "link": "https://stackoverflow.com/questions/48119344/how-to-fix-an-error-with-borrowing-peekable-iterator-twice-in-rust", "title": "How to fix an error with borrowing peekable iterator twice in Rust?", "body": "<h2>TLDR</h2>\n\n<p>How to make the following code compile?</p>\n\n<pre><code>let mut iter = (1..3).peekable();\nlet h = iter.peek();\niter.next();\n</code></pre>\n\n<p>Update: I read <a href=\"https://stackoverflow.com/q/26333439/155423\">How to use Rust&#39;s Peekable?</a>, that is a different question because</p>\n\n<ol>\n<li>I don't even have a function here</li>\n<li>I don't have <em>move out of dereference of</em> error here</li>\n</ol>\n\n<h2>Long Story With Background</h2>\n\n<p>I'm trying to implement merging of two sorted \"streams\": I have two iterators both of which produce ordered values, and I need to print values of both of them, also ordered.</p>\n\n<p>For example,</p>\n\n<pre><code>(1, 2, 20)\n(3, 4, 5, 7)\n</code></pre>\n\n<p>should produce</p>\n\n<pre><code>(1, 2, 3, 4, 5, 7, 20)\n</code></pre>\n\n<p>The algorithm is simple I compare heads, then print the smaller head and advance the corresponding iterator.</p>\n\n<p>The problem is that I can't wrap my head around lifetimes.</p>\n\n<p>I have some initial implementation which isn't compiling. In order to make my question simpler to answer, I reduced my original implementation to the smallest possible example which fails with the same error as the original.</p>\n\n<pre><code>let mut iter = (1..3).peekable();\nlet h = iter.peek();\niter.next();\n</code></pre>\n\n<p>The error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `iter` as mutable more than once at a time\n   --&gt; src/main.rs:47:9\n    |\n44  |         let h = iter.peek();\n    |                 ---- first mutable borrow occurs here\n...\n47  |         iter.next();\n    |         ^^^^ second mutable borrow occurs here\n...\n114 | }\n    | - first borrow ends here\n</code></pre>\n\n<p>How to fix this error?</p>\n\n<p>I tried to do different things: adding <code>mut</code>, <code>&amp;</code>, <code>.by_ref()</code> everywhere, but obviously, it didn't work because I have no idea what I'm doing.</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "edited": false, "score": 0, "creation_date": 1515170941, "post_id": 48117805, "comment_id": 83212126, "body": "Thanks for the super fast reply! I also tried returning custom structs binding the two values together, but also failed. Does the rental crate use unsafe code to achieve this? I&#39;m not very familiar with that yet."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "edited": false, "score": 0, "creation_date": 1515172182, "post_id": 48117805, "comment_id": 83212758, "body": "@Z&#243;lyomiIstv&#225;n yes, it uses unsafe code."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 1, "last_activity_date": 1515170637, "creation_date": 1515170637, "answer_id": 48117805, "question_id": 48117710, "link": "https://stackoverflow.com/questions/48117710/return-a-reference-together-with-the-referenced-object-in-rust/48117805#48117805", "title": "Return a reference together with the referenced object in Rust", "body": "<p>What you have there is essentially an interior reference (the tuple contains a reference into its other element), which is very tricky in Rust. The borrow checker cannot distinguish between a reference to the object itself (which moves and thus would invalidate the reference) and things the object owns (e.g. string data on the heap, which would be stable).</p>\n\n<p>The <a href=\"https://crates.io/crates/rental\" rel=\"nofollow noreferrer\">rental</a> crate tries to solve this problem. You can use it to replace the tuple with a custom struct which is capable of referencing the heap data it owns.</p>\n"}], "owner": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 485, "favorite_count": 0, "closed_date": 1515172105, "accepted_answer_id": 48117805, "answer_count": 1, "score": 1, "last_activity_date": 1515172151, "creation_date": 1515170218, "last_edit_date": 1515172151, "question_id": 48117710, "link": "https://stackoverflow.com/questions/48117710/return-a-reference-together-with-the-referenced-object-in-rust", "closed_reason": "Duplicate", "title": "Return a reference together with the referenced object in Rust", "body": "<p>When using a <code>Future</code> in Rust, it is common to pass ownership of an object (e.g. connection, processed data, etc) between chained processing steps implemented with lambdas. I understand the concept and did this a lot already without problems.</p>\n\n<p>I'm trying to do the same but this time a partial result is a reference type. I cannot convince the Rust borrow checker to accept the following (overly simplified) code:</p>\n\n<pre><code>extern crate futures;\nuse futures::prelude::*;\n\n// Parsed data with attribute values that might be not owned, only referenced\ntrait Data&lt;'a&gt; {\n    fn attribute&lt;'s, 'n&gt;(&amp;'s self, name: &amp;'n str) -&gt; &amp;'a str;\n}\n\nfn async_load_blob() -&gt; Box&lt;Future&lt;Item = Vec&lt;u8&gt;, Error = ()&gt;&gt; {\n    Box::new(futures::future::err(())) // Dummy impl to compile\n}\n\nfn parse&lt;'a&gt;(_blob: &amp;'a [u8]) -&gt; Result&lt;Box&lt;Data&lt;'a&gt; + 'a&gt;, ()&gt; {\n    Err(()) // Dummy impl just to compile fine\n}\n\nfn resolve_attribute&lt;'a, 'n&gt;(\n    name: &amp;'n str,\n) -&gt; Box&lt;Future&lt;Item = (Vec&lt;u8&gt;, &amp;'a str), Error = ()&gt; + 'a&gt; {\n    let owned_name = name.to_owned(); // move attribute name into lambda\n    let fut = async_load_blob().and_then(move |blob| {\n        // COMPILE ERROR: how to convince borrow checker that the\n        // owned data is properly moved out together with the reference?\n        let data_res = parse(blob.as_slice());\n        match data_res {\n            Ok(data) =&gt; {\n                let attr = data.attribute(owned_name.as_str());\n                futures::future::ok((blob, attr))\n            }\n            Err(e) =&gt; futures::future::err(e),\n        }\n    });\n    Box::new(fut)\n}\n</code></pre>\n\n<p>The problematic part is the tuple returned in the successful branch. If I try to return (thus move out) the owned data from the scope, the borrow checker cannot seem to understand the correlation between them and reports an error.</p>\n\n<p>I also tried to use <code>Rc</code> and other tricks already and failed every time. Is this possible to express and fix in Rust, or is the whole concept fundamentally flawed and should be implemented differently, e.g. by returning attributes as owned values, thus copying instead of referencing?</p>\n"}, {"tags": ["rust", "reqwest"], "answers": [{"comments": [{"owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "edited": false, "score": 0, "creation_date": 1515161665, "post_id": 48115258, "comment_id": 83206631, "body": "&quot;This error message shows the type that fails, not the name of the value!&quot; Very interesting. I think that the compiler could be improved to blame the type -- I really didn&#39;t understand why it was blaming the <i>value</i>, as if it were a type...thanks :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 20, "last_activity_date": 1515161647, "last_edit_date": 1515161647, "creation_date": 1515161273, "answer_id": 48115258, "question_id": 48114390, "link": "https://stackoverflow.com/questions/48114390/why-does-a-lazy-static-value-claim-to-not-implement-a-trait-that-it-clearly-impl/48115258#48115258", "title": "Why does a lazy-static value claim to not implement a trait that it clearly implements?", "body": "<p>The compiler isn't lying to you, you are just skipping over a relevant detail of the error message. Here's a self-contained example:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nstruct Example;\ntrait ExampleTrait {}\nimpl ExampleTrait for Example {}\n\nlazy_static! {\n    static ref EXAMPLE: Example = Example;\n}\n\nfn must_have_trait&lt;T&gt;(_: T)\nwhere\n    T: ExampleTrait,\n{\n}\n\nfn main() {\n    must_have_trait(EXAMPLE);\n    must_have_trait(42i32);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `EXAMPLE: ExampleTrait` is not satisfied\n  --&gt; src/main.rs:19:5\n   |\n19 |     must_have_trait(EXAMPLE);\n   |     ^^^^^^^^^^^^^^^ the trait `ExampleTrait` is not implemented for `EXAMPLE`\n   |\n   = note: required by `must_have_trait`\n\nerror[E0277]: the trait bound `i32: ExampleTrait` is not satisfied\n  --&gt; src/main.rs:20:9\n   |\n20 |         must_have_trait(42i32);\n   |         ^^^^^^^^^^^^^^^ the trait `ExampleTrait` is not implemented for `i32`\n   |\n   = note: required by `must_have_trait`\n</code></pre>\n\n<p>Compare the two error messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `EXAMPLE: ExampleTrait` is not satisfied\nthe trait bound `i32: ExampleTrait` is not satisfied\n</code></pre>\n\n<p>The second error message doesn't say that <code>42</code> does not implement <code>ExampleTrait</code>, it says that <strong><code>i32</code></strong> lacks the implementation. This error message shows the <em>type</em> that fails, not the name of the value! That means that <code>EXAMPLE</code> in the same context is referring to a type.</p>\n\n<p>Lazy-static works by <a href=\"https://docs.rs/lazy_static/1.0.0/lazy_static/#semantics\" rel=\"noreferrer\">creating one-off types</a> that wrap your value and provide thread-safe single initialization guarantees:</p>\n\n<blockquote>\n  <p>For a given <code>static ref NAME: TYPE = EXPR;</code>, the macro generates a unique type that implements <code>Deref&lt;TYPE&gt;</code> and stores it in a static with name <code>NAME</code>.</p>\n</blockquote>\n\n<p>This wrapper type does not implement your trait, only the wrapped type does. You will need to invoke <code>Deref</code> and then probably re-reference it to get to a <code>&amp;Url</code>, assuming that a reference to a <code>Url</code> implements your trait:</p>\n\n<pre><code>must_have_trait(&amp;*EXAMPLE);\n</code></pre>\n\n<p>Additionally, using the bare static variable would attempt to move it out of the static location (which would be a Very Bad Thing), so you always need to use it by reference.</p>\n"}], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1697, "favorite_count": 1, "accepted_answer_id": 48115258, "answer_count": 1, "score": 7, "last_activity_date": 1515203707, "creation_date": 1515158087, "last_edit_date": 1515203707, "question_id": 48114390, "link": "https://stackoverflow.com/questions/48114390/why-does-a-lazy-static-value-claim-to-not-implement-a-trait-that-it-clearly-impl", "title": "Why does a lazy-static value claim to not implement a trait that it clearly implements?", "body": "<p>With the following code (an attempt to make an HTTP request using the <code>reqwest</code> crate), the compiler says that my value <code>SID_URI</code> does not implement the trait <code>PolyfillTryInto</code>. What's going on here? <a href=\"https://docs.rs/reqwest/0.8.1/src/reqwest/into_url.rs.html#18\" rel=\"noreferrer\"><code>reqwest::Url</code> clearly implements the private trait <code>reqwest::into_url::PolyfillTryInto</code>.</a></p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\nextern crate reqwest;\n\nstatic R_EMAIL: &amp;str = \"example@example.com\";\nstatic R_PASS: &amp;str = \"password\";\nstatic API_PUBKEY: &amp;str = \"99754106633f94d350db34d548d6091a\";\nstatic API_URI: &amp;str = \"https://example.com\";\nstatic AUTH_PATH: &amp;str = \"/api/v1\";\n\nlazy_static! {\n    static ref SID_URI: reqwest::Url = reqwest::Url::parse(&amp;(API_URI.to_owned() + AUTH_PATH)).unwrap();\n}\n\nfn get_sid() -&gt; Result&lt;reqwest::Response, reqwest::Error&gt; {\n    let client = reqwest::Client::new();\n    let params = [(\"ID\", R_EMAIL), (\"PW\", R_PASS), (\"KY\", API_PUBKEY)];\n    let q = client.post(SID_URI).form(&amp;params).send()?;\n    Ok(q)\n}\n\nfn main() {\n    assert!(get_sid().is_ok());\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `SID_URI: reqwest::into_url::PolyfillTryInto` is not satisfied\n  --&gt; src/main.rs:19:20\n   |\n19 |     let q = client.post(SID_URI).form(&amp;params).send()?;\n   |                    ^^^^ the trait `reqwest::into_url::PolyfillTryInto` is not implemented for `SID_URI`\n   |\n   = note: required because of the requirements on the impl of `reqwest::IntoUrl` for `SID_URI`\n</code></pre>\n"}, {"tags": ["rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1515222741, "post_id": 48115055, "comment_id": 83227078, "body": "Thanks for the answer! I might stick with <code>json!</code> for now as that&#39;s shorter than creating a new struct and then implementing a conversion function."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1515162078, "last_edit_date": 1515162078, "creation_date": 1515160524, "answer_id": 48115055, "question_id": 48108442, "link": "https://stackoverflow.com/questions/48108442/optionally-skip-serializing-a-field-with-serde/48115055#48115055", "title": "Optionally skip serializing a field with Serde?", "body": "<blockquote>\n  <p>I want to generate 2 kinds of JSON files</p>\n</blockquote>\n\n<p>I read that as \"2 <strong>types</strong> of JSON files\", so I turn towards that as a solution. I'd create wrapper types custom-fit to each context. These can take references to the original type to avoid too much memory overhead:</p>\n\n<pre><code>#[derive(Serialize)]\nstruct LightweightPost&lt;'a&gt; {\n    title: &amp;'a String,\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a Post&gt; for LightweightPost&lt;'a&gt; {\n    fn from(other: &amp;'a Post) -&gt; Self {\n        LightweightPost {\n            title: &amp;other.title,\n        }\n    }\n}\n\nfn main() {\n    let posts = vec![\n        Post {\n            title: \"title\".into(),\n            comments: vec![Comment { body: \"comment\".into() }],\n        },\n    ];\n\n    let listing: Vec&lt;_&gt; = posts.iter().map(LightweightPost::from).collect();\n\n    println!(\"{}\", serde_json::to_string(&amp;listing).unwrap());\n    // [{\"title\":\"title\"}]\n\n    println!(\"{}\", serde_json::to_string(&amp;posts[0]).unwrap());\n    // {\"title\":\"title\",\"comments\":[{\"body\":\"comment\"}]}\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2cf2c500953fb06599644219d588eee1&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<hr>\n\n<p>Editorially, I've found this type of multiple-type structure very useful when writing web apps in Ruby, using the <a href=\"https://github.com/trailblazer/roar\" rel=\"nofollow noreferrer\">roar gem</a>. These new types allow for places to hang behavior  specific to certain contexts such as validation or persistence.</p>\n"}], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1379, "favorite_count": 1, "accepted_answer_id": 48115055, "answer_count": 1, "score": 10, "last_activity_date": 1515162078, "creation_date": 1515134331, "last_edit_date": 1515160011, "question_id": 48108442, "link": "https://stackoverflow.com/questions/48108442/optionally-skip-serializing-a-field-with-serde", "title": "Optionally skip serializing a field with Serde?", "body": "<p>I have two structs:</p>\n\n<pre><code>#[derive(Serialize)]\nstruct Post {\n    title: String,\n    // ...more fields...,\n    comments: Vec&lt;Comment&gt;,\n}\n\n#[derive(Serialize)]\nstruct Comment {\n    body: String,\n    // ...more fields...,\n}\n</code></pre>\n\n<p>I want to generate 2 kinds of JSON files:</p>\n\n<ol>\n<li>A JSON index of a <code>Vec&lt;Post&gt;</code> which should include all fields except <code>comments</code>.</li>\n<li>A JSON of a <code>Post</code> which includes all fields.</li>\n</ol>\n\n<p>Is it possible to achieve this with the <code>Serialize</code> derive attribute? I found <a href=\"https://serde.rs/attr-skip-serializing.html\" rel=\"noreferrer\"><code>skip_serializing_if</code></a> attribute in Serde's documentation but as far as I can see, it's not useful for me because I want to skip not based on the value of the field but based on which JSON file I'm generating.</p>\n\n<p>Right now I'm generating the index using the <code>json!</code> macro which requires manually listing all the fields of <code>Post</code> but I'm hoping there's a better way to do this.</p>\n"}, {"tags": ["graph", "rust", "immutability", "mutable", "borrow-checker"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1515142041, "post_id": 48107473, "comment_id": 83195275, "body": "<i>I&#39;m doing the exact same thing...aren&#39;t I?</i> - No.The difference is that <code>get_node_with_id</code> takes an <i>immutable</i> reference <code>&amp;self</code> while <code>add_node_and_borrow</code> takes a <i>mutable</i> reference <code>&amp;mut self</code>. (Even in the first example you would not be able to add a second node after getting the first one...)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515163441, "post_id": 48107473, "comment_id": 83207745, "body": "<i>How can I let Rust know that I&#39;m done with that mutable borrow</i> \u2014 wrap <code>let parent: &amp;Node = graph.add_node_and_borrow(ParentNode::new());</code> in curly braces."}, {"owner": {"reputation": 1222, "user_id": 2102929, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13ac5ebe920e7014f8080d170d52da53?s=128&d=identicon&r=PG", "display_name": "user2102929", "link": "https://stackoverflow.com/users/2102929/user2102929"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515176202, "post_id": 48107473, "comment_id": 83214580, "body": "@Shepmaster But then I won\u2019t be able to use parent later.  I plan on creating a new type of node called \u201cChildNode\u201d, which holds a borrowed reference to its parent.  To construct the ChildNode, I\u2019d need to keep parent in scope so I can pass it as a parameter."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515178024, "post_id": 48107473, "comment_id": 83215425, "body": "@user2102929 that&#39;s correct. You cannot both hold on to <code>parent</code> and continue modify <code>graph</code> because modifying <code>graph</code> might invalidate the reference. Accessing <code>parent</code> then would read undefined memory, leading to a crash or security vulnerability."}], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 1, "last_activity_date": 1515163528, "last_edit_date": 1515163528, "creation_date": 1515147926, "answer_id": 48111606, "question_id": 48107473, "link": "https://stackoverflow.com/questions/48107473/cannot-borrow-graph-as-immutable-because-it-is-also-borrowed-as-mutable-how/48111606#48111606", "title": "&quot;cannot borrow `graph` as immutable because it is also borrowed as mutable.&quot; How can I let Rust know that I&#39;m done with that mutable borrow?", "body": "<h1>In your first example:</h1>\n\n<pre><code>let parent: usize = graph.add_node(ParentNode::new());\n</code></pre>\n\n<p>borrows <code>graph</code> mutably for the call to <code>add_node</code> then releases the borrow.</p>\n\n<pre><code>let parent: &amp;Node = graph.get_node_with_id(parent);\n</code></pre>\n\n<p>borrows <code>graph</code> immutably and <strong>keeps</strong> the borrow because parent is a reference to a node that belongs to the graph. At this point, <a href=\"https://stackoverflow.com/questions/48107473/cannot-borrow-graph-as-immutable-because-it-is-also-borrowed-as-mutable-how?noredirect=1#comment83195275_48107473\">like @kazemakase said</a>, you would be unable to add a new node to the graph because the immutable borrow prevents you from creating a new mutable borrow. You can however re-borrow <code>graph</code> immutably to print it.</p>\n\n<h1>In your second example:</h1>\n\n<pre><code>let parent: &amp;Node = graph.add_node_and_borrow(ParentNode::new());\n</code></pre>\n\n<p>borrows <code>graph</code> mutably (because of the function signature) and keeps the borrow (because of the <code>parent</code> reference). After this you can no longer re-borrow the graph at all because you already have an active mutable borrow.</p>\n"}], "owner": {"reputation": 1222, "user_id": 2102929, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13ac5ebe920e7014f8080d170d52da53?s=128&d=identicon&r=PG", "display_name": "user2102929", "link": "https://stackoverflow.com/users/2102929/user2102929"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 424, "favorite_count": 1, "closed_date": 1515163394, "accepted_answer_id": 48111606, "answer_count": 1, "score": 3, "last_activity_date": 1515163528, "creation_date": 1515128770, "last_edit_date": 1515162556, "question_id": 48107473, "link": "https://stackoverflow.com/questions/48107473/cannot-borrow-graph-as-immutable-because-it-is-also-borrowed-as-mutable-how", "closed_reason": "Duplicate", "title": "&quot;cannot borrow `graph` as immutable because it is also borrowed as mutable.&quot; How can I let Rust know that I&#39;m done with that mutable borrow?", "body": "<p>I'm trying to make a graph-like structure in Rust.  My first implementation compiled just fine:</p>\n\n<pre><code>fn main() {\n    let mut graph: Graph = Graph::new(); // Contains a vector of all nodes added to the graph.  The graph owns the nodes.\n\n    // Create a node\n    let parent: usize = graph.add_node(ParentNode::new()); // Returns the ID of the node.\n    let parent: &amp;Node = graph.get_node_with_id(parent); // Returns a borrowed reference to the node with the given ID\n\n    // Print the number of nodes\n    println!(\"Num nodes: {}\", graph.count_nodes());\n}\n</code></pre>\n\n<p>I don't like how I have to call <code>add_node</code> followed by <code>get_node_with_id</code>,   so I wrote another method that combines those two steps into one:</p>\n\n<pre><code>fn main() {\n    let mut graph: Graph = Graph::new();\n\n    // Create a node\n    let parent: &amp;Node = graph.add_node_and_borrow(ParentNode::new());\n\n    // Print the number of nodes\n    println!(\"Num nodes: {}\", graph.count_nodes());\n}\n</code></pre>\n\n<p><code>add_node_and_borrow</code> is just a shorthand:</p>\n\n<pre><code>/// Like add_node, but returns a borrowed reference\n/// instead of the id\npub fn add_node_and_borrow(&amp;mut self, node: Box&lt;Node&gt;) -&gt; &amp;Node {\n    let id = self.add_node(node);\n    return self.get_node_with_id(id);\n}\n</code></pre>\n\n<p>When I try to compile this, I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `graph` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:23:31\n   |\n20 |     let parent: &amp;Node = graph.add_node_and_borrow(ParentNode::new());\n   |                         ----- mutable borrow occurs here\n...\n23 |     println!(\"Num nodes: {}\", graph.count_nodes());\n   |                               ^^^^^ immutable borrow occurs here\n24 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>Strange!  In both examples, I'm doing the exact same thing...aren't I?  Why does Rust think I never stopped borrowing <code>graph</code> mutably in the second example?</p>\n\n<p>Here's the full source file minus unimportant bits so you can see the whole picture:</p>\n\n<pre><code>fn main() {\n    does_not_compike();\n}\n\nfn compiles() {\n    let mut graph: Graph = Graph::new();\n\n    // Create a node\n    let parent: usize = graph.add_node(ParentNode::new());\n    let parent: &amp;Node = graph.get_node_with_id(parent);\n\n    // Print the number of nodes\n    println!(\"Num nodes: {}\", graph.count_nodes());\n}\n\nfn does_not_compike() {\n    let mut graph: Graph = Graph::new();\n\n    // Create a node\n    let parent: &amp;Node = graph.add_node_and_borrow(ParentNode::new());\n\n    // Print the number of nodes\n    println!(\"Num nodes: {}\", graph.count_nodes());\n}\n\nstruct Graph {\n    nodes: Vec&lt;Box&lt;Node&gt;&gt;,\n    next_node_id: usize,\n}\n\nimpl Graph {\n    pub fn new() -&gt; Graph {\n        // Construct a new graph with no nodes.\n        let new_graph = Graph {\n            nodes: Vec::new(),\n            next_node_id: 0,\n        };\n\n        return new_graph;\n    }\n\n    /// Adds a newly-created node to graph.\n    /// The graph becomes the new owner of the node.\n    /// Returns the node id of the node.\n    pub fn add_node(&amp;mut self, node: Box&lt;Node&gt;) -&gt; usize {\n        // Add the node\n        self.nodes.push(node);\n\n        // Return the id\n        let id = self.next_node_id;\n        self.next_node_id += 1;\n\n        return id;\n    }\n\n    /// Like add_node, but returns a borrowed reference\n    /// instead of the id\n    pub fn add_node_and_borrow(&amp;mut self, node: Box&lt;Node&gt;) -&gt; &amp;Node {\n        let id = self.add_node(node);\n        return self.get_node_with_id(id);\n    }\n\n    /// Returns a borrowed reference to the node with the given id\n    pub fn get_node_with_id(&amp;self, id: usize) -&gt; &amp;Node {\n        return &amp;*self.nodes[id];\n    }\n\n    pub fn count_nodes(&amp;self) -&gt; usize {\n        return self.nodes.len();\n    }\n}\n\ntrait Node {\n    // Not important\n}\n\nstruct ParentNode {\n    // Not important\n}\n\nimpl ParentNode {\n    pub fn new() -&gt; Box&lt;Node&gt; {\n        Box::new(ParentNode {\n            // lol empty struct\n        })\n    }\n}\n\nimpl Node for ParentNode {\n    // Not important\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 6607, "user_id": 6717178, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/QbOLx.jpg?s=128&g=1", "display_name": "JHBonarius", "link": "https://stackoverflow.com/users/6717178/jhbonarius"}, "edited": false, "score": 2, "creation_date": 1538681066, "post_id": 48102662, "comment_id": 92238989, "body": "although there&#39;s a better solution for your case, note the existence of <a href=\"https://doc.rust-lang.org/std/iter/struct.Take.html\" rel=\"nofollow noreferrer\">std::iter::take</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1181, "user_id": 2708904, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b7b059287e83e57ccf1ffd04ccbd6314?s=128&d=identicon&r=PG&f=1", "display_name": "Innot Kauker", "link": "https://stackoverflow.com/users/2708904/innot-kauker"}, "edited": false, "score": 0, "creation_date": 1515096830, "post_id": 48102761, "comment_id": 83181060, "body": "That&#39;s even more explicit. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1515098878, "post_id": 48102761, "comment_id": 83182064, "body": "You could also slice the input to a multiple of the chunk size and avoid a check at each step."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 8, "last_activity_date": 1542554872, "last_edit_date": 1542554872, "creation_date": 1515096276, "answer_id": 48102761, "question_id": 48102662, "link": "https://stackoverflow.com/questions/48102662/use-all-but-the-last-element-from-an-iterator/48102761#48102761", "title": "Use all but the last element from an iterator", "body": "<p>You can <code>filter()</code> the chunks iterator on the slice's <code>len()</code> being the amount you passed to <code>chunks()</code>:</p>\n\n<pre><code>let things = [0, 1, 2, 3, 4];\n\nfor chunk in things.chunks(2).filter(|c| c.len() == 2) {\n    println!(\"{:?}\", chunk);\n}\n</code></pre>\n\n<p>As of Rust 1.31, you can use the <a href=\"https://doc.rust-lang.org/beta/std/primitive.slice.html#method.chunks_exact\" rel=\"nofollow noreferrer\"><code>chunks_exact</code></a> method as well:</p>\n\n<pre><code>let things = [0, 1, 2, 3, 4];\n\nfor chunk in things.chunks_exact(2) {\n    println!(\"{:?}\", chunk);\n}\n</code></pre>\n\n<p>Note that the returned iterator also has the method <a href=\"https://doc.rust-lang.org/beta/std/slice/struct.ChunksExact.html#method.remainder\" rel=\"nofollow noreferrer\"><code>remainder</code></a> if you need to get the uneven amount of items at the very end.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1542563826, "last_edit_date": 1542563826, "creation_date": 1515098356, "answer_id": 48103219, "question_id": 48102662, "link": "https://stackoverflow.com/questions/48102662/use-all-but-the-last-element-from-an-iterator/48103219#48103219", "title": "Use all but the last element from an iterator", "body": "<p>As <a href=\"https://stackoverflow.com/a/48102761/155423\">Sebastian Redl points out</a>, checking the <code>len</code>gth of each chunk is the better solution for your specific case.</p>\n\n<p>To answer the question you <em>asked</em> (\"Use all but the last element from an iterator\"), you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.peekable\" rel=\"nofollow noreferrer\"><code>Iterator::peekable</code></a> to look ahead one. That will tell you if you are on the last item or not and you can decide to skip processing it if so.</p>\n\n<pre><code>let things = [0, 1, 2, 3, 4];\n\nlet mut chunks = things.chunks(2).peekable();\nwhile let Some(chunk) = chunks.next() {\n    if chunks.peek().is_some() {\n        print!(\"Not the last: \");\n    } else {\n        print!(\"This is the last: \")\n    }\n\n    println!(\"{:?}\", chunk);\n}\n</code></pre>\n\n<blockquote>\n  <p>To be sure that all parts have equal length, I just want to drop that last element</p>\n</blockquote>\n\n<p>Always dropping the last element <em>won't</em> do this. For example, if you evenly chunk up your input, then always dropping the last element would lose a full chunk. You'd have to do some pre-calculation to decide if you need to drop it or not.</p>\n"}], "owner": {"reputation": 1181, "user_id": 2708904, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b7b059287e83e57ccf1ffd04ccbd6314?s=128&d=identicon&r=PG&f=1", "display_name": "Innot Kauker", "link": "https://stackoverflow.com/users/2708904/innot-kauker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7050, "favorite_count": 2, "accepted_answer_id": 48103219, "answer_count": 2, "score": 11, "last_activity_date": 1542563826, "creation_date": 1515095905, "last_edit_date": 1515097966, "question_id": 48102662, "link": "https://stackoverflow.com/questions/48102662/use-all-but-the-last-element-from-an-iterator", "title": "Use all but the last element from an iterator", "body": "<p>I want to split a <code>Vec</code> into some parts of equal length, and then <code>map</code> over them. I have an iterator resulting from a call to <code>Vec</code>'s <code>chunks()</code> method. This may leave me with a part that will be smaller than other parts, which will be the last element generated by it. </p>\n\n<p>To be sure that all parts have equal length, I just want to drop that last element and then call <code>map()</code> on what's left.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1515090346, "post_id": 48101033, "comment_id": 83177898, "body": "Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. If you can reproduce the issue in the <a href=\"//play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust playground</a>, that would be great."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515090399, "post_id": 48101033, "comment_id": 83177927, "body": "Probably a duplicate of <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>"}, {"owner": {"reputation": 158, "user_id": 1582976, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jyjsn.jpg?s=128&g=1", "display_name": "UsAndRufus", "link": "https://stackoverflow.com/users/1582976/usandrufus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515098385, "post_id": 48101033, "comment_id": 83181848, "body": "Thanks @Shepmaster, it seems that was the issue in the end, although the compiler message didn&#39;t seem to be saying so!"}], "answers": [{"comments": [{"owner": {"reputation": 158, "user_id": 1582976, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jyjsn.jpg?s=128&g=1", "display_name": "UsAndRufus", "link": "https://stackoverflow.com/users/1582976/usandrufus"}, "edited": false, "score": 0, "creation_date": 1515100038, "post_id": 48103213, "comment_id": 83182580, "body": "Some advice for other newcomers like me would be - don&#39;t use smart pointer stuff like <code>RefCell</code> unless you <i>really</i> know what you are doing with them and properly get lifetime stuff."}], "tags": [], "owner": {"reputation": 158, "user_id": 1582976, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jyjsn.jpg?s=128&g=1", "display_name": "UsAndRufus", "link": "https://stackoverflow.com/users/1582976/usandrufus"}, "is_accepted": true, "score": 0, "last_activity_date": 1515098335, "creation_date": 1515098335, "answer_id": 48103213, "question_id": 48101033, "link": "https://stackoverflow.com/questions/48101033/borrowing-breaks-when-i-add-lifetime-parameters/48103213#48103213", "title": "Borrowing breaks when I add lifetime parameters", "body": "<p>It turns out that my problem is, indeed, an abstracted version of <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">Why can't I store a value and a reference to that value in the same struct?</a> I think using the <code>RefCells</code> <em>sort of</em> got around the issue, but actually really just abstracted the issue away from me. </p>\n\n<p>Got rid of the RefCells, removed the lifetime parameters, and made a little <code>Mill</code> struct that stored <code>usizes</code> to index the <code>Position</code> <code>Vec</code> with.</p>\n"}], "owner": {"reputation": 158, "user_id": 1582976, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jyjsn.jpg?s=128&g=1", "display_name": "UsAndRufus", "link": "https://stackoverflow.com/users/1582976/usandrufus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 121, "favorite_count": 0, "closed_date": 1515900197, "accepted_answer_id": 48103213, "answer_count": 1, "score": 1, "last_activity_date": 1515098335, "creation_date": 1515088866, "last_edit_date": 1515090523, "question_id": 48101033, "link": "https://stackoverflow.com/questions/48101033/borrowing-breaks-when-i-add-lifetime-parameters", "closed_reason": "Duplicate", "title": "Borrowing breaks when I add lifetime parameters", "body": "<p>I am implementing the board game Nine Man's Morris in Rust. I have a <code>Game</code> struct which owns a <code>Board</code> struct. <code>Board</code> stores a <code>RefCell&lt;HashSet&gt;</code> of references to a <code>Position</code> struct. <code>Board</code> and <code>Game</code> share lifetime parameters.</p>\n\n<pre><code>pub struct Board&lt;'a&gt; {\n    pub positions: Vec&lt;Position&gt;,\n    pub ids_to_positions: HashMap&lt;String, usize&gt;,\n    p1_mills: RefCell&lt;HashSet&lt;(&amp;'a Position, &amp;'a Position, &amp;'a Position)&gt;&gt;,\n    p2_mills: RefCell&lt;HashSet&lt;(&amp;'a Position, &amp;'a Position, &amp;'a Position)&gt;&gt;,\n    can_mill: Cell&lt;bool&gt;,\n}\npub struct Game&lt;'a&gt; {\n    pub board: Board&lt;'a&gt;,\n    pub player1: Player,\n    pub player2: Player,\n    current_player_id: i8,\n}\n</code></pre>\n\n<p><code>Game::game_loop</code> loops through a set of methods (get input, update the board, etc) until the game has ended. This has been working fine as I've added methods to it.</p>\n\n<pre><code>impl&lt;'a&gt; Game&lt;'a&gt; {\n    pub fn print(&amp;self) {\n        self.board.print();\n    }\n\n    pub fn game_loop(&amp;'a mut self) {\n        loop {\n            self.print();\n            self.make_move();\n            print!(\"can_mill: {}\", self.board.can_mill());\n            self.board.update_mills(self.current_player_id);\n            self.switch_player();\n        }\n    }\n    pub fn make_move(&amp;mut self) {}\n    pub fn switch_player(&amp;self) {}\n}\n</code></pre>\n\n<p>There is a mix of methods with mutable and immutable references to <code>self</code>, and 2 calls on <code>Board</code>:</p>\n\n<pre><code>pub fn can_mill(&amp;self) -&gt; bool {}\npub fn update_mills(&amp;'a self, player_id: i8) {}\n</code></pre>\n\n<p><code>update_mill</code> updates the <code>p1_mills</code> and <code>p2_mills</code> fields, and <code>can_mill</code> references the <code>can_mill</code> field.</p>\n\n<p>If I remove the <code>update_mills</code> call in <code>game_loop</code>, the code compiles. With it, I get </p>\n\n<blockquote>\n  <p>cannot borrow <code>*self</code> as mutable because <code>self.board</code> is also borrowed\n  as immutable.</p>\n</blockquote>\n\n<p>I'm pretty sure this has something to with the explicit lifetime in that method, but in all my reading around I haven't been able to get it to work or understand what isn't working. It's confusing because without I don't get any borrowing errors. I'm also not clear if having the mill sets in <code>RefCell</code>s is breaking anything (I can't actually remember why there are in them in the first place to be honest).</p>\n\n<p>I realise this is quite involved but I'd really appreciate some help. I tried to recreate the issue with a simpler example but couldn't sadly.</p>\n"}, {"tags": ["assembly", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1515081430, "post_id": 48098907, "comment_id": 83172890, "body": "You may be interested in noting that the inline assembly syntax is unstable, and there is discussion on its future <a href=\"https://internals.rust-lang.org/t/pre-rfc-inline-assembly/6443\" rel=\"nofollow noreferrer\">right now</a>."}, {"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1515081555, "post_id": 48098907, "comment_id": 83172976, "body": "@MatthieuM. Interesting. Thanks for sharing."}, {"owner": {"reputation": 52454, "user_id": 547981, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90042f6f33a9f87769fac02096ceea68?s=128&d=identicon&r=PG", "display_name": "Jester", "link": "https://stackoverflow.com/users/547981/jester"}, "edited": false, "score": 4, "creation_date": 1515081795, "post_id": 48098907, "comment_id": 83173111, "body": "That&#39;s just an <code>rdtsc</code>. Are you sure you don&#39;t have a way to access that without inline asm?"}, {"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "reply_to_user": {"reputation": 52454, "user_id": 547981, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90042f6f33a9f87769fac02096ceea68?s=128&d=identicon&r=PG", "display_name": "Jester", "link": "https://stackoverflow.com/users/547981/jester"}, "edited": false, "score": 0, "creation_date": 1515081958, "post_id": 48098907, "comment_id": 83173207, "body": "@Jester Probably, I can use <a href=\"https://gz.github.io/rust-x86/x86/time/fn.rdtsc.html\" rel=\"nofollow noreferrer\">this</a>. But, still wondering about how would one translate the above C inline assembly to Rust."}, {"owner": {"reputation": 15145, "user_id": 4271923, "user_type": "registered", "profile_image": "https://graph.facebook.com/543414580/picture?type=large", "display_name": "Ped7g", "link": "https://stackoverflow.com/users/4271923/ped7g"}, "edited": false, "score": 2, "creation_date": 1515083568, "post_id": 48098907, "comment_id": 83174195, "body": "One always has to even wonder how to translate C inline assembly to machine code (with all the different targets and compilers around), not even mentioning Rust. In &quot;assembly&quot; tagged questions the general consensus is to advice people against usage of inline assembly. If you need particular instruction, there&#39;re often intrinsics functions to use those directly in C, or you can write stand-alone assembly source which poses usually less problems than inline version (although pure C source <b>is portable</b> and more maintainable). While I&#39;m not Rust user, I&#39;m 100% sure this applies to Rust too."}, {"owner": {"reputation": 15145, "user_id": 4271923, "user_type": "registered", "profile_image": "https://graph.facebook.com/543414580/picture?type=large", "display_name": "Ped7g", "link": "https://stackoverflow.com/users/4271923/ped7g"}, "edited": false, "score": 0, "creation_date": 1515083658, "post_id": 48098907, "comment_id": 83174251, "body": "So you are asking how to keep low quality source in low quality... while you have intrinsics for <code>rdtsc</code> available."}], "answers": [{"comments": [{"owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "edited": false, "score": 0, "creation_date": 1515099876, "post_id": 48100158, "comment_id": 83182521, "body": "Thanks for the great answer. One question, do registers need to be prefixed with <code>%</code> also if I use the <code>&quot;intel&quot;</code> option?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "edited": false, "score": 0, "creation_date": 1515100272, "post_id": 48100158, "comment_id": 83182691, "body": "@tinker I&#39;ve never used the Intel syntax myself, so I&#39;m not sure."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1515122250, "post_id": 48100158, "comment_id": 83189088, "body": "rdtsc has also some precedence: <a href=\"https://github.com/gz/rust-x86/blob/1e2efb6b7a0d76d9b672e09862515f5ac2541d9f/src/shared/time.rs#L17\" rel=\"nofollow noreferrer\">github.com/gz/rust-x86/blob/&hellip;</a>; <a href=\"https://github.com/ArtemGr/gstuff.rs/blob/eae4fbafff5c9e898ae762190c9a5f921a445505/gstuff.rs#L448\" rel=\"nofollow noreferrer\">github.com/ArtemGr/gstuff.rs/blob/&hellip;</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1515123200, "post_id": 48100158, "comment_id": 83189265, "body": "@ArtemGr feels like both of those need the <code>volatile</code> keyword to avoid the optimizer returning the same value for distinct calls, no? Also, it looks like someone snuck in and moved all of your closing curly braces to the previous line :-p :-)"}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1515128842, "post_id": 48100158, "comment_id": 83190424, "body": "@ArtemGr: LLVM &quot;knows about&quot; <code>rdtsc</code>.  Or at least the Clang front-end supports <code>__builtin_ia32_rdtsc</code> so you don&#39;t have to (and thus shouldn&#39;t) use inline asm at all.  <a href=\"https://godbolt.org/g/e9a8Kk\" rel=\"nofollow noreferrer\">godbolt.org/g/e9a8Kk</a>.  Does Rust expose <code>rdtsc</code> / <code>rdtscp</code> with a similar builtin / intrinsic?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1515158854, "post_id": 48100158, "comment_id": 83204964, "body": "@Shepmaster, thanks, fixed! <a href=\"https://github.com/ArtemGr/gstuff.rs/commit/f5c395dbbfcc6e1a7fff521438b385751b900a2e\" rel=\"nofollow noreferrer\">github.com/ArtemGr/gstuff.rs/commit/&hellip;</a>;  :-D"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 1, "creation_date": 1515159059, "post_id": 48100158, "comment_id": 83205083, "body": "@PeterCordes, I don&#39;t see it in <a href=\"https://doc.rust-lang.org/nightly/std/intrinsics/index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/intrinsics/index.html</a> or in the Rust tracker."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1515175415, "last_edit_date": 1515175415, "creation_date": 1515085429, "answer_id": 48100158, "question_id": 48098907, "link": "https://stackoverflow.com/questions/48098907/how-do-i-translate-x86-gcc-style-c-inline-assembly-to-rust-inline-assembly/48100158#48100158", "title": "How do I translate x86 GCC-style C inline assembly to Rust inline assembly?", "body": "<p>Rust is built on top of LLVM, so a lot of low-level detail like this can be gleaned from what LLVM or Clang do.</p>\n\n<ol>\n<li><p>If you want to specify a specific register, you use the register name as the constraint: <code>\"={rax}\"(result)</code>. Based on <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Machine-Constraints.html\" rel=\"nofollow noreferrer\">the GCC documentation</a>, the <code>a</code> constraint is the \"a\" register. </p></li>\n<li><p>Literals must be prefaced with <code>$$</code></p></li>\n<li><p>Registers must be prefaced with <code>%</code></p></li>\n</ol>\n\n<pre class=\"lang-none prettyprint-override\"><code>let result: u64;\nunsafe {\n    asm!(\".byte 15\n          .byte 49\n          shlq $$32, %rdx\n          orq  %rdx, %rax\"\n         : \"={rax}\"(result)\n         :\n         : \"rdx\"\n         : \"volatile\"\n    );\n}\nresult\n</code></pre>\n\n<p>If I'm understanding the discussion about <code>rdtsc</code> correctly, you can also do:</p>\n\n<pre><code>let upper: u64;\nlet lower: u64;\nunsafe {\n    asm!(\"rdtsc\"\n         : \"={rax}\"(lower), \n           \"={rdx}\"(upper)\n         :\n         :\n         : \"volatile\"\n    );\n}\nupper &lt;&lt; 32 | lower\n</code></pre>\n\n<p>I advise getting <em>out</em> of inline assembly as soon as it's practical.</p>\n\n<hr>\n\n<p>The assembly of each function:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>playground::thing1:\n    #APP\n    .byte   15\n    .byte   49\n    shlq    $32, %rdx\n    orq %rdx, %rax\n    #NO_APP\n    retq\n\nplayground::thing2:\n    #APP\n    rdtsc\n    #NO_APP\n    shlq    $32, %rdx\n    orq %rdx, %rax\n    retq\n</code></pre>\n\n<p>For completeness, here is the same code using the LLVM intrinsic. This requires a <em>different</em> unstable attribute:</p>\n\n<pre><code>#![feature(link_llvm_intrinsics)]\n\nextern \"C\" {\n    #[link_name = \"llvm.x86.rdtsc\"]\n    fn rdtsc() -&gt; u64;\n}\n\nfn main() {\n    println!(\"{}\", unsafe { rdtsc() })\n}\n</code></pre>\n\n<p>Sources:</p>\n\n<ul>\n<li>The unstable book chapter on <a href=\"https://doc.rust-lang.org/unstable-book/language-features/asm.html\" rel=\"nofollow noreferrer\"><code>asm</code></a>.</li>\n<li>The <a href=\"https://llvm.org/docs/LangRef.html#inline-assembler-expressions\" rel=\"nofollow noreferrer\">LLVM inline assembly reference</a>.</li>\n<li>My libraries <a href=\"https://github.com/shepmaster/jetscii/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">jetscii</a> and <a href=\"https://github.com/shepmaster/jetscii/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">cupid</a>.</li>\n</ul>\n"}], "owner": {"reputation": 1604, "user_id": 9131220, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d949395713366e2abe1cafff2510149d?s=128&d=identicon&r=PG&f=1", "display_name": "tinker", "link": "https://stackoverflow.com/users/9131220/tinker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1704, "favorite_count": 0, "accepted_answer_id": 48100158, "answer_count": 1, "score": 5, "last_activity_date": 1515175415, "creation_date": 1515081246, "last_edit_date": 1515083808, "question_id": 48098907, "link": "https://stackoverflow.com/questions/48098907/how-do-i-translate-x86-gcc-style-c-inline-assembly-to-rust-inline-assembly", "title": "How do I translate x86 GCC-style C inline assembly to Rust inline assembly?", "body": "<p>I have the following inline assembly in C: </p>\n\n<pre class=\"lang-c prettyprint-override\"><code>unsigned long long result;\nasm volatile(\".byte 15;.byte 49;shlq $32,%%rdx;orq %%rdx,%%rax\"\n    : \"=a\" (result) ::  \"%rdx\");\nreturn result;\n</code></pre>\n\n<p>I tried to rewrite it in Rust:</p>\n\n<pre><code>let result: u64;\nunsafe {\n    asm!(\".byte 15\\n\\t\n          .byte 49\\n\\t\n          shlq 32, rdx\\n\\t\n          orq  rdx, rax\"\n         : \"=a\"(result)\n         :\n         : \"rdx\"\n         : \"volatile\"\n         );\n}\nresult\n</code></pre>\n\n<p>It doesn't recognize the <code>=a</code> constraint an it gives me an invalid operand error for <code>rdx</code> and <code>rax</code> at <code>shlq</code> and <code>orq</code> instructions. What is the proper way to rewrite the above C inline assembly in Rust?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1515074713, "post_id": 48094542, "comment_id": 83168807, "body": "Why do you need <code>dep2</code> to import the <b>root</b> crate? This suggests to me that either <code>dep2</code> should <b>be</b> the root crate (and the root crate should be a dependency), or they should be modules in the same crate, or there should be a third dependency <code>dep3</code> with both <code>dep2</code> and the root crate depending on <code>dep3</code>."}], "answers": [{"comments": [{"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1515091152, "post_id": 48097369, "comment_id": 83178260, "body": "Thanks for the answer. I knew that this way would work, but I didn&#39;t know if it was the idiomatic way to do it. For that, I had to ask.  I&#39;m still new to the Rust ecosystem, but this build system seems to encourage creating a few large compilation units (&#39;crates&#39;) rather than a lot of small ones (it should be one per source file unless technically necessary to make a larger compilation unit). I think large projects are going to get headaches when they see incremental build times."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1515091808, "post_id": 48097369, "comment_id": 83178570, "body": "@masonk I don&#39;t see what part of the build system encourages large compilation units; you can create as many crates as you&#39;d like with differing amounts of code in them. If anything, workspaces would seem to nudge towards more crates with smaller per-crate sizes. Incremental compilation is being worked on (it&#39;s available but not enabled by default at the moment, IIRC)."}, {"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1515184278, "post_id": 48097369, "comment_id": 83218319, "body": "I guess this is the wrong forum, but, in a nutshell, it is less work to add a source file to an existing compilation unit than it is to create a new compilation unit for each source file.  It looks like the long term plan is to offer incremental compilation at a level more granular than a crate. (<a href=\"https://internals.rust-lang.org/t/incremental-compilation-beta/4721\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/incremental-compilation-beta/4721</a>&zwnj;&#8203;). When that hits, I think it will squarely address my complaint. (But it hasn&#39;t yet)."}, {"owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "edited": false, "score": 0, "creation_date": 1515273370, "post_id": 48097369, "comment_id": 83241095, "body": "Actually, I don&#39;t think incremental addresses all of my concerns: <a href=\"https://users.rust-lang.org/t/small-dependencies-in-rust-do-or-dont/14718/18?u=masonk\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/small-dependencies-in-rust-do-or-dont/&zwnj;&#8203;&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1515076134, "creation_date": 1515076134, "answer_id": 48097369, "question_id": 48094542, "link": "https://stackoverflow.com/questions/48094542/intra-workspace-dependencies-in-a-rust-project/48097369#48097369", "title": "Intra-workspace dependencies in a Rust project", "body": "<p>There's nothing special about how you declare the dependencies of \"dep2\"; it's the same as any other crate. You can easily test this by just trying it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[dependencies.the_name_of_the_root_package]\npath = \"../\"\n\n[dependencies.dep1]\npath = \"../dep1\"\n</code></pre>\n\n<p>No, there's no \"from the root\" option for the path. You don't move your crates around except once or twice in the lifetime of the project, so this shouldn't be a problem in practice.</p>\n"}], "owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 798, "favorite_count": 0, "accepted_answer_id": 48097369, "answer_count": 1, "score": 1, "last_activity_date": 1515076134, "creation_date": 1515066174, "last_edit_date": 1515075651, "question_id": 48094542, "link": "https://stackoverflow.com/questions/48094542/intra-workspace-dependencies-in-a-rust-project", "title": "Intra-workspace dependencies in a Rust project", "body": "<p>I have the following crate layout taken from the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1525-cargo-workspace.md\" rel=\"nofollow noreferrer\">workspace RFC</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Cargo.toml\nsrc/\n  lib.rs\ndep1/\n  Cargo.toml\n  src/\n    lib.rs\ndep2/\n  Cargo.toml\n  src/\n    lib.rs\n</code></pre>\n\n<p>I need <code>dep2</code> to import the <code>dep1</code> crate and the root crate.</p>\n\n<ol>\n<li>What is the conventional way? </li>\n<li>Is there a way to do it by referencing crates relative to the root, rather than relative to <code>dep2</code>?</li>\n</ol>\n"}, {"tags": ["if-statement", "rust", "comparison"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1515066009, "post_id": 48094381, "comment_id": 83163430, "body": "&quot;Coming from C++, it&#39;s a relief...&quot;, well, they are trying: <a href=\"http://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison\" rel=\"nofollow noreferrer\">spaceship operator in C++20</a>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1515067051, "post_id": 48094381, "comment_id": 83164084, "body": "@mcarton It takes decades to add small things in C++ while a beautiful language has been done in few years with Rust. That&#39;s why I am done with C++. They can add whatever they want in 10 years, that&#39;s too late."}, {"owner": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515067766, "post_id": 48094381, "comment_id": 83164524, "body": "personally I find this harder to read, have to actually think about it"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1515069203, "post_id": 48094381, "comment_id": 83165428, "body": "@mcarton: Yes. Now, we just need the meta-class proposal to be able to automatically implement it as well..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515069244, "post_id": 48094381, "comment_id": 83165456, "body": "@Keatinge: I find easier/harder to read subjective, I prefer to focus on objective measurements. A single condition is less likely to be out of sync with itself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515075319, "post_id": 48094381, "comment_id": 83169179, "body": "I&#39;d say there&#39;s the <i>potential</i> for more efficient code with the <code>cmp</code> version, as you &quot;know&quot; that that comparison is only going to happen once. It&#39;s possible (but totally incorrect) for <code>lt</code> and <code>gt</code> to have side effects."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515076551, "post_id": 48094381, "comment_id": 83169956, "body": "@Shepmaster: It depends. Rust <code>sort</code> originally used <code>cmp</code>, and now uses <code>&lt;</code> because it leads to better code generation/execution."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515076913, "post_id": 48094381, "comment_id": 83170172, "body": "@MatthieuM. but in that case it <i>only</i> uses <code>lt</code>, not <i>both</i> <code>lt</code> and <code>gt</code>. I&#39;m saying that (1 <code>cmp</code>) may be better than (1 <code>lt</code> + 1 <code>gt</code>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1515077486, "post_id": 48094381, "comment_id": 83170514, "body": "@Shepmaster: Well, yes, now. It probably used a slightly different algorithm before. One issue with <code>cmp</code> is branch-prediction, AFAIK binary branch prediction is much easier than multi-target branch prediction. Thus, I would not trust any guess on the performance of either 1 <code>cmp</code> or 1 <code>lt</code> + 1 <code>gt</code>; especially when the execution of said <code>gt</code> only occurs when <code>lt</code> returned false ;)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 19, "last_activity_date": 1515065661, "creation_date": 1515065661, "answer_id": 48094381, "question_id": 48094170, "link": "https://stackoverflow.com/questions/48094170/when-to-use-stdcmpordering-instead-of-an-if-statement-in-rust/48094381#48094381", "title": "When to use `std::cmp::ordering` instead of an `if` statement in Rust", "body": "<blockquote>\n  <p>Is readability the only difference?</p>\n</blockquote>\n\n<p>I would say it's more of a DRY (Don't Repeat Yourself) thing.</p>\n\n<p>If you look at the second sample, it's messy:</p>\n\n<blockquote>\n<pre><code>fn main() {\n    if 1 &lt; 2 {\n        println!(\"less than 2.\");\n    } else if 1 &gt; 2 {\n        println!(\"Greater than 2.\");\n    } else if 1 == 2 {\n        println!(\"Equal to 2.\");\n    }\n}\n</code></pre>\n</blockquote>\n\n<ol>\n<li>There is no <code>else</code> clause. If you mess up the conditions it'll just do nothing.</li>\n<li>If the last one was an <code>else</code> clause, you'd still better put an <code>assert!(1 == 2)</code> inside to make sure that it's only taken when the two are equal (and not because you made a mistake in the previous conditions).</li>\n<li>And even then you would still have a repetition between <code>1 &lt; 2</code> and <code>1 &gt; 2</code>.</li>\n</ol>\n\n<p>Compare that to the <code>match</code>:</p>\n\n<blockquote>\n<pre><code>fn main() {\n    match 2.cmp(&amp;2) {\n        Ordering::Less =&gt; println!(\"Less than 2.\"),\n        Ordering::Greater =&gt; println!(\"Greater than 2.\"),\n        Ordering::Equal =&gt; println!(\"Equal to 2.\"),\n    }\n}\n</code></pre>\n</blockquote>\n\n<ol>\n<li>You cannot accidentally forget a case, it's guaranteed to be exhaustive.</li>\n<li>The condition is only written once, no need to \"reverse\" it or anything.</li>\n</ol>\n\n<p>Therefore, <code>if</code> vs <code>match</code> is a matter of number of different outputs really:</p>\n\n<ul>\n<li>use <code>if</code> if there is one or two branches,</li>\n<li>use <code>match</code> if there are three branches or more.</li>\n</ul>\n\n<p>A <code>match</code> is just more maintainable than an <code>if</code>/<code>else</code> chain.</p>\n\n<hr>\n\n<p><em>Note: I personally think that <code>cmp</code> is rarely used directly. It is more meant as an implementation device, allowing you to implement a single function to get all 4 inequality operators. Coming from C++, it's a relief...</em></p>\n"}], "owner": {"reputation": 163, "user_id": 9172399, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6f4d7dba41a2f3e74cdb9010bb2b2c1a?s=128&d=identicon&r=PG&f=1", "display_name": "kangaroo", "link": "https://stackoverflow.com/users/9172399/kangaroo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2088, "favorite_count": 1, "accepted_answer_id": 48094381, "answer_count": 1, "score": 12, "last_activity_date": 1515067658, "creation_date": 1515064936, "question_id": 48094170, "link": "https://stackoverflow.com/questions/48094170/when-to-use-stdcmpordering-instead-of-an-if-statement-in-rust", "title": "When to use `std::cmp::ordering` instead of an `if` statement in Rust", "body": "<p>When should I use <code>std::cmp::ordering</code> in a <code>match</code> block instead of using an <code>if</code>/<code>else if</code> statement? Is readability the only difference?</p>\n\n<p>For example:</p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn main() {\n    match 2.cmp(&amp;2) {\n        Ordering::Less =&gt; println!(\"Less than 2.\"),\n        Ordering::Greater =&gt; println!(\"Greater than 2.\"),\n        Ordering::Equal =&gt; println!(\"Equal to 2.\"),\n    }\n}\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>fn main() {\n    if 1 &lt; 2 {\n        println!(\"less than 2.\");\n    } else if 1 &gt; 2 {\n        println!(\"Greater than 2.\");\n    } else if 1 == 2 {\n        println!(\"Equal to 2.\");\n    }\n}\n</code></pre>\n"}, {"tags": ["winapi", "rust", "windows-console", "kernel32"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515063932, "post_id": 48093739, "comment_id": 83162238, "body": "Why did you tag C ?"}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1515064148, "post_id": 48093739, "comment_id": 83162374, "body": "@Stargateur Because I had an link to an c example. And maybe someone with an background of c that has worked with winapi and kernel32 may know what is wrong."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1515064543, "post_id": 48093739, "comment_id": 83162564, "body": "Since there is no direct interaction with C code or a C library, I would advise removing <a href=\"https://stackoverflow.com/questions/tagged/c\">c</a> anyway."}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1515066480, "post_id": 48093739, "comment_id": 83163707, "body": "@eryksun Thanks I get the point but is not solving the problem unfortunately. It isn&#39;t scrolling up."}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1515069326, "post_id": 48093739, "comment_id": 83165506, "body": "@eryksun, Your question <code>Are you trying to scroll up when the top of the window is less than rows?</code>. no, as you can see in my example I print 99 lines after that I scroll up 10 lines, and I followed your instruction and it does not go into the else statement, so it should not be that problem of to many rows."}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "edited": false, "score": 0, "creation_date": 1515071110, "post_id": 48093739, "comment_id": 83166505, "body": "Yes, It does return a integer wits can be 1 and 0.  It is returning an 1 so no errors."}], "owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 213, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1515086810, "creation_date": 1515063399, "last_edit_date": 1515086810, "question_id": 48093739, "link": "https://stackoverflow.com/questions/48093739/cannot-scroll-up-in-windows-console-using-winapi-and-kernel32", "title": "Cannot scroll up in Windows console using winapi and kernel32", "body": "<p>I need to scroll through the Windows console. For that, I'm using code from <a href=\"https://docs.microsoft.com/en-us/windows/console/scrolling-a-screen-buffer-s-window\" rel=\"nofollow noreferrer\">a Microsoft C example</a> that I've rewritten in Rust. I make use of the winapi and kernel32 crates. I know the code is not written according to the Rust guidelines, it is just for demonstration purposes only:</p>\n\n<pre><code>extern crate kernel32;\nextern crate winapi;\n\nuse std::mem;\n\nfn main() {\n    for i in 0..100 {\n        println!(\"Just some data to scroll over {}\", i);\n    }\n\n    scroll_up(10);\n}\n\npub fn scroll_up(rows: i16) {\n    let hStdout: winapi::HANDLE;\n    let mut csbiInfo: winapi::CONSOLE_SCREEN_BUFFER_INFO = unsafe { mem::zeroed() };\n    let mut srctWindow: winapi::SMALL_RECT = unsafe { mem::zeroed() };\n\n    unsafe {\n        // Get the current screen buffer size and window position.\n        hStdout = kernel32::GetStdHandle(winapi::STD_OUTPUT_HANDLE);\n        kernel32::GetConsoleScreenBufferInfo(hStdout, &amp;mut csbiInfo);\n    }\n\n    // Set srctWindow to the current window size and location.\n    srctWindow = csbiInfo.srWindow;\n\n    // Check whether the window is too close to the screen buffer top\n    if srctWindow.Top &gt;= rows {\n        srctWindow.Top -= rows; // move top up\n        srctWindow.Bottom -= rows; // move bottom up\n\n        unsafe {\n            if (kernel32::SetConsoleWindowInfo(hStdout, winapi::TRUE, &amp;srctWindow) == 1) {\n                // println!(\"SUCSESS\");\n            } else {\n                println!(\"failed\");\n            }\n        }\n    } else {\n        println!(\"failed\");\n    }\n}\n\npub fn scroll_down(rows: i16) {\n    let hStdout: winapi::HANDLE;\n    let mut csbiInfo: winapi::CONSOLE_SCREEN_BUFFER_INFO = unsafe { mem::zeroed() };\n    let mut srctWindow: winapi::SMALL_RECT = unsafe { mem::zeroed() };\n\n    unsafe {\n        // Get the current screen buffer size and window position.\n        hStdout = kernel32::GetStdHandle(winapi::STD_OUTPUT_HANDLE);\n        kernel32::GetConsoleScreenBufferInfo(hStdout, &amp;mut csbiInfo);\n    }\n\n    // Set srctWindow to the current window size and location.\n    srctWindow = csbiInfo.srWindow;\n\n    // Check whether the window is too close to the screen buffer top\n    if srctWindow.Bottom &lt; csbiInfo.dwSize.Y - rows {\n        srctWindow.Top += rows; // move top down\n        srctWindow.Bottom += rows; // move bottom down\n\n        unsafe {\n            if (kernel32::SetConsoleWindowInfo(hStdout, winapi::TRUE, &amp;srctWindow) == 1) {\n                // println!(\"SUCSESS\");\n            } else {\n                println!(\"failed\");\n            }\n        }\n    } else {\n        println!(\"failed\");\n    }\n}\n</code></pre>\n\n<p>I can scroll down <code>n</code> lines:</p>\n\n<p><a href=\"https://i.stack.imgur.com/5SzVq.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/5SzVq.png\" alt=\"Image Scrolling down\"></a></p>\n\n<p>I can not scroll up <code>n</code> lines. What could possibly go wrong here?</p>\n\n<p><em>Cargo dependencies:</em></p>\n\n<pre><code> winapi = \"0.2.8\"\n kernel32-sys = \"0.2.1\"\n</code></pre>\n"}, {"tags": ["rust", "gtk-rs"], "comments": [{"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1515060171, "post_id": 48092749, "comment_id": 83160040, "body": "Please format lines of code with a 4 space indent over triple backticks."}], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 0, "last_activity_date": 1515075512, "last_edit_date": 1515075512, "creation_date": 1515075421, "answer_id": 48097149, "question_id": 48092749, "link": "https://stackoverflow.com/questions/48092749/how-do-i-add-action-buttons-to-a-filechooserdialog/48097149#48097149", "title": "How do I add action buttons to a FileChooserDialog?", "body": "<p>I guess you need to use <code>add_button</code> to add the buttons after creating the dialog and before showing it:</p>\n\n<pre><code>let dialog = FileChooserDialog::new(Some(\"Open File\"), Some(&amp;window), FileChooserAction::Open);\ndialog.add_button(\"_Cancel\", ResponseType::Cancel);\ndialog.add_button(\"_Open\", ResponseType::Accept);\ndialog.run();\n</code></pre>\n"}], "owner": {"reputation": 95, "user_id": 6223130, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90e7b4b3cf7d73f04e6af073141f2d7c?s=128&d=identicon&r=PG", "display_name": "\u9e3f\u5219_", "link": "https://stackoverflow.com/users/6223130/%e9%b8%bf%e5%88%99"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 258, "favorite_count": 0, "accepted_answer_id": 48097149, "answer_count": 1, "score": 0, "last_activity_date": 1558011068, "creation_date": 1515059816, "last_edit_date": 1558011068, "question_id": 48092749, "link": "https://stackoverflow.com/questions/48092749/how-do-i-add-action-buttons-to-a-filechooserdialog", "title": "How do I add action buttons to a FileChooserDialog?", "body": "<p>When I try to show a file chooser dialog, it is missing the action buttons:</p>\n\n<pre><code>let dialog = FileChooserDialog::new(Some(\"Open File\"), Some(&amp;window), FileChooserAction::Open);\ndialog.run();\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/VzvLO.png\" alt=\"missing action buttons\"></p>\n\n<p>I found another way from another project: </p>\n\n<pre><code>let dialog = FileChooserDialog::new_with_buttons::&lt;ApplicationWindow&gt;(\n    Some(\"Open File\"),\n    Some(&amp;window),\n    FileChooserAction::Open,\n    &amp;[\n        (\"_Cancel\", ResponseType::Cancel),\n        (\"_Open\", ResponseType::Accept),\n    ],\n);\n</code></pre>\n\n<p>The error message is:</p>\n\n<pre><code>no function or associated item named `new_with_buttons` found for type `gtk::FileChooserDialog` in the current scope\n</code></pre>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "is_accepted": true, "score": 1, "last_activity_date": 1515044782, "creation_date": 1515044782, "answer_id": 48089362, "question_id": 48088295, "link": "https://stackoverflow.com/questions/48088295/how-to-use-numeric-literals-with-numinteger-types/48089362#48089362", "title": "How to use numeric literals with num::Integer types?", "body": "<p><a href=\"https://docs.rs/num/0.1.41/num/trait.FromPrimitive.html\" rel=\"nofollow noreferrer\"><code>FromPrimitive</code></a> or <a href=\"https://docs.rs/num/0.1.41/num/trait.Num.html#tymethod.from_str_radix\" rel=\"nofollow noreferrer\"><code>Num::from_str_radix</code></a> seems to match your need.</p>\n\n<pre><code>extern crate num;\nuse num::{Integer, FromPrimitive};\n\nfn f&lt;T: Integer + FromPrimitive&gt;() -&gt; T {\n    T::zero() + T::from_i32(1).unwrap()\n}\n\nfn main() {\n    let x: u32 = f();\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>extern crate num;\nuse num::Integer;\n\nfn f&lt;T: Integer&gt;() -&gt; T {\n    T::zero() + T::from_str_radix(\"1\", 10).ok().unwrap()\n}\n\nfn main() {\n    let x: u32 = f();\n    println!(\"{}\", x);\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user8370684"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 59, "favorite_count": 0, "closed_date": 1515075125, "accepted_answer_id": 48089362, "answer_count": 1, "score": 0, "last_activity_date": 1515044782, "creation_date": 1515036843, "question_id": 48088295, "link": "https://stackoverflow.com/questions/48088295/how-to-use-numeric-literals-with-numinteger-types", "closed_reason": "Duplicate", "title": "How to use numeric literals with num::Integer types?", "body": "<p>I'm trying to write some numerically templated functions and I'm finding a number of stumbling blocks. One I recently found is the following code:</p>\n\n<pre><code>extern crate num;\nuse num::Integer;\nuse num::Zero;\n\nfn f&lt;T: Integer&gt;() -&gt; T {\n    T::zero() + 1\n}\n\nfn main() {\n    let x: u32 = f();\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>This doesn't work, because <code>1</code> is a \"mismatched type\" and the compiler \"expected type parameter, found integral variable\". </p>\n\n<p>Now, I know that <code>T::zero() + T::one()</code> does work and \"fixes\" the above problem, but what if I use numeric literals for which there is nothing like <code>Zero</code>, like 2, 10, 100?</p>\n"}]