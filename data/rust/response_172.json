[{"tags": ["reference", "rust", "move-semantics", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524676570, "post_id": 50027822, "comment_id": 87071982, "body": "<i>Having the same value in two places at the same time looks confusing [...] Mutable references in particular look very dangerous.</i> What other programming languages have you used? The <b>vast</b> majority of them implicitly use &quot;mutable references&quot; for most values all the time. Would you consider most languages dangerous?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524676738, "post_id": 50027822, "comment_id": 87072062, "body": "Speaking of when to own resources and when to borrow them is often a matter of software design, and can arouse various opinions. Like Shepmaster, I also don&#39;t understand your confusion with references. Perhaps narrowing the question down to an example would help?"}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1524676860, "post_id": 50027822, "comment_id": 87072106, "body": "@Shepmaster yes I would, personally. I come from languages where values are immutable by default (Haskell, Idris and the like). As such, I&#39;d probably never think in using references at all. But they are a feature, so there must be a reason. Thus, what I&#39;m asking is: are there situations I should force myself to use references? What are those situations and why are they beneficial? Or are them just for convenience and defaulting to passing ownership is fine?"}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1524677145, "post_id": 50027822, "comment_id": 87072267, "body": "@Stargateur I&#39;ve edited the question, what do you think?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1524677996, "post_id": 50027822, "comment_id": 87072722, "body": "<i>&quot;Having the same value in two places looks dangerous (or, at least, awkward) to me.&quot;</i> If you&#39;re passing the same value to two different functions in a purely functional programming language, the compiler/interpreter will most likely just share it <i>by reference</i> internally, which should still be safe because the value is immutable. Can you better expose your concern towards having multiple immutable references in Rust?"}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524678461, "post_id": 50027822, "comment_id": 87072955, "body": "@E_net4 I can&#39;t, my main concern is that having a value in many places will make it harder to analyze my own code and understand error messages. Rust isn&#39;t immutable like Haskell, I&#39;m not confident that references and mutability mix well and fear it could get unwieldy quickly, whereas transfer of ownership looks more straightforward (a value is only at a single place at the same time). But that&#39;s just a guess. If references work fine for you all, then they may work for me. I&#39;ll give it a try."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524678685, "post_id": 50027822, "comment_id": 87073072, "body": "@MaiaVictor I can only imagine some sort of misconception here. For as long as an immutable reference to a value exists, that value <i>cannot inherently mutate</i>. This should be well explained in the following chapter: <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">References and Borrowing</a>."}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524678976, "post_id": 50027822, "comment_id": 87073234, "body": "@E_net4 no misconception about that, I&#39;m aware the compiler will not me allow to mutate a value with active references. That&#39;s neat. I get that. I was not asking if there would be bugs, I was asking if having many references around would lead to cryptic compiler errors and painful hours of debugging. Ownership transfers looked more straightforward at a first glance. But again, I was just asking. Your tone seems to indicate you&#39;re pretty happy with using references, so I will try. Experience will tell me how well they work in practice."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 0, "creation_date": 1524679052, "post_id": 50027822, "comment_id": 87073275, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/169789/discussion-between-e-net4-and-maiavictor\">continue this discussion in chat</a>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524685673, "post_id": 50027822, "comment_id": 87076554, "body": "Oddly enough, I found a similar question in the Rust users board. <a href=\"https://users.rust-lang.org/t/what-is-the-better-code-design/17041\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/what-is-the-better-code-design/17041</a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1548687857, "post_id": 50027822, "comment_id": 95619997, "body": "See also: <a href=\"https://stackoverflow.com/a/53804449/493729\">In what scenarios are APIs that don&#39;t borrow preferred?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 1, "creation_date": 1524676926, "post_id": 50028001, "comment_id": 87072148, "body": "My understanding was that passing ownership do not copy any memory too. I was under the impression it should be the default. Is this wrong?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 1, "creation_date": 1524677167, "post_id": 50028001, "comment_id": 87072282, "body": "You can reason about the <i>behaviour</i> of your code as if the value is moved in memory. In practice, the compiler may or may not actually move it."}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 2, "creation_date": 1524678070, "post_id": 50028001, "comment_id": 87072758, "body": "Okay, thanks for the inputs. My impression was that using references will make my values live in way too many places simultaneously, making debugging and reasoning about my own code more painful than it should be if I just had them at one place only, always (i.e., passing ownership). I&#39;ll take your advice as a more experienced rustacean, though, and experiment with references."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 13, "last_activity_date": 1524726185, "last_edit_date": 1524726185, "creation_date": 1524676817, "answer_id": 50028001, "question_id": 50027822, "link": "https://stackoverflow.com/questions/50027822/when-should-i-use-a-reference-instead-of-transferring-ownership/50028001#50028001", "title": "When should I use a reference instead of transferring ownership?", "body": "<blockquote>\n  <p>Mutable references in particular look very dangerous.</p>\n</blockquote>\n\n<p>They are not dangerous, because the Rust compiler will not let you do anything dangerous. If you have a <code>&amp;mut</code> reference to a value then you cannot simultaneously have <em>any</em> other references to it.</p>\n\n<p>In <em>general</em> you should pass references around. This saves copying memory and should be the default thing you do, unless you have a good reason to do otherwise.</p>\n\n<p>Some good reasons to transfer ownership instead:</p>\n\n<ol>\n<li>When the value's type is small in size, such as <code>bool</code>, <code>u32</code>, etc. It's often better performance to move/copy these values to avoid a level of indirection. Usually these values implement <code>Copy</code>, and actually the compiler may make this optimisation for you automatically. Something it's free to do because of a strong type system and immutability by default!</li>\n<li>When the value's current owner is going to go out of scope, you may want to move the value somewhere else to keep it alive.</li>\n</ol>\n"}], "owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1594, "favorite_count": 0, "answer_count": 1, "score": 12, "last_activity_date": 1545152433, "creation_date": 1524676188, "last_edit_date": 1545152433, "question_id": 50027822, "link": "https://stackoverflow.com/questions/50027822/when-should-i-use-a-reference-instead-of-transferring-ownership", "title": "When should I use a reference instead of transferring ownership?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-00-understanding-ownership.html\" rel=\"noreferrer\">the Rust book's chapter on ownership</a>, non-copyable values can be passed to functions by either transferring ownership or by using a mutable or immutable reference. When you transfer ownership of a value, it can't be used in the original function anymore: you must return it back if you want to. When you pass a reference, you borrow the value and can still use it. </p>\n\n<p>I come from languages where values are immutable by default (Haskell, Idris and the like). As such, I'd probably never think about using references at all. Having the same value in two places looks dangerous (or, at least, awkward) to me. Since references are a feature, there must be a reason to use them.</p>\n\n<p>Are there situations I should force myself to use references? What are those situations and why are they beneficial? Or are they just for convenience and defaulting to passing ownership is fine?</p>\n"}, {"tags": ["data-structures", "rust", "bitvector"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 5, "last_activity_date": 1524664330, "creation_date": 1524664330, "answer_id": 50024119, "question_id": 50023844, "link": "https://stackoverflow.com/questions/50023844/how-do-i-use-the-unstable-stdcollectionsbitvec/50024119#50024119", "title": "How do I use the unstable std::collections::BitVec?", "body": "<p>You are looking at old documentation. <code>BitVec</code> was unstable in Rust 1.2, but you can see in the <a href=\"https://doc.rust-lang.org/1.3.0/std/collections/struct.BitVec.html\" rel=\"noreferrer\">Rust 1.3 documentation</a> that it was not stabilised, but instead moved into its <a href=\"https://crates.io/crates/bit-vec\" rel=\"noreferrer\">own crate</a>.</p>\n"}], "owner": {"reputation": 617, "user_id": 6565510, "user_type": "registered", "profile_image": "https://graph.facebook.com/1177793125605707/picture?type=large", "display_name": "Gabriel Carneiro", "link": "https://stackoverflow.com/users/6565510/gabriel-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 632, "favorite_count": 0, "accepted_answer_id": 50024119, "answer_count": 1, "score": 2, "last_activity_date": 1545502080, "creation_date": 1524663551, "last_edit_date": 1545502080, "question_id": 50023844, "link": "https://stackoverflow.com/questions/50023844/how-do-i-use-the-unstable-stdcollectionsbitvec", "title": "How do I use the unstable std::collections::BitVec?", "body": "<p>I'm trying to use the <code>std::collections::BitVec</code>, but this error is generated:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0432]: unresolved import `std::collections::BitVec`\n --&gt; src\\main.rs:6:5\n  |\n6 | use std::collections::BitVec;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ no `BitVec` in `collections`\n</code></pre>\n\n<p>I'm using <code>#![feature(collections)]</code> at the top of the main.rs and my compiler version is <code>rustc 1.27.0-nightly (ac3c2288f 2018-04-18)</code>. What am I missing? The error is saying that <code>BitVec</code> doesn't exist at <code>std::collections</code>, but the <a href=\"https://doc.rust-lang.org/1.2.0/std/collections/struct.BitVec.html\" rel=\"nofollow noreferrer\">docs</a> say that <code>BitVec</code> is an unstable feature.</p>\n\n<p>My Cargo.toml looks like:</p>\n\n<pre><code>[package]\nname = \"conways_game_of_life\"\nversion = \"0.1.0\"\nauthors = [\"Gabriel Carneiro &lt;gabriel.carneiro97@live.com&gt;\"]\n\n# [lib]\n# crate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2\"\nrand = \"0.4.2\"\ntime = \"*\"\n</code></pre>\n\n<p>What am I supposed to do to use an unstable feature like <code>BitVec</code>?</p>\n"}, {"tags": ["rust", "polymorphism", "serde"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 4, "creation_date": 1524658241, "post_id": 50021897, "comment_id": 87059755, "body": "Please, can you provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>? Ideally, your code could be copy/pasted into the playground and compile or give the expected error."}, {"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1524658928, "post_id": 50021897, "comment_id": 87060305, "body": "Using generics as you have in the <code>Section</code> struct will not allow you to store different Widgets which implement <code>WidgetTrait</code>, because Rust <a href=\"https://stackoverflow.com/questions/14189604/what-is-monomorphisation-with-context-to-c?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa\"><i>monomorphises</i></a> generics during compilation. Just FYI, the boxed trait is generally good way to go, or an <code>Rc</code>, depending on your use case"}, {"owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "edited": false, "score": 0, "creation_date": 1524659118, "post_id": 50021897, "comment_id": 87060445, "body": "Added playground link"}, {"owner": {"reputation": 1116, "user_id": 455959, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/8de605661eec54733350cd848d1b76ac?s=128&d=identicon&r=PG", "display_name": "Shum", "link": "https://stackoverflow.com/users/455959/shum"}, "edited": false, "score": 0, "creation_date": 1524659316, "post_id": 50021897, "comment_id": 87060607, "body": "You will need to implement <code>Serialize</code> manually for <code>Section</code>. Even if every <code>WidgetTrait</code> type implements <code>Serialize</code>, that doesn&#39;t mean that the type <code>WidgeTrait</code> itself does. In fact there&#39;s no way to automatically implement that."}, {"owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "edited": false, "score": 0, "creation_date": 1524661433, "post_id": 50021897, "comment_id": 87062247, "body": "Thanks, I think I&#39;m getting somewhere. Added another playground link, how do I write an implementation for Box?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1524661983, "post_id": 50021897, "comment_id": 87062652, "body": "Did you check the <a href=\"https://serde.rs/impl-serialize.html\" rel=\"nofollow noreferrer\">official documentation</a>? Did you try to implement <code>Serialize</code> for <code>Box</code>?"}, {"owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "edited": false, "score": 0, "creation_date": 1524664611, "post_id": 50021897, "comment_id": 87064393, "body": "Yes I did check the documentation, the problem is that I can&#39;t figure out a way to find out what type of <code>struct</code> comes from the <code>Box&lt;WidgetTrait&gt;</code> to be able to use the strongly typed <code>serializer</code>"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 1, "creation_date": 1524669776, "post_id": 50021897, "comment_id": 87068086, "body": "Your latest edit does not solve your Problem, it&#39;s a complete different approach."}, {"owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "edited": false, "score": 0, "creation_date": 1524670772, "post_id": 50021897, "comment_id": 87068787, "body": "Tim, my problem was finding a solution on how to implement Serialize trait for Box&lt;of Trait&gt; which is what the solution does. Not saying it&#39;s elegant."}], "answers": [{"tags": [], "owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "is_accepted": false, "score": 2, "last_activity_date": 1524684326, "last_edit_date": 1524684326, "creation_date": 1524671740, "answer_id": 50026579, "question_id": 50021897, "link": "https://stackoverflow.com/questions/50021897/how-to-implement-serdeserialize-for-a-boxed-trait-object/50026579#50026579", "title": "How to implement `serde::Serialize` for a boxed trait object?", "body": "<p>I got around the compiler errors:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\nextern crate serde;\n\nuse serde::ser::{Serialize, Serializer, SerializeStruct};\n\n#[derive(Serialize)]\nstruct Card {\n    sections: Vec&lt;Section&gt;\n}\n\n#[derive(Serialize)]\nstruct Section {\n    header: String,\n    widgets: Vec&lt;Box&lt;WidgetTrait&gt;&gt;\n}\n\n#[derive(Serialize)]\nstruct Image {\n    #[serde(rename = \"imageUrl\")]\n    image_url: String\n}\n\n#[derive(Serialize)]\nstruct KeyValue {\n    #[serde(rename = \"topLabel\")]\n    top_label: String,\n\n    content: String\n}\n\ntrait WidgetTrait {}\n\nimpl Serialize for WidgetTrait {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer {\n            let s = serializer.serialize_struct(\"???\", 3)?;\n\n            s.end()\n        }\n}\n\nimpl WidgetTrait for Image {}\nimpl WidgetTrait for KeyValue {}\n\nfn main() {\n    // let test = ResponseMessage { \n    //         text: None, \n    //         cards: Some(\n    //             vec![Card { sections: vec![\n    //                 Section { header: format!(\"text\"), widgets: vec![ \n    //                     Box::new(Image { image_url: format!(\"img\") }) \n    //                     ]},\n    //                 Section { header: format!(\"text\"), widgets: vec![\n    //                      Box::new(KeyValue { top_label: format!(\"text\"), content: format!(\"text\") }),\n    //                      Box::new(KeyValue { top_label: format!(\"text\"), content: format!(\"text\") })\n    //                      ]}\n    //                 ]}])\n    //         }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e045d09f612d62370b4010156b40d243&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<hr>\n\n<p>Steps for a working solution.</p>\n\n<ol>\n<li>Write <code>as_any()</code> implementations for your structs that implement <code>WidgetTrait</code> as per <a href=\"https://stackoverflow.com/questions/33687447/how-to-get-a-struct-reference-from-a-boxed-trait\">How to get a struct reference from a boxed trait?</a>.</li>\n<li>Add implementation for trait <code>Serialize</code> of type <code>Box&lt;WidgetTrait&gt;</code> </li>\n<li>Downcast <code>Box&lt;Widget&gt;</code> to the struct so we know the type using <code>as_any()</code> and <code>downcast_ref()</code></li>\n<li>Use <a href=\"https://serde.rs/impl-serialize.html\" rel=\"nofollow noreferrer\">documentation</a> on how to serialize a strongly typed struct</li>\n</ol>\n\n\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\nextern crate serde;\n\nuse serde::ser::{Serialize, Serializer, SerializeStruct};\nuse std::any::Any;\n\n#[derive(Serialize)]\nstruct Card {\n    sections: Vec&lt;Section&gt;\n}\n\n#[derive(Serialize)]\nstruct Section {\n    header: String,\n    widgets: Vec&lt;Box&lt;WidgetTrait&gt;&gt;\n}\n\n#[derive(Serialize)]\nstruct Image {\n    #[serde(rename = \"imageUrl\")]\n    image_url: String\n}\n\n#[derive(Serialize)]\nstruct KeyValue {\n    #[serde(rename = \"topLabel\")]\n    top_label: String,\n\n    content: String\n}\n\ntrait WidgetTrait {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n}\n\nimpl Serialize for Box&lt;WidgetTrait&gt; {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt; \n        where S: Serializer {\n            return match self.as_any().downcast_ref::&lt;Image&gt;() {\n                Some(img) =&gt; {\n                        let mut widget_serializer = serializer.serialize_struct(\"Image\", 1)?;\n                        widget_serializer.serialize_field(\"imageUrl\", &amp;img.image_url)?;\n\n                        widget_serializer.end()  \n                    },\n                None =&gt; {\n                    let key_value: &amp;KeyValue = match self.as_any().downcast_ref::&lt;KeyValue&gt;() {\n                        Some(k) =&gt; k,\n                        None =&gt; panic!(\"Unknown type!\")\n                    };\n\n                    let mut widget_serializer = serializer.serialize_struct(\"KeyValue\", 2)?;\n                    widget_serializer.serialize_field(\"topLabel\", &amp;key_value.top_label)?;\n                    widget_serializer.serialize_field(\"content\", &amp;key_value.content)?;\n\n                    widget_serializer.end()  \n                }\n            };                \n        }\n}\n\nimpl WidgetTrait for Image {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n}\n\nimpl WidgetTrait for KeyValue {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n}\n\nfn main() {\n    // let test = ResponseMessage { \n    //         text: None, \n    //         cards: Some(\n    //             vec![Card { sections: vec![\n    //                 Section { header: format!(\"text\"), widgets: vec![ \n    //                     Box::new(Image { image_url: format!(\"img\") }) \n    //                     ]},\n    //                 Section { header: format!(\"text\"), widgets: vec![\n    //                      Box::new(KeyValue { top_label: format!(\"text\"), content: format!(\"text\") }),\n    //                      Box::new(KeyValue { top_label: format!(\"text\"), content: format!(\"text\") })\n    //                      ]}\n    //                 ]}])\n    //         }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=02f427145774908a0d806e7b23e5cc0d&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 7, "last_activity_date": 1524672713, "creation_date": 1524672713, "answer_id": 50026869, "question_id": 50021897, "link": "https://stackoverflow.com/questions/50021897/how-to-implement-serdeserialize-for-a-boxed-trait-object/50026869#50026869", "title": "How to implement `serde::Serialize` for a boxed trait object?", "body": "<p>For serializing Serde trait objects you should use <a href=\"https://github.com/dtolnay/erased-serde\" rel=\"noreferrer\"><strong><code>erased-serde</code></strong></a>.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\n\n#[macro_use]\nextern crate erased_serde;\n\nextern crate serde;\nextern crate serde_json;\n\n#[derive(Serialize)]\nstruct Card {\n    sections: Vec&lt;Section&gt;,\n}\n\n#[derive(Serialize)]\nstruct Section {\n    header: String,\n    widgets: Vec&lt;Box&lt;WidgetTrait&gt;&gt;,\n}\n\n#[derive(Serialize)]\nstruct Image {\n    image_url: String,\n}\n\n#[derive(Serialize)]\nstruct KeyValue {\n    top_label: String,\n    content: String,\n}\n\ntrait WidgetTrait: erased_serde::Serialize {}\nimpl WidgetTrait for Image {}\nimpl WidgetTrait for KeyValue {}\n\nserialize_trait_object!(WidgetTrait);\n\nfn main() {\n    let card = Card {\n        sections: vec![\n            Section {\n                header: \"text\".to_owned(),\n                widgets: vec![\n                    Box::new(Image {\n                        image_url: \"img\".to_owned(),\n                    }),\n                    Box::new(KeyValue {\n                        top_label: \"text\".to_owned(),\n                        content: \"text\".to_owned(),\n                    }),\n                ],\n            },\n        ],\n    };\n\n    println!(\"{}\", serde_json::to_string_pretty(&amp;card).unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 145, "user_id": 7403409, "user_type": "registered", "profile_image": "https://graph.facebook.com/1672128056135582/picture?type=large", "display_name": "snowbane", "link": "https://stackoverflow.com/users/7403409/snowbane"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4219, "favorite_count": 1, "accepted_answer_id": 50026869, "answer_count": 2, "score": 10, "last_activity_date": 1539963049, "creation_date": 1524657943, "last_edit_date": 1539963049, "question_id": 50021897, "link": "https://stackoverflow.com/questions/50021897/how-to-implement-serdeserialize-for-a-boxed-trait-object", "title": "How to implement `serde::Serialize` for a boxed trait object?", "body": "<p>I ran into a problem trying to create a generic vector for a struct.\nThis was my first attempt:</p>\n\n<pre><code>#[derive(Serialize)]\nstruct Card {\n    sections: Vec&lt;Section&lt;WidgetTrait&gt;&gt;\n}\n\n#[derive(Serialize)]\nstruct Section&lt;T: WidgetTrait&gt; {\n    header: String,\n    widgets: Vec&lt;T&gt;\n}\n</code></pre>\n\n<p>This has brought me to an error that <code>Sized</code> is not implemented and <code>WidgetTrait</code> size is not known at compile time.</p>\n\n<p>My next attempt was to use <code>Box&lt;WidgetTrait&gt;</code> like so:</p>\n\n<pre><code>#[derive(Serialize)]\nstruct Section {\n    header: String,\n    widgets: Vec&lt;Box&lt;WidgetTrait&gt;&gt;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5bfbabe19bc6860b747d79974441e6a1&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<p>This has led me to an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `WidgetTrait: serde::Serialize` is not satisfied\n  --&gt; src/main.rs:11:10\n   |\n11 | #[derive(Serialize)]\n   |          ^^^^^^^^^ the trait `serde::Serialize` is not implemented for `WidgetTrait`\n   |\n   = note: required because of the requirements on the impl of `serde::Serialize` for `std::boxed::Box&lt;WidgetTrait&gt;`\n   = note: required because of the requirements on the impl of `serde::Serialize` for `std::vec::Vec&lt;std::boxed::Box&lt;WidgetTrait&gt;&gt;`\n   = note: required by `serde::ser::SerializeStruct::serialize_field`\n</code></pre>\n\n<p>My goal is for the widgets vector in <code>Section</code> struct to be able to accept different types of widgets that implement <code>WidgetTrait</code> trait, just like you would with an interface.</p>\n"}, {"tags": ["rust", "clone", "trait-objects"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1524647281, "post_id": 50017987, "comment_id": 87052580, "body": "Possible duplicate: <a href=\"https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object\">How to clone a struct storing a boxed trait object?</a>. @Electric Coffee: does this help you?"}, {"owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1524649652, "post_id": 50017987, "comment_id": 87054113, "body": "I get an error saying <code>Note&lt;&#39;a&gt;</code> doesn&#39;t satisfy the static lifetime"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1524654484, "post_id": 50017987, "comment_id": 87057069, "body": "Why don&#39;t u use <code>String</code> as name?"}, {"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1524656229, "post_id": 50017987, "comment_id": 87058309, "body": "Is implementing <code>Clone</code> really necessary for your business logic? This error is caused due to the Rust compiler needing to know the concrete return type of <code>Clone::clone</code> at compile time, which isn&#39;t possible with the trait object <code>Box&lt;MusicElement&gt;</code> (which uses dynamic dispatch). <a href=\"https://doc.rust-lang.org/book/second-edition/ch17-02-trait-objects.html#object-safety-is-required-for-trait-objects\" rel=\"nofollow noreferrer\">Read more on Object-safety violation here</a>"}, {"owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 1, "creation_date": 1524668950, "post_id": 50017987, "comment_id": 87067476, "body": "unfortunately, yes. The Sequence struct lets me create deeply nested chains of MusicElements, which the program needs to be able to handle. For the sake of my own sanity, I&#39;d prefer if I make a copy of one such sequence, rather than being forced to write it anew from scratch"}], "answers": [{"tags": [], "owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "is_accepted": true, "score": 11, "last_activity_date": 1524658485, "last_edit_date": 1524658485, "creation_date": 1524655159, "answer_id": 50020961, "question_id": 50017987, "link": "https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object/50020961#50020961", "title": "Can&#39;t clone Vec&lt;Box&lt;Trait&gt;&gt; because Trait cannot be made into an object", "body": "<p>The solution lies in combining the suggestions in the comments thus far - the answer in <a href=\"https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object/50020961#comment87052580_50017987\">@Lukas Kalbertodt's comment</a> tells you that you must create a blanket trait implementation for all compatible (<code>'static + MusicElement + Clone</code>) types. The only subsequent step necessary for your implementation is changing the <code>Note.name</code> field's type from <code>&amp;'a str</code> to <code>String</code>, <a href=\"https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object/50020961#comment87057069_50017987\">as metioned by @Boiethios</a>:</p>\n\n<pre><code>#![allow(dead_code, unused_macros)]\nuse std::fmt::Debug;\n\ntrait MusicElement: MusicElementClone + Debug {\n    fn duration(&amp;self) -&gt; f32;\n}\n\ntrait MusicElementClone {\n    fn clone_box(&amp;self) -&gt; Box&lt;MusicElement&gt;;\n}\n\nimpl&lt;T: 'static + MusicElement + Clone&gt; MusicElementClone for T {\n    fn clone_box(&amp;self) -&gt; Box&lt;MusicElement&gt; {\n        Box::new(self.clone())\n    }\n}\n\nimpl Clone for Box&lt;MusicElement&gt; {\n    fn clone(&amp;self) -&gt; Box&lt;MusicElement&gt; {\n        self.clone_box()\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Note {\n    name: String,\n    duration: f32,\n}\n\nimpl MusicElement for Note {\n    fn duration(&amp;self) -&gt; f32 {\n        self.duration\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Pause {\n    duration: f32,\n}\n\nimpl MusicElement for Pause {\n    fn duration(&amp;self) -&gt; f32 {\n        self.duration\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Sequence {\n    elements: Vec&lt;Box&lt;MusicElement&gt;&gt;,\n}\n\nimpl MusicElement for Sequence {\n    fn duration(&amp;self) -&gt; f32 {\n        self.elements.iter().map(|e| e.duration()).sum()\n    }\n}\n\nfn main() {\n    let a4 = |dur| Box::new(Note { name: String::from(\"a4\"), duration: dur });\n    let seq = Sequence { elements: vec![a4(0.25), a4(0.25), a4(0.5)] };\n    println!(\"{:?}\", seq);\n    let seq2 = seq.clone();\n    println!(\"{:?}\", seq2);\n}\n</code></pre>\n\n<p>This compiles, so it should suffice!</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 3, "last_activity_date": 1528647993, "creation_date": 1528647993, "answer_id": 50785755, "question_id": 50017987, "link": "https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object/50785755#50785755", "title": "Can&#39;t clone Vec&lt;Box&lt;Trait&gt;&gt; because Trait cannot be made into an object", "body": "<p>My <a href=\"https://github.com/dtolnay/objekt\" rel=\"nofollow noreferrer\"><strong><code>objekt</code></strong></a> crate provides a reusable implementation of <a href=\"https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object/50020961#50020961\">jonny's answer</a>. With it you can make your original code work with a bare minimum of changes.</p>\n\n<hr>\n\n<h3>Before:</h3>\n\n<pre><code>trait MusicElement: Debug + Clone {\n    fn duration(&amp;self) -&gt; f32;\n}\n</code></pre>\n\n<h3>After:</h3>\n\n<pre><code>#[macro_use]\nextern crate objekt;\n\ntrait MusicElement: Debug + objekt::Clone {\n    fn duration(&amp;self) -&gt; f32;\n}\n\nclone_trait_object!(MusicElement);\n\n// Everything else as you wrote it.\n</code></pre>\n"}], "owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3134, "favorite_count": 1, "accepted_answer_id": 50020961, "answer_count": 2, "score": 12, "last_activity_date": 1528647993, "creation_date": 1524646491, "last_edit_date": 1524647211, "question_id": 50017987, "link": "https://stackoverflow.com/questions/50017987/cant-clone-vecboxtrait-because-trait-cannot-be-made-into-an-object", "title": "Can&#39;t clone Vec&lt;Box&lt;Trait&gt;&gt; because Trait cannot be made into an object", "body": "<p>I'm trying to clone a vector of boxed traits.\nNaturally simply deriving <code>Clone</code> on all the structs that implement my trait isn't enough, because the compiler doesn't know at compile time that all the structs implementing the trait have <code>Clone</code>.</p>\n\n<p>Okay, so I then tried to use <code>Clone</code> as a supertrait, but that just lead to the error in the title. I'm at a loss for solutions.</p>\n\n<p>Here's the Minimal Working Implementation (or not working, since I can't clone)</p>\n\n<pre><code>#![allow(dead_code, unused_macros)]\nuse std::fmt::Debug;\n\ntrait MusicElement: Debug + Clone {\n    fn duration(&amp;self) -&gt; f32;\n}\n\n#[derive(Debug, Clone)]\nstruct Note&lt;'a&gt; {\n    name: &amp;'a str,\n    duration: f32,\n}\n\nimpl&lt;'a&gt; MusicElement for Note&lt;'a&gt; {\n    fn duration(&amp;self) -&gt; f32 {\n        self.duration\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Pause {\n    duration: f32,\n}\n\nimpl MusicElement for Pause {\n    fn duration(&amp;self) -&gt; f32 {\n        self.duration\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Sequence {\n    elements: Vec&lt;Box&lt;MusicElement&gt;&gt;,\n}\n\nimpl MusicElement for Sequence {\n    fn duration(&amp;self) -&gt; f32 {\n        self.elements.iter().map(|e| e.duration()).sum()\n    }\n}\n\nfn main() {\n    let a4 = |dur| Box::new(Note { name: \"a4\", duration: dur });\n    let seq = Sequence { elements: vec![a4(0.25), a4(0.25), a4(0.5)] };\n    println!(\"{:?}\", seq);\n    let seq2 = seq.clone();\n    println!(\"{:?}\", seq2);\n}\n</code></pre>\n\n<p>With this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `MusicElement` cannot be made into an object\n  --&gt; src/main.rs:33:5\n   |\n33 |     elements: Vec&lt;Box&lt;MusicElement&gt;&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MusicElement` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n</code></pre>\n\n<p>And here's a <a href=\"https://play.rust-lang.org/?gist=c92279dd4d034b815e815a5b0ad553aa&amp;version=stable\" rel=\"noreferrer\">link to the playground</a> for easy code running.</p>\n\n<p>I've also tried to make the <code>elements</code> vector in <code>Sequence</code> a <code>Vec&lt;Box&lt;MusicElement + Clone&gt;&gt;</code>, but that didn't work either.</p>\n\n<p>I haven't been able to find any useful solutions online, so here's my question: How do I make the code cloneable?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1524621227, "post_id": 50012745, "comment_id": 87042284, "body": "<a href=\"https://github.com/rust-lang/rust/issues/48869\" rel=\"nofollow noreferrer\">Rust issue #48869</a>"}], "answers": [{"tags": [], "owner": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "is_accepted": false, "score": 1, "last_activity_date": 1587406705, "creation_date": 1587406705, "answer_id": 61329292, "question_id": 50012745, "link": "https://stackoverflow.com/questions/50012745/is-there-a-way-to-tell-the-compiler-that-nobody-will-implement-a-trait-for-a-ref/61329292#61329292", "title": "Is there a way to tell the compiler that nobody will implement a trait for a reference to a generic type?", "body": "<p>The conflict here doesn't have anything to do with the reference-ness of the latter implementation. The issue is that, in the first implementation, <code>T</code> can be <em>any</em> type, including reference types. Suppose you make the following function call:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: i32 = 10;\nlet result: &amp;u8 = x.f();\n</code></pre>\n\n<p>At this point, the type resolver needs to figure out what function is being called. It finds a conflicting implementation:</p>\n\n<pre><code>impl Boo&lt;&amp;u8&gt; for i32 via Boo&lt;T&gt;  (T == &amp;u8),\nimpl Boo&lt;&amp;u8&gt; for i32 via Boo&lt;&amp;T&gt; (T == u8),\n</code></pre>\n\n<p>You'd have exactly the same issue if you used a concrete type in the latter implementation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// This will fail to compile\nimpl&lt;T&gt; Boo&lt;T&gt; for i32 { ... }\nimpl Boo&lt;String&gt; for i32 { ... }\n</code></pre>\n\n<p>This conflict means that the compiler can't allow these two implementations to coexist.</p>\n\n<hr>\n\n<p>The specific thing you're looking to do here is called \"specialization\"; it refers to a proposal for a set of rules that says that overlapping implementations like this are allowed to exist <em>if</em> one of them is unambiguously more \"specific\" than the other, in which case the compiler will pick the more specific implementation. This is tracked as <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">RFC #1210</a>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 393, "favorite_count": 1, "answer_count": 1, "score": 6, "last_activity_date": 1587406705, "creation_date": 1524619321, "last_edit_date": 1524621098, "question_id": 50012745, "link": "https://stackoverflow.com/questions/50012745/is-there-a-way-to-tell-the-compiler-that-nobody-will-implement-a-trait-for-a-ref", "title": "Is there a way to tell the compiler that nobody will implement a trait for a reference to a generic type?", "body": "<p>Here is toy code that demonstrates the problem:</p>\n\n<pre><code>trait Foo {}\n\ntrait Boo&lt;T&gt; {\n    fn f() -&gt; T;\n}\n\nimpl&lt;T&gt; Boo&lt;T&gt; for i32\nwhere\n    T: Foo,\n{\n    fn f() -&gt; T {\n        unimplemented!();\n    }\n}\n\nimpl&lt;'a, T&gt; Boo&lt;&amp;'a T&gt; for i32\nwhere\n    T: Foo,\n{\n    fn f() -&gt; T {\n        unimplemented!();\n    }\n}\n</code></pre>\n\n<p>I want to have two generic implementations of <code>trait Boo</code>, but it doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `Boo&lt;&amp;_&gt;` for type `i32`:\n  --&gt; src/main.rs:16:1\n   |\n7  | / impl&lt;T&gt; Boo&lt;T&gt; for i32\n8  | | where\n9  | |     T: Foo,\n10 | | {\n...  |\n13 | |     }\n14 | | }\n   | |_- first implementation here\n15 | \n16 | / impl&lt;'a, T&gt; Boo&lt;&amp;'a T&gt; for i32\n17 | | where\n18 | |     T: Foo,\n19 | | {\n...  |\n22 | |     }\n23 | | }\n   | |_^ conflicting implementation for `i32`\n   |\n   = note: downstream crates may implement trait `Foo` for type `&amp;_`\n</code></pre>\n\n<p>I do not plan to make this part of functionality to other crates. I tried: </p>\n\n<ul>\n<li>moving this code to binary crate that obviously can not be used from other crates</li>\n<li>moving this to a private <code>mod</code></li>\n<li>marking the trait as <code>pub(crate)</code> </li>\n</ul>\n\n<p>all with no success.</p>\n\n<p>Is there anyway to give the compiler a hint that it should not care that anybody will implement <code>Foo</code> for any reference?</p>\n\n<p>Maybe my toy example is not the best, so here is the real code.\nIt's used for integration with the C part of my program, so it's a little\ncomplicated.</p>\n\n<pre><code>impl&lt;T: MyTrait&gt; MyFrom&lt;Option&lt;T&gt;&gt; for *mut c_void {\n    fn my_from(x: Option&lt;T&gt;) -&gt; Self {\n        match x {\n            Some(x) =&gt; &lt;T&gt;::alloc_heap_for(x),\n            None =&gt; ptr::null_mut(),\n        }\n    }\n}\n\nimpl&lt;'a, T: MyTrait&gt; MyFrom&lt;Option&lt;&amp;'a T&gt;&gt; for *mut c_void {\n    fn my_from(x: Option&lt;&amp;'a T&gt;) -&gt; Self {\n        match x {\n            Some(x) =&gt; x as *const T as *mut c_void,\n            None =&gt; ptr::null_mut(),\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "global-variables", "lifetime"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524598217, "post_id": 50009287, "comment_id": 87035509, "body": "I suppose that you tried what the error message is suggesting you to do? The most relevant error message will pop up once you do that."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524598355, "post_id": 50009287, "comment_id": 87035585, "body": "The problem is that the error message is suggesting to transfer ownership of <code>foo</code> to the TLV closure. I will still need access to <code>foo</code> later in the function, and even so <code>foo</code> doesn&#39;t have a fixed size and so I couldn&#39;t store it in the TLV without boxing it."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524599656, "post_id": 50009287, "comment_id": 87036234, "body": "Yes, there are multiple issues resulting from an attempt to (1) share a closure with multiple contexts, and (2) one of them being a global variable expecting a closure living for the static lifetime, which is not the case."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524599785, "post_id": 50009287, "comment_id": 87036284, "body": "Do you have any suggestions though for how I <i>could</i> do it? Perhaps I need to resolve to just using raw pointers and unsafe code?"}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524599855, "post_id": 50009287, "comment_id": 87036317, "body": "For example - Is there perhaps a way to make it so the global variable will accept something that has less than a <code>&#39;static</code> lifetime?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524599889, "post_id": 50009287, "comment_id": 87036335, "body": "I&#39;m not understanding exactly where the line is drawn between your code and the library code. How do you set the callback at all? What prevents you from using a function pointer instead of a closure?"}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1524599935, "post_id": 50009287, "comment_id": 87036352, "body": "I didn&#39;t want to document all the ceremony - But earlier on in my program I passed my callback function to some initialization routine. It&#39;s enough for illustration purposes though to know that it will be called when I call <code>not_my_function()</code>, and that it doesn&#39;t allow me to pass any parameters to it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524600107, "post_id": 50009287, "comment_id": 87036441, "body": "But <i>what types</i> does it take for the callback? Does it take a closure or does it have to be a function pointer? Is this actually C FFI code?"}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1524600184, "post_id": 50009287, "comment_id": 87036479, "body": "Oh I see - It&#39;s a C-style callback to a function that doesn&#39;t allow any parameters to be passed in, so I can&#39;t do the old &quot;pass in a void*&quot; trick. Basically if I&#39;m passing parameters to this function, it&#39;s through global/TLV."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524600289, "post_id": 50009287, "comment_id": 87036520, "body": "I believe that the answer to this question can be found in one or more of <a href=\"https://stackoverflow.com/q/32270030/155423\">How do I convert a Rust closure to a C-style callback?</a>; <a href=\"https://stackoverflow.com/q/31463426/155423\">How do I create a Rust callback function to pass to a FFI function?</a>; <a href=\"https://stackoverflow.com/q/38995701/155423\">How do I pass closures through raw pointers as arguments to C functions?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524601147, "post_id": 50009287, "comment_id": 87036911, "body": "Specifically, <a href=\"https://stackoverflow.com/a/42620494/155423\">this answer</a> shows a working pattern. Using a reference cannot be proven safe because it would be a reference to a stack variable and your thread-local variable may be used after that stack has been finished."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524603497, "post_id": 50009287, "comment_id": 87037869, "body": "@Shepmaster Thank you very much for all the other threads about this. I guess my Google-Fu was weak on this one.  So yes - It looks like the long answer is that - since my callback doesn&#39;t allow a <code>void*</code> to be passed, and I know that my lifetimes are fine but can&#39;t prove it to the compiler, I will have to use TLV and raw pointers."}], "owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 39, "favorite_count": 0, "closed_date": 1524618894, "answer_count": 0, "score": 0, "last_activity_date": 1524599550, "creation_date": 1524597333, "last_edit_date": 1524599550, "question_id": 50009287, "link": "https://stackoverflow.com/questions/50009287/passing-references-as-a-parameter-indirectly-via-global-variable", "closed_reason": "Duplicate", "title": "Passing references as a parameter indirectly via global variable", "body": "<p>I need to be able to pass a reference as a parameter to a callback function that doesn't have any parameters.</p>\n\n<p>My initial thought is to pass it via a Thread-Local Variable, but I can't figure out the lifetimes needed.</p>\n\n<p>Here is my minimum code example to help it make more sense:</p>\n\n<pre><code>use std::cell::Cell;\n\nthread_local!(\n    static CLOSURE: Cell&lt;Option&lt;&amp;'static Fn(i32) -&gt; ()&gt;&gt; = Cell::new(None);\n);\n\nfn callback_function() {\n    CLOSURE.with(|cell| {\n        let closure = cell.get().unwrap();\n        (*closure)(5);\n    });\n}\n\nfn not_my_function() {\n    // ...\n    callback_function();\n    // ...\n}\n\nfn main() {\n    // This is the closure I want called from the callback function\n    let foo = |x| {\n        println!(\"The number is {}\", x);\n    };\n\n    CLOSURE.with(|cell| {\n        cell.set(Some(&amp;foo));\n    });\n\n    // I don't own this function, but it will eventually call\n    // callback_function() without any parameters\n    not_my_function();\n\n    // Erase reference in TLV\n    CLOSURE.with(|cell| {\n        cell.set(None);\n    });\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=cd3269eec3985e813c9b08238ec5394e&amp;version=stable\" rel=\"nofollow noreferrer\">Rust playground</a></p>\n\n<p>Not surprisingly, the compiler is not happy about some of the lifetime problems implied here. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `foo`, which is owned by the current function\n  --&gt; src\\main.rs:26:22\n   |\n26 |         CLOSURE.with(|cell| {\n   |                      ^^^^^^ may outlive borrowed value `foo`\n27 |             cell.set(Some(&amp;foo));\n   |                            --- `foo` is borrowed here\nhelp: to force the closure to take ownership of `foo` (and any other referenced variables), use the `move` keyword\n   |\n26 |         CLOSURE.with(move |cell| {\n   |                      ^^^^^^^^^^^\n</code></pre>\n\n<p>I'm pretty much at a loss of what-to-do to make it work at this point. I know something that <strong>does work</strong> is to move ownership of the closure to the TLV by changing it to <code>RefCell&lt;Option&lt;Box&lt;Fn(i32) -&gt; ()&gt;&gt;&gt;</code> and then taking ownership back later on, but is there any way to do it without the overhead of <code>Box</code> by simply using references?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1524595223, "post_id": 50008535, "comment_id": 87033952, "body": "A macro has to expend to a valid AST element. <code>1, foo</code> isn&#39;t a valid AST element."}, {"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1524598407, "post_id": 50008535, "comment_id": 87035618, "body": "@mcarton thanks! Oh well ... so with no direct way to construct an argument list, cna you see some other solution?"}], "answers": [{"comments": [{"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "edited": false, "score": 0, "creation_date": 1524778224, "post_id": 50015767, "comment_id": 87120695, "body": "I see this uses an accumulator to construct the parameter list. I was wondering about something in that direction but didn&#39;t see how  to do it. This is more or less exactly what I needed - thanks!"}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 3, "last_activity_date": 1524638994, "creation_date": 1524638994, "answer_id": 50015767, "question_id": 50008535, "link": "https://stackoverflow.com/questions/50008535/calling-functions-with-different-numbers-of-arguments-in-rust-macros/50015767#50015767", "title": "Calling functions with different numbers of arguments in Rust macros", "body": "<p>You need to build the function call progressively as you go and only emit it at once in the end:</p>\n\n<pre><code>macro_rules! call (\n    ($f: expr, $($params:tt)*) =&gt; {\n        make_call!($f, () $($params)*)\n    };\n);\n\nmacro_rules! make_call {\n    ($f: expr, ($($args:tt)*)) =&gt; { $f($($args)*) };\n    ($f: expr, () I $($params:tt)*) =&gt; {\n        make_call!($f, (1) $($params)*)\n    };\n    ($f: expr, ($($args:tt)*) I $($params:tt)*) =&gt; {\n        make_call!($f, ($($args)*, 1) $($params)*)\n    };\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f3e92fc1251eceeea9ff94a2614b0814&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1201, "favorite_count": 0, "accepted_answer_id": 50015767, "answer_count": 1, "score": 2, "last_activity_date": 1524638994, "creation_date": 1524594353, "last_edit_date": 1524600040, "question_id": 50008535, "link": "https://stackoverflow.com/questions/50008535/calling-functions-with-different-numbers-of-arguments-in-rust-macros", "title": "Calling functions with different numbers of arguments in Rust macros", "body": "<p>I need a macro that will call functions with different numbers of arguments or a macro that will generate a valid argument list from its (repeating) parameters.</p>\n\n<p>I am fine with explicitly giving the information about the number of arguments to the macro, but I can't figure out how to generate the argument list for the function - I always stumble on the macros returning expressions rather than token tree.</p>\n\n<p>I made the following <a href=\"https://play.rust-lang.org/?gist=aae1deacf051ec4ef388ec93aa6c4123&amp;version=stable\" rel=\"nofollow noreferrer\">playground example</a>:</p>\n\n<pre><code>macro_rules! call (\n    ($f: expr, $($params:tt)*) =&gt; {\n        $f(make_params!($($params:tt)*))\n    };\n);\n\nmacro_rules! make_params {\n    () =&gt; {};\n    (I $($params: tt)*) =&gt; {\n        1, make_params!($($params:tt)*)\n    };\n}\n\n\nfn foo(a: i32, b: i32, c: i32) {\n    println!(\"foo: {} {} {}\", a, b, c);\n}\n\nfn bar(a: i32, b: i32) {\n    println!(\"bar: {} {}\", a, b);\n}\n\nfn main() {\n    call!(foo, I I I);\n    call!(bar, I I);\n}\n</code></pre>\n\n<p>The compiler complains with the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: macro expansion ignores token `,` and any following\n  --&gt; src/main.rs:10:10\n   |\n10 |         1, make_params!($($params:tt)*)\n   |          ^\n   |\nnote: caused by the macro expansion here; the usage of `make_params!` is likely invalid in expression context\n  --&gt; src/main.rs:3:12\n   |\n3  |         $f(make_params!($($params:tt)*))\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n</code></pre>\n\n<p>How can I treat the return of <code>make_params!</code> as a token stream (or such) rather than expression?</p>\n\n<p>My real use case is a bit more involved than this toy example. My functions have multiple parameter types which are constructed in different ways. In my case, just making macros <code>call1</code>, <code>call2!</code>, ... does not seem like a good solution, as I would need the likes of <code>call_IIOOI</code>, <code>call_IIIO</code>, etc. </p>\n"}, {"tags": ["rust", "structopt"], "comments": [{"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "edited": false, "score": 0, "creation_date": 1524584821, "post_id": 50005507, "comment_id": 87028225, "body": "As I said, the custom parser I&#39;m using right now works for <code>myexe AA BB</code> (note the space between the params) but I need to take <code>myexe AABB</code> with no space. I tried a parser like this<code>fn parse_hex_string(s: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;, ParseIntError&gt;</code> but the structopt macro panics about type mismatching because it seems to produce a <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1524586836, "creation_date": 1524586836, "answer_id": 50006529, "question_id": 50005507, "link": "https://stackoverflow.com/questions/50005507/how-to-use-structopt-to-parse-an-argument-into-a-vec-without-it-being-treated-as/50006529#50006529", "title": "How to use StructOpt to parse an argument into a Vec without it being treated as multiple arguments?", "body": "<p>StructOpt makes the distinction that a <code>Vec&lt;T&gt;</code> will always map to multiple arguments:</p>\n\n<blockquote>\n  <p><code>Vec&lt;T: FromStr&gt;</code></p>\n  \n  <p>list of options or the other positional arguments</p>\n  \n  <p><code>.takes_value(true).multiple(true)</code></p>\n</blockquote>\n\n<p>That means you need a single type to represent your data. Replace your <code>Vec&lt;u8&gt;</code> with a newtype:</p>\n\n<pre><code>#[derive(Debug)]\nstruct HexData(Vec&lt;u8&gt;);\n\n#[derive(Debug, StructOpt)]\npub struct Opt {\n    /// Data stream to send to the device\n    #[structopt(help = \"Data to send\")]\n    data: HexData,\n}\n</code></pre>\n\n<p>This leads to the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `HexData: std::str::FromStr` is not satisfied\n  --&gt; src/main.rs:16:10\n   |\n16 | #[derive(StructOpt)]\n   |          ^^^^^^^^^ the trait `std::str::FromStr` is not implemented for `HexData`\n   |\n   = note: required by `std::str::FromStr::from_str`\n</code></pre>\n\n<p>Let's implement <code>FromStr</code>:</p>\n\n<pre><code>impl FromStr for HexData {\n    type Err = hex::FromHexError;\n\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        hex::decode(s).map(HexData)\n    }\n}\n</code></pre>\n\n<p>And it works:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run -- DEADBEEF\nHexData([222, 173, 190, 239])\n\n$ cargo run -- ZZZZ\nerror: Invalid value for '&lt;data&gt;': Invalid character 'Z' at position 0\n</code></pre>\n"}], "owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1176, "favorite_count": 1, "accepted_answer_id": 50006529, "answer_count": 1, "score": 6, "last_activity_date": 1524586972, "creation_date": 1524583676, "last_edit_date": 1524586972, "question_id": 50005507, "link": "https://stackoverflow.com/questions/50005507/how-to-use-structopt-to-parse-an-argument-into-a-vec-without-it-being-treated-as", "title": "How to use StructOpt to parse an argument into a Vec without it being treated as multiple arguments?", "body": "<p>I have this code:</p>\n\n<pre><code>#[derive(StructOpt)]\npub struct Opt {\n    /// Data stream to send to the device\n    #[structopt(help = \"Data to send\", parse(try_from_str = \"parse_hex\"))]\n    data: Vec&lt;u8&gt;,\n}\n\nfn parse_hex(s: &amp;str) -&gt; Result&lt;u8, ParseIntError&gt; {\n    u8::from_str_radix(s, 16)\n}\n</code></pre>\n\n<p>This works for <code>myexe AA BB</code>, but I need to take <code>myexe AABB</code> as input.</p>\n\n<p>Is there a way to pass a custom parser to <code>structopt</code> to parse <code>AABB</code> into a <code>Vec&lt;u8&gt;</code>? I need to parse only the second form (no space).</p>\n\n<p>I know I can do it in 2 steps (storing into a <code>String</code> in the struct then parse it, but I like the idea that my <code>Opt</code> has the final type for everything.</p>\n\n<p>I tried a parser like this:</p>\n\n<pre><code>fn parse_hex_string(s: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;, ParseIntError&gt;\n</code></pre>\n\n<p>The <code>StructOpt</code> macro panics about type mismatches because it seems to produce a <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1524582080, "post_id": 50004832, "comment_id": 87026233, "body": "You will struggle a lot trying to do this. Box your struct and use <code>Rc</code>, it will be much more simple to handle that."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1524582248, "post_id": 50004832, "comment_id": 87026360, "body": "It is quite possible to have a vector of references (<a href=\"https://play.rust-lang.org/?gist=b64e42c7bb3b5699d9b6ba7da2339449&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a>). You just have to be aware how to construct them."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1524583396, "creation_date": 1524583396, "answer_id": 50005384, "question_id": 50004832, "link": "https://stackoverflow.com/questions/50004832/what-is-the-rust-way-of-keeping-borrowed-values-in-a-collection/50005384#50005384", "title": "What is the Rust way of keeping borrowed values in a collection?", "body": "<p>The \"Rust way\" is the way that doesn't lead to memory unsafety. Your code is invalid, as the compiler tells you:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `person` does not live long enough\n  --&gt; src/main.rs:13:26\n   |\n13 |         personrefs.push(&amp;person);\n   |                          ^^^^^^ borrowed value does not live long enough\n14 |         persons.push(person);\n15 |     }\n   |     - `person` dropped here while still borrowed\n16 |     println!(\"persons are {:#?}\", persons);\n17 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>You are creating a <code>Person</code> inside the loop, taking a reference to it, then <strong>moving the <code>Person</code> to a new memory address</strong>, invalidating the reference. If you accessed that reference, you'd be touching undefined memory, leading to segfaults at best or \"strange behavior\" / security vulnerabilities at worst.</p>\n\n<p>Likewise, you can't add the person to the <code>Vec</code> and then take a reference to that person in the loop because a subsequent iteration of the loop will mutate the vector. When you push to a vector, it might reallocate memory, again invalidating your references.</p>\n\n<p>I'd write this code as</p>\n\n<pre><code>fn main() {\n    let persons: Vec&lt;_&gt; = (0..3)\n        .map(|x| Person {\n            name: format!(\"Alice-{}\", x),\n        })\n        .collect();\n\n    let personrefs: Vec&lt;_&gt; = persons.iter().collect();\n    println!(\"persons are {:#?}\", persons);\n}\n</code></pre>\n"}], "owner": {"reputation": 35, "user_id": 9365793, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3731079d75e0a751f06072388172fdcc?s=128&d=identicon&r=PG&f=1", "display_name": "YuriGeinishAlgn", "link": "https://stackoverflow.com/users/9365793/yurigeinishalgn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 72, "favorite_count": 0, "accepted_answer_id": 50005384, "answer_count": 1, "score": 3, "last_activity_date": 1524583396, "creation_date": 1524581807, "last_edit_date": 1524582072, "question_id": 50004832, "link": "https://stackoverflow.com/questions/50004832/what-is-the-rust-way-of-keeping-borrowed-values-in-a-collection", "title": "What is the Rust way of keeping borrowed values in a collection?", "body": "<p>In this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Person {\n    name: String,\n}\n\nfn main() {\n    let mut persons = Vec::&lt;Person&gt;::with_capacity(3);\n    let mut personrefs = Vec::&lt;&amp;Person&gt;::with_capacity(persons.capacity());\n    for x in 0..persons.capacity() {\n        let person = Person {\n            name: format!(\"Alice-{}\", x),\n        };\n        personrefs.push(&amp;person);\n        persons.push(person);\n    }\n    println!(\"persons are {:#?}\", persons);\n}\n</code></pre>\n\n<p>I <em>sort of</em> understand why Rust wouldn't allow pushing <code>&amp;person</code>, but what is the Rust way of solving this? </p>\n\n<p>I have a <code>Vec</code> that \"owns\" <code>Person</code>s, but I'd also like to map persons to some other data without touching the owning <code>Vec</code> or duplicating <code>Person</code>s in memory. Like, have a <code>collections::HashMap&lt;&amp;Person, SomeOtherData&gt;</code>. If both <code>HashMap</code> and <code>Vec</code> have the same lifetime, wouldn't Rust know when to deallocate <code>Person</code>s?</p>\n"}, {"tags": ["rust", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524580685, "post_id": 50004127, "comment_id": 87025152, "body": "I believe your question is already answered by <a href=\"https://stackoverflow.com/q/28632968/155423\">Why doesn&#39;t Rust support trait object upcasting?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50004127/edit\">edit</a> your question to explain the difference. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 449, "user_id": 878298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d5910505de191043ea9aa614073ae05?s=128&d=identicon&r=PG", "display_name": "Sergey Mitskevich", "link": "https://stackoverflow.com/users/878298/sergey-mitskevich"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524581206, "post_id": 50004127, "comment_id": 87025540, "body": "@Shepmaster Thanks for the link, I somehow missed it! Although the accepted answer is 3 years old, but if there is really no way to upcast trait objects without implementation modification, please close this one as duplicate."}], "owner": {"reputation": 449, "user_id": 878298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d5910505de191043ea9aa614073ae05?s=128&d=identicon&r=PG", "display_name": "Sergey Mitskevich", "link": "https://stackoverflow.com/users/878298/sergey-mitskevich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 50, "favorite_count": 0, "closed_date": 1524581473, "answer_count": 0, "score": 0, "last_activity_date": 1524580705, "creation_date": 1524579829, "last_edit_date": 1524580705, "question_id": 50004127, "link": "https://stackoverflow.com/questions/50004127/how-to-convert-trait-object-to-sub-trait-object", "closed_reason": "Duplicate", "title": "How to convert trait object to &quot;sub-trait&quot; object?", "body": "<p>This code:</p>\n\n<pre><code>trait A {}\n\ntrait B: A {}\n\nstruct S;\n\nimpl A for S {}\n\nimpl B for S {}\n\nfn main() {\n    let s = S;\n    let trait_obj_b: &amp;B = &amp;s;\n    let trait_obj_a: &amp;A = trait_obj_b;\n} \n</code></pre>\n\n<p>fails with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:14:27\n   |\n14 |     let trait_obj_a: &amp;A = trait_obj_b;\n   |                           ^^^^^^^^^^^ expected trait `A`, found trait `B`\n   |\n   = note: expected type `&amp;A`\n              found type `&amp;B`\n</code></pre>\n\n<p>Why? Since <code>B</code> requires <code>A</code>, shouldn't all trait objects <code>&amp;B</code> automatically implement <code>&amp;A</code>? Is there a way to convert <code>&amp;B</code> to <code>&amp;A</code> without changing trait definitions or implementations?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=347946d23079ffab13503ce9296f2e7d&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": ["algorithm", "rust", "conways-game-of-life"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 2, "creation_date": 1524580549, "post_id": 50004105, "comment_id": 87025037, "body": "Asking for the <i>right</i> way to solve a task attracts opinionated answers, which is not encouraged at SO. That said, in my opinion you probably want a toroidal grid (one that wraps around on the edges), which is a pretty good approximation of an infinite grid if it is <i>large enough</i>."}], "answers": [{"comments": [{"owner": {"reputation": 617, "user_id": 6565510, "user_type": "registered", "profile_image": "https://graph.facebook.com/1177793125605707/picture?type=large", "display_name": "Gabriel Carneiro", "link": "https://stackoverflow.com/users/6565510/gabriel-carneiro"}, "edited": false, "score": 0, "creation_date": 1524584708, "post_id": 50004659, "comment_id": 87028166, "body": "Uhn, thanks for the answer, I&#39;ll adjust my code."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1524581378, "creation_date": 1524581378, "answer_id": 50004659, "question_id": 50004105, "link": "https://stackoverflow.com/questions/50004105/should-conways-game-of-life-have-an-infinite-map-or-should-it-be-limited/50004659#50004659", "title": "Should Conway&#39;s Game of Life have an infinite map or should it be limited?", "body": "<p>The <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\" rel=\"nofollow noreferrer\">rules for the Game of Life</a> state (emphasis mine):</p>\n\n<blockquote>\n  <p>The universe of the Game of Life is an <strong>infinite two-dimensional orthogonal grid</strong> of square \"cells\", each of which is in one of two possible states, alive or dead, (or \"populated\" and \"unpopulated\" respectively).</p>\n</blockquote>\n\n<p>If you don't make your grid infinite, <em>you haven't implemented the Game of Life</em>, but rather you've implemented some variant.</p>\n"}], "owner": {"reputation": 617, "user_id": 6565510, "user_type": "registered", "profile_image": "https://graph.facebook.com/1177793125605707/picture?type=large", "display_name": "Gabriel Carneiro", "link": "https://stackoverflow.com/users/6565510/gabriel-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 321, "favorite_count": 0, "closed_date": 1524616507, "accepted_answer_id": 50004659, "answer_count": 1, "score": 0, "last_activity_date": 1524581389, "creation_date": 1524579740, "last_edit_date": 1524581389, "question_id": 50004105, "link": "https://stackoverflow.com/questions/50004105/should-conways-game-of-life-have-an-infinite-map-or-should-it-be-limited", "closed_reason": "Opinion-based", "title": "Should Conway&#39;s Game of Life have an infinite map or should it be limited?", "body": "<p>I'm developing a Conway's implementation in Rust to further use it with WebAssembly, and I'm thinking about how I'm supposed to treat the map boundaries. At the moment, I'm considering a cell at the limits as a cell that has less neighbors, although I've seen some implementations that treat the map as infinite.</p>\n\n<p>Treating the map with limited bounds generates some weird behaviour, like  a Glider becoming a Block:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>------generation(0)------\n0.0..\n.00..\n.0...\n------generation(1)------\n..0..\n0.0..\n.00..\n------generation(2)------\n.0...\n..00.\n.00..\n------generation(3)------\n..0..\n...0.\n.000.\n------generation(4)------\n.....\n.0.0.\n..00.\n------generation(5)------\n.....\n...0.\n..00.\n------generation(6)------\n.....\n..00.\n..00.\n------generation(7)------\n.....\n..00.\n..00.\n</code></pre>\n\n<p>Is the \"right\" way to treat the map as infinite as I saw <a href=\"http://pmav.eu/stuff/javascript-game-of-life-v3.1.1/\" rel=\"nofollow noreferrer\">here</a> or is the \"right\" way to limit the map? If there isn't any \"right\" way, which of those two you think that is the best?</p>\n\n<p>If you'd like to see my code, it's <a href=\"https://github.com/gabrielcarneiro97/Conways-Game-of-Life/blob/master/rust-module/src/main.rs\" rel=\"nofollow noreferrer\">here</a>. I didn't post any code sample because the question isn't about the code itself.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524569236, "post_id": 50000453, "comment_id": 87016952, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/49986734/when-should-i-add-mut-to-closures\">When should I add mut to closures?</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1524569287, "post_id": 50000453, "comment_id": 87016983, "body": "For people thinking about closing this as a dupe: There are similar questions like <a href=\"https://stackoverflow.com/questions/33662098/cannot-move-out-of-captured-outer-variable-in-an-fn-closure\">&quot; Cannot move out of captured outer variable in an <code>Fn</code> closure &quot;</a> or <a href=\"https://stackoverflow.com/questions/28521637/how-can-i-move-a-captured-variable-into-a-closure-within-a-closure\">&quot;How can I move a captured variable into a closure within a closure? &quot;</a>, but both have examples far from <i>minimal</i>. I&#39;d propose to keep this question as it has a nice small example."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524569310, "post_id": 50000453, "comment_id": 87016999, "body": "Change <code>Fn</code> to <code>FnOnce</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1524569406, "post_id": 50000453, "comment_id": 87017067, "body": "@LukasKalbertodt a duplicate still serves as an example; the linked questions contain the answer."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 10, "last_activity_date": 1524569933, "creation_date": 1524569933, "answer_id": 50000747, "question_id": 50000453, "link": "https://stackoverflow.com/questions/50000453/cannot-move-out-of-captured-outer-variable-in-an-fn-closure/50000747#50000747", "title": "Cannot move out of captured outer variable in an Fn closure", "body": "<p>A closure which implements <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Fn.html\" rel=\"noreferrer\"><code>Fn</code></a> <strong>can be called multiple times</strong> (the receiver parameter is <code>&amp;self</code>, an immutable reference to the closure):</p>\n\n<pre><code>fn call_multiple_times&lt;F: Fn(u8) -&gt; i32&gt;(f: F) {\n    // Works! We can call the closure mutliple times\n    let a = f(1);\n    let b = f(27);\n    let c = f(31);\n}\n</code></pre>\n\n<p>This means that with your closure <code>Fn() -&gt; String</code>, you could do this:</p>\n\n<pre><code>let s1 = adder();\nlet s2 = adder();\n</code></pre>\n\n<p>Now you would have <strong>two <code>String</code>s although you only started with one! Magic?</strong> You can of course get another string by cloning the original string, but we don't do that here. So it clearly can't work.</p>\n\n<hr>\n\n<p>You can fix that in two ways. Either you don't need your closure to be called multiple times. In that case you can simply change <code>Fn</code> to <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.FnOnce.html\" rel=\"noreferrer\"><code>FnOnce</code></a> (a less demanding trait). An <code>FnOnce</code> closure can only be called ... well ... once. This works:</p>\n\n<pre><code>fn make_adder(x: String) -&gt; Box&lt;FnOnce() -&gt; String&gt; {\n    Box::new(|| x)\n}\n</code></pre>\n\n<p>On the other hand, maybe you want the closure to be called multiple times and always want to return a new clone of the string. You can do that like this:</p>\n\n<pre><code>fn make_adder(x: String) -&gt; Box&lt;Fn() -&gt; String&gt; {\n    Box::new(move || x.clone())\n}\n</code></pre>\n\n<p>Here we added a <code>.clone()</code> call (since in Rust, deep clones are never implicit!) and we added the <code>move</code> keyword. The latter is necessary to explicitly move the string <code>x</code> into the closure, not just borrow it.</p>\n"}], "owner": {"reputation": 251, "user_id": 6728762, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a59c90121bdea220e0364b6783c1784e?s=128&d=identicon&r=PG&f=1", "display_name": "Dajavu", "link": "https://stackoverflow.com/users/6728762/dajavu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2283, "favorite_count": 1, "answer_count": 1, "score": 10, "last_activity_date": 1524569933, "creation_date": 1524569002, "last_edit_date": 1524569360, "question_id": 50000453, "link": "https://stackoverflow.com/questions/50000453/cannot-move-out-of-captured-outer-variable-in-an-fn-closure", "title": "Cannot move out of captured outer variable in an Fn closure", "body": "<pre><code>fn make_adder(x: String) -&gt; Box&lt;Fn() -&gt; String&gt; {\n    Box::new(|| x)\n}\n\nfn main() {\n    make_adder(String::from(\"a\"));\n}\n</code></pre>\n\n<p>This results in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n --&gt; src/main.rs:2:17\n  |\n1 | fn make_adder(x: String) -&gt; Box&lt;Fn() -&gt; String&gt; {\n  |               - captured outer variable\n2 |     Box::new(|| x)\n  |                 ^ cannot move out of captured outer variable in an `Fn` closure\n</code></pre>\n\n<p>How can I make it correct?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1524560616, "post_id": 49997429, "comment_id": 87011304, "body": "You are using a nightly compiler, aren&#39;t you? If you switch to stable, you can see the actual fix for this."}, {"owner": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1524562788, "post_id": 49997429, "comment_id": 87012704, "body": "Wow! I used stable compiler and it gave me a straight forward fix. How can I know that going forward?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524564184, "post_id": 49997429, "comment_id": 87013624, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/40277917/match-tuple-as-input-to-map\">Match tuple as input to map</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524566515, "post_id": 49997429, "comment_id": 87015150, "body": "@ljedrz I don&#39;t think we should close this as duplicate because this is probably the first question with the nightly compiler error (these ergonomic improvements...)."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1524566536, "post_id": 49997429, "comment_id": 87015165, "body": "See <a href=\"https://github.com/rust-lang/rust/issues/50195\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/50195</a>"}], "answers": [{"comments": [{"owner": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "edited": false, "score": 0, "creation_date": 1524562731, "post_id": 49997496, "comment_id": 87012659, "body": "That&#39;s great! What is the type of <code>v</code> in <code>let u = counts.iter().max_by_key(|v| v.1);</code>. Is it not a tuple?"}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "reply_to_user": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "edited": false, "score": 0, "creation_date": 1524566608, "post_id": 49997496, "comment_id": 87015212, "body": "Dang! You cought it. I don&#39;t know the correct term for that, but let me try to clarify it. v is copyable (yes, it&#39;s a tuple), because every element of it is copyable (Copyable just means we can do a memcpy (see <a href=\"https://stackoverflow.com/questions/31012923/what-is-the-difference-between-copy-and-clone\" title=\"what is the difference between copy and clone\">stackoverflow.com/questions/31012923/&hellip;</a>)) The other is an unpacked tuple which is not copyable (although the elements are). I can&#39;t tell you correctly why this bahaves like that, but it does :D Maybe somebody can explain better, sorry."}, {"owner": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "edited": false, "score": 1, "creation_date": 1524588676, "post_id": 49997496, "comment_id": 87030524, "body": "Thanks @hellow do check the answer by Lukas for detailed explanation!"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 2, "last_activity_date": 1524566654, "last_edit_date": 1524566654, "creation_date": 1524560530, "answer_id": 49997496, "question_id": 49997429, "link": "https://stackoverflow.com/questions/49997429/max-by-key-on-map-doesnt-allow-destructuring-of-tuple-into-key-value-pair/49997496#49997496", "title": "max_by_key on Map doesn&#39;t allow destructuring of tuple into key-value pair", "body": "<p>In short, use a reference (<a href=\"https://play.rust-lang.org/?gist=e319f82dde43988c695b24c693289bf8&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<pre><code>let v = counts.iter().max_by_key(|&amp;(_, v)| v);\n</code></pre>\n\n<p>In long, the first example works, because <code>v</code> is copyable, which means you will get a copy of <code>v</code> in your closure. <strike>Tuples are not copyable, which means the tuple will get moved out of the hashmap, which is not permitted, that's why you have to use a reference.</strike></p>\n"}, {"comments": [{"owner": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "edited": false, "score": 1, "creation_date": 1524588755, "post_id": 50000027, "comment_id": 87030586, "body": "Thanks @Lukas I understood where I was going wrong! Thanks a lot for a detailed and illustrated explanation. It clears many things up."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 13, "last_activity_date": 1524568135, "last_edit_date": 1524568135, "creation_date": 1524567674, "answer_id": 50000027, "question_id": 49997429, "link": "https://stackoverflow.com/questions/49997429/max-by-key-on-map-doesnt-allow-destructuring-of-tuple-into-key-value-pair/50000027#50000027", "title": "max_by_key on Map doesn&#39;t allow destructuring of tuple into key-value pair", "body": "<p>The solution is either to add a single <code>&amp;</code>:</p>\n\n<pre><code>counts.iter().max_by_key(|&amp;(k, v)| v);\n//                        ^\n</code></pre>\n\n<p>... or (on nightly) to add a single <code>*</code>:</p>\n\n<pre><code>counts.iter().max_by_key(|(k, v)| *v);\n//                                ^\n</code></pre>\n\n<p><em>It follows a detailed explanation with instructions on how to find out yourself. If you don't have the time, there is a summary at the end.</em></p>\n\n<hr>\n\n<h3>So why does this work?</h3>\n\n<p>In order to find out, let's first analyze the type of <code>x</code> in this snippet (which is your first version, but I renamed <code>v</code> to <code>x</code> for clarity):</p>\n\n<pre><code>counts.iter().max_by_key(|x| x.1);\n</code></pre>\n\n<p>To check the type of <code>x</code> we basically have two possibilities: dig through the docs or let the compiler tell us. Let's dig through the docs first and then confirm that knowledge with the compiler. </p>\n\n<p>So <code>counts</code> is a <code>HashMap&lt;{integer}, {integer}&gt;</code> where <code>{integer}</code> is just some kind of integer: the compiler still has to figure out which integer exactly. If there is no more specific information given (like in your example), the compiler defaults to <code>i32</code> for integers. To make it easier for us, let's fix the integer types:</p>\n\n<pre><code>let mut counts: HashMap&lt;i32, u32&gt; = HashMap::new();\n</code></pre>\n\n<p>So now you write <code>counts.iter()</code> ... let's check what this does by looking in <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.iter\" rel=\"noreferrer\">the docs</a>:</p>\n\n<pre><code>pub fn iter(&amp;self) -&gt; Iter&lt;K, V&gt;\n</code></pre>\n\n<p>Now we can either click on <code>Iter</code> to get more information about that type or we can click the exclamation mark on the left:</p>\n\n<p><a href=\"https://i.stack.imgur.com/pz0LE.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/pz0LE.png\" alt=\"enter image description here\"></a></p>\n\n<p>Either way, we see this important impl:</p>\n\n<pre><code>impl&lt;'a, K, V&gt; Iterator for Iter&lt;'a, K, V&gt;\n    type Item = (&amp;'a K, &amp;'a V);\n</code></pre>\n\n<p>This tells us that the return type of <code>HashMap::iter()</code> is an iterator that yields items of the type <code>(&amp;K, &amp;V)</code> (a 2-tuple of references). Here, <code>K</code> is the key type (<code>i32</code>) and <code>V</code> is the value type (<code>u32</code>) of the hash map. So our iterator yields elements of type <code>(&amp;i32, &amp;u32)</code>.</p>\n\n<p>Ok great! Now we need to check <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.max_by_key\" rel=\"noreferrer\"><code>Iterator::max_by_key</code></a>:</p>\n\n<pre><code>fn max_by_key&lt;B, F&gt;(self, f: F) -&gt; Option&lt;Self::Item&gt; \nwhere\n    B: Ord,\n    F: FnMut(&amp;Self::Item) -&gt; B, \n</code></pre>\n\n<p>It gets slightly complicated but don't worry! We see that the method takes (in addition to <code>self</code>) one argument <code>f: F</code>. This is the closure you pass in. The <code>where</code> clause tells us that <code>F: FnMut(&amp;Self::Item)</code> meaning that <code>F</code> is a function thing that has one argument of the type <code>&amp;Self::Item</code>. </p>\n\n<p>But we already know what the <code>Self::Item</code> of our iterator is: <code>(&amp;i32, &amp;u32)</code>. So <code>&amp;Self::Item</code> (with the added reference) is <strong><code>&amp;(&amp;i32, &amp;u32)</code></strong>! This is the type of the closures argument, and thus the type of <code>x</code>.</p>\n\n<p>Let's check if our research was correct. You can easily instruct the compiler to tell you the type of a variable <code>x</code> by enforcing a type error. Let's do it by adding the expression <code>x == ()</code>. Here we try to compare your variable to <code>()</code> which never works. And indeed we get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>14 |         x == ();\n   |           ^^ can't compare `&amp;(&amp;i32, &amp;u32)` with `()`\n</code></pre>\n\n<p>Success! We correctly found the type of <code>x</code>. So how does this help us?</p>\n\n<p>In the second example, you wrote:</p>\n\n<pre><code>counts.iter().max_by_key(|(k, v)| v);\n</code></pre>\n\n<p>So you used pattern matching in the argument list of the closure. But one might think: wait, how can the compiler even match a pattern <code>(k, v)</code> to the type <code>&amp;(&amp;i32, &amp;u32)</code>? There is a reference in the beginning that doesn't fit!</p>\n\n<p>And this is exactly what happens on the stable compiler:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n  --&gt; src/main.rs:18:39\n   |\n18 |     counts.iter().max_by_key(|(k, v)| v);\n   |                               ^^^^^^ help: consider using a reference: `&amp;(k, v)`\n</code></pre>\n\n<p>You can see that the pattern <code>&amp;(k, v)</code> does fit to <code>&amp;(&amp;i32, &amp;u32)</code> (with <code>k = &amp;i32</code> and <code>v = &amp;u32</code>). </p>\n\n<p>So talking about the stable compiler, your problem simply was that your pattern didn't fit to the expected type. </p>\n\n<h3>So what's up with the nightly error?</h3>\n\n<p>Recently, some ergonomic improvements landed in Rust (still nightly only) which can help reduce noisy code in common situations. This particular improvement was proposed in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" rel=\"noreferrer\">RFC 2005</a>. Such a common situation is matching on a reference of a tuple and wanting to get references to the elements instead, like in this case where we match on the type <code>&amp;(bool, String)</code>:</p>\n\n<pre><code>match &amp;(true, \"hi\".to_string()) {\n    // ...\n}\n</code></pre>\n\n<p>So without thinking about references one would probably use the pattern <code>(b, s)</code> (similar like you did with <code>(k, v)</code>). But this doesn't work (on stable) since the pattern doesn't fit (it's missing a reference).</p>\n\n<p>So instead the pattern <code>&amp;(b, s)</code> works -- at least kind of. Because while the pattern matches the type, now <code>s</code> has the type <code>String</code> and is thus trying to move out of the original tuple which is not allowed (since we only had a reference to it). </p>\n\n<p>So what you write instead is: <code>&amp;(b, ref s)</code>. Now <code>s</code> has the type <code>&amp;String</code> which is fine.</p>\n\n<p>Since <code>&amp;</code> and <code>ref</code> seems noisy to many people, Rust wants to make these situations easier. Skipping over some details, Rust basically automatically converts a pattern like <code>(a, b)</code> into <code>&amp;(ref a, ref b)</code> when the pattern is used on a reference type. Again, this helps in a few situations, but also introduces a few unexpected references -- like in your example:</p>\n\n<pre><code>counts.iter().max_by_key(|(k, v)| v);\n</code></pre>\n\n<p>As we saw, the pattern <code>(k, v)</code> actually doesn't fit to the type, but Rust applies the rule and converts your pattern into <code>&amp;(ref k, ref v)</code>. Now the pattern matching works, but we have another problem:</p>\n\n<p>Now <code>v</code> is a <code>&amp;&amp;u32</code>: a reference to a reference! (To see why this is the case, just carefully check all the types we discussed above.) But the inner reference is something that only lives as long as the iterator does, so we can't return it and yada yada lifetime problems. The easy solution is simply to remove the outer reference since we don't need it. </p>\n\n<p>We achieve this by either making our pattern explicit (and make it work on stable):</p>\n\n<pre><code>counts.iter().max_by_key(|&amp;(k, v)| v);\n</code></pre>\n\n<p>Now <code>v</code> is <code>&amp;i32</code> again (but the <code>i32</code> value we are referencing lives as long as the hash map, so everything is fine). Or we could instead remove the outer reference by adding a <code>*</code>:</p>\n\n<pre><code>counts.iter().max_by_key(|(k, v)| *v);\n</code></pre>\n\n<p>This still uses the nightly ergonomic improvement, but removes the outer reference, so that <code>*v</code> is also <code>&amp;i32</code>. </p>\n\n<p>As you might notice, since <code>i32</code> is <code>Copy</code> we can also add two <code>*</code>.</p>\n\n<h3>Summary</h3>\n\n<p>Well that was a deep dive into the problem. In short:</p>\n\n<ul>\n<li>On <strong>stable</strong>, your pattern is incompatible with the type (<code>(k, v)</code> doesn't fit to <code>&amp;(&amp;{integer}, &amp;{integer})</code>. So you can fix the problem by fixing your pattern.</li>\n<li>On <strong>nightly</strong> (with the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" rel=\"noreferrer\">RFC 2005 match ergonomics</a>), you were bitten by an additional reference layer introduced by the compiler. This leads to lifetime errors. Luckily you don't need this additional reference so you can simply remove it.</li>\n</ul>\n"}], "owner": {"reputation": 19030, "user_id": 69746, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8bb00903daaba6a14c238611b21ab677?s=128&d=identicon&r=PG", "display_name": "Xolve", "link": "https://stackoverflow.com/users/69746/xolve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 632, "favorite_count": 1, "accepted_answer_id": 50000027, "answer_count": 2, "score": 9, "last_activity_date": 1524587306, "creation_date": 1524560316, "last_edit_date": 1524587306, "question_id": 49997429, "link": "https://stackoverflow.com/questions/49997429/max-by-key-on-map-doesnt-allow-destructuring-of-tuple-into-key-value-pair", "title": "max_by_key on Map doesn&#39;t allow destructuring of tuple into key-value pair", "body": "<p>I am learning Rust and fairly good with concept of ownership, borrow, and references. I have reached Ch.8 of the second edition of the Rust Book. </p>\n\n<p>I'm implementing the <code>mode</code> function using <code>map</code> <a href=\"https://doc.rust-lang.org/book/second-edition/ch08-03-hash-maps.html#summary\" rel=\"noreferrer\" title=\"exercise here\">as given in an exercise</a>. I wrote following implementation using <code>Iterator::max_by_key</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let vs = vec![0, 0, 1, 1, 3, 4, 5, 6, 3, 3, 3];\n\n    let mut counts = HashMap::new();\n    for num in vs {\n        let count = counts.entry(num).or_insert(0);\n        *count += 1;\n    }\n\n    // This works\n    let u = counts.iter().max_by_key(|v| v.1);\n\n    // This doesn't work\n    let v = counts.iter().max_by_key(|(k, v)| v);\n}\n</code></pre>\n\n<p>I get following compiler error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for pattern due to conflicting requirements\n  --&gt; src/main.rs:16:43\n   |\n16 |     let v = counts.iter().max_by_key(|(k, v)| v);\n   |                                           ^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 16:38...\n  --&gt; src/main.rs:16:38\n   |\n16 |     let v = counts.iter().max_by_key(|(k, v)| v);\n   |                                      ^^^^^^^^^^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:16:43\n   |\n16 |     let v = counts.iter().max_by_key(|(k, v)| v);\n   |                                           ^\nnote: but, the lifetime must be valid for the method call at 16:13...\n  --&gt; src/main.rs:16:13\n   |\n16 |     let v = counts.iter().max_by_key(|(k, v)| v);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so that a type/lifetime parameter is in scope here\n  --&gt; src/main.rs:16:13\n   |\n16 |     let v = counts.iter().max_by_key(|(k, v)| v);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>What does this error mean and why this is not allowed?</p>\n\n<p><em>Update 1:</em> <a href=\"https://stackoverflow.com/questions/40277917\">Match tuple as input to map</a> solves my problem. If I were using a stable compiler I wouldn't have asked this question. Here I got unintended compile errors, so I'm not closing this as duplicate.</p>\n"}, {"tags": ["generics", "rust", "polymorphism", "covariance"], "comments": [{"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 1, "creation_date": 1524560506, "post_id": 49996627, "comment_id": 87011209, "body": "It&#39;s funny, I was just reading that page today, and didn&#39;t really get that part either. The question that I have is, what does the fact that <code>&amp;mut Box&lt;T&gt;</code>  being invariant over <code>T</code> actually prevent? For example, <a href=\"https://play.rust-lang.org/?gist=457974e57f4e702aab7bf7a7b0c817f6&amp;version=stable\" rel=\"nofollow noreferrer\">this code</a> that replaces the <code>&amp;&#39;a str</code> in a <code>Box&lt;&amp;&#39;a str&gt;</code> with an <code>&amp;&#39;static str</code>, works fine, as it should, but it seems like the kind of thing that would be disallowed because <code>&amp;mut T</code> is invariant over <code>T</code>."}], "answers": [{"comments": [{"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524595648, "post_id": 49999975, "comment_id": 87034184, "body": "Thanks for the response. I&#39;ve thought about your answer for a long while and I think I&#39;ve got the gist of what  you&#39;re saying. I hope you can check if my understanding is correct."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524595661, "post_id": 49999975, "comment_id": 87034196, "body": "In the paragraph above the <code>Box</code> and <code>Vec</code> section in the nomicon, it was explained  that an <code>&amp;mut T</code> cannot be covariant over <code>T</code> because <code>T</code> has an owner that should ultimately  &#39;control&#39; the lifetime of <code>T</code>. But had we allowed <code>&amp;mut T</code> to be covariant over <code>T</code>, then we could  have used a short lived value where a longer one is required, as shown in the Nomicon&#39;s sample code with the function <code>overwrite</code>. The invariance protects us from that illegal operation."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524595697, "post_id": 49999975, "comment_id": 87034208, "body": "Allowing a <code>Box&lt;E&gt;</code> to be covariant over <code>E</code> does not introduce the risk of having its stored value be substituted with an illegal one because the only way to modify a value being stored in a <code>Box</code> is to first obtain a mutable reference to the value (e.g. use <code>.borrow_mut()</code> to get <code>&amp;mut E</code>). Therefore in every possible context where we intend to modify the value within a <code>Box</code>, we have to go through an <code>&amp;mut E</code> which is invariant in <code>E</code>, which then means we can&#39;t do the illegal operation, which also means <code>Box&lt;E&gt;</code> is effectively invariant in <code>E</code> in a mutation context."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 1, "creation_date": 1524655429, "post_id": 49999975, "comment_id": 87057734, "body": "@LYSim I think you&amp;#39;re overthinking it. The text in the nomicon is not well written and I don&amp;#39;t think you should worry about understanding it if you already understand why it&amp;#39;s ok for <code>T</code> to be covariant in <code>Box&amp;lt;T&amp;gt;</code>. What you&amp;#39;ve said is basically right, though I&amp;#39;m not sure about your last sentence. Any <code>Box&amp;lt;T&amp;gt;</code> can be mutated via <code>borrow_mut()</code> and the variance we&amp;#39;re talking about here is in the argument to the <i>type constructor</i>. The whole discussion here is to show that it&#39;s safe for that variance to be permitted."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524658337, "post_id": 49999975, "comment_id": 87059826, "body": "Thank you @Peter Hall, I think I understand the issue a bit more now. If I don&#39;t receive any other answers to this question, I&#39;ll contact the guys who do the documentation and see if they can improve the section."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1524571108, "last_edit_date": 1524571108, "creation_date": 1524567477, "answer_id": 49999975, "question_id": 49996627, "link": "https://stackoverflow.com/questions/49996627/need-clarification-on-the-rust-nomicon-section-on-covariance-of-box-vec-a/49999975#49999975", "title": "Need clarification on the Rust Nomicon section on (co)variance of `Box`, `Vec` and other collections", "body": "<p>I think that section could use some work to make it clearer.</p>\n\n<blockquote>\n  <p>I'm slightly confused as to what the mutable reference is to. Is it a mutable reference to the Box / Vec?</p>\n</blockquote>\n\n<p>No. It means, if you store values in <em>an existing</em> <code>Box</code>, you'd have to do that via a mutable reference to the data, for example using <code>Box::borrow_mut()</code>.</p>\n\n<p>The main idea this section is trying to convey is that you can't modify the contents of a <code>Box</code> while there is another reference to the contents. That's guaranteed because the <code>Box</code> owns its contents. In order to change the contents of a <code>Box</code>, you have to do it by taking a new mutable reference.</p>\n\n<p>This means that \u2014 even if you did overwrite the contents with a shorter-lived value \u2014 it wouldn't matter because no one else could be using the old value. The borrow checker wouldn't allow it.</p>\n\n<p>This is different from function arguments because a function has a code block which can actually do things with its arguments. In the case of a <code>Box</code> or <code>Vec</code>, you have to get the contents out, by mutably borrowing them, before you can do anything to them.</p>\n"}, {"comments": [{"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524626775, "post_id": 50013206, "comment_id": 87043501, "body": "What you said sort of makes sense, but I&#39;m struggling to see the connection between not being able to use an <code>&amp;mut Box&lt;&amp;&#39;static str&gt;</code> where an <code>&amp;mut Box&lt;&amp;&#39;a str&gt;</code> is expected and this sentence: &quot;it&#39;s fine for them to be variant because you can only store values in them via a mutable reference!&quot;."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1524628349, "post_id": 50013206, "comment_id": 87043845, "body": "After reading the response by @peter-hall, I&#39;m more inclined to agree with him that the &#39;mutable reference&#39; mentioned is the mutable reference to the item being stored in the <code>Box</code> or <code>Vec</code>. But that leaves the question of what mechanism actually makes the <code>Box</code> or <code>Vec</code> invariant <i>when</i> the mutable reference is taken."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525407832, "post_id": 50013206, "comment_id": 87351931, "body": "heads up, the nomicon has revised the section, you might want to give it a look. I&#39;ve posted a link and summarized what I know in another answer to this question."}], "tags": [], "owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "is_accepted": false, "score": 0, "last_activity_date": 1524623548, "creation_date": 1524623548, "answer_id": 50013206, "question_id": 49996627, "link": "https://stackoverflow.com/questions/49996627/need-clarification-on-the-rust-nomicon-section-on-covariance-of-box-vec-a/50013206#50013206", "title": "Need clarification on the Rust Nomicon section on (co)variance of `Box`, `Vec` and other collections", "body": "<p>I guess the point is that, while you can convert a <code>Box&lt;&amp;'static str&gt;</code> to a <code>Box&lt;&amp;'a str&gt;</code> (because <code>Box&lt;T&gt;</code> is covariant), you can't convert an <code>&amp;mut Box&lt;&amp;'static str&gt;</code> to an <code>&amp;mut Box&lt;&amp;'a str&gt;</code> (because <code>&amp;mut T</code> is invariant).</p>\n"}, {"comments": [{"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525225178, "post_id": 50122775, "comment_id": 87270071, "body": "That was the initial impression I got, that modifying a <code>Box&lt;T&gt;</code> or <code>Vec&lt;T&gt;</code> requires getting an <code>&amp;mut self</code> reference, and that is the mutable reference mentioned. But that doesn&#39;t jive with the statement that &#39;you can only store values in them via a mutable reference!&#39;, since you can instantiate a <code>Box</code> with an initial value without involving a mutable reference."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525225397, "post_id": 50122775, "comment_id": 87270119, "body": "Furthermore, there&#39;s this sentence you mentioned: &quot;The type <code>&amp;&#39;a mut Vec&lt;T&gt;</code> is invariant, and therefore prevents you from smuggling a short-lived type into <code>Vec&lt;T&gt;</code>.&quot;. I understand that <code>&amp;&#39;a mut Vec&lt;T&gt;</code> is invariant over <code>Vec&lt;T&gt;</code>. But, I am struggling to visualize how said invariance prevents us from &#39;inserting&#39; a shorter-lived element into <code>Vec&lt;T&gt;</code>. Could you perhaps write an example code to show me what you mean?"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525242478, "post_id": 50122775, "comment_id": 87274449, "body": "Hi Sim, I added a snippet. I hope it may help"}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525245334, "post_id": 50122775, "comment_id": 87275845, "body": "I think I finally get it now. Let me summarize to see if I&#39;m correct. Consider in your example lifetimes <code>&#39;b : &#39;a</code> where say <code>&#39;b</code> is some lifetime in the enclosing scope, and <code>&#39;a</code> is the lifetime of <code>&quot;hola&quot;</code> in the nested block. Now, since in general <code>&amp;mut T</code> is invariant over <code>T</code>, this means that <code>&amp;mut Vec&lt;&amp;&#39;b str&gt; : &amp;mut Vec&lt;&amp;&#39;a str&gt;</code> is <b>not true even though</b> <code>Vec&lt;&amp;&#39;b str&gt; : Vec&lt;&amp;&#39;a str&gt;</code> is true."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525246204, "post_id": 50122775, "comment_id": 87276336, "body": "Therefore, while <code>Vec::push()</code> will happily accept an <code>&amp;mut self</code> argument of <code>&amp;mut Vec&lt;&amp;&#39;a str&gt;</code>, it cannot (and shouldn&#39;t) accept <code>&amp;mut Vec&lt;&amp;&#39;b str&gt;</code> because it&#39;s not a subtype of the former. This then prevents us from being able to store items that do not live long enough into <code>Vec&lt;&amp;&#39;b str&gt;</code> (such as <code>&quot;hola&quot;</code>). And that is what was meant when the nomicon said that taking a mutable reference makes &#39;the whole type invariant&#39;."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525246873, "post_id": 50122775, "comment_id": 87276676, "body": "Yes, you summarized exactly what I&#39;ve understand about variance related to lifetimes."}, {"owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525247101, "post_id": 50122775, "comment_id": 87276798, "body": "Honestly what you&#39;ve said seems to make the most sense. Showing <code>push()</code> in terms of a qualified method call was what really helped me. I&#39;m selecting your answer as best. We&#39;ll see what the nomicon maintainers say in the open issue."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "edited": false, "score": 0, "creation_date": 1525248096, "post_id": 50122775, "comment_id": 87277262, "body": "For the Box&lt;T&gt; case, see this <a href=\"https://play.rust-lang.org/?gist=8db43eb47f3ed62147e30d7003b632c5&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">example</a>. Box::new create a boxed instance it does not assign a value to something that already exists and has a lifetime. This is what I understand, I hope to not add confusion to the argument!"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1525242384, "last_edit_date": 1525242384, "creation_date": 1525203753, "answer_id": 50122775, "question_id": 49996627, "link": "https://stackoverflow.com/questions/49996627/need-clarification-on-the-rust-nomicon-section-on-covariance-of-box-vec-a/50122775#50122775", "title": "Need clarification on the Rust Nomicon section on (co)variance of `Box`, `Vec` and other collections", "body": "<p>From the <a href=\"https://doc.rust-lang.org/1.25.0/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">nomicom</a>:</p>\n\n<blockquote>\n  <p>Box and Vec are interesting cases because they're variant, but you can definitely store values in them! This is where Rust gets really clever: it's fine for them to be variant because you can only store values in them via a mutable reference! The mutable reference makes the whole type invariant, and therefore prevents you from smuggling a short-lived type into them.</p>\n</blockquote>\n\n<p>Consider <code>Vec</code> method to add a value:</p>\n\n<pre><code>pub fn push(&amp;'a mut self, value: T)\n</code></pre>\n\n<p>The type of self is <code>&amp;'a mut Vec&lt;T&gt;</code> and I understand that this is the <em>mutable reference</em> nomicom is speaking about, so instantiating for the <code>Vec</code> case the last sentence of the above phrase become:</p>\n\n<p>The type <code>&amp;'a mut Vec&lt;T&gt;</code> is invariant, and therefore prevents you from smuggling a short-lived type into <code>Vec&lt;T&gt;</code>.</p>\n\n<p>The same reasoning holds for Box.</p>\n\n<p>Said in another way: the values contained by <code>Vec</code> and <code>Box</code> always outlive their container despite <code>Vec</code> and <code>Box</code> being variant because you can only store values in them via a mutable reference.</p>\n\n<p>Consider the following snippet:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;&amp;String&gt; = Vec::new();\n\n    {\n        let mut a_value = \"hola\".to_string();\n\n        //v.push(a_ref);\n        Vec::push(&amp;mut v, &amp;mut a_value);\n    }\n\n    // nomicom is saing that if &amp;mut self Type was variant here we have had\n    // a vector containing a reference pointing to freed memory\n\n    // but this is not the case and the compiler throws an error\n}\n</code></pre>\n\n<p>It should help to note similarity of <code>Vec::push(&amp;mut v, &amp;mut a_value)</code> with <code>overwrite(&amp;mut forever_str, &amp;mut &amp;*string)</code> from the nomicom example. </p>\n"}, {"tags": [], "owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "is_accepted": true, "score": 1, "last_activity_date": 1525793434, "last_edit_date": 1525793434, "creation_date": 1525407642, "answer_id": 50167114, "question_id": 49996627, "link": "https://stackoverflow.com/questions/49996627/need-clarification-on-the-rust-nomicon-section-on-covariance-of-box-vec-a/50167114#50167114", "title": "Need clarification on the Rust Nomicon section on (co)variance of `Box`, `Vec` and other collections", "body": "<p>Since opening the issue in the Nomicon repo, the maintainers have introduced a <a href=\"https://github.com/Gankro/nomicon/blob/3f12284a7bad01d8bb3544ce1178417e6f5e3480/src/subtyping.md\" rel=\"nofollow noreferrer\">revision to the section</a> which I feel is considerably clearer. The revision has been merged. I consider my question answered by the revision.</p>\n\n<p>Below I provide a brief summary of what I know.</p>\n\n<p>The part that relates to my question now reads as follows (emphasis mine):</p>\n\n<blockquote>\n  <p><code>Box</code> and <code>Vec</code> are interesting cases because they're covariant, but you\n  can definitely store values in them! This is where Rust's typesystem\n  allows it to be a bit more clever than others. To understand why it's\n  sound for owning containers to be covariant over their contents, we\n  must consider the two ways in which a mutation may occur: by-value or\n  by-reference.</p>\n  \n  <p>If mutation is by-value, then the old location that remembers extra\n  details is moved out of, meaning it can't use the value anymore. So we\n  simply don't need to worry about anyone remembering dangerous details.\n  Put another way, applying subtyping when passing by-value destroys\n  details forever. For example, this compiles and is fine:</p>\n\n<pre><code> fn get_box&lt;'a&gt;(str: &amp;'a str) -&gt; Box&lt;&amp;'a str&gt; {\n     // String literals are `&amp;'static str`s, but it's fine for us to\n     // \"forget\" this and let the caller think the string won't live that long.\n     Box::new(\"hello\") }\n</code></pre>\n  \n  <p><strong>If mutation is by-reference, then our container is passed as <code>&amp;mut Vec&lt;T&gt;</code>. But <code>&amp;mut</code> is invariant over its\n  value, so <code>&amp;mut Vec&lt;T&gt;</code> is actually invariant over <code>T</code>. So the fact that\n  <code>Vec&lt;T&gt;</code> is covariant over T doesn't matter at all when mutating\n  by-reference.</strong></p>\n</blockquote>\n\n<p>The key point here really is the parallel between the invariance of <code>&amp;mut Vec&lt;T&gt;</code> over <code>T</code> and the invariance <code>&amp;mut T</code> over <code>T</code>. </p>\n\n<p>It was explained earlier in the revised nomicon section why a general <code>&amp;mut T</code> cannot be covariant over <code>T</code>. <code>&amp;mut T</code> borrows <code>T</code>, but it doesn't own <code>T</code>, meaning that there are other things that refer to <code>T</code> and have a certain expectation of its lifetime. </p>\n\n<p>But if we were allowed to pass <code>&amp;mut T</code> covariant over <code>T</code>, then the <code>overwrite</code> function in the nomicon's example shows how we can break the lifetime of <code>T</code> in the caller's location <em>from</em> a different location (i.e. within the body of <code>overwrite</code>). </p>\n\n<p>In a sense, allowing covariance over <code>T</code> for a type constructor allows us to 'forget the original lifetime of <code>T</code>' when passing the type constructor, and this 'forgetting the original lifetime of <code>T</code>' is ok for <code>&amp;T</code> because there is no chance of us modifying <code>T</code> through it, but it's dangerous when we have an <code>&amp;mut T</code> because we have the ability to <em>modify</em> <code>T</code> <em>after forgetting lifetime details about it</em>. This is why <code>&amp;mut T</code> needs to be invariant over <code>T</code>.</p>\n\n<p><strong>It seems the point the nomicon is trying to make is: it's OK for <code>Box&lt;T&gt;</code> to be covariant over <code>T</code> because it does not introduce unsafeness.</strong></p>\n\n<p>One of the consequences of this covariance is that we are allowed to 'forget the original lifetime of <code>T</code>' when passing <code>Box&lt;T&gt;</code> by value. But this does not introduce unsafeness because when we pass by value, we guaranteeing that there are no further users of <code>T</code> in the location that <code>Box&lt;T&gt;</code> was moved from. No one else in the old location is counting on the previous lifetime of <code>T</code> to remain so after the move.</p>\n\n<p>But more importantly, <code>Box&lt;T&gt;</code> being covariant over <code>T</code> does not introduce unsafeness when it comes to taking a mutable reference to the <code>Box&lt;T&gt;</code>, because <code>&amp;mut Box&lt;T&gt;</code> is invariant over <code>Box&lt;T&gt;</code> and therefore invariant over <code>T</code>. So, similar to the <code>&amp;mut T</code> discussion above, we are unable to perform lifetime shenanigans through an <code>&amp;mut Box&lt;T&gt;</code> by forgetting lifetime details about <code>T</code> and then modifying it after.</p>\n"}], "owner": {"reputation": 370, "user_id": 7228880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AtKAB.jpg?s=128&g=1", "display_name": "L.Y. Sim", "link": "https://stackoverflow.com/users/7228880/l-y-sim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 370, "favorite_count": 0, "accepted_answer_id": 50167114, "answer_count": 4, "score": 9, "last_activity_date": 1548268796, "creation_date": 1524557703, "last_edit_date": 1548268796, "question_id": 49996627, "link": "https://stackoverflow.com/questions/49996627/need-clarification-on-the-rust-nomicon-section-on-covariance-of-box-vec-a", "title": "Need clarification on the Rust Nomicon section on (co)variance of `Box`, `Vec` and other collections", "body": "<p>The Rust Nomicon has <a href=\"https://doc.rust-lang.org/1.25.0/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">an entire section on variance</a> which I more or less understand except this little section in regards to <code>Box&lt;T&gt;</code> and <code>Vec&lt;T&gt;</code> being (co)variant over <code>T</code>. </p>\n\n<blockquote>\n  <p><code>Box</code> and <code>Vec</code> are interesting cases because they're variant, but you can definitely store values in them! This is where Rust gets really clever: it's fine for them to be variant because you can only store values in them <em>via a mutable reference</em>! The mutable reference makes the whole type invariant, and therefore prevents you from smuggling a short-lived type into them.</p>\n</blockquote>\n\n<p>What confuses me is the following line:</p>\n\n<blockquote>\n  <p>it's fine for them to be variant because you can only store values in them <em>via a mutable reference</em>!</p>\n</blockquote>\n\n<p>My first question is that I'm slightly confused as to what the mutable reference is to. Is it a mutable reference to the <code>Box</code> / <code>Vec</code>? </p>\n\n<p>If so, how does the fact that I can only store values in them via a mutable reference justify their (co)variance? I understand what (co)variance is and the benefits of having it for <code>Box&lt;T&gt;</code>, <code>Vec&lt;T&gt;</code> etc., but I am struggling to see the link between only being able to store values via mutable references and the justification of (co)variance.</p>\n\n<p>Also, when we initialize a <code>Box</code>, aren't values moved into the box without involving an mutable reference? Doesn't this contradict the statement that we can only store values in them via mutable reference?</p>\n\n<p>And finally, under what context is this 'mutable reference' borrowed? Do they mean that when you call methods that modify the <code>Box</code> or <code>Vec</code> you implicitly take an <code>&amp;mut self</code>? Is that the mutable reference mentioned? </p>\n\n<hr>\n\n<p><strong>Update 2nd May 2018</strong>: </p>\n\n<p>Since I have yet to receive a satisfactory answer to this question, I take it that the nomicon's explanation is genuinely confusing. So as promised in a comment thread below,  I have opened <a href=\"https://github.com/rust-lang-nursery/nomicon/issues/64\" rel=\"nofollow noreferrer\">an issue in the Rust Nomicon repository</a>. You can track any updates there.</p>\n"}, {"tags": ["python", "rust"], "comments": [{"owner": {"reputation": 2821, "user_id": 1092803, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/s3sAr.jpg?s=128&g=1", "display_name": "Gianluca", "link": "https://stackoverflow.com/users/1092803/gianluca"}, "edited": false, "score": 1, "creation_date": 1524556530, "post_id": 49996216, "comment_id": 87008853, "body": "Why just not use Rust to save in a database and Python to read from the database ?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1524556692, "post_id": 49996216, "comment_id": 87008944, "body": "<i>Would C be simpler/easier to implement when compared to Rust</i>: definitely not."}, {"owner": {"reputation": 310996, "user_id": 908494, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", "display_name": "abarnert", "link": "https://stackoverflow.com/users/908494/abarnert"}, "edited": false, "score": 0, "creation_date": 1524557000, "post_id": 49996216, "comment_id": 87009120, "body": "Are you writing a (C API) extension for Python in Rust? Or embedding Python in Rust? If so, you can use the <a href=\"https://docs.python.org/3/c-api/buffer.html\" rel=\"nofollow noreferrer\">buffer protocol</a> to expose an object that shares a buffer (presumably immutably) with a Python object, and then your Python code can iterate that, create a <code>memoryview</code> over it, construct an <code>np.array</code> out of it, etc. without copying. There are definitely advantages to writing C extensions in C rather than Rust\u2014but also some advantages to writing them in Rust. (The macros wrap up a <i>lot</i> of boilerplate\u2026)"}, {"owner": {"reputation": 310996, "user_id": 908494, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", "display_name": "abarnert", "link": "https://stackoverflow.com/users/908494/abarnert"}, "edited": false, "score": 0, "creation_date": 1524557112, "post_id": 49996216, "comment_id": 87009186, "body": "If these are entirely separate processes, then I assume you&#39;d be using shared memory or an <code>mmap</code>, in which case\u2026 yeah, of course that can be zero-copy. But if you want to wrap things up in some way where there&#39;s a pipe that you use to pass metadata about the shared memory\u2026 well, that&#39;s not <i>hard</i> work, but it&#39;s a pretty good amount of easy work."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1524557164, "post_id": 49996216, "comment_id": 87009215, "body": "This question is <i>way</i> too broad."}, {"owner": {"reputation": 310996, "user_id": 908494, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", "display_name": "abarnert", "link": "https://stackoverflow.com/users/908494/abarnert"}, "edited": false, "score": 0, "creation_date": 1524557180, "post_id": 49996216, "comment_id": 87009229, "body": "Finally, going back to extending or embedding\u2026 you can access the numpy C API from Rust. And, while it&#39;s not <i>quite</i> as convenient to use a numpy buffer as a native Rust array, it doesn&#39;t sound like you&#39;re doing all that much complicated stuff with those arrays on the Rust side."}, {"owner": {"reputation": 310996, "user_id": 908494, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", "display_name": "abarnert", "link": "https://stackoverflow.com/users/908494/abarnert"}, "edited": false, "score": 0, "creation_date": 1524557328, "post_id": 49996216, "comment_id": 87009299, "body": "Oh, and as for the runtime cost  of a copy: copying a big hunk of memory comes down to a call to the platform&#39;s <code>memmove</code>. Of course you could write an equivalent loop in explicit C or Rust or assembly, but it&#39;s not going to be better than the platform stdlib (which is what you&#39;ll get from calling <code>memmove</code> in C, or <code>buf2 = buf[:]</code> in Python, etc.)."}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 310996, "user_id": 908494, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG", "display_name": "abarnert", "link": "https://stackoverflow.com/users/908494/abarnert"}, "edited": false, "score": 0, "creation_date": 1524559077, "post_id": 49996216, "comment_id": 87010354, "body": "@abarnert Thank you for commenting in so much detail - it is very helpful! I am starting from a clean slate so it&#39;s excellent to understand what options are available. I now have a list of possible solutions which I can look into further and understand. Thank you! P.s. If you post the comments as an answer I will accept it."}], "answers": [{"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": true, "score": 0, "last_activity_date": 1524558228, "creation_date": 1524558228, "answer_id": 49996777, "question_id": 49996216, "link": "https://stackoverflow.com/questions/49996216/how-to-collect-sensor-data-in-rust-and-make-it-queryable-available-in-python/49996777#49996777", "title": "How to collect sensor data in Rust and make it queryable/available in Python?", "body": "<p>Your question is to vague to be answered correctly, let me suggest you some approaches.</p>\n\n<h1>1. Using an intermediate layer</h1>\n\n<p>You can use some sort of database (e.g. sqlite, postgresql, ...), filesystem storage (plain text file, sockets) or even build a Webserver with a (JSON) API.</p>\n\n<p>Depending on what you want to use, there are crates for everything (plain text is in std, sqlite, postgres, diesel, hyper, serde, etc).</p>\n\n<p>The neat thing about this implementation is, that it is programming language indepenent, if you for example decide to reprogram your code in Java later (for whatever reason :) ), you just have to change the way java reads the code out of the database/socket/webserver.</p>\n\n<h1>2. Using FFI</h1>\n\n<p>You can take a look at the example from alex at <a href=\"https://github.com/alexcrichton/rust-ffi-examples/tree/master/python-to-rust\" rel=\"nofollow noreferrer\" title=\"github.com\">github.com</a>, but be aware of the types you can use in FFI, e.g. integer types like i32, u32, i8, pointer, floatings but things like strings can get very hairy, so if you are fine with integer only, use that.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "closed_date": 1524575512, "accepted_answer_id": 49996777, "answer_count": 1, "score": 1, "last_activity_date": 1524558228, "creation_date": 1524556379, "question_id": 49996216, "link": "https://stackoverflow.com/questions/49996216/how-to-collect-sensor-data-in-rust-and-make-it-queryable-available-in-python", "closed_reason": "Needs more focus", "title": "How to collect sensor data in Rust and make it queryable/available in Python?", "body": "<p>How to use Rust to collect a time series/stream of sensor data and then make this data available from Python (whilst Rust continues to collect data)?</p>\n\n<p>The objective would be for Rust to continue collecting the data and allow for Python to call functions which would allow to query/retrieve this data. For example all the observations over the past 5 minutes.</p>\n\n<p>Is this possible to achieve without copying memory (similar to view of numpy arrays) or does memory have to be copied when it is received in the Python runtime? </p>\n\n<p>If memory needs to be copied how does the runtime cost of doing it in Rust compare to a doing it in C? Would C be simpler/easier to implement when compared to Rust (as a novice C programmer I like the safety/tools Rust offers)?</p>\n\n<p>In summary, I would like to understand how to:</p>\n\n<ul>\n<li>Collect sensor data and continue to collect it in Rust in the background</li>\n<li>Allow the data collected in Rust to be queried from Python</li>\n<li>Does the data need to be copied when queried from Python or can memory views similar to numpy be implemented?</li>\n<li>If the data needs to be copied how does the overhead compare to C?</li>\n<li>How does the complexity of implementing this is Rust compare to C?</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1524547281, "post_id": 49993621, "comment_id": 87004129, "body": "As far as your last question goes, I am 99.99% sure that this isn&#39;t valid use of <code>where</code>. But there might still be an answer to the first question (is there any way to achieve the same)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1524553135, "post_id": 49993621, "comment_id": 87006771, "body": "I suggest you to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> on the playground, to lower the bar for potential answers. Also, have you simply tried putting <code>F</code> in the list of generic symbols?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524554647, "post_id": 49993621, "comment_id": 87007679, "body": "The issue with your code is, other than a missing generic symbol <code>F</code>, that <code>Box&lt;F + &#39;a&gt;</code> indicates that <code>F</code> is a trait while in your <code>where</code> clause you specify that it is a <i>type</i> belonging to the <code>Future&lt;...&gt;</code> trait."}, {"owner": {"reputation": 4043, "user_id": 1690108, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/1ff627c4d1053aa6593187b534e067fb?s=128&d=identicon&r=PG", "display_name": "whitfin", "link": "https://stackoverflow.com/users/1690108/whitfin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1524587703, "post_id": 49993621, "comment_id": 87030000, "body": "@MatthieuM. I can&#39;t provide a &quot;complete&quot; example, because I don&#39;t know the correct syntax for what I&#39;m trying to write :) that&#39;s the OP."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524582459, "post_id": 49996165, "comment_id": 87026523, "body": "The first suggestion raises a warning that <code>generic bounds are ignored in type aliases</code> which might be an issue; as for the second suggestion, it mistakes <code>F</code> for a trait, which it is not."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524582590, "post_id": 49996165, "comment_id": 87026604, "body": "@ljedrz <code>Future</code> is not a trait? In this case, I will delete the second part of my answer. I removed the warning, BTW."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524582942, "post_id": 49996165, "comment_id": 87026857, "body": "<code>Future</code> is, but <code>F: Future&lt;...&gt;</code> isn&#39;t - it&#39;s a type implementing <code>Future&lt;...&gt;</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524583090, "post_id": 49996165, "comment_id": 87026961, "body": "@ljedrz Oh, you mean that this code do static polymorphism instead of returning a boxed trait? But AFAIK because <code>Box</code> is variant, a boxed struct can be seen as a boxed trait by the compiler if the struct implements the trait."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524583629, "post_id": 49996165, "comment_id": 87027393, "body": "The compiler expects <code>F</code> to be a trait based on the return type signature (<code>Box&lt;F + &#39;a&gt;</code> - a boxed trait), but in the <code>where</code> clause <code>F</code> is a generic type parameter; I&#39;m not super savvy with this so I might be wrong, but that&#39;s the error the compiler complains about (among others, since it&#39;s not an MCVE)."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524584248, "post_id": 49996165, "comment_id": 87027835, "body": "@ljedrz That&#39;s the problem... the OP did not write a MCVE, so I could not test my code, and I have no time to do it myself right no. I delete the second part."}, {"owner": {"reputation": 4043, "user_id": 1690108, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/1ff627c4d1053aa6593187b534e067fb?s=128&d=identicon&r=PG", "display_name": "whitfin", "link": "https://stackoverflow.com/users/1690108/whitfin"}, "edited": false, "score": 0, "creation_date": 1524587858, "post_id": 49996165, "comment_id": 87030094, "body": "Nice, this definitely makes it cleaner. I guess I was just hoping that <code>where</code> could be used in general to make signatures a little cleaner - i.e. you might not always have generics but not only generics make things messy :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1524588539, "post_id": 49996165, "comment_id": 87030452, "body": "@ljedrz: Writing <code>Box&lt;F&gt;</code> and pushing <code>+ &#39;a</code> into the <code>where</code> clause would make <code>F</code> concrete again. But that might not be what the OP wants, either."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 6, "last_activity_date": 1524584315, "last_edit_date": 1524584315, "creation_date": 1524556211, "answer_id": 49996165, "question_id": 49993621, "link": "https://stackoverflow.com/questions/49993621/is-it-possible-to-move-function-types-out-of-the-signature-and-into-the-where-cl/49996165#49996165", "title": "Is it possible to move function types out of the signature and into the where clause?", "body": "<p>You can use <code>type</code> to simplify your return type:</p>\n\n<pre><code>pub type ReturnType&lt;'a, T&gt; = Box&lt;Future&lt;Item = (State, T), Error = (State, HandlerError)&gt; + 'a&gt;;\n\npub fn extract_body&lt;'a, T: 'a&gt;(mut state: State) -&gt; ReturnType&lt;'a, T&gt;\nwhere\n    T: DeserializeOwned,\n{\n    // ...\n}\n</code></pre>\n\n<p><code>where</code> cannot be used in this case, it is useful to add constraints to generic type, for example when you do static dispatch.</p>\n"}], "owner": {"reputation": 4043, "user_id": 1690108, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/1ff627c4d1053aa6593187b534e067fb?s=128&d=identicon&r=PG", "display_name": "whitfin", "link": "https://stackoverflow.com/users/1690108/whitfin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 49996165, "answer_count": 1, "score": 3, "last_activity_date": 1524584315, "creation_date": 1524545177, "last_edit_date": 1524580263, "question_id": 49993621, "link": "https://stackoverflow.com/questions/49993621/is-it-possible-to-move-function-types-out-of-the-signature-and-into-the-where-cl", "title": "Is it possible to move function types out of the signature and into the where clause?", "body": "<p>I have a particularly long method signature in Rust, which looks like this when formatted using the latest formatter (for those interested, this is using <a href=\"https://github.com/gotham-rs/gotham\" rel=\"nofollow noreferrer\">Gotham</a>):</p>\n\n<pre><code>pub fn extract_body&lt;'a, T: 'a&gt;(\n    mut state: State,\n) -&gt; Box&lt;Future&lt;Item = (State, T), Error = (State, HandlerError)&gt; + 'a&gt;\nwhere\n    T: DeserializeOwned,\n{\n</code></pre>\n\n<p>The signature is extremely long, and I'd prefer something like this:</p>\n\n<pre><code>pub fn extract_body&lt;'a, T: 'a&gt;(mut state: State) -&gt; Box&lt;F + 'a&gt;\nwhere\n    T: DeserializeOwned,\n    F: Future&lt;Item = (State, T), Error = (State, HandlerError)&gt;,\n{\n</code></pre>\n\n<p>Note the use of <code>F</code> in order to format a little nicer. Unfortunately, this does not compile. Is there any way to achieve the same without introducing another generic type? I'm currently invoking using the syntax <code>extract_body::&lt;Value&gt;</code> and would like to avoid adjusting this (since it's just a stylistic thing).</p>\n\n<p>Is is possible to use the <code>where</code> syntax in this way, or is it strictly based on the use of generics? I'm finding docs on this syntax quite scarce. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524519681, "post_id": 49990117, "comment_id": 86997268, "body": "Can you expand on what you find confusing about the error message: <i>&quot;values in a scope are dropped in the opposite order they are created&quot;</i>? That explains the problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1524519814, "post_id": 49990117, "comment_id": 86997321, "body": "I believe your question to already be answered by the answers of <a href=\"https://stackoverflow.com/q/44987555/155423\">How do I add references to a vector when the borrowed values are created after the vector?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/49990117/edit\">edit</a> your question to explain why it is different. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524519940, "post_id": 49990117, "comment_id": 86997363, "body": "@Shepmaster thank you for the link, it completely answers my question."}], "owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 36, "favorite_count": 0, "closed_date": 1524519963, "answer_count": 0, "score": 0, "last_activity_date": 1524519608, "creation_date": 1524518322, "last_edit_date": 1524519608, "question_id": 49990117, "link": "https://stackoverflow.com/questions/49990117/borrowing-error-when-pushing-reference-into-vector-that-is-on-the-same-scope", "closed_reason": "Duplicate", "title": "Borrowing error when pushing reference into vector that is on the same scope", "body": "<p>I am trying to place a string reference into a vector. The values are in the same scope. Why does the following code result in a borrowing error?  </p>\n\n<pre><code>fn main() {\n    let val: u32 = 0;\n    let ref_of_val = &amp;val;\n\n    let mut record = Vec::new();\n    let string_of_ref_of_val: String = ref_of_val.to_string();\n    record.push(&amp;string_of_ref_of_val);\n    record.clear();\n}\n</code></pre>\n\n<p>The resulting error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `string_of_ref_of_val` does not live long enough\n --&gt; src/main.rs:7:18\n  |\n7 |     record.push(&amp;string_of_ref_of_val);\n  |                  ^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n8 |     record.clear();\n9 | }\n  | - `string_of_ref_of_val` dropped here while still borrowed\n  |\n  = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>If I push <code>record.push(string_of_ref_of_val);</code> instead, everything ends up OK. Why is this the case? What is a possible solution? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 0, "creation_date": 1607355122, "post_id": 49986983, "comment_id": 115239378, "body": "Regarding your latest paragraph. Would the function that receives the passed-by-value function mark the closure as <code>mut</code> in its signature?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 1, "creation_date": 1607359260, "post_id": 49986983, "comment_id": 115241553, "body": "@PaulRazvanBerg: It may, but wouldn&#39;t need to. This is because if you have ownership of something, you can always rebind it to a mutable binding. That is <code>let a = ...; let mut a = a;</code>."}, {"owner": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 0, "creation_date": 1607361341, "post_id": 49986983, "comment_id": 115242486, "body": "Oh, I see. Thanks for your prompt reply Sir!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 16, "last_activity_date": 1524505200, "creation_date": 1524505200, "answer_id": 49986983, "question_id": 49986734, "link": "https://stackoverflow.com/questions/49986734/when-should-i-add-mut-to-closures/49986983#49986983", "title": "When should I add mut to closures?", "body": "<p>There are 3 function traits in Rust: <code>Fn</code>, <code>FnMut</code> and <code>FnOnce</code>. Going backward:</p>\n\n<ul>\n<li><code>FnOnce</code> only guarantees that the value can be called once,</li>\n<li><code>FnMut</code> only guarantees that the value can be called if it is mutable,</li>\n<li><code>Fn</code> guarantees that the value can be called, multiple times, and without being mutable.</li>\n</ul>\n\n<p>A closure will <a href=\"https://stackoverflow.com/questions/30177395/when-does-a-closure-implement-fn-fnmut-and-fnonce\">automatically implement</a> those traits, depending on what it captures and how it uses it. By default, the compiler will pick the <em>least</em> restrictive trait; so favor <code>Fn</code> over <code>FnMut</code> and <code>FnMut</code> over <code>FnOnce</code>.</p>\n\n<p>In your second case:</p>\n\n<pre><code>let mut a = String::from(\"a\");\nlet closure = || {\n    a.push_str(\"b\");\n    a\n};\n</code></pre>\n\n<p>This closure requires being able to return <code>a</code>, which requires <code>FnOnce</code>. It moves <code>a</code> into the capture. If you tried to call your closure a second time, it would fail to compile. If you tried to access <code>a</code>, it would fail to compile too.</p>\n\n<p>This is why <code>FnOnce</code> is a \"last resort\" implementation.</p>\n\n<p>On the other hand your first case:</p>\n\n<pre><code>let mut a = String::from(\"a\");\nlet closure = || {\n    a.push_str(\"b\");\n};\n</code></pre>\n\n<p>At most requires a mutable reference to <code>a</code>, and therefore the capture occurs by mutable reference. Since it captures a mutable reference, the closure implements <code>FnMut</code>, and therefore can only be called if it is itself mutable.</p>\n\n<p>If you remove <code>mut</code>, in front of <code>a</code>, the compiler will signal to you it needs to borrow <code>a</code> mutably.</p>\n\n<p>The compiler does not require that <code>closure</code> itself be declared mutably until you attempt to call it; after all you could pass it by value to a function without calling it (yourself), in which case <code>mut</code> would be superfluous.</p>\n"}], "owner": {"reputation": 251, "user_id": 6728762, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a59c90121bdea220e0364b6783c1784e?s=128&d=identicon&r=PG&f=1", "display_name": "Dajavu", "link": "https://stackoverflow.com/users/6728762/dajavu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1548, "favorite_count": 0, "answer_count": 1, "score": 15, "last_activity_date": 1524505200, "creation_date": 1524504312, "last_edit_date": 1524504480, "question_id": 49986734, "link": "https://stackoverflow.com/questions/49986734/when-should-i-add-mut-to-closures", "title": "When should I add mut to closures?", "body": "<pre><code>fn main() {\n    let mut a = String::from(\"a\");\n    let closure = || {\n        a.push_str(\"b\");\n    };\n\n    closure();\n}\n</code></pre>\n\n<p>This won't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `closure` as mutable\n --&gt; src/main.rs:7:5\n  |\n3 |     let closure = || {\n  |         ------- consider changing this to `mut closure`\n...\n7 |     closure();\n  |     ^^^^^^^ cannot borrow mutably\n</code></pre>\n\n<p>If I return <code>a</code> in the closure without adding <code>mut</code>, it can be compiled:</p>\n\n<pre><code>fn main() {\n    let mut a = String::from(\"a\");\n    let closure = || {\n        a.push_str(\"b\");\n        a\n    };\n\n    closure();\n}\n</code></pre>\n\n<p>This confuses me a lot. It seems like when I call <code>closure()</code>, <code>closure</code> will be borrowed if something is mutable inside it. Why won't it be borrowed when I return <code>a</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1524498273, "post_id": 49984882, "comment_id": 86986394, "body": "Simplest solution would be to use macro to generate that code for you."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1524498704, "last_edit_date": 1524498704, "creation_date": 1524498588, "answer_id": 49985138, "question_id": 49984882, "link": "https://stackoverflow.com/questions/49984882/how-should-i-implement-into-for-mytype-and-mut-mytype-without-code-duplication/49985138#49985138", "title": "How should I implement Into for &amp;MyType and &amp;mut MyType without code duplication?", "body": "<p>You can do what you want, by implementing <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.From.html\" rel=\"noreferrer\"><code>From</code></a> instead of its friend <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.Into.html\" rel=\"noreferrer\"><code>Into</code></a>:</p>\n\n<pre><code>impl&lt;T&gt; From&lt;T&gt; for Double\nwhere\n    T: AsRef&lt;Int&gt;,\n{\n    fn from(i: T) -&gt; Self {\n        Double {\n            v: f64::from(i.as_ref().v),\n        }\n    }\n}\n</code></pre>\n\n<p>This way we avoid implementing a trait for a generic parameter (the <code>for T</code> part) which is disallowed by orphan rules. <code>From</code> and <code>Into</code> are linked together with <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.Into.html#implementors\" rel=\"noreferrer\">this awesome blanket impl</a>:</p>\n\n<pre><code>impl&lt;T, U&gt; Into&lt;U&gt; for T \nwhere\n    U: From&lt;T&gt;, \n</code></pre>\n\n<hr>\n\n<p>However, <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"noreferrer\"><code>AsRef</code></a> is not the trait you are looking for here (I think). <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\" rel=\"noreferrer\"><code>Borrow</code></a> might be more fitting in your situation:</p>\n\n<pre><code>impl&lt;T&gt; From&lt;T&gt; for Double\nwhere\n    T: Borrow&lt;Int&gt;,\n{\n    fn from(i: T) -&gt; Self {\n        Double {\n            v: f64::from(i.borrow().v),\n        }\n    }\n}\n</code></pre>\n\n<p>This way, the conversion is possible for <code>Int</code>, <code>&amp;Int</code> and <code>&amp;mut Int</code>:</p>\n\n<pre><code>fn foo&lt;T: Into&lt;Double&gt;&gt;(_: T) {}\n\nfoo(Int { v: 3 });\nfoo(&amp;Int { v: 3 });\nfoo(&amp;mut Int { v: 3 });\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29812530/155423\">When should I implement std::convert::From vs std::convert::Into?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1524499523, "last_edit_date": 1524499523, "creation_date": 1524499099, "answer_id": 49985292, "question_id": 49984882, "link": "https://stackoverflow.com/questions/49984882/how-should-i-implement-into-for-mytype-and-mut-mytype-without-code-duplication/49985292#49985292", "title": "How should I implement Into for &amp;MyType and &amp;mut MyType without code duplication?", "body": "<p>The answer by Lukas is how you should implement this; I would like to add, though, that this limitation of <code>Into&lt;T&gt;</code> can also be worked around with a wrapper type, as described by the <a href=\"https://doc.rust-lang.org/error-index.html#E0210\" rel=\"nofollow noreferrer\">docs for the related error, E0210</a>:</p>\n\n<blockquote>\n  <p>To work around this, it can be covered with a local type, <code>MyType</code>:</p>\n\n<pre><code>struct MyType&lt;T&gt;(T);\n\nimpl&lt;T&gt; ForeignTrait for MyType&lt;T&gt; { } // Ok\n</code></pre>\n</blockquote>\n\n<p>That being said, for your needs you should still use <code>Borrow</code> instead of <code>AsRef</code>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Wrap&lt;T: Borrow&lt;Int&gt;&gt;(T);\n\nimpl&lt;T&gt; Into&lt;Double&gt; for Wrap&lt;T&gt;\nwhere\n    T: Borrow&lt;Int&gt;,\n{\n    fn into(self) -&gt; Double {\n        Double {\n            v: f64::from(self.0.borrow().v),\n        }\n    }\n}\n\nfn main() {\n    let i = Int { v: 0 };\n    let d: Double = Wrap(i).into(); // or Wrap(&amp;i) or Wrap(&amp;mut i)\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 103, "favorite_count": 0, "accepted_answer_id": 49985138, "answer_count": 2, "score": 4, "last_activity_date": 1524499523, "creation_date": 1524497778, "last_edit_date": 1524498553, "question_id": 49984882, "link": "https://stackoverflow.com/questions/49984882/how-should-i-implement-into-for-mytype-and-mut-mytype-without-code-duplication", "title": "How should I implement Into for &amp;MyType and &amp;mut MyType without code duplication?", "body": "<p>Here is a toy example:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Int {\n    v: i32,\n}\n\n#[derive(Debug)]\nstruct Double {\n    v: f64,\n}\n\nimpl Into&lt;Double&gt; for Int {\n    fn into(self) -&gt; Double {\n        Double {\n            v: f64::from(self.v),\n        }\n    }\n}\n</code></pre>\n\n<p>This works, but really I want to implement <code>Into&lt;Double&gt;</code> for <code>&amp;Int</code> and <code>&amp;mut Int</code>. This doesn't work:</p>\n\n<pre><code>impl&lt;T&gt; Into&lt;Double&gt; for T\nwhere\n    T: AsRef&lt;Int&gt;,\n{\n    fn into(self) -&gt; Double {\n        Double {\n            v: f64::from(self.as_ref().v),\n        }\n    }\n}\n</code></pre>\n\n<p>because <code>trait Into</code> is not defined in my crate:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::convert::Into&lt;Double&gt;`:\n  --&gt; src/main.rs:19:1\n   |\n19 | / impl&lt;T&gt; Into&lt;Double&gt; for T\n20 | | where\n21 | |     T: AsRef&lt;Int&gt;,\n22 | | {\n...  |\n27 | |     }\n28 | | }\n   | |_^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl&lt;T, U&gt; std::convert::Into&lt;U&gt; for T\n             where U: std::convert::From&lt;T&gt;;\n\nerror[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter\n  --&gt; src/main.rs:19:1\n   |\n19 | / impl&lt;T&gt; Into&lt;Double&gt; for T\n20 | | where\n21 | |     T: AsRef&lt;Int&gt;,\n22 | | {\n...  |\n27 | |     }\n28 | | }\n   | |_^\n</code></pre>\n\n<p>How should I implement <code>Into&lt;Double&gt;</code> for <code>&amp;Int</code> and <code>&amp;mut Int</code>,\nwithout code duplication like:</p>\n\n<pre><code>impl&lt;'a&gt; Into&lt;Double&gt; for &amp;'a Int {\nimpl&lt;'a&gt; Into&lt;Double&gt; for &amp;'a mut Int {\n</code></pre>\n"}, {"tags": ["performance", "file", "io", "rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524492536, "post_id": 49983102, "comment_id": 86982643, "body": "I think this question might get closed as a duplicate of the one you linked, as the core issue is the same."}, {"owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 7, "creation_date": 1524492812, "post_id": 49983102, "comment_id": 86982877, "body": "Maybe, but it took me some time to find out what the issue was. So this might make the problem easier to find for people who come from the serde/ bincode side of things."}, {"owner": {"reputation": 567, "user_id": 5223579, "user_type": "registered", "profile_image": "https://graph.facebook.com/887572487994048/picture?type=large", "display_name": "Johannes", "link": "https://stackoverflow.com/users/5223579/johannes"}, "edited": false, "score": 1, "creation_date": 1591170895, "post_id": 49983102, "comment_id": 109950094, "body": "I always forget this, although I should know... oh dear thanks"}], "tags": [], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "is_accepted": true, "score": 12, "last_activity_date": 1524492100, "creation_date": 1524492100, "answer_id": 49983102, "question_id": 49983101, "link": "https://stackoverflow.com/questions/49983101/serialization-of-large-struct-to-disk-with-serde-and-bincode-is-slow/49983102#49983102", "title": "Serialization of large struct to disk with Serde and Bincode is slow", "body": "<p>This is not an issue with serde and/ or bincode. Unlike some other languages, Rust does not use buffered I/O by default (See <a href=\"https://stackoverflow.com/questions/43028653\">this question</a> for details). Hence, the performance of this code can be significantly increased by using a buffered writer:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate bincode;\n\nuse std::fs::File;\nuse bincode::serialize_into;\nuse std::io::BufWriter;\n\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\npub struct MyStruct {\n    counter: Vec&lt;u32&gt;,\n    offset: usize,\n}\n\nimpl MyStruct {\n    // omitted for conciseness\n}\n\n\nfn main() {\n    let m = MyStruct::new();\n\n    // fill entries in the counter vector\n\n    let mut f = BufWriter::new(File::create(\"/tmp/foo.bar\").unwrap());\n    serialize_into(&amp;mut f, &amp;m).unwrap();\n}\n</code></pre>\n\n<p>For me, this sped up the writing process from about half an hour to 40 seconds (50x speedup). </p>\n"}], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2366, "favorite_count": 0, "closed_date": 1524499223, "accepted_answer_id": 49983102, "answer_count": 1, "score": 10, "last_activity_date": 1524499300, "creation_date": 1524492100, "last_edit_date": 1524499300, "question_id": 49983101, "link": "https://stackoverflow.com/questions/49983101/serialization-of-large-struct-to-disk-with-serde-and-bincode-is-slow", "closed_reason": "Duplicate", "title": "Serialization of large struct to disk with Serde and Bincode is slow", "body": "<p>I have a struct that contains a vector of 2\u00b3\u00b9 <code>u32</code> values (total size about 8GB). I followed the <code>bincode</code> example to write it to disk:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate bincode;\n\nuse std::fs::File;\nuse bincode::serialize_into;\n\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\npub struct MyStruct {\n    counter: Vec&lt;u32&gt;,\n    offset: usize,\n}\n\nimpl MyStruct {\n    // omitted for conciseness\n}\n\n\nfn main() {\n    let m = MyStruct::new();\n\n    // fill entries in the counter vector\n\n    let mut f = File::create(\"/tmp/foo.bar\").unwrap();\n    serialize_into(&amp;mut f, &amp;m).unwrap();\n}\n</code></pre>\n\n<p>To avoid allocating the memory twice, I used <code>serialize_into</code> to directly write into the file. However, the writing process is really slow (about half an hour). Is there a way to speed this up?</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "is_accepted": false, "score": 1, "last_activity_date": 1524636203, "last_edit_date": 1524636203, "creation_date": 1524601591, "answer_id": 50010247, "question_id": 49981540, "link": "https://stackoverflow.com/questions/49981540/why-do-i-get-a-frametoobig-error-when-using-tokios-frame-delimited/50010247#50010247", "title": "Why do I get a FrameTooBig error when using Tokio&#39;s frame_delimited?", "body": "<p>The problem was lying on the client side, and it was related with how Telnet works. It's not straightforward to send hex data using Telnet, so I tried this and worked well:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>echo '\\x00\\x00\\x00\\x0bhello world' | nc localhost 12345  #WORKS!\n</code></pre>\n\n<p>However, neither of these work:</p>\n\n<ol>\n<li><pre class=\"lang-none prettyprint-override\"><code>echo '\\x00\\x00\\x00\\x0bhello world' | telnet localhost\n</code></pre></li>\n<li><pre class=\"lang-none prettyprint-override\"><code>\u25b6 telnet localhost 12345                                     \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n\\x00\\x00\\x00\\x0bhello world\nConnection closed by foreign host.\n</code></pre></li>\n</ol>\n\n<p>It seems like the <code>FrameTooBig</code> error was due to the fact that the message telnet was sending was bigger than what the server expected. I wasn't be able to encode the frame properly using hex, and then the length was not matching the length header received, and thus the error.</p>\n"}], "owner": {"reputation": 386, "user_id": 1536235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/ye5mV.jpg?s=128&g=1", "display_name": "blasrodri", "link": "https://stackoverflow.com/users/1536235/blasrodri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1524636203, "creation_date": 1524487802, "last_edit_date": 1524601628, "question_id": 49981540, "link": "https://stackoverflow.com/questions/49981540/why-do-i-get-a-frametoobig-error-when-using-tokios-frame-delimited", "title": "Why do I get a FrameTooBig error when using Tokio&#39;s frame_delimited?", "body": "<p>I'm trying to get my feet wet using Tokio. When I send a message from a Telnet connection, I get <code>Custom { kind: InvalidData, error: FrameTooBig }</code>. I don't understand the issue, nor how to overcome it.</p>\n\n<pre><code>extern crate tokio;\nextern crate tokio_io;\n\nuse tokio::io;\nuse tokio::net::TcpListener;\nuse tokio::prelude::*;\nuse tokio_io::codec::length_delimited;\n\nfn main() {\n    let addr = \"127.0.0.1:12345\".parse().unwrap();\n    let listener = TcpListener::bind(&amp;addr).unwrap();\n\n    let server = listener\n        .incoming()\n        .for_each(|socket| {\n            let transport = length_delimited::Builder::new().new_read(socket);\n            let msg_proccessing = transport\n                .for_each(|msg| {\n                    // Note: This part is never actually executed\n                    println!(\"{:?}\", msg);\n                    Ok(())\n                })\n                .map_err(|e| println!(\"waaaaaaaaaaaaaaaaa {:?}\", e));\n            tokio::spawn(msg_proccessing);\n            Ok(())\n        })\n        .map_err(|_| {});\n    tokio::run(server);\n}\n</code></pre>\n\n<p>Client side:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u25b6 telnet localhost 12345                                     \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n\\x00\\x00\\x00\\x0bhello world\nConnection closed by foreign host.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 0, "creation_date": 1524512934, "post_id": 49987279, "comment_id": 86994182, "body": "Thanks. I was thinking about fn-pointers and type aliases, seems like a lot of typing though. I was hoping for a magic wand of some kind. Here is playground with a slightly large example: The <code>ChildStatusBound</code>-Trait can be applied to any <code>futures::Stream</code>, yet needs boxing as of now. <a href=\"https://play.rust-lang.org/?gist=365e732ec2177781901a6f89562865fe&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 13606, "user_id": 527702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/LrH0d.jpg?s=128&g=1", "display_name": "hippietrail", "link": "https://stackoverflow.com/users/527702/hippietrail"}, "edited": false, "score": 0, "creation_date": 1608338864, "post_id": 49987279, "comment_id": 115562306, "body": "What is &quot;newtype&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13606, "user_id": 527702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/LrH0d.jpg?s=128&g=1", "display_name": "hippietrail", "link": "https://stackoverflow.com/users/527702/hippietrail"}, "edited": false, "score": 1, "creation_date": 1608559903, "post_id": 49987279, "comment_id": 115613377, "body": "@hippietrail <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1524513835, "last_edit_date": 1524513835, "creation_date": 1524506387, "answer_id": 49987279, "question_id": 49980850, "link": "https://stackoverflow.com/questions/49980850/how-to-return-an-anonymous-type-from-a-trait-method-without-using-box/49987279#49987279", "title": "How to return an anonymous type from a trait method without using Box?", "body": "<p><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a> covers all the present solutions. The one you haven't used is to replace closures with function pointers and then use a type alias (optionally wrapping in a newtype). This isn't always possible, but since you didn't provide a <a href=\"/help/mcve\">MCVE</a> of your code, we can't tell if this will work for you or not:</p>\n\n<pre><code>use std::iter;\n\ntype Thing&lt;T&gt; = iter::Map&lt;iter::Filter&lt;T, fn(&amp;i32) -&gt; bool&gt;, fn(i32) -&gt; i32&gt;;\n\ntrait IterExt: Iterator&lt;Item = i32&gt; {\n    fn thing(self) -&gt; Thing&lt;Self&gt;\n    where\n        Self: Sized + 'static,\n    {\n        // self.filter(|&amp;v| v &gt; 10).map(|v| v * 2)\n        fn a(v: &amp;i32) -&gt; bool { *v &gt; 10 }\n        fn b(v: i32) -&gt; i32 { v * 2 }\n        self.filter(a as fn(&amp;i32) -&gt; bool).map(b as fn(i32) -&gt; i32)\n    }\n}\n\nimpl&lt;I&gt; IterExt for I\nwhere\n    I: Iterator&lt;Item = i32&gt;,\n{}\n\nfn main() {}\n</code></pre>\n\n<hr>\n\n<p>Honestly, in these cases I would create a newtype wrapping the boxed trait object. That way, I have the flexibility to internally re-implement it with a non-boxed option in an API-compatible fashion when it becomes practical to do so.</p>\n"}], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 756, "favorite_count": 2, "accepted_answer_id": 49987279, "answer_count": 1, "score": 4, "last_activity_date": 1524513835, "creation_date": 1524485673, "last_edit_date": 1524505479, "question_id": 49980850, "link": "https://stackoverflow.com/questions/49980850/how-to-return-an-anonymous-type-from-a-trait-method-without-using-box", "title": "How to return an anonymous type from a trait method without using Box?", "body": "<p>I have an extension trait whose methods are just shorthands for adapters/combinators:</p>\n\n<pre><code>fn foo(self) -&gt; ... { self.map(|i| i * 2).foo().bar() }\n</code></pre>\n\n<p>The return type of <code>Trait::foo()</code> is some nested <code>Map&lt;Foo&lt;Bar&lt;Filter...</code>, including closures, and is therefor anonymous for all practical purposes. My problem is how to return such a type from a trait method, preferably without using <code>Box</code>.</p>\n\n<ul>\n<li><code>impl Trait</code> in return position would be the way to go, yet this feature is not implemented for trait methods yet.</li>\n<li>Returning a <code>Box&lt;Trait&gt;</code>is possible, yet I don't want to allocate for every adapter shorthanded by the trait.</li>\n<li>I can't put the anonymous type into a struct and return that, because <code>struct Foo&lt;T&gt; { inner: T }</code> can't be implemented (I promise an impl for all <code>T</code>, yet only return a specific <code>Foo&lt;Map&lt;Filter&lt;Bar...</code>).</li>\n<li>Existential types would probably solve the above problem, yet they won't be implemented for some time.</li>\n</ul>\n\n<p>I could also just avoid the problem and use a macro or a freestanding function; this also feels unhygienic, though.</p>\n\n<p>Any more insights?</p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524471568, "post_id": 49976164, "comment_id": 86968790, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/32338659/cannot-move-out-of-borrowed-content-when-unwrapping-a-box\">Cannot move out of borrowed content when unwrapping a box</a>"}], "answers": [{"tags": [], "owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "is_accepted": true, "score": 1, "last_activity_date": 1524472055, "creation_date": 1524472055, "answer_id": 49976538, "question_id": 49976164, "link": "https://stackoverflow.com/questions/49976164/client-certificate-in-rust-using-hyper/49976538#49976538", "title": "Client certificate in Rust using Hyper", "body": "<p>You don't need any <code>mut</code> references here. The builder pattern is create smth mutable (<code>TlsConnector::builder().unwrap()</code>), mutate it (<code>tls_conn_builder.identity(cert)</code>) and then get the result (<code>build</code>). Try this code</p>\n\n<pre><code>let mut tls_conn_builder = TlsConnector::builder().unwrap();\ntls_conn_builder.identity(cert);\nlet tls_conn = tls_conn_builder.build().unwrap();\n</code></pre>\n"}], "owner": {"reputation": 134, "user_id": 3203951, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000265098672/picture?type=large", "display_name": "Rahul Gurnani", "link": "https://stackoverflow.com/users/3203951/rahul-gurnani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 312, "favorite_count": 0, "accepted_answer_id": 49976538, "answer_count": 1, "score": 0, "last_activity_date": 1524472055, "creation_date": 1524470693, "last_edit_date": 1524471012, "question_id": 49976164, "link": "https://stackoverflow.com/questions/49976164/client-certificate-in-rust-using-hyper", "title": "Client certificate in Rust using Hyper", "body": "<p>I have been writing a client in Rust which makes a request to a server with a client certificate (Pkcs12). Although this has been answered <a href=\"https://stackoverflow.com/questions/44059266/how-to-make-a-request-with-client-certificate-in-rust\">How to make a request with client certificate in Rust</a>, the code doesn't compile as it is. If I make some modifications like replacing '?' by call to unwrap() function,</p>\n\n<p>Code: </p>\n\n<pre><code>let tls_conn = TlsConnector::builder().unwrap()\n        .identity(cert).unwrap()\n        .build().unwrap();\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>let tls_conn = TlsConnector::builder().unwrap()\n   |  ____________________^\n18 | |         .identity(cert).unwrap()\n   | |________________________________^ cannot move out of borrowed content.\n</code></pre>\n\n<p>I rewrote the above line of code and broke it down into multiple lines for debugging:</p>\n\n<pre><code>let ref mut init_tls_conn_builder = TlsConnector::builder().unwrap();\nlet ref mut tls_conn_builder = init_tls_conn_builder.identity(cert).unwrap();\nlet tls_conn = tls_conn_builder.build().unwrap();\n</code></pre>\n\n<p>I get the error as follows:</p>\n\n<pre><code>let tls_conn = tls_conn_builder.build().unwrap();\n   |                        ^^^^^^^^^^^^^^^^ cannot move out of borrowed content.\n</code></pre>\n\n<p>I am new to Rust and seeking help on this, can anyone please share an example code which compiles?</p>\n"}, {"tags": ["generics", "rust", "operator-overloading", "traits"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524481702, "post_id": 49975156, "comment_id": 86975158, "body": "FYI you don&#39;t need the <code>Sized</code> constraint. That is implied. You only need to specify when you <i>don&#39;t</i> require it."}], "answers": [{"comments": [{"owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "edited": false, "score": 0, "creation_date": 1524639334, "post_id": 49978694, "comment_id": 87047913, "body": "If I add <code>scale()</code> to <code>Hilbert</code>, is there a way to implement it the same way for all <code>Hilbert</code> (i.e. delegate to the ops in reverse order)? Relying on the implementer of the struct both (a) makes them essentially copy-paste (bad design!) a <i>ton</i> of code for all of Add, Mul, Div, etc. operations; and (b) risks that they (intentionally or otherwise) implement them in a non-commutative way."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "edited": false, "score": 1, "creation_date": 1524654373, "post_id": 49978694, "comment_id": 87057002, "body": "If it&#39;s genuinely the same, you can provide a default implementation in the trait."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 5, "last_activity_date": 1524499139, "last_edit_date": 1524499139, "creation_date": 1524478866, "answer_id": 49978694, "question_id": 49975156, "link": "https://stackoverflow.com/questions/49975156/how-do-i-implement-generic-commutative-stdops-involving-a-builtin-type-for-tra/49978694#49978694", "title": "How do I implement generic commutative std::ops involving a builtin type for trait objects?", "body": "<blockquote>\n  <p>Why is this disallowed?</p>\n</blockquote>\n\n<p>Rust enforces a policy that an implementation must be defined in the same crate as either the trait or the type. Neither <code>Mul</code> nor <code>f64</code> are in your crate.</p>\n\n<p>This prevents ambiguity about which implementation is going to be used. It makes it easy for the compiler to enforce that at most one instance of a trait exists per type, since it only has to check the implementations in those crates. If any other crate could define instances then the compiler would have to look <em>everywhere</em>. But also a human, trying to reason about the code, would have to be familiar with every crate, in order to guess which implementation would end up being used. Trait implementations are not named items in Rust, so you couldn't even be explicit about it. <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\" rel=\"noreferrer\">Here's some background</a></p>\n\n<p>A common workaround is to use a wrapper type. There's zero runtime cost to doing so, but it will make the API a bit more cumbersome.</p>\n\n<p>You can also define your own numeric trait, which just implies all of <code>Add</code>, <code>Mul</code> etc, implement <em>that</em> for all the primitive types, and use it as the bound in <code>Hilbert</code> instead of all the individual traits.</p>\n\n<p>But this is going to be messy whichever route you go. And I would question the benefit of using the same operator for scalars, non-scalars and mixed. It would be <em>far</em> simpler to just add a new method to your API:</p>\n\n<pre><code>fn scale(self, by: f64) -&gt; Self;\n</code></pre>\n\n<p>Apart from not getting into a complicated mess with all those trait bounds and workarounds, the intent of the code is much clearer. You won't have to look at the types of each variable to distinguish this from a multiplication of two scalars.</p>\n\n<pre><code>fn g&lt;T: Hilbert&gt;(x: T) -&gt; f64 {\n    let a = x.scale(2.0).dot(&amp;x);\n    let b = x.scale(2.0).dot(&amp;x);\n    a + b\n}\n</code></pre>\n"}], "owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 800, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1524499139, "creation_date": 1524466922, "last_edit_date": 1524499063, "question_id": 49975156, "link": "https://stackoverflow.com/questions/49975156/how-do-i-implement-generic-commutative-stdops-involving-a-builtin-type-for-tra", "title": "How do I implement generic commutative std::ops involving a builtin type for trait objects?", "body": "<p>I have:</p>\n\n<pre><code>use std::ops::{Add, Div, Mul, Neg, Sub};\n\npub trait Hilbert:\n    Add + Sub + Mul + Div + Neg + Mul&lt;f64, Output = Self&gt; + Div&lt;f64, Output = Self&gt; + Sized + Copy\n{\n    fn dot(&amp;self, other: &amp;Self) -&gt; f64;\n    fn magnitude(&amp;self) -&gt; f64;\n}\n\nfn g&lt;T: Hilbert&gt;(x: T) -&gt; f64 {\n    let a = (x * 2.0).dot(&amp;x);\n    let b = (2.0 * x).dot(&amp;x);\n    a + b\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: cannot multiply `T` to `{float}`\n  --&gt; src/main.rs:12:18\n   |\n12 |     let b = (2.0 * x).dot(&amp;x);\n   |                  ^ no implementation for `{float} * T`\n   |\n   = help: the trait `std::ops::Mul&lt;T&gt;` is not implemented for `{float}`\n</code></pre>\n\n<p>I would like <code>H * a</code> to equal <code>a * H</code> for all <code>Hilbert</code>s <code>H</code>. In the vein of another answer, I would try:</p>\n\n<pre><code>impl&lt;T: Hilbert&gt; Mul&lt;T&gt; for f64 {\n    type Output = T;\n\n    fn mul(self, other: T) -&gt; T {\n        other * self\n    }\n}\n</code></pre>\n\n<p>But this yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter\n  --&gt; src/main.rs:16:1\n   |\n16 | / impl&lt;T: Hilbert&gt; Mul&lt;T&gt; for f64 {\n17 | |     type Output = T;\n18 | |\n19 | |     fn mul(self, other: T) -&gt; T {\n20 | |         other * self\n21 | |     }\n22 | | }\n   | |_^\n</code></pre>\n\n<p>Why is this disallowed? What's the proper way to specify commutative multiplication for a trait object?</p>\n"}, {"tags": ["generics", "rust", "operator-overloading", "traits"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1524463110, "post_id": 49973888, "comment_id": 86964382, "body": "While preparing an answer, I realized that  your question is somewhat ambiguous. Is there going to be only one implementation of <code>Hilbert</code> or will different implementations interact with each other? In other words, shold it be possible to do <code>a.dot(a)</code> , where <code>a</code> and <code>b</code> are different <i>implementations</i> of <code>Hilbert</code>, or do they have to be different <i>instances of the same implementation</i>?"}, {"owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1524464403, "post_id": 49973888, "comment_id": 86964958, "body": "@kazemakase My intent was that <code>Hilbert</code>s only need to interact with their own type."}], "answers": [{"comments": [{"owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "edited": false, "score": 0, "creation_date": 1524464744, "post_id": 49974490, "comment_id": 86965122, "body": "Thanks, this does the trick! (<a href=\"https://en.wikipedia.org/wiki/Hilbert_space\" rel=\"nofollow noreferrer\">Hilbert space</a> is the intended concept ;)"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "edited": false, "score": 0, "creation_date": 1524465697, "post_id": 49974490, "comment_id": 86965565, "body": "@trbabb In that case the simpler second approach would be useful, I suppose :)"}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": true, "score": 2, "last_activity_date": 1524497747, "last_edit_date": 1524497747, "creation_date": 1524464023, "answer_id": 49974490, "question_id": 49973888, "link": "https://stackoverflow.com/questions/49973888/how-do-i-specify-the-expected-result-of-a-stdopsmul-in-a-trait-bound/49974490#49974490", "title": "How do I specify the expected result of a `std::ops::Mul` in a trait bound?", "body": "<blockquote>\n  <p>How do I persuade Rust that <code>Hilbert * f64</code> -> <code>Hilbert</code> must hold?</p>\n</blockquote>\n\n<p>You add a trait bound <code>&lt;T as Mul&lt;f64&gt;&gt;::Output: Hilbert</code>. However, doing so will reveal further issues in your design:</p>\n\n<ol>\n<li><code>Hilbert.dot()</code> takes the second argument as reference, not by value. But changing the relevant line to <code>(x * 2.0).dot(&amp;x)</code> leads to another error: <em>\"expected associated type, found type parameter\"</em>.</li>\n<li>This one is because you defined <code>dot</code> to take <code>Self</code>, but there could be different implementations of <code>Hilbert</code> you want to multiply. <code>dot</code> needs to be generic: <code>fn dot&lt;H: Hilbert&gt;(&amp;self, other: &amp;H) -&gt; f64;</code></li>\n<li>Finally, the borrow checker hits: <code>(x * 2.0).dot(&amp;x)</code> won't let you use <code>x</code> twice, because <code>mul</code> takes its argument by value. You will either have to add a bound <code>Mul&lt;&amp;'a Self&gt;</code> to be able to pass in a reference (which infects your API with lifetime parameters) or make <code>x</code> cloneable (I don't think copyable would apply).</li>\n</ol>\n\n<p>Applying all of the above results in this <s>working(?)</s> compilable code:</p>\n\n<pre><code>pub trait Hilbert: Add + Sub + Mul + Div + Neg + Mul&lt;f64&gt; + Div&lt;f64&gt; + Sized {\n    fn dot&lt;H: Hilbert&gt;(&amp;self, other: &amp;H) -&gt; f64;\n    fn magnitude(&amp;self) -&gt; f64;\n}\n\nfn g&lt;T: Hilbert + Clone&gt;(x: T) -&gt; f64\nwhere\n    &lt;T as Mul&lt;f64&gt;&gt;::Output: Hilbert,\n{\n    (x.clone() * 2.0).dot(&amp;x)\n}\n</code></pre>\n\n<p>If <code>Hilbert.dot</code> should not be generic because different implementations of <code>Hilbert</code> do not need to interact, the code can be slightly simpler (in terms of trait bounds):</p>\n\n<pre><code>pub trait Hilbert:\n    Add + Sub + Mul + Div + Neg + Mul&lt;f64, Output = Self&gt; + Div&lt;f64, Output = Self&gt; + Sized\n{\n    fn dot(&amp;self, other: &amp;Self) -&gt; f64;\n    fn magnitude(&amp;self) -&gt; f64;\n}\n\nfn g&lt;T: Hilbert + Clone&gt;(x: T) -&gt; f64 {\n    (x.clone() * 2.0).dot(&amp;x)\n}\n</code></pre>\n\n<p>However, from what I know about the Hilbert transform, this latter case seems unlikely to be useful.</p>\n"}], "owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 742, "favorite_count": 0, "accepted_answer_id": 49974490, "answer_count": 1, "score": 1, "last_activity_date": 1524497887, "creation_date": 1524461017, "last_edit_date": 1524497887, "question_id": 49973888, "link": "https://stackoverflow.com/questions/49973888/how-do-i-specify-the-expected-result-of-a-stdopsmul-in-a-trait-bound", "title": "How do I specify the expected result of a `std::ops::Mul` in a trait bound?", "body": "<p>I have:</p>\n\n<pre><code>use std::ops::{Add, Div, Mul, Neg, Sub};\n\npub trait Hilbert: Add + Sub + Mul + Div + Neg + Mul&lt;f64&gt; + Div&lt;f64&gt; + Sized {\n    fn dot(&amp;self, other: &amp;Self) -&gt; f64;\n    fn magnitude(&amp;self) -&gt; f64;\n}\n\nfn g&lt;T: Hilbert&gt;(x: T) -&gt; f64 {\n    return (x * 2.0).dot(x);\n}\n</code></pre>\n\n<p>...which yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `dot` found for type `&lt;T as std::ops::Mul&lt;f64&gt;&gt;::Output` in the current scope\n --&gt; src/main.rs:9:22\n  |\n9 |     return (x * 2.0).dot(x);\n  |                      ^^^\n  |\n  = help: items from traits can only be used if the trait is implemented and in scope\n  = note: the following trait defines an item `dot`, perhaps you need to implement it:\n          candidate #1: `Hilbert`\n</code></pre>\n\n<p>I interpret this to mean that Rust can't guarantee that the type <code>T</code>, which has trait <code>Hilbert</code>, has an implementation of <code>std::ops::Mul</code> whose <code>::Output</code> type is equal to <code>T</code> (a <code>Hilbert</code>). </p>\n\n<p>But I know (and / or wish to demand) that this is the case for all <code>Hilbert</code>s, so that functions like <code>g()</code> are possible to write. </p>\n\n<p>I would think to impl <code>std::ops::Mul::Output</code> for <code>Hilbert</code>:</p>\n\n<pre><code>impl&lt;T: Hilbert&gt; Mul&lt;f64&gt; for T {\n    type Output = T;\n}\n</code></pre>\n\n<p>...but this has the simultaneous problems that (a) I can't \"partially implement\" a trait, and would be forced to produce a generic implementation of the function <code>Mul::mul()</code> for all <code>Hilberts</code>, but the actual implementation of <code>Mul::mul()</code> will depend on the specific implementation of <code>Hilbert</code>; and (b) it seems I am not allowed to write this trait at all:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter\n  --&gt; src/main.rs:12:1\n   |\n12 | / impl&lt;T: Hilbert&gt; Mul&lt;f64&gt; for T {\n13 | |     type Output = T;\n14 | | }\n   | |_^\n</code></pre>\n\n<p>How do I persuade Rust that <code>Hilbert</code> * <code>f64</code> -> <code>Hilbert</code> must hold? </p>\n"}, {"tags": ["rust", "closures", "lifetime"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1524452613, "post_id": 49972238, "comment_id": 86961644, "body": "I had some troubles helping with your closure issue (my brain can&#39;t comprehend the lifetime issues today ...) ... so I decided to rewrite it slightly to use a struct to execute your jobs instead. <a href=\"https://play.rust-lang.org/?gist=3bd41a6a840c8046c78cb01551b2d794&amp;version=stable\" rel=\"nofollow noreferrer\">You can see my rewrite in the Playground</a>, although it won&#39;t compile there (it does locally)."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1524452782, "post_id": 49972238, "comment_id": 86961678, "body": "RE the closure issue though - they&#39;ll default to a <code>&#39;static</code> bound and I&#39;m having trouble narrowing that down for you and making it compile. I feel like its possible... I just can&#39;t see how at the moment."}], "answers": [{"comments": [{"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524507227, "post_id": 49976854, "comment_id": 86991170, "body": "What I&#39;m saying is that&#39;s limited by moved params lifetime. OFC it lives as long as it lives, but that doesn&#39;t convey any info for the question )"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524507642, "post_id": 49976854, "comment_id": 86991364, "body": "Questions on Stack Overflow have shown that lifetimes are one of the most confusing aspects of Rust. When trying to explain them, using vague and confusable terminology is not likely help the people who need it the most."}], "tags": [], "owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "is_accepted": false, "score": 0, "last_activity_date": 1524507551, "last_edit_date": 1524507551, "creation_date": 1524473244, "answer_id": 49976854, "question_id": 49972238, "link": "https://stackoverflow.com/questions/49972238/trouble-with-closure-lifetimes/49976854#49976854", "title": "Trouble with closure lifetimes", "body": "<p>There is some confusion here because Rust is not very explicit about some features of lifetimes. In this example,</p>\n\n<ol>\n<li><p>A closure's lifetime is limited by the lifetime of all the params moved into it. In your case, the closure is limited  by <code>self</code> because of the line <code>self.out.broadcast</code>. Note that <code>self</code> is actually a reference in this case coming from the <code>&amp;self</code> argument in <code>fn on_message</code>. Essentially you create something like</p>\n\n<pre><code>Box&lt;FnMut(&amp;mut Game) + Send + 'a&gt;\n</code></pre>\n\n<p>Where <code>'a</code> is a lifetime of <code>&amp;self</code>. </p></li>\n<li><p>When you create a boxed trait object, the default lifetime is <code>'static</code>. That means that </p>\n\n<pre><code>type Job = Box&lt;FnMut(&amp;mut Game) + Send&gt; = Box&lt;FnMut(&amp;mut Game) + Send + 'static&gt;\n</code></pre>\n\n<p>To avoid this, you can make self cloneable and move <code>self.clone()</code> inside this closure.</p></li>\n</ol>\n"}], "owner": {"reputation": 1, "user_id": 8777108, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78813cba799103a44a0c06f66f7c4e78?s=128&d=identicon&r=PG&f=1", "display_name": "smycal", "link": "https://stackoverflow.com/users/8777108/smycal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 173, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1524507551, "creation_date": 1524446403, "last_edit_date": 1524449943, "question_id": 49972238, "link": "https://stackoverflow.com/questions/49972238/trouble-with-closure-lifetimes", "title": "Trouble with closure lifetimes", "body": "<p>I am really struggling with closure lifetimes. I'm making a simple hangman game where all connections play one game. I'm attempting to pass a closure to a channel that will update the game and then broadcast JSON, but I am running into lifetime issues.</p>\n\n<pre><code>extern crate names;\nextern crate ws;\n\n#[macro_use]\nextern crate json;\n\nuse names::{Generator, Name};\nuse std::collections::HashSet;\nuse std::sync::mpsc;\nuse std::thread;\nuse ws::{listen, CloseCode, Handler, Message, Result, Sender};\n\ntype Job = Box&lt;FnMut(&amp;mut Game) + Send&gt;;\n\n#[derive(Debug)]\nstruct Game {\n    word: Vec&lt;String&gt;,\n    guesses: HashSet&lt;String&gt;,\n    misses: u32,\n    progress: Vec&lt;String&gt;,\n}\n\nimpl Game {\n    fn increment_miss(&amp;mut self) {\n        self.misses += 1;\n    }\n\n    fn update_progress(&amp;mut self, guess: &amp;String) {\n        for (i, letter) in self.word.iter().enumerate() {\n            if letter == guess {\n                self.progress[i] = letter.clone();\n            }\n        }\n    }\n\n    fn status(&amp;self) -&gt; &amp;str {\n        if self.misses &gt; 10 {\n            \"lose\"\n        } else if self.progress == self.word {\n            \"win\"\n        } else {\n            \"active\"\n        }\n    }\n}\n\nstruct Server {\n    out: Sender,\n    tx: std::sync::mpsc::Sender&lt;Job&gt;,\n}\n\nimpl Handler for Server {\n    fn on_message(&amp;mut self, msg: Message) -&gt; Result&lt;()&gt; {\n        let string_msg = msg.to_string();\n\n        self.tx\n            .send(Box::new(move |mut game: &amp;mut Game| {\n                if game.guesses.insert(string_msg.clone()) {\n                    check_letter(&amp;mut game, &amp;string_msg);\n                };\n\n                let status = game.status();\n\n                let progress = game.progress.clone();\n                let guesses = game.guesses.clone().into_iter().collect::&lt;Vec&lt;String&gt;&gt;();\n                println!(\n                    \"guesses: {:?}, progress: {:?}, misses: {}, status: {}\",\n                    guesses, progress, game.misses, status\n                );\n\n                self.out.broadcast(json::stringify(object!{\n                    \"status\"  =&gt; \"status\",\n                    \"progress\" =&gt; \"progress\",\n                    \"guesses\" =&gt; \"guesses\",\n                    \"misses\" =&gt; \"misses\",\n                }));\n            }))\n            .unwrap();\n\n        Ok(())\n    }\n\n    fn on_close(&amp;mut self, code: CloseCode, reason: &amp;str) {\n        match code {\n            CloseCode::Normal =&gt; println!(\"The client is done with the connection.\"),\n            CloseCode::Away =&gt; println!(\"The client is leaving the site.\"),\n            _ =&gt; println!(\"The client encountered an error: {}\", reason),\n        }\n    }\n}\n\nfn check_letter(game: &amp;mut Game, guess: &amp;String) {\n    if game.word.contains(guess) {\n        game.update_progress(guess);\n    } else {\n        game.increment_miss();\n    }\n}\n\nfn generate_word() -&gt; Vec&lt;String&gt; {\n    let mut generator = Generator::with_naming(Name::Plain);\n    generator\n        .next()\n        .unwrap()\n        .split(\"\")\n        .map(|c| c.to_string())\n        .filter(|s| s != \"\")\n        .collect::&lt;Vec&lt;String&gt;&gt;()\n}\n\nfn start_game() -&gt; Game {\n    let word = generate_word();\n\n    Game {\n        progress: vec![\"\".to_string(); word.len()],\n        word: word,\n        guesses: HashSet::new(),\n        misses: 0,\n    }\n}\n\nfn main() {\n    let (tx, rx) = mpsc::channel::&lt;Job&gt;();\n\n    thread::spawn(move || {\n        let mut game = start_game();\n        for mut received in rx {\n            received(&amp;mut game)\n        }\n    });\n\n    listen(\"127.0.0.1:3000\", |out| Server {\n        out: out,\n        tx: mpsc::Sender::clone(&amp;tx),\n    }).unwrap();\n}\n</code></pre>\n\n<p>I am getting the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling hang_man v0.1.0 (file:///Users/smykowski/workspace/rust/hang_man)\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:57:22\n   |\n57 |           self.tx.send(Box::new(move |mut game: &amp;mut Game| {\n   |  ______________________^\n58 | |             if game.guesses.insert(string_msg.clone()) {\n59 | |                 check_letter(&amp;mut game, &amp;string_msg);\n60 | |             };\n...  |\n75 | |             }));\n76 | |         })).unwrap();\n   | |__________^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 54:5...\n  --&gt; src/main.rs:54:5\n   |\n54 | /     fn on_message(&amp;mut self, msg: Message) -&gt; Result&lt;()&gt; {\n55 | |         let string_msg = msg.to_string();\n56 | |\n57 | |         self.tx.send(Box::new(move |mut game: &amp;mut Game| {\n...  |\n78 | |         Ok(())\n79 | |     }\n   | |_____^\nnote: ...so that the type `[closure@src/main.rs:57:31: 76:10 string_msg:std::string::String, self:&amp;mut Server]` will meet its required lifetime bounds\n  --&gt; src/main.rs:57:22\n   |\n57 |           self.tx.send(Box::new(move |mut game: &amp;mut Game| {\n   |  ______________________^\n58 | |             if game.guesses.insert(string_msg.clone()) {\n59 | |                 check_letter(&amp;mut game, &amp;string_msg);\n60 | |             };\n...  |\n75 | |             }));\n76 | |         })).unwrap();\n   | |__________^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that expression is assignable (expected std::boxed::Box&lt;for&lt;'r&gt; std::ops::FnMut(&amp;'r mut Game) + std::marker::Send + 'static&gt;, found std::boxed::Box&lt;for&lt;'r&gt; std::ops::FnMut(&amp;'r mut Game) + std::marker::Send&gt;)\n  --&gt; src/main.rs:57:22\n   |\n57 |           self.tx.send(Box::new(move |mut game: &amp;mut Game| {\n   |  ______________________^\n58 | |             if game.guesses.insert(string_msg.clone()) {\n59 | |                 check_letter(&amp;mut game, &amp;string_msg);\n60 | |             };\n...  |\n75 | |             }));\n76 | |         })).unwrap();\n   | |__________^\n</code></pre>\n"}, {"tags": ["generics", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524447687, "post_id": 49972233, "comment_id": 86960676, "body": "I believe this question to already be answered by the answers in <a href=\"https://stackoverflow.com/q/29740488/155423\">Parameter type may not live long enough?</a>; <a href=\"https://stackoverflow.com/q/45194762/155423\">The parameter type <code>T</code> may not live long enough when writing a binary searching tree</a>; <a href=\"https://stackoverflow.com/q/49918896/155423\">The parameter type <code>T</code> may not live long enough</a>; <a href=\"https://stackoverflow.com/q/32625583/155423\">Parameter type may not live long enough</a>, etc."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524447771, "post_id": 49972233, "comment_id": 86960694, "body": "Please take the time to perform some basic research effort before posting your question and then <i>show</i> that research effort in the question. People who answer questions on Stack Overflow do so with the intent that people in the future will read those answers in the future. Ignoring their hard work makes Stack Overflow mostly meaningless and less useful of a resource."}, {"owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524449208, "post_id": 49972233, "comment_id": 86960965, "body": "In your examples, a specific object of type T is either being stored or returned by the generic object. It seems clear that the required lifetime is that of the object being transferred/stored.  In my example, we are not storing or returning any T, so whose lifetime are we talking about? I am not able to see the correspondence to your examples, but of course I am new to Rust."}, {"owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524449250, "post_id": 49972233, "comment_id": 86960975, "body": "Just because the error message is the same doesn&#39;t mean the source of the problem is the same. Please make an effort to understand the question in good faith, just as you expect effort from the asker. People who ask questions on StackOverflow are hoping to get intelligent help that they could not get from a search engine, and knee-jerk dismissiveness makes it an unfriendly and less useful resource for the learners that need it most."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524451756, "post_id": 49972233, "comment_id": 86961481, "body": "I apologize that I&#39;ve offended you. A vast majority of people asking questions don&#39;t take the time to do any research, and it&#39;s noticeable. That&#39;s why Stack Overflow has rules about how to ask questions, and that&#39;s why I&#39;m encouraging you to <b>show</b> that effort that you made before asking the question <i>in the question itself</i>. Otherwise SO becomes a wasteland of &quot;here&#39;s my (half-provided) code, make it work&quot; followed up by people saying &quot;Yeah, I did research. No, nothing anyone has ever asked is remotely like what I&#39;m asking, trust me&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524452587, "post_id": 49972233, "comment_id": 86961640, "body": "For example, if you had started by putting the content of <a href=\"https://stackoverflow.com/questions/49972233/why-do-i-need-to-provide-lifetimes-for-a-structs-generic-parameters-which-are-n/49972692#comment86960965_49972233\">your comment</a> into the question along with some links to these existing questions that you had looked at, we wouldn&#39;t never have had this discussion. You can <i>still</i> <a href=\"https://stackoverflow.com/posts/49972233/edit\">edit</a> your question to make it the question it should have been and all these comments will disappear."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524452797, "post_id": 49972233, "comment_id": 86961681, "body": "And piling on, I leave these comments because <i>I want every question and question asker to be excellent</i>. It&#39;d be easier to leave downvotes and move on, but I don&#39;t believe that will actually make anything better. I only do that for &quot;lost causes&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1524452958, "post_id": 49972233, "comment_id": 86961716, "body": "What about <a href=\"https://stackoverflow.com/q/49299043/155423\">\u201cThe parameter type <code>C</code> may not live long enough\u201d, when it doesn&#39;t need to</a>? That seems like more of an exact duplicate... when you were doing your research, what caused you to reject that as answering your question?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1524453437, "post_id": 49972233, "comment_id": 86961828, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/49299043/the-parameter-type-c-may-not-live-long-enough-when-it-doesnt-need-to\">&quot;The parameter type `C` may not live long enough&quot;, when it doesn&#39;t need to</a>, The solution is as simple as the compiler say <code>struct Gloop&lt;&#39;a, T: &#39;a + Add&gt;</code>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1524453090, "last_edit_date": 1524453090, "creation_date": 1524451236, "answer_id": 49972692, "question_id": 49972233, "link": "https://stackoverflow.com/questions/49972233/why-do-i-need-to-provide-lifetimes-for-a-structs-generic-parameters-which-are-n/49972692#49972692", "title": "Why do I need to provide lifetimes for a struct&#39;s generic parameters which are not members of the struct?", "body": "<p>Note: I answered this, but think the question is actually a duplicate of </p>\n\n<p><a href=\"https://stackoverflow.com/q/49299043/155423\">&quot;The parameter type `C` may not live long enough&quot;, when it doesn&#39;t need to</a></p>\n\n<p>This answer can be deleted if others agree.</p>\n\n<hr>\n\n<blockquote>\n  <p>Nowhere in either <code>Gloop</code> or <code>Mimsy</code> (or any <code>Wumpus&lt;T&gt;</code>) is a <code>T</code> ever stored. </p>\n</blockquote>\n\n<p>Rust doesn't care about what you <em>do</em>, but what you <em>could do</em>. There are no signature differences between these two structs:</p>\n\n<pre><code>struct Alpha&lt;T&gt; {\n    a: T,\n}\n\nstruct Beta&lt;T&gt; {\n    b: fn(&amp;T),\n}\n</code></pre>\n\n<p>Namely, you can't tell the difference between the two and <code>Beta</code> could become <code>Alpha</code> without noticeable external changes to a consumer. Once you have a generic type, you need to handle any possibility.</p>\n\n<p>You can either add <code>T: 'static</code> or add a lifetime and add <code>T: 'a</code>. </p>\n\n<p>See also:</p>\n\n<ul>\n<li>Why the lifetime is needed at all\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/41794800/155423\">Why is the bound `T: &#39;a` required in order to store a reference `&amp;&#39;a T`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29740488/155423\">Parameter type may not live long enough?</a></li>\n</ul></li>\n<li>For similar reasons, Rust only checks function signatures\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31609137/155423\">Why are explicit lifetimes needed in Rust?</a> </li>\n</ul></li>\n<li>Once you are past that, you need to adjust your trait bounds\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/34630695/155423\">How to write a trait bound for adding two references of a generic type?</a></li>\n</ul></li>\n</ul>\n"}], "owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 370, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1524453090, "creation_date": 1524446376, "last_edit_date": 1524450195, "question_id": 49972233, "link": "https://stackoverflow.com/questions/49972233/why-do-i-need-to-provide-lifetimes-for-a-structs-generic-parameters-which-are-n", "title": "Why do I need to provide lifetimes for a struct&#39;s generic parameters which are not members of the struct?", "body": "<p>I'm trying to get my head around the way that generics and lifetimes interact. Consider:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct Gloop&lt;'a, T: Add&gt; {\n    wumpus: &amp;'a Wumpus&lt;T&gt;,\n}\n\ntrait Wumpus&lt;T: Add&gt; {\n    fn fleeb(&amp;self, x: &amp;T) -&gt; bool;\n}\n\nstruct Mimsy {\n    jubjub: f64,\n}\n\nimpl&lt;T: Add&gt; Wumpus&lt;T&gt; for Mimsy {\n    fn fleeb(&amp;self, x: &amp;T) -&gt; bool {\n        return (x + x) &gt; 0;\n    }\n}\n\nfn main() {\n    let a = Mimsy { jubjub: 1. };\n    let b = Gloop::&lt;i32&gt; { wumpus: &amp;a };\n    println!(\"{}\", b.fleeb(1));\n}\n</code></pre>\n\n<p>Which yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0309]: the parameter type `T` may not live long enough\n --&gt; src/main.rs:4:5\n  |\n3 | struct Gloop&lt;'a, T: Add&gt; {\n  |                  -- help: consider adding an explicit lifetime bound `T: 'a`...\n4 |     wumpus: &amp;'a Wumpus&lt;T&gt;,\n  |     ^^^^^^^^^^^^^^^^^^^^^\n  |\nnote: ...so that the reference type `&amp;'a Wumpus&lt;T&gt; + 'a` does not outlive the data it points at\n --&gt; src/main.rs:4:5\n  |\n4 |     wumpus: &amp;'a Wumpus&lt;T&gt;,\n  |     ^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p><em>Which</em> object in my program is the one which may not live long enough? Nowhere in either <code>Gloop</code> or <code>Mimsy</code> (or any <code>Wumpus&lt;T&gt;</code>) is a <code>T</code> ever stored. </p>\n"}, {"tags": ["testing", "rust", "iron", "reqwest"], "answers": [{"tags": [], "owner": {"reputation": 4874, "user_id": 595304, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/e4cc4011841c2a363c66e259c68a567f?s=128&d=identicon&r=PG", "display_name": "evotopid", "link": "https://stackoverflow.com/users/595304/evotopid"}, "is_accepted": false, "score": 0, "last_activity_date": 1524436364, "last_edit_date": 1524436364, "creation_date": 1524434955, "answer_id": 49971200, "question_id": 49969210, "link": "https://stackoverflow.com/questions/49969210/reqwests-clientnew-hangs-in-test-with-iron-in-a-second-thread/49971200#49971200", "title": "Reqwest&#39;s Client::new hangs in test with Iron in a second thread", "body": "<p>I think the problem is that the thread you spawn does not terminate and the test ends up waiting for it to terminate (I'm not sure why this happens and it does not end up being killed by the test runner after a while), i.e. not reqwest is the issue but your iron server.</p>\n\n<p>Now I'm not sure how to fix this, in fact <a href=\"https://docs.rs/iron/0.6.0/iron/struct.Listening.html\" rel=\"nofollow noreferrer\"><code>Listening::close</code></a> seems to be broken since iron 0.6.0 still depends on hyper 0.10 which does not have that functionality anymore. </p>\n\n<p>In the worst case you can implement a server using hyper directly, as I did <a href=\"https://github.com/leoschwarz/reqwest_mock/blob/b5bce84d2f2b8de3ba3c933edcd7d1ba6f16dffd/tests/helper/mod.rs#L1\" rel=\"nofollow noreferrer\">here</a>. Maybe there is an actual quick solution to your original code, I don't know.</p>\n\n<p>Usually if you can find a way around running a server in your tests this would be the ideal case in my opinion. With the crate I linked before (<code>reqwest-mock</code>, disclaimer I'm the author) you could write your <code>_main_loop</code> function to take a <a href=\"https://docs.rs/reqwest_mock/0.5.0/reqwest_mock/client/struct.GenericClient.html\" rel=\"nofollow noreferrer\"><code>GenericClient</code></a> as an argument, and then mock the request in your tests using <a href=\"https://docs.rs/reqwest_mock/0.5.0/reqwest_mock/client/struct.StubClient.html\" rel=\"nofollow noreferrer\"><code>StubClient</code></a>, and use the direct client in the production code. But maybe you don't even need that and should aim to design your crawler in a way so that you can test the different functions as independently of each other as possible.</p>\n"}], "owner": {"reputation": 59, "user_id": 7482754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/af0e56bde7a998d705b7d2188bf6562a?s=128&d=identicon&r=PG", "display_name": "thatlittlegit", "link": "https://stackoverflow.com/users/7482754/thatlittlegit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 66, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1524436364, "creation_date": 1524420935, "last_edit_date": 1524421113, "question_id": 49969210, "link": "https://stackoverflow.com/questions/49969210/reqwests-clientnew-hangs-in-test-with-iron-in-a-second-thread", "title": "Reqwest&#39;s Client::new hangs in test with Iron in a second thread", "body": "<p>I'm using Reqwest in my web crawler, and I'm trying to add tests for the main loop to ensure I get correct output. I'm attempting to use Iron for a fake HTTP server, with preset responses. However, in my <code>main_loop</code> function, <code>let client = Client::new();</code> is hanging.</p>\n\n<p>The first few lines of <code>_main_loop</code>:</p>\n\n<pre><code>fn _main_loop(starton: String, panic: bool) {\n    //panic(\"test\") // calls as normal\n    let client = Client::new(); // &lt;-- problem!\n    panic(\"test\") // doesn't call\n    let mut future_urls: Vec&lt;String&gt;;\n    // ...\n}\n</code></pre>\n\n<p>My test <code>mod</code>:</p>\n\n<pre><code>#[cfg(test)]\nmod tests {\n    use iron::{Iron, IronResult, Headers};\n    use iron::response::Response;\n    use iron::request::Request;\n    use iron::status;\n    use iron::middleware::Chain;\n    use iron::headers::ContentType;\n    use iron::mime::{Mime, TopLevel, SubLevel};\n    use iron::typemap::TypeMap;\n    use std;\n\n    use *;\n\n    #[test]\n    fn __main_loop() {\n        fn handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n            let mut mime = Headers::new();\n            mime.set(ContentType(Mime(TopLevel::Text, SubLevel::Html, Vec::new())));\n\n            Ok(Response {\n                headers: mime,\n                status: Some(status::Ok),\n                body: Some(Box::new(match req.url.path().join(\"/\").as_str() {\n                \"\" =&gt; \"&lt;a href='file'&gt;&lt;/a&gt;&lt;a href='file1'&gt;&lt;/a&gt;\",\n                \"file\" =&gt; \"&lt;a href='/file1'&gt;&lt;/a&gt;\",\n                \"file1\" =&gt; \"&lt;a href='/file'&gt;&lt;/a&gt;\",\n                _ =&gt; \"not found\"\n                })),\n                extensions: TypeMap::new()\n            })\n        }\n\n        let child = std::thread::spawn(|| Iron::new(Chain::new(handler)).http(\"localhost:9999\").unwrap());\n\n        let f: Vec&lt;String&gt; = Vec::new();\n        assert_eq!(_main_loop(\"http://localhost:9999/\".to_string(), false), f);\n    }\n}\n</code></pre>\n\n<p>Terminal output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo test\n   Compiling crawler v1.0.0 (file:///home/*******/crawler)\nwarning: unreachable statement\n  --&gt; src/main.rs:82:5\n   |\n82 |     let mut future_urls: Vec&lt;String&gt;;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unreachable_code)] on by default\n\nwarning: unused variable: `client`\n  --&gt; src/main.rs:80:9\n   |\n80 |     let client = Client::new();\n   |         ^^^^^^ help: consider using `_client` instead\n   |\n   = note: #[warn(unused_variables)] on by default\n\nwarning: unused variable: `starton`\n  --&gt; src/main.rs:79:15\n   |\n79 | fn _main_loop(starton: String, _panic: bool) -&gt; Vec&lt;String&gt; {\n   |               ^^^^^^^ help: consider using `_starton` instead\n\nwarning: unused variable: `child`\n   --&gt; src/main.rs:239:13\n    |\n239 |         let child = std::thread::spawn(|| Iron::new(Chain::new(handler)).http(\"localhost:9999\").unwrap());\n    |             ^^^^^ help: consider using `_child` instead\n\n    Finished dev [unoptimized + debuginfo] target(s) in 4.24 secs\n     Running target/debug/deps/crawler-9c5de394eb85849d\n\nrunning 9 tests\ntest html::tests::_get_attribute_for_elem ... ok\ntest html::tests::_html_token_sink ... ok\ntest url_utils::tests::_add_url_to_vec ... ok\ntest url_utils::tests::_get_root_domain ... ok\ntest html::tests::_find_urls_in_html ... ok\ntest url_utils::tests::_check_if_is_in_url_list ... ok\ntest url_utils::tests::_remove_get_params ... ok\ntest url_utils::tests::_repair_suggested_url ... ok\n</code></pre>\n\n<p>When running the test single threaded (<code>-- --test-threads 1</code>), it ends with <code>test tests::__main_loop ...</code>.</p>\n"}, {"tags": ["multithreading", "rust", "reference-counting"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1524416868, "post_id": 49968530, "comment_id": 86952875, "body": "I believe your question is already answered by the answers in <a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/49968530/edit\">edit</a> your question to explain the differences. If not, we can mark this as already answered."}, {"owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524425174, "post_id": 49968530, "comment_id": 86955685, "body": "@Shepmaster oh, thanks a lot, that question is totally relevant (unfortunately, the answer for it says my goal cannot be accomplished in a concise way; I will create an issue in the Rust repository, because to me the situation looks ridiculous)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524427136, "post_id": 49968530, "comment_id": 86956247, "body": "What do you feel would be more concise while keeping memory safety? Remember that <i>nothing forces you to use Rust</i>. If you prefer the conciseness of C++ with the corresponding potential for memory unsafety, it&#39;s totally cool to stay with what you know. Also, idiomatic Rust  makes heavy use of crates, so the fact that a crate is needed to accomplish this goal is unlikely to sway any opinions. Remember that even random number generation isn&#39;t part of the standard library; we <i>like</i> to use crates."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524427343, "post_id": 49968530, "comment_id": 86956297, "body": "I&#39;m also biased, as I don&#39;t think <a href=\"https://play.rust-lang.org/?gist=2660c7e66b1c33f844c9605c2f1c25ab&amp;version=stable\" rel=\"nofollow noreferrer\">the solution is particularly verbose</a>."}, {"owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524429750, "post_id": 49968530, "comment_id": 86956945, "body": "Well, if I&#39;m not mistaken, both of crates given in that answer are not actively maintained."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524430441, "post_id": 49968530, "comment_id": 86957145, "body": "(a) Why does something that does one thing well <i>need</i> to be maintained? The crates may just be &quot;complete&quot;. (b) <a href=\"https://github.com/crossbeam-rs/crossbeam\" rel=\"nofollow noreferrer\">crossbeam had a commit 2 months ago</a> and I know is undergoing a refactoring. It&#39;s also mostly composed of <a href=\"https://github.com/crossbeam-rs\" rel=\"nofollow noreferrer\">smaller crates</a> that are recently updated. <a href=\"https://github.com/Kimundi/scoped-threadpool-rs\" rel=\"nofollow noreferrer\">scoped-threadpool</a> had a commit 7 months ago but no reported issues."}], "owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 56, "favorite_count": 0, "closed_date": 1524426892, "answer_count": 0, "score": 0, "last_activity_date": 1603219723, "creation_date": 1524416592, "last_edit_date": 1603219723, "question_id": 49968530, "link": "https://stackoverflow.com/questions/49968530/is-using-an-arc-really-the-best-way-to-implement-a-counter-shared-between-thread", "closed_reason": "Duplicate", "title": "Is using an Arc really the best way to implement a counter shared between threads?", "body": "<p>I've just read <a href=\"https://doc.rust-lang.org/book/second-edition/ch16-03-shared-state.html\" rel=\"nofollow noreferrer\">the section of <em>The Rust Programming Language</em> about sharing the data between threads</a>. The task is simple: to share a counter between multiple threads and increment it from these threads.</p>\n\n<p>My C++ solution:  </p>\n\n<ol>\n<li>create a simple variable on stack  </li>\n<li>create mutex  </li>\n<li>share both between threads  </li>\n<li>do the job</li>\n</ol>\n\n<p>The Rust solution, as <a href=\"https://doc.rust-lang.org/book/second-edition/ch16-03-shared-state.html#atomic-reference-counting-with-arct\" rel=\"nofollow noreferrer\">suggested by the book</a>:</p>\n\n<pre><code>use std::sync::{Mutex, Arc};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&amp;counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n</code></pre>\n\n<p>In C++ terms, it means creating a <code>std::shared_ptr</code> for storing the counter. Is it really the best what can be done here to solve the task? It looks like significant overhead in comparison with the C++ solution.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "edited": false, "score": 0, "creation_date": 1524409362, "post_id": 49967159, "comment_id": 86950383, "body": "Thank you for your insight, my example has a mistake: <code>Week</code>&#39;s <code>days</code> is <code>[Day; 7]</code> rather than <code>Vec&lt;Day&gt;</code>. Does it make any difference? I&#39;m asking because I&#39;m still facing an error: a collection of type <code>std::vec::Vec&lt;timedata::flexday::FlexDay&gt;</code> cannot be built from an iterator over elements of type <code>&amp;timedata::flexday::FlexDay</code>     |     = help: the trait <code>std::iter::FromIterator&lt;&amp;timedata::flexday::FlexDay&gt;</code> is not implemented for <code>std::vec::Vec&lt;timedata::flexday::FlexDay&gt;</code>"}, {"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "edited": false, "score": 0, "creation_date": 1524410269, "post_id": 49967159, "comment_id": 86950618, "body": "It does make difference but I don&#39;t get why. Adding <code>to_vec()</code> before <code>into_iter()</code> does the trick, but I don&#39;t understand what&#39;s happening here :-/"}], "tags": [], "owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "is_accepted": true, "score": 1, "last_activity_date": 1524409576, "last_edit_date": 1524409576, "creation_date": 1524408191, "answer_id": 49967159, "question_id": 49966420, "link": "https://stackoverflow.com/questions/49966420/how-do-i-collect-from-a-nested-iterator/49967159#49967159", "title": "How do I collect from a nested iterator?", "body": "<p>To unnest the iterator, use <code>flat_map</code> instead of <code>map</code>.</p>\n\n<p>Furthermore, you need to either use <code>Copy</code> types or use <code>into_iter</code> to iterate over owned values and not just references.</p>\n\n<p>Working example:</p>\n\n<pre><code>#[derive(PartialEq)]\nenum DayStatus {\n    Normal,\n    Abnormal,\n}\n\nstruct Week {\n    days: Vec&lt;Day&gt;,\n}\n\nstruct Day {\n    status: DayStatus,\n}\n\nstruct Month {\n    weeks: Vec&lt;Week&gt;,\n}\n\nfn get_abnormal_days(month: Month) -&gt; Vec&lt;Day&gt; {\n    // assume we have a month: Month which is filled\n    month\n        .weeks\n        .into_iter()\n        .flat_map(|w| {\n            w.days\n                .into_iter()\n                .filter(|d| d.status == DayStatus::Abnormal)\n        })\n        .collect()\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1387, "favorite_count": 0, "accepted_answer_id": 49967159, "answer_count": 1, "score": 1, "last_activity_date": 1524409923, "creation_date": 1524403658, "last_edit_date": 1524409923, "question_id": 49966420, "link": "https://stackoverflow.com/questions/49966420/how-do-i-collect-from-a-nested-iterator", "title": "How do I collect from a nested iterator?", "body": "<p>I'm trying to collect from a nested iterator and I get a <code>FromIterator</code> not implemented error. Here's an example:</p>\n\n<pre><code>#[derive(PartialEq)]\nenum DayStatus {\n    Normal,\n    Abnormal,\n}\n\nstruct Week {\n    days: Vec&lt;Day&gt;,\n}\n\nstruct Day {\n    status: DayStatus,\n}\n\nstruct Month {\n    weeks: Vec&lt;Week&gt;,\n}\n\nfn get_abnormal_days(month: Month) -&gt; Vec&lt;Day&gt; {\n    // assume we have a month: Month which is filled\n    month\n        .weeks\n        .iter()\n        .map(|w| w.days.iter().filter(|d| d.status == DayStatus::Abnormal))\n        .collect()\n}\n\nfn main() {}\n</code></pre>\n\n<p>Gives me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> error[E0277]: the trait bound `std::vec::Vec&lt;Day&gt;: std::iter::FromIterator&lt;std::iter::Filter&lt;std::slice::Iter&lt;'_, Day&gt;, [closure@src/main.rs:24:39: 24:74]&gt;&gt;` is not satisfied\n  --&gt; src/main.rs:25:10\n   |\n25 |         .collect()\n   |          ^^^^^^^ a collection of type `std::vec::Vec&lt;Day&gt;` cannot be built from an iterator over elements of type `std::iter::Filter&lt;std::slice::Iter&lt;'_, Day&gt;, [closure@src/main.rs:24:39: 24:74]&gt;`\n   |\n   = help: the trait `std::iter::FromIterator&lt;std::iter::Filter&lt;std::slice::Iter&lt;'_, Day&gt;, [closure@src/main.rs:24:39: 24:74]&gt;&gt;` is not implemented for `std::vec::Vec&lt;Day&gt;`\n</code></pre>\n\n<p>I could try to <code>impl</code> the <code>FromIterator</code> but the type it has to be from seems too inner to be deal with. I think I'm not calling the proper <code>collect</code> or maybe <code>map</code> but I can't see what I'm missing </p>\n\n<p>My first attempt tried to return <code>&amp;[Day]</code> but it was failing as well.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1524373588, "post_id": 49962611, "comment_id": 86941350, "body": "You can write a wrapper type and implement the trait for it."}, {"owner": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1524373835, "post_id": 49962611, "comment_id": 86941391, "body": "Also, Why does <code>string.iter()</code> not suffice?"}, {"owner": {"reputation": 8871, "user_id": 1132871, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/IO6V2.jpg?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/1132871/alex"}, "reply_to_user": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1524378562, "post_id": 49962611, "comment_id": 86942306, "body": "@BernardoMeurer Please see the updated question. As far as I know there is no trait requiring implement <code>iter()</code>"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1524378689, "post_id": 49962611, "comment_id": 86942335, "body": "@BernardoMeurer Besides the fact that there needs to be a trait for generics to work in this case, neither <code>str</code>, <code>&amp;str</code>, <code>String</code>, nor <code>&amp;String</code> appear to have an <code>iter()</code> method."}], "answers": [{"tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": false, "score": 4, "last_activity_date": 1524379789, "creation_date": 1524379789, "answer_id": 49963320, "question_id": 49962611, "link": "https://stackoverflow.com/questions/49962611/why-does-str-not-implement-intoiterator/49963320#49963320", "title": "Why does &amp;str not implement IntoIterator?", "body": "<p>The easiest solution, as stated in the comments, is to create a wrapper type:</p>\n\n<pre><code>use ::std::iter::IntoIterator;\n\nstruct StringWrapper&lt;'a&gt;(&amp;'a str);\n\nimpl&lt;'a&gt; IntoIterator for StringWrapper&lt;'a&gt; {\n    type Item = char;\n    type IntoIter = ::std::str::Chars&lt;'a&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.0.chars()\n    }\n}\n\nfn main() {\n    // Raw str\n    let wr = StringWrapper(\"test 1\");\n    for c in wr {\n        println!(\"{}\", c);\n    }\n    println!(\"-----\");\n\n    // Reference to raw str \n    let s = \"test 2\";\n    let wr_s = StringWrapper(s);\n    for c in wr_s {\n        println!(\"{}\", c);\n    }\n    println!(\"-----\");\n\n    // reference to String\n    let owned_s = \"test 3\";\n    let wr_s_owned = StringWrapper(&amp;owned_s);\n    for c in wr_s_owned {\n        println!(\"{}\", c);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "is_accepted": false, "score": 6, "last_activity_date": 1524379872, "creation_date": 1524379872, "answer_id": 49963332, "question_id": 49962611, "link": "https://stackoverflow.com/questions/49962611/why-does-str-not-implement-intoiterator/49963332#49963332", "title": "Why does &amp;str not implement IntoIterator?", "body": "<p>The problem with <code>String</code> and <code>str</code> is that they have two types of iterators - <code>chars()</code> - iterator over UTF-8 chars and <code>bytes()</code> - iterator over bytes. That's why it's impossible to implement <code>IntoIterator</code> for these types. You have to create two wrappers (or pick one of them)</p>\n\n<pre><code>struct ByteString(String)\nstruct Utf8String(String)\n</code></pre>\n\n<p>and implement <code>IntoIterator</code> for them.</p>\n"}], "owner": {"reputation": 8871, "user_id": 1132871, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/IO6V2.jpg?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/1132871/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 461, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1524409737, "creation_date": 1524372980, "last_edit_date": 1524409737, "question_id": 49962611, "link": "https://stackoverflow.com/questions/49962611/why-does-str-not-implement-intoiterator", "title": "Why does &amp;str not implement IntoIterator?", "body": "<p>I am writing a container implementing the prefix tree in a generic way (key and value are generic parameters). Due to the nature of this data structure I need the key to have an iterator.</p>\n\n<p>Essentially in accordance to <a href=\"https://stackoverflow.com/questions/39675949/is-there-a-trait-supplying-iter\">this question</a> the <code>IntoIterator</code> trait is responsible for this possibility but not all the structures implement it. For example <code>&amp;str</code> and <code>String</code> do not implement it.</p>\n\n<p>What should I do in this case when <code>IntoIterator</code> isn't implemented by the standard type?</p>\n\n<p>An expected API is</p>\n\n<pre><code>let mut t1 = Trie::new();\nt1.insert(String::from(\"this\"), 1);\n\nlet mut t2 = Trie::new();\nt2.insert(vec![1, 2, 3], 1);\n</code></pre>\n"}, {"tags": ["variables", "types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1524372444, "creation_date": 1524372444, "answer_id": 49962572, "question_id": 49962229, "link": "https://stackoverflow.com/questions/49962229/variable-shadowing-in-the-same-scope-in-rust/49962572#49962572", "title": "Variable shadowing in the same scope in Rust?", "body": "<blockquote>\n  <ol>\n  <li>What happens to the previous values?</li>\n  </ol>\n</blockquote>\n\n<p>Nothing.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Is there a way to still access these values?</li>\n  </ol>\n</blockquote>\n\n<p>No.</p>\n\n<blockquote>\n  <ol start=\"3\">\n  <li>If they are still consuming memory space, is it possible to release that space?</li>\n  </ol>\n</blockquote>\n\n<p>No.</p>\n\n<hr>\n\n<p>Now, all of the above should be true from the perspective of the code.  They're not <em>necessarily</em> true from the perspective of the <em>optimiser</em>.  For example, the optimiser might notice that uses of the first and second <code>x</code>'s don't overlap, so it can re-use the stack storage of the first <code>x</code> for the second <code>x</code>.</p>\n\n<p>Or it might not.  The language itself, insofar as I am aware, has no opinion on the subject.</p>\n\n<p>The only way I'm aware of that you can <em>guarantee</em> that a local variable will <em>definitely</em> release it's stack storage is to return from the function it's defined in.</p>\n\n<p>... well, until you consider <em>inlining</em>, which could also make that not true.</p>\n\n<p>Short version: don't worry about it, unless you're using so much stack space that it's causing actual, measurable problems.</p>\n"}, {"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1524380333, "post_id": 49962599, "comment_id": 86942727, "body": "I&#39;d be hesitant to call the threading example &quot;accessing the value after shadow&quot;, partly because if you move the variable to another location, it no longer exists in the original location. You&#39;re <i>technically</i> shadowing the old variable, but you wouldn&#39;t be able to access the old variable anyway, since it&#39;s been moved."}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1524386720, "post_id": 49962599, "comment_id": 86944289, "body": "@BHustus: Yes, Q2: Is there a way to still access these <b>values</b>? so this is a way to access <b>value</b> not address of local variable,  see the new Edit section. Thanks for the comment."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1524391574, "post_id": 49962599, "comment_id": 86945425, "body": "Ultimately I think it comes down to an issue of technicalities/semantics.The value can be moved out before the variable is shadowed, but ultimately the value can&#39;t be accessed <i>from a shadowed variable</i>. I read OP&#39;s question with the assumption that they meant the latter, but then I could be wrong."}], "tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 2, "last_activity_date": 1524420169, "last_edit_date": 1524420169, "creation_date": 1524372883, "answer_id": 49962599, "question_id": 49962229, "link": "https://stackoverflow.com/questions/49962229/variable-shadowing-in-the-same-scope-in-rust/49962599#49962599", "title": "Variable shadowing in the same scope in Rust?", "body": "<blockquote>\n  <p>The value can be moved out before the variable is shadowed, but\n  ultimately the value can't be accessed from a shadowed variable.</p>\n</blockquote>\n\n<p>Answer to Q1: The <strong>decision is up to the compiler</strong> and data type and size and OS and system memory load (usually stack based data types stay to the end of the <code>main</code>, and heap based data types with big memory footprint may need to drop if needed).<br>\nAnswer to Q2: After shadowing: <strong>No</strong>, before shadowing: Yes (<strong>Values</strong>), run <a href=\"https://play.rust-lang.org/?gist=cf5d02f6fee1e4173ce1a1914c94dcc6&amp;version=stable\" rel=\"nofollow noreferrer\">this code</a>.<br>\nAnswer to Q3: After shadowing: <strong>No</strong>, before shadowing: see: <a href=\"https://doc.rust-lang.org/std/mem/fn.drop.html\" rel=\"nofollow noreferrer\">Disposes of a value</a>. and <a href=\"https://stackoverflow.com/questions/48485454/rust-manual-memory-management\">Rust manual memory management</a></p>\n\n<hr>\n\n<p>Variable scoping and shadowing:<br>\nAdvantages:<br>\n1. Since data cannot be accessed from outer scope, Data Integrity is preserved.<br>\n2. When \"we need more alphabets\", this is nice way to limit variables scope.\nAlso this works well when you need more local variables or scope.</p>\n\n<hr>\n\n<p>A way to still access these <strong>values</strong> before shadowing (note: move forced the closure to take ownership of 'x'):</p>\n\n<pre><code>use std::{thread, time};\nfn main() {\n    let mut v = vec![];\n    let d = time::Duration::from_millis(100);\n\n    let x = 5;\n    println!(\"{}\", x);\n    v.push(thread::spawn(move || {\n        for _ in 1..10 {\n            thread::sleep(d);\n            println!(\"Thread 1: {}\", x);\n        }\n    }));\n\n    let x = 3.14;\n    println!(\"{}\", x);\n    v.push(thread::spawn(move || {\n        for _ in 1..10 {\n            thread::sleep(d);\n            println!(\"Thread 2: {}\", x);\n        }\n    }));\n\n    let x = \"Hello\";\n    println!(\"{}\", x);\n    v.push(thread::spawn(move || {\n        for _ in 1..10 {\n            thread::sleep(d);\n            println!(\"Thread 3: {}\", x);\n        }\n    }));\n\n    for child in v {\n        let _ = child.join();\n    }\n}\n</code></pre>\n\n<p>output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>5\n3.14\nHello\nThread 1: 5\nThread 3: Hello\nThread 2: 3.14\nThread 2: 3.14\nThread 3: Hello\nThread 1: 5\nThread 1: 5\nThread 3: Hello\nThread 2: 3.14\nThread 2: 3.14\nThread 3: Hello\nThread 1: 5\nThread 2: 3.14\nThread 3: Hello\nThread 1: 5\nThread 2: 3.14\nThread 1: 5\nThread 3: Hello\nThread 2: 3.14\nThread 1: 5\nThread 3: Hello\nThread 3: Hello\nThread 2: 3.14\nThread 1: 5\nThread 1: 5\nThread 2: 3.14\nThread 3: Hello\n</code></pre>\n\n<p>Note: <code>move</code> forces the closure to take ownership of 'x', so the address of local <code>x</code> is not the same as thread <code>x</code> but the <strong>value</strong> is:</p>\n\n<pre><code>use std::thread;\nfn main() {\n    let mut v = vec![];\n\n    let x = 5;\n    println!(\"{:p}\", &amp;x);\n    v.push(thread::spawn(move || {\n        println!(\"Thread 1: {:p}\", &amp;x);\n    }));\n\n    let x = 3.14;\n    println!(\"{:p}\", &amp;x);\n    v.push(thread::spawn(move || {\n        println!(\"Thread 2: {:p}\", &amp;x);\n    }));\n\n    let x = \"Hello\";\n    println!(\"{:p}\", &amp;x);\n    v.push(thread::spawn(move || {\n        println!(\"Thread 3: {:p}\", &amp;x);\n    }));\n\n    for child in v {\n        let _ = child.join();\n    }\n}\n</code></pre>\n\n<p>output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x8bf934\n0x8bf9b8\n0x8bfa40\nThread 1: 0x4a3faec\nThread 2: 0x4c3fae8\nThread 3: 0x4e3fa70\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1524403893, "last_edit_date": 1524403893, "creation_date": 1524402307, "answer_id": 49966205, "question_id": 49962229, "link": "https://stackoverflow.com/questions/49962229/variable-shadowing-in-the-same-scope-in-rust/49966205#49966205", "title": "Variable shadowing in the same scope in Rust?", "body": "<p>As far as I know there is only one thing to keep in mind with shadowing: when values are heap allocated.</p>\n\n<p>From the <a href=\"https://doc.rust-lang.org/book/first-edition/variable-bindings.html#scope-and-shadowing\" rel=\"nofollow noreferrer\">book</a>:</p>\n\n<blockquote>\n  <p>Note that shadowing a name does not alter or destroy the value it was bound to, and the value will continue to exist until it goes out of scope, even if it is no longer accessible by any means</p>\n</blockquote>\n\n<p>the previous value is not more accessible after shadowing  and it will be\ndestroyed at the end of the scope, not when the variable is shadowed.</p>\n\n<p>If value are on the stack there is nothing to worry: stack memory management is completely in the hands of the processor.</p>\n\n<p>Instead, if the value is heap allocated, shadowing can be seen as a temporary memory leak that will be released at the end of the scope.</p>\n\n<p>If this may be an issue we can explicitly free the memory with <code>drop()</code> before shadowing:</p>\n\n<pre><code>struct Foo {\n    _v: Vec&lt;i32&gt;\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"dropping foo\");\n    }\n}\n\n\nfn main() {\n    println!(\"start\");\n\n    let x = Foo {_v: vec![1,2,3]};\n\n    drop(x);\n\n    let x = 100;\n\n    println!(\"end\");\n\n}\n</code></pre>\n"}], "owner": {"reputation": 149, "user_id": 9620327, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/99e332d7a37e81bbdd511c2b7dadfad5?s=128&d=identicon&r=PG&f=1", "display_name": "r_duck", "link": "https://stackoverflow.com/users/9620327/r-duck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 932, "favorite_count": 1, "answer_count": 3, "score": 6, "last_activity_date": 1524420169, "creation_date": 1524367848, "last_edit_date": 1524409388, "question_id": 49962229, "link": "https://stackoverflow.com/questions/49962229/variable-shadowing-in-the-same-scope-in-rust", "title": "Variable shadowing in the same scope in Rust?", "body": "<pre><code>fn main() {\n    let x = 5;\n    println!(\"{}\", x);\n\n    let x = 3.14;\n    println!(\"{}\", x);\n\n    let x = \"Hello\";\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<ol>\n<li><p>What happens to the previous values? My understanding is that they are not destroyed.</p></li>\n<li><p>Is there a way to still access these values?</p></li>\n<li><p>If they are still consuming memory space, is it possible to release that space?</p></li>\n</ol>\n"}, {"tags": ["rust", "html5ever"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1524347956, "creation_date": 1524347956, "answer_id": 49960571, "question_id": 49960480, "link": "https://stackoverflow.com/questions/49960480/how-do-i-convert-a-tendrilutf8-to-str-or-string/49960571#49960571", "title": "How do I convert a Tendril&lt;UTF8&gt; to &amp;str or String?", "body": "<p>Use its <code>Deref</code> implementation:</p>\n\n<pre><code>extern crate tendril;\n\nuse tendril::{fmt::UTF8, Tendril};\n\nfn example(t: &amp;Tendril&lt;UTF8&gt;) -&gt; &amp;str {\n    t\n}\n\nfn main() {}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 13429657, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a64ccb275c62e6bae8569a85eef389af?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas Yang", "link": "https://stackoverflow.com/users/13429657/thomas-yang"}, "is_accepted": false, "score": 2, "last_activity_date": 1588124617, "creation_date": 1588124617, "answer_id": 61492838, "question_id": 49960480, "link": "https://stackoverflow.com/questions/49960480/how-do-i-convert-a-tendrilutf8-to-str-or-string/61492838#61492838", "title": "How do I convert a Tendril&lt;UTF8&gt; to &amp;str or String?", "body": "<p>Just like this</p>\n\n<pre><code>    //the value is Tendril&lt;UTF8&gt; type \n    String::from(value);\n</code></pre>\n"}], "owner": {"reputation": 59, "user_id": 7482754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/af0e56bde7a998d705b7d2188bf6562a?s=128&d=identicon&r=PG", "display_name": "thatlittlegit", "link": "https://stackoverflow.com/users/7482754/thatlittlegit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 245, "favorite_count": 0, "accepted_answer_id": 49960571, "answer_count": 2, "score": 2, "last_activity_date": 1588124617, "creation_date": 1524347126, "last_edit_date": 1524347726, "question_id": 49960480, "link": "https://stackoverflow.com/questions/49960480/how-do-i-convert-a-tendrilutf8-to-str-or-string", "title": "How do I convert a Tendril&lt;UTF8&gt; to &amp;str or String?", "body": "<p>I'm using HTML5ever, and I'm trying to put attributes into a <code>Vec&lt;(String, String&gt;)</code> (although <code>(&amp;str, &amp;str)</code> would work too). </p>\n\n<p>Unfortunately, <a href=\"https://docs.rs/html5ever/0.22.2/html5ever/tree_builder/struct.Attribute.html\" rel=\"nofollow noreferrer\">html5ever's attribute values are in <code>Tendril&lt;UTF8&gt;</code>s</a>, not <code>String</code>s (or <code>QualName</code>s, <code>&amp;str</code>s, etc.). How can I convert one of these <code>Tendril</code>s into a <code>String</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525976404, "post_id": 49954900, "comment_id": 87574943, "body": "@Shepmaster do you keep a list of questions you have to update on every Rust update? :D"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525978140, "post_id": 49954900, "comment_id": 87575802, "body": "I use my friend Google: <code>site:stackoverflow.com rust 1.26</code>. I also sometimes watch the PRs to <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md\" rel=\"nofollow noreferrer\">RELEASES.md</a>, then search for relevant Q&amp;A for stabilized features. There&#39;s a vocal contingent of people who complain that Stack Overflow (with and without Rust) has &quot;only outdated information&quot;, so I try to kill them with kindness."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 6, "last_activity_date": 1525975644, "last_edit_date": 1525975644, "creation_date": 1524307192, "answer_id": 49954900, "question_id": 49954543, "link": "https://stackoverflow.com/questions/49954543/is-it-possible-to-return-a-closure-that-is-stored-in-self/49954900#49954900", "title": "Is it possible to return a closure that is stored in self?", "body": "<p>There is nothing special about the closure here. Your problem is this:</p>\n\n<pre><code>fn get_callback(&amp;self) -&gt; T {\n    //          ^ you are borrowing self\n    //                    ^ but you are not returning a reference\n    self.callback\n    //   ^ so callback needs to be moved out\n}\n</code></pre>\n\n<p>A simple solution would be to clone the closure instead:</p>\n\n<pre><code>impl&lt;T: Fn() + Clone&gt; MyTrait&lt;T&gt; for MyStruct&lt;T&gt; {\n    fn get_callback(&amp;self) -&gt; T {\n        self.callback.clone()\n    }\n}\n</code></pre>\n\n<p>Cloning closures is only stable as of Rust 1.26 <a href=\"http://play.integer32.com/?gist=8339b21b87883418ab94332f0926e3bf&amp;version=beta\" rel=\"nofollow noreferrer\">(see playground example)</a>.</p>\n\n<p>Another solution would be to actually move out:</p>\n\n<pre><code>impl&lt;T: Fn()&gt; MyTrait&lt;T&gt; for MyStruct&lt;T&gt; {\n    fn get_callback(self) -&gt; T {\n    //              ^ no reference\n        self.callback\n    }\n}\n</code></pre>\n\n<p>This <a href=\"http://play.integer32.com/?gist=a7d3d7c3fa6752941ab0235d39c8ee90&amp;version=stable\" rel=\"nofollow noreferrer\">works on stable</a> but requires a few other changes and modifying the trait.</p>\n\n<p>But most likely, the solution you want is to <a href=\"http://play.integer32.com/?gist=9432aada886fee78b8857eec8d21f99e&amp;version=stable\" rel=\"nofollow noreferrer\">return a reference to the closure</a>:</p>\n\n<pre><code>fn get_callback(&amp;self) -&gt; &amp;T {\n    &amp;self.callback\n//  ^ there\n}\n</code></pre>\n\n<p>But this also requires to change the trait.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 49954900, "answer_count": 1, "score": 3, "last_activity_date": 1525975644, "creation_date": 1524304735, "last_edit_date": 1524323207, "question_id": 49954543, "link": "https://stackoverflow.com/questions/49954543/is-it-possible-to-return-a-closure-that-is-stored-in-self", "title": "Is it possible to return a closure that is stored in self?", "body": "<p>I'm using a trait to implement something like the <a href=\"https://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"nofollow noreferrer\">template method pattern</a>. During parts of the algorithm execution, I'd like it to be able to invoke a callback to report its progress. The way I've been trying to make this work is by storing a <code>Fn()</code> on my structs that implement the trait, and then providing a <code>get_callback</code> method to provide the callbacks to the default methods on the trait. Unfortunately it's not working.</p>\n\n<p>I suspect the solution will involve some combination of putting the callback in a <code>Box</code> and possibly returning a reference, but I haven't been able to get it to work. Here's a minimal non-working example:</p>\n\n<pre><code>trait MyTrait&lt;T: Fn()&gt; {\n    fn default(&amp;self) {\n        let cb = self.get_callback();\n        cb();\n    }\n\n    fn get_callback(&amp;self) -&gt; T;\n}\n\nstruct MyStruct&lt;T: Fn()&gt; {\n    callback: T,\n}\n\nimpl&lt;T: Fn()&gt; MyTrait&lt;T&gt; for MyStruct&lt;T&gt; {\n    fn get_callback(&amp;self) -&gt; T {\n        self.callback\n    }\n}\n\nfn main() {\n    let x = MyStruct { callback: || {} };\n    x.default();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:16:9\n   |\n16 |         self.callback\n   |         ^^^^ cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 88, "user_id": 1255626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d706d7c53b983a75423d772214d53be6?s=128&d=identicon&r=PG", "display_name": "Tarcisio Xavier Gruppi", "link": "https://stackoverflow.com/users/1255626/tarcisio-xavier-gruppi"}, "edited": false, "score": 2, "creation_date": 1524310136, "post_id": 49955197, "comment_id": 86926914, "body": "Thanks you.  I&#39;m still trying to wrap my head around the way Rust manages data/memory.  I will have a lot to study from your links. ;)"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 5, "last_activity_date": 1524323039, "last_edit_date": 1524323039, "creation_date": 1524309443, "answer_id": 49955197, "question_id": 49953960, "link": "https://stackoverflow.com/questions/49953960/cannot-resolve-t-serdedeserializea-when-deriving-deserialize-on-a-generic/49955197#49955197", "title": "Cannot resolve T: serde::Deserialize&lt;&#39;a&gt; when deriving Deserialize on a generic struct", "body": "<p>In general, <a href=\"https://github.com/serde-rs/serde/issues/964\" rel=\"nofollow noreferrer\">you should not write Serde trait bounds on structs</a>.</p>\n\n<p><code>rustc --explain E0283</code> explains your problem:</p>\n\n<blockquote>\n  <p>This error occurs when the compiler doesn't have enough information to unambiguously choose an implementation</p>\n</blockquote>\n\n<p>I've found that using <a href=\"https://serde.rs/attr-bound.html\" rel=\"nofollow noreferrer\"><code>#[serde(bound()]</code></a> for declaring the bounds makes the example compile:</p>\n\n<pre><code>#[derive(PartialEq, Serialize, Deserialize)]\npub struct Record&lt;'a, T: 'a&gt; {\n    id: &amp;'a str,\n    created_at: &amp;'a str,\n    created_by: Option&lt;&amp;'a str&gt;,\n    last_updated_at: Option&lt;&amp;'a str&gt;,\n    #[serde(bound(deserialize = \"&amp;'a T: Deserialize&lt;'de&gt;\"))]\n    object: &amp;'a T,\n}\n</code></pre>\n\n<p>As another solution, as <code>T</code> is generic and may be a reference, consider changing the <code>Record</code> definition so Serde does not need more explicit indication:</p>\n\n<pre><code>#[derive(PartialEq, Serialize, Deserialize)]\npub struct Record&lt;'a, T: 'a&gt; {\n    id: &amp;'a str,\n    created_at: &amp;'a str,\n    created_by: Option&lt;&amp;'a str&gt;,\n    last_updated_at: Option&lt;&amp;'a str&gt;,\n    object: T,\n}\n\nimpl&lt;'a, T: 'a&gt; Record&lt;'a, T&gt; {\n    pub fn new(\n        id: &amp;'a str,\n        created_at: &amp;'a str,\n        created_by: Option&lt;&amp;'a str&gt;,\n        last_updated_at: Option&lt;&amp;'a str&gt;,\n        object: T,\n    ) -&gt; Self {\n        Record {\n            id,\n            created_at,\n            created_by,\n            last_updated_at,\n            object,\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 88, "user_id": 1255626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d706d7c53b983a75423d772214d53be6?s=128&d=identicon&r=PG", "display_name": "Tarcisio Xavier Gruppi", "link": "https://stackoverflow.com/users/1255626/tarcisio-xavier-gruppi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 958, "favorite_count": 1, "accepted_answer_id": 49955197, "answer_count": 1, "score": 4, "last_activity_date": 1524418117, "creation_date": 1524300339, "last_edit_date": 1524418117, "question_id": 49953960, "link": "https://stackoverflow.com/questions/49953960/cannot-resolve-t-serdedeserializea-when-deriving-deserialize-on-a-generic", "title": "Cannot resolve T: serde::Deserialize&lt;&#39;a&gt; when deriving Deserialize on a generic struct", "body": "<p>I'm trying to write a struct that derives <code>serde::Deserialize</code> but it also has a field that should derive <code>serde::Deserialize</code>:</p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\nuse serde::{Deserialize, Serialize};\n\n#[derive(PartialEq, Serialize, Deserialize)]\npub struct Record&lt;'a, T&gt;\nwhere\n    T: 'a + Serialize + Deserialize&lt;'a&gt;,\n{\n    id: &amp;'a str,\n    created_at: &amp;'a str,\n    created_by: Option&lt;&amp;'a str&gt;,\n    last_updated_at: Option&lt;&amp;'a str&gt;,\n    object: &amp;'a T,\n}\n\nimpl&lt;'a, T&gt; Record&lt;'a, T&gt;\nwhere\n    T: 'a + Serialize + Deserialize&lt;'a&gt;,\n{\n    pub fn new(\n        id: &amp;'a str,\n        created_at: &amp;'a str,\n        created_by: Option&lt;&amp;'a str&gt;,\n        last_updated_at: Option&lt;&amp;'a str&gt;,\n        object: &amp;'a T,\n    ) -&gt; Self {\n        Record {\n            id,\n            created_at,\n            created_by,\n            last_updated_at,\n            object,\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I've been changing the code for a while but I can't get this idea to compile. The error I'm getting at the moment is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0283]: type annotations required: cannot resolve `T: serde::Deserialize&lt;'a&gt;`\n --&gt; src/main.rs:7:32\n  |\n7 | #[derive(PartialEq, Serialize, Deserialize)]\n  |                                ^^^^^^^^^^^\n  |\n  = note: required by `serde::Deserialize`\n</code></pre>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1524298428, "post_id": 49952612, "comment_id": 86924004, "body": "Read <a href=\"https://stackoverflow.com/questions/42620022/why-does-a-generic-method-inside-a-trait-require-trait-object-to-be-sized\">this</a>. Is this a possible duplicate?"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1524330670, "last_edit_date": 1524330670, "creation_date": 1524291043, "answer_id": 49952906, "question_id": 49952612, "link": "https://stackoverflow.com/questions/49952612/is-it-possible-to-have-a-generic-function-on-a-trait/49952906#49952906", "title": "Is it possible to have a generic function on a trait?", "body": "<blockquote>\n  <p>Is it possible to have a generic function on a trait?</p>\n</blockquote>\n\n<p>Yes. But you are then trying to use the trait as an object. If a trait has a generic method then you can't use it as an object, but you can still use it as a bound for a type parameter.</p>\n\n<p>That is, instead of using <code>&amp;'a Gumbo</code>, use a <code>T: Gumbo</code>:</p>\n\n<pre><code>struct Plumbus&lt;'a, T: Gumbo&gt; { \n    grumbo: &amp;'a T,\n}\n</code></pre>\n\n<p>With the trait object, the implementation is only known at runtime. And its generic parameter is part of the implementation type, so the compiler couldn't know how to call it. With <code>T: Gumbo</code> you are putting a constraint on what <code>T</code> can be, but <code>T</code> will always be known by the compiler at the point of use, which includes any parameters of its own.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/a/44097369/493729\">Understanding Traits and Object Safety</a></li>\n<li><a href=\"https://stackoverflow.com/a/27570064/493729\">What makes something a \"trait  object\"?</a></li>\n</ul>\n"}], "owner": {"reputation": 1206, "user_id": 885312, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/beded0a38cc963593a98df7eed37767c?s=128&d=identicon&r=PG", "display_name": "trbabb", "link": "https://stackoverflow.com/users/885312/trbabb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1859, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1524330670, "creation_date": 1524287919, "last_edit_date": 1524323907, "question_id": 49952612, "link": "https://stackoverflow.com/questions/49952612/is-it-possible-to-have-a-generic-function-on-a-trait", "title": "Is it possible to have a generic function on a trait?", "body": "<p>I have:</p>\n\n<pre><code>struct Plumbus&lt;'a&gt; {\n    grumbo: &amp;'a Grumbo,\n}\n\ntrait Grumbo {\n    fn dinglebop&lt;T&gt;(&amp;self, x: &amp;mut T) -&gt; bool { false }\n}\n</code></pre>\n\n<p>but I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `Grumbo` cannot be made into an object\n --&gt; plumbus.rs:4:5\n  |\n4 |     grumbo: &amp;'a Grumbo,\n  |     ^^^^^^^^^^^^^^^^^^ the trait `Grumbo` cannot be made into an object\n  |\n  = note: method `dinglebop` has generic type parameters\n</code></pre>\n\n<p>I want to have <code>dinglebop</code> do nothing by default, but depending on the <code>Grumbo</code> and the <code>T</code>, possibly fill <code>x</code> with a <code>T</code> if it makes sense for that particular <code>Grumbo</code> implementation.</p>\n\n<p>In C++ this could probably be accomplished with partial specialization. I am not sure what to aim for with Rust.</p>\n\n<ul>\n<li>Is it possible to have generic functions like this on a trait?</li>\n<li>How do I accomplish my goal of having a <code>dinglebop()</code> for arbitrary <code>T</code> without specializing my <code>Plumbus</code> for a <em>particular</em> <code>T</code>?</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1524244481, "post_id": 49946620, "comment_id": 86909886, "body": "Better have a look at <a href=\"https://docs.rs/image/0.18.0/image/struct.ImageBuffer.html#method.into_raw\" rel=\"nofollow noreferrer\">into_raw</a>. Also relevant is that, by convention, methods with the <code>into_</code> prefix consume the original value."}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524244579, "post_id": 49946620, "comment_id": 86909939, "body": "Right, okay yeah I feel I should have noticed that. Wouldn&#39;t that simply transfer ownership of the underlying container though? Not the image struct itself? Or am I misunderstanding things?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1524244671, "post_id": 49946620, "comment_id": 86909977, "body": "No, not really. If a method takes <code>self</code>, the whole value will be moved, regardless of what is returned."}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524244895, "post_id": 49946620, "comment_id": 86910084, "body": "Right, that makes sense. Thanks for the help! I feel like I&#39;m slowly getting there."}], "answers": [{"comments": [{"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 0, "creation_date": 1524244637, "post_id": 49946723, "comment_id": 86909963, "body": "Right, okay. That mkaes sense, probably should pay attention to the name of functions. Could you point me in the right direction for a solution to this? It seems weird to have to copy the underlying container which is the only solution I can think of."}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 0, "creation_date": 1524244875, "post_id": 49946723, "comment_id": 86910075, "body": "Thanks, that got it. And I apologize, I thought this would be enough. Encoder is not something I wrote. It comes from the <code>image</code> crate from the Piston game engine."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1524244957, "post_id": 49946723, "comment_id": 86910130, "body": "If you say that <code>res</code> is an <code>ImageBuffer</code>, how about just calling <a href=\"https://docs.rs/image/0.18.0/image/struct.ImageBuffer.html#method.save\" rel=\"nofollow noreferrer\"><code>save</code></a>?"}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 1, "creation_date": 1524245086, "post_id": 49946723, "comment_id": 86910189, "body": "I&#39;m basically creating a program for taking screenshots and automatically uploading them/copying the uploaded link the clipboard. Often the user might not even want to save it to disk, so there&#39;s more to do with the data than just write it to disk unfortunately."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1524245414, "last_edit_date": 1524245414, "creation_date": 1524244524, "answer_id": 49946723, "question_id": 49946620, "link": "https://stackoverflow.com/questions/49946620/why-does-value-into-something-still-result-in-a-moved-value/49946723#49946723", "title": "Why does `&amp;value.into_something()` still result in a moved value?", "body": "<p>This is simply an operator precedence issue: methods apply before the reference operator <code>&amp;</code>:</p>\n\n<pre><code>&amp;(res.into_raw()) // This\n(&amp;res).into_raw() // Not this\n</code></pre>\n\n<p>Calling <a href=\"https://docs.rs/image/0.18.0/image/struct.ImageBuffer.html#method.into_raw\" rel=\"nofollow noreferrer\"><code>into_raw</code></a> takes ownership and the value is gone.</p>\n\n<p>You could do something like this:</p>\n\n<pre><code>let w = res.width();\nlet h = res.height();\nlet r = res.into_raw();\nencoder.encode(&amp;r, w, h, ColorType::RGBA(0));\n</code></pre>\n\n<p>It's likely there's something nicer, but you haven't provided a <a href=\"/help/mcve\">MCVE</a> so it's hard to iterate on a solution. Blindly guessing from the docs, it looks like this should work:</p>\n\n<pre><code>extern crate image;\n\nuse image::{png::PNGEncoder, ColorType, ImageBuffer, Rgba};\nuse std::io;\n\nfn repro&lt;W: io::Write&gt;(res: ImageBuffer&lt;Rgba&lt;u8&gt;, Vec&lt;u8&gt;&gt;, file: W) -&gt; Result&lt;(), io::Error&gt; {\n    let encoder = PNGEncoder::new(file);\n    encoder.encode(&amp;res, res.width(), res.height(), ColorType::RGBA(0))\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 348, "favorite_count": 1, "accepted_answer_id": 49946723, "answer_count": 1, "score": 0, "last_activity_date": 1524245414, "creation_date": 1524244017, "last_edit_date": 1524244390, "question_id": 49946620, "link": "https://stackoverflow.com/questions/49946620/why-does-value-into-something-still-result-in-a-moved-value", "title": "Why does `&amp;value.into_something()` still result in a moved value?", "body": "<p>I'm struggling to see how this transfers ownership. Here is my code:</p>\n\n<pre><code>let res = screenshot::take_screenshot(0);\nlet file = File::open(\"test.png\").expect(\"Failed to open file\");\n\nlet encoder = PNGEncoder::new(file);\nencoder.encode(&amp;res.into_raw(), \n               res.width(),\n               res.height(),\n               ColorType::RGBA(0)\n);\n</code></pre>\n\n<p><code>screenshot::take_screenshot</code> is a function that returns an <code>ImageBuffer&lt;Rgba&lt;u8&gt;, Vec&lt;u8&gt;&gt;</code>. Here is the compiler error I'm getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `res`\n  --&gt; src/main.rs:21:37\n   |\n21 |     encoder.encode(&amp;res.into_raw(), res.width(), res.height(), ColorType::RGBA(0));\n   |                     ---             ^^^ value used here after move\n   |                     |\n   |                     value moved here\n   |\n   = note: move occurs because `res` has type `image::ImageBuffer&lt;image::Rgba&lt;u8&gt;, std::vec::Vec&lt;u8&gt;&gt;`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `res`\n  --&gt; src/main.rs:21:50\n   |\n21 |     encoder.encode(&amp;res.into_raw(), res.width(), res.height(), ColorType::RGBA(0));\n   |                     --- value moved here         ^^^ value used here after move\n   |\n   = note: move occurs because `res` has type `image::ImageBuffer&lt;image::Rgba&lt;u8&gt;, std::vec::Vec&lt;u8&gt;&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I am trying to pass a slice, which I believe is a reference of the vector, is it not? This would imply ownership is not passed, and the vector isn't moved. I know I'm doing something wrong and it's likely something simple.</p>\n"}, {"tags": ["rust", "serde", "clap"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1524227388, "post_id": 49941435, "comment_id": 86899237, "body": "Can you show your Cargo.toml? Which crate versions are the project&#39;s dependencies locked to?"}, {"owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524227811, "post_id": 49941435, "comment_id": 86899498, "body": "Oops. Yes that might be helpful information ..."}], "answers": [{"comments": [{"owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "edited": false, "score": 0, "creation_date": 1524296746, "post_id": 49943259, "comment_id": 86923593, "body": "Thank you for your answer. I already learned a lot here. However, I might have obfuscated the actual error when crafting my minimal example. Initially the error was <code>thread &#39;main&#39; panicked at &#39;failed to convert YAML Integer(1) value to a string</code>, so I made them strings. With the index values as integers the minimal example works for me, but my actual file doen&#39;t. I will change the question title to better suit the error I described here, do some more research and maybe ask a new question with a more detailed description of my problem."}, {"owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "edited": false, "score": 0, "creation_date": 1524474804, "post_id": 49943259, "comment_id": 86970677, "body": "Turns out I added a <code>default_value</code> with an integer instead of a string, which turned out to be the reason for that error. Thank you for your help."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 5, "last_activity_date": 1524232425, "creation_date": 1524232425, "answer_id": 49943259, "question_id": 49941435, "link": "https://stackoverflow.com/questions/49941435/clap-can-not-parse-yaml-file-failed-to-convert-yaml-string1-value-to-a-stri/49943259#49943259", "title": "Clap can not parse YAML file: failed to convert YAML String(&quot;1&quot;) value to a string", "body": "<p>The <code>index</code> property of an argument specification should be an integer, not a string. One can find an example of a positional argument with an explicit index in the <a href=\"https://docs.rs/clap/2.31.2/clap/#quick-example\" rel=\"noreferrer\">documentation</a>. Remove the quotes from around that value and the configuration file will work again.</p>\n\n<pre><code>name: \"tool\"\nversion: \"0.1\"\nabout: \"description\"\nauthor: \"m00am\"\n\nsubcommands:\n  - subcommand1:\n      args:\n        - path:\n            index: 1\n            required: true\n            default_value: \"/tmp/\"\n            help: \"Dummy Path\"\n  - subcommand2:\n      args:\n         - other_path:\n             index: 1\n             required: true\n             help: \"A second dummy path\"\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run -- subcommand1 --help\n\nUSAGE:\n    tool subcommand1 &lt;path&gt;\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nARGS:\n    &lt;path&gt;    Dummy Path [default: /tmp/]\n</code></pre>\n\n<p>I could not identify the reason why this used to work in previous versions. There is a chance that the implementation allowed it beyond the intended functionality. Otherwise, it could have been a breaking change from an early version of Clap with YAML configuration support. The dependencies in your Cargo.toml file are too flexible for long-term use, and makes these issues more likely to happen. Sticking to the default (caret) version ranges is usually the right thing to do (see <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\" rel=\"noreferrer\">specifying dependencies</a>).</p>\n"}], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 813, "favorite_count": 0, "accepted_answer_id": 49943259, "answer_count": 1, "score": 2, "last_activity_date": 1538858182, "creation_date": 1524226483, "last_edit_date": 1538858182, "question_id": 49941435, "link": "https://stackoverflow.com/questions/49941435/clap-can-not-parse-yaml-file-failed-to-convert-yaml-string1-value-to-a-stri", "title": "Clap can not parse YAML file: failed to convert YAML String(&quot;1&quot;) value to a string", "body": "<p>I use a YAML file to define my command line interface. I parse the file using Clap's <code>load_yaml!</code> macro, which worked out fine for some time:</p>\n\n<pre><code>#[macro_use]\nextern crate clap;\nuse clap::{App, ArgMatches};\n\nfn main() {\n    let yml = load_yaml!(\"cl_arguments.yml\");\n    let matches = App::from_yaml(yml).get_matches();\n    # some code goes here\n}\n</code></pre>\n\n<p>Without me making any changes to the relevant code, this stopped working and I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'failed to convert YAML String(\"1\") value to a string',\n/home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.31.2/src/args/arg.rs:112:28\n</code></pre>\n\n<p>I am not sure if an update is to blame for this. I updated Rust and removed the Cargo.lock to rule out incompatibility issues, but that did not help.</p>\n\n<p>This is a minimal version of my YAML file that produces the error:</p>\n\n<pre><code>name: \"tool\"\nversion: \"0.1\"\nabout: \"description\"\nauthor: \"m00am\"\n\nsubcommands:\n  - subcommand1:\n      args:\n        - path:\n            index: \"1\"\n            required: true\n            default_value: \"/tmp/\"\n            help: \"Dummy Path\"\n  - subcommand2:\n      args:\n         - other_path:\n             index: \"1\"\n             required: true\n             help: \"A second dummy path\"\n</code></pre>\n\n<p>Is this a known issue? What went wrong here? Is there anything I can do besides trying out combinations of older versions of Clap and the YAML crate?</p>\n\n<h3>Version info</h3>\n\n<p>Excerpt from Cargo.toml</p>\n\n<pre><code>[dependencies]\nrand = \"*\"\ncute = \"0.3.0\"\nfasthash = \"*\"\nbio = \"*\"\nrulinalg = \"*\"\nserde = \"*\"\nserde_derive = \"*\"\nbincode = \"*\"\nstatrs = \"*\"\nseparator = \"*\"\ntermion = \"*\"\nsysinfo = \"*\"\nclap = { version = \"*\", features = [\"yaml\"] }\nneedletail = \"*\"\ngnuplot = \"*\"\ntime = \"*\"\ncue = \"*\"\n</code></pre>\n\n<p>Excerpt from Cargo.lock</p>\n\n<pre><code>[[package]]\nname = \"clap\"\nversion = \"2.31.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n...\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1524222787, "post_id": 49939376, "comment_id": 86896270, "body": "You may especially be interested in <a href=\"https://stackoverflow.com/a/38253365/1870153\">this answer</a> in the duplicate."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 2, "creation_date": 1524224025, "post_id": 49939376, "comment_id": 86897067, "body": "&quot;I don&#39;t want to copy memory. This application is time-sensitive.&quot; Two registers? That&#39;s less difference than whether the function gets inlined or not."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524240007, "post_id": 49939376, "comment_id": 86907562, "body": "<code>fn a_ffi_function(buffer: &amp;[u8; 16])</code> \u2014 There is no concept of an array in the C ABI. The FFI function should just take an <code>*const u8</code> and then none of this matters."}], "owner": {"reputation": 139, "user_id": 9395791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a8c83e53212e368b0cf27c7e4e200ee?s=128&d=identicon&r=PG&f=1", "display_name": "buckle2000", "link": "https://stackoverflow.com/users/9395791/buckle2000"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 199, "favorite_count": 0, "closed_date": 1524230294, "answer_count": 0, "score": 1, "last_activity_date": 1524219528, "creation_date": 1524219528, "question_id": 49939376, "link": "https://stackoverflow.com/questions/49939376/how-to-cast-slice-to-reference-of-array-in-rust", "closed_reason": "Duplicate", "title": "How to cast slice to reference of array in rust", "body": "<p>I want to do this</p>\n\n<pre><code>// I cannot alter this function\nfn a_ffi_function(buffer: &amp;[u8; 16]) {\n    unsafe {\n\n    }\n}\n\nfn main() {\n    let buffer = [0u8; 64];\n    for i in 0..4 {\n        a_ffi_function(&amp;buffer[i*16..(i+1)*16]);\n    }\n}\n</code></pre>\n\n<p>But the compiler does not allow me to</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:24\n   |\n10 |         a_ffi_function(&amp;buffer[i*16..(i+1)*16]);\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^ expected array of 16 elements, found slice\n   |\n   = note: expected type `&amp;[u8; 16]`\n              found type `&amp;[u8]`\n</code></pre>\n\n<p>I cannot find a way to cast from <code>&amp;[u8]</code> to <code>&amp;[u8; 16]</code>. What can I do?</p>\n\n<p>I don't want to copy memory. This application is time-sensitive.</p>\n\n<p>I am using rustc 1.27.0-nightly (ad610bed8 2018-04-11).</p>\n"}, {"tags": ["rust", "type-conversion"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 2, "creation_date": 1524227669, "post_id": 49939145, "comment_id": 86899421, "body": "As a sidenote, why <code>i8</code> and not <code>u8</code>?"}, {"owner": {"reputation": 1776, "user_id": 1694362, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/020ic.jpg?s=128&g=1", "display_name": "Biketire", "link": "https://stackoverflow.com/users/1694362/biketire"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524230136, "post_id": 49939145, "comment_id": 86901054, "body": "@E_net4 I&#39;ve added three lines of code with the minimal amount of code that reproduces the issue."}, {"owner": {"reputation": 1776, "user_id": 1694362, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/020ic.jpg?s=128&g=1", "display_name": "Biketire", "link": "https://stackoverflow.com/users/1694362/biketire"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1524230286, "post_id": 49939145, "comment_id": 86901141, "body": "@CodesInChaos I&#39;ve changed the question. The reason I&#39;m not using <code>u8</code> is because it doesn&#39;t work as I would have expected within a <code>String</code>."}, {"owner": {"reputation": 1776, "user_id": 1694362, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/020ic.jpg?s=128&g=1", "display_name": "Biketire", "link": "https://stackoverflow.com/users/1694362/biketire"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1524469962, "post_id": 49939145, "comment_id": 86967854, "body": "@E_net4 what do you mean? I think I&#39;m clear enough as it is."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1581352069, "last_edit_date": 1581352069, "creation_date": 1524222456, "answer_id": 49940286, "question_id": 49939145, "link": "https://stackoverflow.com/questions/49939145/how-to-convert-a-usize-to-a-single-char/49940286#49940286", "title": "How to convert a usize to a single char?", "body": "<p>I suggest using <a href=\"https://doc.rust-lang.org/std/char/fn.from_digit.html\" rel=\"nofollow noreferrer\"><code>char::from_digit</code></a> together with a cast necessary to use it (<code>as u32</code>):</p>\n\n<pre><code>use std::char;\n\nfn main() {\n    let mut s = String::from(\"   \");\n    let mine_count: u8 = 8; // or i8 or usize\n    s.insert(0, char::from_digit(mine_count as u32, 10).unwrap());\n\n    println!(\"{:?}\", s);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1524248211, "creation_date": 1524248211, "answer_id": 49947582, "question_id": 49939145, "link": "https://stackoverflow.com/questions/49939145/how-to-convert-a-usize-to-a-single-char/49947582#49947582", "title": "How to convert a usize to a single char?", "body": "<blockquote>\n  <p>Are there other ways to achieve the goal of converting an integer in the range of 1..8 to a single character</p>\n</blockquote>\n\n<p>Use a lookup table:</p>\n\n<pre><code>const LABELS: [char; 9] = ['0', '1', '2', '3', '4', '5', '6', '7', '8'];\n\nfn main() {\n    LABELS[6_usize];\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 6, "last_activity_date": 1581352100, "last_edit_date": 1581352100, "creation_date": 1524504233, "answer_id": 49986704, "question_id": 49939145, "link": "https://stackoverflow.com/questions/49939145/how-to-convert-a-usize-to-a-single-char/49986704#49986704", "title": "How to convert a usize to a single char?", "body": "<blockquote>\n  <p>However when adding <code>mine_count</code> to a <code>std::string::String</code> it turns up as - for example - <code>\\u{2}</code> and not simply <code>'2'</code>.</p>\n</blockquote>\n\n<p>This is the difference between the <code>char</code> containing the scalar value <code>2</code> and a <code>char</code> containing the actual character <code>'2'</code>. The first few UTF-8 values, like in ASCII text encoding, are reserved for control characters, and do not portray something visible. What made it appear as <code>\\u{2}</code> in this context is because you printed the string with <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Debug.html\" rel=\"nofollow noreferrer\">debug formatting</a> (<code>{:?}</code>). If you try to print the same string with plain formatting:</p>\n\n<pre><code>let mut s = String::from(\"   \");\nlet mine_count: u8 = 8;\ns.insert(0, mine_count as char);\nprintln!(\"{}\", s);\n</code></pre>\n\n<p>The output will contain something that wasn't meant to be printed, and so might either show a placeholder character or not appear at all (reproducible <a href=\"https://play.rust-lang.org/?gist=464a20854e63de24c1e9d5f97ca6589e&amp;version=stable\" rel=\"nofollow noreferrer\">here</a>).</p>\n\n<p>In order to represent a single-digit number as the respective character: (1) First make sure that <code>mine_count</code> is within the intended limits, either by recoverable errors or hard assertions. (2) Then, transform the number by translating it to the numeric digit character domain.</p>\n\n<pre><code>assert!(mine_count &gt; 0);\nassert!(mine_count &lt; 9);\nlet mine_char = (mine_count + b'0') as char;\ns.insert(0, mine_char);\nprintln!(\"{}\", s);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b0cc17bbc921e08664d9e858fbab34c9&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 1776, "user_id": 1694362, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/020ic.jpg?s=128&g=1", "display_name": "Biketire", "link": "https://stackoverflow.com/users/1694362/biketire"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2667, "favorite_count": 1, "accepted_answer_id": 49986704, "answer_count": 3, "score": 0, "last_activity_date": 1581352100, "creation_date": 1524218773, "last_edit_date": 1524503239, "question_id": 49939145, "link": "https://stackoverflow.com/questions/49939145/how-to-convert-a-usize-to-a-single-char", "title": "How to convert a usize to a single char?", "body": "<p>For an exercise I'm doing for exercism (the <a href=\"http://exercism.io/exercises/rust/minesweeper/readme\" rel=\"nofollow noreferrer\">minesweeper</a> task), I need to convert an <code>usize</code> to a <code>char</code> in order to insert it into a <code>std::string::String</code>. </p>\n\n<p>To describe the problem in minimal lines of code:</p>\n\n<pre><code>let mut s = String::from(\"   \");\nlet mine_count: usize = 5; // This is returned from a method and will be a value between 1 and 8.\ns.insert(0, _______); // So I get: \"5  \" at the underscores I do:\n</code></pre>\n\n<p>The way I'm currently doing this as:</p>\n\n<pre><code> mine_count.to_string().chars().nth(0).unwrap(); // For example: '2'\n</code></pre>\n\n<p>Or see the <a href=\"https://play.rust-lang.org/?gist=e9fdf3f5de59a2389ebb922b4b64d21d&amp;version=stable\" rel=\"nofollow noreferrer\">full example in the rust playground</a>. Somehow this doesn't strike me as elegant.</p>\n\n<p>I've also tried:</p>\n\n<pre><code> mine_count as char; // where mine_count is of type u8\n</code></pre>\n\n<p>However when adding <code>mine_count</code> to a <code>std::string::String</code> it turns up as - for example - <code>\\u{2}</code> and not simply <code>'2'</code>:</p>\n\n<pre><code>let mine_count: u8 = 8;\ns.insert(0, mine_count as char);\nprintln!(\"{:?}\", s);\n</code></pre>\n\n<p>The output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\"\\u{8}   \"\n</code></pre>\n\n<p>Reproduced <a href=\"https://play.rust-lang.org/?gist=a2d8f41dc6a919c47b005de22d5e3bbb&amp;version=stable\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>Are there other ways to achieve the goal of converting an integer in the range of 1..8 to a single character (<code>char</code>)?</p>\n"}, {"tags": ["rust", "html5-canvas", "webassembly"], "answers": [{"comments": [{"owner": {"reputation": 64343, "user_id": 249933, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/458f2e0d08d4114f8b323798cfea141d?s=128&d=identicon&r=PG", "display_name": "ColinE", "link": "https://stackoverflow.com/users/249933/coline"}, "edited": false, "score": 0, "creation_date": 1524212377, "post_id": 49937149, "comment_id": 86889848, "body": "Looks like you found the answer just as I posted it! <a href=\"https://stackoverflow.com/a/49937181/249933\">stackoverflow.com/a/49937181/249933</a>"}, {"owner": {"reputation": 12494, "user_id": 1402929, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IORgE.jpg?s=128&g=1", "display_name": "Matt Harrison", "link": "https://stackoverflow.com/users/1402929/matt-harrison"}, "reply_to_user": {"reputation": 64343, "user_id": 249933, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/458f2e0d08d4114f8b323798cfea141d?s=128&d=identicon&r=PG", "display_name": "ColinE", "link": "https://stackoverflow.com/users/249933/coline"}, "edited": false, "score": 0, "creation_date": 1524212429, "post_id": 49937149, "comment_id": 86889876, "body": "Indeed! Great feeling to have found this issue and have it confirmed by someone else though :)"}], "tags": [], "owner": {"reputation": 12494, "user_id": 1402929, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IORgE.jpg?s=128&g=1", "display_name": "Matt Harrison", "link": "https://stackoverflow.com/users/1402929/matt-harrison"}, "is_accepted": false, "score": 5, "last_activity_date": 1524212232, "creation_date": 1524212232, "answer_id": 49937149, "question_id": 49935207, "link": "https://stackoverflow.com/questions/49935207/editing-canvas-pixel-data-in-webassembly-rust/49937149#49937149", "title": "Editing canvas pixel data in WebAssembly/Rust", "body": "<p>I think I discovered the answer. There's no guarantee that the start of the linear memory is available to use by JavaScript. The runtime that gets included in the wasm binary by Rust could be freely writing to that memory location. I solved my issue by instead statically allocating a chunk of memory in my program and returning a pointer to JavaScript so it knew where was safe to write to.</p>\n\n<pre><code>// Statically allocate space for 1m pixels\n\nstatic mut PIXELS: [Pixel; 1_000_000] = [Pixel {\n    r: 255,\n    g: 0,\n    b: 0,\n    a: 255,\n}; 1_000_000];\n\n// return pointer to JavaScript\n\n#[no_mangle]\npub fn get_memory_offset() -&gt; i32 {\n    return unsafe { &amp;PIXELS as *const _ as i32 };\n}\n</code></pre>\n\n<p>It would be nice to also dynamically allocate the memory but I'm not sure how to do that yet.</p>\n"}, {"tags": [], "owner": {"reputation": 64343, "user_id": 249933, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/458f2e0d08d4114f8b323798cfea141d?s=128&d=identicon&r=PG", "display_name": "ColinE", "link": "https://stackoverflow.com/users/249933/coline"}, "is_accepted": true, "score": 4, "last_activity_date": 1524212341, "creation_date": 1524212341, "answer_id": 49937181, "question_id": 49935207, "link": "https://stackoverflow.com/questions/49935207/editing-canvas-pixel-data-in-webassembly-rust/49937181#49937181", "title": "Editing canvas pixel data in WebAssembly/Rust", "body": "<p>Your code writes image data to linear memory starting at location 0, are you sure it is safe to do so? Most languages, when compiled to WebAssembly, use linear memory for their own runtime. </p>\n\n<p>A safer option is  to create a struct that represents your image, then obtain a reference to this from your JavaScript code so that you can ensure your JS and Rust code are aligned:</p>\n\n<p><a href=\"https://github.com/ColinEberhardt/wasm-rust-chip8/blob/master/web/chip8.js#L124\" rel=\"nofollow noreferrer\">https://github.com/ColinEberhardt/wasm-rust-chip8/blob/master/web/chip8.js#L124</a></p>\n"}], "owner": {"reputation": 12494, "user_id": 1402929, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IORgE.jpg?s=128&g=1", "display_name": "Matt Harrison", "link": "https://stackoverflow.com/users/1402929/matt-harrison"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1290, "favorite_count": 1, "accepted_answer_id": 49937181, "answer_count": 2, "score": 5, "last_activity_date": 1571051742, "creation_date": 1524205095, "last_edit_date": 1571051742, "question_id": 49935207, "link": "https://stackoverflow.com/questions/49935207/editing-canvas-pixel-data-in-webassembly-rust", "title": "Editing canvas pixel data in WebAssembly/Rust", "body": "<p>I'm toying around with WebAssembly and Rust trying to create canvas pixel data. As an initial experiment I'm trying to make Rust write to its linear memory and then I'll use that to create an <code>ImageData</code> object which I can write to the canvas.</p>\n\n<p>Underlying ImageData is an Uint8Array where each pixel is 4 numbers for rgba. I'm representing that in rust using the following Struct:</p>\n\n<pre><code>struct Pixel {\n    r: u8,\n    g: u8,\n    b: u8,\n    a: u8,\n}\n</code></pre>\n\n<p>I've exported a function to JavaScript which will attempt to color all 250,000 pixels in a 500 x 500 pixel canvas:</p>\n\n<pre><code>#[no_mangle]\npub fn color(width: u32, height: u32) {\n    for i in 0..width * height {\n        let ptr = (i * 4) as u64 as *mut Pixel;\n        let mut pixel = unsafe { &amp;mut *ptr };\n        pixel.r = 10;\n        pixel.g = 10;\n        pixel.b = 10;\n        pixel.a = 255;\n    }\n}\n</code></pre>\n\n<p>Here's the corresponding HTML/JS for the frontend</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n\n    &lt;style&gt;\n        canvas {\n            border: 1px solid red;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;canvas id=\"canvas\" height=\"500\" width=\"500\"&gt;&lt;/canvas&gt;\n\n    &lt;script&gt;\n\n        const WIDTH = 500;\n        const HEIGHT = 500;\n\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n\n        fetch('/rotate.wasm')\n            .then((res) =&gt; res.arrayBuffer())\n            .then((ab) =&gt; WebAssembly.instantiate(ab))\n            .then(({ instance }) =&gt; {\n\n                instance.exports.memory.grow(100);              // make memory big enough\n                instance.exports.color(WIDTH, HEIGHT);\n\n                const data = new Uint8ClampedArray(instance.exports.memory.buffer, 0, WIDTH * HEIGHT * 4)\n                const imageData = new ImageData(data, 500, 500);\n\n                ctx.putImageData(imageData, 0, 0);\n            });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p>The result is that not all pixels are colored. Only a section at the top:</p>\n\n<p><a href=\"https://i.stack.imgur.com/d5YCT.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/d5YCT.png\" alt=\"enter image description here\"></a></p>\n\n<p>When I inspect the WebAssembly memory I can see it looks like it gives up coloring after around 42k pixels. </p>\n\n<p><a href=\"https://i.stack.imgur.com/DuVpr.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/DuVpr.png\" alt=\"enter image description here\"></a></p>\n"}, {"tags": ["rust", "embedded"], "comments": [{"owner": {"reputation": 62072, "user_id": 16007, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/e859640aaeb4b305e163a990be827cf9?s=128&d=identicon&r=PG&f=1", "display_name": "old_timer", "link": "https://stackoverflow.com/users/16007/old-timer"}, "edited": false, "score": 0, "creation_date": 1524173562, "post_id": 49930432, "comment_id": 86877068, "body": "dump/examine the flash using the telnet interface for each approach, confirm they are writing the same bits/bytes."}, {"owner": {"reputation": 62072, "user_id": 16007, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/e859640aaeb4b305e163a990be827cf9?s=128&d=identicon&r=PG&f=1", "display_name": "old_timer", "link": "https://stackoverflow.com/users/16007/old-timer"}, "edited": false, "score": 0, "creation_date": 1524173603, "post_id": 49930432, "comment_id": 86877084, "body": "instead of scripting, use the telnet interface manually"}, {"owner": {"reputation": 2030, "user_id": 550235, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/934de7ad57af9a8f6a37e0c78017f942?s=128&d=identicon&r=PG", "display_name": "Russ Schultz", "link": "https://stackoverflow.com/users/550235/russ-schultz"}, "edited": false, "score": 1, "creation_date": 1524176384, "post_id": 49930432, "comment_id": 86878010, "body": "Probably your startup code or reset vector isn&#39;t correct.  Loading through the debugger doesn&#39;t actually start at the reset vector.  It grabs hold of the processor and then coerces the registers to put the PC at the &quot;entry point&quot;"}, {"owner": {"reputation": 46, "user_id": 8556227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fc9f663401ac79cfe7e2cf450527e33?s=128&d=identicon&r=PG&f=1", "display_name": "doctor_stopsign", "link": "https://stackoverflow.com/users/8556227/doctor-stopsign"}, "edited": false, "score": 0, "creation_date": 1524181366, "post_id": 49930432, "comment_id": 86879303, "body": "Ah, that must be it. Thanks for pointing me in the right direction. I&#39;m using the <code>cortex-m-rt</code> crate, but there might be some bug that was introduced recently."}, {"owner": {"reputation": 62072, "user_id": 16007, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/e859640aaeb4b305e163a990be827cf9?s=128&d=identicon&r=PG&f=1", "display_name": "old_timer", "link": "https://stackoverflow.com/users/16007/old-timer"}, "edited": false, "score": 1, "creation_date": 1524188357, "post_id": 49930432, "comment_id": 86880914, "body": "Not a case with st but with some nxp chips for example there is a checksum in the vector table and the higher level tools that go through openocd will compute the checksum for you but openocd at the lower telnet access level will not, causing the code to not work."}, {"owner": {"reputation": 62072, "user_id": 16007, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/e859640aaeb4b305e163a990be827cf9?s=128&d=identicon&r=PG&f=1", "display_name": "old_timer", "link": "https://stackoverflow.com/users/16007/old-timer"}, "edited": false, "score": 1, "creation_date": 1524188479, "post_id": 49930432, "comment_id": 86880952, "body": "It is likely the entry point thing, you should always diassemble/examine the vector table on a new project build before committing it to the flash to insure the tools, your makefile, etc have generated a binary that will boot.   If this is the case you can use openocd if the processor/debugger is not hung, to examine the beginning/entry point of the flash as well as the program counter address indicated when the processor was stopped, one or both may give you an indication of what happened.  (if this is a case of an improperly built binary)."}, {"owner": {"reputation": 62072, "user_id": 16007, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/e859640aaeb4b305e163a990be827cf9?s=128&d=identicon&r=PG&f=1", "display_name": "old_timer", "link": "https://stackoverflow.com/users/16007/old-timer"}, "edited": false, "score": 1, "creation_date": 1524188571, "post_id": 49930432, "comment_id": 86880988, "body": "you have boot0 pulled down yes when resetting the part with the new flash image?"}, {"owner": {"reputation": 46, "user_id": 8556227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fc9f663401ac79cfe7e2cf450527e33?s=128&d=identicon&r=PG&f=1", "display_name": "doctor_stopsign", "link": "https://stackoverflow.com/users/8556227/doctor-stopsign"}, "edited": false, "score": 0, "creation_date": 1524229277, "post_id": 49930432, "comment_id": 86900481, "body": "The vector table looked good, but I double checked my boot0 pin and it looks like I screwed up the latest revision of the board I&#39;m working on, and pulled it high. This is why it works with GDB but not otherwise! Thanks for all the help,  I&#39;ve learned a lot about how to debug Arm from this."}], "owner": {"reputation": 46, "user_id": 8556227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fc9f663401ac79cfe7e2cf450527e33?s=128&d=identicon&r=PG&f=1", "display_name": "doctor_stopsign", "link": "https://stackoverflow.com/users/8556227/doctor-stopsign"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 565, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1524229491, "creation_date": 1524172870, "last_edit_date": 1524229491, "question_id": 49930432, "link": "https://stackoverflow.com/questions/49930432/flashing-via-openocd-does-not-allow-the-embedded-program-to-run-however-running", "title": "Flashing via OpenOCD does not allow the embedded program to run, however running using GDB with an OpenOCD bridge works fine", "body": "<p>I am running into an issue with using Rust for embedded purposes where I can run and debug programs just fine, but if I try to flash programs such that they can run without being connected to my computer they do not work.</p>\n\n<p>For reference, I am using an stm32f303 chip. This also seems to be a recent issue, since I haven't had a problem before.</p>\n\n<p>Code being flashed (its just blinky):</p>\n\n<pre><code>#![feature(used)]\n#![no_std]\n\nextern crate cortex_m;\nextern crate cortex_m_rt;\nextern crate panic_abort; // panicking behavior\nextern crate stm32f30x_hal as hal;\n\nuse hal::prelude::*;\nuse hal::stm32f30x;\nuse hal::delay::Delay;\n\nfn main() {\n    let cp = cortex_m::Peripherals::take().unwrap();\n    let dp = stm32f30x::Peripherals::take().unwrap();\n\n    let mut flash = dp.FLASH.constrain();\n    let mut rcc = dp.RCC.constrain();\n\n    let clocks = rcc.cfgr.freeze(&amp;mut flash.acr);\n\n    let mut gpioc = dp.GPIOC.split(&amp;mut rcc.ahb);\n\n    let mut led1 = gpioc\n        .pc13\n        .into_push_pull_output(&amp;mut gpioc.moder, &amp;mut gpioc.otyper);\n\n    let mut delay = Delay::new(cp.SYST, clocks);\n\n    loop {\n        led1.set_high();\n        delay.delay_ms(1_000_u16);\n        led1.set_low();\n        delay.delay_ms(1_000_u16);\n    }\n}\n\n// As we are not using interrupts, we just register a dummy catch all\n// handler\n#[link_section = \".vector_table.interrupts\"]\n#[used]\nstatic INTERRUPTS: [extern \"C\" fn(); 240] = [default_handler; 240];\n\nextern \"C\" fn default_handler() {\n    loop {}\n}\n</code></pre>\n\n<p>Output of OpenOCD program command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ openocd -f interface/jlink.cfg -f target/stm32f3x.cfg -c \"program target/thumbv7em-none-eabihf/debug/cortex-m-quickstart verify reset exit\"\n\nOpen On-Chip Debugger 0.10.0\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nInfo : auto-selecting first available session transport \"jtag\". To override use 'transport select &lt;transport&gt;'.\nadapter speed: 1000 kHz\nadapter_nsrst_delay: 100\njtag_ntrst_delay: 100\nnone separate\ncortex_m reset_config sysresetreq\nInfo : No device selected, using first device.\nInfo : J-Link EDU Mini V1 compiled Mar 16 2017 12:04:38\nInfo : Hardware version: 1.00\nInfo : VTarget = 3.178 V\nInfo : clock speed 1000 kHz\nInfo : JTAG tap: stm32f3x.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nInfo : JTAG tap: stm32f3x.bs tap/device found: 0x06422041 (mfg: 0x020 (STMicroelectronics), part: 0x6422, ver: 0x0)\nInfo : stm32f3x.cpu: hardware has 6 breakpoints, 4 watchpoints\nadapter speed: 1000 kHz\nInfo : JTAG tap: stm32f3x.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nInfo : JTAG tap: stm32f3x.bs tap/device found: 0x06422041 (mfg: 0x020 (STMicroelectronics), part: 0x6422, ver: 0x0)\ntarget halted due to debug-request, current mode: Thread \nxPSR: 0x01000000 pc: 0x1ffff1bc msp: 0x20001258\nInfo : Reduced speed from 8000 kHz to 4000 kHz (maximum).\nadapter speed: 8000 kHz\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x10036422\nInfo : flash size = 256kbytes\nwrote 14336 bytes from file target/thumbv7em-none-eabihf/debug/cortex-m-quickstart in 0.688176s (20.344 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 13028 bytes in 0.077558s (164.041 KiB/s)\n** Verified OK **\n** Resetting Target **\nadapter speed: 1000 kHz\nInfo : JTAG tap: stm32f3x.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nInfo : JTAG tap: stm32f3x.bs tap/device found: 0x06422041 (mfg: 0x020 (STMicroelectronics), part: 0x6422, ver: 0x0)\nshutdown command invoked\n</code></pre>\n\n<p>As can be seen, there aren't any issues when flashing the program, however it doesn't run. Once again, everything is completely fine when using GDB, and the code runs without any issues.</p>\n\n<p>Any help, advice, or even general ideas of what to do would be greatly appreciated!</p>\n\n<p><strong>[Update]</strong></p>\n\n<p>It looks like the issue is with my boot0 pin, which is pulled high instead of low. This means that when GDB isn't connected and setting the PC, the MCU tries to boot from system memory instead of main memory. This explains why it works when debugging but not on its own.</p>\n"}, {"tags": ["rust", "integration-testing"], "answers": [{"comments": [{"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 0, "creation_date": 1524169896, "post_id": 49929690, "comment_id": 86875456, "body": "Thank you, somehow I missed that one in the bug tracker... I do agree with the premise that assertion library should kind of not do that, but at the same time the assertion library doesn&#39;t provide enough flexibility to achieve all types of checks. Running the same process for the second time just to check different part of the output seems wasteful. There is also process management plumbing in place that I&#39;d like to not copy/paste into my code. I think there should be this feature, if not for elegance, then for efficiency sake."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 2, "last_activity_date": 1524169617, "creation_date": 1524169617, "answer_id": 49929690, "question_id": 49928853, "link": "https://stackoverflow.com/questions/49928853/how-can-i-get-command-stdout-from-a-process-using-assert-cli-crate/49929690#49929690", "title": "How can I get command stdout from a process using assert_cli crate?", "body": "<p>The library defines only 3 types. None of which allow to access the output directly.</p>\n\n<blockquote>\n  <p>This functionality seems to be too basic to be omitted from <code>assert_cli</code> library. I am probably missing something very obvious...</p>\n</blockquote>\n\n<p>The library is called <code>assert*</code> and it has all the functions you need to assert stuffs on the output of your command. Getting the actual output is outside the domain of \"assertions\".</p>\n\n<p>Other people have opened <a href=\"https://github.com/assert-rs/assert_cli/issues/94\" rel=\"nofollow noreferrer\">an issue</a> on the repository asking for this exact feature. I suggest you to go there, and tell the author that this feature interests you.</p>\n"}], "owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 0, "accepted_answer_id": 49929690, "answer_count": 1, "score": 0, "last_activity_date": 1524169617, "creation_date": 1524166179, "question_id": 49928853, "link": "https://stackoverflow.com/questions/49928853/how-can-i-get-command-stdout-from-a-process-using-assert-cli-crate", "title": "How can I get command stdout from a process using assert_cli crate?", "body": "<p>I am using <a href=\"https://docs.rs/assert_cli/0.5.4/assert_cli/\" rel=\"nofollow noreferrer\">assert_cli</a> crate to test a command line application. While it is very helpful with simple use cases (<a href=\"https://mattgathu.github.io/testing-rust-cli-apps/\" rel=\"nofollow noreferrer\">see some examples in this article</a>), sometimes I want to get the raw output of the command I am testing as a <code>String</code> to do more sophisticated checks (regex, json or just more complex logic in the output).</p>\n\n<p>For that I need to get a copy of the command output verbatim. Here is an example:</p>\n\n<pre><code>extern crate assert_cli;\n\nfn main() {\n    let a = assert_cli::Assert::command(&amp;[\"echo\", \"foo-bar-foo\"]);\n    a.execute();\n    println!(\"{:?}\", a.expect_output);\n}\n</code></pre>\n\n<p>Somewhat predictably it gives me the following error:</p>\n\n<pre><code>error[E0616]: field `expect_output` of struct `assert_cli::Assert` is private\n  --&gt; src/main.rs:14:22\n   |\n14 |     println!(\"{:?}\", a.expect_output);\n   |                      ^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>It also has a <code>.stdout()</code> method, but that requires <a href=\"https://docs.rs/assert_cli/0.5.4/assert_cli/struct.OutputAssertionBuilder.html\" rel=\"nofollow noreferrer\">OutputAssertionBuilder</a> and there it is also not obvious how to access the <em>actual contents</em> of <code>stdout</code>. You can only do some simple checks using predicates syntax.</p>\n\n<p><code>assert_cli</code> does internally get the full output of the command during execute as seen in the source code of <a href=\"https://docs.rs/assert_cli/0.5.4/src/assert_cli/assert.rs.html#320\" rel=\"nofollow noreferrer\">assert.rs</a></p>\n\n<pre><code>let output = spawned.wait_with_output()?;\n</code></pre>\n\n<p>All the internal <code>Command</code> and <code>output</code> variables seem to be private and are never exposed to retrieve the raw <code>stdout</code>. This functionality seems to be too basic to be omitted from <code>assert_cli</code> library. I am probably missing something very obvious...</p>\n\n<p>Q: Is there any way to get raw <code>stdout</code> back as contents of a variable? </p>\n\n<p>This is what I want to achieve ideally:</p>\n\n<pre><code>extern crate assert_cli;\n\nfn main() {\n    // do simple checkign with assert_cli\n    let a = assert_cli::Assert::command(&amp;[\"echo\", \"foo-bar-foo\"])\n        .stdout().contains(\"foo-bar-foo\")\n        .unwrap();\n\n    // get raw stdout\n    let cmd_stdout = a.get_raw_stdout(); // how to do it?\n\n    // do some additional complex checking\n    assert_eq!(cmd_stdout, \"foo-bar-foo\");\n}\n</code></pre>\n\n<p>P.S.: I know I can use <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow noreferrer\">std::process::Command</a> separately to achieve this. I wonder if I can still stick to <code>assert_cli</code> since I do 80% of the testing with it.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1524167348, "post_id": 49928848, "comment_id": 86874187, "body": "This <i>is</i> a weird one. Logically it seems like <code>add_node</code> should return a <i>copy</i> of <code>id</code> and shouldn&#39;t leave you with an outstanding borrow..."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1524167392, "post_id": 49928848, "comment_id": 86874213, "body": "Wait, no, I have your problem. Give me a second to write up your solution."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1524168872, "post_id": 49928848, "comment_id": 86874974, "body": "Rather than just the one line you think is important and no context at all, it&#39;s better if you include the full error message in your question. Your example could also be shorter: you get the same error if you remove everything about edges."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1524231176, "post_id": 49928848, "comment_id": 86901803, "body": "Why do you even have all these references? Why not make them value members?"}], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1524168306, "post_id": 49929322, "comment_id": 86874673, "body": "As an aside, I don&#39;t <i>believe</i> that the <code>&amp;&#39;a mut self</code>s in the other methods are necessary either. The <code>&#39;a</code> needs to reflect the lifetime of the return value, <i>not</i> the borrow on the graph itself. But I could very well be wrong."}, {"owner": {"reputation": 573, "user_id": 6411538, "user_type": "registered", "accept_rate": 43, "profile_image": "https://lh5.googleusercontent.com/-GS6rh-AT3pc/AAAAAAAAAAI/AAAAAAAAABY/8ktg0X7KLrI/photo.jpg?sz=128", "display_name": "Nathan Horrigan", "link": "https://stackoverflow.com/users/6411538/nathan-horrigan"}, "edited": false, "score": 0, "creation_date": 1524168346, "post_id": 49929322, "comment_id": 86874690, "body": "This response is awesome! Working solution &amp; great explanation."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 573, "user_id": 6411538, "user_type": "registered", "accept_rate": 43, "profile_image": "https://lh5.googleusercontent.com/-GS6rh-AT3pc/AAAAAAAAAAI/AAAAAAAAABY/8ktg0X7KLrI/photo.jpg?sz=128", "display_name": "Nathan Horrigan", "link": "https://stackoverflow.com/users/6411538/nathan-horrigan"}, "edited": false, "score": 1, "creation_date": 1524168689, "post_id": 49929322, "comment_id": 86874872, "body": "@NathanHorrigan While the solution works, I&#39;d warn you to take my explanation of the <b>why</b> with a grain of salt - it&#39;s admittedly a bit of a guess at Rust&#39;s functionality, and not really my field of expertise."}], "tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 4, "last_activity_date": 1524168121, "creation_date": 1524168121, "answer_id": 49929322, "question_id": 49928848, "link": "https://stackoverflow.com/questions/49928848/cannot-borrow-variable-as-mutable-more-than-once-at-a-time-after-calling-a-a-m/49929322#49929322", "title": "Cannot borrow variable as mutable more than once at a time after calling a &amp;&#39;a mut self method", "body": "<p>Your problem arises from a misuse of lifetimes, specifically in your signature of <code>add_node</code>:</p>\n\n<pre><code>pub fn add_node(&amp;'a mut self, data: (u64, u64)) -&gt; usize\n</code></pre>\n\n<p>In this signature, you are stating that <code>add_node</code> takes an <code>&amp;'a mut self</code> on a <code>Graph&lt;'a&gt;</code>; in other words, you are telling Rust that this method needs to take a mutable borrow on the graph that can't be dropped before the end of the Graph's lifetime, <code>'a</code>. But since it's <em>the graph itself</em> holding a reference to the graph, the only time that reference will be dropped is when the graph itself is dropped.</p>\n\n<p>Since <code>add_node</code> doesn't require you to return a reference to any object within the struct, holding onto that borrow is irrelevant. If you alter your <code>add_node</code> method to remove the explicit lifetime:</p>\n\n<pre><code>pub fn add_node(&amp;mut self, data: (u64, u64)) -&gt; usize\n</code></pre>\n\n<p>then your example no longer raises an error, because <code>add_node</code> is now only borrowing <code>self</code> until it's finished with the function. (Under the hood, this effectively creates a second lifetime <code>'b</code> and makes the signature into <code>&amp;'b mut self</code>)</p>\n\n<p>See <a href=\"https://play.rust-lang.org/?gist=e646c03a0898566f66563dc37b2422a8&amp;version=stable\" rel=\"nofollow noreferrer\">the playground</a> for proof.</p>\n"}, {"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1524230978, "creation_date": 1524230978, "answer_id": 49942803, "question_id": 49928848, "link": "https://stackoverflow.com/questions/49928848/cannot-borrow-variable-as-mutable-more-than-once-at-a-time-after-calling-a-a-m/49942803#49942803", "title": "Cannot borrow variable as mutable more than once at a time after calling a &amp;&#39;a mut self method", "body": "<p>Consider this :</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n</code></pre>\n\n<p>As the <a href=\"https://doc.rust-lang.org/book/first-edition/lifetimes.html#in-structs\" rel=\"nofollow noreferrer\">book</a> states:</p>\n\n<blockquote>\n  <p>So why do we need a lifetime here? We need to ensure that any reference to a Foo cannot outlive the reference to an i32 it contains.</p>\n</blockquote>\n\n<p>If you write something like:</p>\n\n<pre><code>impl&lt;'a&gt; Graph&lt;'a&gt; {\n    pub fn add_node(&amp;'a mut self, data: (u64, u64)) -&gt; usize {\n        ...\n</code></pre>\n\n<p>the lifetime declaration <code>&amp;'a mut self</code> is not for the purpose of relating the lifetime of <code>Graph</code> instance with the contained references, \nbut for declaring that for mutable <code>self</code> references hold the same lifetime <code>'a</code> declared for <code>Graph</code> field references:</p>\n\n<pre><code>fn main() {    \n    let mut g = Graph {                          // &lt;------------\n        nodePointer: &amp;mut 0,                     //             |            \n        edgePointer: &amp;mut 0,                     // lifetime    |\n        nodes: &amp;mut Vec::new(),                  // of Graph    | 'a\n        edges: &amp;mut Vec::new(),                  // references  |\n    };                                           //             |\n    let node1 = Graph::add_node(&amp;mut g, (1, 1)); //             |   \n    let node2 = Graph::get_node(&amp;mut g, 0);      //             |\n}                                                //&lt;-------------\n</code></pre>\n\n<p>Where <code>g.get_node(0)</code> has been rewritten as <code>Graph::get_node(&amp;mut g, 0)</code> just for explicitly exposing the <code>&amp;mut</code> reference </p>\n\n<p>Looking at the lifetime of <code>'a</code> it is clear that the reference <code>&amp;mut g</code> is borrowed mutably more than once, and this causes the error.</p>\n"}], "owner": {"reputation": 573, "user_id": 6411538, "user_type": "registered", "accept_rate": 43, "profile_image": "https://lh5.googleusercontent.com/-GS6rh-AT3pc/AAAAAAAAAAI/AAAAAAAAABY/8ktg0X7KLrI/photo.jpg?sz=128", "display_name": "Nathan Horrigan", "link": "https://stackoverflow.com/users/6411538/nathan-horrigan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 308, "favorite_count": 0, "accepted_answer_id": 49929322, "answer_count": 2, "score": 2, "last_activity_date": 1524230978, "creation_date": 1524166159, "last_edit_date": 1524173800, "question_id": 49928848, "link": "https://stackoverflow.com/questions/49928848/cannot-borrow-variable-as-mutable-more-than-once-at-a-time-after-calling-a-a-m", "title": "Cannot borrow variable as mutable more than once at a time after calling a &amp;&#39;a mut self method", "body": "<p>I have a problem with lifetimes/borrowing with my <code>Graph</code> object.</p>\n\n<pre><code>fn main() {\n    let mut g = Graph {\n        nodePointer: &amp;mut 0,\n        edgePointer: &amp;mut 0,\n        nodes: &amp;mut Vec::new(),\n        edges: &amp;mut Vec::new(),\n    };\n    let node1 = g.add_node((1, 1));\n    let node2 = g.get_node(0);\n}\n\npub struct Graph&lt;'a&gt; {\n    pub nodePointer: &amp;'a mut usize,\n    pub edgePointer: &amp;'a mut usize,\n    pub nodes: &amp;'a mut Vec&lt;Node&gt;,\n    pub edges: &amp;'a mut Vec&lt;Edge&gt;,\n}\n\nimpl&lt;'a&gt; Graph&lt;'a&gt; {\n    pub fn add_node(&amp;'a mut self, data: (u64, u64)) -&gt; usize {\n        let id: usize = *self.nodePointer;\n        self.nodes.push(Node {\n            id: id,\n            datum: data,\n        });\n        *self.nodePointer += 1;\n        return id;\n    }\n\n    pub fn get_node(&amp;'a mut self, id: usize) -&gt; &amp;'a Node {\n        return &amp;self.nodes[id];\n    }\n\n    pub fn add_edge(&amp;'a mut self, source: u64, target: u64, weight: u16) -&gt; usize {\n        let id: usize = *self.nodePointer;\n        self.edges.push(Edge {\n            id: id,\n            source,\n            target,\n            weight,\n        });\n        *self.edgePointer = *self.edgePointer + 1;\n        return id;\n    }\n}\n\npub struct Node {\n    pub id: usize,\n    pub datum: (u64, u64),\n}\n\npub struct Edge {\n    pub id: usize,\n    pub source: u64,\n    pub target: u64,\n    pub weight: u16,\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `g` as mutable more than once at a time\n  --&gt; src/main.rs:9:17\n   |\n8  |     let node1 = g.add_node((1, 1));\n   |                 - first mutable borrow occurs here\n9  |     let node2 = g.get_node(0);\n   |                 ^ second mutable borrow occurs here\n10 | }\n   | - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 31, "user_id": 9671419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa0573bf565556c29cb4baf2d311fae6?s=128&d=identicon&r=PG&f=1", "display_name": "lnvd", "link": "https://stackoverflow.com/users/9671419/lnvd"}, "edited": false, "score": 0, "creation_date": 1524171561, "post_id": 49929388, "comment_id": 86876271, "body": "Thanks, that helps me to proceed. Besides not being useful, what is it about &amp;mut &amp;mut causing my original version to fail?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524175211, "post_id": 49929388, "comment_id": 86877643, "body": "<i>I can&#39;t possibly think of use case for <code>&amp;mut &amp;mut _</code>.</i> \u2014 <a href=\"https://codereview.stackexchange.com/a/191649/32521\">this uses <code>&amp;mut &amp;_</code></a>, and I think the extension to <a href=\"http://itsfunny.org/wp-content/uploads/2013/08/To-the-other-Motmot.jpg\" rel=\"nofollow noreferrer\"><code>&amp;mut &amp;mut</code></a> is reasonable."}, {"owner": {"reputation": 31, "user_id": 9671419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa0573bf565556c29cb4baf2d311fae6?s=128&d=identicon&r=PG&f=1", "display_name": "lnvd", "link": "https://stackoverflow.com/users/9671419/lnvd"}, "edited": false, "score": 0, "creation_date": 1524368531, "post_id": 49929388, "comment_id": 86940684, "body": "It&#39;s not necessary in my case tbh. But still, I&#39;m trying to grasp what&#39;s going on. Why is borrowing again from &#39;capturing_closure&#39; a problem? Isn&#39;t the input lifetime of &#39;mutate&#39; unrelated to inner_mut? How could it be stored without explicit specification of lifetimes? I don&#39;t see how it could outlive the call of capturing_closure."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 1, "last_activity_date": 1524419463, "last_edit_date": 1524419463, "creation_date": 1524168461, "answer_id": 49929388, "question_id": 49928840, "link": "https://stackoverflow.com/questions/49928840/why-do-i-get-the-error-cannot-infer-an-appropriate-lifetime-for-lifetime-parame/49929388#49929388", "title": "Why do I get the error &quot;cannot infer an appropriate lifetime for lifetime parameter in generic type&quot; when using nested mutable references?", "body": "<p>I can't possibly think of use case for <code>&amp;mut &amp;mut _</code>.</p>\n\n<p>If you change <code>foo</code> to</p>\n\n<pre><code>fn foo(borrow: &amp;mut [u8], val: u32);\n</code></pre>\n\n<p>Then you get another error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:46:25\n   |\n46 |     let mut inner_mut = InnerMut::new(foo);\n   |                         ^^^^^^^^^^^^^ `[u8]` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\nnote: required by `&lt;InnerMut&lt;T&gt;&gt;::new`\n</code></pre>\n\n<p>Well, nothing requires <code>T</code> to be <code>Sized</code> in this code as it's only used in references, so let's add the constraint <code>T: ?Sized</code>:</p>\n\n<pre><code>pub struct InnerMut&lt;T: ?Sized&gt; {\n    state: u32,\n    stored_fn: fn(&amp;mut T, u32),\n}\n\nimpl&lt;T: ?Sized&gt; InnerMut&lt;T&gt; {\n    // \u2026\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=22cd7f5879bd1e952bbeb0c4ee566b18&amp;version=stable\" rel=\"nofollow noreferrer\">And this works.</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524419537, "post_id": 49968887, "comment_id": 86953733, "body": "I&#39;m still really hoping for an answer as to why the extra indirection is what triggers the problem."}, {"owner": {"reputation": 3634, "user_id": 783000, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f8aa4cb9e75d158cb423b4134c46087?s=128&d=identicon&r=PG", "display_name": "Alexander Thei&#223;en", "link": "https://stackoverflow.com/users/783000/alexander-thei%c3%9fen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524422625, "post_id": 49968887, "comment_id": 86954861, "body": "What is really awkward: In my example change the type of &quot;field&quot; inside &quot;Test&quot; to &quot;T&quot; instead of fn(T). Then it does work. Of course you have to change &quot;calc&quot; to &quot;&amp;mut 42&quot; for example."}], "tags": [], "owner": {"reputation": 3634, "user_id": 783000, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f8aa4cb9e75d158cb423b4134c46087?s=128&d=identicon&r=PG", "display_name": "Alexander Thei&#223;en", "link": "https://stackoverflow.com/users/783000/alexander-thei%c3%9fen"}, "is_accepted": false, "score": 1, "last_activity_date": 1524422723, "last_edit_date": 1524422723, "creation_date": 1524418888, "answer_id": 49968887, "question_id": 49928840, "link": "https://stackoverflow.com/questions/49928840/why-do-i-get-the-error-cannot-infer-an-appropriate-lifetime-for-lifetime-parame/49968887#49968887", "title": "Why do I get the error &quot;cannot infer an appropriate lifetime for lifetime parameter in generic type&quot; when using nested mutable references?", "body": "<p>What you are experiencing is that the compiler cannot prove that you are not storing a reference to <code>&amp;mut borrow</code> inside <code>mutate()</code> into your <code>InnerMut</code> instance. This would be problematic as for all it knows the parameter to your closure lives shorter than the closure itself. But <code>InnerMut</code> was moved to the closure and must live longer than <code>borrow</code>.</p>\n\n<p>Basically Rust prevents closure arguments from escaping the closure <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/infer/error_reporting/nice_region_error/struct.NiceRegionError.html#method.try_report_outlives_closure\" rel=\"nofollow noreferrer\">because it does not know how to infer lifetimes then</a>.</p>\n\n<p>Consider this minimal example:</p>\n\n<pre><code>struct Test&lt;T&gt; {\n    field: fn(T),\n}\n\nimpl&lt;T&gt; Test&lt;T&gt; {\n    fn foo(&amp;self, _val: T) {}\n}\n\nfn calc(_: &amp;mut i32) {}\n\nfn main() {\n    let test: Test&lt;&amp;mut i32&gt; = Test { field: calc };\n\n    let _ = move |y: i32| {\n        test.foo(&amp;mut y);\n    };\n}\n</code></pre>\n\n<p>It is written in a way so that the compiler understands it better so we can understand the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `y` does not live long enough\n  --&gt; src/main.rs:15:23\n   |\n15 |         test.foo(&amp;mut y);\n   |                       ^ borrowed value does not live long enough\n16 |     };\n   |     - `y` dropped here while still borrowed\n17 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p><strong>But I do not even have fields of that type in my struct</strong></p>\n\n<p>One key principle of Rust is that your function signature is the barrier for error reporting. The function itself is checked against the signature and the callers are checked against the signature. That prevents reporting confusing errors about function bodies to the caller of functions (who did not even write them).</p>\n\n<p>For all that Rust knows, your <code>T</code> is inferred as <code>&amp;mut u[8]</code> and your <code>mutate()</code> captures a mutable self. That is suspicious. Better prevent that potential escape of closure variables.</p>\n\n<p><strong>But slightly changing the code makes it work</strong></p>\n\n<p>Rejecting all programs that are incorrect and accepting all programs that are correct is not decidable. Therefore Rust errs on the side of caution and rejects correct programs. Therefore some slight changes can make it possible for Rust to accept the program even if the program was correct before.</p>\n\n<p><strong>What does this mean for my code?</strong></p>\n\n<p>I really do not know the compiler well enough to answer this question. My guess is that by changing <code>T</code> to <code>[u8]</code> and the absence of explicit lifetimes from the <code>InnerMut</code> type the compiler can prove that your closure variables are not escaping.</p>\n"}], "owner": {"reputation": 31, "user_id": 9671419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa0573bf565556c29cb4baf2d311fae6?s=128&d=identicon&r=PG&f=1", "display_name": "lnvd", "link": "https://stackoverflow.com/users/9671419/lnvd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 507, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1524422723, "creation_date": 1524166146, "last_edit_date": 1524243773, "question_id": 49928840, "link": "https://stackoverflow.com/questions/49928840/why-do-i-get-the-error-cannot-infer-an-appropriate-lifetime-for-lifetime-parame", "title": "Why do I get the error &quot;cannot infer an appropriate lifetime for lifetime parameter in generic type&quot; when using nested mutable references?", "body": "<p>While coding along to get used to Rust, I stumbled upon a compiler error. I want to understand why I get the error and what to do about it:</p>\n\n<blockquote>\n  <p>cannot infer an appropriate lifetime for lifetime parameter in generic\n  type due to conflicting requirements</p>\n</blockquote>\n\n<p>I've been looking at a lot of questions covering similar errors, but most seem related to cyclic dependencies and I don't think this is what's going on here.</p>\n\n<p>This is my attempt at a MWE, which still might be further reducible:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0b4eb58199e5386dca0b473103e22e13&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a> (slightly different error message)</p>\n\n<pre><code>pub struct InnerMut&lt;T&gt; {\n    state: u32,\n    stored_fn: fn(&amp;mut T, u32),\n}\n\nimpl&lt;T&gt; InnerMut&lt;T&gt; {\n    pub fn new(stored_fn: fn(&amp;mut T, u32)) -&gt; InnerMut&lt;T&gt; {\n        return InnerMut {\n            state: std::u32::MAX,\n            stored_fn,\n        };\n    }\n    pub fn mutate(&amp;mut self, data: &amp;mut T) {\n        (self.stored_fn)(data, self.state);\n        self.state -= 1;\n    }\n}\n\npub struct StoreFnMut&lt;F&gt;\nwhere\n    F: FnMut(&amp;mut [u8]),\n{\n    mutable_closure: F,\n}\n\nimpl&lt;F&gt; StoreFnMut&lt;F&gt;\nwhere\n    F: FnMut(&amp;mut [u8]),\n{\n    pub fn new(mutable_closure: F) -&gt; StoreFnMut&lt;F&gt; {\n        StoreFnMut { mutable_closure }\n    }\n    fn run_closure_on_mutable_borrow(&amp;mut self) {\n        let mut buf = vec![0; 100];\n        (self.mutable_closure)(&amp;mut buf[..]);\n    }\n}\n\nfn foo(borrow: &amp;mut &amp;mut [u8], val: u32) {\n    borrow[0] = (val &amp; 0xff) as u8;\n}\n\nfn main() {\n    let mut capturing_closure;\n    let mut store_fn_mut;\n    let mut inner_mut;\n\n    inner_mut = InnerMut::new(foo);\n    capturing_closure = move |mut borrow: &amp;mut [u8]| {\n        inner_mut.mutate(&amp;mut borrow);\n    };\n    store_fn_mut = StoreFnMut::new(capturing_closure);\n    store_fn_mut.run_closure_on_mutable_borrow();\n}\n</code></pre>\n\n<p>I get this helpful looking yet confusing error message when compiling with Rust 1.24.1:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n  --&gt; src/main.rs:48:31\n   |\n48 |     inner_mut = InnerMut::new(foo);\n   |                               ^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 49:25...\n  --&gt; src/main.rs:49:25\n   |\n49 |       capturing_closure = move |mut borrow: &amp;mut [u8]| {\n   |  _________________________^\n50 | |         inner_mut.mutate(&amp;mut borrow);\n51 | |     };\n   | |_____^\nnote: ...so that expression is assignable (expected &amp;mut &amp;mut [u8], found &amp;mut &amp;mut [u8])\n  --&gt; src/main.rs:50:26\n   |\n50 |         inner_mut.mutate(&amp;mut borrow);\n   |                          ^^^^^^^^^^^\nnote: but, the lifetime must be valid for the block suffix following statement 2 at 46:5...\n  --&gt; src/main.rs:46:5\n   |\n46 | /     let mut inner_mut;\n47 | |\n48 | |     inner_mut = InnerMut::new(foo);\n49 | |     capturing_closure = move |mut borrow: &amp;mut [u8]| {\n...  |\n53 | |     store_fn_mut.run_closure_on_mutable_borrow();\n54 | | }\n   | |_^\nnote: ...so that variable is valid at time of its declaration\n  --&gt; src/main.rs:46:9\n   |\n46 |     let mut inner_mut;\n   |         ^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["shell", "terminal", "rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 3, "creation_date": 1524166492, "post_id": 49928601, "comment_id": 86873768, "body": "It&#39;s a shell builtin not an executable so you need to invoke the shell."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1524207395, "last_edit_date": 1524207395, "creation_date": 1524168108, "answer_id": 49929317, "question_id": 49928601, "link": "https://stackoverflow.com/questions/49928601/why-does-the-compgen-command-work-in-the-linux-terminal-but-not-with-processco/49929317#49929317", "title": "Why does the compgen command work in the Linux terminal but not with process::Command?", "body": "<p>Not all commands available to the shell are runnable with <code>process::Command</code>; <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Shell-Builtin-Commands\" rel=\"nofollow noreferrer\"><code>compgen</code></a> is a bash <a href=\"https://stackoverflow.com/questions/3192373/what-are-shell-built-in-commands-in-linux\">builtin command</a> and doesn't work outside of it, because it is not a standalone program - it is embedded within the shell.</p>\n\n<p>It is, however, possible to invoke bash and execute <code>compgen</code> by passing the following <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Invoking-Bash\" rel=\"nofollow noreferrer\">option</a> to it:</p>\n\n<pre><code>Command::new(\"bash\").args(&amp;[\"-c\", \"compgen\"])\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 3480578, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/842e6817194da0bdb0bfbaa45358ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "user103766", "link": "https://stackoverflow.com/users/3480578/user103766"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 877, "favorite_count": 0, "accepted_answer_id": 49929317, "answer_count": 1, "score": 0, "last_activity_date": 1524207395, "creation_date": 1524165330, "last_edit_date": 1524174521, "question_id": 49928601, "link": "https://stackoverflow.com/questions/49928601/why-does-the-compgen-command-work-in-the-linux-terminal-but-not-with-processco", "title": "Why does the compgen command work in the Linux terminal but not with process::Command?", "body": "<p>The command <code>compgen</code> works fine in the Linux Terminal, but causes a panic when using Command::new.</p>\n\n<p>My code:</p>\n\n<pre><code>use std::process::Command;\n\nfn main() {\n    let status = Command::new(\"compgen\")\n        .status()\n        .expect(\"failed to execute process\");\n    println!(\"process exited with: {}\", status);\n}\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    Compiling terminal v0.1.0 (file:///home/user/programmates/RUST/Terminal/terminal)\n     Finished dev [unoptimized + debuginfo] target(s) in 0.66 secs\n     Running `target/debug/terminal`\nthread 'main' panicked at 'failed to execute process: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', libcore/result.rs:945:5\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n"}, {"tags": ["generics", "reference", "rust", "traits"], "comments": [{"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 2, "creation_date": 1524150433, "post_id": 49924247, "comment_id": 86864647, "body": "Why? If your function can operate on any type, why shouldn&#39;t it operate on a reference?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1524150716, "post_id": 49924247, "comment_id": 86864870, "body": "@DanHulme it&#39;s just an example case; I&#39;m also interested in how to exclude other traits in general."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1524150815, "post_id": 49924247, "comment_id": 86864952, "body": "@DanHulme in addition, by ensuring the compiler that references are out of scope I could possibly exclude some lifetime issues."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1524153410, "post_id": 49924247, "comment_id": 86866637, "body": "I don&#39;t think there&#39;s anyway to do this. It doesn&#39;t seem that useful because unlike adding constraints (which allow you to call methods defined on the trait), negative constraints in general don&#39;t give you any more power than simply omitting the trait in the first place. Having this feature would also lead to surprising things. Simply implementing a trait for a type could be a breaking change."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1524153508, "post_id": 49924247, "comment_id": 86866701, "body": "@ljedrz What lifetime issues are you running into? Having <code>!Deref</code> wouldn&#39;t help you with resolving those anyway. This kind of feels like an XY problem to me."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1524155011, "post_id": 49924247, "comment_id": 86867614, "body": "@WesleyWiser an example would be a slight modification of a case from a <a href=\"https://stackoverflow.com/questions/49918896/the-parameter-type-t-may-not-live-long-enough\">recent question</a>, where lifetime annotation would not be necessary if it weren&#39;t for the possibility of reference arguments: <a href=\"https://play.rust-lang.org/?gist=6332eaf0ed4248fc4ac3b8a7dcd88654&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 4, "creation_date": 1524155968, "post_id": 49924247, "comment_id": 86868147, "body": "@ljedrz While that answer talks a lot about <code>T</code> being a reference, I believe the same situation applies if <code>T</code> <i>contains</i> a reference. Ie: <code>struct S&lt;&#39;a&gt; { val: &amp;&#39;a str }</code>. The compiler has to make sure that any value of the type <code>T</code> will remain valid for the lifetime of the thing you&#39;re returning. I could be incorrect here though..."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1524164245, "post_id": 49924247, "comment_id": 86872584, "body": "@WesleyWiser nope, <a href=\"https://play.rust-lang.org/?gist=feefd003e39310936c79d0f22d185dbd&amp;version=nightly\" rel=\"nofollow noreferrer\">doesn&#39;t work</a>."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1524165385, "post_id": 49924247, "comment_id": 86873209, "body": "@ljedrz I&#39;m not sure what you mean. The playground link you&#39;ve provided is exactly the case I&#39;m talking about."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1524166812, "post_id": 49924247, "comment_id": 86873921, "body": "@WesleyWiser ah, I thought you meant that this <i>wouldn&#39;t</i> apply to objects containing references. I&#39;m ok with this outcome (i.e. that nested references also don&#39;t work)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524159903, "post_id": 49926975, "comment_id": 86870304, "body": "@ljedrz ewww... rustfmt <a href=\"https://github.com/rust-lang-nursery/rustfmt/issues/2637\" rel=\"nofollow noreferrer\"><i>removes the <code>auto</code></i> when it formats</a>! Fixed now, sorry."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524160455, "post_id": 49926975, "comment_id": 86870577, "body": "Neat; since I thought <code>auto</code> was reserved for existing <code>std</code> traits I was trying to work something out with <code>Deref</code>. This workaround might come in handy."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1524163540, "post_id": 49926975, "comment_id": 86872195, "body": "Sure, it&#39;s possible. However, what&#39;s the point? As @Wesley Wiser says, a user could always do <code>struct S&lt;&#39;a&gt; { val: &amp;&#39;a str }</code>."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 3, "creation_date": 1524163955, "post_id": 49926975, "comment_id": 86872423, "body": "Note that the auto-trait solution will also reject any types which &quot;contains&quot; a reference e.g. the <code>S&lt;&#39;a&gt;</code> other people mentioned. Meanwhile, a <code>&#39;static</code> bound will allow <code>&amp;&#39;static T</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1524211585, "post_id": 49926975, "comment_id": 86889367, "body": "@Shepmaster: Could I not implement the auto-trait manually for a struct wrapping a reference?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1615209302, "last_edit_date": 1615209302, "creation_date": 1524159204, "answer_id": 49926975, "question_id": 49924247, "link": "https://stackoverflow.com/questions/49924247/is-it-possible-to-exclude-reference-arguments-in-a-generic-function/49926975#49926975", "title": "Is it possible to exclude reference arguments in a generic function?", "body": "<p>Yes, you can use auto traits for this:</p>\n<pre><code>#![feature(auto_traits)]\n#![feature(negative_impls)]\n\nauto trait NotReference {}\n\nimpl&lt;'a, T&gt; !NotReference for &amp;'a T {}\nimpl&lt;'a, T&gt; !NotReference for &amp;'a mut T {}\n\nfn no_references&lt;T: NotReference&gt;(_: T) {}\n\nfn main() {\n    no_references(42); // OK\n    no_references(&amp;42); // the trait bound `&amp;{integer}: NotReference` is not satisfied\n    no_references(&quot;hello&quot;); // the trait bound `&amp;str: NotReference` is not satisfied\n\n    no_references(vec![1, 2, 3]); // OK\n\n    let x = vec![1, 2, 3];\n    no_references(x.iter()); // the trait bound `&amp;{integer}: NotReference` is not satisfied in `std::slice::Iter&lt;'_, {integer}&gt;`\n}\n</code></pre>\n<p>Note that this also precludes:</p>\n<ul>\n<li>references with the <code>'static</code> lifetime, as shown by the &quot;hello&quot; call</li>\n<li>any struct which <em>contains</em> a reference as well, as shown by the <code>iter()</code> call</li>\n</ul>\n<blockquote>\n<p>I could possibly exclude some lifetime issues.</p>\n</blockquote>\n<p>Practically, that's what the <code>'static</code> bound does:</p>\n<pre><code>fn foo&lt;T: 'static&gt;(x: T) -&gt; T {}\n</code></pre>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 1, "accepted_answer_id": 49926975, "answer_count": 1, "score": 3, "last_activity_date": 1615209302, "creation_date": 1524149972, "question_id": 49924247, "link": "https://stackoverflow.com/questions/49924247/is-it-possible-to-exclude-reference-arguments-in-a-generic-function", "title": "Is it possible to exclude reference arguments in a generic function?", "body": "<p>Since the generic type parameter <code>T</code> can be of any type, including a reference, I was wondering if it was possible to opt out of references in generic functions, i.e. to be able to write something like:</p>\n\n<pre><code>use std::ops::Deref;\n\nfn foo&lt;T: !Deref&gt;(x: T) -&gt; T {}\n</code></pre>\n\n<p>This, however, is not allowed and breaks already at the parsing stage.</p>\n\n<p>I read about <a href=\"https://github.com/rust-lang/rust/issues/13231\" rel=\"nofollow noreferrer\"><code>optin_builtin_traits</code></a>, but it only supports opting out of auto traits, so it wouldn't work either, because <code>Deref</code> is not an auto trait.</p>\n\n<p>Is it possible to achieve this?</p>\n"}, {"tags": ["rust", "future", "rust-cargo", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1524342450, "post_id": 49927146, "comment_id": 86936249, "body": "<code>futures</code> is also going to miss a lot of features (e.g. <a href=\"https://docs.rs/futures/0.1.21/futures/executor/struct.NotifyHandle.html#impl-From%3CArc%3CT%3E%3E\" rel=\"nofollow noreferrer\"><code>impl&lt;T: Notify+&#39;static&gt; From&lt;Arc&lt;T&gt;&gt; for NotifyHandle</code></a>) in <code>no_std</code>, and <code>mio</code> is going to be complicated too.  It&#39;s probably easier to write your own executor for your own needs."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1524159815, "creation_date": 1524159815, "answer_id": 49927146, "question_id": 49922999, "link": "https://stackoverflow.com/questions/49922999/how-do-i-use-tokio-reactor-in-a-no-std-environment/49927146#49927146", "title": "How do I use Tokio Reactor in a #[no_std] environment?", "body": "<p>As far as I can tell, you <em>don't</em>. Tokio Reactor 0.1.1 <a href=\"https://github.com/tokio-rs/tokio/blob/tokio-reactor-0.1.1/tokio-reactor/src/lib.rs#L63-L70\" rel=\"noreferrer\">imports many things from the standard library</a>, none of them conditionally.</p>\n\n<p>Most of the imports could probably be switched to <code>libcore</code> alternatives, but <code>Arc</code> requires memory allocation, which lives in the <code>alloc</code> crate.</p>\n\n<p>As an example of a crate that supports <code>no_std</code>, check out <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.1.20/Cargo.toml#L24-L26\" rel=\"noreferrer\">Futures 0.1.20</a>. This has a feature flag to opt-in to functionality that requires the standard library.</p>\n\n<p>If you wish to do this, you'll need to contribute substantial effort to Tokio and all of its dependencies to add feature flags to opt-in to all the functionality that requires the standard library. It would be worth opening an issue with the maintainers to coordinate such an effort.</p>\n"}, {"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 4, "last_activity_date": 1524719001, "last_edit_date": 1524719001, "creation_date": 1524691091, "answer_id": 50031490, "question_id": 49922999, "link": "https://stackoverflow.com/questions/49922999/how-do-i-use-tokio-reactor-in-a-no-std-environment/50031490#50031490", "title": "How do I use Tokio Reactor in a #[no_std] environment?", "body": "<p>Expanding on what Shepmaster already said: you don't want <code>tokio</code>; it's based on <code>mio</code>, which is unlikely to ever work in a kernel, especially without heap allocation / std.</p>\n\n<p>So how to drive tasks (spawned <code>Future</code>s) in such environment (this is written for the <code>futures</code> 0.1.x series):</p>\n\n<ul>\n<li>your \"Executor\" (\"main loop\") will want to track some state per task, e.g. whether you need to poll it, perhaps some linked list to find those that need to be polled.</li>\n<li>you need a place for that state; you also need to store the <code>Future</code>s wrapped in <a href=\"https://docs.rs/futures/0.1.21/futures/executor/struct.Spawn.html\" rel=\"nofollow noreferrer\"><code>Spawn&lt;...&gt;</code></a>.  It should be possible to use \"static\" allocated storage for that.</li>\n<li>you'll need to implement <a href=\"https://docs.rs/futures/0.1.21/futures/executor/trait.UnsafeNotify.html\" rel=\"nofollow noreferrer\"><code>UnsafeNotify</code></a> (and the base trait <code>Notify</code>), probably for some raw pointer/<code>&amp;'static</code> reference to the task (including the state); <code>notify</code> needs to be able to queue tasks to get polled in a thread safe way.  The <code>{clone,drop}_{raw,id}</code> functions can be empty as you'll be using static allocations anyway. <code>notify</code> also needs to schedule the main loop if it is sleeping.  The queue itself will need some global state too (\"list head+tail\"); if you need different queues you can store a reference to it too in a <code>NotifyHandle</code> (e.g. in the <code>id: usize</code> parameter).</li>\n<li>you could even try running multiple loops on the same \"poll queue\", good luck getting it thread-safe :) The future-0.2 <a href=\"https://docs.rs/futures-executor/0.2.1/futures_executor/struct.ThreadPool.html\" rel=\"nofollow noreferrer\"><code>ThreadPool</code></a> might give some ideas how to do that (or the <a href=\"https://docs.rs/tokio-threadpool\" rel=\"nofollow noreferrer\"><code>tokio-threadpool</code></a> crate).</li>\n<li>you'll probably need to add some \"timer\" handling to the event loop; a timer should store a <code>NotifyHandle</code> to the task it is supposed to wake on a timeout, some state to track whether the timeout was hit, and the event loop needs a list of active (pointers to) timers to determine how long to wait. (the <a href=\"https://docs.rs/tokio-timer\" rel=\"nofollow noreferrer\"><code>tokio-timer</code></a> crate might give you some ideas how  to implement this)</li>\n<li>some similar handling for async IO; in userspace you'd use <code>select</code> with a timeout (or platform specific optimized version of it), in a kernel you'll probably have to find other ways :) (In the <code>tokio</code> world this is provided by the <code>Reactor</code>, which is based on <code>mio</code>)</li>\n<li>to drive a task you'll want to use <a href=\"https://docs.rs/futures/0.1.21/futures/executor/struct.Spawn.html#method.poll_future_notify\" rel=\"nofollow noreferrer\"><code>poll_future_notify</code></a></li>\n</ul>\n\n<p>In futures-0.2 <code>NotifyHandle</code> became <a href=\"https://docs.rs/futures/0.2.1/futures/task/struct.Waker.html\" rel=\"nofollow noreferrer\"><code>Waker</code></a>, and <code>UnsafeNotify</code> became <a href=\"https://docs.rs/futures/0.2.1/futures/task/trait.UnsafeWake.html\" rel=\"nofollow noreferrer\"><code>UnsafeWake</code></a>; the <code>id: usize</code> context is gone (just use a struct with all the data you need to implement <code>UnsafeWake</code> for).  Instead of storing <code>Spawn&lt;...&gt;</code> for a future you need to manually store a <a href=\"https://docs.rs/futures/0.2.1/futures/task/struct.LocalMap.html\" rel=\"nofollow noreferrer\"><code>LocalMap</code></a> for each task, which is then be used to create a <code>Context</code> with <a href=\"https://docs.rs/futures/0.2.1/futures/task/struct.Context.html#method.without_spawn\" rel=\"nofollow noreferrer\"><code>Context::without_spawn</code></a>, which is then passed to <a href=\"https://docs.rs/futures/0.2.1/futures/prelude/trait.Future.html#tymethod.poll\" rel=\"nofollow noreferrer\"><code>Future::poll</code></a>.</p>\n"}], "owner": {"reputation": 129, "user_id": 9564655, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/617bfecf703b9468a063f0c21d984a1a?s=128&d=identicon&r=PG&f=1", "display_name": "EmbeddedOS", "link": "https://stackoverflow.com/users/9564655/embeddedos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1046, "favorite_count": 1, "accepted_answer_id": 49927146, "answer_count": 2, "score": 4, "last_activity_date": 1525453818, "creation_date": 1524146319, "last_edit_date": 1525453818, "question_id": 49922999, "link": "https://stackoverflow.com/questions/49922999/how-do-i-use-tokio-reactor-in-a-no-std-environment", "title": "How do I use Tokio Reactor in a #[no_std] environment?", "body": "<p>I am trying to implement futures on the Tock OS embedded operating system. I'm trying to using <a href=\"https://github.com/tokio-rs/tokio-io/blob/master/README.md\" rel=\"nofollow noreferrer\">Tokio</a> in a <code>#[no_std]</code> environment. </p>\n\n<p>My <code>Cargo.toml</code> file looks like this:</p>\n\n<pre><code>[package]\nname = \"nrf52dk\"\nversion = \"0.1.0\"\nauthors = [\"Tock Project Developers &lt;tock-dev@googlegroups.com&gt;\"]\nbuild = \"build.rs\"\n\n[profile.dev]\npanic = \"abort\"\nlto = true\nopt-level = \"z\"\ndebug = true\n\n[profile.release]\npanic = \"abort\"\nlto = true\nopt-level = \"z\"\ndebug = true\n\n[dependencies]\ncortexm4 = { path = \"../../arch/cortex-m4\" }\ncapsules = { path = \"../../capsules\" }\nkernel = { path = \"../../kernel\" }\nnrf52 = { path = \"../../chips/nrf52\" }\nnrf5x = { path = \"../../chips/nrf5x\" }\nfutures = {version = \"0.2.0\", default-features = false }\n</code></pre>\n\n<p>This compiles with no errors but when I add <code>tokio-reactor = \"0.1.1\"</code>, I get the error: <code>error[E0463]: can't find crate for std</code>. I understand this is because Tokio imports some stuff from the std library.</p>\n\n<p>Is it possible to get around this problem?</p>\n"}, {"tags": ["generics", "rust", "closures"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1524135398, "post_id": 49918896, "comment_id": 86853934, "body": "Have you tried doing what the compiler suggetst (explicit lifetime bound <code>T: &#39;static</code>)?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 3, "creation_date": 1524135484, "post_id": 49918896, "comment_id": 86853996, "body": "Also note that you cannot move a variable (<code>a</code>) out of a <code>Fn</code> closure - it would no longer be there after the first call."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 3, "creation_date": 1524136042, "post_id": 49918896, "comment_id": 86854422, "body": "What is your goal?"}, {"owner": {"reputation": 319, "user_id": 3645510, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/tJHA4.jpg?s=128&g=1", "display_name": "b1zzu", "link": "https://stackoverflow.com/users/3645510/b1zzu"}, "edited": false, "score": 0, "creation_date": 1524137834, "post_id": 49918896, "comment_id": 86855661, "body": "When I put the <code>&#39;static</code> lifetime i get this error: <code>error[E0507]: cannot move out of captured outer variable in an `Fn` closure</code>"}, {"owner": {"reputation": 319, "user_id": 3645510, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/tJHA4.jpg?s=128&g=1", "display_name": "b1zzu", "link": "https://stackoverflow.com/users/3645510/b1zzu"}, "edited": false, "score": 0, "creation_date": 1524137897, "post_id": 49918896, "comment_id": 86855710, "body": "Is there a way to move the variable <code>a</code> out of the clouser?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 5, "creation_date": 1524138944, "post_id": 49918896, "comment_id": 86856453, "body": "There are... various solutions, which usually indicates a question that is too broad to answer. I think it&#39;s time for you to tell us more about your actual goals :)"}], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 7, "creation_date": 1524143085, "post_id": 49921803, "comment_id": 86859284, "body": "&quot;<code>T</code> can be any type, which means it <i>could</i> be a reference&quot; - this solves a question I&#39;ve always been curious about, but never got around to asking. Incidentally, is there any way to specify that some T <i>cannot</i> be a reference?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1524145604, "post_id": 49921803, "comment_id": 86861041, "body": "There is an alternative to <code>FnBox</code> that works on stable but incurs a small runtime cost (which I assume <code>FnBox</code> does not). <a href=\"https://play.rust-lang.org/?gist=afea0a6f190983e32dca6114701a0026&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a>"}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 8, "last_activity_date": 1524142797, "creation_date": 1524142797, "answer_id": 49921803, "question_id": 49918896, "link": "https://stackoverflow.com/questions/49918896/the-parameter-type-t-may-not-live-long-enough/49921803#49921803", "title": "The parameter type `T` may not live long enough", "body": "<p>There's a couple of things going on here, and it all has to do with a slight awkwardness around move semantics and closures.</p>\n\n<p>First off, the <code>simple</code> function does need to specify a lifetime for its <code>T</code> parameter. From the function's point of view, <code>T</code> can be any type, which means it <em>could</em> be a reference, so it needs to have a lifetime. Lifetime elision doesn't apply to this case so you need to write it out explicitly. The compiler suggests <code>'static</code>, which is fine for a hello world. If you had more complex lifetimes, you'd need to use a lifetime parameter; see my example below for more.</p>\n\n<p>Your closure can't be a <code>Fn</code>, because you can't call it more than once. As the new error you've got says, your closure moves the value it captures (<code>a</code>) out of the closure when it's called. That's the same thing as saying it's a method that takes <code>self</code> instead of <code>&amp;self</code>. If function calls were a normal method instead of having special syntax, it would be something like this:</p>\n\n<pre><code>trait FnOnce {\n    type Output\n    fn call(self) -&gt; Output\n}\n\ntrait Fn : FnOnce {\n    fn call(&amp;self) -&gt; Output\n}\n\n// generated type\nstruct MyClosure&lt;T&gt; {\n    a: T\n}\n\nimpl&lt;T&gt; FnOnce for MyClosure&lt;T&gt; {\n    fn call(self) -&gt; T { self.a }\n}\n</code></pre>\n\n<p>(This is not that much simpler than the actual definitions of these types.)</p>\n\n<p>So in short, a closure that consumes its captured values doesn't implement <code>Fn</code>, only <code>FnOnce</code>. Calling it consumes the closure. There's also a <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.FnMut.html\" rel=\"noreferrer\"><code>FnMut</code></a> but that's not relevant here.</p>\n\n<p>This has another implication, to do with consuming values when they're moved. You might have noticed that you can't call a method that takes <code>self</code> on any trait object (<code>Box&lt;T&gt;</code> where <code>T</code> is a trait). To move an object, the code that's moving it needs to know the size of the object being moved. This doesn't happen with trait objects, which are unsized. That also applies to <code>Box&lt;FnOnce&gt;</code>. Since calling the closure moves it (because calling is a <code>self</code> method`), you can't call the closure.</p>\n\n<p>So how to get around this problem? It makes <code>Box&lt;FnOnce&gt;</code> a bit useless. There's two options.</p>\n\n<p>If you can use unstable Rust, you can use the <a href=\"https://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"noreferrer\"><code>FnBox</code></a> type: it's a replacement for <code>FnOnce</code> that works inside a <code>Box</code>. It's hidden behind a feature gate because, as the documentation warns you: \"Note that <code>FnBox</code> may be deprecated in the future if <code>Box&lt;FnOnce()&gt;</code> closures become directly usable.\" <a href=\"https://play.rust-lang.org/?gist=10ce7f4f7811ec5191665c7499c9ee8c&amp;version=nightly\" rel=\"noreferrer\">Here's a playground that uses this solution and adds lifetime parameters to fix the original problem.</a></p>\n\n<p>An alternative that might be a more broadly applicable engineering solution would be to avoid moving out of the closure.</p>\n\n<ul>\n<li><p>You could return a reference <code>&amp;'static T</code> if you're always putting static objects into the closure. That way you can call the closure as many times as you like and all callers get a reference to the same object.</p></li>\n<li><p>If the object isn't static, you could instead return a <code>Rc&lt;T&gt;</code>. In this case, all callers still get a reference to the same object, and the lifetime of that object is dynamically managed, so it'll stay alive as long as needed. <a href=\"https://play.rust-lang.org/?gist=8e60768d43d6b7f08915654669118657&amp;version=stable\" rel=\"noreferrer\">Here's another playground implementing this option.</a></p></li>\n<li><p>You could have the closure copy its argument to each caller. This way it could be called as many times as necessary and each caller would get its own copy. No further lifetime management would be necessary. If you implement it this way, you can still make the argument an <code>Rc&lt;T&gt;</code> instead of a <code>T</code> to use the function the same way as the option above.</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 0, "last_activity_date": 1525978445, "last_edit_date": 1525978445, "creation_date": 1524145938, "answer_id": 49922848, "question_id": 49918896, "link": "https://stackoverflow.com/questions/49918896/the-parameter-type-t-may-not-live-long-enough/49922848#49922848", "title": "The parameter type `T` may not live long enough", "body": "<p>The <code>simple</code> function returns a closure that is generic over the returned type <code>T</code>.</p>\n\n<p>This implies that the returned type may be anything, for example a reference or a type containing references, so the compiler suggests specifying <code>'static</code> on the type:</p>\n\n<pre><code>fn simple&lt;T: 'static&gt;(a: T) -&gt; Box&lt;Fn() -&gt; T&gt; {\n    Box::new(move || -&gt; T { a })\n}\n</code></pre>\n\n<p>but now you have the problem:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n --&gt; src/main.rs:2:29\n  |\n1 | fn simple&lt;T: 'static&gt;(a: T) -&gt; Box&lt;Fn() -&gt; T&gt; {\n  |                       - captured outer variable\n2 |     Box::new(move || -&gt; T { a })\n  |                             ^ cannot move out of captured outer variable in an `Fn` closure\n\nerror[E0597]: `name` does not live long enough\n --&gt; src/main.rs:7:24\n  |\n7 |     let test = simple(&amp;name);\n  |                        ^^^^ borrowed value does not live long enough\n8 |     println!(\"Hello {}!\", test())\n9 | }\n  | - borrowed value only lives until here\n  |\n  = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>Because the captured variable <code>name</code> is owned by the outer \"main\" context, it cannot be \"stolen\" by someone else. </p>\n\n<p>The next thing to try is to pass the argument by reference, paying attention to define the lifetime for the boxed <code>Fn</code> trait.</p>\n\n<p>The boxed closure implementing <code>Fn</code> trait lives on the heap and the correct lifetime has to be explicitly assigned: <code>Fn() -> &amp;'a T` <strong>+ 'a</strong></code></p>\n\n<pre><code>fn main() {\n    let name = String::from(\"World\");\n    let test = simple(&amp;name);\n    println!(\"Hello {}!\", test())\n}\n\nfn simple&lt;'a, T: 'a&gt;(val: &amp;'a T) -&gt; Box&lt;Fn() -&gt; &amp;'a T + 'a&gt; {\n    Box::new(move || -&gt; &amp;'a T { val })\n}\n</code></pre>\n\n<p>Another solution is to use impl trait, available as of Rust 1.26:</p>\n\n<pre><code>fn main() {\n    let name = String::from(\"World\");\n    let test = simple(&amp;name);\n    println!(\"Hello {}!\", test())\n}\n\nfn simple&lt;'a, T: 'a&gt;(val: &amp;'a T) -&gt; impl Fn() -&gt; &amp;'a T {\n    move || -&gt; &amp;'a T { val }\n}\n</code></pre>\n"}], "owner": {"reputation": 319, "user_id": 3645510, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/tJHA4.jpg?s=128&g=1", "display_name": "b1zzu", "link": "https://stackoverflow.com/users/3645510/b1zzu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1641, "favorite_count": 0, "accepted_answer_id": 49921803, "answer_count": 2, "score": 4, "last_activity_date": 1525978445, "creation_date": 1524134010, "last_edit_date": 1524158586, "question_id": 49918896, "link": "https://stackoverflow.com/questions/49918896/the-parameter-type-t-may-not-live-long-enough", "title": "The parameter type `T` may not live long enough", "body": "<p>I'm trying to write a small program in Rust but I can't get it work.</p>\n\n<p>I have reproduced the error in a smaller script:</p>\n\n<pre><code>fn main() {\n    let name = String::from(\"World\");\n    let test = simple(name);\n    println!(\"Hello {}!\", test())\n}\n\nfn simple&lt;T&gt;(a: T) -&gt; Box&lt;Fn() -&gt; T&gt; {\n    Box::new(move || -&gt; T {\n        a\n    })\n}\n</code></pre>\n\n<p>When I compile it, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `T` may not live long enough\n  --&gt; test.rs:8:9\n   |\n7  |       fn simple&lt;T&gt;(a: T) -&gt; Box&lt;Fn() -&gt; T&gt; {\n   |                 - help: consider adding an explicit lifetime bound `T: 'static`...\n8  | /         Box::new(move || -&gt; T {\n9  | |             a\n10 | |         })\n   | |__________^\n   |\nnote: ...so that the type `[closure@test.rs:8:18: 10:10 a:T]` will meet its required lifetime bounds\n  --&gt; test.rs:8:9\n   |\n8  | /         Box::new(move || -&gt; T {\n9  | |             a\n10 | |         })\n   | |__________^\n</code></pre>\n\n<p>I have tried to add an explicit lifetime bound <code>T: 'static</code> as suggested by the error but I get a new error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n --&gt; test.rs:9:13\n  |\n7 |     fn simple&lt;T: 'static&gt;(a: T) -&gt; Box&lt;Fn() -&gt; T&gt; {\n  |                           - captured outer variable\n8 |         Box::new(move || -&gt; T {\n9 |             a\n  |             ^ cannot move out of captured outer variable in an `Fn` closure\n</code></pre>\n"}, {"tags": ["rust", "reference", "rust-pin"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524171445, "post_id": 49913846, "comment_id": 86876221, "body": "Was something unclear about the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2349-pin.md#motivation\" rel=\"nofollow noreferrer\">motivation listed in the RFC</a>?"}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 4, "last_activity_date": 1586780899, "last_edit_date": 1586780899, "creation_date": 1524127368, "answer_id": 49916546, "question_id": 49913846, "link": "https://stackoverflow.com/questions/49913846/what-are-the-use-cases-of-the-newly-proposed-pin-type/49916546#49916546", "title": "What are the use cases of the newly proposed Pin type?", "body": "<p>One of the possible uses of the <code>Pin</code> type is self-referencing objects; <a href=\"https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html\" rel=\"nofollow noreferrer\">an article by ralfj</a> provides an example of a <code>SelfReferential</code> struct <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">which would be very complicated without it</a>:</p>\n\n<pre><code>use std::ptr;\nuse std::pin::Pin;\nuse std::marker::PhantomPinned;\n\nstruct SelfReferential {\n    data: i32,\n    self_ref: *const i32,\n    _pin: PhantomPinned,\n}\n\nimpl SelfReferential {\n    fn new() -&gt; SelfReferential {\n        SelfReferential { data: 42, self_ref: ptr::null(), _pin: PhantomPinned  }\n    }\n\n    fn init(self: Pin&lt;&amp;mut Self&gt;) {\n        let this : &amp;mut Self = unsafe { self.get_unchecked_mut() };\n        // Set up self_ref to point to this.data.\n        this.self_ref = &amp;mut this.data as *const i32;\n    }\n\n    fn read_ref(self: Pin&lt;&amp;Self&gt;) -&gt; Option&lt;i32&gt; {\n        let this : &amp;Self= self.get_ref();\n        // Dereference self_ref if it is non-NULL.\n        if this.self_ref == ptr::null() {\n            None\n        } else {\n            Some(unsafe { *this.self_ref })\n        }\n    }\n}\n\nfn main() {\n    let mut data: Pin&lt;Box&lt;SelfReferential&gt;&gt; = Box::new(SelfReferential::new()).into();\n    data.as_mut().init();\n    println!(\"{:?}\", data.as_ref().read_ref()); // prints Some(42)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 405, "user_id": 3678439, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/m6V5B.jpg?s=128&g=1", "display_name": "00imvj00", "link": "https://stackoverflow.com/users/3678439/00imvj00"}, "edited": false, "score": 0, "creation_date": 1524136057, "post_id": 49917903, "comment_id": 86854431, "body": "Nice. thank you. But can we use it in simple data structures like queue OR tree or something? just want to expand my knowledge around the Pin type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 405, "user_id": 3678439, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/m6V5B.jpg?s=128&g=1", "display_name": "00imvj00", "link": "https://stackoverflow.com/users/3678439/00imvj00"}, "edited": false, "score": 0, "creation_date": 1524136483, "post_id": 49917903, "comment_id": 86854734, "body": "@00imvj00: If you mean to <i>implement</i> queue or trees, it has been pointed out that <code>Pin</code> could enable safe <i>intrusive</i> data-structures. Those are very specific structures, though. For general data-structures, I do not see a usecase yet... but since it&#39;s new, it may just be me being unimaginative."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 12, "last_activity_date": 1524131241, "last_edit_date": 1592644375, "creation_date": 1524131241, "answer_id": 49917903, "question_id": 49913846, "link": "https://stackoverflow.com/questions/49913846/what-are-the-use-cases-of-the-newly-proposed-pin-type/49917903#49917903", "title": "What are the use cases of the newly proposed Pin type?", "body": "<h1>What is pinning ?</h1>\n<p>In programming, pinning X means instructing X not to move.</p>\n<p>For example:</p>\n<ul>\n<li>Pinning a thread to a CPU core, to ensure it always executes on the same CPU,</li>\n<li>Pinning an object in memory, to prevent a Garbage Collector to move it (<a href=\"https://stackoverflow.com/questions/2490912/what-are-pinned-objects\">in C# for example</a>).</li>\n</ul>\n<h1>What is the <code>Pin</code> type about?</h1>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/std/mem/struct.Pin.html\" rel=\"noreferrer\"><code>Pin</code></a> type's purpose is to pin an object in memory.</p>\n<p>It enables taking the address of an object and having a guarantee that this address will remain valid for as long as the instance of <code>Pin</code> is alive.</p>\n<h1>What are the usecases?</h1>\n<p>The primary usecase, for which it was developed, is supporting <em>Generators</em>.</p>\n<p>The idea of generators is to write a simple function, with <code>yield</code>, and have the compiler automatically translate this function into a state machine. The state that the generator carries around is the &quot;stack&quot; variables that need to be preserved from one invocation to another.</p>\n<p>The key difficulty of Generators that <code>Pin</code> is designed to fix is that Generators may end up storing a reference to one of their own data members (after all, you can create references to stack values) or a reference to an object ultimately owned by their own data members (for example, a <code>&amp;T</code> obtained from a <code>Box&lt;T&gt;</code>).</p>\n<p>This is a subcase of self-referential structs, which until now required custom libraries (and lots of <code>unsafe</code>). The problem of self-referential structs is that if the struct move, the reference it contains still points to the <em>old</em> memory.</p>\n<p><code>Pin</code> apparently solves this years-old issue of Rust. As a library type. It creates the extra guarantee that as long as <code>Pin</code> exist the pinned value cannot be moved.</p>\n<p>The usage, therefore, is to first create the struct you need, return it/move it at will, and then when you are satisfied with its place in memory initialize the pinned references.</p>\n"}], "owner": {"reputation": 405, "user_id": 3678439, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/m6V5B.jpg?s=128&g=1", "display_name": "00imvj00", "link": "https://stackoverflow.com/users/3678439/00imvj00"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1769, "favorite_count": 3, "answer_count": 2, "score": 19, "last_activity_date": 1586780899, "creation_date": 1524118070, "last_edit_date": 1586640865, "question_id": 49913846, "link": "https://stackoverflow.com/questions/49913846/what-are-the-use-cases-of-the-newly-proposed-pin-type", "title": "What are the use cases of the newly proposed Pin type?", "body": "<p>There is a new <code>Pin</code> type in unstable Rust and the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2349-pin.md\" rel=\"noreferrer\">RFC</a> is already merged. It is said to be kind of a game changer when it comes to passing references, but I am not sure how and when one should use it.</p>\n\n<p>Can anyone explain it in layman's terms?</p>\n"}]