[{"tags": ["rust", "deserialization", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1473274891, "post_id": 39377246, "comment_id": 66082485, "body": "Perhaps you can <a href=\"https://stackoverflow.com/posts/39377246/edit\">edit</a> your question to expand on how <i>this</i> question differs from the <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+cannot+move+out+of+borrowed+content+is%3Aq\"><b>74</b> other questions about the same error message</a>? You are expected to <a href=\"http://meta.stackoverflow.com/q/261592/155423\">show a large amount of effort</a> when asking a question."}, {"owner": {"reputation": 981, "user_id": 4165272, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/c4q22.png?s=128&g=1", "display_name": "polka", "link": "https://stackoverflow.com/users/4165272/polka"}, "edited": false, "score": 1, "creation_date": 1473281751, "post_id": 39377246, "comment_id": 66085635, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/37797035/cannot-move-out-of-borrowed-content-e0507\">Cannot move out of borrowed content &#91;E0507&#93;</a>"}, {"owner": {"reputation": 618, "user_id": 1859889, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/798fa5b67f7d43b2c83a9fdd0e9c9689?s=128&d=identicon&r=PG", "display_name": "just.ru", "link": "https://stackoverflow.com/users/1859889/just-ru"}, "edited": false, "score": 2, "creation_date": 1473283986, "post_id": 39377246, "comment_id": 66086565, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content\">Cannot move out of borrowed content</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "is_accepted": true, "score": 6, "last_activity_date": 1473276026, "creation_date": 1473276026, "answer_id": 39377592, "question_id": 39377246, "link": "https://stackoverflow.com/questions/39377246/cannot-move-out-of-borrowed-content-for-a-struct/39377592#39377592", "title": "Cannot move out of borrowed content for a struct", "body": "<p>The <code>take</code> method takes <code>self</code>:</p>\n\n<p><code>fn take(self, limit: u64) -&gt; Take&lt;Self&gt; where Self: Sized</code></p>\n\n<p>so you cannot use it on anything borrowed.</p>\n\n<p>Use the <code>by_ref</code> method. Replace the error line with this:</p>\n\n<pre><code>{\n      let reference = self.reader.by_ref();\n      reference.take(len as u64).read_to_string(&amp;mut string_buffer);\n}\n</code></pre>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1884, "favorite_count": 0, "accepted_answer_id": 39377592, "answer_count": 1, "score": 0, "last_activity_date": 1543677402, "creation_date": 1473274487, "last_edit_date": 1543677402, "question_id": 39377246, "link": "https://stackoverflow.com/questions/39377246/cannot-move-out-of-borrowed-content-for-a-struct", "title": "Cannot move out of borrowed content for a struct", "body": "<p>I'm trying to implement deserializer for a BERT data which comes from an another program via sockets. For the following code:</p>\n\n<pre><code>use std::io::{self, Read};\n\n#[derive(Clone, Copy)]\npub struct Deserializer&lt;R: Read&gt; {\n    reader: R,\n    header: Option&lt;u8&gt;,\n}\n\nimpl&lt;R: Read&gt; Read for Deserializer&lt;R&gt; {\n    #[inline]\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n        self.reader.read(buf)\n    }\n}\n\nimpl&lt;R: Read&gt; Deserializer&lt;R&gt; {\n    /// Creates the BERT parser from an `std::io::Read`.\n    #[inline]\n    pub fn new(reader: R) -&gt; Deserializer&lt;R&gt; {\n        Deserializer {\n            reader: reader,\n            header: None,\n        }\n    }\n\n    #[inline]\n    pub fn read_string(&amp;mut self, len: usize) -&gt; io::Result&lt;String&gt; {\n        let mut string_buffer = String::with_capacity(len);\n        self.reader.take(len as u64).read_to_string(&amp;mut string_buffer);\n        Ok(string_buffer)\n    }\n}\n</code></pre>\n\n<p>The Rust compiler generates an error, when I'm trying to read a string from a passed data:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot move out of borrowed content [E0507]\n        self.reader.take(len as u64).read_to_string(&amp;mut string_buffer);\n        ^~~~\nhelp: run `rustc --explain E0507` to see a detailed explanation\n</code></pre>\n\n<p>How can I fix this even if my <code>Deserializer&lt;R&gt;</code> struct has had <code>Clone/Copy</code> traits?</p>\n"}, {"tags": ["rust", "type-inference", "hyper"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 2, "creation_date": 1473251377, "post_id": 39369650, "comment_id": 66067834, "body": "I tried this out for myself and couldn&#39;t reproduce the error. Do you have <code>extern crate hyper;</code> and <code>use hyper::Client;</code> in your file? Here&#39;s my working version: <a href=\"http://play.integer32.com/?gist=4debd4812508baf255f21715fbf44ef0\" rel=\"nofollow noreferrer\">play.integer32.com/?gist=4debd4812508baf255f21715fbf44ef0</a>"}, {"owner": {"reputation": 309, "user_id": 1162638, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/51ca6b3fbcdc93e6ad8bbb195ed1df72?s=128&d=identicon&r=PG", "display_name": "Roman Smelyansky", "link": "https://stackoverflow.com/users/1162638/roman-smelyansky"}, "reply_to_user": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1473254715, "post_id": 39369650, "comment_id": 66070316, "body": "Pasted your code into my main.rs. Same error"}, {"owner": {"reputation": 309, "user_id": 1162638, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/51ca6b3fbcdc93e6ad8bbb195ed1df72?s=128&d=identicon&r=PG", "display_name": "Roman Smelyansky", "link": "https://stackoverflow.com/users/1162638/roman-smelyansky"}, "reply_to_user": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1473254961, "post_id": 39369650, "comment_id": 66070485, "body": "Ok. When I use hyper from rust-lang repo this compiles, when I use hyper from hyper repo      hyper={git = &quot;<a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow noreferrer\">github.com/hyperium/hyper</a>&quot;} This won&#39;t compile. That maybe explains why..."}], "answers": [{"comments": [{"owner": {"reputation": 309, "user_id": 1162638, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/51ca6b3fbcdc93e6ad8bbb195ed1df72?s=128&d=identicon&r=PG", "display_name": "Roman Smelyansky", "link": "https://stackoverflow.com/users/1162638/roman-smelyansky"}, "edited": false, "score": 0, "creation_date": 1473254813, "post_id": 39370023, "comment_id": 66070379, "body": "Yes, I use the hyper::Client. I have a version of my code that uses Client and all is well, compiles and runs. But when I wanted to refactor this error came up."}, {"owner": {"reputation": 309, "user_id": 1162638, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/51ca6b3fbcdc93e6ad8bbb195ed1df72?s=128&d=identicon&r=PG", "display_name": "Roman Smelyansky", "link": "https://stackoverflow.com/users/1162638/roman-smelyansky"}, "edited": false, "score": 0, "creation_date": 1473255184, "post_id": 39370023, "comment_id": 66070647, "body": "So, there is a generic parameter: <a href=\"https://github.com/hyperium/hyper/blob/master/src/client/mod.rs\" rel=\"nofollow noreferrer\">github.com/hyperium/hyper/blob/master/src/client/mod.rs</a>  But I, probably as you did, looked in another documentation: <a href=\"http://hyper.rs/hyper/v0.9.4/hyper/client/index.html\" rel=\"nofollow noreferrer\">hyper.rs/hyper/v0.9.4/hyper/client/index.html</a>  where there is no generic parameter"}], "tags": [], "owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "is_accepted": false, "score": 4, "last_activity_date": 1473254139, "last_edit_date": 1473254139, "creation_date": 1473251446, "answer_id": 39370023, "question_id": 39369650, "link": "https://stackoverflow.com/questions/39369650/unable-to-create-hyperclient-because-the-compiler-cannot-infer-enough-type-inf/39370023#39370023", "title": "Unable to create hyper::Client because the compiler cannot infer enough type information", "body": "<p>In general this error would mean that <code>Client</code> has some generic parameter and the compiler can not infer it's value. You would have to tell it somehow.</p>\n\n<p>Here is example with <code>std::vec::Vec</code>:</p>\n\n<pre><code>use std::vec::Vec;\n\nfn problem() {\n    let v = Vec::new(); // Problem, which Vec&lt;???&gt; do you want?\n}\n\nfn solution_1() {\n    let mut v = Vec::&lt;i32&gt;::new(); // Tell the compiler directly\n}\n\nfn solution_2() {\n    let mut v: Vec&lt;i32&gt; = Vec::new(); // Tell the compiler by specifying the type\n}\n\nfn solution_3() {\n    let mut v = Vec::new();\n    v.push(1); // Tell the compiler by using it\n}\n</code></pre>\n\n<p><strong>But</strong> <code>hyper::client::Client</code> doesn't have any generic parameters. Are you sure the <code>Client</code> you are trying to instantiate is the one from Hyper?</p>\n"}], "owner": {"reputation": 309, "user_id": 1162638, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/51ca6b3fbcdc93e6ad8bbb195ed1df72?s=128&d=identicon&r=PG", "display_name": "Roman Smelyansky", "link": "https://stackoverflow.com/users/1162638/roman-smelyansky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 295, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1473324814, "creation_date": 1473250327, "last_edit_date": 1473324814, "question_id": 39369650, "link": "https://stackoverflow.com/questions/39369650/unable-to-create-hyperclient-because-the-compiler-cannot-infer-enough-type-inf", "title": "Unable to create hyper::Client because the compiler cannot infer enough type information", "body": "<p>To experiment with Hyper, I started with <a href=\"http://hyper.rs/hyper/v0.9.4/hyper/client/index.html\" rel=\"nofollow\">the GET example</a>. Aside the fact that the example doesn't compile (<code>no method `get` in `client`</code>) I have distilled my problem to a single line:</p>\n\n<pre><code>fn temp() {\n    let client = Client::new();\n}\n</code></pre>\n\n<p>This code won't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n</code></pre>\n"}, {"tags": ["function", "return", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 7, "last_activity_date": 1537275621, "last_edit_date": 1537275621, "creation_date": 1473250898, "answer_id": 39369854, "question_id": 39369402, "link": "https://stackoverflow.com/questions/39369402/possible-to-declare-functions-that-will-warn-on-unused-results-in-rust/39369854#39369854", "title": "Possible to declare functions that will warn on unused results in Rust?", "body": "<p>As of 1.27, <code>#[must_use]</code> works for functions too.</p>\n\n<hr>\n\n<p>It appears that the <code>#[must_use]</code> attribute is only applicable to <code>struct</code>s, <code>enum</code>s and <code>union</code>s (<code>union</code> is not available in stable Rust yet, though): <a href=\"https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src/librustc_lint/unused.rs#L135\" rel=\"nofollow noreferrer\">source</a>. I think this means you can't override it for a function.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473321076, "post_id": 39384247, "comment_id": 66097715, "body": "A problem with this is you then need API users to be aware of this wrapped type, if for example they took a <code>usize</code>, they then need to take a <code>MustUse&lt;usize&gt;</code>. I was hoping this could be avoided by applying <code>#[must_use]</code> on type aliases, eg: <code>pub type MustUseUSize = usize;</code> but the attribute is ignored in this case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1473322390, "post_id": 39384247, "comment_id": 66098452, "body": "@ideasman42: Or you just call <code>.0</code> on the result of the function, which (1) counts as using it and (2) unwraps it for your users :)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473322542, "post_id": 39384247, "comment_id": 66098538, "body": "While a valid answer, overall IMHO this is causing more <i>damage</i> to the code then it solves. If adding <code>.0</code> on return values is needed all over, <i>&quot;The Cure Worse Than The Disease&quot;</i> so to speak, (outside some isolated cases where it may be acceptable)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 2, "creation_date": 1473323561, "post_id": 39384247, "comment_id": 66099120, "body": "@ideasman42: It&#39;s only necessary if (1) you want to enforce the value to be used and (2) you are not using <code>Result</code>. It seems such a rare situation that I&#39;ve never had to use it, most of the times I don&#39;t care if the caller is not using the return value. The only reason <code>must_use</code> was introduced is to remind the caller that the called function might end with an error, which is idiomatically conveyed by the <code>Result</code> type in Rust."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473326803, "post_id": 39384247, "comment_id": 66101019, "body": "For cases where the only purpose of a function is to calculate a result, this can help avoid mistakes or invalid use. As with many warnings, while not essential, it can help save you time by pointing out logical errors in how a functions used."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1473332122, "post_id": 39384247, "comment_id": 66104386, "body": "@ideasman42 But what is the logic error here? Not doing anything with the function call, or with the value it returns? Logically, the value, so that&#39;s where the constraint should go. --- The other way of doing it would return such newtype, and on the rest of your API, receive that type everywhere it&#39;s expected, instead of say, a plain <code>u32</code>. This way you can detect &quot;code smells&quot; not by compiler error, but by constructing your newtype by hand."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473332928, "post_id": 39384247, "comment_id": 66104857, "body": "Don&#39;t see why this should <i>necessarily</i> be an attribute of the type, but am also not expert in Rust&#39;s type system. Whatever the case, it would be good if this could be done in a way that allows users of functions to have the effects of <code>must_use</code> without having to change how they access return values. As with GCC&#39;s <code>warn_unused_result</code>. If a feature exists but is overly awkward, its a big disincentive to taking advantage of them."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1473335365, "post_id": 39384247, "comment_id": 66106271, "body": "@ideasman42: This is not a matter of type system (not really) and more a matter of choice. Either or both are possible, so it&#39;s up to language designers/compiler writers to make a choice. The main difference between Rust and GCC is that GCC designed a &quot;lint&quot; whereas Rust may have elected to attempt to close the gap toward Linear Types (which would be awesome). One big advantage of Rust approach is that <i>nearly nobody</i> has to fiddle with this attribute; whenever you have an error that the caller should be notified of, you use <code>Result</code> (with a specific cause) and the caller has to handle it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1473317128, "creation_date": 1473317128, "answer_id": 39384247, "question_id": 39369402, "link": "https://stackoverflow.com/questions/39369402/possible-to-declare-functions-that-will-warn-on-unused-results-in-rust/39384247#39384247", "title": "Possible to declare functions that will warn on unused results in Rust?", "body": "<p>Yes, if you don't mind wrapping said types.</p>\n\n<p>The <code>#[must_use]</code> attribute, as answered by @ljedrz, only applies to types. However, in Rust, creating new types is painless <em>and</em> has not impact on performance. Therefore, just wrap your type in a <code>MustUse&lt;T&gt;</code> type, and have your function resolve this.</p>\n\n<pre><code>struct MustUse&lt;T&gt;(T);\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 452, "favorite_count": 0, "closed_date": 1537232454, "accepted_answer_id": 39369854, "answer_count": 2, "score": 3, "last_activity_date": 1537275621, "creation_date": 1473249663, "question_id": 39369402, "link": "https://stackoverflow.com/questions/39369402/possible-to-declare-functions-that-will-warn-on-unused-results-in-rust", "closed_reason": "Duplicate", "title": "Possible to declare functions that will warn on unused results in Rust?", "body": "<p>Does Rust have a way to declare a function, where not using its result will warn - for any types?</p>\n\n<p>Something like GCC's <code>__attribute__((warn_unused_result));</code>?</p>\n"}, {"tags": ["types", "rust", "match"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 4, "creation_date": 1473245459, "post_id": 39367754, "comment_id": 66063766, "body": "Welcome to StackOverflow! Here on SO, it is expected to put some effort into your problem first and describe what you have tried in your question. In order to avoid downvotes, you could add details to your question, like &quot;I tried this, but it didn&#39;t work&quot; or &quot;I don&#39;t really understand this language feature&quot;."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1473246921, "post_id": 39367754, "comment_id": 66064737, "body": "&quot;so I know I have to implement the Display method&quot; -&gt; it seems that you are  asking two questions or at least mixing two topics. &quot;[...] iterate on a Vec of Options&quot; -&gt; in the title you said <code>Option&lt;Vec&lt;T&gt;&gt;</code>, so an optional vector, not a vector of options. How about you show us some code you wrote trying to solve your problem? Even if it&#39;s super incomplete, it probably helps us a lot!"}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1473254118, "post_id": 39370866, "comment_id": 66069887, "body": "<i>Note</i>: this isn&#39;t really code that would run in production. To just print values, you would pass these values by reference."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1473253909, "creation_date": 1473253909, "answer_id": 39370866, "question_id": 39367754, "link": "https://stackoverflow.com/questions/39367754/is-it-possible-to-match-on-optionvect/39370866#39370866", "title": "Is it possible to match on Option&lt;Vec&lt;T&gt;&gt;?", "body": "<pre><code>use std::net::IpAddr;\n\nfn printer(addrs: Option&lt;Vec&lt;IpAddr&gt;&gt;) {\n    if let Some(addrs) = addrs {\n        for addr in addrs {\n            if let IpAddr::V4(v4_addr) = addr {\n                println!(\"{}\", v4_addr)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>For details, see <a href=\"https://doc.rust-lang.org/stable/book\" rel=\"nofollow\"><em>The Rust Programming Language</em></a> sections on:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/book/loops.html\" rel=\"nofollow\">loops</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/enums.html\" rel=\"nofollow\">enums</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/if-let.html\" rel=\"nofollow\">if let</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/match.html\" rel=\"nofollow\">matching</a></li>\n</ul>\n"}], "owner": {"reputation": 288, "user_id": 4791339, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-fY7k9OpEVps/AAAAAAAAAAI/AAAAAAAACIw/2whxGNaHKBQ/photo.jpg?sz=128", "display_name": "Lu&#237;s Correia", "link": "https://stackoverflow.com/users/4791339/lu%c3%ads-correia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 0, "accepted_answer_id": 39370866, "answer_count": 1, "score": -4, "last_activity_date": 1473256787, "creation_date": 1473245066, "last_edit_date": 1473256787, "question_id": 39367754, "link": "https://stackoverflow.com/questions/39367754/is-it-possible-to-match-on-optionvect", "title": "Is it possible to match on Option&lt;Vec&lt;T&gt;&gt;?", "body": "<p>I'm failing to understand how I could iterate on a <code>Vec</code> of <code>Option</code>s and act only when a certain condition is met the type of the element.</p>\n\n<p>Specifically, I'm working on a network application where I want to iterate over all possible IP addresses for a network interface (IPv4 or IPv6) and only do something with the v4 addresses. In this case I want to print them, so I know I have to implement <code>Display</code>.</p>\n\n<p>Printing my value with the <code>Debug</code> formatter, I get:</p>\n\n<pre><code>Some([V6(fe80::6a5b:35ff:fec7:5eeb), V4(10.0.11.241)])\n</code></pre>\n\n<p>Which is an <code>Option&lt;Vec&lt;std::net::IpAddr&gt;&gt;</code>. I want to iterate over the vector and print every <code>V4</code> address I encounter via the <code>Display</code> implementation.</p>\n\n<p>Note that <a href=\"https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html\" rel=\"nofollow\"><code>std::net::IpAddr</code></a> is defined as</p>\n\n<pre><code>pub enum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n</code></pre>\n\n<p>How do I match the enum on type (<code>V4</code> only in my case)?</p>\n"}, {"tags": ["recursion", "struct", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "is_accepted": true, "score": 0, "last_activity_date": 1473253536, "last_edit_date": 1473253536, "creation_date": 1473252501, "answer_id": 39370380, "question_id": 39365302, "link": "https://stackoverflow.com/questions/39365302/recursive-structs-error-lifetime-cannot-infer-an-appropriate-lifetime-for-lifet/39370380#39370380", "title": "Recursive structs error lifetime (cannot infer an appropriate lifetime for lifetime parameter in function call... [E0495])", "body": "<p>I was looking in the wrong direction. And so, I found a solution, but unfortunately it is not safe.</p>\n\n<ul>\n<li>You can implement it using <code>Rc</code> and <code>Weak</code> to allow shared ownership of nodes, although this approach pays the cost of memory management.</li>\n<li>You can implement it using unsafe code using raw pointers. This will be more efficient, but bypasses Rust\u2019s safety guarantees.</li>\n<li>Using borrowed references with <code>UnsafeCell</code>.</li>\n</ul>\n\n<p><a href=\"https://www.rust-lang.org/en-US/faq.html#ownership\" rel=\"nofollow\">Rust FAQ</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/20698384/lifetime-of-rust-structs-that-reference-each-other#20704252\">Other answer on SO</a></p>\n\n<p>Example of implementation unsafe version with raw pointers:</p>\n\n<pre><code>struct Entity&lt;'a&gt; {\n    id: i32,\n    name: &amp;'a str,\n    references: Option&lt;Vec&lt;Reference&lt;'a&gt;&gt;&gt;,\n}\n\nstruct Reference&lt;'a&gt; {\n    entity: *const Entity&lt;'a&gt;,\n}\n</code></pre>\n\n<p>Rust Playground: <a href=\"https://play.rust-lang.org/?gist=8237d8cb80a681c981a85610104f2e5c&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">https://play.rust-lang.org/?gist=8237d8cb80a681c981a85610104f2e5c&amp;version=stable&amp;backtrace=0</a></p>\n"}], "owner": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 343, "favorite_count": 0, "closed_date": 1473257026, "accepted_answer_id": 39370380, "answer_count": 1, "score": 0, "last_activity_date": 1473257003, "creation_date": 1473238207, "last_edit_date": 1473257003, "question_id": 39365302, "link": "https://stackoverflow.com/questions/39365302/recursive-structs-error-lifetime-cannot-infer-an-appropriate-lifetime-for-lifet", "closed_reason": "Duplicate", "title": "Recursive structs error lifetime (cannot infer an appropriate lifetime for lifetime parameter in function call... [E0495])", "body": "<p>I can't figure out the lifetime parameters for this code. Everything I try usually results in a compiler error:</p>\n\n<blockquote>\n  <p>consider using an explicit lifetime parameter as shown</p>\n</blockquote>\n\n<p>or something like </p>\n\n<blockquote>\n  <p>in type <code>&amp;'ent Entity&lt;'a, 'ent&gt;</code>, reference has a longer lifetime than the data it references.</p>\n</blockquote>\n\n<p><code>Entity</code>, <code>Reference</code> are simplified versions to keep this example minimal.</p>\n\n<pre><code>struct Entity&lt;'a&gt; {\n    id: i32,\n    name: &amp;'a str,\n    references: Option&lt;Vec&lt;Reference&lt;'a&gt;&gt;&gt;,\n}\n\nstruct Reference&lt;'a&gt; {\n    entity: &amp;'a Entity&lt;'a&gt;,\n}\n\nfn main() {\n    let mut ents: Vec&lt;Entity&gt; = vec![Entity {\n                                      id: 0,\n                                      name: \"Zero\",\n                                      references: None,\n                                  },\n                                  Entity {\n                                      id: 1,\n                                      name: \"One\",\n                                      references: None,\n                                  },\n                                  Entity {\n                                      id: 2,\n                                      name: \"Two\",\n                                      references: None,\n                                  },\n                                  Entity {\n                                      id: 3,\n                                      name: \"Three\",\n                                      references: None,\n                                  }];\n    let references_ents_id = vec![vec![3, 1, 2], vec![1], vec![0, 3], vec![3, 0]];\n    create_references(&amp;references_ents_id, &amp;mut ents);\n}\n\nfn create_references(refs_id: &amp;Vec&lt;Vec&lt;i32&gt;&gt;, ents_vec: &amp;mut Vec&lt;Entity&gt;) {\n    for (id_ent, references) in refs_id.iter().enumerate() {\n        let mut references_of_ent: Vec&lt;Reference&gt; = vec![];\n        for id_ent in references {\n            references_of_ent.push(Reference {\n                entity: ents_vec.iter().find(|ent| ent.id == *id_ent).unwrap(),\n            });\n        }\n        ents_vec[id_ent].references = Some(references_of_ent);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9f7ec1dc153c00f2c15db395215ddae1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a></p>\n"}, {"tags": ["generics", "rust", "associated-types"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473227617, "post_id": 39361914, "comment_id": 66053304, "body": "Do the builders need parameters in order to initialize a new instance, or are they supposed to be constructible without parameters?"}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473228491, "post_id": 39361914, "comment_id": 66053671, "body": "actually yes - bit is some kind of stub implementation - first want to achieve the transition from the renderer to the returning builder. You may already realized that I try to create a builder pattern here."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473228716, "post_id": 39361914, "comment_id": 66053790, "body": "I think I didn&#39;t phrase my first comment correctly. In order to construct a builder, do you need parameters, or must each implementation of <code>ShapeBuilder</code> support construction without parameters?"}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473229072, "post_id": 39361914, "comment_id": 66053958, "body": "construction will be without parameters. The Call of  <code>set_origin()</code> will be the only way to set a state for the builder - the origin of the shape to be rendered actually"}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473234261, "post_id": 39362555, "comment_id": 66056844, "body": "In this example. When setting a <code>Rectangle</code> object as <code>shape</code> argument - will <code>ShapeBuilder::new()</code> return a RectangleBuilder? Because I do not understand how it resolves if the returning Builder would be a <code>RectangleBuilder</code> since you simply return <code>Self</code> and not something like <code>Self::ShapeBuilder</code> (which is wrong syntax I know)"}, {"owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473259872, "post_id": 39362555, "comment_id": 66074289, "body": "@xetra11 Yes. <code>Self</code> in trait definition means &quot;the concrete type that implements this trait&quot;. In this case, <code>RectangleBuilder</code>. You can also write <code>T::Builder::new()</code> or <code>&lt;T::Builder as ShapeBuilder&gt;::new()</code> instead of just <code>ShapeBuilder::new()</code>, if that&#39;s clearer for you."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473276640, "post_id": 39362555, "comment_id": 66083347, "body": "Ah okay...so implicitly it knows that I&#39;m talking about the associated Type of <code>T</code> if I call <code>ShapeBuilder::new()</code> - pretty much magic and very bad readability don&#39;t you think so, too?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473369008, "post_id": 39362555, "comment_id": 66126533, "body": "It&#39;s not magic if you know the rules. :) But seriously, this is just one instance of the compiler inferring the type of an expression from the return type specified in the function&#39;s signature. Another example: If you return the result of <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>collect()</code></a>, then the compiler will infer which type of collection you want from the function&#39;s return type."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1473229527, "creation_date": 1473229527, "answer_id": 39362555, "question_id": 39361914, "link": "https://stackoverflow.com/questions/39361914/returning-a-generic-type-through-an-associated-type/39362555#39362555", "title": "Returning a generic type through an associated type", "body": "<p>You need to provide a static method in the <code>ShapeBuilder</code> trait that instantiates a new <code>Self</code>. A static method is just a method with no <code>self</code> parameter.</p>\n\n<p>You can either add a method directly:</p>\n\n<pre><code>pub trait ShapeBuilder: Sized {\n    type Renderer: ShapeRenderer;\n\n    fn new() -&gt; Self;\n    fn set_origin() -&gt; Self::Renderer;\n}\n</code></pre>\n\n<p>or be clever and define <code>ShareBuilder</code> as a subtrait of <a href=\"https://doc.rust-lang.org/stable/std/default/trait.Default.html\" rel=\"nofollow\"><code>Default</code></a>.</p>\n\n<pre><code>pub trait ShapeBuilder: Default {\n    type Renderer: ShapeRenderer;\n\n    fn set_origin() -&gt; Self::Renderer;\n}\n</code></pre>\n\n<p>Then, in <code>set_shape</code>, you can instantiate the <code>ShapeBuilder</code>:</p>\n\n<pre><code>impl &lt;'a&gt;Renderer&lt;'a&gt;{\n    pub fn set_shape&lt;T: Shape&gt;(&amp;self, shape: T) -&gt; T::Builder {\n        ShapeBuilder::new() // or Default::default()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 948, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1473229527, "creation_date": 1473226709, "question_id": 39361914, "link": "https://stackoverflow.com/questions/39361914/returning-a-generic-type-through-an-associated-type", "title": "Returning a generic type through an associated type", "body": "<p>I try to get something more generic done but am failing on trying it with associated types. Given is a <code>Shape</code> trait and a <code>Renderer</code> type which tries to return a <code>Builder</code> for a specific kind of shape.</p>\n\n<p><strong>shape</strong></p>\n\n<pre><code>#[derive(Clone, Copy)]\npub struct Rectangle{\n    pub origin: Point,\n    pub height: usize,\n    pub width: usize,\n}\n\npub trait Shape{\n    type Builder : ShapeBuilder;\n}\n\nimpl Shape for Rectangle{\n    type Builder = RectangleBuilder;\n}\n</code></pre>\n\n<p><strong>builder</strong></p>\n\n<pre><code>pub trait ShapeBuilder{\n    type Renderer: ShapeRenderer;\n    fn set_origin() -&gt; Self::Renderer;\n}\n\npub struct RectangleBuilder;\n\nimpl ShapeBuilder for RectangleBuilder{\n    type Renderer = RectangleRenderer;\n    fn set_origin() -&gt; Self::Renderer{\n        RectangleRenderer\n    }\n}\n</code></pre>\n\n<p><strong>renderer</strong></p>\n\n<pre><code>pub struct Renderer&lt;'a&gt;{\n    canvas:&amp;'a mut Canvas\n}\n\nimpl &lt;'a&gt;Renderer&lt;'a&gt;{\n    pub fn new(canvas:&amp;'a mut Canvas) -&gt; Renderer {\n        Renderer{\n            canvas: canvas\n        }\n    }\n    pub fn set_shape&lt;T: Shape&gt;(&amp;self, shape: T) -&gt; T::Builder{\n        // trying to return the specific builder through shape::Builder\n        // or something like that\n    }\n}\n</code></pre>\n\n<p>What I want to achieve is that the <code>set_shape</code> method will return the <code>RectangleBuilder</code> <strong>if</strong> the given <code>shape</code> is of type <code>Rectangle</code></p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1473214044, "creation_date": 1473214044, "answer_id": 39360237, "question_id": 39360127, "link": "https://stackoverflow.com/questions/39360127/lifetimes-of-references-in-mutable-vector/39360237#39360237", "title": "Lifetimes of references in mutable Vector", "body": "<p><code>more_foos</code> and its contents are dropped at the end of each iteration of the <code>while let</code> loop. However, you're trying to store a reference to items from <code>more_foos</code> in <code>stack</code>, and that's not valid, as that would lead to dangling pointers.</p>\n\n<p>Instead, you should make <code>stack</code> own <code>Foo</code> objects instead.</p>\n\n<pre><code>fn main() {\n    let seed: Foo = unimplemented!();\n    let mut stack: Vec&lt;Foo&gt; = Vec::new();\n    stack.push(seed);\n    while let Some(next) = stack.pop() {\n        let more_foos: Vec&lt;Foo&gt; = unimplemented!();\n        for foo in more_foos {\n            stack.push(foo);\n        }\n    }\n}\n</code></pre>\n\n<p>Note: the <code>for</code> loop can be replaced with:</p>\n\n<pre><code>        stack.extend(more_foos);\n</code></pre>\n\n<p>which might be slightly more efficient.</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 39360237, "answer_count": 1, "score": 0, "last_activity_date": 1473292424, "creation_date": 1473213031, "last_edit_date": 1473292424, "question_id": 39360127, "link": "https://stackoverflow.com/questions/39360127/lifetimes-of-references-in-mutable-vector", "title": "Lifetimes of references in mutable Vector", "body": "<p>I have an algorithm like:</p>\n\n<pre><code>let seed: Foo = ...\nlet mut stack: Vec&lt;&amp;Foo&gt; = Vec::new();\nstack.push(&amp;seed);\nwhile let Some(next) = stack.pop {\n    let more_foos: Vec&lt;Foo&gt; = some_function_of(next) // 0 to many Foos returned\n    for foo in more_foos {\n        stack.push(&amp;foo);\n    }\n}\n</code></pre>\n\n<p>I receive the error that <code>foo</code> does not live long enough. I assume this is because <code>stack</code> has a greater lifetime. How can I fix this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 8, "last_activity_date": 1473228286, "last_edit_date": 1473228286, "creation_date": 1473210526, "answer_id": 39359875, "question_id": 39359791, "link": "https://stackoverflow.com/questions/39359791/type-hinting-on-rust-function-calls/39359875#39359875", "title": "Type hinting on Rust function calls", "body": "<p>The error you're getting hides the real issues with the code. In situations like this, by being more explicit, the compiler can get further and give other errors that are more relevant to solving the problem.</p>\n\n<p>First, let's get rid of the type mismatch by explicitly converting the array to a slice, by changing <code>&amp;[]</code> to <code>&amp;[][..]</code>.</p>\n\n<pre><code>fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n    &amp;foos.get(&amp;id).map_or(&amp;[][..], |xs| &amp;**xs);\n}\n</code></pre>\n\n<p>We're now getting this error:</p>\n\n<pre><code>error: not all control paths return a value [--explain E0269]\n  --&gt; &lt;anon&gt;:16:1\n   |&gt;\n16 |&gt; fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n   |&gt; ^\n</code></pre>\n\n<p>Ah ha! There's a semicolon at the end of the function that shouldn't be there. Let's remove it.</p>\n\n<pre><code>fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n    &amp;foos.get(&amp;id).map_or(&amp;[][..], |xs| &amp;**xs)\n}\n</code></pre>\n\n<p>Mmm, still not compiling:</p>\n\n<pre><code>error: `foos` does not live long enough\n  --&gt; &lt;anon&gt;:17:6\n   |&gt;\n17 |&gt;     &amp;foos.get(&amp;id).map_or(&amp;[][..], |xs| &amp;**xs)\n   |&gt;      ^^^^\nnote: reference must be valid for the lifetime 'a as defined on the block at 16:90...\n  --&gt; &lt;anon&gt;:16:91\n   |&gt;\n16 |&gt; fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n   |&gt;                                                                                           ^\nnote: ...but borrowed value is only valid for the scope of function body at 16:90\n  --&gt; &lt;anon&gt;:16:91\n   |&gt;\n16 |&gt; fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n   |&gt;                                                                                           ^\n</code></pre>\n\n<p>Basically, the error is that you're trying to return a borrowed pointer into a <code>HashMap</code> that will be destroyed at the end of the call to <code>f</code> (because the <code>HashMap</code> is passed by value). You need to pass the <code>HashMap</code> by reference. We can get rid of the unnecessary <code>[..]</code> now, because it compiles!</p>\n\n<pre><code>fn f(foos: &amp;HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;[Foo] {\n    foos.get(&amp;id).map_or(&amp;[], |xs| &amp;**xs)\n}\n</code></pre>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 276, "favorite_count": 0, "accepted_answer_id": 39359875, "answer_count": 1, "score": 1, "last_activity_date": 1473228286, "creation_date": 1473209657, "question_id": 39359791, "link": "https://stackoverflow.com/questions/39359791/type-hinting-on-rust-function-calls", "title": "Type hinting on Rust function calls", "body": "<p>I\u2019m trying to extract a function from a struct. The original (working) is:</p>\n\n<pre><code>pub fn f(&amp;self, id: Id) -&gt; &amp;[Foo] {\n    self.foos.get(&amp;id).map_or(&amp;[], |foos| &amp;**foos)\n}\n</code></pre>\n\n<p>Where where <code>self.foos</code> is a <code>HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;</code></p>\n\n<p>After extraction I have</p>\n\n<pre><code>fn f&lt;'a&gt;(foos: HashMap&lt;Id, Vec&lt;Foo&gt;, BuildHasherDefault&lt;FnvHasher&gt;&gt;, id: Id) -&gt; &amp;'a [Foo] {\n    &amp;foos.get(&amp;id).map_or(&amp;[], |xs| &amp;**xs);\n}\n</code></pre>\n\n<p>The resulting error is</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;[_; 0]`,\n  found `&amp;[foo::Foo]`\n (expected array of 0 elements,\n   found slice) [E0308]\n</code></pre>\n\n<p>I think I need to provide a type hint. Is this right? If so, how do I explicitly declare the type of <code>U</code> when calling <code>Option.map_or&lt;U, F&gt;(self, default: U, f: F) -&gt; U</code></p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1473195332, "post_id": 39357459, "comment_id": 66045286, "body": "Drive-by comment: The implementations of this that I&#39;ve seen use a tristate, Forced(T), InProgress, Closure(F)"}, {"owner": {"reputation": 28456, "user_id": 1094403, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/3770aa7eae5c211921493abd0d2c9f5a?s=128&d=identicon&r=PG", "display_name": "Luis Casillas", "link": "https://stackoverflow.com/users/1094403/luis-casillas"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473201033, "post_id": 39357459, "comment_id": 66047231, "body": "@bluss I had a look at somebody&#39;s code, and <a href=\"https://github.com/reem/rust-lazy/blob/master/src/single.rs#L48\" rel=\"nofollow noreferrer\">it looks like <code>InProgress</code> may be meant a mechanism for detecting cyclical dependencies between thunks</a>. If you know of other examples I&#39;d love to see them as well."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1473234225, "post_id": 39357459, "comment_id": 66056828, "body": "I don&#39;t agree. I think they use it so that they have something to use in the <code>replace</code> call, where they replace it with EvaluationInProgress."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1526430926, "last_edit_date": 1526430926, "creation_date": 1473195990, "answer_id": 39357845, "question_id": 39357459, "link": "https://stackoverflow.com/questions/39357459/borrow-checker-problems-while-trying-to-mutate-a-struct-in-a-match/39357845#39357845", "title": "Borrow checker problems while trying to mutate a struct in a match", "body": "<p>This is indeed a tricky problem, but it is possible. For stuff like this, it's often a good idea to search for helpful functions in the <a href=\"https://doc.rust-lang.org/std/mem/index.html\" rel=\"nofollow noreferrer\"><code>mem</code> module</a>.</p>\n\n<p>I've come up with a solution, but I think that there is still a lot of room for improvement.</p>\n\n<pre><code>pub fn get(&amp;mut self) -&gt; &amp;T {\n    let mut f = None;\n\n    if let ThunkState::Unforced(ref mut f_ref) = self.0 {\n        f = Some(std::mem::replace(f_ref, unsafe {\n            std::mem::uninitialized()\n        }));\n    }\n\n    if let Some(f) = f {\n        self.0 = ThunkState::Forced(f());\n    }\n\n    match self.0 {\n        ThunkState::Forced(ref t) =&gt; &amp;t,\n        _ =&gt; unreachable!(),\n    }\n}\n</code></pre>\n\n<p>This compiles fine, at least. The trick is to use <code>mem::replace</code> to get the important value out of <code>self</code> first. Additionally, you can avoid the <code>unsafe</code> by creating some kind of dummy value (like <code>Box::new(|| panic!())</code>).</p>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473225415, "post_id": 39358519, "comment_id": 66052518, "body": "If you are sure the <code>Forced</code> case can&#39;t occur, you can change the <code>panic!()</code> to <code>unreachable!()</code>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473238326, "post_id": 39358519, "comment_id": 66059286, "body": "This works fine since the thunk is using an <code>Fn()</code> (call-many through shared reference), like in the question."}], "tags": [], "owner": {"reputation": 28456, "user_id": 1094403, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/3770aa7eae5c211921493abd0d2c9f5a?s=128&d=identicon&r=PG", "display_name": "Luis Casillas", "link": "https://stackoverflow.com/users/1094403/luis-casillas"}, "is_accepted": false, "score": 0, "last_activity_date": 1526430975, "last_edit_date": 1526430975, "creation_date": 1473199433, "answer_id": 39358519, "question_id": 39357459, "link": "https://stackoverflow.com/questions/39357459/borrow-checker-problems-while-trying-to-mutate-a-struct-in-a-match/39358519#39358519", "title": "Borrow checker problems while trying to mutate a struct in a match", "body": "<p>I found something that semi-works:</p>\n\n<pre><code>pub struct Thunk&lt;T&gt;(ThunkState&lt;T&gt;);\n\nenum ThunkState&lt;T&gt; {\n    Forced(T),\n    Unforced(Box&lt;Fn() -&gt; T&gt;),\n}\n\nimpl&lt;T&gt; Thunk&lt;T&gt; {\n    pub fn new&lt;F&gt;(f: F) -&gt; Thunk&lt;T&gt;\n    where\n        F: Fn() -&gt; T + 'static,\n    {\n        Thunk(ThunkState::Unforced(Box::new(f)))\n    }\n\n    pub fn get(&amp;mut self) -&gt; &amp;T {\n        match self.0 {\n            ThunkState::Forced(ref t) =&gt; &amp;t,\n\n            // Don't actually bind a variable to the boxed closure here.\n            ThunkState::Unforced(_) =&gt; {\n                self.0 = ThunkState::Forced(self.0.compute());\n                self.get()\n            }\n        }\n    }\n}\n\nimpl&lt;T&gt; ThunkState&lt;T&gt; {\n    fn compute(&amp;self) -&gt; T {\n        match self {\n            &amp;ThunkState::Unforced(ref f) =&gt; f(),\n            // FIXME: get rid of this panic?\n            &amp;ThunkState::Forced(_) =&gt; panic!(\"case never used\"),\n        }\n    }\n}\n</code></pre>\n\n<p>It compiles, but after trying to use this type what I've learned is that I probably need <a href=\"https://ricardomartins.cc/2016/06/08/interior-mutability\" rel=\"nofollow noreferrer\">interior mutability</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 7899, "user_id": 9241, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c5910cb2d2f81eb43a13e14b2087bc63?s=128&d=identicon&r=PG", "display_name": "Sufian", "link": "https://stackoverflow.com/users/9241/sufian"}, "is_accepted": false, "score": 0, "last_activity_date": 1526431034, "last_edit_date": 1526431034, "creation_date": 1526413994, "answer_id": 50358217, "question_id": 39357459, "link": "https://stackoverflow.com/questions/39357459/borrow-checker-problems-while-trying-to-mutate-a-struct-in-a-match/50358217#50358217", "title": "Borrow checker problems while trying to mutate a struct in a match", "body": "<p>The problem is that you're trying to do <em>too much</em> (for the sake of avoiding <code>return</code>) within the lexical borrowing context of <code>match self.0 { ... }</code>.</p>\n\n<p>What you can do is:</p>\n\n<ol>\n<li>Move results of calculations performed on values you need to borrow from <code>self.0</code> into variables defined in an outer scope.</li>\n<li>Exit early on paths where those values aren't needed</li>\n<li>Consume the values <em>after</em> the match statement</li>\n</ol>\n\n<p>Applied to your example, a solution could be:</p>\n\n<pre><code>pub struct Thunk&lt;T&gt;(ThunkState&lt;T&gt;);\n\nenum ThunkState&lt;T&gt; {\n    Forced(T),\n    Unforced(Box&lt;Fn() -&gt; T&gt;),\n}\n\nimpl&lt;T&gt; Thunk&lt;T&gt; {\n    pub fn new&lt;F&gt;(f: F) -&gt; Thunk&lt;T&gt;\n    where\n        F: Fn() -&gt; T + 'static,\n    {\n        Thunk(ThunkState::Unforced(Box::new(f)))\n    }\n\n    pub fn get(&amp;mut self) -&gt; &amp;T {\n        let func_result: T;\n        match self.0 {\n            ThunkState::Forced(ref t) =&gt; {\n                return &amp;t;\n            }\n            ThunkState::Unforced(ref f) =&gt; {\n                func_result = f();\n            }\n        }\n        self.0 = ThunkState::Forced(func_result);\n        self.get()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 446, "user_id": 5615927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/37b54c3d5dc9158f984a1460b1b69602?s=128&d=identicon&r=PG&f=1", "display_name": "ayoon", "link": "https://stackoverflow.com/users/5615927/ayoon"}, "edited": false, "score": 0, "creation_date": 1552185377, "post_id": 50360940, "comment_id": 96913446, "body": "Awesome, this issue is one of my biggest pain points with the language, having to fight against the borrow checker with blocks like this which are clearly safe. For others interested, progress of the NLL feature is being tracked at <a href=\"https://github.com/rust-lang/rust/issues/43234\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/43234</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 446, "user_id": 5615927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/37b54c3d5dc9158f984a1460b1b69602?s=128&d=identicon&r=PG&f=1", "display_name": "ayoon", "link": "https://stackoverflow.com/users/5615927/ayoon"}, "edited": false, "score": 1, "creation_date": 1552232122, "post_id": 50360940, "comment_id": 96923299, "body": "@ayoon note that this code works in stable Rust 2018. There are some corners of NLL that aren&#39;t fully implemented, but most of the big points are."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1552232082, "last_edit_date": 1552232082, "creation_date": 1526431204, "answer_id": 50360940, "question_id": 39357459, "link": "https://stackoverflow.com/questions/39357459/borrow-checker-problems-while-trying-to-mutate-a-struct-in-a-match/50360940#50360940", "title": "Borrow checker problems while trying to mutate a struct in a match", "body": "<p>Your original code works as-is with <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a> enabled (available in the 2018 edition):</p>\n\n<pre><code>pub struct Thunk&lt;T&gt;(ThunkState&lt;T&gt;);\n\nenum ThunkState&lt;T&gt; {\n    Forced(T),\n    Unforced(Box&lt;Fn() -&gt; T&gt;),\n}\n\nimpl&lt;T&gt; Thunk&lt;T&gt; {\n    pub fn new&lt;F&gt;(f: F) -&gt; Thunk&lt;T&gt;\n    where\n        F: Fn() -&gt; T + 'static,\n    {\n        Thunk(ThunkState::Unforced(Box::new(f)))\n    }\n\n    pub fn get(&amp;mut self) -&gt; &amp;T {\n        match self.0 {\n            ThunkState::Forced(ref t) =&gt; t,\n            ThunkState::Unforced(ref f) =&gt; {\n                self.0 = ThunkState::Forced(f());\n                self.get()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This is now supported because the tracking of what is borrowed in which match arm is now more precise.</p>\n"}], "owner": {"reputation": 28456, "user_id": 1094403, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/3770aa7eae5c211921493abd0d2c9f5a?s=128&d=identicon&r=PG", "display_name": "Luis Casillas", "link": "https://stackoverflow.com/users/1094403/luis-casillas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 258, "favorite_count": 0, "answer_count": 4, "score": 3, "last_activity_date": 1552232082, "creation_date": 1473194269, "last_edit_date": 1526430879, "question_id": 39357459, "link": "https://stackoverflow.com/questions/39357459/borrow-checker-problems-while-trying-to-mutate-a-struct-in-a-match", "title": "Borrow checker problems while trying to mutate a struct in a match", "body": "<p>I'm trying to implement lazy \"thunks\" in Rust and I just can't figure out how to get my code to pass the borrow checker.  The basic idea is that a <code>Thunk&lt;T&gt;</code> can only be in one of two <code>ThunkState</code>s:</p>\n\n<ol>\n<li><code>Forced</code> which carries its value of type <code>T</code>;</li>\n<li><code>Unforced</code>, which carries a boxed closure that returns a <code>T</code>.</li>\n</ol>\n\n<p>My na\u00efve code goes like this:</p>\n\n<pre><code>pub struct Thunk&lt;T&gt;(ThunkState&lt;T&gt;);\n\nenum ThunkState&lt;T&gt; {\n    Forced(T),\n    Unforced(Box&lt;Fn() -&gt; T&gt;),\n}\n\nimpl&lt;T&gt; Thunk&lt;T&gt; {\n    pub fn new&lt;F&gt;(f: F) -&gt; Thunk&lt;T&gt;\n    where\n        F: Fn() -&gt; T + 'static,\n    {\n        Thunk(ThunkState::Unforced(Box::new(f)))\n    }\n\n    pub fn get(&amp;mut self) -&gt; &amp;T {\n        match self.0 {\n            ThunkState::Forced(ref t) =&gt; &amp;t,\n            ThunkState::Unforced(ref f) =&gt; {\n                // TROUBLE HERE\n                self.0 = ThunkState::Forced(f());\n                self.get()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I get the following two compilation errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `self.0` because it is borrowed\n  --&gt; src/main.rs:21:17\n   |\n19 |             ThunkState::Unforced(ref f) =&gt; {\n   |                                  ----- borrow of `self.0` occurs here\n20 |                 // TROUBLE HERE\n21 |                 self.0 = ThunkState::Forced(f());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.0` occurs here\n\nerror[E0502]: cannot borrow `*self` as mutable because `self.0.0` is also borrowed as immutable\n  --&gt; src/main.rs:22:17\n   |\n19 |             ThunkState::Unforced(ref f) =&gt; {\n   |                                  ----- immutable borrow occurs here\n...\n22 |                 self.get()\n   |                 ^^^^ mutable borrow occurs here\n23 |             }\n24 |         }\n   |         - immutable borrow ends here\n</code></pre>\n\n<p>I've gone through various iterations of trying out stuff (e.g., <code>match *self.0</code>, using <code>&amp;mut</code> in the <code>ThunkState</code> patterns, and a few variations), but try as I may, I can't figure out how to fix it. </p>\n\n<ol>\n<li>Am I attempting to do something that doesn't make sense?</li>\n<li>If not, what makes this example so tricky, and how do I get it right?</li>\n</ol>\n\n<p>Staring at it a bit more, I've formulated the following hypothesis: the assignment to <code>self.0</code> would invalidate the <code>f</code> reference in that match branch.  Is this right?  And if so, then how do I achieve what I'm trying to do\u2014discard the closure after I use it?</p>\n"}, {"tags": ["rust", "traits", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473194558, "post_id": 39357206, "comment_id": 66044918, "body": "Using the trait (e.g. <code>let f: &amp;Foo = &amp;|x| {}; f.foo(&amp;3);</code>) becomes impossible with this solution. <a href=\"https://play.rust-lang.org/?gist=563c415937fa42d5311c7a08cdaae54f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473194926, "post_id": 39357206, "comment_id": 66045082, "body": "Well, it&#39;s above my power level - just thought you might not have checked this option out."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1473193246, "creation_date": 1473193246, "answer_id": 39357206, "question_id": 39356633, "link": "https://stackoverflow.com/questions/39356633/implementing-a-trait-for-closures-results-in-bound-concrete-lifetime-mismatch/39357206#39357206", "title": "Implementing a trait for closures results in bound/concrete lifetime mismatch", "body": "<p>Disclaimer: I have no idea what I'm doing.</p>\n\n<p>The following works:</p>\n\n<pre><code>trait Foo&lt;'a&gt; {\n    fn foo(&amp;self, x: &amp;'a u32);\n}\n\nimpl&lt;'a, F&gt; Foo&lt;'a&gt; for F where F: Fn(&amp;'a u32) {\n    fn foo(&amp;self, x: &amp;'a u32) {\n        self(x)\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1473199673, "post_id": 39358374, "comment_id": 66046962, "body": "Hmm, so why can the compiler not infer that?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1473204688, "post_id": 39358374, "comment_id": 66048121, "body": "@ChrisEmerson I&#39;m interested in this, too! Your and Shepmaster&#39;s answer already helped me! Adding the explicit type isn&#39;t too bad in my case and it works now. It&#39;s really difficult to decide which answer to accept :&lt;  ... Maybe the one that can explain why the type inference fails ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1473198634, "creation_date": 1473198634, "answer_id": 39358374, "question_id": 39356633, "link": "https://stackoverflow.com/questions/39356633/implementing-a-trait-for-closures-results-in-bound-concrete-lifetime-mismatch/39358374#39358374", "title": "Implementing a trait for closures results in bound/concrete lifetime mismatch", "body": "<p>Check out this part of the error:</p>\n\n<blockquote>\n  <p>[...] implements the trait <code>std::ops::Fn&lt;(_,)&gt;</code>, but the trait <code>for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r u32,)&gt;</code> is required</p>\n</blockquote>\n\n<p>I think that basically there's not enough code to allow types to be properly inferred. Adding an explicit type annotation allows the example to be compiled:</p>\n\n<pre><code>let _: &amp;Foo          = &amp;|x: &amp;u32| {};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 3, "last_activity_date": 1473199337, "creation_date": 1473199337, "answer_id": 39358501, "question_id": 39356633, "link": "https://stackoverflow.com/questions/39356633/implementing-a-trait-for-closures-results-in-bound-concrete-lifetime-mismatch/39358501#39358501", "title": "Implementing a trait for closures results in bound/concrete lifetime mismatch", "body": "<p>Here's a partial answer, starting with an interesting experiment:</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self, x: &amp;u32);\n}\n\nimpl&lt;F&gt; Foo for F\n    where F: Fn(&amp;u32)\n{\n    fn foo(&amp;self, x: &amp;u32) {\n        self(x)\n    }\n}\n\nfn main() {\n    let f1: &amp;Fn(&amp;u32) = &amp;|_x| {}; \n    let f2: &amp;Foo = &amp;f1;\n    // but this fails:\n    // let f3: &amp;Foo = &amp;|_x| {};\n    f2.foo(&amp;3);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d26c09b64a220c00b95a131309209227&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>All I've done is change the <code>FnOnce</code> to <code>Fn</code> for consistency with the trait, and assign your first closure to a binding of type <code>&amp;Foo</code> - and this one work.</p>\n\n<p>This tells me that the trait itself is fine - it's a problem inferring the type of the closure when making the trait object.  Going back to the error, we're told that the closure implements <code>std::ops::Fn&lt;(_,)&gt;</code>, but <code>for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r u32,)&gt;</code> is required.  This means that the first thing you tried (adding the <code>for&lt;'r&gt;...</code> to the trait) didn't have any effect because the trait <em>already</em> requires this.</p>\n\n<p>At this point I'm stuck - I don't think I understand the inference rules for closures in enough detail to see either why there's a difference, or how to make it work.  I'm hoping someone will come and fill that in! </p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1037, "favorite_count": 0, "accepted_answer_id": 39358374, "answer_count": 3, "score": 9, "last_activity_date": 1516784862, "creation_date": 1473190880, "last_edit_date": 1516784862, "question_id": 39356633, "link": "https://stackoverflow.com/questions/39356633/implementing-a-trait-for-closures-results-in-bound-concrete-lifetime-mismatch", "title": "Implementing a trait for closures results in bound/concrete lifetime mismatch", "body": "<p>I want to implement a trait for closures of a specific type. Here is a minimal example (<a href=\"https://play.rust-lang.org/?gist=270da6a672e2217812d10b7217ad1f62&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self, x: &amp;u32);\n}\n\nimpl&lt;F&gt; Foo for F\n    where F: Fn(&amp;u32)\n{\n    fn foo(&amp;self, x: &amp;u32) {\n        self(x)\n    }\n}\n\nfn main() {\n    let _: &amp;FnOnce(&amp;u32) = &amp;|x| {};   // works\n    let _: &amp;Foo          = &amp;|x| {};   // doesn't work\n}\n</code></pre>\n\n<p>It results in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type mismatch resolving `for&lt;'r&gt; &lt;[closure@&lt;anon&gt;:16:29: 16:35] as std::ops::FnOnce&lt;(&amp;'r u32,)&gt;&gt;::Output == ()`:\n expected bound lifetime parameter ,\n    found concrete lifetime [--explain E0271]\n  --&gt; &lt;anon&gt;:16:28\n   |&gt;\n16 |&gt;     let _: &amp;Foo          = &amp;|x| {};\n   |&gt;                            ^^^^^^^\nnote: required because of the requirements on the impl of `Foo` for `[closure@&lt;anon&gt;:16:29: 16:35]`\nnote: required for the cast to the object type `Foo`\n\nerror: type mismatch: the type `[closure@&lt;anon&gt;:16:29: 16:35]` implements the trait `std::ops::Fn&lt;(_,)&gt;`, but the trait `for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r u32,)&gt;` is required (expected concrete lifetime, found bound lifetime parameter ) [--explain E0281]\n  --&gt; &lt;anon&gt;:16:28\n   |&gt;\n16 |&gt;     let _: &amp;Foo          = &amp;|x| {};\n   |&gt;                            ^^^^^^^\nnote: required because of the requirements on the impl of `Foo` for `[closure@&lt;anon&gt;:16:29: 16:35]`\nnote: required for the cast to the object type `Foo`\n</code></pre>\n\n<p>I already tried to explicitly add the HRTB to the <code>where</code> clause like this:</p>\n\n<pre><code>where F: for&lt;'a&gt; Fn(&amp;'a u32)\n</code></pre>\n\n<p>But it didn't help. I also declared the lifetime on the <code>impl</code> block instead, like this:</p>\n\n<pre><code>impl&lt;'a, F&gt; Foo for F\n    where F: Fn(&amp;'a u32) { ... }\n</code></pre>\n\n<p>But this results in a lifetime error within the <code>impl</code> block. I <em>think</em> that those errors are right and the lifetime parameter can't be declared on the <code>impl</code> block.</p>\n\n<p>How can I fix this example?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1473189355, "post_id": 39355984, "comment_id": 66042523, "body": "<code>Type&lt;&#39;a&gt;</code>might very well contain something that depends on <code>&#39;a</code>. Eg. on <code>slice::Iter&lt;&#39;a, T&gt;</code>, <code>&#39;a</code> is the lifetime of the corresponding slice. <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html#method.as_slice\" rel=\"nofollow noreferrer\"><code>as_slice(&amp;self) -&gt; &amp;&#39;a [T]</code></a> can then retrieve it."}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 18, "last_activity_date": 1473243059, "last_edit_date": 1473243059, "creation_date": 1473193629, "answer_id": 39357319, "question_id": 39355984, "link": "https://stackoverflow.com/questions/39355984/what-does-the-first-explicit-lifetime-specifier-on-an-impl-mean/39357319#39357319", "title": "What does the first explicit lifetime specifier on an impl mean?", "body": "<p><code>'a</code> is a <strong><em>lifetime parameter</em></strong> in both cases. That's a kind of generic parameter, so each use of <code>Type</code> or each use of <code>get_text</code> can pick a different \"value\" for that generic parameter. Actual lifetimes are never picked explicitly by the programmer, except when you use <code>'static</code>.</p>\n\n<p>The compiler will infer what <code>'a</code> should be for each value of <code>Type</code> or each use of <code>get_text</code>.</p>\n\n<p><code>impl&lt;'a&gt;</code> introduces a new lifetime parameter for the whole impl block. It is then used in the type: <code>impl&lt;'a&gt; Type&lt;'a&gt; { .. }</code></p>\n\n<p>Exactly what <code>'a</code> means depends on how it is used in the definition of <code>Type</code>. From your example, I guess that <code>Type</code> is this:</p>\n\n<pre><code>struct Type&lt;'a&gt; {\n    x: &amp;'a u32,\n}\n</code></pre>\n\n<p>This definition reads: For every lifetime <code>'a</code>, define Type to contain a reference <code>x: &amp;'a u32</code>. So <code>Type</code> is generic and can store a reference with any lifetime.</p>\n\n<p><code>impl&lt;'a&gt; Type&lt;'a&gt; { .. }</code> reads: For every lifetime <code>'a</code>, define methods for the type <code>Type&lt;'a&gt;</code>.</p>\n\n<p>Since we now know the struct definition of <code>Type</code>, we know that the <code>'a</code> parameter inside the impl block is always equal to the lifetime of the reference in <code>Type</code>'s x field.</p>\n\n<blockquote>\n  <p>The one on the return type -> &amp;'a u32 tells that the\n  variable which is receiving the return value should not die\n  before...before what? Before the object of type Type dies?</p>\n</blockquote>\n\n<p><code>'a</code> is the lifetime of the reference stored inside a value of <code>Type&lt;'a&gt;</code>, and it has no other relation to the Type value itself. The only rule is that <code>'a</code> must outlive the Type value itself, because it is not allowed to store a reference past its end of life. So in fact, we can hold on to that <code>&amp;'a u32</code> until at least the point when the <code>Type</code> value dies, and maybe longer.</p>\n\n<hr>\n\n<pre><code>impl TextEditor {\n    //Other methods omitted ...\n\n    pub fn get_text&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a String {\n        return &amp;self.text;\n    }\n}\n</code></pre>\n\n<p>This is really common. <code>&amp;self</code> is a reference to the self value \u2014 a borrow \u2014 and the method <code>get_text</code> is again a generic item. It has one generic parameter \u2014 a lifetime parameter.</p>\n\n<p>It reads, for any lifetime <code>'a</code>, borrow self as the reference <code>&amp;'a self</code> (reference of that lifetime) and return a reference to String with the same lifetime.</p>\n\n<p>The use of the same parameter on both the input <code>&amp;self</code> and the output <code>&amp;String</code> means that they are connected and Rust will treat self as borrowed as long as the returned reference to String is alive.</p>\n\n<p>Again, the method <code>get_text</code> is generic, and the compiler will pick a \"value\" for <code>'a</code> for each use of the method. It's a method that can return variously long borrows of a String, depending on how long you allow it to borrow <code>self</code>. Sometimes it picks a long lifetime so that you can hold onto the returned <code>&amp;String</code> for a long time. Some uses of <code>get_text</code> will use a shorter lifetime, if you don't use the returned value at all.</p>\n\n<p>In this case, since we see that <code>&amp;'a String</code> is tied directly to a borrow <code>&amp;'a self</code> of a <code>TextEditor</code> value, we know that we can only keep the String reference around at most as long as we can hold a borrow of the <code>TextEditor</code> value.</p>\n"}, {"comments": [{"owner": {"reputation": 598, "user_id": 1826241, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2aaac949383a1f98d77696b8e80b9fe4?s=128&d=identicon&r=PG", "display_name": "dlukes", "link": "https://stackoverflow.com/users/1826241/dlukes"}, "edited": false, "score": 5, "creation_date": 1502960583, "post_id": 39357501, "comment_id": 78419099, "body": "thanks, this was incredibly helpful! I find I understand most of Rust&#39;s concepts in isolation but often struggle when they&#39;re put together in practice. translating terse syntax into explanatory prose is a great way to understand what&#39;s going on. I wish read-along code examples were more of a thing :)"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 16, "last_activity_date": 1503010996, "last_edit_date": 1503010996, "creation_date": 1473194455, "answer_id": 39357501, "question_id": 39355984, "link": "https://stackoverflow.com/questions/39355984/what-does-the-first-explicit-lifetime-specifier-on-an-impl-mean/39357501#39357501", "title": "What does the first explicit lifetime specifier on an impl mean?", "body": "<p>Paraphrasing the Rust code:</p>\n\n<pre><code>impl&lt;'a&gt;\n</code></pre>\n\n<p>\"If you give me a lifetime...\"  (the compiler normally supplies this based on context when using the type)</p>\n\n<pre><code>         Type&lt;'a&gt; {\n</code></pre>\n\n<p>\"...I'll describe how to implement <code>Type&lt;'a&gt;</code>\".  So <code>Type</code> probably contains references (which need a lifetime).</p>\n\n<pre><code>    fn my_function(&amp;self) -&gt; &amp;'a u32 {\n</code></pre>\n\n<p>\"...and given a reference to <code>Type&lt;'a&gt;</code>, you call <code>my_function()</code> to get a reference to a <code>u32</code> with lifetime <code>'a</code>.\"  Note that the lifetime of the <code>&amp;self</code> reference is not directly tied to <code>'a</code>; it can be shorter (but usually not longer than <code>'a</code>, since a type can't outlive contained references).</p>\n\n<p>In the second case:</p>\n\n<pre><code>impl TextEditor {\n</code></pre>\n\n<p>\"Here's how to implement a non-lifetime parametric type <code>TextEditor</code>...\"</p>\n\n<pre><code>pub fn get_text&lt;'a&gt;\n</code></pre>\n\n<p>\"Given a lifetime <code>'a</code> which you can choose (it's an input parameter)...\"  </p>\n\n<pre><code>                   (&amp;'a self)\n</code></pre>\n\n<p>\"...and a reference to a <code>TextEditor</code> which lives for at least <code>'a</code>..\"</p>\n\n<pre><code>                             -&gt; &amp;'a String {\n</code></pre>\n\n<p>\"...you can call the <code>get_text</code> method and receive a borrowed reference to a <code>String</code> which lives for the same time.\"</p>\n\n<p>In more practical terms, this really means that the <code>String</code> is reborrowed directly from the <code>TextEditor</code> - as long as that <code>String</code> reference is alive, the <code>&amp;self</code> borrow is considered to still be active and you won't be able to take any <code>&amp;mut</code> references.</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2645, "favorite_count": 6, "accepted_answer_id": 39357319, "answer_count": 2, "score": 17, "last_activity_date": 1503026578, "creation_date": 1473188057, "last_edit_date": 1503026578, "question_id": 39355984, "link": "https://stackoverflow.com/questions/39355984/what-does-the-first-explicit-lifetime-specifier-on-an-impl-mean", "title": "What does the first explicit lifetime specifier on an impl mean?", "body": "<p>There are three different lifetime specifiers on an impl:</p>\n\n<pre><code>impl&lt;'a&gt; Type&lt;'a&gt; {\n    fn my_function(&amp;self) -&gt; &amp;'a u32 {\n        self.x\n    }\n}\n</code></pre>\n\n<p><code>Type&lt;'a&gt;</code> states that <em>there is</em> a lifetime in this impl declaration. The one on the return type <code>-&gt; &amp;'a u32</code> states that the variable that receives the return value should not die before...before what? Before the object of type <code>Type</code> dies?</p>\n\n<p>What's the difference to this:</p>\n\n<pre><code>impl TextEditor {\n    //Other methods omitted ...\n\n    pub fn get_text&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a String {\n        return &amp;self.text;\n    }\n}\n</code></pre>\n\n<p>Here it says for the return type to not die before the lifetime of <code>&amp;'a self</code> ends.</p>\n\n<p>Does the last one declare only a lifetime to this one method and the other one declares a lifetime to every method (and associate function?) in the impl declaration?</p>\n"}, {"tags": ["parsing", "rust", "brainfuck"], "comments": [{"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "reply_to_user": {"reputation": 8164, "user_id": 5593959, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/9StDn.jpg?s=128&g=1", "display_name": "Dima Rostopira", "link": "https://stackoverflow.com/users/5593959/dima-rostopira"}, "edited": false, "score": 0, "creation_date": 1473183017, "post_id": 39353691, "comment_id": 66039324, "body": "@ljedrz Fixed that. I must have accidentally deleted the opening brace fixing the indentation before posting."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473183260, "post_id": 39353691, "comment_id": 66039466, "body": "Why do you need 3 variables for tokens? This seems unnecessarily complicated; take <code>tokens</code> - it&#39;s just a mutable reference to <code>alltokens</code>. Why not just use <code>&amp;mut alltokens</code> when it&#39;s needed?"}, {"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473183832, "post_id": 39353691, "comment_id": 66039798, "body": "@ljedrz I&#39;d be happy to hear of a simpler way. <code>alltokens</code> is the main vector of tokens. The parser adds tokens to that vector, but once it gets to a loop, it adds a <code>Loop</code> token that contains a vector of tokens, which is based on the contents of that loop. So I used <code>tokens</code> to point to the vector of the current level of the tree, and <code>tokvecs</code> to store the levels above so it can go up the tree when it reaches the end of a loop (the <code>]</code> command)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473186220, "post_id": 39353691, "comment_id": 66040928, "body": "<b>What problem do you want solved?</b> Right now, the code has the error ``expected type <code>&amp;mut Token</code>, found type `Token```. Are you asking what that means? I&#39;m sure there&#39;s a question dealing with that. <a href=\"https://stackoverflow.com/posts/39353691/edit\">edit</a> your question to actually <i>ask</i> a question. Be sure not to ask an overly broad question."}, {"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473186362, "post_id": 39353691, "comment_id": 66040997, "body": "@Shepmaster That specific error is not really the issue; I&#39;m fairly sure by now that an <code>if let</code> statement is not the right way to implement it; it&#39;s one of several things I&#39;ve tried. I&#39;ll try to update the question to be more specific."}, {"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 0, "creation_date": 1473187146, "post_id": 39353691, "comment_id": 66041404, "body": "Ok, I&#39;ve tried to improve the question. Hopefully that is better. It is somewhat difficult to be specific, since I think I&#39;m doing this the wrong way. If it was just a matter of getting the <code>if let</code> to typecheck, I would have included only a few lines of code and addressed the error more specifically."}], "answers": [{"comments": [{"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 0, "creation_date": 1473188198, "post_id": 39355867, "comment_id": 66041993, "body": "<code>tokens</code> isn&#39;t superfluous, because its value changes (it refers to the current branch in the tree, which initially is <code>alltokens</code> but inside the <code>if let</code> is changed to the new branch). This also doesn&#39;t fix the problem, but that is probably my fault for not being clear enough. I now get &quot;<code>newtokens</code> does not live long enough&quot; on the line <code>tokens = &amp;mut newtokens;</code>. So I need a reference that I can set a variable to and use throughout the function. I&#39;m guessing this isn&#39;t possible, but I don&#39;t know what the alternative would be."}, {"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 0, "creation_date": 1473196469, "post_id": 39355867, "comment_id": 66045781, "body": "I don&#39;t think getting rid of those variables really works. The problem is that after the <code>[</code> command, the following commands should not be added to the original <code>Vec</code>, but to the new <code>Vec</code> contained in the <code>Loop</code>. The &quot;Syntactic Analysis&quot; section of <a href=\"http://blog.justinpoliey.com/transpiling-languages-an-intro-with-brainfuck.html\" rel=\"nofollow noreferrer\">this article</a> contains a python implementation of something similar to my function, which does use essentially the same 3 variable. In comparing the code in that article to mine, <code>ast=alltokens</code>, <code>stack=tokvecs</code>, and <code>node=tokens</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 0, "creation_date": 1473197806, "post_id": 39355867, "comment_id": 66046293, "body": "You can add tokens after the bracket exactly to the vector inside Loop - try pushing any Token to bracket_tokens and print the results of parsing some brainf*ck."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1473191434, "last_edit_date": 1492087233, "creation_date": 1473187502, "answer_id": 39355867, "question_id": 39353691, "link": "https://stackoverflow.com/questions/39353691/parsing-brainfck-code-to-tree-in-rust/39355867#39355867", "title": "Parsing brainf*ck code to tree in Rust", "body": "<p>Ok, last time I was pretty close; it looks like I missed the <code>ref</code> keyword:</p>\n\n<p><code>if let &amp;mut Loop(ref mut newtokens) = (&amp;mut tokens).last_mut().unwrap()</code></p>\n\n<p>I missed it since there were other borrow checker errors everywhere. I decided to simplify your code to tackle them:</p>\n\n<pre><code>pub fn parse(code: &amp;str) -&gt; Vec&lt;Token&gt; {\n    let mut tokens = Vec::new();\n    for i in code.chars() {\n        match i {\n            '+' =&gt; tokens.push(Add(0, 1)),\n            '-' =&gt; tokens.push(Add(0, -1)),\n            '&gt;' =&gt; tokens.push(Move(1)),\n            '&lt;' =&gt; tokens.push(Move(-1)),\n            '[' =&gt; {\n                tokens.push(Loop(Vec::new()));\n                if let &amp;mut Loop(ref mut newtokens) = (&amp;mut tokens).last_mut().unwrap() {\n                    let bracket_tokens: &amp;mut Vec&lt;Token&gt; = newtokens;\n                }\n            },\n            ']' =&gt; {\n                ()\n            },\n            ',' =&gt; tokens.push(Input),\n            '.' =&gt; {\n                tokens.push(LoadOut(0, 0));\n                tokens.push(Output);\n            }\n            _ =&gt; unreachable!(),\n        };\n    }\n\n    tokens\n}\n</code></pre>\n\n<p>I merged all of the token variables (you don't really need them) and changed <code>tokens = &amp;mut newtokens;</code> to <code>let bracket_tokens: &amp;mut Vec&lt;Token&gt; = newtokens;</code> (I think this was more or less your intention). This allows you to manipulate the <code>Vec</code>tor inside the <code>Loop</code>.</p>\n\n<p>However, this code still has issues and won't parse brainf*ck's loops; I wanted to make it work, but it required a significant change of approach. You are welcome to try to expand this variant further but it might be a painful experience, especially if you are not too familiar with the borrow checker's rules yet.</p>\n\n<p>I suggest looking at brainf*ck interpreters implementations (e.g. <a href=\"https://codereview.stackexchange.com/questions/92843/rust-brainfuck-interpreter\">this one</a>) by other people (though not too old, as Rust's syntax has changed before 1.0 went live) to get an idea how this can be done.</p>\n"}, {"tags": [], "owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "is_accepted": true, "score": 0, "last_activity_date": 1473199581, "creation_date": 1473199581, "answer_id": 39358549, "question_id": 39353691, "link": "https://stackoverflow.com/questions/39353691/parsing-brainfck-code-to-tree-in-rust/39358549#39358549", "title": "Parsing brainf*ck code to tree in Rust", "body": "<p>I've gotten the code to work by making it a recursive function:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Eq)]\npub enum Token {\n    Output,\n    Input,\n    Loop(Vec&lt;Token&gt;),\n    Move(i32),\n    Add(i32, i32),\n    LoadOut(i32, i32),\n}\nuse Token::*;\n\npub fn parse(code: &amp;str) -&gt; Vec&lt;Token&gt; {\n    _parse(&amp;mut code.chars())\n}\n\nfn _parse(chars: &amp;mut std::str::Chars) -&gt; Vec&lt;Token&gt; {\n    let mut tokens = Vec::new();\n    while let Some(i) = chars.next() {\n        match i {\n            '+' =&gt; tokens.push(Add(0, 1)),\n            '-' =&gt; tokens.push(Add(0, -1)),\n            '&gt;' =&gt; tokens.push(Move(1)),\n            '&lt;' =&gt; tokens.push(Move(-1)),\n            '[' =&gt; tokens.push(Loop(_parse(chars))),\n            ']' =&gt; { break; }\n            ',' =&gt; tokens.push(Input),\n            '.' =&gt; {\n                tokens.push(LoadOut(0, 0));\n                tokens.push(Output);\n            }\n            _ =&gt; (),\n        };\n    }\n\n    tokens\n}\n</code></pre>\n\n<p>It seems to work, and is reasonably simple and elegant (I'd still be interested to see a solution that doesn't use recursion).</p>\n"}], "owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 39358549, "answer_count": 2, "score": 0, "last_activity_date": 1473199581, "creation_date": 1473179046, "last_edit_date": 1473188894, "question_id": 39353691, "link": "https://stackoverflow.com/questions/39353691/parsing-brainfck-code-to-tree-in-rust", "title": "Parsing brainf*ck code to tree in Rust", "body": "<p>I am trying to write an optimizing brainfuck compiler in Rust. Currently it stores tokens in a flat vector, which works, but I am having trouble changing it to use a syntax tree:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Eq)]\npub enum Token {\n    Output,\n    Input,\n    Loop(Vec&lt;Token&gt;),\n    Move(i32),\n    Add(i32, i32),\n    LoadOut(i32, i32),\n}\nuse Token::*;\n\npub fn parse(code: &amp;str) -&gt; Vec&lt;Token&gt; {\n    let mut alltokens = Vec::new();\n    let mut tokens = &amp;mut alltokens;\n    let mut tokvecs: Vec&lt;&amp;mut Vec&lt;Token&gt;&gt; = Vec::new();\n    for i in code.chars() {\n        match i {\n            '+' =&gt; tokens.push(Add(0, 1)),\n            '-' =&gt; tokens.push(Add(0, -1)),\n            '&gt;' =&gt; tokens.push(Move(1)),\n            '&lt;' =&gt; tokens.push(Move(-1)),\n            '[' =&gt; {\n                tokens.push(Loop(Vec::new()));\n                tokvecs.push(&amp;mut tokens);\n                if let &amp;mut Loop(mut newtokens) = tokens.last_mut().unwrap() {\n                    tokens = &amp;mut newtokens;\n                }\n            },\n            ']' =&gt; {\n                tokens = tokvecs.pop().unwrap();\n            },\n            ',' =&gt; tokens.push(Input),\n            '.' =&gt; {\n                tokens.push(LoadOut(0, 0));\n                tokens.push(Output);\n            }\n            _ =&gt; (),\n        };\n    }\n\n    alltokens\n}\n</code></pre>\n\n<p>What I am having trouble figuring out is how to handle the <code>[</code> command. The current implementation in the code is one of several I have tried, all of which have failed. I think it may require use of Rust's <code>Box</code>, but I can't quite understand how that is used.</p>\n\n<p>The branch handling the <code>[</code> command is probably completely wrong, but I'm not sure how it should be done. It pushes a <code>Loop</code> (a variant of the <code>Token</code> enum) containing a vector to the <code>tokens</code> vector. The problem is to then get a mutable borrow of the vector in that <code>Loop</code>, which the <code>if let</code> statement is supposed to do.</p>\n\n<p>The code fails to compile since <code>newtokens</code> does not outlive the end of the <code>if let</code> block. Is it possible to get a mutable reference to the vector inside <code>Loop</code>, and set <code>tokens</code> to it? If not, what could be done instead?</p>\n"}, {"tags": ["module", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 3, "last_activity_date": 1473173972, "creation_date": 1473173972, "answer_id": 39352171, "question_id": 39352014, "link": "https://stackoverflow.com/questions/39352014/how-to-reference-a-member-of-a-module-in-its-parent-scope-from-a-module/39352171#39352171", "title": "How to reference a member of a module in its parent scope, from a module?", "body": "<p>When in a module, <code>self</code> needs to be used, eg:</p>\n\n<pre><code>pub mod types {\n    pub struct Foo {\n        _var: usize,\n    }\n}\nuse self::types::Foo;  // &lt;-- self here\n</code></pre>\n\n<hr>\n\n<p><em>Thanks to @nox on IRC for this answer.</em></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1473173972, "creation_date": 1473173491, "question_id": 39352014, "link": "https://stackoverflow.com/questions/39352014/how-to-reference-a-member-of-a-module-in-its-parent-scope-from-a-module", "title": "How to reference a member of a module in its parent scope, from a module?", "body": "<p>This simple example works in <code>main.rs</code></p>\n\n<pre><code>pub mod types {\n    pub struct Foo {\n        _var: usize,\n    }\n}\nuse types::Foo;\n\nfn main() {\n    let _unused: Foo;\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>However, when its compiled in a file which is its self a module, this gives an error:</p>\n\n<p><code>error: unresolved import `types::Foo`. Maybe a missing `extern crate types`?</code></p>\n\n<p>Is it possible to make a reference to a submodule's public member, from a module?</p>\n"}, {"tags": ["io", "rust", "stdin"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 4, "creation_date": 1473172372, "post_id": 39351453, "comment_id": 66032971, "body": "You won&#39;t be able to get the &quot;Press any key to continue&quot; behavior with <code>stdin</code> alone. For example, when using a terminal you won&#39;t be able to read anything that the user typed before the user presses &#39;enter&#39;."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473173923, "post_id": 39351453, "comment_id": 66034066, "body": "The Enter limitation is fine for my needs. But out of curiosity, what else would be necessary to achieve that?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1473174514, "post_id": 39351453, "comment_id": 66034449, "body": "Reading from <code>stdin</code> in Rust also reads the <code>\\n</code> character produced by pressing enter. So you can always read <i>something</i>. You should edit this into your question -- then someone can answer. About the question in the comment: platform specific features, basically."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1473175022, "post_id": 39351453, "comment_id": 66034775, "body": "What would be necessary is a proper keyboard API. Nothing in the standard library, but there are a various third party libraries. <a href=\"https://crates.io/crates/glutin\" rel=\"nofollow noreferrer\">glutin</a>, for example. And of course, you can always go platform-specific, with things like the winapi crate, or whatever the equivalent is for your platform."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473175263, "post_id": 39351453, "comment_id": 66034935, "body": "@LukasKalbertodt: e.g. calling <code>libc</code>&#39;s <code>getchar()</code>, right? I&#39;m after something simpler, though; I edited the question."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1473175557, "post_id": 39351453, "comment_id": 66035151, "body": "No, <code>getchar</code> also uses standard input."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473175884, "post_id": 39351453, "comment_id": 66035358, "body": "This is much harder than I expected; I thought I was missing something silly."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473247988, "post_id": 39351453, "comment_id": 66065443, "body": "I put in an impl since you said it was hard. Maybe you&#39;re referring to setting the terminal into unbuffered mode so that you can capture less than a line at a time. There&#39;s some crates for that."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473248185, "post_id": 39351453, "comment_id": 66065571, "body": "Yes, I meant being able to just read 1 character (though it&#39;s nice that you provided an <code>impl</code> for the whole picture). I expect that there are crates for advanced stdin functionalities - I just hoped this could have been in an easier way."}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 1, "last_activity_date": 1473247829, "creation_date": 1473247829, "answer_id": 39368743, "question_id": 39351453, "link": "https://stackoverflow.com/questions/39351453/is-there-a-standard-way-of-discarding-input-in-rust/39368743#39368743", "title": "Is there a standard way of discarding input in Rust?", "body": "<p>You can implement <code>.discard_until_newline()</code> on stdin for example like this:</p>\n\n<p>This should be a correct and efficient implementation (using a buffer to read, but not copying the read parts anywhere). It could be much simpler if you don't anticipate any long lines and just read a byte at a time, of course.</p>\n\n<pre><code>use std::io::Stdin;\nuse std::io;\nuse std::io::prelude::*;\n\npub trait DiscardUntil {\n    fn discard_until_newline(&amp;mut self) -&gt; Result&lt;(), io::Error&gt;;\n}\n\nimpl DiscardUntil for Stdin {\n    fn discard_until_newline(&amp;mut self) -&gt; Result&lt;(), io::Error&gt; {\n        let mut buffered = self.lock();\n        loop {\n            let (consume, done) = {\n                let data = try!(buffered.fill_buf());\n                if data.is_empty() {\n                    (0, true)\n                } else if let Some(newline_pos) = data.iter().position(|b| *b == b'\\n') {\n                    (newline_pos + 1, true)\n                } else {\n                    (data.len(), false)\n                }\n            };\n            buffered.consume(consume);\n            if done {\n                break;\n            }\n        }\n        Ok(())\n    }\n}\n\nfn main() {\n    println!(\"hi\");\n    io::stdin().discard_until_newline().unwrap();\n    println!(\"again\");\n    io::stdin().discard_until_newline().unwrap();\n    println!(\"goodbye\");\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473273101, "post_id": 39370121, "comment_id": 66081695, "body": "Can you please elaborate? Where do I risk it? And what could happen if I do?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1473273186, "post_id": 39370121, "comment_id": 66081731, "body": "When you consume all of the buffer, without checking if there is more than one line being read into it. Fill buf will attempt to fill the whole buffer (typically 8K). What happens if you do is that you are not true to the name of the method."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473312656, "post_id": 39370121, "comment_id": 66093616, "body": "Is there a way to trigger it? I was unable to when I tested it."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473336367, "post_id": 39370121, "comment_id": 66106929, "body": "Unable to trigger it does not mean that it does not exist. I prefer to write programs that are correct by construction, not &quot;appear to be correct&quot;. Another case is when you consume <i>less than a line</i>. So one way would be to insert 8KB of data without a newline. To trigger the multiple lines case, I&#39;d try for example pasting multiline text into the terminal."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1473336820, "post_id": 39370121, "comment_id": 66107242, "body": "Thanks, I included this information in this answer."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1473336691, "last_edit_date": 1473336691, "creation_date": 1473251707, "answer_id": 39370121, "question_id": 39351453, "link": "https://stackoverflow.com/questions/39351453/is-there-a-standard-way-of-discarding-input-in-rust/39370121#39370121", "title": "Is there a standard way of discarding input in Rust?", "body": "<p>I experimented with bluss's code and was able to come up with an implementation that has a little bit worse performance and is not well-suited to some corner cases (see comments below), but is simpler and shorter:</p>\n\n<pre><code>use std::io;\nuse std::io::{Stdin, BufRead};\n\npub trait DiscardUntil {\n    fn discard_until_newline(&amp;mut self) -&gt; Result&lt;(), io::Error&gt;;\n}\n\nimpl DiscardUntil for Stdin {\n    fn discard_until_newline(&amp;mut self) -&gt; Result&lt;(), io::Error&gt; {\n        let mut buffered = self.lock();\n        let amount = {\n            let data = try!(buffered.fill_buf());\n            data.len()\n        };\n        buffered.consume(amount);\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>I welcome attempts to devise a simpler solution.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 624, "favorite_count": 0, "accepted_answer_id": 39368743, "answer_count": 2, "score": 4, "last_activity_date": 1473336691, "creation_date": 1473171852, "last_edit_date": 1473175105, "question_id": 39351453, "link": "https://stackoverflow.com/questions/39351453/is-there-a-standard-way-of-discarding-input-in-rust", "title": "Is there a standard way of discarding input in Rust?", "body": "<p>Reading input from <code>stdin</code> in Rust is pretty straightforward:</p>\n\n<pre><code>use std::io;\n\nlet mut some_string = String::new();\nlet _ = io::stdin().read_line(&amp;mut some_string);\n</code></pre>\n\n<p>but sometimes you might want to just discard it without acknowledging it anywhere or procuring a buffer, like:</p>\n\n<pre><code>println!(\"Press Enter to close\");\nio::stdin().discard_input(); // discard_input() doesn't exist\n</code></pre>\n\n<p>It could read any number of characters until encountering <code>\\n</code>, ignore it all and return nothing or <code>io::Result</code>. Is there a standard way of doing it or do I have to implement it myself? I traced the implementation of <code>read_line</code> to <a href=\"https://doc.rust-lang.org/stable/src/std/up/src/libstd/io/mod.rs.html#1119\" rel=\"nofollow\"><code>read_until</code></a> implemented by <code>BufRead</code>, but I'm not sure if it's a good idea to start from there.</p>\n"}, {"tags": ["logging", "rust", "destructor"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1473172438, "post_id": 39351178, "comment_id": 66033018, "body": "Note: I was curious about the thread-safety of this call so went looking into it; from what I understand the implementation maintains a counter of how many threads are currently logging and will &quot;block&quot; on the <code>shutdown_logger</code> call until all are done."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473172824, "post_id": 39351178, "comment_id": 66033308, "body": "@MatthieuM. yeah, I was surprised at the implementation with the transmute and the underlying atomics."}, {"owner": {"reputation": 73, "user_id": 6085846, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/dKMDD.jpg?s=128&g=1", "display_name": "Yuri Nasyrov", "link": "https://stackoverflow.com/users/6085846/yuri-nasyrov"}, "edited": false, "score": 0, "creation_date": 1473177204, "post_id": 39351178, "comment_id": 66036162, "body": "It help if i call it myself. But i need catch when program finished with some error or killed. Or i need use panic catcher <a href=\"https://github.com/sfackler/rust-log-panics/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">link</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 73, "user_id": 6085846, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/dKMDD.jpg?s=128&g=1", "display_name": "Yuri Nasyrov", "link": "https://stackoverflow.com/users/6085846/yuri-nasyrov"}, "edited": false, "score": 0, "creation_date": 1473186053, "post_id": 39351178, "comment_id": 66040852, "body": "@YuriNasyrov <i>when the program finishes with some error or is killed</i> \u2014 you simply cannot do anything when the program is killed; that&#39;s what killing a process means. As for when the program finishes with an error, that&#39;s harder to describe. Either you will have something like a <code>Result</code> and you can shutdown the logger, or the thread will have panicked. If it&#39;s a panic, then a panic handler might be useful, but you have to be pretty careful about anything you do in there."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1473171121, "creation_date": 1473171121, "answer_id": 39351178, "question_id": 39350958, "link": "https://stackoverflow.com/questions/39350958/why-is-drop-not-called-for-a-logger-implementation/39351178#39351178", "title": "Why is drop not called for a logger implementation?", "body": "<p>The logger implementation is given to the logging library and <a href=\"https://github.com/rust-lang-nursery/log/blob/0.3.6/src/lib.rs#L656-L659\" rel=\"noreferrer\">is effectively leaked</a>. This allows the implementation to act <em>as if</em> it has the <code>'static</code> lifetime, letting it be used in many places.</p>\n\n<p>If you really need it, you can shut down the logger at the end of the program:</p>\n\n<pre><code>fn main() {\n    mylog::init().unwrap();\n    info!(\"My info message\");\n    log::shutdown_logger();\n}\n</code></pre>\n"}], "owner": {"reputation": 73, "user_id": 6085846, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/dKMDD.jpg?s=128&g=1", "display_name": "Yuri Nasyrov", "link": "https://stackoverflow.com/users/6085846/yuri-nasyrov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 100, "favorite_count": 0, "accepted_answer_id": 39351178, "answer_count": 1, "score": 7, "last_activity_date": 1473171121, "creation_date": 1473170445, "last_edit_date": 1473170611, "question_id": 39350958, "link": "https://stackoverflow.com/questions/39350958/why-is-drop-not-called-for-a-logger-implementation", "title": "Why is drop not called for a logger implementation?", "body": "<p>I'm trying to use the log crate and implement a logger myself. I call it <code>mylog</code>.</p>\n\n<pre><code>extern crate log;\nuse log::*;\n\nstruct Mylog;\n\nimpl log::Log for Mylog {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n        metadata.level() &lt;= LogLevel::Info\n    }\n\n    fn log(&amp;self, record: &amp;LogRecord) {\n        if self.enabled(record.metadata()) {\n            println!(\"hello log\");\n        }\n    }\n}\nimpl Drop for Mylog {\n    fn drop(&amp;mut self) {\n        println!(\"dropped\"); // This is never called, why?\n    }\n}\npub fn init() -&gt; Result&lt;(), SetLoggerError&gt; {\n    log::set_logger(|max_log_level| {\n        max_log_level.set(LogLevelFilter::Info);\n        Box::new(Mylog)\n    })\n}\n</code></pre>\n\n<p>And in main.rs:</p>\n\n<pre><code>extern crate mylog;\n#[macro_use] extern crate log;\n\nfn main() {\n    mylog::init().unwrap();\n    info!(\"My info message\");\n}\n</code></pre>\n\n<p><code>Drop</code> is never called and I don't understand why.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1473168384, "post_id": 39349286, "comment_id": 66030056, "body": "You say &quot;each branch resolves to different types&quot;.  Can you give an example?"}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 4, "last_activity_date": 1473167193, "last_edit_date": 1473167193, "creation_date": 1473166303, "answer_id": 39349471, "question_id": 39349286, "link": "https://stackoverflow.com/questions/39349286/can-macros-match-against-constant-arguments-instead-of-literals/39349471#39349471", "title": "Can macros match against constant arguments instead of literals?", "body": "<p>I'm fairly sure the answer is \"no\"; at macro expansion time all you have are token trees - expansion happens before evaluation, or even type inference/checking.</p>\n"}, {"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1473168249, "post_id": 39349975, "comment_id": 66029951, "body": "I think it&#39;s not <i>exactly</i> the AST - macros are given not-fully-parsed tokens (since, of course, the macro defines partly how to parse them).  I say not-fully-parsed rather than unparsed since you do have <code>$e:expr</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1473169632, "post_id": 39349975, "comment_id": 66030998, "body": "@ChrisEmerson: Yes, it&#39;s a bit looser than this."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1473167740, "creation_date": 1473167740, "answer_id": 39349975, "question_id": 39349286, "link": "https://stackoverflow.com/questions/39349286/can-macros-match-against-constant-arguments-instead-of-literals/39349975#39349975", "title": "Can macros match against constant arguments instead of literals?", "body": "<p><strong>No.</strong></p>\n\n<p>Macros operate on the Abstract <em>Syntax</em> Tree, so they reason at the syntactic level: they reason about <em>tokens</em> and their <em>spelling</em>.</p>\n\n<p>For example:</p>\n\n<pre><code>fn main() {\n    let v = 3;\n}\n</code></pre>\n\n<p>In this case, the AST will look something like:</p>\n\n<pre><code>fn main\n    \\_ let-binding v\n        \\_ literal 3\n</code></pre>\n\n<p>If you ask a macro whether <code>v</code> is <code>3</code>, it will look at you funny, and wonder why you would try comparing a variable name and a literal.</p>\n"}, {"comments": [{"owner": {"reputation": 1254, "user_id": 13921023, "user_type": "registered", "profile_image": "https://graph.facebook.com/10222018131177547/picture?type=large", "display_name": "Ran Marciano", "link": "https://stackoverflow.com/users/13921023/ran-marciano"}, "edited": false, "score": 1, "creation_date": 1614959383, "post_id": 66494400, "comment_id": 117552870, "body": "Please don&#39;t post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes."}, {"owner": {"reputation": 1, "user_id": 15337256, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d0eebe521138fe239eb9ebaed21240da?s=128&d=identicon&r=PG&f=1", "display_name": "temasictfic", "link": "https://stackoverflow.com/users/15337256/temasictfic"}, "reply_to_user": {"reputation": 1254, "user_id": 13921023, "user_type": "registered", "profile_image": "https://graph.facebook.com/10222018131177547/picture?type=large", "display_name": "Ran Marciano", "link": "https://stackoverflow.com/users/13921023/ran-marciano"}, "edited": false, "score": 0, "creation_date": 1614961217, "post_id": 66494400, "comment_id": 117553759, "body": "Thanks for warning."}], "tags": [], "owner": {"reputation": 1, "user_id": 15337256, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d0eebe521138fe239eb9ebaed21240da?s=128&d=identicon&r=PG&f=1", "display_name": "temasictfic", "link": "https://stackoverflow.com/users/15337256/temasictfic"}, "is_accepted": false, "score": 0, "last_activity_date": 1614962057, "last_edit_date": 1614962057, "creation_date": 1614954813, "answer_id": 66494400, "question_id": 39349286, "link": "https://stackoverflow.com/questions/39349286/can-macros-match-against-constant-arguments-instead-of-literals/66494400#66494400", "title": "Can macros match against constant arguments instead of literals?", "body": "<pre><code>const CONST: usize = 0;\n\nmacro_rules! foo {\n    ($i:ident =&gt; $e:expr) =&gt; {\n        if $i == 0 {\n            println!(&quot;mode X: {}&quot;, $e);\n        } else if $i == 1 {\n            println!(&quot;mode Y: {}&quot;, $e);\n        }\n    };\n}\n\nfn main() {\n    foo!(CONST =&gt; 3);\n}\n</code></pre>\n<p>If you want use identifier in macro it needs to be <code>ident</code> tag and you can use <code>if</code>, <code>else if</code> blocks instead of <code>match</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2506, "favorite_count": 0, "accepted_answer_id": 39349975, "answer_count": 3, "score": 1, "last_activity_date": 1614962057, "creation_date": 1473165745, "last_edit_date": 1473166598, "question_id": 39349286, "link": "https://stackoverflow.com/questions/39349286/can-macros-match-against-constant-arguments-instead-of-literals", "title": "Can macros match against constant arguments instead of literals?", "body": "<p>Given the <a href=\"https://doc.rust-lang.org/book/macros.html#matching\" rel=\"nofollow\">macro matching example</a>, this shows how macros can match an argument.</p>\n\n<p>I've made very minor changes here to use numbers:</p>\n\n<pre><code>macro_rules! foo {\n    (0 =&gt; $e:expr) =&gt; (println!(\"mode X: {}\", $e));\n    (1 =&gt; $e:expr) =&gt; (println!(\"mode Y: {}\", $e));\n}\n\nfn main() {\n    foo!(1 =&gt; 3);\n}\n</code></pre>\n\n<p>Works, printing: <code>mode Y: 3</code></p>\n\n<p>However I would like to use a constant as an argument, can this be made to work:</p>\n\n<pre><code>const CONST: usize = 1;\n\nmacro_rules! foo {\n    (0 =&gt; $e:expr) =&gt; (println!(\"mode X: {}\", $e));\n    (1 =&gt; $e:expr) =&gt; (println!(\"mode Y: {}\", $e));\n}\n\nfn main() {\n    foo!(CONST =&gt; 3);\n}\n</code></pre>\n\n<p>Is this possible in Rust?</p>\n\n<hr>\n\n<p>Note, using a regular <code>match</code> statement isn't usable for me, since in my code each branch resolves to different types, giving an error.\nSo I'm specifically interested to know if a constant can be passed to a macro.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1473159081, "post_id": 39346788, "comment_id": 66023841, "body": "This question is asking about using constants to declare arrays, the other question is dealing with dynamic vectors. While they&#39;re related, I don&#39;t think this is a duplicate."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1473159542, "post_id": 39346788, "comment_id": 66024134, "body": "@ker: I think that this is actually a <i>reverse</i> of the question you linked. Counting repetitions is tricky, but doable, here however the question is about <i>generating</i> repetitions when there are none in the input (just a literal number)."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1473159568, "post_id": 39346788, "comment_id": 66024155, "body": "The <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/array.rs#L221\" rel=\"nofollow noreferrer\">implementation of <code>Default</code> for primitive arrays</a> is close (up to a fixed length).  You might be able to replace the sequence of <code>T</code>s in the macro call with a clever expression which lets you pass the index in."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473162840, "post_id": 39346788, "comment_id": 66026411, "body": "Read all 3 questions marked as duplicate, and they all seem only <i>slightly</i> related. While its not useful to have every variation of a question, is it necessary to be so zealous marking duplicates here? Also, the other questions seem quite a bit more advanced then this one."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473167438, "post_id": 39346788, "comment_id": 66029401, "body": "@ideasman42: The first one (<a href=\"http://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros\" title=\"is there a way to count with macros\">stackoverflow.com/questions/33751796/&hellip;</a>) is actually spot on, although simpler."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473169394, "post_id": 39346788, "comment_id": 66030808, "body": "@MatthieuM. this matches against a literal, not a constant <i>(noted in the title and the example)</i>. From checking on this further it seems this is the reason attempting to follow similar methods to the answers given failed."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473169605, "post_id": 39346788, "comment_id": 66030977, "body": "@ideasman42: Oh sorry, I am afraid that it was so clear to everyone that using macros necessarily meant using a literals (since they do not evaluate values, only reason in tokens) that we took for granted that the actual issue was in the generation of repetitions. Since you opened a new question specifically on the constant/literal distinction though I would say it does not matter."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473686077, "post_id": 39346788, "comment_id": 66223553, "body": "Since this question is not a duplicate, could the duplicate mark be removed?"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 329, "favorite_count": 0, "closed_date": 1473159753, "answer_count": 0, "score": 1, "last_activity_date": 1473686206, "creation_date": 1473157791, "last_edit_date": 1495541702, "question_id": 39346788, "link": "https://stackoverflow.com/questions/39346788/is-it-possible-to-write-a-macro-that-expands-an-expression-n-times-where-n-is", "closed_reason": "Duplicate", "title": "Is it possible to write a macro that expands an expression N times? (Where N is a constant)", "body": "<p>Say we need to declare a fixed size array with values, where the size of the array is defined by a constant that may change depending on compile time settings.</p>\n\n<p>So for example:</p>\n\n<p><code>let my_array = expand_into_array!(j, ARRAY_SIZE, -v0[j] * f);</code></p>\n\n<p>Where <code>ARRAY_SIZE</code> is a constant, for example:\n<code>const ARRAY_SIZE: usize = 3;</code></p>\n\n<p>Could expand into something like...</p>\n\n<pre><code>let my_array = [\n    {let j = 0; {-v0[j] * f}},\n    {let j = 1; {-v0[j] * f}},\n    {let j = 2; {-v0[j] * f}},\n];\n</code></pre>\n\n<p>Since the expression is a fixed size array, it may be possible to use pattern matching, for a limited number of items ... up to 32 for example.</p>\n\n<p>Is it possible to write a macro that expands an expression <em>N</em> times, based on a constant integer?</p>\n\n<hr>\n\n<p><em>Details...</em></p>\n\n<p>Looking into this, I wrote a macro which defines an array, then fills it in, eg:</p>\n\n<pre><code>const ARRAY_SIZE: usize = 3;\n\nmacro_rules! expand_into_array {\n    ($index_var:ident, $const_size:expr, $body:expr) =&gt; {\n        {\n            let mut tmp: [_; $const_size] = [0.0; $const_size];\n            for $index_var in 0..$const_size {\n                tmp[$index_var] = $body;\n            }\n            // TODO, check $body _never_ breaks.\n            tmp\n        }\n    }\n}\n\npub fn negated_array(v0: &amp;[f64; ARRAY_SIZE]) -&gt; [f64; ARRAY_SIZE] {\n    expand_into_array!(j, ARRAY_SIZE, {\n        -v0[j]\n    })\n}\n</code></pre>\n\n<p>This works as expected, and besides the wrinkle (that the <code>$body</code> expression could include a <code>break</code>). this works without problems.</p>\n\n<p>However initializing the array to 0.0 isn't getting optimized out (changing this value shows up as changes when run with:<br> <code>cargo rustc --release -- --emit asm</code></p>\n\n<p>I'd rather not use <code>unsafe { std::mem::uninitialized }</code>.</p>\n\n<hr>\n\n<p>Update, from asking <a href=\"https://stackoverflow.com/questions/33751796\">another question</a>, it seems macros can only match against literals, and <em>not</em> constants.</p>\n\n<p>So this is simply not possible with macros in Rust.</p>\n"}, {"tags": ["path", "rust"], "answers": [{"comments": [{"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1505867426, "post_id": 39343127, "comment_id": 79584898, "body": "This has now been extracted into the pathdiff crate <a href=\"https://docs.rs/pathdiff/0.1.0/pathdiff/\" rel=\"nofollow noreferrer\">docs.rs/pathdiff/0.1.0/pathdiff</a>"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1505903746, "post_id": 39343127, "comment_id": 79600292, "body": "@Manishearth Thanks. Perhaps you should post that as an answer :D"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 13, "last_activity_date": 1473147285, "creation_date": 1473147285, "answer_id": 39343127, "question_id": 39340924, "link": "https://stackoverflow.com/questions/39340924/given-two-absolute-paths-how-can-i-express-one-of-the-paths-relative-to-the-oth/39343127#39343127", "title": "Given two absolute paths, how can I express one of the paths relative to the other?", "body": "<p>If one path is a base of another, you could use <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.strip_prefix\"><code>Path::strip_prefix</code></a>, but it won't calculate the <code>../</code> for you (instead returns an Err):</p>\n\n<pre><code>use std::path::*;\nlet base = Path::new(\"/foo/bar\");\nlet child_a = Path::new(\"/foo/bar/a\");\nlet child_b = Path::new(\"/foo/bar/b\");\nprintln!(\"{:?}\", child_a.strip_prefix(base));     // Ok(\"a\")\nprintln!(\"{:?}\", child_a.strip_prefix(child_b));  // Err(StripPrefixError(()))\n</code></pre>\n\n<p>The previous incarnation of <code>strip_prefix</code> was <code>path_relative_from</code> which used to add <code>../</code>, but <a href=\"https://github.com/rust-lang/rust/issues/23284#issuecomment-85118123\">this behavior was dropped due to symlinks</a>:</p>\n\n<blockquote>\n  <ol>\n  <li>The current behavior where joining the result onto the first path unambiguously refers to the same thing the second path does, even if there's symlinks (which basically means <code>base</code> needs to be a prefix of <code>self</code>)</li>\n  <li>The old behavior where the result can start with <code>../</code> components. Symlinks mean traversing the <code>base</code> path and then traversing the returned relative path may not put you in the same directory that traversing the <code>self</code> path does. But this operation is useful when either you're working with a path-based system that doesn't care about symlinks, or you've already resolved symlinks in the paths you're working with.</li>\n  </ol>\n</blockquote>\n\n<p>If you need the <code>../</code> behavior, you could copy the implementation from <a href=\"https://github.com/rust-lang/rust/blob/e1d0de82cc40b666b88d4a6d2c9dcbc81d7ed27f/src/librustc_back/rpath.rs#L116-L158\">librustc_back</a> (the compiler backend). I didn't find any packages on crates.io providing this yet.</p>\n\n<pre><code>// This routine is adapted from the *old* Path's `path_relative_from`\n// function, which works differently from the new `relative_from` function.\n// In particular, this handles the case on unix where both paths are\n// absolute but with only the root as the common directory.\nfn path_relative_from(path: &amp;Path, base: &amp;Path) -&gt; Option&lt;PathBuf&gt; {\n    use std::path::Component;\n\n    if path.is_absolute() != base.is_absolute() {\n        if path.is_absolute() {\n            Some(PathBuf::from(path))\n        } else {\n            None\n        }\n    } else {\n        let mut ita = path.components();\n        let mut itb = base.components();\n        let mut comps: Vec&lt;Component&gt; = vec![];\n        loop {\n            match (ita.next(), itb.next()) {\n                (None, None) =&gt; break,\n                (Some(a), None) =&gt; {\n                    comps.push(a);\n                    comps.extend(ita.by_ref());\n                    break;\n                }\n                (None, _) =&gt; comps.push(Component::ParentDir),\n                (Some(a), Some(b)) if comps.is_empty() &amp;&amp; a == b =&gt; (),\n                (Some(a), Some(b)) if b == Component::CurDir =&gt; comps.push(a),\n                (Some(_), Some(b)) if b == Component::ParentDir =&gt; return None,\n                (Some(a), Some(_)) =&gt; {\n                    comps.push(Component::ParentDir);\n                    for _ in itb {\n                        comps.push(Component::ParentDir);\n                    }\n                    comps.push(a);\n                    comps.extend(ita.by_ref());\n                    break;\n                }\n            }\n        }\n        Some(comps.iter().map(|c| c.as_os_str()).collect())\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 12, "last_activity_date": 1506187106, "creation_date": 1506187106, "answer_id": 46382269, "question_id": 39340924, "link": "https://stackoverflow.com/questions/39340924/given-two-absolute-paths-how-can-i-express-one-of-the-paths-relative-to-the-oth/46382269#46382269", "title": "Given two absolute paths, how can I express one of the paths relative to the other?", "body": "<p>This now exists as the <a href=\"https://docs.rs/pathdiff/0.1.0/pathdiff/\" rel=\"noreferrer\"><code>pathdiff</code></a> crate, using the code from <a href=\"https://stackoverflow.com/a/39343127/1198729\">kennytm's answer</a></p>\n\n<p>You can use it as:</p>\n\n<pre><code>extern crate pathdiff;\n\npathdiff::diff_paths(path, base);\n</code></pre>\n\n<p>where <code>base</code> is where the relative path should be applied to obtain <code>path</code></p>\n"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3008, "favorite_count": 1, "accepted_answer_id": 46382269, "answer_count": 2, "score": 8, "last_activity_date": 1506187106, "creation_date": 1473137864, "last_edit_date": 1502651922, "question_id": 39340924, "link": "https://stackoverflow.com/questions/39340924/given-two-absolute-paths-how-can-i-express-one-of-the-paths-relative-to-the-oth", "title": "Given two absolute paths, how can I express one of the paths relative to the other?", "body": "<p>I think this should be quite doable, given that there is a nice function <a href=\"https://doc.rust-lang.org/1.7.0/std/fs/fn.canonicalize.html\" rel=\"noreferrer\"><code>canonicalize</code></a> which normalizes paths (so I can start by normalizing my two input paths) and <code>Path</code> and <code>PathBuf</code> give us a way of iterating over the parts of paths through <a href=\"https://doc.rust-lang.org/1.7.0/std/path/struct.PathBuf.html#method.components\" rel=\"noreferrer\"><code>components</code></a>. I imagine something could be worked out here to factor out a common prefix, then prepend as many <code>..</code> components as remain in the anchor path to what remains of the initial input path.</p>\n\n<p>My problem seems to be pretty common:</p>\n\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/29055511/how-to-find-relative-path-given-two-absolute-paths\">How to find relative path given two absolute paths?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1654659/find-a-path-in-windows-relative-to-another\">Find a path in Windows relative to another</a></li>\n</ol>\n"}, {"tags": ["rust", "lifetime", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473127109, "post_id": 39339529, "comment_id": 66010380, "body": "How do you pass the right lifetime to new in that case? I assumed the compiler would choose the right one automatically. If I try to pass an explicit lifetime in, it gives an error about passing too many lifetime parameters. P.S. I posted the complete error message I saw. I&#39;m not sure why the compiler gives you a longer error message."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473127435, "post_id": 39339529, "comment_id": 66010432, "body": "@Antimony you don&#39;t pass one in; it&#39;s always inferred from the code. In this case there&#39;s only a single possible lifetime - <code>&#39;static</code> so the method should probably be <code>fn new() -&gt; Box&lt;Trait&lt;&#39;static&gt; + &#39;static&gt;</code> (which I <i>believe</i> is the same as <code>fn new() -&gt; Box&lt;Trait&gt;</code>)."}, {"owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473131374, "post_id": 39339529, "comment_id": 66011161, "body": "But that doesn&#39;t make sense because the returned object won&#39;t actually have static lifetime. Or does it just get implicitly narrowed later on?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473131592, "post_id": 39339529, "comment_id": 66011200, "body": "@Antimony that&#39;s correct that the returned <i>value</i> won&#39;t have the static lifetime, but it can only <i>contain</i> static references. Try to make a smaller example that returns a reference that isn&#39;t static and you could se what I mean."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1473126515, "last_edit_date": 1495535355, "creation_date": 1473126515, "answer_id": 39339529, "question_id": 39339419, "link": "https://stackoverflow.com/questions/39339419/confusing-error-in-rust-with-trait-object-lifetime/39339529#39339529", "title": "Confusing error in Rust with trait object lifetime", "body": "<p>Note that there's more to the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `pool` does not live long enough\n  --&gt; src/main.rs:25:10\n   |&gt;\n25 |&gt;     user(pool.borrow_mut());\n   |&gt;          ^^^^\nnote: reference must be valid for the block at 23:25...\n  --&gt; src/main.rs:23:26\n   |&gt;\n23 |&gt; fn parent&lt;'a&gt;(x: &amp;'a u8) {\n   |&gt;                          ^\nnote: ...but borrowed value is only valid for the block suffix following statement 0 at 24:25\n  --&gt; src/main.rs:24:26\n   |&gt;\n24 |&gt;     let mut pool = new();\n   |&gt;                          ^\n</code></pre>\n\n<p>Let's look at <code>user</code>:</p>\n\n<pre><code>fn user&lt;'a&gt;(obj: &amp;mut Trait&lt;'a&gt;) {}\n</code></pre>\n\n<p>This says that it will accept a mutable reference (with an unnamed lifetime) to a trait object parameterized with the lifetime <code>'a</code>.</p>\n\n<p>Turning to <code>new</code>, I'd say the method is <strong>highly</strong> suspicious:</p>\n\n<pre><code>fn new&lt;'a&gt;() -&gt; Box&lt;Trait&lt;'a&gt; + 'a&gt; {\n    Box::new(Impl { myref: None })\n}\n</code></pre>\n\n<p>This says that it will return a boxed trait object with <em>whatever lifetime the caller specifies</em>. <a href=\"https://stackoverflow.com/q/32682876/155423\">That basically never makes sense</a>. </p>\n\n<p>All that said, I'm not clear why the code chooses to use <code>borrow_mut</code>. I would have written that more directly:</p>\n\n<pre><code>user(&amp;mut *pool);\n</code></pre>\n\n<p>This dereferences the <code>Box&lt;Trait&gt;</code> to get a <code>Trait</code>, then takes a mutable reference, yielding <code>&amp;mut Trait</code>, which compiles.</p>\n\n<p>I cannot currently explain why <code>BorrowMut</code> differs in behavior.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1473126755, "creation_date": 1473126755, "answer_id": 39339551, "question_id": 39339419, "link": "https://stackoverflow.com/questions/39339419/confusing-error-in-rust-with-trait-object-lifetime/39339551#39339551", "title": "Confusing error in Rust with trait object lifetime", "body": "<p>I'm not sure <em>why</em> this error happens, but I can give solutions!</p>\n\n<p>First, it seems that using <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" rel=\"nofollow\"><code>borrow_mut</code></a> unnecessarily restricts the lifetime of the returned reference. Using operators to create the reference solves the error.</p>\n\n<pre><code>fn parent() {\n    let mut pool = new();\n    user(&amp;mut *pool);\n}\n</code></pre>\n\n<p>However, if we <em>don't</em> do that, we can solve the error by adding a lifetime bound to the <code>Trait</code> object in <code>user</code>'s <code>obj</code> argument.</p>\n\n<pre><code>fn user&lt;'a&gt;(obj: &amp;mut (Trait&lt;'a&gt; + 'a)) {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473170234, "post_id": 39340230, "comment_id": 66031466, "body": "Where does the <code>&#39;b = &#39;x</code> restriction come from?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473170585, "post_id": 39340230, "comment_id": 66031697, "body": "Sorry, I accidentally copy+pasted the already fixed version of the example!  To clarify, <code>&amp;&#39;i mut (Trait&lt;&#39;x&gt; + &#39;x)</code> (the argument) is unified with <code>&amp;&#39;b mut (Trait&lt;&#39;a&gt; + &#39;b)</code> (the signature of <code>user</code>, before being fixed).  This means that <code>&#39;b</code> is unified with <i>both</i> <code>&#39;i</code> and <code>&#39;x</code>."}, {"owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473171692, "post_id": 39340230, "comment_id": 66032486, "body": "Oh, that makes sense! I suppose new probably should return something like Trait&lt;&#39;a&gt; + &#39;b then, but the compiler complained when I didn&#39;t have the + &#39;a in there."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "edited": false, "score": 0, "creation_date": 1473171915, "post_id": 39340230, "comment_id": 66032646, "body": "@Antimony No, I think <code>+ &#39;a</code> is <i>probably</i> more correct: it doesn&#39;t seem sensible for the trait object to be bound by two <i>different</i> lifetimes.  (In this case, anyway.)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 10, "last_activity_date": 1473170476, "last_edit_date": 1473170476, "creation_date": 1473132602, "answer_id": 39340230, "question_id": 39339419, "link": "https://stackoverflow.com/questions/39339419/confusing-error-in-rust-with-trait-object-lifetime/39340230#39340230", "title": "Confusing error in Rust with trait object lifetime", "body": "<p>Ok, this <em>does</em> make sense, but it's hard to see due to lifetime elision.  So, here's your code with <em>all</em> the lifetimes written out explicitly, and with irrelevant details culled:</p>\n\n<pre><code>use std::borrow::BorrowMut;\n\ntrait Trait&lt;'a&gt; {}\n\nstruct Impl&lt;'a&gt; {\n    myref: Option&lt;&amp;'a u8&gt;,\n}\n\nimpl&lt;'a&gt; Trait&lt;'a&gt; for Impl&lt;'a&gt; {}\n\nfn new&lt;'a&gt;() -&gt; Box&lt;Trait&lt;'a&gt; + 'a&gt; {\n    Box::new(Impl { myref: None })\n}\n\nfn user&lt;'a, 'b&gt;(obj: &amp;'b mut (Trait&lt;'a&gt; + 'b)) {}\n\nfn parent() {\n/* 'i: */   let mut pool/*: Box&lt;Trait&lt;'x&gt; + 'x&gt;*/ = new();\n/* 'j: */   let pool_ref/*: &amp;'i mut Box&lt;Trait&lt;'x&gt; + 'x&gt;*/ = &amp;mut pool;\n            /* BorrowMut&lt;T&gt;::borrow_mut&lt;'d&gt;(&amp;'d mut Self) -&gt; &amp;'d mut T */\n/* 'k: */   let pool_borrow/*: &amp;'i mut (Trait&lt;'x&gt; + 'x)*/ = Box::borrow_mut(pool_ref);\n            user(pool_borrow);\n}\n</code></pre>\n\n<p>Now, from the perspective of the last line of <code>parent</code>, we can work out the following equivalences by just reading the definition of <code>user</code> and substituting the lifetimes we have in <code>parent</code>:</p>\n\n<ul>\n<li><code>'a</code> = <code>'x</code></li>\n<li><code>'b</code> = <code>'i</code></li>\n<li><code>'b</code> = <code>'x</code></li>\n</ul>\n\n<p>Furthermore, this lets us conclude that:</p>\n\n<ul>\n<li><code>'x</code> = <code>'i</code></li>\n</ul>\n\n<p>This is the problem.  Because of the way you've defined <code>user</code>, you've put yourself in a situation where the lifetime of the <code>pool_ref</code> borrow (which is equal to the lifetime of the <code>pool</code> storage location you're borrowing from) must be the same as the lifetime <code>'x</code> being used in the thing being <em>stored</em> in <code>pool</code>.</p>\n\n<p>It's a bit like the <code>Box</code> being able to have a pointer to itself before it exists, which doesn't make any sense.</p>\n\n<p>Either way, the fix is simple.  Change <code>user</code> to actually have the correct type:</p>\n\n<pre><code>fn user&lt;'a, 'b&gt;(obj: &amp;'b mut (Trait&lt;'a&gt; + 'a)) {}\n</code></pre>\n\n<p>This matches the type produced by <code>new</code>.  Alternately, <em>just don't use <code>borrow_mut</code></em>:</p>\n\n<pre><code>user(&amp;mut *pool)\n</code></pre>\n\n<p><em>This</em> works because it is \"re-borrowing\".  Calling <code>borrow_mut</code> translates the lifetimes more or less directly, but re-borrowing allows the compiler to narrow the borrows to shorter lifetimes.  To put it another way, explicitly calling <code>borrow_mut</code> doesn't allow the compiler enough freedom to \"fudge\" the lifetimes to make them all line up, re-borrowing <em>does</em>.</p>\n\n<p>As a quick aside:</p>\n\n<blockquote>\n  <p>I'm not even using the borrowed value!</p>\n</blockquote>\n\n<p><em>Irrelevant.</em>  Rust does type- and lifetime-checking <em>entirely</em> locally.  It <em>never</em> looks at the body of another function to see what it's doing; it goes on the interface alone.  The compiler neither checks, nor cares, what you're doing <em>inside</em> a different function.</p>\n"}], "owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1000, "favorite_count": 1, "accepted_answer_id": 39340230, "answer_count": 3, "score": 6, "last_activity_date": 1473170476, "creation_date": 1473125308, "last_edit_date": 1473125534, "question_id": 39339419, "link": "https://stackoverflow.com/questions/39339419/confusing-error-in-rust-with-trait-object-lifetime", "title": "Confusing error in Rust with trait object lifetime", "body": "<p>Can anyone tell what the problem is with the following code? The compiler is complaining about lifetimes, but the error message makes absolutely no sense. I've tried everything I could think of, but nothing seems to help.</p>\n\n<pre><code>use std::borrow::BorrowMut;\n\ntrait Trait&lt;'a&gt; {\n    fn accept(&amp;mut self, &amp;'a u8);\n}\n\nstruct Impl&lt;'a&gt;{\n    myref: Option&lt;&amp;'a u8&gt;,\n}\nimpl&lt;'a&gt; Trait&lt;'a&gt; for Impl&lt;'a&gt; {\n    fn accept(&amp;mut self, inp: &amp;'a u8) { self.myref = Some(inp); }\n}\n\nfn new&lt;'a&gt;() -&gt; Box&lt;Trait&lt;'a&gt; + 'a&gt; {\n    Box::new(Impl{myref: None})\n}\n\nfn user&lt;'a&gt;(obj: &amp;mut Trait&lt;'a&gt;) {}\n\nfn parent&lt;'a&gt;(x: &amp;'a u8) {\n    let mut pool = new();\n    user(pool.borrow_mut());\n}\n</code></pre>\n\n<p>The compiler error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `pool` does not live long enough\n  --&gt; src/wtf.rs:22:10\n   |\n22 |     user(pool.borrow_mut());\n   |          ^^^^ does not live long enough\n23 | }\n   | - borrowed value dropped before borrower\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Which makes absolutely no sense. How is the borrower outliving anything? I'm not even using the borrowed value!</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 4, "creation_date": 1473101058, "post_id": 39335774, "comment_id": 66003570, "body": "Perhaps you use an Atom plugin that runs <code>cargo build</code> to check the syntax? If it is the case, this is the issue because you cannot run <code>cargo</code> twice at the same time."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1473101374, "post_id": 39335774, "comment_id": 66003664, "body": "Oh yes, that is a possible solution. I&#39;m using the tokamak plugin and - as far as I know - it does syntax checking using cargo. Thanks for the hint. I&#39;ll look furhter into this direction."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1473148204, "post_id": 39335774, "comment_id": 66017130, "body": "@antoyo: Sounds like an answer"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473170195, "post_id": 39349240, "comment_id": 66031439, "body": "<a href=\"http://stackoverflow.com/a/38643019/155423\">stackoverflow.com/a/38643019/155423</a> \u2014 use a different Cargo directory for tokamak and console."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 1, "creation_date": 1473274810, "post_id": 39349240, "comment_id": 66082452, "body": "After quite some time that I spent with the settings of Atom, I finally found that there was a second plugin (rust-linter) that has obviously been installed along with tokamak. And this plugin has a settting named &quot;use cargo&quot;. After unchecking this option, I don&#39;t get the block any longer :-)))) Thank you all for your hints that finally pointed me into the right direction."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 7, "last_activity_date": 1473165598, "creation_date": 1473165598, "answer_id": 39349240, "question_id": 39335774, "link": "https://stackoverflow.com/questions/39335774/cargo-always-starts-with-blocking-waiting-for-file-lock-on-build-directory/39349240#39349240", "title": "cargo always starts with &quot; Blocking waiting for file lock on build directory&quot;", "body": "<p>The <code>tokamak</code> Atom plugin runs <code>cargo</code> commands. Since you cannot run <code>cargo</code> twice at the same time, you get this notice.</p>\n\n<p>I don't think there is something you can do, unless waiting for the compiler to speed up.</p>\n\n<p>Perhaps playing with the options like <code>save_buffers_before_run</code> in <code>tokamak.toml</code> could make a difference.</p>\n"}], "owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6213, "favorite_count": 2, "answer_count": 1, "score": 10, "last_activity_date": 1477322216, "creation_date": 1473098975, "last_edit_date": 1477322216, "question_id": 39335774, "link": "https://stackoverflow.com/questions/39335774/cargo-always-starts-with-blocking-waiting-for-file-lock-on-build-directory", "title": "cargo always starts with &quot; Blocking waiting for file lock on build directory&quot;", "body": "<p>I recently installed rustup on my Windows machine and incorporated it into Atom as my editor. Everything works fine, but as soon as I do a <code>cargo run</code> on my project, the first thing that Cargo says is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> Blocking waiting for file lock on build directory\n</code></pre>\n\n<p>This blocks the whole process for about a minute before the actual compile and run starts. As far as I remember this did not happen before (I use Cargo under OS X but without rustup). </p>\n\n<p>Is there any way to disable this or at least reduce the timeout?</p>\n"}, {"tags": ["types", "rust", "primitive"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473603026, "post_id": 39335747, "comment_id": 66196234, "body": "What exactly are you looking for? At some point, a &quot;boolean&quot; is just a single bit on the processor (or a full byte for performance reasons). Before that, it&#39;s an <code>i1</code> (<code>i8</code>) in LLVM bitcode, and before that it&#39;s probably an <code>enum</code> in some Rust IR. Going lower down, you get to logic gates and transistors and electrons. Which of those is an &quot;actual implementation&quot;?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473604437, "post_id": 39335747, "comment_id": 66196652, "body": "I&#39;m looking for the place where the Rust language (not LLVM bitcode or the CPU) started recognizing e.g. the <code>==</code> operator (i.e. boolean logic). I&#39;m not too savvy with writing compilers so my wording might not be perfect, but I think there must have been a stage where the primitives were first &quot;embedded&quot; in the rustc compiler so it was able to compile them down to LLVM."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473101701, "post_id": 39336210, "comment_id": 66003786, "body": "An <code>array</code> is a primitive too, but <a href=\"https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src/libcore/array.rs\" rel=\"nofollow noreferrer\">its implementation</a> can be found easily. I was initially hoping to find <code>bool</code> by the code for <code>not</code>, but no luck."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473102585, "post_id": 39336210, "comment_id": 66004103, "body": "To be fair, though, <code>array</code>&#39;s code is macro magic, so it may not be an &quot;actual&quot; implementation like you had in mind."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1473103110, "post_id": 39336210, "comment_id": 66004271, "body": "You&#39;ll find implementations of <i>traits</i> for the primitive types (in fact, you can define a trait in a crate and implement it for a primitive type yourself), but you&#39;ll never find the <i>definition</i> of primitive types in any library."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473106119, "post_id": 39336210, "comment_id": 66005308, "body": "You are right, it looks like those are not there at all."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 11, "last_activity_date": 1473101446, "creation_date": 1473101446, "answer_id": 39336210, "question_id": 39335747, "link": "https://stackoverflow.com/questions/39335747/where-are-rusts-boolean-and-other-primitive-types-implemented/39336210#39336210", "title": "Where are Rust&#39;s boolean and other primitive types implemented?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/primitive.bool.html\"><code>bool</code> is a primitive type</a>. Primitive types and operations on them are implemented by the compiler, i.e. the compiler emits specialized code to perform operations on primitive types.</p>\n\n<p>You'll see that <code>bool</code> implements many traits. Those implementations come from libcore, but they are often implemented by using the corresponding operator. For example, <a href=\"https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src/libcore/ops.rs#L860-L874\"><code>Not::not</code> is implemented by returning <code>!self</code></a>. For any non-primitive type, this would invoke <code>Not::not</code> recursively and cause a stack overflow, but for primitive types, the compiler resolves the operator differently, and those trait implementations are only provided for the benefit of generic code.</p>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473101960, "post_id": 39336275, "comment_id": 66003869, "body": "That makes sense, but it must have been introduced <i>somehow</i>."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473102161, "post_id": 39336275, "comment_id": 66003949, "body": "@ljedrz: It just the same as <code>i32</code>. It is not introduced in <code>core</code>, it is an intrinsic type, defined directly by the compiler. The <code>core</code> part are just additional pieces around the type."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473102384, "post_id": 39336275, "comment_id": 66004041, "body": "How does it work, then? I adjusted the question, since the natural follow-up to this answer is &quot;how is this possible?&quot; rustc is built from the code at <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">github</a>, so if it is defined directly by the compiler, how is it not there?"}, {"owner": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 4, "creation_date": 1473103169, "post_id": 39336275, "comment_id": 66004285, "body": "@Ijedrz: But it is there: It&#39;s defined as an 8-bit LLVM type <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trans/type_.rs#L111\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/librustc_trans/&hellip;</a>"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 3, "creation_date": 1473103282, "post_id": 39336275, "comment_id": 66004321, "body": "@ljedrz: I&#39;m far from an expert in the Rust internals, but take a look at <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/mod.rs#L1064\" rel=\"nofollow noreferrer\">enum PrimTy</a> and the <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/lib.rs#L956\" rel=\"nofollow noreferrer\">PrimitiveTypeTable</a> inside the implementation of <b>rustc</b>, the Rust Compiler."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 0, "creation_date": 1473106221, "post_id": 39336275, "comment_id": 66005347, "body": "@Kha: I think this code is just for the purposes of translation to LLVM&#39;s language, not for rustc use."}, {"owner": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 2, "creation_date": 1473108665, "post_id": 39336275, "comment_id": 66006147, "body": "@Ijedrz: Ah, if your question is where the <code>bool</code> that rustc itself uses comes from, then the answer is: from the binary of the bootstrapping rustc version <a href=\"https://www.reddit.com/r/rust/comments/518gcs/whats_your_favorite_piece_of_rust_code/d7a3gs0\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/518gcs/&hellip;</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 0, "creation_date": 1473141616, "post_id": 39336275, "comment_id": 66013764, "body": "@Kha: it looks like this is the explanation I am after; can you post an answer with some additional information about it?"}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 3, "last_activity_date": 1473101787, "creation_date": 1473101787, "answer_id": 39336275, "question_id": 39335747, "link": "https://stackoverflow.com/questions/39335747/where-are-rusts-boolean-and-other-primitive-types-implemented/39336275#39336275", "title": "Where are Rust&#39;s boolean and other primitive types implemented?", "body": "<p>You can see the definition for <code>core::i32</code> only because of the constants <code>i32::MIN</code> and <code>i32::MAX</code>. The actual type is just an alias for the built-in type <code>i32</code>.</p>\n\n<p>In the <code>core::f32</code> case, for example there are a lot of useful constants.</p>\n\n<p>But for <code>bool</code>, there is no useful values, other than <code>true</code> and <code>false</code> that are keywords, so there is no source for <code>bool</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 3368, "user_id": 385966, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?s=128&d=identicon&r=PG", "display_name": "sgrif", "link": "https://stackoverflow.com/users/385966/sgrif"}, "is_accepted": true, "score": 14, "last_activity_date": 1474057043, "last_edit_date": 1474057043, "creation_date": 1474054586, "answer_id": 39538972, "question_id": 39335747, "link": "https://stackoverflow.com/questions/39335747/where-are-rusts-boolean-and-other-primitive-types-implemented/39538972#39538972", "title": "Where are Rust&#39;s boolean and other primitive types implemented?", "body": "<p>So here's a bit more information about what goes on in the compiler. For starters, as has already been mentioned, the actual operations that occur with booleans are entirely handled by LLVM, and get directly translated to the corresponding CPU instructions. While there are some cases where code just magically appears due to bootstrapping, this is not one of them. The compiler is specifically written to handle these types and emit the correct LLVM instructions.</p>\n\n<p>For the earliest parts of compilation (e.g. during macro expansion) the type <code>bool</code> isn't special. It's just some path with the identifier <code>bool</code>. Eventually <a href=\"https://github.com/rust-lang/rust/blob/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3/src/librustc/middle/astconv_util.rs#L70-L82\">around here</a> it will get converted to a primitive type. The actual definition of the type is <a href=\"https://github.com/rust-lang/rust/blob/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3/src/librustc/hir/mod.rs#L1100\">here</a>.</p>\n\n<p>So now let's look at how the <code>!</code> operator works. As I mentioned earlier, the code in libcore that does <code>impl Not for bool</code> never gets used. Code in the form <code>!expr</code> gets transformed into <code>&lt;T as Not&gt;::not(expr)</code> <a href=\"https://github.com/rust-lang/rust/blob/444ff9fbfb1f2a8e6645f67684f8a9ad99b343d3/src/librustc_mir/hair/cx/expr.rs#L421-L431\">here</a>. However, you'll notice that it checks to see if this particular expression is in fact a method call or not, and just leaves it as <code>!expr</code> if it's not meant to be a method call. How does it know? The call in MIR is just a cache lookup. The cache got populated during the type checking pass. <a href=\"https://github.com/rust-lang/rust/blob/65af27b000a320d8b8d9af591a0464cba3217e0c/src/librustc_typeck/check/mod.rs#L3396-L3404\">Here</a> is where the cache insertion occurs -- basically checking to see if the <code>Not</code> trait is implemented for a given type any time it sees a <code>!</code>. And you'll notice that <a href=\"https://github.com/rust-lang/rust/blob/65af27b000a320d8b8d9af591a0464cba3217e0c/src/librustc_typeck/check/mod.rs#L3399\">this line</a> specifically excludes booleans and integral types, which end up compiling down to LLVM instructions directly.</p>\n\n<p>That's the rough picture of how it's defined. You'll find similar code in the same files for other primitives. In theory there could be some line somewhere that was <code>enum bool { true, false }</code> -- but ultimately this same code would still need to override it and emit the appropriate LLVM intrinsics, and integers couldn't be represented this way.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1295, "favorite_count": 0, "accepted_answer_id": 39538972, "answer_count": 3, "score": 12, "last_activity_date": 1474057043, "creation_date": 1473098857, "last_edit_date": 1473602663, "question_id": 39335747, "link": "https://stackoverflow.com/questions/39335747/where-are-rusts-boolean-and-other-primitive-types-implemented", "title": "Where are Rust&#39;s boolean and other primitive types implemented?", "body": "<p>I was going through the code behind some of the basic types in Rust, e.g. the <a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libcore/option.rs\" rel=\"noreferrer\">pleasantly simple implementation</a> of <code>Option&lt;T&gt;</code> or the <a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libcore/tuple.rs\" rel=\"noreferrer\">weird macro magic</a> behind <code>tuple</code> and I was able to find all of the types that I wanted in <a href=\"https://github.com/rust-lang/rust/tree/1.10.0/src/libcore\" rel=\"noreferrer\">libcore</a>. All except for one - <code>bool</code>. I couldn't find it anywhere else either.</p>\n\n<p>Where is the code behind <code>bool</code> in Rust? I know this is not the most novel type out there, but I was surprised I could not find it.</p>\n\n<p>Thanks to the answers by Francis and rodrigo, I noticed that the code I found for other primitives was just their traits and related macros, but not actual implementations.</p>\n\n<p>The Rust book states that the primitives <a href=\"https://doc.rust-lang.org/book/primitive-types.html\" rel=\"noreferrer\">are built-in to the language</a>, but I'm not satisfied with this explanation. When were they built in? Can it be traced to the time when the Rust compiler was first built with Rust or did it happen when it was still built in OCaml? Does any relevant code exist?</p>\n"}, {"tags": ["module", "rust", "visibility"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1473147026, "post_id": 39334508, "comment_id": 66016468, "body": "It certainly looks like a bug/limitation, I tracked down <a href=\"https://github.com/rust-lang/rust/issues/30905\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/30905</a> which seems to be about the same issue too."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 8, "last_activity_date": 1556103633, "last_edit_date": 1556103633, "creation_date": 1473092699, "answer_id": 39334508, "question_id": 39334430, "link": "https://stackoverflow.com/questions/39334430/how-to-reference-private-types-from-public-functions-in-private-modules/39334508#39334508", "title": "How to reference private types from public functions in private modules?", "body": "<p>I have a feeling that this error is unwarranted. It should only be an error if <code>my_mod</code> is <code>pub</code> or if the functions are re-exported in an outer scope.</p>\n\n<p>That said, I found a workaround: move <code>MyStruct</code> to a sibling module and make <code>MyStruct</code> pub, but not the module.</p>\n\n<pre><code>use types::MyStruct;\n\nmod types {\n    pub struct MyStruct;\n}\n\nmod my_mod {\n    use super::MyStruct;\n\n    pub fn foo() -&gt; MyStruct {\n        MyStruct\n    }\n}\n\nfn main() {\n    let _var = my_mod::foo();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 182, "user_id": 11116081, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JC4bb.png?s=128&g=1", "display_name": "Gabe Nodarse", "link": "https://stackoverflow.com/users/11116081/gabe-nodarse"}, "is_accepted": false, "score": 0, "last_activity_date": 1592150401, "creation_date": 1592150401, "answer_id": 62374958, "question_id": 39334430, "link": "https://stackoverflow.com/questions/39334430/how-to-reference-private-types-from-public-functions-in-private-modules/62374958#62374958", "title": "How to reference private types from public functions in private modules?", "body": "<p>I encountered this same problem. Rust 2018 seems to have solved it; just refer to the submodule's \"public\" function as <code>pub(crate)</code>, AKA <code>pub(crate) fn foo()</code>.</p>\n\n<p>This makes the function only public to the crate: <a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2018/module-system/more-visibility-modifiers.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/nightly/edition-guide/rust-2018/module-system/more-visibility-modifiers.html</a></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 552, "favorite_count": 0, "accepted_answer_id": 39334508, "answer_count": 2, "score": 5, "last_activity_date": 1592150401, "creation_date": 1473092401, "last_edit_date": 1556107186, "question_id": 39334430, "link": "https://stackoverflow.com/questions/39334430/how-to-reference-private-types-from-public-functions-in-private-modules", "title": "How to reference private types from public functions in private modules?", "body": "<p>I want to group similar functions in a file. Those functions need to return a type which is not public:</p>\n\n<pre><code>struct MyStruct;\n\nmod my_mod {\n    use super::MyStruct;\n\n    // There are other, similar functions that also return `MyStruct`\n    pub fn foo() -&gt; MyStruct {\n        MyStruct\n    }\n}\n\nfn main() {\n    let _var = my_mod::foo();\n}\n</code></pre>\n\n<p>This fails with the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0446]: private type `MyStruct` in public interface\n --&gt; src/main.rs:7:3\n  |\n1 |     struct MyStruct;\n  |     - `MyStruct` declared as private\n...\n7 |         pub fn foo() -&gt; MyStruct { MyStruct }\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n</code></pre>\n\n<p>In general, it makes sense not to allow public functions to have private types in their signature, but in this specific case the structure <em>is</em> available at the modules root level.</p>\n\n<p>Is there a way to support this without making <code>MyStruct</code> public?</p>\n"}, {"tags": ["optimization", "functional-programming", "rust"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1473092134, "post_id": 39333454, "comment_id": 66000078, "body": "I believe that since <code>collatz_next</code> is very efficient (only a few arithmetic operations), any small overhead becomes non negligible. The boxing due to the option intermediate type could alone bring the performance down. (Just for fun, I&#39;d try using a similar boxing in the imperative version, so to assess its weight)"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1473092833, "post_id": 39333454, "comment_id": 66000389, "body": "By the way, I just tried this in GHC 8 with <code>-O3</code>, and as I expected the <code>Maybe</code> wrapper was completely removed, turning everything into a simple recursive function using unboxed division, addition, etc."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 4, "creation_date": 1473093513, "post_id": 39333454, "comment_id": 66000731, "body": "@chi: If by &quot;boxing&quot;, you mean introducing an indirection through the heap (i.e. storing its contents on the heap), then <code>Option</code> in Rust does not do that."}, {"owner": {"reputation": 84731, "user_id": 510937, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=128&d=identicon&r=PG", "display_name": "Bakuriu", "link": "https://stackoverflow.com/users/510937/bakuriu"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1473094693, "post_id": 39333454, "comment_id": 66001249, "body": "@FrancisGagn&#233; I think he refers to boxed vs unboxed types in Haskell. Unboxed types are represented by their value itself, while boxed one are represented via a pointer to the heap. See for example <a href=\"https://downloads.haskell.org/~ghc/6.12.3/docs/html/users_guide/primitives.html\" rel=\"nofollow noreferrer\">\u0127ere</a> (though a bit outdated)"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473095338, "post_id": 39333454, "comment_id": 66001484, "body": "Current docs regarding unboxed types in Haskell: <a href=\"http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#unboxed-types-and-primitive-operations\" rel=\"nofollow noreferrer\">GHC 8.0.1 Users Guide</a>"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1473099899, "post_id": 39333454, "comment_id": 66003166, "body": "@FrancisGagn&#233; Yes, I meant having a <code>Some</code> object with a reference to a pair, instead of the pair. In Haskell there are additional indirection steps since e.g. an int is actually a null-ary function producing an int (albeit optimization tries to remove this extra step)."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1473142461, "post_id": 39335965, "comment_id": 66014120, "body": "I like the iterator approach - it looks like the proper way to do it."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473155998, "post_id": 39335965, "comment_id": 66021868, "body": "I experimented a bit with your implementation and I just have 2 suggestions: the <code>new</code> method doesn&#39;t require a <code>where</code> clause (I guess it is inherited) and <code>F</code> can just be <code>Fn(T)</code>."}, {"owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1473181639, "post_id": 39335965, "comment_id": 66038581, "body": "Thanks, I was asking other people on IRC to make suggestions.  You were the first :) I&#39;ll update it now.  Also, apparently I don&#39;t need the <code>where</code> clause at all for <code>impl&lt;T, F&gt; Compose&lt;T, F&gt;</code>."}], "tags": [], "owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "is_accepted": false, "score": 5, "last_activity_date": 1473181699, "last_edit_date": 1473181699, "creation_date": 1473100154, "answer_id": 39335965, "question_id": 39333454, "link": "https://stackoverflow.com/questions/39333454/collatz-conjecture-in-rust-functional-v-imperative-approach/39335965#39335965", "title": "Collatz conjecture in Rust: functional v imperative approach", "body": "<p>This is not an answer, but an additional test to narrow down where the performance hit is coming from.  I unrolled the <code>Some</code> overhead by writing the recursive function</p>\n\n<pre><code>pub fn collatz_seq_r(n: u64, mut vec: Vec&lt;u64&gt;) -&gt; Vec&lt;u64&gt; {\n    if n == 1 {\n        vec\n    } else {\n        vec.push(n);\n        collatz_seq_r(collatz_next(n), vec)\n    } \n}\n</code></pre>\n\n<p>I obtained nearly identical performance as with the <code>collatz_seq_f</code> example.  It appears that LLVM is not unrolling this recursive call.</p>\n\n<h2>Alternative</h2>\n\n<p>After thinking about how I would do this in Rust, I would most likely have implemented an iterator whose job is to continuously compose the previous value with a function, providing a non-terminating sequection: <code>n, f(n), f(f(n)), ..., f^k(n), ...</code>.  This can be done like this:</p>\n\n<pre><code>struct Compose&lt;T, F&gt; {\n    value: T,\n    func: F\n}\n\nimpl&lt;T, F&gt; Iterator for Compose&lt;T, F&gt; \n    where T: Copy,\n          F: Fn(T) -&gt; T {\n    type Item = T;\n\n    fn next(&amp;mut self) -&gt; Option&lt;T&gt; {\n        let res = self.value;                    // f^k(n)\n        self.value = (self.func)(self.value);    // f^{k+1}(n)\n        Some(res)\n    }\n}\n\nimpl&lt;T, F&gt; Compose&lt;T, F&gt; {\n    fn new(seed: T, func: F) -&gt; Compose&lt;T, F&gt; {\n        Compose { \n            value: seed,\n            func: func\n        }\n    }\n}\n</code></pre>\n\n<p>So here I can call <code>Compose::new(seed_value, function)</code> to get an iterator of composition.  Generating the a Collatz sequence then becomes:</p>\n\n<pre><code>pub fn collatz_seq_iter(n: u64) -&gt; Vec&lt;u64&gt; {\n    Compose::new(n, collatz_next)\n             .take_while(|&amp;n| n != 1)\n             .collect::&lt;Vec&lt;_&gt;&gt;()\n}\n</code></pre>\n\n<p>With this I get the benchmarks:</p>\n\n<pre><code>test tests::bench_collatz_functional ... bench:         867 ns/iter (+/- 28)\ntest tests::bench_collatz_imperative ... bench:         374 ns/iter (+/- 9)\ntest tests::bench_collatz_iterators  ... bench:         473 ns/iter (+/- 9)\ntest tests::bench_collatz_recursive  ... bench:         838 ns/iter (+/- 29)\n</code></pre>\n\n<p>But the interesting thing here is, if you decide that you only care about the size after all, the call: <code>Compose::new(n, collatz_next).take_while(|&amp;n| n != 1).count() as u64</code> has almost exactly the same performance as removing the <code>vec.push(c)</code> line in the imperative approach:</p>\n\n<pre><code>test tests::bench_collatz_imperative ... bench:         162 ns/iter (+/- 6)\ntest tests::bench_collatz_iterators  ... bench:         163 ns/iter (+/- 4)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473142131, "post_id": 39337894, "comment_id": 66013982, "body": "I&#39;m not bent on having a functional implementation - I just remembered having implemented it in Haskell this way and wanted to try the same approach in Rust. Of course it&#39;s not exactly the Rust-y way, but I wanted to know the reason behind the difference in performance. Unwinding seems to be the answer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473146101, "post_id": 39337894, "comment_id": 66015933, "body": "I think it&#39;s a common issue with C++ as well: landing pads/destructors prevent tail-recursion from kicking in, which is a problem GC&#39;ed languages do not have."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 4, "last_activity_date": 1473111928, "last_edit_date": 1473111928, "creation_date": 1473110967, "answer_id": 39337894, "question_id": 39333454, "link": "https://stackoverflow.com/questions/39333454/collatz-conjecture-in-rust-functional-v-imperative-approach/39337894#39337894", "title": "Collatz conjecture in Rust: functional v imperative approach", "body": "<p>This is going to contain some implementation details of why <code>unfoldr</code> is a bit slow.</p>\n\n<p>I proposed a different variant, and @breeden helped me verify that it is an improvement that makes it match the performance imperative variant. It does preserve the recursion, but we can't call it functional anymore.. [^1]</p>\n\n<pre><code>fn unfoldr2&lt;F, T&gt;(foo: F, seed: T, vec: &amp;mut Vec&lt;T&gt;)\n    where F: Fn(T) -&gt; Option&lt;(T, T)&gt;\n{\n    if let Some((x, y)) = foo(seed) {\n        vec.push(x);\n        unfoldr2(foo, y, vec)\n    }\n}\n\nfn collatz_next(n: u64) -&gt; u64 {\n    if n % 2 == 0 { n / 2 } else { 3 * n + 1 }\n}\n\npub fn collatz_seq_f(n: u64) -&gt; Vec&lt;u64&gt; {\n    let mut v = Vec::new();\n    unfoldr2(|n| if n == 1 { None } else { Some((n, collatz_next(n))) }, n, &amp;mut v);\n    v\n}\n</code></pre>\n\n<p>The difference here will illustrate what \u201cwent wrong\u201d with the first version. In <code>unfoldr</code>, there is a vec value being carried around, and in <code>unfoldr2</code> there is just a mutable reference to a vector instead.</p>\n\n<p>The vec value has an effect in <code>unfoldr</code> and you discovered it limited the compiler: unwinding. Unwinding is what happens if a function panics. If it unwinds through the <code>unfoldr</code> function, all local variables must be dropped, and that means <code>vec</code>. Some special code is inserted to deal with this (called a \u201clanding pad\u201d) and function calls that may panic insert an instruction to divert to the landing pad on panic.</p>\n\n<p>So in <code>unfoldr</code>:</p>\n\n<ol>\n<li>There's a local variable that has a destructor, <code>vec</code></li>\n<li>There's a function call that may panic (<code>vec.push</code> panics on capacity overflow)</li>\n<li>There's a landing pad that drops <code>vec</code> and resumes unwinding</li>\n</ol>\n\n<p>Additionally, there's code to move the Vec value around. (It is copied to the stack to be available for the landing pad code).</p>\n\n<p><code>unfoldr2</code> doesn't get any magic recursion-into-just-a-loop optimization or so, but it still has less code because it has no need to handle unwinding or move the Vec.</p>\n\n<p>[^1]: Can we salvage the functional-ness by imagining the vec.push(x) as being an interface to a stream / generator / outputiterator, or just be a callback?</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 383, "favorite_count": 0, "accepted_answer_id": 39337894, "answer_count": 2, "score": 7, "last_activity_date": 1473181699, "creation_date": 1473088245, "last_edit_date": 1473093618, "question_id": 39333454, "link": "https://stackoverflow.com/questions/39333454/collatz-conjecture-in-rust-functional-v-imperative-approach", "title": "Collatz conjecture in Rust: functional v imperative approach", "body": "<p>I wanted to play around with some good old <a href=\"https://en.wikipedia.org/wiki/Collatz_conjecture\">Collatz conjecture</a> and decided that it would be fun to do it in a (very) functional style, so I implemented an <code>unfoldr</code> function, close to the one <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.9.0.0/Data-List.html#v:unfoldr\">Haskell has</a>:</p>\n\n<pre><code>fn unfoldr&lt;F, T&gt;(foo: F, seed: T, mut vec: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt;\n    where F: Fn(T) -&gt; Option&lt;(T, T)&gt;\n{\n    if let Some((x, y)) = foo(seed) {\n        vec.push(x);\n        unfoldr(foo, y, vec)\n    } else {\n        vec\n    }\n}\n</code></pre>\n\n<p>The rest was pretty straightforward:</p>\n\n<pre><code>fn collatz_next(n: u64) -&gt; u64 {\n    if n % 2 == 0 { n / 2 } else { 3 * n + 1 }\n}\n\npub fn collatz_seq_f(n: u64) -&gt; Vec&lt;u64&gt; {\n    unfoldr(|n| if n == 1 { None } else { Some((n, collatz_next(n))) }, n, Vec::new())\n}\n</code></pre>\n\n<p>With <code>collatz_seq_f</code> returning a <code>Vec</code>tor with the sequence starting with a given number <code>n</code>.</p>\n\n<p>I wondered, however, if Rust approves of this style, and implemented an simple imperative counterpart:</p>\n\n<pre><code>pub fn collatz_seq_i(n: u64, mut vec: Vec&lt;u64&gt;) -&gt; Vec&lt;u64&gt; {\n    let mut c = n;\n    while c != 1 {\n        vec.push(c);\n        c = collatz_next(c);\n    }\n    vec\n}\n</code></pre>\n\n<p>And compared them with <code>cargo bench</code> (0.13.0-nightly (2ef3cde 2016-09-04)). I was a bit disappointed that my fun <code>unfoldr</code> approach was only half as fast as the imperative implementation:</p>\n\n<pre><code>running 3 tests\ntest tests::it_works ... ignored\ntest tests::bench_collatz_functional ... bench:         900 ns/iter (+/- 47)\ntest tests::bench_collatz_imperative ... bench:         455 ns/iter (+/- 29)\n\ntest result: ok. 0 passed; 0 failed; 1 ignored; 2 measured\n</code></pre>\n\n<p>I know that the <code>unfoldr</code> version is more abstract, but I didn't expect that much of a difference; is there anything that I could change to make it faster?</p>\n\n<p>Full code below:</p>\n\n<pre><code>#![feature(test)]\n\nextern crate test;\n\nfn unfoldr&lt;F, T&gt;(foo: F, seed: T, mut vec: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt;\n    where F: Fn(T) -&gt; Option&lt;(T, T)&gt;\n{\n    if let Some((x, y)) = foo(seed) {\n        vec.push(x);\n        unfoldr(foo, y, vec)\n    } else {\n        vec\n    }\n}\n\nfn collatz_next(n: u64) -&gt; u64 {\n    if n % 2 == 0 { n / 2 } else { 3 * n + 1 }\n}\n\npub fn collatz_seq_f(n: u64) -&gt; Vec&lt;u64&gt; {\n    unfoldr(|n| if n == 1 { None } else { Some((n, collatz_next(n))) }, n, Vec::new())\n}\n\npub fn collatz_seq_i(n: u64, mut vec: Vec&lt;u64&gt;) -&gt; Vec&lt;u64&gt; {\n    let mut c = n;\n    while c != 1 {\n        vec.push(c);\n        c = collatz_next(c);\n    }\n    vec\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use test::Bencher;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(110, collatz_seq_f(27).len());\n        assert_eq!(110, collatz_seq_i(27, Vec::new()).len());\n    }\n\n    #[bench]\n    fn bench_collatz_functional(b: &amp;mut Bencher) {\n        b.iter(|| collatz_seq_f(27));\n    }\n\n    #[bench]\n    fn bench_collatz_imperative(b: &amp;mut Bencher) {\n        b.iter(|| collatz_seq_i(27, Vec::new()));\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "heap-memory", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1473082692, "post_id": 39331767, "comment_id": 65995095, "body": "<i>This means that when you use <code>boxed_slice.as_mut_ptr()</code>, you are essentially returning a pointer to freed memory</i>... actually I was using <code>mem::forget</code>, but this isn&#39;t important."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1473082755, "post_id": 39331767, "comment_id": 65995141, "body": "Can you link me to a reference of such memory layout? <code>Box::into_raw</code> will return a pointer to the first element? If this is true, my question is answered and I don&#39;t need to ask anything else."}, {"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 1, "creation_date": 1473084976, "post_id": 39331767, "comment_id": 65996435, "body": "&quot;Slices are a view into a block of memory represented as a pointer and a length.&quot; <a href=\"https://doc.rust-lang.org/std/slice/\" rel=\"nofollow noreferrer\">doc</a>. Memory layout of slice data is unspecified. You need to call <code>as_mut_ptr</code> on the slice to get valid pointer to data."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1473089850, "post_id": 39331767, "comment_id": 65998953, "body": "@vinipsmaker: You might want to <a href=\"https://github.com/rust-lang/rust/issues\" rel=\"nofollow noreferrer\">file an issue</a> (if there isn&#39;t one already) to ask for the documentation to be clarified."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1473082365, "creation_date": 1473082365, "answer_id": 39331767, "question_id": 39331341, "link": "https://stackoverflow.com/questions/39331341/how-to-pass-a-boxed-slice-boxt-to-a-c-function/39331767#39331767", "title": "How to pass a boxed slice (`Box&lt;[T]&gt;`) to a C function?", "body": "<p><code>Box::into_raw</code> returns a pointer to the beginning of the allocated storage. A slice is a contiguous sequence of items in memory. Therefore, the pointer points to the first item in the slice. If <code>Box::into_raw</code> returned anything else, it wouldn't be really useful.</p>\n\n<p>The main difference between <code>boxed_slice.as_mut_ptr()</code> and <code>Box::into_raw</code> is that <code>Box::into_raw</code> takes ownership of the box but does not deallocate it, while <code>boxed_slice.as_mut_ptr()</code> just returns a copy of the pointer and leaves ownership of the <code>Box</code> to your function, so the compiler implicitly drops it before returning. This means that when you use <code>boxed_slice.as_mut_ptr()</code>, you are essentially returning a pointer to freed memory!</p>\n"}], "owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 779, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1473082365, "creation_date": 1473081026, "question_id": 39331341, "link": "https://stackoverflow.com/questions/39331341/how-to-pass-a-boxed-slice-boxt-to-a-c-function", "title": "How to pass a boxed slice (`Box&lt;[T]&gt;`) to a C function?", "body": "<p>I want to expose a \"dynamic array\" to a C function. The C function will own the data and later will call a function of mine to free the data. So it'll look something like the following:</p>\n\n<pre><code>fn get_something(len: *mut usize) -&gt; *mut u8;\nfn dealloc_something(data: *mut u8, len: usize);\n</code></pre>\n\n<p>Internally I have a <code>Box&lt;[T]&gt;</code> (<code>my_vec.to_boxed_slice()</code>). I can get the size/length pretty easily, but I don't know which pointer I should return. If I pass the pointer returned from <code>boxed_slice.as_mut_ptr()</code> to <code>Box::from_raw()</code>, the application crashes. However, if I pass the pointer returned from <code>Box::into_raw</code>, I can't find a guarantee of memory layout (the pointer points to the first element of the array and will continue to do so for all future Rust versions).</p>\n\n<p>What's the solution here?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1473069240, "post_id": 39327859, "comment_id": 65987524, "body": "Also: your example has more details than it needs to have. You could just replace those <code>calc</code> and <code>refine</code> methods by comments explaining what happens. The loop isn&#39;t really necessary either. See <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 4, "creation_date": 1473069689, "post_id": 39327859, "comment_id": 65987789, "body": "I guess a good question would be: &quot;I&#39;ve googled and found <code>mem::swap()</code>. But I&#39;m not sure if it swaps the contents of my vectors or just the pointers, like in my C-example.&quot;"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473069841, "post_id": 39327859, "comment_id": 65987862, "body": "Yes, I had read about <code>mem::swap()</code> and used it in some cases, but its wording and example doesn&#39;t make it totally clear that for large data-structures, the constant doesn&#39;t isn&#39;t swapped. (shows 2 int&#39;s being swapped). For example, the docs say <i>&quot;Swap the values at two mutable locations of the same type, without deinitializing or copying either one.&quot;</i> - It would be possible to write a swap function that fits this description, that swaps data byte by byte (just without running a Copy)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473070436, "post_id": 39327859, "comment_id": 65988173, "body": "@LukasKalbertodt, you&#39;re probably right, in this case I wasn&#39;t sure how much to simplify, sometimes when over-simplifying, it makes it un-clear why an operation is being done and answers may not fit the actual use-case. - for example, shadowing could be used to swap variables if it wasn&#39;t in a nested scope."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1473069271, "last_edit_date": 1473069271, "creation_date": 1473068882, "answer_id": 39327911, "question_id": 39327859, "link": "https://stackoverflow.com/questions/39327859/how-to-swap-variables-pointing-to-data-without-swapping-their-content/39327911#39327911", "title": "How to swap variables pointing to data, without swapping their content?", "body": "<p>Rust has a <code>std::mem</code> module containing a number of functions for such use cases.</p>\n\n<p>In this case you are interested in <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow\"><code>std::mem::swap</code></a>, which exchanges the content of two given objects.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1581157371, "last_edit_date": 1581157371, "creation_date": 1473076187, "answer_id": 39329993, "question_id": 39327859, "link": "https://stackoverflow.com/questions/39327859/how-to-swap-variables-pointing-to-data-without-swapping-their-content/39329993#39329993", "title": "How to swap variables pointing to data, without swapping their content?", "body": "<p>The function <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\"><code>std::mem::swap</code></a> is doing exactly what you want. Take this example:</p>\n\n<pre><code>let mut a = vec![/* fill this vector */];\nlet mut b = Vec::new();\n\nloop {\n    // do something ...\n\n    std::mem::swap(&amp;mut a, &amp;mut b);\n}\n</code></pre>\n\n<p><code>swap</code> doesn't touch the vectors' contents at all. It just swaps the raw bytes on the stack (this includes the pointer to the data as well as the length and capacity field). It really is \"swapping names\".</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1078, "favorite_count": 0, "accepted_answer_id": 39329993, "answer_count": 2, "score": 2, "last_activity_date": 1581157371, "creation_date": 1473068713, "last_edit_date": 1473070581, "question_id": 39327859, "link": "https://stackoverflow.com/questions/39327859/how-to-swap-variables-pointing-to-data-without-swapping-their-content", "title": "How to swap variables pointing to data, without swapping their content?", "body": "<p>Is it possible in Rust to swap 2 vectors (without shadowing previous variables), by making them point to each-others in-memory representation?</p>\n\n<p>I'm porting some code from C, which is quite straightforward when dealing with pointers. </p>\n\n<p>Pseudo-code (C-like):</p>\n\n<pre><code>float *a = malloc(size);\nfloat *b = malloc(size);\n\nerror = calc_params(curve, a);\nfor (i = 0; i &lt; REFINE_ITER_MAX; i++) {\n    /* reads 'a', refines to 'b' */\n    calc_params_refine(curve, a, b);\n    error_test = calc_params(curve, a);\n    if (error_test &lt; error) {\n        /* How to do this in Rust??? */\n        float *swap = a;\n        a = b;\n        b = swap;\n    }\n    else {\n        break;\n    }\n}\n</code></pre>\n\n<p>The code above refines one array into another, using source/destination arrays which are swapped each step.</p>\n\n<p>Given two vectors which are the same length and use primitive types (<code>float</code>/<code>i32</code>/<code>usize</code>... etc), how would this be done in Rust?</p>\n\n<hr>\n\n<p>From reading <code>mem::swap()</code> documentation, its not clear to me how this applies to <code>Vec</code> types: <em>\"Swap the values at two mutable locations of the same type, without deinitializing or copying either one.\"</em></p>\n\n<p>For all I know, the vectors could be resized in-place and data copied between them - while still fitting the description given.</p>\n"}, {"tags": ["c", "struct", "binding", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "edited": false, "score": 0, "creation_date": 1473072462, "post_id": 39327849, "comment_id": 65989214, "body": "I liked the first version, so I have not tried. What about the second version - if Vec&lt;Entity&gt; would be owned by ListEntity then ever modification of Vec will cause of dropping ListEntity."}, {"owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "reply_to_user": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "edited": false, "score": 0, "creation_date": 1473072986, "post_id": 39327849, "comment_id": 65989495, "body": "@saruman9 If the <code>Vec</code> is owned by <code>ListEntity</code> and visible outside by a reference, then <code>Vec</code> can&#39;t outlive it - that&#39;s guaranteed by Rust. If you need the <code>Vec</code> to be mutable, then I&#39;d rather not use it at all, but implement the necessary traits on <code>ListEntity</code> itself. The problem here is that the <code>Vec</code> and the underlying structures would need to be modified in sync, which is quite difficult to do."}, {"owner": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "edited": false, "score": 0, "creation_date": 1473082062, "post_id": 39327849, "comment_id": 65994730, "body": "I implement transmute in <code>Deref</code> trait from array <code>UdbEntity</code> to <code>Entity</code> (with <code>PhantomData</code>, because keep simple reference of <code>Entity</code> is hard for work with some FFI functions). With <code>ListEntity</code> this work now. I will try implement <code>ListReference</code> too."}], "tags": [], "owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "is_accepted": true, "score": 1, "last_activity_date": 1473123659, "last_edit_date": 1473123659, "creation_date": 1473068646, "answer_id": 39327849, "question_id": 39325701, "link": "https://stackoverflow.com/questions/39325701/how-to-implement-rust-struct-and-methods-as-vec-from-c-without-leaking-memory/39327849#39327849", "title": "How to implement Rust struct and methods as Vec from C without leaking memory?", "body": "<p>The problem is that you have two rather disjoint structures in your code. On the one hand, you have a <code>ListEntity</code> which owns a raw array of <code>UdbEntity</code> and frees it when required, on the other hand you have an <code>Entity</code> which wraps the <code>UdbEntity</code>, but is not in any way referenced in <code>ListEntity</code>.</p>\n\n<p>You have two options here.</p>\n\n<ol>\n<li>Transmute an array of <code>UdbEntity</code> into an array of <code>Entity</code>, in which case you will be able to create slices of it. To do that, they need to have the same in-memory representation.</li>\n<li>Create a vector of <code>Entity</code> separately from <code>UdbEntity</code> and return them instead.</li>\n</ol>\n\n<p>Assuming the first approach is safe, I would go with that. If not, then the second one can work. In both cases arrays of <code>Entity</code> should be owned by <code>ListEntity</code>so that the memory is properly managed. I would probably ditch the <code>PhantomData</code> in <code>Entity</code> and simply return references to them.</p>\n"}], "owner": {"reputation": 33, "user_id": 2329104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9557c822eac4aaa7a776fbbff26d16db?s=128&d=identicon&r=PG", "display_name": "saruman9", "link": "https://stackoverflow.com/users/2329104/saruman9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 263, "favorite_count": 0, "accepted_answer_id": 39327849, "answer_count": 1, "score": 3, "last_activity_date": 1473123659, "creation_date": 1473060598, "last_edit_date": 1473123632, "question_id": 39325701, "link": "https://stackoverflow.com/questions/39325701/how-to-implement-rust-struct-and-methods-as-vec-from-c-without-leaking-memory", "title": "How to implement Rust struct and methods as Vec from C without leaking memory?", "body": "<p>I'm writing Rust <a href=\"http://gitlab.com/saruman9/rust-understand\" rel=\"nofollow\">bindings</a> for a C library which uses an embedded constructor and destructor. Raw Rust code of C header:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Opaque structures transform to enumerate\npub enum UdbEntity_ {}\npub enum UdbReference_ {}\n...\npub type UdbEntity    = *mut UdbEntity_;\npub type UdbReference = *mut UdbReference_;\n...\n\n// Return a non-allocated, permanent list of all entities. This list may be\n// used in places where an allocated entity list is required and may be\n// safely passed to udbListEntityFree().\npub fn udbListEntity(list: *mut *mut UdbEntity, items: *mut c_int);\n\n// Free an allocated list of entities.\npub fn udbListEntityFree(list: *mut UdbEntity);\n...\n\n// Return an allocated list of all references for entity.\n// Free the list with udbListReferenceFree().\npub fn udbListReference(entity : UdbEntity,\n                        refs   : *mut *mut UdbReference,\n                        items  : *mut c_int);\n\n// Free the allocated references list.\npub fn udbListReferenceFree(refs: *mut UdbReference);\n</code></pre>\n\n<p>This is implementation of safe Rust code as in <a href=\"https://github.com/alexcrichton/git2-rs/\" rel=\"nofollow\">git2-rs</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// Structure of Entity.\npub struct Entity&lt;'ents&gt; {\n    raw: UdbEntity,\n    _marker: PhantomData&lt;&amp;'ents UdbEntity&gt;,\n}\n\n/// Opaque structure of list of entities.\npub struct ListEntity&lt;'db&gt; {\n    raw: *mut UdbEntity,\n    len: usize,\n    _marker: PhantomData&lt;&amp;'db Db&gt;,\n}\n\n/// An iterator over the Entity in list of entities.\npub struct EntityIter&lt;'ents&gt; {\n    range: Range&lt;usize&gt;,\n    ents: &amp;'ents ListEntity&lt;'ents&gt;,\n}\n\nimpl&lt;'db&gt; Drop for ListEntity&lt;'db&gt; {\n    fn drop(&amp;mut self) {\n        unsafe { udbListEntityFree(self.raw) };\n    }\n}\n</code></pre>\n\n<p>And for <code>ListReference</code> and <code>Reference</code> too.</p>\n\n<p>I need to work with <code>ListEntity</code> as with <code>Vec&lt;Entity&gt;</code> (iterators, slices for sorting and etc.), but I can't implement it. In my versions of implementing I can't create slices: <code>from_raw_parts</code> returns slices over <code>UdbEntity</code>, not <code>Entity</code>.</p>\n\n<p>When I keep <code>Vec&lt;Entity&gt;</code> in <code>EntityList</code> and later when I edit <code>Vec&lt;Entity&gt;</code> (moving it), <code>EntityList</code> is dropped and frees the allocated list <code>*mut UdbEntity</code>. I need correct lifetimes too.</p>\n\n<p>I reversed some simple structs (<code>Kind</code>, <code>ListKind</code> for example) for writing pure Rust code, but I think a more idiomatic path exists.</p>\n"}, {"tags": ["arrays", "iterator", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1473056589, "post_id": 39324463, "comment_id": 65981443, "body": "ret should be mutable and you don&#39;t need to return it explicitly; just &quot;ret&quot; in the last line works just fine."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473056502, "post_id": 39324625, "comment_id": 65981420, "body": "Though it works, I would not call it a best practice in Rust."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1473079331, "post_id": 39324625, "comment_id": 65993198, "body": "Using a direct assignment is only safe for types that don&#39;t implement <code>Drop</code> (otherwise, the destructor will be called on an uninitialized value!). In general, <code>ptr::write</code> should be used to assign a value to an uninitialized memory location."}], "tags": [], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "is_accepted": false, "score": 1, "last_activity_date": 1473054907, "creation_date": 1473054907, "answer_id": 39324625, "question_id": 39324463, "link": "https://stackoverflow.com/questions/39324463/how-to-best-return-a-fixed-size-array-without-creating-one-with-dummy-values-or/39324625#39324625", "title": "How to best return a fixed size array without creating one with dummy values or manual unrolling?", "body": "<p>If you're okay using an unsafe block, you can do:</p>\n\n<pre><code>fn foo(u: f64) -&gt; [f64; 3] {\n    let mut ret : [f64; 3] = unsafe { std::mem::uninitialized() };\n    for i in 0..3 {\n        ret[i] = some_calculation(u, i);\n    }\n    return ret;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1473059890, "last_edit_date": 1495540305, "creation_date": 1473059890, "answer_id": 39325537, "question_id": 39324463, "link": "https://stackoverflow.com/questions/39324463/how-to-best-return-a-fixed-size-array-without-creating-one-with-dummy-values-or/39325537#39325537", "title": "How to best return a fixed size array without creating one with dummy values or manual unrolling?", "body": "<p>Arrays in Rust are always initialized: <a href=\"https://doc.rust-lang.org/reference.html#array-and-slice-types\" rel=\"nofollow noreferrer\">Rust reference</a>, <a href=\"https://stackoverflow.com/questions/29570607/is-there-a-good-way-to-convert-a-vect-to-an-array\">SO question on converting Vecs to arrays</a>, so this shouldn't be a concern (especially if you are after the best Rust practice).</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473066889, "post_id": 39327133, "comment_id": 65986125, "body": "Agree <code>unsafe</code> in this case would be a last resort <i>(or only to use in isolated cases when it can be proven to make a tangible difference)</i>.  However AFAICS <code>unsafe</code> isn&#39;t necessarily the only way. It <i>should</i> be possible to use a macro that unrolls an expression into an one that initializes all elements of the array, eg: <code>[unroll_n!(some_expr(i), i, 3)]</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473068640, "post_id": 39327133, "comment_id": 65987158, "body": "@ideasman42: We would need a macro wizard for a definite answer, but I am not sure that it is actually feasible to instruct a macro to repeat a piece of code X number of times. The variable construct (<code>*</code>) expands as many times as the arguments did, which require the caller to pass as many arguments as necessary (workable for 3, but for 42 it&#39;s annoying)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473079255, "post_id": 39327133, "comment_id": 65993151, "body": "@ideasman42: (Note: in the comment above I purposely ignored the idea of using pattern-matching in the macro implementation and special-casing a small number of array sizes, however it would obviously be a possibility)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473080928, "post_id": 39327133, "comment_id": 65994092, "body": "Attempt at macro (failed): <a href=\"https://play.rust-lang.org/?gist=338ea1e7655bcfdea8d7e8b24dc5fe61&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1473066211, "creation_date": 1473066211, "answer_id": 39327133, "question_id": 39324463, "link": "https://stackoverflow.com/questions/39324463/how-to-best-return-a-fixed-size-array-without-creating-one-with-dummy-values-or/39327133#39327133", "title": "How to best return a fixed size array without creating one with dummy values or manual unrolling?", "body": "<p>Rust guarantees memory safety in its default mode (outsides <code>unsafe</code> blocks).</p>\n\n<p>In order to do so, it <em>must</em> guarantee that no uninitialized memory is ever accessed, which translates (for arrays) in guaranteeing that they are fully initialized no matter what happens.</p>\n\n<p>A clever analysis could check that your loop will fully initialize it, but would probably not be able to prove it works in more complicated cases, so the experience would be inconsistent, and jarring when a simple change in the function would suddenly cause you to have to come back to the array and fully initialize it now that the compiler can no longer prove it works.</p>\n\n<p>So, instead, Rust took the following approach:</p>\n\n<ol>\n<li>Ask the user to fully initialise the array (by providing a copyable value)</li>\n<li>Rely on the optimizer to eliminate redundant writes</li>\n</ol>\n\n<p>In case the second step fails in a particular setup, a user can use <code>unsafe { std::men::uninitialized() }</code> to tell the compiler that it takes it upon itself to guarantee it is fully initialized.</p>\n\n<p>This approach is always safe, often as fast, ... and incredibly annoying when you are unfortunate enough not to be working with a <code>Copy</code> type. In this latter case, a simple strategy is to first build a <code>Vec</code>, and then move its elements into an array with a simple <code>for</code> loop, hopefully the optimizer should elide all the unnecessary stuff afterward.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 325, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1473123410, "creation_date": 1473053811, "last_edit_date": 1473123410, "question_id": 39324463, "link": "https://stackoverflow.com/questions/39324463/how-to-best-return-a-fixed-size-array-without-creating-one-with-dummy-values-or", "title": "How to best return a fixed size array without creating one with dummy values or manual unrolling?", "body": "<p>Sometimes its useful to create new values for a fixed size array in a loop:</p>\n\n<pre><code>fn foo(u: f64) -&gt; [f64; 3] {\n    let mut ret = [-1.0; 3];  // -1 is never used!\n    for i in 0..3 {\n        ret[i] = some_calculation(u, i);\n    }\n    return ret;\n}\n</code></pre>\n\n<p>While this works, it's a bit weak to create an array filled with a value which is never used.</p>\n\n<p>An alternative is to manually unroll, but this isn't so nice for larger fixed sized arrays or when the expression is more involved then the example given:</p>\n\n<pre><code>fn foo(u: f64) -&gt; [f64; 3] {\n    return [\n        some_calculation(u, 0),\n        some_calculation(u, 1),\n        some_calculation(u, 2),\n    ];\n}\n</code></pre>\n\n<p>Does Rust provide a way to do something roughly equivalent Python's list comprehension?</p>\n\n<pre><code>fn foo(u: f64) -&gt; [f64; 3] {\n    return [some_calculation(u, i) for i in 0..3];\n}\n</code></pre>\n\n<p>I am a beginner who has very little experience with iterators.</p>\n"}, {"tags": ["rust", "preprocessor"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1473063624, "last_edit_date": 1473063624, "creation_date": 1473061651, "answer_id": 39325952, "question_id": 39323418, "link": "https://stackoverflow.com/questions/39323418/how-to-dump-a-complete-list-of-compiler-attributes-in-rust/39325952#39325952", "title": "How to dump a complete list of compiler attributes in Rust?", "body": "<p><code>rustc -W help</code> will give you a list of rustc lint checks and their defaults, but it doesn't contain conditional compilation attributes; the link you referenced appears to provide their comprehensive list, but if you're not sure it is up to date, you can check <a href=\"https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src/librustc/session/config.rs#L942\" rel=\"nofollow\">the source</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "accepted_answer_id": 39325952, "answer_count": 1, "score": 0, "last_activity_date": 1473123342, "creation_date": 1473045027, "last_edit_date": 1495542374, "question_id": 39323418, "link": "https://stackoverflow.com/questions/39323418/how-to-dump-a-complete-list-of-compiler-attributes-in-rust", "title": "How to dump a complete list of compiler attributes in Rust?", "body": "<p>While some compiler attributes are <a href=\"https://doc.rust-lang.org/reference.html#conditional-compilation\" rel=\"nofollow noreferrer\">documented here</a>, is it possible to get a complete list of all attributes from Rust, including those defined by the build environment? Something similar to <a href=\"https://stackoverflow.com/questions/2224334/gcc-dump-preprocessor-defines\"><code>gcc -dM -E</code></a>.</p>\n"}, {"tags": ["design-patterns", "rust", "lazy-loading", "object-lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473024020, "post_id": 39321563, "comment_id": 65975125, "body": "<a href=\"http://stackoverflow.com/q/32300132/155423\">stackoverflow.com/q/32300132/155423</a>; <a href=\"http://stackoverflow.com/q/29893978/155423\">stackoverflow.com/q/29893978/155423</a>; many others (search circular reference, parent reference, etc.)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473024049, "post_id": 39321563, "comment_id": 65975131, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>."}], "owner": {"reputation": 1, "user_id": 6428349, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/457cceb4ff41dd9176aa88e5275c19ab?s=128&d=identicon&r=PG&f=1", "display_name": "C. Lind", "link": "https://stackoverflow.com/users/6428349/c-lind"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 23, "favorite_count": 0, "closed_date": 1473024027, "answer_count": 0, "score": 0, "last_activity_date": 1473023900, "creation_date": 1473023771, "last_edit_date": 1473023900, "question_id": 39321563, "link": "https://stackoverflow.com/questions/39321563/outer-object-owning-referencing-inner-object", "closed_reason": "Duplicate", "title": "Outer object owning referencing inner object", "body": "<p>I need two objects; one object is a container which owns the second object.</p>\n\n<pre><code>struct OuterObject {\n    foo: InnerObject,\n}\n\nimpl OuterObject {\n    /// Creates a new instance of OuterObject\n    fn new() -&gt; OuterObject {\n        OuterObject {\n            foo: InnerObject::new(false),\n        }\n    }\n\n    /// Returns a mutable reference to the InnerObject\n    fn get_foo(&amp;mut self) -&gt; &amp;mut InnerObject {\n        self.foo\n    }\n}\n\nstruct InnerObject {\n    baz: bool,\n}\n\nimpl InnerObject {\n    /// Creates a new instance of InnerObject\n    fn new(baz: bool) -&gt; InnerObject {\n        InnerObject {\n            baz: baz,\n        }\n    }\n}\n</code></pre>\n\n<p>So far so good. But my <code>InnerObject</code> needs a way to reference the <code>OuterObject</code> that owns it.  This means I should pass a reference to the <code>OuterObject</code> into the <code>InnerObject</code>'s constructor.  But this means the <code>OuterObject</code>'s constructor doesn't compile, since <code>self</code> cannot be referenced in a constructor:</p>\n\n<pre><code>struct OuterObject {\n    foo: InnerObject,\n    vorg: u8,\n}\n\nimpl OuterObject {\n    /// Creates a new instance of OuterObject\n    fn new() -&gt; OuterObject {\n        OuterObject {\n            foo: InnerObject::new(&amp;self, false), // fails; 'self' cannot be referenced in constructor\n            vorg: 1,\n        }\n    }\n\n    /// Returns a mutable reference to the InnerObject\n    fn get_foo(&amp;mut self) -&gt; &amp;mut InnerObject {\n        self.foo\n    }\n\n    /// Returns OuterObject's vorg value\n    fn get_vorg(&amp;self) -&gt; u8 {\n        self.vorg\n    }\n}\n\nstruct InnerObject {\n    blah: &amp;OuterObject\n    baz: bool,\n}\n\nimpl InnerObject {\n    fn new(blah: &amp;OuterObject, baz: bool) -&gt; InnerObject {\n        InnerObject {\n            blah: blah,\n            baz: baz,\n        }\n    }\n\n    /// Calculates something based on the state of the OuterObject that owns this InnerObject\n    fn calculate_something(&amp;self) -&gt; u8 {\n        self.blah.get_vorg() + 2\n    }\n}\n</code></pre>\n\n<p>Next plan: Since I can't reference <code>self</code> in a constructor, I attempted to use lazy loading instead:</p>\n\n<pre><code>struct OuterObject {\n    foo: Option&lt;InnerObject&gt;,\n    vorg: u8,\n}\n\nimpl OuterObject {\n    /// Creates a new instance of OuterObject\n    fn new() -&gt; OuterObject {\n        OuterObject {\n            foo: None,\n            vorg: 1,\n        }\n    }\n\n    /// Returns a mutable reference to the InnerObject\n    fn get_foo(&amp;mut self) -&gt; &amp;mut InnerObject {\n        // lazy-loads the object\n        if self.foo.is_none() {\n            self.foo = Some(InnerObject::new(&amp;self, false));\n        }\n        self.foo.as_mut().unwrap() // should always be safe\n    }\n\n    /// Returns OuterObject's vorg\n    fn get_vorg(&amp;self) -&gt; u8 {\n        self.vorg\n    }\n}\n\nstruct InnerObject {\n    blah: &amp;OuterObject\n    baz: bool,\n}\n\nimpl InnerObject {\n    fn new(blah: &amp;OuterObject, baz: bool) -&gt; InnerObject {\n        InnerObject {\n            blah: blah,\n            baz: baz,\n        }\n    }\n\n    /// Calculates something based on the state of the OuterObject that owns this InnerObject\n    fn calculate_something(&amp;self) -&gt; u8 {\n        self.blah.get_vorg() + 2\n    }\n}\n</code></pre>\n\n<p>Now the compiler is concerned about lifetimes.  I have had difficulty finding documentation of how to indicate a lifetime of an object inside of an <code>Option</code>.  For instance, if it I write it this way, the compiler things that <code>InnerObject</code> needs to be a trait:</p>\n\n<pre><code>Option&lt;InnerObject + 'a&gt;\n</code></pre>\n\n<p>1) Is the desired relationship between <code>OuterObject</code> and <code>InnerObject</code> doomed to failure?</p>\n\n<p>2) If not, is there a different design pattern I should be using?</p>\n\n<p>3) If the design pattern I am pursuing is workable, how do I make it work?</p>\n"}, {"tags": ["concurrency", "thread-safety", "rust", "seccomp"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1473012262, "post_id": 39319835, "comment_id": 65971935, "body": "Have you read <a href=\"https://doc.rust-lang.org/book/concurrency.html\" rel=\"nofollow noreferrer\">the Rust book on Concurrency</a>? Thread safety is already guaranteed by the compiler when not writing unsafe statements."}, {"owner": {"reputation": 682, "user_id": 3637203, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f69bafb4d5a081f4e938454f9a125c15?s=128&d=identicon&r=PG&f=1", "display_name": "user3637203", "link": "https://stackoverflow.com/users/3637203/user3637203"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1473013369, "post_id": 39319835, "comment_id": 65972248, "body": "I know, but I want a safety net."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1473013498, "post_id": 39319835, "comment_id": 65972286, "body": "A &quot;safety net&quot;? What exactly would that be, and how would it fill a gap in Rust concurrent programming?"}, {"owner": {"reputation": 682, "user_id": 3637203, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f69bafb4d5a081f4e938454f9a125c15?s=128&d=identicon&r=PG&f=1", "display_name": "user3637203", "link": "https://stackoverflow.com/users/3637203/user3637203"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1473017053, "post_id": 39319835, "comment_id": 65973324, "body": "What if there is a bug in Rust&#39;s libstd. Then you can actually get a buffer overflow."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1473017247, "post_id": 39319835, "comment_id": 65973389, "body": "Now you&#39;re just speaking of an extremely unlikely use case that no one would have thought of without it having mentioned in the question. Try to be more specific. Perhaps if you narrow it down to &quot;using seccomp for sandboxing a server in Rust&quot;, you might get an answer. Have you also tried anything before asking?"}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1473024181, "last_edit_date": 1473024181, "creation_date": 1473022457, "answer_id": 39321416, "question_id": 39319835, "link": "https://stackoverflow.com/questions/39319835/process-isolation-in-rust/39321416#39321416", "title": "Process Isolation in Rust", "body": "<p>If you're concerned about issues beyond what Rust's strong safety and type system can protect against (e.g. bugs in those, or in third-party libraries etc.) then you really want separate processes rather than just threads; even if you use seccomp on an untrusted thread, at the OS/CPU level it still has full write access to other threads' memory in the same process.</p>\n\n<p>Either way you'll need to write code designed to run in seccomp carefully (for example allocating extra heap memory might not work) - but the good news is that Rust is a great language for having that control!</p>\n\n<p>There's a reasonably useful <a href=\"https://users.rust-lang.org/t/using-linux-seccomp-sandboxing-properly/6867\" rel=\"nofollow\">discussion on seccomp in Rust</a> which has some suggestions.</p>\n\n<p>The best bet looks like <a href=\"https://github.com/servo/gaol\" rel=\"nofollow\">gaol</a> from the Servo project, which is a more general process sandbox (including seccomp).  There are also some other lower level seccomp wrappers like <a href=\"https://github.com/thestinger/rust-seccomp\" rel=\"nofollow\">this one</a>.</p>\n\n<p>I haven't tried any of this yet, so I'd be interested to hear any other viewpoints/experience.</p>\n"}], "owner": {"reputation": 682, "user_id": 3637203, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f69bafb4d5a081f4e938454f9a125c15?s=128&d=identicon&r=PG&f=1", "display_name": "user3637203", "link": "https://stackoverflow.com/users/3637203/user3637203"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 254, "favorite_count": 0, "accepted_answer_id": 39321416, "answer_count": 1, "score": 3, "last_activity_date": 1473024181, "creation_date": 1473011456, "last_edit_date": 1473024108, "question_id": 39319835, "link": "https://stackoverflow.com/questions/39319835/process-isolation-in-rust", "title": "Process Isolation in Rust", "body": "<p>I want to implement a server for a protocol. For security reasons the parser should be isolated in its own thread from the rest of the program and only a bidirectional channel should be held open for communication.</p>\n\n<p>The parser thread should lose any possibility to modify the other thread's memory and lose its power to do syscalls (using seccomp).</p>\n\n<p>Is there an easy way to achieve this behavior for the parser thread in Rust?</p>\n"}, {"tags": ["linker", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "edited": false, "score": 1, "creation_date": 1473010417, "post_id": 39314817, "comment_id": 65971364, "body": "I tried to add:      [build]     rustflags = [ &quot;-Wl,-Map=blink_f7.map&quot; ]  to my Cargo.toml file and I get the following warning      warning: unused manifest key: build.rustflags  I&#39;m using nightly-2016-05-24 to build. It seems that many of the tips I&#39;ve found by google searching only work on older versions of rust/cargo."}, {"owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "edited": false, "score": 1, "creation_date": 1473011401, "post_id": 39314817, "comment_id": 65971658, "body": "I got the my-linker.sh script to work - thanks. That should work under linux and OSX.  I&#39;m building something much bigger than a single file, so I&#39;m not sure how calling rustc directly will help. I need to include zinc and its dependencies at link time. 1 of 3 is still progress though."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "edited": false, "score": 1, "creation_date": 1473013799, "post_id": 39314817, "comment_id": 65972391, "body": "@DaveHylands I updated my answer with description how to use <code>cargo</code> config, by the way linker also you can set in <code>.cargo&#47;config</code> and you can set it to different value for different architictures."}, {"owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "edited": false, "score": 1, "creation_date": 1473016850, "post_id": 39314817, "comment_id": 65973271, "body": "Sweet. I got your example to work. Using rustflags = [&quot;-C&quot;, &quot;linkargs=...] also works. using rustflags = [ &quot;-C linkargs=...] (i.e. space between -C and linkargs) does not. I think I&#39;ve been confusing Cargo.toml and .cargo/config which is why some of my attempts didn&#39;t work."}], "tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": true, "score": 4, "last_activity_date": 1473013711, "last_edit_date": 1473013711, "creation_date": 1472976245, "answer_id": 39314817, "question_id": 39310905, "link": "https://stackoverflow.com/questions/39310905/how-to-get-the-linker-to-produce-a-map-file-using-cargo/39314817#39314817", "title": "How to get the linker to produce a map file using Cargo", "body": "<p><code>link-args</code> is possible to pass to <code>rustc</code> via <code>rustc -C link-args=\"-Wl,-Map=blink_stm32f4.map\" test.rs</code>.</p>\n\n<p>And there is option of <code>cargo</code> <code>rustflags</code> in <code>build</code> section. See <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow\">cargo config</a>. It works like this:</p>\n\n<pre><code>$ cargo new --bin testbin\n$ cd testbin\n$ cat .cargo/config \n[build]\nrustflags = [\"-Clink-args=-Wl,-Map=/tmp/blink_f7.map\"]\n$ cargo build\n</code></pre>\n\n<p>Also there is <code>linker</code> option in <code>cargo</code> config. I don't try to pass via\nthis option <code>gcc</code> plus <code>flags</code>, only <code>gcc</code>, but you can write <code>gcc</code> wrapper script like:</p>\n\n<pre><code>$ cat my-linker.sh\n#!/bin/sh\n\narm-...-gcc -Wl,-Map=blink_stm32f4.map $@\n</code></pre>\n"}], "owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1257, "favorite_count": 0, "accepted_answer_id": 39314817, "answer_count": 1, "score": 5, "last_activity_date": 1477322193, "creation_date": 1472933367, "last_edit_date": 1477322193, "question_id": 39310905, "link": "https://stackoverflow.com/questions/39310905/how-to-get-the-linker-to-produce-a-map-file-using-cargo", "title": "How to get the linker to produce a map file using Cargo", "body": "<p>I'm writing a Rust program targeted for an STM32F407 processor using zinc. I'd like to be able to produce a linker map file. I've found that I can put the following in my main.rs and this gives me the desired result:</p>\n\n<pre><code>#![feature(link_args)]\n#[link_args = \"-Wl,-Map=blink_stm32f4.map\"]\nextern {}\n</code></pre>\n\n<p>However, <a href=\"https://doc.rust-lang.org/book/advanced-linking.html#link-args\" rel=\"nofollow\">the documentation for <code>link_args</code></a> suggests not to use this method.</p>\n\n<p>What other methods exist to get the linker to produce a map file?</p>\n"}, {"tags": ["functional-programming", "rust", "peano-numbers"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472969114, "post_id": 39310278, "comment_id": 65960483, "body": "So it seems my initial guess was accurate. Can you please provide more details on why this is less efficient and where the binary numbers kick in in the other implementations? Does this become slower after the LLVM phase, where enums are converted to something different than structs?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472972103, "post_id": 39310278, "comment_id": 65960988, "body": "@ljedrz The type-level Peano numbers aren&#39;t represented in binary either, they&#39;re just as inefficient. In the type space that may be okay (numbers are usually smaller, and Peano numbers are easier to implement --- though see <code>typenum</code> for binary type-level numbers) but for values it&#39;s plain silly to actually use them."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472972822, "post_id": 39310278, "comment_id": 65961141, "body": "I understand and I&#39;m not about to use them in real life, but I would still like to know what the low level difference would be between using enums and structs to implement them."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472972864, "post_id": 39310278, "comment_id": 65961161, "body": "@ljedrz The binary numbers are for example numbers of type <code>i32</code> (or maybe <code>bigint</code> if you don&#39;t want to limit their size)."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472972996, "post_id": 39310278, "comment_id": 65961191, "body": "@ljedrz Computation with your numbers is done when the program is running, while computations with the type-level numbers are done during compilation when inferring types. So they are something completely different."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472974215, "post_id": 39310278, "comment_id": 65961449, "body": "Ah, I thought that in your answer you meant that the struct implementation uses binary numbers in the end. So my implementation is not involved in type arithmetic, because the enums end up translated to some numbers and are evaluated during runtime, while the structs allow for compile-time evaluation. If this is correct, can you please include it in the answer? This is the explanation I was after."}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 9, "last_activity_date": 1472975200, "last_edit_date": 1472975200, "creation_date": 1472928489, "answer_id": 39310278, "question_id": 39309480, "link": "https://stackoverflow.com/questions/39309480/peano-numbers-in-rust/39310278#39310278", "title": "Peano numbers in Rust", "body": "<p>Your Peano numbers are on the level of values, which are used for computation when the program is running. This is fine for playing around but not very useful, because binary numbers like <code>i32</code> are much more efficient.</p>\n\n<p>The other implementations represent Peano numbers on the type level, where you currently can't use ordinary numbers.  This allows to express types that depend on a number, for example arrays of a fixed size.  The computations then take place when the compiler is inferring types.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 307, "favorite_count": 0, "accepted_answer_id": 39310278, "answer_count": 1, "score": 4, "last_activity_date": 1473950367, "creation_date": 1472923181, "last_edit_date": 1495535631, "question_id": 39309480, "link": "https://stackoverflow.com/questions/39309480/peano-numbers-in-rust", "title": "Peano numbers in Rust", "body": "<p>I wanted to write a simple implementation of Peano numbers in Rust and it seems that I managed to get the basics working:</p>\n\n<pre><code>use self::Peano::*;\nuse std::ops::Add;\n\n#[derive(Debug, PartialEq)]\nenum Peano {\n    Zero,\n    Succ(Box&lt;Peano&gt;)\n}\n\nimpl Add for Peano {\n    type Output = Peano;\n\n    fn add(self, other: Peano) -&gt; Peano {\n        match other {\n            Zero =&gt; self,\n            Succ(x) =&gt; Succ(Box::new(self + *x))\n        }\n    }\n}\n\nfn main() {\n    assert_eq!(Zero + Zero, Zero);\n    assert_eq!(Succ(Box::new(Zero)) + Zero, Succ(Box::new(Zero)));\n    assert_eq!(Zero + Succ(Box::new(Zero)), Succ(Box::new(Zero)));\n    assert_eq!(Succ(Box::new(Zero)) + Succ(Box::new(Zero)), Succ(Box::new(Succ(Box::new(Zero)))));\n    assert_eq!(Succ(Box::new(Zero)) + Zero + Succ(Box::new(Zero)), Succ(Box::new(Succ(Box::new(Zero)))));\n}\n</code></pre>\n\n<p>However, when I decided to take look at how it was implemented by others, I saw that noone decided to do it with an <code>enum</code>, but rather with <code>struct</code>s and <code>PhantomData</code> (<a href=\"https://github.com/paholg/peano\" rel=\"nofollow noreferrer\">example 1</a>, <a href=\"https://ebfull.github.io/nemo/nemo/peano/index.html\" rel=\"nofollow noreferrer\">example 2</a>).</p>\n\n<p>Is there something wrong with my implementation? Is this because <code>Zero</code> and <code>Succ</code> are <code>enum</code> variants and not true types (so my implementation is not actual type arithmetic)? Or is it just preferable to do this the \"mainstream\" way due to difficulties that would occur if I expanded my implementation?</p>\n\n<p><strong>Edit:</strong> my struggles with implementing Peano numbers using <code>struct</code>s can be seen <a href=\"https://stackoverflow.com/questions/39511525/enumerating-generic-structs\">here</a>.</p>\n"}, {"tags": ["rust", "clone", "flatmap"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472883719, "post_id": 39303790, "comment_id": 65941347, "body": "What&#39;s the value of <code>possible_children</code> that you&#39;re trying to use which gives that error?"}, {"owner": {"reputation": 143, "user_id": 6789942, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/abd8a2371b4f042e364378ac5338295b?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Ratliff", "link": "https://stackoverflow.com/users/6789942/michael-ratliff"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472885399, "post_id": 39303790, "comment_id": 65941669, "body": "The actual value of possible_children is somewhat complicated, but this gives the same error:  ` let possible_children = (0..10).flat_map(|x|         (0..10).map(|y| (x,y) )     ); `"}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 8, "last_activity_date": 1472896321, "creation_date": 1472896321, "answer_id": 39305579, "question_id": 39303790, "link": "https://stackoverflow.com/questions/39303790/is-stditerflatmap-clone-possible/39305579#39305579", "title": "Is std::iter::FlatMap.clone() possible?", "body": "<p>There's no inherent reason that a type can't implement both <code>FnMut</code> and <code>Clone</code>, but it seems that at the moment closures don't implement <code>Clone</code>.  Here's a brief <a href=\"https://www.reddit.com/r/rust/comments/2s08aa/cloning_unboxed_closures_which_own_their/\">discussion about this from 2015</a>.  I haven't (yet) found any more recent discussion.</p>\n\n<p>I was able to construct this example where a <code>FlatMap</code> is cloned by implementing <code>FnMut</code> on my own struct, which requires unstable features, so a nightly compiler (<a href=\"https://play.rust-lang.org/?gist=272c27d0bbff9ae7387f23345723e39b&amp;version=nightly&amp;backtrace=0\">playground</a>):</p>\n\n<pre><code>#![feature(unboxed_closures)]\n#![feature(fn_traits)]\nstruct MyFun {\n    pub v: usize,\n}\n\nimpl FnOnce&lt;(usize,)&gt; for MyFun {\n    type Output = Option&lt;usize&gt;;\n    extern \"rust-call\" fn call_once(self, args: (usize,)) -&gt; Self::Output {\n        Some(self.v + 1 + args.0)\n    }\n\n}\n\nimpl FnMut&lt;(usize,)&gt; for MyFun {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (usize,)) -&gt; Self::Output {\n        self.v += 1;\n        if self.v % 2 == 0 {\n            Some(self.v + args.0)\n        } else {\n            None\n        }\n    }\n}\n\nimpl Clone for MyFun {\n    fn clone(&amp;self) -&gt; Self {\n        MyFun{v: self.v}\n    }\n}\n\nfn main() {\n    let possible_children = (0..10).flat_map(MyFun{v:0});\n    let pairs = possible_children.clone().flat_map(|x| possible_children.clone().map(move |y| (x,y) ) );\n    println!(\"possible_children={:?}\", pairs.collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472940121, "post_id": 39311639, "comment_id": 65956228, "body": "Actually, he wants the cartesian product of two copies of the same iterator. So he&#39;s still need to clone the iterator to pass as the second argument to <code>.cartesian_product()</code>, no?"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 4, "last_activity_date": 1472939391, "creation_date": 1472939391, "answer_id": 39311639, "question_id": 39303790, "link": "https://stackoverflow.com/questions/39303790/is-stditerflatmap-clone-possible/39311639#39311639", "title": "Is std::iter::FlatMap.clone() possible?", "body": "<p>You're creating the cartesian product of the set of items in an iterator with that of another. You can use the <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.cartesian_product\" rel=\"nofollow\"><code>.cartesian_product()</code> adaptor</a> from the <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow\">itertools</a> crate for that.</p>\n"}], "owner": {"reputation": 143, "user_id": 6789942, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/abd8a2371b4f042e364378ac5338295b?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Ratliff", "link": "https://stackoverflow.com/users/6789942/michael-ratliff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 333, "favorite_count": 1, "accepted_answer_id": 39305579, "answer_count": 2, "score": 7, "last_activity_date": 1473014539, "creation_date": 1472882783, "last_edit_date": 1473014539, "question_id": 39303790, "link": "https://stackoverflow.com/questions/39303790/is-stditerflatmap-clone-possible", "title": "Is std::iter::FlatMap.clone() possible?", "body": "<p>I am trying to create all possible pairs of items in a <code>FlatMap</code>:</p>\n\n<pre><code>possible_children.clone().flat_map(|a| possible_children.clone().map(|b| (a,b)))\n</code></pre>\n\n<p>In order to do this, I am trying to clone a <code>FlatMap</code> and I see in the documentation that the <code>FlatMap</code> struct implements a <code>clone</code> method. But it doesn't seem possible to create a <code>FlatMap</code> that satisfies the trait bounds.</p>\n\n<p>This is the error I am getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `clone` found for type `std::iter::FlatMap&lt;std::ops::Range&lt;u16&gt;, _, [closure@src/main.rs:30:47: 33:27]&gt;` in the current scope\n  --&gt; src/main.rs:37:66\n   |\n37 |         possible_children.clone().flat_map(|a| possible_children.clone().map(|b| (a,b)))\n   |                                                                  ^^^^^\n   |\n   = note: the method `clone` exists but the following trait bounds were not satisfied: `[closure@src/main.rs:30:47: 33:27] : std::clone::Clone`\n</code></pre>\n\n<p>Looking at the documentation I see:</p>\n\n<pre><code>impl&lt;I, U, F&gt; Clone for FlatMap&lt;I, U, F&gt;\n    where F: Clone, I: Clone, U: Clone + IntoIterator, U::IntoIter: Clone\n</code></pre>\n\n<p>and</p>\n\n<pre><code>impl&lt;I, U, F&gt; Iterator for FlatMap&lt;I, U, F&gt;\n    where F: FnMut(I::Item) -&gt; U, I: Iterator, U: IntoIterator\n</code></pre>\n\n<p>It looks like <code>F</code> is bound by both the <code>Clone</code> trait and the <code>FnMut</code> trait, but it is not possible for something to implement both <code>FnMut</code> and <code>Clone</code>.</p>\n\n<p>It seems strange that a method would exist in the documentation that isn't possible to call, so I must be missing something.</p>\n\n<p>Can someone please clarify for me?</p>\n\n<p>MVCE:</p>\n\n<pre><code>fn main() {\n    let possible_children = (0..10).flat_map(|x| (0..10).map(|y| (x,y)));\n\n    let causes_error = possible_children.clone().flat_map(|a|\n        possible_children.clone().map(|b| (a,b) )\n    ).collect();\n\n    println!(\"{:?}\",causes_error);\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 4, "last_activity_date": 1472832235, "creation_date": 1472832235, "answer_id": 39296619, "question_id": 39296039, "link": "https://stackoverflow.com/questions/39296039/rustc-serializejson-value-borrowed-in-a-while-loop-does-not-live-enough/39296619#39296619", "title": "rustc_serialize::Json value borrowed in a while loop does not live enough", "body": "<p>The issue is that you use <code>as_object</code> incorrectly. The name of the method (\"as\", not \"to\" or \"into\") indicates that it just represents the <code>Json</code> object as another type. Return type of <code>as_object</code> is <code>Option&lt;&amp;'a mut Object&gt;</code>, which tells us that it only returns a reference that lives as long as the <code>Json</code> object itself. When you use it in a one-liner, the borrow checker is not happy because intermediate <code>Json</code> object would be deleted after this line, but you try to use the reference that remains.</p>\n\n<p>A solution is to store <code>Json</code> in a variable and don't store a reference at all:</p>\n\n<pre><code>fn main() {\n\n    let mut string: String = \"{\\\"num\\\": 0}\".to_string();\n\n    let mut json = Json::from_str(&amp;string).unwrap();\n    let mut num = json.as_object().unwrap().get(\"num\").unwrap().as_u64().unwrap();\n\n    for i in 1..10 {\n        println!(\"{:?}\", num);\n        string = format!(\"{}{}{}\", \"{\\\"num\\\": \", i, \"}\");\n        json = Json::from_str(&amp;string).unwrap();\n        num = json.as_object().unwrap().get(\"num\").unwrap().as_u64().unwrap();\n    }\n\n}\n</code></pre>\n\n<p>If you store result of <code>as_object</code> in a variable, Rust won't let you re-assign <code>json</code> variable because its content is borrowed. If you really want to do it, you need to put the variable in a scope so that it is no more available at the beginning of the loop.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472832520, "post_id": 39296659, "comment_id": 65927077, "body": "Yes, <code>into_object</code> is probably what is desired. Hopefully the next release of the crate will ship it!"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 2, "last_activity_date": 1472832362, "creation_date": 1472832362, "answer_id": 39296659, "question_id": 39296039, "link": "https://stackoverflow.com/questions/39296039/rustc-serializejson-value-borrowed-in-a-while-loop-does-not-live-enough/39296659#39296659", "title": "rustc_serialize::Json value borrowed in a while loop does not live enough", "body": "<p><code>as_object</code> returns a reference to the inner map of a temporary JSON object. Since the JSON object is temporary, the inner map is too.\nYou can unwrap the map easily though:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json;\nuse rustc_serialize::json::{Json, Object};\n\nfn main() {\n    // while the online documentation of Json has a `into_object` method,\n    // the local nightly rustc I have does not have it anymore\n    fn into_object(json: Json) -&gt; Option&lt;Object&gt; {\n        if let Json::Object(map) = json {\n            Some(map)\n        } else {\n            None\n        }\n    }\n\n    let mut string: String = \"{\\\"num\\\": 0}\".to_string();\n\n    let mut obj = into_object(Json::from_str(&amp;string).unwrap()).unwrap();\n\n    let mut num = obj.get(\"num\").unwrap().as_u64().unwrap();\n\n    for i in 1..10 {\n        println!(\"{:?}\", num);\n        string = format!(\"{}{}{}\", \"{\\\"num\\\": \", i, \"}\");\n        obj = into_object(Json::from_str(&amp;string).unwrap()).unwrap();\n        num = obj.get(\"num\").unwrap().as_u64().unwrap();\n    }\n\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 1, "accepted_answer_id": 39296619, "answer_count": 2, "score": 1, "last_activity_date": 1472832566, "creation_date": 1472830339, "last_edit_date": 1472832566, "question_id": 39296039, "link": "https://stackoverflow.com/questions/39296039/rustc-serializejson-value-borrowed-in-a-while-loop-does-not-live-enough", "title": "rustc_serialize::Json value borrowed in a while loop does not live enough", "body": "<p>This code:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json;\nuse rustc_serialize::json::Json;\n\nfn main() {\n    let mut string: String = \"{\\\"num\\\": 0}\".to_string();\n\n    let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n\n    let mut num = obj.get(\"num\").unwrap().as_u64().unwrap();\n\n    for i in 1..10 {\n        println!(\"{:?}\", num);\n        string = format!(\"{}{}{}\", \"{\\\"num\\\": \", i, \"}\");\n        obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n        num = obj.get(\"num\").unwrap().as_u64().unwrap();\n    }\n}\n</code></pre>\n\n<p>Produces an error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n --&gt; src/main.rs:9:19\n  |&gt;\n9 |&gt;     let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n  |&gt;                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\nnote: reference must be valid for the block suffix following statement 1 at 9:72...\n --&gt; src/main.rs:9:73\n  |&gt;\n9 |&gt;     let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n  |&gt;                                                                         ^\nnote: ...but borrowed value is only valid for the statement at 9:4\n --&gt; src/main.rs:9:5\n  |&gt;\n9 |&gt;     let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n  |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n --&gt; src/main.rs:9:5\n  |&gt;\n9 |&gt;     let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n  |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: borrowed value does not live long enough\n  --&gt; src/main.rs:16:15\n   |&gt;\n16 |&gt;         obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n   |&gt;               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\nnote: reference must be valid for the block suffix following statement 1 at 9:72...\n --&gt; src/main.rs:9:73\n  |&gt;\n9 |&gt;     let mut obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n  |&gt;                                                                         ^\nnote: ...but borrowed value is only valid for the statement at 16:8\n  --&gt; src/main.rs:16:9\n   |&gt;\n16 |&gt;         obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n   |&gt;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n  --&gt; src/main.rs:16:9\n   |&gt;\n16 |&gt;         obj = Json::from_str(&amp;string).unwrap().as_object().unwrap();\n   |&gt;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I don't understand what's the issue here, is the error misleading or something? Why is it pointing at <code>Json</code> - that doesn't make much sense. Also due to the nature of my code I can't create another variable inside the loop - the old one must be reused.</p>\n"}, {"tags": ["iterator", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "edited": false, "score": 0, "creation_date": 1472831753, "post_id": 39295733, "comment_id": 65926630, "body": "It makes sense, but the added boilerplate is quite unfortunate. Could you also point me to a doc that describes the use of for&lt;&gt; in the where clause? I couldn&#39;t find it anywhere.."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "edited": false, "score": 0, "creation_date": 1472835149, "post_id": 39295733, "comment_id": 65928481, "body": "@MrMobster They are called higher ranked trait bounds. There isn&#39;t a whole lot of documentation, but I found this: <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/hrtb.html</a>"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 6, "last_activity_date": 1472829325, "creation_date": 1472829325, "answer_id": 39295733, "question_id": 39294939, "link": "https://stackoverflow.com/questions/39294939/constrain-parent-trait-to-reference/39295733#39295733", "title": "Constrain parent trait to reference", "body": "<p>You can add a <code>where</code> clause to traits, too (<a href=\"https://play.rust-lang.org/?gist=1ef54baa26ea7ed017219a9fccb69057&amp;version=stable&amp;backtrace=0version=stable&amp;backtrace=0\">playground</a>):</p>\n\n<pre><code>trait IterBorrow where for&lt;'a&gt; &amp;'a Self: IntoIterator {}\nimpl IterBorrow for [i32] {} // legal\n// impl IterBorrow for i32 {} // Illegal\n</code></pre>\n\n<p>However, it seems you currently need to reiterate this bound whenever you actually want to iterate, i.e., this function does not compile without the where clause:</p>\n\n<pre><code>fn foo&lt;T: IterBorrow&gt;(x: T) where for&lt;'a&gt; &amp;'a T: IntoIterator {\n    for _ in &amp;x {}\n    for _ in &amp;x {}\n}\n</code></pre>\n"}], "owner": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 51, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1472829721, "creation_date": 1472826849, "last_edit_date": 1472829721, "question_id": 39294939, "link": "https://stackoverflow.com/questions/39294939/constrain-parent-trait-to-reference", "title": "Constrain parent trait to reference", "body": "<p>I want to define a trait <code>Container</code> such that every implementor of this trait also needs to implement <code>IntoIterator</code>, with the caveat that the iteration ALWAYS only borrows the instance. If I understand correctly, I can implement <code>IntoIterator</code> using a pattern like this:</p>\n\n<pre><code>impl&lt;'a&gt; IntoIterator for &amp;'a ContainerImpl\n</code></pre>\n\n<p>However, how can I specify that this needs to be implemented if a type implements <code>Container</code>, e.g.:</p>\n\n<pre><code>trait Container: &amp;IntoIter ???\n</code></pre>\n"}, {"tags": ["rust", "conditional-compilation"], "answers": [{"comments": [{"owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 0, "creation_date": 1472817792, "post_id": 39291921, "comment_id": 65917482, "body": "Thanks! I searched the Rust book but only looked around the explanations for the conditional compile. Thanks for pointing me to the right place!"}, {"owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 0, "creation_date": 1472818351, "post_id": 39291921, "comment_id": 65917837, "body": "The 2nd part of my questions still stays: Is there any way to tell the compiler that such an attribute should cover more than one declaration?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 3, "creation_date": 1472818572, "post_id": 39291921, "comment_id": 65917983, "body": "@DerNils Just a quick tip about StackOverflow: please only ask one question per question-post. In this case it&#39;s kind of OK, since the questions are very closely linked. So just for your SO future: make sure to ask just one question; otherwise you risk downvotes. In that sense: welcome to SO :)"}, {"owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472818937, "post_id": 39291921, "comment_id": 65918231, "body": "@LukasKalbertodt thanks for the hint and the warm welcome! I hope that my first question will not directly lead to a downvote :-)"}, {"owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 0, "creation_date": 1472820321, "post_id": 39291921, "comment_id": 65919125, "body": "@ljedrz Thanks for extending your answer regarding the 2nd aspect!"}, {"owner": {"reputation": 320, "user_id": 1714429, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/A1ACj.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/1714429/will"}, "edited": false, "score": 0, "creation_date": 1558471991, "post_id": 39291921, "comment_id": 99110836, "body": "In more recent versions of Rust, it looks like you can use curly braces to cover multiple lines, for example: <code>#[cfg(feature=&quot;blah&quot;)] { &#47;* your code *&#47; }</code>  Just watch the scope."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1472823181, "last_edit_date": 1472823181, "creation_date": 1472817564, "answer_id": 39291921, "question_id": 39291850, "link": "https://stackoverflow.com/questions/39291850/how-many-lines-are-covered-by-the-rust-conditional-compilation-attribute/39291921#39291921", "title": "How many lines are covered by the Rust conditional compilation attribute?", "body": "<p>An <code>#[attribute]</code> only applies to the next <a href=\"https://doc.rust-lang.org/reference.html#items\" rel=\"nofollow\">item</a>. Please see the <a href=\"https://doc.rust-lang.org/book/attributes.html\" rel=\"nofollow\">Rust book</a>.</p>\n\n<p><strong>Edit</strong>: I don't think it is currently possible to spread an attribute over an arbitrary number of declarations.</p>\n\n<p>Additional, in-depth information on attributes and their application can be found at <a href=\"https://doc.rust-lang.org/reference.html#attributes\" rel=\"nofollow\">Rust reference</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 0, "creation_date": 1472901098, "post_id": 39292695, "comment_id": 65945343, "body": "I did indeed consider to wrap my declarations with a module but finally decided against it. For me, a module is a way to structure my code and I don&#39;t want to Have a structure preset by the use of a conditional compile. I have to admit though, that I would  solution if would have to do really a large amount of declarations (currently I only have to do 4)"}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "edited": false, "score": 0, "creation_date": 1472901358, "post_id": 39292695, "comment_id": 65945403, "body": "With only 4 declarations, it&#39;s probably manageable at the moment, although there&#39;s no real overhead from using a module and probably saves a few lines, especially if you need to scale it up in future. Is there any particular reason you&#39;re against using a module, or is it just too bulky for your needs?"}], "tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": false, "score": 11, "last_activity_date": 1472820034, "creation_date": 1472820034, "answer_id": 39292695, "question_id": 39291850, "link": "https://stackoverflow.com/questions/39291850/how-many-lines-are-covered-by-the-rust-conditional-compilation-attribute/39292695#39292695", "title": "How many lines are covered by the Rust conditional compilation attribute?", "body": "<p>You can use a module to group together everything that should exist for debug/release only, like this:</p>\n\n<pre><code>#[cfg(debug)]\nmod example {\n    pub type A = i32;\n    pub type B = i64;\n}\n\n#[cfg(not(debug))]\nmod example {\n    pub type A = u32;\n    pub type B = u64;\n}\n\nfn main() {\n    let x: example::A = example::A::max_value();\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=fd325d59732ed6a70445865900714aea&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground link</a> (note that this will always print the <code>not(debug)</code> value because the playground doesn't define the <code>debug</code> feature, even in debug mode).</p>\n\n<p>If <code>debug</code> is defined, this will print <code>2147483647</code> (the maximum value of an <code>i32</code>), otherwise it will print <code>4294967295</code> (the maximum value of a <code>u32</code>). Keep in mind that both modules must have definitions for each item, otherwise you'll hit a compile-time error.</p>\n\n<p>If you've not read about <a href=\"https://doc.rust-lang.org/book/attributes.html\" rel=\"noreferrer\">Attributes</a>, it might be a good idea to do so; make sure you know the difference between inner attributes (<code>#![attribute]</code>) and outer attributes (<code>#[attribute]</code>).</p>\n"}], "owner": {"reputation": 73, "user_id": 6736348, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dbff324ce1eee279dde46077e63014a?s=128&d=identicon&r=PG&f=1", "display_name": "DerNils", "link": "https://stackoverflow.com/users/6736348/dernils"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2463, "favorite_count": 1, "accepted_answer_id": 39291921, "answer_count": 2, "score": 6, "last_activity_date": 1472892338, "creation_date": 1472817356, "last_edit_date": 1472892338, "question_id": 39291850, "link": "https://stackoverflow.com/questions/39291850/how-many-lines-are-covered-by-the-rust-conditional-compilation-attribute", "title": "How many lines are covered by the Rust conditional compilation attribute?", "body": "<p>I'm trying to use a conditional compilation statement. Beyond defining a function that should only exist in a debug build, I want to define a set of variables/constants/types that only exist in the debug build. </p>\n\n<pre><code>#[cfg(debug)]\npub type A = B;\npub type B = W;\n\n#[cfg(other_option)]\npub type A = Z;\npub type B = I;\nlet test = 23i32;\n</code></pre>\n\n<p>How many lines are actually \"covered\" by the conditional compile attribute in this case? Is it only one (what I would expect in this context)? Are there ways to ensure that a whole block of code (including variables, types and two functions) is covered by the condition?  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1472829258, "post_id": 39290852, "comment_id": 65925139, "body": "Keep in mind that this only is an example. Real life builders might be required to be different types."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1472820046, "last_edit_date": 1472820046, "creation_date": 1472816174, "answer_id": 39291436, "question_id": 39290852, "link": "https://stackoverflow.com/questions/39290852/why-does-rusts-documentation-for-methods-use-a-separate-builder-struct-as-an-ex/39291436#39291436", "title": "Why does Rust&#39;s documentation for methods use a separate builder struct as an example?", "body": "<p>In general, a <code>Circle</code> and a <code>CircleBuilder</code> are not the same thing, so it makes sense to treat them as different types.  In your example, once a <code>Circle</code> has been \"finalized\", there's actually nothing stopping someone from calling the builder methods (<code>x</code>, <code>y</code>, <code>radius</code>) - there's nothing enforcing it.  It may also be unclear to users which methods are for building, and which are for use on a constructed object.  Rust has a type system which can be used to statically avoid mistakes like this - it makes sense to use it!</p>\n\n<p>In other cases, the finalize step may be less trivial - e.g. opening files, doing other I/O, or calculating some other private fields (which wouldn't make sense to initialise when constructing the builder).</p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1472816700, "last_edit_date": 1472816700, "creation_date": 1472816271, "answer_id": 39291460, "question_id": 39290852, "link": "https://stackoverflow.com/questions/39290852/why-does-rusts-documentation-for-methods-use-a-separate-builder-struct-as-an-ex/39291460#39291460", "title": "Why does Rust&#39;s documentation for methods use a separate builder struct as an example?", "body": "<p>Note that the <code>CircleBuilder</code> impl contains only methods that can be chained together (they return a <code>&amp;mut CircleBuilder</code>), one that initializes and one that returns a <code>Circle</code>.</p>\n\n<p>It makes sense when someone wants to create an object \"incrementally\", through multiple steps, and separate those methods from e.g. those exposing the object's properties.</p>\n\n<p>Your code is fine - it's a matter of preference. I would probably only create a <code>new(x: f64, y: f64, radius: f64)</code> method that would build a full <code>Circle</code> at once, like <code>Circle::new(1.0, 2.0, 2.0)</code>.</p>\n"}], "owner": {"reputation": 35, "user_id": 5184252, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/454308a6cd2354f7da43b18f50e95c54?s=128&d=identicon&r=PG", "display_name": "SteinFlugel", "link": "https://stackoverflow.com/users/5184252/steinflugel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "accepted_answer_id": 39291436, "answer_count": 2, "score": 3, "last_activity_date": 1472820046, "creation_date": 1472814222, "last_edit_date": 1472819985, "question_id": 39290852, "link": "https://stackoverflow.com/questions/39290852/why-does-rusts-documentation-for-methods-use-a-separate-builder-struct-as-an-ex", "title": "Why does Rust&#39;s documentation for methods use a separate builder struct as an example?", "body": "<p>I was going through the <a href=\"https://doc.rust-lang.org/book/method-syntax.html\" rel=\"nofollow\">struct and method docs</a> and was wondering why the docs use this example:</p>\n\n<pre><code>struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct CircleBuilder {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl CircleBuilder {\n    fn new() -&gt; CircleBuilder {\n        CircleBuilder { x: 0.0, y: 0.0, radius: 1.0, }\n    }\n\n    fn x(&amp;mut self, coordinate: f64) -&gt; &amp;mut CircleBuilder {\n        self.x = coordinate;\n        self\n    }\n\n    fn y(&amp;mut self, coordinate: f64) -&gt; &amp;mut CircleBuilder {\n        self.y = coordinate;\n        self\n    }\n\n    fn radius(&amp;mut self, radius: f64) -&gt; &amp;mut CircleBuilder {\n        self.radius = radius;\n        self\n    }\n\n    fn finalize(&amp;self) -&gt; Circle {\n        Circle { x: self.x, y: self.y, radius: self.radius }\n    }\n}\n\nfn main() {\n    let c = CircleBuilder::new()\n            .x(1.0)\n            .y(2.0)\n            .radius(2.0)\n            .finalize();\n\n    println!(\"area: {}\", c.area());\n    println!(\"x: {}\", c.x);\n    println!(\"y: {}\", c.y);\n}\n</code></pre>\n\n<p>My slightly modified code is smaller and appears to do the exact same thing:</p>\n\n<pre><code>struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\n\nimpl Circle {\n    fn new() -&gt; Circle {\n        Circle { x: 0.0, y: 0.0, radius: 1.0, }\n    }\n\n    fn x(&amp;mut self, coordinate: f64) -&gt; &amp;mut Circle {\n        self.x = coordinate;\n        self\n    }\n\n    fn y(&amp;mut self, coordinate: f64) -&gt; &amp;mut Circle {\n        self.y = coordinate;\n        self\n    }\n\n    fn radius(&amp;mut self, radius: f64) -&gt; &amp;mut Circle {\n        self.radius = radius;\n        self\n    }\n\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n\n    fn finalize(&amp;self) -&gt; Circle {\n        Circle { x: self.x, y: self.y, radius: self.radius }\n    }\n}\n\nfn main() {\n    let c = Circle::new()\n            .x(1.0)\n            .y(2.0)\n            .radius(2.0)\n            .finalize();\n\n    println!(\"area: {}\", c.area());\n    println!(\"x: {}\", c.x);\n    println!(\"y: {}\", c.y);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 5, "creation_date": 1472802691, "post_id": 39285797, "comment_id": 65908105, "body": "There is a useful trick to find out the type: <code>let _: () = data;</code>. This will cause an error that tells you the type of <code>data</code>."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1473016594, "last_edit_date": 1473016594, "creation_date": 1472799881, "answer_id": 39286233, "question_id": 39285797, "link": "https://stackoverflow.com/questions/39285797/what-value-does-the-variable-in-the-following-code-snippet-have/39286233#39286233", "title": "What value does the variable in the following code snippet have?", "body": "<p>I guess you are expecting <code>data</code> to be of type <code>&amp;[i32; 2]</code>; it isn't. In times like these, when you are not sure, you can verify it by trying to write:</p>\n\n<p><code>let data: &amp;[i32; 2] = &amp;[1..3];</code></p>\n\n<p>which won't work. The error message will be something like:</p>\n\n<pre><code>main.rs:11:26: 11:30 error: mismatched types [E0308]\nmain.rs:11:26: 11:30 note: expected type `i32`\nmain.rs:11:26: 11:30 note:    found type `std::ops::Range&lt;_&gt;`\n</code></pre>\n\n<p>What you actually have here is:</p>\n\n<p><code>let data: &amp;[std::ops::Range&lt;_&gt;] = &amp;[1..3];</code></p>\n"}, {"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472801536, "post_id": 39286241, "comment_id": 65907425, "body": "Of course, since it&#39;s a valid pattern! Will do that next time, thanks."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1472809665, "last_edit_date": 1472809665, "creation_date": 1472799899, "answer_id": 39286241, "question_id": 39285797, "link": "https://stackoverflow.com/questions/39285797/what-value-does-the-variable-in-the-following-code-snippet-have/39286241#39286241", "title": "What value does the variable in the following code snippet have?", "body": "<p>Firstly:</p>\n\n<pre><code>let foo = &amp;[1,2,3];\n</code></pre>\n\n<p>creates a temporary array with the same lifetime as the <code>foo</code> binding, and stores a reference to that in <code>foo</code>.</p>\n\n<p>However, that's not exactly what your program is doing.  As the other answer says, it's useful to run it, and you get:</p>\n\n<pre><code>Data is [1..3]\n</code></pre>\n\n<p>That doesn't look like <code>[1,2,3]</code>!  We can trick the compiler into telling us what it really is by using its error messages.  We know it's definitely not <code>()</code>, so let's try that first:</p>\n\n<pre><code>fn main() {\n    let data = &amp;[1..3];\n    let () = data;\n}\n</code></pre>\n\n<p>This gives us an error on purpose which includes:</p>\n\n<pre><code>error: mismatched types [--explain E0308]\n --&gt; &lt;anon&gt;:3:17\n  |&gt;\n3 |&gt;     let () = data;\n  |&gt;         ^^ expected &amp;-ptr, found ()\nnote: expected type `&amp;[std::ops::Range&lt;_&gt;; 1]`\nnote:    found type `()`\n</code></pre>\n\n<p>And that tells us the answer - <code>data</code> is a reference (<code>&amp;</code>) to an array of one item (<code>[_;1]</code>), which is a <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow\"><code>std::ops::Range&lt;_&gt;</code></a> object.</p>\n"}], "owner": {"reputation": 1508, "user_id": 1304519, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e8850b692b1c4e1d6439f002846a2df8?s=128&d=identicon&r=PG", "display_name": "Kajal Sinha", "link": "https://stackoverflow.com/users/1304519/kajal-sinha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 39286241, "answer_count": 2, "score": 3, "last_activity_date": 1473016594, "creation_date": 1472798261, "last_edit_date": 1472799798, "question_id": 39285797, "link": "https://stackoverflow.com/questions/39285797/what-value-does-the-variable-in-the-following-code-snippet-have", "title": "What value does the variable in the following code snippet have?", "body": "<pre><code>fn main() {\n    let data = &amp;[1..3];\n    println!(\"Data is {:?}\", data);\n}\n</code></pre>\n\n<p>What does it mean to have <code>&amp;[1..3]</code> as assigned value for this statement?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1472792050, "creation_date": 1472792050, "answer_id": 39284543, "question_id": 39284004, "link": "https://stackoverflow.com/questions/39284004/manipulate-paths-in-rust-macro/39284543#39284543", "title": "Manipulate paths in Rust macro?", "body": "<p>It would require a compiler plugin; this cannot be done with <code>macro_rules!</code>, nor with anything that's part of the language or the standard library, and any crates that <em>did</em> do it (not that I know of any) would require a nightly compiler <em>anyway</em>.</p>\n"}], "owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 39284543, "answer_count": 1, "score": 2, "last_activity_date": 1472792050, "creation_date": 1472787985, "question_id": 39284004, "link": "https://stackoverflow.com/questions/39284004/manipulate-paths-in-rust-macro", "title": "Manipulate paths in Rust macro?", "body": "<p>I want to write a macro that can break apart a path to manipulate its components. For example:</p>\n\n<pre><code>macro_rules! example {\n    ($path:path) =&gt; {\n        vec![\n            stringify!(get_path_init!($path)),\n            stringify!(get_path_last!($path)),\n        ]\n    };\n}\n\nfn main() {\n    let path_parts = example!(std::vec::Vec);\n    assert_eq!(path_parts, vec![\"std::vec\", \"Vec\"]);\n}\n</code></pre>\n\n<p>Does anything exist like this in the standard library or any reasonably popular crates, and is it possible to implement with macros? Or would it require a compiler plugin?</p>\n"}, {"tags": ["json", "parsing", "generics", "rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "is_accepted": false, "score": 3, "last_activity_date": 1472806896, "last_edit_date": 1472806896, "creation_date": 1472794668, "answer_id": 39284994, "question_id": 39283800, "link": "https://stackoverflow.com/questions/39283800/serde-jsonfrom-str-error-where-string-from-file/39284994#39284994", "title": "serde_json::from_str error where string from file", "body": "<p>To fix it, you need to tell the compiler what type you are expecting as the result of <code>serde_json::from_str</code>. So you can change the line</p>\n\n<pre><code>serde_json::from_str(&amp;mut content);\n</code></pre>\n\n<p>to</p>\n\n<pre><code>serde_json::from_str::&lt;Value&gt;(&amp;mut content);\n</code></pre>\n\n<p>The reason you need to specify the type is becasue <code>serde_json::from_str</code> is a generic function which needs a type to be instantiated to a concrete function. Usually rustc takes care of it, and infer the type you want to use, but in this case, there is not enough information to let compiler infer it for you because the type is only referred in the result of the function while the result is never used in the given code.</p>\n\n<p>You may also want to use the result of the <code>from_str</code> expression, otherwise the function call does nothing. If you specify the type when using a let binding, the compiler will be able to infer the type, like this:</p>\n\n<pre><code>let result: Value = serde_json::from_str(&amp;mut content);\n</code></pre>\n"}], "owner": {"reputation": 11, "user_id": 6785820, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lh9uk.jpg?s=128&g=1", "display_name": "Lynn", "link": "https://stackoverflow.com/users/6785820/lynn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1010, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1538856667, "creation_date": 1472786343, "last_edit_date": 1538856667, "question_id": 39283800, "link": "https://stackoverflow.com/questions/39283800/serde-jsonfrom-str-error-where-string-from-file", "title": "serde_json::from_str error where string from file", "body": "<pre><code>extern crate serde_json;\n\nuse serde_json::Value;\n\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() {\n    let filepath = \"./map/test/anhui.txt\";\n    match File::open(filepath) {\n        Err(why) =&gt; println!(\"Open file failed : {:?}\", why.kind()),\n        Ok(mut file) =&gt; {\n            let mut content: String = String::new();\n            file.read_to_string(&amp;mut content);\n            println!(\"{}\", &amp;mut content);\n            serde_json::from_str(&amp;mut content);\n        }\n    }\n}\n</code></pre>\n\n<p>Error info:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [--explain E0282]\n  --&gt; src/main.rs:16:17\n   |&gt;\n16 |&gt;                 serde_json::from_str(&amp;mut content);\n   |&gt;                 ^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["rust", "ffi", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472820134, "post_id": 39283466, "comment_id": 65919012, "body": "<a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\">jakegoulding.com/rust-ffi-omnibus</a>"}], "answers": [{"comments": [{"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1472831880, "post_id": 39285897, "comment_id": 65926701, "body": "This is <i>exactly</i> what I needed and works as expected. Thanks Chris."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 4, "last_activity_date": 1472798630, "creation_date": 1472798630, "answer_id": 39285897, "question_id": 39283466, "link": "https://stackoverflow.com/questions/39283466/rust-ffi-and-lifetime-for-string-transmutation/39285897#39285897", "title": "Rust, FFI, and lifetime for string transmutation", "body": "<p>It looks like you're using the wrong method on <code>CString</code>, and <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_raw\" rel=\"nofollow\"><code>CString::into_raw()</code></a> is what you want.  Even better, it needs no <code>unsafe</code> code until you want to free the memory again.</p>\n\n<p>While <code>CString::as_ptr()</code> returns a pointer into the string, <code>CString::into_raw()</code> passes the ownership of the memory into the raw pointer; this is intended for exactly your use case:</p>\n\n<pre><code>trait CanVoidStar {\n    fn as_cvoid_ptr(&amp;self) -&gt; *const c_void;\n}\n\nimpl CanVoidStar for str {\n   fn as_cvoid_ptr(&amp;self) -&gt; *const c_void {\n        let string = CString::new(self).unwrap();\n        string.into_raw() as *const c_void\n    }\n}\n</code></pre>\n\n<p>As the documentation says, if you ever want to free it, you'll need to reconstruct the <code>CString</code> using <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_raw\" rel=\"nofollow\"><code>CString::from_raw()</code></a> and then have it dropped as usual.</p>\n"}], "owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 39285897, "answer_count": 1, "score": 0, "last_activity_date": 1472849454, "creation_date": 1472783311, "last_edit_date": 1472849454, "question_id": 39283466, "link": "https://stackoverflow.com/questions/39283466/rust-ffi-and-lifetime-for-string-transmutation", "title": "Rust, FFI, and lifetime for string transmutation", "body": "<p>I'm working in an FFI library and have encountered this pattern quite a few times that I don't know how to handle idiomatically.</p>\n\n<pre><code>impl CanVoidStar for str {\n    fn as_cvoid_ptr(&amp;self) -&gt; *const c_void {\n        let string = CString::new(self).unwrap(); \n        unsafe {\n            return mem::transmute(string.as_ptr());\n        }\n    }\n}\n</code></pre>\n\n<p>My intent was to create a <code>const *void</code> pointer to a piece of memory that I can hand off to a C function. The problem that here is that <code>string</code> goes out of scope and thus I get undefined behavior in the <code>unsafe</code> block.</p>\n\n<p>Is there a way I can keep <code>string</code> allocated on the heap until whatever it is that is using the return value done with it? Further, is there a idiomatic way to handle this or do I need to redesign my algorithms?</p>\n"}, {"tags": ["struct", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1472749620, "post_id": 39277157, "comment_id": 65889086, "body": "Rename <code>phantom</code> to <code>__phantom</code>, make it public and <code>#[doc(hidden)]</code>. Live example: <a href=\"https://doc.rust-lang.org/src/std/up/src/libstd/io/error.rs.html#162-168\" rel=\"nofollow noreferrer\"><code>std::io::ErrorKind::__Nonexhaustive</code></a>"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1472750081, "post_id": 39277157, "comment_id": 65889342, "body": "@mcarton Note that <code>std</code> is a little special in that it can declare the <code>__Nonexhaustive</code> variant to be unstable, so that callers literally cannot use it if they&#39;re on stable Rust. Library writers employing this same trick (which is something I definitely do) must rely on convention. (Which I don&#39;t think is a real problem in practice, I&#39;m just being a pedant.)"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472750459, "post_id": 39277157, "comment_id": 65889546, "body": "@emk I was <b>just</b> learning about <code>PhantomData</code>. Thanks for this useful example!"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1472754177, "post_id": 39277157, "comment_id": 65891532, "body": "@BurntSushi5 little ugly but <code>#[deprecated]</code> would work here if a warning is necessary."}, {"owner": {"reputation": 55972, "user_id": 12089, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c80aa0608c845cd64585e9fc9ca4cc67?s=128&d=identicon&r=PG", "display_name": "emk", "link": "https://stackoverflow.com/users/12089/emk"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1472825247, "post_id": 39277157, "comment_id": 65922476, "body": "@mcarton If you convert your comment into a top-level answer I&#39;ll accept it."}], "answers": [{"comments": [{"owner": {"reputation": 55972, "user_id": 12089, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c80aa0608c845cd64585e9fc9ca4cc67?s=128&d=identicon&r=PG", "display_name": "emk", "link": "https://stackoverflow.com/users/12089/emk"}, "edited": false, "score": 0, "creation_date": 1472825421, "post_id": 39280153, "comment_id": 65922576, "body": "Thank you! These are all lovely solutions for a high-level API with relatively few fields. But in my case, I&#39;m working with a much lower-level struct representing a 3rd-party file format deserialized with <code>serde</code>, and I need something that works with dozens of rarely-used fields, and which doesn&#39;t require me to split the struct in two. But your answer will help people with simpler problems. Thank you!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 7, "last_activity_date": 1472760718, "creation_date": 1472760718, "answer_id": 39280153, "question_id": 39277157, "link": "https://stackoverflow.com/questions/39277157/updating-public-fields-of-rust-structs-which-have-private-fields/39280153#39280153", "title": "Updating public fields of Rust structs which have private fields", "body": "<p>The default field syntax doesn't work because you're still creating a new instance (even if you're trying to take some of the field values from another object).</p>\n\n<blockquote>\n  <p>The alternative is to support something like:</p>\n\n<pre><code>Foo::new()\n  .set_bar(true)\n</code></pre>\n  \n  <p>...which will get tedious with dozens of fields.</p>\n</blockquote>\n\n<p>I'm not sure that even with many fields, this:</p>\n\n<pre><code>Foo::new()\n   .set_bar(true)\n   .set_foo(17)\n   .set_splat(\"Boing\")\n</code></pre>\n\n<p>is significantly more tedious than:</p>\n\n<pre><code>Foo {\n   bar: true,\n   foo: 17,\n   splat: \"Boing\",\n   ..Foo::default()\n}\n</code></pre>\n\n<p>Alternatively, you could separate out the public fields into their own type:</p>\n\n<pre><code>pub struct FooPub {\n    pub bar: bool,\n    // other pub fields\n}\n\npub struct Foo {\n    pub bar: bool,\n    // other pub fields\n    // alternatively, group them: pub public: FooPub,\n\n    foo: u64,\n}\n\nimpl Foo {\n    pub fn new(init: FooPub) {\n        Foo {\n            bar: init.bar,\n            // other pub fields\n            // alternative: public: init\n\n            // private fields\n            foo: 17u64,\n        }\n    }\n}\n</code></pre>\n\n<p>You'd then call it as:</p>\n\n<pre><code>Foo::new(FooPub{ bar: true })\n</code></pre>\n\n<p>or add a <code>fn FooPub::default()</code> to let you default some of the fields:</p>\n\n<pre><code>Foo::new(FooPub{ bar: true, ..FooPub::default()})\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 55972, "user_id": 12089, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c80aa0608c845cd64585e9fc9ca4cc67?s=128&d=identicon&r=PG", "display_name": "emk", "link": "https://stackoverflow.com/users/12089/emk"}, "edited": false, "score": 0, "creation_date": 1472830940, "post_id": 39295611, "comment_id": 65926159, "body": "Thank you! I accepted your answer because it directly answers the question, but the @Chris Emerson&#39;s answer provides a good alternative for higher-level APIs."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1488028295, "last_edit_date": 1488028295, "creation_date": 1472828925, "answer_id": 39295611, "question_id": 39277157, "link": "https://stackoverflow.com/questions/39277157/updating-public-fields-of-rust-structs-which-have-private-fields/39295611#39295611", "title": "Updating public fields of Rust structs which have private fields", "body": "<p>Rename <code>phantom</code> to <code>__phantom</code>, make it public and <code>#[doc(hidden)]</code>.</p>\n\n<pre><code>use std::default::Default;\n\nmod foo {\n    use std::default::Default;\n    use std::marker::PhantomData;\n\n    pub struct Foo {\n        pub bar: bool,\n\n        // We make this public but hide it from the docs, making\n        // it private by convention.  If you use this, your\n        // program may break even when semver otherwise says it\n        // shouldn't.\n        #[doc(hidden)]\n        pub _phantom: PhantomData&lt;()&gt;,\n    }\n\n    impl Default for Foo {\n        fn default() -&gt; Foo {\n            Foo {\n                bar: false,\n                _phantom: PhantomData,\n            }\n        }\n    }\n}\n\nfn main() {\n    foo::Foo {\n        bar: true,\n        ..Default::default()\n    };\n}\n</code></pre>\n\n<p>This is a not so uncommon pattern, live example: <a href=\"https://doc.rust-lang.org/src/std/io/error.rs.html#177\" rel=\"nofollow noreferrer\"><code>std::io::ErrorKind::__Nonexhaustive</code></a>.</p>\n\n<p>Sure, users won't have any warning or anything if they choose to use a <code>__named</code> field anyway, but the <code>__</code> makes the intent pretty clear. If a warning is required, <code>#[deprecated]</code> could be used.</p>\n"}], "owner": {"reputation": 55972, "user_id": 12089, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c80aa0608c845cd64585e9fc9ca4cc67?s=128&d=identicon&r=PG", "display_name": "emk", "link": "https://stackoverflow.com/users/12089/emk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2047, "favorite_count": 0, "accepted_answer_id": 39295611, "answer_count": 2, "score": 9, "last_activity_date": 1488028295, "creation_date": 1472749248, "question_id": 39277157, "link": "https://stackoverflow.com/questions/39277157/updating-public-fields-of-rust-structs-which-have-private-fields", "title": "Updating public fields of Rust structs which have private fields", "body": "<p>I have a struct <code>Foo</code> which represents an external serialization format. <code>Foo</code> has dozens of fields, and more are added all the time. Happily, all new fields are guaranteed to have sensible default values.</p>\n\n<p>Rust has a nice syntax for creating a struct using default values and then updating a few selected values:</p>\n\n<pre><code>Foo {\n  bar: true,\n  ..Default::default()\n} \n</code></pre>\n\n<p>Similarly, we can represent the idea of \"this struct may have more fields in a future version\" using a private field of type <code>PhantomData</code>.</p>\n\n<p>But if we combine these two idioms, we get an error:</p>\n\n<pre><code>use std::default::Default;\n\nmod F {\n    use std::default::Default;\n    use std::marker::PhantomData;\n\n    pub struct Foo {\n        pub bar: bool,\n        phantom: PhantomData&lt;()&gt;,\n    }\n\n    impl Default for Foo {\n        fn default() -&gt; Foo {\n            Foo {\n                bar: false,\n                phantom: PhantomData,\n            }\n        }\n    }\n}\n\nfn main() {\n    F::Foo {\n        bar: true,\n        ..Default::default()\n    };\n}\n</code></pre>\n\n<p>This gives us the error:</p>\n\n<pre><code>error: field `phantom` of struct `F::Foo` is private [--explain E0451]\n  --&gt; &lt;anon&gt;:23:5\n   |&gt;\n23 |&gt;     F::Foo {\n   |&gt;     ^\n</code></pre>\n\n<p>Logically, I would argue that this should work, because we're only updating public fields, and it would be useful idiom. The alternative is to support something like:</p>\n\n<pre><code>Foo::new()\n  .set_bar(true)\n</code></pre>\n\n<p>...which will get tedious with dozens of fields.</p>\n\n<p>How can I work around this problem?</p>\n"}, {"tags": ["rust", "warnings"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472728108, "post_id": 39269408, "comment_id": 65874221, "body": "You mean to ignore all warnings of a kind in a module? The question is a bit unclear."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472728499, "post_id": 39269408, "comment_id": 65874476, "body": "@LukasKalbertodt, not a duplicate, am asking about silencing <i>any</i> warnings."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472728997, "post_id": 39269408, "comment_id": 65874808, "body": "When you run rustc, it may give many warnings, a single instant would be one of them. Updated question to be more clear, giving example of how this can already be done with GCC."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472729138, "post_id": 39269408, "comment_id": 65874904, "body": "<code>#[allow(...)]</code> on single statement seems like what I&#39;m looking for, worth adding this as an answer?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1472731549, "post_id": 39269408, "comment_id": 65876487, "body": "I get that sometimes a scope is not usable (e.g., because the statement in question introduces a new variable), but if adding a block around the statement <i>works</i>, why wouldn&#39;t you use it? It&#39;s some line noise, but much less so than the GCC equivalent you show."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472735743, "post_id": 39269408, "comment_id": 65879638, "body": "@delnan, often using a block makes most sense... however warnings can be be intermittent <i>(depending on platform, compiler versions... other conditional compilation)</i>. It may not be desirable to indent a large block of code, just to quiet warnings under some spesific configuration."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472739876, "post_id": 39269408, "comment_id": 65882928, "body": "Rust isn&#39;t whitespace-sensitive, indentation is not necessary."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473043975, "post_id": 39269408, "comment_id": 65978622, "body": "If your adding new scopes without indenting it makes the code confusing in other ways, and in this case I would certainly prefer to quiet a single warning then introduce scopes in a hard-to-read way.  Adding braces around blocks without indentation will confuse things longer term. You may declare variables and try access them later without realizing the scope is different failing to build or worse accessing a variable which was meant to be shadowed. While it may be acceptable in a few isolated cases, doing this all over the code-base is going to make it confusing/annoying to work on."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1526836878, "last_edit_date": 1526836878, "creation_date": 1472728186, "answer_id": 39269962, "question_id": 39269408, "link": "https://stackoverflow.com/questions/39269408/how-to-quiet-a-warning-for-a-single-statement-in-rust/39269962#39269962", "title": "How to quiet a warning for a single statement in Rust?", "body": "<p>If you want to silence all warnings of a kind in a module, write e.g. <code>#![allow(dead_code)]</code> (note the exclamation mark) at the top of the module. This will disable all warnings of this kind in the whole module. You can also call <code>rustc</code> with e.g. <code>-A dead_code</code>.</p>\n\n<p>You can disable all warnings by writing <code>#![allow(warnings)]</code> at the top of the module.</p>\n\n<p>You can insert a <code>mod</code>ule (as described in the <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html#defining-modules\" rel=\"nofollow noreferrer\">Rust book</a>) where the specific warnings are ignored.</p>\n\n<p>As Lukas said, you can also write e.g. <code>#[allow(dead_code)]</code> on a statement or an expression.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 31, "last_activity_date": 1526836141, "last_edit_date": 1526836141, "creation_date": 1472730431, "answer_id": 39270724, "question_id": 39269408, "link": "https://stackoverflow.com/questions/39269408/how-to-quiet-a-warning-for-a-single-statement-in-rust/39270724#39270724", "title": "How to quiet a warning for a single statement in Rust?", "body": "<p>To silence warnings you have to <strong>add the <code>allow(warning_type)</code> attribute</strong> to the affected expression or any of its parents. If you <em>only</em> want to silence the warning on one specific expression, you can add the attribute to that expression/statement: </p>\n\n<pre><code>fn main() {\n    #[allow(unused_variables)]\n    let not_used = 27;\n\n    #[allow(path_statements)]\n    std::io::stdin;\n\n    println!(\"hi!\");\n}\n</code></pre>\n\n<p>However, the feature of adding attributes to statements/expressions (as opposed to items, like functions) is still a bit broken. In particular, in the above code, the <code>std::io::stdin</code> line still triggers a warning. You can read the ongoing discussion about this feature <a href=\"https://github.com/rust-lang/rust/issues/15701\" rel=\"noreferrer\">here</a>. </p>\n\n<hr>\n\n<p>Often it is <strong>not necessary to use an attribute</strong> though. Many warnings (like <code>unused_variables</code> and <code>unused_must_use</code>) can be silenced by <strong>using <code>let _ =</code></strong> as the left side of your statement. In general, any variable that starts with an underscore won't trigger unused-warnings.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2717, "favorite_count": 0, "accepted_answer_id": 39270724, "answer_count": 2, "score": 22, "last_activity_date": 1526836878, "creation_date": 1472726593, "last_edit_date": 1472729191, "question_id": 39269408, "link": "https://stackoverflow.com/questions/39269408/how-to-quiet-a-warning-for-a-single-statement-in-rust", "title": "How to quiet a warning for a single statement in Rust?", "body": "<p>Say there is a single warning such as <code>path_statements</code>, <code>unused_variables</code>. Is there a way to ignore a single instant of this, without isolating them into a code block or function?</p>\n\n<p>To be clear, when there is a single warning in the code. I would like the ability to quiet only that warning, without having to do special changes addressing the particular warning.\nAnd without this quieting warnings anywhere else, even later on in the same function.</p>\n\n<p>With GCC this can be done as follows:</p>\n\n<pre><code>#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wformat\"\n    /* Isolated region which doesn't raise warnings! */\n    this_would_raise_Wformat(args);\n#pragma GCC diagnostic pop\n</code></pre>\n\n<p>Does Rust have the equivalent capability?</p>\n\n<hr>\n\n<p>Note, am asking about the general case of how to quiet warnings.\nAm aware there are ways to resolve unused var warning for eg.</p>\n"}, {"tags": ["rust", "introspection"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1472739250, "post_id": 39266001, "comment_id": 65882450, "body": "Why do you want to do that? Do you just want to inspect the content or do you want some kind of programmatic access? As it is the question is very broad and we already have an answer that is only useful to humans while another answer could (maybe, with effort) allow programmatic access."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1472741791, "post_id": 39266001, "comment_id": 65884371, "body": "@ideasman42: I am sorry if I was not clear, I am asking <i>how</i> you want to exploit the information. Consulting the docs is sufficient for a human, but is not good if you want to programmatically iterate over the attributes to serialise the object. What you may want to do with it constrains the forms in which the information should be provided."}, {"owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 0, "creation_date": 1559190785, "post_id": 39266001, "comment_id": 99345459, "body": "I started a bounty and would like to explain: <code>rustdoc</code> does not do what I would want.  I don&#39;t want introspection on things <i>I&#39;ve</i> created, but others have.  E.g. I want to know how I can create a <code>Vec</code> from the values in a <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a>. After enough Google searches, it seems I can <code>my_map.values().iter().collect()</code>, but I&#39;m not even sure if that&#39;s right, and the documentation for <code>HashMap</code> does not really help. The decoupling of <i>behavior</i> from <i>data</i> makes it hard to know how these relationships work, IMHO."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 1, "creation_date": 1559224485, "post_id": 39266001, "comment_id": 99359675, "body": "@MikeWilliamson you&#39;ve poorly chosen the question for your bounty then. You are effectively asking &quot;how do I go from arbitrary type A to arbitrary type B&quot; and that doesn&#39;t even account for &quot;shortest path&quot; or &quot;most efficient path&quot;. There is no single method on either <code>Vec</code> or <code>HashMap</code> to convert between the two, so any answer to <i>this question</i> won&#39;t help you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 1, "creation_date": 1559224635, "post_id": 39266001, "comment_id": 99359756, "body": "@MikeWilliamson Even your specific example doesn&#39;t have enough detail. You are getting a <code>Vec</code> of <i>references</i> to your values, not the values themselves. That may or may not be what you actually want. If you wanted the values themselves, that would be <code>my_map.into_iter().map(|(_, v)| v).collect()</code>."}, {"owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559325179, "post_id": 39266001, "comment_id": 99397879, "body": "@Shepmaster Yes, I understand your point.  I only provided a <i>specific</i> example, but the issue is more broad, and the OP posed a broad question:  how do we introspect?  I accept that traits and impls might be better vs. classes in some key ways that I am still learning.  But <b>gone</b> is the ability to introspect at all.  There <i>must</i> be a way.  Or, if not, how can we collectively build a way?  My question was more circuitous, I admit, but that&#39;s because my point was that deep introspection allows for this indirect path.  Sometimes, I am happy with <i>a</i> solution until I can make <i>the best one</i>."}], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1472723939, "post_id": 39266216, "comment_id": 65871365, "body": "This is far from trivial at AST level. This is why even builtin things like <code>derive(Clone)</code> or <code>println!</code> can give really bad errors. At HIR level (accessible from a lint plugin), types and bindings have been resolved, and things would be much easier."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 0, "last_activity_date": 1472717781, "creation_date": 1472717781, "answer_id": 39266216, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/39266216#39266216", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>I don't think there is anything that will do this out of the box.</p>\n\n<p>It may be possible to write a <a href=\"https://doc.rust-lang.org/book/compiler-plugins.html\" rel=\"nofollow\">compiler plugin</a> which can do that by examining the AST.</p>\n"}, {"comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1472736567, "post_id": 39272638, "comment_id": 65880307, "body": "This won&#39;t show methods though, but it might be useful to inspect the struct members and values."}], "tags": [], "owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "is_accepted": false, "score": 0, "last_activity_date": 1559224822, "last_edit_date": 1559224822, "creation_date": 1472735961, "answer_id": 39272638, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/39272638#39272638", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>I use something like this:</p>\n\n<pre><code>println!(\"{:?}\", variable); // struct, enum whatever\n</code></pre>\n\n<p>If it's a large type, use the <code>#</code> version:</p>\n\n<pre><code>println!(\"{:#?}\", variable); // struct, enum whatever\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": false, "score": 5, "last_activity_date": 1506187912, "last_edit_date": 1506187912, "creation_date": 1472741998, "answer_id": 39274964, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/39274964#39274964", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>To expand on my comment, you can use <code>rustdoc</code>, the Rust documentation generator, to view almost everything you're asking for (at compile time). <code>rustdoc</code> will show:</p>\n\n<ul>\n<li>Structs (including public members and their impl blocks)</li>\n<li>Enums</li>\n<li>Traits</li>\n<li>Functions</li>\n<li>Any documentation comments written by the crate author with <code>///</code> or <code>//!</code>.</li>\n</ul>\n\n<p><code>rustdoc</code> also automatically links to the source of each file in the [src] link.</p>\n\n<p><a href=\"https://docs.rs/futures/0.1.0/futures/struct.AndThen.html\" rel=\"noreferrer\">Here</a> is an example of the output of <code>rustdoc</code>.</p>\n\n<h1>Standard Library</h1>\n\n<p>The standard library API reference is available <a href=\"https://doc.rust-lang.org/std/\" rel=\"noreferrer\">here</a> and is available for anything in the <code>std</code> namespace.</p>\n\n<h1>Crates</h1>\n\n<p>You can get documentation for any crate available on <a href=\"https://crates.io\" rel=\"noreferrer\">crates.io</a> on <strong><a href=\"https://docs.rs/\" rel=\"noreferrer\">docs.rs</a></strong>. This automatically generates documentation for each crate every time it is released on crates.io.</p>\n\n<h1>Your Project</h1>\n\n<p>You can generate documentation for your project with Cargo, like so:</p>\n\n<pre><code>cargo doc\n</code></pre>\n\n<p>This will also automatically generate documentation for your dependencies (but not the standard library).</p>\n"}, {"tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": false, "score": 1, "last_activity_date": 1488644442, "creation_date": 1488644442, "answer_id": 42598264, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/42598264#42598264", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>I have <a href=\"https://github.com/vityafx/introspection\" rel=\"nofollow noreferrer\">written a very simple crate</a> which uses procedural macro. It gives you access to members information plus some simple information about <code>struct/enum</code> you use. Information about methods can not be given because procedural macros simply can't get this information, and as far as I know, there are no any methods which may give such information.</p>\n"}, {"tags": [], "owner": {"reputation": 64, "user_id": 5112950, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc43d3050ceee22333f7a59774dfced6?s=128&d=identicon&r=PG&f=1", "display_name": "Keji Li", "link": "https://stackoverflow.com/users/5112950/keji-li"}, "is_accepted": false, "score": 0, "last_activity_date": 1528292882, "creation_date": 1528292882, "answer_id": 50722130, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/50722130#50722130", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>If you need the field names inside your program then you probably need to use macros. Either wrap your struct definition in macro and pattern match to create some function to get their names, or use procedural macro to derive structs for traits with such functions.</p>\n\n<p>See examples in <a href=\"https://github.com/dtolnay/syn/tree/master/examples\" rel=\"nofollow noreferrer\">syn</a> for derived traits. In particular, see syn::Data::Struct which has fields.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1559312119, "post_id": 56389650, "comment_id": 99391951, "body": "How does this address the <b>main</b> part of the question: <i>How to introspect all available <b>methods</i></b>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559312163, "post_id": 56389650, "comment_id": 99391973, "body": "How does this work when another procedural macro <i>adds or removes</i> fields?"}, {"owner": {"reputation": 1266, "user_id": 254455, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/78b54.jpg?s=128&g=1", "display_name": "Bernard Igiri", "link": "https://stackoverflow.com/users/254455/bernard-igiri"}, "edited": false, "score": 0, "creation_date": 1598027133, "post_id": 56389650, "comment_id": 112333954, "body": "This should be the accepted answer. This is the solution Rust provides and is exactly what how it is used. Serialization/deserialization is the most common use of introspection/reflection and in Rust, macros fill that roll."}], "tags": [], "owner": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "is_accepted": false, "score": 12, "last_activity_date": 1566658266, "last_edit_date": 1566658266, "creation_date": 1559283547, "answer_id": 56389650, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type/56389650#56389650", "title": "How to introspect all available methods and members of a Rust type?", "body": "<blockquote>\n  <p>Is there a way to print out a complete list of available members of a type or instance in Rust?</p>\n</blockquote>\n\n<p>Currently, there is no such built-in API that you can get the fields at runtime. However you can retrieve fields by using two different ways.</p>\n\n<ol>\n<li><a href=\"https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming\" rel=\"noreferrer\">Declarative Macros</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes\" rel=\"noreferrer\">Procedural Macros</a></li>\n</ol>\n\n<hr>\n\n<p><strong>Solution By Using Declarative Macro</strong></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! generate_struct {\n    ($name:ident {$($field_name:ident : $field_type:ty),+}) =&gt; {\n        struct $name { $($field_name: $field_type),+ }\n        impl $name {\n            fn introspect() {\n            $(\n            let field_name = stringify!($field_name);\n            let field_type = stringify!($field_type);\n               println!(\"Field Name: {:?} , Field Type: {:?}\",field_name,field_type);\n            )*\n            }\n        }\n    };\n}\n\ngenerate_struct! { MyStruct { num: i32, s: String } }\n\nfn main() {\n    MyStruct::introspect();\n}\n</code></pre>\n\n<p>This will give you the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Field Name: \"num\" , Field Type: \"i32\"\nField Name: \"s\" , Field Type: \"String\"\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=58c62693e8e1da68865b7bd24cd54497\" rel=\"noreferrer\">Playground</a></p>\n\n<hr>\n\n<p><strong>Solution Using Procedural Macro</strong></p>\n\n<p>Since procedural macros are  more complicated from the declarative macros, you better to read some references(<a href=\"https://blog.rust-lang.org/2018/12/21/Procedural-Macros-in-Rust-2018.html\" rel=\"noreferrer\">ref1</a>, <a href=\"https://doc.rust-lang.org/reference/procedural-macros.html\" rel=\"noreferrer\">ref2</a>, <a href=\"https://tinkering.xyz/introduction-to-proc-macros/\" rel=\"noreferrer\">ref3</a>) before starting.</p>\n\n<p>We are going to write a <a href=\"https://tinkering.xyz/introduction-to-proc-macros/\" rel=\"noreferrer\"><code>custom derive</code></a> which is named <code>\"Instrospect\"</code>. To create this custom derive, we need to parse our struct as a <a href=\"https://tinkering.xyz/introduction-to-proc-macros/\" rel=\"noreferrer\"><code>TokenStream</code></a> with the help of <a href=\"https://crates.io/crates/syn\" rel=\"noreferrer\">syn</a> crate.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[proc_macro_derive(Introspect)]\npub fn derive_introspect(input: TokenStream) -&gt; TokenStream {\n    let input = parse_macro_input!(input as ItemStruct);\n\n    // ...\n}\n</code></pre>\n\n<p>Since our input can be parsed as <a href=\"https://docs.rs/syn/0.15.34/syn/struct.ItemStruct.html\" rel=\"noreferrer\"><code>ItemStruct</code></a> and <code>ItemStruct</code> has the <a href=\"https://docs.rs/syn/0.15.34/syn/struct.ItemStruct.html#structfield.fields\" rel=\"noreferrer\"><code>fields()</code></a> method in it, we can use this to get fields of our struct. </p>\n\n<p>After we get these fields, we can parse them as named and we can print their <code>field name</code> and <code>field type</code> accordingly.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>input\n    .fields\n    .iter()\n    .for_each(|field| match field.parse_named() {\n        Ok(field) =&gt; println!(\"{:?}\", field),\n        Err(_) =&gt; println!(\"Field can not be parsed successfully\"),\n    });\n</code></pre>\n\n<p>If you want to attach this behavior to your custom derive you can use the following with the help of the <a href=\"https://crates.io/crates/quote\" rel=\"noreferrer\">quote</a> crate:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let name = &amp;input.ident;\n\nlet output = quote! {\n    impl #name {\n        pub fn introspect(){\n            input\n            .fields\n            .iter()\n            .for_each(|field| match field.parse_named() {\n                Ok(field) =&gt; println!(\"{:?}\", field),\n                Err(_) =&gt; println!(\"Field can not be parsed successfully\"),\n             });\n        }\n    }\n};\n\n// Return output TokenStream so your custom derive behavior will be attached.\nTokenStream::from(output)\n</code></pre>\n\n<p>Since the behaviour injected to your struct as introspect function, you can call it in your application like following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Introspect)]\nstruct MyStruct {\n    num: i32,\n    text: String\n}\n\nMyStruct::introspect();\n</code></pre>\n\n<p><em>Note: Since the example you are looking for similar to <a href=\"https://stackoverflow.com/questions/54177438/how-to-programmatically-get-the-number-of-fields-of-a-struct\">this</a> question. This <a href=\"https://stackoverflow.com/a/54177920/6882497\">Proc Macro Answer</a>  and <a href=\"https://stackoverflow.com/a/54177889/6882497\">Declarative Macro Answer</a>  should give you insight as well</em></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5146, "favorite_count": 1, "answer_count": 6, "score": 21, "last_activity_date": 1566658266, "creation_date": 1472717127, "last_edit_date": 1559224703, "question_id": 39266001, "link": "https://stackoverflow.com/questions/39266001/how-to-introspect-all-available-methods-and-members-of-a-rust-type", "title": "How to introspect all available methods and members of a Rust type?", "body": "<p>Is there a way to print out a complete list of available members of a type or instance in Rust?</p>\n\n<p>For example:</p>\n\n<ul>\n<li>In Python, I can use <code>print(dir(object))</code></li>\n<li>In C, Clang has a Python API that can parse C code and introspect it.</li>\n</ul>\n\n<p>Being unfamiliar with Rust tools, I'm interested to know if there is some way to do this, either at run-time or compile-time, either with compiler features (macros for example), or using external tools.</p>\n\n<p>This question is intentionally broad because the exact method isn't important. It is common in any language to want to find all of a variable's methods/functions. Not knowing Rust well, I'm not limiting the question to specific methods for discovery.</p>\n\n<p>The reason I don't define the exact method is that I assume IDEs will need this information, so there will need to be some kinds of introspection available to support this (eventually). For all I know, Rust has something similar.</p>\n\n<p>I don't think this is a duplicate of <a href=\"https://stackoverflow.com/q/29986057/155423\">Get fields of a struct type in a macro</a> since this answer could include use of external tools (not necessarily macros).</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472716608, "post_id": 39265755, "comment_id": 65866453, "body": "That code compiles for me. Can you post the complete file which throws that error?"}, {"owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472716961, "post_id": 39265755, "comment_id": 65866662, "body": "updated with main.rs throws that error."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472717230, "post_id": 39265755, "comment_id": 65866792, "body": "Do you want <code>List&lt;T&gt;</code> to comparable to <code>[T; 4]</code> as well? (Note that you implemented <code>PartialEq&lt;Rhs = List&lt;u32&gt;&gt;</code> for <code>List&lt;u32&gt;</code> so you can only compare <code>List&lt;u32&gt;</code> with <code>List&lt;u32&gt;</code>.)"}, {"owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472717554, "post_id": 39265755, "comment_id": 65866997, "body": "I&#39;m new to Rust, what do you mean by <code>PartialEq&lt;Rhs = List&lt;u32&gt;&gt;</code>?"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472717706, "post_id": 39265755, "comment_id": 65867091, "body": "<code>PartialEq</code> can be implemented for different Lhs (the thing on the left of <code>==</code>) and Rhs (the thing on the right of <code>==</code>), and if you don&#39;t specify <code>Rhs</code>, it defaults to <code>Self</code>. So with your current implementation, you can only compare <code>List&lt;T&gt;</code> with <code>List&lt;T&gt;</code> while that <code>assert_eq!</code> tries to compare <code>List&lt;u32&gt;</code> with <code>[u32; 4]</code>."}, {"owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472729921, "post_id": 39265755, "comment_id": 65875395, "body": "It would be interesting to know how does <code>Vec&lt;T&gt;</code> implement <code>PartialEq</code>       let mut v = Vec::new();     v.push(1);     v.push(2);     v.push(3); println!(&quot;{}&quot;, v == [1, 2, 3]);"}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "edited": false, "score": 0, "creation_date": 1472719194, "post_id": 39266208, "comment_id": 65867969, "body": "For the purpose of this example a simple <code>#[derive(Debug)]</code> would suffice :)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1472719707, "last_edit_date": 1472719707, "creation_date": 1472717752, "answer_id": 39266208, "question_id": 39265755, "link": "https://stackoverflow.com/questions/39265755/how-to-implement-partialeq-on-vector-for-my-own-structs/39266208#39266208", "title": "How to implement PartialEq on Vector for my own structs?", "body": "<p><code>listex</code> and <code>[17, 18, 19, 20]</code> have different types (<code>List&lt;u32&gt;</code> and <code>[_; 4]</code>) , so you cannot check for their equality. You need to change the type of one of the arguments of <code>assert_eq!()</code> so the types match. The simplest option would be to reference <code>listex</code>'s <code>memory</code>:</p>\n\n<p><code>assert_eq!(&amp;listex.memory[0..4], [17, 18, 19, 20]);</code></p>\n\n<p>Or you can convert <code>[17, 18, 19, 20]</code> to a <code>List&lt;u32&gt;</code> so that the <code>PartialEq</code> implementation for <code>List&lt;T&gt;</code> can be put into action.</p>\n\n<p>If you were to compare <code>listex</code> with another <code>List&lt;32&gt;</code>, your <code>PartialEq</code> implementation would allow checks for equality (though you would need the <code>List&lt;T&gt;</code> to derive <code>Debug</code> in order to do perform <code>assert_eq!()</code> on them).</p>\n\n<p><strong>Edit</strong>: as for your question \"Why is it even looking at that type?\", notice that in your implementation of <code>PartialEq</code>:</p>\n\n<p><code>fn eq(&amp;self, other: &amp;List&lt;T&gt;)</code></p>\n\n<p>You specify that <code>eq</code> works only for two arguments of type <code>&amp;List&lt;T&gt;</code> (<code>&amp;self</code> points to <code>List&lt;T&gt;</code>).</p>\n"}, {"tags": [], "owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "is_accepted": false, "score": 1, "last_activity_date": 1472806511, "creation_date": 1472806511, "answer_id": 39288268, "question_id": 39265755, "link": "https://stackoverflow.com/questions/39265755/how-to-implement-partialeq-on-vector-for-my-own-structs/39288268#39288268", "title": "How to implement PartialEq on Vector for my own structs?", "body": "<p>Here is the solution, following <a href=\"https://users.rust-lang.org/t/how-to-implement-partialeq-for-my-own-structs/7122/2?u=lemoussel\" rel=\"nofollow\">cuviper response</a> on The Rust Programming Language Forum</p>\n\n<pre><code>impl&lt;T, U&gt; PartialEq&lt;U&gt; for List&lt;T&gt;\n    where Vec&lt;T&gt;: PartialEq&lt;U&gt;\n{\n    fn eq(&amp;self, other: &amp;U) -&gt; bool {\n        self.memory.eq(other)\n    }\n}\n</code></pre>\n\n<p>To test :</p>\n\n<pre><code>let mut listex: List&lt;u32&gt; = List::new();\n\nlistex.push(17);\nlistex.push(18);\nlistex.push(19);\nlistex.push(20);            \n\nprintln!(\"{}\", listex == [17, 18, 19, 20]);\n</code></pre>\n"}], "owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 839, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1472872032, "creation_date": 1472716381, "last_edit_date": 1592644375, "question_id": 39265755, "link": "https://stackoverflow.com/questions/39265755/how-to-implement-partialeq-on-vector-for-my-own-structs", "title": "How to implement PartialEq on Vector for my own structs?", "body": "<p>I have the following definition:</p>\n<pre><code>pub struct List&lt;T&gt; {\n    memory:  Vec&lt;T&gt;,\n}\n</code></pre>\n<p>I would get the equivalent of <code>#[derive(PartialEq)]</code> for this type like describe in <a href=\"https://doc.rust-lang.org/core/cmp/trait.PartialEq.html#how-can-i-implement-partialeq\" rel=\"nofollow noreferrer\">How can I implement PartialEq?</a></p>\n<p>I use a match expression, like:</p>\n<pre><code>impl&lt;T: PartialEq&gt; PartialEq for List&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;List&lt;T&gt;) -&gt; bool {\n        self.memory == other.memory      \n    }\n}\nimpl&lt;T: fmt::Debug&gt; fmt::Debug for List&lt;T&gt; where T:Display {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        try!(write!(f, &quot;[&quot;));\n        for (count, v) in self.memory.iter().enumerate() {\n            if count != 0 { try!(write!(f, &quot;, &quot;)); }\n            try!(write!(f, &quot;{}&quot;, v));\n        }\n        write!(f, &quot;]&quot;)\n    }\n}\nimpl&lt;T&gt; List&lt;T&gt; {\n    pub fn new() -&gt; Self {\n        List {\n            memory: Vec::new(),\n        }\n    }\n    // push() add to end of list\n    pub fn push(&amp;mut self, value: T) {\n        self.memory.push(value);\n    }\n}\n</code></pre>\n<p>But the compiler gives me these errors:</p>\n<blockquote>\n<p>error: mismatched types [E0308]</p>\n<p>if ! ( * left_val == * right_val ) {</p>\n<p>note: in this expansion of assert_eq!</p>\n<p>help: run <code>rustc --explain E0308</code> to see a detailed explanation</p>\n<p>note: expected type <code>librusty_data_structures::List&lt;u32&gt;</code></p>\n<p>note:    found type <code>[_; 4]</code></p>\n</blockquote>\n<p>main.rs that produce compile errors</p>\n<pre><code>let mut listex: List&lt;u32&gt; = List::new();\nlistex.push(17);\nlistex.push(18);\nlistex.push(19);\nlistex.push(20);            \nassert_eq!(listex, [17, 18, 19, 20]);\n</code></pre>\n<p>I don't understand why that matters. Why is it even looking at that type?</p>\n"}, {"tags": ["scope", "namespaces", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472711605, "post_id": 39264173, "comment_id": 65863614, "body": "As noted in the question, this doesn&#39;t work for function arguments."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472713161, "post_id": 39264173, "comment_id": 65864390, "body": "@ideasman42: Sure it does.  <code>fn f(s: String) { drop(s); &#47;* s is no longer valid *&#47; }</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472713217, "post_id": 39264173, "comment_id": 65864420, "body": "That comment was before the edit in the question and before the edit in my answer :) - I suggested adding a wrapper scope first, before that option was excluded."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472713363, "post_id": 39264173, "comment_id": 65864495, "body": "This doesn&#39;t work for arguments which are references."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472713797, "post_id": 39264173, "comment_id": 65864761, "body": "No, it doesn&#39;t, but this was not a condition. I don&#39;t think it is possible with a reference, since the whole point of borrowing an object is that it can still be used afterwards."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472724697, "post_id": 39264173, "comment_id": 65871861, "body": "This was noted in the title: &quot;Possible to prevent access to a variable declared in the scope or as a <b>function argument?</b>&quot;, edited question to make it more explicit."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472725716, "post_id": 39264173, "comment_id": 65872542, "body": "You would have to write &quot;a function argument, even if it is a <b>reference</b>&quot;."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472737893, "post_id": 39264173, "comment_id": 65881334, "body": "@ljedrz: I would side with ideasman42 here. In programming, you should <b>never assume</b> something just because it makes your life easier. If it is not specified whether this should work for <code>Copy</code> types or not, then you cannot assume that <code>Copy</code> types are excluded from the question just because it&#39;s easier for you."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472738283, "post_id": 39264173, "comment_id": 65881664, "body": "@MatthieuM. that&#39;s true, but I think ideasman42 was talking here about passing references, not values. I only covered non-<code>Copy</code>able types, because those were the ones I knew how to manage."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1472749507, "last_edit_date": 1472749507, "creation_date": 1472711533, "answer_id": 39264173, "question_id": 39264143, "link": "https://stackoverflow.com/questions/39264143/possible-to-prevent-access-to-a-variable-declared-in-the-scope-or-as-a-function/39264173#39264173", "title": "Possible to prevent access to a variable declared in the scope or as a function argument?", "body": "<p>You can pass it to any function that consumes its argument (as long as you have its ownership in the scope you want to do it in). An example is <a href=\"https://doc.rust-lang.org/std/mem/fn.drop.html\" rel=\"nofollow\">drop</a>, which does exactly (and <a href=\"https://doc.rust-lang.org/src/core/up/src/libcore/mem.rs.html#519\" rel=\"nofollow\">only</a>) that. Any attempts to use it afterwards would result in \"use after move\" errors.</p>\n\n<p>Simple example with <code>foo</code> as the block where you want to delete the argument <code>s</code>:</p>\n\n<pre><code>fn foo(s: String) -&gt; whatever {\n    println!(\"{}\", s);\n\n    drop(s); // fn drop&lt;T&gt;(_x: T) { }\n\n    println!(\"{}\", s); // error: use of moved value: `s` [E0382]\n\n    // do stuff\n}\n</code></pre>\n\n<p>Note that this is only possible for types which do not implement <code>Copy</code>.</p>\n\n<p><strong>Edit</strong>: I think I found a solution for <code>Copy</code>able types; they can be <code>Box</code>ed, after which they can be <code>drop</code>ped:</p>\n\n<pre><code>let x = Box::new(5);\nprintln!(\"{}\", x); // ok\n\ndrop(x);\n\nprintln!(\"{}\", x); // error: use of moved value\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472725247, "post_id": 39267211, "comment_id": 65872224, "body": "Its useful in Python for functions that 1) are naturally serial and don&#39;t warrant being split into many functions. 2) define temp variables you want to explicitly end possible access (or accidental access). Checking over CPython&#39;s code shows this is used in core modules such as <code>os</code>, <code>functools</code>, <code>datetime</code>, <code>pdb</code> &amp; <code>xml.etree</code>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472725787, "post_id": 39267211, "comment_id": 65872585, "body": "It will work, but you are right about ugly - I&#39;d even call it an anti-pattern. Also, it stops working after the scope of the function is over."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 5, "last_activity_date": 1472720721, "creation_date": 1472720721, "answer_id": 39267211, "question_id": 39264143, "link": "https://stackoverflow.com/questions/39264143/possible-to-prevent-access-to-a-variable-declared-in-the-scope-or-as-a-function/39267211#39267211", "title": "Possible to prevent access to a variable declared in the scope or as a function argument?", "body": "<p>There is an ugly workaround that works even for <code>Copy</code> values: Shadowing.</p>\n\n<pre><code>enum Void {}\n\nfn foo(x: i32) -&gt; whatever {\n    println!(\"{}\", x);\n\n    let x: Void;\n    // Now `x` refers to an uninitialized variable with which you\n    // couldn't do anything even if it was initialized\n}\n</code></pre>\n\n<p>However, the error messages are horrendous, and the intent is far from clear. I strongly urge you to reconsider whether you need this ability this badly. For the record, I have never seen explicit <code>del</code> being used for this purpose in Python code. Nor do I recall such a thing in any of the other code I've read.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "answer_count": 2, "score": -2, "last_activity_date": 1472826927, "creation_date": 1472711426, "last_edit_date": 1472826927, "question_id": 39264143, "link": "https://stackoverflow.com/questions/39264143/possible-to-prevent-access-to-a-variable-declared-in-the-scope-or-as-a-function", "title": "Possible to prevent access to a variable declared in the scope or as a function argument?", "body": "<p>Say we have a variable which (after being used for its intended purpose) should <em>never</em> be accessed.</p>\n\n<p><em>(doing so may be valid as far as Rust is concerned, but its contents is logically not valid anymore within the context of the application).</em></p>\n\n<p>In Python for example, you can simply do:</p>\n\n<pre><code>del myvar;\n</code></pre>\n\n<p>Is there a way to disallow future access for variables declared in the body of a function or references passed as arguments?</p>\n\n<hr>\n\n<p>Note that typically scope can be used for this, however that doesn't work for function arguments.</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "edited": false, "score": 7, "creation_date": 1472710017, "post_id": 39263555, "comment_id": 65862864, "body": "A small, unrelated note: passing <code>&amp;Vec&lt;i32&gt;</code> is almost never necessary in rust. Instead, the convention is to pass the slice directly <code>&amp;[i32]</code> which is more flexible as <code>Vec&lt;T&gt;</code> <code>Deref</code>s to <code>[T]</code>. <code>Vec</code> is designed as a dynamically growable slice, and seeing as they are being borrowed immutably here, we might as well just take the slices directly. Anyway, I realise this is probably pseudo-ish code, just thought I&#39;d mention it for passersby."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472709630, "post_id": 39263673, "comment_id": 65862716, "body": "How should this be accessed? using the <code>concat!</code> macro? <a href=\"https://doc.rust-lang.org/std/macro.concat!.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/macro.concat!.html</a>"}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472709849, "post_id": 39263673, "comment_id": 65862797, "body": "@ideasman42 - <code>SliceConcatExt&lt;T&gt;</code> is implemented for <code>[V] where V: Borrow&lt;[T]&gt;</code>, which means we can concat a <code>Vec&lt;Vec&lt;i32&gt;&gt;</code> (<code>vec![vec![1, 2], vec![3, 4]].concat() == vec![1, 2, 3, 4]</code>), or a fixed-size array (<code>[[1, 2], [3, 4]].concat()</code>) and other combinations."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472710136, "post_id": 39263673, "comment_id": 65862921, "body": "I can&#39;t get this working, <code>[a, b, c].concat()</code> gives error <code>no method named `concat` found</code>, <code>concat!(a, b, c)</code> raises error <code>expected a literal</code>."}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472710450, "post_id": 39263673, "comment_id": 65863052, "body": "@ideasman42 - <a href=\"https://play.rust-lang.org/?gist=e85dc7b145b564e4f12df07568ef3fb9&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">This playground example</a> replaces the body of your function with <code>.concat()</code>. As @mindTree mentioned, <code>&amp;Vec&lt;i32&gt;</code> is an odd thing to pass, and not really idiomatic, so I replaced them with slices."}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472713435, "post_id": 39263673, "comment_id": 65864540, "body": "Other than just inlining the function body?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472713732, "post_id": 39263673, "comment_id": 65864713, "body": "Yes, since this is a fairly primitive operation, having to create functions whenever its done seems strange. Since asking this question, I found out how, your answer that used a function relied on coercion, which is OK but makes the answer confusing for a newcomer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1472736330, "post_id": 39263673, "comment_id": 65880127, "body": "@ideasman42: the <code>concat!</code> macro is there to catenate literal <code>&amp;&#39;static str</code> at compile-time, it&#39;s a completely different beast :)"}], "tags": [], "owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "is_accepted": true, "score": 6, "last_activity_date": 1472713342, "last_edit_date": 1472713342, "creation_date": 1472709419, "answer_id": 39263673, "question_id": 39263555, "link": "https://stackoverflow.com/questions/39263555/whats-the-best-way-to-join-many-vectors-into-a-new-vector/39263673#39263673", "title": "Whats the best way to join many vectors into a new vector?", "body": "<p>There is a <code>concat</code> method that can be used for this, however the values need to be slices, or borrowable to slices, not <code>&amp;Vec&lt;_&gt;</code> as given in the question.</p>\n\n<p>An example, similar to the question:</p>\n\n<pre><code>fn func(a: &amp;Vec&lt;i32&gt;, b: &amp;Vec&lt;i32&gt;, c: &amp;Vec&lt;i32&gt;) {\n    let abc = Vec&lt;i32&gt; = [a.as_slice(), b.as_slice(), c.as_slice()].concat();\n\n    // ...\n}\n</code></pre>\n\n<p>However, as @mindTree notes, using <code>&amp;[i32]</code> type arguments is more idiomatic and removes the need for conversion. eg:</p>\n\n<pre><code>fn func(a: &amp;[i32], b: &amp;[i32], c: &amp;[i32]) {\n    let abc = Vec&lt;i32&gt; = [a, b, c].concat();\n\n    // ...\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.concat\" rel=\"noreferrer\"><code>SliceConcatExt::concat</code></a> is a more general version of your function and can join multiple slices to a Vec. It will sum the sizes each slice to pre-allocate a Vec of the right capacity, then extend repeatedly.</p>\n\n<pre><code>fn concat(&amp;self) -&gt; Vec&lt;T&gt; {\n    let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n    let mut result = Vec::with_capacity(size);\n    for v in self {\n        result.extend_from_slice(v.borrow())\n    }\n    result\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "is_accepted": false, "score": 2, "last_activity_date": 1472710717, "creation_date": 1472710717, "answer_id": 39263977, "question_id": 39263555, "link": "https://stackoverflow.com/questions/39263555/whats-the-best-way-to-join-many-vectors-into-a-new-vector/39263977#39263977", "title": "Whats the best way to join many vectors into a new vector?", "body": "<p>One possible solution might be to use the <code>Chain</code> iterator:</p>\n\n<pre><code>let abc: Vec&lt;_&gt; = a.iter().chain(b).chain(c).collect();\n</code></pre>\n\n<p>However, in your example you are borrowing the slices, so we'll need to either deref each borrowed element or use the <code>Cloned</code> iterator to copy each integer. <code>Cloned</code> is probably a bit easier and as efficient as we are working with small <code>Copy</code> data (<code>i32</code>):</p>\n\n<pre><code>let abc: Vec&lt;_&gt; = a.iter().cloned()\n    .chain(b.iter().cloned())\n    .chain(c.iter().cloned())\n    .collect();\n</code></pre>\n\n<p>Seeing as each of these iterators are <code>ExactSizeIterator</code>s, it should be possible to allocate the exact size for the target <code>Vec</code> up front, however I'm unware whether or not this is <em>actually</em> the case in the std implementation (they might be waiting on specialization to land before adding this optimisation).</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1410, "favorite_count": 0, "accepted_answer_id": 39263673, "answer_count": 2, "score": 5, "last_activity_date": 1472713342, "creation_date": 1472708859, "last_edit_date": 1472709315, "question_id": 39263555, "link": "https://stackoverflow.com/questions/39263555/whats-the-best-way-to-join-many-vectors-into-a-new-vector", "title": "Whats the best way to join many vectors into a new vector?", "body": "<p>To create a new vector with the contents of other vectors, I'm currently doing this:</p>\n\n<pre><code>fn func(a: &amp;Vec&lt;i32&gt;, b: &amp;Vec&lt;i32&gt;, c: &amp;Vec&lt;i32&gt;) {\n    let abc = Vec&lt;i32&gt; = {\n        let mut tmp = Vec::with_capacity(a.len(), b.len(), c.len());\n        tmp.extend(a);\n        tmp.extend(b);\n        tmp.extend(c);\n        tmp\n    };\n\n    // ...\n}\n</code></pre>\n\n<p>Is there a more straightforward / elegant way to do this?</p>\n"}, {"tags": ["pattern-matching", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1472714463, "post_id": 39262754, "comment_id": 65865180, "body": "Thanks for the tip with the associated Type!"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472720516, "post_id": 39262754, "comment_id": 65868861, "body": "Also: I think the return type of <code>set_shape</code> in the second code snippet should be <code>&lt;T as IsRenderable&gt;::Builder</code> to avoid possible name conflicts?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1472737909, "post_id": 39262754, "comment_id": 65881351, "body": "@LukasKalbertodt: I don&#39;t think name conflicts are a problem, since <code>T::Builder</code> is statically resolved to mean &quot;the associated type <code>Builder</code> in trait <code>IsRenderable</code>&quot;, as all the compiler knows about <code>T</code> is that it implements <code>IsRenderable</code>. Rust doesn&#39;t work like C++ templates, where dependent types are only resolved at template instantiation time. Adding another trait bound might cause an ambiguity, but then it can be addressed when the ambiguity is raised, rather than going straight to the heavyweight syntax."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472739979, "post_id": 39262754, "comment_id": 65883001, "body": "@FrancisGagn&#233; Ah yes, thanks for the clarification! :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1472737741, "last_edit_date": 1472737741, "creation_date": 1472704377, "answer_id": 39262754, "question_id": 39262661, "link": "https://stackoverflow.com/questions/39262661/matching-on-types-which-implement-a-trait-and-therefore-return-it/39262754#39262754", "title": "Matching on types which implement a trait and therefore return it", "body": "<p>Instead of using <code>match</code>, you should add a method on your <code>IsRenderable</code> trait that returns the appropriate builder for the particular implementor.</p>\n\n<pre><code>#[derive(Clone, Copy)]\npub struct Rectangle;\n\npub trait IsRenderable {\n    fn new_builder(&amp;self) -&gt; Box&lt;IsRenderBuilder&gt;;\n}\n\nimpl IsRenderable for Rectangle {\n    fn new_builder(&amp;self) -&gt; Box&lt;IsRenderBuilder&gt; {\n        Box::new(RectangleShapeBuilder)\n    }\n}\n\nstruct RectangleShapeBuilder;\n\npub trait IsRenderBuilder {}\n\nimpl IsRenderBuilder for RectangleShapeBuilder {}\n\npub fn set_shape&lt;T: IsRenderable&gt;(shape: T) -&gt; Box&lt;IsRenderBuilder&gt; {\n    shape.new_builder()\n}\n</code></pre>\n\n<p>You might even use an associated type to avoid boxing the <code>IsRenderBuilder</code>:</p>\n\n<pre><code>#[derive(Clone, Copy)]\npub struct Rectangle;\n\npub trait IsRenderable {\n    type Builder: IsRenderBuilder;\n\n    fn new_builder(&amp;self) -&gt; Self::Builder;\n}\n\nimpl IsRenderable for Rectangle {\n    type Builder = RectangleShapeBuilder;\n\n    fn new_builder(&amp;self) -&gt; Self::Builder {\n        RectangleShapeBuilder\n    }\n}\n\npub struct RectangleShapeBuilder;\n\npub trait IsRenderBuilder {}\n\nimpl IsRenderBuilder for RectangleShapeBuilder {}\n\npub fn set_shape&lt;T: IsRenderable&gt;(shape: T) -&gt; T::Builder {\n    shape.new_builder()\n}\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 0, "accepted_answer_id": 39262754, "answer_count": 1, "score": 0, "last_activity_date": 1472737741, "creation_date": 1472703647, "last_edit_date": 1472720182, "question_id": 39262661, "link": "https://stackoverflow.com/questions/39262661/matching-on-types-which-implement-a-trait-and-therefore-return-it", "title": "Matching on types which implement a trait and therefore return it", "body": "<p>I'm trying out some specific builder pattern. Please don't mind the design here -- it's a tryout.</p>\n\n<p>I have a <code>Renderer</code> type which yields a method <code>set_shape</code>. The argument type given to the call should implement the empty trait <code>IsRenderable</code>.\nThe login of the method then should differ between the struct types <code>Rectangle</code> and <code>Circle</code> which both implement the <code>IsRenderable</code> trait. Do not bother about the returning type.</p>\n\n<pre><code>#[derive(Clone, Copy)]\npub struct Rectangle {\n    pub origin: Point,\n    pub height: usize,\n    pub width: usize,\n}\n\ntrait IsRenderable {}\n\nimpl IsRenderBuilder for Rectangle {}\n\nimpl&lt;'a&gt; Renderer&lt;'a&gt; {\n    // logic that needs lifetime 'a\n    pub fn set_shape&lt;T: IsRenderable&gt;(shape: T) -&gt; Box&lt;IsRenderBuilder&gt; {\n        match shape {\n            _ =&gt; panic!(\"WTF!\"),\n        }\n    }\n}\n</code></pre>\n\n<p>I'd like to do something like this.\n<strong>PSEUDO</strong>:</p>\n\n<pre><code>match shape {\n    Rectangle =&gt; return RectangleShapeBuilder,\n    Circle =&gt; return CircleShapeBuilder,\n    _ =&gt; panic!(\"WTF!\"),\n}\n</code></pre>\n"}]