[{"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1434575139, "post_id": 30901965, "comment_id": 49843648, "body": "I&#39;d say that depends entirely on your use case. I&#39;ve had cases where I needed to see every last value of my data. Sometimes, it&#39;s enough to write out some statistics about the data. It&#39;s your data, after all."}, {"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1434575346, "post_id": 30901965, "comment_id": 49843758, "body": "Good point. And while I wait for an answer, I&#39;m doing just that, printing a few important bits of information. But I&#39;m still curious if there&#39;s a good way to print the entire array."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1434577981, "post_id": 30901965, "comment_id": 49844948, "body": "you don&#39;t need a very long format -- any array is printable as a slice."}], "answers": [{"comments": [{"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 0, "creation_date": 1434590294, "post_id": 30903184, "comment_id": 49848388, "body": "Interesting design choice, is the rational documented anywhere? Anyway, thanks for the answer, it&#39;s certainly acceptable given the circumstance."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 5, "creation_date": 1434607672, "post_id": 30903184, "comment_id": 49853182, "body": "@user12341234: This is known as &quot;coherence rules&quot;, and the rationale is to guarantee that when use the impl of <code>Trait</code> for <code>Struct</code> you are guaranteed to always have the same behavior regardless of which modules/crates you are linked with, because anything else is surprising. There have been various proposals to relax those rules in some ways, but the Rust team is very attentive to avoid footguns."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 20, "last_activity_date": 1434578583, "creation_date": 1434578583, "answer_id": 30903184, "question_id": 30901965, "link": "https://stackoverflow.com/questions/30901965/implement-debug-trait-for-large-array-type/30903184#30903184", "title": "Implement Debug trait for large array type", "body": "<pre><code>use std::fmt;\n\nstruct Array&lt;T&gt; {\n    data: [T; 1024]\n}\n\nimpl&lt;T: fmt::Debug&gt; fmt::Debug for Array&lt;T&gt; {\n    fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        self.data[..].fmt(formatter)\n    }\n}\n\nfn main() {\n    let array = Array { data: [0u8; 1024] };\n\n    println!(\"{:?}\", array);\n}\n</code></pre>\n\n<p>It's not possible to implement Debug for [T; 1024] or some array of a concrete type (ie. [u8; 1024]. Implementing traits from other crates for types from other crates, or implementing a trait from another crate for a generic type, are both not allowed by design, </p>\n"}], "owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4747, "favorite_count": 0, "accepted_answer_id": 30903184, "answer_count": 1, "score": 12, "last_activity_date": 1434578583, "creation_date": 1434573611, "question_id": 30901965, "link": "https://stackoverflow.com/questions/30901965/implement-debug-trait-for-large-array-type", "title": "Implement Debug trait for large array type", "body": "<p>I <a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html\" rel=\"noreferrer\">gather</a> that Rust provides Debug impl's for arrays size 32 and smaller.</p>\n\n<p>I also <a href=\"http://static.rust-lang.org/doc/master/std/fmt/index.html\" rel=\"noreferrer\">gather</a> that I could implement Debug on a larger array by simply using <code>write!</code> with a very long format specifier. But I'm wondering if there's a better way.</p>\n\n<p>What is the recommended method for implementing Debug for an array of length, say, 1024?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434543768, "post_id": 30890188, "comment_id": 49822127, "body": "it could be done with cfg-flags, but that would get Makefile-style messy with the dependencies"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434549405, "post_id": 30890188, "comment_id": 49826698, "body": "Is there a reason why you don&#39;t want to create multiple crates?"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434620179, "post_id": 30890188, "comment_id": 49860768, "body": "@Shepmaster No, no specific reason .. but they seem to make more sense bundled into one crate. But ya i need to know more on when to divide stuffs into crates and all that. I guess if there are 2 modules which depend on the rest and nothing depends on those two then putting them into a separate crate seems to be an overkill specially if they seem to fit in as a part of same crate - but ofcourse all is debatable and i&#39;m still learning. Would be nice if we had the feature that i wanted above though. Makes refactoring fun :)"}], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1434541724, "post_id": 30890579, "comment_id": 49820478, "body": "my actual problem is i don&#39;t want the entire crate to build. While what you wrote works if <code>cargo build</code> is entirely fine, what i wanted to know was - is there a way to do this even though refactoring has not been done in other dependent modules and the build fails but i just want to test this one. Let me update the question"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1434542145, "post_id": 30890579, "comment_id": 49820816, "body": "ah i see what you mean .. i thought i required this so much - to instruct what should be treated as a compilation unit just for this one time"}, {"owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "edited": false, "score": 0, "creation_date": 1464181307, "post_id": 30890579, "comment_id": 62378577, "body": "This still runs tests in files in the <code>bin</code> folder."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1434541329, "creation_date": 1434541329, "answer_id": 30890579, "question_id": 30890188, "link": "https://stackoverflow.com/questions/30890188/conditionally-compile-only-one-module-at-a-time/30890579#30890579", "title": "Conditionally compile only one module at a time", "body": "<p>You can run tests specifically for one module by providing it as an argument to the test binary. Cargo passes arguments to the test binary if you specify it after <code>--</code>, so something like this should work:</p>\n\n<pre><code>cargo test -- module::you::want::to::test\n</code></pre>\n\n<p>However, you can't <em>compile</em> only a part of a crate. Crates in Rust are units of compilation, like <code>.c</code> files in C, and you can't compile a half of it and ignore the other half.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1130, "favorite_count": 0, "accepted_answer_id": 30890579, "answer_count": 1, "score": 6, "last_activity_date": 1434542040, "creation_date": 1434540382, "last_edit_date": 1434542040, "question_id": 30890188, "link": "https://stackoverflow.com/questions/30890188/conditionally-compile-only-one-module-at-a-time", "title": "Conditionally compile only one module at a time", "body": "<p>Sometimes while refactoring a change in one of the modules has impact on every other module (or many others), because say a type has been changed or a function parameter has been changed etc. In this case instead of changing everything and then compiling at once is there a way i can compile and run unit tests for only that particular module, tweak it to hearts content and when all is right changed the other modules etc and run the complete/normal <code>cargo build/test</code> ? Of-course one of the ways could be to manually comment/uncomment the module listings in their corresponding root module that introduces them, but is there any other way directly from say <code>cargo test --someflag -only_this_module</code> or something ?</p>\n\n<p><strong>Explaining More:</strong></p>\n\n<p>say I have following modules:\n<code>a, b, c, d, e, f, g, h</code> where <code>f</code> depends only on <code>g</code> and <code>h</code> but rest of <code>a, b, c, d, e</code> depend on <code>f</code> (and maybe <code>g</code> and <code>h</code> but that should not matter). <code>g</code> and <code>h</code> ofcourse dont depend on anything from above. So if i make a change to <code>f</code> i want to compile only <code>f</code> and test it without changing all of them. Since <code>f</code> depends only on <code>g</code> and <code>h</code> i assume that if things are fine with these three then i should be able to test <code>f</code> even though <code>a, b ... e</code> are broken and crate will not compile if i do the normal <code>cargo build/test</code> . Is this possible.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1434534059, "post_id": 30887356, "comment_id": 49815348, "body": "I think you can write a syntax extension for this but regular <code>macro_rules</code>-macros won&#39;t help you because they do not have any kinds of variables or numbers available to them."}], "answers": [{"comments": [{"owner": {"reputation": 29078, "user_id": 227536, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dXKGl.png?s=128&g=1", "display_name": "Regexident", "link": "https://stackoverflow.com/users/227536/regexident"}, "edited": false, "score": 0, "creation_date": 1454866661, "post_id": 30888035, "comment_id": 58225805, "body": "Just for those unaware to Rust&#39;s compiler plugins: One possible solution to this that works with arbitrary (yet compile-time known) numbers would be to implement a compiler plugin exposing an <code>unroll!(\u2026)</code> macro with the same semantics. Plugins are not stable yet, though."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1434534529, "creation_date": 1434534529, "answer_id": 30888035, "question_id": 30887356, "link": "https://stackoverflow.com/questions/30887356/can-i-create-a-macro-that-unrolls-loops/30888035#30888035", "title": "Can I create a macro that unrolls loops?", "body": "<p>Well, <em>sort of</em>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! unroll {\n    (0, |$i:ident| $s:stmt) =&gt; {};\n    (1, |$i:ident| $s:stmt) =&gt; {{ let $i: usize = 0; $s; }};\n    (2, |$i:ident| $s:stmt) =&gt; {{ unroll!(1, |$i| $s); let $i: usize = 1; $s; }};\n    (3, |$i:ident| $s:stmt) =&gt; {{ unroll!(2, |$i| $s); let $i: usize = 2; $s; }};\n    (4, |$i:ident| $s:stmt) =&gt; {{ unroll!(3, |$i| $s); let $i: usize = 3; $s; }};\n    // ...\n}\n\nfn main() {\n    unroll!(3, |i| println!(\"i: {}\", i));\n}\n</code></pre>\n\n<p>You might be tempted to ask \"why don't you just use <code>unroll!($i-1, |$i| $s)</code> for the recursive case?\".  This is because <em>macros cannot do math</em>.  In fact, they cannot do <em>any</em> form of evaluation <em>whatsoever</em>.  You are basically limited to symbolic manipulation.</p>\n\n<p>Macros also <em>cannot</em> interact with types or values in any way, which means the following <strong>does not work, and cannot be made to work</strong>:</p>\n\n<pre><code>const N: usize = 3;\nunroll!(N, |i| println!(\"i: {}\", i));\n</code></pre>\n\n<p>So, you <em>can</em> do this, but only for literal integers, and you have to write an explicit case in the macro for every integer to want to be able to use.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1681, "favorite_count": 0, "accepted_answer_id": 30888035, "answer_count": 1, "score": 10, "last_activity_date": 1434543305, "creation_date": 1434532840, "last_edit_date": 1434543305, "question_id": 30887356, "link": "https://stackoverflow.com/questions/30887356/can-i-create-a-macro-that-unrolls-loops", "title": "Can I create a macro that unrolls loops?", "body": "<p>I'm trying to write some fast matrix code in Rust and to do this needs to ensure that loops are unrolled. Is there a way to create a compile-time for-loop? E.g: I want</p>\n\n<pre><code>unroll_loop!(f, a, 3);\n</code></pre>\n\n<p>to generate</p>\n\n<pre><code>f(a, 0);\nf(a, 1);\nf(a, 2);\n</code></pre>\n"}, {"tags": ["windows", "rust", "32-bit", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1434536678, "post_id": 30887502, "comment_id": 49817160, "body": "Didn&#39;t get an linting error which is a shame. Though I see value in the explicitness of the FFI it&#39;s a shame because the client of my C function needs to know so much. I end up with <code>test_int(CString::new(&quot;Foo&quot;).unwrap().as_ptr(),0);</code> - quite a mouthful"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1434537054, "post_id": 30887502, "comment_id": 49817381, "body": "you can always create a macro that does this for you and hides the boilerplate"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1434537098, "post_id": 30887502, "comment_id": 49817403, "body": "@Ronnie, the reason <code>CString</code> exists is that Rust strings are not zero-terminated and can contain zeros inside of them. You <i>have</i> to do an allocation to go from <code>&amp;str</code> to a proper <code>const char*</code>, and it is better be done by some standard library construct. You can always wrap your C functions in idiomatic Rust code to avoid exposing <code>CString</code>s to your clients."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434537145, "post_id": 30887502, "comment_id": 49817428, "body": "@ker, I believe that <code>as_bytes_with_nul()</code> and a cast is not the intended way to get a pointer; you should use <a href=\"http://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_ptr\" rel=\"nofollow noreferrer\"><code>as_ptr()</code></a> method which comes from <code>Deref&lt;Target=CStr&gt;</code>."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434537436, "post_id": 30887502, "comment_id": 49817616, "body": "@VladimirMatveev you are right... it looked quite bad, makes sense there&#39;s a better way. I edited the answer"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1434540625, "post_id": 30887502, "comment_id": 49819744, "body": "@ker you mean something like <code>fn from_str(s: &amp;str)</code>? That&#39;s because of the same reason I said above - C strings are zero-terminated while Rust strings are not. You just can&#39;t get a pointer to the beginning of <code>&amp;str</code> and pass it to a C function as a <code>const char*</code>, there may be no zero at the end of it, and then C code will likely read outside of the bounds of the allocated memory."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434540984, "post_id": 30887502, "comment_id": 49819996, "body": "maybe something could be done for <code>&amp;&#39;static str</code>... but that would probably need to be a plugin-macro..."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434537406, "last_edit_date": 1434537406, "creation_date": 1434533227, "answer_id": 30887502, "question_id": 30887201, "link": "https://stackoverflow.com/questions/30887201/bug-in-ffi-when-passing-cstring-followed-by-an-int/30887502#30887502", "title": "Bug in FFI when passing CString followed by an int", "body": "<blockquote>\n  <p>It seems that the 2nd arg is being interpreted (either in rust or c) as sizeof string, rather than the value passed from the Rust code.</p>\n</blockquote>\n\n<p>Correct. You are experiencing undefined behavior here.</p>\n\n<p>Your C-Function has a different signature from the extern function you declared in Rust-Code. First of all, passing types that are not <code>#[repr(C)]</code> to an extern function is undefined behavior and there used to be a lint for that afaik. Second, a <code>CString</code> is not a <code>char*</code>, it is a struct with internal data. If you want to pass a <code>const char*</code>, you have to pass a <code>*const u8</code>. You can get such a pointer from a <code>CString</code> through the <code>into_ptr</code> function.</p>\n\n<p>Note that <code>into_ptr</code> leaks the memory, you need to use <code>from_ptr</code> again to get a <code>CString</code> object that can get deallocated.\nIf you just want to lend out the <code>CString</code> object you can do something along the following lines:</p>\n\n<pre><code>// ensure c_str lives longer than the function call\nlet c_str = CString::new(\"Foo\").unwrap();\nunsafe { test_int_and_str(c_str.as_ptr(), 0); }\n// let the destructor of c_str free the memory\n</code></pre>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 30887502, "answer_count": 1, "score": 3, "last_activity_date": 1434537406, "creation_date": 1434532426, "question_id": 30887201, "link": "https://stackoverflow.com/questions/30887201/bug-in-ffi-when-passing-cstring-followed-by-an-int", "title": "Bug in FFI when passing CString followed by an int", "body": "<p>My Rust test code</p>\n\n<pre><code>extern \"C\" {\nfn test_int_only(n : libc::c_int);\nfn test_int_and_str(s : CString , n : libc::c_int);\n}\n\npub fn test1() { \nunsafe {\n    test_int_only(0);\n    test_int_only(1);\n    test_int_only(2);\n    test_int_only(4);\n    test_int_only(-12);\n    }\n}\n\n\npub fn test2() { \nunsafe {\n    test_int_and_str(CString::new(\"Foo\").unwrap(),0);\n    test_int_and_str(CString::new(\"Bar\").unwrap(),1);\n    test_int_and_str(CString::new(\"Baz\").unwrap(),2);\n    test_int_and_str(CString::new(\"Fub\").unwrap(),4);\n    test_int_and_str(CString::new(\"Bub\").unwrap(),-12);\n    }\n}\n</code></pre>\n\n<p>My C code</p>\n\n<pre><code>void test_int_only(int abc){\n    printf(\"%d\\n\", abc);\n}\n\nvoid test_int_and_str(const char* name,int abc) {\n    printf(\"%s %d\\n\", name, abc);\n}\n</code></pre>\n\n<p>When testing for test_int_only()</p>\n\n<pre><code>1\n2\n4\n-12\n</code></pre>\n\n<p>When testing for test_int_and_str()</p>\n\n<pre><code>Foo 4\nBar 4\nBaz 4\nFub 4\nBub 4\n</code></pre>\n\n<p>It seems that the 2nd arg is being interpreted (either in rust or c) as sizeof string, rather than the value passed from the Rust code. I'm guessing it's related to either a calling convention or null termination not working correctly. It's a C dll, with _cdecl (windows 32bit dll) calling convention. Interestingly, passing a (opaque) pointer and an int (in another test) works fine so I don't think it's a calling convention issue.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1434523197, "last_edit_date": 1434523197, "creation_date": 1434522203, "answer_id": 30883701, "question_id": 30883187, "link": "https://stackoverflow.com/questions/30883187/why-can-i-not-destructure-this-tuple-when-iterating-over-a-hashmap/30883701#30883701", "title": "Why can I not destructure this tuple when iterating over a HashMap?", "body": "<p>The error message is not very readable. What is happening is that <code>done</code> is of type <code>&amp;bool</code> since you are iterating in a non-owning way.</p>\n\n<blockquote>\n  <p>type mismatch resolving <code>&lt;std::collections::hash::map::Iter&lt;'_, collections::string::String, bool&gt; as core::iter::Iterator&gt;::Item == (_, bool)</code>:</p>\n</blockquote>\n\n<p>Basically you need to check what the actual type of <a href=\"https://doc.rust-lang.org/nightly/std/collections/hash_map/struct.Iter.html\" rel=\"noreferrer\"><code>std::collections::hash::map::Iter::Item</code></a> is. As you can see in the docs it is <code>(&amp;'a K, &amp;'a V)</code>.</p>\n\n<p>Changing</p>\n\n<pre><code>for (item, done) in list.iter() {\n</code></pre>\n\n<p>to</p>\n\n<pre><code>for (item, &amp;done) in list.iter() {\n</code></pre>\n\n<p>will fix your issue.</p>\n\n<p>What causes this confusion, is Rust's type inference. Since you are using <code>done</code> as the argument to an <code>if</code>, Rust knows for a fact that it needs to be of type <code>bool</code>. So it goes backwards from there to the assignment of the <code>done</code>-binding until it finds some other concrete type. In other languages it would probably have been the other way around, and the error would have occurred in the if-condition.</p>\n\n<hr>\n\n<p>As a side-note, in your first iteration <code>for (item, _) in list.iter() {</code> you are only interested in the keys of the <code>HashMap</code>. You can use <code>for item in list.keys()</code> for a more concise loop.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1434522805, "last_edit_date": 1434522805, "creation_date": 1434522350, "answer_id": 30883726, "question_id": 30883187, "link": "https://stackoverflow.com/questions/30883187/why-can-i-not-destructure-this-tuple-when-iterating-over-a-hashmap/30883726#30883726", "title": "Why can I not destructure this tuple when iterating over a HashMap?", "body": "<blockquote>\n  <p>It seems like both of these are related to the same issue that somehow calling list.iter() is trying to give me a tuple of (_, String, bool) instead of just (String, bool). Why is that happening?</p>\n</blockquote>\n\n<p>You are right that both are related to the original error, but wrong about the error:</p>\n\n<blockquote>\n<pre><code>(_, bool)`:  expected &amp;-ptr,\n</code></pre>\n</blockquote>\n\n<p>You get a <code>(_, bool)</code> tuple whereas the compiler expected to see a tuple of references <code>(&amp;_, &amp;bool)</code> to something. This <code>_</code> could well be a <code>String</code> (or <code>&amp;String</code>) in the compiler message, so this not the issue.</p>\n\n<p>The issue is that you are expecting a <em>value</em> where the compiler expects a <em>reference</em>, this stems from the fact that <code>iter()</code> returns <em>references</em> to the underlying elements of the collection iterated upon and the simple fix is to change how you match:</p>\n\n<pre><code>for (item, &amp;done) in &amp;list {\n}\n</code></pre>\n\n<p>As can be seen in the docs:</p>\n\n<pre><code>impl&lt;'a, K, V&gt; Iterator for Iter&lt;'a, K, V&gt;\ntype Item = (&amp;'a K, &amp;'a V)\n</code></pre>\n\n<p>The other way around would be to bind <code>done</code> to <code>&amp;bool</code> and then dereference it before use:</p>\n\n<pre><code>for (item, done) in &amp;list {\n    if *done { ... } else { ... }\n}\n</code></pre>\n"}], "owner": {"reputation": 375, "user_id": 1702373, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/6d6cef487cffcea43b289858858a608f?s=128&d=identicon&r=PG", "display_name": "Jon Cohen", "link": "https://stackoverflow.com/users/1702373/jon-cohen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 596, "favorite_count": 1, "accepted_answer_id": 30883701, "answer_count": 2, "score": 5, "last_activity_date": 1434523197, "creation_date": 1434520142, "last_edit_date": 1434522069, "question_id": 30883187, "link": "https://stackoverflow.com/questions/30883187/why-can-i-not-destructure-this-tuple-when-iterating-over-a-hashmap", "title": "Why can I not destructure this tuple when iterating over a HashMap?", "body": "<p>I'm just learning rust and am working on an easy /r/dailyprogrammer task.  Here's some code:</p>\n\n<pre><code>type ToDoList = HashMap&lt;String, bool&gt;;\n\nfn print(list: &amp;ToDoList) {\n    let mut max_len: usize = 0;\n    for (item, _) in list.iter() {\n        max_len = max(max_len, item.len());\n    }\n    let end = format!(\"+---{}-+\", \n        iter::repeat(\"-\").take(max_len).collect::&lt;String&gt;());\n\n    println!(\"{}\", end);\n    for (item, done) in list.iter() {\n        let line = format!(\"| {0} {1}{2} |\", \n            if done {\"\u2611\"} else {\"\u2610\"}, \n            item,\n            iter::repeat(\"-\")\n                .take(max_len - item.len())\n                .collect::&lt;String&gt;()\n        );\n        println!(\"{:?}\", (item, done));\n    }\n    println!(\"{}\", end);\n}\n</code></pre>\n\n<p>I'm getting this error from rustc:</p>\n\n<pre><code>error: type mismatch resolving `&lt;std::collections::hash::map::Iter&lt;'_,\n collections::string::String, bool&gt; as core::iter::Iterator&gt;::Item ==\n (_, bool)`:  expected &amp;-ptr,\n     found bool [E0271]\n todolist.rs:19     for (item, done) in list.iter() {\n todolist.rs:20         let line = format!(\"| {0} {1}{2} |\", \n todolist.rs:21             if done {\"\u2611\"} else {\"\u2610\"},  \n todolist.rs:22             item,\n todolist.rs:23             iter::repeat(\"-\")\n todolist.rs:24                 .take(max_len - item.len())\n                ...\n todolist.rs:24:21: 24:31 error: the type of this value must be known in this context\n todolist.rs:24                 .take(max_len - item.len())\n                                                ^~~~~~~~~~ note: in expansion of format_args! &lt;std macros&gt;:2:26: 2:57 note: expansion site &lt;std\n macros&gt;:1:1: 2:61 note: in expansion of format!\n todolist.rs:20:14: 26:4 note: expansion site error: aborting due to 2 previous errors\n</code></pre>\n\n<p>It seems like both of these are related to the same issue that somehow calling <code>list.iter()</code> is trying to give me a tuple of <code>(_, String, bool)</code> instead of just <code>(String, bool)</code>.  Why is that happening?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 271, "user_id": 3696012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/36699356539c3e2c36bf9971a6051668?s=128&d=identicon&r=PG&f=1", "display_name": "user3696012", "link": "https://stackoverflow.com/users/3696012/user3696012"}, "edited": false, "score": 0, "creation_date": 1434515521, "post_id": 30882270, "comment_id": 49805400, "body": "Thank you for the help - I&#39;m still quite lost in the Rust ownership rules. I guess I&#39;ll try to develop a simple mark-and-sweep garbage collector to practice those rules."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 271, "user_id": 3696012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/36699356539c3e2c36bf9971a6051668?s=128&d=identicon&r=PG&f=1", "display_name": "user3696012", "link": "https://stackoverflow.com/users/3696012/user3696012"}, "edited": false, "score": 1, "creation_date": 1434521425, "post_id": 30882270, "comment_id": 49807590, "body": "@user3696012: <i>I guess I&#39;ll try to develop a simple mark-and-sweep garbage collector to practice those rules.</i> =&gt; Try to avoid opening the <code>unsafe</code> hatch, it&#39;s hard enough when you understand the ownership rules, but if you have not internalize them already..."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1526487563, "last_edit_date": 1526487563, "creation_date": 1434514831, "answer_id": 30882270, "question_id": 30882065, "link": "https://stackoverflow.com/questions/30882065/immutable-reference-after-mutable-borrow/30882270#30882270", "title": "Immutable reference after mutable borrow", "body": "<p>Your program panics because you're trying to borrow the <code>Vec</code> mutably and immutably at the same time: this is not allowed.</p>\n\n<p>What you need to do instead is wrap only the <code>String</code>s in <code>RefCell</code>. This allows you to mutate the strings while iterating the <code>Vec</code>.</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Res {\n    name: RefCell&lt;String&gt;,\n}\n\nimpl Res {\n    fn new(name: &amp;str) -&gt; Res {\n        Res {\n            name: RefCell::new(name.to_string()),\n        }\n    }\n\n    // I don't need all_res to be mutable\n    fn normalize(&amp;self, all_res: &amp;Vec&lt;Res&gt;) {\n        // [...] Iterate through all_res and update self.name\n        *self.name.borrow_mut() = \"foo\".to_string();\n    }\n}\n\nfn main() {\n    let res = vec![Res::new(\"res1\"), Res::new(\"res2\")];\n\n    for r in res.iter() {\n        r.normalize(&amp;res);\n    }\n\n    println!(\"{}\", *res[0].name.borrow());\n}\n</code></pre>\n"}], "owner": {"reputation": 271, "user_id": 3696012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/36699356539c3e2c36bf9971a6051668?s=128&d=identicon&r=PG&f=1", "display_name": "user3696012", "link": "https://stackoverflow.com/users/3696012/user3696012"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1125, "favorite_count": 0, "accepted_answer_id": 30882270, "answer_count": 1, "score": 5, "last_activity_date": 1526487563, "creation_date": 1434513382, "last_edit_date": 1526487527, "question_id": 30882065, "link": "https://stackoverflow.com/questions/30882065/immutable-reference-after-mutable-borrow", "title": "Immutable reference after mutable borrow", "body": "<p>I run into similar problems related to ownership/borrowing every time I use Rust, so here is the simplest piece of code that illustrates my usual problems:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Res {\n    name: String,\n}\n\nimpl Res {\n    fn new(name: &amp;str) -&gt; Res {\n        Res {\n            name: name.to_string(),\n        }\n    }\n\n    // I don't need all_res to be mutable\n    fn normalize(&amp;mut self, all_res: &amp;Vec&lt;Res&gt;) {\n        // [...] Iterate through all_res and update self.name\n        self.name = \"foo\".to_string();\n    }\n}\n\nfn main() {\n    let res = RefCell::new(vec![Res::new(\"res1\"), Res::new(\"res2\")]);\n\n    for r in res.borrow_mut().iter_mut() {\n        // This panics at runtime saying it's\n        // already borrowed (which makes sense, I guess).\n        r.normalize(&amp;*res.borrow());\n    }\n}\n</code></pre>\n\n<p>After reading about <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a> I thought this would work. It compiles, but panics at runtime. </p>\n\n<p>How do I reference a vector while iterating over the same vector? Is there any better data structure to allow me to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434472040, "post_id": 30872911, "comment_id": 49787703, "body": "Your question doesn&#39;t have anything to do with mutability. Try very hard to reduce your problem to a <a href=\"/help/mcve\">MCVE</a> before posting. I understand it can be difficult, but I assure that it will help you understand problems better as well as get quicker answers ^_^."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1434473322, "post_id": 30872911, "comment_id": 49788530, "body": "Read the answer, you&#39;re going to need that knowledge in the future, but for this particular example you probably don&#39;t want a <code>&amp;mut Vec</code>. Just store a <code>Vec</code> in <code>User</code>. The user object doesn&#39;t borrow and modify someone else&#39;s address list, each has its own address list and owns it."}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434473529, "post_id": 30872911, "comment_id": 49788656, "body": "@Shepmaster I reduced it as much as I could. Your answer helped me to fix the reduced example, unfortunately it didn&#39;t work for my actual situation which is still producing the same error. Hopefully I can work it out now that I&#39;m on the right track. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434474040, "post_id": 30872911, "comment_id": 49788945, "body": "@Caballero no worries about not getting it all the way, so long as you tried ^_^. I used your example code and reordered the statements and it worked. Or did you mean your example not in the question?"}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434474452, "post_id": 30872911, "comment_id": 49789175, "body": "@Shepmaster I meant that in my real life situation which was vastly simplified into this question reordering didn&#39;t help, but I may be facing a different issue which I now need to try to digest."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434475995, "post_id": 30872911, "comment_id": 49790051, "body": "@Caballero perhaps! I look forward to your next question! ^_^"}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434476300, "post_id": 30872911, "comment_id": 49790217, "body": "@Shepmaster Well in that case do you mind taking a look at my update? This is actually closer to my problem and that&#39;s how I should have formed it from the beginning."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434478573, "post_id": 30872911, "comment_id": 49791624, "body": "Please look <a href=\"http://stackoverflow.com/questions/29428227/return-local-string-as-slice\">here</a>, <a href=\"http://stackoverflow.com/questions/29869764/how-do-i-return-a-vector-created-using-a-for-loop\">here</a> and <a href=\"http://stackoverflow.com/questions/27275007/converting-from-string-to-str-with-a-different-lifetime\">here</a>, and through the links in these questions and answers. Hopefully it will clarify what&#39;s the problem here (and, for example, why using a lifetime parameter like in <code>fn get_users&lt;&#39;a&gt;() -&gt; Vec&lt;User&lt;&#39;a&gt;&gt;</code> is unsound."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434478608, "post_id": 30872911, "comment_id": 49791647, "body": "These questions are not exact duplicates, however, so I&#39;m reluctant to mark this question as one."}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434479225, "post_id": 30872911, "comment_id": 49792015, "body": "@VladimirMatveev Thanks. It looks like these questions mostly deal with strings and still the general answer is &quot;impossible&quot;, so I&#39;m guessing since my situation is even more complicated I can file this under &quot;definitely impossible&quot;?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1434483447, "post_id": 30872911, "comment_id": 49794376, "body": "It doesn&#39;t work like that. This whole set of problems stems from one source, the basic concepts of ownership and borrowing, and all of these questions (including yours) are just about different applications of them. Here you&#39;re trying to return a borrowed reference to an owned structure (<code>Vec&lt;Address&gt;</code>) from a function, but this owned structure is owned by the stack frame of the function, and when this function returns, this structure is destroyed, and the returned reference would become dangling if it was allowed to return it. This is essentially the same thing as in the other questions."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434521272, "post_id": 30872911, "comment_id": 49807516, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/29598264/returning-a-struct-containing-mutable-values\">Returning a struct containing mutable values</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1434471757, "creation_date": 1434471757, "answer_id": 30873078, "question_id": 30872911, "link": "https://stackoverflow.com/questions/30872911/lifetime-of-a-mutable-element-in-struct/30873078#30873078", "title": "Lifetime of a mutable element in struct", "body": "<p><em>I know this has been answered before, but I can't find it... feel free to mark this as duplicate if you find it.</em></p>\n\n<p>The problem is that you are attempting to store a reference in a container that <em>will outlive the reference</em>. Here's a <a href=\"/help/mcve\">MCVE</a> of your problem:</p>\n\n<pre><code>fn main() {\n    let mut things = vec![];\n    let a = 42;\n    things.push(&amp;a);\n}\n</code></pre>\n\n<p>Items are dropped in the reverse order they are created, so <code>a</code> is dropped before <code>things</code>. However, <code>things</code> has a reference to <code>a</code>, which means that there would be a point in time where there's a dangling reference, which Rust doesn't allow. Reorder your statements:</p>\n\n<pre><code>fn main() {\n    let a = 42;\n    let mut things = vec![];\n    things.push(&amp;a);\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 2, "accepted_answer_id": 30873078, "answer_count": 1, "score": 4, "last_activity_date": 1520595543, "creation_date": 1434471220, "last_edit_date": 1520595543, "question_id": 30872911, "link": "https://stackoverflow.com/questions/30872911/lifetime-of-a-mutable-element-in-struct", "title": "Lifetime of a mutable element in struct", "body": "<p>How can I define a mutable element in a <code>struct</code>? If I have the following example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct User&lt;'a&gt; {\n    reference: String,\n    email: String,\n    addresses: &amp;'a mut Vec&lt;Address&gt;\n}\n\nstruct Address {\n    street: String,\n    city: String\n}\n\nfn main() {\n\n    let mut users = Vec::new();\n    users.push(User {\n        reference: \"ref\".to_string(),\n        email: \"test@test.com\".to_string(),\n        addresses: &amp;mut Vec::new()\n    });\n\n}\n</code></pre>\n\n<p>...it produces an error:</p>\n\n<pre><code>src/main.rs:18:19: 18:29 error: borrowed value does not live long enough\nsrc/main.rs:18      addresses: &amp;mut Vec::new()\n                                    ^~~~~~~~~~\nsrc/main.rs:14:29: 21:2 note: reference must be valid for the block suffix following statement 0 at 14:28...\nsrc/main.rs:14  let mut users = Vec::new();\nsrc/main.rs:15  users.push(User {\nsrc/main.rs:16      reference: \"ref\".to_string(),\nsrc/main.rs:17      email: \"test@test.com\".to_string(),\nsrc/main.rs:18      addresses: &amp;mut Vec::new()\nsrc/main.rs:19  });\n               ...\nsrc/main.rs:15:2: 19:5 note: ...but borrowed value is only valid for the statement at 15:1\nsrc/main.rs:15  users.push(User {\nsrc/main.rs:16      reference: \"ref\".to_string(),\nsrc/main.rs:17      email: \"test@test.com\".to_string(),\nsrc/main.rs:18      addresses: &amp;mut Vec::new()\nsrc/main.rs:19  });\nsrc/main.rs:15:2: 19:5 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:15  users.push(User {\nsrc/main.rs:16      reference: \"ref\".to_string(),\nsrc/main.rs:17      email: \"test@test.com\".to_string(),\nsrc/main.rs:18      addresses: &amp;mut Vec::new()\nsrc/main.rs:19  });\nerror: aborting due to previous error\n</code></pre>\n\n<p>...and if I take compiler's suggestion <code>help: consider using a let binding to increase its lifetime</code>:</p>\n\n<pre><code>fn main() {\n\n    let mut users = Vec::new();\n    let mut addresses = Vec::new();\n    users.push(User {\n        reference: \"ref\".to_string(),\n        email: \"test@test.com\".to_string(),\n        addresses: &amp;mut addresses\n    });\n\n}\n</code></pre>\n\n<p>...I still get a similar error:</p>\n\n<pre><code>src/main.rs:19:19: 19:28 error: `addresses` does not live long enough\nsrc/main.rs:19      addresses: &amp;mut addresses\n                                    ^~~~~~~~~\nsrc/main.rs:14:29: 22:2 note: reference must be valid for the block suffix following statement 0 at 14:28...\nsrc/main.rs:14  let mut users = Vec::new();\nsrc/main.rs:15  let mut addresses = Vec::new();\nsrc/main.rs:16  users.push(User {\nsrc/main.rs:17      reference: \"ref\".to_string(),\nsrc/main.rs:18      email: \"test@test.com\".to_string(),\nsrc/main.rs:19      addresses: &amp;mut addresses\n               ...\nsrc/main.rs:15:33: 22:2 note: ...but borrowed value is only valid for the block suffix following statement 1 at 15:32\nsrc/main.rs:15  let mut addresses = Vec::new();\nsrc/main.rs:16  users.push(User {\nsrc/main.rs:17      reference: \"ref\".to_string(),\nsrc/main.rs:18      email: \"test@test.com\".to_string(),\nsrc/main.rs:19      addresses: &amp;mut addresses\nsrc/main.rs:20  });\n               ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>What's the issue here?</p>\n\n<p><strong>UPDATE:</strong> So this situation is actually closer to my problem:</p>\n\n<pre><code>struct User&lt;'a&gt; {\n    reference: String,\n    email: String,\n    addresses: &amp;'a mut Vec&lt;Address&gt;\n}\n\nstruct Address {\n    street: String,\n    city: String\n}\n\nfn main() {\n\n    let mut users = get_users();\n\n}\n\nfn get_users&lt;'a&gt;() -&gt; Vec&lt;User&lt;'a&gt;&gt; {\n\n    let mut addresses = Vec::new();\n    let mut users = Vec::new();\n    users.push(User {\n        reference: \"ref\".to_string(),\n        email: \"test@test.com\".to_string(),\n        addresses: &amp;mut addresses\n    });\n\n    users\n\n}\n</code></pre>\n\n<p>...and it's causing this error:</p>\n\n<pre><code>src/main.rs:26:25: 26:34 error: `addresses` does not live long enough\nsrc/main.rs:26         addresses: &amp;mut addresses\n                                       ^~~~~~~~~\nsrc/main.rs:19:37: 31:2 note: reference must be valid for the lifetime 'a as defined on the block at 19:36...\nsrc/main.rs:19 fn get_users&lt;'a&gt;() -&gt; Vec&lt;User&lt;'a&gt;&gt; {\nsrc/main.rs:20 \nsrc/main.rs:21  let mut addresses = Vec::new();\nsrc/main.rs:22     let mut users = Vec::new();\nsrc/main.rs:23     users.push(User {\nsrc/main.rs:24         reference: \"ref\".to_string(),\n               ...\nsrc/main.rs:21:33: 31:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 21:32\nsrc/main.rs:21  let mut addresses = Vec::new();\nsrc/main.rs:22     let mut users = Vec::new();\nsrc/main.rs:23     users.push(User {\nsrc/main.rs:24         reference: \"ref\".to_string(),\nsrc/main.rs:25         email: \"test@test.com\".to_string(),\nsrc/main.rs:26         addresses: &amp;mut addresses\n               ...\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["memory", "rust", "benchmarking"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434462539, "post_id": 30869007, "comment_id": 49780328, "body": "I suspect that generic methods (also available in C/C++) would work, but I never found a fine-grained way of measuring in a generic fashion :("}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434462849, "post_id": 30869007, "comment_id": 49780631, "body": "@Matthieu M. Yes, that&#39;d work, but require that I break out all my benchmark methods in separate binaries, which is burdensome. Also it may or may not give correct results."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434466040, "post_id": 30869007, "comment_id": 49783477, "body": "To do this from inside of the program, I&#39;d expect that you&#39;d have to wait until allocators are pluggable. Then you&#39;d have to make sure that every heap allocation you make uses a provided allocator, and then implement an allocator that tracks how much memory is lent out at any given time. I wish that valgrind&#39;s memory tracking worked with jemalloc..."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434550142, "post_id": 30871661, "comment_id": 49827270, "body": "You mentioned not liking the other answer &quot;as there may be side channels that store data&quot;, but note that this answer only tracks memory from jemalloc, so if your function calls into C code that uses any other allocator, it will not be included in this report."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434551345, "post_id": 30871661, "comment_id": 49828253, "body": "True. This is one caveat that makes the jemalloc based approach less useful once we deal with non-rust code (or once we have pluggable allocators, which on the other hand could make the whole point moot). Yet another reason why I&#39;m not quite satisfied with either answer."}, {"owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "edited": false, "score": 0, "creation_date": 1585407122, "post_id": 30871661, "comment_id": 107749382, "body": "<code>alloc::heap::stats_print()</code> function no longer exists in current rust (e.g. 1.42)"}, {"owner": {"reputation": 948, "user_id": 1523360, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a62d24010b93f2ae231e23186ca04e61?s=128&d=identicon&r=PG", "display_name": "invis", "link": "https://stackoverflow.com/users/1523360/invis"}, "reply_to_user": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "edited": false, "score": 0, "creation_date": 1589137514, "post_id": 30871661, "comment_id": 109168088, "body": "@diralik do you know what to use instead?"}, {"owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "reply_to_user": {"reputation": 948, "user_id": 1523360, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a62d24010b93f2ae231e23186ca04e61?s=128&d=identicon&r=PG", "display_name": "invis", "link": "https://stackoverflow.com/users/1523360/invis"}, "edited": false, "score": 1, "creation_date": 1589197279, "post_id": 30871661, "comment_id": 109187906, "body": "@invis I use <a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl</code></a>, here are <a href=\"https://stackoverflow.com/a/61728864/5812238\">details</a>"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 6, "last_activity_date": 1434467798, "creation_date": 1434467798, "answer_id": 30871661, "question_id": 30869007, "link": "https://stackoverflow.com/questions/30869007/how-to-benchmark-memory-usage-of-a-function/30871661#30871661", "title": "How to benchmark memory usage of a function?", "body": "<p>Currently, the only way to get allocation information is the  <code>alloc::heap::stats_print();</code> method (behind <code>#![feature(alloc)]</code>), which calls jemalloc's <code>print_stats()</code>.</p>\n\n<p>I'll update this answer with further information once I have learned what the output means.</p>\n\n<p>(Note that I'm not going to accept this answer, so if someone comes up with a better solution...)</p>\n"}, {"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1434531292, "post_id": 30880810, "comment_id": 49813327, "body": "This is a good point, and if we want to measure memory usage <i>of a specific structure</i>, it&#39;s great. However, as you say, it&#39;s quite intrusive (which may be OK for many use cases, though), and it doesn&#39;t necessarily get the whole picture (as there may be side channels that store data, e.g. a global table)."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1434544470, "post_id": 30880810, "comment_id": 49822678, "body": "@llogiq: As Nicholas mentions, handling things like shared ownership is still an open question\u2014but you get to decide how to handle it. Traits make deciding how to implement such a thing quite easy. You can handle such things in whatever manner you choose."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1434545996, "post_id": 30880810, "comment_id": 49823849, "body": "Fair enough. I really like the approach, it affords a lot of control. However, it&#39;s also a bit finicky and easy to get wrong. So, while it may be reasonable in many cases, it is not the solution I look for."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 9, "last_activity_date": 1434503800, "creation_date": 1434503800, "answer_id": 30880810, "question_id": 30869007, "link": "https://stackoverflow.com/questions/30869007/how-to-benchmark-memory-usage-of-a-function/30880810#30880810", "title": "How to benchmark memory usage of a function?", "body": "<p>As far as measuring data structure sizes is concerned, this can be done fairly easily through the use of traits and a small compiler plugin. Nicholas Nethercote in his article <a href=\"https://blog.mozilla.org/nnethercote/2015/06/03/measuring-data-structure-sizes-firefox-c-vs-servo-rust/\"><em>Measuring data structure sizes: Firefox (C++) vs. Servo (Rust)</em></a> demonstrates how it works in Servo; it boils down to adding <code>#[derive(HeapSizeOf)]</code> (or occasionally a manual implementation) to each type you care about. This is a good way of allowing precise checking of where memory is going, too; it is, however, comparatively intrusive as it requires changes to be made in the first place, where something like jemalloc\u2019s <code>print_stats()</code> doesn\u2019t. Still, for good and precise measurements, it\u2019s a sound approach.</p>\n"}, {"comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1444148853, "post_id": 30983834, "comment_id": 53774985, "body": "I compiled in debug mode (with <code>cargo build</code>), but I do not see the line numbers in the <code>massif</code> dump. I also tried <code>rustc -g</code> with the same result. Do you know why?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1461062100, "post_id": 30983834, "comment_id": 61017069, "body": "@antoyo Try switching to the system allocator with <code>extern crate alloc_system;</code>."}, {"owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "edited": false, "score": 0, "creation_date": 1585407335, "post_id": 30983834, "comment_id": 107749454, "body": "Also there is <a href=\"https://docs.rs/jemalloc-ctl/0.3.3/jemalloc_ctl/\" rel=\"nofollow noreferrer\">jemalloc_ctl</a> crate, which provides safe convenient typed API (e.g. <a href=\"https://docs.rs/jemalloc-ctl/0.3.3/jemalloc_ctl/stats/struct.resident.html\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl::stats::resident</code></a>)"}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 11, "last_activity_date": 1576055755, "last_edit_date": 1576055755, "creation_date": 1434986621, "answer_id": 30983834, "question_id": 30869007, "link": "https://stackoverflow.com/questions/30869007/how-to-benchmark-memory-usage-of-a-function/30983834#30983834", "title": "How to benchmark memory usage of a function?", "body": "<p>You can use the jemalloc allocator to print the allocation statistics. For example,</p>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"stackoverflow-30869007\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\njemallocator = \"0.3\"\njemalloc-sys = {version = \"0.3\", features = [\"stats\"]}\nlibc = \"0.2\"\n</code></pre>\n\n<p>src/main.rs:</p>\n\n<pre><code>use libc::{c_char, c_void};\nuse std::ptr::{null, null_mut};\n\n#[global_allocator]\nstatic ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n\nextern \"C\" fn write_cb(_: *mut c_void, message: *const c_char) {\n    print!(\"{}\", String::from_utf8_lossy(unsafe {\n        std::ffi::CStr::from_ptr(message as *const i8).to_bytes()\n    }));\n}\n\nfn main() {\n    unsafe { jemalloc_sys::malloc_stats_print(Some(write_cb), null_mut(), null()) };\n}\n</code></pre>\n\n<p>In a single-threaded program that should allow you to get a good measurement of how much memory a structure takes. Just print the statistics before the structure is created and after and calculate the difference.</p>\n\n<hr>\n\n<p>You can also use Valgrind (<a href=\"http://valgrind.org/docs/manual/ms-manual.html\" rel=\"nofollow noreferrer\">Massif</a>) to get the heap profile. It works just like with any other C program. Make sure you have debug symbols enabled in the executable (e.g. using debug build or custom Cargo configuration). You can use, say, <a href=\"http://massiftool.sourceforge.net/\" rel=\"nofollow noreferrer\">http://massiftool.sourceforge.net/</a> to analyse the generated heap profile.</p>\n\n<p>(I verified this to work on Debian Jessie, in a different setting your mileage may vary).</p>\n\n<p>(In order to use Rust with Valgrind you'll probably have to switch back to the system allocator).</p>\n\n<p>P.S. There is now also <a href=\"https://blog.mozilla.org/nnethercote/2019/04/17/a-better-dhat/\" rel=\"nofollow noreferrer\">a better DHAT</a>.</p>\n\n<hr>\n\n<p>jemalloc <a href=\"https://github.com/jemalloc/jemalloc/wiki/Use-Case:-Heap-Profiling\" rel=\"nofollow noreferrer\">can be told</a> to dump a memory profile. You can probably do this with the Rust FFI but I haven't investigated this route.</p>\n"}, {"comments": [{"owner": {"reputation": 948, "user_id": 1523360, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a62d24010b93f2ae231e23186ca04e61?s=128&d=identicon&r=PG", "display_name": "invis", "link": "https://stackoverflow.com/users/1523360/invis"}, "edited": false, "score": 0, "creation_date": 1589269746, "post_id": 61728864, "comment_id": 109218460, "body": "is there a way to print/visualize <b>stack</b> memory state?"}, {"owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "reply_to_user": {"reputation": 948, "user_id": 1523360, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a62d24010b93f2ae231e23186ca04e61?s=128&d=identicon&r=PG", "display_name": "invis", "link": "https://stackoverflow.com/users/1523360/invis"}, "edited": false, "score": 1, "creation_date": 1589303756, "post_id": 61728864, "comment_id": 109238383, "body": "@invis probably it is better to ask it in another (new) question. But one possible solution is to create variable in the beginning of <code>main</code> function and obtain pointer by taking reference to this variable. Later when your want to measure stack size of current thread, you could create another variable and take reference to second variable. Stack size is difference between those two pointers."}], "tags": [], "owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "is_accepted": false, "score": 2, "last_activity_date": 1589197194, "creation_date": 1589197194, "answer_id": 61728864, "question_id": 30869007, "link": "https://stackoverflow.com/questions/30869007/how-to-benchmark-memory-usage-of-a-function/61728864#61728864", "title": "How to benchmark memory usage of a function?", "body": "<p>Now there is <a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl</code></a> crate which provides <strong>convenient safe typed API</strong>. Add it to your <code>Cargo.toml</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>[dependencies]\njemalloc-ctl = \"0.3\"\njemallocator = \"0.3\"\n</code></pre>\n\n<p>Then configure <code>jemalloc</code> to be <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/global-allocators.html\" rel=\"nofollow noreferrer\">global allocator</a> and use methods from <a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/stats/index.html\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl::stats</code></a> module:</p>\n\n<ul>\n<li><a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/stats/struct.allocated.html\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl::stats::allocated</code></a></li>\n<li><a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/stats/struct.resident.html\" rel=\"nofollow noreferrer\"><code>jemalloc_ctl::stats::resident</code></a></li>\n</ul>\n\n<hr>\n\n<p>Here is <a href=\"https://docs.rs/jemalloc-ctl/latest/jemalloc_ctl/index.html#examples\" rel=\"nofollow noreferrer\">official example</a>:</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\nuse jemalloc_ctl::{stats, epoch};\n\n#[global_allocator]\nstatic ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n\nfn main() {\n    loop {\n        // many statistics are cached and only updated when the epoch is advanced.\n        epoch::advance().unwrap();\n\n        let allocated = stats::allocated::read().unwrap();\n        let resident = stats::resident::read().unwrap();\n        println!(\"{} bytes allocated/{} bytes resident\", allocated, resident);\n        thread::sleep(Duration::from_secs(10));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5928, "favorite_count": 4, "accepted_answer_id": 30983834, "answer_count": 4, "score": 21, "last_activity_date": 1589197194, "creation_date": 1434461327, "last_edit_date": 1434466398, "question_id": 30869007, "link": "https://stackoverflow.com/questions/30869007/how-to-benchmark-memory-usage-of-a-function", "title": "How to benchmark memory usage of a function?", "body": "<p>I notice that Rust's test has a benchmark mode that will measure execution time in <code>ns/iter</code>, but I could not find a way to measure memory usage.</p>\n\n<p>How would I implement such a benchmark? Let us assume for the moment that I only care about heap memory at the moment (though stack usage would also certainly be interesting).</p>\n\n<p>Edit: I found <a href=\"https://github.com/rust-lang/rust/issues/22666\">this issue</a> which asks for the exact same thing.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 4, "last_activity_date": 1434460795, "creation_date": 1434460795, "answer_id": 30868761, "question_id": 30868665, "link": "https://stackoverflow.com/questions/30868665/cannot-infer-appropriate-lifetime-for-autoref-when-calling-a-method-from-an-iter/30868761#30868761", "title": "Cannot infer appropriate lifetime for autoref when calling a method from an Iterator implementation", "body": "<p>Changing <code>get(\u2026)</code> to return <code>Option&lt;&amp;'a i32&gt;</code> makes it compile.</p>\n\n<p>Playground URL: <a href=\"https://play.rust-lang.org/?gist=10783e90287b7111c126&amp;version=stable\" rel=\"nofollow\">https://play.rust-lang.org/?gist=10783e90287b7111c126&amp;version=stable</a></p>\n\n<p>Gist URL: <a href=\"https://gist.github.com/10783e90287b7111c126\" rel=\"nofollow\">https://gist.github.com/10783e90287b7111c126</a></p>\n"}, {"comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1434461525, "post_id": 30869059, "comment_id": 49779517, "body": "Of course. It is separate from self so I also have to declare it that way. Thanks."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1434461450, "creation_date": 1434461450, "answer_id": 30869059, "question_id": 30868665, "link": "https://stackoverflow.com/questions/30868665/cannot-infer-appropriate-lifetime-for-autoref-when-calling-a-method-from-an-iter/30869059#30869059", "title": "Cannot infer appropriate lifetime for autoref when calling a method from an Iterator implementation", "body": "<p>You need to update your <code>get</code> method to return a reference with longer life:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Use 'a from impl&lt;'a&gt; IntegerArrayBag&lt;'a&gt;\nfn get(&amp;self, idx: usize) -&gt; Option&lt;&amp;'a i32&gt; {\n</code></pre>\n\n<p>and then it will compile.</p>\n"}], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2468, "favorite_count": 0, "accepted_answer_id": 30869059, "answer_count": 2, "score": 7, "last_activity_date": 1506967194, "creation_date": 1434460517, "last_edit_date": 1506967194, "question_id": 30868665, "link": "https://stackoverflow.com/questions/30868665/cannot-infer-appropriate-lifetime-for-autoref-when-calling-a-method-from-an-iter", "title": "Cannot infer appropriate lifetime for autoref when calling a method from an Iterator implementation", "body": "<p>I am trying to implement the <code>Iterator</code> trait for a struct which acts as a borrower of an array of <code>i32</code> values, but I keep running into the compiler complaining about not being able to infer a lifetime inside the next method.</p>\n\n<p>I am aware of <a href=\"https://stackoverflow.com/questions/27809095/need-help-understanding-iterator-lifetimes\">Need help understanding Iterator lifetimes</a>, but since my struct just borrows a slice of the array anyway, I keep the memory of the actual elements separate from my <code>IntegerArrayBag</code>.</p>\n\n<pre><code>#[derive(Debug)]\nstruct IntegerArrayBag&lt;'a&gt; {\n    arr: &amp;'a [i32],\n    idx: usize,\n}\n\nimpl&lt;'a&gt; IntegerArrayBag&lt;'a&gt; {\n    fn len(&amp;self) -&gt; usize {\n        self.arr.len()\n    }\n\n    fn get(&amp;self, idx: usize) -&gt; Option&lt;&amp;i32&gt; {\n        if self.arr.len() &gt; idx {\n            Some(&amp;self.arr[idx])\n        } else {\n            None\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for IntegerArrayBag&lt;'a&gt; {\n    type Item = &amp;'a i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a i32&gt; {\n        let idx = self.idx;\n        self.idx += 1;\n        self.get(idx)\n    }\n}\n</code></pre>\n\n<p>If I try to compile <a href=\"https://play.rust-lang.org/?gist=6d57479b65c95b3a6f35&amp;version=nightly\" rel=\"nofollow noreferrer\">this code</a>, the compiler complains with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/main.rs:27:14\n   |\n27 |         self.get(idx)\n   |              ^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 24:5...\n  --&gt; src/main.rs:24:5\n   |\n24 | /     fn next(&amp;mut self) -&gt; Option&lt;&amp;'a i32&gt; {\n25 | |         let idx = self.idx;\n26 | |         self.idx += 1;\n27 | |         self.get(idx)\n28 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:27:9\n   |\n27 |         self.get(idx)\n   |         ^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 21:1...\n  --&gt; src/main.rs:21:1\n   |\n21 | / impl&lt;'a&gt; Iterator for IntegerArrayBag&lt;'a&gt; {\n22 | |     type Item = &amp;'a i32;\n23 | |\n24 | |     fn next(&amp;mut self) -&gt; Option&lt;&amp;'a i32&gt; {\n...  |\n28 | |     }\n29 | | }\n   | |_^\nnote: ...so that expression is assignable (expected std::option::Option&lt;&amp;'a i32&gt;, found std::option::Option&lt;&amp;i32&gt;)\n  --&gt; src/main.rs:27:9\n   |\n27 |         self.get(idx)\n   |         ^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1434460447, "post_id": 30868300, "comment_id": 49778651, "body": "<code>&quot;Foo&quot;</code> doesn&#39;t actually live on the stack, unlike <code>17</code>. <code>&quot;Foo&quot;</code> is <code>&amp;&#39;static str</code>, so it does live longer than <code>17</code>."}, {"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1434461126, "post_id": 30868300, "comment_id": 49779182, "body": "I think this is the actual answer I&#39;m looking for"}], "answers": [{"comments": [{"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1434461795, "post_id": 30868742, "comment_id": 49779732, "body": "I missed the &#39;static&#39; scope for the string. But yes once I realised that, the rest is obvious; though a little annoying. I guess I have to store everything in Bar as values rather than references just to be consistent."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1434460731, "last_edit_date": 1495541677, "creation_date": 1434460731, "answer_id": 30868742, "question_id": 30868300, "link": "https://stackoverflow.com/questions/30868300/struct-vs-enum-lifetime-differences/30868742#30868742", "title": "Struct vs enum lifetime differences", "body": "<blockquote>\n  <p>To me it seems like let c = Bar::Fub(&amp;17), the 17 lasts the same life time as the previous line where \"Foo\" is created on the stack</p>\n</blockquote>\n\n<p>A string literal always has <code>'static</code> lifetime and will therefor always live long enough.</p>\n\n<p>I think the issue is that you are hitting is the fact that an enum expression is actually somewhat of a a function call. Somewhat meaning that the lifetime of the argument is ignored in the computation of the Enum's lifetime. The Enum's lifetime apparently is marginally larger, as if you wrote:</p>\n\n<pre><code>let c: Bar;\nlet x = &amp;17;\nc = Bar::Fub(x);\n</code></pre>\n\n<p>which is already addressed in <a href=\"https://stackoverflow.com/questions/27049194/scope-of-addresses-does-not-live-long-enough\">Scope of addresses: Does not live long enough</a></p>\n\n<blockquote>\n  <p>In which case it's completely clear that h lasts longer than Bar::Fub().</p>\n</blockquote>\n\n<p>Yes, the lifetimes are clear here, and it <a href=\"http://is.gd/KSee0P\" rel=\"nofollow noreferrer\">works in the Playpen</a>:</p>\n\n<pre><code>let x = &amp;17;\nlet c = Bar::Fub(x);\n</code></pre>\n\n<p>so I'm not sure what you are asking.</p>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 679, "favorite_count": 0, "accepted_answer_id": 30868742, "answer_count": 1, "score": 3, "last_activity_date": 1434460731, "creation_date": 1434459554, "last_edit_date": 1495542612, "question_id": 30868300, "link": "https://stackoverflow.com/questions/30868300/struct-vs-enum-lifetime-differences", "title": "Struct vs enum lifetime differences", "body": "<p>Why does this work</p>\n\n<pre><code>#[derive(Debug)]\npub struct Foo&lt;'a,'b&gt; {\n    s : &amp;'a str,\n    n : &amp;'b i32\n}\n#[test]\nfn test_struct() {\n    let f = Foo { s : &amp;\"bar\" , n : &amp;17 };\n    println!(\"{:?}\",f);\n}\n</code></pre>\n\n<p>but this doesn't</p>\n\n<pre><code>#[derive(Debug)]\npub enum Bar&lt;'a,'b&gt; {\n    Baz ( &amp;'a str),\n    Fub ( &amp;'b i32)\n}\n#[test]\nfn test_struct() {\n    let b = Bar::Baz(&amp;\"Foo\");\n    let c = Bar::Fub(&amp;17);\n    println!(\"{:?} {:?}\",b,c);\n}\n</code></pre>\n\n<p>The error is (part of a bigger file so ignore line numbers)</p>\n\n<pre><code>src\\lib.rs:176:27: 176:29 error: borrowed value does not live long enough\nsrc\\lib.rs:176         let c = Bar::Fub(&amp;17);\n                       ^~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>To me it seems like <code>let c = Bar::Fub(&amp;17)</code>, the 17 lasts the same life time as the previous line where <code>\"Foo\"</code> is created on the stack. If I modify it slightly and do</p>\n\n<pre><code>let h = &amp;17;\nlet c = Bar::Fub(&amp;h);\n</code></pre>\n\n<p>In which case it's completely clear that h lasts longer than Bar::Fub(). SoI'm not sure how I can can get this to work.</p>\n\n<p>This is a follow up to <a href=\"https://stackoverflow.com/questions/30785915/lifetime-parameters-for-an-enum-within-a-struct\">Lifetime parameters for an enum within a struct</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 171938, "user_id": 2684539, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c5fff6fb65e95570ad1a90fe1e3522e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarod42", "link": "https://stackoverflow.com/users/2684539/jarod42"}, "edited": false, "score": 0, "creation_date": 1434453928, "post_id": 30866075, "comment_id": 49773882, "body": "I think it is because <code>User</code> doesn&#39;t respect clone trait."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1434454056, "creation_date": 1434454056, "answer_id": 30866261, "question_id": 30866075, "link": "https://stackoverflow.com/questions/30866075/vector-method-push-all-is-not-found-for-a-custom-struct/30866261#30866261", "title": "vector method push_all is not found for a custom struct", "body": "<p>Because, if you go to the <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.push_all\" rel=\"nofollow\">documentation for <code>Vec::push_all</code></a> and scroll up and little, you'll see this line:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T: Clone&gt; Vec&lt;T&gt;\n</code></pre>\n\n<p>This means that the following methods are only implemented for <code>Vec&lt;T&gt;</code> when <code>T</code> implements <code>Clone</code>.  In this case, <code>T</code> would be <code>User</code>, and <code>User</code> <em>does not implement <code>Clone</code></em>.  Therefore, the method does not exist.</p>\n\n<p>You can solve this by adding <code>#[derive(Clone)]</code> before <code>struct User {...}</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1434454393, "last_edit_date": 1434454393, "creation_date": 1434454073, "answer_id": 30866270, "question_id": 30866075, "link": "https://stackoverflow.com/questions/30866075/vector-method-push-all-is-not-found-for-a-custom-struct/30866270#30866270", "title": "vector method push_all is not found for a custom struct", "body": "<p>Look at <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.push_all\">the definition of <code>push_all</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T&gt; Vec&lt;T&gt; where T: Clone {\n    fn push_all(&amp;mut self, other: &amp;[T]);\n}\n</code></pre>\n\n<blockquote>\n  <p>Appends all elements in a slice to the <code>Vec</code>.</p>\n  \n  <p>Iterates over the slice <code>other</code>, <strong>clones each element</strong>, and then appends it to this <code>Vec</code>. The <code>other</code> vector is traversed in-order.</p>\n</blockquote>\n\n<p>(Emphasis mine.)</p>\n\n<p>Your type must implement <code>Clone</code> because it clones each value. <code>String</code> does; <code>User</code> doesn\u2019t. You can add <code>#[derive(Clone)]</code> to it.</p>\n\n<p>If you are willing to consume the source vector, you should use <code>x.extend(y.into_iter())</code> which avoids needing to clone the values.</p>\n\n<p>Of course, for this trivial case if it\u2019s purely the difference in <code>mut</code>ness, just add the <code>mut</code> in the initial pattern (if it\u2019s a function argument this works too, the bit before the colon in each argument is a pattern, like with <code>let</code>, so <code>fn foo(mut x: Vec&lt;T&gt;) { \u2026 }</code> works fine and is equivalent to <code>fn foo(x: Vec&lt;T&gt;) { let mut x = x; \u2026 }</code>.)</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 608, "favorite_count": 1, "accepted_answer_id": 30866270, "answer_count": 2, "score": 3, "last_activity_date": 1434454393, "creation_date": 1434453472, "question_id": 30866075, "link": "https://stackoverflow.com/questions/30866075/vector-method-push-all-is-not-found-for-a-custom-struct", "title": "vector method push_all is not found for a custom struct", "body": "<p>So in this simple example</p>\n\n<pre><code>#![feature(collections)]\n\nstruct User {\n    reference: String,\n    email: String\n}\n\nfn main() {\n\n    let rows = vec![\n        vec![\"abcd\".to_string(), \"test@test.com\".to_string()],\n        vec![\"efgh\".to_string(), \"test1@test.com\".to_string()],\n        vec![\"wfee\".to_string(), \"test2@test.com\".to_string()],\n        vec![\"rrgr\".to_string(), \"test3@test.com\".to_string()]\n    ];\n    let mut rows_mut: Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\n    rows_mut.push_all(&amp;rows);\n\n    let mut users_mut: Vec&lt;User&gt; = Vec::new();\n    let users = vec![\n        User { reference: \"ref1\".to_string(), email: \"test@test.com\".to_string() },\n        User { reference: \"ref2\".to_string(), email: \"test1@test.com\".to_string() }\n    ];\n    users_mut.push_all(&amp;users);\n\n}\n</code></pre>\n\n<p>I'm getting an error</p>\n\n<pre><code>src/main.rs:24:12: 24:28 error: no method named `push_all` found for type `collections::vec::Vec&lt;User&gt;` in the current scope\nsrc/main.rs:24  users_mut.push_all(&amp;users);\n                          ^~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Why does it work for <code>Vec&lt;String&gt;</code>, but not for <code>Vec&lt;User&gt;</code>? Is the only way in this case to iterate and add elements one by one?</p>\n"}, {"tags": ["rust", "llvm", "fast-math", "llvm-codegen"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1434460154, "post_id": 30863510, "comment_id": 49778434, "body": "If we manage to enable this, does this also result in exploitable UB cases being accepted by rustc?"}], "answers": [{"comments": [{"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "edited": false, "score": 0, "creation_date": 1461085470, "post_id": 30865944, "comment_id": 61034080, "body": "How would you compile the LLVM IR after emitting the .ll file?"}, {"owner": {"reputation": 61, "user_id": 8093646, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-eYMlzGS-a-c/AAAAAAAAAAI/AAAAAAAAGc4/t8CflLsO9ok/photo.jpg?sz=128", "display_name": "Jack May", "link": "https://stackoverflow.com/users/8093646/jack-may"}, "edited": false, "score": 0, "creation_date": 1538125308, "post_id": 30865944, "comment_id": 92042478, "body": "You can use llc to link IR (or BC)"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 2, "last_activity_date": 1434453028, "creation_date": 1434453028, "answer_id": 30865944, "question_id": 30863510, "link": "https://stackoverflow.com/questions/30863510/how-do-i-compile-with-ffast-math/30865944#30865944", "title": "How do I compile with &quot;ffast-math&quot;?", "body": "<p>You can always use <code>rustc --emit llvm-ir</code> and compile the LLVM IR with the desired settings.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1479663116, "creation_date": 1479663116, "answer_id": 40707111, "question_id": 30863510, "link": "https://stackoverflow.com/questions/30863510/how-do-i-compile-with-ffast-math/40707111#40707111", "title": "How do I compile with &quot;ffast-math&quot;?", "body": "<p>Rust issue <a href=\"https://github.com/rust-lang/rust/issues/21690\" rel=\"noreferrer\">#21690</a> talks about adding imprecise floating point operations. Linked from that issue is the <a href=\"https://doc.rust-lang.org/std/intrinsics/index.html\" rel=\"noreferrer\">addition of <em>intrinsics</em></a> that allow you to opt into looser rules on a <strong>per operation</strong> basis. For example, <a href=\"https://doc.rust-lang.org/std/intrinsics/fn.fadd_fast.html\" rel=\"noreferrer\"><code>fadd_fast</code></a>:</p>\n\n<pre><code>pub unsafe extern \"rust-intrinsic\" fn fadd_fast&lt;T&gt;(a: T, b: T) -&gt; T\n</code></pre>\n\n<p>Using intrinsics requires a nightly compiler and unsafe code:</p>\n\n<pre><code>#![feature(core_intrinsics)]\n\nuse std::intrinsics::fadd_fast;\n\nfn main() {\n    let result = unsafe { fadd_fast(42.0, 31.0) };\n    println!(\"{}\", result);\n}\n</code></pre>\n\n<p>Ultimately, this is a <em>much</em> better design than the all-or-nothing solution of a command line flag. Who knows if there is some floating point calculation that is critical to not use fast math, buried deep in your program? That doesn't help you when trying to compare against a C program that chose that, however!</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1406, "favorite_count": 3, "answer_count": 2, "score": 16, "last_activity_date": 1565010665, "creation_date": 1434446368, "last_edit_date": 1565010665, "question_id": 30863510, "link": "https://stackoverflow.com/questions/30863510/how-do-i-compile-with-ffast-math", "title": "How do I compile with &quot;ffast-math&quot;?", "body": "<p>I'm trying to benchmark some Rust code, but I can't figure out how to set the \"ffast-math\" option.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>% rustc -C opt-level=3 -C llvm-args='-enable-unsafe-fp-math' unrolled.rs\nrustc: Unknown command line argument '-enable-unsafe-fp-math'.  Try: 'rustc -help'\nrustc: Did you mean '-enable-load-pre'?\n</code></pre>\n\n<p><code>llvm-args='-ffast-math'</code> and <code>llvm-args='-fast'</code> didn't work either. What flag should I be using?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1434444671, "creation_date": 1434444671, "answer_id": 30862866, "question_id": 30862646, "link": "https://stackoverflow.com/questions/30862646/reading-immutable-value-inside-spawned-thread/30862866#30862866", "title": "Reading immutable value inside spawned thread", "body": "<p>You're almost there. It's just that <code>Arc</code> has to be cloned <em>outside</em> of the spawned thread:</p>\n\n<pre><code>for chunk in chunks {\n    let thread_tx = tx.clone();\n    let user_index_cloned = user_index.clone();\n    thread::spawn(move || {\n        let result = chunk.iter().map( |row|\n            User {\n                reference: row[user_index_cloned.reference].to_string(),\n                email: row[user_index_cloned.email].to_string()\n            }\n        ).collect::&lt;Vec&lt;User&gt;&gt;();\n        thread_tx.send(result).unwrap();\n    });\n}\n</code></pre>\n\n<p>This has to be done because otherwise <code>user_index</code> indeed will be moved into the thread, and doing this in a loop is a violation of ownership rules.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 315, "favorite_count": 1, "accepted_answer_id": 30862866, "answer_count": 1, "score": 3, "last_activity_date": 1434444671, "creation_date": 1434444051, "question_id": 30862646, "link": "https://stackoverflow.com/questions/30862646/reading-immutable-value-inside-spawned-thread", "title": "Reading immutable value inside spawned thread", "body": "<p>I'm trying to make this example work</p>\n\n<pre><code>use std::sync::mpsc::{Sender, Receiver};\nuse std::sync::mpsc;\nuse std::thread;\nuse std::sync::Arc;\n\nstruct User {\n    reference: String,\n    email: String\n}\n\nstruct UserIndex {\n    reference: usize,\n    email: usize\n}\n\nfn main() {\n\n    let rows = vec![\n        vec![\"abcd\", \"test@test.com\"],\n        vec![\"efgh\", \"test1@test.com\"],\n        vec![\"wfee\", \"test2@test.com\"],\n        vec![\"rrgr\", \"test3@test.com\"]\n    ];\n\n    let user_index = Arc::new(\n        UserIndex {\n            reference: 0,\n            email: 1\n        }\n    );\n\n    let chunk_len = (rows.len() / 2) as usize;\n    let mut chunks = Vec::new();\n    for chunk in rows.chunks(chunk_len) {\n        chunks.push(chunk.to_owned());\n    }\n\n    let (tx, rx): (Sender&lt;Vec&lt;User&gt;&gt;, Receiver&lt;Vec&lt;User&gt;&gt;) = mpsc::channel();\n\n    for chunk in chunks {\n        let thread_tx = tx.clone();\n        thread::spawn(move || {\n            let user_index_cloned = user_index.clone();\n            let result = chunk.iter().map( |row|\n                User {\n                    reference: row[user_index_cloned.reference].to_string(),\n                    email: row[user_index_cloned.email].to_string()\n                }\n            ).collect::&lt;Vec&lt;User&gt;&gt;();\n            thread_tx.send(result).unwrap();\n        });\n    }\n\n    let mut users = Vec::new();\n    for _ in 0..chunk_len {\n        users.push(rx.recv());\n    }\n\n}\n</code></pre>\n\n<p>but it's throwing an error</p>\n\n<pre><code>src/main.rs:43:28: 43:38 error: capture of moved value: `user_index` [E0382]\nsrc/main.rs:43          let user_index_cloned = user_index.clone();\n                                                ^~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/main.rs:42:17: 51:4 note: expansion site\nnote: in expansion of for loop expansion\nsrc/main.rs:40:2: 52:3 note: expansion site\nsrc/main.rs:42:17: 51:4 note: `user_index` moved into closure environment here because it has type `[closure(())]`, which is non-copyable\nsrc/main.rs:42      thread::spawn(move || {\nsrc/main.rs:43          let user_index_cloned = user_index.clone();\nsrc/main.rs:44          let result = chunk.iter().map( |row|\nsrc/main.rs:45              User {\nsrc/main.rs:46                  reference: row[user_index_cloned.reference].to_string(),\nsrc/main.rs:47                  email: row[user_index_cloned.email].to_string()\n               ...\nnote: in expansion of closure expansion\nsrc/main.rs:42:17: 51:4 note: expansion site\nnote: in expansion of for loop expansion\nsrc/main.rs:40:2: 52:3 note: expansion site\nsrc/main.rs:42:17: 51:4 help: perhaps you meant to use `clone()`?\nerror: aborting due to previous error\n</code></pre>\n\n<p>now according to <a href=\"https://www.reddit.com/r/rust/comments/2w75wr/how_do_i_read_immutable_vector_inside_a_spawned/\" rel=\"nofollow\">this discussion</a> it should have worked, but it doesn't. What am I missing here?</p>\n"}, {"tags": ["rust", "smart-pointers", "trait-objects"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434440139, "post_id": 30861295, "comment_id": 49765267, "body": "note: your initial code only works on nightly due to the <code>Rc&lt;MyTrait&gt;</code>, your second code uses an additional <code>Box</code> which is only necessary on stable. Without the <code>Box</code> your code works fine on nightly with just some minor modifications: <a href=\"http://is.gd/zQUJqp\" rel=\"nofollow noreferrer\">is.gd/zQUJqp</a> . Please edit your question if you want a solution for stable rust."}, {"owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434482377, "post_id": 30861295, "comment_id": 49793800, "body": "Thanks. I do indeed work with nightly (sorry, should have mentioned). Removing the <code>Box</code> seems to be the solution to my problem. I think the ability for <code>RefCell</code> to work directly with Trait was introduced recently that&#39;s why it wasn&#39;t working for me originally (when I updated my nightly Rust about 2 weeks ago)."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1434446025, "post_id": 30861822, "comment_id": 49768828, "body": "coercing a <code>Rc&lt;T&gt;</code> to <code>Rc&lt;Trait&gt;</code> for <code>T: Trait</code> is possible on nightly... I don&#39;t think he wanted to copy the actual object, otherwise there&#39;s no reason for <code>Rc</code> at all... Your last paragraph is imo the answer... Don&#39;t pass the <code>Rc&lt;RefCell&lt;Box&lt;X&gt;&gt;&gt;</code> madness, but simply call <code>borrow</code> and pass a reference"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434448824, "post_id": 30861822, "comment_id": 49770638, "body": "@ker: yes, <code>Rc</code> coercion is possible and safe (and it was necessary, <code>Rc::new</code> clearly can\u2019t work for an unsized <code>T</code>), because it only exposes an immutable reference; <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> will never be coercible to <code>Rc&lt;RefCell&lt;Trait&gt;&gt;</code>, because <code>RefCell</code> allows internal mutability, which could allow putting an object of a different type and size in, which would cause the <code>Rc</code> to refer to different objects simultaneously. It will thus always need to clone the entire value."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1434450178, "post_id": 30861822, "comment_id": 49771488, "body": "Nope, as I said in my comment to the question, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> -&gt; <code>Rc&lt;RefCell&lt;Trait&gt;&gt;</code> <a href=\"http://is.gd/zQUJqp\" rel=\"nofollow noreferrer\">is fine on nightly</a> and I don&#39;t really see how it could be an issue, since you cannot create a <code>Rc&lt;RefCell&lt;Trait&gt;&gt;</code> except through coercion."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434451847, "post_id": 30861822, "comment_id": 49772537, "body": "since we cannot modify a trait object in safe code, <code>RefCell&lt;Trait&gt;</code> can never be changed to point to another object that implements the same trait, because we only get a <code>&amp;mut Trait</code>, which doesn&#39;t allow changing the trait object, only the original object that implemented the trait."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434453800, "post_id": 30861822, "comment_id": 49773781, "body": "Somehow I always seem to forget that <code>&amp;mut Trait</code> doesn\u2019t allow replacement of the underlying object even when my statements skirt around why it wouldn\u2019t make sense\u2026 <i>sigh</i>"}, {"owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "edited": false, "score": 0, "creation_date": 1434482577, "post_id": 30861822, "comment_id": 49793910, "body": "Thanks both. As mentioned in my previous comment - removing <code>Box</code> is the right solution and works on nightly only for now."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1470162327, "post_id": 30861822, "comment_id": 64831668, "body": "I wonder why it&#39;s so big difference between stack-based and heap-based structs that casting RefCell of stack struct works, but casting RefCell of boxed struct blames. This shortcoming really narrows the range of possibilities of creation of reusable code, especially when it is big enough to oversize the stack."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1508137115, "last_edit_date": 1508137115, "creation_date": 1434441355, "answer_id": 30861822, "question_id": 30861295, "link": "https://stackoverflow.com/questions/30861295/how-do-i-pass-rcrefcellboxmystruct-to-a-function-accepting-rcrefcellbox/30861822#30861822", "title": "How do I pass Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt; to a function accepting Rc&lt;RefCell&lt;Box&lt;dyn MyTrait&gt;&gt;&gt;?", "body": "<p><em>(An older revision of this answer essentially advised to clone the underlying struct and put it in a new <code>Rc&lt;RefCell&lt;Box&lt;MyTrait&gt;&gt;</code> object; this was necessary at the time on stable Rust, but since not long after that time, <code>Rc&lt;RefCell&lt;MyStruct&gt;&gt;</code> will coerce to <code>Rc&lt;RefCell&lt;MyTrait&gt;&gt;</code> without trouble.)</em></p>\n\n<p>Drop the <code>Box&lt;&gt;</code> wrapping, and you can coerce <code>Rc&lt;RefCell&lt;MyStruct&gt;&gt;</code> to <code>Rc&lt;RefCell&lt;MyTrait&gt;&gt;</code> freely and easily. Recalling that cloning an <code>Rc&lt;T&gt;</code> just produces another <code>Rc&lt;T&gt;</code>, increasing the refcount by one, you can do something like this:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\ntrait MyTrait {\n    fn trait_func(&amp;self);\n}\n\n#[derive(Clone)]\nstruct MyStruct1;\nimpl MyStruct1 {\n    fn my_fn(&amp;self) {\n        // do something\n    }\n}\n\nimpl MyTrait for MyStruct1 {\n    fn trait_func(&amp;self) {\n        // do something\n    }\n}\n\nfn my_trait_fn(t: Rc&lt;RefCell&lt;MyTrait&gt;&gt;) {\n    t.borrow_mut().trait_func();\n}\n\nfn main() {\n    // (The type annotation is not necessary here, but helps explain it.\n    // If the `my_str.borrow().my_fn()` line was missing, it would actually\n    // be of type Rc&lt;RefCell&lt;MyTrait&gt;&gt; instead of Rc&lt;RefCell&lt;MyStruct1&gt;&gt;,\n    // essentially doing the coercion one step earlier.)\n    let my_str: Rc&lt;RefCell&lt;MyStruct1&gt;&gt; = Rc::new(RefCell::new(MyStruct1));\n    my_trait_fn(my_str.clone());\n    my_str.borrow().my_fn();\n}\n</code></pre>\n\n<p>As a general rule, see if you can make things take the contained value by reference, ideally even generically\u2014<code>fn my_trait_fn&lt;T: MyTrait&gt;(t: &amp;T)</code> and similar, which can typically be called as <code>my_str.borrow()</code> with automatic referencing and dereferencing taking care of the rest\u2014rather than the whole <code>Rc&lt;RefCell&lt;MyTrait&gt;&gt;</code> thing.</p>\n"}], "owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2113, "favorite_count": 1, "answer_count": 1, "score": 8, "last_activity_date": 1545665702, "creation_date": 1434439589, "last_edit_date": 1545665702, "question_id": 30861295, "link": "https://stackoverflow.com/questions/30861295/how-do-i-pass-rcrefcellboxmystruct-to-a-function-accepting-rcrefcellbox", "title": "How do I pass Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt; to a function accepting Rc&lt;RefCell&lt;Box&lt;dyn MyTrait&gt;&gt;&gt;?", "body": "<p>I have originally asked this question <a href=\"https://stackoverflow.com/questions/30855429/how-can-i-cast-rcrefcellboxmytrait-to-rcrefcellboxmystruct\">here</a>, but it was marked as duplicate, although it duplicates only a part of it in my opinion, so I have created a more specific one:</p>\n\n<p>Consider the following code:</p>\n\n<pre><code>use std::rc::Rc;\n\ntrait MyTrait {\n    fn trait_func(&amp;self);\n}\n\nstruct MyStruct1;\n\nimpl MyStruct1 {\n    fn my_fn(&amp;self) {\n        // do something\n    }\n}\n\nimpl MyTrait for MyStruct1 {\n    fn trait_func(&amp;self) {\n        // do something\n    }\n}\n\nfn my_trait_fn(t: Rc&lt;dyn MyTrait&gt;) {\n    t.trait_func();\n}\n\nfn main() {\n    let my_str: Rc&lt;MyStruct1&gt; = Rc::new(MyStruct1);\n    my_trait_fn(my_str.clone());\n    my_str.my_fn();\n}\n</code></pre>\n\n<p>This code works fine. Now I want to change the definition of <code>trait_func</code> to accept a <code>&amp;mut self</code>, but it won't work as <code>Rc</code> works with immutable data only. The solution I use is to wrap <code>MyTrait</code> into <code>RefCell</code>:</p>\n\n<pre><code>use std::cell::RefCell;\n\nfn my_trait_fn(t: Rc&lt;RefCell&lt;Box&lt;dyn MyTrait&gt;&gt;&gt;) {\n    t.borrow_mut().trait_func();\n}\n\nfn main() {\n    let my_str: Rc&lt;RefCell&lt;Box&lt;MyStruct1&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(MyStruct1)));\n    my_trait_fn(my_str.clone());\n    my_str.my_fn();\n}\n</code></pre>\n\n<p>When I compile it I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:27:17\n   |\n27 |     my_trait_fn(my_str.clone());\n   |                 ^^^^^^^^^^^^^^ expected trait MyTrait, found struct `MyStruct1`\n   |\n   = note: expected type `std::rc::Rc&lt;std::cell::RefCell&lt;std::boxed::Box&lt;dyn MyTrait + 'static&gt;&gt;&gt;`\n              found type `std::rc::Rc&lt;std::cell::RefCell&lt;std::boxed::Box&lt;MyStruct1&gt;&gt;&gt;`\n   = help: here are some functions which might fulfill your needs:\n           - .into_inner()\n</code></pre>\n\n<p>What's the best way to go around this problem?</p>\n"}, {"tags": ["string", "winapi", "rust"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1434428952, "post_id": 30858391, "comment_id": 49760470, "body": "I don&#39;t have an answer (I&#39;m not familiar with Rust) but I&#39;m going to guess that <code>i32</code> is a 32-bit integer. <code>HWND</code>s (and in fact, all handles) are pointers, so this might break on 64-bit Windows; if not now, then at some point in the future. You should be using a pointer-sized integer if you don&#39;t want to expose the <code>HWND</code> type directly."}, {"owner": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1434429421, "post_id": 30858391, "comment_id": 49760589, "body": "<code>i32</code> or maybe <code>i64</code> here used for easier transfering global <code>HWND</code>&#39;s via <code>Arc</code> and easier thread syncronizing. But that not the issue."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 570607, "user_id": 505088, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/3c0aac2191718ef0309dbc034d9b9961?s=128&d=identicon&r=PG", "display_name": "David Heffernan", "link": "https://stackoverflow.com/users/505088/david-heffernan"}, "edited": false, "score": 0, "creation_date": 1434436109, "post_id": 30858391, "comment_id": 49762981, "body": "@DavidHeffernan: the <code>str</code> has no (im-)mutability guarantees, just like <code>u8</code> has no guarantees, it&#39;s just a type. <a href=\"https://github.com/rust-lang/rust/pull/26241\" rel=\"nofollow noreferrer\">It&#39;s entirely possible to have a <code>&amp;mut str</code>, there just aren&#39;t that many uses for it</a>. The <code>String</code> type is <a href=\"https://doc.rust-lang.org/nightly/collections/string/struct.String.html#method.push\" rel=\"nofollow noreferrer\">definitely mutable</a>."}], "answers": [{"comments": [{"owner": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "edited": false, "score": 0, "creation_date": 1434443472, "post_id": 30860086, "comment_id": 49767190, "body": "Great answer. Big thanks to you. I&#39;ve just misunderstood some parts of documentation. Btw, my code is producing memory leak in 32-bit version of compiler. As i think its there <code>mem::forget(v);</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "edited": false, "score": 0, "creation_date": 1434445048, "post_id": 30860086, "comment_id": 49768176, "body": "Your code only creates a memory leak if <code>read_len</code> is <code>0</code>, because then you never take back control of the <code>Vec</code>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1434443078, "last_edit_date": 1434443078, "creation_date": 1434435477, "answer_id": 30860086, "question_id": 30858391, "link": "https://stackoverflow.com/questions/30858391/more-convenient-way-to-work-with-strings-in-winapi-calls/30860086#30860086", "title": "More convenient way to work with strings in winapi calls", "body": "<p>In your situation, you always want a maximum of 255 bytes, so you can use an array instead of a vector. This reduces the entire boilerplate to a <code>mem::uninitialized()</code> call, an <code>as_mut_ptr()</code> call and a slicing operation.</p>\n\n<pre><code>unsafe {\n    let mut v: [u16; 255] = mem::uninitialized();\n    let read_len = user32::GetWindowTextW(\n        handle as winapi::HWND,\n        v.as_mut_ptr(),\n        255,\n    );\n    String::from_utf16_lossy(&amp;v[0..read_len])\n}\n</code></pre>\n\n<p>In case you wanted to use a <code>Vec</code>, there's an easier way than to destroy the vec and re-create it. You can write to the <code>Vec</code>'s content directly and let Rust handle everything else.</p>\n\n<pre><code>let mut v: Vec&lt;u16&gt; = Vec::with_capacity(255);\nunsafe {\n    let read_len = user32::GetWindowTextW(\n        handle as winapi::HWND,\n        v.as_mut_ptr(),\n        v.capacity(),\n    );\n    v.set_len(read_len); // this is undefined behavior if read_len &gt; v.capacity()\n    String::from_utf16_lossy(&amp;v)\n}\n</code></pre>\n\n<p>As a side-note, it is idiomatic in Rust to not use <code>return</code> on the last statement in a function, but to simply let the expression stand there without a semicolon. In your original code, the final if-expression could be written as</p>\n\n<pre><code>if read_len &gt; 0 {\n    String::from_utf16_lossy(Vec::from_raw_parts(p, read_len as usize, cap).as_slice())\n} else {\n    \"\".to_string()\n}\n</code></pre>\n\n<p>but I removed the entire condition from my samples, as it is unnecessary to handle <code>0</code> read characters differently from <code>n</code> characters.</p>\n"}], "owner": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 958, "favorite_count": 0, "accepted_answer_id": 30860086, "answer_count": 1, "score": 7, "last_activity_date": 1434457171, "creation_date": 1434426199, "last_edit_date": 1434457171, "question_id": 30858391, "link": "https://stackoverflow.com/questions/30858391/more-convenient-way-to-work-with-strings-in-winapi-calls", "title": "More convenient way to work with strings in winapi calls", "body": "<p>I'm looking for more convenient way to work with <code>std::String</code> in winapi calls in Rust.</p>\n\n<p>Using rust v 0.12.0-nigtly with winapi 0.1.22 and user32-sys 0.1.1</p>\n\n<p>Now I'm using something like this:</p>\n\n<pre><code>use winapi;\nuse user32;\n\npub fn get_window_title(handle: i32) -&gt; String {\n    let mut v: Vec&lt;u16&gt; = Vec::new();\n    v.reserve(255);\n    let mut p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let mut read_len = 0;\n    unsafe {\n        mem::forget(v);\n        read_len = unsafe { user32::GetWindowTextW(handle as winapi::HWND, p, 255) };\n        if read_len &gt; 0 {\n            return String::from_utf16_lossy(Vec::from_raw_parts(p, read_len as usize, cap).as_slice());\n        } else {\n            return \"\".to_string();\n        }\n    }\n}\n</code></pre>\n\n<p>I think, that this vector based memory allocation is rather bizarre. So I'm looking for more easier way to cast <code>LPCWSTR</code> to <code>std::String</code></p>\n"}, {"tags": ["unit-testing", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 8, "creation_date": 1434409279, "post_id": 30856285, "comment_id": 49755959, "body": "Beware <a href=\"http://floating-point-gui.de/errors/comparison/\" rel=\"nofollow noreferrer\">using epsilons (absolute error margins) for floating point comparisons</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 10, "last_activity_date": 1520714732, "last_edit_date": 1520714732, "creation_date": 1434444298, "answer_id": 30862741, "question_id": 30856285, "link": "https://stackoverflow.com/questions/30856285/assert-eq-with-floating-point-numbers-and-delta/30862741#30862741", "title": "assert_eq! with floating point numbers and delta", "body": "<p>No. At the moment, you have to check the difference by yourself or use the <a href=\"https://crates.io/crates/float-cmp\" rel=\"noreferrer\">float-cmp crate</a>.</p>\n\n<p>Also check out the <a href=\"https://doc.rust-lang.org/stable/std/f32/\" rel=\"noreferrer\"><code>std::f32</code> constants</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 81, "user_id": 1535427, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72775b3714629cddc026f699e6e6796d?s=128&d=identicon&r=PG", "display_name": "user1535427", "link": "https://stackoverflow.com/users/1535427/user1535427"}, "is_accepted": false, "score": 8, "last_activity_date": 1520720594, "last_edit_date": 1520720594, "creation_date": 1434455904, "answer_id": 30866922, "question_id": 30856285, "link": "https://stackoverflow.com/questions/30856285/assert-eq-with-floating-point-numbers-and-delta/30866922#30866922", "title": "assert_eq! with floating point numbers and delta", "body": "<p>There's no inbuilt <a href=\"https://doc.rust-lang.org/nightly/book/macros.html\" rel=\"noreferrer\">macro</a> for it, but you can create your own.</p>\n\n<p>The following is an implementation of the \"absolute error\" version described in <a href=\"http://floating-point-gui.de/errors/comparison/\" rel=\"noreferrer\">this article</a>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! assert_delta {\n    ($x:expr, $y:expr, $d:expr) =&gt; {\n        if !($x - $y &lt; $d || $y - $x &lt; $d) { panic!(); }\n    },\n}\n</code></pre>\n\n<p>Specifically, the macro <code>assert_delta</code> panics if both the difference between <code>x</code> and <code>y</code> and <code>y</code> and <code>x</code> are greater or equal to <code>d</code> (the \"delta\" or \"epsilon\" value, i.e. the tolerance). </p>\n\n<blockquote>\n  <p>This is a bad way to do it because a fixed epsilon, chosen because it \"looks small\", could actually be way too large when the numbers being compared are very small as well. The comparison would return \"true\" for numbers that are quite different. And when the numbers are very large, the epsilon could end up being smaller than the smallest rounding error, so that the comparison always returns \"false\".</p>\n</blockquote>\n\n<p>Given that the previous implementation breaks in various situations, in general, you should <strong>not</strong> use it. You may want to implement a more robust macro, e.g. the one that checks for a \"relative error\".</p>\n"}, {"tags": [], "owner": {"reputation": 8454, "user_id": 958529, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c3ec25db39c63bab1a11037649e326b8?s=128&d=identicon&r=PG", "display_name": "halfelf", "link": "https://stackoverflow.com/users/958529/halfelf"}, "is_accepted": false, "score": 5, "last_activity_date": 1550804958, "creation_date": 1550804958, "answer_id": 54819504, "question_id": 30856285, "link": "https://stackoverflow.com/questions/30856285/assert-eq-with-floating-point-numbers-and-delta/54819504#54819504", "title": "assert_eq! with floating point numbers and delta", "body": "<p>There is another complete crate <a href=\"https://crates.io/crates/assert_approx_eq\" rel=\"noreferrer\">assert_approx_eq</a> solving this pain, better than float-cmp.</p>\n\n<pre><code>use assert_approx_eq::assert_approx_eq;\n\nlet a = 3f64;\nlet b = 4f64;\n\nassert_approx_eq!(a, b); // panics\nassert_approx_eq!(a, b, 2f64); //does not panic\nassert_approx_eq!(a, b, 1e-3f64); // panics\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6538, "user_id": 430418, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/e92dbe16dbf6d5938bd97d561ee7dde4?s=128&d=identicon&r=PG", "display_name": "schmijos", "link": "https://stackoverflow.com/users/430418/schmijos"}, "is_accepted": false, "score": 5, "last_activity_date": 1585170240, "creation_date": 1585170240, "answer_id": 60857364, "question_id": 30856285, "link": "https://stackoverflow.com/questions/30856285/assert-eq-with-floating-point-numbers-and-delta/60857364#60857364", "title": "assert_eq! with floating point numbers and delta", "body": "<p>There's also the <a href=\"https://docs.rs/approx/0.3.2/approx/\" rel=\"noreferrer\">approx</a> crate which lets you do things like these:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>relative_eq!(1.0, 1.0, epsilon = f64::EPSILON);\nrelative_eq!(1.0, 1.0, max_relative = 1.0);\nrelative_eq!(1.0, 1.0, epsilon = f64::EPSILON, max_relative = 1.0);\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3713, "favorite_count": 2, "accepted_answer_id": 30862741, "answer_count": 4, "score": 17, "last_activity_date": 1585170240, "creation_date": 1434408857, "question_id": 30856285, "link": "https://stackoverflow.com/questions/30856285/assert-eq-with-floating-point-numbers-and-delta", "title": "assert_eq! with floating point numbers and delta", "body": "<p>Is there a preferred way to do an assert with two floating point numbers and a delta in Rust?</p>\n\n<p>For example...</p>\n\n<pre><code>let a = 3.0;\nlet b = 2.9999999999;\nassert_eq!(a, b, 0.0001); // Imaginary syntax where a ~= b, within 0.0001\n</code></pre>\n"}, {"tags": ["python", "rust", "ffi"], "comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434605385, "post_id": 30856011, "comment_id": 49852212, "body": "Is it possible to bump this question? Nobody will see it now, and I would rather have people answer this question, not a new one."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434675840, "post_id": 30856011, "comment_id": 49892931, "body": "Yes, I am on Windows. Thanks for letting me know, I could do either, but it would be easier to use an array. However, it would not be too difficult to make a vector with a capacity I think, so if I can pass an array to the function, it could do a conversion. Correct me if I&#39;m wrong."}], "answers": [{"tags": [], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "is_accepted": true, "score": 4, "last_activity_date": 1434826123, "last_edit_date": 1434826123, "creation_date": 1434748034, "answer_id": 30947283, "question_id": 30856011, "link": "https://stackoverflow.com/questions/30856011/pass-python-list-to-rust-function/30947283#30947283", "title": "Pass Python list to Rust function", "body": "<p>Looks like I solved the problem. I turned the Python list into a C array, and passed that to the Rust function. Here is the working code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct List_4 {\n    // Create a struct using #[repr(C)], will do the same in Python so it is shareable\n    array: [i32; 4]\n}\n\n#[no_mangle]\npub extern fn function_array(list: List_4) -&gt; List_4 {\n    // Return a new instance of List_4\n    List_4 { array: [1, 2, 3, 5] }\n}\n</code></pre>\n\n<p>Python:\n</p>\n\n<pre><code>import ctypes # By using ctypes, and #[repr(C)], we use the same type\n              # of data in both languages, so it is possible to send stuff between them\n\nrust = cdll.LoadLibrary(\"target/debug/py_link.dll\") # Import the Rust dll\n\nclass List_4(ctypes.Structure):\n    # Similar to creating the struct in Rust\n    _fields_ = [(\"array\", ctypes.ARRAY(ctypes.c_int32, 4))]\n\nrust.function_array.restype = List_4 # Set the function's return type to List_4\n\ndef function_array(arr):\n    # For convenience, a function to convert a list to a C array, call the function,\n    # and convert its return value to a list\n    return list(\n        rust.function_array(\n            (ctypes.c_int * len(lst))(*lst) # Call the function after converting the list \n        ).array\n    )\n\n# To use the function:\n&gt;&gt;&gt; function_array([1, 2, 3])\n[1, 2, 3, 5]\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1013, "favorite_count": 2, "accepted_answer_id": 30947283, "answer_count": 1, "score": 7, "last_activity_date": 1434826123, "creation_date": 1434407288, "last_edit_date": 1495540821, "question_id": 30856011, "link": "https://stackoverflow.com/questions/30856011/pass-python-list-to-rust-function", "title": "Pass Python list to Rust function", "body": "<p>I have a Rust library that needs to be imported into Python via the ctypes module. My goal is to use Rust functions that take <code>Vec&lt;T&gt;</code> / <code>i32</code> as arguments and return those types, from Python. Currently, I can pass integers to the Rust functions, and have them return lists / integers. Here is the current code:</p>\n\n<p>Python:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import ctypes\nfrom ctypes import cdll\n\nclass List_4(ctypes.Structure):\n    _fields_ = [(\"array\", ctypes.ARRAY(ctypes.c_int32, 4))]\n\nrust = cdll.LoadLibrary(\"target/debug/py_link.dll\")\nrust.function_vec.restype = List_4\n\nfoobar = rust.function_i32(5)\nbarbaz = rust.function_vec([1, 2, 3, 4]) # Throws error: Don't know how to convert parameter\n\nprint foobar\nprint barbaz\n</code></pre>\n\n<p>Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct List_4 {\n    array: [i32; 4]\n}\n\n#[no_mangle]\npub extern fn function_i32(number: i32) -&gt; i32 {\n    number\n}\n\n#[no_mangle]\npub extern fn function_vec(list: List_4) -&gt; List_4 {\n    List_4 { array: [1, 2, 3, 5] }\n}\n</code></pre>\n\n<p>What I need help with is passing a Python list as an argument to a Rust function. My best guess is to pass a <code>ctypes.ARRAY</code> to the function rather than a list, but I am not sure how to go about converting a Python list to that type.</p>\n\n<p>Note: I tried the Rust code from <a href=\"https://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function\">this related question</a> but it says \"linking with `gcc` failed: exit code: 1\" and \"bad reloc address\" when I try to compile it.</p>\n"}, {"tags": ["casting", "rust", "dynamic-dispatch", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434409088, "post_id": 30855429, "comment_id": 49755911, "body": "A <code>Box&lt;Trait&gt;</code> is known as a <i>trait object</i> (your extra layers of <code>Rc</code> and <code>RefCell</code> are extraneous and you should have removed them as part of creating an <a href=\"/help/mcve\">MCVE</a>). You also were <b>super</b> close with the right keywords, but it&#39;s more commonly referred to as <i>downcasting</i> as opposed to <i>casting down</i>."}, {"owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1434438274, "post_id": 30855429, "comment_id": 49764104, "body": "Thanks for your reply. Please note, that my question was explicitly about Rc&lt;RefCell&lt;Box&lt;Trait&gt;&gt;&gt; as I need referenced-counted pointer with mutability. If I used just Rc&lt;Trait&gt; or Box&lt;Trait&gt; I wouldn&#39;t have any problem. I would just create an instance of <code>Rc&lt;MyStruct&gt;</code>: <code>let my_struct: Rc&lt;MyStruct&gt; = Rc::new(MyStruct)</code> and then pass it to the function that accepts <code>Rc&lt;MyTrait&gt;</code> and that would worked just fine. The problem happens when I add this extra RefCell bit and that&#39;s what I wanted to highlight in my question."}], "owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 135, "favorite_count": 0, "closed_date": 1434408982, "answer_count": 0, "score": 1, "last_activity_date": 1545155772, "creation_date": 1434404456, "last_edit_date": 1545155772, "question_id": 30855429, "link": "https://stackoverflow.com/questions/30855429/how-can-i-cast-rcrefcellboxmytrait-to-rcrefcellboxmystruct", "closed_reason": "Duplicate", "title": "How can I cast Rc&lt;RefCell&lt;Box&lt;MyTrait&gt; to Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt;", "body": "<p>I have a trait <code>MyTrait</code> and a struct <code>MyStruct</code> that implements <code>MyTrait</code>.</p>\n\n<p>I also have a function that accepts <code>Rc&lt;RefCell&lt;Box&lt;MyTrait&gt;&gt;&gt;</code> as an argument.</p>\n\n<p>Somewhere in the code I create an instance of <code>Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt;</code>:</p>\n\n<pre><code>let my_struct = Rc::new(RefCell::new(Box::new(MyStruct)));\n</code></pre>\n\n<p>When I pass <code>my_struct</code> to my function I get a compiler error:</p>\n\n<p>error: mismatched types:\n expected <code>alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;MyTrait&gt;&gt;&gt;</code>,\n    found <code>alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt;</code></p>\n\n<p>I try to fix that by creating an instance of <code>Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt;</code> by explicitly specifying the type I need:</p>\n\n<pre><code>let my_struct: Rc&lt;RefCell&lt;Box&lt;MyTrait&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(MyStruct)));\n</code></pre>\n\n<p>In this case passing <code>my_struct</code> to my function works fine, however I can't access any <code>MyStruct</code> specific fields via <code>my_struct</code> variable anymore. And it doesn't seem to be a way to cast down <code>Rc&lt;RefCell&lt;Box&lt;MyTrait&gt;&gt;&gt;</code> to <code>Rc&lt;RefCell&lt;Box&lt;MyStruct&gt;&gt;&gt;</code>.</p>\n\n<p>How can I go around this problem?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1491137574, "post_id": 30852026, "comment_id": 73411026, "body": "Note that <code>match</code>ing manually is almost never necessary. The methods <code>or_insert()</code> and <code>or_insert_with()</code> offer a more concise way to achieve this. See A.B.&#39;s answer for information on those."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 14, "last_activity_date": 1434392093, "last_edit_date": 1434392093, "creation_date": 1434391578, "answer_id": 30852026, "question_id": 30851464, "link": "https://stackoverflow.com/questions/30851464/want-to-add-to-hashmap-using-pattern-match-get-borrow-mutable-more-than-once-at/30852026#30852026", "title": "Want to add to HashMap using pattern match, get borrow mutable more than once at a time", "body": "<p>You have to use the Entry \"pattern\":</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry::{Occupied, Vacant};\n\nfn main() {\n    let mut words = vec![\"word1\".to_string(), \"word2\".to_string(), \"word1\".to_string(), \"word3\".to_string()];\n    let mut wordCount = HashMap::&lt;String, u32&gt;::new();\n\n    for w in words {\n        let val = match wordCount.entry(w) {\n           Vacant(entry) =&gt; entry.insert(0),\n           Occupied(entry) =&gt; entry.into_mut(),\n        };\n\n        // do stuff with the value\n        *val += 1;\n    }\n\n    for k in wordCount.iter() {\n        println!(\"{:?}\", k);\n    }\n}\n</code></pre>\n\n<p>The Entry object allows you to insert a value if its missing, or to modify it if it already exists.</p>\n\n<p><a href=\"https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html\">https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html</a></p>\n"}, {"comments": [{"owner": {"reputation": 6960, "user_id": 79849, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5f986018993d9f078927fe29ee912cf2?s=128&d=identicon&r=PG", "display_name": "cflewis", "link": "https://stackoverflow.com/users/79849/cflewis"}, "edited": false, "score": 0, "creation_date": 1434400057, "post_id": 30852114, "comment_id": 49752202, "body": "If I didn&#39;t use &quot;or_insert&quot;, is there a way the code snippet I offered would ever work?"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 12, "last_activity_date": 1491137490, "last_edit_date": 1491137490, "creation_date": 1434391946, "answer_id": 30852114, "question_id": 30851464, "link": "https://stackoverflow.com/questions/30851464/want-to-add-to-hashmap-using-pattern-match-get-borrow-mutable-more-than-once-at/30852114#30852114", "title": "Want to add to HashMap using pattern match, get borrow mutable more than once at a time", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.entry\" rel=\"noreferrer\"><code>HashMap::entry()</code></a> is the method to use here. In most cases you want to use with <a href=\"https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert\" rel=\"noreferrer\"><code>Entry::or_insert()</code></a> to insert a value:</p>\n\n<pre><code>for word in line.split(\" \") {\n    *c.entry(word).or_insert(0) += 1;\n}\n</code></pre>\n\n<p>In case the value to be inserted need to be expensively calculated, you can use <a href=\"https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert_with\" rel=\"noreferrer\"><code>Entry::or_insert_with()</code></a> to make sure the computation is only executed when it needs to. Both <code>or_insert</code> methods will probably cover all of your needs. But if you, for whatever reason, want to do something else, you can still simply <code>match</code> on the <a href=\"https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html\" rel=\"noreferrer\"><code>Entry</code></a> enum.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1548809648, "last_edit_date": 1548809648, "creation_date": 1548800371, "answer_id": 54430498, "question_id": 30851464, "link": "https://stackoverflow.com/questions/30851464/want-to-add-to-hashmap-using-pattern-match-get-borrow-mutable-more-than-once-at/54430498#54430498", "title": "Want to add to HashMap using pattern match, get borrow mutable more than once at a time", "body": "<p>This is basically not an issue anymore. <strong>With <a href=\"https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes\">non-lexical lifetimes</a> (NLL), your code compiles without problems.</strong> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8d56360e35c458b86a9c63d3f33ed328\" rel=\"nofollow noreferrer\">Your example on the Playground</a>.</p>\n\n<p>NLL is a new way the compiler reasons about borrows. <strong>NLL has been enabled in Rust 2018 (\u2265 1.31)</strong>. It is planned to be enabled in Rust 2015 eventually as well. You can read more about NLL and editions in <a href=\"https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#non-lexical-lifetimes\" rel=\"nofollow noreferrer\">this official blog post</a>.</p>\n\n<p>In this particular case, I still think <a href=\"https://stackoverflow.com/a/30852114/2408867\">A.B.'s answer</a> (<code>entry(word).or_insert(0)</code>) is the best solution, simply because it is very concise. </p>\n"}], "owner": {"reputation": 6960, "user_id": 79849, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5f986018993d9f078927fe29ee912cf2?s=128&d=identicon&r=PG", "display_name": "cflewis", "link": "https://stackoverflow.com/users/79849/cflewis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3376, "favorite_count": 2, "accepted_answer_id": 30852026, "answer_count": 3, "score": 18, "last_activity_date": 1548809648, "creation_date": 1434389736, "last_edit_date": 1491136868, "question_id": 30851464, "link": "https://stackoverflow.com/questions/30851464/want-to-add-to-hashmap-using-pattern-match-get-borrow-mutable-more-than-once-at", "title": "Want to add to HashMap using pattern match, get borrow mutable more than once at a time", "body": "<p>I am trying to write some toy code that stores the number of times it sees a word in a <code>HashMap</code>. If the key exists, it increments a counter by one, if the key doesn't exist, it adds it with the value <code>1</code>. I instinctively want to do this with a pattern match, but I hit a borrow mutable more than once error:</p>\n\n<pre><code>fn read_file(name: &amp;str) -&gt; io::Result&lt;HashMap&lt;String, i32&gt;&gt; {\n    let b = BufReader::new(File::open(name)?);\n    let mut c = HashMap::new();\n\n    for line in b.lines() {\n        let line = line?;\n        for word in line.split(\" \") {\n            match c.get_mut(word) {\n                Some(i) =&gt; {\n                    *i += 1;\n                },\n                None =&gt; {\n                    c.insert(word.to_string(), 1);\n                }\n            }\n        }\n    }\n\n    Ok(c)\n}\n</code></pre>\n\n<p>The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `c` as mutable more than once at a time\n  --&gt; &lt;anon&gt;:21:21\n   |\n16 |             match c.get_mut(word) {\n   |                   - first mutable borrow occurs here\n...\n21 |                     c.insert(word.to_string(), 1);\n   |                     ^ second mutable borrow occurs here\n22 |                 }\n23 |             }\n   |             - first borrow ends here\n</code></pre>\n\n<p>I understand why the compiler is grumpy: I've told it I'm going to mutate the value keyed on <code>word</code>, but then the insert isn't on that value. However, the insert is on a <code>None</code>, so I would have thought the compiler might have realized there was no chance of mutating <code>c[s]</code> now.</p>\n\n<p>I feel like this method <em>should</em> work, but I am missing a trick. What am I doing wrong?</p>\n\n<p>EDIT: I realize I can do this using</p>\n\n<pre><code>        if c.contains_key(word) {\n            if let Some(i) = c.get_mut(s) {\n                *i += 1;\n            }\n        } else {\n            c.insert(word.to_string(), 1);\n        }\n</code></pre>\n\n<p>but this seems horribly ugly code vs the pattern match (particularly having to do the <code>contains_key()</code> check as an if, and then essentially doing that check again using <code>Some</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434375170, "post_id": 30846340, "comment_id": 49736581, "body": "@Shepmaster: While the error message is pretty generic, I think the fundamental issue here is actually a mis-understanding of what <code>chunks</code> creates. <code>chunks</code> (and its clones) are references into the vector while the OP seems to believe they are stand-alone."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1501024281, "last_edit_date": 1501024281, "creation_date": 1434375604, "answer_id": 30846689, "question_id": 30846340, "link": "https://stackoverflow.com/questions/30846340/value-does-not-live-long-enough-when-using-the-chunks-iterator-across-multiple-t/30846689#30846689", "title": "Value does not live long enough when using the Chunks iterator across multiple threads", "body": "<p>The problem you are experiencing is that <a href=\"https://doc.rust-lang.org/std/slice/struct.Chunks.html\" rel=\"nofollow noreferrer\"><code>std::slice::Chunks</code></a> is an iterator that returns references to the original vector. Therefore, in </p>\n\n<pre><code>let mut chunks = Vec::new();\nfor chunk in rows.chunks(chunk_len) {\n    chunks.push(chunk);\n}\n</code></pre>\n\n<p><code>chunks</code> ends up being a vector of references into <code>rows</code> (or to be exact a <code>collections::vec::Vec&lt;&amp;[collections::vec::Vec&lt;&amp;str&gt;]&gt;</code>).</p>\n\n<p>You would need to create a new <code>Vec</code> inside this loop, which would <em>copy</em> the data. Unfortunately, calling <code>clone</code> is insufficient (it creates a clone of the reference, which is still a reference). You could do:</p>\n\n<pre><code>for chunk in rows.chunks(chunk_len) {\n    let mut v = Vec::new();\n    v.extend(chunk.iter().cloned());\n    chunks.push(v);\n}\n</code></pre>\n\n<p><strong>EDIT</strong>: Vladimir has a much better way to clone the slice => <code>chunks.push(chunk.to_owned())</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1501024359, "post_id": 30846725, "comment_id": 77592273, "body": "Or just <code>let chunks: Vec&lt;_&gt; = rows.chunks(chunk_len).map(|c| c.to_owned()).collect();</code>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1501023972, "last_edit_date": 1501023972, "creation_date": 1434375700, "answer_id": 30846725, "question_id": 30846340, "link": "https://stackoverflow.com/questions/30846340/value-does-not-live-long-enough-when-using-the-chunks-iterator-across-multiple-t/30846725#30846725", "title": "Value does not live long enough when using the Chunks iterator across multiple threads", "body": "<p>The error does look misleading, however, it is correct. Your problem in fact is that <code>chunks()</code> gives an iterator of <em>slices</em> into the original vector:</p>\n\n<pre><code>impl&lt;'a, T&gt; Iterator for Chunks&lt;'a, T&gt; {\n    type Item = &amp;'a [T];\n}\n</code></pre>\n\n<p>You're trying to use this slice in a <code>spawn()</code>ed thread which requires the closure to have the <code>'static</code> lifetime:</p>\n\n<pre><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; \nwhere\n    F: FnOnce() -&gt; T,\n    F: Send + 'static,\n    T: Send + 'static, \n</code></pre>\n\n<p>Your iterator does have the <code>'static</code> lifetime because it contains references to a runtime-allocated vector.</p>\n\n<p>You said that you tried <code>clone()</code>, but that only clones the slice, it does not give you a new vector. For that you need to use <code>to_owned()</code>:</p>\n\n<pre><code>for chunk in rows.chunks(chunk_len) {\n    chunks.push(chunk.to_owned());\n}\n</code></pre>\n\n<p>And lo, it <a href=\"https://play.rust-lang.org/?gist=214cd29763857b2b6789a314b9170c8a&amp;version=stable\" rel=\"nofollow noreferrer\">compiles</a>.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 824, "favorite_count": 1, "accepted_answer_id": 30846725, "answer_count": 2, "score": 4, "last_activity_date": 1501024281, "creation_date": 1434374594, "last_edit_date": 1501023765, "question_id": 30846340, "link": "https://stackoverflow.com/questions/30846340/value-does-not-live-long-enough-when-using-the-chunks-iterator-across-multiple-t", "title": "Value does not live long enough when using the Chunks iterator across multiple threads", "body": "<p>This is a simplified example of my situation:</p>\n\n<pre><code>use std::sync::mpsc::{Sender, Receiver};\nuse std::sync::mpsc;\nuse std::thread;\n\nstruct User {\n    reference: String,\n    email: String,\n}\n\nfn main() {\n    let rows = vec![\n        vec![\"abcd\", \"test@test.com\"],\n        vec![\"efgh\", \"test1@test.com\"],\n        vec![\"wfee\", \"test2@test.com\"],\n        vec![\"rrgr\", \"test3@test.com\"],\n    ];\n\n    let chunk_len = (rows.len() / 2) as usize;\n    let mut chunks = Vec::new();\n    for chunk in rows.chunks(chunk_len) {\n        chunks.push(chunk);\n    }\n\n    let (tx, rx): (Sender&lt;Vec&lt;User&gt;&gt;, Receiver&lt;Vec&lt;User&gt;&gt;) = mpsc::channel();\n\n    for chunk in chunks {\n        let thread_tx = tx.clone();\n        thread::spawn(move || {\n            let result = chunk\n                .iter()\n                .map(|row| {\n                    User {\n                        reference: row[0].to_string(),\n                        email: row[1].to_string(),\n                    }\n                })\n                .collect::&lt;Vec&lt;User&gt;&gt;();\n            thread_tx.send(result).unwrap();\n        });\n    }\n\n    let mut users = Vec::new();\n    for _ in 0..chunk_len {\n        users.push(rx.recv());\n    }\n}\n</code></pre>\n\n<p>and it's throwing an error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `rows` does not live long enough\n  --&gt; src/main.rs:20:18\n   |\n20 |     for chunk in rows.chunks(chunk_len) {\n   |                  ^^^^ does not live long enough\n...\n47 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I tried to change to <code>chunks.push(chunk.clone());</code> but the error still wouldn't go away. What am I missing here?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 171938, "user_id": 2684539, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c5fff6fb65e95570ad1a90fe1e3522e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarod42", "link": "https://stackoverflow.com/users/2684539/jarod42"}, "edited": false, "score": 0, "creation_date": 1434373854, "post_id": 30845737, "comment_id": 49735637, "body": "Does <code>SquareMat</code> provide type for <code>N</code>, <code>V</code>, so you can make something like : <code>pub struct Multivar\ud835\udca9&lt;M: SquareMat&lt;N, V&gt;&gt; {     \u03bc: M::V,     \u03a3: M,     marker: PhantomData&lt;M::N&gt; }</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1434373998, "post_id": 30845737, "comment_id": 49735732, "body": "please provide a <a href=\"http://stackoverflow.com/help/mcve\">minimal compilable and verifiable example</a>, most importantly your code is missing the <code>SquareMat</code> trait and your error messages references a <code>MyStruct</code> type that is shown nowhere. For Rust-questions it&#39;s the most comfortable for answerers if your error is reproducable in the Playpen at <a href=\"http://play.rust-lang.org\" rel=\"nofollow noreferrer\">play.rust-lang.org</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434374685, "post_id": 30845737, "comment_id": 49736210, "body": "Please also look at the existing questions for both errors (<a href=\"http://stackoverflow.com/search?q=%5Brust%5D+only+traits+defined+in+the+current+crate+can+be+implemented+for+a+type+parameter\">1</a>, <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+conflicting+implementations+for+trait\">2</a>) and <b>explain to us</b> why your question is different. Otherwise you might just be marked as a duplicate, closed, or get an useless answer."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1505070646, "last_edit_date": 1505070646, "creation_date": 1434376818, "answer_id": 30847150, "question_id": 30845737, "link": "https://stackoverflow.com/questions/30845737/conflicting-implementations-for-trait-when-trying-to-be-generic/30847150#30847150", "title": "&quot;conflicting implementations for trait&quot; when trying to be generic", "body": "<p>The problem with your code is that you have a coherence violation in it, and, very likely, any attempts to fix it would lead to new coherence violations.</p>\n\n<p>Coherence rules in Rust are somewhat complex, however, they are based on one principle: you can implement \"your\" traits for arbitrary types and you can implement arbitrary traits for \"your\" types. It sounds simple, but it becomes complicated when type parameters come into picture - it turns out that there are more than one ways to define which types are \"yours\" and which are not.</p>\n\n<p>In this particular case the error is in that you're implementing a foreign trait for a type parameter directly:</p>\n\n<pre><code>impl&lt;N, V, M&gt; Mul&lt;Multivar\ud835\udca9&lt;N, V, M&gt;&gt; for M\n</code></pre>\n\n<p>This directly violates the above principle - you can't implement traits you don't own for types you don't own (such implementations are called \"orphan impls\"). This is exactly what your first error is about.</p>\n\n<p>The second error makes me think that you have more <code>Mul</code> implementations than you provided here; anyway, it is also a coherence violation. Typically such error is caused when you have intersections of sets of types applicable for two or more different implementations of a trait:</p>\n\n<pre><code>use std::fmt;\n\ntrait X {}\n\nimpl X for i32 {}\nimpl&lt;T: fmt::Display&gt; X for T {}\n</code></pre>\n\n<p>Here implementations are conflicting because they both are applicable for <code>i32</code> because <code>i32</code> implements <code>fmt::Display</code>.</p>\n\n<p>In fact, it is difficult to tell what you want, so it is also difficult to give a satisfying answer. I tried to explain the reason for these errors above, hopefully it would help you to write trait implementations properly. If you're interested, you can find more in <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\" rel=\"nofollow noreferrer\">this</a> blog post on orphan rules.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2409, "favorite_count": 1, "accepted_answer_id": 30847150, "answer_count": 1, "score": 3, "last_activity_date": 1505070646, "creation_date": 1434372929, "last_edit_date": 1434375356, "question_id": 30845737, "link": "https://stackoverflow.com/questions/30845737/conflicting-implementations-for-trait-when-trying-to-be-generic", "title": "&quot;conflicting implementations for trait&quot; when trying to be generic", "body": "<p>Background: I'm using the <code>nalgebra</code> library and I want to create a structure that represents a multivariate normal distribution. <code>M</code> is the type of the matrix, e.g. <code>Mat4&lt;f64&gt;</code>.</p>\n\n<p>My current attempt looks like this:</p>\n\n<pre><code>use std::ops::Mul;\nuse std::marker::PhantomData;\nuse nalgebra::*;\n\n#[allow(non_snake_case)]\npub struct Multivar\ud835\udca9&lt;N, V, M: SquareMat&lt;N, V&gt;&gt; {\n    \u03bc: V,\n    \u03a3: M,\n    marker: PhantomData&lt;N&gt;\n}\n\nimpl&lt;N, V, M&gt; Mul&lt;Multivar\ud835\udca9&lt;N, V, M&gt;&gt; for M {\n    type Output = Multivar\ud835\udca9&lt;N, V, M&gt;;\n    fn mul(self, rhs: Multivar\ud835\udca9&lt;N, V, M&gt;) -&gt; Multivar\ud835\udca9&lt;N, V, M&gt; {\n        Multivar\ud835\udca9 {\n            \u03bc: self * rhs.\u03bc,\n            \u03a3: self * rhs.\u03a3 * transpose(&amp;self)\n        }\n    }\n}\n</code></pre>\n\n<p>However, the compiler complains with:</p>\n\n<p><code>error: type parameter `M` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter</code></p>\n\n<p>and </p>\n\n<p><code>error: conflicting implementations for trait `core::ops::Mul`</code></p>\n\n<p>I don't believe this should be an error since I'm defining an implementation for a struct I have defined in this module. How should I fix this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1434373156, "post_id": 30845670, "comment_id": 49735141, "body": "This question is weird. There are three semi related questions. One is in title. And two in body."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434374391, "post_id": 30845670, "comment_id": 49736008, "body": "@SanjibPradhan: For a first time, you might want to take a tour of stackoverflow, starting with <a href=\"http://stackoverflow.com/help/how-to-ask\">How to ask a Good Question?</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1434374469, "post_id": 30845670, "comment_id": 49736071, "body": "Welcome to Stack Overflow! I&#39;d <b>highly</b> suggest reading <a href=\"http://stackoverflow.com/help/how-to-ask\">how to ask a good question</a>. Also, it&#39;s <a href=\"http://meta.stackexchange.com/questions/39223/one-post-with-multiple-questions-or-multiple-posts\">specifically discouraged</a> from asking multiple questions per post. Pretend you were searching the internet for &quot;implement an interpreter for a language that needs garbage collection&quot;, would <i>you</i> click on a title about &quot;cyclic data structures&quot;? If you received 3 separate answers, one for each question <i>which one would you accept</i>?"}], "answers": [{"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 3, "last_activity_date": 1434375879, "last_edit_date": 1434375879, "creation_date": 1434373397, "answer_id": 30845914, "question_id": 30845670, "link": "https://stackoverflow.com/questions/30845670/can-rust-handle-cyclic-data-structures-without-any-garbage-collector/30845914#30845914", "title": "Can Rust handle cyclic data structures without any garbage collector?", "body": "<p>As for the title question -  Yes, cyclic data structures can be handled without garbage collector.</p>\n\n<ul>\n<li><a href=\"http://smallcultfollowing.com/babysteps/blog/2015/04/06/modeling-graphs-in-rust-using-vector-indices/\" rel=\"nofollow\">http://smallcultfollowing.com/babysteps/blog/2015/04/06/modeling-graphs-in-rust-using-vector-indices/</a></li>\n<li><a href=\"http://featherweightmusings.blogspot.com/2015/04/graphs-in-rust.html\" rel=\"nofollow\">http://featherweightmusings.blogspot.com/2015/04/graphs-in-rust.html</a></li>\n</ul>\n\n<p>For first question. Yes, you can completely avoid garbage collector and manual deallocation <em>in most cases</em>. In some you rely on <code>RC</code> which is a simple form of garbage collection, or unsafe, which rely on author not missing  a case in which it will be freed.</p>\n\n<p>In some cases it's necessary to write a GC. For example if you are implementing a VM for Javascript, you'll need to develop a GC, because well, that's how JavaScript works. But developing such GC will probably require a large amount of <code>unsafe</code> code which again falls on authors back to test, check and prove it works.</p>\n"}], "owner": {"reputation": 78, "user_id": 3604517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6740cd75eefbc5d2982ea35fab675f64?s=128&d=identicon&r=PG&f=1", "display_name": "Sanjib Pradhan", "link": "https://stackoverflow.com/users/3604517/sanjib-pradhan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 723, "favorite_count": 0, "accepted_answer_id": 30845914, "answer_count": 1, "score": 2, "last_activity_date": 1434375879, "creation_date": 1434372738, "last_edit_date": 1434374303, "question_id": 30845670, "link": "https://stackoverflow.com/questions/30845670/can-rust-handle-cyclic-data-structures-without-any-garbage-collector", "title": "Can Rust handle cyclic data structures without any garbage collector?", "body": "<p>Is it possible to completely avoid a garbage collector and manual deallocation?</p>\n\n<p>Is it possible to implement an interpreter for a language that needs garbage collection (say, Scheme) in Rust, without implementing or using any garbage collector? </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1434373773, "last_edit_date": 1434373773, "creation_date": 1434371983, "answer_id": 30845421, "question_id": 30845261, "link": "https://stackoverflow.com/questions/30845261/how-can-i-create-haskell-like-functional-dependencies/30845421#30845421", "title": "How can I create Haskell-like functional dependencies", "body": "<p>While Haskell has two things to express such relationship between types, fundeps and associated types, Rust has only the latter. Traits in Rust can contain type members which are assigned with concrete values at the implementation site, and the compiler considers them uniquely identified by the combination of type parameters of the trait (including <code>Self</code>). So you need to define <code>SquareMat</code> trait like this:</p>\n\n\n\n<pre><code>trait SquareMat {\n    type N;\n    type V;\n    ...\n}\n\nimpl SquareMat for SomeStruct {\n    type N = Four;\n    type V = f64;\n    ...\n}\n</code></pre>\n\n<p>And then this trait can be used like this:</p>\n\n\n\n<pre><code>#[allow(non_snake_case)]\npub struct Multivar\ud835\udca9&lt;M: SquareMat&gt; {\n    \u03bc: M::V,\n    \u03a3: M,\n}\n</code></pre>\n\n<p>If you don't control <code>SquareMat</code>, well, then you're out of luck - you cannot define a functional dependency at the trait usage site, only at the trait declaration site, just like in Haskell.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 236, "favorite_count": 0, "accepted_answer_id": 30845421, "answer_count": 1, "score": 12, "last_activity_date": 1434374021, "creation_date": 1434371510, "last_edit_date": 1434374021, "question_id": 30845261, "link": "https://stackoverflow.com/questions/30845261/how-can-i-create-haskell-like-functional-dependencies", "title": "How can I create Haskell-like functional dependencies", "body": "<p>Background: I'm using the <code>nalgebra</code> library and I want to create a structure that represents a multivariate normal distribution. The number and row type is uniquely determined by a square matrix type, so I want to write something like this:</p>\n\n<pre><code>#[allow(non_snake_case)]\npub struct Multivar\ud835\udca9&lt;M: SquareMat&lt;N, V&gt;&gt; {\n    \u03bc: V,\n    \u03a3: M,\n}\n</code></pre>\n\n<p>If I was using Haskell, I would specify a functional dependency between <code>M</code> and <code>N</code> and <code>V</code>. What's the best way to do this in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 4, "creation_date": 1434367556, "post_id": 30843885, "comment_id": 49731230, "body": "Why not <code>use std::ops::Mul</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 2, "creation_date": 1434375569, "post_id": 30843885, "comment_id": 49736869, "body": "@mdup because the compiler said <code>core</code> and this is a super non-obvious part of Rust :-("}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1434369159, "post_id": 30843972, "comment_id": 49732268, "body": "Using <code>libcore</code> is possible, and is for the situation when you&#39;re building without <code>libstd</code> at all. Prefer <code>libstd</code>, it&#39;s what the stable channel of Rust exposes at the moment."}], "tags": [], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "is_accepted": false, "score": 0, "last_activity_date": 1434367576, "creation_date": 1434367576, "answer_id": 30843972, "question_id": 30843885, "link": "https://stackoverflow.com/questions/30843885/why-do-i-need-to-use-selfcoreops/30843972#30843972", "title": "Why do I need to use self::core::ops?", "body": "<p>It turns out that I am supposed to use <code>use std::ops::Mul;</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 14, "last_activity_date": 1434367650, "creation_date": 1434367650, "answer_id": 30843995, "question_id": 30843885, "link": "https://stackoverflow.com/questions/30843885/why-do-i-need-to-use-selfcoreops/30843995#30843995", "title": "Why do I need to use self::core::ops?", "body": "<p>An <code>extern crate x;</code> loads <code>x</code> into the current namespace. <code>use</code> statements are absolute paths unless they start with <code>self::</code>, so if you put your <code>extern crate core;</code> anywhere but the crate root then you need to specify an absolute path or use <code>self::</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod foo {\n    mod bar {\n        extern crate core;\n        use foo::bar::core::ops::Mul;\n        // or `use self::core::ops::Mul;`\n        // or even `use super::bar::core::ops::Mul;` if you\u2019re mad\n        // but not `use core::ops::Mul;`.\n    }\n}\n</code></pre>\n\n<p>\u2026 but as a general rule you shouldn\u2019t use <code>core</code> directly anyway. All the stable stuff from it is available in <code>std</code> which is included automatically.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1079, "favorite_count": 0, "accepted_answer_id": 30843995, "answer_count": 2, "score": 8, "last_activity_date": 1434367650, "creation_date": 1434367310, "question_id": 30843885, "link": "https://stackoverflow.com/questions/30843885/why-do-i-need-to-use-selfcoreops", "title": "Why do I need to use self::core::ops?", "body": "<p>I'm trying to use <code>Mul</code> from <code>core</code>.</p>\n\n<p>This is suggested by the compiler and works:</p>\n\n<pre><code>extern crate core;\n\nuse self::core::ops::Mul;\n</code></pre>\n\n<p>but why doesn't</p>\n\n<pre><code>extern crate core;\n\nuse core::ops::Mul;\n</code></pre>\n\n<p>work?</p>\n\n<p>I get the error <code>error: unresolved import `core::ops::Mul`. Did you mean `self::core::ops`?</code></p>\n"}, {"tags": ["rust", "immutability"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1434355317, "post_id": 30839503, "comment_id": 49724120, "body": "you can always use unsafe code to break any immutability guarantee, there&#39;s no way to get around that..."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1434355912, "post_id": 30839503, "comment_id": 49724427, "body": "If you don&#39;t want interior mutability, what about simply not using types that provide it?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1434356045, "post_id": 30839503, "comment_id": 49724504, "body": "@Levans it might not be so trivial, maybe a type you are using is generic, and the user might plugin a type with interior mutability. Or you are using a type that has a private field with interior mutability... You might never know about that..."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 3, "creation_date": 1434357331, "post_id": 30839503, "comment_id": 49725212, "body": "Rust does not really give strong mutability guarantees, it gives strong ownership guarantees (that in certain cases allow or prevent mutation as a by-product). In fact at one point there was <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/05/13/focusing-on-ownership/\" rel=\"nofollow noreferrer\">a discussion on modifying the language to make this focus on ownership more explicit</a>. This started the so-called &quot;mutpocalypse&quot;, as a lot of people reacted strongly against it, so no changes were made."}, {"owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434364579, "post_id": 30839503, "comment_id": 49729433, "body": "@ker so only unsafe code can have interior mutability? Then i would consider any safe interface that uses unsafe code that does that as containing an error. Is there any sane argument to have it otherwise?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434370144, "post_id": 30839503, "comment_id": 49732927, "body": "xophos: somewhere down the line unsafe code is required. Basically you can assume that any unsafe code doing interior mutability without using one of the <code>std::cell</code> or <code>std::sync</code> types is a bug or a misuse of some kind. The <code>*Cell</code> types specifically exist to allow interior mutability, you should not use unsafe to achieve the same"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434376032, "post_id": 30839503, "comment_id": 49737232, "body": "What problem are you trying to solve by preventing mutability? I would be surprised if Rust doesn&#39;t handle the root problem that you are trying to address. Common things like <i>iterator invalidation</i> and <i>use-after-free</i> are handled quite nicely, even in the presence of mutability."}, {"owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434433724, "post_id": 30839503, "comment_id": 49761975, "body": "@Shepmaster the problem of hidden state for example."}, {"owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "edited": false, "score": 0, "creation_date": 1434434260, "post_id": 30839503, "comment_id": 49762192, "body": "When i declare something as immutable, i want to be sure that it will not change between initialization and destruction. If unsafe code can work around this, that is acceptable to me since unsafe code can by definition be used to break guarantees. But having something like that in the standard library is more than distasteful."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1434436327, "post_id": 30839503, "comment_id": 49763087, "body": "You know, types with internal mutability have some very good reason to exist. Patterns like <code>Arc&lt;RwLock&lt;_&gt;&gt;</code> are sometimes absolutely necessary. It would be quite horrible if it was not possible to use them in safe code..."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1434436385, "post_id": 30839503, "comment_id": 49763115, "body": "Their role is mostly to ensure at runtime invariants that cannot be checked at compile-time."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434374528, "post_id": 30840581, "comment_id": 49736103, "body": "And there&#39;s the fact that you can convert <code>*const T</code> to <code>*mut T</code> and then mutate it that way. ^_^"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434374817, "post_id": 30840581, "comment_id": 49736311, "body": "as I said... it&#39;s not whitelisting, and in situations with unsafe code quite irrelevant anyway, so using the <code>*mut T</code> is already requiring unsafe... but yea... I missed that trivial one ^^ ... and you can go from a <code>&amp;T</code> to a <code>*const T</code> and then we&#39;re back where we started... xD"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434374928, "post_id": 30840581, "comment_id": 49736396, "body": "Oh, I&#39;m not trying to invalidate your answer in any way, just pointing out examples of how a malicious end user can subvert this, as you already mentioned was possible."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1434374856, "last_edit_date": 1434374856, "creation_date": 1434356978, "answer_id": 30840581, "question_id": 30839503, "link": "https://stackoverflow.com/questions/30839503/is-there-a-way-to-declare-a-variable-immutable-in-a-meaningful-way/30840581#30840581", "title": "Is there a way to declare a variable immutable in a meaningful way?", "body": "<p>Preventing interior mutability is impossible in run-time evaluated code (Constant evaluation makes this easy, there's no mutation of any kind). Any type you use that you don't have control over might be using unsafe code to achieve interior mutability. To prevent the most common cases you can use a so called \"marker trait\". This trait has no other purpose but to allow you to differentiate between types that implement your trait and types that don't.</p>\n\n<pre><code>#![feature(optin_builtin_traits)]\n\nuse std::cell::{RefCell, Cell, UnsafeCell};\nuse std::sync::Mutex;\n\nunsafe trait ReallyImmutable {}\n\nunsafe impl ReallyImmutable for .. {}\nimpl&lt;T&gt; !ReallyImmutable for RefCell&lt;T&gt; {}\nimpl&lt;T&gt; !ReallyImmutable for Cell&lt;T&gt; {}\nimpl&lt;T&gt; !ReallyImmutable for UnsafeCell&lt;T&gt; {}\nimpl&lt;T&gt; !ReallyImmutable for Mutex&lt;T&gt; {}\nimpl&lt;'a, T&gt; !ReallyImmutable for &amp;'a mut T {}\nimpl&lt;T&gt; !ReallyImmutable for *mut T {}\nimpl&lt;T&gt; !ReallyImmutable for *const T {}\n</code></pre>\n\n<p>This has of course the disadvantage of requiring you to blacklist interior mutability instead of white-listing immutable types. So you might always miss something.</p>\n"}], "owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 0, "accepted_answer_id": 30840581, "answer_count": 1, "score": 0, "last_activity_date": 1434374856, "creation_date": 1434353212, "last_edit_date": 1434374201, "question_id": 30839503, "link": "https://stackoverflow.com/questions/30839503/is-there-a-way-to-declare-a-variable-immutable-in-a-meaningful-way", "title": "Is there a way to declare a variable immutable in a meaningful way?", "body": "<p>Up until today, I thought declaring a variable without <code>mut</code> made sure it can not be changed after initialization.</p>\n\n<p>I thought this was great because I always resented the way that <code>const</code> in C and C++ didn't guarantee anything.</p>\n\n<p>I just found out I was wrong: Rust allows internal mutability (see <a href=\"http://doc.rust-lang.org/std/cell/\" rel=\"nofollow\" title=\"std::cell\">std::cell</a>). It gives you some guarantees, but is not what I expect and wish for when I hear immutable.</p>\n\n<p>Is there a way to declare something \"really immutable\"?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "edited": false, "score": 0, "creation_date": 1434413647, "post_id": 30838655, "comment_id": 49757103, "body": "Thanks! I tried your method of using <code>slice::from_raw_parts()</code> and it worked perfectly."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "edited": false, "score": 0, "creation_date": 1607112392, "post_id": 30838655, "comment_id": 115179694, "body": "@rillomas Please consider using the <code>byteorder</code> method! ARM machines are very common nowadays, not only phones are, but the new Macs too. If you are using <code>from_raw_parts</code>, files saved on a x86 machine (most Windows and desktop Linuxes) will not be readable from a phone or new Mac."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1607113102, "post_id": 30838655, "comment_id": 115179913, "body": "(And I do realize this question is 5 years old, just commenting for future passerbys)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 11, "last_activity_date": 1607117044, "last_edit_date": 1607117044, "creation_date": 1434349991, "answer_id": 30838655, "question_id": 30838358, "link": "https://stackoverflow.com/questions/30838358/what-is-the-correct-way-to-write-vecu16-content-to-a-file/30838655#30838655", "title": "What is the correct way to write `Vec&lt;u16&gt;` content to a file?", "body": "<p>To do it directly you'd want to use <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\"><code>std::slice::from_raw_parts()</code></a>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>use std::{mem, slice};\n\nfn main() {\n    let slice_u16: &amp;[u16] = &amp;[1, 2, 3, 4, 5, 6];\n    println!(&quot;u16s: {:?}&quot;, slice_u16);\n\n    let slice_u8: &amp;[u8] = unsafe {\n        slice::from_raw_parts(\n            slice_u16.as_ptr() as *const u8,\n            slice_u16.len() * mem::size_of::&lt;u16&gt;(),\n        )\n    };\n\n    println!(&quot;u8s: {:?}&quot;, slice_u8);\n}\n</code></pre>\n<p>It does require <code>unsafe</code> because <code>from_raw_parts()</code> can't guarantee that you passed a valid pointer to it, and it can also create slices with arbitrary lifetimes.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29037033/155423\">How to slice a large Vec&lt;i32&gt; as &amp;[u8]?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33968870/155423\">Temporarily transmute [u8] to [u16]</a></li>\n</ul>\n<p>This approach is not only potentially unsafe, it is also not portable. When you work with integers larger than one byte, endianness issues immediately arise. If you write a file in this way on a x86 machine, you would then read garbage on an ARM machine. The proper way is to use libraries like <a href=\"https://crates.io/crates/byteorder\" rel=\"nofollow noreferrer\"><code>byteorder</code></a> which allow you to specify endianness explicitly:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use byteorder::{LittleEndian, WriteBytesExt}; // 1.3.4\n\nfn main() {\n    let slice_u16: &amp;[u16] = &amp;[1, 2, 3, 4, 5, 6];\n    println!(&quot;u16s: {:?}&quot;, slice_u16);\n\n    let mut result: Vec&lt;u8&gt; = Vec::new();\n    for &amp;n in slice_u16 {\n        let _ = result.write_u16::&lt;LittleEndian&gt;(n);\n    }\n\n    println!(&quot;u8s: {:?}&quot;, result);\n}\n</code></pre>\n<p>Note that I've used <code>Vec&lt;u8&gt;</code> here, but it implements <code>Write</code>, and <code>write_u16()</code> and other methods from the <a href=\"https://docs.rs/byteorder/1.3.4/byteorder/trait.WriteBytesExt.html\" rel=\"nofollow noreferrer\"><code>WriteBytesExt</code></a> trait are defined on any <code>Write</code>, so you could use these methods directly on a <code>BufWriter</code>, for example.</p>\n<p>Once written, you can use methods from the <a href=\"https://docs.rs/byteorder/1.3.4/byteorder/trait.ReadBytesExt.html\" rel=\"nofollow noreferrer\"><code>ReadBytesExt</code></a> trait to read the data back.</p>\n<p>While this may be slightly less efficient than reinterpreting a piece of memory, it is safe and portable.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29307474/155423\">How can I convert a buffer of a slice of bytes (&amp;[u8]) to an integer?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "edited": false, "score": 1, "creation_date": 1434414371, "post_id": 30840849, "comment_id": 49757260, "body": "Thanks! I also tried your method of using bincode + rustc-serialize, and personally I prefer this method more than dumping raw data to a file (no <code>unsafe</code>, no need to worry about endianness). I&#39;m accepting Vladimir&#39;s answer because it was more on topic, but like you said using serialization is probably the better way."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 8, "last_activity_date": 1502748124, "last_edit_date": 1502748124, "creation_date": 1434357932, "answer_id": 30840849, "question_id": 30838358, "link": "https://stackoverflow.com/questions/30838358/what-is-the-correct-way-to-write-vecu16-content-to-a-file/30840849#30840849", "title": "What is the correct way to write `Vec&lt;u16&gt;` content to a file?", "body": "<p>I recommend using existing libraries for serialization such as <a href=\"https://crates.io/crates/serde\" rel=\"nofollow noreferrer\">serde</a> and <a href=\"https://crates.io/crates/bincode\" rel=\"nofollow noreferrer\">bincode</a>:</p>\n\n<pre><code>extern crate bincode;\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\nuse std::error::Error;\n\n#[derive(Serialize, Deserialize, Debug, Copy, Clone, PartialEq)]\npub enum ImageFormat {\n    GrayScale,\n    Rgb32,\n}\n\n#[derive(Serialize, Deserialize, Debug, Copy, Clone, PartialEq)]\npub struct ImageHeader {\n    pub width: usize,\n    pub height: usize,\n    pub format: ImageFormat,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct Image {\n    pub header: ImageHeader,\n    pub data: Vec&lt;u16&gt;,\n}\n\nimpl Image {\n    fn save_to_disk(&amp;self, path: &amp;str) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n        use std::fs::File;\n        use std::io::Write;\n        let bytes: Vec&lt;u8&gt; = try!(bincode::serialize(self, bincode::Infinite));\n        let mut file = try!(File::create(path));\n        file.write_all(&amp;bytes).map_err(|e| e.into())\n    }\n}\n\nfn main() {\n    let image = Image {\n        header: ImageHeader {\n            width: 2,\n            height: 2,\n            format: ImageFormat::GrayScale,\n        },\n        data: vec![0, 0, 0, 0],\n    };\n\n    match image.save_to_disk(\"image\") {\n        Ok(_) =&gt; println!(\"Saved image to disk\"),\n        Err(e) =&gt; println!(\"Something went wrong: {:?}\", e.description()),\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6193, "favorite_count": 2, "accepted_answer_id": 30838655, "answer_count": 2, "score": 15, "last_activity_date": 1607117044, "creation_date": 1434348480, "last_edit_date": 1502747561, "question_id": 30838358, "link": "https://stackoverflow.com/questions/30838358/what-is-the-correct-way-to-write-vecu16-content-to-a-file", "title": "What is the correct way to write `Vec&lt;u16&gt;` content to a file?", "body": "<p>I'm having trouble writing <code>Vec&lt;u16&gt;</code> content to a file:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{Write, BufWriter};\nuse std::mem;\n\n#[derive(Debug, Copy, Clone, PartialEq)]\npub enum ImageFormat {\n    GrayScale,\n    Rgb32,\n}\n\n#[derive(Debug, Copy, Clone, PartialEq)]\npub struct ImageHeader {\n    pub width: usize,\n    pub height: usize,\n    pub format: ImageFormat,\n}\n\npub struct Image {\n    pub header: ImageHeader,\n    pub data: Vec&lt;u16&gt;,\n}\n\nfn write_to_file(path: &amp;str, img: &amp;Image) -&gt; std::io::Result&lt;()&gt; {\n    let f = try!(File::create(path));\n    let mut bw = BufWriter::new(f);\n    let slice = &amp;img.data[..];\n    println!(\"before length: {}\", slice.len());\n    let sl: &amp;[u8];\n    unsafe {\n        sl = mem::transmute::&lt;&amp;[u16], &amp;[u8]&gt;(slice);\n    }\n    println!(\"after length: {}\", sl.len());\n    try!(bw.write_all(sl));\n    return Ok(());\n}\n\nfn main() {}\n</code></pre>\n\n<p>Since <code>write_all()</code> asks for a <code>&amp;[u8]</code>, I'm doing an unsafe conversion of <code>&amp;[u16]</code> to <code>&amp;[u8]</code>. Because the conversion does not change the slice length (<code>slice.len()</code> and <code>sl.len()</code> have the same values), only half of the image data is output to the file.</p>\n\n<p>It would be better if I don't need any unsafe conversion or copying.</p>\n"}, {"tags": ["linked-list", "rust", "reference-counting"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1434342737, "post_id": 30837309, "comment_id": 49719042, "body": "You are correct; it is not possible to express cycles in safe Rust without shared ownership as provided by things like <code>Rc</code>."}, {"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434344400, "post_id": 30837309, "comment_id": 49719512, "body": "This looks like the right answer to my question, but I don&#39;t really want shared ownership either.  I guess I&#39;ll do some playing around with <code>std::rc::Weak</code> in addition to <code>Rc</code>, since I just noticed the former exists.  Thanks for the quick response!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434354565, "post_id": 30837309, "comment_id": 49723735, "body": "<i>To my mind, reference counting seems awfully heavy-weight for something so simple</i> =&gt; when you start opening your eyes to ownership issues (who is owning each piece of data), you will realize that your impression of simplicity is erroneous :)"}, {"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 0, "creation_date": 1434421003, "post_id": 30837309, "comment_id": 49758741, "body": "Erroneous is a strong word; perhaps different?  It&#39;s a tricky statement because maintaining the invariants on a tail pointer in a singly linked list <i>is</i> very easy--it&#39;s a common high school CS topic.  Mathematically proving that they are maintained is a different issue."}], "answers": [{"comments": [{"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 1, "creation_date": 1434348724, "post_id": 30837792, "comment_id": 49720914, "body": "This will surely sound like a leading question, but I assure you I am genuinely trying to understand the spirit of Rust.  If I am required to &quot;embrace the unsafety&quot; in order to write non-trivial, non-tree data structures, why wouldn&#39;t I just stick with C++, where I already have many years of experience?  Is the implication that most good data structures should be trees?  Or is there some other part of the story that I&#39;m missing?"}, {"owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "reply_to_user": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 6, "creation_date": 1434350053, "post_id": 30837792, "comment_id": 49721489, "body": "I would argue that writing collections is not something <i>most programs</i> will bother doing. They&#39;ll get their data structures pre-made (probably just from std). Collections are also fundamentally a low-level construct. You need to talk directly to the system allocator, work with partially initialized data, and maintain complex invariants. Especially if you want performance. Once you build your collection, it should expose an entirely safe interface, and no one needs to care about the insides. Rust also puts a bigger burden on fundamental libraries. Applications get a bigger win from safety."}, {"owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "reply_to_user": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 4, "creation_date": 1434350109, "post_id": 30837792, "comment_id": 49721516, "body": "As for most good data structures are trees: no, most good data structures are arrays. :)"}, {"owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "reply_to_user": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 3, "creation_date": 1434351410, "post_id": 30837792, "comment_id": 49722120, "body": "On the note of &quot;why not just C++&quot;: Rust&#39;s safety is modular and opt-out. For instance when you choose to work with uninitialized memory you don&#39;t suddenly have to worry about null pointers (also Safe Rust actually has really awesome 100% safe ways to work with uninitialized memory anyway). Also you spend anywhere from 100% to 90% of your time not worry about unsafety at all depending on the sort of code you&#39;re working on. C++? Unsafety is pervasive.   ( Just realized you might not get pinged on these responses, so cc @GrandOpener )"}], "tags": [], "owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "is_accepted": true, "score": 9, "last_activity_date": 1434345468, "creation_date": 1434345468, "answer_id": 30837792, "question_id": 30837309, "link": "https://stackoverflow.com/questions/30837309/what-is-the-idiomatic-way-to-write-a-linked-list-with-a-tail-pointer/30837792#30837792", "title": "What is the idiomatic way to write a linked list with a tail pointer?", "body": "<p>Yes, if you want to write a singly-linked-list with a tail-pointer you have three choices:</p>\n\n<ul>\n<li>Safe and Mutable: Use NodePtr = <code>Option&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;</code></li>\n<li>Safe and Immutable: Use NodePtr = <code>Option&lt;Rc&lt;Node&lt;T&gt;&gt;&gt;</code></li>\n<li>Unsafe and Mutable: Use <code>tail: *mut Node&lt;T&gt;</code> </li>\n</ul>\n\n<p>The <code>*mut</code> is going to be more efficient, and it's not like the <code>Rc</code> is actually going to <em>prevent</em> you from producing completely nonsense states (as you correctly deduced). It's just going to guarantee that they don't cause segfaults (and with RefCell it may still cause runtime crashes though...).</p>\n\n<p>Ultimately, any linked list more complex than vanilla singly-linked has an ownership story that's too complex to encode in Rust's ownership system safely and efficiently (it's not a tree). I personally favour just embracing the unsafety at that point and leaning on unit tests to get to the finish-line in one piece (why write a suboptimal data structure...?).</p>\n"}], "owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1173, "favorite_count": 0, "accepted_answer_id": 30837792, "answer_count": 1, "score": 7, "last_activity_date": 1434374066, "creation_date": 1434342020, "last_edit_date": 1434374066, "question_id": 30837309, "link": "https://stackoverflow.com/questions/30837309/what-is-the-idiomatic-way-to-write-a-linked-list-with-a-tail-pointer", "title": "What is the idiomatic way to write a linked list with a tail pointer?", "body": "<p>As a learning project for Rust, I have a very simple (working, if incomplete) implementation of a singly linked list.  The declaration of the structs looks like this:</p>\n\n<pre><code>type NodePtr&lt;T&gt; = Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;;\n\nstruct Node&lt;T&gt; {\n    data: T,\n    next: NodePtr&lt;T&gt;,\n}\n\npub struct LinkedList&lt;T&gt; {\n    head: NodePtr&lt;T&gt;,\n}\n</code></pre>\n\n<p>Implementing <code>size</code> and <code>push_front</code> were both reasonably straight-forward, although doing size iteratively did involve some \"fighting with the borrow checker.\"</p>\n\n<p>The next thing I wanted to try was adding a <code>tail</code> pointer to the <code>LinkedList</code> structure. to enable an efficient <code>push_back</code> operation.  Here I've run into a bit of a wall.  At first I attempted to use <code>Option&lt;&amp;Box&lt;Node&lt;T&gt;&gt;&gt;</code> and then <code>Option&lt;&amp;Node&lt;T&gt;&gt;</code>.  Both of those led to sprinkling <code>'a</code>s everywhere, but still eventually being unable to promise the lifetime checker that <code>tail</code> would be valid.</p>\n\n<p>I have since come to the tentative conclusion that it is impossible with these definitions: that there is no way to <em>guarantee</em> to the compiler that <code>tail</code> would be valid in the places that I think it is valid.  The only way I can possibly accomplish this is to have all my pointers be <code>Rc&lt;_&gt;</code> or <code>Rc&lt;RefCell&lt;_&gt;&gt;</code>, because those are the only safe ways to have two things pointing at the same object (the final node).</p>\n\n<p>My question: is this the correct conclusion?  More generally: what is the idiomatic Rust solution for unowned pointers inside data structures?  To my mind, reference counting seems awfully heavy-weight for something so simple, so I think I must be missing something.  (Or perhaps I just haven't gotten my mind into the right mindset for memory safety yet.)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434329726, "post_id": 30835978, "comment_id": 49716562, "body": "What\u2019s wrong with <code>i as u64</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434330097, "post_id": 30835978, "comment_id": 49716638, "body": "So, out of each <code>u8</code> you\u2019re only using four of the bits. So if your bits are <code>[0b0000AAAA, 0b0000BBBB, 0b0000CCCC, 0b0000DDDD, 0b0000EEEE, 0b0000FFFF, 0b0000GGGG, 0b0000HHHH]</code> you are wanting to end up with <code>0bAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHu64</code>. Am I correct?"}, {"owner": {"reputation": 51282, "user_id": 39036, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/aHIw5.jpg?s=128&g=1", "display_name": "samoz", "link": "https://stackoverflow.com/users/39036/samoz"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434330352, "post_id": 30835978, "comment_id": 49716710, "body": "@ChrisMorgan if input is [0xF,0xE,0xE,0xD,0xB,0xE,0xE,0xF,0xF,0xE,0xE,0xD,0xB,0xE,0xE&zwnj;&#8203;,0xF], the output should be 0xFEEDBEEFFEEDBEEFu64."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1434330784, "post_id": 30835978, "comment_id": 49716807, "body": "Using <code>&amp;Vec&lt;T&gt;</code> is practically never what you want\u2014it\u2019s two levels of indirection where only one is necessary. You should use just a simple slice <code>&amp;[T]</code> instead. If you have a vector <code>v</code>, <code>&amp;v</code> will coerce from <code>&amp;Vec&lt;T&gt;</code> to <code>&amp;[T]</code> silently."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434354375, "post_id": 30835978, "comment_id": 49723648, "body": "If <code>values</code> is too long, <code>temp &lt;&lt; 4</code> is going to overflow at some point."}, {"owner": {"reputation": 26723, "user_id": 995714, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/w1393.jpg?s=128&g=1", "display_name": "phuclv", "link": "https://stackoverflow.com/users/995714/phuclv"}, "edited": false, "score": 0, "creation_date": 1617633184, "post_id": 30835978, "comment_id": 118350628, "body": "Does this answer your question? <a href=\"https://stackoverflow.com/questions/59259543/fastest-way-to-convert-8-consecutive-bytes-into-nibbles-encoded-in-32-bit-integ\">Fastest way to convert 8 consecutive bytes into nibbles (encoded in 32 bit integer)</a>"}], "answers": [{"comments": [{"owner": {"reputation": 51282, "user_id": 39036, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/aHIw5.jpg?s=128&g=1", "display_name": "samoz", "link": "https://stackoverflow.com/users/39036/samoz"}, "edited": false, "score": 0, "creation_date": 1434331231, "post_id": 30836163, "comment_id": 49716889, "body": "Wow so simple, thanks for your help! This is exactly why I post on SO when learning a new language. &quot;You&#39;re doing something no one ever does, stop that.&quot; Works like a charm, thanks @ChrisMorgan!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 9, "last_activity_date": 1434330679, "creation_date": 1434330679, "answer_id": 30836163, "question_id": 30835978, "link": "https://stackoverflow.com/questions/30835978/what-is-the-most-appropriate-way-to-convert-nibbles-to-a-u64/30836163#30836163", "title": "What is the most appropriate way to convert nibbles to a u64?", "body": "<p>Your issue is a simple one: <code>for i in values</code>, where <code>values</code> is of type <code>&amp;Vec&lt;u8&gt;</code>, iterates over <em>references</em> to each value; that is, <code>i</code> is of type <code>&amp;u8</code>. Oring and adding and such with references doesn\u2019t make sense; you need to dereference it, getting the underlying <code>u8</code>. The easiest way of doing this is writing it into the <code>for</code> loop\u2019s pattern (for the <code>for</code> grammar is <code>for PATTERN in EXPRESSION</code>, refer to the documentation on patterns for more explanation if you need it; for this simple case, <code>for &amp;x in y { \u2026 }</code> basically means <code>for x in y { let x = *x; \u2026 }</code>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn convert_nibbles_to_u64(values: &amp;[u8]) -&gt; u64 {\n    let mut out = 0;\n    for &amp;i in values {\n        out = out &lt;&lt; 4 | i as u64;\n    }\n    out\n}\n</code></pre>\n\n<p>The whole form of a loop can be collapsed using <code>Iterator.fold</code>, too, like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn convert_nibbles_to_u64(values: &amp;[u8]) -&gt; u64 {\n    values.iter().fold(0, |x, &amp;i| x &lt;&lt; 4 | i as u64)\n}\n</code></pre>\n"}], "owner": {"reputation": 51282, "user_id": 39036, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/aHIw5.jpg?s=128&g=1", "display_name": "samoz", "link": "https://stackoverflow.com/users/39036/samoz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1251, "favorite_count": 0, "accepted_answer_id": 30836163, "answer_count": 1, "score": 7, "last_activity_date": 1434335072, "creation_date": 1434328587, "last_edit_date": 1434335072, "question_id": 30835978, "link": "https://stackoverflow.com/questions/30835978/what-is-the-most-appropriate-way-to-convert-nibbles-to-a-u64", "title": "What is the most appropriate way to convert nibbles to a u64?", "body": "<p>I am trying to learn Rust and decided to write a program that converts a hex string into a u64. </p>\n\n<p>Currently, I have parsed the string into a vector of u8 values, each representing four bits (or \"nibble\"). I wrote the following code to take a <code>Vec&lt;u8&gt;</code> and return a corresponding <code>u64</code>. It works (as far as my testing shows), but I am not sure if it is the \"appropriate\" way in Rust to go about doing this.</p>\n\n<pre><code>fn convert_nibbles_to_u64(values: &amp;Vec&lt;u8&gt;) -&gt; u64 {\n    // We need to turn this buffer into a u64 now\n    let mut temp:u64 = 0;\n    for i in values {\n        temp = temp &lt;&lt; 4;\n\n        unsafe {\n            // We need to unsafely convert a u8 to a u64. Note that\n            // the host endian-ness will matter here.\n            use std::mem;\n            let i_64_buffer = [0u8,0u8,0u8,0u8,0u8,0u8,0u8,i.clone()];\n            let i_64 = mem::transmute::&lt;[u8; 8], u64&gt;(i_64_buffer);\n            let i_64_be = u64::from_be(i_64);\n            temp = temp | i_64_be;           \n        }\n    }\n    return temp;\n}\n</code></pre>\n\n<p>I suppose the main issue I don't know how else to cast a <code>u8</code> to a <code>u64</code> value. Could you comment on ways to improve or write the code in a more idiomatic, Rust-like style?</p>\n\n<p>EDIT:\nI have tried the following (unsuccessful) alternatives to the unsafe block:</p>\n\n<p>Or'ing with <code>i</code> as a <code>u64</code>:</p>\n\n<pre><code>temp = temp | i as u64; \n------\nCompiler error:\nmain.rs:115:23: 115:31 error: non-scalar cast: `&amp;u8` as `u64`\nmain.rs:115         temp = temp | i as u64;\n</code></pre>\n\n<p>Or'ing with <code>i</code> directly:</p>\n\n<pre><code>temp = temp | i;\n------\nCompiler error:\nmain.rs:115:16: 115:24 error: the trait `core::ops::BitOr&lt;&amp;u8&gt;` is not implemented for the type `u64` [E0277]\nmain.rs:115         temp = temp | i;\n</code></pre>\n"}, {"tags": ["file", "io", "rust"], "answers": [{"comments": [{"owner": {"reputation": 476, "user_id": 5005104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed2d86c4fef2627c928a943548310cb?s=128&d=identicon&r=PG&f=1", "display_name": "Tyler Berry", "link": "https://stackoverflow.com/users/5005104/tyler-berry"}, "edited": false, "score": 0, "creation_date": 1434316040, "post_id": 30834477, "comment_id": 49713624, "body": "I just tried this actually, and took the reference to the returned String.  It works, but is there any other solution that would return an &amp;str?"}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 476, "user_id": 5005104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed2d86c4fef2627c928a943548310cb?s=128&d=identicon&r=PG&f=1", "display_name": "Tyler Berry", "link": "https://stackoverflow.com/users/5005104/tyler-berry"}, "edited": false, "score": 0, "creation_date": 1434316259, "post_id": 30834477, "comment_id": 49713686, "body": "Well.. you can create the string outside the function and pass it as parameter, so you will have no lifetime problems, but you cannot return a reference to something who live only in the function outside of it. fn read_shader_code(string_path: &amp;str, &amp;mut String buffer) -&gt; &amp;str {} Use buffer for the line buffer instead of s."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 2, "last_activity_date": 1434315535, "creation_date": 1434315535, "answer_id": 30834477, "question_id": 30834392, "link": "https://stackoverflow.com/questions/30834392/rust-lifetime-of-string-from-file/30834477#30834477", "title": "Rust: Lifetime of String from file", "body": "<p>The string bound to \"s\" will be deallocated once the function ends (\"s\" goes out of scope), so you cannot return a reference to its contents outside the function.\nThe best way is to return the string itself:</p>\n\n<pre><code>fn read_shader_code(string_path: &amp;str) -&gt; String {\n    let path = Path::new(string_path);\n    let display = path.display();\n\n    let mut file = match File::open(&amp;path) {\n        Err(why) =&gt; panic!(\"Couldn't open {}: {}\", display, Error::description(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n\n    let mut s = String::new();\n    match file.read_to_string(&amp;mut s) {\n        Err(why) =&gt; panic!(\"couldn't read {}: {}\", display, Error::description(&amp;why)),\n        Ok(_) =&gt; s,\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 476, "user_id": 5005104, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed2d86c4fef2627c928a943548310cb?s=128&d=identicon&r=PG&f=1", "display_name": "Tyler Berry", "link": "https://stackoverflow.com/users/5005104/tyler-berry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 228, "favorite_count": 0, "closed_date": 1434316073, "accepted_answer_id": 30834477, "answer_count": 1, "score": 0, "last_activity_date": 1434315535, "creation_date": 1434314967, "question_id": 30834392, "link": "https://stackoverflow.com/questions/30834392/rust-lifetime-of-string-from-file", "closed_reason": "Duplicate", "title": "Rust: Lifetime of String from file", "body": "<p>I'm trying to read in some external GLSL code into Rust.  The reading works properly, but I run into a lifetime issue in the final expression (in the Ok(_) branch)</p>\n\n<p>error: <code>s</code> does not live long enough</p>\n\n<pre><code>fn read_shader_code(string_path: &amp;str) -&gt; &amp;str {\n    let path = Path::new(string_path);\n    let display = path.display();\n\n    let mut file = match File::open(&amp;path) {\n        Err(why) =&gt; panic!(\"Couldn't open {}: {}\", display, Error::description(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n\n    let mut s = String::new();\n    match file.read_to_string(&amp;mut s) {\n        Err(why) =&gt; panic!(\"couldn't read {}: {}\", display, Error::description(&amp;why)),\n        Ok(_) =&gt; &amp;s,\n    }\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434354221, "post_id": 30833497, "comment_id": 49723562, "body": "It is unclear from the description: do you need <code>buf</code> for anything else afterwards? Or can it be modified (after <code>read_to_end</code>)?"}, {"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434363519, "post_id": 30833497, "comment_id": 49728833, "body": "Once I have <code>clean_buf</code>, no I don&#39;t need it any further in this example"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1434314064, "last_edit_date": 1495535197, "creation_date": 1434314064, "answer_id": 30834261, "question_id": 30833497, "link": "https://stackoverflow.com/questions/30833497/return-a-moving-window-of-elements-resulting-from-an-iterator-of-vecu8/30834261#30834261", "title": "Return a moving window of elements resulting from an iterator of Vec&lt;u8&gt;", "body": "<p>I don't see how this would be possible. You say:</p>\n\n<blockquote>\n  <p>elements from a vector that I've first filtered </p>\n</blockquote>\n\n<p>But once you've <code>filter</code>ed a vector, you don't have a vector anymore - you just have an <code>Iterator</code>. <code>Iterator</code>s only have the concept of the next item.</p>\n\n<p>To be most efficient, you'd have to create a small buffer of the size of your window. Unfortunately, you <a href=\"https://stackoverflow.com/q/25702909/155423\">cannot write an iterator that returns a reference to itself</a>, so you'd have to pass in a buffer to a hypothetical <code>Iterator::windows</code> method. In that case, you'd run into the problem of having a mutable reference (so you could populate the buffer) and an immutable reference (so you could return a slice), which won't fly.</p>\n\n<p>The only close solution I can think of is to have multiple iterators over the same vector that you then <code>zip</code> together:</p>\n\n<pre><code>fn main() {\n    let nums: Vec&lt;u8&gt; = (1..100).collect();\n\n    fn is_even(x: &amp;&amp;u8) -&gt; bool { **x % 2 == 0 }\n\n    let a = nums.iter().filter(is_even);\n    let b = nums.iter().filter(is_even).skip(1);\n    let c = nums.iter().filter(is_even).skip(2);\n\n    for z in a.zip(b).zip(c).map(|((a, b), c)| (a,b,c)) {\n        println!(\"{:?}\", z);\n    }  \n}\n</code></pre>\n\n<p>This has the distinct downside of needing to apply the filtering condition multiple times, and the ugliness of the nested zips (you can fix the latter with use of <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/macro.izip!.html\" rel=\"nofollow noreferrer\">itertools</a> though).</p>\n\n<p>Personally, I'd probably just <code>collect</code> into a <code>Vec</code>, as you have already done.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434410315, "post_id": 30836336, "comment_id": 49756248, "body": "Ah, I hadn&#39;t thought the OP would allow modifying the buffer in place! Nice lateral thinking :-)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1434332426, "creation_date": 1434332426, "answer_id": 30836336, "question_id": 30833497, "link": "https://stackoverflow.com/questions/30833497/return-a-moving-window-of-elements-resulting-from-an-iterator-of-vecu8/30836336#30836336", "title": "Return a moving window of elements resulting from an iterator of Vec&lt;u8&gt;", "body": "<p>You can use <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.retain\" rel=\"nofollow\"><code>Vec::retain</code></a> instead of <code>filter</code> for this, which allows you to keep your Vec:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut buf = vec![\n        8, 9, 10, 11, 12, 13, 14,\n        8, 9, 10, 11, 12, 13, 14,\n        8, 9, 10, 11, 12, 13, 14,\n    ];\n    println!(\"{:?}\", buf);\n    buf.retain(|&amp;x| x != 10 &amp;&amp; x != 13);\n    println!(\"{:?}\", buf);\n    for iter in buf.windows(13) {\n        print!(\"{}, \", iter.len());\n    }\n    println!(\"\");\n}\n</code></pre>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 694, "favorite_count": 0, "accepted_answer_id": 30836336, "answer_count": 2, "score": 4, "last_activity_date": 1434332426, "creation_date": 1434309482, "last_edit_date": 1434310714, "question_id": 30833497, "link": "https://stackoverflow.com/questions/30833497/return-a-moving-window-of-elements-resulting-from-an-iterator-of-vecu8", "title": "Return a moving window of elements resulting from an iterator of Vec&lt;u8&gt;", "body": "<p>I'm trying to figure out how to return a window of elements from a vector that I've first filtered without copying it to a new vector.</p>\n\n<p>So this is the naive approach which works fine but I <strong>think</strong> will end up allocating a new vector from line 5 which I don't really want to do.</p>\n\n<pre><code>let mut buf  = Vec::new();\nfile.read_to_end(&amp;mut buf);\n// Do some filtering of the read file and create a new vector for subsequent processing\nlet iter = buf.iter().filter(|&amp;x| *x != 10 &amp;&amp; *x != 13);\nlet clean_buf = Vec::from_iter(iter);\nfor iter in clean_buf.windows(13) {\n    print!(\"{}\",iter.len());\n}\n</code></pre>\n\n<p>Alternative approach where I could use a chain()? to achieve the same thing without copying into a new Vec</p>\n\n<pre><code>for iter in buf.iter().filter(|&amp;x| *x != 10 &amp;&amp; *x != 13) {\n    let window =  ???       \n}\n</code></pre>\n"}, {"tags": ["rust", "interior-mutability"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1434295700, "post_id": 30831037, "comment_id": 49707216, "body": "<code>Rc</code> and <code>Box</code> solve different classes of problems: they are used when the size of an object is unknown or too large to store inline, while <code>Cell</code> and <code>RefCell</code> provide interior mutability, in order to work around inherited mutability."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1434295977, "post_id": 30831037, "comment_id": 49707292, "body": "@FrancisGagn&#233; I&#39;m a little unclear on what &quot;inherited mutability&quot; means or why it is important or a problem. Can you clarify?"}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 11, "last_activity_date": 1518986751, "last_edit_date": 1518986751, "creation_date": 1434299800, "answer_id": 30831874, "question_id": 30831037, "link": "https://stackoverflow.com/questions/30831037/situations-where-cell-or-refcell-is-the-best-choice/30831874#30831874", "title": "Situations where Cell or RefCell is the best choice", "body": "<p>No, <code>Cell</code> and <code>RefCell</code> aren't \"code smells\". Normally, mutability is <em>inherited</em>, that is you can mutate a field or a part of a data structure if and only if you have exclusive access to of the whole data structure, and hence you can opt into mutability at that level with <code>mut</code> (i.e., <code>foo.x</code> <em>inherits</em> its mutability or lack thereof from <code>foo</code>). This is a very powerful pattern and should be used whenever it works well (which is surprisingly often). But it's not expressive enough for all code everywhere.</p>\n\n<p><code>Box</code> and <code>Rc</code> have nothing to do with this. Like almost all other types, they respect inherited mutability: you can mutate the contents of a <code>Box</code> if you have exclusive, mutable access to the <code>Box</code> (because that means you have exclusive access to the contents, too). Conversely, you can never get a <code>&amp;mut</code> to the contents of an <code>Rc</code> because by its nature <code>Rc</code> is shared (i.e. there can be multiple <code>Rc</code>s referring to the same data).</p>\n\n<p>One common case of <code>Cell</code> or <code>RefCell</code> is that you need to share mutable data between several places. Having two <code>&amp;mut</code> references to the same data is normally not allowed (and for good reason!). However, sometimes you <strong>need</strong> it, and the cell types enable doing it safely. </p>\n\n<p>This could be done via the common combination of <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>, which allows the data to stick around for as long as anyone uses it and allows everyone (but only one at a time!) to mutate it. Or it could be as simple as <code>&amp;Cell&lt;i32&gt;</code> (even if the cell is wrapped in a more meaningful type). The latter is also commonly used for <em>internal, private, mutable state</em> like reference counts.</p>\n\n<p>The documentation actually has several examples of where you'd use <code>Cell</code> or <code>RefCell</code>. A good example is actually <code>Rc</code> itself. When creating a new <code>Rc</code>, the reference count must be increased, but the reference count is shared between all <code>Rc</code>s, so, by inherited mutability, this couldn't possibly work. <code>Rc</code> practically <em>has</em> to use a <code>Cell</code>.</p>\n\n<p>A good guideline is to try writing as much code as possible without cell types, but using them when it hurts too much without them. In some cases, there is a good solution without cells, and, with experience, you'll be able to find those when you previously missed them, but there will always be things that just aren't possible without them. </p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 10, "last_activity_date": 1518986203, "last_edit_date": 1518986203, "creation_date": 1434300275, "answer_id": 30831952, "question_id": 30831037, "link": "https://stackoverflow.com/questions/30831037/situations-where-cell-or-refcell-is-the-best-choice/30831952#30831952", "title": "Situations where Cell or RefCell is the best choice", "body": "<p>Suppose you want or need to create some object of the type of your choice and dump it into an <code>Rc</code>.</p>\n\n<pre><code>let x = Rc::new(5i32);\n</code></pre>\n\n<p>Now, you can easily create another <code>Rc</code> that points to the exact same object and therefore memory location:</p>\n\n<pre><code>let y = x.clone();\nlet yval: i32 = *y;\n</code></pre>\n\n<p>Since in Rust you may never have a mutable reference to a memory location to which any other reference exists, these <code>Rc</code> containers can never be modified again.</p>\n\n<p>So, what if you wanted to be able to modify those objects <em>and</em> have multiple <code>Rc</code> pointing to one and the same object?</p>\n\n<p>This is the issue that <code>Cell</code> and <code>RefCell</code> solve. The solution is called \"interior mutability\", and it means that Rust's aliasing rules are enforced at runtime instead of compile-time.</p>\n\n<p>Back to our original example:</p>\n\n<pre><code>let x = Rc::new(RefCell::new(5i32));\nlet y = x.clone();\n</code></pre>\n\n<p>To get a mutable reference to your type, you use <code>borrow_mut</code> on the <code>RefCell</code>.</p>\n\n<pre><code>let yval = x.borrow_mut();\n*yval = 45;\n</code></pre>\n\n<p>In case you already borrowed the value your <code>Rc</code>s point to either mutably or non-mutably, the <code>borrow_mut</code> function will panic, and therefore enforce Rust's aliasing rules.</p>\n\n<p><code>Rc&lt;RefCell&lt;T&gt;&gt;</code> is just one example for <code>RefCell</code>, there are many other legitimate uses. But the documentation is right. If there is another way, use it, because the compiler cannot help you reason about <code>RefCell</code>s.</p>\n"}, {"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 4, "creation_date": 1434320853, "post_id": 30831983, "comment_id": 49714914, "body": "The chapter on mutability was a good thing to revisit for this. The important part to draw from this is that <code>Cell</code> / <code>RefCell</code> allow you to &quot;emulate field-level mutability&quot;. It&#39;s similar to having a struct&#39;s field marked as <code>mut</code>, if that were a possible. Thanks for the detailed answer, examples, and relevant documentation links!"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 37, "last_activity_date": 1525077866, "last_edit_date": 1525077866, "creation_date": 1434300413, "answer_id": 30831983, "question_id": 30831037, "link": "https://stackoverflow.com/questions/30831037/situations-where-cell-or-refcell-is-the-best-choice/30831983#30831983", "title": "Situations where Cell or RefCell is the best choice", "body": "<p>It is not entirely correct to ask when <code>Cell</code> or <code>RefCell</code> should be used over <code>Box</code> and <code>Rc</code> because these types solve different problems. Indeed, more often than not <code>RefCell</code> is used <em>together</em> with <code>Rc</code> in order to provide mutability with shared ownership. So yes, use cases for <code>Cell</code> and <code>RefCell</code> are entirely dependent on the mutability requirements in your code.</p>\n\n<p>Interior and exterior mutability are very nicely explained in the official Rust book, in the <a href=\"https://doc.rust-lang.org/book/first-edition/mutability.html\" rel=\"noreferrer\">designated chapter on mutability</a>. External mutability is very closely tied to the ownership model, and mostly when we say that something is mutable or immutable we mean exactly the external mutability. Another name for external mutability is <em>inherited</em> mutability, which probably explains the concept more clearly: this kind of mutability is defined by the owner of the data and inherited to everything you can reach from the owner. For example, if your variable of a structural type is mutable, so are all fields of the structure in the variable:</p>\n\n<pre><code>struct Point { x: u32, y: u32 }\n\n// the variable is mutable...\nlet mut p = Point { x: 10, y: 20 };\n// ...and so are fields reachable through this variable\np.x = 11;\np.y = 22;\n\nlet q = Point { x: 10, y: 20 };\nq.x = 33;  // compilation error\n</code></pre>\n\n<p>Inherited mutability also defines which kinds of references you can get out of the value:</p>\n\n<pre><code>{\n    let px: &amp;u32 = &amp;p.x;  // okay\n}\n{\n    let py: &amp;mut u32 = &amp;mut p.x;  // okay, because p is mut\n}\n{\n    let qx: &amp;u32 = &amp;q.x;  // okay\n}\n{\n    let qy: &amp;mut u32 = &amp;mut q.y;  // compilation error since q is not mut\n}\n</code></pre>\n\n<p>Sometimes, however, inherited mutability is not enough. The canonical example is reference-counted pointer, called <code>Rc</code> in Rust. The following code is entirely valid:</p>\n\n<pre><code>{\n    let x1: Rc&lt;u32&gt; = Rc::new(1);\n    let x2: Rc&lt;u32&gt; = x1.clone();  // create another reference to the same data\n    let x3: Rc&lt;u32&gt; = x2.clone();  // even another\n}  // here all references are destroyed and the memory they were pointing at is deallocated\n</code></pre>\n\n<p>At the first glance it is not clear how mutability is related to this, but recall that reference-counted pointers are called so because they contain an internal reference counter which is modified when a reference is duplicated (<code>clone()</code> in Rust) and destroyed (goes out of scope in <code>Rust</code>). Hence <code>Rc</code> <em>has</em> to modify itself even though it is stored inside a non-<code>mut</code> variable.</p>\n\n<p>This is achieved via internal mutability. There are special types in the standard library, the most basic of them being <a href=\"http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"noreferrer\"><code>UnsafeCell</code></a>, which allow one to work around the rules of external mutability and mutate something even if it is stored (transitively) in a non-<code>mut</code> variable.</p>\n\n<p>Another way to say that something has internal mutability is that this something can be modified through a <code>&amp;</code>-reference - that is, if you have a value of type <code>&amp;T</code> and you can modify the state of <code>T</code> which it points at, then <code>T</code> has internal mutability.</p>\n\n<p>For example, <code>Cell</code> can contain <code>Copy</code> data and it can be mutated even if it is stored in non-<code>mut</code> location:</p>\n\n<pre><code>let c: Cell&lt;u32&gt; = Cell::new(1);\nc.set(2);\nassert_eq!(c.get(), 2);\n</code></pre>\n\n<p><code>RefCell</code> can contain non-<code>Copy</code> data and it can give you <code>&amp;mut</code> pointers to its contained value, and absence of aliasing is checked at runtime. This is all explained in detail on their documentation pages.</p>\n\n<hr>\n\n<p>As it turned out, in  overwhelming number of situations you can easily go with external mutability only. Most of existing high-level code in Rust is written that way. Sometimes, however, internal mutability is unavoidable or makes the code much clearer. One example, <code>Rc</code> implementation, is already described above. Another one is when you need shared mutable ownership (that is, you need to access and modify the same value from different parts of your code) - this is usually achieved via <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>, because it can't be done with references alone. Even another example is <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, <code>Mutex</code> being another type for internal mutability which is also safe to use across threads.</p>\n\n<p>So, as you can see, <code>Cell</code> and <code>RefCell</code> are not replacements for <code>Rc</code> or <code>Box</code>; they solve the task of providing you mutability somewhere where it is not allowed by default. You can write your code without using them at all; and if you get into a situation when you would need them, you will know it.</p>\n\n<p><code>Cell</code>s and <code>RefCell</code>s are not code smell; the only reason whey they are described as \"last resort\" is that they move the task of checking mutability and aliasing rules from the compiler to the runtime code, as in case with <code>RefCell</code>: you can't have two <code>&amp;mut</code>s pointing to the same data at the same time, this is statically enforced by the compiler, but with <code>RefCell</code>s you can ask the same <code>RefCell</code> to give you as much <code>&amp;mut</code>s as you like - except that if you do it more than once it will panic at you, enforcing aliasing rules at runtime. Panics are arguably worse than compilation errors because you can only find errors causing them at runtime rather than at compilation time. Sometimes, however, the static analyzer in the compiler is too restrictive, and you indeed do need to \"work around\" it.</p>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7931, "favorite_count": 4, "accepted_answer_id": 30831983, "answer_count": 3, "score": 26, "last_activity_date": 1545155455, "creation_date": 1434294973, "last_edit_date": 1545155455, "question_id": 30831037, "link": "https://stackoverflow.com/questions/30831037/situations-where-cell-or-refcell-is-the-best-choice", "title": "Situations where Cell or RefCell is the best choice", "body": "<p>When would you be required to use <a href=\"http://doc.rust-lang.org/std/cell/index.html\" rel=\"noreferrer\">Cell or RefCell</a>? It seems like there are many other type choices that would be suitable in place of these, and the documentation warns that using <code>RefCell</code> is a bit of a \"last resort\".</p>\n\n<p>Is using these types a \"<a href=\"https://en.wikipedia.org/wiki/Code_smell\" rel=\"noreferrer\">code smell</a>\"? Can anyone show an example where using these types makes more sense than using another type, such as <code>Rc</code> or even <code>Box</code>?</p>\n"}, {"tags": ["stack", "rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1434268878, "post_id": 30826757, "comment_id": 49699927, "body": "When a function has many local variables, often they&#39;ll be allocated all at once when the function begins. Therefore, during the call to <code>make_local_int_ptr</code>, <code>b</code> is already allocated (even if it&#39;s not usable yet), so there&#39;s no chance that <code>a</code> and <code>b</code> will overlap."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 5, "creation_date": 1434269256, "post_id": 30826757, "comment_id": 49699991, "body": "<a href=\"http://stackoverflow.com/a/6445794/395760\">You rent a hotel room. You put a book in the top drawer. You check out the next morning but &quot;forget&quot; to give back your key. A week later, you return to the hotel, do not check in, sneak into your old room with your stolen key, and look into the drawer. Your book is still there. Astonishing!</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434353899, "post_id": 30826757, "comment_id": 49723413, "body": "@delnan: Even after all this time, I just love this explanation :)"}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1434571153, "post_id": 30826757, "comment_id": 49841429, "body": "I also mentioned <code>Go</code> in my post, it is valid to return an address of a local variable in <code>Go</code>: <a href=\"https://scvalex.net/posts/29/\" rel=\"nofollow noreferrer\">scvalex.net/posts/29</a>"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1434266325, "creation_date": 1434266325, "answer_id": 30826893, "question_id": 30826757, "link": "https://stackoverflow.com/questions/30826757/stack-behavior-when-returning-a-pointer-to-local-variable/30826893#30826893", "title": "Stack behavior when returning a pointer to local variable", "body": "<p>You shouldn't be returning a pointer to a local stack variable at all.  Doing so is <em>undefined behaviour</em>, and the compiler is completely free to do whatever it wants.</p>\n\n<p>When you say <code>unsafe</code>, you are promising the compiler that you will manually uphold all of its expected invariants... and then immediately breaking that promise.</p>\n\n<p>To put it bluntly: you're violating memory safety, all bets are off.  The solution is to <em>not</em> do that.</p>\n\n<hr>\n\n<p>To explain why you <em>might</em> be seeing this behaviour, however (again, this is undefined behaviour, <em>nothing is guaranteed</em>): the stack isn't \"cleared\" in the sense that its overwritten with zeroes; it's just not valid to read from it any longer.</p>\n\n<p>Also, because the call to <code>make_local_int_ptr</code> is finished, the compiler has no reason to preserve its stack space, so it can re-use the space for anything.  The <code>0</code> is <em>possibly</em> due to the call to <code>println!</code>?</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 272, "favorite_count": 1, "accepted_answer_id": 30826893, "answer_count": 1, "score": 3, "last_activity_date": 1581471075, "creation_date": 1434265243, "last_edit_date": 1581471075, "question_id": 30826757, "link": "https://stackoverflow.com/questions/30826757/stack-behavior-when-returning-a-pointer-to-local-variable", "title": "Stack behavior when returning a pointer to local variable", "body": "<p>I have a simple example where the behaviour of Rust does not match my mental image, so I am wondering what am I missing:</p>\n\n<pre><code>fn make_local_int_ptr() -&gt; *const i32 {\n    let a = 3;\n    &amp;a\n}\n\nfn main() {\n    let my_ptr = make_local_int_ptr();\n    println!(\"{}\", unsafe { *my_ptr } );\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>3\n</code></pre>\n\n<p>This is not what I would expect. Using the notation given in <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/the-stack-and-the-heap.html\" rel=\"nofollow noreferrer\">The Stack and the Heap</a>, I would expect the stack frame to look like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Address | Name | Value\n-----------------------\n   0    |   a  |   3  \n</code></pre>\n\n<p>inside <code>make_local_int_ptr()</code>, but after this line,</p>\n\n<pre><code>let my_ptr = make_local_int_ptr();\n</code></pre>\n\n<p>Since <code>a</code> goes out of scope, I would expect the stack to get cleared, but it apparently does not.</p>\n\n<p>Furthermore, if I define another variable between creating <code>my_ptr</code> and printing the dereferenced value of it:</p>\n\n<pre><code>fn main() {\n    let my_ptr = make_local_int_ptr();\n    let b = 6;\n    println!(\"{}\", b); // We have to use b otherwise Rust\n                       // compiler ignores it (I think)\n    println!(\"{}\", unsafe { *my_ptr } );\n}\n</code></pre>\n\n<p>My output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>6\n0\n</code></pre>\n\n<p>Which again is not what I expected, I was thinking:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Address | Name | Value\n-----------------------\n   0    |   b  |   6\n</code></pre>\n\n<p>In which case my output would be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>6\n6 \n</code></pre>\n\n<p>or even (in C++ and Go I was getting this result):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Address | Name | Value\n-----------------------\n   1    |   b  |   6  \n   0    |   a  |   3\n</code></pre>\n\n<p>In which case my output would be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>6\n3\n</code></pre>\n\n<p>Why am I getting the output that I am getting? Why is returning a pointer to a local variable even allowed? The variable goes out of scope, and the value where the pointer is pointing to becomes unpredictable.  </p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1434264982, "post_id": 30826513, "comment_id": 49699127, "body": "I don&#39;t think this question should be down-voted: the documentation on this is <i>not</i> in an obvious place.  I pretty much checked every other page of documentation on <code>crates.io</code> because I looked at the correct one just to be exhaustive."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 21, "last_activity_date": 1529328998, "last_edit_date": 1529328998, "creation_date": 1434264926, "answer_id": 30826722, "question_id": 30826513, "link": "https://stackoverflow.com/questions/30826513/what-is-the-syntax-for-specifying-dependency-versions-in-cargo/30826722#30826722", "title": "What is the syntax for specifying dependency versions in Cargo?", "body": "<p>See the <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\" rel=\"nofollow noreferrer\"><code>crates.io</code> documentation page on \"Specifying Dependencies\"</a>.  To summarise:</p>\n\n<ul>\n<li><p>Nothing or a caret (<code>^</code>) means \"at least this version, until the next incompatible version\".</p></li>\n<li><p>A tilde (<code>~</code>) means \"at least this version, until (but excluding) the next minor/major release\".  That is, <code>~1.2.3</code> will accept <code>1.2.<em>X</em></code> where <em><code>X</code></em> is at least 3, <code>~1.2</code> will accept <code>1.2.*</code>, and <code>~1</code> will accept <code>1.*.*</code>.</p></li>\n<li><p>A wildcard (<code>*</code>) means \"anything that looks like this\".  That is, <code>1.2.*</code> will accept <code>1.2.<em>anything</em></code> (<code>1.2.0</code>, <code>1.2.7-beta</code>, <code>1.2.93-dev.foo</code>, etc. but not <code>1.3.0</code>).</p></li>\n<li><p>Inequalities (<code>&gt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>=</code>) mean the obvious: the version Cargo uses must satisfy the given inequality.</p></li>\n</ul>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1470, "favorite_count": 3, "accepted_answer_id": 30826722, "answer_count": 1, "score": 19, "last_activity_date": 1529329253, "creation_date": 1434262730, "last_edit_date": 1529329253, "question_id": 30826513, "link": "https://stackoverflow.com/questions/30826513/what-is-the-syntax-for-specifying-dependency-versions-in-cargo", "title": "What is the syntax for specifying dependency versions in Cargo?", "body": "<p>So far I have seen three...</p>\n\n<pre><code>[dependencies]\ncrate = \"1.0.0\"  # I think this is an exact version match\ncrate = \"^1.0.0\" # I think this means \"use that latest 1.x.x\"\ncrate = \"*\"      # I think this means \"use the latest\"\n</code></pre>\n\n<p>I'd love to know for certain how to use the dependency list. It would be nice to have an authoritative source that documents the different syntaxes for dependencies.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 5909, "user_id": 500207, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/DsvTT.jpg?s=128&g=1", "display_name": "Ahmed Fasih", "link": "https://stackoverflow.com/users/500207/ahmed-fasih"}, "edited": false, "score": 0, "creation_date": 1482161452, "post_id": 30826654, "comment_id": 69650661, "body": "So. Where <i>do</i> you put them in Cargo.toml?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 5909, "user_id": 500207, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/DsvTT.jpg?s=128&g=1", "display_name": "Ahmed Fasih", "link": "https://stackoverflow.com/users/500207/ahmed-fasih"}, "edited": false, "score": 1, "creation_date": 1482188267, "post_id": 30826654, "comment_id": 69664251, "body": "@AhmedFasih &quot;Is there a place to list them in <code>Cargo.toml</code>?&quot;  &quot;No.&quot;"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1434264303, "creation_date": 1434264303, "answer_id": 30826654, "question_id": 30826496, "link": "https://stackoverflow.com/questions/30826496/global-feature-gates-in-cargo/30826654#30826654", "title": "Global feature gates in Cargo", "body": "<p>No, though you don't add feature gates to every source file; they are <em>crate attributes</em>.  That is, you set them on the crate, not on every module.</p>\n"}, {"comments": [{"owner": {"reputation": 2754, "user_id": 1621232, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/4ca2ea1416fa3dc15d1037e6502ac4da?s=128&d=identicon&r=PG", "display_name": "Nicolas Marshall", "link": "https://stackoverflow.com/users/1621232/nicolas-marshall"}, "edited": false, "score": 1, "creation_date": 1585826065, "post_id": 60990240, "comment_id": 107902028, "body": "question was old but the answer didn&#39;t suggest what to do instead."}], "tags": [], "owner": {"reputation": 2754, "user_id": 1621232, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/4ca2ea1416fa3dc15d1037e6502ac4da?s=128&d=identicon&r=PG", "display_name": "Nicolas Marshall", "link": "https://stackoverflow.com/users/1621232/nicolas-marshall"}, "is_accepted": false, "score": 1, "last_activity_date": 1585826005, "creation_date": 1585826005, "answer_id": 60990240, "question_id": 30826496, "link": "https://stackoverflow.com/questions/30826496/global-feature-gates-in-cargo/60990240#60990240", "title": "Global feature gates in Cargo", "body": "<p>There are two types of attributes:</p>\n\n<ul>\n<li>file attributes (starting with <code>#</code>). They apply to the whole file only.</li>\n<li>crate attributes (staring with <code>#!</code>). They apply to the whole crate at once.</li>\n</ul>\n\n<p>What you want (<code>#![feature(non_ascii_idents)]</code>) is a crate attribute, so you need to place it once at the top of the crate's <em>main file</em>. That main file is usually:</p>\n\n<ul>\n<li><code>src/main.rs</code> for binaries</li>\n<li><code>src/lib.rs</code> for libraries</li>\n</ul>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 496, "favorite_count": 0, "accepted_answer_id": 30826654, "answer_count": 2, "score": 7, "last_activity_date": 1585826005, "creation_date": 1434262589, "last_edit_date": 1434327000, "question_id": 30826496, "link": "https://stackoverflow.com/questions/30826496/global-feature-gates-in-cargo", "title": "Global feature gates in Cargo", "body": "<p>I would like to enable a feature gate for my entire Cargo project. For example, I would like <code>#![feature(non_ascii_idents)]</code> added to every source file. Is there a place to list them in <code>Cargo.toml</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1434242095, "post_id": 30824812, "comment_id": 49695719, "body": "Perfect! The bit about the error&#39;s format being <code>&amp;&#39;static str</code> was just what I needed. Thanks! I&#39;m a little surprised that more things aren&#39;t stable now that Rust is 1.0, but also glad to have them not out in the wild before they&#39;re ready."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 5, "creation_date": 1434264397, "post_id": 30824812, "comment_id": 49699001, "body": "@jocull &quot;1.0&quot; doesn&#39;t mean &quot;we&#39;re finished&quot;, it just means &quot;ok, we&#39;re going to stop breaking everything every few days now.&quot;  If you expect the standard library to be &quot;feature complete&quot; because Rust is at 1.0, you&#39;re going to be rather bitterly disappointed. :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1434353492, "post_id": 30824812, "comment_id": 49723188, "body": "@DK.: I would rather say &quot;If you expect Rust to stop evolving now that it is 1.0, you&#39;re going to be pleasantly surprised&quot; :)"}, {"owner": {"reputation": 25982, "user_id": 305973, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/cd49db0b676767ea4358b1047c4cddd2?s=128&d=identicon&r=PG", "display_name": "robinst", "link": "https://stackoverflow.com/users/305973/robinst"}, "edited": false, "score": 1, "creation_date": 1520485448, "post_id": 30824812, "comment_id": 85336833, "body": "Note that you probably also want to check for <code>e.downcast_ref::&lt;String&gt;()</code> if the panic can also be a non-static error message."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 17, "last_activity_date": 1434240680, "creation_date": 1434240680, "answer_id": 30824812, "question_id": 30824258, "link": "https://stackoverflow.com/questions/30824258/recovering-from-panic-in-another-thread/30824812#30824812", "title": "Recovering from `panic!` in another thread", "body": "<p>Putting aside \"you should be using <code>Result</code> where possible,\" yes, this is basically how you catch a panic in Rust.  Keep in mind that \"recover\" is perhaps not the best way of phrasing this in Rust.  You don't really recover from panics in Rust, you <em>isolate</em> them, then <em>detect</em> them.  There is no <code>On Error Resume Next</code> :P.</p>\n\n<p>That said, there are two things to add to your example.  First is how to get at the panic message.  The key observation is that <code>Any</code>, in order to be used, must be <em>explicitly</em> downcast to the exact, concrete type it contains.  In this case, since the panic message is a <code>&amp;'static str</code>, you need to downcast to that.</p>\n\n<p>The second thing is that there is a new API in nightly called <code>catch_panic</code> that lets you isolate a panic <em>without</em> having to start a thread.  That said, it comes with the same restrictions as spawning a new thread: you cannot pass a non-<code>'static</code> reference across the isolation boundary.  Note that this is an <strong>unstable</strong> addition; there are no guarantees about stability yet, and you'll need a nightly compiler to access it.</p>\n\n<p>Here is an example which shows both of those.  You can also <a href=\"http://is.gd/YFbMx9\" rel=\"noreferrer\">run this on the Rust Playpen</a>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(catch_panic)]\n\nuse std::thread;\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let h = thread::spawn(|| {\n        thread::sleep_ms(500);\n        panic!(\"boom\");\n    });\n\n    let r = h.join();\n    handle(r);\n\n    let r = thread::catch_panic(|| {\n        thread::sleep_ms(500);\n        panic!(String::from(\"boom again!\"));\n    });\n\n    handle(r);\n\n    println!(\"Exiting main!\");\n}\n\nfn handle(r: thread::Result&lt;()&gt;) {\n    match r {\n        Ok(r) =&gt; println!(\"All is well! {:?}\", r),\n        Err(e) =&gt; {\n            if let Some(e) = e.downcast_ref::&lt;&amp;'static str&gt;() {\n                println!(\"Got an error: {}\", e);\n            } else {\n                println!(\"Got an unknown error: {:?}\", e);\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5688, "favorite_count": 2, "accepted_answer_id": 30824812, "answer_count": 1, "score": 20, "last_activity_date": 1434240680, "creation_date": 1434235200, "question_id": 30824258, "link": "https://stackoverflow.com/questions/30824258/recovering-from-panic-in-another-thread", "title": "Recovering from `panic!` in another thread", "body": "<p>I know that in Rust there is no try/catch, and you can't throw a rolling save from the thread that is currently panicking.</p>\n\n<p>I know you <strong><em>should not</em></strong> create and handle errors like this. This is just for example's sake.</p>\n\n<p>However, I am wondering what the best way to recover from a panic is. This is what I have now:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let h = thread::spawn(|| {\n        thread::sleep_ms(1000);\n        panic!(\"boom\");\n    });\n\n    let r = h.join();\n    match r {\n        Ok(r) =&gt; println!(\"All is well! {:?}\", r),\n        Err(e) =&gt; println!(\"Got an error! {:?}\", e)\n    }\n\n    println!(\"Exiting main!\");\n}\n</code></pre>\n\n<p>Is there a better way to handle errors from other threads? Is there a way to capture the message of the panic? This seems to only tell me that the error is of type <code>Any</code>. Thanks!</p>\n"}, {"tags": ["rust", "object-lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 15587, "user_id": 263998, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/f39c51ab7728df9d23cdd3e0c72495e0?s=128&d=identicon&r=PG", "display_name": "cdunn2001", "link": "https://stackoverflow.com/users/263998/cdunn2001"}, "edited": false, "score": 7, "creation_date": 1467665887, "post_id": 30823880, "comment_id": 63809760, "body": "Both the question and the accepted answer here are more clear than in the &quot;duplicate&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 5, "creation_date": 1434237384, "post_id": 30824188, "comment_id": 49694794, "body": "The raw pointers option falls apart as soon as you move the <code>Obj</code>. In your code sample, that&#39;s as soon as you return the <code>Obj</code> from <code>new</code>. With optimizations, <code>new</code> might actually initialize an <code>Obj</code> that was allocated by the caller, which would give you the illusion that it works, but I haven&#39;t tested this. You&#39;d have to box the <code>Obj</code> to give it a fixed address, but Rust wouldn&#39;t prevent you from moving the <code>Obj</code> out of the box."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 11, "last_activity_date": 1434239156, "last_edit_date": 1434239156, "creation_date": 1434234558, "answer_id": 30824188, "question_id": 30823880, "link": "https://stackoverflow.com/questions/30823880/struct-that-owns-some-data-and-a-reference-to-the-data/30824188#30824188", "title": "Struct that owns some data and a reference to the data", "body": "<p>A raw design of the structs based on your requirements might look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct AnotherObj&lt;'a&gt; {\n    original: &amp;'a Vec&lt;i8&gt;, // Let's agree on Vec&lt;i8&gt; as your \"data\" type.\n}\n\nstruct Obj&lt;'a&gt; {\n    original: Vec&lt;i8&gt;,         // &lt;-------------------+\n    processed: AnotherObj&lt;'a&gt;, // should point here --+\n}\n</code></pre>\n\n<p>However it's very tricky to get working (personally, I wasn't able to) because you want the <code>'a</code> in <code>AnotherObj&lt;'a&gt;</code> to be the lifetime of <code>original</code>. However you must supply a lifetime to <code>Obj&lt;'a&gt;</code> and thus you would have to specify <code>Obj&lt;'tbc&gt;</code> where <code>'tbc</code> is the lifetime of the <code>Obj</code> to be created.</p>\n\n<p>I suggest the following alternatives:</p>\n\n<h3>1. Make AnotherObj actually <em>own</em> the original</h3>\n\n<p>Why not? <code>Obj</code> will own <code>AnotherObj</code>, so it can still have access to <code>original</code> as a nested child:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct AnotherObj {\n    original: Vec&lt;i8&gt;,\n}\n\npub struct Obj {\n    processed: AnotherObj,\n}\n\npub fn new() -&gt; Obj {\n    let data = vec![1,2,3];\n\n    Obj {\n        processed: AnotherObj {\n            original: data,\n            // ...\n        }\n    }\n}\n\n// access as obj.processed.original, you can even create a getter `fn original(&amp;self)`\n</code></pre>\n\n<h3>2. Shared pointer design</h3>\n\n<p>Straightforward use of refcounted pointers:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::rc::Rc;\n\npub struct AnotherObj {\n    original: Rc&lt;Vec&lt;i8&gt;&gt;,\n}\n\npub struct Obj {\n    original: Rc&lt;Vec&lt;i8&gt;&gt;,\n    processed: AnotherObj,\n}\n\npub fn new() -&gt; Obj {\n    let data = Rc::new(vec![1,2,3]);\n\n    Obj {\n        original: data.clone(),\n        processed: AnotherObj {\n            original: data.clone(),\n        }\n    }\n}\n</code></pre>\n\n<h3>3. With raw pointers</h3>\n\n<p>Options 1. and 2. will bring you the peace of mind of the safe Rust gods, therefore I don't recommend this third option. I still post it here for completeness. Note: it compiles, but I never tested it at runtime, so it may bite. There's only safe code below but you'll have to go in <code>unsafe</code> land when you want to dereference the raw pointer.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ptr;\n\npub struct AnotherObj {\n    original: *mut Vec&lt;i8&gt;,\n}\n\npub struct Obj {\n    original: Vec&lt;i8&gt;,\n    processed: AnotherObj,\n}\n\npub fn new() -&gt; Obj {\n    let data = vec![1,2,3];\n\n    let mut obj = Obj {\n        original: data,\n        processed: AnotherObj {\n            original: ptr::null_mut(),\n        }\n    };\n    obj.processed.original = &amp;mut obj.original as *mut Vec&lt;i8&gt;;\n\n    obj\n}\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6732, "favorite_count": 2, "closed_date": 1434235253, "accepted_answer_id": 30824188, "answer_count": 1, "score": 12, "last_activity_date": 1434239156, "creation_date": 1434232092, "question_id": 30823880, "link": "https://stackoverflow.com/questions/30823880/struct-that-owns-some-data-and-a-reference-to-the-data", "closed_reason": "Duplicate", "title": "Struct that owns some data and a reference to the data", "body": "<p>Construction of an object allocates data needed for lifetime of that object, but also creates another object that needs to keep references to the data:</p>\n\n<pre><code>pub fn new() -&gt; Obj {\n    let data = compute();\n\n    Obj {\n        original: data,\n        processed: AnotherObj {\n            reference: &amp;data\n        }\n    }\n}\n</code></pre>\n\n<p>Is it possible to express this in Rust's terms?</p>\n\n<p>Here I'd like <code>Obj</code>, <code>AnotherObj</code> and <code>data</code> to have the same lifetime, and of course outlive the <code>new()</code> call.</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1434244782, "post_id": 30823732, "comment_id": 49696126, "body": "I think using <code>Some(x) =&gt; (x, it.next().unwrap_or(&amp;[]))</code> should work fine -- it handles the uneven case (if applicable) by filling in an empty slice."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 3, "last_activity_date": 1521465596, "last_edit_date": 1521465596, "creation_date": 1434231073, "answer_id": 30823732, "question_id": 30823512, "link": "https://stackoverflow.com/questions/30823512/iterate-over-pairs-of-chunks-without-creating-a-temporary-vector/30823732#30823732", "title": "Iterate over pairs of chunks without creating a temporary vector", "body": "<p>Indeed <code>chunk(a).chunk(b)</code> is not possible because <code>chunk()</code> is only available on a slice, whereas the result of <code>chunk()</code> (a <code>Chunk</code>) is not a slice. That's too bad, I don't know what prevents chunk to be implemented on a regular <code>Iterator</code>. (Maybe a lifetime issue?)</p>\n\n<p>A more verbose solution, but still iterator-oriented (i.e., not falling back to an ugly C++-like collecting loop) would be to use the <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/\" rel=\"nofollow noreferrer\">itertools</a> crate, more specifically the method <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.batching\" rel=\"nofollow noreferrer\">batching()</a>. This is the example from the docs, it does almost the same thing as your <code>chunk(2)</code> except it returns a tuple instead of a slice:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\n\nfn main() {\n    // An adaptor that gathers elements up in pairs\n    let pit = (0..4).batching(|it| match it.next() {\n        None =&gt; None,\n        Some(x) =&gt; match it.next() {\n            None =&gt; None,\n            Some(y) =&gt; Some((x, y)),\n        },\n    });\n\n    itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 4, "last_activity_date": 1521465431, "last_edit_date": 1521465431, "creation_date": 1434232211, "answer_id": 30823897, "question_id": 30823512, "link": "https://stackoverflow.com/questions/30823512/iterate-over-pairs-of-chunks-without-creating-a-temporary-vector/30823897#30823897", "title": "Iterate over pairs of chunks without creating a temporary vector", "body": "<p>This is a solution that creates two iterators, one for odd lines and one for even lines. Then combine the two using <code>.zip()</code>, which gives an iterator filled with pairs:</p>\n\n<pre><code>fn main() {\n    let input: Vec&lt;_&gt; = (0..12).collect();\n\n    let it1 = input\n        .chunks(3)\n        .enumerate()\n        .filter_map(|x| if x.0 % 2 == 0 { Some(x.1) } else { None });\n    let it2 = input\n        .chunks(3)\n        .enumerate()\n        .filter_map(|x| if x.0 % 2 != 0 { Some(x.1) } else { None });\n\n    let r: Vec&lt;_&gt; = it1.zip(it2).collect();\n\n    println!(\"{:?}\", r);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": true, "score": 3, "last_activity_date": 1521465525, "last_edit_date": 1521465525, "creation_date": 1434232504, "answer_id": 30823933, "question_id": 30823512, "link": "https://stackoverflow.com/questions/30823512/iterate-over-pairs-of-chunks-without-creating-a-temporary-vector/30823933#30823933", "title": "Iterate over pairs of chunks without creating a temporary vector", "body": "<p>Oh, I've got it! I can split larger chunks:</p>\n\n<pre><code>input\n   .chunks(2 * 100)\n   .map(|pair| pair.split_at(100))\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "is_accepted": false, "score": 5, "last_activity_date": 1521465728, "last_edit_date": 1592644375, "creation_date": 1434234358, "answer_id": 30824171, "question_id": 30823512, "link": "https://stackoverflow.com/questions/30823512/iterate-over-pairs-of-chunks-without-creating-a-temporary-vector/30824171#30824171", "title": "Iterate over pairs of chunks without creating a temporary vector", "body": "<blockquote>\n<p>Oh, I've got it! I can split larger chunks:</p>\n<p><code>input.chunks(2*3).map(|dbl| dbl.split_at(3)).collect();</code></p>\n</blockquote>\n<p>Yes, or you could do this:</p>\n<pre><code>let tmp: Vec&lt;_&gt; = input\n    .chunks(2 * 3)\n    .map(|x| x.chunks(3).collect::&lt;Vec&lt;_&gt;&gt;())\n    .collect();\n</code></pre>\n<p>This outputs exactly the same thing as your example, without the mix of tuples and arrays from your solution:</p>\n<pre class=\"lang-none prettyprint-override\"><code>[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4024, "favorite_count": 0, "accepted_answer_id": 30823933, "answer_count": 4, "score": 4, "last_activity_date": 1521465728, "creation_date": 1434229414, "last_edit_date": 1521465387, "question_id": 30823512, "link": "https://stackoverflow.com/questions/30823512/iterate-over-pairs-of-chunks-without-creating-a-temporary-vector", "title": "Iterate over pairs of chunks without creating a temporary vector", "body": "<p>I'm trying to iterate a vector as pairs of chunks (in my case it's an image represented as a contiguous bitmap and I'd like to have access to pixels from two rows at once). </p>\n\n<p>The problem is that I can't do <code>.chunks(w).chunks(2)</code>, but have to create a temporary vector in between.</p>\n\n<p>Is there a way to do it purely with iterators? (I'm OK if the result is an iterator itself)</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=018f53ec5081bc11893b63b212418394&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre><code>let input: Vec&lt;_&gt; = (0..12).collect();\n\nlet tmp: Vec&lt;_&gt; = input.chunks(3).collect();\nlet result: Vec&lt;_&gt; = tmp.chunks(2).collect();\n\nprintln!(\"{:?}\", result);\n</code></pre>\n\n<blockquote>\n  <p>[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]</p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 8, "last_activity_date": 1434212094, "last_edit_date": 1434212094, "creation_date": 1434211723, "answer_id": 30820751, "question_id": 30820421, "link": "https://stackoverflow.com/questions/30820421/how-to-reverse-after-zip-two-chains/30820751#30820751", "title": "How to reverse after zip two chains", "body": "<p>You're looking for the following impl (spoiler: it doesn't exist):</p>\n\n<pre><code>impl&lt;A, B&gt; ExactSizeIterator for Chain&lt;A, B&gt;\n  where A: ExactSizeIterator, B: ExactSizeIterator { ... }\n</code></pre>\n\n<p>An <code>ExactSizeIterator</code> must implement only one method, <code>len(&amp;self)</code>. So the idea behind an hypothetical implementation would be to sum both lengths so that <code>chain_a_b.len() == a.len() + b.len()</code>.</p>\n\n<p>The <a href=\"https://users.rust-lang.org/t/chain-is-not-exactsizeiterator/1506\">reason it doesn't exist</a> is that Rust cannot guarantee that this addition (<code>usize + usize</code>) will not overflow. Thus it forbids it. It sounds like a little strict, but that's the status quo for now, unfortunately. </p>\n\n<p>Worse: even if this impl actually existed, you would run into the fact that <code>Chars</code> is not an <code>ExactSizeIterator</code>, so it would still not work.</p>\n\n<p>An alternative (probably not the only one) would be to collect the chains into a vector. Bad because of the memory allocation, but if it isn't a perf bottleneck it could be worth the tradeoff.</p>\n"}], "owner": {"reputation": 558, "user_id": 2958002, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/494a7cb97c8ad250fa65ac5126e2faa0?s=128&d=identicon&r=PG&f=1", "display_name": "Changgeng", "link": "https://stackoverflow.com/users/2958002/changgeng"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 335, "favorite_count": 0, "accepted_answer_id": 30820751, "answer_count": 1, "score": 8, "last_activity_date": 1434212094, "creation_date": 1434209698, "last_edit_date": 1434211920, "question_id": 30820421, "link": "https://stackoverflow.com/questions/30820421/how-to-reverse-after-zip-two-chains", "title": "How to reverse after zip two chains", "body": "<p>I have the following code which does not compile.</p>\n\n<pre><code>fn main() {\n  let a =\n    \"123\"\n    .chars()\n    .chain(\"4566\".chars())\n    .zip(\n        \"bbb\"\n        .chars()\n        .chain(\"yyy\".chars()))\n    .rev()\n    .map(|x, y| y)\n    .collect::&lt;String&gt;();\n  println!(\"Hello, world! {}\", a);\n}\n</code></pre>\n\n<p>Got error like following:</p>\n\n<pre><code>src/main.rs:37:10: 37:15 error: the trait `core::iter::ExactSizeIterator` is not implemented for the type `core::iter::Chain&lt;core::str::Chars&lt;'_&gt;, core::str::Chars&lt;'_&gt;&gt;` [E0277]\nsrc/main.rs:37         .rev()\n                        ^~~~~\nsrc/main.rs:37:10: 37:15 error: the trait `core::iter::ExactSizeIterator` is not implemented for the type `core::iter::Chain&lt;core::str::Chars&lt;'_&gt;, core::str::Chars&lt;'_&gt;&gt;` [E0277]\nsrc/main.rs:37         .rev()\n                        ^~~~~\nsrc/main.rs:38:10: 38:23 error: type `core::iter::Rev&lt;core::iter::Zip&lt;core::iter::Chain&lt;core::str::Chars&lt;'_&gt;, core::str::Chars&lt;'_&gt;&gt;, core::iter::Chain&lt;core::str::Chars&lt;'_&gt;, core::str::Chars&lt;'_&gt;&gt;&gt;&gt;` does not implement any method in scope named `map`\nsrc/main.rs:38         .map(|x, y| y)\n</code></pre>\n\n<p>My understanding is <code>rev()</code> method is defined in <code>Iterator</code> as where it implements trait <code>DoubleEndedIterator</code></p>\n\n<pre><code>fn rev(self) -&gt; Rev&lt;Self&gt; where Self: DoubleEndedIterator { ... }\n</code></pre>\n\n<p>Also <code>Zip</code> implements this trait:</p>\n\n<pre><code>impl&lt;A, B&gt; DoubleEndedIterator for Zip&lt;A, B&gt; where B: DoubleEndedIterator + ExactSizeIterator, A: DoubleEndedIterator + ExactSizeIterator\n</code></pre>\n\n<p>So the problem is <code>Chain</code> doesn't implement <code>ExactSizeIterator</code>. But how do I work around this?</p>\n\n<p>I tried to add <code>.take()</code>  for both chains to convert the type to <code>Take</code> which implements <code>ExactSizeIterator</code>, but Take doesn't implement <code>DoubleEndedIterator</code>.</p>\n\n<p>Note this is a simplified example. In reality I cannot reverse both chain first and then do the zip.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1434155821, "post_id": 30812469, "comment_id": 49675725, "body": "Pattern guards are nice too: <code>ch if ch.is_whitespace() =&gt; &#39; &#39;, _ =&gt; &#39;a&#39;</code>"}], "answers": [{"comments": [{"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1434145139, "post_id": 30812544, "comment_id": 49673180, "body": "Why does it have to be within an <code>else</code> rather than after the <code>if</code> statement? I should also say having it just as <code>&#39;a&#39;</code> didn&#39;t work either without it being within the <code>else</code>"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1434145465, "post_id": 30812544, "comment_id": 49673299, "body": "@Aaronepower: Because an if without an else always results in a value of <code>()</code>, but you&#39;re trying to have it evaluate as a <code>char</code>."}], "tags": [], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "is_accepted": true, "score": 10, "last_activity_date": 1530040651, "last_edit_date": 1530040651, "creation_date": 1434145013, "answer_id": 30812544, "question_id": 30812469, "link": "https://stackoverflow.com/questions/30812469/returning-a-value-from-within-an-if-statement-has-a-mismatched-types-error/30812544#30812544", "title": "Returning a value from within an if statement has a &quot;mismatched types&quot; error", "body": "<p>You don't want a return here, you're not trying to return from the  function. Just use the <code>'a'</code> as an expression. You also need the space char as an else branch, not standing on its own.</p>\n\n<pre><code>if !ch.is_whitespace() {\n    'a'\n} else {\n    ' '\n}\n</code></pre>\n\n<h3>Why the <code>else</code> is required</h3>\n\n<p><code>if</code> is an expression, and it <em>has</em> to evaluate to some value. That value needs a definite type; it can't sometimes be a <code>char</code> and sometimes something else. If you were to just do this:</p>\n\n<pre><code>if !ch.is_whitespace() {\n    'a'\n}\n</code></pre>\n\n<p>What would the <code>if</code> expression evaluate to in case the test fails? Instead of just evaluating to some arbitrary <code>char</code> value, the language simply requires an <code>else</code> branch. If you don't want to use the <code>if</code> as an expression, and just use it for its side-effects, then you can leave out the <code>else</code>. In that case, it is still an expression, but its value is <code>()</code> (irrespective of whether the test passed or not), and you need to end it with a statement.</p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5033, "favorite_count": 1, "accepted_answer_id": 30812544, "answer_count": 1, "score": 1, "last_activity_date": 1530040651, "creation_date": 1434144664, "last_edit_date": 1530040585, "question_id": 30812469, "link": "https://stackoverflow.com/questions/30812469/returning-a-value-from-within-an-if-statement-has-a-mismatched-types-error", "title": "Returning a value from within an if statement has a &quot;mismatched types&quot; error", "body": "<p>In the function below, I match the first full character of a <code>&amp;str</code>, and if it is a <code>*</code>, <code>-</code>, or  <code>_</code> and if it is those that character is returned, and with the <code>_</code> arm I want to check if the character is whitespace, and return <code>'a'</code> otherwise.</p>\n\n<pre><code>fn print_character(text: &amp;str) {\n    let character: char = match text.chars().nth(0).unwrap() {\n        ch @ '*' | ch @ '-' | ch @ '_' =&gt; ch,\n        ch @ _ =&gt; {\n            if !ch.is_whitespace() {\n                return 'a';\n            }\n            ' '\n        }\n    };\n\n    println!(\"{}\", character);\n}\n</code></pre>\n\n<p>When I run the code I get the error below:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:24\n  |\n6 |                 return 'a';\n  |                        ^^^ expected (), found char\n  |\n  = note: expected type `()`\n             found type `char`\n</code></pre>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 888, "user_id": 1122242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c94e800354854bafd803f7ff56239e0?s=128&d=identicon&r=PG", "display_name": "moveaway00", "link": "https://stackoverflow.com/users/1122242/moveaway00"}, "edited": false, "score": 5, "creation_date": 1434142298, "post_id": 30811312, "comment_id": 49672030, "body": "You  might also want to look at whether you really want the first <i>grapheme</i>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1434144677, "post_id": 30811312, "comment_id": 49673000, "body": "This gives the <code>n</code>th code unit, but <code>char_at</code> gives the code unit starting at byte <code>n</code>. The latter is more useful because most string operations deal in byte indices. This is equivalent to <code>char_at</code> (and also constant time):<code>text[i..].chars().next().unwrap()</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1434202338, "post_id": 30811312, "comment_id": 49684852, "body": "@delnan: I would argue that actually using <code>char_at</code> is slightly dangerous as the index might be <i>in</i> a code unit."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434202884, "post_id": 30811312, "comment_id": 49685034, "body": "@MatthieuM. Then you get a panic, not corrupted data (both with <code>char_at</code> and the slicing workaround). If you write your code properly Unicode-aware (i.e., using the existing string methods and iterators) that doesn&#39;t happen either. And using code point indices isn&#39;t really workable, since (as I said before) most string operations don&#39;t deal with those. <i>Mixing</i> code point indices and byte indices is more dangerous than either."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1434203646, "post_id": 30811312, "comment_id": 49685236, "body": "@delnan: Yes, code point indices would not work in O(1) anyway. However when someone asks for the n-th character, they might be asking for the n-th codepoint or the n-th grapheme cluster, but it is unlikely they are asking for the n-th byte."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434204011, "post_id": 30811312, "comment_id": 49685323, "body": "@MatthieuM. But nobody ever asks for the n-th character. Well, programmers do, but only while devising an algorithm to solve some other problem that doesn&#39;t ask for the n-th character. All text processing I&#39;ve ever seen can be done with byte indices, though it may require the programmer to think differently."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434205119, "post_id": 30811312, "comment_id": 49685657, "body": "@delnan: I agree, any time I&#39;ve seen some ask for the n-th character it was some school assignment or such &quot;pointless&quot; exercise."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1502591248, "post_id": 30811312, "comment_id": 78271218, "body": "It&#39;s because text isn&#39;t a list of chars"}, {"owner": {"reputation": 5760, "user_id": 1863564, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XU4XS.png?s=128&g=1", "display_name": "Fund Monica&#39;s Lawsuit", "link": "https://stackoverflow.com/users/1863564/fund-monicas-lawsuit"}, "edited": false, "score": 1, "creation_date": 1551655285, "post_id": 30811312, "comment_id": 96708646, "body": "How well does this generalize to nth character, not just first?"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 116, "last_activity_date": 1599513514, "last_edit_date": 1599513514, "creation_date": 1434139396, "answer_id": 30811312, "question_id": 30811107, "link": "https://stackoverflow.com/questions/30811107/how-do-i-get-the-first-character-out-of-a-string/30811312#30811312", "title": "How do I get the first character out of a string?", "body": "<p>UTF-8 does not define what &quot;character&quot; is so it depends on what you want. In this case, <code>char</code>s are Unicode scalar values, and so the first <code>char</code> of a <code>&amp;str</code> is going to be between one and four bytes.</p>\n<p>If you want just the first <code>char</code>, then don't collect into a <code>Vec&lt;char&gt;</code>, just use the iterator:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let text = &quot;hello world!&quot;;\nlet ch = text.chars().next().unwrap();\n</code></pre>\n<p>Alternatively, you can use the iterator's <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth\" rel=\"noreferrer\"><code>nth</code></a> method:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let ch = text.chars().nth(0).unwrap();\n</code></pre>\n<p>Bear in mind that elements preceding the index passed to <code>nth</code> will be consumed from the iterator.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 22, "creation_date": 1507118836, "post_id": 46556020, "comment_id": 80082230, "body": "This answer is <b>completely wrong</b> for non-ASCII data. Try <code>&amp;&quot;\u65e5\u672c\u8a9e&quot;[0..1]</code>"}, {"owner": {"reputation": 796, "user_id": 3689399, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/85d26b603f204eb7a3cfe3e3a6fc007e?s=128&d=identicon&r=PG&f=1", "display_name": "FeFiFoFu", "link": "https://stackoverflow.com/users/3689399/fefifofu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 8, "creation_date": 1507175369, "post_id": 46556020, "comment_id": 80108111, "body": "Maybe Steve Klabnik, who wrote the accepted answer, should update his book that&#39;s featured on the Rust website because it shows this exact method (<a href=\"https://doc.rust-lang.org/book/second-edition/ch04-03-slices.html#string-slices\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/second-edition/&hellip;</a>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1507227703, "post_id": 46556020, "comment_id": 80137788, "body": "That is briefly covered in that chapter of the book (&quot;<i><code>world</code> would be a slice that contains a pointer <b>to the 6th byte</b> of <code>s</code> and a length value of 5</i>&quot;, emphasis mine) and in <a href=\"https://doc.rust-lang.org/book/second-edition/ch08-02-strings.html#bytes-and-scalar-values-and-grapheme-clusters-oh-my\" rel=\"nofollow noreferrer\">much more detail later</a>."}, {"owner": {"reputation": 207, "user_id": 8865811, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BGfwF.jpg?s=128&g=1", "display_name": "Prajwal Dhatwalia", "link": "https://stackoverflow.com/users/8865811/prajwal-dhatwalia"}, "edited": false, "score": 3, "creation_date": 1562218286, "post_id": 46556020, "comment_id": 100310288, "body": "This may not be what OP wanted. But it helped me get the first character as a string. Exactly what I wanted! Thanks, @FeFiFoFu :)"}], "tags": [], "owner": {"reputation": 796, "user_id": 3689399, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/85d26b603f204eb7a3cfe3e3a6fc007e?s=128&d=identicon&r=PG&f=1", "display_name": "FeFiFoFu", "link": "https://stackoverflow.com/users/3689399/fefifofu"}, "is_accepted": false, "score": -2, "last_activity_date": 1507083547, "creation_date": 1507083547, "answer_id": 46556020, "question_id": 30811107, "link": "https://stackoverflow.com/questions/30811107/how-do-i-get-the-first-character-out-of-a-string/46556020#46556020", "title": "How do I get the first character out of a string?", "body": "<p>The accepted answer is a bit ugly!</p>\n\n<pre><code>let text = \"hello world!\";\n\nlet ch = &amp;text[0..1]; // this returns \"h\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1517110055, "post_id": 48482196, "comment_id": 83958722, "body": "Seems <a href=\"https://play.rust-lang.org/?gist=c1a86a9de2b277ce571e5186eae85b7c&amp;version=stable\" rel=\"nofollow noreferrer\">like this would be simpler</a>."}, {"owner": {"reputation": 159, "user_id": 5790891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f51ad946ef4e49646ec87a3224b3abc1?s=128&d=identicon&r=PG", "display_name": "Sean", "link": "https://stackoverflow.com/users/5790891/sean"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1517148463, "post_id": 48482196, "comment_id": 83967220, "body": "Shepmaster - your version is indeed simpler.  But, I&#39;m worried about the chars() function - it looks to me as if it scans the entire string and parses that into a vector or something, whereas my code only looks at the first 4 characters of the string, at most.  But, perhaps I am misunderstanding how chars() works?"}, {"owner": {"reputation": 159, "user_id": 5790891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f51ad946ef4e49646ec87a3224b3abc1?s=128&d=identicon&r=PG", "display_name": "Sean", "link": "https://stackoverflow.com/users/5790891/sean"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1517149014, "post_id": 48482196, "comment_id": 83967387, "body": "Sorry, meant to say &quot;first 4 bytes&quot; not &quot;first 4 characters&quot;"}, {"owner": {"reputation": 128, "user_id": 4012426, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000105441681/picture?type=large", "display_name": "Hutch Moore", "link": "https://stackoverflow.com/users/4012426/hutch-moore"}, "edited": false, "score": 3, "creation_date": 1560954366, "post_id": 48482196, "comment_id": 99907545, "body": "@Sean you probably know by now, but chars() returns an iterator. Iterators are lazily evaluated (and zero-cost, meaning the compiler rewrites them at compile-time), so it should actually be quite efficient."}], "tags": [], "owner": {"reputation": 159, "user_id": 5790891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f51ad946ef4e49646ec87a3224b3abc1?s=128&d=identicon&r=PG", "display_name": "Sean", "link": "https://stackoverflow.com/users/5790891/sean"}, "is_accepted": false, "score": 3, "last_activity_date": 1517109882, "last_edit_date": 1517109882, "creation_date": 1517101862, "answer_id": 48482196, "question_id": 30811107, "link": "https://stackoverflow.com/questions/30811107/how-do-i-get-the-first-character-out-of-a-string/48482196#48482196", "title": "How do I get the first character out of a string?", "body": "<p>I wrote a function that returns the head of a <code>&amp;str</code> and the rest:</p>\n\n<pre><code>fn car_cdr(s: &amp;str) -&gt; (&amp;str, &amp;str) {\n    for i in 1..5 {\n        let r = s.get(0..i);\n        match r {\n            Some(x) =&gt; return (x, &amp;s[i..]),\n            None =&gt; (),\n        }\n    }\n\n    (&amp;s[0..0], s)\n}\n</code></pre>\n\n<p>Use it like this:</p>\n\n<pre><code>let (first_char, remainder) = car_cdr(\"test\");\nprintln!(\"first char: {}\\nremainder: {}\", first_char, remainder);\n</code></pre>\n\n<p>The output looks like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>first char: t\nremainder: est\n</code></pre>\n\n<p>It works fine with chars that are more than 1 byte.</p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 51145, "favorite_count": 5, "accepted_answer_id": 30811312, "answer_count": 3, "score": 74, "last_activity_date": 1607698056, "creation_date": 1434138553, "last_edit_date": 1593043760, "question_id": 30811107, "link": "https://stackoverflow.com/questions/30811107/how-do-i-get-the-first-character-out-of-a-string", "title": "How do I get the first character out of a string?", "body": "<p>I want to get the first character of a <a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noreferrer\"><code>std::str</code></a>. The method <a href=\"https://doc.rust-lang.org/1.0.0/std/primitive.str.html#method.char_at\" rel=\"noreferrer\"><code>char_at()</code></a> is currently unstable, as is <a href=\"https://doc.rust-lang.org/1.0.0/std/string/struct.String.html#method.slice_chars\" rel=\"noreferrer\"><code>String::slice_chars</code></a>.</p>\n<p>I have come up with the following, but it seems excessive to get a single character and not use the rest of the vector:</p>\n<pre><code>let text = &quot;hello world!&quot;;\nlet char_vec: Vec&lt;char&gt; = text.chars().collect();\nlet ch = char_vec[0];\n</code></pre>\n"}, {"tags": ["interface", "rust", "encapsulation"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1434134920, "post_id": 30809703, "comment_id": 49668494, "body": "What is the question?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434137123, "post_id": 30810321, "comment_id": 49669649, "body": "I agree wholeheartedly, but will point out that there is also the possibility of marking the function as <code>unsafe</code>, which might discourage consumers from calling the method. You could also make the method public but mark it as <code>#[doc(hidden)]</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1434135375, "creation_date": 1434135375, "answer_id": 30810321, "question_id": 30809703, "link": "https://stackoverflow.com/questions/30809703/crate-level-visibility/30810321#30810321", "title": "Crate-level visibility", "body": "<p>If you compare Rust and C++ you will notice that Rust does not have:</p>\n\n<ul>\n<li><code>protected</code></li>\n<li><code>friend</code></li>\n</ul>\n\n<p>This is a deliberate design, and there is no alternative. In Rust something is either private or public, and therefore you do not have to jump all around the codebase to know whether an invariant holds or not.</p>\n\n<p>Therefore, the solution is to:</p>\n\n<ul>\n<li>make a <code>pub fn new</code> function to create a <code>Collection</code></li>\n<li>reinforce this function so it is perfectly safe to use by the whole world</li>\n</ul>\n\n<p>This is actually good design; if there is <em>one</em> <code>struct</code> that should be responsible for upholding <code>Collection</code>'s invariants, it certainly is <code>Collection</code> itself. Delegating this responsibility to another crate seems hazardous.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1434153130, "creation_date": 1434153130, "answer_id": 30813747, "question_id": 30809703, "link": "https://stackoverflow.com/questions/30809703/crate-level-visibility/30813747#30813747", "title": "Crate-level visibility", "body": "<p>Move <code>Collection</code> to a new private module (e.g. <code>collection_impl</code>). Add a public function in that module to create a <code>Collection</code>. Re-export <code>Collection</code> from <code>collection</code> (which is public) with <code>pub use</code>.</p>\n\n<p>You can use <code>collection_impl</code> from within your crate, but since it is private, other crates cannot use it. However, by re-exporting <code>Collection</code> in module <code>collection</code>, other crates can use <code>Collection</code> through this path.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub mod client {\n    use super::collection;\n    use super::collection_impl;\n\n    pub struct Client {\n        p: i32\n    }\n\n    /* this could also be a method on Client */\n    pub fn make_collection(client: &amp;Client) -&gt; collection::Collection {\n        collection_impl::new_collection(42)\n    }\n}\n\nmod collection_impl {\n    pub struct Collection {\n        p: i32\n    }\n\n    pub fn new_collection(p: i32) -&gt; Collection {\n        Collection { p: p }\n    }\n}\n\npub mod collection {\n    use super::collection_impl;\n    pub use collection_impl::Collection;\n}\n</code></pre>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 163, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1434153130, "creation_date": 1434132896, "last_edit_date": 1434136951, "question_id": 30809703, "link": "https://stackoverflow.com/questions/30809703/crate-level-visibility", "title": "Crate-level visibility", "body": "<p>I have two types, each with a bunch of supporting functions; the entire content of these two types should be private (in my case, they are mutable pointers to objects in C). These two types are conceptually different, so I put them in different modules\u2026</p>\n\n<pre><code>pub mod client {\n    pub struct Client {\n        // private internals\n    }\n    // Lots of code.\n}\npub mod collection {\n    pub struct Collection {\n        // private internals\n    }\n    // Lots of code.\n}\n</code></pre>\n\n<p>(In my real-world case, <code>mod client</code> and <code>mod collection</code> are separate files, i.e., <code>client.rs</code> and <code>collection.rs</code>.)</p>\n\n<p><code>client.rs</code> needs to create a <code>Collection</code>; however, it can't, because the internals are private. Any attempt to write a function suffers the same problem: the function would need to be in <code>collection.rs</code> (to access the private members of <code>Collection</code>, but would need to be <code>pub</code> so that <code>client.rs</code> can access it\u2026 but now it's also <code>pub</code> to the entire world.</p>\n\n<p>What I'd really like is some sort of crate-level visibility, or a way to \"friend\" this struct out to another module. (Otherwise, the <code>pub</code>lically visible stuff in the crate doesn't represent the API, which seems silly.)</p>\n"}, {"tags": ["pattern-matching", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434130238, "post_id": 30808882, "comment_id": 49666033, "body": "Oooh, that looks like a bug. If you comment out <i>either</i> match arm with a <code>...</code>, it does match &quot;two&quot;, even if you comment out the match arm <b>after</b> the &quot;two&quot;. Pure speculation, I wonder if there&#39;s some incorrect optimization that is coalescing the two ranges together and making them fire first. Mmm, yeah, if you change the first range to <code>&#39;a&#39;...&#39;c&#39;</code>, then  &quot;two&quot; matches as well..."}, {"owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434130528, "post_id": 30808882, "comment_id": 49666220, "body": "I opened a <a href=\"https://github.com/rust-lang/rust/issues/26251\" rel=\"nofollow noreferrer\">bug report</a>."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1434134796, "creation_date": 1434134796, "answer_id": 30810170, "question_id": 30808882, "link": "https://stackoverflow.com/questions/30808882/match-expression-falling-through/30810170#30810170", "title": "match expression falling through?", "body": "<p>Looking at the LLVM IR in Debug, it is already flawed, so this is definitely a bug in <code>rustc</code>; we'll use the curated IR below to check what's going on.</p>\n\n<p>So, <code>%x</code> is assigned 'a' (97 in ASCII), and <code>%10</code> is assigned the result of <code>x &gt;= 'a' and x &lt;= 'b'</code>; if this is true, we go to <code>match_case</code>, otherwise to <code>compare_next</code>. <code>match_case</code> redirect to <code>cond</code>, which redirects to <code>case_body2</code> which prints <code>\"three\"</code>.</p>\n\n<p>In theory, we would have wanted to go to <code>case_body1</code> (printing <code>\"two\"</code>), from <code>cond7</code>, from <code>match_case4</code>, from <code>compare_next</code>. But <code>compare_next</code> is only reached if <code>x</code> is not in <code>['a', 'b']</code> according to the IR.</p>\n\n<p>This clearly looks like a bug.</p>\n\n<pre><code>; Function Attrs: uwtable\ndefine internal void @_ZN4main20h4f7b0d7962de19d8eaaE() unnamed_addr #0 {\nentry-block:\n  %x = alloca i32\n  ; [...]\n  store i32 97, i32* %x\n  %7 = load i32* %x, !range !0\n  %8 = icmp uge i32 %7, 97\n  %9 = icmp ule i32 %7, 98\n  %10 = and i1 %8, %9\n  br i1 %10, label %match_case, label %compare_next\n\ncase_body:                                        ; preds = %next6, %next\n  ; println!(\"one\")\n  br label %case_body8\n\ncase_body1:                                       ; preds = %cond7\n  ; println!(\"two\")\n  br label %case_body10\n\ncase_body2:                                       ; preds = %cond\n  ; println!(\"three\")\n  br label %case_body15\n\ncase_body3:                                       ; preds = %match_else\n  ; panic!(\"what\")\n  unreachable\n\nmatch_else:                                       ; preds = %compare_next5\n  br label %case_body3\n\nmatch_case:                                       ; preds = %entry-block\n  br i1 true, label %cond, label %next\n\ncompare_next:                                     ; preds = %entry-block\n  %16 = icmp eq i32 %7, 97\n  br i1 %16, label %match_case4, label %compare_next5\n\nnext:                                             ; preds = %match_case\n  br label %case_body\n\ncond:                                             ; preds = %match_case\n  br label %case_body2\n\nmatch_case4:                                      ; preds = %compare_next\n  br i1 true, label %cond7, label %next6\n\n; [...]\n\ncond7:                                            ; preds = %match_case4\n  br label %case_body1\n\n; [...]\n}\n</code></pre>\n"}], "owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 1, "accepted_answer_id": 30810170, "answer_count": 1, "score": 11, "last_activity_date": 1472489797, "creation_date": 1434129846, "last_edit_date": 1472489797, "question_id": 30808882, "link": "https://stackoverflow.com/questions/30808882/match-expression-falling-through", "title": "match expression falling through?", "body": "<p><strong>Update:</strong> this is an old bug <a href=\"https://github.com/rust-lang/rust/issues/26251#event-770023973\" rel=\"nofollow\">solved</a> in 1.12</p>\n\n<hr>\n\n<p>Here is some contrived but simple pattern matching example <a href=\"https://play.rust-lang.org/?code=%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20x%20%3D%20%27a%27%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%27a%27...%27b%27%20if%20false%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!%28%22one%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%27a%27%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!%28%22two%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%27a%27...%27b%27%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!%28%22three%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20panic!%28%22what%3F%22%29%0A%20%20%20%20%7D%0A%7D%0A%0A%0A&amp;version=stable\" rel=\"nofollow\">(demo)</a>:</p>\n\n<pre><code>fn main() {\n    let x = 'a';\n\n    match x {\n            'a'...'b' if false =&gt; {\n                println!(\"one\");\n            },\n\n            'a' =&gt; {\n                println!(\"two\");\n            },\n\n            'a'...'b' =&gt; {\n                println!(\"three\");\n            },\n\n            _ =&gt; panic!(\"what?\")\n    }\n}\n</code></pre>\n\n<p>When I run it, I get <code>three</code> as output. Why is this happening? Shouldn't the second branch match first?</p>\n"}, {"tags": ["printing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "is_accepted": false, "score": 1, "last_activity_date": 1434112822, "creation_date": 1434112822, "answer_id": 30803339, "question_id": 30802714, "link": "https://stackoverflow.com/questions/30802714/printing-using-fmtdisplay/30803339#30803339", "title": "Printing using fmt::Display", "body": "<p>The test runner seems to divert the standard output; you should consider using <code>assert!</code>, <code>assert_eq!</code> or other panicky ways to test your assertions rather than printing in tests.</p>\n\n<p>Besides, your code fails to compile due to mismatching names. I got it working as expected from main:</p>\n\n<pre><code>use std::fmt;\n\npub enum TestEnum&lt;'a&gt; {\n    Foo(&amp;'a str),\n    Bar(f32)\n}\n\nimpl&lt;'b&gt; fmt::Display for TestEnum &lt;'b&gt; {\n    fn fmt(&amp;self, f : &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            &amp;TestEnum::Foo(x) =&gt; write!(f, \"{}\", x),\n            &amp;TestEnum::Bar(x) =&gt; write!(f, \"{}\", x),\n        }\n    }\n}\n\nfn main() {\n    let cell = TestEnum::Foo(\"foo\");\n    println!(\"Printing\");\n    println!(\"{}\", cell);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1434115715, "last_edit_date": 1434115715, "creation_date": 1434113079, "answer_id": 30803432, "question_id": 30802714, "link": "https://stackoverflow.com/questions/30802714/printing-using-fmtdisplay/30803432#30803432", "title": "Printing using fmt::Display", "body": "<p>Test output is redirected to a buffer when the test succeeds as to not mangle up with the test \"FAILED\" or \"ok\" messages.</p>\n\n<hr>\n\n<p>If you just want to test something while developing your test, you can always add a <code>panic!()</code> at the end of your test to make sure it keeps failing and outputting all logging. Or as @AndreaP notes in his answer, you can use <code>cargo test -- --nocapture</code> to display the standard output of <em>all</em> tests.</p>\n\n<hr>\n\n<p>Usually a test should not write to stdout, but instead write to a buffer and check whether that buffer contains what it should:</p>\n\n<pre><code>let cell = TestEnum::Foo(\"foo\");\nlet mut buf = Vec::new();\nlet _ = write!(buf, \"{}\\n\", cell);\nassert_eq!(&amp;buf, b\"foo\\n\");\n</code></pre>\n\n<hr>\n\n<p>If you truly want to output something, you need to write directly to stdout.</p>\n\n<pre><code>let _ = write!(io::stdout(), \"{}\\n\", cell);\n</code></pre>\n\n<p>but this will mix with the test's output:</p>\n\n<pre><code>test tests::blub ... foo\nok\n</code></pre>\n\n<p><a href=\"http://is.gd/BbRHfW\" rel=\"nofollow\">PlayPen</a></p>\n"}, {"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434113531, "creation_date": 1434113531, "answer_id": 30803595, "question_id": 30802714, "link": "https://stackoverflow.com/questions/30802714/printing-using-fmtdisplay/30803595#30803595", "title": "Printing using fmt::Display", "body": "<p>This happens because Rust test program hides stdout of successful tests. You can disable this behavior passing --nocapture option to test binary or to cargo test command this way:</p>\n\n<pre><code>cargo test -- --nocapture\n</code></pre>\n\n<p>PS: your code is broken/incomplete</p>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 379, "favorite_count": 0, "accepted_answer_id": 30803595, "answer_count": 3, "score": 4, "last_activity_date": 1434115715, "creation_date": 1434110876, "last_edit_date": 1434115628, "question_id": 30802714, "link": "https://stackoverflow.com/questions/30802714/printing-using-fmtdisplay", "title": "Printing using fmt::Display", "body": "<p>I am trying to print an enum (or structure) using fmt::Display. Though the code compiles and gets to the display method, it doesn't print the value. </p>\n\n<pre><code>pub enum TestEnum&lt;'a&gt; {\n   Foo(&amp;'a str),\n   Bar(f32)\n}\n\nimpl&lt;'b&gt; fmt::Display for TestEnum &lt;'b&gt; {\n    fn fmt(&amp;self, f : &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        println!(\"Got this far\");\n        match self{\n            &amp;TestEnum::Foo(x) =&gt; write!(f,\"{}\",x),\n            &amp;TestEnum::Bar(x) =&gt; write!(f,\"{}\",x),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    #[test]\n    fn test_print() {\n        let cell = TestEnum::Str(\"foo\");\n        println!(\"Printing\");\n        println!(\"{}\",cell); // No output here\n    }\n}\n</code></pre>\n\n<p>I tried using {:?} and {} but to no avail.</p>\n"}, {"tags": ["rust", "idioms"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1434106922, "post_id": 30801031, "comment_id": 49651189, "body": "Use the <code>lines()</code> iterator: <a href=\"http://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/io/trait.BufRead.html#method.lines</a>"}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1434122039, "post_id": 30801031, "comment_id": 49661046, "body": "I don&#39;t understand why this question has been downvoted. If it&#39;s considered too subjective, I propose that the <code>idiomatic</code> tag be removed, since it exactly describes the kind of thing I&#39;m asking about."}], "answers": [{"comments": [{"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 0, "creation_date": 1434111143, "post_id": 30801708, "comment_id": 49653818, "body": "Neat! But doesn&#39;t returning a Result imply that if the file is unreadable, it will be the caller&#39;s problem? Maybe there&#39;s no way to avoid that while also being lazy about reading the file?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 4, "creation_date": 1434113393, "post_id": 30801708, "comment_id": 49655299, "body": "@NathanLong Using <code>unwrap</code> or <code>panic!</code> means that if the file is unreadable, the entire thread explodes and the caller dies without warning.  If the caller doesn&#39;t care about this, they can just call <code>unwrap</code> on the result and get the same explody behaviour.  <i>Or</i> they can actually decide what to do with the error.  Either way, it has no impact on reading the file: both will cause the function to stop executing in one fashion or another."}, {"owner": {"reputation": 1600, "user_id": 4562156, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/WuCmq.jpg?s=128&g=1", "display_name": "Sean Pianka", "link": "https://stackoverflow.com/users/4562156/sean-pianka"}, "edited": false, "score": 1, "creation_date": 1544301648, "post_id": 30801708, "comment_id": 94229967, "body": "Can you add an example of invocation of <code>lines_from_file</code>?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 17, "last_activity_date": 1543938710, "last_edit_date": 1543938710, "creation_date": 1434107754, "answer_id": 30801708, "question_id": 30801031, "link": "https://stackoverflow.com/questions/30801031/read-a-file-and-get-an-array-of-strings/30801708#30801708", "title": "Read a file and get an array of strings", "body": "<p>As <a href=\"https://stackoverflow.com/questions/30801031/read-a-file-and-get-an-array-of-strings#comment49651189_30801031\">BurntSushi said</a>, you <em>could</em> just use <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines\" rel=\"noreferrer\">the <code>lines()</code> iterator</a>.  But, to address your question as-is:</p>\n\n<ul>\n<li><p>You should probably read <a href=\"http://blog.burntsushi.net/rust-error-handling/\" rel=\"noreferrer\">Error Handling in Rust</a>; those <code>unwrap()</code>s should be turned into <code>?</code>s, with the function's result becoming a <code>Result&lt;Vec&lt;String&gt;, E&gt;</code> for some reasonable <code>E</code>. Here, we reuse the <code>io::Result</code> type alias.</p></li>\n<li><p>Use the <code>lines()</code> iterator.  The other thing you can do is read the whole file into a <code>String</code> <em>and return that</em>; there's <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.lines\" rel=\"noreferrer\">a <code>lines()</code> iterator for strings as well</a>.</p></li>\n<li><p>This one you can't do anything about: <code>file_contents</code> owns its contents, and you can't split them up into multiple, owned <code>String</code>s.  The only thing you can do is borrow the contents of each line, then convert that into a new <code>String</code>.  That said, the way you've put this implies that you believe creating a <code>&amp;str</code> is expensive; it isn't.  It's <em>literally</em> just computing a pair of offsets and returning those.  A <code>&amp;str</code> slice is effectively equivalent to <code>(*const u8, usize)</code>.</p></li>\n</ul>\n\n<p>Here's a modified version which does basically the same thing:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{self, BufRead};\nuse std::path::Path;\n\nfn lines_from_file&lt;P&gt;(filename: P) -&gt; io::Result&lt;io::Lines&lt;io::BufReader&lt;File&gt;&gt;&gt;\nwhere\n    P: AsRef&lt;Path&gt;,\n{\n    let file = File::open(filename)?;\n    Ok(io::BufReader::new(file).lines())\n}\n</code></pre>\n\n<p>One other change I made: <code>filename</code> is now a generic <code>P: AsRef&lt;Path&gt;</code>, because that's what <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html#method.open\" rel=\"noreferrer\"><code>File::open</code></a> wants, so it will accept more types without needing conversion.</p>\n"}, {"comments": [{"owner": {"reputation": 235600, "user_id": 39677, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/77aa7bc1ace6e4b0b49a2102e4fa4059?s=128&d=identicon&r=PG", "display_name": "Blankman", "link": "https://stackoverflow.com/users/39677/blankman"}, "edited": false, "score": 0, "creation_date": 1544503132, "post_id": 35820003, "comment_id": 94288683, "body": "Your &#39;down to one line&#39; function seems to return the entire text as 1 line for me, your first worked."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 235600, "user_id": 39677, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/77aa7bc1ace6e4b0b49a2102e4fa4059?s=128&d=identicon&r=PG", "display_name": "Blankman", "link": "https://stackoverflow.com/users/39677/blankman"}, "edited": false, "score": 0, "creation_date": 1550688158, "post_id": 35820003, "comment_id": 96364458, "body": "@Blankman I think the issue is that you aren&#39;t handling the returned <code>Result</code> from <code>lines_from_file</code>. <code>Option</code> and <code>Result</code> implement <code>IntoIterator</code>, so that might be tricking you."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 23, "last_activity_date": 1550688103, "last_edit_date": 1550688103, "creation_date": 1457212583, "answer_id": 35820003, "question_id": 30801031, "link": "https://stackoverflow.com/questions/30801031/read-a-file-and-get-an-array-of-strings/35820003#35820003", "title": "Read a file and get an array of strings", "body": "<p><a href=\"https://stackoverflow.com/a/30801708/155423\">DK.'s answer</a> is quite right and has great explanation. However, you stated:</p>\n\n<blockquote>\n  <p>Read a file and get an array of strings</p>\n</blockquote>\n\n<p>Rust arrays have a fixed length, known at compile time, so I assume you really mean \"vector\". I would write it like this:</p>\n\n<pre><code>use std::{\n    fs::File,\n    io::{prelude::*, BufReader},\n    path::Path,\n};\n\nfn lines_from_file(filename: impl AsRef&lt;Path&gt;) -&gt; Vec&lt;String&gt; {\n    let file = File::open(filename).expect(\"no such file\");\n    let buf = BufReader::new(file);\n    buf.lines()\n        .map(|l| l.expect(\"Could not parse line\"))\n        .collect()\n}\n\n// ---\n\nfn main() {\n    let lines = lines_from_file(\"/etc/hosts\");\n    for line in lines {\n        println!(\"{:?}\", line);\n    }\n}\n</code></pre>\n\n<ol>\n<li>As in the other answer, it's worth it to use a generic type that implements <code>AsRef</code> for the filename.</li>\n<li><a href=\"https://doc.rust-lang.org/core/result/enum.Result.html#method.expect\" rel=\"noreferrer\"><code>Result::expect</code></a> shortens the panic on <code>Err</code>.</li>\n<li><a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines\" rel=\"noreferrer\"><code>BufRead::lines</code></a> handles multiple types of newlines, not just <code>\"\\n\"</code>.</li>\n<li><code>BufRead::lines</code> also gives you separately allocated <code>String</code>s, instead of one big glob.</li>\n<li>There's no reason to collect to a temporary variable just to return it. There's especially no reason to repeat the type (<code>Vec&lt;String&gt;</code>).</li>\n</ol>\n\n<p>If you wanted to return a <code>Result</code> on failure, you can squash the implementation down to one line if you want:</p>\n\n<pre><code>use std::{\n    fs::File,\n    io::{self, BufRead, BufReader},\n    path::Path,\n};\n\nfn lines_from_file(filename: impl AsRef&lt;Path&gt;) -&gt; io::Result&lt;Vec&lt;String&gt;&gt; {\n    BufReader::new(File::open(filename)?).lines().collect()\n}\n\n// ---\n\nfn main() {\n    let lines = lines_from_file(\"/etc/hosts\").expect(\"Could not load lines\");\n    for line in lines {\n        println!(\"{:?}\", line);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13725, "favorite_count": 4, "answer_count": 2, "score": 29, "last_activity_date": 1550688103, "creation_date": 1434105529, "last_edit_date": 1503670376, "question_id": 30801031, "link": "https://stackoverflow.com/questions/30801031/read-a-file-and-get-an-array-of-strings", "title": "Read a file and get an array of strings", "body": "<p>I want to read a file and get back a vector of <code>String</code>s. The following function works, but is there a more concise or idiomatic way?</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\n\nfn lines_from_file(filename: &amp;str) -&gt; Vec&lt;String&gt; {\n    let mut file = match File::open(filename) {\n        Ok(file) =&gt; file,\n        Err(_) =&gt; panic!(\"no such file\"),\n    };\n    let mut file_contents = String::new();\n    file.read_to_string(&amp;mut file_contents)\n        .ok()\n        .expect(\"failed to read!\");\n    let lines: Vec&lt;String&gt; = file_contents.split(\"\\n\")\n        .map(|s: &amp;str| s.to_string())\n        .collect();\n    lines\n}\n</code></pre>\n\n<p>Some things that seem suboptimal to me:</p>\n\n<ul>\n<li>Two separate error checks for reading the file.</li>\n<li>Reading the entire file to a <code>String</code>, which will be thrown away. This would be particularly wasteful if I only wanted the first N lines.</li>\n<li>Making a <code>&amp;str</code> per line, which will be thrown away, instead of somehow going straight from the file to a <code>String</code> per line.</li>\n</ul>\n\n<p>How can this be improved?</p>\n"}, {"tags": ["bit-manipulation", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434102194, "post_id": 30799885, "comment_id": 49648482, "body": "Are you worried about potential underflows? Is it possible for <code>a</code> to exceed the maximum representable by <code>isize</code>?"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434106511, "post_id": 30799885, "comment_id": 49650925, "body": "Don&#39;t underflows happen if <code>a &lt; |b|</code>? I&#39;m aware of potential underflows and have a solution that should take care of it  - the result will be used to essentially split the range (the <code>a</code> is really either <code>range.start</code> or <code>range.end</code> depending on <code>b</code> sign). If I assert that <code>range.start&lt; split &lt;range.end</code> I should be safe from under/over -flows."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434114821, "post_id": 30799885, "comment_id": 49656305, "body": "If you want something faster, then I&#39;d hope that you have already run benchmarks and seen that this is too slow. You can then provide us the benchmarks so we know that any proposed solution is faster. Even looking at assembly listings doesn&#39;t tell the true story. It&#39;s always possible (albeit fairly unlikely) that the <code>sub</code> instruction has a massive pipeline stall, for example."}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434113291, "post_id": 30800418, "comment_id": 49655231, "body": "It looks like it&#39;s being compiled in debug mode, with minimal optimisations.  Try <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> and don&#39;t forget to click &quot;Release&quot;.  I couldn&#39;t get that site to compile with optimisations <i>and</i> produce output."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434114706, "post_id": 30800418, "comment_id": 49656211, "body": "I see. However I&#39;m more interested in a more bit twiddling way to achieve it for a variable length unsigned int."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1434120843, "post_id": 30800418, "comment_id": 49660300, "body": "@DanielFath: Then I think you should actually ask that; the question as-asked seems unlikely to get you want you want."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1434103463, "creation_date": 1434103463, "answer_id": 30800418, "question_id": 30799885, "link": "https://stackoverflow.com/questions/30799885/faster-way-of-adding-negative-signed-to-unsigned/30800418#30800418", "title": "Faster way of adding negative signed to unsigned", "body": "<p>Why do you assume this is slow?  If that code is put in a function and compiled, on x86-64 linux, it generates the following:</p>\n\n<pre><code>_ZN6simple20h0f921f89f1d823aeeaaE:\n    mov rax, rsi\n    neg rax\n    cmovl rax, rsi\n    sub rdi, rax\n    mov rax, rdi\n    ret\n</code></pre>\n\n<p>That's assuming it doesn't get inlined... which I had to work at for a few minutes to <em>prevent</em> the optimiser from doing in order to get the above.</p>\n\n<p>That's not to say it definitely couldn't be done faster, but I'm unconvinced it could be done faster by <em>much</em>.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1434151366, "creation_date": 1434151366, "answer_id": 30813537, "question_id": 30799885, "link": "https://stackoverflow.com/questions/30799885/faster-way-of-adding-negative-signed-to-unsigned/30813537#30813537", "title": "Faster way of adding negative signed to unsigned", "body": "<p>If <code>b</code> is guaranteed to be negative, then you can just do <code>a + b</code>.</p>\n\n<p>In Rust, we must first cast one of the operands to the same type as the other one, then we must use <code>wrapping_add</code> instead of simply using operator <code>+</code> as debug builds panic on overflow (an overflow occurs when using <code>+</code> on <code>usize</code> because negative numbers become very large positive numbers after the cast).</p>\n\n<pre><code>fn main() {\n    let a: usize = 5;\n    let b: isize = -2;\n    let c: usize = a.wrapping_add(b as usize);\n    println!(\"{}\", c); // prints 3\n}\n</code></pre>\n\n<p>With optimizations, <code>wrapping_add</code> compiles to a single <code>add</code> instruction.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 131, "favorite_count": 0, "accepted_answer_id": 30800418, "answer_count": 2, "score": 0, "last_activity_date": 1434151366, "creation_date": 1434101823, "last_edit_date": 1434114563, "question_id": 30799885, "link": "https://stackoverflow.com/questions/30799885/faster-way-of-adding-negative-signed-to-unsigned", "title": "Faster way of adding negative signed to unsigned", "body": "<p>Assuming I have <code>a: usize</code> and a negative <code>b:isize</code> how do I achieve the following semantics - <strong>reduce a by absolute value of b</strong> in fastest manner possible? </p>\n\n<p>I already thought of <code>a - (b.abs() as usize)</code>, but I'm wondering if there is a faster way. Something with bit manipulation, perhaps?</p>\n"}, {"tags": ["multithreading", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434092738, "post_id": 30795707, "comment_id": 49643255, "body": "Well, to put something in <code>Arc</code> you <i>do</i> perform an allocation."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1566244695, "last_edit_date": 1566244695, "creation_date": 1434086069, "answer_id": 30795707, "question_id": 30795600, "link": "https://stackoverflow.com/questions/30795600/is-it-possible-to-share-data-with-threads-without-any-cloning/30795707#30795707", "title": "Is it possible to share data with threads without any cloning?", "body": "<p>You might have the wrong idea: cloning an <code>Arc</code> is just incrementing a reference counter and making a copy of a pointer; it doesn't perform any additional allocation. Of course, creating the <code>Arc</code> involves an allocation, but then, you're already allocating in order to construct the <code>Vec</code>, so one additional fixed-size allocation isn't likely to hurt.</p>\n\n<p>If all you <em>really</em> need is the length, you can just compute that <em>outside</em> the thread's closure and store it in a variable; a <code>usize</code> has no problems crossing a thread boundary.</p>\n\n<p>The issue is that the compiler is unable to infer from the use of <code>join()</code> that a given thread is bound to a limited lifetime... it doesn't even try.</p>\n\n<p>Before Rust 1.0, there <em>was</em> a <code>thread::scoped</code> constructor that allowed you to pass in non-<code>'static</code> references, but that had to be de-stabilised due to a memory safety issue.  See <a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a> for alternatives.</p>\n"}], "owner": {"reputation": 3282, "user_id": 3102, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/debc1608fc160fb51ed0b07c9ad7739c?s=128&d=identicon&r=PG", "display_name": "Johannes Hoff", "link": "https://stackoverflow.com/users/3102/johannes-hoff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 587, "favorite_count": 3, "accepted_answer_id": 30795707, "answer_count": 1, "score": 8, "last_activity_date": 1566244695, "creation_date": 1434085286, "last_edit_date": 1566244494, "question_id": 30795600, "link": "https://stackoverflow.com/questions/30795600/is-it-possible-to-share-data-with-threads-without-any-cloning", "title": "Is it possible to share data with threads without any cloning?", "body": "<p>When I'm delegating work to threads I often have a piece of data that will outlive all of the threads, such as <code>numbers</code> in the following example:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    let numbers = vec![1, 2, 3];\n\n    let thread_a = thread::spawn(|| println!(\"{}\", numbers.len()));\n    let thread_b = thread::spawn(|| println!(\"{}\", numbers.len()));\n\n    thread_a.join().unwrap();\n    thread_b.join().unwrap();\n}\n</code></pre>\n\n<p>It's not modified anywhere, and because of the <code>join</code>s, it's guaranteed that the threads are done using it. However, Rust's borrow checker is not able to tell:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `numbers`, which is owned by the current function\n --&gt; src/main.rs:6:34\n  |\n6 |     let thread_a = thread::spawn(|| println!(\"{}\", numbers.len()));\n  |                                  ^^                ------- `numbers` is borrowed here\n  |                                  |\n  |                                  may outlive borrowed value `numbers`\n  |\nnote: function requires argument type to outlive `'static`\n --&gt; src/main.rs:6:20\n  |\n6 |     let thread_a = thread::spawn(|| println!(\"{}\", numbers.len()));\n  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: to force the closure to take ownership of `numbers` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let thread_a = thread::spawn(move || println!(\"{}\", numbers.len()));\n  |                                  ^^^^^^^\n</code></pre>\n\n<p>The solutions I've seen so far all involve cloning the piece of data (or cloning an <code>Arc</code> of the data). Is it possible to do it without any cloning, though?</p>\n"}, {"tags": ["arrays", "rust", "slice", "coercion"], "answers": [{"comments": [{"owner": {"reputation": 228, "user_id": 1248763, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/746dfa2a48470b36d0a1a986ca8ddffe?s=128&d=identicon&r=PG", "display_name": "Giedrius Kudelis", "link": "https://stackoverflow.com/users/1248763/giedrius-kudelis"}, "edited": false, "score": 0, "creation_date": 1563357758, "post_id": 30794371, "comment_id": 100670244, "body": "Regarding coercion, I&#39;m a little confused. For example, the Pattern trait is implemented for &amp;[char]. I make a variable x = [&#39; &#39;] and try to use &amp;x as a pattern (e.g. pass it to trim_matches on a String), but this results in compiler error. I can see the type of x is &amp;[char, 1]. If I try to pass &amp;x[..] it gets forced into &amp;[char] and now the compiler finds the Pattern implementation. Is there something I&#39;m missing or is this &amp;[T; n] -&gt; &amp;[T] coercion not checked when looking for trait implementations?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 228, "user_id": 1248763, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/746dfa2a48470b36d0a1a986ca8ddffe?s=128&d=identicon&r=PG", "display_name": "Giedrius Kudelis", "link": "https://stackoverflow.com/users/1248763/giedrius-kudelis"}, "edited": false, "score": 0, "creation_date": 1564411136, "post_id": 30794371, "comment_id": 101011770, "body": "What I say may not be completely correct, but it is my understanding: Generic implementations have a nasty habit of getting in the way of coercions, because they\u2019re essentially ranked as more important than array-to-slice coercion. It sees that all types satisfying <code>FnMut(char) -&gt; bool</code> implement the trait, and so stops there, trying to satisfy that trait bound rather than playing around with type coercions. With const generics, this could be resolved by manually providing a <code>[char; N]</code> and/or <code>&amp;[char; N]</code> implementation (<code>impl&lt;const N: usize&gt;</code>). Whether it will be is another matter."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 36, "last_activity_date": 1526238729, "last_edit_date": 1526238729, "creation_date": 1434075377, "answer_id": 30794371, "question_id": 30794235, "link": "https://stackoverflow.com/questions/30794235/what-is-the-difference-between-a-slice-and-an-array/30794371#30794371", "title": "What is the difference between a slice and an array?", "body": "<p><code>[T; n]</code> is an array of length <code>n</code>, represented as <code>n</code> adjacent <code>T</code> instances.</p>\n\n<p><code>&amp;[T; n]</code> is purely a reference to that array, represented as a thin pointer to the data.</p>\n\n<p><code>[T]</code> is a slice, an unsized type; it can only be used through some form of indirection.</p>\n\n<p><code>&amp;[T]</code>, called a slice, is a sized type. It's a <em>fat pointer</em>, represented as a pointer to the first item and the length of the slice.</p>\n\n<p>Arrays thus have their length known at compile time while slice lengths are a runtime matter. Arrays are second class citizens at present in Rust, as it is not possible to form array generics. There are manual implementations of the various traits for <code>[T; 0]</code>, <code>[T; 1]</code>, <em>&amp;c.</em>, typically up to 32; because of this limitation, slices are much more generally useful. The fact that <code>&amp;[T; n]</code> can coerce to <code>&amp;[T]</code> is the aspect that makes them tolerable.</p>\n\n<p>There is an implementation of <code>fmt::Debug</code> for <code>[T; 3]</code> where <code>T</code> implements <code>Debug</code>, and another for <code>&amp;T</code> where <code>T</code> implements <code>fmt::Debug</code>, and so as <code>u8</code> implements <code>Debug</code>, <code>&amp;[u8; 3]</code> also does.</p>\n\n<blockquote>\n  <p>Why can <code>&amp;[T; n]</code> coerce to <code>&amp;[T]</code>? In Rust, when does coercion happen? </p>\n</blockquote>\n\n<p>It will coerce when it needs to and at no other times. I can think of two cases:</p>\n\n<ol>\n<li>where something expects a <code>&amp;[T]</code> and you give it a <code>&amp;[T; n]</code> it will coerce silently;</li>\n<li>when you call <code>x.starts_with(\u2026)</code> on a <code>[T; n]</code> it will observe that there is no such method on <code>[T; n]</code>, and so autoref comes into play and it tries <code>&amp;[T; n]</code>, which doesn\u2019t help, and then coercion come into play and it tries <code>&amp;[T]</code>, which has a method called <code>starts_with</code>.</li>\n</ol>\n\n<p>The snippet <code>[1, 2, 3].starts_with(&amp;[1, 2])</code> demonstrates both.</p>\n"}, {"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 14, "last_activity_date": 1526238802, "last_edit_date": 1526238802, "creation_date": 1491915396, "answer_id": 43346583, "question_id": 30794235, "link": "https://stackoverflow.com/questions/30794235/what-is-the-difference-between-a-slice-and-an-array/43346583#43346583", "title": "What is the difference between a slice and an array?", "body": "<blockquote>\n  <p>Why can <code>&amp;[T; n]</code> coerce to <code>&amp;[T]</code>?</p>\n</blockquote>\n\n<p>The other answer explains why <code>&amp;[T; n]</code> <em>should</em> coerce to <code>&amp;[T]</code>, here I'll explain how the compiler works out that <code>&amp;[T; n]</code> <em>can</em> coerce to <code>&amp;[T]</code>.</p>\n\n<p>There are <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"noreferrer\">four possible coercions in Rust</a>:</p>\n\n<ol>\n<li><p>Transitivity.</p>\n\n<ul>\n<li>If <code>T</code> coerces to <code>U</code> and <code>U</code> coerces to <code>V</code>, then <code>T</code> coerces to <code>V</code>.</li>\n</ul></li>\n<li><p>Pointer weakening:</p>\n\n<ul>\n<li>removing mutability: <code>&amp;mut T</code> \u2192 <code>&amp;T</code> and <code>*mut T</code> \u2192 <code>*const T</code></li>\n<li>converting to raw pointer: <code>&amp;mut T</code> \u2192 <code>*mut T</code> and <code>&amp;T</code> \u2192 <code>*const T</code></li>\n</ul></li>\n<li><p><a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code> trait</a>:</p>\n\n<ul>\n<li>If <code>T: Deref&lt;Target = U&gt;</code>, then <code>&amp;T</code> coerces to <code>&amp;U</code> via the <code>deref()</code> method</li>\n<li>(Similarly, if <code>T: DerefMut</code>, then <code>&amp;mut T</code> coerces to <code>&amp;mut U</code> via <code>deref_mut()</code>)</li>\n</ul></li>\n<li><p><a href=\"https://doc.rust-lang.org/std/marker/trait.Unsize.html\" rel=\"noreferrer\"><code>Unsize</code> trait</a>:</p>\n\n<ul>\n<li><p>If <code>Ptr</code> is a \"pointer type\" (e.g. <code>&amp;T</code>, <code>*mut T</code>, <code>Box</code>, <code>Rc</code> etc), and <code>T: Unsize&lt;U&gt;</code>, then <code>Ptr&lt;T&gt;</code> coerces to <code>Ptr&lt;U&gt;</code>.</p></li>\n<li><p>The <code>Unsize</code> trait is automatically implemented for:</p>\n\n<ul>\n<li><code>[T; n]: Unsize&lt;[T]&gt;</code></li>\n<li><code>T: Unsize&lt;Trait&gt;</code> where <code>T: Trait</code></li>\n<li><code>struct Foo&lt;\u2026&gt; { \u2026, field: T }: Unsize&lt; struct Foo&lt;\u2026&gt; { \u2026, field: U }&gt;</code>, provided that <code>T: Unsize&lt;U&gt;</code> (and some more conditions to make the job easier for the compiler)</li>\n</ul></li>\n<li><p>(Rust recognizes <code>Ptr&lt;X&gt;</code> as a \"pointer type\" if it implements <a href=\"https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html\" rel=\"noreferrer\"><code>CoerceUnsized</code></a>. The actual rule is stated as, \u201c<em>if <code>T: CoerceUnsized&lt;U&gt;</code> then <code>T</code> coerces to <code>U</code></em>\u201d.)</p></li>\n</ul></li>\n</ol>\n\n<p>The reason <code>&amp;[T; n]</code> coerces to <code>&amp;[T]</code> is rule 4: (a) the compiler generates the implementation <code>impl Unsize&lt;[T]&gt; for [T; n]</code> for every <code>[T; n]</code>, and (b) the reference <code>&amp;X</code> is a pointer type. Using these, <code>&amp;[T; n]</code> <em>can</em> coerce to <code>&amp;[T]</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 6, "creation_date": 1564411396, "post_id": 55057615, "comment_id": 101011932, "body": "<code>n</code> does not exist in memory. For a slice, it\u2019s in the fat pointer, but for an array or array reference, it exists only in the type, as <code>N</code>; it is all sorted out at compile time and does not appear at runtime at all."}], "tags": [], "owner": {"reputation": 390, "user_id": 2341414, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/629d0757826755496d1ff0175301521a?s=128&d=identicon&r=PG", "display_name": "keroro520", "link": "https://stackoverflow.com/users/2341414/keroro520"}, "is_accepted": false, "score": 3, "last_activity_date": 1552025187, "creation_date": 1552025187, "answer_id": 55057615, "question_id": 30794235, "link": "https://stackoverflow.com/questions/30794235/what-is-the-difference-between-a-slice-and-an-array/55057615#55057615", "title": "What is the difference between a slice and an array?", "body": "<p><a href=\"https://i.stack.imgur.com/FDPyS.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/FDPyS.png\" alt=\"enter image description here\"></a></p>\n\n<p>I paste a note picture according answer of @Shepmaster and Chris Morgan, which describe the vary conceptions.</p>\n"}], "owner": {"reputation": 413, "user_id": 1177514, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/06e13c37a94faed8d97419298feb53a7?s=128&d=identicon&r=PG", "display_name": "runrioter", "link": "https://stackoverflow.com/users/1177514/runrioter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5911, "favorite_count": 11, "accepted_answer_id": 30794371, "answer_count": 3, "score": 34, "last_activity_date": 1552025187, "creation_date": 1434074351, "last_edit_date": 1526238659, "question_id": 30794235, "link": "https://stackoverflow.com/questions/30794235/what-is-the-difference-between-a-slice-and-an-array", "title": "What is the difference between a slice and an array?", "body": "<p>Why are both <code>&amp;[u8]</code> and <code>&amp;[u8; 3]</code> ok in this example?</p>\n\n<pre><code>fn main() {\n    let x: &amp;[u8] = &amp;[1u8, 2, 3];\n    println!(\"{:?}\", x);\n\n    let y: &amp;[u8; 3] = &amp;[1u8, 2, 3];\n    println!(\"{:?}\", y);\n}\n</code></pre>\n\n<blockquote>\n  <p>The fact that <code>&amp;[T; n]</code> can coerce to <code>&amp;[T]</code> is the aspect that makes them tolerable. <a href=\"https://stackoverflow.com/a/30794371/155423\">\u2014 Chris Morgan</a></p>\n</blockquote>\n\n<p>Why can <code>&amp;[T; n]</code> coerce to <code>&amp;[T]</code>? In what other conditions does this coercion happen?</p>\n"}, {"tags": ["serialization", "attributes", "rust"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434118266, "post_id": 30794509, "comment_id": 49658660, "body": "What if he uses <code>serde</code>? Doesn&#39;t <code>serde</code> uses <code>Encodable</code>/<code>Decodable</code>?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434121006, "post_id": 30794509, "comment_id": 49660410, "body": "From the docs on the repo, no, it uses different traits.  Also, they specifically mention the <code>serialize</code> crate.  Anyway, if they <i>are</i> using Serde, they should say so, or the answer won&#39;t be useful. :)"}, {"owner": {"reputation": 153, "user_id": 5001309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a554472103521fafdb08ab9d2136356f?s=128&d=identicon&r=PG&f=1", "display_name": "0kp", "link": "https://stackoverflow.com/users/5001309/0kp"}, "edited": false, "score": 0, "creation_date": 1434127723, "post_id": 30794509, "comment_id": 49664590, "body": "What&#39;s the difference between <code>serialize</code> and <code>rustc-serialize</code>?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 153, "user_id": 5001309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a554472103521fafdb08ab9d2136356f?s=128&d=identicon&r=PG&f=1", "display_name": "0kp", "link": "https://stackoverflow.com/users/5001309/0kp"}, "edited": false, "score": 0, "creation_date": 1434149931, "post_id": 30794509, "comment_id": 49674619, "body": "@0kp One is internal to the compiler and shouldn&#39;t be used by anyone else, the other is on crates.io and <i>can</i> be used by others.  For reasons which I&#39;m sure made sense at the time, they are <code>serialize</code> and <code>rustc-serialize</code> <i>in that order</i>.  No, really.  Yes, I know how that looks."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434076533, "creation_date": 1434076533, "answer_id": 30794509, "question_id": 30793710, "link": "https://stackoverflow.com/questions/30793710/add-serialize-attribute-to-type-from-third-party-lib/30794509#30794509", "title": "Add Serialize attribute to type from third-party lib", "body": "<p>First of all, you don't want to use <code>Encodable</code> and <code>Decodable</code>; you want to use <code>RustcEncodable</code> and <code>RustcDecodable</code> from the <a href=\"https://crates.io/crates/rustc-serialize\"><code>rustc-serialize</code></a> crate.</p>\n\n<p>Secondly, you can't.  If you didn't write the type in question <em>or</em> the trait in question, you just can't: this is a <em>deliberate guarantee</em> on the part of the compiler. (See also \"coherence\".)</p>\n\n<p>There are two things you can do in this situation:</p>\n\n<ol>\n<li><p><strong>Implement the traits manually.</strong>  Sometimes, <code>derive</code> doesn't work, so you have to write the trait implementation by hand.  In this case, it would give you the opportunity to just manually implement encoding/decoding for the unsupported types directly.</p></li>\n<li><p><strong>Wrap the unsupported types.</strong>  This means doing something like <code>struct UuidWrap(pub Uuid);</code>.  This gives you a new type that <em>you</em> wrote, which means you can... well, do #1, but do it for a smaller amount of code.  Of course, <em>now</em> you have to wrap and unwrap the UUID, which is a <em>bit</em> of a pain.</p></li>\n</ol>\n"}, {"tags": [], "owner": {"reputation": 1264, "user_id": 898347, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/9lyb7.png?s=128&g=1", "display_name": "Chathurika Sandarenu", "link": "https://stackoverflow.com/users/898347/chathurika-sandarenu"}, "is_accepted": false, "score": 1, "last_activity_date": 1436433482, "last_edit_date": 1495540685, "creation_date": 1436433482, "answer_id": 31313193, "question_id": 30793710, "link": "https://stackoverflow.com/questions/30793710/add-serialize-attribute-to-type-from-third-party-lib/31313193#31313193", "title": "Add Serialize attribute to type from third-party lib", "body": "<p>I found this question when I was looking for the solution for same issue. Chrono has enabled the rustc-serialize support. You have to enable it by adding dependecy as follows.</p>\n\n<pre><code>[dependencies.chrone]\nversion = \"*\"\nfeatures = [\"rustc-serialize\"]\n</code></pre>\n\n<p>I got to know about this from the answer given by <a href=\"https://stackoverflow.com/users/1103681/ker\">ker</a> to my <a href=\"https://stackoverflow.com/questions/31311559/json-serialization-for-rust-chrono\">question</a>. Hope it will helpful to you.</p>\n"}], "owner": {"reputation": 153, "user_id": 5001309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a554472103521fafdb08ab9d2136356f?s=128&d=identicon&r=PG&f=1", "display_name": "0kp", "link": "https://stackoverflow.com/users/5001309/0kp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 0, "accepted_answer_id": 30794509, "answer_count": 2, "score": 4, "last_activity_date": 1436433482, "creation_date": 1434070233, "last_edit_date": 1434081500, "question_id": 30793710, "link": "https://stackoverflow.com/questions/30793710/add-serialize-attribute-to-type-from-third-party-lib", "title": "Add Serialize attribute to type from third-party lib", "body": "<p>I'm trying to add serialization functionality to one of my structs in Rust.\nIt's an event for a calendar and looks like this:</p>\n\n<pre><code>#[derive(PartialEq, Clone, Encodable, Decodable)]\npub struct Event {\n    pub id: Uuid,\n    pub name: String,\n    pub desc: String,\n    pub location: String,\n    pub start: DateTime&lt;Local&gt;,\n    pub end: DateTime&lt;Local&gt;,\n}\n</code></pre>\n\n<p>The struct uses two different types from third-parties, the <code>Uuid</code> is from <a href=\"https://github.com/rust-lang/uuid\" rel=\"nofollow\">https://github.com/rust-lang/uuid</a> and the <code>DateTime</code> from <a href=\"https://github.com/lifthrasiir/rust-chrono\" rel=\"nofollow\">https://github.com/lifthrasiir/rust-chrono</a>.</p>\n\n<p>If I try to build the project the compiler complains that <code>encode</code> was not found for <code>Uuid</code> and <code>DateTime</code>, which is because they both do not derive <code>Encodable</code> and <code>Decodeable</code>, from the <code>serialize</code> crate.</p>\n\n<p>So the questions are:\nIs there a way to add derives to third-party structs without touching the code of the libs itself? If not, what is the best way to add serialization functionality in a situation like this?</p>\n"}, {"tags": ["loops", "character", "line", "rust", "contains"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1434056388, "post_id": 30790650, "comment_id": 49632185, "body": "This sounds like two questions: &quot;Is my code good / idiomatic&quot; and &quot;how do is find multiple chars in a string&quot;. These should be split; the latter is a good question for Stack Overflow, but the first one should be submitted to <a href=\"http://codereview.stackexchange.com/\">Code Review</a> - make sure you follow their submission rules! Working code is required there."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1434057490, "post_id": 30790650, "comment_id": 49632749, "body": "I agree with @Shepmaster but I wanted to answer this: <a href=\"http://pastebin.com/6uSBrFzQ\" rel=\"nofollow noreferrer\">pastebin.com/6uSBrFzQ</a>"}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1434058907, "post_id": 30790650, "comment_id": 49633335, "body": "Thank you, I will improve my code with this :)."}], "answers": [{"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1434058882, "post_id": 30791678, "comment_id": 49633325, "body": "Thanks, I&#39;m a hobby java programmer and the whole .iter().filter().map() stuff is new to me, didn&#39;t had any functional programming yet. And without auto complete in the IDE all the different options are hard to remember."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1434060741, "post_id": 30791678, "comment_id": 49633997, "body": "In this case, feel free to read and re-read the <a href=\"http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">Iterator docs</a>, which are great!"}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1434070126, "post_id": 30791678, "comment_id": 49636745, "body": "I run into an odd error - I took your code, compiled, no problem so far, but with my testfile &quot;foo.txt&quot; which contains &quot;&#252;&#252;&quot;, &quot;&#228;&#228;&quot;, &quot;a&#246;&#246;&quot;in the first 3 lines I get this in the console: &quot; doesn&#39;t pass the test&quot;. The part with &quot;Line {}&quot; is cut off. Changing the line to &quot;doesn&#39;t pass the test {}&quot; gives me &quot;doesn&#39;t pass the test ?&#252;&#252;&quot;, the ? irritates me and &quot;&#228;&#228;&quot; doesn&#39;t show up?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1434075504, "post_id": 30791678, "comment_id": 49638036, "body": "This solution is incorrect: it won&#39;t cope with &quot;a\u0308u\u0308o\u0308&quot;: those are the <i>decomposed</i> forms which use multiple code points.  You should normalise the input when doing a comparison, and you should be using the <code>graphemes</code> iterator <b>not</b> the <code>chars</code> iterator (you&#39;ll need the <code>unicode-segmentation</code> package from crates.io for this, unless you want to use nightly and unstable features)."}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1434077727, "post_id": 30791678, "comment_id": 49638554, "body": "Afaik&#228; &#246; &#252;  can  be represented as single code points. Why do I need to normalize my input and how would I do that? And what is graphemes? This seems to be a big hassle for such an easy task ..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 2, "creation_date": 1434092404, "post_id": 30791678, "comment_id": 49643076, "body": "@Vega: Unfortunately, this is not an easy task, because Unicode is complex. I suggest reading about <i>code points</i>, <i>graphemes</i>, <i>combining character sequences</i> on <a href=\"http://en.wikipedia.org/wiki/Unicode\" rel=\"nofollow noreferrer\">Wikipedia</a> and you&#39;ll understand that your <code>String</code> might be quite complicated. As for the issue in displaying the string, are you sure your terminal is correctly configured to display UTF-8?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1434093678, "post_id": 30791678, "comment_id": 49643746, "body": "@DK. good point. I have to admit I took the first playpen-working solution and posted it here, feel free to edit the answer if needed."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 5, "last_activity_date": 1503669077, "last_edit_date": 1503669077, "creation_date": 1434057661, "answer_id": 30791678, "question_id": 30790650, "link": "https://stackoverflow.com/questions/30790650/read-lines-from-file-iterate-over-each-line-and-each-character-in-that-line/30791678#30791678", "title": "Read lines from file, iterate over each line and each character in that line", "body": "<h1>1) \"Is this code idiomatic Rust?\"</h1>\n\n<p>Overall yes, it seems good. There is one minor point that you probably want to improve: you don't need to collect the lines into a vector to iterate on them. This is unwanted because it triggers unneeded memory allocations. Just reading the <code>lines()</code> iterator directly will work. (If you come from C++, you can forget about collecting things into intermediary vectors: think functional, think iterators!)</p>\n\n<pre><code>let reader = BufReader::new(file);\nlet lines: Vec&lt;_&gt; = reader.lines().collect();\n\nfor l in lines {\n    ...\n}\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>let reader = BufReader::new(file);\nlet lines = reader.lines(); \n// lines is a instance of some type which implements Iterator&lt;Item=&amp;str&gt;\n\nfor l in lines {\n    ...\n}\n</code></pre>\n\n<h1>2) \"How do I check for several characters in a string?\"</h1>\n\n<p>I suggest a simple approach based on <code>.any()</code>:</p>\n\n<pre><code>fn is_aeiou(x: &amp;char) -&gt; bool {\n    \"aeiou\".chars().any(|y| y == *x)\n}\n\nfn is_weird_auo(x: &amp;char) -&gt; bool {\n    \"\u00e4\u00fc\u00f6\".chars().any(|y| y == *x)\n}\n\nfn valid(line: &amp;str) -&gt; bool {\n    line.chars().any(|c| is_aeiou(&amp;c)) &amp;&amp;\n    line.chars().filter(is_weird_auo).fuse().nth(1).is_some()\n}\n</code></pre>\n\n<p>Then you can go iterators all the way and write your main test as follows:</p>\n\n<pre><code>let reader = BufReader::new(file);\nlet lines = reader.lines();\n\nlet bad_line = lines.map(|l| l.unwrap()).filter(|line| !valid(line)).next();\nmatch bad_line {\n    Some(line_n) =&gt; println!(\"Line {} doesn't pass the test\", line_n),\n    None =&gt; println!(\"All lines are good!\"),\n}\n\n// Alternate way if you don't need the line number. More readable\n//let all_good = lines.map(|l| l.unwrap()).all(valid);\n</code></pre>\n\n<p>(Full code on the <a href=\"https://play.rust-lang.org/?gist=63908c351a8c1038b07a9edc3a30ff16&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>.)</p>\n"}, {"tags": [], "owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "is_accepted": true, "score": 3, "last_activity_date": 1503669139, "last_edit_date": 1503669139, "creation_date": 1434161894, "answer_id": 30814468, "question_id": 30790650, "link": "https://stackoverflow.com/questions/30790650/read-lines-from-file-iterate-over-each-line-and-each-character-in-that-line/30814468#30814468", "title": "Read lines from file, iterate over each line and each character in that line", "body": "<p>This works, <a href=\"http://www.reddit.com/r/rust/comments/39mg6a/how_do_i_iterate_over_every_char_of_an_utf8_string/\" rel=\"nofollow noreferrer\">thanks to the nice people on /r/rust</a>:</p>\n\n<pre><code>use std::error::Error;\nuse std::fs::File;\nuse std::io::BufReader;\nuse std::io::prelude::*;\nuse std::path::Path;\n\nfn is_vowel(x: &amp;char) -&gt; bool {\n    \"aAeEiIoOuU\".chars().any(|y| y == *x)\n}\n\nfn is_umlaut(x: &amp;char) -&gt; bool {\n    \"\u00e4\u00c4\u00fc\u00dc\u00f6\u00d6\".chars().any(|y| y == *x)\n}\n\nfn valid(line: &amp;str) -&gt; bool {\n    line.chars().all(|c| !is_vowel(&amp;c)) &amp;&amp; line.chars().filter(is_umlaut).fuse().nth(1).is_some()\n}\n\nfn main() {\n    // Create a path to the desired file\n    let path = Path::new(\"c.txt\");\n    let display = path.display();\n    // Open the path in read-only mode, returns `io::Result&lt;File&gt;`\n    let file = match File::open(&amp;path) {\n        Err(why) =&gt; panic!(\"couldn't open {}: {}\", display, Error::description(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n    let reader = BufReader::new(file);\n    for line in reader.lines() {\n        match line {\n            Ok(line) =&gt; {\n                if valid(&amp;line) {\n                    println!(\"{}\", line)\n                }\n            }\n            Err(e) =&gt; println!(\"ERROR: {}\", e),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5301, "favorite_count": 0, "accepted_answer_id": 30814468, "answer_count": 2, "score": 3, "last_activity_date": 1600049824, "creation_date": 1434053976, "last_edit_date": 1600049824, "question_id": 30790650, "link": "https://stackoverflow.com/questions/30790650/read-lines-from-file-iterate-over-each-line-and-each-character-in-that-line", "title": "Read lines from file, iterate over each line and each character in that line", "body": "<p>I need to read a file, get each line, iterate over each line and check if that line contains any character from &quot;aeiuo&quot; and if it contains at least 2 of the characters &quot;\u00e4\u00fc\u00f6&quot;.</p>\n<p>Is this code idiomatic Rust? How do I check for several characters in a <code>String</code>?</p>\n<p>My attempt so far with some Google and code stealing:</p>\n<pre><code>use std::error::Error;\nuse std::fs::File;\nuse std::io::BufReader;\nuse std::io::prelude::*;\nuse std::path::Path;\n\nfn main() {\n    // Create a path to the desired file\n    let path = Path::new(&quot;foo.txt&quot;);\n    let display = path.display();\n\n    // Open the path in read-only mode, returns `io::Result&lt;File&gt;`\n    let file = match File::open(&amp;path) {\n        // The `description` method of `io::Error` returns a string that describes the error\n        Err(why) =&gt; panic!(&quot;couldn't open {}: {}&quot;, display, Error::to_string(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n\n    // Collect all lines into a vector\n    let reader = BufReader::new(file);\n    let lines: Vec&lt;_&gt; = reader.lines().collect();\n\n    for l in lines {\n        if (l.unwrap().contains(&quot;a&quot;)) {\n            println!(&quot;here is a&quot;);\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?gist=914a8c92dece10e22ee4c81338c5f4b3&amp;version=stable\" rel=\"nofollow noreferrer\">(Playground link)</a></p>\n"}, {"tags": ["python", "rust", "ctypes"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434051084, "post_id": 30789765, "comment_id": 49629158, "body": "A minor style nit, but your Rust function could be <code>pub extern fn make_array() -&gt; [i32; 4] { [1,2,3,4] }</code>."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434051231, "post_id": 30789765, "comment_id": 49629244, "body": "@Shepmaster, I see thank you. I do need to get used to proper <code>rust</code> style."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1434051340, "post_id": 30789765, "comment_id": 49629297, "body": "I don&#39;t know how Rust&#39;s ABI handles returning fixed-sized arrays but AFAIK C can&#39;t do that so I wouldn&#39;t expect ctypes, or any C ABI-consumer, to be able to work with that."}], "answers": [{"comments": [{"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1434052347, "post_id": 30789980, "comment_id": 49629874, "body": "Given my result, it seems that the pointer to first element is actually getting passed though, since the first two elements are right, and it is the length that is off!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1434052780, "post_id": 30789980, "comment_id": 49630103, "body": "@Akavall I have no idea what the memory layout of a Rust array is, so it&#39;s hard to guess what&#39;s happening. Some of those numbers might be padding bytes that are uninitialized. It&#39;s possible that the size of the array is any size from <code>u8</code> to <code>u64</code> (or possibly <code>usize</code>), so it&#39;s not easy to decode what memory it is you are printing."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1434060645, "last_edit_date": 1495542580, "creation_date": 1434051684, "answer_id": 30789980, "question_id": 30789765, "link": "https://stackoverflow.com/questions/30789765/using-rust-returned-array-in-python-using-ctypes/30789980#30789980", "title": "Using Rust returned array in Python using ctypes", "body": "<p>I agree with what <a href=\"https://stackoverflow.com/questions/30789765/using-rust-returned-array-in-python-using-ctypes#comment49629297_30789765\">@delnan</a> said - <a href=\"https://stackoverflow.com/a/11656585/155423\">you can't return fixed-size arrays in C</a>. One main incompatibility is that Rust arrays know what size they are, but C arrays do not. You will need to abide by how every other C program has done this - return a pointer and a length separately. Isn't Rust a nice modern language in comparison?</p>\n\n<p>I stole and modified some Python code <a href=\"https://stackoverflow.com/a/14892980/155423\">from another answer</a></p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import ctypes\n\nfrom ctypes import cdll\n\nlib = cdll.LoadLibrary(\"libarray.dylib\")\nlib.make_array.restype = ctypes.POINTER(ctypes.c_int32 * 4)\n\nprint [i for i in lib.make_array().contents]\n</code></pre>\n\n<p>This works with this Rust code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>static ARRAY: [i32; 4] = [1,2,3,4];\n\n#[no_mangle]\npub extern fn make_array() -&gt; *const i32 {\n    ARRAY.as_ptr()\n}\n</code></pre>\n\n<p>Here, we are doing the simplest thing, creating an array that will live for the entire length of the program and returning a reference to its data. In your real program, you will likely need to take more care to ensure that your <code>Vec&lt;i32&gt;</code> or <code>&amp;[i32]</code> strictly outlives how long the Python code has the pointer, else you will cause memory corruption.</p>\n"}, {"comments": [{"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1434077032, "post_id": 30794456, "comment_id": 49638407, "body": "Nice, but can you explain how your solution works. For example, I don&#39;t understand why this is a &quot;trick&quot; as opposed to normal usage of <code>ctypes</code>."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1434083122, "post_id": 30794456, "comment_id": 49639734, "body": "Makes perfect sense now. Thank You."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434092108, "post_id": 30794456, "comment_id": 49642923, "body": "@DK.: The in-memory layout will match because the C Standard requires that the address of a <code>struct</code> and the address of its first data member match (ie, no front padding); it might be running afoul of the strict aliasing rules, but across languages it should not matter. Nonetheless, it is better to wrap in <code>struct</code> on both ends, it will lead to less head-scratching on the part of future maintainers."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434102688, "post_id": 30794456, "comment_id": 49648779, "body": "@MatthieuM. When I said I wasn&#39;t convinced it was well-defined behaviour, I meant on the Rust side of things.  Sure, returning an array by value as if it were a struct makes <i>sense</i>, but it&#39;s not as though changing it would break integration with C code; C <i>can&#39;t</i> return arrays by value, so surely no one is depending on the exact behaviour!  ;)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434908929, "last_edit_date": 1434908929, "creation_date": 1434076111, "answer_id": 30794456, "question_id": 30789765, "link": "https://stackoverflow.com/questions/30789765/using-rust-returned-array-in-python-using-ctypes/30794456#30794456", "title": "Using Rust returned array in Python using ctypes", "body": "<p>As others have said, you can't <em>really</em> return a fixed-size array properly.  But you can <em>trick</em> ctypes into doing the right thing by wrapping the array in a structure:</p>\n\n<pre><code>import ctypes\n\nclass Int32_4(ctypes.Structure):\n    _fields_ = [(\"array\", ctypes.c_int32 * 4)]\n\nlib = ctypes.CDLL(\"embed.dll\")\nlib.make_array.restype = Int32_4\n\ntemp = lib.make_array()\n\nprint(temp.array[:])\n</code></pre>\n\n<p>This results in <code>[1, 2, 3, 4]</code> on my machine.</p>\n\n<p><strong>Addendum</strong>: This is a \"trick\" because we're exploiting a difference between what C can do and what Rust can do.  C <em>won't</em> let you return a fixed-sized array by value, but Rust <em>will</em>, and it works the same as returning a user-defined structure.</p>\n\n<p>So, we do something that C <em>will</em> allow: returning a structure which happens to contain a fixed-size array.  This, it is fine with, and it matches the layout that Rust is using.</p>\n\n<p>Of course, this is also somewhat hacky, in that I'm not <em>entirely</em> convinced that this is well-defined behaviour.  If you want to be extra safe, you could change the return type on the Rust side to match C:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\nstruct Int32_4 {\n    array: [i32; 4]\n}\n</code></pre>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1219, "favorite_count": 1, "accepted_answer_id": 30794456, "answer_count": 2, "score": 10, "last_activity_date": 1434908929, "creation_date": 1434050863, "question_id": 30789765, "link": "https://stackoverflow.com/questions/30789765/using-rust-returned-array-in-python-using-ctypes", "title": "Using Rust returned array in Python using ctypes", "body": "<p>I have a Rust function that returns an <code>array</code> and I want to use this array in <code>Python</code>, it could be a <code>list</code> or <code>numpy.array</code> it does not really matter.</p>\n\n<p>My Rust function looks like this:</p>\n\n<pre><code>#[no_mangle]\npub extern fn make_array() -&gt; [i32; 4] {\n    let my_array: [i32; 4] = [1,2,3,4];\n    return my_array;\n}\n</code></pre>\n\n<p>And I am trying to call it in Python like this:</p>\n\n<pre><code>In [20]: import ctypes\n\nIn [21]: from ctypes import cdll\n\nIn [22]: lib = cdll.LoadLibrary(\"/home/user/RustStuff/embed/target/release/libembed.so\")\n\nIn [23]: lib.make_array.restype = ctypes.ARRAY(ctypes.c_int32, 4)\n\nIn [24]: temp = lib.make_array()\n\nIn [25]: [i for i in temp]\nOut[25]: [1, 2, -760202930, 32611]\n</code></pre>\n\n<p>What am I doing wrong? Why is my output not <code>[1,2,3,4]</code>? Why are my first two elements right and other two are populated with garbage?</p>\n\n<p>I was not able to find any good documentation on <code>ctypes.ARRAY</code>, so I just went with what looked right, so that is likely the problem.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1434044822, "post_id": 30787711, "comment_id": 49625309, "body": "Please update your example code with a <a href=\"/help/mcve\">MCVE</a>; hopefully one that can be compiled on <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">the playpen</a>. This helps you narrow down the error, and helps us concentrate on solving your problem, and not some extra problem we add by filling in missing parts of your code."}, {"owner": {"reputation": 39, "user_id": 1202694, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/befc010bc771419bda06fdbb027494f4?s=128&d=identicon&r=PG", "display_name": "Mars Liu", "link": "https://stackoverflow.com/users/1202694/mars-liu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434045569, "post_id": 30787711, "comment_id": 49625780, "body": "Sorry for the example. It is a part of a  small project about 3k lines(This data from the golang edition). The state is a iterator with index state and the Parsec is a define for all parser. So,  may be I need create a sample 100 line or more for run a basic logic. I think it should too large for a question. So I level the complete project for the other language edition. Them written by me too. I&#39;m going try to create a smaller sample for this question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434045723, "post_id": 30787711, "comment_id": 49625875, "body": "Yes, 3k lines is far too big, but we can wait for you to make a 10 line example that produces the same error ^_^. I like to create a new branch in git and then just delete everything that isn&#39;t needed for that line of code. Sometimes, you can try copying your problem line into a new file and make stub structs / traits."}, {"owner": {"reputation": 39, "user_id": 1202694, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/befc010bc771419bda06fdbb027494f4?s=128&d=identicon&r=PG", "display_name": "Mars Liu", "link": "https://stackoverflow.com/users/1202694/mars-liu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434046040, "post_id": 30787711, "comment_id": 49626075, "body": "Thanks for your support. I will come back with the small sample. It is am 2:05 in China. Good night. XD"}], "owner": {"reputation": 39, "user_id": 1202694, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/befc010bc771419bda06fdbb027494f4?s=128&d=identicon&r=PG", "display_name": "Mars Liu", "link": "https://stackoverflow.com/users/1202694/mars-liu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 124, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1434045325, "creation_date": 1434044335, "last_edit_date": 1434045325, "question_id": 30787711, "link": "https://stackoverflow.com/questions/30787711/how-to-set-a-request-for-a-generic-without-the-type-in-define", "title": "How to set a request for a generic without the type in define?", "body": "<p>Excuse me for my English.</p>\n\n<p>I'm developing a version of Haskell's Parsec library for Rust. When I try to define a type alias for parsec, like the define in Swift:</p>\n\n<pre><code>struct Parsec&lt;T, S:CollectionType&gt; {\n    typealias Parser = (BasicState&lt;S&gt;)-&gt;Result&lt;T, SimpleError&lt;S.Index&gt;&gt;\n}\n</code></pre>\n\n<p>I want to write:</p>\n\n<pre><code>pub type Result&lt;T&gt; = result::Result&lt;Arc&lt;T&gt;, SimpleError&gt;;\npub type Parsec&lt;T, R, S&gt; where S:State&lt;T&gt; = Box&lt;FnMut(&amp;mut S)-&gt;Result&lt;R&gt;&gt;;\n</code></pre>\n\n<p>But it has a compiler error:</p>\n\n<blockquote>\n  <p>Compiling raskell v0.1.0 (file:///Users/march/jobs/raskell)\n  src/parsec/atom.rs:7:45: 7:74 error: \n  type parameter <code>T</code> is unused [E0091]\n  src/parsec/atom.rs:7 pub type Parsec where S:State = BoxResult>;</p>\n</blockquote>\n\n<p>But if I ignore it, will got some difficult about type derive. Just like some parameters with <code>State&lt;T&gt;</code>, should be a generic type, but the compiler can't know the type at compilation time.</p>\n\n<p>There's a complete <a href=\"https://github.com/Dwarfartisan/sparsec\" rel=\"nofollow\">Swift 2.0 edition</a>, but the unit testing isn't completed. There's a <a href=\"https://github.com/Dwarfartisan/goparsec\" rel=\"nofollow\">golang edition</a> with more unit tests and a <a href=\"https://github.com/Dwarfartisan/gisp\" rel=\"nofollow\">lisp like sample project</a>. Maybe these projects can help me show the idea and my problems.</p>\n\n<p>The <a href=\"https://github.com/Dwarfartisan/ruskell\" rel=\"nofollow\">Rust edition that I am writing</a> cannot be built. If you try to <code>cargo build</code>, you will see some errors.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": false, "score": 6, "last_activity_date": 1434046510, "last_edit_date": 1434046510, "creation_date": 1434046091, "answer_id": 30788305, "question_id": 30787271, "link": "https://stackoverflow.com/questions/30787271/result-type-does-not-implement-method-in-scope-named-unwrap/30788305#30788305", "title": "Result type does not implement method in scope named `unwrap`", "body": "<p>When you define your type</p>\n\n<pre><code>type MyResult&lt;T&gt; = Result&lt;T, MyError&gt;;\n</code></pre>\n\n<p>You actually define your type to be an <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"noreferrer\">unsized type</a> as <code>MyError</code> is not a concrete type, but a trait. But, the implementation of <code>Result&lt;T, E&gt;</code> states</p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; where E: Debug {\n    /* ... */\n}\n</code></pre>\n\n<p>Which implicitly requires <code>E</code> to be a sized type. Thus in your case, as it is not, the implementation is invalid and unavailable (actually, most if not all of the implementation of <code>Result&lt;T, E&gt;</code> requires <code>T</code> and <code>E</code> to be sized, so an unsized <code>Result</code> is not very useful).</p>\n\n<p>The simplest fix in your case is to put your error in a <code>Box</code>, like this:</p>\n\n<pre><code>type MyResult&lt;T&gt; = Result&lt;T, Box&lt;MyError&gt;&gt;;\n</code></pre>\n"}], "owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1434046510, "creation_date": 1434042796, "question_id": 30787271, "link": "https://stackoverflow.com/questions/30787271/result-type-does-not-implement-method-in-scope-named-unwrap", "title": "Result type does not implement method in scope named `unwrap`", "body": "<p>For some reason, the Rust compiler is complaining that <code>Result</code> doesn't implement <code>unwrap</code>, even though the Error type I provided does implement Debug. The code that's error-ing is provided below.</p>\n\n<pre><code>use std::fmt::{Display, Debug};\nuse std::error::Error;\n\ntrait MyError: Error + Display + Debug {}\ntype MyResult&lt;T&gt; = Result&lt;T, MyError&gt;;\n\ntrait Foo: Clone {}\n\ntrait MyTrait {\n    fn my_function&lt;T: Foo&gt;(&amp;self) -&gt; MyResult&lt;T&gt;;\n\n    fn unwrap_function&lt;T: Foo&gt;(&amp;self) -&gt; T {\n        self.my_function().unwrap()\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1434042102, "post_id": 30786886, "comment_id": 49623726, "body": "Nice approach, definitely cleaner and more robust that the <code>cfg(debug_assertions)</code> one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1434042462, "post_id": 30786886, "comment_id": 49623922, "body": "@mdup and our answers can combine together, as well. You can use <code>cfg(debug_assertions)</code> where my answer uses <code>cfg(feature ...)</code>. With mine, there&#39;s a bit more extra work, but you can enable it separately from the release mode."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1434041653, "creation_date": 1434041653, "answer_id": 30786886, "question_id": 30786738, "link": "https://stackoverflow.com/questions/30786738/how-to-redefine-a-macro/30786886#30786886", "title": "How to redefine a macro?", "body": "<p>You would use conditional compilation attributes:</p>\n\n<pre><code>#[cfg(feature = \"debugging\")]\nmacro_rules! log {\n    () =&gt; { println!(\"Debugging\") }\n}\n\n#[cfg(not(feature = \"debugging\"))]\nmacro_rules! log {\n    () =&gt; { }\n}\n\nfn main() {\n    log!();\n}\n</code></pre>\n\n<p>Here, you can use <a href=\"http://doc.crates.io/manifest.html#the-[features]-section\" rel=\"nofollow\">Cargo's \"features\"</a> to provide a compile-time argument that switches the implementation of debugging.</p>\n\n<p>However, there's no <em>requirement</em> to use macros in this case:</p>\n\n<pre><code>#[cfg(feature = \"debugging\")]\nfn log() { println!(\"Debugging\") }\n\n#[cfg(not(feature = \"debugging\"))]\nfn log() {}\n\nfn main() {\n    log();\n}\n</code></pre>\n\n<p>I'd trust pretty heavily in the optimizer to produce the same code in this case.</p>\n"}, {"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 8, "last_activity_date": 1434042016, "creation_date": 1434042016, "answer_id": 30787006, "question_id": 30786738, "link": "https://stackoverflow.com/questions/30786738/how-to-redefine-a-macro/30787006#30787006", "title": "How to redefine a macro?", "body": "<p>Basically you might do:</p>\n\n<pre><code>macro_rules! log_if_dbg {\n    (...) =&gt; (if cfg!(debug_assertions) { /* do logging */ })\n}\n</code></pre>\n\n<hr>\n\n<p>This is how  <a href=\"https://doc.rust-lang.org/nightly/std/macro.debug_assert!.html\">the macro <code>debug_assert!</code></a> is implemented. The doc says:</p>\n\n<blockquote>\n  <p>Unlike assert!, debug_assert! statements are only enabled in non\n  optimized builds by default. An optimized build will omit all\n  debug_assert! statements unless -C debug-assertions is passed to the\n  compiler. This makes debug_assert! useful for checks that are too\n  expensive to be present in a release build but may be helpful during\n  development.</p>\n</blockquote>\n\n<p>This is the same as your situation, only for assert, not logging. Looking at the <a href=\"https://doc.rust-lang.org/nightly//src/core/macros.rs.html#127-129\">source</a>:</p>\n\n<pre><code>macro_rules! debug_assert {\n    ($($arg:tt)*) =&gt; (if cfg!(debug_assertions) { assert!($($arg)*); })\n}\n</code></pre>\n\n<p>This has also been briefly discussed on the <a href=\"https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098/2\">Rust users forum</a>, where the summary is that <code>cfg(debug_assertions)</code> is the way to check if we're in debug mode.</p>\n\n<p>I have no idea how stable <code>cfg(debug_assertions)</code> is, however.</p>\n"}], "owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 707, "favorite_count": 0, "accepted_answer_id": 30787006, "answer_count": 2, "score": 5, "last_activity_date": 1434042016, "creation_date": 1434041235, "last_edit_date": 1434041541, "question_id": 30786738, "link": "https://stackoverflow.com/questions/30786738/how-to-redefine-a-macro", "title": "How to redefine a macro?", "body": "<p>In C++, you can undefine and redefine a macro.\nFor example, a common thing to do in video games is to redefine the logging macro to nothing in Release mode. This guarantees that the code completely disappears which helps with performance.</p>\n\n<p>Is there a way to do a similar thing in Rust?</p>\n"}, {"tags": ["struct", "enums", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1434043274, "post_id": 30786105, "comment_id": 49624420, "body": "(Answer to your deleted comment): I would try replacing <code>value: &amp;&#39;a Cell</code> by <code>value: Cell&lt;&#39;a&gt;</code> in the struct, but I&#39;m not 100% certain that&#39;s what you want. If it compiles, it&#39;s probably what you want, though. More complex (but more powerful) would be <code>value: &amp;&#39;a Cell&lt;&#39;b&gt;</code> where <code>&#39;b</code> is declared in the struct params: <code>MyCellRep&lt;&#39;a, &#39;b&gt;</code>"}, {"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1434043541, "post_id": 30786105, "comment_id": 49624569, "body": "Yes I did you first change and ended up with Cell&lt;&#39;a&gt;, and then, yes the 2nd MyCellRep&lt;&#39;a,&#39;b&gt; intuitively became what I wanted."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 4, "last_activity_date": 1434039912, "last_edit_date": 1434039912, "creation_date": 1434039265, "answer_id": 30786105, "question_id": 30785915, "link": "https://stackoverflow.com/questions/30785915/lifetime-parameters-for-an-enum-within-a-struct/30786105#30786105", "title": "Lifetime parameters for an enum within a struct", "body": "<p>You (understandably) misinterpreted the error message:</p>\n\n<pre><code>14:22 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\nsrc\\lib.rs:14     value : &amp; 'a Cell ,\n</code></pre>\n\n<p>You thought \"But I provided the lifetime parameter! It is <code>'a</code>!\" However, the compiler is trying to tell you that you did not provide a lifetime parameter <em>for</em> Cell (not the reference to it):</p>\n\n<pre><code>Cell&lt;'a&gt;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1434043044, "post_id": 30787096, "comment_id": 49624271, "body": "To be fair, the arrow tip points to the left of the type, no surprise one wants to correct the reference instead of the (unseen) type parameter :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1434043143, "post_id": 30787096, "comment_id": 49624333, "body": "@mdup but the arrow <i>highlights</i> the problem in question, not just a single point. That is, the <code>^</code> and the <code>~</code> are both important. I really want to figure out how to improve this UX."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1434043487, "post_id": 30787096, "comment_id": 49624535, "body": "Agreed. Maybe the part designated by <code>^~~~</code> could be also highlighted by changing the term background color."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1434042309, "last_edit_date": 1495540681, "creation_date": 1434042309, "answer_id": 30787096, "question_id": 30785915, "link": "https://stackoverflow.com/questions/30785915/lifetime-parameters-for-an-enum-within-a-struct/30787096#30787096", "title": "Lifetime parameters for an enum within a struct", "body": "<p><a href=\"https://stackoverflow.com/a/30786105/155423\">mdup is correct</a>, but the <strong>error message helps you</strong>. For some reason, many people ignore the part of the error message that <em>points to the error</em>:</p>\n\n<pre><code>&lt;anon&gt;:7:16: 7:20 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\n&lt;anon&gt;:7     value: &amp;'a Cell,\n                        ^~~~\n</code></pre>\n\n<p>Sometimes, I want to submit a PR that makes the <code>^~~~~</code> blink in the terminal ^_^.</p>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4274, "favorite_count": 0, "accepted_answer_id": 30786105, "answer_count": 2, "score": 4, "last_activity_date": 1434061059, "creation_date": 1434038694, "last_edit_date": 1434061059, "question_id": 30785915, "link": "https://stackoverflow.com/questions/30785915/lifetime-parameters-for-an-enum-within-a-struct", "title": "Lifetime parameters for an enum within a struct", "body": "<p>I don't understand why I get an error with this type of structure</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Cell &lt;'a&gt; {\n    Str(&amp;'a str),\n    Double(&amp;'a f32),\n}\n\nstruct MyCellRep&lt;'a&gt; {\n    value: &amp;'a Cell,\n    ptr: *const u8,\n}\n\nimpl MyCellRep{\n    fn new_from_str(s: &amp;str) {\n        MyCellRep { value: Cell::Str(&amp;s), ptr: new_sCell(CString::new(&amp;s)) }\n    }\n\n    fn new_from_double(d: &amp;f32) {\n        MyCellRep { value: Cell::Double(&amp;d), ptr: new_dCell(&amp;d) }\n    }\n}\n</code></pre>\n\n<p>I get the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>14:22 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\nsrc\\lib.rs:14     value : &amp; 'a Cell ,\n</code></pre>\n\n<p>So I tried also</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyCellRep&lt;'a&gt; {\n    value: &amp;'a Cell + 'a,\n    ptr: *const u8,\n}\n</code></pre>\n\n<p>but got</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>14:22 error: expected a path on the left-hand side of `+`, not `&amp;'a Cell`\n</code></pre>\n\n<p>I presume the <code>Cell</code> should have the lifetime of <code>MyCellRep</code>, and <code>Cell::Str</code> and <code>Cell::Double</code> should at least have the lifetime of the <code>Cell</code>. </p>\n\n<p>Eventually what I was to be able to do is just say</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x = MyCellRef::new_from_str(\"foo\");\nlet y = MyCellRef::new_from_double(123.0);\n</code></pre>\n\n<p><strong>Update</strong>\nI would like to add, by changing the Cell definition, the rest of the code should also change to the following for anyone else searching answers.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub enum Cell&lt;'a&gt; {\n    Str(&amp;'a str),\n    Double(&amp;'a f32),\n}\n\n\nstruct MyCellRep&lt;'a&gt; {\n    value: Cell&lt;'a&gt;, // Ref to enum \n    ptr: *const u8, // Pointer to c struct\n}\n\nimpl&lt;'a&gt;  MyCellRep&lt;'a&gt; {\n    fn from_str(s: &amp;'a str) -&gt; DbaxCell&lt;'a&gt; {\n        MyCellRep { value: Cell::Str(&amp;s) , ptr: unsafe { new_sCell(CString::new(s).unwrap()) } }\n    }\n\n    fn from_double(d: &amp;'a f32) -&gt; DbaxCell {\n        MyCellRep{ value: Cell::Double(&amp;d) , ptr: unsafe { new_dCell(*d) } }\n    }\n}\n</code></pre>\n\n<p>What I love about Rust is just like OCaml, if it compiles it works :)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434040462, "post_id": 30784279, "comment_id": 49622780, "body": "There are many questions here with the same error. Please show that you have done the required legwork and explain how this is different than existing questions."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1434052808, "last_edit_date": 1434052808, "creation_date": 1434040708, "answer_id": 30786569, "question_id": 30784279, "link": "https://stackoverflow.com/questions/30784279/borrowed-value-does-not-live-long-enough/30786569#30786569", "title": "Borrowed value does not live long enough", "body": "<p>I believe the problem is here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn insert_user&lt;'a&gt;(trans: &amp;postgres::Transaction&lt;'a&gt;, user: &amp;User) -&gt; postgres::Result&lt;postgres::rows::Rows&lt;'a&gt;&gt; {\n</code></pre>\n\n<p>(I've changed the lifetime parameter name to some usual one)</p>\n\n<p>Here you are stating that lifetime in <code>Rows</code> parameter in the result should be the same as the lifetime in <code>Transaction</code> parameter (which is essentially a lifetime of <code>Connection</code> object). However, lifetime parameter of <code>Rows</code> equals to the lifetime of a <code>Statement</code>, and <code>Statement</code> value (created by the call of <code>prepare()</code> method) is a local variable, so it is strictly smaller than required (lifetimes of local variables are always smaller than lifetimes specified in parameters).</p>\n\n<p>This error is legitimate - Rust prevented an actual logic mistake here. <code>Rows</code> iterator requires a <code>Statement</code> to load its data, but in this case <code>Statement</code> is destroyed while <code>Rows</code> is still alive.</p>\n\n<p>What you need to do is to collect the data from <code>Rows</code> to some container (e.g. <code>Vec</code>) and return it. However, <code>insert_user()</code> seems to be a query which does not return anything from the database. For such queries you should use <a href=\"http://sfackler.github.io/rust-postgres/doc/v0.9.1/postgres/struct.Statement.html#method.execute\" rel=\"nofollow\"><code>execute()</code></a> method on <code>Statement</code>, and your function should look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn insert_user(trans: &amp;postgres::Transaction, user: &amp;User) -&gt; postgres::Result&lt;u64&gt; {\n    let query = \"INSERT INTO usr (reference, email) VALUES ($1, $2)\";\n    trans.prepare(query).unwrap().execute(&amp;[&amp;user.reference, &amp;user.email])\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 1, "accepted_answer_id": 30786569, "answer_count": 1, "score": 0, "last_activity_date": 1434060951, "creation_date": 1434034433, "last_edit_date": 1434060951, "question_id": 30784279, "link": "https://stackoverflow.com/questions/30784279/borrowed-value-does-not-live-long-enough", "title": "Borrowed value does not live long enough", "body": "<p>This is my code</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate postgres;\n\nuse postgres::{Connection, SslMode};\n\nstruct User {\n    reference: String,\n    email: String\n}\n\nstatic DB_URI: &amp;'static str = \"postgres://postgres:postgres@localhost/test\";\n\nfn main() {\n\n    let conn = Connection::connect(DB_URI, &amp;SslMode::None).unwrap();\n    let trans = conn.transaction().unwrap();\n\n    let user = User {\n        reference: \"123abc\".to_string(),\n        email: \"test@test.com\".to_string()\n    };\n\n    let result = insert_user(&amp;trans, &amp;user);\n\n    trans.set_commit();\n    trans.finish();\n\n}\n\nfn insert_user&lt;'_&gt;(trans: &amp;postgres::Transaction&lt;'_&gt;, user: &amp;User) -&gt; postgres::Result&lt;postgres::rows::Rows&lt;'_&gt;&gt; {\n    let query = \"INSERT INTO usr (reference, email) VALUES ($1, $2)\";\n    trans.prepare(query).unwrap().query(&amp;[&amp;user.reference, &amp;user.email])\n}\n</code></pre>\n\n<p>It's producing an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:31:2: 31:31 error: borrowed value does not live long enough\nsrc/main.rs:31  trans.prepare(query).unwrap().query(&amp;[&amp;user.reference, &amp;user.email])\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:29:114: 32:2 note: reference must be valid for the lifetime '_ as defined on the block at 29:113...\nsrc/main.rs:29 fn insert_user&lt;'_&gt;(trans: &amp;postgres::Transaction&lt;'_&gt;, user: &amp;User) -&gt; postgres::Result&lt;postgres::rows::Rows&lt;'_&gt;&gt; {\nsrc/main.rs:30  let query = \"INSERT INTO usr (reference, email) VALUES ($1, $2)\";\nsrc/main.rs:31  trans.prepare(query).unwrap().query(&amp;[&amp;user.reference, &amp;user.email])\nsrc/main.rs:32 }\nsrc/main.rs:29:114: 32:2 note: ...but borrowed value is only valid for the block at 29:113\nsrc/main.rs:29 fn insert_user&lt;'_&gt;(trans: &amp;postgres::Transaction&lt;'_&gt;, user: &amp;User) -&gt; postgres::Result&lt;postgres::rows::Rows&lt;'_&gt;&gt; {\nsrc/main.rs:30  let query = \"INSERT INTO usr (reference, email) VALUES ($1, $2)\";\nsrc/main.rs:31  trans.prepare(query).unwrap().query(&amp;[&amp;user.reference, &amp;user.email])\nsrc/main.rs:32 }\nerror: aborting due to previous error\nCould not compile `test`.\n</code></pre>\n\n<p>What is the problem here?</p>\n"}, {"tags": ["enums", "copy", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434035132, "post_id": 30782902, "comment_id": 49618992, "body": "I remember a discussion on automatically deriving pre-requisite traits in <code>derive</code> implementations; do you know whether it&#39;s still planned or if there were issues with the approach that got it rejected?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1474390835, "last_edit_date": 1474390835, "creation_date": 1434031000, "answer_id": 30782902, "question_id": 30782836, "link": "https://stackoverflow.com/questions/30782836/the-trait-clone-is-is-not-implemented-when-deriving-the-trait-copy-for-enum/30782902#30782902", "title": "The &quot;trait Clone is is not implemented&quot; when deriving the trait Copy for Enum", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noreferrer\"><code>Copy</code> trait is a subtrait of <code>Clone</code></a>, so you always need to implement <code>Clone</code> if you implement <code>Copy</code>:</p>\n\n<pre><code>#[derive(Copy, Clone)]\nenum MyEnum {\n    Test\n}\n</code></pre>\n\n<p>This makes sense, as both <code>Copy</code> and <code>Clone</code> are ways of duplicating an existing object, but with different semantics. <code>Copy</code> can duplicate an object by just copying the bits that make up the object (like <code>memcpy</code> in C). <code>Clone</code> can be more expensive, and could involve allocating memory or duplicating system resources. Anything that can be duplicated with <code>Copy</code> can also be duplicated with <code>Clone</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1836, "user_id": 2726965, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/40d4c49a770f83d4480cb85a5cdf7b78?s=128&d=identicon&r=PG", "display_name": "diogovk", "link": "https://stackoverflow.com/users/2726965/diogovk"}, "is_accepted": false, "score": 6, "last_activity_date": 1434032658, "last_edit_date": 1434032658, "creation_date": 1434031043, "answer_id": 30782919, "question_id": 30782836, "link": "https://stackoverflow.com/questions/30782836/the-trait-clone-is-is-not-implemented-when-deriving-the-trait-copy-for-enum/30782919#30782919", "title": "The &quot;trait Clone is is not implemented&quot; when deriving the trait Copy for Enum", "body": "<p>This happens because the trait <code>Copy</code>, depends on the trait <code>Clone</code>.\nThe compiler will not try to infer and implement the trait for you.\nSo you must explicitly implement the Clone trait as well.</p>\n\n<p>Like that:</p>\n\n<pre><code>#[derive(Copy,Clone)]\nenum MyEnum {\n  Test\n}\n</code></pre>\n"}], "owner": {"reputation": 3158, "user_id": 3604221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d324853472d306acefd11543ee3edc64?s=128&d=identicon&r=PG", "display_name": "Tiago Engel", "link": "https://stackoverflow.com/users/3604221/tiago-engel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3423, "favorite_count": 2, "accepted_answer_id": 30782902, "answer_count": 2, "score": 16, "last_activity_date": 1474390835, "creation_date": 1434030857, "question_id": 30782836, "link": "https://stackoverflow.com/questions/30782836/the-trait-clone-is-is-not-implemented-when-deriving-the-trait-copy-for-enum", "title": "The &quot;trait Clone is is not implemented&quot; when deriving the trait Copy for Enum", "body": "<p>The following code:</p>\n\n<pre><code>#[derive(Copy)]\nenum MyEnum {\n    Test\n}\n</code></pre>\n\n<p>Is giving me this error:\nerror: the trait <code>core::clone::Clone</code> is not implemented for the type <code>MyEnum</code> [E0277]</p>\n\n<p>Why is that the case, and how do I fix it?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1434029860, "post_id": 30782309, "comment_id": 49614768, "body": "It&#39;s exactly what it says. You&#39;ve given it the wrong number of type arguments. <a href=\"http://sfackler.github.io/rust-postgres/doc/v0.9.1/postgres/type.Result.html\" rel=\"nofollow noreferrer\"><code>Result</code></a> takes the type for the returned valid value."}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 2, "last_activity_date": 1434029840, "creation_date": 1434029840, "answer_id": 30782426, "question_id": 30782309, "link": "https://stackoverflow.com/questions/30782309/mismatch-in-number-types-of-arguments/30782426#30782426", "title": "Mismatch in Number/Types of Arguments", "body": "<p><code>Result</code> is defined as <code>postgres::Result&lt;T&gt;</code> (we say it is <em>generic over T</em>). Depending on the innards of the insert_user function, it could be <code>Result&lt;bool&gt;</code>, <code>Result&lt;u64&gt;</code>, <code>Result&lt;()&gt;</code> or something else entierly.</p>\n\n<p>For example, the <code>execute</code> method on <code>Transaction</code> returns a <code>Result&lt;u64&gt;</code>, so that is a likely variant.</p>\n"}, {"comments": [{"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1434031535, "post_id": 30782530, "comment_id": 49616207, "body": "Thanks for the trick advice, made some progress with it, but the compiler is still complaining, I&#39;m sure there&#39;s a reason."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434035074, "post_id": 30782530, "comment_id": 49618945, "body": "I would advise to reinstate the lifetime <code>&#39;a</code> you had, and use it instead of <code>&#39;_</code>, since the compiler is not inferring it."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1434035655, "post_id": 30782530, "comment_id": 49619370, "body": "@Caballero indeed you went just one step too far in copying the error message, because <code>&#39;_</code> is an anonymous lifetime and it&#39;s discouraged that you name a lifetime <code>&#39;_</code>. Usually they&#39;re called <code>&#39;a</code> or <code>&#39;b</code>. Seeing <a href=\"http://stackoverflow.com/questions/30784279/rust-borrowed-value-does-not-live-long-enough\">your second question in a row</a>, I suggest that maybe you want to pause writing code for a little while and get to know the language with the <a href=\"https://doc.rust-lang.org/book\" rel=\"nofollow noreferrer\">Rust book</a> (specifically here, the <a href=\"https://doc.rust-lang.org/book/lifetimes.html\" rel=\"nofollow noreferrer\">lifetimes section</a>)."}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1434039116, "post_id": 30782530, "comment_id": 49621910, "body": "@mdup that section doesn&#39;t help with my particular situation, all the examples are very simple."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 4, "last_activity_date": 1434030122, "creation_date": 1434030122, "answer_id": 30782530, "question_id": 30782309, "link": "https://stackoverflow.com/questions/30782309/mismatch-in-number-types-of-arguments/30782530#30782530", "title": "Mismatch in Number/Types of Arguments", "body": "<p>Looking at the <a href=\"http://sfackler.github.io/rust-postgres/doc/v0.9.1/postgres/type.Result.html\" rel=\"nofollow\">documentation</a> for the crate <code>postgres</code>, we can see that the type <code>postgres::Result</code> is generic over one type argument:</p>\n\n<pre><code>type Result&lt;T&gt; = Result&lt;T, Error&gt;;\n</code></pre>\n\n<p>Normally you would have two options:</p>\n\n<ol>\n<li>Specify the type yourself if you know what it is: <code>postgres::Result&lt;MyType&gt;</code></li>\n<li>Let the compiler infer it for you (if it has enough information elsewhere): <code>postgres::Result&lt;_&gt;</code></li>\n</ol>\n\n<p>However in a return type (what comes after the <code>-&gt;</code>) type inference is not triggered, so only option 1. is available. </p>\n\n<p>(Hint: you still have one trick up your sleeve to find out the desired type. You can try specifying the unit type: <code>... -&gt; postgres::Result&lt;()&gt;</code> and check if the compiler complains with an error such as \"expected <code>MyType</code>, found <code>()</code>\". This means you want to specify <code>... -&gt; postgres::Result&lt;MyType&gt;</code>.)</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1533, "favorite_count": 1, "accepted_answer_id": 30782530, "answer_count": 2, "score": 2, "last_activity_date": 1434062866, "creation_date": 1434029589, "last_edit_date": 1434062866, "question_id": 30782309, "link": "https://stackoverflow.com/questions/30782309/mismatch-in-number-types-of-arguments", "title": "Mismatch in Number/Types of Arguments", "body": "<p>This</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate postgres;\n\nuse postgres::{Connection, SslMode};\n\nstruct User {\n    reference: String,\n    email: String,\n    firstname: String,\n    lastname: String\n}\n\nstatic DB_URI: &amp;'static str = \"postgres://postgres:postgres@localhost/test\";\n\nfn main() {\n\n    let conn = Connection::connect(DB_URI, &amp;SslMode::None).unwrap();\n    let trans = conn.transaction().unwrap();\n\n    //...\n\n}\n\nfn insert_user&lt;'a&gt;(trans: &amp;'a postgres::Transaction, user: &amp;User) -&gt; &amp;'a postgres::Result {\n    //...\n}\n</code></pre>\n\n<p>is throwing an error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: wrong number of type arguments: expected 1, found 0 [E0243]\nfn insert_user&lt;'a&gt;(trans: &amp;'a postgres::Transaction, user: &amp;User) -&gt; &amp;'a postgres::Result {\n                                                                         ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>What is missing here? I just want to return a result of an executed query.</p>\n\n<p><strong>UPDATE</strong> So I modified the function line like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn insert_user(trans: &amp;postgres::Transaction, user: &amp;User) -&gt; &amp;postgres::Result&lt;()&gt; {\n</code></pre>\n\n<p>to trick the compiler into revealing the correct return type and it gave me this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>mismatched types:\n expected `core::result::Result&lt;(), postgres::error::Error&gt;`,\n    found `core::result::Result&lt;postgres::Rows&lt;'_&gt;, postgres::error::Error&gt;`\n</code></pre>\n\n<p>however when I tried to match the return type like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn insert_user(trans: &amp;postgres::Transaction, user: &amp;User) -&gt; &amp;postgres::Result&lt;postgres::Rows&lt;'_&gt;, postgres::error::Error&gt; {\n</code></pre>\n\n<p>it's now throwing a new error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: use of undeclared lifetime name `'_` [E0261]\nfn insert_user(trans: &amp;postgres::Transaction, user: &amp;User) -&gt; postgres::Result&lt;postgres::Rows&lt;'_&gt;, postgres::error::Error&gt; {\n                                                                                              ^~\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1434619914, "post_id": 30777871, "comment_id": 49860553, "body": "My solution for now will be to just not use macros in this case."}, {"owner": {"reputation": 3583, "user_id": 1391026, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/af98bdbeea8772f2d90d47d507098256?s=128&d=identicon&r=PG", "display_name": "musicmatze", "link": "https://stackoverflow.com/users/1391026/musicmatze"}, "edited": false, "score": 1, "creation_date": 1513869911, "post_id": 30777871, "comment_id": 82824327, "body": "I am not sure whether this question is still relevant, as you mention rustc 1.0.0 here..."}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 217, "favorite_count": 0, "answer_count": 0, "score": 10, "last_activity_date": 1434027446, "creation_date": 1434017450, "last_edit_date": 1434027446, "question_id": 30777871, "link": "https://stackoverflow.com/questions/30777871/how-to-make-include-work-with-macros-defined-in-external-crates", "title": "How to make `include!` work with macros defined in external crates?", "body": "<p>When using <a href=\"https://github.com/serde-rs/serde\" rel=\"noreferrer\">serde</a> in stable as recommended by the <a href=\"http://erickt.github.io/blog/2015/05/18/serde-0-dot-4-0-now-supports-macros-in-stable-rust/\" rel=\"noreferrer\">respective blog post</a>, one will have to use the built-in <code>include!</code> macro to pull in a file generated by <a href=\"https://github.com/serde-rs/serde/tree/master/serde_codegen\" rel=\"noreferrer\">serde-codegen</a>.</p>\n\n<p>The <a href=\"https://github.com/Byron/yup-oauth2/blob/a260b13868aaf667ef5379e4223ec0c94b78e26b/src/lib.rs#L69\" rel=\"noreferrer\">file linked here</a> shows this in a more complex example which can use <code>rustc</code> <em>nightly</em> as well as <code>rustc</code> <em>stable</em>.</p>\n\n<p>However, as the <a href=\"http://doc.rust-lang.org/std/macro.include!.html\" rel=\"noreferrer\">docs of <code>include!</code></a> suggest, it does not behave hygienically. </p>\n\n<p>What this means was unclear to me until I ran into the issue that macros defined in an external crate, <a href=\"https://github.com/Byron/yup-hyper-mock\" rel=\"noreferrer\">yup-hyper-mock</a>, were not defined at <em>include-time</em>. Some tests showed that even something like <code>extern crate foo-bar-snoo-snoo;</code> will not trigger an error at <em>include-time</em>, showing that it was not yet evaluated at all.</p>\n\n<p>The problem arises from <code>include!</code> trying to expand macros, and failing if these are coming from external crates which haven't been evaluated yet.</p>\n\n<p>An attempt of mine to define empty macros with the correct signature cause the <code>include!</code> macro to work, but the compile would fail later as <code>include!</code> would actually expand the macro right away, which was empty at the time of the include.</p>\n\n<p><strong>Is there a way to make <code>include!</code> work with macros defined in external crates?</strong> Alternatively, can you imagine a workaround to make my particular case work?</p>\n\n<p>Personally I think <code>include!</code> should not expand macros at all, but leave that to the next compile step which should bring in external crates - maybe we are looking at a bug in <code>rustc</code>, but I am not sure about that.</p>\n\n<h1>How to reproduce</h1>\n\n<p>Please note that both <em>stable</em> and <em>nightly</em> compilers show the same issues.</p>\n\n<pre><code>git clone --branch syntex https://github.com/Byron/yup-oauth2\ncd yup-oauth2\ngit reset --hard f59d97d\n\n# build and test fail because 'include!' runs before crates are pulled\n# in, but still expands macros\ncargo build\ncargo test\n</code></pre>\n\n<h1>Meta</h1>\n\n<p><em>stable</em></p>\n\n<pre><code>\u279c  yup-oauth2 git:(syntex) rustc --version --verbose\nrustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)\nbinary: rustc\ncommit-hash: a59de37e99060162a2674e3ff45409ac73595c0e\ncommit-date: 2015-05-13\nbuild-date: 2015-05-14\nhost: x86_64-apple-darwin\nrelease: 1.0.0\n</code></pre>\n\n<p><em>nightly</em></p>\n\n<pre><code>\u279c  yup-oauth2 git:(syntex) rustc --version --verbose\nrustc 1.2.0-nightly (2228ce10c 2015-06-09)\nbinary: rustc\ncommit-hash: 2228ce10c6d83c17b6346396aa7c7ef9082f1c04\ncommit-date: 2015-06-09\nhost: x86_64-apple-darwin\nrelease: 1.2.0-nightly\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434027645, "post_id": 30776520, "comment_id": 49613011, "body": "Please ask only <a href=\"http://meta.stackexchange.com/questions/39223/one-post-with-multiple-questions-or-multiple-posts\">one question per question</a>. This should either be about detecting EOF or how to close <code>stdin</code> / <code>stdout</code>, but not both."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1434052698, "last_edit_date": 1434052698, "creation_date": 1434016638, "answer_id": 30777494, "question_id": 30776520, "link": "https://stackoverflow.com/questions/30776520/closing-stdout-or-stdin/30777494#30777494", "title": "Closing stdout or stdin", "body": "<p>Some time ago there was <code>ErrorKind::EndOfFile</code> enum variant which was emitted upon a read operation when the source stream is closed. It seems that it didn't get to the new I/O library implementation, and instead <code>Read</code> trait has been changed to return 0 read bytes upon EOF. And indeed, this is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0517-io-os-reform.md#errors\" rel=\"nofollow\">specified</a> in I/O reform RFC. So yes, checking for zero is a valid way to detect end of stream in the current Rust.</p>\n\n<p>By the way, you can write <code>Ok(0)</code> instead of <code>Ok(i) if i == 0</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>match stdin.read_line(&amp;mut buf) {\n    Ok(0) =&gt; break,\n    ...\n}\n</code></pre>\n\n<p>As for how to close <code>stdout()</code>/<code>stderr()</code>, it seems that the current API does not provide a way to do it, unfortunately. It is probably a feature worth an RFC or at least an RFC issue.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "edited": false, "score": 1, "creation_date": 1478905356, "post_id": 30816545, "comment_id": 68353069, "body": "Actually, you close it by doing the following: <code>drop(child.stdin.take());</code>"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 1, "last_activity_date": 1434183209, "creation_date": 1434183209, "answer_id": 30816545, "question_id": 30776520, "link": "https://stackoverflow.com/questions/30776520/closing-stdout-or-stdin/30816545#30816545", "title": "Closing stdout or stdin", "body": "<p>Regarding my own sub-question on how to close stdout/stderr: The correct way is to use the <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.wait\" rel=\"nofollow\">wait</a>- or the <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.wait_with_output\" rel=\"nofollow\">wait_with_output</a>-method on a <code>process::Child</code>. Both methods close the subprocess's stdin before waiting for it to quit, eliminating the possibility of a deadlock between both processes.</p>\n"}], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1395, "favorite_count": 1, "accepted_answer_id": 30777494, "answer_count": 2, "score": 7, "last_activity_date": 1440753536, "creation_date": 1434014157, "last_edit_date": 1440753536, "question_id": 30776520, "link": "https://stackoverflow.com/questions/30776520/closing-stdout-or-stdin", "title": "Closing stdout or stdin", "body": "<p>Since files and streams are closed automatically when being dropped, but <code>io::stdin()</code> only providing a handle to the underlying stream, I fail to see how to explicitly close <code>stdin</code> or <code>stdout</code> or detect EOF on <code>stdin</code> in my program.</p>\n\n<p>Consider</p>\n\n<pre><code>fn main() {\n    let mut stdin = io::stdin();\n    let mut linebuffer = String::new();\n    loop {\n        match stdin.read_line(&amp;mut linebuffer) {\n            Ok(i) if i == 0 =&gt; { break; },\n            Ok(i) =&gt; {\n                println!(\"{} {}\", linebuffer, i);\n            },\n            Err(e) =&gt; { panic!(e); }\n        }\n        linebuffer.clear();\n    }\n}\n</code></pre>\n\n<p>Checking the number of bytes put into the buffer seems flaky because the pipe might get flushed with zero bytes having being written to it. Reading from a closed <code>stdin</code> should cause an <code>IOError</code>, but it doesn't.</p>\n\n<p>Somewhat related to that: How to explicitly close my own <code>stdout</code> / <code>stderr</code>?</p>\n"}, {"tags": ["concurrency", "rust", "ncurses"], "comments": [{"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434006970, "post_id": 30773358, "comment_id": 49598653, "body": "does the playpen work with external crates? I remember it didn&#39;t."}, {"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434012011, "post_id": 30773358, "comment_id": 49601974, "body": "Like Chris Morgan pointed out, the problem is a raw pointer, which does not support send. So figuring out how to implement send for a raw pointer (or wrap it in something that makes it so) is the way to go. I&#39;m not sure how."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434012384, "post_id": 30773358, "comment_id": 49602246, "body": "i think the safer alternative is to do all ncurses stuff in a thread and use channels to communicate with that thread. then your main thread simply sends commands to the ncurses thread instead of using ncurses directly"}, {"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434014056, "post_id": 30773358, "comment_id": 49603367, "body": "The IO needs to be non blocking as messages are written while it might be waiting for input."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434014280, "post_id": 30773358, "comment_id": 49603529, "body": "well... this might blow up in your face if used wrongly, but you can always do <code>unsafe impl Send for Wrapper {}</code> where <code>Wrapper</code> contains your pointer. Basically you are guaranteeing the compiler that you checked and there&#39;s not way this is thread-unsafe. If you did not do that, then the compiler is permitted to eat your laundry"}, {"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434031037, "post_id": 30773358, "comment_id": 49615776, "body": "This will be the perefered approach for now. There&#39;s some dark corners of the web covering non blocking IO in ncurses, but I don&#39;t see that working. Maybe it&#39;s worth experimenting with creating the window in the thread instead and see how ncurses handles it. Thanks for the help!"}, {"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434033033, "post_id": 30773358, "comment_id": 49617349, "body": "After some searching, <a href=\"https://stackoverflow.com/questions/14082887/ncurses-and-realtime-implemented-in-c-unix\" title=\"ncurses and realtime implemented in c unix\">stackoverflow.com/questions/14082887/&hellip;</a> is probably a better solution."}], "answers": [{"comments": [{"owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "edited": false, "score": 0, "creation_date": 1434031095, "post_id": 30773893, "comment_id": 49615827, "body": "Thanks for the help! I&#39;ll go with the unsafe approach for now."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1434006411, "creation_date": 1434006411, "answer_id": 30773893, "question_id": 30773358, "link": "https://stackoverflow.com/questions/30773358/moving-arc-mutex-ncurses-window-down-thread-still-doesnt-implement-send/30773893#30773893", "title": "Moving Arc Mutex Ncurses window down thread still doesn&#39;t implement send", "body": "<p><code>Arc&lt;T&gt;</code> implements <code>Send</code> where <code>T</code> implements both <code>Send</code> and <code>Sync</code>. <code>Mutex&lt;T&gt;</code> implements <code>Send</code> and <code>Sync</code> where <code>T</code> implements <code>Send</code>. So <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> only implements <code>Send</code> if <code>T</code> implements <code>Send</code>. Remember that <a href=\"http://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"nofollow\"><code>Send</code></a> means \u201cTypes able to be transferred across thread boundaries.\u201d <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> allows access to its contents from multiple threads, purely taking care of ownership and mutability issues, so if the underlying type cannot be transferred across thread boundaries it won\u2019t help. You may well need to do all your ncurses operations from one thread.</p>\n\n<p><a href=\"http://doc.rust-lang.org/std/primitive.pointer.html\" rel=\"nofollow\">Raw pointers</a> explicitly do not implement <code>Send</code> because there can be no guarantees about it. You can construct types on top of it which explicitly implement <code>Send</code>, thus providing a guarantee that the contained raw pointer is in fact safe for transferring across thread boundaries.</p>\n"}], "owner": {"reputation": 431, "user_id": 558617, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b5cc9ec9d382c06d89cc4b785a67951e?s=128&d=identicon&r=PG", "display_name": "Timon Vonk", "link": "https://stackoverflow.com/users/558617/timon-vonk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 181, "favorite_count": 0, "accepted_answer_id": 30773893, "answer_count": 1, "score": 3, "last_activity_date": 1434006411, "creation_date": 1434004595, "question_id": 30773358, "link": "https://stackoverflow.com/questions/30773358/moving-arc-mutex-ncurses-window-down-thread-still-doesnt-implement-send", "title": "Moving Arc Mutex Ncurses window down thread still doesn&#39;t implement send", "body": "<p>I'm building an ncurses interface for a little thing I'm working on. For the input, I want to read it non blocking. I figured I could wrap the WINDOW in an Arc Mutex but this doesn't seem to work, as it still complains about send. Is this because the implementation of ncurses is unsafe? How can I solve this? Ideally, I'd have this work with a callback instead of the tx, so I can cut the dependency from the view up the stack, but I couldn't get that closure to Send either.</p>\n\n<p>I'm using this library: <a href=\"https://github.com/jeaye/ncurses-rs\" rel=\"nofollow\">https://github.com/jeaye/ncurses-rs</a></p>\n\n<p>Simplified code:</p>\n\n<pre><code>pub struct View {\n    max_x: i32,\n    max_y: i32,\n    messages_window: WINDOW,\n    input_window: Arc&lt;Mutex&lt;WINDOW&gt;&gt;\n}\n\npub fn init(&amp;mut self, input_tx: mpsc::Sender&lt;DispatchMessage&gt;) {\n        let input_window = self.input_window.clone();\n        thread::spawn(move || {\n            loop {\n                let input_window = input_window.lock().unwrap();\n                draw_prompt(input_window);\n                let input = prompt_input(input_window);\n                input_tx.send(input_to_message(input)).unwrap();\n            }\n        });\n}\n\nfn prompt_input(input: WINDOW) -&gt; String {\n    let mut string = String::new();\n    wgetstr(input, &amp;mut string);\n    string\n}\n\nfn draw_prompt(input: WINDOW) {\n    wclear(input);\n    let top = 0 as chtype;\n    let bottom = ' ' as chtype;\n    let empty = ' ' as chtype;\n    wborder(input, empty,empty,top,bottom,empty,empty,empty,empty);\n    mvwprintw(input, 1, 1, \"&gt;&gt; \");\n    wrefresh(input);\n}\n</code></pre>\n\n<p>And the errors I get:</p>\n\n<pre><code>src/view.rs:40:33: 40:45 error: mismatched types:\n expected `*mut ncurses::ll::WINDOW_impl`,\n    found `std::sync::mutex::MutexGuard&lt;'_, *mut ncurses::ll::WINDOW_impl&gt;`\n(expected *-ptr,\n    found struct `std::sync::mutex::MutexGuard`) [E0308]\nsrc/view.rs:40                     draw_prompt(input_window);\n                                               ^~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/view.rs:37:27: 44:14 note: expansion site\nsrc/view.rs:40:33: 40:45 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/view.rs:41:46: 41:58 error: mismatched types:\n expected `*mut ncurses::ll::WINDOW_impl`,\n    found `std::sync::mutex::MutexGuard&lt;'_, *mut ncurses::ll::WINDOW_impl&gt;`\n(expected *-ptr,\n    found struct `std::sync::mutex::MutexGuard`) [E0308]\nsrc/view.rs:41                     let input = prompt_input(input_window);\n                                                            ^~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/view.rs:37:27: 44:14 note: expansion site\nsrc/view.rs:41:46: 41:58 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/view.rs:37:13: 37:26 error: the trait `core::marker::Send` is not implemented for the type `*mut ncurses::ll::WINDOW_impl` [E0277]\nsrc/view.rs:37             thread::spawn(move || {\n                           ^~~~~~~~~~~~~\nsrc/view.rs:37:13: 37:26 note: `*mut ncurses::ll::WINDOW_impl` cannot be sent between threads safely\nsrc/view.rs:37             thread::spawn(move || {\n                           ^~~~~~~~~~~~~\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Manually dereferencing the window removes the type errors, but I figured I'd leave it in as it might be an indication of what's wrong.</p>\n"}, {"tags": ["closures", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433998707, "post_id": 30771201, "comment_id": 49594958, "body": "This is great, thanks! I managed to work out the closure version here as well: <a href=\"http://is.gd/8UwpjT\" rel=\"nofollow noreferrer\">is.gd/8UwpjT</a> -- Adding <code>&#39;static</code> always feels like a dirty choice. The docs say that it means the item will last for the life of the program. Is this bad practice? When is it acceptable to use static lifetimes?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1434000533, "post_id": 30771201, "comment_id": 49595585, "body": "After some experimentation, I <i>think</i> I get it... <a href=\"http://is.gd/8KWutk\" rel=\"nofollow noreferrer\">is.gd/8KWutk</a> <code>&#39;static</code> means that the given Trait is static -- not the item being passed in! This makes more sense."}], "tags": [], "owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "is_accepted": true, "score": 5, "last_activity_date": 1433994411, "creation_date": 1433994411, "answer_id": 30771201, "question_id": 30770608, "link": "https://stackoverflow.com/questions/30770608/generic-fn-channel-and-thread-spawn/30771201#30771201", "title": "Generic fn, channel, and thread spawn", "body": "<p>The error message suggests adding a <code>'static</code> bound to the type parameter <code>T</code>.  If you do this, it will get rid of the first error:</p>\n\n<pre><code>fn run&lt;T: Send + 'static&gt;(task: fn() -&gt; T) -&gt; T\n</code></pre>\n\n<p>The <code>'static</code> bound is needed to guarantee that the value returned by <code>task</code> can outlive the function where <code>task</code> runs.  <a href=\"http://doc.rust-lang.org/book/lifetimes.html#%27static\">Read more about the <code>'static</code> lifetime.</a></p>\n\n<p>The second error is that you are passing a closure, while <code>run</code> expects a function pointer.  One way to fix this is by changing <code>task</code> from a closure to a fn:</p>\n\n<pre><code>    fn task() -&gt; u32 { 1 + 2 }\n</code></pre>\n\n<p>Here's the complete working code:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc::channel;\n\nfn run&lt;T: Send + 'static&gt;(task: fn() -&gt; T) -&gt; T {\n    let (tx, rx) = channel();\n    thread::spawn(move || {\n        tx.send(task());\n    });\n    rx.recv().unwrap()\n}\n\nfn main() {\n    fn task() -&gt; u32 { 1 + 2 }\n    let result = run(task);\n    println!(\"{}\", result);\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 30771201, "answer_count": 1, "score": 5, "last_activity_date": 1434047615, "creation_date": 1433990257, "last_edit_date": 1434047615, "question_id": 30770608, "link": "https://stackoverflow.com/questions/30770608/generic-fn-channel-and-thread-spawn", "title": "Generic fn, channel, and thread spawn", "body": "<p>I have this code here: (<a href=\"http://is.gd/WGVOGf\" rel=\"nofollow\">Playground link</a>)</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc::channel;\n\nfn run&lt;T: Send&gt;(task: fn() -&gt; T) -&gt; T {\n    let (tx, rx) = channel();\n    thread::spawn(move || {\n        tx.send(task());\n    });\n    rx.recv().unwrap()\n}\n\nfn main() {\n    let task = || 1 + 2;\n\n    let result = run(task);\n\n    println!(\"{}\", result);\n}\n</code></pre>\n\n<p>But I'm getting a lifetime error I can't figure out.</p>\n\n<pre><code>&lt;anon&gt;:6:5: 6:18 error: the parameter type `T` may not live long enough [E0310]\n&lt;anon&gt;:6     thread::spawn(move || {\n             ^~~~~~~~~~~~~\n&lt;anon&gt;:6:5: 6:18 help: consider adding an explicit lifetime bound `T: 'static`...\n&lt;anon&gt;:6:5: 6:18 note: ...so that captured variable `tx` does not outlive the enclosing closure\n&lt;anon&gt;:6     thread::spawn(move || {\n             ^~~~~~~~~~~~~\n&lt;anon&gt;:15:22: 15:26 error: mismatched types:\n expected `fn() -&gt; _`,\n    found `[closure &lt;anon&gt;:13:16: 13:24]`\n(expected fn pointer,\n    found closure) [E0308]\n&lt;anon&gt;:15     let result = run(task);\n                               ^~~~\n</code></pre>\n\n<p>Any suggestions? Thanks!</p>\n"}]