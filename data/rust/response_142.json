[{"tags": ["rust", "static-files", "iron"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1506553194, "post_id": 46455009, "comment_id": 79872366, "body": "Since this isn&#39;t an answer, Iron does have <a href=\"https://github.com/iron/staticfile\" rel=\"nofollow noreferrer\">static file middleware</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1506554458, "post_id": 46455009, "comment_id": 79872665, "body": "@squiguy I think that&#39;s where <code>Static::new</code> comes from in this question, but OP didn&#39;t provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> so who knows..."}], "answers": [{"comments": [{"owner": {"reputation": 23, "user_id": 6943253, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LyvvX.png?s=128&g=1", "display_name": "FIL1994", "link": "https://stackoverflow.com/users/6943253/fil1994"}, "edited": false, "score": 0, "creation_date": 1506557677, "post_id": 46458638, "comment_id": 79873421, "body": "Thanks so much for your help! That works. It just serves it as plain text. How do you specify that it is an html file?"}, {"owner": {"reputation": 23, "user_id": 6943253, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LyvvX.png?s=128&g=1", "display_name": "FIL1994", "link": "https://stackoverflow.com/users/6943253/fil1994"}, "edited": false, "score": 0, "creation_date": 1506557912, "post_id": 46458638, "comment_id": 79873464, "body": "Nevermind. I found it here: <a href=\"https://stackoverflow.com/questions/34979970/how-do-i-send-a-file-included-with-include-bytes-as-an-iron-response\" title=\"how do i send a file included with include bytes as an iron response\">stackoverflow.com/questions/34979970/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1506554407, "creation_date": 1506554407, "answer_id": 46458638, "question_id": 46455009, "link": "https://stackoverflow.com/questions/46455009/how-to-serve-a-fallback-file-using-irons-staticfile-when-the-original-file-is-n/46458638#46458638", "title": "How to serve a fallback file using Iron&#39;s staticfile when the original file is not found?", "body": "<p>As discussed on <a href=\"https://github.com/iron/staticfile/issues/78\" rel=\"nofollow noreferrer\">staticfile issue #78 titled \"Static with fallback\"</a>, you can wrap the handler, check for a 404, and serve a file instead:</p>\n\n<pre><code>struct Fallback;\n\nimpl AroundMiddleware for Fallback {\n    fn around(self, handler: Box&lt;Handler&gt;) -&gt; Box&lt;Handler&gt; {\n        Box::new(FallbackHandler(handler))\n    }\n}\n\nstruct FallbackHandler(Box&lt;Handler&gt;);\n\nimpl Handler for FallbackHandler {\n    fn handle(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let resp = self.0.handle(req);\n\n        match resp {\n            Err(err) =&gt; {\n                match err.response.status {\n                    Some(status::NotFound) =&gt; {\n                        let file = File::open(\"/tmp/example\").unwrap();\n                        Ok(Response::with((status::Ok, file)))\n                    }\n                    _ =&gt; Err(err),\n                }\n            }\n            other =&gt; other\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 6943253, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LyvvX.png?s=128&g=1", "display_name": "FIL1994", "link": "https://stackoverflow.com/users/6943253/fil1994"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 293, "favorite_count": 0, "accepted_answer_id": 46458638, "answer_count": 1, "score": 0, "last_activity_date": 1506554407, "creation_date": 1506537538, "last_edit_date": 1506553106, "question_id": 46455009, "link": "https://stackoverflow.com/questions/46455009/how-to-serve-a-fallback-file-using-irons-staticfile-when-the-original-file-is-n", "title": "How to serve a fallback file using Iron&#39;s staticfile when the original file is not found?", "body": "<p>I'm using Iron to serve a React site. I'm trying to get it to serve index.html if the file or directory does not exist.</p>\n\n<pre><code>fn staticHandler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let url = Url::parse(\"http://localhost:1393\").unwrap();\n    let getFile_result = Static::handle(&amp;Static::new(Path::new(\"../html\")), req);\n\n    match getFile_result {\n        Ok(_) =&gt; getFile_result,\n        Err(err) =&gt; {\n            Static::handle(\n                // returns 404 error - ../html/index.html returns 500\n                &amp;Static::new(Path::new(\"localhost:1393/index.html\")),\n                req,\n            )\n        }\n    }\n}\n</code></pre>\n\n<p>If I go to localhost:1393 I get my index page if I go to localhost:1393/not-a-directory I just get an error.</p>\n\n<p>Is there a way to redirect (without changing the url) or some other solution?</p>\n\n<p>This is not a duplicate of <a href=\"https://stackoverflow.com/questions/43284994/how-to-change-irons-default-404-behaviour\">How to change Iron&#39;s default 404 behaviour?</a> because I'm trying to handle when the static asset the user requests does not exist, not when the route is not defined.</p>\n"}, {"tags": ["rust", "cell", "lifetime"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1506464789, "post_id": 46436434, "comment_id": 79830447, "body": "See <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/subtyping.html</a> for an explanation of why it would be unsafe to let <code>Cell</code> be variant over the stored type."}, {"owner": {"reputation": 168655, "user_id": 582, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ev49G.png?s=128&g=1", "display_name": "Lily Ballard", "link": "https://stackoverflow.com/users/582/lily-ballard"}, "edited": false, "score": 1, "creation_date": 1506466392, "post_id": 46436434, "comment_id": 79830837, "body": "To summarize: <code>Cell&lt;T&gt;</code> is invariant over <code>T</code> because <code>Cell</code> can be mutated when stored in a <code>&amp;</code>-ref, and allowing variance would mean you could store a reference with a shorter lifetime in the <code>Cell</code> (<code>let x2: &amp;Cell&lt;&amp;&#39;a u32&gt; = &amp;x; x2.set(somethingWithLifetimeA); x.get() &#47;&#47; returns &amp;&#39;b T that really only lives for &#39;a</code>)"}, {"owner": {"reputation": 41, "user_id": 8679217, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5634bd7f33ec2cc80077a4348da5018b?s=128&d=identicon&r=PG&f=1", "display_name": "Rafalh", "link": "https://stackoverflow.com/users/8679217/rafalh"}, "edited": false, "score": 0, "creation_date": 1506471313, "post_id": 46436434, "comment_id": 79831965, "body": "Thank you for pointing me to materials and providing examples of how variance works! This helped me to understand mr. borrow checker and come up with resolution for my problem. Didnt expect to find resolution so quickly :)"}], "answers": [{"tags": [], "owner": {"reputation": 41, "user_id": 8679217, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5634bd7f33ec2cc80077a4348da5018b?s=128&d=identicon&r=PG&f=1", "display_name": "Rafalh", "link": "https://stackoverflow.com/users/8679217/rafalh"}, "is_accepted": true, "score": 3, "last_activity_date": 1506474548, "last_edit_date": 1506474548, "creation_date": 1506471630, "answer_id": 46437620, "question_id": 46436434, "link": "https://stackoverflow.com/questions/46436434/why-are-cells-special-for-the-borrow-checker/46437620#46437620", "title": "Why are `Cell`s special for the borrow checker?", "body": "<p>As explained in the comments, my problem was caused by <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"nofollow noreferrer\"><code>Cell</code> type invariance</a>. I managed to solve my original problem by using two lifetimes instead of using the same lifetime everywhere. Now <code>&amp;self</code> is borrowed in <code>foo</code> for a shorter lifetime than <code>'a</code>:</p>\n\n<pre><code>struct A&lt;'a&gt; {\n    x: RefCell&lt;&amp;'a u32&gt;,\n}\n\nimpl &lt;'a&gt; A&lt;'a&gt; {\n    fn new(x: &amp;'a u32) -&gt; A&lt;'a&gt; {\n        A {\n            x: RefCell::new(x),\n        }\n    }\n\n    fn foo&lt;'b&gt;(&amp;'b self) -&gt; B&lt;'b, 'a&gt; {\n        B {\n            x: &amp;self.x,\n        }\n    }\n}\n\nstruct B&lt;'b, 'a: 'b&gt; {\n    x: &amp;'b RefCell&lt;&amp;'a u32&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 8679217, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5634bd7f33ec2cc80077a4348da5018b?s=128&d=identicon&r=PG&f=1", "display_name": "Rafalh", "link": "https://stackoverflow.com/users/8679217/rafalh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 187, "favorite_count": 0, "closed_date": 1506474458, "accepted_answer_id": 46437620, "answer_count": 1, "score": 1, "last_activity_date": 1506474548, "creation_date": 1506462921, "last_edit_date": 1506463194, "question_id": 46436434, "link": "https://stackoverflow.com/questions/46436434/why-are-cells-special-for-the-borrow-checker", "closed_reason": "Duplicate", "title": "Why are `Cell`s special for the borrow checker?", "body": "<p>I have a problem with lifetimes of <code>Cell</code> (<code>UnsafeCell</code>/<code>RefCell</code>/...) references. From my understanding this code should compile:</p>\n\n<pre><code>fn test1&lt;'a, 'b: 'a&gt;(x: Cell&lt;&amp;'b u32&gt;) {\n    let x2: Cell&lt;&amp;'a u32&gt; = x;\n}\n</code></pre>\n\n<p>But it produces an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:29\n  |\n4 |     let x2: Cell&lt;&amp;'a u32&gt; = x;\n  |                             ^ lifetime mismatch\n  |\n  = note: expected type `std::cell::Cell&lt;&amp;'a u32&gt;`\n             found type `std::cell::Cell&lt;&amp;'b u32&gt;`\nnote: the lifetime 'a as defined on the function body at 3:1...\n --&gt; src/main.rs:3:1\n  |\n3 | / fn test1&lt;'a, 'b: 'a&gt;(x: Cell&lt;&amp;'b u32&gt;) {\n4 | |     let x2: Cell&lt;&amp;'a u32&gt; = x;\n5 | | }\n  | |_^\nnote: ...does not necessarily outlive the lifetime 'b as defined on the function body at 3:1\n --&gt; src/main.rs:3:1\n  |\n3 | / fn test1&lt;'a, 'b: 'a&gt;(x: Cell&lt;&amp;'b u32&gt;) {\n4 | |     let x2: Cell&lt;&amp;'a u32&gt; = x;\n5 | | }\n  | |_^\n</code></pre>\n\n<p>I think <code>:</code> in <code>&lt;&gt;</code> is not well-known operator but I found it in some RFC when trying to resolve my problem.</p>\n\n<p>I should be able to make a <code>Cell</code> with shorter lifetime out of one with longer. When I replace <code>Cell</code> type with some dummy wrapper everything works fine, so from my experiments it seems <code>Cell</code> (<code>UnsafeCell</code> etc) is treated specially when dealing with reference lifetimes.</p>\n\n<p>This is not my original problem. I wanted to have some shared state between multiple structures - one main struct with <code>RefCell</code> and child structs with reference to <code>RefCell</code> but I cant get borrow checker happy without borrowing self for lifetime of entire object. See:</p>\n\n<pre><code>struct A&lt;'a&gt; {\n    x: RefCell&lt;&amp;'a u32&gt;,\n}\n\nimpl&lt;'a&gt; A&lt;'a&gt; {\n    fn new(x: &amp;'a u32) -&gt; A&lt;'a&gt; {\n        A { x: RefCell::new(x) }\n    }\n\n    fn foo(&amp;self) -&gt; B&lt;'a&gt; {\n        B { x: &amp;self.x }\n    }\n}\n\nstruct B&lt;'a&gt; {\n    x: &amp;'a RefCell&lt;&amp;'a u32&gt;,\n}\n</code></pre>\n\n<p>If I add lifetime <code>'a</code> to <code>self</code> in <code>foo</code>, it compiles but then fails for this code:</p>\n\n<pre><code>let fs = A::new(&amp;x);\n{\n    fs.foo();\n}\nlet fs2 = fs;\n</code></pre>\n\n<p>Error: error[E0505]: cannot move out of <code>fs</code> because it is borrowed</p>\n\n<p>Is some other method to implement shared state between objects? I'm using a single thread so theres no synchronization problem for now.</p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 5, "last_activity_date": 1506462015, "last_edit_date": 1506462015, "creation_date": 1506457049, "answer_id": 46435093, "question_id": 46434688, "link": "https://stackoverflow.com/questions/46434688/swapping-values-between-two-hashmaps/46435093#46435093", "title": "Swapping values between two hashmaps", "body": "<p>You're giving references to references where you should be giving references.</p>\n\n<pre><code>&amp;mut y.get_mut()\n</code></pre>\n\n<p>for instance is</p>\n\n<pre><code>&amp;mut &amp;mut ExpensiveStruct\n</code></pre>\n\n<p>and you're having a simular issue with</p>\n\n<pre><code>match hm1.get_mut(&amp;1) {\n    Some(ref mut x) =&gt;\n</code></pre>\n\n<p>Your code works as expected when the types are trimmed down to <code>&amp;mut ExpensiveStruct</code>:</p>\n\n<pre><code>match hm1.get_mut(&amp;1) {\n    Some(x) =&gt; match hm.entry(1) {\n        Entry::Occupied(mut y) =&gt; if y.get().replace {\n            mem::swap(x, y.get_mut());\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=e99c030f36441f5c73fa65f9b2eb0588&amp;version=stable\" rel=\"nofollow noreferrer\">On the Playground</a>)</p>\n\n<p>Note that the <code>ref mut</code> is removed, because <code>hm1.get_mut(&amp;1)</code> already returns an <code>Option</code> for a mutable reference, and the <code>&amp;mut</code> is removed because <code>y.get_mut()</code> already returns a reference.</p>\n"}], "owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 283, "favorite_count": 0, "accepted_answer_id": 46435093, "answer_count": 1, "score": 2, "last_activity_date": 1580917386, "creation_date": 1506455483, "last_edit_date": 1580917386, "question_id": 46434688, "link": "https://stackoverflow.com/questions/46434688/swapping-values-between-two-hashmaps", "title": "Swapping values between two hashmaps", "body": "<p>Edit Note: This code now compile see <a href=\"https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes\">What are non-lexical lifetimes?</a>.</p>\n\n<hr>\n\n<p>I have two <code>HashMap</code>s and want to swap a value between them under certain conditions. If the key does not exist in the second <code>HashMap</code>, it should be inserted. I do not want to clone the value, since that is too expensive.</p>\n\n<p>The (simplified) critical code that is not working is as follows:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry;\nuse std::mem;\n\n#[derive(Debug)]\nstruct ExpensiveStruct {\n    replace: bool,\n    // imagine a lot of heap data here\n}\n\nfn main() {\n    let mut hm : HashMap&lt;usize, ExpensiveStruct&gt; = HashMap::new();\n    let mut hm1 : HashMap&lt;usize, ExpensiveStruct&gt; = HashMap::new();\n\n    let dummy = ExpensiveStruct { replace: false };\n\n    hm.insert(1, ExpensiveStruct { replace: true});\n    hm1.insert(1, ExpensiveStruct { replace: true});\n\n    match hm1.get_mut(&amp;1) {\n        Some(ref mut x) =&gt;\n            match hm.entry(1) {\n                Entry::Occupied(mut y) =&gt; { if y.get().replace { \n                    mem::swap(x, &amp;mut y.get_mut()); \n                    } \n                },\n                Entry::Vacant(y) =&gt; { y.insert(mem::replace(x, dummy)); }\n            },\n        None =&gt; {}\n    }\n\n    println!(\"{:?}\", hm);\n}\n</code></pre>\n\n<p>(On the <a href=\"https://play.rust-lang.org/?gist=205ed8f3bafabb8e3da30a0cb5a3633b&amp;version=stable\" rel=\"nofollow noreferrer\">Rust Playground</a>)</p>\n\n<p>I get the error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `y` does not live long enough\n  --&gt; src/main.rs:28:9\n   |\n23 |                 mem::swap(x, &amp;mut y.get_mut());\n   |                                   - borrow occurs here\n...\n28 |         },\n   |         ^ `y` dropped here while still borrowed\n29 |         None =&gt; {}\n30 |     }\n   |     - borrowed value needs to live until here\n</code></pre>\n\n<p>I am really confused about this borrow problem and I do not see a way to fix it. If I replace the <code>Entry</code> by a <code>match hm.get_mut(1)</code>, I cannot insert in the <code>None</code> case, since the matching mutably borrows the <code>HashMap</code>.</p>\n"}, {"tags": ["generics", "error-handling", "rust", "default"], "comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 5, "creation_date": 1506393631, "post_id": 46416960, "comment_id": 79791660, "body": "See the <code>Default</code> trait: <a href=\"https://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/default/trait.Default.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 10, "last_activity_date": 1506422264, "last_edit_date": 1506422264, "creation_date": 1506417744, "answer_id": 46422541, "question_id": 46416960, "link": "https://stackoverflow.com/questions/46416960/generic-placeholders-or-default-values-in-rust/46422541#46422541", "title": "Generic placeholders or default values in Rust", "body": "<p>You probably are looking for <a href=\"https://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"noreferrer\"><code>Default</code></a>.</p>\n\n<p>For example:</p>\n\n<pre><code>pub struct Cmd&lt;K, E&gt; {}\n\nimpl&lt;K, E: Default&gt; Cmd&lt;K, E&gt; {\n    pub fn invoke(&amp;mut self, cmd_name: &amp;str) -&gt; Result&lt;K, E&gt; {\n        let cmd_to_invoke = self.cmds.iter_mut().find(|cmd| cmd.name == cmd_name);\n        if let Some(cmd) = cmd_to_invoke {\n            cmd.invoke()\n        } else {\n            // Some default / placeholder value for E\n            Err(Default::default())\n        }\n    }\n}\n</code></pre>\n\n<p>It's worth noting though that most error types in <code>std</code> and popular crates do not implement <code>Default</code>. </p>\n\n<p>The idiomatic way of dealing with multiple error types in Rust is to define your own error <code>enum</code> for your application, library or component, which implements <code>From</code> for each possible underlying error type. This generally makes code simpler and easier to read, and works very nicely with the <code>?</code> operator. <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html#examples\" rel=\"noreferrer\">Here is an example</a>.</p>\n\n<p>If you are writing a library which really must work with <em>any</em> error type, then this won't work. In that case, you are probably left with constraining <code>E</code> to the <code>std::error::Error</code> trait and then making a custom error type which can be converted from that, possibly keeping reference to the underlying error as a trait object.</p>\n"}], "owner": {"reputation": 982, "user_id": 5737039, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/6hjdN.jpg?s=128&g=1", "display_name": "John Stritenberger", "link": "https://stackoverflow.com/users/5737039/john-stritenberger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1065, "favorite_count": 1, "accepted_answer_id": 46422541, "answer_count": 1, "score": 6, "last_activity_date": 1551785279, "creation_date": 1506393178, "last_edit_date": 1551785279, "question_id": 46416960, "link": "https://stackoverflow.com/questions/46416960/generic-placeholders-or-default-values-in-rust", "title": "Generic placeholders or default values in Rust", "body": "<p>I'm trying to write a generic command line parser. I'm having trouble with \"default\" values for generic types. <code>cmd.invoke()</code> returns a <code>Result&lt;K, E&gt;</code>, so there's no problem there, but how do I represent a placeholder or default value for <code>E</code> when <code>cmd_to_invoke</code> is a <code>None</code>? In C#, I could use <code>default(E)</code>. Is there a construct like this in Rust?</p>\n\n<pre><code>pub struct Cmd&lt;K, E&gt; {\n    cmds: Vec&lt;Cmd&lt;K, E&gt;&gt;,\n}\n\nimpl&lt;K, E&gt; Cmd&lt;K, E&gt; {\n    pub fn invoke(&amp;mut self, cmd_name: &amp;str) -&gt; Result&lt;K, E&gt; {\n        let cmd_to_invoke = self.cmds.iter_mut().find(|cmd| cmd.name == cmd_name);\n        if let Some(cmd) = cmd_to_invoke {\n            cmd.invoke()\n        } else {\n            // Some default / placeholder value for E\n            Err(/* ? */)\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506359483, "post_id": 46410058, "comment_id": 79778831, "body": "Please feel free to come hang out with us in the <a href=\"https://gitter.im/avr-rust/Lobby\" rel=\"nofollow noreferrer\">avr-rust gitter channel</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506359915, "post_id": 46410058, "comment_id": 79779045, "body": "The duplicates answer <a href=\"https://play.rust-lang.org/?gist=5b0ae312cb0f19fc0bcd40a3d7de37b1&amp;version=stable\" rel=\"nofollow noreferrer\">applied to your question</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1506362104, "post_id": 46410058, "comment_id": 79780213, "body": "Your type <code>Menu</code> does not guarantee that the <i>trait object</i> <code>&amp;MenuOption</code> implements <code>Sync</code>, so there&#39;s no guarantee that an arbitrary <code>Menu</code> can be stored in static storage."}], "owner": {"reputation": 1641, "user_id": 1329075, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/34e5fc21fefdb23ecfbf381cf5cce26d?s=128&d=identicon&r=PG", "display_name": "neu-rah", "link": "https://stackoverflow.com/users/1329075/neu-rah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 43, "favorite_count": 0, "closed_date": 1506359892, "answer_count": 0, "score": 0, "last_activity_date": 1506359767, "creation_date": 1506357354, "last_edit_date": 1506359337, "question_id": 46410058, "link": "https://stackoverflow.com/questions/46410058/error-sharing-static-data-with-constraints", "closed_reason": "Duplicate", "title": "error sharing static data with constraints", "body": "<p>I'm trying to define static non-mutable data, to use them in AVR's flash memory (hence static), but I'm stuck on this case (this is a resume).</p>\n\n<pre><code>trait MenuOption {\n    fn get_title(&amp;self) -&gt; String;\n}\n\nstruct Op&lt;'a&gt; {\n    title: &amp;'a str,\n}\n\nimpl MenuOption for Op&lt;'static&gt; {\n    fn get_title(&amp;self) -&gt; String {\n        self.title.to_string()\n    }\n}\n\nstruct Menu&lt;'a&gt; {\n    options: &amp;'a [&amp;'a MenuOption],\n}\n\nstatic MAIN_MENU: Menu = Menu {\n    options: &amp;[&amp;Op { title: \"Op1\" }],\n};\n\nfn main() {}\n</code></pre>\n\n<p>This code gives me this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `MenuOption + 'static: std::marker::Sync` is not satisfied in `Menu&lt;'static&gt;`\n  --&gt; src/main.rs:19:1\n   |\n19 | / static MAIN_MENU: Menu = Menu {\n20 | |     options: &amp;[&amp;Op { title: \"Op1\" }],\n21 | | };\n   | |__^ `MenuOption + 'static` cannot be shared between threads safely\n   |\n   = help: within `Menu&lt;'static&gt;`, the trait `std::marker::Sync` is not implemented for `MenuOption + 'static`\n   = note: required because it appears within the type `&amp;'static MenuOption + 'static`\n   = note: required because it appears within the type `[&amp;'static MenuOption + 'static]`\n   = note: required because it appears within the type `&amp;'static [&amp;'static MenuOption + 'static]`\n   = note: required because it appears within the type `Menu&lt;'static&gt;`\n   = note: shared static variables must have a type that implements `Sync`\n</code></pre>\n\n<p>I can solve this either by declaring <code>MAIN_MENU</code> as <code>const</code> instead of <code>static</code>, or by defining <code>Menu::options</code> as <code>&amp;'a [&amp;'a Op&lt;'a&gt;]</code></p>\n\n<p>Using the struct <code>Op</code> I want to use the constraint <code>MenuOption</code>.</p>\n\n<p>At this point I'm a bit confused. Whats the problem of sharing non-mutable data? This is probably not related to the data being non-mutable but related to using the constraint.</p>\n\n<p>Can this be done without making <code>MAIN_MENU</code> a <code>const</code>? Is it OK to use <code>const</code>? I know this won't have a fixed allocation but instead the compiler will inject the data as needed.</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1506357731, "post_id": 46407832, "comment_id": 79777984, "body": "Note: C++ <i>also</i> has a C FFI, and therefore any C++ class/struct compatible with its C counterpart would be usable from Rust like it is from C."}, {"owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "edited": false, "score": 0, "creation_date": 1506362524, "post_id": 46407832, "comment_id": 79780470, "body": "Thanks @Shepmaster. It now compiles. It may be working, but my Octave helloworld isn&#39;t yet, so I&#39;m not 100% sure. <a href=\"https://github.com/ctaggart/octh_examples/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">github.com/ctaggart/octh_examples/blob/master/src/lib.rs</a>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "edited": false, "score": 0, "creation_date": 1506362729, "post_id": 46407832, "comment_id": 79780589, "body": "@CameronTaggart Not sure, but you should prevent name mangling on all functions. Isn&#39;t a <code>#[no_mangle]</code> missing in <code>Fhelloworld</code>?"}, {"owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1506364071, "post_id": 46407832, "comment_id": 79781361, "body": "@E_net4 I just tried adding it, but no luck. I get the same error. <a href=\"https://github.com/ctaggart/octh_examples/issues/2\" rel=\"nofollow noreferrer\">github.com/ctaggart/octh_examples/issues/2</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1506350569, "last_edit_date": 1506350569, "creation_date": 1506350087, "answer_id": 46407832, "question_id": 46407560, "link": "https://stackoverflow.com/questions/46407560/how-to-create-and-return-a-c-struct-from-rust-ffi/46407832#46407832", "title": "How to create and return a C++ struct from Rust FFI?", "body": "<blockquote>\n  <p>I'm trying to create and return a C++ struct</p>\n</blockquote>\n\n<p>You cannot; C++ (like Rust) does not have a stable, defined ABI. There is no way in Rust to specify that a structure has <code>repr(C++)</code>, therefore you cannot create such a structure, much less return it.</p>\n\n<p>The only stable ABI is the one presented by C. You <em>can</em> define structs as <code>repr(C)</code> to be able to return them directly:</p>\n\n<pre><code>extern crate libc;\n\nuse std::ptr;\n\n#[repr(C)]\npub struct ValueList {\n    id: libc::int32_t,\n}\n\n#[no_mangle]\npub extern \"C\" fn hello_world() -&gt; ValueList {\n    let list_ptr = ::std::ptr::null_mut();\n    // untested, will cause segfault unless list_ptr is set\n    unsafe { ptr::read(list_ptr) }\n}\n</code></pre>\n\n<p>That method is highly suspicious though; normally you'd see it as</p>\n\n<pre><code>#[no_mangle]\npub extern \"C\" fn hello_world() -&gt; ValueList {\n    unsafe {\n        let mut list = mem::uninitialized();\n        list_initialize(&amp;mut list);\n        list\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43660931/155423\">Is it possible to use a C++ library from Rust when the library uses templates (generics)?</a></li>\n</ul>\n\n<hr>\n\n<p>I encourage you to read my <a href=\"https://github.com/shepmaster/rust-ffi-omnibus/\" rel=\"noreferrer\">Rust FFI Omnibus</a>.</p>\n"}], "owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1860, "favorite_count": 2, "answer_count": 1, "score": 3, "last_activity_date": 1506350569, "creation_date": 1506349356, "last_edit_date": 1506349802, "question_id": 46407560, "link": "https://stackoverflow.com/questions/46407560/how-to-create-and-return-a-c-struct-from-rust-ffi", "title": "How to create and return a C++ struct from Rust FFI?", "body": "<p>I'm trying to create and return a C++ struct. I am currently getting a <code>cannot move out of dereference of raw pointer</code> error when I try to compile. Any idea how I can make this work?</p>\n\n<pre><code>#![allow(non_snake_case)]\n#![allow(unused_variables)]\n\nextern crate octh;\n\n// https://thefullsnack.com/en/string-ffi-rust.html\nuse std::ffi::CString;\n\n#[no_mangle]\npub unsafe extern \"C\" fn Ghelloworld(\n    shl: *const octh::root::octave::dynamic_library,\n    relative: bool,\n) -&gt; *mut octh::root::octave_dld_function {\n    let name = CString::new(\"helloworld\").unwrap();\n    let pname = name.as_ptr() as *const octh::root::std::string;\n    std::mem::forget(pname);\n\n    let doc = CString::new(\"Hello World Help String\").unwrap();\n    let pdoc = doc.as_ptr() as *const octh::root::std::string;\n    std::mem::forget(pdoc);\n\n    return octh::root::octave_dld_function_create(Some(Fhelloworld), shl, pname, pdoc);\n}\n\npub unsafe extern \"C\" fn Fhelloworld(\n    args: *const octh::root::octave_value_list,\n    nargout: ::std::os::raw::c_int,\n) -&gt; octh::root::octave_value_list {\n    let list: *mut octh::root::octave_value_list = ::std::ptr::null_mut();\n    octh::root::octave_value_list_new(list);\n    std::mem::forget(list);\n    return *list;\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-piston"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1506329065, "post_id": 46397847, "comment_id": 79759067, "body": "How could you draw a path without drawing each segment? And what&#39;s inefficient about your for loop?"}, {"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1506341508, "post_id": 46397847, "comment_id": 79767099, "body": "I&#39;m looking for something that would draw all the segments continuously without having to send a drawing command for each individual segment."}], "answers": [{"comments": [{"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1506527612, "post_id": 46429852, "comment_id": 79860145, "body": "Hi, I already filed <a href=\"https://github.com/PistonDevelopers/graphics/issues/1089\" rel=\"nofollow noreferrer\">an issue on piston graphics</a>. They recommended I use lyon (see my question) but I haven&#39;t figured out how to do that yet. I am already drawing each line in a tight loop like you described. The overhead occurs when I start drawing around 200 lines. I plan to draw even more in the future so I need to speed this up with a path or something else."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1506544469, "post_id": 46429852, "comment_id": 79869168, "body": "@SunjayVarma I don&#39;t think you got the point of &quot;In the end, whether you draw lots of lines or a library function draws them they will get drawn and there shouldn&#39;t be much difference in performance.&quot; What makes you so sure that the slowdown you&#39;re experiencing is because of the overhead of calling <code>line</code>? Have you profiled it?"}, {"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1506579904, "post_id": 46429852, "comment_id": 79879319, "body": "Yes I&#39;ve profiled it. That&#39;s how I know. I timed only the loop with the line calls and just executing that will make me drop a frame because it takes so long as I add more lines."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 1, "last_activity_date": 1506438963, "last_edit_date": 1506438963, "creation_date": 1506437923, "answer_id": 46429852, "question_id": 46397847, "link": "https://stackoverflow.com/questions/46397847/efficiently-draw-paths-using-piston/46429852#46429852", "title": "Efficiently draw paths using piston", "body": "<blockquote>\n  <p>How do I efficiently draw a path through many points without having to draw a line for every segment?</p>\n</blockquote>\n\n<p>I'm not hugely familiar with Piston, but I would question your assumption that <code>line()</code> has some overhead that makes it inefficient to call repeatedly. In the end, whether you draw lots of lines or a library function draws them they will get drawn and there shouldn't be much difference in performance.</p>\n\n<p>It doesn't look like there is currently a method to draw a sequence of lines between points, but it should just be a matter of looping through them as you were already doing. Using <code>Vec::windows</code> is a bit nicer though, as you don't need temporary mutable variables:</p>\n\n<pre><code>pub fn path&lt;G&gt;(color: Color, radius: Radius, points: &amp;[[Scalar; 2]], transform: Matrix2d, g: &amp;mut G)\nwhere\n    G: Graphics,\n{\n    for w in points.windows(2) {\n        line(\n            color,\n            radius,\n            [w[0][0], w[0][1], w[1][0], w[1][1]],\n            transform,\n            g,\n        );\n    }\n}\n</code></pre>\n\n<p>You might consider making a <a href=\"https://github.com/PistonDevelopers/piston/issues\" rel=\"nofollow noreferrer\">feature request</a> or a PR to the Piston project.</p>\n"}], "owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 648, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1548364346, "creation_date": 1506315297, "last_edit_date": 1548364346, "question_id": 46397847, "link": "https://stackoverflow.com/questions/46397847/efficiently-draw-paths-using-piston", "title": "Efficiently draw paths using piston", "body": "<p>Piston's graphics library provides a function for drawing a line between two points, but nothing for more than two. How do I efficiently draw a path through many points without having to draw a line for every segment?</p>\n\n<p>Let's say I have the following code:</p>\n\n<pre><code>extern crate piston_window;\n\nuse piston_window::*;\n\nfn main() {\n    let mut window: PistonWindow = WindowSettings::new(\"Hello Piston!\", [640, 480])\n        .exit_on_esc(true).build().unwrap();\n    while let Some(e) = window.next() {\n        window.draw_2d(&amp;e, |c, g| {\n            clear([1.0; 4], g);\n            let points = [\n                [100., 100.],\n                [200., 200.],\n                [150., 350.],\n                //...\n            ];\n\n            let mut prev = points[0];\n            for pt in points[1..].iter() {\n                line([0., 0., 0., 255.], 1., [\n                    prev[0], prev[1], pt[0], pt[1]\n                ], c.transform, g);\n                prev = *pt;\n            }\n        });\n    }\n}\n</code></pre>\n\n<p>Is there a way to turn it into something like this?</p>\n\n<pre><code>extern crate piston_window;\n\nuse piston_window::*;\n\nfn main() {\n    let mut window: PistonWindow = WindowSettings::new(\"Hello Piston!\", [640, 480])\n        .exit_on_esc(true).build().unwrap();\n    while let Some(e) = window.next() {\n        window.draw_2d(&amp;e, |c, g| {\n            clear([1.0; 4], g);\n            let points = [\n                [100., 100.],\n                [200., 200.],\n                [150., 350.],\n                //...\n            ];\n            path([0., 0., 0., 255.], 1., &amp;points, c.transform, g);\n        });\n    }\n}\n</code></pre>\n\n<p>I was referred to the <a href=\"https://github.com/nical/lyon\" rel=\"nofollow noreferrer\">lyon</a> library but I don't know how to use it with piston.</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1506345658, "post_id": 46396796, "comment_id": 79769992, "body": "Enums are a bit strange, in that they act in-between types and namespaces. In this case Foo acts more as a namespace. That said, is this just curiosity or is this preventing you to do something you would like to do?"}, {"owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1506365535, "post_id": 46396796, "comment_id": 79782115, "body": "@PaoloFalabella The common usage of <code>Self</code> here is to reduce repetition of the type name. I was just hoping I could have done the same thing in method bodies."}, {"owner": {"reputation": 804, "user_id": 4732687, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/b1e413865e45454b7ea8cbfb0ac8dfc4?s=128&d=identicon&r=PG&f=1", "display_name": "shri", "link": "https://stackoverflow.com/users/4732687/shri"}, "edited": false, "score": 0, "creation_date": 1508429201, "post_id": 46396796, "comment_id": 80616091, "body": "I came across some good article, <a href=\"https://users.rust-lang.org/t/confused-by-use-of-self-in-example-in-chapter-17-of-rust-book-2nd-edition/11394\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/&hellip;</a>. Hope it might be of help to you."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1567777560, "post_id": 46396796, "comment_id": 102076631, "body": "This question is about a previously missing feature that now exists, so it is no longer relevant."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1506329436, "last_edit_date": 1506329436, "creation_date": 1506328783, "answer_id": 46400930, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body/46400930#46400930", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>Enum constructors != associated items.</p>\n\n<p>It is a known <a href=\"https://github.com/rust-lang/rust/issues/26264\" rel=\"nofollow noreferrer\">issue</a>, but it's not expected to be fixed, at least not in the foreseeable future. From what I have gathered it is not trivial to just allow this to work; at this point it is more likely that the related documentation or the error message will be improved.</p>\n\n<p>There is little documentation I could find on the topic of associated items <em>in general</em>; The Rust Book has a chapter on <a href=\"https://doc.rust-lang.org/book/first-edition/associated-types.html\" rel=\"nofollow noreferrer\">associated types</a>, though. In addition, there are plenty of good answers about <code>Self</code> in <a href=\"https://stackoverflow.com/questions/32304595/whats-the-difference-between-self-and-self\">this related question</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 4, "last_activity_date": 1506348650, "creation_date": 1506348650, "answer_id": 46407298, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body/46407298#46407298", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>If the enum name <code>Foo</code> is in reality long and you want to avoid repeating it across the implementation, you have two options:</p>\n\n<ul>\n<li><code>use LongEnumName as Short</code> at module level. This will allow you to return <code>Short::Bar</code> at the end of <code>f</code>.</li>\n<li><code>use LongEnumName::*</code> at module level, allowing an even shorter <code>Bar</code>.</li>\n</ul>\n\n<p>If you omit <code>pub</code>, the imports will be internal and won't affect the public API of the module.</p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 6, "last_activity_date": 1529299824, "last_edit_date": 1529299824, "creation_date": 1506610076, "answer_id": 46472096, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body/46472096#46472096", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>An important thing to note is that the error said associated item. <code>enum Foo { Baz }</code> doesn't have associated items. A trait can have an associated item:</p>\n\n<pre><code>trait FooBaz { type Baz }\n//             ^~~~~~~~ - associated item\n</code></pre>\n\n<p>To summarize:</p>\n\n<blockquote>\n  <p>Why can't <code>Self</code> be used in this situation?</p>\n</blockquote>\n\n<p>Because of <a href=\"https://github.com/rust-lang/rust/issues/26264\" rel=\"nofollow noreferrer\">this issue</a>. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2338-type-alias-enum-variants.md\" rel=\"nofollow noreferrer\">RFC 2338</a> has <a href=\"https://github.com/rust-lang/rust/issues/49683\" rel=\"nofollow noreferrer\">not been implemented yet</a>.</p>\n\n<p><code>Self</code> seems to act as a type alias, albeit with some modifications.</p>\n\n<blockquote>\n  <p>Where exactly can <code>Self</code> be used?</p>\n</blockquote>\n\n<p>Self can only be used in traits and <code>impl</code>s. This code:</p>\n\n<pre><code>struct X {\n    f: i32,\n    x: &amp;Self,\n}\n</code></pre>\n\n<p>Outputs the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0411]: cannot find type `Self` in this scope\n --&gt; src/main.rs:3:9\n  |\n3 |     x: &amp;Self,\n  |         ^^^^ `Self` is only available in traits and impls\n</code></pre>\n\n<p>This is possibly a temporary situation and might change in the future! </p>\n\n<p>More precisely, <code>Self</code> should be used only as part of method signature (e.g. <code>fn self_in_self_out(&amp;self) -&gt; Self</code>) or to access an associated type:</p>\n\n<pre><code>enum Foo {\n    Baz,\n}\n\ntrait FooBaz {\n    type Baz;\n\n    fn b(&amp;self) -&gt; Self::Baz; // Valid use of `Self` as method argument and method output\n}\n\n\nimpl FooBaz for Foo {\n    type Baz = Foo;\n\n    fn b(&amp;self) -&gt; Self::Baz {\n        let x = Foo::Baz as Self::Baz; // You can use associated type, but it's just a type\n        x\n    }\n}\n</code></pre>\n\n<p>I think <a href=\"https://stackoverflow.com/a/46407298/155423\">user4815162342 covered the rest of the answer best</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 1, "last_activity_date": 1555445820, "creation_date": 1555445820, "answer_id": 55715994, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body/55715994#55715994", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>There is an <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2338-type-alias-enum-variants.md\" rel=\"nofollow noreferrer\">experimental feature</a> that would make your example work without any other changes.  You can try it out in a nightly build of Rust by adding this in your main file:</p>\n\n<pre><code>#![feature(type_alias_enum_variants)]\n</code></pre>\n\n<p>You can follow the progress of the feature towards stabilisation in its <a href=\"https://github.com/rust-lang/rust/issues/49683\" rel=\"nofollow noreferrer\">tracking issue</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "is_accepted": false, "score": 3, "last_activity_date": 1567287876, "creation_date": 1567287876, "answer_id": 57741782, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body/57741782#57741782", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>This is now possible as of <a href=\"https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html#referring-to-enum-variants-through-type-aliases\" rel=\"nofollow noreferrer\">version 1.37</a>.</p>\n"}], "owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 949, "favorite_count": 0, "answer_count": 5, "score": 13, "last_activity_date": 1567777423, "creation_date": 1506306572, "last_edit_date": 1567777423, "question_id": 46396796, "link": "https://stackoverflow.com/questions/46396796/why-cant-self-be-used-to-refer-to-an-enums-variant-in-a-method-body", "title": "Why can&#39;t `Self` be used to refer to an enum&#39;s variant in a method body?", "body": "<p>This question is now obsolete because this feature has been implemented. <a href=\"https://stackoverflow.com/a/57741782/4498831\">Related answer</a>.</p>\n\n<hr>\n\n<p>The following Rust code fails to compile:</p>\n\n<pre><code>enum Foo {\n    Bar,\n}\n\nimpl Foo {\n    fn f() -&gt; Self {\n        Self::Bar\n    }\n}\n</code></pre>\n\n<p>The error message confuses me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no associated item named `Bar` found for type `Foo` in the current scope\n --&gt; src/main.rs:7:9\n  |\n7 |         Self::Bar\n  |         ^^^^^^^^^\n</code></pre>\n\n<p>The problem can be fixed by using <code>Foo</code> instead of <code>Self</code>, but this strikes me as strange since <code>Self</code> is supposed to refer to the type that is being implemented (ignoring traits), which in this case is <code>Foo</code>.</p>\n\n<pre><code>enum Foo {\n    Bar,\n}\n\nimpl Foo {\n    fn f() -&gt; Self {\n        Foo::Bar\n    }\n}\n</code></pre>\n\n<p>Why can't <code>Self</code> be used in this situation? Where exactly can <code>Self</code> be used<sup>*</sup>? Is there anything else I can use to avoid repeating the type name in the method body?</p>\n\n<p><sup><sup>*</sup> I'm ignoring usage in traits, where <code>Self</code> refers to whatever type implements the trait.</sup></p>\n"}, {"tags": ["rust", "mutable", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506281154, "post_id": 46393890, "comment_id": 79745060, "body": "<i>I need the fix to still keep the functions the same</i> \u2014 if we cannot change anything, we cannot fix anything."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1506281468, "post_id": 46393890, "comment_id": 79745167, "body": "Do you have a good reason to use a <code>&amp;str</code> instead of a <code>String</code>? If <code>Test</code> owns the string, use the owned type."}, {"owner": {"reputation": 576, "user_id": 3095091, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90ba23961eb7931a4fb1d8178f1c0913?s=128&d=identicon&r=PG", "display_name": "Chronium", "link": "https://stackoverflow.com/users/3095091/chronium"}, "edited": false, "score": 0, "creation_date": 1506282505, "post_id": 46393890, "comment_id": 79745504, "body": "I&#39;ve added the actual code I&#39;m having trouble with. Pushed it to a git repo. The playground gist was just an example of the error itself."}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 12, "last_activity_date": 1506284766, "last_edit_date": 1506284766, "creation_date": 1506281495, "answer_id": 46394029, "question_id": 46393890, "link": "https://stackoverflow.com/questions/46393890/mutable-borrow-in-loop/46394029#46394029", "title": "Mutable borrow in loop", "body": "<p>When you write <code>fn dostuff(&amp;'a mut self)</code> you are enforcing that the reference to <code>self</code> must live at least as long as the lifetime <code>'a</code>. But it's the same <code>'a</code> as you have used in the definition of the <code>Test</code> struct. This means that callers of <code>dostuff</code> have to lend <code>self</code> for the entire lifetime of <code>test</code>. After <code>dostuff()</code> has been called once, <code>self</code> is now borrowed and the borrow doesn't finish until <code>test</code> is dropped. By definition, you can only call that function once, so you cannot call it in a loop. </p>\n\n<blockquote>\n  <p>I need the fix to still keep the function signatures the same</p>\n</blockquote>\n\n<p>So, you should now understand that this is an impossible requirement. You can have either the function signature as it is, or you can call it in a loop. You can't have both.</p>\n"}], "owner": {"reputation": 576, "user_id": 3095091, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90ba23961eb7931a4fb1d8178f1c0913?s=128&d=identicon&r=PG", "display_name": "Chronium", "link": "https://stackoverflow.com/users/3095091/chronium"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4663, "favorite_count": 1, "closed_date": 1506281541, "accepted_answer_id": 46394029, "answer_count": 1, "score": 9, "last_activity_date": 1506284766, "creation_date": 1506280540, "last_edit_date": 1506282761, "question_id": 46393890, "link": "https://stackoverflow.com/questions/46393890/mutable-borrow-in-loop", "closed_reason": "Duplicate", "title": "Mutable borrow in loop", "body": "<p>I am trying to get a mutable borrow inside a loop, and I cannot get it to work. I've tried all the possible guards, raw pointers, everything.</p>\n\n<pre><code>struct Test&lt;'a&gt; {\n    a: &amp;'a str,\n}\n\nimpl&lt;'a&gt; Test&lt;'a&gt; {\n    pub fn new() -&gt; Self {\n        Test { a: &amp;mut \"test\" }\n    }\n\n    pub fn dostuff(&amp;'a mut self) {\n        self.a = \"test\";\n    }\n\n    pub fn fixme(&amp;'a mut self) {\n        let mut i = 0;\n        while i &lt; 10 {\n            self.dostuff();\n            i += 1;\n        }\n    }\n}\n\nfn main() {\n    let mut test = Test::new();\n    test.fixme();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src/main.rs:19:13\n   |\n19 |             self.dostuff();\n   |             ^^^^ mutable borrow starts here in previous iteration of loop\n...\n22 |     }\n   |     - mutable borrow ends here\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=87a04bc4d22151d3176d14a99ab613a2&amp;version=nightly\" rel=\"noreferrer\">Rust Playground example code</a></p>\n\n<p>I cannot manage to figure how to solve this. I need the fix to still keep the function signatures the same. My code is a lot more complex, but this snippet strips it down to the bare minimum.</p>\n\n<p>Here is <a href=\"https://github.com/chronium/nes-emu/blob/master/src/nes.rs#L36\" rel=\"noreferrer\">the complete code of what I'm trying to solve</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 1, "creation_date": 1506255904, "post_id": 46389299, "comment_id": 79737264, "body": "Really nice! Thank you very much. I also needed to include <code>std::collections::hash_map::Entry</code> to make the final refactoring work. :-) Also I could drop the <code>Clone</code> trait from K, as it is not cloned anymore."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 0, "creation_date": 1506263662, "post_id": 46389299, "comment_id": 79739499, "body": "@itmuckel The <a href=\"https://play.rust-lang.org/?gist=3d37ef944b512f0ae265f3b1e5f22beb&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a> at the end of the answer contains the compilable code that includes the necessary import. I&#39;ve now also updated it not to require <code>Clone</code> from <code>K</code>, good catch."}, {"owner": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 0, "creation_date": 1512918518, "post_id": 46389299, "comment_id": 82440440, "body": "@user4815162342: nice explanation! I wonder what do you think about Andrei Tomashpolskiy&#39;s approach in his answer - returning a reference bound by Cacher&#39;s lifetime?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 1, "creation_date": 1512920652, "post_id": 46389299, "comment_id": 82441093, "body": "@Gruffalo Looking most generally, the other answer can provide even better performance, because the user of the API can choose whether to <code>clone</code> or to maybe extract only a small part of the value. This of course comes at the cost of changing the signature of <code>Cacher::value</code>, which I didn&#39;t want to do and I can&#39;t tell whether the exercise even allows. (In the book, the result is a <code>u32</code> which is <code>Clone + Copy</code>, so it&#39;s a moot point.)"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1512920655, "post_id": 46389299, "comment_id": 82441094, "body": "Also, note that the reference is not bound by the lifetime of <code>Cacher</code>, but by the lifetime of the mutable reference to the <code>Cacher</code>. As soon as you want to mutate the <code>Cacher</code>, e.g. by calling <code>Cacher::value</code> with a different key, you&#39;ll need to drop the old reference and along it the reference returned by <code>Cacher::value</code>."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 10, "last_activity_date": 1558275081, "last_edit_date": 1558275081, "creation_date": 1506250525, "answer_id": 46389299, "question_id": 46388977, "link": "https://stackoverflow.com/questions/46388977/how-do-i-remove-excessive-clone-calls-from-a-struct-that-caches-arbitrary-resu/46389299#46389299", "title": "How do I remove excessive `clone` calls from a struct that caches arbitrary results?", "body": "<p>Your suspicion is correct, the code contains too many calls to <code>clone()</code>, defeating the very optimizations <code>Cacher</code> is designed to achieve.</p>\n\n<h1>Cloning the entire cache</h1>\n\n<p>The one to start with is the call to <code>self.values.clone()</code> - it creates a copy of the entire cache <em>on every single access</em>.</p>\n\n<h2>After non-lexical lifetimes</h2>\n\n<p>Remove this clone.</p>\n\n<h2>Before non-lexical lifetimes</h2>\n\n<p>As you likely discovered yourself, simply removing <code>.clone()</code> doesn't compile. This is because the borrow checker considers the map referenced for the entire duration of <code>match</code>. The shared reference returned by <code>HashMap::get</code> points to the item inside the map, which means that while it exists, it is forbidden to create another mutable reference to the same map, which is required by <code>HashMap::insert</code>. For the code to compile, you need to split up the match in order to force the shared reference to go out of scope before <code>insert</code> is invoked:</p>\n\n<pre><code>// avoids unnecessary clone of the whole map\nfn value(&amp;mut self, arg: K) -&gt; V {\n    if let Some(v) = self.values.get(&amp;arg).map(V::clone) {\n        return v;\n    } else {\n        let v = (self.calculation)(arg.clone());\n        self.values.insert(arg, v.clone());\n        v\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>This is much better and probably \"good enough\" for most practical purposes. The hot path, where the value is already cached, now consists of only a single clone, and that one is actually necessary because the original value must remain in the hash map. (Also, note that cloning doesn't need to be expensive or imply deep copying - the stored value can be an <code>Rc&lt;RealValue&gt;</code>, which buys object sharing for free. In that case, <code>clone()</code> will simply increment the reference count on the object.)</p>\n\n<h1>Clone on cache miss</h1>\n\n<p>In case of cache miss, the key must be cloned, because <code>calculation</code> is declared to consume it. A single cloning will be sufficient, though, so we can pass the original <code>arg</code> to <code>insert</code> without cloning it again. The key clone still feels unnecessary, though - a calculation function shouldn't require ownership of the key it is transforming. Removing this clone boils down to modifying the signature of the calculation function to take the key by reference. Changing the trait bounds of <code>T</code> to <code>T: Fn(&amp;K) -&gt; V</code> allows the following formulation of <code>value()</code>:</p>\n\n<pre><code>// avoids unnecessary clone of the key\nfn value(&amp;mut self, arg: K) -&gt; V {\n    if let Some(v) = self.values.get(&amp;arg).map(V::clone) {\n        return v;\n    } else {\n        let v = (self.calculation)(&amp;arg);\n        self.values.insert(arg, v.clone());\n        v\n    }\n}\n</code></pre>\n\n<h1>Avoiding double lookups</h1>\n\n<p>Now are left with exactly two calls to <code>clone()</code>, one in each code path. This is optimal, as far as value cloning is concerned, but the careful reader will still be nagged by one detail: in case of cache miss, the hash table lookup will effectively happen <em>twice</em> for the same key: once in the call to <code>HashMap::get</code>, and then once more in <code>HashMap::insert</code>. It would be nice if we could instead reuse the work done the first time and perform only one hash map lookup. This can be achieved by replacing <code>get()</code> and <code>insert()</code> with <code>entry()</code>:</p>\n\n<pre><code>// avoids the second lookup on cache miss\nfn value(&amp;mut self, arg: K) -&gt; V {\n    match self.values.entry(arg) {\n        Entry::Occupied(entry) =&gt; entry.into_mut(),\n        Entry::Vacant(entry) =&gt; {\n            let v = (self.calculation)(entry.key());\n            entry.insert(v)\n        }\n    }.clone()\n}\n</code></pre>\n\n<p>We've also taken the opportunity to move the <code>.clone()</code> call after the match.</p>\n\n<p>Runnable example <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b7f71a884da5d13203c548e756ed0cf3\" rel=\"nofollow noreferrer\">in the playground</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 170, "user_id": 3240012, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8471658d6f691448c15129582de211d?s=128&d=identicon&r=PG&f=1", "display_name": "Andrei Tomashpolskiy", "link": "https://stackoverflow.com/users/3240012/andrei-tomashpolskiy"}, "is_accepted": false, "score": 2, "last_activity_date": 1512919459, "last_edit_date": 1512919459, "creation_date": 1512916312, "answer_id": 47739836, "question_id": 46388977, "link": "https://stackoverflow.com/questions/46388977/how-do-i-remove-excessive-clone-calls-from-a-struct-that-caches-arbitrary-resu/47739836#47739836", "title": "How do I remove excessive `clone` calls from a struct that caches arbitrary results?", "body": "<p>I was solving the same exercise and ended with the following code:</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\nuse std::collections::HashMap;\nuse std::hash::Hash;\nuse std::fmt::Display;\n\nstruct Cacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash + Clone,\n{\n    calculation: T,\n    values: HashMap&lt;P, R&gt;,\n}\n\nimpl&lt;P, R, T&gt; Cacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash + Clone,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;P, R, T&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n\n    fn value&lt;'a&gt;(&amp;'a mut self, key: P) -&gt; &amp;'a R {\n        let calculation = &amp;self.calculation;\n        let key_copy = key.clone();\n        self.values\n            .entry(key_copy)\n            .or_insert_with(|| (calculation)(&amp;key))\n    }\n}\n</code></pre>\n\n<p>It only makes a single copy of the key in the <code>value()</code> method. It does not copy the resulting value, but instead returns a reference with a lifetime specifier, which is equal to the lifetime of the enclosing <code>Cacher</code> instance (which is logical, I think, because values in the map will continue to exist until the <code>Cacher</code> itself is dropped).</p>\n\n<p>Here's a test program:</p>\n\n<pre><code>fn main() {\n    let mut cacher1 = Cacher::new(|num: &amp;u32| -&gt; u32 {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        *num\n    });\n\n    calculate_and_print(10, &amp;mut cacher1);\n    calculate_and_print(20, &amp;mut cacher1);\n    calculate_and_print(10, &amp;mut cacher1);\n\n    let mut cacher2 = Cacher::new(|str: &amp;&amp;str| -&gt; usize {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        str.len()\n    });\n\n    calculate_and_print(\"abc\", &amp;mut cacher2);\n    calculate_and_print(\"defghi\", &amp;mut cacher2);\n    calculate_and_print(\"abc\", &amp;mut cacher2);\n}\n\nfn calculate_and_print&lt;P, R, T&gt;(intensity: P, cacher: &amp;mut Cacher&lt;P, R, T&gt;)\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash + Clone,\n    R: Display,\n{\n    println!(\"{}\", cacher.value(intensity));\n}\n</code></pre>\n\n<p>And its output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>calculating slowly...\n10\ncalculating slowly...\n20\n10\ncalculating slowly...\n3\ncalculating slowly...\n6\n3\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1558275184, "last_edit_date": 1558275184, "creation_date": 1512954586, "answer_id": 47745205, "question_id": 46388977, "link": "https://stackoverflow.com/questions/46388977/how-do-i-remove-excessive-clone-calls-from-a-struct-that-caches-arbitrary-resu/47745205#47745205", "title": "How do I remove excessive `clone` calls from a struct that caches arbitrary results?", "body": "<p>If you remove the requirement of returning values, you don't need to perform <em>any</em> clones by making use of the <a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\" rel=\"nofollow noreferrer\"><code>Entry</code></a>:</p>\n\n<pre><code>use std::{\n    collections::{hash_map::Entry, HashMap},\n    fmt::Display,\n    hash::Hash,\n    thread,\n    time::Duration,\n};\n\nstruct Cacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash,\n{\n    calculation: T,\n    values: HashMap&lt;P, R&gt;,\n}\n\nimpl&lt;P, R, T&gt; Cacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;P, R, T&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n\n    fn value&lt;'a&gt;(&amp;'a mut self, key: P) -&gt; &amp;'a R {\n        let calculation = &amp;self.calculation;\n\n        match self.values.entry(key) {\n            Entry::Occupied(e) =&gt; e.into_mut(),\n            Entry::Vacant(e) =&gt; {\n                let result = (calculation)(e.key());\n                e.insert(result)\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut cacher1 = Cacher::new(|num: &amp;u32| -&gt; u32 {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(1));\n        *num\n    });\n\n    calculate_and_print(10, &amp;mut cacher1);\n    calculate_and_print(20, &amp;mut cacher1);\n    calculate_and_print(10, &amp;mut cacher1);\n\n    let mut cacher2 = Cacher::new(|str: &amp;&amp;str| -&gt; usize {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        str.len()\n    });\n\n    calculate_and_print(\"abc\", &amp;mut cacher2);\n    calculate_and_print(\"defghi\", &amp;mut cacher2);\n    calculate_and_print(\"abc\", &amp;mut cacher2);\n}\n\nfn calculate_and_print&lt;P, R, T&gt;(intensity: P, cacher: &amp;mut Cacher&lt;P, R, T&gt;)\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash,\n    R: Display,\n{\n    println!(\"{}\", cacher.value(intensity));\n}\n</code></pre>\n\n<p>You could then choose to wrap this in another struct that performed a clone:</p>\n\n<pre><code>\nstruct ValueCacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash,\n    R: Clone,\n{\n    cacher: Cacher&lt;P, R, T&gt;,\n}\n\nimpl&lt;P, R, T&gt; ValueCacher&lt;P, R, T&gt;\nwhere\n    T: Fn(&amp;P) -&gt; R,\n    P: Eq + Hash,\n    R: Clone,\n{\n    fn new(calculation: T) -&gt; Self {\n        Self {\n            cacher: Cacher::new(calculation),\n        }\n    }\n\n    fn value(&amp;mut self, key: P) -&gt; R {\n        self.cacher.value(key).clone()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1195, "favorite_count": 0, "accepted_answer_id": 46389299, "answer_count": 3, "score": 5, "last_activity_date": 1558275184, "creation_date": 1506248331, "last_edit_date": 1558274596, "question_id": 46388977, "link": "https://stackoverflow.com/questions/46388977/how-do-i-remove-excessive-clone-calls-from-a-struct-that-caches-arbitrary-resu", "title": "How do I remove excessive `clone` calls from a struct that caches arbitrary results?", "body": "<p>I am reading <a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html#storing-closures-using-generic-parameters-and-the-fn-traits\" rel=\"nofollow noreferrer\">the section on closures</a> in the second edition of the Rust book. At the end of this section, there is an exercise to extend the <code>Cacher</code> implementation given before. I gave it a try:</p>\n\n<pre><code>use std::clone::Clone;\nuse std::cmp::Eq;\nuse std::collections::HashMap;\nuse std::hash::Hash;\n\nstruct Cacher&lt;T, K, V&gt;\nwhere\n    T: Fn(K) -&gt; V,\n    K: Eq + Hash + Clone,\n    V: Clone,\n{\n    calculation: T,\n    values: HashMap&lt;K, V&gt;,\n}\n\nimpl&lt;T, K, V&gt; Cacher&lt;T, K, V&gt;\nwhere\n    T: Fn(K) -&gt; V,\n    K: Eq + Hash + Clone,\n    V: Clone,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;T, K, V&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n\n    fn value(&amp;mut self, arg: K) -&gt; V {\n        match self.values.clone().get(&amp;arg) {\n            Some(v) =&gt; v.clone(),\n            None =&gt; {\n                self.values\n                    .insert(arg.clone(), (self.calculation)(arg.clone()));\n                self.values.get(&amp;arg).unwrap().clone()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>After creating a version that finally works, I am really unhappy with it. What really bugs me is that <code>cacher.value(...)</code> has 5(!) calls to <code>clone()</code> in it. Is there a way to avoid this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 1, "creation_date": 1506243846, "post_id": 46388386, "comment_id": 79734328, "body": "It&#39;s an attribute that provides a basic implementation of the Debug trait for the following struct. Have a read through <a href=\"https://rustbyexample.com/trait/derive.html\" rel=\"nofollow noreferrer\">rustbyexample.com/trait/derive.html</a> . (It has nothing to do with the life-time <code>a&#39;</code>.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1506263034, "post_id": 46388386, "comment_id": 79739313, "body": "Just keep reading <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch05-02-example-structs.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>."}], "answers": [{"comments": [{"owner": {"reputation": 853, "user_id": 1722634, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b3c76aec26f12e53aeb2c0f9a792ae27?s=128&d=identicon&r=PG", "display_name": "Liviu", "link": "https://stackoverflow.com/users/1722634/liviu"}, "edited": false, "score": 0, "creation_date": 1590990443, "post_id": 46389319, "comment_id": 109877919, "body": "Why doesn&#39;t age need a lifetime specifier and why does the compiler generate code such as <code>&amp;&amp;(*__self_0_0)</code>? What&#39;s the point of &quot;&amp;&amp;&quot; and why does it dereference it inside the parenthesis?"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": true, "score": 45, "last_activity_date": 1610485175, "last_edit_date": 1610485175, "creation_date": 1506250645, "answer_id": 46389319, "question_id": 46388386, "link": "https://stackoverflow.com/questions/46388386/what-exactly-does-derivedebug-mean-in-rust/46389319#46389319", "title": "What exactly does &#39;#[derive(Debug)]&#39; mean in Rust?", "body": "<p><code>#[...]</code> is an <a href=\"https://doc.rust-lang.org/stable/rust-by-example/attribute.html\" rel=\"nofollow noreferrer\">attribute</a> on <code>struct Person</code>. <code>derive(Debug)</code> asks the compiler to <a href=\"https://doc.rust-lang.org/stable/rust-by-example/trait/derive.html\" rel=\"nofollow noreferrer\">auto-generate</a> a suitable implementation of the <a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html\" rel=\"nofollow noreferrer\"><code>Debug</code></a> trait, which provides the result of <code>{:?}</code> in something like <code>format!(&quot;Would the real {:?} please stand up!&quot;, Person { name: &quot;John&quot;, age: 8 });</code>.</p>\n<p>You can see what the compiler did by executing <code>cargo +nightly rustc -- -Zunstable-options --pretty=expanded</code>. In your example, the compiler will add something like</p>\n<pre><code>#[automatically_derived]\n#[allow(unused_qualifications)]\nimpl &lt;'a&gt; ::std::fmt::Debug for Person&lt;'a&gt; {\n    fn fmt(&amp;self, __arg_0: &amp;mut ::std::fmt::Formatter) -&gt; ::std::fmt::Result {\n        match *self {\n            Person { name: ref __self_0_0, age: ref __self_0_1 } =&gt; {\n                let mut builder = __arg_0.debug_struct(&quot;Person&quot;);\n                let _ = builder.field(&quot;name&quot;, &amp;&amp;(*__self_0_0));\n                let _ = builder.field(&quot;age&quot;, &amp;&amp;(*__self_0_1));\n                builder.finish()\n            }\n        }\n    }\n}\n</code></pre>\n<p>to your code. As such an implementation is suitable for almost all uses, the <code>derive</code> saves you from writing it by hand.</p>\n<p>The <code>'a</code> is a <a href=\"https://doc.rust-lang.org/stable/rust-by-example/scope/lifetime.html\" rel=\"nofollow noreferrer\">lifetime</a>-parameter for the type <code>Person</code>; that is, there (could be) several versions of <code>Person</code>, each with its own concrete lifetime, which will be named <code>'a</code>. This lifetime-parameter is used to qualify (generically) the reference in the field <code>name</code>, a reference to some value of type <code>str</code>. This is necessary because the compiler will need some information on how long this reference will be valid (to the ultimate goal that the reference to the value of <code>name</code> does not become invalid while a value of type <code>Person</code> is still in use).</p>\n"}], "owner": {"reputation": 10770, "user_id": 852063, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/80fd1d68d0d2ae503cf5870e29fecae5?s=128&d=identicon&r=PG&f=1", "display_name": "Amani", "link": "https://stackoverflow.com/users/852063/amani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8336, "favorite_count": 4, "accepted_answer_id": 46389319, "answer_count": 1, "score": 31, "last_activity_date": 1610485175, "creation_date": 1506243675, "last_edit_date": 1506262919, "question_id": 46388386, "link": "https://stackoverflow.com/questions/46388386/what-exactly-does-derivedebug-mean-in-rust", "title": "What exactly does &#39;#[derive(Debug)]&#39; mean in Rust?", "body": "<p>What exactly does <code>#[derive(Debug)]</code> mean? Does it have something to do with <code>'a</code>? For example:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Person&lt;'a&gt; {\n    name: &amp;'a str,\n    age: u8\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506214932, "post_id": 46383052, "comment_id": 79729216, "body": "Stylistic points: (1) Don&#39;t use leading underscores for identifiers that are used (e.g. <code>__Into0</code>); they are semantically reserved for identifiers that need to exist but are unused. (2) <code>From</code> and <code>Into</code> are imported via the <i>prelude</i>, so you don&#39;t need to fully qualify them. (3) There&#39;s no reason to have the parenthesis on your non-tuple version. (4) Consider using a <code>where</code> clause as soon as you have any non-trivial bounds. <a href=\"https://play.rust-lang.org/?gist=6b6b20bdae25237edf5b2c32c32791ee&amp;version=stable\" rel=\"nofollow noreferrer\">complete example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506215600, "post_id": 46383052, "comment_id": 79729301, "body": "I&#39;d encourage you to post your workaround as an answer on the linked duplicate."}, {"owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506327622, "post_id": 46383052, "comment_id": 79758241, "body": "Thanks for the stylistic comments, but this code is generated by a custom derive so it&#39;s a bit less important there. And I&#39;ll share my workaround on the duplicate."}], "owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 67, "favorite_count": 0, "closed_date": 1506214298, "answer_count": 0, "score": 0, "last_activity_date": 1506214094, "creation_date": 1506191949, "last_edit_date": 1506214094, "question_id": 46383052, "link": "https://stackoverflow.com/questions/46383052/is-there-a-way-to-stop-break-a-recursive-trait-definiton", "closed_reason": "Duplicate", "title": "Is there a way to stop break a recursive trait definiton?", "body": "<p>I'm trying to define a generic <code>From</code> implementation for a struct like this (<a href=\"https://play.rust-lang.org/?gist=7a9d6868e4ca2eef42a8172803eb049b&amp;amp=&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>struct Wrapped&lt;T: Clone&gt;(T);\n\nimpl&lt;T: Clone, __Into0: ::std::convert::Into&lt;T&gt;&gt; ::std::convert::From&lt;(__Into0)&gt; for Wrapped&lt;T&gt; {\n    fn from(original: (__Into0)) -&gt; Wrapped&lt;T&gt; {\n        Wrapped(original.into())\n    }\n}\n\nfn main() {\n    let _: Wrapped&lt;i64&gt; = 5i32.into();\n} \n</code></pre>\n\n<p>However, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::convert::From&lt;Wrapped&lt;_&gt;&gt;` for type `Wrapped&lt;_&gt;`:\n --&gt; src/main.rs:3:1\n  |\n3 | / impl&lt;T: Clone, __Into0: ::std::convert::Into&lt;T&gt;&gt; ::std::convert::From&lt;(__Into0)&gt; for Wrapped&lt;T&gt; {\n4 | |     fn from(original: (__Into0)) -&gt; Wrapped&lt;T&gt; {\n5 | |         Wrapped(original.into())\n6 | |     }\n7 | | }\n  | |_^\n  |\n  = note: conflicting implementation in crate `core`\n</code></pre>\n\n<p>I'm guessing this is caused by the fact that <code>From</code> is implemented for every type to itself and my new implementation also includes a way to solve that because of that.</p>\n\n<p>I'm not sure how to solve this recursion-like behaviour. The only solution I can think of is to use a single element tuple instead (<a href=\"https://play.rust-lang.org/?gist=ca7aab8c6639058a7633c80914b86ca9&amp;version=undefined\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>struct Wrapped&lt;T: Clone&gt;(T);\n\nimpl&lt;T: Clone, __Into0: ::std::convert::Into&lt;T&gt;&gt; ::std::convert::From&lt;(__Into0,)&gt; for Wrapped&lt;T&gt; {\n    fn from(original: (__Into0,)) -&gt; Wrapped&lt;T&gt; {\n        Wrapped(original.0.into())\n    }\n}\n\nfn main() {\n    let _: Wrapped&lt;i64&gt; = (5i32,).into();\n}\n</code></pre>\n\n<p>This works, but it makes the API more awkward than I would like. Are there any other ways to solve this compilation error?</p>\n"}, {"tags": ["function", "rust", "signature"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506175263, "post_id": 46380283, "comment_id": 79719146, "body": "As the error messages indicates: <i>the trait <code>MyTrait</code> is not implemented for <code>std::boxed::Box&lt;MyTrait&gt;</code></i> \u2014 so implement the trait for that type :-)"}, {"owner": {"reputation": 1503, "user_id": 672780, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hpTuM.png?s=128&g=1", "display_name": "LoganMzz", "link": "https://stackoverflow.com/users/672780/loganmzz"}, "edited": false, "score": 0, "creation_date": 1506374961, "post_id": 46380283, "comment_id": 79786820, "body": "As Rust has <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-02-deref.html\" rel=\"nofollow noreferrer\">deref coercion</a> and Box&lt;T&gt; deref to &amp;T, you would better write a method."}], "owner": {"reputation": 2727, "user_id": 2512774, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8323bc93db4001617eaf11df02f33a18?s=128&d=identicon&r=PG", "display_name": "Carl Levasseur", "link": "https://stackoverflow.com/users/2512774/carl-levasseur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 35, "favorite_count": 0, "closed_date": 1506175031, "answer_count": 0, "score": 0, "last_activity_date": 1506175222, "creation_date": 1506174541, "last_edit_date": 1506175222, "question_id": 46380283, "link": "https://stackoverflow.com/questions/46380283/handle-both-trait-and-boxtrait-without-duplicating-function", "closed_reason": "Duplicate", "title": "Handle both &amp;Trait and Box&lt;Trait&gt; without duplicating function", "body": "<p>I have a library with the following code:</p>\n\n<pre><code>pub trait MyTrait {\n    fn do_something(&amp;self);\n}\n\nstruct A { }\n\nimpl MyTrait for A {\n    fn do_something(&amp;self) {\n        println!(\"A\");\n    }\n}\n\nstruct B { }\n\nimpl MyTrait for B {\n    fn do_something(&amp;self) {\n        println!(\"B\");\n    }\n}\n\nfn test_ref(t: &amp;MyTrait) {\n    // this function does many things here with t\n    // ...\n    t.do_something()\n}\n</code></pre>\n\n<p>And 2 other projects that use this library:</p>\n\n<pre><code>// case 1\nlet a = A {};\nlet b = B {};\n\ntest_ref(&amp;a);\ntest_ref(&amp;b);\n</code></pre>\n\n<p>and </p>\n\n<pre><code>// case 2\nlet list: Vec&lt;Box&lt;MyTrait&gt;&gt; = vec![Box::new(A {}), Box::new(B {})];\n\nfor item in &amp;list {\n    test_ref(item);  // error: the trait `MyTrait` is not implemented for `std::boxed::Box&lt;MyTrait&gt;`\n}\n</code></pre>\n\n<p>The first case works fine but the second does not because it stores objects implementing <code>MyTrait</code> in <code>Box</code> objects so that they can be stored in a vector. Case 2 can't use references instead of <code>Box</code> objects because there is no other variable to take the ownership of the underlying values.</p>\n\n<p>Duplicating <code>test_ref</code> function to handle a <code>&amp;Box&lt;MyTrait&gt;</code> instead of <code>&amp;MyTrait</code> and the exact same body works, but seems like a wrong solution and isn't possible if I can't have access to the content of the library that defines <code>test_ref</code>. Is there any other way to handle both of these? </p>\n"}, {"tags": ["unit-testing", "rust"], "comments": [{"owner": {"reputation": 483726, "user_id": 217408, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/IlnZm.jpg?s=128&g=1", "display_name": "G&#252;nter Z&#246;chbauer", "link": "https://stackoverflow.com/users/217408/g%c3%bcnter-z%c3%b6chbauer"}, "edited": false, "score": 0, "creation_date": 1571071232, "post_id": 46378637, "comment_id": 103110063, "body": "<a href=\"https://stackoverflow.com/a/43093371/217408\">stackoverflow.com/a/43093371/217408</a> looks good to me (but I just started with Rust)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1506174671, "last_edit_date": 1506174671, "creation_date": 1506170424, "answer_id": 46379677, "question_id": 46378637, "link": "https://stackoverflow.com/questions/46378637/how-to-make-a-variable-with-a-scope-lifecycle-for-all-test-functions-in-a-rust-t/46379677#46379677", "title": "How to make a variable with a scope/lifecycle for all test functions in a Rust test?", "body": "<p>Foremost, remember that Rust tests are run in <em>parallel</em>. This means that any shared setup needs to be thread-safe. </p>\n\n<blockquote>\n  <p>and not duplicate the initialization code</p>\n</blockquote>\n\n<p>You do it the same way you avoid duplicating <em>any other code</em>: create a function, create a type, create traits, etc.:</p>\n\n<pre><code>use std::path::PathBuf;\n\nfn root() -&gt; PathBuf {\n    PathBuf::from(\"data/\")\n}\n\n#[test]\nfn test_one() {\n    let root = root();\n    // the rest of the test\n}\n\n#[test]\nfn test_two() {\n    let root = root();\n    // the rest of the test\n}\n</code></pre>\n\n<blockquote>\n  <p>In Java I would define the variable, then initialize it in a <code>setup()</code> method</p>\n</blockquote>\n\n<p>Instead, make a struct called <code>Setup</code> containing all those variables and construct it as the first thing in each test:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nstruct Setup {\n    root: PathBuf,\n}\n\nimpl Setup {\n    fn new() -&gt; Self {\n        Self {\n            root: PathBuf::from(\"data/\"),\n        }\n    }\n}\n\n#[test]\nfn test_one() {\n    let setup = Setup::new();\n    let root: &amp;Path = &amp;setup.root;\n    // the rest of the test\n}\n\n#[test]\nfn test_two() {\n    let setup = Setup::new();\n    let root: &amp;Path = &amp;setup.root;\n    // the rest of the test\n}\n</code></pre>\n\n<blockquote>\n  <p>but have not seen any examples of [lazy-static] use in tests</p>\n</blockquote>\n\n<p>That's because there is no different way to use it in tests, it's just code:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::path::Path;\n\nlazy_static! {\n    static ref ROOT: &amp;'static Path = Path::new(\"data/\");\n}\n\n#[test]\nfn test_one() {\n    let root = *ROOT;\n    // the rest of the test\n}\n\n#[test]\nfn test_two() {\n    let root = *ROOT;\n    // the rest of the test\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30177845/155423\">How to initialize the logger for integration tests?</a></li>\n</ul>\n\n<hr>\n\n<p>Very specifically for your case, it's very rare that you need exactly a <code>Path</code>, since a string slice implements <code>AsRef&lt;Path&gt;</code>. Said another way, most places that accept a <code>Path</code> accept a <code>&amp;str</code>:</p>\n\n<pre><code>static ROOT: &amp;str = \"data/\";\n\n#[test]\nfn test_one() {\n    let root = ROOT;\n    // the rest of the test\n}\n\n#[test]\nfn test_two() {\n    let root = ROOT;\n    // the rest of the test\n}\n</code></pre>\n"}], "owner": {"reputation": 1319, "user_id": 832725, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/bedcff1a490bc2e248b0d9395d9876fe?s=128&d=identicon&r=PG", "display_name": "paul_h", "link": "https://stackoverflow.com/users/832725/paul-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1728, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1506174671, "creation_date": 1506162837, "last_edit_date": 1506174431, "question_id": 46378637, "link": "https://stackoverflow.com/questions/46378637/how-to-make-a-variable-with-a-scope-lifecycle-for-all-test-functions-in-a-rust-t", "title": "How to make a variable with a scope/lifecycle for all test functions in a Rust test?", "body": "<p>I have a test that initializes a variable before diving into the detail of the test, and I want to make a second test with the same variable, and not duplicate the initialization code:</p>\n\n<pre><code>#[test]\nfn test_one() {\n    let root = Path::new(\"data/\");\n    // the rest of the test\n}\n#[test]\nfn test_two() {\n    let root = Path::new(\"data/\");\n    // the rest of the test\n}\n</code></pre>\n\n<p>I don't think <code>static</code> or <code>const</code> would do it because the size would not be known up front, though <code>PathBuf.from(path)</code> might make that OK, except that initialization expressions for static/const vars cannot be too complex.</p>\n\n<p>I've seen <a href=\"https://crates.io/crates/lazy-static\" rel=\"noreferrer\">lazy_static</a>, but have not seen any examples of its use in tests. This after seeing the compiler error with \"an extern crate loading macros must be at the crate root\", which online searching tells me is something about being outside <code>main()</code>, but tests don't have <code>main</code> functions.</p>\n\n<p>In Java, I would define the variable then initialize it in a <code>setup()</code> method, but I can't see examples of that online for Rust. </p>\n"}, {"tags": ["rust", "blockchain", "exonum"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506264169, "post_id": 46377392, "comment_id": 79739664, "body": "My understanding was that items on the blockchain are <i>never</i> changed; that&#39;s part of what makes them interesting and useful. Beyond that, your question doesn&#39;t have enough detail for me to even understand what you are truly asking. Does your question need to involve Exonum? Could you phrase the question with just plain Rust, creating a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>?"}, {"owner": {"reputation": 543, "user_id": 1039984, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/933bc6d13c42486433166bdee49b6e70?s=128&d=identicon&r=PG", "display_name": "Victor Ermolaev", "link": "https://stackoverflow.com/users/1039984/victor-ermolaev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506272056, "post_id": 46377392, "comment_id": 79742175, "body": "Items do change. Think about cryptocurrency: wallet balances are not fixed. What&#39;s important is that changes to the balances (transactions) are immutable. W.r.t. the minimal example: even the minimal example in the Exonum doc is several pages long. I am afraid the question cannot be rephrased in plain Rust, I was hoping that developers of Exonum would take a look at this question. They specifically offer help on their website (<a href=\"https://exonum.com/faq\" rel=\"nofollow noreferrer\">exonum.com/faq</a>)"}], "answers": [{"tags": [], "owner": {"reputation": 543, "user_id": 1039984, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/933bc6d13c42486433166bdee49b6e70?s=128&d=identicon&r=PG", "display_name": "Victor Ermolaev", "link": "https://stackoverflow.com/users/1039984/victor-ermolaev"}, "is_accepted": true, "score": 1, "last_activity_date": 1506692360, "creation_date": 1506692360, "answer_id": 46490042, "question_id": 46377392, "link": "https://stackoverflow.com/questions/46377392/tracking-changes-of-a-single-object-in-exonum/46490042#46490042", "title": "Tracking changes of a single object in Exonum", "body": "<p>After having a conversation with the developers on Gitter, I came up with a solution.</p>\n\n<p>To describe a compound object in <code>encoding_struct!</code> one has to describe each component in a corresponding <code>encoding_struct!</code>. In the case of the question that would be:</p>\n\n<pre><code>encoding_struct! {\n    struct Pair {\n        const SIZE = 8;\n        field s: u32 [00 =&gt; 04]\n        field o: u32 [04 =&gt; 08]\n    }\n}\n\nencoding_struct! {\n    struct AC {\n        const SIZE = 8;\n        field inner : Vec&lt;Pair&gt; [00 =&gt; 08]\n    }\n}\n</code></pre>\n\n<p>To initialize the blockchain db, one has to implement <code>initialize</code> function in the <code>Service</code> trait, e.g., initialize with an empty vector:</p>\n\n<pre><code>impl Service for MService {\n//...\n    fn initialize(&amp;self, fork: &amp;mut Fork) -&gt; Value {\n        let mut schema = MatrixSchema { view: fork };\n        let matrix = AC::new(vec![]);\n        // assume method ac() is implemented for the schema\n        schema.ac().set(ac);        \n        Value::Null\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 1039984, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/933bc6d13c42486433166bdee49b6e70?s=128&d=identicon&r=PG", "display_name": "Victor Ermolaev", "link": "https://stackoverflow.com/users/1039984/victor-ermolaev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 46490042, "answer_count": 1, "score": 1, "last_activity_date": 1510764632, "creation_date": 1506153436, "last_edit_date": 1510764632, "question_id": 46377392, "link": "https://stackoverflow.com/questions/46377392/tracking-changes-of-a-single-object-in-exonum", "title": "Tracking changes of a single object in Exonum", "body": "<p>I have a <em>single</em> object on a blockchain that is going to get updated from time to time. I'd like to track these changes. How do I describe such a struct <code>Vec&lt;(u32, u32)&gt;</code> and initialize it at the start? For now I have:</p>\n\n<pre><code>encoding_struct! {\n    struct AC {\n        const SIZE = 16;\n        field s: Vec&lt;u32&gt; [00 =&gt; 08]\n        field o: Vec&lt;u32&gt; [08 =&gt; 16]\n    }\n}\n</code></pre>\n\n<p>and then wait for a special empty init transaction</p>\n\n<pre><code>message! {\n    struct TxInitAC {\n        const TYPE = SERVICE_ID;\n        const ID = TX_INIT_AC;\n        const SIZE = 0;\n    }\n}\n</code></pre>\n\n<p>with the <code>execute</code> method</p>\n\n<pre><code>fn execute(&amp;self, view: &amp;mut Fork) {\n    let mut schema = CurrencySchema { view };                   \n    let ac = AC::new(vec![], vec![]);        \n    schema.access_control().push(ac);\n}\n</code></pre>\n"}, {"tags": ["rust", "beta", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 0, "creation_date": 1506116558, "post_id": 46373403, "comment_id": 79706747, "body": "Fantastic answer. Thank you."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1506115492, "creation_date": 1506115492, "answer_id": 46373403, "question_id": 46373028, "link": "https://stackoverflow.com/questions/46373028/how-to-release-a-beta-version-of-a-crate-for-limited-public-testing/46373403#46373403", "title": "How to release a beta version of a crate for limited public testing?", "body": "<p><a href=\"http://semver.org/\" rel=\"noreferrer\">Semantic versioning</a> defines the concept of a <a href=\"http://semver.org/#spec-item-9\" rel=\"noreferrer\"><em>pre-release version</em></a>:</p>\n\n<blockquote>\n  <p>A pre-release version MAY be denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version. Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers MUST NOT include leading zeroes. Pre-release versions have a lower precedence than the associated normal version. A pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92</p>\n</blockquote>\n\n<p>To use this in Cargo, publish a crate of the planned version number but append a pre-release identifier. I suggest <code>-beta.0</code>, allowing you to easily increase if you need a second:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"library\"\nversion = \"0.1.1-beta.0\"\n</code></pre>\n\n<p>To use this, you need to specifically opt into it by putting <code>beta</code> into the version requirement:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[dependencies]\nlibrary = \"0.1.1-beta\"\n</code></pre>\n\n<hr>\n\n<p>To test this, I:</p>\n\n<ol>\n<li>Spun up a local crates.io server</li>\n<li>Uploaded the crate <em>library</em> with version 0.1.0</li>\n<li>Used <code>library = \"0.1.0\"</code> in a binary project <em>app</em> \u2014 it resolved to 0.1.0</li>\n<li>Uploaded the crate <em>library</em> with version 0.1.1-beta.0</li>\n<li>Ran <code>cargo update</code> in <em>app</em> \u2014 the version <strong>did not</strong> change.</li>\n<li>Changed to <code>library = \"0.1.1-beta\"</code> in <em>app</em>, ran <code>cargo update</code> \u2014 the version <strong>did</strong> change.</li>\n<li>Uploaded the crate <em>library</em> with version 0.1.1-beta.1</li>\n<li>Ran <code>cargo update</code> in <em>app</em> \u2014 the version <strong>did</strong> change.</li>\n</ol>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 957, "favorite_count": 0, "accepted_answer_id": 46373403, "answer_count": 1, "score": 7, "last_activity_date": 1506115492, "creation_date": 1506113544, "last_edit_date": 1506113851, "question_id": 46373028, "link": "https://stackoverflow.com/questions/46373028/how-to-release-a-beta-version-of-a-crate-for-limited-public-testing", "title": "How to release a beta version of a crate for limited public testing?", "body": "<p>I want to carefully release a new version of a crate to give users a chance to test it first. How can I release it to crates.io as a \"beta\"? (similar to how npm has <code>@next</code> tagged releases).</p>\n\n<p>It's not supposed to be a breaking change, so I'm not going to increase semver-major version. I don't want it to be automatically picked when users do <code>cargo upgrade</code> until the beta testing period ends.</p>\n\n<ul>\n<li><p>What version syntax should I use for the release?</p></li>\n<li><p>Do I need to use any special cargo options when releasing it?</p></li>\n<li><p>How do users use <code>cargo</code>/<code>Cargo.toml</code> to opt in into the beta version?</p></li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1506094278, "creation_date": 1506094278, "answer_id": 46368265, "question_id": 46368098, "link": "https://stackoverflow.com/questions/46368098/how-can-i-use-associated-constants-in-a-where-clause/46368265#46368265", "title": "How can I use associated constants in a where clause?", "body": "<p>It's not a <em>bug</em>, it just hasn't been implemented yet. <a href=\"https://github.com/rust-lang/rust/issues/42863\" rel=\"nofollow noreferrer\">Generic associated consts can't currently be used to parameterize fixed array lengths</a>. You could perhaps file another issue for the not-so-useful error message (there has been at least <a href=\"https://github.com/rust-lang/rust/issues/44243\" rel=\"nofollow noreferrer\">one other poor error message</a>).</p>\n"}], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 164, "favorite_count": 0, "accepted_answer_id": 46368265, "answer_count": 1, "score": 0, "last_activity_date": 1506094278, "creation_date": 1506093633, "last_edit_date": 1506093986, "question_id": 46368098, "link": "https://stackoverflow.com/questions/46368098/how-can-i-use-associated-constants-in-a-where-clause", "title": "How can I use associated constants in a where clause?", "body": "<p>The following seems like a bug to me.</p>\n\n<pre><code>struct Seq([u8; 8]);\n\nimpl From&lt;[u8; 8]&gt; for Seq {\n    fn from(data: [u8; 8]) -&gt; Seq {\n        Seq(data)\n    }\n}\n\ntrait Sequence {\n    const LEN: usize;\n}\n\nimpl Sequence for Seq {\n    const LEN: usize = 8;\n}\n\ntrait ByteSequence {\n    fn check();\n}\n\nimpl&lt;S&gt; ByteSequence for S\nwhere\n    S: Sequence + From&lt;[u8; &lt;S as Sequence&gt;::LEN]&gt;,\n{\n    fn check() {}\n}\n</code></pre>\n\n<p>Results in the following error: <a href=\"https://play.rust-lang.org/?gist=95ffa2f49c39c26a415d370fb538a90f&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `S: Sequence` is not satisfied\n  --&gt; src/main.rs:23:29\n   |\n23 |     S: Sequence + From&lt;[u8; &lt;S as Sequence&gt;::LEN]&gt;,\n   |                             ^^^^^^^^^^^^^^^^^^^^ the trait `Sequence` is not implemented for `S`\n   |\n   = help: consider adding a `where S: Sequence` bound\n   = note: required by `Sequence::LEN`\n</code></pre>\n\n<p>I also tried adding the bound in an extra line or directly in the impl declaration.</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1506088479, "creation_date": 1506088479, "answer_id": 46366481, "question_id": 46363360, "link": "https://stackoverflow.com/questions/46363360/how-to-find-the-current-url-in-iron/46366481#46366481", "title": "How to find the current URL in Iron?", "body": "<p>The <a href=\"http://ironframework.io/\" rel=\"nofollow noreferrer\">Iron homepage</a> has this \"hello world\" example:</p>\n\n<pre><code>fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n}\n</code></pre>\n\n<p>The only input to the function is a <a href=\"https://docs.rs/iron/0.5.1/iron/request/struct.Request.html\" rel=\"nofollow noreferrer\"><code>Request</code></a>. The very first field on that struct is a <code>Url</code>:</p>\n\n<blockquote>\n  <p><code>url</code>: <code>Url</code></p>\n  \n  <p>The requested URL.</p>\n</blockquote>\n"}], "owner": {"reputation": 5, "user_id": 8655283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d028774325e1699bb9b7db30191a8d?s=128&d=identicon&r=PG&f=1", "display_name": "Xwaro", "link": "https://stackoverflow.com/users/8655283/xwaro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 81, "favorite_count": 0, "answer_count": 1, "score": -4, "last_activity_date": 1506088479, "creation_date": 1506078631, "last_edit_date": 1506088205, "question_id": 46363360, "link": "https://stackoverflow.com/questions/46363360/how-to-find-the-current-url-in-iron", "title": "How to find the current URL in Iron?", "body": "<p>How can I find the current URL inside an action/function? I've not found anything related to this in the documentation.</p>\n"}, {"tags": ["terminal", "rust"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 3, "creation_date": 1506066343, "post_id": 46355457, "comment_id": 79678510, "body": "The easy way would be to use an existing crate. For example, <a href=\"https://crates.io/crates/readline\" rel=\"nofollow noreferrer\">readline</a> wraps GNU readline, or <a href=\"https://crates.io/crates/rustyline\" rel=\"nofollow noreferrer\">rustyline</a> is a rust implementation."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 1, "creation_date": 1506072114, "post_id": 46355457, "comment_id": 79681968, "body": "@kazemakase This is the answer. You should post it as an actual answer."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1506072509, "post_id": 46355457, "comment_id": 79682223, "body": "@Boiethios I&#39;m hesitant to post links to libraries as answers because that could imply that the question is off-topic, although alking for a library was not the OPs intent... The way I read the question the OP might actually <i>want</i> to implement this themself."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1506072927, "post_id": 46355457, "comment_id": 79682503, "body": "@kazemakase I know, but unless someone want to actually play with ncurses (that I would not recommend in this case), he should use one of those crates. Maybe you should post an answer like: &quot;use ncurses directly, or use an existing implementation like rustyline. I recommend the latter.&quot;"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1506074452, "post_id": 46355457, "comment_id": 79683480, "body": "@Boiethios right. I won&#39;t be able to write up a good answer until after the weekend. Feel free to do so in my stead. ncurses is not the only option - you can also emit ascii codes for backspace or carriage return to overwrite the current line."}, {"owner": {"reputation": 183, "user_id": 5574801, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XWPU4.jpg?s=128&g=1", "display_name": "zaile", "link": "https://stackoverflow.com/users/5574801/zaile"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1506084607, "post_id": 46355457, "comment_id": 79689885, "body": "@kazemakase answer was definitely what I was looking for. It is actually kind of funny how much more advanced/complex packages were suggested elsewhere rather than rustyline. I have posted the example code edited to my needs as the answer."}], "answers": [{"comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1506330576, "post_id": 46365193, "comment_id": 79760053, "body": "Glad to hear my comment was helpful. You can accept your own answer if you think it&#39;s the best solution to your problem."}], "tags": [], "owner": {"reputation": 183, "user_id": 5574801, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XWPU4.jpg?s=128&g=1", "display_name": "zaile", "link": "https://stackoverflow.com/users/5574801/zaile"}, "is_accepted": true, "score": 4, "last_activity_date": 1506084483, "creation_date": 1506084483, "answer_id": 46365193, "question_id": 46355457, "link": "https://stackoverflow.com/questions/46355457/how-do-i-enable-editable-user-input-for-a-rust-terminal-application/46365193#46365193", "title": "How do I enable editable user input for a Rust terminal application?", "body": "<p>It's funny how some basic/fundamental crates are not suggested elsewhere more readily for problems like this but thankfully <a href=\"https://stackoverflow.com/users/3005167/kazemakase\">@kazemakase</a> answered the question by suggesting a crate I had not found up to this point: <a href=\"https://github.com/kkawakam/rustyline\" rel=\"nofollow noreferrer\">rustyline</a></p>\n\n<p>A slight edit to the example code on the readme yields the results I want, with history, the ability to navigate left/right with the arrow keys, and even the use of key strokes like ctrl-d, ctrl-c, home, etcetera. Here it is to couple with the question as asked:</p>\n\n<pre><code>extern crate rustyline;\n\nuse rustyline::Editor;\nuse rustyline::error::ReadlineError;\n\nfn main() {\n    println!(\"Rispy Version 0.0.1\");\n    println!(\"Enter `quit()` to Exit\");\n\n    let mut reader = Editor::&lt;()&gt;::new();\n    if let Err(_) = reader.load_history(\"rispy_history.txt\") {\n        println!(\"No previous history.\");\n    }\n\n    // continuous input\n    loop {\n\n        let readline = reader.readline(\"rispy&gt;&gt; \");\n\n        match readline {\n            Ok(line) =&gt; {\n                reader.add_history_entry(&amp;line);\n                println!(\"input: {}\", line);\n            },\n            Err(ReadlineError::Interrupted) =&gt; {\n                println!(\"CTRL-C\");\n                println!(\"Goodbye\");\n                break\n            }\n            Err(ReadlineError::Eof) =&gt; {\n                println!(\"CTRL-D\");\n                println!(\"Goodbye\");\n                break\n            },\n            Err(err) =&gt; {\n                println!(\"Error: {:?}\", err);\n                break\n            }\n        }\n    }\n    reader.save_history(\"rispy_history.txt\").unwrap();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 183, "user_id": 5574801, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XWPU4.jpg?s=128&g=1", "display_name": "zaile", "link": "https://stackoverflow.com/users/5574801/zaile"}, "edited": false, "score": 0, "creation_date": 1506112797, "post_id": 46366395, "comment_id": 79705368, "body": "I think this is a great answer and also am amazed by the fact I didn&#39;t know solutions close to this existed. That said, I am going through with selecting my answer (provided by @kazemakase in the comments) as the solution because it answers the problem from within the program rather than outside of it as I requested."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1506088156, "creation_date": 1506088156, "answer_id": 46366395, "question_id": 46355457, "link": "https://stackoverflow.com/questions/46355457/how-do-i-enable-editable-user-input-for-a-rust-terminal-application/46366395#46366395", "title": "How do I enable editable user input for a Rust terminal application?", "body": "<p>As an out-of-the-box answer, I occasionally use <a href=\"https://github.com/hanslub42/rlwrap\" rel=\"nofollow noreferrer\">rlwrap</a>, a small wrapper around <em>any</em> command line program that adds basic readline capabilities.</p>\n\n<p>Running <code>rlwrap cargo run</code>, your original program now has editing like you asked, as well as command history and history searching, and probably a lot of other things.</p>\n"}], "owner": {"reputation": 183, "user_id": 5574801, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XWPU4.jpg?s=128&g=1", "display_name": "zaile", "link": "https://stackoverflow.com/users/5574801/zaile"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 715, "favorite_count": 2, "accepted_answer_id": 46365193, "answer_count": 2, "score": 2, "last_activity_date": 1506088156, "creation_date": 1506043223, "last_edit_date": 1506087836, "question_id": 46355457, "link": "https://stackoverflow.com/questions/46355457/how-do-i-enable-editable-user-input-for-a-rust-terminal-application", "title": "How do I enable editable user input for a Rust terminal application?", "body": "<p>I am writing a minimal Lisp with a classic terminal-based REPL environment  project in Rust.</p>\n\n<p>How do I read in user input from the arrow keys, allowing them to move back and forth on their current line of input at least before they have pressed <code>enter</code>? Ideally, I will be able to extend functionality to include moving \"back\" to retrieve old inputs like you would in any terminal or any REPL. Here's an image of the behavior for clarity:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0trtf.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/0trtf.png\" alt=\"enter image description here\"></a></p>\n\n<p>I have played around with the standard library's <code>io</code> module and the <code>termion</code> crate but have not figured this functionality out.</p>\n\n<p>Here is my current working code. It effectively takes input and immediately prints it back to the user in addition to quitting as expected with <code>quit()</code>.</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::io;\n\nfn main() {\n    println!(\"Rispy Version 0.0.1\");\n    println!(\"Enter `quit()` to Exit\");\n\n    let mut input: String;\n\n    // continuous input til ctrl-c or quit()\n    loop {\n\n        print!(\"rispy&gt;&gt; \");\n        io::stdout().flush().unwrap();\n\n        input = String::new();\n        io::stdin().read_line(&amp;mut input)\n            .expect(\"Error reading line\");\n\n        print!(\"input: {}\", input);\n\n        match input.as_ref() {\n            \"quit()\\n\" =&gt; {\n                println!(\"\\nGoodbye\");\n                break;\n            },\n            _ =&gt; continue,\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1506070714, "post_id": 46344803, "comment_id": 79681085, "body": "Yes, it is <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>. <code>opt_read_future</code> contains a reference to <code>temp_buf</code>."}, {"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1506077678, "post_id": 46344803, "comment_id": 79685339, "body": "@red75prime: Reading your comment, I tried to simplify the code even more to find the core problem. I realize that I have both <code>temp_buff</code> and somehow a reference to its contents on the same struct, but <code>temp_buff</code> is a vector and its contents are on the heap. Why would this be a problem? I can&#39;t seem to understand what could go wrong here. In addition, do you have an idea for a workaround? Where should I put <code>temp_buff</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 0, "last_activity_date": 1509460886, "creation_date": 1509460886, "answer_id": 47038081, "question_id": 46344803, "link": "https://stackoverflow.com/questions/46344803/cannot-infer-an-appropriate-lifetime-borrowing-mutable-buffers-to-futures/47038081#47038081", "title": "Cannot infer an appropriate lifetime: Borrowing mutable buffers to Futures", "body": "<p>Types implementing <code>Future</code> but not having <code>'static</code> lifetime are pretty useless, as the event loop won't run be able to run them.</p>\n\n<p>Also I think lifetimes in a <code>Future::Item</code> are bad; I don't see how the type system could help you determine in the control flow when the future actually completed to release the lifetime.</p>\n\n<p>So you probably want <code>R: FnMut(Vec&lt;u8&gt;) -&gt; Box&lt;Future&lt;Item=Vec&lt;u8&gt;, Error=()&gt;&gt;</code> instead for the <code>recv_dgram</code> function.  It will receive a buffer it is supposed to append new received data to (it could use <code>reserve()</code> and \"unsafe\" buffer filling + <code>set_len()</code> for optimization).  You could also wrap Vec in some custom type to enforce \"append-only\" semantics.</p>\n\n<p>Now you should realize that mutability isn't going to help this function a lot - you could call it 10 times in a row without waiting for the returned futures to complete.  Instead you probably want to pass explicit state along.  Also lets avoid the boxing, and accept any result convertible with <code>IntoFuture</code>:</p>\n\n<pre><code>// `S` is the state, `F` something convertible to a future `F::Future`.\npub struct RecvMsg&lt;R, F, S&gt;\nwhere\n    F: IntoFuture&lt;Item=(S, Vec&lt;u8&gt;), Error=()&gt;,\n    R: FnMut(S, Vec&lt;u8&gt;) -&gt; F,\n{\n    recv_dgram: R,\n    opt_read_future: Option&lt;F::Future&gt;,\n}\n</code></pre>\n\n<p>The currently pending read operation now becomes <code>Option&lt;F::Future&gt;</code>, and the buffer lives in that pending operation.</p>\n\n<p>This pending read operation needs to be polled whenever your wrapper gets polled (and you're not done completely yet)!</p>\n\n<p>All in all it could look like this:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1ef0393ff2affe9aa45f15ae63f603fb&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>extern crate futures;\nuse self::futures::{IntoFuture,Future, Poll, Async};\n\npub struct RecvMsg&lt;R, F, S&gt;\nwhere\n    F: IntoFuture&lt;Item=(S, Vec&lt;u8&gt;), Error=()&gt;,\n    R: FnMut(S, Vec&lt;u8&gt;) -&gt; F,\n{\n    recv_dgram: R,\n    pending: Option&lt;F::Future&gt;,\n}\n\nimpl&lt;R, F, S&gt; RecvMsg &lt;R, F, S&gt;\nwhere\n    F: IntoFuture&lt;Item=(S, Vec&lt;u8&gt;), Error=()&gt;,\n    R: FnMut(S, Vec&lt;u8&gt;) -&gt; F,\n{\n    pub fn new(mut recv_dgram: R, initial_state: S) -&gt; Self {\n        let start = recv_dgram(initial_state, Vec::new()).into_future();\n        RecvMsg{\n            recv_dgram: recv_dgram,\n            pending: Some(start)\n        }\n    }\n}\n\nimpl&lt;R, F, S&gt; Future for RecvMsg &lt;R, F, S&gt;\nwhere\n    F: IntoFuture&lt;Item=(S, Vec&lt;u8&gt;), Error=()&gt;,\n    R: FnMut(S, Vec&lt;u8&gt;) -&gt; F,\n{\n    type Item = Vec&lt;u8&gt;;\n    type Error = ();\n\n    fn poll(&amp;mut self) -&gt; Poll&lt;Self::Item, Self::Error&gt; {\n        match self.pending.take() {\n            Some(mut p) =&gt; {\n                match p.poll()? {\n                    Async::Ready((state, buf)) =&gt; {\n                        if buf.len() &gt; 1024 {\n                            // enough data\n                            Ok(Async::Ready(buf))\n                        } else {\n                            // not enough data, read more\n                            let next = (self.recv_dgram)(state, buf).into_future();\n                            self.pending = Some(next);\n                            Ok(Async::NotReady)\n                        }\n                    },\n                    Async::NotReady =&gt; {\n                        // still waiting for more data\n                        self.pending = Some(p);\n                        Ok(Async::NotReady)\n                    },\n                }\n            },\n            None =&gt; Ok(Async::NotReady), // already completed\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 339, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1509460886, "creation_date": 1505999308, "last_edit_date": 1506088255, "question_id": 46344803, "link": "https://stackoverflow.com/questions/46344803/cannot-infer-an-appropriate-lifetime-borrowing-mutable-buffers-to-futures", "title": "Cannot infer an appropriate lifetime: Borrowing mutable buffers to Futures", "body": "<p>I implemented a Tokio <code>Future</code> that has the following high level logic:</p>\n\n<ol>\n<li>Make a call to a function <code>recv_dgram</code>. This should return a <code>Future</code> that is ready when a small datagram is received.</li>\n<li>When the <code>Future</code> is ready, keep the small datagram.</li>\n<li>If we have enough small datagrams to reconstruct large datagram, set the <code>Future</code> as ready and return the reconstructed datagram. Otherwise, return to step 1.</li>\n</ol>\n\n<p>I have some lifetime problem that I can't manage to understand. I created a self contained simplified piece of code to demonstrate it.</p>\n\n<p>In the code below, <code>RecvMsg</code> is the <code>Future</code> that is ready when enough small datagrams were received. <code>recv_dgram</code> is a function that returns a <code>Future</code> that is ready when a small datagram has arrived.</p>\n\n<p>I am trying to compile the following code (<a href=\"https://play.rust-lang.org/?gist=d4d511077cbaf1fd7e7dec4ab5a580ac&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>extern crate futures;\nuse self::futures::{Future, Poll, Async};\n\nstruct RecvMsg&lt;'d,R&gt;\nwhere \n    R: for &lt;'r&gt; FnMut(&amp;'r mut [u8]) -&gt; Box&lt;Future&lt;Item=&amp;'r mut [u8], Error=()&gt; + 'r&gt;,\n{\n    recv_dgram: R,\n    temp_buff: Vec&lt;u8&gt;,\n    opt_read_future: Option&lt;Box&lt;Future&lt;Item=&amp;'d mut [u8], Error=()&gt; + 'd&gt;&gt;,\n}\n\nimpl&lt;'d,R&gt; Future for RecvMsg&lt;'d,R&gt;\nwhere \n    R: for &lt;'r&gt; FnMut(&amp;'r mut [u8]) -&gt; Box&lt;Future&lt;Item=&amp;'r mut [u8], Error=()&gt; + 'r&gt;,\n{\n    type Item = ();\n    type Error = ();\n\n    fn poll(&amp;mut self) -&gt; Poll&lt;Self::Item, ()&gt; {\n\n        // Obtain a future datagram, \n        let mut fdgram = (self.recv_dgram)(&amp;mut self.temp_buff);\n        // Code compiles if this line is commented out:\n        self.opt_read_future = Some(fdgram);\n        return Ok(Async::NotReady);\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>This is the error message I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --&gt; src/main.rs:25:44\n   |\n25 |         let mut fdgram = (self.recv_dgram)(&amp;mut self.temp_buff);\n   |                                            ^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 22:5...\n  --&gt; src/main.rs:22:5\n   |\n22 | /     fn poll(&amp;mut self) -&gt; Poll&lt;Self::Item, ()&gt; {\n23 | |\n24 | |         // Obtain a future datagram, \n25 | |         let mut fdgram = (self.recv_dgram)(&amp;mut self.temp_buff);\n...  |\n28 | |         return Ok(Async::NotReady);\n29 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:25:44\n   |\n25 |         let mut fdgram = (self.recv_dgram)(&amp;mut self.temp_buff);\n   |                                            ^^^^^^^^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'd as defined on the impl at 13:1...\n  --&gt; src/main.rs:13:1\n   |\n13 | / impl&lt;'d,R&gt; Future for RecvMsg&lt;'d,R&gt;\n14 | | where \n15 | |     R: for &lt;'r&gt; FnMut(&amp;'r mut [u8]) -&gt; Box&lt;Future&lt;Item=&amp;'r mut [u8], Error=()&gt; + 'r&gt;,\n16 | | {\n...  |\n29 | |     }\n30 | | }\n   | |_^\nnote: ...so that expression is assignable (expected std::option::Option&lt;std::boxed::Box&lt;futures::Future&lt;Error=(), Item=&amp;'d mut [u8]&gt; + 'd&gt;&gt;, found std::option::Option&lt;std::boxed::Box&lt;futures::Future&lt;Error=(), Item=&amp;mut [u8]&gt;&gt;&gt;)\n  --&gt; src/main.rs:27:32\n   |\n27 |         self.opt_read_future = Some(fdgram);\n   |                                ^^^^^^^^^^^^\n</code></pre>\n\n<p>I have some ideas about what could be wrong. I know that if I comment out the line:</p>\n\n<pre><code>reading_state.opt_read_future = Some(fdgram);\n</code></pre>\n\n<p>The code compiles successfully. In addition, I suspect that the fact that <code>reading_state.temp_buff</code> is used here as an argument:</p>\n\n<pre><code>let mut fdgram = (reading_state.frag_msg_receiver.recv_dgram)(\n                &amp;mut reading_state.temp_buff);\n</code></pre>\n\n<p>has something to do with the problem. (See also <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>)</p>\n"}, {"tags": ["sql-server", "rust", "rust-tokio"], "comments": [{"owner": {"reputation": 1738, "user_id": 5226582, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3599f10b53b2569616a4f00dccdab8a3?s=128&d=identicon&r=PG&f=1", "display_name": "user5226582", "link": "https://stackoverflow.com/users/5226582/user5226582"}, "edited": false, "score": 0, "creation_date": 1505999236, "post_id": 46344602, "comment_id": 79649492, "body": "What&#39;s not working exactly? Is there an error?"}, {"owner": {"reputation": 25, "user_id": 8648854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KbXrG.png?s=128&g=1", "display_name": "Sartor", "link": "https://stackoverflow.com/users/8648854/sartor"}, "reply_to_user": {"reputation": 1738, "user_id": 5226582, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3599f10b53b2569616a4f00dccdab8a3?s=128&d=identicon&r=PG&f=1", "display_name": "user5226582", "link": "https://stackoverflow.com/users/5226582/user5226582"}, "edited": false, "score": 0, "creation_date": 1506000045, "post_id": 46344602, "comment_id": 79650110, "body": "It compiles but hangs on request. I think problem in wait() call."}], "answers": [{"comments": [{"owner": {"reputation": 25, "user_id": 8648854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KbXrG.png?s=128&g=1", "display_name": "Sartor", "link": "https://stackoverflow.com/users/8648854/sartor"}, "edited": false, "score": 0, "creation_date": 1506008715, "post_id": 46347680, "comment_id": 79656508, "body": "Thank you very much! This is exactly what I need. Key feature is work with more generic StateStream instead of tiberius::stmt::ResultStreamExt."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1506007248, "creation_date": 1506007248, "answer_id": 46347680, "question_id": 46344602, "link": "https://stackoverflow.com/questions/46344602/how-to-get-all-rows-as-a-vector-with-tiberius-futures/46347680#46347680", "title": "How to get all rows as a vector with tiberius futures?", "body": "<p>In your original code, you had </p>\n\n<pre><code>conn.simple_query(\"SELECT id, name FROM users\").for_each_row(|row| {\n    // ...\n}).wait().unwrap();\n</code></pre>\n\n<p>And you said \"It compiles but hangs on request. I think problem in <code>wait()</code> call.\".</p>\n\n<p>If you read the documentation for <a href=\"https://docs.rs/futures/0.1.16/futures/future/trait.Future.html#method.wait\" rel=\"nofollow noreferrer\"><code>Future::wait</code></a>, you'll see this warning, emphasis mine:</p>\n\n<blockquote>\n  <p>Note: This method is not appropriate to call on event loops or similar I/O situations because it will prevent the event loop from making progress (<strong>this blocks the thread</strong>). This method should only be called when it's guaranteed that the blocking work associated with this future will be completed by another thread.</p>\n</blockquote>\n\n<p>In your updated code, you have</p>\n\n<pre><code>conn.simple_query(\"SELECT id, name FROM test\").for_each_row(|row| {\n    // ...\n});\n</code></pre>\n\n<p>This constructs a future but then drops it immediately, thus nothing ever happens to the outer vector. All of the futures in the futures crate have a warning attached to them for exactly this reason:</p>\n\n<blockquote>\n  <p>warning: unused `futures::FutureResult` which must be used: futures do nothing unless polled</p>\n</blockquote>\n\n<p>I've filed <a href=\"https://github.com/steffengy/tiberius/issues/34\" rel=\"nofollow noreferrer\">an issue</a> so that the library adds this.</p>\n\n<hr>\n\n<p>Here's a <strong>completely untested</strong> piece of code. I don't have a SQL Server instance around to actually test it, but it does compile and has the right shape.</p>\n\n<pre><code>extern crate futures;\nextern crate futures_state_stream;\nextern crate tokio_core;\nextern crate tiberius;\n\nuse futures::{Future, Stream};\nuse futures_state_stream::StateStream;\nuse tiberius::SqlConnection;\nuse tokio_core::reactor::Core;\n\nfn main() {\n    let mut core = Core::new().unwrap();\n\n    let connection_string = \"server=tcp:127.0.0.1,1433;username=SA;password=qweasdZXC123!!;\";\n\n    let future = SqlConnection::connect(core.handle(), connection_string)\n        .and_then(|conn| {\n\n            let query = conn.query(\"SELECT * FROM test WHERE id &gt; @P1\", &amp;[&amp;0i32])\n                .into_stream()\n                .take(1);\n\n            query.flatten()\n                .map(|row| {\n                    let id: i32 = row.get(0);\n                    let name: &amp;str = row.get(1);\n\n                    format!(\"{} - {}\", id, name)\n                })\n                .collect()\n        });\n\n    let all_rows = core.run(future).unwrap();\n.\n    println!(\"{:?}\", all_rows);\n}\n</code></pre>\n\n<p>Important points:</p>\n\n<ol>\n<li><code>conn.query</code> can be used with <em>multiple</em> query statements, so it returns a <em>stream</em> of result sets.</li>\n<li><code>conn.query</code> actually implements a <a href=\"https://docs.rs/futures-state-stream/0.1.1/futures_state_stream/trait.StateStream.html\" rel=\"nofollow noreferrer\"><code>StateStream</code></a>, not a <code>futures::Stream</code>. For the purposes of the example, I convert it back to a <code>futures::Stream</code> with <code>.into_stream()</code>. This is non-ideal because we lose the ability to recover the <code>conn</code> afterwards.</li>\n<li>I take only up to the first result set with <code>.take(1)</code>.</li>\n<li>Since we now have a <code>Stream</code> of <code>Stream</code>s, we use <code>Stream::flatten</code> to remove the nesting.</li>\n<li>Each row is <code>map</code>ped to a <code>String</code>.</li>\n<li>The <code>Stream</code> is <code>collect</code>ed into a single <code>Future</code> of a <code>Vec&lt;String&gt;</code></li>\n</ol>\n"}], "owner": {"reputation": 25, "user_id": 8648854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KbXrG.png?s=128&g=1", "display_name": "Sartor", "link": "https://stackoverflow.com/users/8648854/sartor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 866, "favorite_count": 1, "accepted_answer_id": 46347680, "answer_count": 1, "score": 1, "last_activity_date": 1506007330, "creation_date": 1505998749, "last_edit_date": 1506007330, "question_id": 46344602, "link": "https://stackoverflow.com/questions/46344602/how-to-get-all-rows-as-a-vector-with-tiberius-futures", "title": "How to get all rows as a vector with tiberius futures?", "body": "<p>I need to collect all the rows of a table using <a href=\"https://github.com/steffengy/tiberius\" rel=\"nofollow noreferrer\">tiberius</a> and output them. My simple code is:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\nextern crate tiberius;\n\nuse futures::Future;\nuse tokio_core::reactor::Core;\nuse tiberius::SqlConnection;\nuse tiberius::stmt::ResultStreamExt;\n\nfn main() {\n    let mut core = Core::new().unwrap();\n\n    let future = SqlConnection::connect(core.handle(), \"server=tcp:127.0.0.1,1433;username=SA;password=qweasdZXC123!!;\")\n        .and_then(|conn| {\n            let mut v: Vec&lt;String&gt; = Vec::new();\n\n            conn.simple_query(\"SELECT id, name FROM test\").for_each_row(|row| {\n\n                let id: i32 = row.get(0);\n                let name: &amp;str = row.get(1);\n\n                v.push(format!(\"{} - {}\", id, name));\n\n                Ok(())\n            });\n\n            println!(\"{:?}\", v);\n\n            Ok(())\n        });\n\n    core.run(future).unwrap();\n}\n</code></pre>\n\n<p>This code prints an empty vector, but I need full vector of strings. I have read some articles about futures, but as as newbie to Rust, they look too complicated for me.</p>\n"}, {"tags": ["rust", "c-strings", "ffi"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1505993814, "post_id": 46342644, "comment_id": 79645628, "body": "Use <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_bytes\" rel=\"nofollow noreferrer\"><code>CString::into_bytes</code></a> with <a href=\"https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStringExt.html\" rel=\"nofollow noreferrer\"><code>OsStringExt</code></a> followed by <code>PathBuf::from</code> on Unix and <code>String</code> on Windows."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1505994168, "post_id": 46342644, "comment_id": 79645866, "body": "@BurntSushi5 But this would include an allocation and copying the string, right? The way I understood this question is that Kornel wants to avoid that and just work with a given c-string (right?). I expected there to be a conversion function from <code>CStr</code> to <code>OsStr</code>, but I can&#39;t find such a function :confused:"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1505994658, "post_id": 46342644, "comment_id": 79646172, "body": "There doesn&#39;t seem to be an alloc-free approach, which is a bit intriguing but reflects the safety that we wish to impose on strings."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1505998206, "post_id": 46342644, "comment_id": 79648687, "body": "@LukasKalbertodt Isn&#39;t <code>OsStrExt::from_bytes</code> such function? AFAICT an <code>OsStr</code> can be produced from a <code>CStr</code> using <code>OsStrExt::from_bytes(cstr.to_bytes())</code>. This will obviously only work on Unix, but that&#39;s unavoidable, since Rust on Windows uses a native <code>OsStr</code> implementation incompatible with <code>char *</code>. :/"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1505998480, "post_id": 46342644, "comment_id": 79648890, "body": "@E_net4 I suppose an approach that is alloc-free where possible could be hacked together by implementing a <code>Cow</code>-like enum for C-backed paths. On Unix the enum would expose a cstring-backed <code>OsStr&amp;</code> and on Windows it would allocate an <code>OsString</code> and expose its underlying <code>OsStr&amp;</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1505998527, "post_id": 46342644, "comment_id": 79648937, "body": "@user4815162342 Yes, by alloc-free I meant something that would never allocate, even conditionally."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1506010198, "post_id": 46342644, "comment_id": 79657455, "body": "You can&#39;t have alloc-free and portability because you need to deal with the fact that Windows paths might be UTF-16 encoded. You can get alloc-free on Unix using <code>OsStrExt</code>."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540796221, "post_id": 46342644, "comment_id": 92979695, "body": "&quot;This will obviously only work on Unix&quot; -- it&#39;s only &quot;obvious&quot; because Rust is so broken. &quot;but that&#39;s unavoidable, since Rust on Windows uses a native OsStr implementation incompatible with char *. &quot; -- this is utter nonsense."}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1505996364, "post_id": 46343164, "comment_id": 79647255, "body": "@red75prime: But you absolutely cannot assume that all paths will be ASCII.  Technically, you can&#39;t even assume that all possible encodings have ASCII as a common subset, since there are non-ASCII encodings still usable on Windows.  But once you reach that point, it&#39;s hard to continue caring."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1505998696, "post_id": 46343164, "comment_id": 79649064, "body": "The Unix remark is too pessimistic. A <code>const char *</code> received from FFI is meant to be passed to functions such as <code>fopen()</code> (this is what any C code would do), so the OP needn&#39;t care about the encoding it&#39;s in. On the Rust side, that&#39;s precisely what <code>OsStrExt::from_bytes</code> is <i>for</i>. With the Windows part I couldn&#39;t agree more."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1506001254, "post_id": 46343164, "comment_id": 79651127, "body": "@user4815162342: There is nothing in the question about <i>where</i> this string is coming from, only that it&#39;s a C string.  It could be coming from a database that encodes all it&#39;s strings in EBCDIC for all I know."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1506006986, "post_id": 46343164, "comment_id": 79655358, "body": "That&#39;s a theoretical possibility, but I suspect the OP would have mentioned that, or would have referred to the data as <code>uint8_t *</code> or equivalent. The fact that the OP wants to &quot;use the <code>const char *</code> as a filesystem path&quot; indicates that the file names are fine as they are, content-wise, but it takes some effort to convince Rust of the fact. (Going through strings enforces UTF-8, for example.)"}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540797063, "post_id": 46343164, "comment_id": 92980062, "body": "<i>there is no 8-bit encoding that can properly store Windows paths</i> -- this is obviously nonsense; everything in memory has an 8-bit encoding. <i>since Windows paths are &quot;arbitrary 16-bit words that look like UTF-16 but might not be</i> -- and POSIX paths are arbitrary byte sequences that don&#39;t contain NULs (with some fine print about slashes). None of this is relevant. Just as POSIX OS&#39;s don&#39;t check that paths are valid Unicode, neither does Windows. Rust breaks the round trip on Windows; other languages don&#39;t."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540798255, "post_id": 46343164, "comment_id": 92980607, "body": "<i>C strings embedded in an executable can be in a variety of encodings depending on how the code was compiled. ...</i> -- All of which is, of course, also true on POSIX. And good luck trying to write fsck/chkdsk in the Rust &quot;systems programming&quot; language. D, e.g., doesn&#39;t have this problem because it understands that abstractions leak and system programmers need them to leak, and so it allows viewing byte sequences however the programmer wants, and only enforces Unicode if/when the programmer wants that."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1505996051, "last_edit_date": 1505996051, "creation_date": 1505994504, "answer_id": 46343164, "question_id": 46342644, "link": "https://stackoverflow.com/questions/46342644/how-can-i-get-a-path-from-a-raw-c-string-cstr-or-const-u8/46343164#46343164", "title": "How can I get a Path from a raw C string (CStr or *const u8)?", "body": "<p>Safely and portably?  Insofar as I'm aware, there isn't a way.  My advice is to demand UTF-8 and just <em>pray</em> it never breaks.</p>\n\n<p>The problem is that the only thing you can really say about a \"C string\" is that it's NUL-terminated.  You can't really say anything meaningful about how it's <em>encoded</em>.  At least, not with any real certainty.</p>\n\n<p>Unsafely and/or non-portably?  If you're running on Linux (and possibly other modern *NIXen), you can <em>maybe</em> use <a href=\"https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html\" rel=\"nofollow noreferrer\"><code>OsStrExt</code></a> to do the conversion.  This only works assuming the C string was a valid path in the first place.  If it came from some string processing code that <em>wasn't</em> using the same encoding as the filesystem (which these days is generally \"arbitrary bytes that look like UTF-8 but might not be\")... well, you'll have to convert it yourself, first.</p>\n\n<p>On Windows?  <em>Hahahaha.</em>  This depends on where the string came from.  C strings embedded in an executable can be in a variety of encodings depending on how the code was compiled.  If it came from the OS itself, it could be in one of <em>two</em> different encodings: the thread's OEM codepage, or the thread's ANSI codepage.  I never worked out how to check which it's set to.  If it came from the console, it would be in whatever the console's input encoding was set to when you received it... assuming it wasn't piped in from something else that was using a different encoding (hi there, PowerShell!).  All of the above require you to roll your own transcoding code, since Rust itself avoids this by never, <em>ever</em> using non-Unicode APIs on Windows.</p>\n\n<p>Oh, and don't forget that there is <em>no</em> 8-bit encoding that can properly store Windows paths, since Windows paths are \"arbitrary 16-bit words that look like UTF-16 but might not be\". [1]</p>\n\n<p>... so, like I said: demand UTF-8 and just <em>pray</em> it never breaks, because trying to do it \"correctly\" leads to madness.</p>\n\n<hr>\n\n<p>[1]: I should clarify: there <em>is</em> such an encoding: WTF-8, which is what Rust uses for <code>OsStr</code> and <code>OsString</code> on Windows.  The catch is that nothing <em>else</em> on Windows uses this, so it's never going to be how a C string is encoded.</p>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 2, "last_activity_date": 1540847737, "creation_date": 1540847737, "answer_id": 53053934, "question_id": 46342644, "link": "https://stackoverflow.com/questions/46342644/how-can-i-get-a-path-from-a-raw-c-string-cstr-or-const-u8/53053934#53053934", "title": "How can I get a Path from a raw C string (CStr or *const u8)?", "body": "<p>Here's what I've learned:</p>\n\n<ul>\n<li><p><code>Path</code>/<code>OsStr</code> always use WTF-8 on Windows, and are an encoding-ignorant bag of bytes on Unix.</p></li>\n<li><p>They <strong>never ever</strong> store any paths using any \"wide\" encoding like UTF-16 or UCS-2. The Windows-only masquerade of <code>OsStr</code> is to hide the WTF-8 encoding, nothing more.</p></li>\n<li><p>It is extremely unlikely to ever change, because the standard library API supports creation of <code>Path</code> and <code>OsStr</code> from UTF-8 <code>&amp;str</code> without any allocation or mutation of memory (i.e. <code>as_ref()</code> is supported, and its strict API doesn't leave room to implement it as anything other than a pointer cast).</p></li>\n</ul>\n\n<p>Unix-only zero-copy version (it doesn't even depend on any implementation details):</p>\n\n<pre><code>use std::ffi::{CStr,OsStr};\nuse std::path::Path;\nuse std::os::unix::ffi::OsStrExt;\n\nlet slice = CStr::from_ptr(c_null_terminated_string_ptr_here);\nlet osstr = OsStr::from_bytes(slice.to_bytes());\nlet path: &amp;Path = osstr.as_ref();\n</code></pre>\n\n<p>On Windows, converting only valid UTF-8 is the best Rust can do without a charade of creating WTF-8 <code>OsString</code> from code units:</p>\n\n<pre><code>\u2026\nlet str = ::std::str::from_utf8(slice.to_bytes()).expect(\"keep your surrogates paired\");\nlet path: &amp;Path = str.as_ref();\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1183, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1540847737, "creation_date": 1505992941, "last_edit_date": 1506022527, "question_id": 46342644, "link": "https://stackoverflow.com/questions/46342644/how-can-i-get-a-path-from-a-raw-c-string-cstr-or-const-u8", "title": "How can I get a Path from a raw C string (CStr or *const u8)?", "body": "<p>What's the most direct way to use a C string as Rust's <code>Path</code>?</p>\n\n<p>I've got <code>const char *</code> from FFI and need to use it as a filesystem path in Rust. </p>\n\n<ul>\n<li>I'd rather not enforce UTF-8 on the path, so converting through <code>str</code>/<code>String</code> is undesirable.</li>\n<li>It should work on Windows at least for ASCII paths.</li>\n</ul>\n\n<p>To clarify: I'm just replacing an existing C implementation that passes the path to <code>fopen</code> with a Rust stdlib implementation. It's not my problem whether it's a valid path or encoded properly for a given filesystem, as long as it's not worse than <code>fopen</code> (and I know <code>fopen</code> basically doesn't work on Windows).</p>\n"}]