[{"tags": ["rust", "pass-by-reference", "mutable"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1438230114, "post_id": 31713130, "comment_id": 51367723, "body": "Last I checked, <a href=\"http://stackoverflow.com/questions/4305673/does-c-have-references\">C doesn&#39;t have references</a>. Are you sure you aren&#39;t using a C++ compiler and treating your code as C++?"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 7, "last_activity_date": 1438216029, "creation_date": 1438216029, "answer_id": 31713364, "question_id": 31713130, "link": "https://stackoverflow.com/questions/31713130/how-to-make-a-mutable-reference-to-an-immutable-value/31713364#31713364", "title": "How to make a mutable reference to an immutable value", "body": "<p>You\u2019re misunderstanding what the code is doing. Here is the <em>actual</em> equivalent code:</p>\n\n<pre><code>fn main() {\n    let a: i32 = 3;\n    let mut b = a;\n\n    println!(\"a is {} and b is {}\", a, b);\n    do_something(&amp;mut b);\n    println!(\"a is {} and b is {}\", a, b);\n}\n\nfn do_something(var: &amp;mut i32) {\n    *var += 1;\n}\n</code></pre>\n\n<p><code>b</code> is not, in your C code, a reference of any form; it has absolutely no connection with <code>a</code>. It\u2019s just that C allows you to pass a value and have it infer that it must take a reference to it, while Rust is very sensibly explicit about such things, and so you need to write <code>&amp;mut b</code> rather than just <code>b</code> to pass a mutable reference to <code>do_something</code>. The <code>mut b</code> earlier on just makes the <code>b</code> slot mutable, allowing you to mutate the value inside it (without it, you won\u2019t be able to create a mutable reference to <code>b</code>).</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2006, "favorite_count": 0, "accepted_answer_id": 31713364, "answer_count": 1, "score": 1, "last_activity_date": 1438255653, "creation_date": 1438214209, "last_edit_date": 1438255653, "question_id": 31713130, "link": "https://stackoverflow.com/questions/31713130/how-to-make-a-mutable-reference-to-an-immutable-value", "title": "How to make a mutable reference to an immutable value", "body": "<p>I'm just beginning to learn a little Rust and am very intrigued by the concept of mutability of variables.</p>\n\n<p>I'm trying to write something very similar to this C++ program.</p>\n\n<pre><code>#include &lt;cstdio&gt;\n\nvoid do_something(int &amp;var) {\n   var++;\n}\n\nint main() {\n\n    int a = 3;\n    int b = a;\n    printf(\"a is %d and b is %d\\n\", a, b);\n    do_something(b);\n    printf(\"a is %d and b is %d\\n\", a, b);\n\n    return 0;\n}\n</code></pre>\n\n<p>I expect to see:</p>\n\n<blockquote>\n  <p>a is 3 and b is 3</p>\n  \n  <p>a is 3 and b is 4</p>\n</blockquote>\n\n<p>The idea is that the pass-by-reference renders <code>b</code> mutable, but <code>a</code> is not mutable.</p>\n\n<p>Here's how I would assume to write this program in Rust:</p>\n\n<pre><code>fn main() {\n    let a: i32 = 3;\n    let b: &amp;mut i32 = &amp;a;\n\n    println!(\"a is {} and b is {}\", a, b);\n    do_something(b);\n    println!(\"a is {} and b is {}\", a, b);\n}\n\nfn do_something(var: &amp;mut i32) {\n    (*var)+=1;\n}\n</code></pre>\n\n<p>However, I get errors due to mismatched mutability.</p>\n\n<blockquote>\n  <p>error: mismatched types:</p>\n  \n  <p>expected <code>&amp;mut i32</code>,\n      found <code>&amp;i32</code></p>\n  \n  <p>(values differ in mutability) [E0308]</p>\n</blockquote>\n\n<p>Are there ways to secure this pass-by-reference style in Rust without <code>::New</code>? My guess is I could use <code>.clone()</code>, but I'm not positive.</p>\n"}, {"tags": ["windows", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 2, "last_activity_date": 1438200912, "creation_date": 1438200912, "answer_id": 31710264, "question_id": 31709518, "link": "https://stackoverflow.com/questions/31709518/etwgettraceloggerhandle-not-found-when-running-cargo/31710264#31710264", "title": "EtwGetTraceLoggerHandle not found when running Cargo", "body": "<p>Rust isn't (<a href=\"https://github.com/rust-lang/rfcs/issues/1061\" rel=\"nofollow\">currently</a>) supported on Windows XP.</p>\n"}], "owner": {"reputation": 673, "user_id": 5008381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/2395a2ebca93cd49b689c3d9245f491f?s=128&d=identicon&r=PG&f=1", "display_name": "vlad4378", "link": "https://stackoverflow.com/users/5008381/vlad4378"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 869, "favorite_count": 0, "accepted_answer_id": 31710264, "answer_count": 1, "score": 3, "last_activity_date": 1438206830, "creation_date": 1438198312, "last_edit_date": 1438206830, "question_id": 31709518, "link": "https://stackoverflow.com/questions/31709518/etwgettraceloggerhandle-not-found-when-running-cargo", "title": "EtwGetTraceLoggerHandle not found when running Cargo", "body": "<p>When I run Cargo with any option, I see the following error:</p>\n\n<blockquote>\n  <p>The entry point to EtwGetTraceLoggerHandle was not found in ntdll.dll</p>\n</blockquote>\n\n<p>Sorry for my bad translation. The original:</p>\n\n<blockquote>\n  <p>\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0432 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0443 EtwGetTraceLoggerHandle \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 DLL ntdll.dll\"</p>\n</blockquote>\n\n<p>What is the reason? My system is Windows XP 32 bit.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1438184903, "post_id": 31704573, "comment_id": 51349044, "body": "I wouldn&#39;t think cargo comes with some sort of tool for authenticating git, as the idea of cargo is to grab public dependencies for a one-for-all build tool."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1438202744, "post_id": 31704573, "comment_id": 51359562, "body": "I would fully expect that if <code>git clone foo</code> works, then <code>git = &quot;foo&quot;</code> will work. It should use the same keys, as far as I\u2019m aware. What actually happens?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1438209022, "post_id": 31704573, "comment_id": 51362490, "body": "@ChrisMorgan if you try to use ssh syntax (e.g. git@github just for example) you get &quot;invalid url <code>git@github.com:my&#47;crate</code>: relative URL without a base&quot;"}, {"owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "edited": false, "score": 0, "creation_date": 1490282655, "post_id": 31704573, "comment_id": 73052559, "body": "I really need a solution to this.  I have several private repositories on Github and need to share crates between them. <code>git = &quot;https:&#47;&#47;github.com&#47;fred&#47;bill&quot;</code> doesn&#39;t work, neither does <code>git = &quot;git@...&quot;</code>, nor does <code>git = &quot;ssh:&#47;&#47;...&quot;</code>. <code>git clone ...</code> works fine. The complaints are all about authentication. It seems to be ignoring the <code>git config</code> user settings."}, {"owner": {"reputation": 2126, "user_id": 3680466, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/2a8e5869d77d8943cad4baaba68ceeca?s=128&d=identicon&r=PG&f=1", "display_name": "cloudsurfin", "link": "https://stackoverflow.com/users/3680466/cloudsurfin"}, "edited": false, "score": 0, "creation_date": 1588305043, "post_id": 31704573, "comment_id": 108852985, "body": "Did you ever figure this out? the labmachine:bar/foo scenario?"}], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 2, "creation_date": 1438290415, "post_id": 31714167, "comment_id": 51403549, "body": "Hmm, not working. If I use my alias defined in in <code>~&#47;.ssh&#47;config</code> I get &quot;no such known host&quot;. Entering the full url gives <code>error authenticating: failed connecting agent</code>. I checked that the full ssh path works with <code>git clone</code>, to be clear."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1438291940, "post_id": 31714167, "comment_id": 51404255, "body": "That\u2019s troublesome. I\u2019m not sure what\u2019s going on, then."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 2, "last_activity_date": 1438222734, "creation_date": 1438222734, "answer_id": 31714167, "question_id": 31704573, "link": "https://stackoverflow.com/questions/31704573/is-it-possible-to-have-cargo-fetch-dependencies-from-a-private-remote-git/31714167#31714167", "title": "Is it possible to have Cargo fetch dependencies from a private remote git?", "body": "<p>Use a full SSH path rather than Git\u2019s shorthand:</p>\n\n<pre><code>git = \"ssh://landmachine/bar/foo\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "edited": false, "score": 0, "creation_date": 1497370821, "post_id": 42982632, "comment_id": 76045350, "body": "I can confirm that I had to re-issue the <code>ssh-add</code> command before it would work again (after a reboot brought about by an update)."}], "tags": [], "owner": {"reputation": 22118, "user_id": 57171, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8b7f3a1367b24335691b1af5397f1a67?s=128&d=identicon&r=PG", "display_name": "Steve Powell", "link": "https://stackoverflow.com/users/57171/steve-powell"}, "is_accepted": false, "score": 9, "last_activity_date": 1490291598, "last_edit_date": 1490291598, "creation_date": 1490288949, "answer_id": 42982632, "question_id": 31704573, "link": "https://stackoverflow.com/questions/31704573/is-it-possible-to-have-cargo-fetch-dependencies-from-a-private-remote-git/42982632#42982632", "title": "Is it possible to have Cargo fetch dependencies from a private remote git?", "body": "<p>On macOS Sierra, I had to create a <code>.ssh/config</code> file like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Host *\n   UseKeychain yes\n   AddKeysToAgent yes\n   IdentityFile ~/.ssh/id_rsa\n</code></pre>\n\n<p>with the private key (RSA) file pointed to, and then issue the command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ssh-add -K ~/.ssh/id_rsa\n</code></pre>\n\n<p>which (finally!) allowed an entry like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>git = \"ssh://git@github.com/skipjaq/loda.git\"\n</code></pre>\n\n<p>to work perfectly.</p>\n\n<p>I do not know how often I will have to repeat the <code>ssh-add</code> command, but it appears this ought to hold at least until the next reboot.</p>\n\n<p>This anomaly is apparently a feature of <code>ssh-agent</code> on macOS Sierra.</p>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3677, "favorite_count": 4, "answer_count": 2, "score": 17, "last_activity_date": 1490291598, "creation_date": 1438183078, "question_id": 31704573, "link": "https://stackoverflow.com/questions/31704573/is-it-possible-to-have-cargo-fetch-dependencies-from-a-private-remote-git", "title": "Is it possible to have Cargo fetch dependencies from a private remote git?", "body": "<p>I have an account on an ssh-friendly lab machine where I store a lot of private projects so I can access them from multiple computers (and it allows me to only use my few private Github repos for things multiple people will work on).</p>\n\n<p>It seems like Rust is well-equipped to fetch local and public data by using things like</p>\n\n<pre><code>[dependencies.foo]\ngit = \"https://github.com/bar/foo\"\n\n[dependencies.baz]\npath = \"/path/to/baz\"\n</code></pre>\n\n<p>But I haven't found a way to get it to work using ssh git (e.g. <code>git = \"git@github.com:bar/foo\"</code>, or in my case <code>labmachine:bar/foo</code>). I have passwordless/keygen ssh set up, if that helps.</p>\n\n<p>It's not a big deal if it doesn't exist. At the moment I'm just manually cloning the repository and using <code>path = ../foo</code>, which works as long as I keep my directory structure the same and remember to manually <code>pull</code> all dependencies on all my machines. However, it would make things a lot easier if I could just set up Cargo to do it, especially if I just need to quickly demo something on my laptop or whatever.</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "edited": false, "score": 1, "creation_date": 1438184956, "post_id": 31702182, "comment_id": 51349079, "body": "Ah, that works fine for compilers that support variable-length arrays, but not for mine. I&#39;m using the Visual C++ 2005 compiler. I will update my question to be more specific."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1438195335, "post_id": 31702182, "comment_id": 51355373, "body": "In that case you&#39;re stuck with preprocessor-based constants, so you wouldn&#39;t be able to use constants defined on Rust side, unfortunately."}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1607995243, "post_id": 31702182, "comment_id": 115441634, "body": "how to declare <code>X</code> for C without initilizing it? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eb9a09e43bf6495eb950fcea1a967ae6\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> <a href=\"https://stackoverflow.com/q/65292878\">stackoverflow.com/q/65292878</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1438177636, "last_edit_date": 1438177636, "creation_date": 1438177283, "answer_id": 31702182, "question_id": 31701655, "link": "https://stackoverflow.com/questions/31701655/can-a-rust-constant-static-be-exposed-to-c/31702182#31702182", "title": "Can a Rust constant/static be exposed to C?", "body": "<p>You most certainly can do it, at least inside functions:</p>\n\n<p><code>cnst.rs</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub static X: i32 = 42;\n</code></pre>\n\n<p><code>cnstuse.c</code>:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\nextern const int32_t X;\n\nint main() {\n    char data[X];\n    printf(\"%lu\\n\", sizeof(data));\n    return 0;\n}\n</code></pre>\n\n<p>Compilation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>% rustc --crate-type=staticlib cnst.rs\nnote: link against the following native artifacts when linking against this static library\nnote: the order and any duplication can be significant on some platforms, and so may need to be preserved\nnote: library: System\nnote: library: pthread\nnote: library: c\nnote: library: m\n% gcc -o cnstuse cnstuse.c libcnst.a\n% ./cnstuse\n42\n</code></pre>\n\n<p>Top-level array declarations, however, can't use global variables/constants for size, so this will only work inside functions.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "edited": false, "score": 0, "creation_date": 1438367211, "post_id": 31751524, "comment_id": 51439180, "body": "I will have to mess around with build.rs. I&#39;ve seen it, but passed over it in favor of getting as simple of a minimum proof-of-concept that I could."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 0, "last_activity_date": 1438362274, "creation_date": 1438362274, "answer_id": 31751524, "question_id": 31701655, "link": "https://stackoverflow.com/questions/31701655/can-a-rust-constant-static-be-exposed-to-c/31751524#31751524", "title": "Can a Rust constant/static be exposed to C?", "body": "<blockquote>\n  <p>To be more specific, I am using a compiler which does not support variable-length arrays (Visual C++ 2005)</p>\n</blockquote>\n\n<p>This requires the constant to be defined (and not merely declared) at the point of use. Furthermore, C has much more restrictions than C++ on what constitutes a constant usable as an array dimension: basically integer literals (which can be substituted via macros) and enumerators; unlike C++ it does not have integral constants (<code>int const x</code>), so depending on the mode (C or C++) you compile in, you might be restricted.</p>\n\n<p>There is no facility in rustc or Cargo to automatically generate C files, the symbols are only exported and available at link-time, not at compile-time.</p>\n\n<hr>\n\n<p>You are fortunate though, there is a solution, though it is slightly more cumbersome.</p>\n\n<p>Rust features a <code>build.rs</code> file, which is compiled and executed as part of the regular compilation process. This file can contain command to generate other files, and therefore it is perfectly possible to:</p>\n\n<ol>\n<li>Write down the constant once and for all in a <code>.rs</code> file</li>\n<li>Generate a C header \"exporting\" this constant in a C format through the <code>build.rs</code> file.</li>\n</ol>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1386, "favorite_count": 3, "accepted_answer_id": 31702182, "answer_count": 2, "score": 13, "last_activity_date": 1438362274, "creation_date": 1438176025, "last_edit_date": 1438185134, "question_id": 31701655, "link": "https://stackoverflow.com/questions/31701655/can-a-rust-constant-static-be-exposed-to-c", "title": "Can a Rust constant/static be exposed to C?", "body": "<p>Say I have a Rust API that contains a constant or a static, an i32 for example. I want to use this Rust API from C. From the C side, I want to use that constant as an array size. Am I correct that there is no way to do it? Is the best solution to redeclare the constant in my C header files that are providing the declarations for the rest of the Rust API?</p>\n\n<p><strong>Update:</strong>\nTo be more specific, I am using a compiler which does not support variable-length arrays (Visual C++ 2005)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1438179910, "post_id": 31701125, "comment_id": 51345178, "body": "Welcome to Stack Overflow! You may wish to read <a href=\"https://stackoverflow.com/questions/how-to-ask\">How to Ask</a>. Specifically, you&#39;ve given very little detail about how to reproduce your problem. I would expect to see a <code>Cargo.toml</code> file that shows your dependencies and a <a href=\"/help/mcve\">MCVE</a> that could be used as a <code>main.rs</code> that would have the same error you are getting."}], "answers": [{"tags": [], "owner": {"reputation": 19, "user_id": 5039336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ff478f6cb2973a8b851dfc3d654337?s=128&d=identicon&r=PG&f=1", "display_name": "tyro1", "link": "https://stackoverflow.com/users/5039336/tyro1"}, "is_accepted": false, "score": 0, "last_activity_date": 1440596304, "creation_date": 1440596304, "answer_id": 32228241, "question_id": 31701125, "link": "https://stackoverflow.com/questions/31701125/kiss3d-build-error-the-trait-corefmtdebug-is-not-implemented-for-the-type/32228241#32228241", "title": "kiss3d build error: the trait &#39;core::fmt::Debug is not implemented for the type Modifiers", "body": "<p>I found what works for me ( using Win 7 prof, rust nightly 1.4 32bit version):</p>\n\n<p>1)  I have changed the lib.rs  in ./src directory adding the following line:\n       #![feature(libc)] \n     before the line: \n      extern crate libc;</p>\n\n<p>2)  I have create ./bin/i686-pc-windows-gnu directory in the root of project</p>\n\n<p>3)  In ./bin/i686-pc-windows-gnu i have copied the following files:\n      freetype6.dll,glfw3.dll</p>\n\n<p>4)  changed Cargo.toml:</p>\n\n<pre><code> [package]\n name    = \"kiss3d-examples\"\nversion = \"0.1.0\"\nauthors = [ \"S\u0102\u00a9bastien Crozet &lt;developer@crozet.re&gt;\" ]\n[dependencies]\nrand = \"*\"\nnalgebra = \"*\"\ngl = \"*\"\ntime = \"*\"\nnum = \"*\"\nimage = \"*\"\nncollide_procedural = \"*\"\nncollide_transformation = \"*\"\nfreetype-rs = \"*\"\n[dependencies.glfw]\ngit = \"https://github.com/bjz/glfw-rs.git\"\ndefault-features = false\n [lib]\n name = \"kiss3d\"\n path = \"./src/lib.rs\"\n\n [[bin]]\n name = \"cube\"\n path = \"./cube.rs\"\n</code></pre>\n\n<p>So I was able to : cargo run  and the cube examples runs ...</p>\n"}], "owner": {"reputation": 19, "user_id": 5039336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ff478f6cb2973a8b851dfc3d654337?s=128&d=identicon&r=PG&f=1", "display_name": "tyro1", "link": "https://stackoverflow.com/users/5039336/tyro1"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 202, "favorite_count": 0, "answer_count": 1, "score": -2, "last_activity_date": 1440596304, "creation_date": 1438174747, "last_edit_date": 1495542583, "question_id": 31701125, "link": "https://stackoverflow.com/questions/31701125/kiss3d-build-error-the-trait-corefmtdebug-is-not-implemented-for-the-type", "title": "kiss3d build error: the trait &#39;core::fmt::Debug is not implemented for the type Modifiers", "body": "<p>I have tried to build \"kiss3d\"  under windows 7 (rust 1.0 32bit, rust nighty 1.3 32bit ) but without success. Has anybody done it, with success? </p>\n\n<p>I used the following Cargo.toml :\n Cargo.toml \n(accord.:\n   <a href=\"https://stackoverflow.com/questions/28183497/gcc-exe-cannot-find-lglfw3-when-using-glfw-rs\">gcc.exe cannot find -lglfw3 when using glfw-rs</a>):</p>\n\n<pre><code>[package]\nname    = \"kiss3d\"\nversion = \"0.1.2\"\nauthors = [ \"S\u0102\u00a9bastien Crozet &lt;developer@crozet.re&gt;\" ]\n\ndescription = \"3D graphics engine for Rust.\"\nrepository = \"https://github.com/sebcrozet/kiss3d\"\nreadme = \"README.md\"\nkeywords = [ \"3D\", \"graphics\", \"OpenGL\", \"KISS\" ]\nlicense = \"BSD-3-Clause\"\n\ninclude = [\n    \"src/**/*.rs\",\n    \"examples/**/*.rs\",\n    \"examples/media\",\n    \"examples/Cargo.toml\",\n    \"Cargo.toml\",\n    \"LICENSE\",\n    \"Readme.md\"\n]\n    [dependencies.glfw]\n    git = \"https://github.com/bjz/glfw-rs.git\"\n    default-features = false\n\n   [lib]\n    name = \"kiss3d\"\n    path = \"src/lib.rs\"\n\n   [dependencies]\n    nalgebra = \"*\"\n   gl = \"*\"\n   time = \"*\"\n   num = \"*\"\n   libc = \"*\"\n   ncollide_procedural = \"*\"\n   freetype-rs = \"*\"\n   image = \"*\"\n</code></pre>\n\n<p>but to no avail.</p>\n"}, {"tags": ["rust", "traits", "associated-types"], "answers": [{"comments": [{"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438152870, "post_id": 31692939, "comment_id": 51327112, "body": "Right; I figured as much"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438153257, "post_id": 31692939, "comment_id": 51327357, "body": "what&#39;s your use-case? There&#39;s a good chance Rust has a solution to your actual problem. an MCVE that shows the code that uses your trait and member functions would help a lot."}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438153451, "post_id": 31692939, "comment_id": 51327451, "body": "I&#39;m trying to build an API. Basically, I&#39;m making traits that a user should implement in order to comply with my API. The problem is I want one of the functions to return something that implements a trait the user defines"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 1, "creation_date": 1438155295, "post_id": 31692939, "comment_id": 51328502, "body": "but since you can&#39;t use the trait anyway, since you&#39;d know nothing about it, you could just as well allow the user to pass any type."}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438190366, "post_id": 31692939, "comment_id": 51352447, "body": "ah... generics instead of associated types. makes sense. thanks!"}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438282152, "post_id": 31692939, "comment_id": 51399063, "body": "however I want a function to return a user defined trait. As in, I want my API to allow the user to do <code>fn foo&lt;T: MyTrait&gt;() -&gt; T</code>. Is there a way to write a trait so that I can say &quot;implement this function but the generic implements a trait you provide&quot;?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438282989, "post_id": 31692939, "comment_id": 51399552, "body": "I seriously need so see code (that won&#39;t compile obviously) that shows what behavior you want (including code that uses your types and traits and implements an example type and trait of your hypothetical user)"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1438151784, "creation_date": 1438151784, "answer_id": 31692939, "question_id": 31692770, "link": "https://stackoverflow.com/questions/31692770/is-it-possible-to-declare-an-associated-type-that-will-represent-a-trait/31692939#31692939", "title": "Is it possible to declare an associated type that will represent a trait?", "body": "<p>Associated types cannot specify traits. You can't specify traits anywhere in Rust. You can require that a generic argument (or an associated type) needs to implement a trait.</p>\n\n<pre><code>trait Foo {\n    type ReturnType: Clone;\n}\n</code></pre>\n\n<p>This way any implementors of <code>Foo</code> need to make sure that their choice of <code>ReturnType</code> also implements <code>Clone</code>.</p>\n\n<pre><code>impl Foo for Bar {\n    type ReturnType: i32;\n}\n</code></pre>\n"}], "owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 584, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1438286247, "creation_date": 1438151249, "last_edit_date": 1438286247, "question_id": 31692770, "link": "https://stackoverflow.com/questions/31692770/is-it-possible-to-declare-an-associated-type-that-will-represent-a-trait", "title": "Is it possible to declare an associated type that will represent a trait?", "body": "<p>Is it possible to declare an associated type that will represent a trait? If not, what can I do instead? Trying to do:</p>\n\n<pre><code>trait Foo {\n    /// A trait representing all types that can be returned from baz()\n    type ReturnType;\n    fn baz(&amp;self) -&gt; Self::ReturnType;\n}\n</code></pre>\n\n<p>The biggest problem I'm running into is with the <code>Sized</code> trait, because I want a function that returns a vector of items of a type that implements <code>ReturnType</code>:</p>\n\n<pre><code>trait Foo {\n    type ReturnType;\n    // option 1\n    fn bar(&amp;self) -&gt; Vec&lt;Self::ReturnType&gt;;\n    // option 2\n    fn bar&lt;T: Self::ReturnType&gt;(&amp;self) -&gt; Vec&lt;T&gt;;\n}\n</code></pre>\n\n<p>The problem with option 1 is that <code>ReturnType</code> won't be sized because it's a trait, and the problem with option 2 is the compiler won't recognize the associated type as a trait: <code>failed to resolve. Use of undeclared type or module 'Self'</code> and <code>use of undeclared trait name 'Self::ReturnType'</code> (which leads me to think associated types can't specify traits)</p>\n\n<p>EDIT: An example of what I'm trying to do</p>\n\n<pre><code>/// Represents all types that store byte-data instead of the actual\n/// element\ntrait BufferedVec {\n    /// the trait representing types that can be converted from the byte-data\n    type FromBuffer;\n    /// return the data at the given index, converted into a given type\n    fn get&lt;T: Self::FromBuffer&gt;(&amp;self, index: usize) -&gt; T;\n}\n</code></pre>\n\n<p>A user's implementation might be</p>\n\n<pre><code>/// An implementation of a BufferedVec\nstruct MyBufferedVec&lt;'a&gt; {\n    data: &amp;'a [Option&lt;Vec&lt;u8&gt;&gt;]\n}\nimpl&lt;'a&gt; BufferedVec for MyBufferedVec&lt;'a&gt; {\n    type FromBuffer = MyFromTrait;\n    fn get&lt;T: MyFromTrait&gt;(&amp;self, index: usize) -&gt; T {\n        &lt;T as MyFromTrait&gt;::convert(self.data[index].as_ref())\n    }\n}\n\ntrait MyFromTrait {\n    fn convert(val: Option&lt;&amp;[u8]&gt;) -&gt; Self;\n}\nimpl MyFromTrait for i32 {\n    fn convert(val: Option&lt;&amp;[u8]&gt;) -&gt; i32 {\n        match val {\n             Some(ref bytes) =&gt; bytes[0] as i32,\n             None            =&gt; 0\n        }\n    }\n}\nimpl MyFromTrait for String {\n    fn convert(val: Option&lt;&amp;[u8]&gt;) -&gt; String {\n        match val {\n             Some(ref bytes) =&gt; String::from_utf8(bytes),\n             None            =&gt; \"\".to_string()\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1438145911, "post_id": 31691373, "comment_id": 51324189, "body": "(For converting from strings you should normally use the <a href=\"http://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"nofollow noreferrer\"><code>FromStr</code></a> trait; the method <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\"><code>str.parse()</code></a> will then also be able to produce your type. If you have a type that can be converted from a string without the possibility of errors, ignore this advice.)"}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1438151329, "post_id": 31691373, "comment_id": 51326245, "body": "Well the thing is that I want <code>new</code> to be able to take arguments that convert to <code>MyType</code>, for example. The emphasis is not on converting from strings, it&#39;s from converting strings to my type"}], "answers": [{"comments": [{"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "edited": false, "score": 0, "creation_date": 1438151577, "post_id": 31692347, "comment_id": 51326363, "body": "Ah yes <code>From&lt;&amp;str&gt;</code> worked perfectly, and it makes sense because <code>impl From&lt;&amp;str&gt; for Bar</code> doesn&#39;t have the orphan impl issue as before. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438178485, "post_id": 31692347, "comment_id": 51344029, "body": "See also <a href=\"http://stackoverflow.com/q/29812530/155423\">When should I implement std::convert::From vs std::convert::Into?</a>."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 6, "last_activity_date": 1438149801, "creation_date": 1438149801, "answer_id": 31692347, "question_id": 31691373, "link": "https://stackoverflow.com/questions/31691373/how-do-i-implement-intomytype-for-str/31692347#31692347", "title": "How do I implement Into&lt;MyType&gt; for &amp;str", "body": "<p>As Chris Morgan noted, <a href=\"http://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"noreferrer\"><code>FromStr</code></a> is an option, <a href=\"http://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"noreferrer\"><code>From&lt;&amp;str&gt;</code></a> would be another. The latter would give you a builtin implementation of <code>Into&lt;Foo&gt;</code> for <code>&amp;str</code>, too (because there is a blanket impl of <code>Into&lt;U&gt; For T where U: From&lt;T&gt;</code>).</p>\n"}], "owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1160, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1438178452, "creation_date": 1438144992, "last_edit_date": 1495540284, "question_id": 31691373, "link": "https://stackoverflow.com/questions/31691373/how-do-i-implement-intomytype-for-str", "title": "How do I implement Into&lt;MyType&gt; for &amp;str", "body": "<p>I have a custom type <code>pub struct Foo</code> and I'd like to be able to say strings can be converted to <code>Foo</code> types. I'm trying to do <code>impl&lt;'a&gt; Into&lt;Foo&gt; for &amp;'a str</code>, but I know from <a href=\"https://stackoverflow.com/questions/24594374/overload-operators-with-different-rhs-type/24594911#24594911\">this answer</a> that I can't do that. What other options do I have?</p>\n\n<p>For context, I'm trying to do something like</p>\n\n<pre><code>trait Foo {\n    type ArgType;\n    fn new&lt;I: Into&lt;Self::ArgType&gt;&gt;(arg: I) -&gt; Self;\n}\n\nstruct MyType;\nimpl Into&lt;MyType&gt; for str {\n    fn into(self) -&gt; MyType { MyType }\n}\n\nstruct Bar;\nimpl Foo for Bar {\n    type ArgType = MyType;\n    fn new&lt;I: Into&lt;MyType&gt;&gt;(arg: I) -&gt; Bar { Bar }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1438126141, "post_id": 31685697, "comment_id": 51319372, "body": "Because accessing an <code>Rc&lt;String&gt;</code> requires following 2 pointers (also, I need <code>Rc</code> because I truly have shared ownership). I detail <a href=\"https://stackoverflow.com/questions/31685345/is-there-a-rust-library-with-an-utf-16-string-type-intended-for-writing-a-java\">in another question</a> more specific issues I&#39;ve around my string type. My tentative definition <code>Rc&lt;Utf16Str&gt;</code> would also require an unsized type <code>Utf16Str</code> (it would have the same layout as <code>Rc&lt;[u16]&gt;</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505739819, "post_id": 31685697, "comment_id": 79522893, "body": "See also <a href=\"https://stackoverflow.com/q/44636833/155423\">Is it possible to create an Arc&lt;[T&#93;&gt; from a Vec&lt;T&gt;?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1438126869, "post_id": 31688881, "comment_id": 51319577, "body": "So a <code>Rc&lt;[T]&gt;</code> can&#39;t be created when the length of [T] is unknown at compile time, right? (But why is that? Isn&#39;t <code>Rc</code> allocated in the heap? since it&#39;s a fat pointer it already &quot;knows&quot; its size)"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1438127055, "post_id": 31688881, "comment_id": 51319625, "body": "Yeah, an <code>Rc&lt;[T]&gt;</code> can&#39;t be constructed via coercion with dynamic lengths. However the concept totally makes sense, the only blocking problem is that there&#39;s no good way to construct one."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1438127194, "post_id": 31688881, "comment_id": 51319665, "body": "Also, would accessing the <code>String</code> inside <code>RcRef</code> require following two pointers? (the whole issue is that <code>Rc&lt;String&gt;</code> has a pointer to <code>String</code> that has a pointer to the beginning of the string...). I can&#39;t figure out if <a href=\"https://github.com/Kimundi/owning-ref-rs/blob/master/src/lib.rs#L178\" rel=\"nofollow noreferrer\">this</a> just has a pointer to the <code>String</code>."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1438127278, "post_id": 31688881, "comment_id": 51319688, "body": "Re: &quot;the concept totally makes sense&quot; - does it means that besides <code>Rc&lt;[T]&gt;</code>, <code>Rc&lt;str&gt;</code> (and other unsized types) <i>could</i> work on a future version of Rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1438127724, "post_id": 31688881, "comment_id": 51319824, "body": "@darque <a href=\"http://is.gd/wWE4C6\" rel=\"nofollow noreferrer\">it already can</a> for certain unsized types, like traits. This was new as of Rust 1.1 IIRC."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1438131263, "post_id": 31688881, "comment_id": 51320690, "body": "@darque, <code>Rc&lt;str&gt;</code> already does work: if you can make one (e.g. a <code>transmute</code> from UTF-8 <code>Rc&lt;[u8]&gt;</code> to <code>Rc&lt;str&gt;</code>) everything will work fine, there&#39;s just no safe way to construct one directly. The <code>RcRef</code> implementation does only require a single pointer access to read the <code>str</code> data."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1493293262, "post_id": 31688881, "comment_id": 74360649, "body": "Would it be possible to create a <code>Rc::clone_from(&amp;T)</code> which would allow creating a <code>Rc&lt;str&gt;</code> from a <code>&amp;str</code>?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1503408377, "post_id": 31688881, "comment_id": 78595376, "body": "@MatthieuM. @darque It should be possible to create a <code>Rc&lt;[T]&gt;</code> given a <code>&amp;[T]</code> using a compiler-blessed standard library function. This would require unsafe code and rely on a certain memory layout. While the heap allocated block is expected to store two reference counters followed by the data, the core Rust language doesn&#39;t guarantee any memory layout for <code>#[repr(Rust)]</code> types so far. So, providing something like this as an external crate is kind of dangerous."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 8, "last_activity_date": 1438126566, "creation_date": 1438126566, "answer_id": 31688881, "question_id": 31685697, "link": "https://stackoverflow.com/questions/31685697/how-to-build-an-rcstr-or-rct/31688881#31688881", "title": "How to build an Rc&lt;str&gt; or Rc&lt;[T]&gt;?", "body": "<p>Creating an <code>Rc&lt;[T]&gt;</code> can be done via coercions and <code>as</code>-casts from fixed sized arrays, e.g. coercions can be done as follows:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let x: Rc&lt;[i32; 4]&gt; = Rc::new([1, 2, 3, 4]);\n\n    let y: Rc&lt;[i32]&gt; = x;\n\n    println!(\"{:?}\", y);\n}\n</code></pre>\n\n<p>However, this doesn't work for strings, since they have no raw fixed-sized equivalent to create the first value. It is possible to do unsafely, e.g. by creating a UTF-8 encoded <code>Rc&lt;[u8]&gt;</code> and transmuting that to <code>Rc&lt;str&gt;</code>. Theoretically there could be a crate on crates.io for it, but I can't find one at the moment.</p>\n\n<p>An alternative is <a href=\"https://crates.io/crates/owning_ref\" rel=\"noreferrer\"><code>owning_ref</code></a>, which isn't quite <code>std::rc::Rc</code> itself, but should allow, for example, getting an <code>RcRef&lt;..., str&gt;</code> pointing into an <code>Rc&lt;String&gt;</code>. (This approach will work best if one uses <code>RcRef</code> uniformly in place of <code>Rc</code>, except for construction.)</p>\n\n<pre><code>extern crate owning_ref;\nuse owning_ref::RcRef;\nuse std::rc::Rc;\n\nfn main() {\n    let some_string = \"foo\".to_owned();\n\n    let val: RcRef&lt;String&gt; = RcRef::new(Rc::new(some_string));\n\n    let borrowed: RcRef&lt;String, str&gt; = val.map(|s| &amp;**s);\n\n    let erased: RcRef&lt;owning_ref::Erased, str&gt; = borrowed.erase_owner();\n}\n</code></pre>\n\n<p>The erasing means that <code>RcRef&lt;..., str&gt;</code>s can come from multiple different sources, e.g. a <code>RcRef&lt;Erased, str&gt;</code> can come from a string literal too.</p>\n\n<p>NB. at the time of writing, the erasure with <code>RcRef</code> requires a nightly compiler, and depending on <code>owning_ref</code> with the <code>nightly</code> feature:</p>\n\n<pre><code>[dependencies]\nowning_ref = { version = \"0.1\", features = [\"nightly\"] }\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "is_accepted": false, "score": 23, "last_activity_date": 1507833397, "last_edit_date": 1507833397, "creation_date": 1505703844, "answer_id": 46271014, "question_id": 31685697, "link": "https://stackoverflow.com/questions/31685697/how-to-build-an-rcstr-or-rct/46271014#46271014", "title": "How to build an Rc&lt;str&gt; or Rc&lt;[T]&gt;?", "body": "<p>As of Rust 1.21.0 and as mandated by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1845-shared-from-slice.md\" rel=\"noreferrer\">RFC 1845</a>, creating an <code>Rc&lt;str&gt;</code> or <code>Arc&lt;str&gt;</code> is now possible:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::sync::Arc;\n\nfn main() {\n    let a: &amp;str = \"hello world\";\n    let b: Rc&lt;str&gt; = Rc::from(a);\n    println!(\"{}\", b);\n\n    // or equivalently:\n    let b: Rc&lt;str&gt; = a.into();\n    println!(\"{}\", b);\n\n    // we can also do this for Arc,\n    let a: &amp;str = \"hello world\";\n    let b: Arc&lt;str&gt; = Arc::from(a);\n    println!(\"{}\", b);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=5d6c59178c780a43db54b20a349400c7&amp;version=stable\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html#impl-From%3C%26%27a%20str%3E\" rel=\"noreferrer\"><code>&lt;Rc as From&lt;&amp;str&gt;&gt;</code></a> and <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html#impl-From%3C%26%27a%20str%3E\" rel=\"noreferrer\"><code>&lt;Arc as From&lt;&amp;str&gt;&gt;</code></a>.</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2229, "favorite_count": 2, "accepted_answer_id": 31688881, "answer_count": 2, "score": 18, "last_activity_date": 1507833397, "creation_date": 1438112706, "last_edit_date": 1505739784, "question_id": 31685697, "link": "https://stackoverflow.com/questions/31685697/how-to-build-an-rcstr-or-rct", "title": "How to build an Rc&lt;str&gt; or Rc&lt;[T]&gt;?", "body": "<p>I'd like to create an <code>Rc&lt;str&gt;</code> because I want reduce the indirection from following the 2 pointers that accessing an <code>Rc&lt;String&gt;</code> requires. I need to use an <code>Rc</code> because I truly have shared ownership. I detail in <a href=\"https://stackoverflow.com/questions/31685345/is-there-a-rust-library-with-an-utf-16-string-type-intended-for-writing-a-java\">another question</a> more specific issues I have around my string type.</p>\n\n<p>Rc <a href=\"https://doc.rust-lang.org/alloc/rc/struct.Rc.html\" rel=\"noreferrer\">has a <code>?Sized</code> bound</a>:</p>\n\n<pre><code>pub struct Rc&lt;T: ?Sized&gt; { /* fields omitted */ }\n</code></pre>\n\n<p>I've also heard that Rust 1.2 will come with proper support for storing unsized types in an <code>Rc</code>, but I'm unsure how this differs from 1.1.</p>\n\n<p>Taking the <code>str</code> case as example, my <a href=\"https://play.rust-lang.org/?gist=fca759f20f7425dee5275bf9be3f4bf3&amp;version=nightly\" rel=\"noreferrer\">naive attempt</a> (also <a href=\"https://play.rust-lang.org/?gist=05eb2b4ad1a61a888db02931c8e3c9ca&amp;version=nightly\" rel=\"noreferrer\">this</a> for building from a <code>String</code>) fails with:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let a: &amp;str = \"test\";\n    let b: Rc&lt;str&gt; = Rc::new(*a);\n    println!(\"{}\", b);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:5:22\n  |\n5 |     let b: Rc&lt;str&gt; = Rc::new(*a);\n  |                      ^^^^^^^ `str` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `str`\n  = note: required by `&lt;std::rc::Rc&lt;T&gt;&gt;::new`\n</code></pre>\n\n<p>It's clear that in order to create an <code>Rc&lt;str&gt;</code>, I need to copy the whole string: <code>RcBox</code> would be itself an unsized type, storing the string itself alongside the weak and strong pointers \u2014 the naive code above doesn't even make sense.</p>\n\n<p>I've been told that one can not instantiate such type, but instead instantiate an <code>Rc&lt;T&gt;</code> with a sized <code>T</code> and then coerce it to an unsized type. The example given is for the storing a trait object: first create <code>Rc&lt;ConcreteType&gt;</code> and then coerce to <code>Rc&lt;Trait&gt;</code>. But this doesn't make sense either: neither <a href=\"https://play.rust-lang.org/?gist=8cedd3de4583d40d579520dba16b3106&amp;version=nightly\" rel=\"noreferrer\">this</a> nor <a href=\"https://play.rust-lang.org/?gist=94408116502232ebdc77d43c24f5da5e&amp;version=nightly\" rel=\"noreferrer\">this</a> work (and you can't coerce from <code>&amp;str</code> or <code>String</code> to <code>str</code> anyway).</p>\n"}, {"tags": ["string", "rust", "utf-16"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1438112166, "post_id": 31685345, "comment_id": 51312732, "body": "Why don&#39;t you want to use WTF-8? AFAIK that&#39;s what Servo does."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1438113204, "post_id": 31685345, "comment_id": 51313345, "body": "Aren&#39;t Javascript strings in Servo actually owned by SpiderMonkey? In SpiderMonkey, strings are <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_Reference/JSString\" rel=\"nofollow noreferrer\">arrays of char16_t</a>. My understanding is that Servo stores WTF-8 when the string is not owned by the Javascript engine, converting to UTF-16 when it is stored in a Javascript value (I want to write a Javascript <i>interpreter</i>, not a browser). See also <a href=\"https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/\" rel=\"nofollow noreferrer\">this article</a>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1438117634, "post_id": 31685345, "comment_id": 51315979, "body": "I think you&#39;re right, nevermind."}], "answers": [{"tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": false, "score": 8, "last_activity_date": 1452451333, "creation_date": 1452451333, "answer_id": 34709353, "question_id": 31685345, "link": "https://stackoverflow.com/questions/31685345/is-there-a-rust-library-with-an-utf-16-string-type-intended-for-writing-a-java/34709353#34709353", "title": "Is there a Rust library with an UTF-16 string type? (intended for writing a Javascript interpreter)", "body": "<p>Since there are multiple questions here I\u2019ll try to respond separately:</p>\n\n<hr>\n\n<p>I think the types you want are <code>[u16]</code> and <code>Vec&lt;u16&gt;</code>.</p>\n\n<p>The default string types <code>str</code> and <code>String</code> are wrappers around <code>[u8]</code> and <code>Vec&lt;u8&gt;</code> (not technically true of <code>str</code> which is primitive, but close enough). The point of having separate types is to maintain the invariant that the underlying bytes are <em>well-formed in UTF-8</em>.</p>\n\n<p>Similarly, you could have <code>Utf16Str</code> and <code>Utf16String</code> types wrapping around <code>[u16]</code> and <code>Vec&lt;u16&gt;</code> that preserve a <em>well-formed in UTF-16</em> invariant, namely that there is no unpaired surrogate.</p>\n\n<p>But as you note in your question, JavaScript strings <em>can</em> contain unpaired surrogates. That\u2019s because <strong>JavaScript strings are not strictly UTF-16</strong>, they really are arbitrary sequences of <code>u16</code> with no additional invariant.</p>\n\n<p>With no invariant to maintain, I don\u2019t think wrapper types are all that useful.</p>\n\n<hr>\n\n<p>rust-encoding supports UTF-16-LE and UTF-16-BE based on bytes. You probably want UTF-16 based on <code>u16</code>\u2019s instead.</p>\n\n<p><code>std::str::Utf16Units</code> is indeed not a string type. It is an iterator returned by the <code>str::utf16_units()</code> method that converts a Rust string to UTF-16 (not LE or BE). You can use <code>.collect()</code> on that iterator to get a <code>Vec&lt;u16&gt;</code> for example.</p>\n\n<hr>\n\n<p>The only safe way to obtain <code>Rc&lt;[u16]&gt;</code> is to coerce from <code>Rc&lt;[u16; N]&gt;</code> whose size is known at compile-time, which is obviously impractical. I wouldn\u2019t recommend the unsafe way: allocating memory, writing a header to it that hopefully matches the memory representation of <code>RcBox</code>, and transmuting.</p>\n\n<p>If you\u2019re gonna do it with raw memory allocation, better use your own type so that you can use its private fields. Tendril does this: <a href=\"https://github.com/servo/tendril/blob/master/src/buf32.rs\" rel=\"noreferrer\">https://github.com/servo/tendril/blob/master/src/buf32.rs</a></p>\n\n<p>Or, if you\u2019re willing to take the cost of the extra indirection, <code>Rc&lt;Vec&lt;u16&gt;&gt;</code> is safe and much easier.</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1197, "favorite_count": 0, "answer_count": 1, "score": 8, "last_activity_date": 1452451333, "creation_date": 1438111403, "question_id": 31685345, "link": "https://stackoverflow.com/questions/31685345/is-there-a-rust-library-with-an-utf-16-string-type-intended-for-writing-a-java", "title": "Is there a Rust library with an UTF-16 string type? (intended for writing a Javascript interpreter)", "body": "<p>For <em>most</em> programs, it's better to <a href=\"http://utf8everywhere.org/\" rel=\"noreferrer\">use UTF-8 internally</a> and, when necessary, convert to other encodings. But in my case, I want to write a Javascript interpreter, and it's much simpler to store only UTF-16 strings (or arrays of <code>u16</code>), because</p>\n\n<ol>\n<li><p>I need to address 16-bits code units individually (this is a bad idea in general, but Javascript requires this). This means I need it to implement <code>Index&lt;usize&gt;</code>.</p></li>\n<li><p>I need to store unpaired surrogates, that is, malformed UTF-16 strings (because of this, ECMAScript strings are technically defined as arrays of <code>u16</code>, that <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.16\" rel=\"noreferrer\"><em>usually</em></a> represent UTF-16 strings). There is an encoding aptly named <a href=\"https://simonsapin.github.io/wtf-8/\" rel=\"noreferrer\">WTF-8</a> to store unpaired surrogates in UTF-8, but I don't want to use something like this.</p></li>\n</ol>\n\n<p>I want to have the usual owned / borrowed types (like <code>String</code> / <code>str</code> and <code>CString</code> / <code>CStr</code>) with all or most usual methods. I don't want to roll my own string type (if I can avoid).</p>\n\n<p>Also, my strings will always be immutable, behind an <code>Rc</code> and referred from a data structure containing weak pointers to all strings (implementing <a href=\"https://en.wikipedia.org/wiki/String_interning\" rel=\"noreferrer\">string interning</a>). This might be relevant: perhaps it would be better to have <code>Rc&lt;Utf16Str&gt;</code> as the string type, where <code>Utf16Str</code> is the unsized string type (which can be defined as just <code>struct Utf16Str([u16])</code>). That would avoid following two pointers when accessing the string, but I don't know how to instantiate an <code>Rc</code> with an unsized type.</p>\n\n<p>Given the above requirements, merely using rust-encoding is very inconvenient, because it treats all non-UTF-8 encodings <a href=\"https://lifthrasiir.github.io/rust-encoding/encoding/types/trait.Encoding.html#method.encode\" rel=\"noreferrer\">as vectors of <code>u8</code></a>.</p>\n\n<p>Also, I'm not sure if <a href=\"https://internals.rust-lang.org/t/pre-rfc-stabilize-utf-16-encoding-in-std/2152\" rel=\"noreferrer\">using the std library</a> at all might help me here. I looked into <code>Utf16Units</code> and it's just an iterator, not a proper string type. (also, I know <code>OsString</code> doesn't help - I'm not on Windows, and it doesn't even implement <code>Index&lt;usize&gt;</code>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1438087862, "post_id": 31676504, "comment_id": 51295552, "body": "<code>#[derive(Clone)]</code> is for simple cases, it does not work in every case. Implement <code>Clone</code> manually."}, {"owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1438088149, "post_id": 31676504, "comment_id": 51295781, "body": "@bluss it&#39;s work, thank you"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1438088078, "post_id": 31676926, "comment_id": 51295719, "body": "&quot;How has no one answered this yet?  Quick!  Quick!&quot;"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1438088119, "post_id": 31676926, "comment_id": 51295755, "body": "Right, that&#39;s how it works :) I&#39;ll remove mine then."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1438088036, "last_edit_date": 1438088036, "creation_date": 1438088004, "answer_id": 31676926, "question_id": 31676504, "link": "https://stackoverflow.com/questions/31676504/how-to-clone-the-struct-include-rcfnt/31676926#31676926", "title": "How to clone the struct include `Rc&lt;Fn(T)&gt;`?", "body": "<p>The problem is that <code>#[derive(Clone)]</code> is rather stupid.  As part of its expansion, it adds a <code>Clone</code> constraint to <em>all</em> generic type parameters, whether or not it actually needs such a constraint.</p>\n\n<p>As such, you need to implement <code>Clone</code> manually, like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Test&lt;T&gt; {\n    a: Rc&lt;Fn(T)&gt;\n}\n\nimpl&lt;T&gt; Clone for Test&lt;T&gt; {\n    fn clone(&amp;self) -&gt; Self {\n        Test {\n            a: self.a.clone(),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 506, "favorite_count": 0, "accepted_answer_id": 31676926, "answer_count": 1, "score": 5, "last_activity_date": 1438088036, "creation_date": 1438086916, "last_edit_date": 1438087698, "question_id": 31676504, "link": "https://stackoverflow.com/questions/31676504/how-to-clone-the-struct-include-rcfnt", "title": "How to clone the struct include `Rc&lt;Fn(T)&gt;`?", "body": "<p>I want define a type, include <code>Rc&lt;Fn(T)&gt;</code>, <code>T</code> <strong>not</strong> required <code>Clone</code> trait, example code:</p>\n\n<pre><code>use std::rc::Rc;\n\n\nstruct X;\n\n#[derive(Clone)]\nstruct Test&lt;T&gt; {\n    a: Rc&lt;Fn(T)&gt;\n}\n\n\nfn main() {\n    let t: Test&lt;X&gt; = Test {\n        a: Rc::new(|x| {})\n    };\n    let a = t.clone();\n}\n</code></pre>\n\n<p>can't complie, error message is:</p>\n\n<pre><code>test.rs:16:15: 16:22 note: the method `clone` exists but the following trait bounds were not satisfied: `X : core::clone::Clone`, `X : core::clone::Clone`\ntest.rs:16:15: 16:22 help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `clone`, perhaps you need to implement it:\ntest.rs:16:15: 16:22 help: candidate #1: `core::clone::Clone`\nerror: aborting due to previous error\n</code></pre>\n\n<p>How to correct my code?</p>\n"}, {"tags": ["shell", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1514702588, "last_edit_date": 1514702588, "creation_date": 1438055710, "answer_id": 31667097, "question_id": 31666936, "link": "https://stackoverflow.com/questions/31666936/execute-a-shell-command/31667097#31667097", "title": "Execute a shell command", "body": "<p>You should <em>really</em> avoid <code>system</code>.  What it does depends on what shell is in use and what operating system you're on (your example almost certainly won't do what you expect on Windows).</p>\n\n<p>If you really, desperately <em>need</em> to invoke some commands with a shell, you can do <em>marginally</em> better by just executing the shell directly (like using the <code>-c</code> switch for bash).</p>\n\n<p>If, for some reason, the above isn't feasible <em>and</em> you can <em>guarantee</em> your program will <em>only</em> run on systems where the shell in question is available <em>and</em> users <em>will not</em> be running anything else...</p>\n\n<p>...then you can just use the <a href=\"https://doc.rust-lang.org/libc/x86_64-pc-windows-msvc/libc/fn.system.html\" rel=\"nofollow noreferrer\"><code>system</code></a> call from <a href=\"https://crates.io/crates/libc\" rel=\"nofollow noreferrer\"><code>libc</code></a> just as you would from regular C.  This counts as FFI, so you'll probably want to look at <a href=\"http://doc.rust-lang.org/std/ffi/struct.CStr.html\" rel=\"nofollow noreferrer\"><code>std::ffi::CStr</code></a>.</p>\n"}, {"comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 2, "creation_date": 1527750485, "post_id": 50456847, "comment_id": 88246816, "body": "Except that <code>Command::new (&quot;cd&quot;).arg (&quot;foo&quot;).status()</code> will always <a href=\"https://play.integer32.com/?gist=572ca6d0639209b4933d114c151dde71&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">fail</a>\u2026"}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1539071989, "post_id": 50456847, "comment_id": 92357498, "body": "@Jmb Do you know why?"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 4, "creation_date": 1539074085, "post_id": 50456847, "comment_id": 92358666, "body": "Because <code>cd</code> is not an executable, it is an internal shell command and as such can&#39;t be run directly from a non-shell program. You could always do <code>Command::new (&quot;&#47;bin&#47;sh&quot;).args (&amp;[&quot;-c&quot;, &quot;cd&quot;, &quot;foo&quot;])</code> to run the command in a shell but that&#39;s a no-op that won&#39;t affect the calling process."}, {"owner": {"reputation": 55, "user_id": 10799034, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UDCZV.jpg?s=128&g=1", "display_name": "Gloat", "link": "https://stackoverflow.com/users/10799034/gloat"}, "edited": false, "score": 0, "creation_date": 1584082524, "post_id": 50456847, "comment_id": 107332252, "body": "that didn&#39;t work for me, I recieved a runtime error. when I was running on windows I had to do Command::new(&quot;cmd&quot;) this than ran the code fine."}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "reply_to_user": {"reputation": 55, "user_id": 10799034, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UDCZV.jpg?s=128&g=1", "display_name": "Gloat", "link": "https://stackoverflow.com/users/10799034/gloat"}, "edited": false, "score": 0, "creation_date": 1584083344, "post_id": 50456847, "comment_id": 107332529, "body": "@DevinB Rust code works on Windows and Linux but the parameters are system dependent. Example is for Linux. Feel free to edit this answer if you know example that works both on Windows and Linux."}], "tags": [], "owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "is_accepted": false, "score": 19, "last_activity_date": 1526950102, "last_edit_date": 1526950102, "creation_date": 1526938116, "answer_id": 50456847, "question_id": 31666936, "link": "https://stackoverflow.com/questions/31666936/execute-a-shell-command/50456847#50456847", "title": "Execute a shell command", "body": "<p>Everybody is looking for:</p>\n\n<pre><code>use std::process::Command;\n\nfn main() {\n    let output = Command::new(\"echo\")\n        .arg(\"Hello world\")\n        .output()\n        .expect(\"Failed to execute command\");\n\n    assert_eq!(b\"Hello world\\n\", output.stdout.as_slice());\n}\n</code></pre>\n\n<p>For more information and examples, see the <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"noreferrer\">docs</a>.</p>\n\n<p>You wanted to simulate <code>&amp;&amp;</code>. <code>std::process::Command</code> has a <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html#method.status\" rel=\"noreferrer\"><code>status</code></a> method that returns a <a href=\"https://doc.rust-lang.org/std/io/type.Result.html\" rel=\"noreferrer\"><code>Result&lt;T&gt;</code></a> and <code>Result</code> implements <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then\" rel=\"noreferrer\"><code>and_then</code></a>. You can use <code>and_then</code> like a <code>&amp;&amp;</code> but in more safe Rust way :)</p>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 7403039, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45715c768367397b15c28549987e3998?s=128&d=identicon&r=PG&f=1", "display_name": "micoay", "link": "https://stackoverflow.com/users/7403039/micoay"}, "is_accepted": false, "score": 1, "last_activity_date": 1598822424, "creation_date": 1598822424, "answer_id": 63662257, "question_id": 31666936, "link": "https://stackoverflow.com/questions/31666936/execute-a-shell-command/63662257#63662257", "title": "Execute a shell command", "body": "<p>For anyone looking for a way to set the current directory for the subprocess running the command i. e. run &quot;ls&quot; in some dir there's <a href=\"https://doc.rust-lang.org/stable/std/process/struct.Command.html#method.current_dir\" rel=\"nofollow noreferrer\"><code>Command::current_dir</code></a>. Usage:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::process::Command;\n\nCommand::new(&quot;ls&quot;)\n        .current_dir(&quot;/bin&quot;)\n        .spawn()\n        .expect(&quot;ls command failed to start&quot;);\n</code></pre>\n"}], "owner": {"reputation": 113, "user_id": 5163080, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-cjhN42o24OQ/AAAAAAAAAAI/AAAAAAAAAEI/m8e09RUQcWw/photo.jpg?sz=128", "display_name": "Peiyuan Li", "link": "https://stackoverflow.com/users/5163080/peiyuan-li"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7459, "favorite_count": 0, "accepted_answer_id": 31667097, "answer_count": 3, "score": 11, "last_activity_date": 1598822424, "creation_date": 1438054481, "last_edit_date": 1438098829, "question_id": 31666936, "link": "https://stackoverflow.com/questions/31666936/execute-a-shell-command", "title": "Execute a shell command", "body": "<p>I want to execute a shell command in <strong>Rust</strong>. In <strong>Python</strong> I can do this: </p>\n\n<pre><code>import os\ncmd = r'echo \"test\" &gt;&gt; ~/test.txt'\nos.system(cmd)\n</code></pre>\n\n<p>But Rust only has <code>std::process::Command</code>. How can I execute a shell command like <code>cd xxx &amp;&amp; touch abc.txt</code>?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1438060876, "post_id": 31666603, "comment_id": 51279429, "body": "The code you posted is not the code you compiled. Please ensure that it is, and also adjust it to something that runs."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1438061337, "creation_date": 1438061337, "answer_id": 31667995, "question_id": 31666603, "link": "https://stackoverflow.com/questions/31666603/get-file-information-from-direntry-in-a-for-loop/31667995#31667995", "title": "get file information from DirEntry in a for loop", "body": "<p><code>DirEntry.path()</code> returns a <code>PathBuf</code>, which is <code>'static</code> (i.e. it contains no non-static references and is a completely standalong object). <em>It</em> is where the problem lies.</p>\n\n<p><code>PathBuf.file_name()</code> returns <code>Option&lt;&amp;OsStr&gt;</code>, a reference into that object, and <a href=\"http://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_string_lossy\" rel=\"nofollow\"><code>OsStr.to_string_lossy()</code> returns <code>Cow&lt;str&gt;</code></a>. Note with that last that it is <em>not</em> <code>'static</code>; with the elided lifetimes reinstated, it\u2019s <code>fn to_string_lossy&lt;'a&gt;(&amp;'a self) -&gt; Cow&lt;'a, str&gt;</code>. This is for efficiency, because if the path is legal UTF-8 then there\u2019s no need to go creating an entirely new owned string (<code>String</code>), it can keep it as a string slice (<code>&amp;str</code>). (Because that\u2019s what <code>Cow&lt;'a, str&gt;</code> is: its variants, with generics filled in, are <code>Owned(String)</code> and <code>Borrowed(&amp;'a str)</code>.)</p>\n\n<p>What you need in this location is to turn the <code>Cow&lt;str&gt;</code> into a <code>String</code>. This is accomplished with the <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html#method.into_owned\" rel=\"nofollow\"><code>into_owned</code> method of <code>Cow&lt;T&gt;</code></a>.</p>\n\n<p>That line of code thus becomes this:</p>\n\n<pre><code>let file_name = entry.path().file_name().unwrap().to_string_lossy().into_owned();\n</code></pre>\n"}], "owner": {"reputation": 343, "user_id": 3758333, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fff2S.jpg?s=128&g=1", "display_name": "Peter Maidens", "link": "https://stackoverflow.com/users/3758333/peter-maidens"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 913, "favorite_count": 0, "accepted_answer_id": 31667995, "answer_count": 1, "score": 0, "last_activity_date": 1438099126, "creation_date": 1438052054, "last_edit_date": 1438099126, "question_id": 31666603, "link": "https://stackoverflow.com/questions/31666603/get-file-information-from-direntry-in-a-for-loop", "title": "get file information from DirEntry in a for loop", "body": "<p>I am new to Rust. I am trying to build a JSON object where the keys are file names and the value is the file contents.</p>\n\n<p>So far, I have:</p>\n\n<pre><code>use std::fs;\nuse std::io;\nuse std::env;\nuse std::collections::HashMap;\nuse std::path::{Path, PathBuf};\n\nfn main() {\n    make_json();\n}\n\nfn make_json() -&gt; io::Result&lt;()&gt; {\n    let mut modules = HashMap::new();\n    let mut dir = env::current_dir().unwrap();\n    let mut read_dir = fs::read_dir(dir);\n\n    for entry in try!(read_dir) {\n        let entry = try!(entry);\n        let file_name = entry.path().file_name().unwrap().to_string_lossy();\n        modules.insert(file_name, \"\");\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<p>When I go to compile it, I get</p>\n\n<pre><code>src/main.rs:19:25: 19:37 error: borrowed value does not live long enough\nsrc/main.rs:19         let file_name = entry.path().file_name().unwrap().to_string_lossy();\n                                       ^~~~~~~~~~~~\nnote: in expansion of for loop expansion\nsrc/main.rs:17:5: 21:6 note: expansion site\nsrc/main.rs:13:38: 23:2 note: reference must be valid for the block suffix following statement 0 at 13:37...\nsrc/main.rs:13     let mut modules = HashMap::new();\nsrc/main.rs:14     let mut dir = env::current_dir().unwrap();\nsrc/main.rs:15     let mut read_dir = fs::read_dir(dir);\nsrc/main.rs:16 \nsrc/main.rs:17     for entry in try!(read_dir) {\nsrc/main.rs:18         let entry = try!(entry);\n               ...\nsrc/main.rs:19:9: 19:77 note: ...but borrowed value is only valid for the statement at 19:8\nsrc/main.rs:19         let file_name = entry.path().file_name().unwrap().to_string_lossy();\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:19:9: 19:77 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:19         let file_name = entry.path().file_name().unwrap().to_string_lossy();\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p><strong>I understand what this error is telling me</strong>; entry is defined within the scope of the <code>for</code> loop, and therefore if I store it to the <code>HashMap</code> it will no longer be valid memory because the place in memory will have been freed already. I get that.</p>\n\n<p>What I don't get, is how I access the the <code>DirEntry</code>s within <code>read_dir</code> without using some sort of closure, since I will need their information outside of whatever closure I retrieve them in.</p>\n\n<p>Everything that I have come across hasn't been able to help me.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 1, "creation_date": 1438160227, "post_id": 31662269, "comment_id": 51331522, "body": "Thank you. I get it. Though, does this mean, that there isn&#39;t a way to allocate something in the new method, and make it have the lifetime of the struct? when new creates a struct, it continues to live in a higher scope. can&#39;t the lifetime of the fields match the lifetime of the struct? Does this mean that all the returned fields have to be on the stack."}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 2, "creation_date": 1438180248, "post_id": 31662269, "comment_id": 51345457, "body": "@6D65 You can&#39;t keep a reference to something that goes out of scope, you wrote your struct to require the reference to live as long as the struct, as it should. I don&#39;t understand why you would want to create an object in new and store a <i>reference</i> to it in your struct; you should be moving the value in that case and store the object as opposed to the reference"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438180789, "post_id": 31662269, "comment_id": 51345860, "body": "In your other example, <code>glyph_cache</code> is going out of scope just as your first example. You need to either <i>pass</i> a glyph_cache reference into new, or don&#39;t take a reference of glyph_case and move the value instead"}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438182753, "post_id": 31662269, "comment_id": 51347362, "body": "By &quot;move the value instead&quot;,  you mean, to pass the glyph_cache as a value to new?"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438183286, "post_id": 31662269, "comment_id": 51347768, "body": "@6D65 yes, that way glyph_cache won&#39;t go out of scope because you&#39;ve moved it&#39;s value."}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438183689, "post_id": 31662269, "comment_id": 51348075, "body": "And there&#39;s no way to bind the lifetime of the glyph_cache to the lifetime of the struct? Basically make the glyph cache live as long as the struct, even if created inside the new function?"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438184634, "post_id": 31662269, "comment_id": 51348863, "body": "@6D65 I don&#39;t think you understand. <code>glyph_cache</code> does out of scope once <code>new</code> ends. You can&#39;t just say &quot;I want this variable to live this long regardless of scope&quot;, you&#39;re asking if you can you ignore the rules rust enforces?  the answer is no, what you want to do is fundamentally wrong."}, {"owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "edited": false, "score": 0, "creation_date": 1438185643, "post_id": 31662269, "comment_id": 51349532, "body": "But what if I make <code>glyph_cache</code> a field in the struct. Will it live as long as the struct? Then create it in new, but assign it to the field. I know Rust is super careful about scopes, but I was expecting that a heap allocated value can live as long as someone has the reference to it. Though glyph cache, isn&#39;t head allocated in the example."}], "tags": [], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "is_accepted": true, "score": 5, "last_activity_date": 1438028506, "last_edit_date": 1438028506, "creation_date": 1438027628, "answer_id": 31662269, "question_id": 31662079, "link": "https://stackoverflow.com/questions/31662079/borrowed-value-does-not-live-long-enough-compiler-error-for-struct/31662269#31662269", "title": "Borrowed value does not live long enough compiler error for struct", "body": "<p>That's because <code>&amp;mut 10i32</code> does not live long enough in your program. You specified that <code>one</code> will have the same lifetime as <code>a</code>, but <code>a</code> lives longer than <code>one</code> as the i32 goes out of scope after <code>new</code> finishes. This code will work on the otherhand:</p>\n\n<pre><code>#[derive(Debug)]\nstruct B&lt;'a&gt; {\n    b: &amp;'a i32\n}\n\n#[derive(Debug)]\nstruct A&lt;'a&gt; {\n    one: B&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; A&lt;'a&gt; {\n    fn new(x: &amp;'a mut i32) -&gt; A&lt;'a&gt; {\n        // let mut b = 10i32;\n        A {\n            one: B{b: x}\n        }\n    }\n}\n\nfn main() {\n    let mut x = 10i32;\n    let a = A::new(&amp;mut x);\n    println!(\"A -&gt; {:?}\", a);\n}\n</code></pre>\n\n<p>Note that <code>x</code> now lives as long as <code>a</code>, so the your lifetimes are satisfied </p>\n"}, {"tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": false, "score": 6, "last_activity_date": 1438028059, "creation_date": 1438028059, "answer_id": 31662399, "question_id": 31662079, "link": "https://stackoverflow.com/questions/31662079/borrowed-value-does-not-live-long-enough-compiler-error-for-struct/31662399#31662399", "title": "Borrowed value does not live long enough compiler error for struct", "body": "<p>The key to understanding this is that an <code>&amp;</code> reference represents a <em>borrow</em>, not an owned value. The lifetime annotations do not control how long value live; they only keep track to ensure that the referents of a borrowed reference outlive the borrowed reference itself, so that it will always be valid to dereference it.</p>\n\n<p>A borrowed reference can refer to a value on the stack (statically allocated memory) or in the heap (dynamically allocated memory). Values on the stack have a lifetime that is fairly obvious; from when the variable is initialized, until the end of the block when those values are popped off the stack.</p>\n\n<p>Values on the heap are owned by pointers that live on the stack; so their lifetime is determined by the pointer on the stack that owns to them. However, ownership can be moved between different variables, so you can actually have more flexible lifetimes of those values if you move the ownership of the pointer that refers to them from one stack variable to another.</p>\n\n<p>If you write a function with a signature like the following:</p>\n\n<pre><code>fn new() -&gt; A&lt;'a&gt; {}\n</code></pre>\n\n<p>what you are saying is that you will return an <code>A</code> in which the contained references have some lifetime <code>'a</code> that is determined by the caller; but you can't do that, as you are not given any such references as input. You can't produce a value with an arbitrary input lifetime from within the <code>new</code> function.</p>\n\n<p>From a <code>new</code> function, what you generally want to return are <em>owned</em> values; or possibly values with borrows that are based on some input parameters, but you need to provide those references as input parameters.</p>\n\n<p>It might help if you describe a bit more about what you are trying to do, rather than just providing a toy example. There are several possible things that you could be trying to do here, but with just the toy example it's hard to determine which to describe. What is the purpose of returning an object that contains a reference? Is it so that the object could be heap-allocated, and thus only have to move around a single pointer when passing it around rather than copying the whole value? In that case, you probably want a <code>Box</code> or a <code>Vec</code>. Is it so that it can refer to some stack allocated variable? Then you need to allocate that in a containing stack frame, and pass a reference with that lifetime in to your function, so that there is a variable with an appropriate lifetime for it to refer to. If you are just trying to return an object that contains an integer, then you can do so by having the object contain the integer directly, rather than containing a reference to it.</p>\n"}], "owner": {"reputation": 735, "user_id": 859391, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/900a861b44fafd9603f80d627c46fd4a?s=128&d=identicon&r=PG", "display_name": "6D65", "link": "https://stackoverflow.com/users/859391/6d65"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5828, "favorite_count": 1, "accepted_answer_id": 31662269, "answer_count": 2, "score": 6, "last_activity_date": 1438284836, "creation_date": 1438026857, "last_edit_date": 1438284836, "question_id": 31662079, "link": "https://stackoverflow.com/questions/31662079/borrowed-value-does-not-live-long-enough-compiler-error-for-struct", "title": "Borrowed value does not live long enough compiler error for struct", "body": "<p>I'm new to the language and still fighting the borrow checker. I've seen that some libraries use new() functions a.k.a. constructors without parameters and it works. Basically this means, that the returned data is being created inside new's function scope, and it's not deleted at the end of new's scope.</p>\n\n<p>When trying this myself the borrow checker won't let this code through.\nHow does one make this work, other than passing the i32 mutable reference as a parameter to the constructor.</p>\n\n<p>Am I missing something? </p>\n\n<pre><code>#[derive(Debug)]\nstruct B&lt;'a&gt; {\n    b: &amp;'a i32\n}\n\n#[derive(Debug)]\nstruct A&lt;'a&gt; {\n    one: B&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; A&lt;'a&gt; {\n    fn new() -&gt; A&lt;'a&gt; {\n        // let mut b = 10i32;\n        A {\n            one: B{b: &amp;mut 10i32}\n        }\n    }\n}\n\nfn main() {\n    let a = A::new();\n    println!(\"A -&gt; {:?}\", a);\n}\n</code></pre>\n\n<p>The compiler error.</p>\n\n<pre><code>main.rs:15:19: 15:24 error: borrowed value does not live long enough\nmain.rs:15          one: B{b: &amp;mut 10i32}\n                                   ^~~~~\nmain.rs:12:20: 17:3 note: reference must be valid for the lifetime 'a as defined on the block at 12:19...\nmain.rs:12  fn new() -&gt; A&lt;'a&gt; {\nmain.rs:13      // let mut b = 10i32;\nmain.rs:14      A {\nmain.rs:15          one: B{b: &amp;mut 10i32}\nmain.rs:16      }\nmain.rs:17  }\nmain.rs:12:20: 17:3 note: ...but borrowed value is only valid for the block at 12:19\nmain.rs:12  fn new() -&gt; A&lt;'a&gt; {\nmain.rs:13      // let mut b = 10i32;\nmain.rs:14      A {\nmain.rs:15          one: B{b: &amp;mut 10i32}\nmain.rs:16      }\nmain.rs:17  }\nerror: aborting due to previous error\n</code></pre>\n\n<p>As per request, here's the practical example i'm trying to work with.\nThere's this GUI library(Conrod), and it has some steps to instantiate it. Like in the example below. </p>\n\n<pre><code>let assets = find_folder::Search::ParentsThenKids(3, 3)\n    .for_folder(\"assets\").unwrap();\nlet font_path = assets.join(\"fonts/NotoSans/NotoSans-Regular.ttf\");\nlet theme = Theme::default();\nlet glyph_cache = GlyphCache::new(&amp;font_path).unwrap();\nlet ui = &amp;mut Ui::new(glyph_cache, theme);\n</code></pre>\n\n<p>My plan was to encapsulate the drawing of the app, into a struct. That would have a constructor and a few helper methods. For this to work i would have to have a field with a instance of the <code>conrod::Ui&lt;GlyphCache&lt;'a&gt;&gt;</code> type, which is the type for the ui variable above.</p>\n\n<p>I think adding things to main(i mean having all the allocations done in main), might not be the best way to do things.</p>\n\n<pre><code>let mut app_ui = app::AppUi::new(); // This would encapsulate all of the above configuration lines.\n\n// use the ui here\nfor e in evets {\n    app_ui.handle_input();\n    app_ui.render();\n}\n</code></pre>\n\n<p>Implementation of AppUi. It's not complete, but should show the general idea. \nJust to make sure we're on the same page, the type <code>conrod::Ui&lt;GlyphCache&lt;'a&gt;&gt;</code> requires a life lifetime parameter. And i want to have the same lifetime as the struct. The only way i know how to do that is to make the struct get a lifetime parameter itself, and pass it down to the UI type.</p>\n\n<pre><code>pub struct AppUi&lt;'a&gt; {\n  pub ui: conrod::Ui&lt;GlyphCache&lt;'a&gt;&gt;,\n  pub count: u16\n}\n\nimpl&lt;'a&gt; AppUi&lt;'a&gt; {\n  pub fn new() -&gt; AppUi&lt;'a&gt; {\n    let assets = find_folder::Search::ParentsThenKids(3, 3)\n    .for_folder(\"assets\").unwrap();\n\n    let font_path = assets.join(\"FiraSans-Regular.ttf\");\n    let theme = Theme::default();\n    let glyph_cache = GlyphCache::new(&amp;font_path).unwrap();\n\n    AppUi {\n      ui: conrod::Ui::new(glyph_cache, theme),\n      count: 0\n    }\n  }\n}\n</code></pre>\n\n<p>=======================</p>\n\n<p>The solution i went with, and it worked in the end(at least it works for now). Was to create a helper function, that would return a glyph_cache and just used that. I'm not sure if it's idiomatic Rust, will just use it for now. Should probably get used to working with the borrow checker.</p>\n\n<pre><code>pub struct AppUi&lt;'a&gt; {\n  pub ui: conrod::Ui&lt;GlyphCache&lt;'a&gt;&gt;,\n  pub count: u16\n}\n\nimpl&lt;'a&gt; AppUi&lt;'a&gt; {\n  pub fn new() -&gt; AppUi&lt;'a&gt; {\n\n    AppUi {\n      ui: conrod::Ui::new(GlyphCache::new(&amp;get_default_font_path()).unwrap(), Theme::default()),\n      count: 0\n    }\n  }\n}\n\npub fn get_default_font_path() -&gt; PathBuf {\n  find_folder::Search::ParentsThenKids(3, 3)\n    .for_folder(\"assets\")\n    .unwrap()\n    .join(\"FiraSans-Regular.ttf\")\n}\n</code></pre>\n"}, {"tags": ["list", "vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 251, "user_id": 1363630, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/d1ccd28963f5c6509b6e7ed73bd95b80?s=128&d=identicon&r=PG", "display_name": "Singh", "link": "https://stackoverflow.com/users/1363630/singh"}, "edited": false, "score": 1, "creation_date": 1438026860, "post_id": 31661909, "comment_id": 51268762, "body": "Thank you for your explanation, i had run into both those errors. I now have a better understanding of ownership"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1511907050, "last_edit_date": 1511907050, "creation_date": 1438026339, "answer_id": 31661909, "question_id": 31661713, "link": "https://stackoverflow.com/questions/31661713/borrowed-value-does-not-live-long-enough-when-pushing-into-a-vector/31661909#31661909", "title": "&quot;Borrowed Value Does Not Live Long Enough&quot; when pushing into a vector", "body": "<p>Let's start with a smaller example. This is called an <a href=\"/help/mcve\">MCVE</a>, and is very valuable for both you as a programmer and for us to answer your question. Additionally, it can run on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a>, which is convenient.</p>\n\n<pre><code>fn main() {\n    let mut args = vec![\"a\".to_string()];\n    let mut result = vec![];\n\n    for x in args.iter() {\n        let n = args.len() - 1; // Pretend this is a random index\n        result.push(&amp;args.swap_remove(n));\n    }\n\n    for y in result.iter() {\n        println!(\"{}\", y);\n    }\n}\n</code></pre>\n\n<p>The problem arises because when you call <code>swap_remove</code>, the item is <em>moved</em> out of the vector and given to you - the ownership is transferred. You then take a reference to the item and try to store that reference in the <code>result</code> vector. The problem is that the item is dropped after the loop iteration has ended because <em>nothing owns it</em>. If you were allowed to take that reference, it would be a <em>dangling reference</em>, one that points to invalid memory. Using that reference could cause a crash, so Rust prevents it.</p>\n\n<p>The immediate fix is to not take a reference, but instead transfer ownership from one vector to the other. Something like:</p>\n\n<pre><code>for x in args.iter() {\n    let n = args.len() - 1;\n    result.push(args.swap_remove(n));\n}\n</code></pre>\n\n<p>The problem with this is that you will get <code>cannot borrow `args` as mutable because it is also borrowed as immutable</code>. See the <code>args.iter</code>? That creates an iterator that refers to the vector. If you changed the vector, then the iterator would become invalid, and allow access to an item that may not be there, another potential crash that Rust prevents.</p>\n\n<p>I'm not making any claim that this is a good way to do it, but one solution would be to iterate while there are still items:</p>\n\n<pre><code>while args.len() &gt; 0 {\n    let n = args.len() - 1;\n    result.push(args.swap_remove(n));\n}\n</code></pre>\n\n<p>I'd solve the overall problem by using <code>shuffle</code>:</p>\n\n<pre><code>extern crate rand;\n\nuse std::env;\nuse rand::Rng;\n\nfn main() {\n    let mut args: Vec&lt;_&gt; = env::args().skip(1).collect();\n\n    rand::thread_rng().shuffle(&amp;mut args);\n\n    for y in &amp;args {\n        println!(\"{}\", y);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 251, "user_id": 1363630, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/d1ccd28963f5c6509b6e7ed73bd95b80?s=128&d=identicon&r=PG", "display_name": "Singh", "link": "https://stackoverflow.com/users/1363630/singh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1029, "favorite_count": 0, "accepted_answer_id": 31661909, "answer_count": 1, "score": 2, "last_activity_date": 1511907050, "creation_date": 1438025554, "last_edit_date": 1511906900, "question_id": 31661713, "link": "https://stackoverflow.com/questions/31661713/borrowed-value-does-not-live-long-enough-when-pushing-into-a-vector", "title": "&quot;Borrowed Value Does Not Live Long Enough&quot; when pushing into a vector", "body": "<p>I am trying a <a href=\"https://www.reddit.com/r/dailyprogrammer/comments/3e0hmh/20150720_challenge_224_easy_shuffling_a_list/\" rel=\"nofollow noreferrer\">daily programmer problem</a> to shuffle a list of arguments and output them.</p>\n\n<p>I'm not sure if this is the correct approach but it sounded like a good idea: remove the element from the args vector so it doesn't get repeated, and insert it into the result vector. </p>\n\n<pre><code>extern crate rand;\n\nuse std::io;\nuse std::cmp::Ordering;\nuse std::env;\nuse rand::Rng;\n\nfn main() {\n    let mut args: Vec&lt;_&gt; = env::args().collect();\n    let mut result: Vec&lt;_&gt; = Vec::with_capacity(args.capacity());\n\n    if args.len() &gt; 1 {\n        println!(\"There are(is) {} argument(s)\", args.len() - 1)\n    }\n\n    for x in args.iter().skip(1) {\n        let mut n = rand::thread_rng().gen_range(1, args.len());\n        result.push(&amp;args.swap_remove(n));\n    }\n\n    for y in result.iter() {\n        println!(\"{}\", y);\n    }\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:18:42\n   |\n18 |         result.push(&amp;args.swap_remove(n));\n   |                      ------------------- ^ temporary value dropped here while still borrowed\n   |                      |\n   |                      temporary value created here\n...\n24 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 0, "creation_date": 1439762625, "post_id": 31660386, "comment_id": 51981281, "body": "Example code doing this: <a href=\"https://github.com/sourcefrog/conserve/blob/master/tests/run_cram.rs\" rel=\"nofollow noreferrer\">github.com/sourcefrog/conserve/blob/master/tests/run_cram.rs</a>"}], "answers": [{"comments": [{"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 0, "creation_date": 1439761808, "post_id": 31760328, "comment_id": 51981081, "body": "Thanks! Incidentally that argument is now <code>cargo test -- --nocapture</code>, but it will show the output by default if the test fails."}], "tags": [], "owner": {"reputation": 56, "user_id": 5180246, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jQMED.png?s=128&g=1", "display_name": "Zarathustra30", "link": "https://stackoverflow.com/users/5180246/zarathustra30"}, "is_accepted": true, "score": 2, "last_activity_date": 1438422094, "last_edit_date": 1438422094, "creation_date": 1438421399, "answer_id": 31760328, "question_id": 31660386, "link": "https://stackoverflow.com/questions/31660386/how-to-run-external-blackbox-tests-from-cargo/31760328#31760328", "title": "How to run external blackbox tests from Cargo?", "body": "<p>For a quick-and-dirty tests, you can run external executables by way of a shell command with <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow\">std::process::Command</a>. Simply stick it into the tests directory, as so:</p>\n\n<pre><code>#[test]\nfn it_works() {\n    use std::process::Command;\n\n    let output = Command::new(\"python.exe\")\n        .arg(\"test.py\")\n        .output()\n        .unwrap_or_else(|e| { panic!(\"failed to execute process: {}\", e) });\n\n    let s = match String::from_utf8(output.stdout) {\n        Ok(v) =&gt; v,\n        Err(e) =&gt; panic!(\"Invalid UTF-8 sequence: {}\", e),\n    };\n\n    println!(\"result: {}\", s); //must run \"cargo test -- --nocapture\" to see output\n}\n</code></pre>\n\n<p>For anything more complicated than that, you will have to use a FFI specific to the external language.</p>\n"}], "owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 326, "favorite_count": 0, "accepted_answer_id": 31760328, "answer_count": 1, "score": 2, "last_activity_date": 1438472889, "creation_date": 1438021058, "last_edit_date": 1438472889, "question_id": 31660386, "link": "https://stackoverflow.com/questions/31660386/how-to-run-external-blackbox-tests-from-cargo", "title": "How to run external blackbox tests from Cargo?", "body": "<p>Suppose I have a Rust program with some blackbox tests written in sh or Python (for example). Is there any easy way to get <code>Cargo test</code> to run them?</p>\n\n<p>(I realize this is a bit against the grain of Cargo, since it's likely to introduce untracked dependencies on OS tools. But it'd be really useful, since I have some existing tests I want to reuse.)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 7241, "user_id": 682907, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0d35fd07f04d62298889ca37b389ad9e?s=128&d=identicon&r=PG", "display_name": "Gustav Larsson", "link": "https://stackoverflow.com/users/682907/gustav-larsson"}, "edited": false, "score": 0, "creation_date": 1437966387, "post_id": 31644342, "comment_id": 51235258, "body": "Works perfectly. Thanks!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 17, "last_activity_date": 1510265731, "last_edit_date": 1510265731, "creation_date": 1437966043, "answer_id": 31644342, "question_id": 31644207, "link": "https://stackoverflow.com/questions/31644207/cannot-find-macro-error-in-the-macros-own-doc-test/31644342#31644342", "title": "&quot;cannot find macro&quot; error in the macro&#39;s own doc test", "body": "<p>Doc tests automatically wrap the code block in <code>extern crate foo; fn main() { \u2026 }</code> if they don\u2019t find these elements in the code, but to get an exported macro you need the <code>#[macro_use]</code> attribute on the <code>extern crate foo;</code>.</p>\n\n<p>Thus, you should write this:</p>\n\n<pre><code>/// Usage:\n///\n/// ```\n/// # #[macro_use] extern crate foo; fn main() {\n/// let x = addone!(100);\n/// # }\n/// ```\n#[macro_export]\nmacro_rules! addone {\n    ($x:expr) =&gt; ($x + 1)\n}\n</code></pre>\n\n<p>(The lines prefixed with <code>#\u00a0</code> get hidden in the output, but included, <i>sans</i> the marker, in the code that gets compiled for the doc test.)</p>\n\n<p>This is covered in <a href=\"https://doc.rust-lang.org/stable/book/first-edition/documentation.html#documenting-macros\" rel=\"noreferrer\"><em>The Rust Programming Language</em>, first edition</a>.</p>\n\n<p>As for <code>std</code>, there is an implied <code>#[macro_use] extern crate std;</code> in all crates that lack the <code>#![no_std]</code> crate attribute, so its macros immediately work.</p>\n"}], "owner": {"reputation": 7241, "user_id": 682907, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0d35fd07f04d62298889ca37b389ad9e?s=128&d=identicon&r=PG", "display_name": "Gustav Larsson", "link": "https://stackoverflow.com/users/682907/gustav-larsson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4270, "favorite_count": 1, "accepted_answer_id": 31644342, "answer_count": 1, "score": 14, "last_activity_date": 1510265825, "creation_date": 1437964879, "last_edit_date": 1510265825, "question_id": 31644207, "link": "https://stackoverflow.com/questions/31644207/cannot-find-macro-error-in-the-macros-own-doc-test", "title": "&quot;cannot find macro&quot; error in the macro&#39;s own doc test", "body": "<p>I am trying to add documentation tests to a Rust macro that I'm exporting. Something like this:</p>\n\n<pre><code>/// Usage:\n///\n/// ```\n/// let x = addone!(100);\n/// ```\n#[macro_export]\nmacro_rules! addone {\n    ($x:expr) =&gt; ($x + 1)\n}\n</code></pre>\n\n<p>If I run <code>cargo test</code> on this, I get </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>failures:\n\n---- src/lib.rs - addone (line 3) stdout ----\n    error: cannot find macro `addone!` in this scope\n --&gt; src/lib.rs:2:9\n  |\n2 | let x = addone!(100);\n  |         ^^^^^^\n</code></pre>\n\n<p>I can't think of a legal way of adding <code>macro_use</code> inside the doc test, so no luck there.</p>\n\n<p>The <a href=\"https://github.com/rust-lang/rust/blob/f76d9bcfc2c269452522fbbe19f66fe653325646/src/libcollections/macros.rs\" rel=\"noreferrer\">macros in Rust's standard library</a> follow the same format as the code above, so I was expecting it to work.</p>\n"}, {"tags": ["parallel-processing", "rust", "unsafe"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1437977428, "post_id": 31644152, "comment_id": 51238242, "body": "Could <code>Vec.split_at_mut(..)</code> work for you?"}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1437984774, "post_id": 31644152, "comment_id": 51241774, "body": "you can split it mutably but you are still stuck with how to move ownership into the worker threads and then get it back. i don&#39;t see how to do this safely since while the worker threads are computing, in the parent thread you still have mutable access to the original vec. there are lifetime issues too as the closure may escape the block, unboxed closures may fix that - i don&#39;t know much about them though."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1437986888, "post_id": 31644152, "comment_id": 51242919, "body": "once <a href=\"https://doc.rust-lang.org/nightly/std/thread/fn.scoped.html\" rel=\"nofollow noreferrer\"><code>scoped</code></a> gets a proper replacement <code>split_at_mut</code> is the correct solution. Until then I suggest simply creating multiple vectors, one for every thread."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1438018101, "post_id": 31644152, "comment_id": 51263656, "body": "<code>chunks_mut</code> is a nicer version of <code>split_at_mut</code> for this purpose: <code>for target in data.chunks_mut(100_000) { ... }</code>."}], "answers": [{"comments": [{"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 0, "creation_date": 1438034148, "post_id": 31659665, "comment_id": 51272488, "body": "Thanks! This is very helpful. Though I&#39;d like to sort out all the details of this myself, so I can learn. I hadn&#39;t thought of doing this using channels. I will need to think about this some more."}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 2, "creation_date": 1438213582, "post_id": 31659665, "comment_id": 51363743, "body": "I rolled my own with <a href=\"https://github.com/rust-lang/threadpool\" rel=\"nofollow noreferrer\">github.com/rust-lang/threadpool</a> .  <a href=\"http://huonw.github.io/blog/2015/05/finding-closure-in-rust/\" rel=\"nofollow noreferrer\">huonw.github.io/blog/2015/05/finding-closure-in-rust</a> was very helpful."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 8, "last_activity_date": 1438018565, "creation_date": 1438018565, "answer_id": 31659665, "question_id": 31644152, "link": "https://stackoverflow.com/questions/31644152/processing-vec-in-parallel-how-to-do-safely-or-without-using-unstable-features/31659665#31659665", "title": "Processing vec in parallel: how to do safely, or without using unstable features?", "body": "<p>One can use an external library for this, e.g. <a href=\"https://crates.io/crates/simple_parallel\" rel=\"noreferrer\"><code>simple_parallel</code></a> (disclaimer, I wrote it) allows one to write:</p>\n\n<pre><code>extern crate simple_parallel;\n\nlet mut data = vec![1u32, 2, 3, 4, 5];\n\nlet mut pool = simple_parallel::Pool::new(4);\n\npool.for_(data.chunks_mut(3), |target| {\n    // do stuff with `target`\n})\n</code></pre>\n\n<p>The <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.chunks\" rel=\"noreferrer\"><code>chunks</code></a> and <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut\" rel=\"noreferrer\"><code>chunks_mut</code></a> methods are the perfect way to split a vector/slice of <code>T</code>s into equally sized chunks: they respectively return an iterator over elements of type <code>&amp;[T]</code> and <code>&amp;mut [T]</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "is_accepted": true, "score": 19, "last_activity_date": 1563259909, "last_edit_date": 1563259909, "creation_date": 1562004459, "answer_id": 56840441, "question_id": 31644152, "link": "https://stackoverflow.com/questions/31644152/processing-vec-in-parallel-how-to-do-safely-or-without-using-unstable-features/56840441#56840441", "title": "Processing vec in parallel: how to do safely, or without using unstable features?", "body": "<p>Today the <a href=\"https://crates.io/crates/rayon\" rel=\"noreferrer\"><code>rayon</code></a> crate is the de facto standard for this sort of thing:</p>\n\n<pre><code>use rayon::prelude::*;\n\nfn main() {\n    let mut data = vec![1, 2, 3];\n    data.par_iter_mut()\n        .enumerate()\n        .for_each(|(i, x)| *x = 10 + i as u32);\n    assert_eq!(vec![10, 11, 12], data);\n}\n</code></pre>\n\n<p>Note that this is just one line different from the single-threaded version using standard iterators, which would replace <code>par_iter_mut</code> with <code>iter_mut</code>.</p>\n\n<p>See also <a href=\"https://nelari.us/post/raytracer_with_rust_and_zig/\" rel=\"noreferrer\">Writing a small ray tracer in Rust and Zig</a>. </p>\n"}], "owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2016, "favorite_count": 1, "accepted_answer_id": 56840441, "answer_count": 2, "score": 10, "last_activity_date": 1563259909, "creation_date": 1437964422, "last_edit_date": 1437964571, "question_id": 31644152, "link": "https://stackoverflow.com/questions/31644152/processing-vec-in-parallel-how-to-do-safely-or-without-using-unstable-features", "title": "Processing vec in parallel: how to do safely, or without using unstable features?", "body": "<p>I have a massive vector that I want to be able to load/act on in parallel, e.g. load first hundred thousand indices in one thread, next in another and so on. As this is going to be a very hot part of the code, I have come up with this following proof of concept unsafe code to do this without Arcs and Mutexes:</p>\n\n<pre><code>let mut data:Vec&lt;u32&gt; = vec![1u32, 2, 3];\nlet head = data.as_mut_ptr();\nlet mut guards = (0..3).map(|i|\n  unsafe {\n    let mut target = std::ptr::Unique::new(head.offset(i));\n    let guard = spawn(move || {\n      std::ptr::write(target.get_mut(), 10 + i as u32);\n    });\n    guard\n  });\n</code></pre>\n\n<p>Is there anything I have missed here that can make this potentially blow up?</p>\n\n<p>This uses <code>#![feature(unique)]</code> so I don't see how to use this in stable. Is there a way to do this sort of thing in stable (ideally safely without using raw pointers and overhead of <code>Arc</code>'s and <code>Mutex</code>'s)? </p>\n\n<p>Also, looking at  <a href=\"https://doc.rust-lang.org/std/ptr/struct.Unique.html\" rel=\"noreferrer\">documentation for <code>Unique</code></a>, it says </p>\n\n<blockquote>\n  <p>It also implies that the referent of the pointer should not be modified without a unique path to the <code>Unique</code> reference</p>\n</blockquote>\n\n<p>I am not clear what \"unique path\" means.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "edited": false, "score": 0, "creation_date": 1437944087, "post_id": 31641610, "comment_id": 51230277, "body": "My misunderstanding was that I thought it made sense to give out a lifetime that lives longer than the input lifetime. This doesn&#39;t make sense because if we have a borrow of <code>self</code> for <code>&#39;a</code>, then we can&#39;t borrow a field of <code>self</code> for longer than <code>&#39;a</code>."}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 15, "last_activity_date": 1437943404, "creation_date": 1437943404, "answer_id": 31641744, "question_id": 31641610, "link": "https://stackoverflow.com/questions/31641610/return-reference-with-lifetime-of-self/31641744#31641744", "title": "Return reference with lifetime of self", "body": "<p>You don't want the reference to live exactly as long as the object. You just want <em>a</em> borrow on the object (quite possibly shorter than the entire lifetime of the object), and you want the resulting reference to have the lifetime of that borrow. That's written like this:</p>\n\n<pre><code>pub fn get_foo&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a usize {\n    &amp;self.foo\n}\n</code></pre>\n\n<p>Additionally, lifetime elision makes the signature prettier:</p>\n\n<pre><code>pub fn get_foo(&amp;self) -&gt; &amp;usize {\n    &amp;self.foo\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 12, "last_activity_date": 1437943537, "creation_date": 1437943537, "answer_id": 31641767, "question_id": 31641610, "link": "https://stackoverflow.com/questions/31641610/return-reference-with-lifetime-of-self/31641767#31641767", "title": "Return reference with lifetime of self", "body": "<p>In your example the lifetime of <code>self</code> is <code>'a</code> so the lifetime of the returned reference should be <code>'a</code>:</p>\n\n<pre><code>pub fn get_foo&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a usize {\n    &amp;self.foo\n}\n</code></pre>\n\n<p>However the compiler is able to deduce (lifetime elision) the correct lifetime in simple cases like that, so you can avoid to specify lifetime at all, this way:</p>\n\n<pre><code>pub fn get_foo(&amp;self) -&gt; &amp;usize {\n    &amp;self.foo\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/lifetimes.html\" rel=\"noreferrer\">Look here for lifetime elision rules</a></p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4935, "favorite_count": 1, "accepted_answer_id": 31641744, "answer_count": 2, "score": 6, "last_activity_date": 1437961451, "creation_date": 1437942441, "last_edit_date": 1437961451, "question_id": 31641610, "link": "https://stackoverflow.com/questions/31641610/return-reference-with-lifetime-of-self", "title": "Return reference with lifetime of self", "body": "<p>I'd like to write some code like the following:</p>\n\n<pre><code>struct Foo {\n    foo: usize\n}\n\nimpl Foo {\n    pub fn get_foo&lt;'a&gt;(&amp;'a self) -&gt; &amp;'self usize {\n        &amp;self.foo\n    }\n}\n</code></pre>\n\n<p>But this doesn't work, failing with <code>invalid lifetime name: 'self is no longer a special lifetime</code>.</p>\n\n<p>How can I return a reference that lives as long as the object itself?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437938248, "post_id": 31640442, "comment_id": 51228475, "body": "it&#39;s because rust cannot reason about heap lifetimes. Just put your bitmapdata vector into <code>PixelImageSimple</code> by value and put the <code>bitmap</code> into an <code>Rc</code> and then clone the <code>Rc</code> to pass the cloned version by value into the other objects. <a href=\"http://is.gd/QIVXaN\" rel=\"nofollow noreferrer\">is.gd/QIVXaN</a>"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437956209, "post_id": 31640442, "comment_id": 51233175, "body": "@ker cool solution, but why do you not clone <code>bitmap</code> when creating the <i>sharpen</i> object?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437978641, "post_id": 31640442, "comment_id": 51238734, "body": "because I don&#39;t need bitmap after that. so I can just move it out of the function. If you still need it afterwards, clone it and move the clone into there. Note: cloning the <code>Rc</code> does nothing but increase the reference counter. No data is copied."}, {"owner": {"reputation": 71, "user_id": 5157671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3048c1f78e06a91cf8fea6d7901223ef?s=128&d=identicon&r=PG&f=1", "display_name": "bumzack", "link": "https://stackoverflow.com/users/5157671/bumzack"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1438010570, "post_id": 31640442, "comment_id": 51258916, "body": "@ker: thanks a lot for your quick response and solution. really appreciate your time and help!"}], "answers": [{"comments": [{"owner": {"reputation": 1820, "user_id": 348180, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/f996cace42a0d412e9aa352e47b53ba7?s=128&d=identicon&r=PG", "display_name": "Aatch", "link": "https://stackoverflow.com/users/348180/aatch"}, "edited": false, "score": 0, "creation_date": 1437965857, "post_id": 31644110, "comment_id": 51235171, "body": "Just to expand a little bit more, if you had <code>ImageOperationFoo&lt;&#39;a, &#39;b&gt; { a: &amp;&#39;a A, b: &amp;&#39;b B }</code> you&#39;d do <code>impl&lt;&#39;a, &#39;b&gt; ImageOperation&lt;&#39;a&gt; for ImageOperationFoo&lt;&#39;a, &#39;b&gt;</code>. What then happends is that you lose the <code>&#39;b</code> lifetime when creating the <code>Box&lt;ImageOperation&lt;&#39;a&gt;&gt;</code> and Rust can&#39;t get it back. So you have the lifetime bounds to prevent the construction of trait objects that would otherwise out-live their contents."}, {"owner": {"reputation": 71, "user_id": 5157671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3048c1f78e06a91cf8fea6d7901223ef?s=128&d=identicon&r=PG&f=1", "display_name": "bumzack", "link": "https://stackoverflow.com/users/5157671/bumzack"}, "edited": false, "score": 0, "creation_date": 1438010948, "post_id": 31644110, "comment_id": 51259170, "body": "@DK.   thanks for this thoroughly explanation. This is great, never seen such a detailed explanation before!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 14, "last_activity_date": 1488411496, "last_edit_date": 1488411496, "creation_date": 1437964022, "answer_id": 31644110, "question_id": 31640442, "link": "https://stackoverflow.com/questions/31640442/how-can-i-use-lifetime-bounds-to-solve-reference-must-be-valid-for-the-static-l/31644110#31644110", "title": "How can I use lifetime bounds to solve &quot;reference must be valid for the static lifetime&quot;", "body": "<p>You've run afoul of lifetime elision.  When in doubt, write it out!</p>\n\n<blockquote>\n  <p><strong>Note</strong>: the comments are because what I'm adding here is not valid Rust syntax.  Also note that what follows is not <em>entirely</em> accurate, to avoid being bogged down in details.</p>\n</blockquote>\n\n<pre class=\"lang-rust prettyprint-override\"><code>        fn main () {\n            /* Lifetimes come from storage, so we'll annotate relevant\n               variables with lifetimes.  We're not defining lifetimes,\n               we're just assigning names to the lifetimes that the compiler\n               will work out during borrow checking. */\n/* 'a: */   let bitmapdata = vec![1,2,3];\n\n            /* We'll also substitute the lifetimes into the types of the\n               variables and expressions we talk about.  Again, you normally\n               couldn't do this, because you can't name lifetimes *within*\n               a function. */\n/* 'b: */   let bitmap/*: PixelImageSimple&lt;'a&gt; */\n            = PixelImageSimple {\n                pixels: &amp;/*'a*/bitmapdata,\n                width: 222,\n                height: 334\n            };\n\n            /* We have to pick *one* lifetime here, so we'll pick the\n               \"narrowest\" lifetime.  We'll cheat here and \"assume\" that\n               'a: 'b (read: \"'a outlives 'b\"); or, in other words, that\n               'b &lt; 'a (read: \"'b is no longer than 'a\"). */\n            let sharpen/*: ImageOperationSharpen&lt;'b&gt; as 'b &lt; 'a */\n            = ImageOperationSharpen {\n                val: 34,\n                bitmapdata: &amp;/*'b*/bitmap/*: PixelImageSimple&lt;'a&gt;*/\n            };\n\n            let box_sharpen/*: Box&lt;ImageOperationSharpen&lt;'b&gt;&gt;*/\n            = Box::new(sharpen);\n\n            /* We'll introduce `'x` here, because it's not immediately clear\n               what this lifetime should be.  The compiler will infer it\n               from whatever constraints it's been placed under for us. */\n/* 'c: */   let mut image/*: Image&lt;'x&gt;*/\n            = Image::new();\n\n            /* Wait, where did `'y` come from?  Lifetime elision.  When\n               you're dealing with trait objects, the compiler *must* know\n               for how long said object is valid.  Normally, the compiler\n               would just look at a type's lifetime parameters, but a trait\n               object *throws that information away*.  As a result, it\n               needs to preserve this information external to the trait.\n               This is done using the `Trait + 'k` syntax, where `'k` is\n               a lifetime that bounds *all* possible implementations of\n               the trait *in this position*.\n\n               This statement is implicit in the original code, but I'm\n               adding it here to make things explicit.  I've also included\n               the `impl` to denote how the lifetimes transfer around during\n               the cast. */\n            let box_sharpen/*: Box&lt;ImageOperation&lt;'b&gt; + 'y&gt;*/\n            /*where impl&lt;'l&gt; ImageOperation&lt;'l&gt; for ImageOperationSharpen&lt;'l&gt;*/\n            = box_sharpen/*: Box&lt;ImageOperationRotate&lt;'b&gt;&gt;*/\n                as Box&lt;ImageOperation/*&lt;'b&gt; + 'y*/&gt;;\n\n            /* The only change here is that I *explicitly* borrow `image`\n               in order to make all the lifetimes involved explicit.  In\n               addition, we now have all the information necessary to work\n               out what the inferred lifetimes above should be. */\n            (&amp;/*'c */mut image).add_op(\n                box_sharpen/* as Box&lt;ImageOperation&lt;'b&gt; + 'y&gt;*/\n            );\n            /*where impl&lt;'l&gt; Image::&lt;'l&gt;::add_op&lt;'m&gt;(&amp;'m mut self,\n                image_ops: Box&lt;ImageOperation&lt;'l&gt; + 'z&gt;)*/\n            /*implies 'l = 'b, 'm = 'c, 'z = 'y, 'x = 'l = 'b*/\n        }\n</code></pre>\n\n<p>All the lifetimes check out... <em>except</em> for <code>'z = 'y</code>.\nWhat is <code>'z</code>?  Whatever it is, it determines the <em>minimum</em>\nlifetime of all values that implement <code>ImageOperation</code>.</p>\n\n<p>What's reasonable?  You're talking about a <code>Box</code> of something,\nso what would make sense?  The narrowest possible lifetime, or\nthe widest?  The narrowest would render <code>Box&lt;Trait&gt;</code> almost\nunusable, so it must be the widest.  The widest is <code>'static</code>,\ntherefore <code>'z = 'static</code>.</p>\n\n<p>But wait... if you have <code>Box&lt;ImageOperation&lt;'q&gt; + 'static&gt;</code>, the\ntype that implements <code>ImageOperation&lt;'q&gt;</code> <em>must</em> live <em>at least</em>\nas long as the <code>'static</code> lifetime... which means that <code>'q</code> <em>must\nalso</em> be <code>'static</code>.</p>\n\n<p>By this reasoning, <code>'x = 'l = 'b = 'static</code>.  But this implies\nthat when we initialise <code>sharpen</code>, we do so with the following\nexpression:</p>\n\n<pre><code>bitmapdata: &amp;'static bitmap: PixelImageSimple&lt;'a&gt;\n</code></pre>\n\n<p>But that can't be right; you can't have a reference to something\nthat <em>outlives</em> the something being referenced.  That means we\n<em>require</em> <code>'a</code> to outlive <code>'static</code>... which means <code>'a</code> is\n<em>also</em> <code>'static</code>.</p>\n\n<p>But <code>'a</code> is a stack frame; it <em>cannot</em> be <code>'static</code>!</p>\n\n<p>Thus, the program is not sound.</p>\n\n<p>... so what if we just explicitly tell the compiler that we\ndon't <em>want</em> a <code>+ 'static</code> bound on our trait objects?</p>\n\n<pre><code>struct Image&lt;'a&gt; {\n    image_operations: Vec&lt;Box&lt;ImageOperation&lt;'a&gt; + 'a&gt;&gt;\n}\n\nimpl&lt;'a&gt; Image&lt;'a&gt; {\n    fn new() -&gt; Image&lt;'a&gt; {\n        Image { image_operations: vec![] }\n    }\n\n    fn add_op(&amp;mut self, image_ops: Box&lt;ImageOperation&lt;'a&gt; + 'a&gt;) {\n           self.image_operations.push(image_ops);\n    }\n}\n\n// ...\n\nfn main() {\n    // ...\n    (&amp;/*'c */mut image).add_op(\n        box_sharpen/* as Box&lt;ImageOperation&lt;'b&gt; + 'y&gt;*/\n    );\n    /*where impl&lt;'l&gt; Image::&lt;'l&gt;::add_op&lt;'m&gt;(&amp;'m mut self,\n        image_ops: Box&lt;ImageOperation&lt;'l&gt; + 'z&gt;)*/\n    /*implies 'l = 'b, 'm = 'c, 'z = 'y, 'x = 'l = 'b*/\n}\n</code></pre>\n\n<p>And it now compiles.</p>\n\n<blockquote>\n  <p><strong>Addendum</strong> (suggested by aatch): additionally, the lifetime on <code>ImageOperation</code> itself seems misplaced.  You aren't <em>using</em> it for anything, and it isn't necessary for the code to work.  In that case, you end up dealing with <code>Box&lt;ImageOperation + 'a&gt;</code>s, which is an even better demonstration of <em>why</em> you need trait object lifetime bounds.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 71, "user_id": 5157671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3048c1f78e06a91cf8fea6d7901223ef?s=128&d=identicon&r=PG&f=1", "display_name": "bumzack", "link": "https://stackoverflow.com/users/5157671/bumzack"}, "edited": false, "score": 0, "creation_date": 1438011329, "post_id": 31646782, "comment_id": 51259432, "body": "in this case I didn&#39;t want to to modify <i>PixelImageSimple</i> - read-only access in <i>execute_op()</i> is sufficient.  But great to have a working solution in case I need read-write access. This is awesome - I&#39;ve learned so much - appreciate your time and effort to explain how Rust works."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1456324261, "post_id": 31646782, "comment_id": 58894295, "body": "The following is not true in general. Box and Vec permit storing arbitrary types: <i>\u201cThe Box and Vec (through vec![]) allocations are heap allocations. They could just as well live for the entirety of the program, or just for a single scope. Rust does not know anything about the allocations, except that any references they contain need to be &#39;static, as those definitely live longer (or the same) as the heap object you just allocated.\u201d</i>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1456326055, "post_id": 31646782, "comment_id": 58895696, "body": "yea that was the simplified version. changed to <code>Rust does not know anything about the lifetime of these allocations, except that any references they contain need to outlive the heap object you just allocated.</code>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1457097235, "post_id": 31646782, "comment_id": 59263439, "body": "Much better, I think."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 12, "last_activity_date": 1456326005, "last_edit_date": 1490005774, "creation_date": 1437980506, "answer_id": 31646782, "question_id": 31640442, "link": "https://stackoverflow.com/questions/31640442/how-can-i-use-lifetime-bounds-to-solve-reference-must-be-valid-for-the-static-l/31646782#31646782", "title": "How can I use lifetime bounds to solve &quot;reference must be valid for the static lifetime&quot;", "body": "<p>I'm assuming you have encountered the <a href=\"https://meta.stackexchange.com/a/66378/299793\">XY-Problem</a> (Trying to figure out the solution to an issue that is unrelated to your real problem)</p>\n\n<p>Rust cannot reason about heap-lifetimes. The <code>Box</code> and <code>Vec</code> (through <code>vec![]</code>) allocations are heap allocations. They could just as well live for the entirety of the program, or just for a single scope. Rust does not know anything about the lifetime of these allocations, except that any references they contain need to outlive the heap object you just allocated.</p>\n\n<p>You want multiple <code>ImageOperation</code> objects to have a reference to the <code>bitmap</code> object, and you want to be able to let those <code>ImageOperation</code> objects be moved onto the heap. The simplest solution is to get rid of all references and lifetimes and use a combination of moving and reference counted <code>Rc</code> boxes.</p>\n\n<p>Lets start with the <code>PixelImageSimple</code> type. We remove the lifetimes and references.</p>\n\n<pre><code>struct PixelImageSimple {\n    pixels: Vec&lt;i32&gt;,\n    width: i32,\n    height: i32,\n}\n</code></pre>\n\n<p>now you have an object that <strong>owns</strong> a <code>Vec</code>. No other object can control that <code>Vec</code> except through controlling the <code>PixelImageSimple</code> object.</p>\n\n<p>Onto the <code>ImageOperation</code> trait. The lifetime <code>'a</code> doesn't show up in the body of the trait. You can remove it without consequences.</p>\n\n<pre><code>trait ImageOperation {\n    fn execute_op(&amp;self);\n}\n</code></pre>\n\n<p>Now it gets interesting. You want the <code>ImageOperationSharpen</code> type to know about the <code>PixelImageSimple</code> but other types should also have access to the same <code>PixelImageSimple</code> object. This is where reference counted boxes come into play. An <code>Rc</code> allows multiple immutable \"references\" to the same object which all own the object in a way. You can <code>clone</code> an <code>Rc</code> to create more boxes pointing to the same object. Internally a counter keeps track of the number of <code>Rc</code> pointing to that object. Whenever an <code>Rc</code> gets dropped (its scope ends or you explicitly call <code>drop</code>) the counter is decreased. When it reaches zero, the object is actually dropped and the memory is freed.</p>\n\n<pre><code>struct ImageOperationSharpen {\n    val: i32,\n    bitmapdata: Rc&lt;PixelImageSimple&gt;\n}\n</code></pre>\n\n<p>The <code>ImageOperation</code> implementation is exactly the same, just with all lifetimes removed.</p>\n\n<pre><code>impl ImageOperation for ImageOperationSharpen {\n    fn execute_op(&amp;self) {\n        println!(\"ImageOperationSharpen - val = {}, width = {}, height = {}, pixels = {:?}\",\n            &amp;self.val, &amp;self.bitmapdata.width, &amp;self.bitmapdata.height,&amp;self.bitmapdata.pixels);\n    }\n}\n</code></pre>\n\n<p>We now repeat this for <code>ImageOperationRotate</code>:</p>\n\n<pre><code>struct ImageOperationRotate {\n    angle: f64,\n    bitmapdata: Rc&lt;PixelImageSimple&gt;\n}\n\nimpl ImageOperation for ImageOperationRotate {\n    fn execute_op(&amp;self) {\n        println!(\"ImageOperationRotate - angle = {}, width = {}, height = {}, pixels = {:?}\",\n            &amp;self.angle, &amp;self.bitmapdata.width, &amp;self.bitmapdata.height,&amp;self.bitmapdata.pixels);\n    }\n}\n</code></pre>\n\n<p>Here I'm a little confused as to what you are trying to do. Do you want to modify the <code>PixelImageSimple</code> when you call <code>execute_op</code>? This isn't possible as both the references you had and the <code>Rc</code> don't allow modification of the pointed-to object. See at the bottom of this answer for a solution.</p>\n\n<pre><code>struct Image {\n    image_operations: Vec&lt;Box&lt;ImageOperation&gt;&gt;\n}\n\nimpl Image {\n    fn new() -&gt; Image {\n        Image { image_operations: vec![] }\n    }\n\n    fn add_op(&amp;mut self, image_ops: Box&lt;ImageOperation&gt;) {\n        self.image_operations.push(image_ops);\n    }\n}\n</code></pre>\n\n<p>The changes require some minimal changes, mostly removal of the <code>&amp;</code> operator and adding the <code>Rc::new</code> call.</p>\n\n<pre><code>fn main () {\n    let bitmapdata = vec![1,2,3];\n\n    let bitmap = Rc::new(PixelImageSimple { pixels: bitmapdata, width: 222, height:334 });\n\n    let sharpen = ImageOperationSharpen { val: 34, bitmapdata: bitmap.clone() };\n    // since we don't create any more ImageOperations, we can move the\n    // Rc directly into this object. otherwise we'd also clone it.\n    let rotate = ImageOperationRotate { angle: 13.32, bitmapdata: bitmap };\n\n    let box_sharpen = Box::new(sharpen);\n    let box_rotate = Box::new(rotate);\n\n    let mut image = Image::new();\n\n    image.add_op(box_sharpen);\n    image.add_op(box_rotate);\n\n    println!(\"execute_op()\");\n    for imageops in image.image_operations.iter() {\n        imageops.execute_op();\n    }\n}\n</code></pre>\n\n<hr>\n\n<h1>A related solution</h1>\n\n<p>If you want to modify the <code>PixelImageSimple</code> object in every operation, I'd structure everything a little differently. First change the <code>ImageOperation</code> trait's <code>execute_op</code> function to also take an <code>&amp;mut PixelImageSimple</code>.</p>\n\n<pre><code>trait ImageOperation {\n    fn execute_op(&amp;self, bitmap: &amp;mut PixelImageSimple);\n}\n</code></pre>\n\n<p>Then remove all the <code>Rc&lt;PixelImageSimple&gt;</code> from the <code>*ImageOperation</code> types, and instead add a <code>PixelImageSimple</code> field to the <code>Image</code> type.</p>\n\n<pre><code>struct ImageOperationSharpen {\n    val: i32,\n}\nimpl ImageOperation for ImageOperationSharpen {\n    fn execute_op(&amp;self, bitmap: &amp;mut PixelImageSimple) {\n        // you could modify bitmap now.\n        println!(\"ImageOperationSharpen - val = {}, width = {}, height = {}, pixels = {:?}\",\n            self.val, bitmap.width, bitmap.height, bitmap.pixels);\n    }\n}\n\nstruct ImageOperationRotate {\n    angle: f64,\n}\n\nimpl ImageOperation for ImageOperationRotate {\n    fn execute_op(&amp;self, bitmap: &amp;mut PixelImageSimple) {\n        println!(\"ImageOperationRotate - angle = {}, width = {}, height = {}, pixels = {:?}\",\n            self.angle, bitmap.width, bitmap.height, bitmap.pixels);\n    }\n}\n\nstruct Image {\n    image_operations: Vec&lt;Box&lt;ImageOperation&gt;&gt;\n    bitmap: PixelImageSimple,\n}\n\nimpl Image {\n    fn new(bitmap: PixelImageSimple) -&gt; Image {\n        Image {\n            image_operations: vec![],\n            bitmap: bitmap,\n        }\n    }\n\n    fn add_op(&amp;mut self, image_ops: Box&lt;ImageOperation&gt;) {\n        self.image_operations.push(image_ops);\n    }\n\n    fn apply_ops(&amp;mut self) {\n        // iterate over the ops and automatically remove them\n        for op in self.image_operations.drain() {\n            op.execute_op(&amp;mut self.bitmap);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 71, "user_id": 5157671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3048c1f78e06a91cf8fea6d7901223ef?s=128&d=identicon&r=PG&f=1", "display_name": "bumzack", "link": "https://stackoverflow.com/users/5157671/bumzack"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5605, "favorite_count": 5, "accepted_answer_id": 31646782, "answer_count": 2, "score": 6, "last_activity_date": 1488411496, "creation_date": 1437935232, "last_edit_date": 1495540827, "question_id": 31640442, "link": "https://stackoverflow.com/questions/31640442/how-can-i-use-lifetime-bounds-to-solve-reference-must-be-valid-for-the-static-l", "title": "How can I use lifetime bounds to solve &quot;reference must be valid for the static lifetime&quot;", "body": "<p>I am a Rust beginner and I can\u2019t get the following code to compile.\nWhat I want is to store several traits in a vector and each of the traits should also have read-only access to a borrowed variable.</p>\n\n<p>I am guessing I have to use \u201eLifetime bounds\u201c - like discussed in this <a href=\"https://stackoverflow.com/questions/30768063/does-a-b-a-mean-that-the-lifetime-b-must-outlive-the-lifetime-a\">thread</a> - because if I comment out lines 60-68, the code compiles fine. </p>\n\n<p>Can somebody please explain how to use \u201elifetime bounds\u201c - if this is the way to solve the problem - or is this not the Rust way to solve the problem?  If there is a better way to achieve what I\u2019m trying to do I\u2019m glad to change my approach to the problem.</p>\n\n<p>The code which doesn\u2019t compile is here and on <a href=\"http://is.gd/Tfpal0\" rel=\"nofollow noreferrer\">rust-playground</a>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct PixelImageSimple&lt;'a&gt; {\n    pixels: &amp;'a Vec&lt;i32&gt;,\n    width: i32,\n    height: i32,\n}\n\ntrait ImageOperation&lt;'a&gt; {\n    fn execute_op(&amp;self);\n}\n\nstruct ImageOperationSharpen&lt;'a&gt; {\n    val: i32,\n    bitmapdata: &amp;'a PixelImageSimple&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; ImageOperation&lt;'a&gt; for ImageOperationSharpen&lt;'a&gt; {\n    fn execute_op(&amp;self) {\n        println!(\"ImageOperationSharpen - val = {}, width = {}, height = {}, pixels = {:?}\",\n            &amp;self.val, &amp;self.bitmapdata.width, &amp;self.bitmapdata.height,&amp;self.bitmapdata.pixels);\n    }\n}\n\nstruct ImageOperationRotate&lt;'a&gt; {\n    angle: f64,\n    bitmapdata: &amp;'a PixelImageSimple&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; ImageOperation&lt;'a&gt; for ImageOperationRotate&lt;'a&gt; {\n    fn execute_op(&amp;self) {\n        println!(\"ImageOperationRotate - angle = {}, width = {}, height = {}, pixels = {:?}\",\n            &amp;self.angle, &amp;self.bitmapdata.width, &amp;self.bitmapdata.height,&amp;self.bitmapdata.pixels);\n    }\n}\n\nstruct Image&lt;'a&gt; {\n    image_operations: Vec&lt;Box&lt;ImageOperation&lt;'a&gt;&gt;&gt;\n}\n\nimpl&lt;'a&gt; Image&lt;'a&gt; {\n    fn new() -&gt; Image&lt;'a&gt; {\n        Image { image_operations: vec![] }\n    }\n\n    fn add_op(&amp;mut self, image_ops: Box&lt;ImageOperation&lt;'a&gt;&gt;) {\n           self.image_operations.push(image_ops);\n    }\n}\n\nfn main () {\n    let bitmapdata = vec![1,2,3];\n\n    let bitmap = PixelImageSimple { pixels: &amp;bitmapdata, width: 222, height:334 };\n\n    let sharpen = ImageOperationSharpen { val: 34, bitmapdata: &amp;bitmap };\n    let rotate = ImageOperationRotate { angle: 13.32, bitmapdata: &amp;bitmap };\n\n    let box_sharpen = Box::new(sharpen);\n    let box_rotate = Box::new(rotate);\n\n    let mut image = Image::new();\n\n    image.add_op(box_sharpen);\n    image.add_op(box_rotate);\n\n    println!(\"execute_op()\");\n    for imageops in image.image_operations.iter() {\n        imageops.execute_op();\n    }\n}\n</code></pre>\n\n<p>I get 3 errors for variable 'bitmapdata' and 'bitmap' twice. \nAs I mentioned above: the code compiles fine without lines 60-68 but results in a compiler error with those lines. </p>\n\n<p>Interesting thing: the compilers hint message note: </p>\n\n<pre><code>reference must be valid for the static lifetime...\n</code></pre>\n\n<p>So the compiler wants a static lifetime? (replacing 'a with 'static in the code didn't help) </p>\n\n<pre><code>lifetime_bounds.rs:52:46: 52:56 error: `bitmapdata` does not live long enough\nlifetime_bounds.rs:52     let bitmap = PixelImageSimple { pixels: &amp;bitmapdata, width: 222, height:334 };\n                                                                   ^~~~~~~~~~\nnote: reference must be valid for the static lifetime...\nlifetime_bounds.rs:50:34: 69:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 50:33\nlifetime_bounds.rs:50     let bitmapdata = vec![1,2,3];\nlifetime_bounds.rs:51\nlifetime_bounds.rs:52     let bitmap = PixelImageSimple { pixels: &amp;bitmapdata, width: 222, height:334 };\nlifetime_bounds.rs:53\nlifetime_bounds.rs:54     let sharpen = ImageOperationSharpen { val: 34, bitmapdata: &amp;bitmap };\nlifetime_bounds.rs:55     let rotate = ImageOperationRotate { angle: 13.32, bitmapdata: &amp;bitmap };\n                      ...\n</code></pre>\n\n<p>As an alternative approach I tried a solution using a collection     </p>\n\n<pre><code>type CollectionOfImageOperations&lt;'a&gt; = Vec&lt;&amp;'a (ImageOperation&lt;'a&gt; + 'a)&gt;;\n</code></pre>\n\n<p>but this gave me compile errors which made less sense to me  than in the approach above. (It seems like I can only push one trait object to the vector - but why) - see <a href=\"http://is.gd/yhn4NE\" rel=\"nofollow noreferrer\">rust-playground</a> for the code and error.</p>\n\n<p>Any hints &amp; tips are welcome and appreciated.</p>\n"}, {"tags": ["rust", "rustdoc"], "comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437923802, "post_id": 31638263, "comment_id": 51223585, "body": "@Shepmaster so while I think these are different questions, the other answer actually did solve my issue. I think it&#39;s because my problem is that in the <code># Examples</code>, <code>extern create bignum</code> is implicit, so doing so again will create errors. I submitted an <a href=\"https://github.com/rust-lang/rust/issues/27301\" rel=\"nofollow noreferrer\">issue</a> with a recommendation on changing the error output for this type of error"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437923968, "post_id": 31638263, "comment_id": 51223664, "body": "Sure, I&#39;ll go ahead and do that"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1437924577, "post_id": 31638263, "comment_id": 51223889, "body": "Off-topic: is it possible not to remove my comments when I suggest a duplicate? It&#39;s very frustrating to author a message only to see it disappeared after a while. This is the <a href=\"http://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust\">second time</a> it happens."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1437925595, "post_id": 31638263, "comment_id": 51224233, "body": "@mdup AFAIK, if the duplicate suggestion is accepted, that comment that came from the suggestion is auto removed. My only suggestion is to split it into two comments or not use the close link if you are just suggesting."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437927533, "post_id": 31638263, "comment_id": 51224825, "body": "@Shepmaster ok, will do that next time. By the way I never used a close vote (not enough rep yet). It would be nice if the comment was restored after the question is unduplicated."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1437928188, "post_id": 31638263, "comment_id": 51225059, "body": "@mdup if you didn&#39;t use the close link to suggest the duplicate, I&#39;m surprised about the behavior. It may be worth asking a question on <a href=\"https://meta.stackoverflow.com\">Meta Stack Overflow</a>."}], "answers": [{"tags": [], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "is_accepted": false, "score": 4, "last_activity_date": 1437924471, "creation_date": 1437924471, "answer_id": 31638712, "question_id": 31638263, "link": "https://stackoverflow.com/questions/31638263/unresolved-import-in-documentation-example/31638712#31638712", "title": "Unresolved import in documentation example", "body": "<p>So the reason this error is generated boils down to <code>extern crate bignum</code> implicitly being used by the documentation examples, meaning I shouldn't need to explicitly tell the example I'll be using <code>bignum</code>.</p>\n\n<p>This makes sense because at the documentation level, examples show how the functionality of a specific part of your crate should work, so you'll be using <code>bignum</code> regardless. cargo recognizes this and imports <code>bignum</code> for you. What the example <strong>should</strong> look like is:</p>\n\n<pre><code>//lib.rs\n//...\n\nimpl BigNum {\n\n    //...\n\n\n    /// Constructs a ...\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bignum::inits::Zero;\n    ///\n    /// let a = bignum::BigNum::new(Zero::zero());\n    /// ```\n    ///\n    pub fn new(base: BigNum) -&gt; BigNum {\n        // ...\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1437926724, "post_id": 31639043, "comment_id": 51224590, "body": "ah, so that&#39;s the explanation behind <b>why</b> it doesn&#39;t work."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1437926818, "last_edit_date": 1437926818, "creation_date": 1437926574, "answer_id": 31639043, "question_id": 31638263, "link": "https://stackoverflow.com/questions/31638263/unresolved-import-in-documentation-example/31639043#31639043", "title": "Unresolved import in documentation example", "body": "<p>I think the problem stems from this <a href=\"http://doc.rust-lang.org/stable/book/documentation.html#documentation-as-tests\">useful feature of the doc tests</a>:</p>\n\n<blockquote>\n  <p>rustdoc will automatically add a <code>main()</code> wrapper around your code, and in the right place.</p>\n</blockquote>\n\n<p>If you apply the rules in the link, you end up compiling code like this:</p>\n\n<pre><code>fn main() {\n   extern crate bignum;\n   use bignum::inits::Zero;\n\n   let a = bignum::BigNum::new(Zero::zero());\n}\n</code></pre>\n\n<p>You would then indeed need to refer to it as <code>self::bignum</code>, as the first error message suggests. Unfortunately, that won't currently work because of <a href=\"https://github.com/rust-lang/rust/issues/23314\">Rust issue 23314</a>.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2176, "favorite_count": 0, "accepted_answer_id": 31639043, "answer_count": 2, "score": 11, "last_activity_date": 1437926818, "creation_date": 1437921780, "last_edit_date": 1495540866, "question_id": 31638263, "link": "https://stackoverflow.com/questions/31638263/unresolved-import-in-documentation-example", "title": "Unresolved import in documentation example", "body": "<p>I'm having difficulty fixing an error inside my documentation example for my library. I have the file structure like for my crate <code>bignum</code></p>\n\n<pre><code>.\n|-- Cargo.lock\n|-- Cargo.toml\n|-- examples\n|   |-- dat\n|   |   `-- euler_13.dat\n|   |-- debug.rs\n|   `-- euler_13.rs\n|-- README.md\n|-- src\n|   |-- error.rs\n|   |-- inits.rs\n|   `-- lib.rs\n</code></pre>\n\n<p>In my examples, my headers will look something like </p>\n\n<pre><code>// euler_13.rs \nextern crate bignum;\nuse bignum::inits::Zero;\n\n// ...\n</code></pre>\n\n<p>This compiles and works great, but now when I'm writing an example inside my documentation at <code>lib.rs</code>, I can't seem to import <code>bignum::inits::Zero</code></p>\n\n<pre><code>//lib.rs\n//...\n\nimpl BigNum {\n\n    //...\n\n\n    /// Constructs a ...\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// extern crate bignum;\n    /// use bignum::inits::Zero;\n    ///\n    /// let a = bignum::BigNum::new(Zero::zero());\n    /// ```\n    ///\n    pub fn new(base: BigNum) -&gt; BigNum {\n        // ...\n    }\n</code></pre>\n\n<p>When I run <code>cargo test</code>, I receive this error</p>\n\n<pre><code>     Running target/debug/lib-fe3dd7a75a504b04\n\nrunning 3 tests\ntest crate_from_u32 ... ok\ntest create_from_string ... ok\ntest adding_no_carry ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured\n\n   Doc-tests bignum\n\nrunning 1 test\ntest new_0 ... FAILED\n\nfailures:\n\n---- new_0 stdout ----\n    &lt;anon&gt;:3:9: 3:15 error: unresolved import `self::bignum::inits::Zero`. Did you mean `self::self::bignum::inits`?\n&lt;anon&gt;:3     use self::bignum::inits::Zero;\n                 ^~~~~~\nerror: aborting due to previous error\nthread 'new_0' panicked at 'Box&lt;Any&gt;', /home/rustbuild/src/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libsyntax/diagnostic.rs:192\n\n\n\nfailures:\n    new_0\n</code></pre>\n\n<p>I've seen <a href=\"https://stackoverflow.com/questions/31035491/error-using-local-modules-in-documentation-tests\">this</a> question, but this deals with importing modules from the same file which still require toplevel scope. However here i'm still specifying top level scope with <code>bignum::</code>.</p>\n\n<p>So while importing <code>bignum::inits::Zero</code> works for all of my tests and examples, it doesn't work for my docs. Why is that? I've tried appending <code>self::</code> in front and receive the same error. If i change the doc examples to</p>\n\n<pre><code>extern crate bignum;\n\nlet a = bignum::BigNum::new(bignum::inits::Zero::zero());\n</code></pre>\n\n<p>it compiles fine however. How can I correctly import my modules?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1524087290, "last_edit_date": 1524087290, "creation_date": 1437917797, "answer_id": 31637579, "question_id": 31637499, "link": "https://stackoverflow.com/questions/31637499/use-write-macro-with-a-string-instead-of-a-string-literal/31637579#31637579", "title": "Use write! macro with a string instead of a string literal", "body": "<p>Just use <code>write!(t, \"{}\", text)</code>.</p>\n\n<hr>\n\n<p>I think you're missing the thrust of the error message. <a href=\"https://doc.rust-lang.org/std/macro.write.html\" rel=\"nofollow noreferrer\"><code>write!</code></a> has two mandatory arguments:</p>\n\n<ol>\n<li>A location to write to.</li>\n<li>A format string.</li>\n</ol>\n\n<p>The second parameter is not just any arbitrary string, it's the format string.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27734708/155423\">println! error: expected a literal / format argument must be a string literal</a></li>\n</ul>\n"}], "owner": {"reputation": 297, "user_id": 2715675, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/da04f9c72b6f534ef57cd086ca053760?s=128&d=identicon&r=PG&f=1", "display_name": "jonadev95", "link": "https://stackoverflow.com/users/2715675/jonadev95"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1553, "favorite_count": 1, "accepted_answer_id": 31637579, "answer_count": 1, "score": 8, "last_activity_date": 1524087290, "creation_date": 1437917282, "last_edit_date": 1524087051, "question_id": 31637499, "link": "https://stackoverflow.com/questions/31637499/use-write-macro-with-a-string-instead-of-a-string-literal", "title": "Use write! macro with a string instead of a string literal", "body": "<p>I've written the following function:</p>\n\n<pre><code>fn print_error(text: &amp;str) {\n    let mut t = term::stdout().unwrap();\n    t.fg(term::color::RED).unwrap();\n    (write!(t, text)).unwrap();\n    assert!(t.reset().unwrap());\n}\n</code></pre>\n\n<p>It should take the string and print it out on the console in red.\nWhen I try to to compile, the compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: format argument must be a string literal.\n --&gt; src/main.rs:4:16\n  |\n4 |     (write!(t, text)).unwrap();\n  |                ^^^^\n</code></pre>\n\n<p>After a lot of searching, I've found out that I'm able to replace the text variable with e.g. <code>\"text\"</code> and it will work because it's a string literal, which the <code>write!</code> macro needs.</p>\n\n<p>How could I use the <code>write!</code> macro with a string instead of a string literal? Or is there a better way to colourize the terminal output?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1437866399, "post_id": 31631999, "comment_id": 51211278, "body": "This question already has an answer for this: <a href=\"http://stackoverflow.com/questions/27840394/how-can-a-rust-program-access-metadata-from-its-cargo-package\" title=\"how can a rust program access metadata from its cargo package\">stackoverflow.com/questions/27840394/&hellip;</a>"}], "owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 78, "favorite_count": 0, "closed_date": 1437866926, "answer_count": 0, "score": 1, "last_activity_date": 1437865903, "creation_date": 1437865903, "question_id": 31631999, "link": "https://stackoverflow.com/questions/31631999/how-to-get-a-crates-version-number", "closed_reason": "Duplicate", "title": "How to get a crate&#39;s version number?", "body": "<p>I have a crate with a version number declared in <code>Cargo.toml</code>. Is there any way to retrieve the version from inside the library? </p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 63, "user_id": 5156210, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9721199c818d016a559f0fd0508092d6?s=128&d=identicon&r=PG&f=1", "display_name": "Donald H", "link": "https://stackoverflow.com/users/5156210/donald-h"}, "edited": false, "score": 0, "creation_date": 1437858370, "post_id": 31631065, "comment_id": 51209435, "body": "Thank you! It never crossed my mind to use <code>mut</code> without <code>&amp;</code>. That was some serious tunnel vision on my end."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 63, "user_id": 5156210, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9721199c818d016a559f0fd0508092d6?s=128&d=identicon&r=PG&f=1", "display_name": "Donald H", "link": "https://stackoverflow.com/users/5156210/donald-h"}, "edited": false, "score": 0, "creation_date": 1437858446, "post_id": 31631065, "comment_id": 51209461, "body": "@DonaldH Yeah, the <code>mut</code> being in different places is a bit unintuitive."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437858709, "post_id": 31631065, "comment_id": 51209534, "body": "It&#39;s unintuitive until you get used to it, then it becomes intuitive again ^_^. Many people point out that the syntax mirrors that of <code>let</code> bindings / pattern bindings."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1437866663, "post_id": 31631065, "comment_id": 51211325, "body": "Note that it happens to work in this case because there is <code>impl&lt;&#39;a, R: Read + ?Sized&gt; Read for &amp;&#39;a mut R</code> (i.e. a mutable reference to a type that implements <code>Read</code> also implements <code>Read</code>). This is not necessarily the case for other traits."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 7, "last_activity_date": 1437857922, "creation_date": 1437857922, "answer_id": 31631065, "question_id": 31631038, "link": "https://stackoverflow.com/questions/31631038/unable-to-re-borrow-a-variable-because-i-cannot-borrow-immutable-local-variable/31631065#31631065", "title": "Unable to re-borrow a variable because I cannot borrow immutable local variable as mutable", "body": "<p><code>reader</code> has to be mutable in <code>consume_two_bytes</code>:</p>\n\n<pre><code>fn consume_two_bytes&lt;R&gt;(mut reader: R) where R: Read { // note the mut\n    consume_byte(&amp;mut reader);\n    consume_byte(&amp;mut reader);\n}\n</code></pre>\n"}], "owner": {"reputation": 63, "user_id": 5156210, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9721199c818d016a559f0fd0508092d6?s=128&d=identicon&r=PG&f=1", "display_name": "Donald H", "link": "https://stackoverflow.com/users/5156210/donald-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 803, "favorite_count": 0, "accepted_answer_id": 31631065, "answer_count": 1, "score": 6, "last_activity_date": 1437858390, "creation_date": 1437857723, "last_edit_date": 1437858390, "question_id": 31631038, "link": "https://stackoverflow.com/questions/31631038/unable-to-re-borrow-a-variable-because-i-cannot-borrow-immutable-local-variable", "title": "Unable to re-borrow a variable because I cannot borrow immutable local variable as mutable", "body": "<p>I'm new to Rust and have my difficulties with the borrow checker.</p>\n\n<p>Calling <code>consume_byte</code> from <code>main</code> works just fine. But if I try to add another function (<code>consume_two_bytes</code>) in between it all falls apart.</p>\n\n<p>The following code won't compile since it seems like the <code>reader</code> variable in <code>consume_two_bytes</code> is not mutable and cant be borrowed.</p>\n\n<p>Adding a <code>&amp;mut</code> in the function signature just changes the compiler error.</p>\n\n<pre><code>use std::io::Read;\nuse std::net::TcpListener;\n\nfn consume_byte&lt;R&gt;(reader: R) where R: Read {\n    let mut buffer = vec![];\n    reader.take(1).read_to_end(&amp;mut buffer).unwrap();\n}\n\nfn consume_two_bytes&lt;R&gt;(reader: R) where R: Read {\n    consume_byte(&amp;mut reader);\n    consume_byte(&amp;mut reader);\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\n    let (mut stream, _) = listener.accept().unwrap();\n\n    consume_byte(&amp;mut stream);\n    consume_byte(&amp;mut stream);\n\n    consume_two_bytes(&amp;mut stream);\n}\n</code></pre>\n"}, {"tags": ["rust", "sfml"], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1437855992, "post_id": 31630169, "comment_id": 51208768, "body": "Thanks, for fixing this I ended up removing my current installation and using <code>sudo apt-get install libsfml-dev libcsfml-dev</code> , and everything seems to work now."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1437851522, "creation_date": 1437851522, "answer_id": 31630169, "question_id": 31630064, "link": "https://stackoverflow.com/questions/31630064/rust-sfml-linking-with-cc-failed-how-to-specify-lib-include-share-path/31630169#31630169", "title": "rust-sfml linking with cc failed, how to specify lib/include/share path", "body": "<p>Each library that links against C libraries needs to support the appropriate linker parameters, including finding the library itself. It appears that there is an <a href=\"https://github.com/jeremyletang/rust-sfml/pull/66\" rel=\"nofollow\">open pull request</a> that adds support for specifying the install path to rust-sfml.</p>\n\n<p>Specifically, Cargo allows specifying a <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow\">build script</a>. The build script communicates to Cargo by printing items to standard out. Two of those values that are interesting in this case are:</p>\n\n<ul>\n<li><code>rustc-link-lib</code>\u2014 indicates that the specified value should be passed to the compiler as a <code>-l</code> flag.</li>\n<li><code>rustc-link-search</code> \u2014 indicates the specified value should be passed to the compiler as a <code>-L</code> flag.</li>\n</ul>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 443, "favorite_count": 0, "accepted_answer_id": 31630169, "answer_count": 1, "score": 0, "last_activity_date": 1437851522, "creation_date": 1437850834, "last_edit_date": 1437851354, "question_id": 31630064, "link": "https://stackoverflow.com/questions/31630064/rust-sfml-linking-with-cc-failed-how-to-specify-lib-include-share-path", "title": "rust-sfml linking with cc failed, how to specify lib/include/share path", "body": "<p>How can I specify where my libs live when building examples, or even writing new projects that use rust-sfml? I currently have both SFML and CSFML installed in <code>/usr/local/{include,lib,share}</code> as opposed to <code>/usr/{include,lib,share}</code>.</p>\n\n<p>Is there a flag in cargo I can apply that will set the include/library path accordingly? Something like <code>cargo build --lib=/usr/local/lib --include=/usr/local/include</code>. </p>\n\n<p><a href=\"https://github.com/jeremyletang/rust-sfml/issues/29\" rel=\"nofollow\">here</a> is the rust-sfml page.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1437842203, "post_id": 31628572, "comment_id": 51204772, "body": "not sure how to put this into a good answer b/c it seems to obvious to me. Unsafe traits only have a use for safe code. You mark a trait as unsafe when you want the implementor to pay additional attention when implementing the trait, because it&#39;s easy to get wrong AND any implementors are basically guaranteed to need unsafe code to implement that trait."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437842669, "post_id": 31628572, "comment_id": 51204909, "body": "@ker  <code>Send</code> and <code>Sync</code> don&#39;t even have any methods that the implementer could need <code>unsafe</code> for, nor do the methods of <code>Searcher</code> seem <code>unsafe</code>-requiring to me. And <code>unsafe</code> is <i>never</i> about &quot;easy to get wrong&quot;, only about memory safety."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437932114, "post_id": 31628572, "comment_id": 51226379, "body": "send and sync are marker traits. I don&#39;t think this question is about marker traits. unsafe is always about &quot;easy to get wrong&quot; (+ causing memory unsafety). if the implementor has to type unsafe, he knows he might be causing memory unsafety if he doesn&#39;t fully know what he&#39;s doing even if he&#39;s writing safe code. in case of unsafe functions in unsafe traits, the implementation needs to make guarantees AND the caller, in case of unsafe traits only the implementor needs to make guarantees. The confusion exists because a safe free function can&#39;t be overloaded."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437916374, "post_id": 31628759, "comment_id": 51221153, "body": "Since an unsafe trait and unsafe functions in a trait are orthogonal, can you think of any cases where you might have both?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437916650, "post_id": 31628759, "comment_id": 51221231, "body": "@Shepmaster: I can&#39;t think of a <i>practical</i> example, but it&#39;s certainly not impossible to envisage an unsafe trait where a subset of its methods have an unsafe interface.  Perhaps a marker trait (like <code>Send</code> or <code>Sync</code>) where you have unsafe code relying on the marker trait which <i>also</i> exposes a method dealing in raw pointers (which would thus be unsafe to <i>call</i>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437918313, "post_id": 31628759, "comment_id": 51221726, "body": "Ok, cool. In my particular interface I have a trait that accepts raw pointers and returns UTF-8 offsets into a string, so I think I might just qualify for double unsafety. :-)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 20, "last_activity_date": 1437842365, "creation_date": 1437842365, "answer_id": 31628759, "question_id": 31628572, "link": "https://stackoverflow.com/questions/31628572/when-is-it-appropriate-to-mark-a-trait-as-unsafe-as-opposed-to-marking-all-the/31628759#31628759", "title": "When is it appropriate to mark a trait as unsafe, as opposed to marking all the functions in the trait as unsafe?", "body": "<p>A function is marked <code>unsafe</code> to indicate that it is possible to violate memory safety by calling it.  A trait is marked <code>unsafe</code> to indicate that it is possible to violate memory safety by implementing it <em>at all</em>.  This is commonly because the trait has invariants that other unsafe code relies on being upheld, and that these invariants <em>cannot</em> be expressed any other way.</p>\n\n<p>In the case of <code>Searcher</code>, the methods themselves <em>should</em> be safe to call.  That is, <em>users</em> should not have to worry about whether or not they're using a <code>Searcher</code> correctly; the interface contract says all calls are safe.  There's nothing you can do that will cause the methods to violate memory safety.</p>\n\n<p><em>However</em>, unsafe code will be calling the methods of a <code>Searcher</code>, and such unsafe code will be <em>relying</em> on a given <code>Searcher</code> implementation to return offsets that are on valid UTF-8 code point boundaries.  If this assumption is violated, then the unsafe code could end up causing a memory safety violation itself.</p>\n\n<p>To put it another way: the correctness of unsafe code using <code>Searcher</code>s <em>depends</em> on every single <code>Searcher</code> implementation <em>also</em> being correct.  Or: implementing this trait incorrectly allows for safe code to <em>induce</em> a memory safety violation is unrelated <code>unsafe</code> code.</p>\n\n<p>So why not just mark the methods <code>unsafe</code>?  Because they <em>aren't</em> unsafe at all!  They don't <em>do</em> anything that could violate memory safety in and of themselves.  <code>next_match</code> just scans for and returns an <code>Option&lt;(usize, usize)&gt;</code>.  The danger only exists when unsafe code <em>assumes</em> that these <code>usize</code>s are valid indices into the string being searched.</p>\n\n<p>So why not just <em>check</em> the result?  Because that'd be slower.  The searching code wants to be <em>fast</em>, which means it wants to avoid redundant checks.  But those checks can't be expressed in the <code>Searcher</code> interface... so instead, the whole trait is flagged as <code>unsafe</code> to warn anyone implementing it that there are extra conditions <em>not</em> stated or enforced in the code that <em>must</em> be respected.</p>\n\n<p>There's also <code>Send</code> and <code>Sync</code>: implementing those when you shouldn't violates the expectations of (among other things) code that has to deal with threads.  The code that lets you create threads is safe, but <em>only</em> so long as <code>Send</code> and <code>Sync</code> are <em>only</em> implemented on types for which they're appropriate.</p>\n"}, {"tags": [], "owner": {"reputation": 5453, "user_id": 2198656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/kBMsL.jpg?s=128&g=1", "display_name": "Herrington Darkholme", "link": "https://stackoverflow.com/users/2198656/herrington-darkholme"}, "is_accepted": false, "score": 1, "last_activity_date": 1550630813, "creation_date": 1550630813, "answer_id": 54778079, "question_id": 31628572, "link": "https://stackoverflow.com/questions/31628572/when-is-it-appropriate-to-mark-a-trait-as-unsafe-as-opposed-to-marking-all-the/54778079#54778079", "title": "When is it appropriate to mark a trait as unsafe, as opposed to marking all the functions in the trait as unsafe?", "body": "<p>The rule of thumb will be like this:</p>\n\n<ul>\n<li><p>Use <code>unsafe fn method()</code> if the method user need to wrap method call in <code>unsafe</code> block.</p></li>\n<li><p>Use <code>unsafe trait MyTrait</code> if the trait implementor need to <code>unsafe impl MyTrait</code>.</p></li>\n</ul>\n\n<p><code>unsafe</code> is a tip to Rust user: unsafe code must be written carefully. \nThe key point is that <code>unsafe</code> should be used as dual: when an author declare a trait/function as unsafe, the implementor/user need to implement/use it with <code>unsafe</code>.</p>\n\n<p>When function is marked as <code>unsafe</code>, it means the user needs to use the function carefully. The function author is making assumption that the function user must keep. </p>\n\n<p>When trait is marked as <code>unsafe</code>, it means the trait implementor needs to implement carefully. The trait requires implementor keeps certain assumption. But users of the unsafe trait can insouciantly call methods defined in the trait.</p>\n\n<p>For concrete example, <code>unsafe trait Searcher</code> requires all <code>Searcher</code> implementation should return valid utf8 boundary when calling <code>next</code>. And all implementation are marked as <code>unsafe impl Searcher</code>, indicating implementation code might be unsafe. But as a user of <code>Searcher</code>, one can call <code>searcher.next()</code> without wrapping it in <code>unsafe</code> block.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1677, "favorite_count": 1, "accepted_answer_id": 31628759, "answer_count": 2, "score": 17, "last_activity_date": 1550630813, "creation_date": 1437841295, "last_edit_date": 1525274252, "question_id": 31628572, "link": "https://stackoverflow.com/questions/31628572/when-is-it-appropriate-to-mark-a-trait-as-unsafe-as-opposed-to-marking-all-the", "title": "When is it appropriate to mark a trait as unsafe, as opposed to marking all the functions in the trait as unsafe?", "body": "<p>Saying the same thing in code, when would I pick either of the following examples?</p>\n\n<pre><code>unsafe trait MyCoolTrait {\n    fn method(&amp;self) -&gt; u8;\n}\n\ntrait MyCoolTrait {\n    unsafe fn method(&amp;self) -&gt; u8;\n}\n</code></pre>\n\n<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\" rel=\"noreferrer\">opt-in builtin traits (OIBIT) RFC</a> states:</p>\n\n<blockquote>\n  <p>An unsafe trait is a trait that is unsafe to implement, because it represents some kind of trusted assertion. Note that unsafe traits are perfectly safe to use. <a href=\"http://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"noreferrer\"><code>Send</code></a> and <code>Share</code> (<em>note: now called <a href=\"http://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"noreferrer\"><code>Sync</code></a></em>) are examples of unsafe traits: implementing these traits is effectively an assertion that your type is safe for threading.</p>\n</blockquote>\n\n<p>There's another example of an unsafe trait in the standard library, <a href=\"http://doc.rust-lang.org/std/str/pattern/trait.Searcher.html\" rel=\"noreferrer\"><code>Searcher</code></a>. It says:</p>\n\n<blockquote>\n  <p>The trait is marked unsafe because the indices returned by the <code>next()</code> methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks.</p>\n</blockquote>\n\n<p>Unfortunately, neither of these paragraphs really help my understanding of when it is correct to mark the entire trait unsafe instead of some or all of the methods.</p>\n\n<p><a href=\"https://stackoverflow.com/q/29050360/155423\">I've asked about marking a function as unsafe</a> before, but this seems different.</p>\n"}, {"tags": ["pointers", "reference", "rust"], "comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 2, "creation_date": 1437814575, "post_id": 31624743, "comment_id": 51197405, "body": "This might interest you <a href=\"https://www.reddit.com/r/rust/comments/2umad5/the_output_of_the_index_trait_should_be_a_value/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/2umad5/&hellip;</a>"}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437815601, "post_id": 31624743, "comment_id": 51197664, "body": "@JonasTepe So if I&#39;m understanding this correctly, the reason is that we cannot specify functions which return lvalues, so we do it &quot;manually&quot; by returning a reference to an lvalue we already have?"}, {"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437816504, "post_id": 31624743, "comment_id": 51197864, "body": "You would want to return the &quot;correct&quot; l-value. Meaning the value which is owned by self (the value implementor of Deref). You wouldn&#39;t want to return some short-lived lvalue. Then you could just as well return an rvalue. And the only way to do so is returning a reference into self."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437816798, "post_id": 31624743, "comment_id": 51197921, "body": "@JonasTepe How could you <i>not</i> return the correct lvalue?"}, {"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437817604, "post_id": 31624743, "comment_id": 51198095, "body": "I just wanted to make a point why Deref needs to return a reference. As for references themselves, you can have a reference to a reference. So why wouldn&#39;t you want to dereference them. They in fact all implement Deref."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437818806, "post_id": 31624743, "comment_id": 51198422, "body": "@JonasTepe But if the goal is to <b>de</b>reference the reference, how does that make sense? Wouldn&#39;t you just receive <i>another reference</i> to the <i>same object</i> to which the original one was pointing to?"}, {"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437824031, "post_id": 31624743, "comment_id": 51199664, "body": "The Deref trait enables the &quot;*ptr&quot; operation. If it wouldn&#39;t be implemented for all references, you were not able to dereference them. The Deref trait exists, so more types (besides references) can be used with this syntax (e.g. smart pointers like Rc or Arc). It is a generalisation of the dereference operation."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437825827, "post_id": 31624743, "comment_id": 51200060, "body": "@JonasTepe Say you have a reference <code>x</code> pointing to some object <code>y</code>. You write <code>*x</code>, and <code>deref</code> gets called. All it does, is return <i>yet another reference</i> to <code>y</code>, because that&#39;s what is in its sigunature (and implementation). Can you access the object now? No. Because it&#39;s still a reference. You&#39;re back where you started. This cannot be how it&#39;s implemented for references?"}, {"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1437828111, "post_id": 31624743, "comment_id": 51200644, "body": "For normal references that is exactly what it does. They just return themselves in the implementation. However, there is a difference in how you call the deref method. Every trait in std::ops is an operator and the compiler handles those specially. Playpen: <a href=\"https://play.rust-lang.org/?gist=290cb14c2c969af338f3&amp;version=nightly\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1437829035, "post_id": 31624743, "comment_id": 51200860, "body": "@jco <code>*x</code> isn&#39;t what calls <code>deref</code>, so to speak. <code>*x</code> dereferences an <code>&amp;</code>-ptr. <code>Deref</code> allows an object that isn&#39;t a reference to <i>pretend</i> to be a reference, aka. <code>Box&lt;T&gt;</code> can act like an <code>&amp;T</code>. See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0241-deref-conversions.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437835558, "post_id": 31624743, "comment_id": 51202628, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/3ejl85/stackoverflow_why_is_the_return_type_a_reference/\" rel=\"nofollow noreferrer\">cross posted to Reddit</a>"}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 1, "creation_date": 1598419457, "post_id": 31624743, "comment_id": 112449023, "body": "This might be less confusing if the trait were called <code>AsRef</code> instead. Unfortunately we already have a trait with that name..."}], "answers": [{"tags": [], "owner": {"reputation": 2687, "user_id": 427135, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ce8fbf0c5d5e38956540354ae55b33d6?s=128&d=identicon&r=PG", "display_name": "Xirdus", "link": "https://stackoverflow.com/users/427135/xirdus"}, "is_accepted": false, "score": 5, "last_activity_date": 1516547259, "last_edit_date": 1516547259, "creation_date": 1437830240, "answer_id": 31626856, "question_id": 31624743, "link": "https://stackoverflow.com/questions/31624743/why-is-the-return-type-of-derefderef-itself-a-reference/31626856#31626856", "title": "Why is the return type of Deref::deref itself a reference?", "body": "<p>The compiler knows only how to dereference &amp;-pointers - but it also knows that types that implement <code>Deref</code> trait have a <code>deref()</code> method that can be used to get an appropriate reference to something inside given object. If you dereference an object, what you actually do is first obtain the reference and only then dereference it.</p>\n\n<p>If <code>deref()</code> returned a value, it would either be useless because it would always move out, or have semantics that drastically differ from every other function which is not nice.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1562769564, "last_edit_date": 1562769564, "creation_date": 1437831355, "answer_id": 31627018, "question_id": 31624743, "link": "https://stackoverflow.com/questions/31624743/why-is-the-return-type-of-derefderef-itself-a-reference/31627018#31627018", "title": "Why is the return type of Deref::deref itself a reference?", "body": "<blockquote>\n  <p>that references don't implement <code>Deref</code></p>\n</blockquote>\n\n<p>You can see <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\">all the types that implement <code>Deref</code></a>, and <code>&amp;T</code> is in that list:</p>\n\n<pre><code>impl&lt;'a, T&gt; Deref for &amp;'a T where T: ?Sized\n</code></pre>\n\n<p>The non-obvious thing is that there is syntactical sugar being applied when you use the <code>*</code> operator with something that implements <code>Deref</code>. Check out this small example:</p>\n\n<pre><code>use std::ops::Deref;\n\nfn main() {\n    let s: String = \"hello\".into();\n    let _: () = Deref::deref(&amp;s);\n    let _: () = *s;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:17\n  |\n5 |     let _: () = Deref::deref(&amp;s);\n  |                 ^^^^^^^^^^^^^^^^ expected (), found &amp;str\n  |\n  = note: expected type `()`\n             found type `&amp;str`\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:6:17\n  |\n6 |     let _: () = *s;\n  |                 ^^ expected (), found str\n  |\n  = note: expected type `()`\n             found type `str`\n</code></pre>\n\n<p>The explicit call to <code>deref</code> returns a <code>&amp;str</code>, but the operator <code>*</code> returns a <code>str</code>. It's more like you are calling <code>*Deref::deref(&amp;s)</code>, ignoring the implied infinite recursion.</p>\n\n<p><a href=\"https://stackoverflow.com/a/31626856/155423\">Xirdus is correct in saying</a></p>\n\n<blockquote>\n  <p>If <code>deref</code> returned a value, it would either be useless because it would always move out, or have semantics that drastically differ from every other function</p>\n</blockquote>\n\n<p>Although \"useless\" is a bit strong; it would still be useful for types that implement <code>Copy</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30566481/155423\">Why does asserting on the result of Deref::deref fail with a type mismatch?</a></li>\n</ul>\n\n<p>Note that all of the above is effectively true for <code>Index</code> and <code>IndexMut</code> as well.</p>\n"}], "owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2812, "favorite_count": 2, "accepted_answer_id": 31627018, "answer_count": 2, "score": 14, "last_activity_date": 1562769564, "creation_date": 1437814352, "last_edit_date": 1516547364, "question_id": 31624743, "link": "https://stackoverflow.com/questions/31624743/why-is-the-return-type-of-derefderef-itself-a-reference", "title": "Why is the return type of Deref::deref itself a reference?", "body": "<p>I was reading the docs for Rust's <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> trait:</p>\n\n<pre><code>pub trait Deref {\n    type Target: ?Sized;\n    fn deref(&amp;self) -&gt; &amp;Self::Target;\n}\n</code></pre>\n\n<p>The type signature for the <code>deref</code> function seems counter-intuitive to me; why is the return type a reference? If references implement this trait so they can be dereferenced, what effect would this have at all?</p>\n\n<p>The only explanation that I can come up with is that references don't implement <code>Deref</code>, but are considered \"primitively dereferenceable\". However, how would a polymorphic function which would work for <em>any</em> dereferenceable type, including both <code>Deref&lt;T&gt;</code> and <code>&amp;T</code>, be written then?</p>\n"}, {"tags": ["rust", "text-parsing", "lifetime", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1437785240, "creation_date": 1437785240, "answer_id": 31621713, "question_id": 31621567, "link": "https://stackoverflow.com/questions/31621567/textfile-parsing-function-fails-to-compile-owing-to-lifetime-borrow-error/31621713#31621713", "title": "Textfile-parsing function fails to compile owing to lifetime/borrow error", "body": "<p>A <code>&amp;str</code> cannot exist without something storing the value it contains\u2014it is purely a reference (hence the <code>&amp;</code>).</p>\n\n<p>Reading from the file you get <code>String</code>s; <em>these</em> provide the storage. But you are dropping them, trying to only return the strings.</p>\n\n<p>Think also of it this way:</p>\n\n<pre><code>pub fn parse(path: &amp;Path) -&gt; config_struct&lt;'???&gt;;\n</code></pre>\n\n<p>What lifetime should you have for the return value?</p>\n\n<p>The only reason it didn\u2019t complain of that part is that it inferred that the <code>Path</code> reference lifetime and the return value lifetime were the same, which would imply that you are returning a reference to something inside the <code>Path</code>, which you are not.</p>\n\n<p>In such a situation as this, you typically need to store <code>String</code>s instead of <code>&amp;str</code>s. Convert each <code>&amp;str</code> to a <code>String</code> with <code>.to_owned()</code>.</p>\n"}], "owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 46, "favorite_count": 0, "accepted_answer_id": 31621713, "answer_count": 1, "score": 2, "last_activity_date": 1437785240, "creation_date": 1437783670, "last_edit_date": 1495541173, "question_id": 31621567, "link": "https://stackoverflow.com/questions/31621567/textfile-parsing-function-fails-to-compile-owing-to-lifetime-borrow-error", "title": "Textfile-parsing function fails to compile owing to lifetime/borrow error", "body": "<p>NB. This post was originally part of a larger post that contained two questions (that I'd believed were one error manifesting itself differently), but to comply with site guidelines I've split it into two separate posts, of which this is the second. The first post is <a href=\"https://stackoverflow.com/questions/31620888/textfile-parsing-function-fails-to-compile-owing-to-type-mismatch-error\">here</a>.</p>\n\n<p>I'm trying to parse a simple config text file, which contains one three-word entry per line, laid out as follows:</p>\n\n<pre><code>ITEM name value\nITEM name value\n//etc.\n</code></pre>\n\n<p>I've reproduced the function which does the parsing (and the subsequent compilation error) here (and <a href=\"https://play.rust-lang.org/?gist=b07ddb3f7a156866188b&amp;version=stable\" rel=\"nofollow noreferrer\">on the Rust playground</a>):</p>\n\n<pre><code>use std::fs::File;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::path::Path;\nuse std::collections::HashMap;\n\nfn main() { }\n\npub fn parse(path: &amp;Path) -&gt; config_struct {\n\n    let file = File::open(&amp;path).unwrap();\n    let reader = BufReader::new(&amp;file);\n    let line_iterator = reader.lines();\n    let mut connection_map = HashMap::new();\n    let mut target_map = HashMap::new();\n\n    for line in line_iterator {\n\n        let line_slice = line.unwrap();\n        let word_vector: Vec&lt;&amp;str&gt; = line_slice.split_whitespace().collect();\n\n        if word_vector.len() != 3 { continue; }\n\n        // no match statement   \n        connection_map.insert(word_vector[1], word_vector[2]);\n    }\n\n    config_struct { connections: connection_map, targets: target_map }\n}\n\npub struct config_struct&lt;'a&gt;  {\n    // &lt;name, value&gt;\n    connections: HashMap&lt;&amp;'a str, &amp;'a str&gt;,\n    // &lt;name, value&gt;\n    targets: HashMap&lt;&amp;'a str, &amp;'a str&gt;,\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:20:38: 20:48 error: `line_slice` does not live long enough\n&lt;anon&gt;:20         let word_vector: Vec&lt;&amp;str&gt; = line_slice.split_whitespace().collect();\n                                               ^~~~~~~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:17:5: 26:6 note: expansion site\n&lt;anon&gt;:9:44: 29:2 note: reference must be valid for the anonymous lifetime #1 defined on the block at 9:43...\n&lt;anon&gt;:9 pub fn parse(path: &amp;Path) -&gt; config_struct {\n&lt;anon&gt;:10 \n&lt;anon&gt;:11     let file = File::open(&amp;path).unwrap();\n&lt;anon&gt;:12     let reader = BufReader::new(&amp;file);\n&lt;anon&gt;:13     let line_iterator = reader.lines();\n&lt;anon&gt;:14     let mut connection_map = HashMap::new();\n          ...\n&lt;anon&gt;:19:40: 26:6 note: ...but borrowed value is only valid for the block suffix following statement 0 at 19:39\n&lt;anon&gt;:19         let line_slice = line.unwrap();\n&lt;anon&gt;:20         let word_vector: Vec&lt;&amp;str&gt; = line_slice.split_whitespace().collect();\n&lt;anon&gt;:21 \n&lt;anon&gt;:22         if word_vector.len() != 3 { continue; }\n&lt;anon&gt;:23 \n&lt;anon&gt;:24         // no match statement   \n          ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>In essence, I am having trouble with the borrow-checker; in my code, isn't <code>word_vector</code> populated with owned objects that don't point to <code>line_slice</code>?  I figured that perhaps <code>unwrap()</code> or <code>collect()</code> returned a reference and that it was the reference that was going out of scope, but the Rust Docs for <a href=\"http://doc.rust-lang.org/stable/core/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\">unwrap</a> and <a href=\"http://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\">collect</a> suggest otherwise.</p>\n"}, {"tags": ["rust", "text-parsing", "lifetime", "type-mismatch", "borrow-checker"], "comments": [{"owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437780866, "post_id": 31620888, "comment_id": 51191601, "body": "@Shepmaster Ah, sorry. Thanks for the advice - and for the links. Can&#39;t seem to create an example that executes on the Rust Playpen (it&#39;s virtualising File I/O, isn&#39;t it?), but have managed to produce the two compilation errors nevertheless, <a href=\"https://play.rust-lang.org/?gist=871c08ed1a38630130d1&amp;version=stable\" rel=\"nofollow noreferrer\">here</a> and <a href=\"https://play.rust-lang.org/?gist=b07ddb3f7a156866188b&amp;version=stable\" rel=\"nofollow noreferrer\">here</a>; do you think I should try to split my original into two separate posts for the sake of future readers, or leave it as it is now that it has already been answered?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437781125, "post_id": 31620888, "comment_id": 51191656, "body": "<i>it&#39;s virtualising File I/O, isn&#39;t it?</i> - I don&#39;t think it&#39;s virtualized, but it is running in a sandbox. You can easily open <code>&#47;etc&#47;hosts</code> for example."}], "answers": [{"comments": [{"owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "edited": false, "score": 0, "creation_date": 1437784200, "post_id": 31621191, "comment_id": 51192191, "body": "Thanks very much - really helpful explanations! I&#39;ve split the question into two parts though, as @Shepmaster advised; don&#39;t suppose you&#39;d care to move the latter part of your answer over to the new question, <a href=\"http://stackoverflow.com/questions/31621567/textfile-parsing-function-fails-to-compile-owing-to-lifetime-borrow-error\">here</a>?"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 4, "last_activity_date": 1437779994, "creation_date": 1437779994, "answer_id": 31621191, "question_id": 31620888, "link": "https://stackoverflow.com/questions/31620888/textfile-parsing-function-fails-to-compile-owing-to-type-mismatch-error/31621191#31621191", "title": "Textfile-parsing function fails to compile owing to type-mismatch error", "body": "<p>Your original problem is just that you have a non-<code>()</code> expression at the end of your loop body. Your <code>match</code> expression has type <code>Option&lt;&amp;str&gt;</code> (because that is the return type of <code>HashMap::insert</code>), not type <code>()</code>. This problem is solved by simply putting a semicolon after the match expression:</p>\n\n<pre><code>match word_vector[0] {\n    \"CONNECTION\" =&gt; connection_map.insert(word_vector[1], word_vector[2]),\n    \"TARGET\" =&gt; target_map.insert(word_vector[1], word_vector[2]),\n    _ =&gt; continue,\n};\n</code></pre>\n\n<blockquote>\n  <p>For the latter, isn't word_vector populated with owned objects that don't point to line_slice?</p>\n</blockquote>\n\n<p>No, which is precisely the issue. <code>word_vector</code> contains elements of type <code>&amp;str</code>, i.e. borrowed strings. These point into <code>line_slice</code>, which only lives until the end of the current loop iteration. You probably want to convert them to <code>String</code>s (using <code>String::from</code>) before inserting them into the map.</p>\n"}], "owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 44, "favorite_count": 0, "accepted_answer_id": 31621191, "answer_count": 1, "score": 2, "last_activity_date": 1437784945, "creation_date": 1437777926, "last_edit_date": 1495542612, "question_id": 31620888, "link": "https://stackoverflow.com/questions/31620888/textfile-parsing-function-fails-to-compile-owing-to-type-mismatch-error", "title": "Textfile-parsing function fails to compile owing to type-mismatch error", "body": "<p>I'm trying to parse a simple config text file, which contains one three-word entry per line, laid out as follows:</p>\n\n<pre><code>ITEM name value\nITEM name value\n//etc.\n</code></pre>\n\n<p>I've reproduced the function which does the parsing (and the subsequent compilation error) here (and <a href=\"https://play.rust-lang.org/?gist=871c08ed1a38630130d1&amp;version=stable\" rel=\"nofollow noreferrer\">on the Rust Playpen</a>):</p>\n\n<pre><code>pub fn parse(path: &amp;Path) -&gt; config_struct {\n\n    let file = File::open(&amp;path).unwrap();\n    let reader = BufReader::new(&amp;file);\n    let line_iterator = reader.lines();\n    let mut connection_map = HashMap::new();\n    let mut target_map = HashMap::new();\n\n    for line in line_iterator {\n\n        let line_slice = line.unwrap();\n        let word_vector: Vec&lt;&amp;str&gt; = line_slice.split_whitespace().collect();\n\n        if word_vector.len() != 3 { continue; }\n\n        match word_vector[0] {\n            \"CONNECTION\" =&gt; connection_map.insert(word_vector[1], word_vector[2]),\n            \"TARGET\" =&gt; target_map.insert(word_vector[1], word_vector[2]),\n            _ =&gt; continue,\n        }\n    }\n\n    config_struct { connections: connection_map, targets: target_map }\n}\n\npub struct config_struct&lt;'a&gt;  {\n    // &lt;name, value&gt;\n    connections: HashMap&lt;&amp;'a str, &amp;'a str&gt;,\n    // &lt;name, value&gt;\n    targets: HashMap&lt;&amp;'a str, &amp;'a str&gt;,\n}\n\n\nsrc/parse_conf_file.rs:23:3: 27:4 error: mismatched types:\n expected `()`,\n    found `core::option::Option&lt;&amp;str&gt;`\n(expected (),\n    found enum `core::option::Option`) [E0308]\nsrc/parse_conf_file.rs:23 match word_vector[0] {\nsrc/parse_conf_file.rs:24   \"CONNECTION\" =&gt; connection_map.insert(word_vector[1], word_vector[2]),\nsrc/parse_conf_file.rs:25   \"TARGET\" =&gt; target_map.insert(word_vector[1], word_vector[2]),\nsrc/parse_conf_file.rs:26   _ =&gt; continue,\nsrc/parse_conf_file.rs:27 }\n</code></pre>\n\n<p>In essence, I seem to have created a <code>match</code> statement that expects an empty tuple, and also finds the contents of a <code>Vec&lt;&amp;str&gt;</code> to be wrapped in an <code>Option</code>!</p>\n\n<p>NB. This post originally contained two questions (that I'd believed were one error manifesting itself differently), but as-per advice in the comments I've split it into two separate posts. The latter post is <a href=\"https://stackoverflow.com/questions/31621567/textfile-parsing-function-fails-to-compile-owing-to-lifetime-borrow-error\">here</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1437750828, "creation_date": 1437750828, "answer_id": 31614100, "question_id": 31612895, "link": "https://stackoverflow.com/questions/31612895/how-to-convert-vectormutex-to-vectormutex/31614100#31614100", "title": "How to convert &amp;Vector&lt;Mutex&gt; to Vector&lt;Mutex&gt;", "body": "<p>The error message actually explains a lot here. When you call <code>to_vec</code> on a <code>&amp;Vec&lt;_&gt;</code>, you have to make a <em>clone</em> of the entire vector. That's because <code>Vec</code> owns the data, while a reference does not. In order to clone a vector, you also have to clone all of the contents. This is because the vector owns all the items inside of it.</p>\n\n<p>However, your vector contains a <code>Mutex</code>, which is not able to be cloned. A mutex represents unique access to some data, so having two separate mutexes to the same data would be pointless.</p>\n\n<p>Instead, you probably want to share references to the mutex, not clone it completely. Chances are, you want an <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\"><code>Arc</code></a>:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nfn main() {\n    let things = vec![Arc::new(Mutex::new(()))];\n    things.to_vec();\n}\n</code></pre>\n"}], "owner": {"reputation": 2963, "user_id": 1528246, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/f76f3e46a94eb011d85d14bf54425950?s=128&d=identicon&r=PG", "display_name": "rogergl", "link": "https://stackoverflow.com/users/1528246/rogergl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "accepted_answer_id": 31614100, "answer_count": 1, "score": 3, "last_activity_date": 1437750828, "creation_date": 1437747426, "last_edit_date": 1437750485, "question_id": 31612895, "link": "https://stackoverflow.com/questions/31612895/how-to-convert-vectormutex-to-vectormutex", "title": "How to convert &amp;Vector&lt;Mutex&gt; to Vector&lt;Mutex&gt;", "body": "<p>I'm working my way trough the Rust examples. There is this piece of code:</p>\n\n<pre><code>fn new(name: &amp;str, left: usize, right: usize) -&gt; Philosopher {\n    Philosopher {\n        name: name.to_string(),\n        left: left,\n        right: right,\n    }\n}\n</code></pre>\n\n<p>what is the best way to adapt this to a vector ? This works:</p>\n\n<pre><code> fn new(v: Vec&lt;Mutex&lt;()&gt;&gt;) -&gt; Table {\n    Table {\n       forks: v\n    }\n }\n</code></pre>\n\n<p>Than I tried the following:</p>\n\n<pre><code>fn new(v: &amp;Vec&lt;Mutex&lt;()&gt;&gt;) -&gt; Table {\n     Table {\n         forks: v.to_vec()\n     }\n }\n</code></pre>\n\n<p>But that gives me:</p>\n\n<pre><code>the trait `core::clone::Clone` is not implemented \nfor the type    `std::sync::mutex::Mutex&lt;()&gt;` \n</code></pre>\n\n<p>Which make sense. But what must I do If I want to pass a reference to Table and do not want to store a reference inside the Table struct ?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 1, "creation_date": 1437748933, "post_id": 31611318, "comment_id": 51176407, "body": "I believe that <a href=\"https://github.com/rust-lang/rust/issues/23086\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/23086</a> (under the header &quot;Hazards arising more specifically from negative reasoning&quot;) answers your first question, but I&#39;m afraid I can&#39;t think of a good solution."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1437750497, "post_id": 31611318, "comment_id": 51177506, "body": "Ouch. Yes, this appears to be the issue. So I guess the correct solution is to either implement this for every single type or wait until the developers either implement specialization or negative trait bounds."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1437753322, "creation_date": 1437753322, "answer_id": 31614901, "question_id": 31611318, "link": "https://stackoverflow.com/questions/31611318/non-overlapping-implementations-trip-coherence-rule/31614901#31614901", "title": "Non-overlapping implementations trip coherence rule?", "body": "<blockquote>\n  <p>Now, neither f32 nor f64 implement Eq, so I would have thought the impls be strictly non-overlapping. </p>\n</blockquote>\n\n<p>The problem stems from the fact that you don't control the types <code>f32</code> or <code>f64</code>. The implementors of those types (in this case, the language itself), could choose to implement <code>Eq</code> for those types <em>in the future</em>.</p>\n\n<p>If that were to happen, then your code would just suddenly start failing when you updated the crate the types came from (or the language, in this case). In order to prevent that, Rust disallows this construct. To my knowledge, there is no workaround.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 31614901, "answer_count": 1, "score": 4, "last_activity_date": 1437753322, "creation_date": 1437743145, "last_edit_date": 1437743855, "question_id": 31611318, "link": "https://stackoverflow.com/questions/31611318/non-overlapping-implementations-trip-coherence-rule", "title": "Non-overlapping implementations trip coherence rule?", "body": "<p>In my <a href=\"https://crates.io/crates/optional\" rel=\"nofollow\">optional</a> crate, I wanted to implement <code>Eq</code> for all pre-declared types, and allow users to opt in, too, by having their types declare <code>Eq</code>. So I wrote:</p>\n\n<pre><code>impl&lt;T: Noned + Copy + Eq + PartialEq&gt; Eq for Optioned&lt;T&gt; {}\nimpl Eq for Optioned&lt;f32&gt; {}\nimpl Eq for Optioned&lt;f64&gt; {}\n</code></pre>\n\n<p>However, rustc complains with <code>E0119</code>, stating that I've run afoul of the coherence rules.</p>\n\n<p>My <code>Optioned&lt;T&gt;</code> is defined as <code>pub struct Optioned&lt;T: Noned + Copy&gt; { value: T }</code>. The <code>Noned</code> trait is pre-defined for all number primitives.</p>\n\n<p>Now, neither <code>f32</code> nor <code>f64</code> implement <code>Eq</code>, so I would have thought the impls be strictly non-overlapping. Can someone</p>\n\n<ul>\n<li>explain <em>why</em> the coherence rules trip me up and</li>\n<li>tell me how to change my code to make it work anyway?</li>\n</ul>\n"}, {"tags": ["reference", "rust", "static-analysis", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437776447, "post_id": 31609137, "comment_id": 51190344, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/3efmw7/stackoverflow_why_are_explicit_lifetimes_needed/\" rel=\"nofollow noreferrer\">cross posted to Reddit</a>"}, {"owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "edited": false, "score": 2, "creation_date": 1511110824, "post_id": 31609137, "comment_id": 81711127, "body": "For future readers of this question, please note it links to the first edition of the book and there&#39;s now a <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html\" rel=\"nofollow noreferrer\">second edition</a> :)"}], "answers": [{"comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 3, "creation_date": 1437739125, "post_id": 31609884, "comment_id": 51169520, "body": "Can you explain why they are very different?"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 1, "creation_date": 1437740833, "post_id": 31609884, "comment_id": 51170596, "body": "@A.B. The second requires that both references share the same lifetime. This means refpair.1 cannot live longer than refpair.2 and vice versa \u2013 so both refs need to point to something with the same owner. The first however only requires that the RefPair outlives both its parts."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 2, "creation_date": 1437741596, "post_id": 31609884, "comment_id": 51171084, "body": "@A.B., it compiles because both lifetimes are unified - because local lifetimes are smaller that <code>&#39;static</code>, <code>&#39;static</code> can be used everywhere where local lifetimes can be used, therefore in your example <code>p</code> will have its lifetime parameter inferred as the local lifetime of <code>y</code>."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 6, "creation_date": 1437741600, "post_id": 31609884, "comment_id": 51171087, "body": "@A.B. <code>RefPair&lt;&#39;a&gt;(&amp;&#39;a u32, &amp;&#39;a u32)</code> means that <code>&#39;a</code> will be the intersection of the both input lifetimes, i.e. in this case the lifetime of <code>y</code>."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1473797840, "post_id": 31609884, "comment_id": 66275858, "body": "@llogiq &quot;requires that the RefPair outlives both its parts&quot;? I though it was the opposite... a &amp;u32 can still make sense without the RefPair, while a RefPair with its refs dead would be strange."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1473799034, "post_id": 31609884, "comment_id": 66276398, "body": "@llogiq This would be an example: <a href=\"https://gist.github.com/kindlychung/0641fd3a380768fe47a515a0f9541815\" rel=\"nofollow noreferrer\">gist.github.com/kindlychung/0641fd3a380768fe47a515a0f9541815</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 9, "last_activity_date": 1518305178, "last_edit_date": 1518305178, "creation_date": 1437738694, "answer_id": 31609884, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31609884#31609884", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>Note that there are no explicit lifetimes in that piece of code, except the structure definition. The compiler is perfectly able to infer lifetimes in <code>main()</code>.</p>\n\n<p>In type definitions, however, explicit lifetimes are unavoidable. For example, there is an ambiguity here:</p>\n\n<pre><code>struct RefPair(&amp;u32, &amp;u32);\n</code></pre>\n\n<p>Should these be different lifetimes or should they be the same? It does matter from the usage perspective, <code>struct RefPair&lt;'a, 'b&gt;(&amp;'a u32, &amp;'b u32)</code> is very different from <code>struct RefPair&lt;'a&gt;(&amp;'a u32, &amp;'a u32)</code>. </p>\n\n<p>Now, for simple cases, like the one you provided, the compiler <em>could</em> theoretically <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">elide lifetimes</a> like it does in other places, but such cases are very limited and do not worth extra complexity in the compiler, and this gain in clarity would be at the very least questionable.</p>\n"}, {"comments": [{"owner": {"reputation": 3484, "user_id": 796919, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/639520c5cc3265d60692c09ba796beb2?s=128&d=identicon&r=PG", "display_name": "towry", "link": "https://stackoverflow.com/users/796919/towry"}, "edited": false, "score": 0, "creation_date": 1606293788, "post_id": 31609892, "comment_id": 114917847, "body": "The compiler do not run the function and do not know which (x or y) is returned so compiler can not figure out the lifetime of the returned value."}, {"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "reply_to_user": {"reputation": 3484, "user_id": 796919, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/639520c5cc3265d60692c09ba796beb2?s=128&d=identicon&r=PG", "display_name": "towry", "link": "https://stackoverflow.com/users/796919/towry"}, "edited": false, "score": 1, "creation_date": 1617545318, "post_id": 31609892, "comment_id": 118329179, "body": "@towry Borrow checker does branch based program analysis, so it does know the lifetime of returned value. And it will raise a compile error if function signature doesn&#39;t match with the returned lifetime."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 105, "last_activity_date": 1518304470, "last_edit_date": 1518304470, "creation_date": 1437738739, "answer_id": 31609892, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31609892#31609892", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>Let's have a look at the following example.</p>\n\n<pre><code>fn foo&lt;'a, 'b&gt;(x: &amp;'a u32, y: &amp;'b u32) -&gt; &amp;'a u32 {\n    x\n}\n\nfn main() {\n    let x = 12;\n    let z: &amp;u32 = {\n        let y = 42;\n        foo(&amp;x, &amp;y)\n    };\n}\n</code></pre>\n\n<p>Here, the explicit lifetimes are important. This compiles because the result of <code>foo</code> has the same lifetime as its first argument (<code>'a</code>), so it may outlive its second argument. This is expressed by the lifetime names in the signature of <code>foo</code>. If you switched the arguments in the call to <code>foo</code> the compiler would complain that <code>y</code> does not live long enough:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `y` does not live long enough\n  --&gt; src/main.rs:10:5\n   |\n9  |         foo(&amp;y, &amp;x)\n   |              - borrow occurs here\n10 |     };\n   |     ^ `y` dropped here while still borrowed\n11 | }\n   | - borrowed value needs to live until here\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 6344, "user_id": 1084684, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/32b10232489646c1940c202e91f475b9?s=128&d=identicon&r=PG", "display_name": "dstromberg", "link": "https://stackoverflow.com/users/1084684/dstromberg"}, "edited": false, "score": 0, "creation_date": 1534394541, "post_id": 31609943, "comment_id": 90690920, "body": "IINM, inferring the lifetime of the return type of a two-argument function will be equivalent to the halting problem - IOW, not decidable in a finite amount of time."}, {"owner": {"reputation": 29178, "user_id": 206720, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/394087ac877df47e3b54f03fe97df063?s=128&d=identicon&r=PG", "display_name": "Ondrej Slint&#225;k", "link": "https://stackoverflow.com/users/206720/ondrej-slint%c3%a1k"}, "edited": false, "score": 0, "creation_date": 1599495309, "post_id": 31609943, "comment_id": 112785699, "body": "&quot;The compiler cannot easily infer the lifetime in a function with multiple arguments.&quot; - Unless the first argument is <code>&amp;self</code> or <code>&amp;mut self</code> - then lifetime of this reference is assigned to all elided output lifetimes."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 6, "last_activity_date": 1518304702, "last_edit_date": 1518304702, "creation_date": 1437738914, "answer_id": 31609943, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31609943#31609943", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>The case from the book is very simple by design. The topic of lifetimes is deemed complex.</p>\n\n<p>The compiler cannot easily infer the lifetime in a function with multiple arguments. </p>\n\n<p>Also, my own <a href=\"https://github.com/llogiq/optional\" rel=\"nofollow noreferrer\">optional</a> crate has an <code>OptionBool</code> type with an <code>as_slice</code> method whose signature actually is:</p>\n\n<pre><code>fn as_slice(&amp;self) -&gt; &amp;'static [bool] { ... }\n</code></pre>\n\n<p>There is absolutely no way the compiler could have figured that one out.</p>\n"}, {"comments": [{"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 1, "creation_date": 1437747397, "post_id": 31612025, "comment_id": 51175298, "body": "<i>&quot;As I understand it, Haskell has this problem when you rely on type inference for top-level functions.&quot;</i> - Very interesting. I have some understanding of Haskell, could you provide an example?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 21, "creation_date": 1437747988, "post_id": 31612025, "comment_id": 51175743, "body": "@jco Imagine you have some top-level function <code>f x = x + 1</code> without a type signature that you&#39;re using in another module. If you later change the definition to <code>f x = sqrt $ x + 1</code>, its type changes from <code>Num a =&gt; a -&gt; a</code> to <code>Floating a =&gt; a -&gt; a</code>, which will cause type errors at all the call sites where <code>f</code> is called with e.g. an <code>Int</code> argument. Having a type signature ensures that errors occur locally."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 12, "creation_date": 1437749105, "post_id": 31612025, "comment_id": 51176535, "body": "<i>&quot;Scopes are lifetimes, essentially. A bit more clearly, a lifetime &#39;a is a generic lifetime parameter that can be specialized with a specific scope at call time. &quot;</i> Wow that&#39;s a really great, illuminating point. I&#39;d like it if it was included in the book this explicitly."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1437749205, "post_id": 31612025, "comment_id": 51176606, "body": "@fjh Thanks. Just to see if I grok it -- the point is that if the type was explicitly stated before adding <code>sqrt $</code>, only a local error would have occurred after the change, and not a lot of errors in other places (which is much better if we didn&#39;t want to change the actual type)?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 5, "creation_date": 1437749673, "post_id": 31612025, "comment_id": 51176939, "body": "@jco Exactly. Not specifying a type means that you can accidentally change the interface of a function. That&#39;s one of the reasons that it is strongly encouraged to annotate all top-level items in Haskell."}, {"owner": {"reputation": 2642, "user_id": 3034482, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/62QDU.jpg?s=128&g=1", "display_name": "MichaelMoser", "link": "https://stackoverflow.com/users/3034482/michaelmoser"}, "edited": false, "score": 5, "creation_date": 1461490798, "post_id": 31612025, "comment_id": 61214611, "body": "Also if a function receives two references and returns a reference then it might sometimes return the first reference and sometimes the second one. In this case it is impossible to infer a lifetime for the returned reference. Explicit lifetimes help to avoid/clarify such a situation."}, {"owner": {"reputation": 9895, "user_id": 452775, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/88963e7cc58eabf150447e7b78a24793?s=128&d=identicon&r=PG", "display_name": "Lii", "link": "https://stackoverflow.com/users/452775/lii"}, "edited": false, "score": 2, "creation_date": 1502450611, "post_id": 31612025, "comment_id": 78226929, "body": "About this sentence: &quot;<i>The main reason is that while the compiler can see what your code does, it doesn&#39;t know what your intent was.</i>&quot; I&#39;d like to add that the following is another &quot;main reason&quot;: It is much easier for the compiler to check that a set of user provided lifetime annotations are correct than it is for it to independently derived the lifetimes that make some code work. The latter problem might be completely impossible in many important cases, if the code is more complex than the simple example in the question."}, {"owner": {"reputation": 3484, "user_id": 796919, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/639520c5cc3265d60692c09ba796beb2?s=128&d=identicon&r=PG", "display_name": "towry", "link": "https://stackoverflow.com/users/796919/towry"}, "edited": false, "score": 0, "creation_date": 1616666786, "post_id": 31612025, "comment_id": 118076329, "body": "\u201cThe main reason is that while the compiler can see what your code does, it doesn&#39;t know what your intent was.\u201d What is this mean?..."}, {"owner": {"reputation": 3484, "user_id": 796919, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/639520c5cc3265d60692c09ba796beb2?s=128&d=identicon&r=PG", "display_name": "towry", "link": "https://stackoverflow.com/users/796919/towry"}, "edited": false, "score": 0, "creation_date": 1616666908, "post_id": 31612025, "comment_id": 118076397, "body": "&quot;then an innocent-looking change might affect the lifetimes, which could then cause errors in a function far away.&quot; is there an example?"}, {"owner": {"reputation": 3484, "user_id": 796919, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/639520c5cc3265d60692c09ba796beb2?s=128&d=identicon&r=PG", "display_name": "towry", "link": "https://stackoverflow.com/users/796919/towry"}, "edited": false, "score": 0, "creation_date": 1616667271, "post_id": 31612025, "comment_id": 118076548, "body": "&quot;As I understand it, Haskell has this problem when you rely on type inference for top-level functions. Rust nipped that particular problem in the bud.&quot; This make it more confusing as beginners like me do not know Haskell. So this is helpless to the answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 229, "last_activity_date": 1518301366, "last_edit_date": 1518301366, "creation_date": 1437745079, "answer_id": 31612025, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31612025#31612025", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>The other answers all have salient points (<a href=\"https://stackoverflow.com/a/31609892/924313\">fjh's concrete example where an explicit lifetime is needed</a>), but are missing one key thing: why are explicit lifetimes needed when <em>the compiler will tell you you've got them wrong</em>?</p>\n\n<p>This is actually the same question as \"why are explicit types needed when the compiler can infer them\". A hypothetical example:</p>\n\n<pre><code>fn foo() -&gt; _ {  \n    \"\"\n}\n</code></pre>\n\n<p>Of course, the compiler can see that I'm returning a <code>&amp;'static str</code>, so why does the programmer have to type it?</p>\n\n<p>The main reason is that while the compiler can see what your code does, it doesn't know what your intent was.</p>\n\n<p>Functions are a natural boundary to firewall the effects of changing code. If we were to allow lifetimes to be completely inspected from the code, then an innocent-looking change might affect the lifetimes, which could then cause errors in a function far away. This isn't a hypothetical example. As I understand it, Haskell has this problem when you rely on type inference for top-level functions. Rust nipped that particular problem in the bud. </p>\n\n<p>There is also an efficiency benefit to the compiler \u2014 only function signatures need to be parsed in order to verify types and lifetimes. More importantly, it has an efficiency benefit for the programmer. If we didn't have explicit lifetimes, what does this function do:</p>\n\n<pre><code>fn foo(a: &amp;u8, b: &amp;u8) -&gt; &amp;u8\n</code></pre>\n\n<p>It's impossible to tell without inspecting the source, which would go against a huge number of coding best practices.</p>\n\n<blockquote>\n  <p>by inferring an illegal assignment of a reference to a wider scope</p>\n</blockquote>\n\n<p>Scopes <em>are</em> lifetimes, essentially. A bit more clearly, a lifetime <code>'a</code> is a <em>generic lifetime parameter</em> that can be specialized with a specific scope at compile time, based on the call site. </p>\n\n<blockquote>\n  <p>are explicit lifetimes actually needed to prevent [...] errors?</p>\n</blockquote>\n\n<p>Not at all. <em>Lifetimes</em> are needed to prevent errors, but explicit lifetimes are needed to protect what little sanity programmers have.</p>\n"}, {"tags": [], "owner": {"reputation": 211, "user_id": 3151599, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f51b323c47996e3e4a3f0d4322cf4949?s=128&d=identicon&r=PG&f=1", "display_name": "user3151599", "link": "https://stackoverflow.com/users/3151599/user3151599"}, "is_accepted": false, "score": 21, "last_activity_date": 1530110951, "last_edit_date": 1530110951, "creation_date": 1437821251, "answer_id": 31625653, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31625653#31625653", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>The lifetime annotation in the following structure:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n</code></pre>\n\n<p>specifies that a <code>Foo</code> instance shouldn't outlive the reference it contains (<code>x</code> field).</p>\n\n<p>The example you came across in the Rust book doesn't illustrate this because <code>f</code> and <code>y</code> variables go out of scope at the same time.</p>\n\n<p>A better example would be this:</p>\n\n<pre><code>fn main() {\n    let f : Foo;\n    {\n        let n = 5;  // variable that is invalid outside this block\n        let y = &amp;n;\n        f = Foo { x: y };\n    };\n    println!(\"{}\", f.x);\n}\n</code></pre>\n\n<p>Now, <code>f</code> really outlives the variable pointed to by <code>f.x</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "is_accepted": false, "score": 4, "last_activity_date": 1438544460, "creation_date": 1438544460, "answer_id": 31775867, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/31775867#31775867", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>I've found another great explanation here: <a href=\"http://doc.rust-lang.org/0.12.0/guide-lifetimes.html#returning-references\" rel=\"nofollow\">http://doc.rust-lang.org/0.12.0/guide-lifetimes.html#returning-references</a>.</p>\n\n<blockquote>\n  <p>In general, it is only possible to return references if they are\n  derived from a parameter to the procedure. In that case, the pointer\n  result will always have the same lifetime as one of the parameters;\n  named lifetimes indicate which parameter that is.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 2642, "user_id": 3034482, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/62QDU.jpg?s=128&g=1", "display_name": "MichaelMoser", "link": "https://stackoverflow.com/users/3034482/michaelmoser"}, "is_accepted": false, "score": 5, "last_activity_date": 1518304221, "last_edit_date": 1518304221, "creation_date": 1461499193, "answer_id": 36822815, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/36822815#36822815", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>If a function receives two references as arguments and returns a reference, then the implementation of the function might sometimes return the first reference and sometimes the second one. It is impossible to predict which reference will be returned for a given call. In this case, it is impossible to infer a lifetime for the returned reference, since each argument reference may refer to a different variable binding with a different lifetime. Explicit lifetimes help to avoid or clarify such a situation.</p>\n\n<p>Likewise, if a structure holds two references (as two member fields) then a member function of the structure may sometimes return the first reference and sometimes the second one. Again explicit lifetimes prevent such ambiguities.</p>\n\n<p>In a few simple situations, there is <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\"><em>lifetime elision</em></a> where the compiler can infer lifetimes.</p>\n"}, {"tags": [], "owner": {"reputation": 581, "user_id": 4615851, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/339e86a6b90c32c90c5133555b849b21?s=128&d=identicon&r=PG&f=1", "display_name": "Klas. S", "link": "https://stackoverflow.com/users/4615851/klas-s"}, "is_accepted": false, "score": 1, "last_activity_date": 1527544270, "creation_date": 1527544270, "answer_id": 50573772, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/50573772#50573772", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>The reason why your example does not work is simply because Rust only has local lifetime and type inference. What you are suggesting demands global inference. Whenever you have a reference whose lifetime cannot be elided, it must be annotated.</p>\n"}, {"tags": [], "owner": {"reputation": 121, "user_id": 7599943, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/67b59779d004132691ef87b6d9e9d85d?s=128&d=identicon&r=PG&f=1", "display_name": "Jonas Dahlb&#230;k", "link": "https://stackoverflow.com/users/7599943/jonas-dahlb%c3%a6k"}, "is_accepted": false, "score": 1, "last_activity_date": 1533993375, "last_edit_date": 1533993375, "creation_date": 1533912869, "answer_id": 51789149, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/51789149#51789149", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>As a newcomer to Rust, my understanding is that explicit lifetimes serve two purposes.</p>\n\n<ol>\n<li><p>Putting an explicit lifetime annotation on a function restricts the type of code that may appear inside that function. Explicit lifetimes allow the compiler to ensure that your program is doing what you intended.</p></li>\n<li><p>If you (the compiler) want(s) to check if a piece of code is valid, you (the compiler) will not have to iteratively look inside every function called. It suffices to have a look at the annotations of functions that are directly called by that piece of code. This makes your program much easier to reason about for you (the compiler), and makes compile times managable.</p></li>\n</ol>\n\n<p>On point 1., Consider the following program written in Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import pandas as pd\nimport numpy as np\n\ndef second_row(ar):\n    return ar[0]\n\ndef work(second):\n    df = pd.DataFrame(data=second)\n    df.loc[0, 0] = 1\n\ndef main():\n    # .. load data ..\n    ar = np.array([[0, 0], [0, 0]])\n\n    # .. do some work on second row ..\n    second = second_row(ar)\n    work(second)\n\n    # .. much later ..\n    print(repr(ar))\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<p>which will print</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>array([[1, 0],\n       [0, 0]])\n</code></pre>\n\n<p>This type of behaviour always surprises me. What is happening is that <code>df</code> is sharing memory with <code>ar</code>, so when some of the content of <code>df</code> changes in <code>work</code>, that change infects <code>ar</code> as well. However, in some cases this may be exactly what you want, for memory efficiency reasons (no copy). The real problem in this code is that the function <code>second_row</code> is returning the first row instead of the second; good luck debugging that.</p>\n\n<p>Consider instead a similar program written in Rust:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Array&lt;'a, 'b&gt;(&amp;'a mut [i32], &amp;'b mut [i32]);\n\nimpl&lt;'a, 'b&gt; Array&lt;'a, 'b&gt; {\n    fn second_row(&amp;mut self) -&gt; &amp;mut &amp;'b mut [i32] {\n        &amp;mut self.0\n    }\n}\n\nfn work(second: &amp;mut [i32]) {\n    second[0] = 1;\n}\n\nfn main() {\n    // .. load data ..\n    let ar1 = &amp;mut [0, 0][..];\n    let ar2 = &amp;mut [0, 0][..];\n    let mut ar = Array(ar1, ar2);\n\n    // .. do some work on second row ..\n    {\n        let second = ar.second_row();\n        work(second);\n    }\n\n    // .. much later ..\n    println!(\"{:?}\", ar);\n}\n</code></pre>\n\n<p>Compiling this, you get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:13\n  |\n6 |             &amp;mut self.0\n  |             ^^^^^^^^^^^ lifetime mismatch\n  |\n  = note: expected type `&amp;mut &amp;'b mut [i32]`\n             found type `&amp;mut &amp;'a mut [i32]`\nnote: the lifetime 'b as defined on the impl at 4:5...\n --&gt; src/main.rs:4:5\n  |\n4 |     impl&lt;'a, 'b&gt; Array&lt;'a, 'b&gt; {\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...does not necessarily outlive the lifetime 'a as defined on the impl at 4:5\n --&gt; src/main.rs:4:5\n  |\n4 |     impl&lt;'a, 'b&gt; Array&lt;'a, 'b&gt; {\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>In fact you get two errors, there is also one with the roles of <code>'a</code> and <code>'b</code> interchanged. Looking at the annotation of <code>second_row</code>, we find that the output should be <code>&amp;mut &amp;'b mut [i32]</code>, i.e., the output is supposed to be a reference to a reference with lifetime <code>'b</code> (the lifetime of the second row of <code>Array</code>). However, because we are returning the first row (which has lifetime <code>'a</code>), the compiler complains about lifetime mismatch. At the right place. At the right time. Debugging is a breeze.</p>\n"}, {"tags": [], "owner": {"reputation": 149, "user_id": 2443581, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c75b70767ecf62bdbc14c1a57932449d?s=128&d=identicon&r=PG", "display_name": "Jorge Gonzalez", "link": "https://stackoverflow.com/users/2443581/jorge-gonzalez"}, "is_accepted": false, "score": 0, "last_activity_date": 1591728183, "creation_date": 1591728183, "answer_id": 62289734, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust/62289734#62289734", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>I think of a lifetime annotation as a contract about a given ref been valid in the receiving scope only while it remains valid in the source scope. Declaring more references in the same lifetime kind of merges the scopes, meaning that all the source refs have to satisfy this contract.\nSuch annotation allow the compiler to check for the fulfillment of the contract.</p>\n"}], "owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 22732, "favorite_count": 54, "accepted_answer_id": 31612025, "answer_count": 10, "score": 227, "last_activity_date": 1591728183, "creation_date": 1437736506, "last_edit_date": 1529432615, "question_id": 31609137, "link": "https://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust", "title": "Why are explicit lifetimes needed in Rust?", "body": "<p>I was reading the <a href=\"https://doc.rust-lang.org/book/first-edition/lifetimes.html\" rel=\"noreferrer\">lifetimes chapter</a> of the Rust book, and I came across this example for a named/explicit lifetime:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n\nfn main() {\n    let x;                    // -+ x goes into scope\n                              //  |\n    {                         //  |\n        let y = &amp;5;           // ---+ y goes into scope\n        let f = Foo { x: y }; // ---+ f goes into scope\n        x = &amp;f.x;             //  | | error here\n    }                         // ---+ f and y go out of scope\n                              //  |\n    println!(\"{}\", x);        //  |\n}                             // -+ x goes out of scope\n</code></pre>\n\n<p>It's quite clear to me that the error being prevented by the compiler is the <em>use-after-free</em> of the reference assigned to <code>x</code>: after the inner scope is done, <code>f</code> and therefore <code>&amp;f.x</code> become invalid, and should not have been assigned to <code>x</code>.</p>\n\n<p>My issue is that the problem could have easily been analyzed away <em>without</em> using the <em>explicit</em> <code>'a</code> lifetime, for instance by inferring an illegal assignment of a reference to a wider scope (<code>x = &amp;f.x;</code>).</p>\n\n<p>In which cases are explicit lifetimes actually needed to prevent use-after-free (or some other class?) errors?</p>\n"}, {"tags": ["arrays", "multithreading", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437734566, "post_id": 31608015, "comment_id": 51166682, "body": "to question 4: Isn&#39;t that what you are already doing? every thread will calculate the value for <code>b[x]</code> and <code>b[x+5]</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1437734799, "post_id": 31608015, "comment_id": 51166819, "body": "note that on stackoverflow you should only be asking one question per question."}, {"owner": {"reputation": 87, "user_id": 5151203, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ea8c411da2c0f0e3b2da58b5ee4b87de?s=128&d=identicon&r=PG&f=1", "display_name": "Joysi", "link": "https://stackoverflow.com/users/5151203/joysi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437735323, "post_id": 31608015, "comment_id": 51167128, "body": "Thank you. I use five threads. Each thread clone b-array <code>let b = b.clone()</code> (we can have 5 copies b-array in memory), lock it and calculate b[x], b[x+5]. Can I  clone and lock only the calculating Items (2 elements of b-array) without copy entirely? Can I don&#39;t use clone (lock calculating element in b-array)? Sorry for 4 questions, but it chained to each other."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437742405, "post_id": 31608015, "comment_id": 51171583, "body": "note that you are not cloning the array, but the <code>Arc</code>, which is just a thread-safe reference counted pointer. All the arcs you create point to the same array"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1437742625, "post_id": 31608015, "comment_id": 51171739, "body": "Have you tried using a <code>Vec</code> instead of an array? allocating large objects on the stack will often get you into trouble."}, {"owner": {"reputation": 87, "user_id": 5151203, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ea8c411da2c0f0e3b2da58b5ee4b87de?s=128&d=identicon&r=PG&f=1", "display_name": "Joysi", "link": "https://stackoverflow.com/users/5151203/joysi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437743448, "post_id": 31608015, "comment_id": 51172314, "body": "I thought that reference to array store in the stack instead of entire array."}], "answers": [{"comments": [{"owner": {"reputation": 87, "user_id": 5151203, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ea8c411da2c0f0e3b2da58b5ee4b87de?s=128&d=identicon&r=PG&f=1", "display_name": "Joysi", "link": "https://stackoverflow.com/users/5151203/joysi"}, "edited": false, "score": 0, "creation_date": 1437739733, "post_id": 31609380, "comment_id": 51169907, "body": "Thank a lot! I&#39;ve clarified some details for me. I can&#39;t have in safe mode a mutable access to the one array element without a lock entire array? Lock the one element step-by-step without locking the others ..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437740155, "post_id": 31609380, "comment_id": 51170171, "body": "It is not necessary to drop to unsafe code to solve this problem. A Mutex is one possible solution, splitting the slice is another."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437742424, "post_id": 31609380, "comment_id": 51171591, "body": "@Shepmaster A Mutex on the array would lock the entire array, so no parallel writing. A Mutex for each element or splitting the array are not good options for performance reasons. To clarify, my target use case is mainly numeric code, when for example you have a large array of matrices and you have to do operations on them."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437754064, "post_id": 31609380, "comment_id": 51179659, "body": "@AndreaP good points. I really miss thread::scoped."}, {"owner": {"reputation": 405, "user_id": 1670099, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/532e1d03dedfa2bf6b18701380de41df?s=128&d=identicon&r=PG", "display_name": "rohitpal", "link": "https://stackoverflow.com/users/1670099/rohitpal"}, "edited": false, "score": 0, "creation_date": 1590551503, "post_id": 31609380, "comment_id": 109718711, "body": "@eulerdisk - What if the case was to read and write for that array index parallely. Say a queue of array, where at each index queue where data can be added and parallelly popped? The would correct structure be Arc Mutex of array of Arc Mutex of Queue?"}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 3, "last_activity_date": 1437739068, "last_edit_date": 1437739068, "creation_date": 1437737214, "answer_id": 31609380, "question_id": 31608015, "link": "https://stackoverflow.com/questions/31608015/parallel-computing-of-array-elements-in-rust/31609380#31609380", "title": "Parallel computing of array elements in rust", "body": "<p>Note that the <code>clone()</code> method on the <code>Arc</code> object does not \"clone\" the array, simply it increments the reference counter of the <code>Arc</code>.</p>\n\n<p>I think you are asking for a general strategy to process data in parallel in Rust. Your code lock the <code>b</code> array in each thread, so you have no parallel processing.</p>\n\n<p>To do real parallel processing you would need a mutable access to the array without a lock on the entire array but you cannot do that in safe Rust.</p>\n\n<p>To do that you have to use some sort of <strong>unsafe</strong> mechanism, such raw pointers.</p>\n\n<p>This is a simple example to process a (non mutable) input vector into a (mutable) output vector concurrently:</p>\n\n<pre><code>use std::thread;\nuse std::sync::Arc;\n\nfn main() {\n    let input = Arc::new([1u32, 2, 3, 4]);\n    let output = Arc::new([0; 4]);\n\n    let mut handles = Vec::new();\n\n    for t in 0..4 {\n        let inp = input.clone();\n        let out = output.clone();\n        let handle = thread::spawn(move || unsafe {\n            let p = (out.as_ptr() as *mut u32).offset(t as isize);\n\n            *p = inp[t] + (t as u32 + 1);\n        });\n\n        handles.push(handle);\n    }\n\n\n    for h in handles {\n        h.join().unwrap();\n    }\n\n    println!(\"{:?}\", output);\n}\n</code></pre>\n\n<p>You still need to use <code>Arc</code> to pass data into the threads and to have a proper lifetime management.\nThen inside the thread you need to get a mutable pointer to the data (<code>out.as_ptr() as *mut u32</code>), then the item processed in that thread using the <code>offset</code> method.</p>\n"}], "owner": {"reputation": 87, "user_id": 5151203, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ea8c411da2c0f0e3b2da58b5ee4b87de?s=128&d=identicon&r=PG&f=1", "display_name": "Joysi", "link": "https://stackoverflow.com/users/5151203/joysi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2988, "favorite_count": 1, "closed_date": 1438042465, "accepted_answer_id": 31609380, "answer_count": 1, "score": 0, "last_activity_date": 1438077529, "creation_date": 1437733221, "last_edit_date": 1438077529, "question_id": 31608015, "link": "https://stackoverflow.com/questions/31608015/parallel-computing-of-array-elements-in-rust", "closed_reason": "Duplicate", "title": "Parallel computing of array elements in rust", "body": "<p>I'm novice to Rust (v1.0.0) and thread-programming. \nI try to calculate elements of b-array using a-array. Each element of the b-array can be calculated independently of the others (parallel). </p>\n\n<pre><code>extern crate rand;\nuse rand::Rng;\nuse std::io;\nuse std::thread;\nuse std::sync::{Arc, Mutex};\n\nfn main() {\n  let mut a : [u32; 10] = [0; 10];\n  let mut b = Arc::new(Mutex::new([0; 10]));\n  let mut rng = rand::thread_rng();\n\n  for x in 0..9 {\n    a[x] = (rng.gen::&lt;u32&gt;()  % 1000) + 1;\n  };\n\n  for x in 0..4 { \n    let b = b.clone(); \n    thread::spawn(move || { let mut b = b.lock().unwrap();\n      for y in 0..4 {\n        b[x]   += a[y] * a[y*2+1];\n        b[x+5] += a[y+1] * a[y*2];\n      }\n    });\n  };\n\n  thread::sleep_ms(1000); \n\n  for x in 0..a.len() {\n    println!(\"a({0})={1}, b({0})={2}\", x, a[x], b[x]);\n  };\n}\n</code></pre>\n\n<p>Can you help me:</p>\n\n<ol>\n<li>if I use: <code>let mut b = Arc::new(Mutex::new([u32; 10] = [0; 10]));</code> -> I get error <code>unresolved name 'u32'. Did you mean 'a'?</code> How can I set the type of array element ?</li>\n<li>thread::sleep_ms(1000) - It is so rudely. How can I check that all thread is finished?</li>\n<li>How can I get back my calculated b[i] and/or gather thread-calculated b-arrays in the final one ? Now I've got error: <code>cannot index a value of type 'alloc::arc::Arc&lt;std::sync::mutex::Mutex&lt;[u32; 10]&gt;&gt;'</code></li>\n<li>Can I use only one b-array in memory and send into thread (using pointers) to calculating two elements of b-array?</li>\n</ol>\n\n<hr>\n\n<p>Thank for solutions.\nWorking code is (I've modified it for show problem):</p>\n\n<pre><code>extern crate rand;\nuse rand::Rng;\nuse std::thread;\nuse std::sync::{Arc, Mutex};\n\nfn main() {\n  let mut a : [u32; 10000] = [0; 10000];\n  let b = Arc::new(Mutex::new([0u32; 10]));\n  let mut rng = rand::thread_rng();\n\n  for x in 0..10000 {\n    a[x] = (rng.gen::&lt;u32&gt;() % 10) + 1;\n  };\n\n  for x in 0..5 {\n    let b = b.clone();\n    thread::spawn(move || { let mut b = b.lock().unwrap();\n      println!(\"thread {} started\", x);\n      for y in 0..5000 {\n        b[x]   += a[y] * a[y*2+1];\n        b[x+5] += a[y+1] * a[y*2];\n      };\n      b[x] += a[x];\n      b[x+5] -= a[x];\n    println!(\"thread {} finished\", x);\n    });\n  };\n\n  thread::sleep_ms(1000);\n\n  for x in 0..10 {\n    println!(\"b({0})={1}\", x, b.lock().unwrap()[x]);\n  };\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>thread 1 started\nthread 1 finished\nthread 3 started\nthread 3 finished\nthread 0 started\nthread 0 finished\nthread 2 started\nthread 2 finished\nthread 4 started\nthread 4 finished\nb(0)=149482\n...\nb(9)=149065\n</code></pre>\n\n<p>Threads are processed step-by-step.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1437729636, "post_id": 31606302, "comment_id": 51163668, "body": "This is a pretty long shot, but could it be that since you&#39;re moving <code>vertices</code> into <code>create_data_source</code>, and returning with the same lifetime, that lifetime is already over when the function return?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1437734170, "post_id": 31606302, "comment_id": 51166429, "body": "I&#39;ve tried to work this out, but you&#39;ve simplified the code to such a degree that I can&#39;t tell what&#39;s going on.  The solution is &quot;chop out a heap of seemingly pointless code&quot;, but that&#39;s unlikely to be what you want.  For example, why is <code>attributes</code> passed to <code>create_data_source</code> when it&#39;s never used?  Why is <code>create_data_source</code> a method on <code>Factory</code> when it never refers to it?  Why is <code>&#39;a</code> used in that method despite involving <i>nothing</i> with that lifetime?  I can tell you why you&#39;re getting that error, but I can&#39;t begin to suggest how to fix it without a clearer idea of what you&#39;re doing..."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1437734335, "post_id": 31606302, "comment_id": 51166524, "body": "Here&#39;s as far as I got before giving up: <a href=\"http://is.gd/khBtaO\" rel=\"nofollow noreferrer\">is.gd/khBtaO</a>"}, {"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "reply_to_user": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1437777646, "post_id": 31606302, "comment_id": 51190705, "body": "Thanks @MartinHaTh that did actually work, but only with the simplified example. I&#39;ve now updated my test code to actually store the <code>attributes</code> in the <code>DataSource</code>."}, {"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1437777766, "post_id": 31606302, "comment_id": 51190740, "body": "Thanks very much @DK. for the detailed analysis. I&#39;ve update the code to better reflect what I&#39;m trying to do (now <code>attributes</code> is actually used). <code>create_data_source</code> is a method on a factory because in my actual implementation there will be many different factories (OpenGL factory, DirectX factory etc.). However even if I just create the <code>vertex_data_source</code> outside of the factory the issue still persists so I think the true problem lies in the lifetimes of the <code>DataSource</code> struct itself."}], "answers": [{"comments": [{"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "edited": false, "score": 0, "creation_date": 1437794128, "post_id": 31622454, "comment_id": 51193661, "body": "Thank you so much that is exactly what I&#39;m looking for! I did think it was an issue with the lifetime of the reference to the datasource needing to be different to the data it points at but I didn&#39;t know how to implement it. Specifically: I didn&#39;t know about the <code>&#39;a: &#39;b</code> syntax. I&#39;m assuming that declares that <code>&#39;a</code> must be greater or equal to <code>&#39;b</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "edited": false, "score": 0, "creation_date": 1437794323, "post_id": 31622454, "comment_id": 51193691, "body": "@neon64 Glad to help, although I&#39;m still upset I can&#39;t make a smaller example to demonstrate the core problem. <a href=\"http://stackoverflow.com/q/30768063/155423\">This question succinctly describes the lifetime syntax in question</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1437793310, "creation_date": 1437793310, "answer_id": 31622454, "question_id": 31606302, "link": "https://stackoverflow.com/questions/31606302/lifetime-issue-with-associated-types/31622454#31622454", "title": "Lifetime Issue with Associated Types", "body": "<p>This allows your example to compile:</p>\n\n<pre><code>pub struct DrawCommand&lt;'a : 'b, 'b, R: Resources&lt;'a&gt;&gt; {\n    pub data_source: &amp;'b R::DataSource\n}\n</code></pre>\n\n<p>However, I'm finding it extremely difficult to create a more minimal example. As best I can determine, you have an issue because you are declaring that you will hold a reference to an item that itself has a reference, and that those two references need to have a common lifetime (<code>'a</code>). Through some combination of the other lifetimes, this is actually impossible.</p>\n\n<p>Adding a second lifetime allows the reference <em>to</em> the <code>DataSource</code> to differ from the reference of the <code>DataSource</code> itself.</p>\n\n<p>I'm still going to try to create a more minified example.</p>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "accepted_answer_id": 31622454, "answer_count": 1, "score": 5, "last_activity_date": 1437793310, "creation_date": 1437728398, "last_edit_date": 1437777979, "question_id": 31606302, "link": "https://stackoverflow.com/questions/31606302/lifetime-issue-with-associated-types", "title": "Lifetime Issue with Associated Types", "body": "<p>I've been pulling my hair out over the last week due to this incredibly annoying issue with lifetimes.</p>\n\n<p>The problem occurs when I try to put a reference to a <code>Buffer</code> inside a <code>DataSource</code>, which is then referenced to a <code>DrawCommand</code>. I'm getting the error: <strong><code>vertex_data_source</code> does not live long enough</strong>.</p>\n\n<pre><code>src/main.rs:65:23: 65:41 error: \nsrc/main.rs:65         data_source: &amp;vertex_data_source\n                                     ^~~~~~~~~~~~~~~~~~\nsrc/main.rs:60:51: 67:2 note: reference must be valid for the block suffix following statement 3 at 60:50...\nsrc/main.rs:60     let vertices = VertexAttributes::new(&amp;buffer);\nsrc/main.rs:61\nsrc/main.rs:62     let vertex_data_source = factory.create_data_source(vertices);\nsrc/main.rs:63\nsrc/main.rs:64     let command: DrawCommand&lt;ResourcesImpl&gt; = DrawCommand {\nsrc/main.rs:65         data_source: &amp;vertex_data_source\n               ...\nsrc/main.rs:62:67: 67:2 note: ...but borrowed value is only valid for the block suffix following statement 4 at 62:66\nsrc/main.rs:62     let vertex_data_source = factory.create_data_source(vertices);\nsrc/main.rs:63\nsrc/main.rs:64     let command: DrawCommand&lt;ResourcesImpl&gt; = DrawCommand {\nsrc/main.rs:65         data_source: &amp;vertex_data_source\nsrc/main.rs:66     };\nsrc/main.rs:67 }\n</code></pre>\n\n<p>It says <code>vertex_data_source</code> has to be valid for the <em>block suffix following statement 3 at line 60</em>. My interpretation of that error is that <strong><code>vertex_data_source</code> should be defined before line 60</strong>. But to create the <code>vertex_data_source</code> in the first place I need access to those <code>VertexAttributes</code> on line 60, so I can't just swap the order around.</p>\n\n<p>I feel like all the <strong>'a</strong> lifetimes sprinkled over my code need to be split into 2 or maybe just removed, however I've tried every combination that seemed sensible and I'm not out of ideas.</p>\n\n<p>Below is a greatly simplified example of my code that demonstrates the problem. I would really appreciate a sanity check and hopefully a fresh mind might be able to spot the issue. (every time before a few days of fiddling has produced a fix but this time I'm stumped).</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::marker::PhantomData;\n\npub struct DrawCommand&lt;'a, R: Resources&lt;'a&gt;&gt; {\n    pub data_source: &amp;'a R::DataSource\n}\n\npub trait Resources&lt;'a&gt; {\n    type DataSource: 'a;\n    type Buffer: 'a;\n}\n\npub struct DataSource&lt;'a&gt; {\n    id: u32,\n    attributes: Vec&lt;VertexAttributes&lt;'a, ResourcesImpl&lt;'a&gt;&gt;&gt;,\n    current_element_array_buffer_binding: RefCell&lt;Option&lt;Buffer&lt;'a&gt;&gt;&gt;\n}\n\npub struct Buffer&lt;'a&gt; {\n    context: &amp;'a GraphicsContextImpl\n}\n\npub struct GraphicsContextImpl;\n\npub struct ResourcesImpl&lt;'a&gt; {\n    phantom: PhantomData&lt;&amp;'a u32&gt; // 'a is the lifetime of the context reference\n}\n\nimpl&lt;'a&gt; Resources&lt;'a&gt; for ResourcesImpl&lt;'a&gt; {\n    type Buffer = Buffer&lt;'a&gt;;\n    type DataSource = DataSource&lt;'a&gt;;\n}\n\nstruct Factory&lt;'a&gt; {\n    context: &amp;'a GraphicsContextImpl\n}\n\nimpl&lt;'a&gt; Factory&lt;'a&gt; {\n    /// Creates a buffer\n    fn create_buffer&lt;T&gt;(&amp;self) -&gt; Buffer&lt;'a&gt; {\n        Buffer {\n            context: self.context\n        }\n    }\n\n    fn create_data_source(&amp;self, attributes: Vec&lt;VertexAttributes&lt;'a, ResourcesImpl&lt;'a&gt;&gt;&gt;) -&gt; DataSource&lt;'a&gt; {\n        DataSource {\n            id: 0,\n            attributes: attributes,\n            current_element_array_buffer_binding: RefCell::new(None)\n        }\n    }\n}\n\nfn main() {\n    let context = GraphicsContextImpl;\n    let factory = Factory {\n        context: &amp;context\n    };\n    let buffer = factory.create_buffer::&lt;u32&gt;();\n\n    let vertices = VertexAttributes::new(&amp;buffer);\n\n    let vertex_data_source = factory.create_data_source(vec!(vertices));\n\n    let command: DrawCommand&lt;ResourcesImpl&gt; = DrawCommand {\n        data_source: &amp;vertex_data_source\n    };\n}\n\npub struct VertexAttributes&lt;'a, R: Resources&lt;'a&gt;&gt; {\n    pub buffer: &amp;'a R::Buffer,\n}\n\nimpl&lt;'a, R: Resources&lt;'a&gt;&gt; VertexAttributes&lt;'a, R&gt; {\n    pub fn new(buffer: &amp;'a R::Buffer) -&gt; VertexAttributes&lt;'a, R&gt; {\n        VertexAttributes {\n            buffer: buffer\n        }\n    }\n}\n</code></pre>\n\n<p>Thanks very much in advance.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I've updated the code to better reflect my actual implementation.</p>\n\n<p>By the way - replacing this:</p>\n\n<pre><code>let vertex_data_source = factory.create_data_source(vec!(vertices));\n</code></pre>\n\n<p>With this:</p>\n\n<pre><code>let vertex_data_source = DataSource {\n    id: 0,\n    attributes: vec!(vertices),\n    current_element_array_buffer_binding: RefCell::new(None)\n};\n</code></pre>\n\n<p>Doesn't solve the issue.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1437789912, "post_id": 31604192, "comment_id": 51193001, "body": "Reading <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">this</a>, which says, &quot;Trait objects, like <code>&amp;Foo</code> or <code>Box&lt;Foo&gt;</code>&quot; lead me to believe that they were a constant size (the size of two pointers, one for the object, one for the vtable). The docs there show the <code>foo_obj as &amp;Trait</code> coercion, but not <code>foo_obj as Trait</code>. What does the latter do differently? Also, aren&#39;t I using the <code>&amp;Foo</code>, which you say <i>is</i> constant size, so why do I need <code>?Sized</code>? (Nonetheless, your solution works, but I can&#39;t explain why, I guess?)"}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1437790577, "post_id": 31604192, "comment_id": 51193097, "body": "<a href=\"https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean\">This answer</a> seems to say similar things. Correct me if I&#39;m wrong (testing if I understand); remembering that <code>Sized</code> is part of the generic&#39;s bound by default (like you say), <code>R</code> in my example matches <i>only</i> <code>Read</code> in <code>&amp;mut Read</code> (the <code>&amp;mut</code> not being part of the bound, but part of <i>that specific use of R</i> in the arg); so <code>R</code> is <code>Read</code>, but <code>R</code> needs to satisfy <code>Sized + Read</code>, which <code>Read</code> of course isn&#39;t. Thus, we need to opt-out with <code>?Sized</code>.  Still curious what/if <code>foo_type as Trait</code> does, if anything?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1437798843, "post_id": 31604192, "comment_id": 51194328, "body": "(Ick, that documentation is very sloppy about the term \u201ctrait objects\u201d.) Unsized types cannot be instantiated directly; they can only be created through some form of indirection, such as <code>Box&lt;T&gt;</code> and <code>&amp;T</code>, because the sizes vary. <code>foo as Trait</code> thus doesn\u2019t actually compile; I\u2019m using it to express the concept of what is being pointed <i>to</i>. It\u2019s a bit of a complex subject, really."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1437721307, "creation_date": 1437721307, "answer_id": 31604192, "question_id": 31602827, "link": "https://stackoverflow.com/questions/31602827/trait-objects-and-reading-n-bytes-into-vector/31604192#31604192", "title": "Trait objects, and reading n bytes into vector", "body": "<p>Generics include the <code>Sized</code> bound by default; if you do not wish it to be required, you must add the <code>?Sized</code> bound.</p>\n\n<p>A trait object is <em>not</em> of constant size; <code>u16 as Trait</code> is two bytes, <code>u32 as Trait</code> is four bytes, <em>&amp;c.</em>; only things like <em>boxed</em> trait objects (<code>Box&lt;Trait&gt;</code>) and trait object <em>references</em> (<code>&amp;Trait</code>, <code>&amp;mut Trait</code>) have a constant size, known at compile time (two words for the cited examples).</p>\n\n<p>Because you only use an <code>R</code> by mutable reference, you can add the <code>?Sized</code> bound successfully:</p>\n\n<pre><code>fn read_n_bytes_to_vector&lt;R: ?Sized + Read&gt;(reader: &amp;mut R, length: usize)\n        -&gt; Result&lt;Vec&lt;u8&gt;, FooReadError&gt; {\n</code></pre>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1217, "favorite_count": 0, "accepted_answer_id": 31604192, "answer_count": 1, "score": 3, "last_activity_date": 1437721307, "creation_date": 1437715743, "question_id": 31602827, "link": "https://stackoverflow.com/questions/31602827/trait-objects-and-reading-n-bytes-into-vector", "title": "Trait objects, and reading n bytes into vector", "body": "<p>Say I have the following,</p>\n\n<pre><code>use std::io;\nuse std::io::Read;\n\n#[derive(Debug)]\nenum FooReadError {\n    UnexpectedEof,\n    IoError(io::Error),\n}\n\nimpl From&lt;io::Error&gt; for FooReadError {\n    fn from(err: io::Error) -&gt; FooReadError {\n        FooReadError::IoError(err)\n    }\n}\n\nfn read_n_bytes_to_vector&lt;R: Read&gt;(reader: &amp;mut R, length: usize)\n        -&gt; Result&lt;Vec&lt;u8&gt;, FooReadError&gt; {\n    let mut bytes = Vec::&lt;u8&gt;::with_capacity(length);\n    unsafe { bytes.set_len(length); }\n    let bytes_read = try!(reader.read(&amp;mut bytes[..]));\n    if bytes_read != length {\n        Err(FooReadError::UnexpectedEof)\n    } else {\n        Ok(bytes)\n    }\n}\n\nfn do_some_read(reader: &amp;mut Read) -&gt; Vec&lt;u8&gt; {\n    read_n_bytes_to_vector(reader, 16).unwrap()\n}\n\nfn main() {\n    let v = vec![0, 1, 2, 3, 4, 5];\n    let mut cur = io::Cursor::&lt;Vec&lt;u8&gt;&gt;::new(v);\n    do_some_read(&amp;mut cur);\n}\n</code></pre>\n\n<p>The <code>read_n_bytes_to_vector</code> is supposed to take anything implementing the trait <code>io::Read</code>, read <code>length</code> bytes from it, and put them into a vector and return the vector.</p>\n\n<p>The function <code>do_some_read</code> has a <code>io::Read</code> trait <em>object</em>. So, why then:</p>\n\n<pre><code>% rustc ./vec_read.rs\n./vec_read.rs:29:5: 29:27 error: the trait `core::marker::Sized` is not implemented for the type `std::io::Read` [E0277]\n./vec_read.rs:29     read_n_bytes_to_vector(reader, 16).unwrap()\n                     ^~~~~~~~~~~~~~~~~~~~~~\n./vec_read.rs:29:5: 29:27 note: `std::io::Read` does not have a constant size known at compile-time\n./vec_read.rs:29     read_n_bytes_to_vector(reader, 16).unwrap()\n                     ^~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I agree with the compiler that <code>io::Read</code> can't possibly implement <code>Sized</code>; but I'm passing a trait <em>object</em> \u2014 those are constant-size, so it should be okay here; **so why the error?* But wait, why does it even matter? The function isn't taking an <code>io::Read</code> for an arg (<em>right?</em>), it's taking a trait object too, because the arg is generic, and should take the full type of what's passed in.</p>\n"}, {"tags": ["pointers", "rust", "ownership", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 0, "creation_date": 1437697351, "post_id": 31598333, "comment_id": 51151940, "body": "You could say that the value is <i>moved</i> into the argument of <code>drop</code>. Just like you can move <code>x</code> into <code>z</code>, you can move it into <code>drop</code>...?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 0, "creation_date": 1437697746, "post_id": 31598333, "comment_id": 51152052, "body": "@KerrekSB except that drop takes its receiver <i>by reference</i> not <i>by value</i>, so nothing is moved into <code>Drop::drop</code>."}, {"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 2, "creation_date": 1437699383, "post_id": 31598333, "comment_id": 51152424, "body": "Hm, so it&#39;s more like it&#39;s moved into a private destruction location, from where <code>drop</code> is called."}, {"owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "edited": false, "score": 0, "creation_date": 1437736653, "post_id": 31598333, "comment_id": 51167950, "body": "@Shepmaster Thanks. I&#39;ve got a <a href=\"http://stackoverflow.com/q/31609137/924313\">new question</a> about lifetimes that you might be interested in!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1437693555, "last_edit_date": 1437693555, "creation_date": 1437686865, "answer_id": 31598333, "question_id": 31597416, "link": "https://stackoverflow.com/questions/31597416/how-is-a-destructor-call-fn-dropmut-self-call-inserted-when-the-owning-vari/31598333#31598333", "title": "How is a destructor call `fn drop(&amp;mut self)` call inserted when the owning variable is immutable?", "body": "<p>The <em>owner</em> of a variable gets to decide the mutability when the variable binding is created, it's not intrinsic to the value itself:</p>\n\n<pre><code>fn main() {  \n    let x = vec![1, 2, 3];\n    let mut z = x;\n    let y = &amp;mut z;\n}\n</code></pre>\n\n<p>You can think of dropping as happening when the last programmer-named variable binding gives up the ownership of the variable. The magical Drop-fairy takes ownership of your now-unneeded variable, and uses a mutable binding. Then the Drop-fairy can call <code>Drop::drop</code> before doing the final magic to free up the space taken by the item itself. </p>\n\n<p><em>Note</em> the Drop-fairy is not a real Rust concept yet. That RFC is still in a very preliminary stage. </p>\n"}], "owner": {"reputation": 27525, "user_id": 924313, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/14d86d9d0a97d8464d59eb42935838ae?s=128&d=identicon&r=PG", "display_name": "corazza", "link": "https://stackoverflow.com/users/924313/corazza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 0, "accepted_answer_id": 31598333, "answer_count": 1, "score": 5, "last_activity_date": 1437693555, "creation_date": 1437683279, "question_id": 31597416, "link": "https://stackoverflow.com/questions/31597416/how-is-a-destructor-call-fn-dropmut-self-call-inserted-when-the-owning-vari", "title": "How is a destructor call `fn drop(&amp;mut self)` call inserted when the owning variable is immutable?", "body": "<p>It is my understanding that when a variable whose type implements <code>Drop</code> goes out of scope, a call to the <code>fn drop(&amp;mut self)</code> function is inserted, and passed a newly-created mutable reference to the variable going out of scope.</p>\n\n<p>However, how is that possible in cases where the variable was immutably bound, and it would be illegal to borrow it mutably? Here's an example of what I'm talking about:</p>\n\n<pre><code>fn main() {  \n  let x = vec![1, 2, 3];\n  let y = &amp;mut x;\n}\n</code></pre>\n\n<p>Which produces the following error: <strong>cannot borrow immutable local variable <code>x</code> as mutable</strong> as expected.</p>\n\n<p>Something similar must happen when <code>x</code> would be getting dropped, because <code>drop</code> expects a mutable reference.</p>\n"}, {"tags": ["gtk", "rust", "rust-gnome"], "comments": [{"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437922732, "post_id": 31595115, "comment_id": 51223227, "body": "Ok, I tried to get it a bit more MCVE:ish ... Now the redraw function tries to use a member of the FractalWidget as if it were a member of w, which obviously don&#39;t work."}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1437922792, "post_id": 31595115, "comment_id": 51223250, "body": "Actually, I&#39;ve found a way to do it, so I will add an answer as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437922864, "post_id": 31595115, "comment_id": 51223276, "body": "Haha, that&#39;s often one of the benefits of creating the MCVE, I&#39;ve found. It forces you to look at the problem from a new perspective, and really focus on the error. ^_^"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437923273, "post_id": 31595115, "comment_id": 51223416, "body": "Note that your updated code still has errors (unterminated string, missing semicolon, missing imports, undefined variable <code>area</code>, ...). It&#39;s really only useful if we can paste it into a brand new file ^_^ and have it work."}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437924958, "post_id": 31595115, "comment_id": 51224019, "body": "Actually, I found my semi-solution before trying to make it MCVE:ish, but I agree in principle ...  :-)"}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437937925, "post_id": 31595115, "comment_id": 51228366, "body": "Anyway, the code in the question as of an hour ago actually compiles.  The interresting parts, that does not compile, are commented out."}], "answers": [{"comments": [{"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1458141942, "post_id": 31639922, "comment_id": 59729000, "body": "Did you understand how to draw a pixel inside the <code>DrawArea</code> in gtk-rs ?"}, {"owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "reply_to_user": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1463431357, "post_id": 31639922, "comment_id": 62052463, "body": "@Moebius : Well, kind of.  Since I draw lots of pixels, I put them in a Pixbuf, and then use set_source_pixbuf(...), rectangle(...) and fill() to copy the Pixbuf to the Context.  Probably not the most efficient method."}], "tags": [], "owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "is_accepted": false, "score": 2, "last_activity_date": 1437937809, "last_edit_date": 1437937809, "creation_date": 1437931913, "answer_id": 31639922, "question_id": 31595115, "link": "https://stackoverflow.com/questions/31595115/how-can-i-get-my-own-data-to-a-gtk-callback-when-using-rust-gnome/31639922#31639922", "title": "How can I get my own data to a GTK callback when using rust-gnome?", "body": "<p>Ok, here's some code that actually works, mainly by using <code>Arc&lt;Mutex&lt;MyWidget&gt;&gt;</code> insead of plain <code>MyWidget</code>.  This still feels rather clumsy, as I need an explicit clone before moving into a closure and locking the mutex inside it, but this is probably good stuff to do (even if there is only one thread for gtk events).  Maybe the verbosity can be fixed by a macro ...</p>\n\n<pre><code>extern crate cairo;\nextern crate gtk;\n\nuse cairo::Context;\nuse gtk::signal::Inhibit;\nuse gtk::signal::WidgetSignals;\nuse gtk::traits::ContainerTrait;\nuse gtk::traits::WidgetTrait;\nuse std::sync::{Arc,Mutex};\n\nstruct MyWidget {\n    widget: gtk::DrawingArea,\n    foo: u32,\n}\n\nimpl MyWidget {\n    fn new() -&gt; Arc&lt;Mutex&lt;MyWidget&gt;&gt; {\n        let result = Arc::new(Mutex::new(MyWidget {\n            widget: gtk::DrawingArea::new().unwrap(),\n            foo: 17\n        }));\n        let r2 = result.clone();\n        result.lock().unwrap().widget.connect_draw(move |_w, c| {\n            r2.lock().unwrap().redraw(c)\n        });\n        result\n    }\n    fn modify(&amp;mut self, x: u32) {\n        self.foo += x;\n        self.widget.queue_draw();\n    }\n    fn redraw(&amp;self, _ : Context) -&gt; Inhibit {\n        println!(\"Should redraw for {}\", self.foo);\n        Inhibit(true)\n    }\n}\n\nfn main() {\n    gtk::init().ok();\n    let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n\n    let area = MyWidget::new();\n    window.add(&amp;area.lock().unwrap().widget);\n    window.connect_delete_event(|_, _| {\n        gtk::main_quit();\n        Inhibit(true)\n    });\n    let a1 = area.clone();\n    window.connect_key_release_event(move |_w, _event| {\n        a1.lock().unwrap().modify(3);\n        Inhibit(true)\n    });\n    let a2 = area.clone();\n    window.connect_button_release_event(move |_w, _event| {\n        a2.lock().unwrap().modify(17);\n        Inhibit(true)\n    });\n\n    window.show_all();\n    gtk::main();\n}\n</code></pre>\n\n<p>I'll wait at least a few days with marking this answer as correct, in case anyone has a better one.</p>\n"}], "owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 647, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1437937809, "creation_date": 1437675247, "last_edit_date": 1437931393, "question_id": 31595115, "link": "https://stackoverflow.com/questions/31595115/how-can-i-get-my-own-data-to-a-gtk-callback-when-using-rust-gnome", "title": "How can I get my own data to a GTK callback when using rust-gnome?", "body": "<p>... or, How can I subclass a gtk::Widget?</p>\n\n<p>I have the following dependencies in my <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nnum = \"*\"\ngtk = \"*\"\ncairo-rs = \"*\"\ngdk = \"*\"\ntime = \"*\"\n</code></pre>\n\n<p>I want to create my own type of widget (for rendering fractals).  I have:</p>\n\n<pre><code>extern crate cairo;\nextern crate gtk;\n\nuse cairo::Context;\nuse gtk::signal::Inhibit;\nuse gtk::signal::WidgetSignals;\nuse gtk::traits::ContainerTrait;\nuse gtk::traits::WidgetTrait;\n\nstruct MyWidget {\n    widget: gtk::DrawingArea,\n    foo: u32,\n}\n\nimpl MyWidget {\n    fn new() -&gt; MyWidget {\n        let result = MyWidget {\n            widget: gtk::DrawingArea::new().unwrap(),\n            foo: 17\n        };\n        result.widget.connect_draw(move |_w, c| {\n            // Cannot do: result.redraw(c)\n            Inhibit(true)\n        });\n        result\n    }\n    fn modify(&amp;mut self, x: u32) {\n        self.foo += x;\n        self.widget.queue_draw();\n    }\n    fn redraw(&amp;self, _ : Context) -&gt; Inhibit {\n        println!(\"Should redraw for {}\", self.foo);\n        Inhibit(true)\n    }\n}\n\nfn main() {\n    gtk::init().ok();\n    let window = gtk::Window::new(gtk::WindowType::TopLevel).unwrap();\n\n    let area = MyWidget::new();\n    window.add(&amp;area.widget);\n    window.connect_delete_event(|_, _| {\n        gtk::main_quit();\n        Inhibit(true)\n    });\n    window.connect_key_release_event(move |_w, _event| {\n        // Cannot do: area.modify(3);\n        Inhibit(true)\n    });\n    window.connect_button_release_event(move |_w, _event| {\n        // Cannot do: area.modify(17);\n        Inhibit(true)\n    });\n\n    window.show_all();\n    gtk::main();\n}\n</code></pre>\n\n<p>But when <code>redraw</code> gets called, w is of course the <code>gtk::DrawingArea</code> and not my <code>FractalWidget</code>.  I have laborated with calling <code>connect_draw</code> with a closure, but not managed to use <code>result</code> in it (I have tried <code>Box</code>ing the result and <code>move</code>ing it into the lambda, but I'm new to this, so there is probably some way I haven't tried).</p>\n\n<p>So, my actual question:  Is there a way to either send more data into a rust-gnome redraw method (and other similar callbacks), or is there a way to extend a widget struct to contain my own data?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1437675629, "creation_date": 1437675629, "answer_id": 31595221, "question_id": 31595087, "link": "https://stackoverflow.com/questions/31595087/how-do-i-destructure-a-tuple-so-that-the-bindings-are-mutable/31595221#31595221", "title": "How do I destructure a tuple so that the bindings are mutable?", "body": "<p>You have two slightly different questions.</p>\n\n<p>You can create a mutable bind by saying <code>mut</code> twice:</p>\n\n<pre><code>fn main() {\n    let a = (1, 2);\n    let (mut b, mut c) = a;\n    b += 1;\n    c += 2;\n\n    println!(\"{}, {}\", b, c);\n}\n</code></pre>\n\n<p>But to have it change in the original tuple, you need a <em>mutable reference</em> into that tuple:</p>\n\n<pre><code>fn main() {\n    let mut a = (1, 2);\n\n    {\n        let (ref mut b, ref mut c) = a;\n        *b += 1;\n        *c += 2;\n        // Let mutable borrows end\n    }\n\n    println!(\"{:?}\", a);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 14, "last_activity_date": 1437675812, "creation_date": 1437675812, "answer_id": 31595272, "question_id": 31595087, "link": "https://stackoverflow.com/questions/31595087/how-do-i-destructure-a-tuple-so-that-the-bindings-are-mutable/31595272#31595272", "title": "How do I destructure a tuple so that the bindings are mutable?", "body": "<p>You've got a few problems:</p>\n\n<ul>\n<li><p>You've put the <code>&amp;mut</code> in the wrong place; <code>&amp;mut</code> is part of the type, not the argument (unless you're destructuring the argument, which you aren't).</p></li>\n<li><p>You can't call the argument <code>struct</code>, because that's a keyword.</p></li>\n<li><p>You can't assign to a mutable reference with straight assignment.</p></li>\n</ul>\n\n<p>So, with those in mind, here's a working solution:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\nstruct MyStruct {\n    tuple: (i32, i32),\n}\n\nfn function(s: &amp;mut MyStruct) {\n    let (ref mut val1, ref mut val2) = s.tuple;\n    *val1 = 1;\n    *val2 = 2;\n}\n\nfn main() {\n    let mut s = MyStruct { tuple: (0, 0) };\n    function(&amp;mut s);\n    println!(\"{:?}\", s);\n}\n</code></pre>\n\n<p>The key here is that <code>ref</code> in a pattern binds by-reference; combining that with <code>mut</code> gives you a mutable reference.  Specifically, it gives you a pair of <code>&amp;mut i32</code>s.  Since these are references, you have to de-reference them in order to assign through them (otherwise, you'd be trying to re-assign the reference itself).</p>\n"}], "owner": {"reputation": 796, "user_id": 959847, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/40d3fdc131dbfeae3a893a354bcbcf67?s=128&d=identicon&r=PG", "display_name": "euclio", "link": "https://stackoverflow.com/users/959847/euclio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8085, "favorite_count": 0, "accepted_answer_id": 31595272, "answer_count": 2, "score": 11, "last_activity_date": 1582293626, "creation_date": 1437675184, "last_edit_date": 1582293626, "question_id": 31595087, "link": "https://stackoverflow.com/questions/31595087/how-do-i-destructure-a-tuple-so-that-the-bindings-are-mutable", "title": "How do I destructure a tuple so that the bindings are mutable?", "body": "<p>If I have the following struct:</p>\n\n<pre><code>struct MyStruct { tuple: (i32, i32) };\n</code></pre>\n\n<p>And the following function:</p>\n\n<pre><code>// This will not compile\nfn function(&amp;mut struct: MyStruct) {\n    let (val1, val2) = struct.tuple;\n    val1 = 1;\n    val2 = 2;\n}\n</code></pre>\n\n<p>How do I borrow val1 and val2 as mutable so when I reassign them the changes appear in the original struct?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1437668898, "post_id": 31592916, "comment_id": 51138052, "body": "have a look at pcwalton&#39;s post about typestate in a post-typestate rust: <a href=\"https://pcwalton.github.io/blog/2012/12/26/typestate-is-dead/\" rel=\"nofollow noreferrer\">pcwalton.github.io/blog/2012/12/26/typestate-is-dead</a>"}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1437669477, "post_id": 31592916, "comment_id": 51138425, "body": "Very cool. Some of the syntax I haven&#39;t seen before though, like <code>struct Open(@Open)</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 4, "creation_date": 1437669640, "post_id": 31592916, "comment_id": 51138525, "body": "Be aware that the post is based on an obsolete version of rust; the <code>@Type</code> syntax no longer exists, nor does it really have an exact equivalent (I believe it was for GC pointers; nowadays, you&#39;d use <code>Rc</code> or <code>Arc</code> instead.  Or just <code>Box</code>.)"}], "answers": [{"comments": [{"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1437669804, "post_id": 31593261, "comment_id": 51138638, "body": "It&#39;s library code for ultra low latency networking. Speed is always a serious performance problem. But that&#39;s a really nice rewrite of what I was trying to do. Between this and the link from pcwalton&#39;s typestate-like stuff, this doesn&#39;t appear to be a dumb idea, just my implementation isn&#39;t the greatest. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437917169, "post_id": 31593261, "comment_id": 51221387, "body": "It may be worth nothing that you can also use what I&#39;ve been calling an <i>exploder</i> \u2014 a method that consumes <code>Upper</code> or <code>Downer</code> and returns <code>Inner</code>. This allows you to avoid the explosion of possible conversion methods. The style presented here is <i>much</i> nicer for state machine like transitions though."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1437669466, "creation_date": 1437669466, "answer_id": 31593261, "question_id": 31592916, "link": "https://stackoverflow.com/questions/31592916/same-object-with-different-api-faces-at-compile-time/31593261#31593261", "title": "Same object with different API faces at compile time?", "body": "<p>First of all, it seems like you don't understand how ownership works in Rust; you may want to read the <a href=\"http://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">Ownership chapter of the Rust Book</a>.  Specifically, the way you keep re-aliasing the original <code>FaceA</code> is how you would specifically <em>enable</em> the very thing you say you want to avoid.  Also, all the borrows are immutable, so it's not clear how you intend to do any sort of mutation.</p>\n\n<p>As such, I've written a new example from scratch that involves going between two types with disjoint interfaces (<a href=\"http://is.gd/BmHma0\" rel=\"nofollow\">view on playpen</a>).</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\npub struct Inner {\n    pub value: i32,\n}\n\nimpl Inner {\n    pub fn new(value: i32) -&gt; Self {\n        Inner {\n            value: value,\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct Upper(Inner);\n\nimpl Upper {\n    pub fn new(inner: Inner) -&gt; Self {\n        Upper(inner)\n    }\n\n    pub fn into_downer(self) -&gt; Downer {\n        Downer::new(self.0)\n    }\n\n    pub fn up(&amp;mut self) {\n        self.0.value += 1;\n    }\n}\n\n#[derive(Debug)]\npub struct Downer(Inner);\n\nimpl Downer {\n    pub fn new(inner: Inner) -&gt; Self {\n        Downer(inner)\n    }\n\n    pub fn into_upper(self) -&gt; Upper {\n        Upper::new(self.0)\n    }\n\n    pub fn down(&amp;mut self) {\n        self.0.value -= 1;\n    }\n}\n\nfn main() {\n    let mut a = Upper::new(Inner::new(0));\n    a.up();\n\n    let mut b = a.into_downer();\n    b.down();\n    b.down();\n    b.down();\n\n    let mut c = b.into_upper();\n    c.up();\n\n    show_i32(c.0.value);\n}\n\n#[inline(never)]\nfn show_i32(v: i32) {\n    println!(\"v: {:?}\", v);\n}\n</code></pre>\n\n<p>Here, the <code>into_upper</code> and <code>into_downer</code> methods <em>consume</em> the subject value, preventing anyone from using it afterwards (try accessing <code>a</code> after the call to <code>a.into_downer()</code>).</p>\n\n<p>This should not be particularly inefficient; there is no heap allocation going on here, and Rust is pretty good at moving values around efficiently.  If you're curious, this is what the <code>main</code> function compiles down to with optimisations enabled:</p>\n\n<pre class=\"lang-asm prettyprint-override\"><code>mov edi, -1\njmp _ZN8show_i3220h2a10d619fa41d919UdaE\n</code></pre>\n\n<p>It literally inlines the entire program (save for the <code>show</code> function that I specifically told it <em>not</em> to inline).  Unless profiling shows this to be a serious performance problem, I wouldn't worry about it.</p>\n"}], "owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 44, "favorite_count": 0, "accepted_answer_id": 31593261, "answer_count": 1, "score": 3, "last_activity_date": 1437669466, "creation_date": 1437668404, "last_edit_date": 1437669168, "question_id": 31592916, "link": "https://stackoverflow.com/questions/31592916/same-object-with-different-api-faces-at-compile-time", "title": "Same object with different API faces at compile time?", "body": "<p>I have an object that can be in either of two modes: a source or a sink. It is always in one of them and it is always known at compile time (when passed the object you know if you are going to read or write to it obviously).</p>\n\n<p>I can put all the methods on the same object, and just assume I won't be called improperly or error when I do, or I was thinking I could be make two\ntuple structs of the single underlying object and attach the methods to those tuple structs instead. The methods are almost entirely disjoint.</p>\n\n<p>It is kind of abusing the fact that both tuple structs have the same layout and there is zero overhead for the casts and tuple storage.</p>\n\n<p>Think of this similar to the Java <code>ByteBuffer</code> and related classes where you write then flip then read then flip back and write more. Except this would catch errors in usage.</p>\n\n<p>However, it does seem a little unusual and might be overly confusing for such a small problem. And it seems like there is a better way to do this -- only requirement is zero overhead so no dynamic dispatch.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=280d2ec2548e4f38e305&amp;version=stable\" rel=\"nofollow\">https://play.rust-lang.org/?gist=280d2ec2548e4f38e305&amp;version=stable</a></p>\n\n<pre><code>#[derive(Debug)]\nstruct Underlying {\n    a: u32,\n    b: u32,\n}\n\n#[derive(Debug)]\nstruct FaceA(Underlying);\n\nimpl FaceA {\n    fn make() -&gt; FaceA { FaceA(Underlying{a:1,b:2}) }\n    fn doa(&amp;self) { println!(\"FaceA do A {:?}\", *self); }\n    fn dou(&amp;self) { println!(\"FaceA do U {:?}\", *self); }\n    fn tob(&amp;self) -&gt; &amp;FaceB {  unsafe{std::mem::transmute::&lt;&amp;FaceA,&amp;FaceB&gt;(self)} }\n}\n\n#[derive(Debug)]\nstruct FaceB(Underlying);\n\nimpl FaceB {\n    fn dob(&amp;self) { println!(\"FaceB do B {:?}\", *self); }\n    fn dou(&amp;self) { println!(\"FaceB do U {:?}\", *self); }\n    fn toa(&amp;self) -&gt; &amp;FaceA {  unsafe{std::mem::transmute::&lt;&amp;FaceB,&amp;FaceA&gt;(self)} }\n}\n\nfn main() {\n    let a = FaceA::make();\n    a.doa();\n    a.dou();\n\n    let b = a.tob();\n    b.dob();\n    b.dou();\n\n    let aa = b.toa();\n    aa.doa();\n    aa.dou();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1437698222, "post_id": 31592339, "comment_id": 51152165, "body": "This was <a href=\"http://www.reddit.com/r/rust/comments/3ebxuy/trouble_understanding_cascading_trait_objects/\" rel=\"nofollow noreferrer\">cross posted to Reddit</a>"}], "answers": [{"comments": [{"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1437687006, "post_id": 31592641, "comment_id": 51148488, "body": "Gah, didn&#39;t realize it was that easy to implement sized. That simple thing fixed my problem! Thank you again!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1437668119, "last_edit_date": 1437668119, "creation_date": 1437667562, "answer_id": 31592641, "question_id": 31592339, "link": "https://stackoverflow.com/questions/31592339/encompassing-trait-objects-within-a-base-trait-object/31592641#31592641", "title": "Encompassing Trait Objects within a Base Trait Object", "body": "<blockquote>\n  <p>I just want to have two trait objects whereby one has a Vector that contains a bunch of the other object.</p>\n</blockquote>\n\n<p>That's straight-forward enough:</p>\n\n<pre><code>trait TraitOne {\n    fn add(&amp;mut self, another: Box&lt;TraitTwo&gt;);\n}\n\ntrait TraitTwo {\n    fn value(&amp;self) -&gt; u8; \n}\n\nstruct Container(Vec&lt;Box&lt;TraitTwo&gt;&gt;);\nimpl TraitOne for Container {\n    fn add(&amp;mut self, another: Box&lt;TraitTwo&gt;) {\n        self.0.push(another);\n    }\n}\n\nstruct ThingOne(u8);\nimpl TraitTwo for ThingOne {\n    fn value(&amp;self) -&gt; u8 { self.0 }\n}\n\nstruct ThingTwo(u8, u8);\nimpl TraitTwo for ThingTwo {\n    fn value(&amp;self) -&gt; u8 { self.0 + self.1 }\n}\n\nfn main() {\n    let mut trait_1: Box&lt;TraitOne&gt; = Box::new(Container(vec![]));\n\n    let thing_1: Box&lt;TraitTwo&gt; = Box::new(ThingOne(42));\n    let thing_2: Box&lt;TraitTwo&gt; = Box::new(ThingTwo(21, 21));\n\n    trait_1.add(thing_1);\n    trait_1.add(thing_2);\n}\n</code></pre>\n\n<p>Your real error is about <em>object safety</em>. Huon Wilson (a Rust core team member) wrote a <a href=\"http://huonw.github.io/blog/2015/01/object-safety/\" rel=\"nofollow\">great blog post about this</a>.</p>\n\n<p>In your case you have this trait:</p>\n\n<pre><code>trait SubClass{\n    fn new() -&gt; Self;\n}\n</code></pre>\n\n<p>This is not object safe, quoting Huon (emphasis mine):</p>\n\n<blockquote>\n  <p>There\u2019s two fundamental ways in which this can happen, as an argument or as a return value, in either case a reference to the Self type means that it must match the type of the self value, the <strong>true type of which is unknown at compile time</strong>.</p>\n</blockquote>\n\n<p>That is, how many bytes need to be allocated on the stack or heap to hold the object returned by <code>fn new() -&gt; Self</code>? You cannot know, because you only have a trait object.</p>\n\n<p>One solution is to make sure that <code>Self</code> is <code>Sized</code> in your trait, as per the <a href=\"http://huonw.github.io/blog/2015/05/where-self-meets-sized-revisiting-object-safety/\" rel=\"nofollow\">followup blog post</a>:</p>\n\n<pre><code>trait SubClass {\n    fn new() -&gt; Self where Self: Sized;\n}\n</code></pre>\n\n<p>Then, just fix some mutability mismatches in your trait, and it compiles.</p>\n"}], "owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 120, "favorite_count": 0, "accepted_answer_id": 31592641, "answer_count": 1, "score": 0, "last_activity_date": 1437668119, "creation_date": 1437666727, "last_edit_date": 1437666775, "question_id": 31592339, "link": "https://stackoverflow.com/questions/31592339/encompassing-trait-objects-within-a-base-trait-object", "title": "Encompassing Trait Objects within a Base Trait Object", "body": "<p>Sorry if this seems trivial, but I'm trying to do a simple operation but am having a tough time doing so. I just want to have two trait objects whereby one has a Vector that contains a bunch of the other object.</p>\n\n<pre><code>trait MetaClass {\n    fn new() -&gt; Self;\n    fn add(&amp;self, subtrait: Box&lt;SubClass&gt;);\n}\n\nstruct MetaStruct {\n    elems: Vec&lt;Box&lt;SubClass&gt;&gt;,\n}\n\nimpl MetaClass for MetaStruct{\n    fn new() -&gt; MetaStruct {\n        MetaStruct{\n            elems: Vec::new(),\n        }\n    }\n\n    fn add(&amp;self, subtrait: Box&lt;SubClass&gt;){\n        // if I reformulate the above to 'fn add(&amp;self, subtrait: SubClass){'\n        // and use the below I get the trait `core::marker::Sized` is not implemented for the type `SubClass`\n        //self.elems.push(Box::new(subtrait));\n        self.elems.push(subtrait);\n    }\n}\n\n\ntrait SubClass{\n    fn new() -&gt; Self;\n}\n\nstruct MySubClass {\n    data: i32,\n}\n\nimpl SubClass for MySubClass {\n    fn new() -&gt; MySubClass{\n        MySubClass{\n            data: 10,\n        }\n    }\n}\n\n\nfn main(){\n    let mut meta = Box::new(MetaStruct::new());\n    // ideally I just want to do meta.add(MySubClass::new()) but as mentioned above that has some sizing issues :'(\n    meta.add(Box::new(MySubClass::new()));\n}\n</code></pre>\n\n<p>The error I am getting is:</p>\n\n<pre><code>&lt;anon&gt;:45:11: 45:38 error: cannot convert to a trait object because trait `SubClass` is not object-safe [E0038]\n&lt;anon&gt;:45   meta.add(Box::new(MySubClass::new()));\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Here is a link to rust play: <a href=\"http://is.gd/pjLheJ\" rel=\"nofollow\">http://is.gd/pjLheJ</a></p>\n\n<p>I have also tried the following, but got the same error:</p>\n\n<pre><code>meta.add(Box::new(MySubClass::new()) as Box&lt;SubClass&gt;);\n</code></pre>\n\n<p>Ideally if there is a way to do this with Rust's static dispatch that would be ideal, but I would be okay with dynamic dispatching as well. In each case I think it will make sense to have the MetaClass actually own the object of the subclass, so I don't want to pass a reference to it, but the entire object itself.</p>\n"}, {"tags": ["rust", "rustdoc"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1437641402, "post_id": 31582064, "comment_id": 51117836, "body": "there has been some discussion here: <a href=\"https://internals.rust-lang.org/t/rustdoc-link-to-other-types-from-doc-comments/968\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/&hellip;</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1437641527, "post_id": 31582064, "comment_id": 51117907, "body": "and an open rfc here: <a href=\"https://github.com/rust-lang/rfcs/issues/792\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/792</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 19, "creation_date": 1467802635, "post_id": 31702091, "comment_id": 63866750, "body": "This doesn&#39;t really answer the question, because I don&#39;t think there&#39;s a way to figure out the URL."}], "tags": [], "owner": {"reputation": 191, "user_id": 1219392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20fe6ba70d0ebe222406d38e14c314e6?s=128&d=identicon&r=PG", "display_name": "pczora", "link": "https://stackoverflow.com/users/1219392/pczora"}, "is_accepted": false, "score": 0, "last_activity_date": 1438177095, "creation_date": 1438177095, "answer_id": 31702091, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc/31702091#31702091", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p>Since the documentation is written in Markdown, just use the Markdown syntax for Hyperlinks; i.e.</p>\n\n<pre><code>[anchor text](URL)\n</code></pre>\n\n<p>Also, take a look at this: <a href=\"https://doc.rust-lang.org/book/documentation.html\" rel=\"nofollow\">https://doc.rust-lang.org/book/documentation.html</a></p>\n"}, {"comments": [{"owner": {"reputation": 2460, "user_id": 3359365, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Bt13o.jpg?s=128&g=1", "display_name": "Lanklaas", "link": "https://stackoverflow.com/users/3359365/lanklaas"}, "edited": false, "score": 1, "creation_date": 1573204830, "post_id": 38993391, "comment_id": 103813457, "body": "Relative paths work as well for objects in other modules:  [Point](../point/struct.Point.html)"}, {"owner": {"reputation": 1476, "user_id": 9383219, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97fabe5d903589acb1dfdf17fe4e405e?s=128&d=identicon&r=PG&f=1", "display_name": "cyclaminist", "link": "https://stackoverflow.com/users/9383219/cyclaminist"}, "edited": false, "score": 7, "creation_date": 1580850950, "post_id": 38993391, "comment_id": 106232053, "body": "The URL <code>[Point](&#47;crate_name&#47;model&#47;struct.Point.html)</code> seems not to work anymore, at least when I open docs on my filesystem. It links to <code>file:&#47;&#47;&#47;crate_name&#47;...</code>."}, {"owner": {"reputation": 3647, "user_id": 353178, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/28b6612d548d24ff57361dac58ac3fee?s=128&d=identicon&r=PG", "display_name": "mkirk", "link": "https://stackoverflow.com/users/353178/mkirk"}, "edited": false, "score": 1, "creation_date": 1603310220, "post_id": 38993391, "comment_id": 114000176, "body": "This answer is outdated. Though this still works, please see shepmaster&#39;s answer for an easier up-to-date approach: <a href=\"https://stackoverflow.com/a/53504254/353178\">stackoverflow.com/a/53504254/353178</a>"}], "tags": [], "owner": {"reputation": 570, "user_id": 1847862, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/542041c8119feab7c90d4888fb842779?s=128&d=identicon&r=PG", "display_name": "GenKali", "link": "https://stackoverflow.com/users/1847862/genkali"}, "is_accepted": true, "score": 44, "last_activity_date": 1607653927, "last_edit_date": 1607653927, "creation_date": 1471427762, "answer_id": 38993391, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc/38993391#38993391", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p><a href=\"https://stackoverflow.com/a/53504254/87234\">As of Rust 1.48, Rustdoc now supports direct intra-doc links.</a></p>\n<hr />\n<p><em>Pre Rust 1.48:</em></p>\n<p><code>Rustdoc</code> seems to generate mostly deterministic filenames for constituent elements of a crate. Therefore if you have an <code>enum</code> named <code>Complex</code> you can generally link to it using:</p>\n<pre class=\"lang-none prettyprint-override\"><code>[Complex](enum.Complex.html)\n</code></pre>\n<p>Similarly a <code>struct</code> called <code>Point</code> would look like:</p>\n<pre class=\"lang-none prettyprint-override\"><code>[Point](struct.Point.html)\n</code></pre>\n<p>This should carry over to most definitions (<code>fn</code>, <code>trait</code>, and so on).</p>\n<p>For referencing elements of a crate at different nesting levels, you can use relative paths (where each module is its own folder):</p>\n<pre class=\"lang-none prettyprint-override\"><code>[Point](../model/struct.Point.html)\n</code></pre>\n<p>or use absolute paths:</p>\n<pre class=\"lang-none prettyprint-override\"><code>[Point](/crate_name/model/struct.Point.html)\n</code></pre>\n<p>More of these &quot;conventions&quot;, including anchors for specific fields, etc., can be deduced if one builds docs (<code>cargo doc --no-deps --open</code>) and navigates to the field or item they want and takes note of the URL. Remember that only pub items are published to docs.</p>\n"}, {"tags": [], "owner": {"reputation": 3384, "user_id": 3805131, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/D2Gzu.jpg?s=128&g=1", "display_name": "tworec", "link": "https://stackoverflow.com/users/3805131/tworec"}, "is_accepted": false, "score": 6, "last_activity_date": 1584968818, "last_edit_date": 1584968818, "creation_date": 1543327276, "answer_id": 53501414, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc/53501414#53501414", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p>If one wants to link some specific part of a struct e.g., a method named <code>foo</code> in the same struct (using <em>stable</em> rust, not <em>nightly</em>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[foo](#method.foo)\n</code></pre>\n\n<p>or if it is in another struct</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[foo](struct.OtherStruct.html#method.foo)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2854, "user_id": 6923555, "user_type": "registered", "accept_rate": 62, "profile_image": "https://lh3.googleusercontent.com/-N8FUb3l8l44/AAAAAAAAAAI/AAAAAAAAAio/1HlhcKxsTPo/photo.jpg?sz=128", "display_name": "rodrigocfd", "link": "https://stackoverflow.com/users/6923555/rodrigocfd"}, "edited": false, "score": 0, "creation_date": 1607105430, "post_id": 53504254, "comment_id": 115177011, "body": "For absolute module paths, <code>[foo](crate::stuff::thing)</code> seems to work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2854, "user_id": 6923555, "user_type": "registered", "accept_rate": 62, "profile_image": "https://lh3.googleusercontent.com/-N8FUb3l8l44/AAAAAAAAAAI/AAAAAAAAAio/1HlhcKxsTPo/photo.jpg?sz=128", "display_name": "rodrigocfd", "link": "https://stackoverflow.com/users/6923555/rodrigocfd"}, "edited": false, "score": 0, "creation_date": 1607105487, "post_id": 53504254, "comment_id": 115177044, "body": "@rodrigocfd yes, that&#39;s <a href=\"https://doc.rust-lang.org/reference/paths.html#crate\" rel=\"nofollow noreferrer\">listed in the documentation I&#39;ve linked</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 84, "last_activity_date": 1605811177, "last_edit_date": 1605811177, "creation_date": 1543336787, "answer_id": 53504254, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc/53504254#53504254", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p>As of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1480-2020-11-19\" rel=\"noreferrer\">Rust 1.48</a>, you can now rely on <a href=\"https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html\" rel=\"noreferrer\">RFC 1946</a>. This adds the concept of intra-documentation links. This allows using <a href=\"https://doc.rust-lang.org/reference/paths.html\" rel=\"noreferrer\">Rust paths</a> as the URL of a link:</p>\n<blockquote>\n<ol>\n<li><code>[Iterator](std::iter::Iterator)</code></li>\n<li><code>[Iterator][iter]</code>, and somewhere else in the document: <code>[iter]: std::iter::Iterator</code></li>\n<li><code>[Iterator]</code>, and somewhere else in the document: <code>[Iterator]: std::iter::Iterator</code></li>\n</ol>\n</blockquote>\n<p>The RFC also introduces <a href=\"https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html#implied-shortcut-reference-links\" rel=\"noreferrer\">&quot;Implied Shortcut Reference Links&quot;</a>. This allows leaving out the link reference, which is then inferred automatically.</p>\n<blockquote>\n<ol>\n<li><code>[std::iter::Iterator]</code>, without having a link reference definition for Iterator anywhere else in the document</li>\n<li><code>[`std::iter::Iterator`]</code>, without having a link reference definition for Iterator anywhere else in the document (same as previous style but with back ticks to format link as inline code)</li>\n</ol>\n</blockquote>\n<hr />\n<p>As a concrete example, this source code:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>//! Check out [ExampleStruct], especially [this\n//! method](ExampleStruct::foo), but [the trait method][trait] is also\n//! cool. There is also [an enum variant you can\n//! use](nested::ExampleEnum::Beta).\n//!\n//! [trait]: ExampleTrait::bar\n\npub struct ExampleStruct;\n\nimpl ExampleStruct {\n    pub fn foo(&amp;self) {}\n}\n\npub trait ExampleTrait {\n    fn bar();\n}\n\npub mod nested {\n    pub enum ExampleEnum {\n        Alpha,\n        Beta,\n    }\n}\n</code></pre>\n<p>Produces this documentation:</p>\n<p><a href=\"https://i.stack.imgur.com/nvjTY.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nvjTY.png\" alt=\"example generated documentation\" /></a></p>\n<p>Specifically, this HTML is generated:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p&gt;Check out &lt;a href=&quot;../doc_link_example/struct.ExampleStruct.html&quot; title=&quot;ExampleStruct&quot;&gt;ExampleStruct&lt;/a&gt;, especially &lt;a href=&quot;../doc_link_example/struct.ExampleStruct.html#method.foo&quot;&gt;this method&lt;/a&gt;, but &lt;a href=&quot;../doc_link_example/trait.ExampleTrait.html#tymethod.bar&quot;&gt;the trait method&lt;/a&gt; is also cool. There is also &lt;a href=&quot;../doc_link_example/nested/enum.ExampleEnum.html#Beta.v&quot;&gt;an enum variant you can use&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 31, "user_id": 14510959, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/njSdG.jpg?s=128&g=1", "display_name": "DKomen", "link": "https://stackoverflow.com/users/14510959/dkomen"}, "is_accepted": false, "score": 1, "last_activity_date": 1603526786, "creation_date": 1603526786, "answer_id": 64511271, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc/64511271#64511271", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p>In Rust <strong>1.49 nightly</strong> it works (1.48 stable not released yet):</p>\n<ul>\n<li>[<code>super::structs::WebApiResponse</code>]</li>\n<li>[<code>mycrate::structs::WebApiResponse</code>]</li>\n</ul>\n<p>etc.</p>\n<p><a href=\"https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html\" rel=\"nofollow noreferrer\">Read here</a></p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11819, "favorite_count": 7, "accepted_answer_id": 38993391, "answer_count": 5, "score": 64, "last_activity_date": 1607653927, "creation_date": 1437640229, "last_edit_date": 1471436240, "question_id": 31582064, "link": "https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc", "title": "How to link to other fns/structs/enums/traits in rustdoc?", "body": "<p>I'm building a Rust library and want to give it some polish. In the rustdoc, I'd sometimes like to <em>link</em> to other parts of the library within the docs, e.g. <code>fn</code>s, <code>trait</code>s or <code>struct</code>s. What is the official syntax for this?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 0, "creation_date": 1437631680, "post_id": 31578458, "comment_id": 51112393, "body": "ah, yes.. i could spawn and detach another instance of the server, and then exit. that way the detached copy can ultimately bind to sane port when it becomes available. it assumes there&#39;s only one thread querying it - otherwise it kills everyone else too (ideally it would be good to finish the requests that have been accepted), and everything loaded into memory is lost. but i will accept this if there&#39;s no other possibility."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 0, "last_activity_date": 1437627476, "creation_date": 1437627476, "answer_id": 31578458, "question_id": 31577806, "link": "https://stackoverflow.com/questions/31577806/using-iron-framework-how-to-exit-the-listening-loop/31578458#31578458", "title": "Using iron framework, how to exit the listening loop?", "body": "<p>If all else fails, and no one can give you a better answer (in other words: this should be the option of last resort): <a href=\"http://doc.rust-lang.org/std/process/fn.exit.html\" rel=\"nofollow\"><code>std::process::exit</code></a> should do the trick, one way or another.  Keep in mind that this just immediately exits the process, so there's no cleanup done <em>at all</em>.</p>\n"}, {"comments": [{"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 0, "creation_date": 1437679107, "post_id": 31589035, "comment_id": 51144205, "body": "Thanks! Yes.. that was the way to do it. Side note though, cvar.notify_one(); makes it so the server response becomes empty - it shuts down without sending out the last response, but that&#39;s reasonable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1437658631, "creation_date": 1437658631, "answer_id": 31589035, "question_id": 31577806, "link": "https://stackoverflow.com/questions/31577806/using-iron-framework-how-to-exit-the-listening-loop/31589035#31589035", "title": "Using iron framework, how to exit the listening loop?", "body": "<p>One way of doing it is to set up messages between your handler and the thread that started the server. When the message is sent, the main thread can call <a href=\"http://ironframework.io/doc/hyper/server/struct.Listening.html#method.close\" rel=\"nofollow\"><code>Listening::close</code></a></p>\n\n<p>In this example, I used a <a href=\"http://doc.rust-lang.org/std/sync/struct.Condvar.html\" rel=\"nofollow\"><code>Condvar</code></a>. I'd expect you could also use a channel, but wasn't able to quickly copy and paste the example channel and get it working... ^_^</p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\n\nuse std::sync::{Arc, Mutex, Condvar};\n\nfn main() {\n    // Copied from docs\n    let pair = Arc::new((Mutex::new(false), Condvar::new()));\n    let pair2 = pair.clone();\n\n    let handler = move |_: &amp;mut Request| {\n        // Copied from docs\n        let &amp;(ref lock, ref cvar) = &amp;*pair2;\n        let mut should_exit = lock.lock().unwrap();\n        *should_exit = true;\n        cvar.notify_one();\n\n        Ok(Response::with((status::Ok, \"Hello World!\")))\n    };\n\n    // Hold onto the listener\n    let mut serv = Iron::new(handler).http(\"localhost:3210\").unwrap();\n\n    println!(\"Now listening...\");\n\n    // Copied from docs\n    let &amp;(ref lock, ref cvar) = &amp;*pair;\n    let mut should_exit = lock.lock().unwrap();\n    while !*should_exit {\n        should_exit = cvar.wait(should_exit).unwrap();\n    }\n\n    serv.close().unwrap();\n\n    println!(\"Exiting...\");\n}\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 558, "favorite_count": 0, "accepted_answer_id": 31589035, "answer_count": 2, "score": 4, "last_activity_date": 1437658631, "creation_date": 1437623120, "question_id": 31577806, "link": "https://stackoverflow.com/questions/31577806/using-iron-framework-how-to-exit-the-listening-loop", "title": "Using iron framework, how to exit the listening loop?", "body": "<p>I have a simple rest sort of skin around a large text file that I need to query interactively. It can involve a heavy compute so I used rust. I have put a simple restful skin with Iron. Note that I haven't done much with rust. This is just running on localhost. </p>\n\n<pre><code>pub fn query&lt;'a&gt;(parsed: &amp;'a Parsed, context:&amp;Context) -&gt; {\n  // parsed.keys is a hash containing config informtion\n  // context is what I query\n  let local_port = format!(\"{}:{}\", \"localhost\", parsed.keys[AS_SERVER]);\n  fn test_connect&lt;'a&gt;(r: &amp;'a mut Request, c:&amp;'a Context) -&gt; IronResult&lt;Response&gt; {\n    let url = r.url.to_string();\n    let result = // some logic\n    Ok(Response::with((status::Ok,  format!(\"requested=\\\"{}:{}\\\"\\n\", url, result))))\n  } \n  let mut router = Router::new();\n  router.get(\"*\", move |r: &amp;mut Request| test_connect(r, &amp;context));\n  let connection_status = Iron::new(router).http(&amp;local_port[..]);\n  connection_status.ok().expect(\"could not connect\");\n} \n</code></pre>\n\n<p>Now my question is how do I get control to return out of the listening loop in </p>\n\n<pre><code>Iron::new(router).http(&amp;local_port[..]);\n</code></pre>\n\n<p>I just want to say <code>curl http://localhost/done</code></p>\n\n<p>and have the listen function exit and so some logging and and move on. Is this possible to do this? I have tried panic-ing, but even that won't exit the listening loop?</p>\n\n<p>I tried returning something like <code>Err(IronError::new(StringError(url),status::ServiceUnavailable))</code></p>\n\n<p>That <code>status::ServiceUnavailable</code> is just something random - it needed something: I know it's not semantically correct, not sure what to use. But the error doesn't have any handler on it, so it goes away silently. </p>\n\n<p>I suppose I will set something up with aftermiddleware, but I don't know what?</p>\n"}, {"tags": ["process", "command", "pipe", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "edited": false, "score": 0, "creation_date": 1437673745, "post_id": 31577297, "comment_id": 51140977, "body": "Thanks very much! All really useful advice and observations. With regard to figuring out when to stop reading from the <code>BufReader</code>, though, why is it that trying to simply call <code>child_out.lines().count()</code> or <code>for l in child_out.lines()</code> within the loop gives me a <code>use of moved value: child_out</code> error? Why can I ask the <code>BufReader</code> for one line, but not for all of them? Am I misunderstanding how iterators work here?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "edited": false, "score": 0, "creation_date": 1437674851, "post_id": 31577297, "comment_id": 51141672, "body": "@John not how iterators work, but how the <code>self</code> parameter works on those methods. Check out <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count\" rel=\"nofollow noreferrer\"><code>count</code></a> to see that it takes <code>self</code> by value, which consumes the underlying iterator, same as <a href=\"http://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines\" rel=\"nofollow noreferrer\"><code>lines</code></a>. Calling <code>count</code> wouldn&#39;t make sense anyway, as you&#39;d have to read <i>all</i> of the process output in order to get the count, by which time all the data would have been thrown away."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1557935790, "last_edit_date": 1557935790, "creation_date": 1437619278, "answer_id": 31577297, "question_id": 31576555, "link": "https://stackoverflow.com/questions/31576555/unable-to-pipe-to-or-from-spawned-child-process-more-than-once/31577297#31577297", "title": "Unable to pipe to or from spawned child process more than once", "body": "<p><a href=\"http://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"noreferrer\"><code>read_to_string</code></a> is documented as</p>\n\n<blockquote>\n  <p>Read all bytes until EOF in this source</p>\n</blockquote>\n\n<p>Thus, it is waiting until all the input is done, which will never happen until the shell is closed. You can fix this by reading a set amount of data from the output. Here's an example where I removed all the nice error printing you had to show the core of the solution:</p>\n\n<pre><code>use std::process::{Command, Stdio};\nuse std::io::{BufRead, Write, BufReader};\n\nfn main() {\n    let mut child_shell = Command::new(\"/bin/bash\")\n        .stdin(Stdio::piped())\n        .stdout(Stdio::piped())\n        .spawn()\n        .unwrap();\n\n    let child_in = child_shell.stdin.as_mut().unwrap();\n    let mut child_out = BufReader::new(child_shell.stdout.as_mut().unwrap());\n    let mut line = String::new();\n\n    loop {\n        child_in.write(\"ls\\n\".as_bytes()).unwrap();\n        child_out.read_line(&amp;mut line).unwrap();\n        println!(\"{}\", line);\n    }\n}\n</code></pre>\n\n<p>Here, we use the <a href=\"http://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line\" rel=\"noreferrer\"><code>BufRead</code></a> trait to allow reading from the input until we have read one line worth. We then print that out and continue on our loop. Of course, there's more than one line of output per line of input, so this will just have more and more waiting to be read.</p>\n\n<p>In your real code, you will need to have to figure out when to stop reading. This could be really easy if you have fixed-size responses, or really hard if you are trying to deal with a human-interactive program. </p>\n\n<p>Be careful about using <code>child_shell.stdin</code> or <code>stdout</code> directly, without an <code>Option::as_ref</code>, <code>Option::as_mut</code> or <code>Option::take</code>. Using <code>stdin</code> or <code>stdout</code> directly will move that item out of the <code>Child</code> structure, leaving the <code>Child</code> partially valid. You would no longer be able to call <code>wait</code> or <code>kill</code> on it for example.</p>\n\n<p>On an unrelated note, you don't need to call trait methods like <code>Error::description(&amp;why)</code>. You can just say <code>why.description()</code>.</p>\n"}], "owner": {"reputation": 177, "user_id": 5145788, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/axh1r.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/5145788/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1902, "favorite_count": 3, "accepted_answer_id": 31577297, "answer_count": 1, "score": 13, "last_activity_date": 1557935790, "creation_date": 1437613571, "last_edit_date": 1511194886, "question_id": 31576555, "link": "https://stackoverflow.com/questions/31576555/unable-to-pipe-to-or-from-spawned-child-process-more-than-once", "title": "Unable to pipe to or from spawned child process more than once", "body": "<p>I want to be able to use Rust to spawn a child shell, then repeatedly pass it arbitrary commands and process their outputs. I have found plenty of examples online showing me how to pass a single command and receive its single output, but I can't seem to be able to do it repeatedly.</p>\n\n<p>For instance, the following code hangs on the line after the comment. (I imagine maybe <code>read_to_string()</code> is blocking until it receives stdout from the child process, but if so I don't understand why that output isn't forthcoming..)</p>\n\n<pre><code>let mut child_shell = match Command::new(\"/bin/bash\")\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .spawn()\n{\n    Err(why) =&gt; panic!(\"couldn't spawn child_shell: {}\", Error::description(&amp;why)),\n    Ok(process) =&gt; process,\n};\n\nloop {\n    {\n        match child_shell.stdin.as_mut().unwrap().write(\"ls\".as_bytes()) {\n            Err(why) =&gt; panic!(\n                \"couldn't send command to child shell: {}\",\n                Error::description(&amp;why)\n            ),\n            Ok(_) =&gt; println!(\"sent command to child shell\"),\n        }\n    }\n\n    {\n        let mut s = String::new();\n        // \u2193 hangs on this line \u2193\n        match child_shell.stdout.as_mut().unwrap().read_to_string(&amp;mut s) {\n            Err(why) =&gt; panic!(\"couldn't read bash stdout: {}\", Error::description(&amp;why)),\n            Ok(_) =&gt; print!(\"bash responded with:\\n{}\", s),\n        }\n    }\n}\n</code></pre>\n\n<p>I'm a beginner in Rust and I think the problem is my limited understanding of the borrow-checker/referencing rules, since the above runs fine (for a single iteration) if I remove the loop instruction from the code and change the references to the innards of the <code>std::process::Child</code> struct to immutable; for instance from this:</p>\n\n<pre><code>child_shell.stdin.as_mut().unwrap().write(\"ls\".as_bytes())\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code> child_shell.stdin.unwrap().write(\"ls\".as_bytes())\n</code></pre>\n\n<p>Obviously, repeatedly running <code>ls</code> isn't my ultimate goal, and I know that I could just write a shell script and then have Rust repeatedly run it - but (apart from the goal of just learning more about Rust!) this is something I need to be able to do, at least in principle, for a more complicated project (which I'm happy to go into if it might prove relevant to any solutions, but it's probably way, way outside the scope of this question!)</p>\n\n<p>Finally, if it turns out that it isn't possible to use a child shell in this way, I'd nevertheless like to learn how to repeatedly/continuously pipe to and from a spawned process running some other arbitrary command, as I wasn't able to find any info in the Rust documentation, tutorials or on Stack Overflow.</p>\n"}]