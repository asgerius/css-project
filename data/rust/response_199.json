[{"tags": ["rust", "glsl", "shader", "vulkan", "spir-v"], "comments": [{"owner": {"reputation": 3529, "user_id": 2036035, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/746fc48544cf535f52f1247079e5a927?s=128&d=identicon&r=PG", "display_name": "hythis", "link": "https://stackoverflow.com/users/2036035/hythis"}, "edited": false, "score": 0, "creation_date": 1541091545, "post_id": 53092022, "comment_id": 93107075, "body": "in c++ you just embedd the GLSL -&gt; SPRIV compiler into your program, I&#39;m not sure if this is what you want or how to do this in rust."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1579878847, "post_id": 59898729, "comment_id": 105925553, "body": "Can you <a href=\"https://stackoverflow.com/posts/59898729/edit\">edit</a> your answer to more clearly demonstrate how it answers the question about compiling a <b>Vulkano shader</b>? It appears that you are not using Vulkano at all."}, {"owner": {"reputation": 50, "user_id": 10854888, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PVJ16.png?s=128&g=1", "display_name": "koral", "link": "https://stackoverflow.com/users/10854888/koral"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1579896900, "post_id": 59898729, "comment_id": 105933261, "body": "I am not using Vulkano at all, that&#39;s true. The way to compile the shader using <code>shaderc</code> instead of <code>glsl-to-spirv</code> (I assume) should be very similar. I can delete if you feel it&#39;s unsatisfactory, I just assumed any answer was better than no answer."}], "tags": [], "owner": {"reputation": 50, "user_id": 10854888, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PVJ16.png?s=128&g=1", "display_name": "koral", "link": "https://stackoverflow.com/users/10854888/koral"}, "is_accepted": false, "score": 0, "last_activity_date": 1579877279, "creation_date": 1579877279, "answer_id": 59898729, "question_id": 53092022, "link": "https://stackoverflow.com/questions/53092022/is-it-possible-to-compile-a-vulkano-shader-at-runtime/59898729#59898729", "title": "Is it possible to compile a Vulkano shader at runtime?", "body": "<p>I'm using wgpu, I've made my device, render_pipeline multithreaded like this:</p>\n\n<pre><code>let rx = Arc::new(Mutex::new(rx));\nlet window = Arc::new(Mutex::new(window));\nlet fs = Arc::new(Mutex::new(fs));\nlet fs_module = Arc::new(Mutex::new(fs_module));\nlet render_pipeline = Arc::new(Mutex::new(render_pipeline));\nlet device = Arc::new(Mutex::new(device));\n</code></pre>\n\n<p>used <code>notify</code> to listen to change events:</p>\n\n<pre><code>notify = \"4.0.15\"\n</code></pre>\n\n<pre><code>use notify::{RecommendedWatcher, Watcher, RecursiveMode};\n//mainxx\nlet (tx, rx) = mpsc::channel();\nlet mut watcher: RecommendedWatcher =\n    Watcher::new(tx, Duration::from_millis(500)).unwrap();\n\nlog::info!(\"Starting watcher on {:?}\", *FRAG_SHADER_PATH);\nwatcher.watch((*FRAG_SHADER_PATH).clone(), RecursiveMode::NonRecursive).unwrap();\n</code></pre>\n\n<p>Then spawn a thread that listens to changes:</p>\n\n<pre><code>thread::spawn(move || {\n    log::info!(\"Shader watcher thread spawned\");\n    loop {\n        if let Ok(notify::DebouncedEvent::Write(..)) = rx.lock().unwrap().recv() {\n            log::info!(\"Write event in fragment shader\");\n            window.lock().unwrap().set_title(\"Loading shader.frag...\");\n            *fs.lock().unwrap() = load_fs().unwrap();\n            *fs_module.lock().unwrap() = load_fs_module(Arc::clone(&amp;device), &amp;Arc::clone(&amp;fs).lock().unwrap());\n            *render_pipeline.lock().unwrap() = create_render_pipeline_multithreaded(Arc::clone(&amp;device), Arc::clone(&amp;fs_module));\n            render.lock().unwrap().deref_mut()();\n            window.lock().unwrap().set_title(TITLE);\n        };\n    }\n});\n</code></pre>\n\n<p>where <code>load_fs</code> is a closure that uses <code>glsl_to_spirv</code>:</p>\n\n<pre><code>let load_fs = move || -&gt; Result&lt;Vec&lt;u32&gt;, std::io::Error&gt; {\n    log::info!(\"Loading fragment shader\");\n    let mut buffer = String::new();\n    let mut f = File::open(&amp;*FRAG_SHADER_PATH)?;\n    f.read_to_string(&amp;mut buffer)?;\n\n    // Load fragment shader\n    wgpu::read_spirv(\n        glsl_to_spirv::compile(\n            &amp;buffer,\n            glsl_to_spirv::ShaderType::Fragment\n        ).expect(\"Compilation failed\")\n    )\n};\n</code></pre>\n"}], "owner": {"reputation": 582, "user_id": 104324, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/Xyb3Y.png?s=128&g=1", "display_name": "Oni", "link": "https://stackoverflow.com/users/104324/oni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1529, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1579878770, "creation_date": 1541020311, "last_edit_date": 1579878770, "question_id": 53092022, "link": "https://stackoverflow.com/questions/53092022/is-it-possible-to-compile-a-vulkano-shader-at-runtime", "title": "Is it possible to compile a Vulkano shader at runtime?", "body": "<p>I've been using Vulkano in order to get some simple 3D graphics going on. Generally, I like to write my GLSL shaders in text and restart my program, or even changing shaders while the program is running. The examples given in Vulkano appear to use a macro to convert the GLSL to some form of SPIR-V based shader with Rust functions attached, but the GLSL is actually compiled into the binary (even when using a path to a file).</p>\n\n<p>I've managed to get the crate shaderc to build my SPIR-V on the fly:</p>\n\n<pre><code>let mut f = File::open(\"src/grafx/vert.glsl\")\n         .expect(\"Can't find file src/bin/runtime-shader/vert.glsl \n                This example needs to be run from the root of the example crate.\");\n\n let mut source = String::new();\n f.read_to_string(&amp;mut source);\n\n //let source = \"#version 310 es\\n void EP() {}\";\n let mut compiler = shaderc::Compiler::new().unwrap();\n let mut options = shaderc::CompileOptions::new().unwrap();\n options.add_macro_definition(\"EP\", Some(\"main\"));\n let binary_result = compiler.compile_into_spirv(\n &amp;source, shaderc::ShaderKind::Vertex,\n \"shader.glsl\", \"main\", Some(&amp;options)).unwrap();\n assert_eq!(Some(&amp;0x07230203), binary_result.as_binary().first());\n\n let text_result = compiler.compile_into_spirv_assembly(\n     &amp;source, shaderc::ShaderKind::Vertex,\n     \"shader.glsl\", \"main\", Some(&amp;options)).unwrap();\n\n assert!(text_result.as_text().starts_with(\"; SPIR-V\\n\"));\n //println!(\"Compiled Vertex Shader: {}\", text_result.as_text());\n\n let vert_spirv = { \n     unsafe { ShaderModule::new(device.clone(), binary_result.as_binary_u8()) }.unwrap()\n };\nvert_spirv\n</code></pre>\n\n<p>So far, so good, we have a <code>ShaderModule</code> which seems to be the first step. However, we we actually need is a <code>GraphicsEntryPoint</code> which we can then put into our <code>GraphicsPipeline</code>. Apparently, <code>GraphicsPipeline</code> is where we string together our shaders, triangles and depth maps and all that lovely stuff.</p>\n\n<p>Trouble is, I've no idea what is going on with the code that performs this feat:</p>\n\n<pre><code>pub fn shade_vertex &lt;'a, S&gt; (vert_spirv: &amp;'a Arc&lt;ShaderModule&gt;) -&gt;\n\n GraphicsEntryPoint&lt;'a, S, VertInput, VertOutput, VertLayout&gt;  {\n let tn = unsafe {\n     vert_spirv.graphics_entry_point(\n         CStr::from_bytes_with_nul_unchecked(b\"main\\0\"),\n         VertInput,\n         VertOutput,\n         VertLayout(ShaderStages { vertex: true, ..ShaderStages::none() }),\n         GraphicsShaderType::Vertex\n     )\n };\n tn\n}\n</code></pre>\n\n<p>Specifically, what is <code>VertInput</code> and <code>VertOutput</code>? I've copied them <a href=\"https://github.com/vulkano-rs/vulkano/blob/ef84101ef586ab29c8facede99b3186dbf94507c/examples/src/bin/runtime-shader/main.rs\" rel=\"nofollow noreferrer\">from the example</a>.</p>\n\n<p>This is the closest example I could find that deals with loading <code>Shader</code>s on the fly. It <em>looks</em> like <code>Input</code> and <code>Output</code> are looking for entry points into the SPIR-V or something but I've no idea what to do with that. I'm hoping there is a function somewhere in the existing macro that will just take care of this for me. I've gotten this far but I seem a little stuck. </p>\n\n<p>Has anyone else tried loading shaders at runtime?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1541012199, "post_id": 53090205, "comment_id": 93077423, "body": "Why do you believe that you <i>can</i>?"}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1541012930, "post_id": 53090205, "comment_id": 93077726, "body": "Well, my assumption was that if an Any stored a value it also stored that values TypeId. Does it not? My assumption was I could store an Any and retrieve the TypeId of the internal Any&#39;s stored value."}], "answers": [{"comments": [{"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 0, "creation_date": 1541014209, "post_id": 53090641, "comment_id": 93078286, "body": "Man I should&#39;ve tried that. Believe it or not, I thought the dereference operator was only valid on pointers. Thanks a ton!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 0, "creation_date": 1541014310, "post_id": 53090641, "comment_id": 93078339, "body": "@DavidBittner it&#39;s valid on anything that implements <code>Deref</code>. See <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-02-deref.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> for more."}, {"owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "edited": false, "score": 0, "creation_date": 1541014630, "post_id": 53090641, "comment_id": 93078501, "body": "Yeah, should&#39;ve figured. I tend to blank on traits allowing operator overloading."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1541013988, "creation_date": 1541013988, "answer_id": 53090641, "question_id": 53090205, "link": "https://stackoverflow.com/questions/53090205/how-can-you-get-the-typeid-of-the-inner-value-of-a-rc-or-boxed-value-not-the-ty/53090641#53090641", "title": "How can you get the TypeId of the inner value of a Rc or Boxed value, not the TypeId of the enclosing type?", "body": "<p>Explicitly dereference the wrapping type:</p>\n\n<pre><code>(*temp).get_type_id()\n</code></pre>\n"}], "owner": {"reputation": 505, "user_id": 2507054, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b93ba5c0e4829faafbf3c30389a8c6d2?s=128&d=identicon&r=PG", "display_name": "DavidBittner", "link": "https://stackoverflow.com/users/2507054/davidbittner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "accepted_answer_id": 53090641, "answer_count": 1, "score": 1, "last_activity_date": 1541013988, "creation_date": 1541012011, "last_edit_date": 1541013656, "question_id": 53090205, "link": "https://stackoverflow.com/questions/53090205/how-can-you-get-the-typeid-of-the-inner-value-of-a-rc-or-boxed-value-not-the-ty", "title": "How can you get the TypeId of the inner value of a Rc or Boxed value, not the TypeId of the enclosing type?", "body": "<p>I'm using an associative list to associate <code>TypeId</code>s of event-types and <code>TypeId</code>s of who wants to receive them.</p>\n\n<p>When I attempt to get the <code>TypeId</code> of an <code>Rc&lt;Any&gt;</code>, it gives you the same <code>TypeId</code> (the one of the <code>Rc</code> storing an <code>Any</code>) no matter what the <code>Any</code> is.</p>\n\n<pre><code>#![feature(get_type_id)]\n\nuse std::any::*;\nuse std::rc::Rc;\n\nfn main() {\n    let temp: Rc&lt;Any&gt; = Rc::new(13);\n    let temp2: &amp;Any = &amp;5;\n\n    assert_eq!(temp.get_type_id(), temp2.get_type_id()); //fails!\n}\n</code></pre>\n\n<p>How can I get the <code>TypeId</code> of the associated <code>Any</code> on the inside?</p>\n\n<p>I believe that <code>Rc&lt;_&gt;</code> implements the <code>Deref</code> trait as well as the <code>Any</code> trait. This means that you can dereference the <code>Rc</code> and call functions in the internal reference. It also means that the <code>Rc</code> has it's own associated <code>TypeId</code>. I'm not looking for the <code>TypeId</code> of the <code>Rc</code>, I'm looking for the <code>TypeId</code> from the dereferenced <code>Any</code>.</p>\n"}, {"tags": ["windows", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 25, "user_id": 4805800, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/222bd8e7e6a3f136f9d54e178d1c2555?s=128&d=identicon&r=PG&f=1", "display_name": "user212889", "link": "https://stackoverflow.com/users/4805800/user212889"}, "edited": false, "score": 0, "creation_date": 1542117319, "post_id": 53282598, "comment_id": 93446764, "body": "Yeah I already figured it out."}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1542117266, "creation_date": 1542117266, "answer_id": 53282598, "question_id": 53088265, "link": "https://stackoverflow.com/questions/53088265/how-do-i-automatically-find-all-dynamic-libraries-my-rust-program-uses-and-put/53282598#53282598", "title": "How do I automatically find all dynamic libraries my Rust program uses (and put them into one directory)?", "body": "<p>It's not specific to Rust. For Windows, you'll find the tools in this answer: <a href=\"https://stackoverflow.com/questions/475148/how-do-i-find-out-which-dlls-an-executable-will-load\">How do I find out which dlls an executable will load?</a></p>\n"}], "owner": {"reputation": 25, "user_id": 4805800, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/222bd8e7e6a3f136f9d54e178d1c2555?s=128&d=identicon&r=PG&f=1", "display_name": "user212889", "link": "https://stackoverflow.com/users/4805800/user212889"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 228, "favorite_count": 0, "closed_date": 1542295370, "answer_count": 1, "score": -1, "last_activity_date": 1542117266, "creation_date": 1541003976, "last_edit_date": 1541105739, "question_id": 53088265, "link": "https://stackoverflow.com/questions/53088265/how-do-i-automatically-find-all-dynamic-libraries-my-rust-program-uses-and-put", "closed_reason": "Duplicate", "title": "How do I automatically find all dynamic libraries my Rust program uses (and put them into one directory)?", "body": "<p>I am building a Rust application that uses the <a href=\"https://crates.io/crates/iui\" rel=\"nofollow noreferrer\">iui crate</a>.</p>\n\n<p>When I click the executable after doing <code>cargo build</code>, I get an error saying that the DLL isn't in the path. I did put the DLL in the path to see if it worked and it did but it opened a command window with the GUI which it doesn't do that when I run <code>cargo run</code>. </p>\n\n<p>I don't know a lot about how Rust builds executables and I don't know where Rust keeps the dependencies so I would like to know how I can get all my dependencies in a single path. Having something that can grab all the dependencies for me would be nice because the dependency has other dependencies that I probably need to add and I really don't know what they are.</p>\n\n<p>I plan on making an installer for my Rust application and I will need all of the dependencies for it to work.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 830, "user_id": 3454650, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6ccec193e74c155b5575cf893799e694?s=128&d=identicon&r=PG&f=1", "display_name": "spanishgum", "link": "https://stackoverflow.com/users/3454650/spanishgum"}, "edited": false, "score": 0, "creation_date": 1602178638, "post_id": 53085395, "comment_id": 113645823, "body": "Thanks, this helped me. I would like to know if it&#39;s possible to restrict the type with a trait, like <code>type Output impl CustomOutput</code>? Is that what you would call a generic associated type? I see a tracking issue for this github so I&#39;m wondering if it&#39;s just not possible."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 19, "last_activity_date": 1591612551, "last_edit_date": 1591612551, "creation_date": 1540995125, "answer_id": 53085395, "question_id": 53085270, "link": "https://stackoverflow.com/questions/53085270/how-do-i-implement-a-trait-with-a-generic-method/53085395#53085395", "title": "How do I implement a trait with a generic method?", "body": "<p>Type parameters in functions and methods are <em>universal</em>. This means that for all trait implementers, <code>Trait::method&lt;T&gt;</code> must be implemented for any <code>T</code> with the exact same constraints as those indicated by the trait (in this case, the constraint on <code>T</code> is only the implicit <code>Sized</code>).</p>\n\n<p>The compiler's error message that you indicated suggests that it was still expecting the parameter type <code>T</code>. Instead, your <code>Struct</code> implementation is assuming that <code>T = u8</code>, which is incorrect. The type parameter is decided by the caller of the method rather than the implementer, so <code>T</code> might not always be <code>u8</code>.</p>\n\n<p>If you wish to let the implementer choose a specific type, that has to be materialized in an associated type instead.</p>\n\n<pre><code>trait Trait {\n    type Output;\n\n    fn method(&amp;self) -&gt; Self::Output;\n}\n\nstruct Struct;\n\nimpl Trait for Struct {\n    type Output = u8;\n\n    fn method(&amp;self) -&gt; u8 {\n        16\n    }\n}\n</code></pre>\n\n<p>Read also this section of <em>The Rust Programming Language</em>: <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"nofollow noreferrer\">Specifying placeholder types in trait definitions with associated types</a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32551177\">&quot;Expected type parameter&quot; error in the constructor of a generic struct</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type\">When is it appropriate to use an associated type versus a generic type?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 60850, "user_id": 221955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG", "display_name": "Michael Anderson", "link": "https://stackoverflow.com/users/221955/michael-anderson"}, "is_accepted": false, "score": 1, "last_activity_date": 1616682080, "last_edit_date": 1616682080, "creation_date": 1616653384, "answer_id": 66794115, "question_id": 53085270, "link": "https://stackoverflow.com/questions/53085270/how-do-i-implement-a-trait-with-a-generic-method/66794115#66794115", "title": "How do I implement a trait with a generic method?", "body": "<p>In addition to the method using an associated type, from <a href=\"https://stackoverflow.com/a/53085395\">this answer</a>, you can also add the generic to the trait.</p>\n<pre><code>trait Trait&lt;T&gt; {\n    fn method(&amp;self) -&gt; T;\n}\n\nimpl Trait&lt;u8&gt; for Struct {\n    fn method(&amp;self) -&gt; u8 {\n        16\n    }\n}\n</code></pre>\n<p>You use the &quot;associated type&quot; way when there is only one logical form of the trait to use. You can use the generic trait when there is more than one output type that makes sense, for example this is legal:</p>\n<pre><code>struct Struct;\n\ntrait Trait&lt;T&gt; {\n    fn method(&amp;self) -&gt; T;\n}\n\nimpl Trait&lt;u8&gt; for Struct {\n    fn method(&amp;self) -&gt; u8 {\n        16\n    }\n}\n\nimpl Trait&lt;String&gt; for Struct {\n    fn method(&amp;self) -&gt; String {\n        &quot;hello&quot;.to_string()\n    }\n}\n\nfn main() {\n    let s = Struct;\n    let a: u8 = s.method();\n    let b: String = s.method();\n    println!(&quot;a={}, b={}&quot;, a, b);\n}\n</code></pre>\n<p>As far as I know, you can not do this with a trait based on associated types.</p>\n"}], "owner": {"reputation": 81, "user_id": 9130732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8cf3c304c2cbb5e60139ac08cab54822?s=128&d=identicon&r=PG&f=1", "display_name": "baist", "link": "https://stackoverflow.com/users/9130732/baist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3501, "favorite_count": 0, "accepted_answer_id": 53085395, "answer_count": 2, "score": 7, "last_activity_date": 1616682080, "creation_date": 1540994638, "last_edit_date": 1541000861, "question_id": 53085270, "link": "https://stackoverflow.com/questions/53085270/how-do-i-implement-a-trait-with-a-generic-method", "title": "How do I implement a trait with a generic method?", "body": "<p>I'm trying to implement a trait which contains a generic method.</p>\n\n<pre><code>trait Trait {\n    fn method&lt;T&gt;(&amp;self) -&gt; T;\n}\n\nstruct Struct;\n\nimpl Trait for Struct {\n    fn method(&amp;self) -&gt; u8 {\n        return 16u8;\n    }\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0049]: method `method` has 0 type parameters but its trait declaration has 1 type parameter\n --&gt; src/lib.rs:8:5\n  |\n2 |     fn method&lt;T&gt;(&amp;self) -&gt; T;\n  |     ------------------------- expected 1 type parameter\n...\n8 |     fn method(&amp;self) -&gt; u8 {\n  |     ^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n</code></pre>\n\n<p>How should I write the <code>impl</code> block correctly?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540969739, "post_id": 53077599, "comment_id": 93053536, "body": "I think that give an exemple with flush that do nothing and enabled who just return <code>true</code> is better that show some strange if else condition with <code>unimplement!()</code>"}, {"owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540970006, "post_id": 53077599, "comment_id": 93053631, "body": "Perhaps you&#39;re right, I just wanted to explicitly mark the places we&#39;re not using for now. It&#39;s just a question of habit, I think."}, {"owner": {"reputation": 1659, "user_id": 3113419, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/f2dc3f344d5931dfa7d2af17520f6e87?s=128&d=identicon&r=PG&f=1", "display_name": "kkpoon", "link": "https://stackoverflow.com/users/3113419/kkpoon"}, "edited": false, "score": 0, "creation_date": 1540970663, "post_id": 53077599, "comment_id": 93053889, "body": "Thanks! And I am impressed by the threads safe compilation error :D"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1540975020, "post_id": 53077599, "comment_id": 93055806, "body": "<code>Mutex&lt;Cell&lt;i64&gt;&gt;</code> \u2190 There&#39;s no need to wrap a Cell inside the Mutex, <code>Mutex&lt;i64&gt;</code> is sufficient. You update the counter using <code>*seq += 1</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1541085254, "post_id": 53077599, "comment_id": 93103506, "body": "Your addition will result in multiple logs having the same sequence if there is any concurrency (A reads 1, B reads 1, A set to 1+1, B set to 1+1); use <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicIsize.html#method.fetch_add\" rel=\"nofollow noreferrer\"><code>fetch_add</code></a> instead."}, {"owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1541126628, "post_id": 53077599, "comment_id": 93119042, "body": "Thanks, fixed. Didn&#39;t work with atomics myself before, unhappily."}, {"owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1541127863, "post_id": 53077599, "comment_id": 93119262, "body": "One more mistake found, and it&#39;ll be fair of me to make this post community wiki, it seems :) Thanks, fixed."}], "tags": [], "owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "is_accepted": true, "score": 7, "last_activity_date": 1541127798, "last_edit_date": 1541127798, "creation_date": 1540967693, "answer_id": 53077599, "question_id": 53077267, "link": "https://stackoverflow.com/questions/53077267/how-do-i-have-internal-state-for-a-custom-logger-which-only-takes-self/53077599#53077599", "title": "How do I have internal state for a custom logger which only takes &amp;self?", "body": "<p>It seems that the <code>logger</code> crate doesn't intend for loggers to have any internal state, so it forces them to be shared as immutable. This easies things a lot, in fact, since a logger should usually be shared between threads and used simultaneously, and that's not possible with <code>&amp; mut self</code>.</p>\n\n<p>However, there's a usual workaround: interior mutability. There's a type <code>std::cell::Cell</code> designed exactly for that use case: to have a immutable reference to something that should be mutable. Your internal state is simply an integer, so it's <code>Copy</code>, and we can just try to use <code>Cell</code> as-is:</p>\n\n<pre><code>extern crate log; // 0.4.5\nuse log::*;\nuse std::cell::Cell;\n\nstruct SeqLogger {\n    seq: Cell&lt;i64&gt;,\n}\n\nimpl Log for SeqLogger {\n\n    fn log(&amp;self, record: &amp;Record) {\n        println!(\"[{}] {}\", self.seq.get(), record.args());\n        self.seq.set(self.seq.get() + 1);\n    }\n\n    fn enabled(&amp;self, metadata: &amp;Metadata) -&gt; bool { if false {true} else {unimplemented!()} }\n\n    fn flush(&amp;self) { unimplemented!(); }\n\n}\n</code></pre>\n\n<p>However, the compiler immediately becomes angry again:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `std::cell::Cell&lt;i64&gt;` cannot be shared between threads safely\n --&gt; src/lib.rs:9:6\n  |\n9 | impl Log for SeqLogger {\n  |      ^^^ `std::cell::Cell&lt;i64&gt;` cannot be shared between threads safely\n  |\n  = help: within `SeqLogger`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell&lt;i64&gt;`\n  = note: required because it appears within the type `SeqLogger`\n</code></pre>\n\n<p>This makes sence, since, as I said before, the logger itself must be <code>Sync</code>, so we must guarantee that it's safe to share its contents too. At the same time, <code>Cell</code> is not <code>Sync</code> - exactly because of the interior mutability we're using here. Again, there's a usual way to fix it - <code>Mutex</code>:</p>\n\n<pre><code>extern crate log; // 0.4.5\nuse log::*;\nuse std::cell::Cell;\nuse std::sync::Mutex;\n\nstruct SeqLogger {\n    seq: Mutex&lt;Cell&lt;i64&gt;&gt;,\n}\n\nimpl Log for SeqLogger {\n\n    fn log(&amp;self, record: &amp;Record) {\n        let seq = self.seq.lock().unwrap(); // perhaps replace this with match in production\n        println!(\"[{}] {}\", seq.get(), record.args());\n        seq.set(seq.get() + 1);\n    }\n\n    fn enabled(&amp;self, metadata: &amp;Metadata) -&gt; bool { if false {true} else {unimplemented!()} }\n\n    fn flush(&amp;self) { unimplemented!(); }\n\n}\n</code></pre>\n\n<p>Now it compiles just fine.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=8ad50635619bc1edce238f1daa9c0397\" rel=\"nofollow noreferrer\">Playground with the last variant</a></p>\n\n<hr>\n\n<p>EDIT: According to comments, we can strip one layer of indirection, since <code>Mutex</code> grants us both the internal mutability (sort of) and the <code>Sync</code>ability. So we can remove the <code>Cell</code> and dreference the <code>MutexGuard</code> directly:</p>\n\n<pre><code>// --snip--\nfn log(&amp;self, record: &amp;Record) {\n    let mut seq = self.seq.lock().unwrap(); // perhaps replace this with match in production\n    println!(\"[{}] {}\", *seq, record.args());\n    *seq = *seq + 1;\n}\n// --snip--\n</code></pre>\n\n<p>And furthermore, since our state is just an integer, we can use <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicIsize.html\" rel=\"nofollow noreferrer\">a standard atomic type</a> instead of <code>Mutex</code>. Note that <code>AtomicI64</code> is unstable, so you might want to use <code>AtomicIsize</code> or <code>AtomicUsize</code> instead:</p>\n\n<pre><code>use std::sync::atomic::{AtomicIsize, Ordering};\n\nstruct SeqLogger {\n    seq: AtomicIsize,\n}\n\nimpl Log for SeqLogger {\n\n    fn log(&amp;self, record: &amp;Record) {\n        let id = self.seq.fetch_add(1, Ordering::SeqCst);\n        println!(\"[{}] {}\", id, record.args());\n    }\n    // --snip--\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=be7f02399047b0b885ec6518bf384c9f\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 1659, "user_id": 3113419, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/f2dc3f344d5931dfa7d2af17520f6e87?s=128&d=identicon&r=PG&f=1", "display_name": "kkpoon", "link": "https://stackoverflow.com/users/3113419/kkpoon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "accepted_answer_id": 53077599, "answer_count": 1, "score": 6, "last_activity_date": 1541127798, "creation_date": 1540966165, "last_edit_date": 1540996116, "question_id": 53077267, "link": "https://stackoverflow.com/questions/53077267/how-do-i-have-internal-state-for-a-custom-logger-which-only-takes-self", "title": "How do I have internal state for a custom logger which only takes &amp;self?", "body": "<p>I'm trying to implement a simple logger by implementing the <a href=\"https://docs.rs/log/0.4.6/log/\" rel=\"noreferrer\">log crate</a>.</p>\n\n<p>The logger should behave like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[1] First log message\n[2] Second log message\n[3] Third log message\n</code></pre>\n\n<p>To implement this, I have my logger struct</p>\n\n<pre><code>struct SeqLogger {\n    seq: i64,\n}\n</code></pre>\n\n<p>and implement the <code>Log</code> trait's</p>\n\n<pre><code>fn enabled(&amp;self, metadata: &amp;Metadata) -&gt; bool\nfn log(&amp;self, record: &amp;Record)\nfn flush(&amp;self)\n</code></pre>\n\n<p>In <code>log(&amp;self, record: &amp;Record)</code> implementation, I would do</p>\n\n<pre><code>fn log(&amp;self, record: &amp;Record) {\n    println!(\"[{}] {}\", self.seq, record.args());\n    self.seq = self.seq + 1;\n}\n</code></pre>\n\n<p>However, the compiler complains that <code>self</code> is not mutable. Am I working in a right way to implement this? How can I update the state of the logger without <code>&amp;mut self</code>?</p>\n"}, {"tags": ["rust", "pattern-matching"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1540970385, "post_id": 53077259, "comment_id": 93053783, "body": "Your code is unreadable. <code>S</code> or <code>E</code> or all you one character variable is not a way to name thing. Use word not character. You even do a mistake yourself <code>h2: E</code> please rework that, do a better <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1541049322, "post_id": 53077259, "comment_id": 93087333, "body": "@Stargateur The actual domain i&#39;m modelling is irrelevant to my question, so I thought that I would remove as many unneeded details as possible. This apparently backfired. Would it have been easier to read if I had named <code>S</code> and <code>E</code> <code>ExampleStruct</code> and <code>ExampleEnum</code>?.  Thanks for pointing out the typo."}, {"owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1541049355, "post_id": 53077259, "comment_id": 93087340, "body": "@trentcl Hopefully now that I&#39;ve actually filled out the beginning of the expression it&#39;s clear what the rest of it would be."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1541078141, "post_id": 53077259, "comment_id": 93099584, "body": "Thanks for editing. I really wasn&#39;t being deliberately obtuse; I just didn&#39;t realize the names of the enum variants were supposed to correlate to the names of the struct members. I figured they were all just arbitrary letters -- which is probably part of the reason the other commenters suggested making them more meaningful. It&#39;s always a fine balance between &quot;minimal&quot; and &quot;complete&quot;. :-)"}], "answers": [{"comments": [{"owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "edited": false, "score": 0, "creation_date": 1541049845, "post_id": 53077746, "comment_id": 93087427, "body": "Thanks for figuring out what I meant, since I apparently did not make it easy. And thanks as well for actually providing an answer. I was hoping for a way that didn&#39;t use unsafe, but as you point out it is necessary."}], "tags": [], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "is_accepted": true, "score": 4, "last_activity_date": 1540997689, "last_edit_date": 1540997689, "creation_date": 1540968362, "answer_id": 53077746, "question_id": 53077259, "link": "https://stackoverflow.com/questions/53077259/can-this-rust-match-expression-be-simplified/53077746#53077746", "title": "Can this Rust match expression be simplified?", "body": "<p>First write a function that gets a reference to a single member. Then call that function twice:</p>\n\n<pre><code>fn get_ref_mut&lt;'a&gt;(s: &amp;'a mut S, e: E) -&gt; &amp;'a mut i32 {\n    match e {\n        E::A =&gt; &amp;mut s.a,\n        E::B =&gt; &amp;mut s.b,\n        E::COrD(c) =&gt; match c {\n            COrD::C1 =&gt; &amp;mut s.cs[0],\n            COrD::C2 =&gt; &amp;mut s.cs[1],\n            COrD::C3 =&gt; &amp;mut s.cs[2],\n            COrD::D =&gt; &amp;mut s.d,\n        }\n    }\n}\n\nfn get_refs_mut&lt;'a&gt;(s: &amp;'a mut S, e1: E, e2: E) -&gt; RefsMut&lt;'a, i32&gt; {\n    if e1 == e2 {\n        RefsMut::Same(get_ref_mut(s, e1))\n    } else {\n        let first: &amp;mut i32 = unsafe {\n            &amp;mut *(get_ref_mut(s, e1) as *mut i32)\n        };\n\n        let second = get_ref_mut(s, e2);\n        RefsMut::Pair(first, second)\n    }\n}\n</code></pre>\n\n<p>The <code>unsafe</code> block is necessary because we need to convert one of the references to a pointer and then dereference it in order to trick the borrow checker into thinking <code>first</code> does not reference <code>s</code>. That way it will let us borrow it a second time in <code>second</code>. But our code is still safe because we've structured it in a way that we are guaranteed to be referencing 2 different parts of <code>s</code>. This is similar to what <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a> does, as explained in <a href=\"https://doc.rust-lang.org/stable/nomicon/borrow-splitting.html\" rel=\"nofollow noreferrer\">The Rustonomicon</a>.</p>\n\n<p>Note that the expresstion <code>e1 == e2</code> will require you to implement (or derive) <code>PartialEq</code> for <code>E</code> and <code>COrD</code>. If for some reason you can't do that, you could compare <code>first</code> and <code>second</code> as pointers to see if they refer to the same thing.</p>\n"}], "owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "accepted_answer_id": 53077746, "answer_count": 1, "score": 2, "last_activity_date": 1541048761, "creation_date": 1540966141, "last_edit_date": 1541048761, "question_id": 53077259, "link": "https://stackoverflow.com/questions/53077259/can-this-rust-match-expression-be-simplified", "title": "Can this Rust match expression be simplified?", "body": "<p>I have a struct with 6 fields of the same type. I want to be able to get mutable references to them from an enum. </p>\n\n<p>For example given the following simplified definitions:</p>\n\n<pre><code>struct S {\n    a: i32,\n    b: i32,\n    cs: [i32; 3],\n    d: i32,\n}\n\nenum E {\n    A,\n    B,\n    COrD(COrD)\n}\n\nenum COrD {\n    C1,\n    C2,\n    C3,\n    D,\n}\n</code></pre>\n\n<p>I want to write a function like this:</p>\n\n<pre><code>fn get_refs_mut&lt;'a, T&gt;(s: &amp;'a mut S, e1: E, e2: E) -&gt; RefsMut&lt;'a, i32&gt; {\n    match (e1, e2) {\n        (E::A, E::A) =&gt; RefsMut::Same(&amp;mut S.a),\n        (E::A, E::B) =&gt; RefsMut::Pair(&amp;mut S.a, &amp;mut S.b),\n        (E::B, E::COrD(COrD::C1)) =&gt; RefsMut::Pair(&amp;mut S.b, &amp;mut S.c[0])\n        // ...\n        (E::B, E::A) =&gt; RefsMut::Pair(&amp;mut S.b, &amp;mut S.a),\n        (E::B, E::B) =&gt; RefsMut::Same(&amp;mut S.b),\n        (E::B, E::COrD(COrD::C1)) =&gt; RefsMut::Pair(&amp;mut S.b, &amp;mut S.c[0]),\n        // ...\n        (E::COrD(COrD::D), E::COrD(COrD::D)) =&gt; RefsMut::Same(&amp;mut S.d),\n    }\n}\n\nenum RefsMut&lt;'a, T&gt; {\n    Pair(&amp;'a mut T, &amp;'a mut T),\n    Same(&amp;'a mut T),\n}\n</code></pre>\n\n<p>But as far as I can tell that will require me to manually specify the results for all 6 * 6 = 36 possible values for <code>(e1, e2)</code>, which is laborious. Is there any way to write this function in a terser manner?</p>\n\n<p>Aside: The particular way I've defined <code>S</code> and <code>E</code> might seem odd. I have reasons for having the equivalent of <code>COrD</code> in the actual code, so I can refer those particular fields and related fields separately. Similarly, the real versions of the <code>cs</code> are also referred to together as well, hence they are in the array.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 2, "creation_date": 1540993012, "post_id": 53072850, "comment_id": 93066120, "body": "Adding the nightly feature <code>#![feature(generic_associated_types)]</code> and changing the associated type declaration to <code>type Extracted&lt;&#39;a&gt;;</code> seems to just work. Too bad for the warning the compiler crashing... <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=a4ae1b258903db8db16e9334813f29b8\" rel=\"nofollow noreferrer\">playground</a>"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1541004247, "post_id": 53072850, "comment_id": 93073592, "body": "@rodrigo: your example works because it does not use the trait with the generic associated type: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1da1d15c704358489667e1ace19070ad\" rel=\"nofollow noreferrer\">playground</a> with trait deleted."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1541006840, "post_id": 53072850, "comment_id": 93074907, "body": "This is what I worked out: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=d7f317d9ef5dcdfbcf8202f2a49f27c6\" rel=\"nofollow noreferrer\">playground</a>. The compiler crashes. Not sure it is a real rustc bug, perhaps my understanding is not sound about generic associated types."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1541002014, "post_id": 53084439, "comment_id": 93072281, "body": "<i>implementing <code>Ord</code> for <code>LargeData</code></i> \u2014 it&#39;s tough to tell, based on what we were given, but my guess is that OP wants to be able to sort values in multiple different manners, so having a single implementation of <code>Ord</code> might not work."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1541002040, "last_edit_date": 1541002040, "creation_date": 1540992231, "answer_id": 53084439, "question_id": 53072850, "link": "https://stackoverflow.com/questions/53072850/lifetime-issue-with-generic-trait-and-slicesort-by/53084439#53084439", "title": "Lifetime issue with generic trait and slice::sort_by", "body": "<p>The compiler error clearly states that there are two lifetimes at play here:</p>\n\n<pre><code>vec.sort_by(|a: &amp;T, b: &amp;T| {\n    let ak = &amp;E::extract_from(a);\n    let bk = &amp;E::extract_from(b);\n    ak.cmp(bk)\n})\n</code></pre>\n\n<ul>\n<li>The anonymous lifetime associated with <code>a: &amp;T</code> and <code>b: &amp;T</code> closure args</li>\n<li>The lifetime associated with the <code>'a</code> lifetime parameter (<code>fn extract_from(&amp;'a T)</code>)</li>\n</ul>\n\n<p>I did not find a way to get rid of this lifetime mismatch while maintaining your design.</p>\n\n<p>If your goal is it to extract a sortable key from items in a slice, here's an approach that works based on implementing <code>Ord</code> for <code>LargeData</code>:</p>\n\n<pre><code>use std::cmp::Ordering;\n\n#[derive(Debug, PartialOrd, PartialEq, Eq)]\nstruct LargeData(String, String, String);\n\n// really needed?\n// see impl in LargeData::cmp() below\n#[derive(Debug, PartialOrd, Ord, PartialEq, Eq)]\nstruct LargeDataKey&lt;'a&gt;(&amp;'a str, &amp;'a str);\n\nimpl Ord for LargeData {\n    fn cmp(&amp;self, other: &amp;LargeData) -&gt; Ordering {\n        //let op1 = LargeDataKey(&amp;self.2, &amp;self.0);\n        //let op2 = LargeDataKey(&amp;other.2, &amp;other.0);\n        //op1.cmp(&amp;op2)\n        (&amp;self.2, &amp;self.0).cmp(&amp;(&amp;other.2, &amp;other.0))\n    }\n}\n\nfn sort_by_extractor&lt;E, T&gt;(vec: &amp;mut Vec&lt;T&gt;, extractor: E)\nwhere\n    E: FnMut(&amp;T, &amp;T) -&gt; Ordering,\n{\n    vec.sort_by(extractor);\n}\n\nfn main() {\n    let mut v = vec![\n        LargeData(\"foo\".to_string(), \"bar\".to_string(), \"baz\".to_string()),\n        LargeData(\"one\".to_string(), \"two\".to_string(), \"three\".to_string()),\n        LargeData(\"four\".to_string(), \"five\".to_string(), \"six\".to_string()),\n    ];\n\n    sort_by_extractor(&amp;mut v, |a, b| a.cmp(b));\n    println!(\"{:?}\", v);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "edited": false, "score": 0, "creation_date": 1541001962, "post_id": 53086258, "comment_id": 93072254, "body": "Thank you for the explanation."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1541002137, "last_edit_date": 1541002137, "creation_date": 1540997693, "answer_id": 53086258, "question_id": 53072850, "link": "https://stackoverflow.com/questions/53072850/lifetime-issue-with-generic-trait-and-slicesort-by/53086258#53086258", "title": "Lifetime issue with generic trait and slice::sort_by", "body": "<p>Your code would more likely be written as</p>\n\n<pre><code>#[derive(Debug)]\nstruct LargeData(String, String, String);\n\n#[derive(Debug, PartialOrd, Ord, PartialEq, Eq)]\nstruct LargeDataKey&lt;'a&gt;(&amp;'a str, &amp;'a str);\n\nimpl&lt;'a&gt; From&lt;&amp;'a LargeData&gt; for LargeDataKey&lt;'a&gt; {\n    fn from(input: &amp;'a LargeData) -&gt; LargeDataKey&lt;'a&gt; {\n        LargeDataKey(&amp;input.2, &amp;input.0)\n    }\n}\n\nfn main() {\n    let mut v = vec![\n        LargeData(\"foo\".to_string(), \"bar\".to_string(), \"baz\".to_string()),\n        LargeData(\"one\".to_string(), \"two\".to_string(), \"three\".to_string()),\n        LargeData(\"four\".to_string(), \"five\".to_string(), \"six\".to_string()),\n    ];\n    v.sort_by_key(|x| LargeDataKey::from(x));\n    println!(\"hello\");\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/53072850/lifetime-issue-with-generic-trait-and-slicesort-by/53084439#comment93066120_53072850\">rodrigo suggests</a>, your code cannot be implemented in stable Rust 1.30. This is <em>why</em> <code>sort_by_key</code> has the limitation that it does: it's currently impossible to design a trait that covers your use case.</p>\n\n<p>The problem is that Rust does not currently have the concept of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\"><em>generic associated types</em></a>. This is needed to be able to define an associated type that has a constructor that can take in a late-bound lifetime.</p>\n\n<p>You can instead use <code>sort_by</code> directly, so long as the returned types don't escape the closure:</p>\n\n<pre><code>v.sort_by(|a, b| {\n    let a = LargeDataKey::from(a);\n    let b = LargeDataKey::from(b);\n    a.cmp(&amp;b)\n});\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/34162\" rel=\"nofollow noreferrer\">slice::sort_by_key has more restrictions than slice::sort_by</a></li>\n</ul>\n"}], "owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 53086258, "answer_count": 2, "score": 2, "last_activity_date": 1541002137, "creation_date": 1540933248, "last_edit_date": 1540937160, "question_id": 53072850, "link": "https://stackoverflow.com/questions/53072850/lifetime-issue-with-generic-trait-and-slicesort-by", "title": "Lifetime issue with generic trait and slice::sort_by", "body": "<p>As a learning exercise, I've been writing a sorting library and I'm running into a roadblock. I've defined a trait <code>ExtractFrom</code> to extract a sortable key from items in a slice (to do the equivalent of what <code>sort_by_key</code> would do). I would like to be able to extract a key that borrows data, but my attempts to implement that have failed.</p>\n\n<p>Here is a reduced example that demonstrates what I've attempted. <code>LargeData</code> is what is contained within the slice, and I've defined <code>LargeDataKey</code> that contains references to the subset of the data I want to sort by. This is running into lifetime issues between the <code>extract_from</code> implementation and what <code>sort_by</code> expects, but I don't know how to fix it. Any explanation or suggestions on how to best accomplish this would be appreciated.</p>\n\n<pre><code>trait ExtractFrom&lt;'a, T&gt; {\n    type Extracted;\n    fn extract_from(&amp;'a T) -&gt; Self::Extracted;\n}\n\nfn sort_by_extractor&lt;'a, T, E&gt;(vec: Vec&lt;T&gt;)\nwhere\n    E: ExtractFrom&lt;'a, T&gt;,\n    E::Extracted: Ord,\n{\n    vec.sort_by(|a, b| {\n        let ak = &amp;E::extract_from(a);\n        let bk = &amp;E::extract_from(b);\n        ak.cmp(bk)\n    })\n}\n\n#[derive(Debug, PartialOrd, Ord, PartialEq, Eq)]\nstruct LargeData(String, String, String);\n\n#[derive(Debug, PartialOrd, Ord, PartialEq, Eq)]\nstruct LargeDataKey&lt;'a&gt;(&amp;'a str, &amp;'a str);\n\nimpl&lt;'a&gt; ExtractFrom&lt;'a, LargeData&gt; for LargeDataKey&lt;'a&gt; {\n    type Extracted = LargeDataKey&lt;'a&gt;;\n    fn extract_from(input: &amp;'a LargeData) -&gt; LargeDataKey&lt;'a&gt; {\n        LargeDataKey(&amp;input.2, &amp;input.0)\n    }\n}\n\nfn main() {\n    let v = vec![\n        LargeData(\"foo\".to_string(), \"bar\".to_string(), \"baz\".to_string()),\n        LargeData(\"one\".to_string(), \"two\".to_string(), \"three\".to_string()),\n        LargeData(\"four\".to_string(), \"five\".to_string(), \"six\".to_string()),\n    ];\n    sort_by_extractor::&lt;LargeData, LargeDataKey&gt;(v);\n    println!(\"hello\");\n}\n</code></pre>\n\n<p>This code is also available on the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=ad9c7f49d6a0a36b555cf00697c0de78\" rel=\"nofollow noreferrer\">Rust playground</a>.</p>\n\n<p>This fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n  --&gt; src/main.rs:12:19\n   |\n12 |         let ak = &amp;E::extract_from(a);\n   |                   ^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 11:17...\n  --&gt; src/main.rs:11:17\n   |\n11 |       vec.sort_by(|a, b| {\n   |  _________________^\n12 | |         let ak = &amp;E::extract_from(a);\n13 | |         let bk = &amp;E::extract_from(b);\n14 | |         ak.cmp(bk)\n15 | |     })\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:12:35\n   |\n12 |         let ak = &amp;E::extract_from(a);\n   |                                   ^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 6:22...\n  --&gt; src/main.rs:6:22\n   |\n6  | fn sort_by_extractor&lt;'a, T, E&gt;(vec: Vec&lt;T&gt;)\n   |                      ^^\n   = note: ...so that the types are compatible:\n           expected ExtractFrom&lt;'_, T&gt;\n              found ExtractFrom&lt;'a, T&gt;\n</code></pre>\n"}, {"tags": ["docker", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 73, "user_id": 5090581, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5abe4af44dde5008ccf6af1a87ca9232?s=128&d=identicon&r=PG&f=1", "display_name": "Eric K", "link": "https://stackoverflow.com/users/5090581/eric-k"}, "is_accepted": true, "score": 1, "last_activity_date": 1540940759, "last_edit_date": 1540940759, "creation_date": 1540940478, "answer_id": 53074079, "question_id": 53072786, "link": "https://stackoverflow.com/questions/53072786/how-do-i-install-mdbook-using-cargo-inside-a-docker-container/53074079#53074079", "title": "How do I install mdbook using Cargo inside a Docker container?", "body": "<p>Instead of using the Rust container from Docker, you can build your own. The version of Rust is still 1.30 (as with <code>FROM rust:latest</code>), but for some reason this procedure gets all the dependencies right.</p>\n\n<pre><code>FROM ubuntu:latest\nFROM gcc:latest\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y curl\n\nWORKDIR /tmp\n\nRUN curl https://sh.rustup.rs -sSf &gt; rustup.sh\nRUN chmod 755 rustup.sh\nRUN ./rustup.sh -y\nRUN rm /tmp/rustup.sh\n\nRUN ~/.cargo/bin/cargo install mdbook\n</code></pre>\n"}], "owner": {"reputation": 73, "user_id": 5090581, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5abe4af44dde5008ccf6af1a87ca9232?s=128&d=identicon&r=PG&f=1", "display_name": "Eric K", "link": "https://stackoverflow.com/users/5090581/eric-k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 712, "favorite_count": 0, "accepted_answer_id": 53074079, "answer_count": 1, "score": 2, "last_activity_date": 1541629466, "creation_date": 1540932877, "last_edit_date": 1541629466, "question_id": 53072786, "link": "https://stackoverflow.com/questions/53072786/how-do-i-install-mdbook-using-cargo-inside-a-docker-container", "title": "How do I install mdbook using Cargo inside a Docker container?", "body": "<p>I am trying to build a Docker container that includes Rust and mdbook. I have tried a number of variations on</p>\n\n<pre><code>FROM rust:latest\nRUN cargo install mdbook\n</code></pre>\n\n<p>including specifying the exact versions. For example, these don't work work either</p>\n\n<pre><code>RUN cargo install --git https://github.com/rust-lang-nursery/mdBook.git mdbook\n</code></pre>\n\n<p>and</p>\n\n<pre><code>RUN cargo install mdbook --vers \"^0.1.0\"\n</code></pre>\n\n<p>Things fail when the install gets to compiling lazycell v1.2.0:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling lazycell v1.2.0\nerror: `&lt;core::cell::UnsafeCell&lt;T&gt;&gt;::new` is not yet stable as a const fn\n   --&gt; /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.0/src/lib.rs:233:16\n    |\n233 |         inner: UnsafeCell::new(None),\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: in Nightly builds, add `#![feature(const_unsafe_cell_new)]` to the crate attributes to enable\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 6, "creation_date": 1540929758, "post_id": 53071935, "comment_id": 93042511, "body": "If you just want a constant, you could use a constant: <code>const A: u32 = 1</code>."}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1540993202, "post_id": 53072328, "comment_id": 93066254, "body": "It may be worth pointing out that this implementation only allows comparisons with <code>Numbers</code> on the left-hand side and <code>i32</code> on the right-hand side.  Comparisons like <code>4 &gt; Numbers::A</code> and <code>Numbers.A &lt; Numbers.B</code> would require separate implementations.  In addition, since you are dealing with integers, you would also want to implement <code>Ord</code> and <code>Eq</code>, so for all combinations of operands you end up with twelve trait implementations."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1540994812, "last_edit_date": 1540994812, "creation_date": 1540930918, "answer_id": 53072328, "question_id": 53071935, "link": "https://stackoverflow.com/questions/53071935/how-to-do-operator-overloading-on-enums/53072328#53072328", "title": "How to do operator overloading on enums?", "body": "<p>You do it the exact same way that you overload an operator for a struct: implement the appropriate <a href=\"https://doc.rust-lang.org/std/ops/index.html\" rel=\"nofollow noreferrer\"><code>std::ops</code></a> trait. </p>\n\n<p>However, you don't really want to overload the meaning of <code>&lt;</code>, you still wish to perform a comparison.</p>\n\n<p>If you run the code you typed, the compiler <em>tells you what to do</em>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `&lt;` cannot be applied to type `Numbers`\n --&gt; src/main.rs:6:13\n  |\n6 |     let a = Numbers::A &lt; 4;\n  |             ^^^^^^^^^^^^^^\n  |\n  = note: an implementation of `std::cmp::PartialOrd` might be missing for `Numbers`\n</code></pre>\n\n<p>So, implement <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"nofollow noreferrer\"><code>PartialOrd</code></a>:</p>\n\n<pre><code>#[derive(Copy, Clone)]\nenum Numbers {\n    A = 1,\n}\n\nuse std::cmp::Ordering;\n\nimpl PartialEq&lt;i32&gt; for Numbers {\n    fn eq(&amp;self, other: &amp;i32) -&gt; bool {\n        (*self as i32).eq(other)\n    }\n}\n\nimpl PartialOrd&lt;i32&gt; for Numbers {\n    fn partial_cmp(&amp;self, other: &amp;i32) -&gt; Option&lt;Ordering&gt; {\n        (*self as i32).partial_cmp(other)\n    }\n}\n\nfn main() {\n    let a = Numbers::A &lt; 4;\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/53071935/how-to-do-operator-overloading-on-enums/53072328?noredirect=1#comment93066254_53072328\">Sven Marnach points out</a>:</p>\n\n<blockquote>\n  <p>It may be worth pointing out that this implementation only allows comparisons with <code>Numbers</code> on the left-hand side and <code>i32</code> on the right-hand side. Comparisons like <code>4 &gt; Numbers::A</code> and <code>Numbers.A &lt; Numbers.B</code> would require separate implementations. In addition, since you are dealing with integers, you would also want to implement <code>Ord</code> and <code>Eq</code>, so for all combinations of operands you end up with twelve trait implementations.</p>\n</blockquote>\n\n<p>Of course, it depends on your exact cases:</p>\n\n<ul>\n<li>if you want to compare <code>Numbers</code> to <code>Numbers</code>, you might be able to #[derive(PartialOrd)].</li>\n<li>if you want <code>Eq</code>, you can derive it.</li>\n<li>you can write macros to reduce some of the redundancy.</li>\n</ul>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31358826/155423\">How do I convert an enum reference to a number?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28005134/155423\">How do I implement the Add trait for a reference to a struct?</a></li>\n</ul>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user9760741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 368, "favorite_count": 0, "accepted_answer_id": 53072328, "answer_count": 1, "score": 2, "last_activity_date": 1540994812, "creation_date": 1540929169, "last_edit_date": 1540930559, "question_id": 53071935, "link": "https://stackoverflow.com/questions/53071935/how-to-do-operator-overloading-on-enums", "title": "How to do operator overloading on enums?", "body": "<p>I have an enum:</p>\n\n<pre><code>enum Numbers {\n    A = 1,\n}\n</code></pre>\n\n<p>How can I overload the operator so that I can compare the <code>Numbers</code> enum with another standard number without have to do <code>as u32</code>? If I want to do:</p>\n\n<pre><code>let a = Numbers::A &lt; 4\n</code></pre>\n\n<p>I think i read somewhere that it's possible to do with some kind of macros? Maybe there is a crate that lets me do this? So far the only thing I have had success with is <code>as u32</code> but it gets quite tedious to have to write it out every time.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540928913, "post_id": 53071517, "comment_id": 93042124, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/41179659/155423\">Convert Vec&lt;String&gt; into a slice of &amp;str in Rust?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53071517/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540928947, "post_id": 53071517, "comment_id": 93042142, "body": "TL;DR: no, that&#39;s the best you can do with the constraints you are given."}, {"owner": {"reputation": 316, "user_id": 8621025, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a38189853a123f2a23a189d5a95997f?s=128&d=identicon&r=PG&f=1", "display_name": "rjsberry", "link": "https://stackoverflow.com/users/8621025/rjsberry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540929227, "post_id": 53071517, "comment_id": 93042254, "body": "I thought as much. I understand the requirement of the temporary <code>String</code> vector, but I am doing a lot of the conversions as in my question. Thanks for your reply, I&#39;m happy to have the question marked as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540929694, "post_id": 53071517, "comment_id": 93042476, "body": "Can you say <i>why</i> you cannot change the signature of <code>print_str_slice</code>? Is it in a different crate? My normal solution would be to change it to <code>fn foo&lt;I&gt;(words: I) where I: IntoIterator, I::Item: AsRef&lt;str&gt;</code> to handle <i>many</i> types of input."}, {"owner": {"reputation": 316, "user_id": 8621025, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a38189853a123f2a23a189d5a95997f?s=128&d=identicon&r=PG&f=1", "display_name": "rjsberry", "link": "https://stackoverflow.com/users/8621025/rjsberry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540932539, "post_id": 53071517, "comment_id": 93043747, "body": "Yes, the function exists in another crate. The signature is actually <code>(mut self, names: &amp;[&amp;&#39;b str])</code>, and the lifetime <code>b</code> is quite tightly wound into the implementation."}], "owner": {"reputation": 316, "user_id": 8621025, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a38189853a123f2a23a189d5a95997f?s=128&d=identicon&r=PG&f=1", "display_name": "rjsberry", "link": "https://stackoverflow.com/users/8621025/rjsberry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 27, "favorite_count": 0, "closed_date": 1540929578, "answer_count": 0, "score": 1, "last_activity_date": 1540928522, "creation_date": 1540927403, "last_edit_date": 1540928522, "question_id": 53071517, "link": "https://stackoverflow.com/questions/53071517/can-i-transform-the-strings-in-a-static-str-n-into-a-str-without-creati", "closed_reason": "Duplicate", "title": "Can I transform the strings in a [&amp;&#39;static str; N] into a &amp;[&amp;str] without creating multiple temporary values?", "body": "<p>Given the array:</p>\n\n<pre><code>static STRS_UPPER: [&amp;'static str; 3] = [\"FOO\", \"BAR\", \"BAZ\"];\n</code></pre>\n\n<p>What is a succinct way of passing a mapped representation (for example, making all strings lowercase) of the above array to a function with the signature:</p>\n\n<pre><code>fn print_str_slice(slice: &amp;[&amp;str]);\n</code></pre>\n\n<p>The above type parameters are fixed. I cannot change the signature of <code>print_str_slice</code> or the type of <code>STRS_UPPER</code>.</p>\n\n<p>What I am doing currently:</p>\n\n<pre><code>let strings_lower = STRS_UPPER.iter()\n    .map(|s| s.to_string().to_ascii_lowercase())\n    .collect::&lt;Vec&lt;_&gt;&gt;();\n\nprint_str_slice(strings_lower.iter()\n    .map(AsRef::as_ref)\n    .collect::&lt;Vec&lt;_&gt;&gt;()\n    .as_slice()\n);\n</code></pre>\n\n<p>Can this be done in a cleaner way, perhaps without the intermediary vector <code>strings_lower</code>?</p>\n"}, {"tags": ["string", "rust", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540928669, "post_id": 53071283, "comment_id": 93042002, "body": "Hopefully it&#39;s an artifact of your example, but this code is not idiomatic. <i>Especially</i> code like <code>&amp;&quot;string&quot;.to_string()</code>."}], "answers": [{"comments": [{"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1540927298, "post_id": 53071450, "comment_id": 93041327, "body": "@trentcl You are right. I reformulated the last sentence. Hope it makes more sense now."}, {"owner": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "edited": false, "score": 0, "creation_date": 1540928496, "post_id": 53071450, "comment_id": 93041924, "body": "@AndreyTyukin Wait... I&#39;m still confused by this. Why can&#39;t a copy occur in the first example too? I mean, you say that the variables (<code>temp1</code> and <code>temp2</code>) are both restricted to their respective branches for the first example, but isn&#39;t this also true for the second? Why can a copy occur for the first one but not the second?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "edited": false, "score": 0, "creation_date": 1540928757, "post_id": 53071450, "comment_id": 93042043, "body": "@ArnavBorborah the variables <code>temp1</code> and <code>temp2</code>  never leave their respective curly braces."}, {"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "reply_to_user": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "edited": false, "score": 1, "creation_date": 1540928847, "post_id": 53071450, "comment_id": 93042085, "body": "@ArnavBorborah In both cases, <code>temp1</code> and <code>temp2</code> are dropped when their block ends at a closing curly brace. But the appending <code>+=</code> takes place <i>inside</i> of the branches in one case, and <i>outside</i> of the branches in the other case. If <code>+=</code> is outside of the branches, then there are no buffers that could be appended to <code>example</code>, because both <code>temp1</code> and <code>temp2</code> have already been dropped. If <code>+=</code> is <i>inside</i> of the branches, then everything is fine, because the content of the strings can be appended to <code>example</code> with <code>+=</code> before <code>temp1</code> or <code>temp2</code> is dropped."}, {"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540929405, "post_id": 53071450, "comment_id": 93042334, "body": "@Shepmaster Right now, I cannot really judge whether it&#39;s ugly or not (it probably is, because both the OP and the answerer seem to struggle with the borrow-checker). I&#39;ve merely tried to perform a simple syntactical desugaring step, otherwise preserving the original code as much as possible, while trying to align the <code>&amp;</code> with the <code>&quot;</code> in the previous line :]"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1540929795, "post_id": 53071450, "comment_id": 93042531, "body": "Perhaps @Shepmaster meant <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=c698977fbe0cb4a03990df181eca6d63\" rel=\"nofollow noreferrer\">something like this</a>, which does work, and is ugly. :-)"}, {"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1540929955, "post_id": 53071450, "comment_id": 93042608, "body": "@trentcl Would surrounding the entire <code>if-else</code> with a pair of round parens before prepending <code>&amp;</code> make it a little less ugly? Or what would be a more idiomatic solution? In my honest opinion: I don&#39;t find it ugly, I&#39;m actually delighted to see that prepending a <code>&amp;</code> in front of the entire <code>if</code> &quot;just works&quot;, because all the expressions and referencing/dereferencing operators compose in a predictable way, without any strange exceptions or corner-cases."}, {"owner": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "edited": false, "score": 0, "creation_date": 1540933069, "post_id": 53071450, "comment_id": 93043999, "body": "AndreyTyukin and Shepmaster, thanks for the detailed explanations. This has actually somewhat enhanced my understanding of the overly enigmatic (;P) borrow checker."}], "tags": [], "owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "is_accepted": true, "score": 3, "last_activity_date": 1540927340, "last_edit_date": 1540927340, "creation_date": 1540927113, "answer_id": 53071450, "question_id": 53071283, "link": "https://stackoverflow.com/questions/53071283/unable-to-use-if-expression-to-append-to-string-instead-of-if-statement/53071450#53071450", "title": "Unable to use if expression to append to string instead of if statement", "body": "<p>When you apply <code>&amp;</code> to expressions, Rust automatically creates anonymous variables that own the result of the evaluation of the expression. So, your code is roughly equivalent to</p>\n\n<pre><code>fn main() {\n    let mut example = String::new();\n\n    example += if 1 + 1 == 2 {\n        let temp1 = \"string\".to_string();\n        &amp;temp1\n    } else {\n        let temp2 = 'c'.to_string();\n        &amp;temp2\n    };\n\n    println!(\"{}\", example);\n}\n</code></pre>\n\n<p>As you can now hopefully clearly see, the scope (and the lifetime) of <code>temp1</code> is restricted to the <code>true</code>-branch of the <code>if</code>-expression, and the scope of <code>temp2</code> is restricted to the <code>false</code>-branch of the <code>if</code>-expression. Neither scope / lifetime extends outside of the <code>if</code>-expression, so the <code>String</code>s inside the both branches of <code>if</code> cannot be appended to <code>example</code>.</p>\n\n<p>In contrast to that, your first example is roughly equivalent to </p>\n\n<pre><code>fn main() {\n    let mut example = String::new();\n\n    if 1 + 1 == 2 {\n        let temp1 = \"string\".to_string();\n        example += &amp;temp1;\n    } else {\n        let temp2 = 'c'.to_string();\n        example += &amp;temp2;\n    };\n\n    println!(\"{}\", example);\n}\n</code></pre>\n\n<p>and in both cases <code>temp1</code> and <code>temp2</code> live long enough so that the content of <code>String</code>s can be copied and appended to <code>example</code> before <code>temp1</code> and <code>temp2</code> are dropped.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540932006, "post_id": 53072180, "comment_id": 93043548, "body": "@trentcl I am embarrassed. On the up side, check out <a href=\"https://github.com/rust-lang/rust/issues/55516\" rel=\"nofollow noreferrer\">what I found</a> by going the silly way."}, {"owner": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "edited": false, "score": 0, "creation_date": 1540933109, "post_id": 53072180, "comment_id": 93044012, "body": "Thanks for the details on idiomatic Rust for this kind of thing. Have an upvote!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1540931963, "last_edit_date": 1540931963, "creation_date": 1540930230, "answer_id": 53072180, "question_id": 53071283, "link": "https://stackoverflow.com/questions/53071283/unable-to-use-if-expression-to-append-to-string-instead-of-if-statement/53072180#53072180", "title": "Unable to use if expression to append to string instead of if statement", "body": "<p>You've <a href=\"https://stackoverflow.com/a/53071450/155423\">already seen an explanation as to why this code cannot be compiled</a>. Here's some code that works and is closer to your goal:</p>\n\n<pre><code>example += &amp;if 1 + 1 == 2 {\n    \"string\".to_string()\n} else {\n    'c'.to_string()\n};\n</code></pre>\n\n<p>I would not claim this to be idiomatic Rust. One thing that sticks out to me is the needless allocation of <code>\"string\"</code> into a <code>String</code>. I'd write this code using <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.push_str\" rel=\"nofollow noreferrer\"><code>String::push_str</code></a> and <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.push\" rel=\"nofollow noreferrer\"><code>String::push</code></a>:</p>\n\n<pre><code>if 1 + 1 == 2 {\n    example.push_str(\"string\");\n} else {\n    example.push('c');\n}\n</code></pre>\n\n<p>If you weren't appending the string, I'd just evaluate it directly:</p>\n\n<pre><code>let example = if 1 + 1 == 2 {\n    \"string\".to_string()\n} else {\n    'c'.to_string()\n};\n</code></pre>\n\n<p>I might even use dynamic dispatch (although it's less likely):</p>\n\n<pre><code>let s: &amp;std::fmt::Display = if 1 + 1 == 2 { &amp;\"string\" } else { &amp;'c' };\nlet example = s.to_string();\n</code></pre>\n\n<p>or </p>\n\n<pre><code>use std::fmt::Write;\nlet mut example = String::new();\nlet s: &amp;std::fmt::Display = if 1 + 1 == 2 { &amp;\"string\" } else { &amp;'c' };\nwrite!(&amp;mut example, \"{}\", s).unwrap();\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28333612/155423\">How can I append a formatted string to an existing String?</a></li>\n</ul>\n"}], "owner": {"reputation": 9936, "user_id": 6525260, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-DdsW6uGdpjg/AAAAAAAAAAI/AAAAAAAAAAw/srXxxqCzyW0/photo.jpg?sz=128", "display_name": "Arnav Borborah", "link": "https://stackoverflow.com/users/6525260/arnav-borborah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "accepted_answer_id": 53071450, "answer_count": 2, "score": 2, "last_activity_date": 1540931963, "creation_date": 1540926431, "last_edit_date": 1540928278, "question_id": 53071283, "link": "https://stackoverflow.com/questions/53071283/unable-to-use-if-expression-to-append-to-string-instead-of-if-statement", "title": "Unable to use if expression to append to string instead of if statement", "body": "<p>I have the following code that works fine:</p>\n\n<pre><code>fn main() {\n    let mut example = String::new();\n\n    if 1 + 1 == 2 {\n        example += &amp;\"string\".to_string()\n    } else {\n        example += &amp;'c'.to_string()\n    };\n\n    println!(\"{}\", example);\n}\n</code></pre>\n\n<p>When I change the code to this:</p>\n\n<pre><code>fn main() {\n    let mut example = String::new();\n\n    example += if 1 + 1 == 2 {\n        &amp;\"string\".to_string()\n    } else {\n        &amp;'c'.to_string()\n    };\n\n    println!(\"{}\", example);\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/main.rs:5:10\n  |\n5 |         &amp;\"string\".to_string()\n  |          ^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n6 |     } else {\n  |     - temporary value dropped here while still borrowed\n7 |         &amp;'c'.to_string()\n8 |     };\n  |     - temporary value needs to live until here\n\nerror[E0597]: borrowed value does not live long enough\n --&gt; src/main.rs:7:10\n  |\n7 |         &amp;'c'.to_string()\n  |          ^^^^^^^^^^^^^^^ temporary value does not live long enough\n8 |     };\n  |     - temporary value dropped here while still borrowed\n  |\n  = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>This makes no sense to me as both snippets seem identical. Why doesn't the second snippet work?</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540917598, "post_id": 53068563, "comment_id": 93036427, "body": "Please include an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540917940, "post_id": 53068563, "comment_id": 93036628, "body": "Is <code>fut_dns</code> your production code or is it test code? If it&#39;s test code, why is it a separate function from the <code>#[test]</code> function? If it&#39;s production code, why does it contain assertions?"}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540918742, "post_id": 53068563, "comment_id": 93037066, "body": "It&#39;s a separate function because of DRY. I will check your 2nd comment link above."}], "answers": [{"comments": [{"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 1, "creation_date": 1540919882, "post_id": 53069389, "comment_id": 93037662, "body": "Yes, that is what I am looking for. The tokio people should update their docs. They write their: most people should use tokio::run(). That&#39;s misleading."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540921212, "post_id": 53069389, "comment_id": 93038331, "body": "@Markus it&#39;s not misleading, it&#39;s just not addressing people trying to write tests. Most people <b>do</b> want to use <code>tokio::run</code> in their production code."}, {"owner": {"reputation": 433, "user_id": 2664096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/147ef000d3a4fb7bd34d2fef34d55fef?s=128&d=identicon&r=PG", "display_name": "Bruce Adams", "link": "https://stackoverflow.com/users/2664096/bruce-adams"}, "edited": false, "score": 0, "creation_date": 1554136275, "post_id": 53069389, "comment_id": 97632113, "body": "This solution seems more complicated than it needs to be (unless I&#39;m confused, which is likely enough). I think the body of <code>run_one</code> can be the single expression: <code>f.into_future().wait()</code>. Taking that thought a step further, <code>run_one</code> could go away by making the first line of the test: <code>let smtptls = dns::lookup(&quot;www.google.de&quot;, &quot;127.0.0.1:53&quot;).wait().unwrap();</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 433, "user_id": 2664096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/147ef000d3a4fb7bd34d2fef34d55fef?s=128&d=identicon&r=PG", "display_name": "Bruce Adams", "link": "https://stackoverflow.com/users/2664096/bruce-adams"}, "edited": false, "score": 1, "creation_date": 1554136550, "post_id": 53069389, "comment_id": 97632223, "body": "@BruceAdams check out <a href=\"https://stackoverflow.com/q/52521201/155423\">How do I synchronously return a value calculated in an asynchronous Future in stable Rust?</a>. <code>wait</code> has limitations (<i>not appropriate to call on event loops or similar I/O situations</i>) so without further context about where <code>run_one</code> will be called, it&#39;s safer to to spin up a Tokio <code>Runtime</code>. If <code>wait</code> works for your case, then you can use it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1540918854, "creation_date": 1540918854, "answer_id": 53069389, "question_id": 53068563, "link": "https://stackoverflow.com/questions/53068563/how-do-you-write-test-assertions-inside-of-tokiorun-futures/53069389#53069389", "title": "How do you write test assertions inside of tokio::run futures?", "body": "<p>Do not write your assertions inside the future. </p>\n\n<p>As described in <a href=\"https://stackoverflow.com/q/52402052/155423\">How can I test a future that is bound to a tokio TcpStream?</a>, create a <code>Runtime</code> to execute your future. As described in <a href=\"https://stackoverflow.com/q/52521201/155423\">How do I synchronously return a value calculated in an asynchronous Future in stable Rust?</a>, compute your value and then exit the async world:</p>\n\n<pre><code>fn run_one&lt;F&gt;(f: F) -&gt; Result&lt;F::Item, F::Error&gt;\nwhere\n    F: IntoFuture,\n    F::Future: Send + 'static,\n    F::Item: Send + 'static,\n    F::Error: Send + 'static,\n{\n    let mut runtime = tokio::runtime::Runtime::new().expect(\"Unable to create a runtime\");\n    runtime.block_on(f.into_future())\n}\n\n#[test]\nfn smtp_log_test() {\n    let smtptls = run_one(dns::lookup(\"www.google.de\", \"127.0.0.1:53\")).unwrap();\n    assert_eq!(smtptls.version, \"TLSRPTv1\");\n    assert!(smtptls.rua.len() &gt; 0);\n    assert_eq!(smtptls.rua[0], \"mailto://...\");\n}\n</code></pre>\n"}], "owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 716, "favorite_count": 0, "accepted_answer_id": 53069389, "answer_count": 1, "score": 1, "last_activity_date": 1540918854, "creation_date": 1540915933, "last_edit_date": 1540918372, "question_id": 53068563, "link": "https://stackoverflow.com/questions/53068563/how-do-you-write-test-assertions-inside-of-tokiorun-futures", "title": "How do you write test assertions inside of tokio::run futures?", "body": "<p>How do you test your futures which are meant to be run in the Tokio runtime?</p>\n\n<pre><code>fn fut_dns() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    let f = dns::lookup(\"www.google.de\", \"127.0.0.1:53\");\n    f.then(|result| match result {\n        Ok(smtptls) =&gt; {\n            println!(\"{:?}\", smtptls);\n            assert_eq!(smtptls.version, \"TLSRPTv1\");\n            assert!(smtptls.rua.len() &gt; 0);\n            assert_eq!(smtptls.rua[0], \"mailto://...\");\n            ok(())\n        }\n        Err(e) =&gt; {\n            println!(\"error: {:?}\", e);\n            err(())\n        }\n    })\n}\n\n#[test]\nfn smtp_log_test() {\n    tokio::run(fut_dns());\n    assert!(true);\n}\n</code></pre>\n\n<p>The future runs and the thread of the future panics on an <code>assert</code>. You can read the panic in the console, but the <code>test</code> doesn't recognize the threads of <code>tokio::run</code>.</p>\n\n<p>The <a href=\"https://stackoverflow.com/questions/52402052/how-can-i-test-a-future-that-is-bound-to-a-tokio-tcpstream\">How can I test a future that is bound to a tokio TcpStream?</a> doesn't answer this, because it simply says: <em>A simple way to test async code may be to use a dedicated runtime for each test</em></p>\n\n<p>I do this!</p>\n\n<p>My question is related to how the test can detect if the future works. The future needs a started runtime environment.</p>\n\n<p>The test is successful although the future asserts or calls err().</p>\n\n<p>So what can I do?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1540910540, "post_id": 53066659, "comment_id": 93032013, "body": "Welcome to Stack Overflow! I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/53064925/155423\">Primitive variable does not live long enough</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53066659/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "edited": false, "score": 1, "creation_date": 1540910599, "post_id": 53066659, "comment_id": 93032057, "body": "Also, <code>flatten o map = flat_map</code> (in any language, Rust or Scala), so maybe you should try <code>let user_dept:Vec&lt;(&amp;&amp;str, &amp;&amp;str)&gt; = company       .iter()       .flat_map(|x| { x.1.iter().map(move |z| (z, x.0))})       .collect();</code>. And by the way: the Scala snippet could be written shorter as <code>for ((d, us) &lt;- company.toList; u &lt;- us) yield (u, d)</code>."}, {"owner": {"reputation": 3, "user_id": 10580532, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0faee3e7cca7798e17ea0cadff07a89?s=128&d=identicon&r=PG&f=1", "display_name": "dabble", "link": "https://stackoverflow.com/users/10580532/dabble"}, "reply_to_user": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "edited": false, "score": 0, "creation_date": 1540912731, "post_id": 53066659, "comment_id": 93033392, "body": "Thanks for that @andrey-tyukin, much appreciated."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1540911004, "post_id": 53066957, "comment_id": 93032308, "body": "<i>should be more performant</i> \u2014 citation required. I expect them to compile to the exact same code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540911391, "post_id": 53066957, "comment_id": 93032563, "body": "@AndreyTyukin <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=0f8ac17dffea84e145a9c537270c9f8a\" rel=\"nofollow noreferrer\">fusion is all but guaranteed because iterators are lazily-evaluated</a>. Also, there&#39;s no closure passed to <code>flatten</code> ;-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540911616, "post_id": 53066957, "comment_id": 93032718, "body": "Performance aside, I do agree that <code>flat_map</code> is more <i>idiomatic</i> in this case."}, {"owner": {"reputation": 3, "user_id": 10580532, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0faee3e7cca7798e17ea0cadff07a89?s=128&d=identicon&r=PG&f=1", "display_name": "dabble", "link": "https://stackoverflow.com/users/10580532/dabble"}, "edited": false, "score": 0, "creation_date": 1540912379, "post_id": 53066957, "comment_id": 93033192, "body": "Thanks for that @Hauleth really appreciate it!  I can now stop tearing my hair out :-)"}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": true, "score": 0, "last_activity_date": 1540918329, "last_edit_date": 1540918329, "creation_date": 1540910880, "answer_id": 53066957, "question_id": 53066659, "link": "https://stackoverflow.com/questions/53066659/accessing-variable-from-parent-iter-map-from-within-a-child-iter-map-is-thro/53066957#53066957", "title": "Accessing variable from parent iter().map from within a child iter().map is throwing &#39;error[E0597]: `x` does not live long enough&#39; on compile&#39;", "body": "<p>This is how I would solve this problem:</p>\n\n<pre><code>let mut company: HashMap&lt;&amp;str, Vec&lt;&amp;str&gt;&gt; = HashMap::new();\ncompany.insert(\"Dept1\", vec![\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]);\ncompany.insert(\"Dept2\", vec![\"user6\", \"user7\", \"user8\"]);\ncompany.insert(\"Dept3\", vec![\"user9\", \"user10\"]);\n\nlet user_dept: Vec&lt;_&gt; = company\n    .iter()\n    .flat_map(|(&amp;dept, users)| users.iter().zip(repeat(dept)))\n    .collect();\n\nprintln!(\"user_dept: {:?}\", user_dept);\n</code></pre>\n\n<p>What you can see is that I used <code>flat_map()</code> instead of <code>map().flatten()</code> as this one can be more performant, and for sure is more idiomatic. Other change is that I have used <code>zip()</code> and <code>repeat()</code> instead of <code>map()</code>. Thanks to that compiler is able to understand that <code>dept</code> and <code>users</code> values will live equally long.</p>\n"}], "owner": {"reputation": 3, "user_id": 10580532, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0faee3e7cca7798e17ea0cadff07a89?s=128&d=identicon&r=PG&f=1", "display_name": "dabble", "link": "https://stackoverflow.com/users/10580532/dabble"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 0, "closed_date": 1540915705, "accepted_answer_id": 53066957, "answer_count": 1, "score": 0, "last_activity_date": 1540918329, "creation_date": 1540910005, "last_edit_date": 1540910467, "question_id": 53066659, "link": "https://stackoverflow.com/questions/53066659/accessing-variable-from-parent-iter-map-from-within-a-child-iter-map-is-thro", "closed_reason": "Duplicate", "title": "Accessing variable from parent iter().map from within a child iter().map is throwing &#39;error[E0597]: `x` does not live long enough&#39; on compile&#39;", "body": "<p>I have come a bit unstuck on the third exercise mentioned in the <a href=\"https://doc.rust-lang.org/book/2018-edition/ch08-03-hash-maps.html#summary\" rel=\"nofollow noreferrer\">summary of chapter 8</a> of <em>The Rust Programming Language</em>.</p>\n\n<p>I am trying to return a list of all employees and the department they belong to:</p>\n\n<pre><code>let mut company: HashMap&lt;&amp;str, Vec&lt;&amp;str&gt;&gt; = HashMap::new();\ncompany.insert(\"Dept1\", vec![\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]);\ncompany.insert(\"Dept2\", vec![\"user6\", \"user7\", \"user8\"]);\ncompany.insert(\"Dept3\", vec![\"user9\", \"user10\"]);\n\nlet user_dept: Vec&lt;(&amp;&amp;str, &amp;&amp;str)&gt; = company\n    .iter()\n    .map(|x| x.1.iter().map(|z| (z, x.0)))\n    .flatten()\n    .collect();\n\nprintln!(\"user_dept: {:?}\", user_dept);\n</code></pre>\n\n<p>When I try to compile the above, it fails with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `x` does not live long enough\n  --&gt; src/main.rs:11:41\n   |\n11 |         .map(|x| x.1.iter().map(|z| (z, x.0)))\n   |                                 ---     ^   -- borrowed value needs to live until here\n   |                                 |       |   |\n   |                                 |       |   borrowed value only lives until here\n   |                                 |       borrowed value does not live long enough\n   |                                 capture occurs here\n</code></pre>\n\n<p>What am I doing wrong? I thought <code>x</code> would still have been available to allow me to do this.</p>\n\n<p>As an example, I know it is not the same language, but running the following in Scala does allow me to achieve the result I am after, and I thought it maybe a bit clearer to read than my above code (sorry about that!):</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>val company = Map (\n  \"Dept1\" -&gt; List(\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"),\n  \"Dept2\" -&gt; List(\"user6\", \"user7\", \"user8\"),\n  \"Dept3\" -&gt; List(\"user9\", \"user10\"),\n)\n\nval d: Iterable[(String, String)] = company.map(a =&gt;\n  a._2.map(b =&gt; (b, a._1))\n).flatten\nprintln(s\"user_dept: ${d}\")\n</code></pre>\n\n<p>Is there something I've missed in the Rust version?</p>\n"}, {"tags": ["rust", "iterator", "closures"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540905212, "post_id": 53064925, "comment_id": 93028433, "body": "I don&#39;t know if this is ur real usecase, but <code>1..10</code> is already an iterator. You can write: <code>let a: Vec&lt;_&gt; = (1..10).flat_map(|x| 1..x).collect()</code>."}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540906608, "post_id": 53064925, "comment_id": 93029327, "body": "@Boiethios Sure, I know it, but in this case it is just an example"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540906707, "post_id": 53064925, "comment_id": 93029389, "body": "Anyway, I didn&#39;t understand your code at first :P"}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540907322, "post_id": 53064925, "comment_id": 93029837, "body": "@Boiethios Originally I generated tuples <code>|y| (x,y)</code>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540907561, "post_id": 53064925, "comment_id": 93030027, "body": "Oh, then you can use <a href=\"https://docs.rs/itertools/%2A/itertools/trait.Itertools.html#method.tuple_combinations\" rel=\"nofollow noreferrer\">Itertools::tuple_combinations</a>."}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540908910, "post_id": 53064925, "comment_id": 93030932, "body": "@Boiethios Yes, but in my case it should (at the end of the day): <code>1..x, x..y, y..z</code>; sure we can drop the rest with filter, but it would be wrong, I think"}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540921513, "post_id": 53064925, "comment_id": 93038498, "body": "@Boiethios: But what I still do not understand, how can I clone the value? (<code>move</code> works perfectly though). The question is: why should I either borrow or move a primitive value, and why it is not just being copied? And how could I force it?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540922456, "post_id": 53064925, "comment_id": 93038959, "body": "Move will copy the integer because it is <code>Copy</code>able. A move and a copy are the same thing for those types. You can <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=24e1a8a7c61f58d9c3b701e8c1c4bc87\" rel=\"nofollow noreferrer\">move it multiple times</a> and the compiler will not complain. If you want an explicit copy, you can call the <code>clone()</code> method."}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540924499, "post_id": 53064925, "comment_id": 93039966, "body": "@Boiethios: I tried to do it with clone first (before posting the question on Stackoverflow), but it did not help. Where exactly should I add <code>.clone()</code>?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "edited": false, "score": 0, "creation_date": 1540925591, "post_id": 53064925, "comment_id": 93040466, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/182818/discussion-between-boiethios-and-igor-chubin\">continue this discussion in chat</a>."}], "answers": [{"comments": [{"owner": {"reputation": 38158, "user_id": 2707792, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/hjDjB.png?s=128&g=1", "display_name": "Andrey Tyukin", "link": "https://stackoverflow.com/users/2707792/andrey-tyukin"}, "reply_to_user": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "edited": false, "score": 0, "creation_date": 1540907217, "post_id": 53065150, "comment_id": 93029761, "body": "@IgorChubin Can&#39;t quite follow - what are you commenting on? Have you seen the previous edits of the answer? I guess I should clean up outdated comments."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 3, "last_activity_date": 1540906659, "last_edit_date": 1540906659, "creation_date": 1540905392, "answer_id": 53065150, "question_id": 53064925, "link": "https://stackoverflow.com/questions/53064925/primitive-variable-does-not-live-long-enough/53065150#53065150", "title": "Primitive variable does not live long enough", "body": "<p>This does not work because you capture <code>x</code> by reference when you do <code>map(|_| x)</code>. <code>x</code> is not a variable local to the closure, so it is borrowed. To not borrow <code>x</code>, you must use the <code>move</code> keyword:</p>\n\n<pre><code>let a: Vec&lt;_&gt; = (1..10).flat_map(|x| (1..x).map(move |_| x)).collect();\n</code></pre>\n\n<p>But this is more idiomatic to write (for the same output):</p>\n\n<pre><code>use std::iter::repeat;\nlet b: Vec&lt;_&gt; = (2..10).flat_map(|x| repeat(x).take(x - 1)).collect();\n</code></pre>\n\n<hr>\n\n<p>Concerning the \"why\" question: some people could want to borrow a copyable data, so the capturing rules are the same:</p>\n\n<ul>\n<li>Default: by reference,</li>\n<li>With the <code>move</code> keyword: take the ownership.</li>\n</ul>\n"}], "owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "accepted_answer_id": 53065150, "answer_count": 1, "score": 3, "last_activity_date": 1540906659, "creation_date": 1540904545, "last_edit_date": 1540905623, "question_id": 53064925, "link": "https://stackoverflow.com/questions/53064925/primitive-variable-does-not-live-long-enough", "title": "Primitive variable does not live long enough", "body": "<p>There is an error in this piece of code:</p>\n\n<pre><code>let a: Vec&lt;_&gt; = (1..10).flat_map(|x| (1..x).map(|_| x)).collect();\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `x` does not live long enough\n --&gt; src/main.rs:2:57\n  |\n2 |     let a: Vec&lt;_&gt; = (1..10).flat_map(|x| (1..x).map(|_| x)).collect();\n  |                                                     --- ^-          - borrowed value needs to live until here\n  |                                                     |   ||\n  |                                                     |   |borrowed value only lives until here\n  |                                                     |   borrowed value does not live long enough\n  |                                                     capture occurs here\n</code></pre>\n\n<p>But why?</p>\n\n<p>Is is a primitive type, i.e. it should be cloned anyway.</p>\n\n<p>What do I understand wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540900322, "post_id": 53062958, "comment_id": 93025712, "body": "run from tokio require that lifetime is static, <a href=\"https://tokio-rs.github.io/tokio/tokio/runtime/fn.run.html\" rel=\"nofollow noreferrer\">tokio-rs.github.io/tokio/tokio/runtime/fn.run.html</a>."}, {"owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540900645, "post_id": 53062958, "comment_id": 93025920, "body": "So the signature should be <code>fn run(&amp;self) -&gt; impl Future&lt;Item = (), Error = ()&gt; + &#39;static {</code> ?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1540901869, "post_id": 53062958, "comment_id": 93026576, "body": "I think but I&#39;m clearly not enough skilled, that run must consume <code>self</code> and not take it as reference."}, {"owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540905707, "post_id": 53062958, "comment_id": 93028719, "body": "@Stargateur you were right, consuming <code>self</code> solved the problem!"}], "answers": [{"comments": [{"owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "edited": false, "score": 1, "creation_date": 1540905547, "post_id": 53064325, "comment_id": 93028608, "body": "Yes, that made it work, and more importantly I now understand why it needs to be this way!"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 7, "last_activity_date": 1540904049, "last_edit_date": 1540904049, "creation_date": 1540902524, "answer_id": 53064325, "question_id": 53062958, "link": "https://stackoverflow.com/questions/53062958/how-can-i-extend-the-lifetime-of-a-struct-so-that-i-can-call-tokiorun-with-it/53064325#53064325", "title": "How can I extend the lifetime of a struct so that I can call tokio::run with it?", "body": "<p>If you rewrite:</p>\n\n<pre><code>tokio::run(ir.run());\n</code></pre>\n\n<p>as:</p>\n\n<pre><code>tokio::run(Ir::run(&amp;ir))\n</code></pre>\n\n<p>The error becomes a little clearer:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `ir` does not live long enough\n  --&gt; src/main.rs:28:24\n   |\n28 |    tokio::run(Ir::run(&amp;ir));\n   |                        ^^ borrowed value does not live long enough\n29 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>Since <a href=\"https://docs.rs/tokio/0.1/tokio/runtime/fn.run.html\" rel=\"nofollow noreferrer\"><code>tokio::run</code></a> requires a <code>'static</code> lifetime for the Future:</p>\n\n<pre><code>pub fn run&lt;F&gt;(future: F) \nwhere\n    F: Future&lt;Item = (), Error = ()&gt; + Send + 'static, \n</code></pre>\n\n<p>To avoid lifetime issues consider consuming the <code>Ir</code> value:</p>\n\n<pre><code>fn run(self) -&gt; impl Future&lt;Item = (), Error = ()&gt;  {\n    Interval::new(Instant::now(), Duration::from_millis(1000))\n        .for_each(move |instant| {\n            println!(\"fire; instant={:?}, label={:?}\", instant, self.label);\n            Ok(())\n        })\n        .map_err(|e| panic!(\"interval errored; err={:?}\", e))\n}\n</code></pre>\n"}], "owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 615, "favorite_count": 0, "accepted_answer_id": 53064325, "answer_count": 1, "score": 4, "last_activity_date": 1540904263, "creation_date": 1540897581, "last_edit_date": 1540904263, "question_id": 53062958, "link": "https://stackoverflow.com/questions/53062958/how-can-i-extend-the-lifetime-of-a-struct-so-that-i-can-call-tokiorun-with-it", "title": "How can I extend the lifetime of a struct so that I can call tokio::run with it?", "body": "<p>I have a function which works:</p>\n\n<pre><code>extern crate tokio;\n\nuse std::time::{Duration, Instant};\nuse tokio::prelude::*;\nuse tokio::timer::Interval;\n\nfn run(label: String) -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    Interval::new(Instant::now(), Duration::from_millis(1000))\n        .for_each(move |instant| {\n            println!(\"fire; instant={:?}, label={:?}\", instant, label);\n            Ok(())\n        })\n        .map_err(|e| panic!(\"interval errored; err={:?}\", e))\n}\n\nfn main() {\n    tokio::run(run(\"Hello\".to_string()));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=339511b4537da80c308e715ceca10d2e\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I'd like to create a struct which would hold some parameters (<code>label</code>) in this case with a method <code>run</code> which would utilize the parameters: </p>\n\n<pre><code>extern crate tokio;\n\nuse std::time::{Duration, Instant};\nuse tokio::prelude::*;\nuse tokio::timer::Interval;\n\nstruct Ir {\n    label: String,\n}\n\nimpl Ir {\n    fn new(label: String) -&gt; Ir {\n        Ir { label }\n    }\n\n    fn run(&amp;self) -&gt; impl Future&lt;Item = (), Error = ()&gt; + '_ {\n        Interval::new(Instant::now(), Duration::from_millis(1000))\n            .for_each(move |instant| {\n                println!(\"fire; instant={:?}, label={:?}\", instant, self.label);\n                Ok(())\n            })\n            .map_err(|e| panic!(\"interval errored; err={:?}\", e))\n    }\n}\n\nfn main() {\n    let ir = Ir::new(\"Hello\".to_string());\n    tokio::run(ir.run());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=3ee25a831442010ab1a53ae881506544\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>What I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `ir` does not live long enough\n  --&gt; src/main.rs:28:16\n   |\n28 |     tokio::run(ir.run());\n   |                ^^ borrowed value does not live long enough\n29 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I've read \"Advanced Lifetimes\" and \"Validating References with Lifetimes\" from \"Rust by Example\", but I still don't understand how to fix it.<br>\nWhy doesn't <code>ir</code> live long enough?<br>\nI've created it in the same scope where I'm trying to call <code>ir.run()</code>, so I would assume it would stick around.  </p>\n"}, {"tags": ["rust", "release", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 3249, "user_id": 7147233, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/94f37773a80589840319d063ee51ab16?s=128&d=identicon&r=PG&f=1", "display_name": "WhatsThePoint", "link": "https://stackoverflow.com/users/7147233/whatsthepoint"}, "edited": false, "score": 0, "creation_date": 1542367278, "post_id": 53057044, "comment_id": 93552391, "body": "This is plagiarised from the link you provided"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3249, "user_id": 7147233, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/94f37773a80589840319d063ee51ab16?s=128&d=identicon&r=PG&f=1", "display_name": "WhatsThePoint", "link": "https://stackoverflow.com/users/7147233/whatsthepoint"}, "edited": false, "score": 3, "creation_date": 1542367451, "post_id": 53057044, "comment_id": 93552469, "body": "@WhatsThePoint ... it&#39;s called &quot;quoting&quot;.  It&#39;s not plagiarism unless I claimed to have written it, which I didn&#39;t.  Stack Overflow mods don&#39;t like it when you only link to something, rather than including the relevant information (in case the link dies), and there&#39;s no point in uselessly re-wording something that&#39;s already explained perfectly well."}, {"owner": {"reputation": 3249, "user_id": 7147233, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/94f37773a80589840319d063ee51ab16?s=128&d=identicon&r=PG&f=1", "display_name": "WhatsThePoint", "link": "https://stackoverflow.com/users/7147233/whatsthepoint"}, "edited": false, "score": 0, "creation_date": 1542367565, "post_id": 53057044, "comment_id": 93552522, "body": "You could&#39;ve still provided more information in your answer, rather than a direct copy paste job, especially considering this is a duplicate (which you should&#39;ve closed due to you having the gold badge)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1540870748, "creation_date": 1540870748, "answer_id": 53057044, "question_id": 53056925, "link": "https://stackoverflow.com/questions/53056925/how-does-the-rust-compiler-know-when-to-invoke-drop-when-ownership-may-be-moved/53057044#53057044", "title": "How does the Rust compiler know when to invoke drop when ownership may be moved during runtime?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/nomicon/drop-flags.html\" rel=\"noreferrer\">Drop flags</a>:</p>\n\n<blockquote>\n  <p>It turns out that Rust actually tracks whether a type should be dropped or not at runtime. As a variable becomes initialized and uninitialized, a drop flag for that variable is toggled. When a variable might need to be dropped, this flag is evaluated to determine if it should be dropped.</p>\n</blockquote>\n"}], "owner": {"reputation": 115, "user_id": 922965, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/63a5f615c824ab8922bbbc93d493af9f?s=128&d=identicon&r=PG", "display_name": "user922965", "link": "https://stackoverflow.com/users/922965/user922965"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 241, "favorite_count": 1, "closed_date": 1540902902, "accepted_answer_id": 53057044, "answer_count": 1, "score": 5, "last_activity_date": 1549695186, "creation_date": 1540869888, "last_edit_date": 1549695186, "question_id": 53056925, "link": "https://stackoverflow.com/questions/53056925/how-does-the-rust-compiler-know-when-to-invoke-drop-when-ownership-may-be-moved", "closed_reason": "Duplicate", "title": "How does the Rust compiler know when to invoke drop when ownership may be moved during runtime?", "body": "<p>According to <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-03-drop.html#running-code-on-cleanup-with-the-drop-trait\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>:</p>\n\n<blockquote>\n  <p>In Rust, you can specify that a particular bit of code be run whenever a value goes out of scope, and the compiler will insert this code <strong>automatically</strong></p>\n</blockquote>\n\n<p>The programmer should not release a resource\uff08invoke the <code>drop</code> function from the <code>Drop</code> trait) explicitly, Rust will invoke <code>drop</code> whenever the owner goes out of scope, and this is done during <strong>compile</strong> time, but how is it possible that Rust knows when to invoke <code>drop</code> if it depends on <strong>runtime</strong> information?</p>\n\n<pre><code>extern crate rand;\nuse rand::Rng;\n\nstruct Foo {}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"drop occurs\");\n    }\n}\n\nfn main() {\n    let foo = Foo {};\n    if rand::thread_rng().gen() {\n        let _t = foo; // move foo to _t\n    } //   1) drop occurs here if random bool is true\n} //       2) drop occurs here if random bool is false\n</code></pre>\n\n<p>In this codes, when complier insert codes to release resource, where will the invocation of <code>drop</code> be put, place <code>1)</code> or <code>2)</code>? Since this can not be known during compile time, I think the invocation should be put in both places, but only one can be called to avoid dangling pointer.</p>\n\n<p>How does Rust handle such scenario to guarantee memory safety?</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 2, "last_activity_date": 1540903306, "last_edit_date": 1540903306, "creation_date": 1540890181, "answer_id": 53060669, "question_id": 53056807, "link": "https://stackoverflow.com/questions/53056807/cant-infer-type-f-when-returning-a-future-type/53060669#53060669", "title": "Can&#39;t infer type F when returning a Future type", "body": "<p>Look at <a href=\"https://docs.rs/tokio/0.1/tokio/runtime/fn.run.html\" rel=\"nofollow noreferrer\"><code>tokio::run</code></a>'s signature:</p>\n\n<pre><code>pub fn run&lt;F&gt;(future: F) \nwhere\n    F: Future&lt;Item = (), Error = ()&gt; + Send + 'static, \n</code></pre>\n\n<p>The consumed future must have the associated <code>Error</code> type equal to <code>()</code>. This implies that you cannot be generic over the error.</p>\n\n<p>This works:</p>\n\n<pre><code>fn run() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    Interval::new(Instant::now(), Duration::from_millis(1000))\n        .for_each(move |instant| {\n            println!(\"fire; instant={:?}\", instant);\n            Ok(())\n        })\n        .map_err(|e| panic!(\"interval errored; err={:?}\", e))\n}\n\nfn main() {\n    tokio::run(run());\n}\n</code></pre>\n"}], "owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 295, "favorite_count": 0, "accepted_answer_id": 53060669, "answer_count": 1, "score": 0, "last_activity_date": 1540903475, "creation_date": 1540868788, "last_edit_date": 1592644375, "question_id": 53056807, "link": "https://stackoverflow.com/questions/53056807/cant-infer-type-f-when-returning-a-future-type", "title": "Can&#39;t infer type F when returning a Future type", "body": "<p>I'm trying to write a function which would return a <code>Future</code>, so following <a href=\"https://tokio.rs/docs/going-deeper/returning/\" rel=\"nofollow noreferrer\">a tutorial from Tokio</a>, I came up with this:</p>\n<pre><code>extern crate tokio;\n\nuse std::time::{Duration, Instant};\nuse tokio::prelude::*;\nuse tokio::timer::Interval;\n\nfn run&lt;F&gt;() -&gt; impl Future&lt;Item = (), Error = F::Error&gt;\nwhere\n    F: Future&lt;Item = ()&gt;,\n{\n    Interval::new(Instant::now(), Duration::from_millis(1000))\n        .for_each(move |instant| {\n            println!(&quot;fire; instant={:?}&quot;, instant);\n            Ok(())\n        })\n        .map_err(|e| panic!(&quot;interval errored; err={:?}&quot;, e))\n}\n\nfn main() {\n    tokio::run(run());\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=6430015544636e20c9b7380167181509\" rel=\"nofollow noreferrer\">playground</a></p>\n<p>I get this error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n  --&gt; src/main.rs:20:16\n   |\n20 |     tokio::run(run());\n   |                ^^^ cannot infer type for `F`\n</code></pre>\n<p>I assume the error will go away once I specify the full return type, which I can't even figure out (my IDE gives me <code>&lt;futures::MapErr&lt;futures::stream::ForEach&lt;tokio::timer::Interval, [closure@src/ir.rs:24:23: 38:14 self:_], std::result::Result&lt;(), tokio::timer::Error&gt;&gt;, [closure@src/ir.rs:39:22: 39:65]&gt;</code>)</p>\n<ol>\n<li><p>How can I figure out the type? Any IDE tips or tricks? (I'm using Atom with ide-rust)</p>\n</li>\n<li><p>Can I somehow get away with just defining <code>impl Future&lt;Item = (), Error = F::Error&gt; where F: Future&lt;Item = ()&gt;</code>?</p>\n<p>I'm fine with defining the full type somewhere inside of <code>run</code> function, but to the outside of the function I'd like to expose <code>&lt;Future&lt;Item = (), Error = F::Error&gt;&gt;</code> or <code>&lt;Future&lt;Item = (), Error = io::Error&gt;&gt;</code></p>\n</li>\n</ol>\n"}, {"tags": ["design-patterns", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540867393, "post_id": 53055977, "comment_id": 93012421, "body": "<i>or a module</i> \u2014 &quot;Questions asking us to recommend or find a book, tool, <b>software library</b>, tutorial or other off-site resource are off-topic for Stack Overflow&quot;"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1540870605, "post_id": 53055977, "comment_id": 93013126, "body": "Also, your question does not contain any detail. I would guess, use enum and serde."}], "answers": [{"comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1540883731, "post_id": 53058968, "comment_id": 93016979, "body": "This is more of a comment than an actual answer. Please extend your answer with a little example and some points from your link."}, {"owner": {"reputation": 326, "user_id": 4427892, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-WqQzzZ7IaME/AAAAAAAAAAI/AAAAAAAAABQ/ev9kzT_o7Qo/photo.jpg?sz=128", "display_name": "Tricko", "link": "https://stackoverflow.com/users/4427892/tricko"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1540884814, "post_id": 53058968, "comment_id": 93017444, "body": "Right, sorry about that.. Still getting used to this.. I will edit my answer, and thanks for the correction :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540903236, "post_id": 53058968, "comment_id": 93027316, "body": "The OP has asked for Rust help. The code you&#39;ve provided is not valid Rust."}], "tags": [], "owner": {"reputation": 326, "user_id": 4427892, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-WqQzzZ7IaME/AAAAAAAAAAI/AAAAAAAAABQ/ev9kzT_o7Qo/photo.jpg?sz=128", "display_name": "Tricko", "link": "https://stackoverflow.com/users/4427892/tricko"}, "is_accepted": false, "score": 1, "last_activity_date": 1540885419, "last_edit_date": 1540885419, "creation_date": 1540883032, "answer_id": 53058968, "question_id": 53055977, "link": "https://stackoverflow.com/questions/53055977/is-there-a-design-pattern-for-an-object-with-a-field-that-specifies-the-type-of/53058968#53058968", "title": "Is there a design pattern for an object with a field that specifies the type of task to run?", "body": "<p>I think <a href=\"https://www.oodesign.com/factory-pattern.html\" rel=\"nofollow noreferrer\">Factory Pattern</a> can help. </p>\n\n<pre><code>fn task_factory(task_type: string) {\n    match task_type {\n        \"task_id_1\" =&gt; fn() { //task 1 },\n        _ =&gt; fn() { //default }\n    }\n}\n</code></pre>\n\n<p>BTW, I'm not sure about the syntax but the concept is you can create something like a simple match/switch where you can list down the possible tasks, then return which ever task you need to do based on the task type.</p>\n"}], "owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1540885419, "creation_date": 1540861572, "last_edit_date": 1540864400, "question_id": 53055977, "link": "https://stackoverflow.com/questions/53055977/is-there-a-design-pattern-for-an-object-with-a-field-that-specifies-the-type-of", "title": "Is there a design pattern for an object with a field that specifies the type of task to run?", "body": "<p>I am creating a web server in which the interface is a JSON object that contains a type field that indicates the task type to run. Is there a design pattern or a module that is commonly used to solve this problem?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "edited": false, "score": 1, "creation_date": 1540853825, "post_id": 53055073, "comment_id": 93009568, "body": "<code>IntoFuture</code> isn&#39;t magic. You still have to call the <code>into_future</code> function explicitly. In general, Rust is <i>very</i> stingy about when it&#39;s willing to do implicit conversions, and this is not one of those times."}, {"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "reply_to_user": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "edited": false, "score": 0, "creation_date": 1540854177, "post_id": 53055073, "comment_id": 93009663, "body": "@SilvioMayolo that&#39;s indeed the missing piece. thanks."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1540858204, "creation_date": 1540858204, "answer_id": 53055617, "question_id": 53055073, "link": "https://stackoverflow.com/questions/53055073/why-cant-result-be-treated-as-a-future-even-though-it-implements-intofuture/53055617#53055617", "title": "Why can&#39;t Result be treated as a Future even though it implements IntoFuture?", "body": "<p><a href=\"https://docs.rs/futures/0.1.25/futures/future/enum.Either.html\" rel=\"noreferrer\"><code>Either</code></a> only implements <code>Future</code> when both of its children implement <code>Future</code> and their types line up:</p>\n\n<pre><code>impl&lt;A, B&gt; Future for Either&lt;A, B&gt;\nwhere\n    A: Future,\n    B: Future&lt;Item = A::Item, Error = A::Error&gt;, \n</code></pre>\n\n<p><code>Result</code> does <em>not</em> implement <a href=\"https://docs.rs/futures/0.1.25/futures/future/trait.Future.html\" rel=\"noreferrer\"><code>Future</code></a>, so placing a <code>Result</code> directly inside of an <code>Either</code> will not implement <code>Future</code> either.</p>\n\n<p>The <a href=\"https://docs.rs/futures/0.1.25/futures/future/trait.IntoFuture.html\" rel=\"noreferrer\"><code>IntoFuture</code></a> trait is orthogonal to <code>Future</code>. As its documentation states: </p>\n\n<blockquote>\n  <p>This trait is very similar to the <code>IntoIterator</code> trait and is intended to be used in a very similar fashion.</p>\n</blockquote>\n\n<p>You can't call <code>Iterator::map</code> on a <code>Vec</code> (<code>vec![1, 2, 3].map(...)</code>), even though <code>Vec</code> implements <code>IntoIterator</code>, and the same logic applies to <code>Result</code> / <code>Future</code> / <code>IntoFuture</code>.</p>\n\n<hr>\n\n<p>Most of the time, you will want to use <a href=\"https://docs.rs/futures/0.1.25/futures/future/fn.ok.html\" rel=\"noreferrer\"><code>futures::ok</code></a>:</p>\n\n<pre><code>extern crate futures; // 0.1.25\n\nuse futures::{\n    future::{self, Either},\n    prelude::*,\n    sync::mpsc,\n};\n\nfn example() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    let (tx, _) = mpsc::channel(0);\n    let data = Some(1);\n    match data {\n        Some(d) =&gt; Either::A(tx.send(d).map(|_| ()).map_err(|_| ())),\n        None =&gt; Either::B(future::ok(())),\n    }\n}\n</code></pre>\n\n<p>You could also choose to call <code>into_future</code> directly:</p>\n\n<pre><code>Either::B(Ok(()).into_future())\n</code></pre>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 915, "favorite_count": 0, "accepted_answer_id": 53055617, "answer_count": 1, "score": 2, "last_activity_date": 1540858204, "creation_date": 1540853633, "last_edit_date": 1540853900, "question_id": 53055073, "link": "https://stackoverflow.com/questions/53055073/why-cant-result-be-treated-as-a-future-even-though-it-implements-intofuture", "title": "Why can&#39;t Result be treated as a Future even though it implements IntoFuture?", "body": "<p><code>std::result::Result</code> implements <a href=\"https://docs.rs/futures/0.1.25/futures/future/trait.IntoFuture.html\" rel=\"nofollow noreferrer\"><code>IntoFuture</code></a>, but the following code doesn't compile:</p>\n\n<pre><code>extern crate futures; // 0.1.25\n\nuse futures::{future::Either, prelude::*, sync::mpsc};\n\nfn example() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    let (tx, rx) = mpsc::channel(0);\n    let data = Some(1);\n    match data {\n        Some(d) =&gt; Either::A(tx.send(d).and_then(|x| Ok(())).map_err(|e| ())),\n        None =&gt; Either::B(Ok(()) as Result&lt;(), ()&gt;),\n    }\n}\n</code></pre>\n\n<p>Full error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::result::Result&lt;(), ()&gt;: futures::Future` is not satisfied\n --&gt; src/lib.rs:5:17\n  |\n5 | fn example() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `futures::Future` is not implemented for `std::result::Result&lt;(), ()&gt;`\n  |\n  = note: required because of the requirements on the impl of `futures::Future` for `futures::future::Either&lt;futures::MapErr&lt;futures::AndThen&lt;futures::sink::Send&lt;futures::sync::mpsc::Sender&lt;{integer}&gt;&gt;, std::result::Result&lt;(), futures::sync::mpsc::SendError&lt;{integer}&gt;&gt;, [closure@src/lib.rs:9:50: 9:60]&gt;, [closure@src/lib.rs:9:70: 9:76]&gt;, std::result::Result&lt;(), ()&gt;&gt;`\n  = note: the return type of a function must have a statically known size\n</code></pre>\n\n<p>Moreover, <a href=\"https://docs.rs/futures/0.1.25/futures/future/trait.IntoFuture.html\" rel=\"nofollow noreferrer\"><code>IntoFuture</code></a> doesn't require <code>Sized</code>. Why can't <code>Result&lt;(), ()&gt;</code> be treated as a <code>Future</code> here?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 0, "creation_date": 1540834528, "post_id": 53050753, "comment_id": 93001418, "body": "Yes obviously. But I already have the variable x, can&#39;t change it.  Can I make a copy that is mutable?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 0, "creation_date": 1540834628, "post_id": 53050753, "comment_id": 93001475, "body": "@PeterPrographo <i>can&#39;t change it</i> \u2014 why can&#39;t you? It&#39;s clearly outside of the &quot;Do Not Change&quot; section in your code."}, {"owner": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 0, "creation_date": 1540834844, "post_id": 53050753, "comment_id": 93001565, "body": "Obviously this isn&#39;t the real code, it&#39;s a &quot;verifiable, complete&quot; version. The real code is 1000s of lines."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 0, "creation_date": 1540835282, "post_id": 53050753, "comment_id": 93001767, "body": "@PeterPrographo it&#39;s impossible for there to be a local variable which the compiler prohibits you from adding <code>mut</code> to it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 3, "creation_date": 1540835342, "post_id": 53050753, "comment_id": 93001810, "body": "@PeterPrographo if you have a 1000-line function (please don&#39;t) and want it to be immutable for part and mutable for the other, you can rebind it either way <code>let mut x = x</code> / <code>let x = x</code>, but this is reasonably uncommon."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 3, "creation_date": 1540835664, "post_id": 53050753, "comment_id": 93001968, "body": "@PeterPrographo note that a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>&#39;s definition of <i>complete</i> is &quot;all information necessary to reproduce the problem is included&quot;. This answer addresses everything you&#39;ve provided in the question. We simply don&#39;t have the ability to generate random permutations of code in the hopes that we stumble upon one that matches the code you actually have. Feel free to check out the <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific tips</a> for reducing a problem into a MCVE as well."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1540833772, "creation_date": 1540833772, "answer_id": 53050753, "question_id": 53050577, "link": "https://stackoverflow.com/questions/53050577/cannot-mutably-borrow-field-of-immutable-binding/53050753#53050753", "title": "Cannot mutably borrow field of immutable binding", "body": "<p>I strongly recommend that you go back and re-read <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, especially the chapter about <a href=\"https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html\" rel=\"nofollow noreferrer\">variables and mutability</a>.</p>\n\n<hr>\n\n<p>Do as the compiler tells you:</p>\n\n<blockquote>\n<pre><code> help: make this binding mutable: `mut x`\n</code></pre>\n</blockquote>\n\n<pre><code>let mut x = Level2 {\n    val: Level1 {\n        val: Base {\n            val: \"World\".to_string(),\n        },\n    },\n};\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31751642/155423\">Understanding struct-field mutation</a></li>\n<li><a href=\"https://stackoverflow.com/q/27022848/155423\">How I can mutate a struct&#39;s field from a method?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43550632/155423\">How can I change fields of elements in vectors in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38963644/155423\">Easy way to change one field in struct?</a></li>\n</ul>\n"}], "owner": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 753, "favorite_count": 0, "accepted_answer_id": 53050753, "answer_count": 1, "score": 1, "last_activity_date": 1540833772, "creation_date": 1540833136, "last_edit_date": 1540833562, "question_id": 53050577, "link": "https://stackoverflow.com/questions/53050577/cannot-mutably-borrow-field-of-immutable-binding", "title": "Cannot mutably borrow field of immutable binding", "body": "<p>How can I change the value of a field in an instance of a nested structure?</p>\n\n<pre><code>// Do Not Change - Start\n\nstruct Base {\n    val: String,\n}\n\nstruct Level1 {\n    val: Base,\n}\n\nstruct Level2 {\n    val: Level1,\n}\n\n// Do Not Change - End\n\nfn main() {\n    let x = Level2 {\n        val: Level1 {\n            val: Base {\n                val: \"World\".to_string(),\n            },\n        },\n    };\n\n    println!(\" Hello {}\", x.val.val.val);\n\n    x.val.val.val = \"Moon\".to_string();\n\n    println!(\" Hello {}\", x.val.val.val);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=2bb14ced5d14697fa110975d91e80048\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to field `x.val.val.val` of immutable binding\n  --&gt; src/main.rs:28:5\n   |\n18 |     let x = Level2 {\n   |         - help: make this binding mutable: `mut x`\n...\n28 |     x.val.val.val = \"Moon\".to_string();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540832859, "post_id": 53050460, "comment_id": 93000645, "body": "The code you have provided is not syntactically valid. Presumably, you aren&#39;t  asking about that, so please ensure the code you are providing has the error that you are asking about."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540832971, "post_id": 53050460, "comment_id": 93000708, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/51885745/155423\">How do I conditionally return different types of futures?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53050460/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 36, "favorite_count": 0, "closed_date": 1540854049, "answer_count": 0, "score": 0, "last_activity_date": 1540832690, "creation_date": 1540832690, "question_id": 53050460, "link": "https://stackoverflow.com/questions/53050460/chaining-futures-to-an-option-future", "closed_reason": "Duplicate", "title": "Chaining futures to an Option future", "body": "<pre><code>extern crate futures; // 0.1.25\n\nuse futures::Future;\n\nfn another_future(a: u8)  -&gt; impl Future&lt;Item=u8, Error=()&gt; {\n    println!(\"a is {}\", a);\n    futures::future::ok(a)\n}\n\nfn example() -&gt; impl Future&lt;Item=(), Error=()&gt; {\n    futures::future::ok(Some(127))\n    .and_then(|opt| {\n        if opt.is_some() {\n        match opt {\n            Some(n) =&gt; {\n                another_future(n).and_then(|n| {\n                    Ok(())\n                })\n            },\n            None =&gt; {\n                // i really don't want to call another\n                // what to put in this branch to make the type check?\n            },\n        }\n    })\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=05e3e51eada789c083663d6767ef3390\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I need to sort of conditionally apply <code>and_then</code>. In the example, the future resolves to and <code>Option</code>, and the result is passed to the next future by <code>and_then</code> only if it's not a <code>None</code>. But doing so leaves match arms with incompatible types.</p>\n\n<p>One workaround is to not use <code>Option</code> and return errors instead of <code>None</code>. I wonder if there are more idiomatic alternatives.</p>\n"}, {"tags": ["c", "struct", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540832593, "post_id": 53050214, "comment_id": 93000498, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/29182843/155423\">Pass a C array to a Rust function</a>; <a href=\"https://stackoverflow.com/q/28050461/155423\">How can I index C arrays in Rust?</a>; <a href=\"https://stackoverflow.com/q/39208831/155423\">How to represent a pointer to an array in Rust for C</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53050214/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540832689, "post_id": 53050214, "comment_id": 93000561, "body": "@Shepmaster That target is too specific to passing an array to a Rust function, whereas I&#39;d say that the main issue here is in the C binding type definition."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1540883562, "post_id": 53050214, "comment_id": 93016906, "body": "Note: don&#39;t confuse an array and a pointer in C."}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1540834422, "last_edit_date": 1540834422, "creation_date": 1540832947, "answer_id": 53050526, "question_id": 53050214, "link": "https://stackoverflow.com/questions/53050214/is-using-the-type-my-struct-the-correct-way-of-passing-an-array-of-c-structs/53050526#53050526", "title": "Is using the type `[my_struct]` the correct way of passing an array of C structs to a Rust function?", "body": "<p><strong>That is undefined behaviour.</strong> In the Rust version of that type, the member <code>array_of_points</code>, of type <code>point*</code>, was translated to a Rust unsized slice <code>[point]</code>, which is not equivalent nor compatible. By adding a member of type <code>[point]</code>, you are suggesting that <code>point</code> has a variable number of trailing <code>point</code> objects directly after its first member <code>count</code>. This also makes <code>points</code> an unsized type (or dynamically sized type).</p>\n\n<p>The memory layout of <code>points</code> in C should be the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[ int, point* ]\n           |\n            --&gt;[ point, point, ...] // dynamically allocated\n</code></pre>\n\n<p>But that Rust definition was making this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[ int, point, point, ... ]          // unknown compile time size\n</code></pre>\n\n<p>The member in <code>points</code> needs to be defined with a raw pointer:</p>\n\n<pre><code>#[derive(Debug)]\n#[repr(C)]\npub struct points {\n    count: c_int,\n    array_of_points: *mut point,\n}\n</code></pre>\n\n<p>Then <code>do_something</code> should either dereference the pointer by an offset to retrieve each point:</p>\n\n<pre><code>#[no_mangle]\npub fn do_something(all_points: &amp;points) {\n    for i in 0..all_points.count {\n        unsafe {\n            let crr_point = &amp;*all_points.array_of_points.offset(i as isize);\n            println!(\"{:?}\", crr_point);\n        }\n    }\n}\n</code></pre>\n\n<p>Or construct a proper Rust slice out of the given parts in <code>points</code>:</p>\n\n<pre><code>#[no_mangle]\npub fn do_something(all_points: &amp;points) {\n    let point_array = unsafe {\n        std::slice::from_raw_parts(all_points.array_of_points, all_points.count as usize)\n    };\n    for crr_point in point_array {\n        println!(\"{:?}\", crr_point);\n    }\n}\n</code></pre>\n\n<p>Note how you <em>need</em> <code>unsafe</code> code in any of these cases.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28050461/155423\">How can I index C arrays in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29182843/1233251\">Pass a C array to a Rust function</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540858503, "post_id": 53055574, "comment_id": 93010667, "body": "<a href=\"https://stackoverflow.com/q/51005645/155423\">How to implement the C flexible array member pattern in Rust?</a>. I don&#39;t think it&#39;s possible currently."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 0, "last_activity_date": 1540875691, "last_edit_date": 1540875691, "creation_date": 1540857787, "answer_id": 53055574, "question_id": 53050214, "link": "https://stackoverflow.com/questions/53050214/is-using-the-type-my-struct-the-correct-way-of-passing-an-array-of-c-structs/53055574#53055574", "title": "Is using the type `[my_struct]` the correct way of passing an array of C structs to a Rust function?", "body": "<p><em>Note: This answer is a little off, it propose you to use an another data layout for your C code.</em></p>\n\n<p>You could change your C structure to something like this:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef struct point {\n    int x;\n    int y;\n} point;\n\ntypedef struct points {\n    size_t len;\n    point points[];\n} points;\n</code></pre>\n\n<p>This is called a <a href=\"https://en.wikipedia.org/wiki/Flexible_array_member\" rel=\"nofollow noreferrer\">flexible array member</a>, a very nice and unknown C feature, that allows you to only make one allocation. The typical use-case matches your case.</p>\n\n<p>Also, even in C <code>int</code> is not a suitable type to represent a size, you should use <code>size_t</code>.</p>\n\n<p>You should also use <a href=\"https://github.com/rust-lang-nursery/rust-bindgen\" rel=\"nofollow noreferrer\">bindgen</a> to handle FAM, it's provide useful function like <code>as_slice()</code>.</p>\n\n<p>Given the following C code:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef struct point {\n    int x;\n    int y;\n} point;\n\ntypedef struct points {\n    size_t len;\n    point points[];\n} points;\n\nstruct points *new_points(size_t len) {\n  struct points *points = malloc(sizeof *points + sizeof *points-&gt;points * len);\n  if (points) {\n    points-&gt;len = len;\n  }\n  return points;\n}\n</code></pre>\n\n<p>It currently generate:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\n#[derive(Default)]\npub struct __IncompleteArrayField&lt;T&gt;(::std::marker::PhantomData&lt;T&gt;);\n\nimpl&lt;T&gt; __IncompleteArrayField&lt;T&gt; {\n    #[inline]\n    pub fn new() -&gt; Self {\n        __IncompleteArrayField(::std::marker::PhantomData)\n    }\n    #[inline]\n    pub unsafe fn as_ptr(&amp;self) -&gt; *const T {\n        ::std::mem::transmute(self)\n    }\n    #[inline]\n    pub unsafe fn as_mut_ptr(&amp;mut self) -&gt; *mut T {\n        ::std::mem::transmute(self)\n    }\n    #[inline]\n    pub unsafe fn as_slice(&amp;self, len: usize) -&gt; &amp;[T] {\n        ::std::slice::from_raw_parts(self.as_ptr(), len)\n    }\n    #[inline]\n    pub unsafe fn as_mut_slice(&amp;mut self, len: usize) -&gt; &amp;mut [T] {\n        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)\n    }\n}\nimpl&lt;T&gt; ::std::fmt::Debug for __IncompleteArrayField&lt;T&gt; {\n    fn fmt(&amp;self, fmt: &amp;mut ::std::fmt::Formatter&lt;'_&gt;) -&gt; ::std::fmt::Result {\n        fmt.write_str(\"__IncompleteArrayField\")\n    }\n}\nimpl&lt;T&gt; ::std::clone::Clone for __IncompleteArrayField&lt;T&gt; {\n    #[inline]\n    fn clone(&amp;self) -&gt; Self {\n        Self::new()\n    }\n}\nimpl&lt;T&gt; ::std::marker::Copy for __IncompleteArrayField&lt;T&gt; {}\n\n#[repr(C)]\n#[derive(Debug, Copy, Clone)]\npub struct point {\n    pub x: ::std::os::raw::c_int,\n    pub y: ::std::os::raw::c_int,\n}\n\n#[repr(C)]\n#[derive(Debug)]\npub struct points {\n    pub len: usize,\n    pub points: __IncompleteArrayField&lt;point&gt;,\n}\n\nextern \"C\" {\n    pub fn new_points(len: usize) -&gt; *mut points;\n}\n</code></pre>\n\n<p><em>Some lines omitted</em></p>\n\n<p>With this binding you can do in Rust side:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub fn print_points(points: &amp;points) {\n    for point in unsafe { points.points.as_slice(points.len) } {\n        println!(\"{:?}\", point);\n    }\n}\n</code></pre>\n\n<p><code>as_ptr()</code> allow to avoid the overhead of creating a temporary slice, so do as you like.</p>\n\n<p>And in the C side:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdlib.h&gt;\n\ntypedef struct point {\n    int x;\n    int y;\n} point;\n\ntypedef struct points {\n    size_t len;\n    point points[];\n} points;\n\nstruct points *new_points(size_t len);\nvoid print_points(struct points *points);\n\nint main(void) {\n  struct points *points = new_points(42);\n\n  int x = 0;\n  for (size_t i = 0; i &lt; points-&gt;len; i++, x++) {\n    points-&gt;points[i] = (struct point){ .x = x, .y = -x};\n  }\n  print_points(points);\n}\n</code></pre>\n\n<p>However remember that nothing of this is guarantee, you could run into a complete undefined behavior, be careful.</p>\n\n<hr>\n\n<pre><code>#[derive(Debug)]\n#[repr(C)]\npub struct points {\n    count: c_int,\n    array_of_points: [point],\n}\n</code></pre>\n\n<p>You tell to the compiler that <code>array_of_points</code> is a valid slice, but it's not so your code:</p>\n\n<pre><code>#[no_mangle]\npub fn do_something(all_points: &amp;points) {\n    for i in 0..all_points.count {\n        let crr_point = &amp;all_points.array_of_points[i as usize];\n        println!(\"{:?}\", crr_point);\n    }\n}\n</code></pre>\n\n<p>is completely undefined behavior. I don't think there is a way to create such thing in C side, <em>I didn't find one</em>.</p>\n"}], "owner": {"reputation": 81, "user_id": 8659809, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ef07701b94b6712def25667e263422f?s=128&d=identicon&r=PG&f=1", "display_name": "grafix", "link": "https://stackoverflow.com/users/8659809/grafix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 295, "favorite_count": 0, "accepted_answer_id": 53050526, "answer_count": 2, "score": 1, "last_activity_date": 1540875691, "creation_date": 1540831705, "last_edit_date": 1540836196, "question_id": 53050214, "link": "https://stackoverflow.com/questions/53050214/is-using-the-type-my-struct-the-correct-way-of-passing-an-array-of-c-structs", "title": "Is using the type `[my_struct]` the correct way of passing an array of C structs to a Rust function?", "body": "<p>C file:  </p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef struct point {\n    int x;\n    int y;\n} point;\n\ntypedef struct points {\n    int count;\n    point *array_of_points;\n} points;\n</code></pre>\n\n<p>Rust file:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\n#[repr(C)]\npub struct point {\n    x: c_int,\n    y: c_int,\n}\n\n#[derive(Debug)]\n#[repr(C)]\npub struct points {\n    count: c_int,\n    array_of_points: [point],\n}\n\n#[no_mangle]\npub fn do_something(all_points: &amp;points) {\n    for i in 0..all_points.count {\n        let crr_point = &amp;all_points.array_of_points[i as usize];\n        println!(\"{:?}\", crr_point);\n    }\n}\n</code></pre>\n\n<p>In my C file, I allocate a lot of struct point and add them to <code>array_of_points</code>, then I call the <code>do_something</code> function.</p>\n\n<p>How do I get each single point in <code>array_of_points</code> in Rust?</p>\n\n<p>Is way I defined the <code>array_of_points</code> array in Rust correct?</p>\n\n<p>When I run it, this strange outcome appears:  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>point { x: 0, y: -952095696 }   \npoint { x: 32674, y: 101 }   \n</code></pre>\n\n<p>and so on.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1540912820, "creation_date": 1540912820, "answer_id": 53067607, "question_id": 53049213, "link": "https://stackoverflow.com/questions/53049213/why-is-a-boxtrait-treated-as-a-boxtrait-static-and-not-a-boxtrait/53067607#53067607", "title": "Why is &amp;&#39;a Box&lt;Trait&gt; treated as &amp;&#39;a Box&lt;Trait + &#39;static&gt; and not &amp;&#39;a Box&lt;Trait + &#39;a&gt;?", "body": "<p>These rules were adjusted by <a href=\"https://rust-lang.github.io/rfcs/1156-adjust-default-object-bounds.html\" rel=\"nofollow noreferrer\">RFC 1156</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Adjust the object default bound algorithm for cases like <code>&amp;'x Box&lt;Trait&gt;</code> and <code>&amp;'x Arc&lt;Trait&gt;</code>. The existing algorithm would default to <code>&amp;'x Box&lt;Trait+'x&gt;</code>. The proposed change is to <strong>default to <code>&amp;'x Box&lt;Trait+'static&gt;</code></strong>.</p>\n</blockquote>\n"}], "owner": {"reputation": 955, "user_id": 1207998, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a992586a259ed5c616c7d41de618f6bb?s=128&d=identicon&r=PG", "display_name": "Jos&#233; Manuel", "link": "https://stackoverflow.com/users/1207998/jos%c3%a9-manuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 220, "favorite_count": 0, "accepted_answer_id": 53067607, "answer_count": 1, "score": 4, "last_activity_date": 1540912820, "creation_date": 1540828239, "last_edit_date": 1540832009, "question_id": 53049213, "link": "https://stackoverflow.com/questions/53049213/why-is-a-boxtrait-treated-as-a-boxtrait-static-and-not-a-boxtrait", "title": "Why is &amp;&#39;a Box&lt;Trait&gt; treated as &amp;&#39;a Box&lt;Trait + &#39;static&gt; and not &amp;&#39;a Box&lt;Trait + &#39;a&gt;?", "body": "<p>Given this code:</p>\n\n<pre><code>trait Trait {}\nstruct Child;\nimpl Trait for Child {}\nstruct Father&lt;'a&gt; {\n    child: &amp;'a Box&lt;dyn Trait&gt;,\n}\nimpl&lt;'a&gt; Trait for Father&lt;'a&gt; {}\n\nfn main() {\n    let child: Box&lt;dyn Trait&gt; = Box::new(Child {});\n    let father: Box&lt;dyn Trait&gt; = Box::new(Father { child: &amp;child });\n    let grandf: Box&lt;dyn Trait&gt; = Box::new(Father { child: &amp;father });\n}\n</code></pre>\n\n<p>This code doesn't compile with Rust 1.30.0 and I'm getting the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `child` does not live long enough\n  --&gt; src/main.rs:11:60\n   |\n11 |     let father: Box&lt;dyn Trait&gt; = Box::new(Father { child: &amp;child });\n   |                                                            ^^^^^ borrowed value does not live long enough\n12 |     let grandf: Box&lt;dyn Trait&gt; = Box::new(Father { child: &amp;father });\n13 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I can make the code compile by using <code>child: &amp;'a Box&lt;dyn Trait + 'a&gt;</code>, but I don't understand why this happens.</p>\n\n<p>According to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\" rel=\"nofollow noreferrer\">RFC 0599</a>, the default object bound rules should read the type <code>&amp;'a Box&lt;Trait&gt;</code> as <code>&amp;'a Box&lt;Trait + 'a&gt;</code>. Instead, it is acting as it was <code>&amp;'a Box&lt;Trait + 'static&gt;</code>.</p>\n\n<ol>\n<li>Why doesn't my original code compile?</li>\n<li>Is the default object bound taking <code>&amp;'a Box&lt;Trait + 'static&gt;</code> as it seems?</li>\n</ol>\n\n<p>There is a key difference between this question and <a href=\"https://stackoverflow.com/q/42028470/155423\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a>. </p>\n\n<p>According to the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\" rel=\"nofollow noreferrer\">RFC 0599</a> that was mentioned in the answer of that question, there is a difference between a <code>&amp;'a Box&lt;SomeTrait&gt;</code> type and just a <code>Box&lt;SomeTrait&gt;</code> that makes them have different default lifetimes. So, in this case, per the RFC, I think the default lifetime of the boxed trait should be <code>'a</code> and not <code>'static</code>.</p>\n\n<p>This means that either there is a newer RFC changing that specification of RFC 0599, or there is another reason for this code to not work.</p>\n\n<p>In both cases, that answer from the other question would not apply to this one, and therefore, this is not a duplicated question.</p>\n"}, {"tags": ["macros", "rust", "rust-macros"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540822184, "post_id": 53047195, "comment_id": 92994194, "body": "Pedantically, <i>deprecated</i> doesn&#39;t mean that you can&#39;t use it."}], "answers": [{"comments": [{"owner": {"reputation": 7483, "user_id": 247482, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/da56018fec1036eb1e02305d09a0bce8?s=128&d=identicon&r=PG", "display_name": "flying sheep", "link": "https://stackoverflow.com/users/247482/flying-sheep"}, "edited": false, "score": 0, "creation_date": 1540941375, "post_id": 53048693, "comment_id": 93046646, "body": "Interesting. I&#39;m sure I imported <code>pest::Parser</code> at some point, which should be identical to <code>pest_derive::Parser</code>. So you have to import the trait from the crate implementing the derive?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7483, "user_id": 247482, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/da56018fec1036eb1e02305d09a0bce8?s=128&d=identicon&r=PG", "display_name": "flying sheep", "link": "https://stackoverflow.com/users/247482/flying-sheep"}, "edited": false, "score": 0, "creation_date": 1540943335, "post_id": 53048693, "comment_id": 93047104, "body": "@flyingsheep <i>which should be identical to <code>pest_derive::Parser</code></i> \u2014 it is not, no more than <code>crate1::Parser</code> is the same as <code>crate2::Parser</code>. <i>import the trait from the crate implementing the derive</i> \u2014 no, you import the derive macro <code>Parser</code> from the crate implementing the macro; you probably also have to import the trait <code>Parser</code> from the main crate as well."}, {"owner": {"reputation": 7483, "user_id": 247482, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/da56018fec1036eb1e02305d09a0bce8?s=128&d=identicon&r=PG", "display_name": "flying sheep", "link": "https://stackoverflow.com/users/247482/flying-sheep"}, "edited": false, "score": 0, "creation_date": 1540969815, "post_id": 53048693, "comment_id": 93053563, "body": "Got it! That&#39;s a bit confusing if you think in names: \u201cI&#39;ve already imported a thing called <code>Parser</code>, I shouldn&#39;t have to do it twice\u201d"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1540826559, "creation_date": 1540826559, "answer_id": 53048693, "question_id": 53047195, "link": "https://stackoverflow.com/questions/53047195/why-does-importing-a-custom-derive-foo-via-use-some-cratederive-foo-not-work/53048693#53048693", "title": "Why does importing a custom derive Foo via `use some_crate::derive_foo` not work?", "body": "<p>That's the incorrect syntax for importing the derive. You import the name of the derive, not the underlying function. In this case, <code>use pest_derive::Parser</code>:</p>\n\n<pre><code>use pest_derive::Parser;\n\n#[derive(Parser)]\n#[grammar = \"grammar.pest\"]\npub struct MyParser;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>#[derive(pest_derive::Parser)]\n#[grammar = \"grammar.pest\"]\npub struct MyParser;\n</code></pre>\n\n<p>This question isn't specific to Rust 2018, either. Rust 1.30 and up allows you to import macros like this.</p>\n"}], "owner": {"reputation": 7483, "user_id": 247482, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/da56018fec1036eb1e02305d09a0bce8?s=128&d=identicon&r=PG", "display_name": "flying sheep", "link": "https://stackoverflow.com/users/247482/flying-sheep"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 0, "accepted_answer_id": 53048693, "answer_count": 1, "score": 3, "last_activity_date": 1540826671, "creation_date": 1540821720, "last_edit_date": 1540826671, "question_id": 53047195, "link": "https://stackoverflow.com/questions/53047195/why-does-importing-a-custom-derive-foo-via-use-some-cratederive-foo-not-work", "title": "Why does importing a custom derive Foo via `use some_crate::derive_foo` not work?", "body": "<p>I want to use a custom derive macro that uses attributes. For Rust 2015, I wrote:</p>\n\n<pre><code>#[macro_use]\nextern crate pest_derive;\n\n#[derive(Parser)]\n#[grammar = \"grammar.pest\"]\npub struct MyParser;\n</code></pre>\n\n<p>Using <code>edition = '2018'</code>, <code>extern crate</code> is deprecated so <code>macro_use</code> is unavailable. I assumed I could write <code>use pest_derive::{grammar,derive_parser};</code>, but I have to write <code>use pest_derive::*;</code>.</p>\n\n<p>How can I avoid the glob import? The code for the pest_derive crate is <a href=\"https://github.com/pest-parser/pest/blob/8c8e4a917149d6cc307f07ae06330e6bf816f083/derive/src/lib.rs#L267-L277\" rel=\"nofollow noreferrer\">very simple</a>, I have no idea what necessary thing <code>*</code> imports that isn\u2019t <code>derive_parser</code> or <code>grammar</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0658]: The attribute `grammar` is currently unknown to the compiler and\n              may have meaning added to it in the future (see issue #29642)\n  --&gt; src/parser/mod.rs:10:3\n   |\n10 | #[grammar = \"rst.pest\"]\n   |   ^^^^^^^\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540818485, "post_id": 53046135, "comment_id": 92991748, "body": "Ok. Please, provide a short example (illustrated this (correct) behavior)."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1540818661, "post_id": 53046135, "comment_id": 92991856, "body": "<i>&quot;not available in 2015 version&quot;</i> Not correct, you can opt-in in that unstable feature via <code>#![feature(nll)]</code>"}, {"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540818763, "post_id": 53046135, "comment_id": 92991919, "body": "How I can change this example to provide expected behavior - &quot;multiple immutable borrowing, one mutable borrowing&quot;? Please, proved an example to clarify your suggestion."}, {"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540819031, "post_id": 53046135, "comment_id": 92992071, "body": "After adding <code>#![feature(nll)]</code> to the first line of the source file (!) it is compiled too."}], "tags": [], "owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "is_accepted": false, "score": 3, "last_activity_date": 1540818275, "creation_date": 1540818275, "answer_id": 53046135, "question_id": 53045978, "link": "https://stackoverflow.com/questions/53045978/why-can-the-rust-compiler-break-borrowing-rules-when-using-rust-1-31/53046135#53046135", "title": "Why can the Rust compiler break borrowing rules when using Rust 1.31?", "body": "<p>This is so-called <em>non-lexical lifetimes</em> - a feature currently coming into language and not available in 2015 version. In short, with them the reference is dropped once it is not used anymore, and not at the end of scope, as before (and as it is stated in docs). You can check this by using <code>borrowed_point</code> after <code>mutable_borrow</code> - this should trigger the error even with NLL.</p>\n"}, {"comments": [{"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540819623, "post_id": 53046395, "comment_id": 92992446, "body": "Yes. It is. I do not understand one thing - in <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=2b48b546e99b20c2ac62a3d4cf53cc9b\" rel=\"nofollow noreferrer\">playground</a> the compiler work as expected - do not compile this code. In another place, the compiler works differently (all code is compiled)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1541164681, "post_id": 53046395, "comment_id": 93132953, "body": "@hellow \u2014 in case you didn&#39;t know, we have <a href=\"https://chat.stackoverflow.com/rooms/62927/rust\">a SO chatroom</a> you are welcome to join! (Feel free to flag this comment as no longer needed)"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 5, "last_activity_date": 1540820469, "last_edit_date": 1540820469, "creation_date": 1540819238, "answer_id": 53046395, "question_id": 53045978, "link": "https://stackoverflow.com/questions/53045978/why-can-the-rust-compiler-break-borrowing-rules-when-using-rust-1-31/53046395#53046395", "title": "Why can the Rust compiler break borrowing rules when using Rust 1.31?", "body": "<p>The solution is in the prelude of the code.</p>\n\n<blockquote>\n  <p>Data can be immutably borrowed any number of times, but while immutably borrowed, the original data can't be mutably borrowed. On the other hand, only one mutable borrow is allowed at a time. The original data can be borrowed again only after the mutable reference goes out of scope.</p>\n</blockquote>\n\n<p>Which means, you can borrow a value as often as you like, but only have one mutable borrow at a time (in a scope).</p>\n\n<p>You may be wondering, why the code compile with <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=e3d676a388430f1f127d2bba11dd7019\" rel=\"noreferrer\"><code>#![feature(nll)]</code></a>.</p>\n\n<p>The reason is that 'nll' (non-lexical-lifetimes) allows the compiler to create lifetimes for borrows beyond the scope of scopes (everything between <code>{</code> and <code>}</code>). It will now see, that after the use of the borrowed value for printing it won't be used anymore, so the lifetime of that borrow ends right after the <code>println!</code>.</p>\n\n<p>This won't break any rules as stated above. You can't have more than mutable borrow at the same time, e.g. </p>\n\n<pre><code>let mut point = Point { x: 0, y: 0, z: 0 };\n\nlet p1 = &amp;mut point;\nlet p2 = &amp;point;\n\nprintln!(\"Point has coordinates: ({}, {})\", p1.x, p2.y);\n</code></pre>\n\n<p>won't work! Keep that in mind.</p>\n"}, {"comments": [{"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540821606, "post_id": 53046818, "comment_id": 92993763, "body": "It would be nice to make changes to the project <a href=\"https://doc.rust-lang.org/rust-by-example/\" rel=\"nofollow noreferrer\">&quot;Rust by examples&quot;</a> and the &quot;book&quot; may be too to update code installations of so smart (cool) behavior of the compiler."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1540822386, "post_id": 53046818, "comment_id": 92994320, "body": "@AnatoliiKosorukov: Indeed, I expect that as 1.31 ships a whole lot of documentation will need updating. It would be a bit premature to do so before it ships, though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1540822542, "post_id": 53046818, "comment_id": 92994436, "body": "@MatthieuM. all of the official documentation (including RBE), is versioned with the releases (<a href=\"https://doc.rust-lang.org/nightly/rust-by-example/\" rel=\"nofollow noreferrer\">for example</a>), but the nightly isn&#39;t updated either. That means that RBE will be out of date for multiple months :-("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1540822020, "last_edit_date": 1540822020, "creation_date": 1540820603, "answer_id": 53046818, "question_id": 53045978, "link": "https://stackoverflow.com/questions/53045978/why-can-the-rust-compiler-break-borrowing-rules-when-using-rust-1-31/53046818#53046818", "title": "Why can the Rust compiler break borrowing rules when using Rust 1.31?", "body": "<p>When you create a new Cargo project with Rust 1.31, you automatically opt-into Rust edition 2018:</p>\n\n<pre><code>[package]\nname = \"example\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\nedition = \"2018\"\n</code></pre>\n\n<p>This turns on <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a>, which enables a smarter form of the borrow checker. If you want the old behavior, you can switch back to <code>2015</code>; this will cause your code to produce the expected errors. I would encourage you to continue using the 2018 edition, however.</p>\n\n<p>The Rust Playground offers switching between editions:</p>\n\n<p><a href=\"https://i.stack.imgur.com/1D0Tm.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/1D0Tm.png\" alt=\"playground edition switch\"></a></p>\n\n<p>The Playground currently defaults to edition 2015, and after Rust 1.31 is stabilized, the Playground will change its default to edition 2018.</p>\n\n<blockquote>\n  <p>How I can change this example to provide expected behavior</p>\n</blockquote>\n\n<p>You <strong>cannot</strong> in Rust 2018. Before non-lexical lifetimes, the Rust compiler was simply insufficiently intelligent. The code itself <em>is safe</em>, but the compiler could not see that. The compiler is now that smart, so the code compiles. There is no reason to have a compiler mode to make intrinsically correct code fail to compile.</p>\n\n<p>You should file an issue with <em>Rust by Example</em>, letting them know that their example is no longer valid in Rust 2018.</p>\n"}], "owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 309, "favorite_count": 0, "accepted_answer_id": 53046818, "answer_count": 3, "score": 6, "last_activity_date": 1540822020, "creation_date": 1540817660, "last_edit_date": 1540821937, "question_id": 53045978, "link": "https://stackoverflow.com/questions/53045978/why-can-the-rust-compiler-break-borrowing-rules-when-using-rust-1-31", "title": "Why can the Rust compiler break borrowing rules when using Rust 1.31?", "body": "<p>I am studying <em>Rust by Example</em> and running code from <a href=\"https://doc.rust-lang.org/rust-by-example/scope/borrow/alias.html\" rel=\"noreferrer\">the \"Alias\" page</a>:</p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: i32,\n    z: i32,\n}\n\nfn main() {\n    let mut point = Point { x: 0, y: 0, z: 0 };\n\n    {\n        let borrowed_point = &amp;point;\n        let another_borrow = &amp;point;\n\n        // Data can be accessed via the references and the original owner\n        println!(\n            \"Point has coordinates: ({}, {}, {})\",\n            borrowed_point.x, another_borrow.y, point.z\n        );\n\n        // Error! Can't borrow point as mutable because it's currently\n        // borrowed as immutable.\n        let mutable_borrow = &amp;mut point;\n        println!(\n            \"Point has coordinates: ({}, {}, {})\",\n            mutable_borrow.x, mutable_borrow.y, mutable_borrow.z\n        );\n\n        let mutable_borrow2 = &amp;mut point;\n        println!(\n            \"Point has coordinates: ({}, {}, {})\",\n            mutable_borrow2.x, mutable_borrow2.y, mutable_borrow2.z\n        );\n\n        // TODO ^ Try uncommenting this line\n\n        // Immutable references go out of scope\n    }\n\n    {\n        let mutable_borrow = &amp;mut point;\n\n        // Change data via mutable reference\n        mutable_borrow.x = 5;\n        mutable_borrow.y = 2;\n        mutable_borrow.z = 1;\n\n        // Error! Can't borrow `point` as immutable because it's currently\n        // borrowed as mutable.\n        //let y = &amp;point.y;\n        // TODO ^ Try uncommenting this line\n\n        // Error! Can't print because `println!` takes an immutable reference.\n        //println!(\"Point Z coordinate is {}\", point.z);\n        // TODO ^ Try uncommenting this line\n\n        // Ok! Mutable references can be passed as immutable to `println!`\n        println!(\n            \"Point has coordinates: ({}, {}, {})\",\n            mutable_borrow.x, mutable_borrow.y, mutable_borrow.z\n        );\n\n        // Mutable reference goes out of scope\n    }\n\n    // Immutable references to point are allowed again\n    let borrowed_point = &amp;point;\n    println!(\n        \"Point now has coordinates: ({}, {}, {})\",\n        borrowed_point.x, borrowed_point.y, borrowed_point.z\n    );\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=788a836e7f12d6e05a4d2e5c534e87db\" rel=\"noreferrer\">Playground</a></p>\n\n<p>I do <strong>not</strong> get compilation errors when running this code on Windows with the latest nightly build of the Rust compiler (<code>rustc 1.31.0-nightly (f99911a4a 2018-10-23)</code>). The latest nightly build of the Rust compiler in the Rust Playground <strong>does</strong> provide the expected compilation errors.</p>\n\n<p>Why is this? Why can the Rust compiler break borrowing rules? How can I fix this locally to get the expected errors?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1540816314, "post_id": 53045522, "comment_id": 92990500, "body": "Can you try to provide a MCVE instead of a full-blown program?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1540817315, "post_id": 53045522, "comment_id": 92991068, "body": "The &quot;cannot move out of borrowed content&quot; happens because a <code>for</code> loop consumes its argument (see, for example, <a href=\"https://stackoverflow.com/questions/38820764/looping-through-a-refcell-wrapped-vec-with-rust\">Looping through a RefCell wrapped Vec with Rust</a>). Changing that line to <code>for (_, tx) in &amp;state.lock().unwrap().clients</code> reduces your problem to the <code>Arc</code> issue."}], "answers": [{"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 2, "last_activity_date": 1540816906, "creation_date": 1540816906, "answer_id": 53045742, "question_id": 53045522, "link": "https://stackoverflow.com/questions/53045522/share-arc-between-closures/53045742#53045742", "title": "Share Arc between closures", "body": "<p>For every closure you have to provide its own <code>Arc</code>, so you have to <code>clone</code> your <code>Arc</code> beforehand.</p>\n\n<pre><code>let state = Arc::new(Mutex::new(Shared::new(server_tx)));\nlet state1 = Arc::clone(&amp;state);\nlet state2 = Arc::clone(&amp;state);\n\nlet server = listener.incoming().for_each(move |socket| {\n    process(socket, state1.clone());\n    Ok(())\n});\n\nlet receive_sensor_messages = sensors_rx.for_each(move |line| {\n    println!(\"Received sensor message, broadcasting: {:?}\", line);\n    let shared = state2.lock().unwrap();\n    for (_, tx) in &amp;shared.clients { // better: `for tx in shared.clients.values()`\n        tx.unbounded_send(line.clone()).unwrap();\n    }\n    Ok(())\n});\n</code></pre>\n\n<p>You could omit <code>state1</code> here, but I find it cleaner to do it like this.</p>\n\n<p>The reason for this is, that you move in the value <code>state</code> into the first closure, so you cannot use it in the second closure, because it is already moved (makes sense, doesn't it?).</p>\n"}, {"tags": [], "owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "is_accepted": true, "score": 3, "last_activity_date": 1540817272, "creation_date": 1540817272, "answer_id": 53045864, "question_id": 53045522, "link": "https://stackoverflow.com/questions/53045522/share-arc-between-closures/53045864#53045864", "title": "Share Arc between closures", "body": "<p>Essentially, your problem can be boiled down <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a7103fe508a732f56c912b394426a3c4\" rel=\"nofollow noreferrer\">to the following MCVE:</a></p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nstruct Bar;\n\nfn foo(_ : &amp;Bar){\n    println!(\"foo called\");\n}\n\nfn main(){\n    let example = Arc::new(Mutex::new(Bar));\n    std::thread::spawn(move ||{\n        let _ = example.clone();\n    });\n    // --- (1) ---\n\n    std::thread::spawn(move ||{\n        foo(&amp;example.clone().lock().unwrap());\n    });\n}\n</code></pre>\n\n<p>Now, the first problem here is that <code>example</code> is moved. That is, as soon as we crossed <code>(1)</code>, the original <code>example</code> is considered to be moved from. Instead, we need to <em>first</em> <code>clone</code> and <em>then</em> <code>move</code>:</p>\n\n<pre><code>    let example = Arc::new(Mutex::new(Bar));\n    let local_state = example.clone();\n    std::thread::spawn(move ||{\n        let _ = local_state; // now fine!\n    });\n</code></pre>\n\n<p>The other error stems from the short lived <code>Arc</code>. Essentially, it only lives long enough for you to us <code>lock</code> on the underlying <code>Mutex</code>. While <em>we</em> know that there is at least one other <code>Arc</code> pointing to the memory, the compiler cannot prove that. However, if we get rid of the <code>clone()</code> it's fine:</p>\n\n<pre><code>    let local_state = example.clone();        \n    std::thread::spawn(move ||{\n        foo(&amp;local_state.lock().unwrap());\n    });\n</code></pre>\n\n<p>However, you also loop over your container by consuming its contents (the <code>clients</code>). Instead, use <code>&amp;</code> there, e.g. <code>&amp;local_state().unwrap().clients</code>).</p>\n\n<p>You can find the complete fixed code below <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=9ead81d80700d1b97d6cdfff9331d632\" rel=\"nofollow noreferrer\">or on the playground</a>:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nstruct Bar;\n\nfn foo(_ : &amp;Bar){\n    println!(\"foo called\");\n}\n\nfn main(){\n    let example = Arc::new(Mutex::new(Bar));\n    let local_state = example.clone();\n    std::thread::spawn(move ||{\n        let _ = local_state;\n    });\n    let local_state = example.clone();\n    std::thread::spawn(move ||{\n        foo(&amp;local_state.lock().unwrap());\n    }).join();\n}\n</code></pre>\n"}], "owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1104, "favorite_count": 0, "accepted_answer_id": 53045864, "answer_count": 2, "score": 3, "last_activity_date": 1540817272, "creation_date": 1540816128, "last_edit_date": 1540816181, "question_id": 53045522, "link": "https://stackoverflow.com/questions/53045522/share-arc-between-closures", "title": "Share Arc between closures", "body": "<p>I'm trying to write a simple tcp server which would read and broadcast messages.<br>\nI'm using Tokio, but I think it's more of a general Rust question.  </p>\n\n<p>I have an Arc with a shared state:<br>\n<code>let state = Arc::new(Mutex::new(Shared::new(server_tx)));\n</code></p>\n\n<p>Later I want to spawn 2 threads which would use a reference to that state:  </p>\n\n<pre><code>let server = listener.incoming().for_each(move |socket| {\n    // error[E0382]: capture of moved value: `state`\n    process(socket, state.clone());\n    Ok(())\n}).map_err(|err| {\n    println!(\"accept error = {:?}\", err);\n});\n\nlet receive_sensor_messages = sensors_rx.for_each(move |line| {\n    println!(\"Received sensor message, broadcasting: {:?}\", line);\n\n    // error[E0597]: borrowed value does not live long enough\n    // error[E0507]: cannot move out of borrowed content \n    for (_, tx) in state.clone().lock().unwrap().clients {\n        tx.unbounded_send(line.clone()).unwrap();\n    }\n    Ok(())\n}).map_err(|err| {\n    println!(\"line reading error = {:?}\", err);\n});\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=2100d6844c06e91c01e152db2b636fe9&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>As far as I understand what it's trying to tell me is that <code>state</code> is borrowed in the first closure <code>listener.incoming().for_each(move |socket| {</code> so when I try to do it again in <code>sensors_rx.for_each(move |line| {</code> it's saying it's not possible.  </p>\n\n<p>My question is how do I solve it? Isn't <code>Arc</code> supposed to solve the issue of sharing a variable between threads?\nI tried different combinations of <code>clone</code> (doing clone outside of the closure and then doing <code>clone</code> inside again), but none worked.</p>\n\n<p>Cheers!</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 4, "last_activity_date": 1540802524, "last_edit_date": 1540802524, "creation_date": 1540802407, "answer_id": 53041626, "question_id": 53039483, "link": "https://stackoverflow.com/questions/53039483/start-multiple-threads-with-tokio/53041626#53041626", "title": "Start multiple threads with Tokio", "body": "<p>Joins the futures together:</p>\n\n<pre><code>let messages = server_rx.for_each(|_| {\n    println!(\"Message broadcasted\");\n    Ok(())\n}).map_err(|err| {\n    println!(\"accept error = {:?}\", err);\n});\n\ntokio::run(server.join(messages).map(|_| ()));\n</code></pre>\n\n<p>The <code>map()</code> combinator is needed because <a href=\"https://docs.rs/futures/0.1.25/futures/future/struct.Join.html\" rel=\"nofollow noreferrer\"><code>Join</code></a> <code>Item</code> associated type is a tuple <code>((), ())</code> and\n<code>tokio::run()</code> consume a future task that require a <code>Future::Item</code> of type <code>()</code></p>\n"}], "owner": {"reputation": 9182, "user_id": 219449, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/70faf49f616436be935cb8b9512f7673?s=128&d=identicon&r=PG", "display_name": "Leonti", "link": "https://stackoverflow.com/users/219449/leonti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1378, "favorite_count": 0, "accepted_answer_id": 53041626, "answer_count": 1, "score": 0, "last_activity_date": 1540804477, "creation_date": 1540792229, "last_edit_date": 1540804477, "question_id": 53039483, "link": "https://stackoverflow.com/questions/53039483/start-multiple-threads-with-tokio", "title": "Start multiple threads with Tokio", "body": "<p>I'm trying to create a basic tcp server:</p>\n\n<ol>\n<li>Server should be able to broadcast a stream of messages to all of the connected clients  </li>\n<li>Server should be able to receive commands from all clients and process them  </li>\n</ol>\n\n<p>This is what I've got in my <code>main</code> function:</p>\n\n<pre><code>let (server_tx, server_rx) = mpsc::unbounded();\nlet state = Arc::new(Mutex::new(Shared::new(server_tx)));\n\nlet addr = \"127.0.0.1:6142\".parse().unwrap();\n\nlet listener = TcpListener::bind(&amp;addr).unwrap();\n\nlet server = listener.incoming().for_each(move |socket| {\n    // Spawn a task to process the connection\n    process(socket, state.clone());\n    Ok(())\n}).map_err(|err| {\n    println!(\"accept error = {:?}\", err);\n});\n\nprintln!(\"server running on localhost:6142\");\n\nlet _messages = server_rx.for_each(|_| {\n    // process messages here\n    Ok(())\n}).map_err(|err| {\n    println!(\"message error = {:?}\", err);\n});\n\ntokio::run(server);  \n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=35297de9bb6fb6c398d443684bf932c6&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>I'm using the <code>chat.rs</code> example from tokio repository as a base.<br>\nI'm sending data to <code>server_tx</code> on incoming tcp messages.<br>\nWhat I have trouble with is consuming them.<br>\nI'm \"consuming\" incoming message stream using <code>server_rx.for_each(|_| {</code>, now, how do I tell tokio to run it?  </p>\n\n<p><code>tokio::run</code> accepts a single future, but I have 2 (and possibly more). How do I combine them so they run in parallel?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1540797706, "post_id": 53038935, "comment_id": 92980342, "body": "What is <code>Proxy</code>? Can you provide a <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a> please?"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1540803439, "post_id": 53038935, "comment_id": 92982933, "body": "&quot;In Closure B, send again needs to take the ownership&quot; - That doesn&#39;t sound right. <code>mpsc::Sender::send</code> takes <code>&amp;self</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540819348, "post_id": 53038935, "comment_id": 92992282, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/28521637/155423\">How can I move a captured variable into a closure within a closure?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53038935/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "answers": [{"comments": [{"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1540831033, "post_id": 53042346, "comment_id": 92999762, "body": "Thanks. Very helpful. I end up fixing it by adding <code>clone()</code>s."}, {"owner": {"reputation": 459, "user_id": 2510591, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a4b15506108e1cf337adccce77602d51?s=128&d=identicon&r=PG", "display_name": "joseluisq", "link": "https://stackoverflow.com/users/2510591/joseluisq"}, "edited": false, "score": 0, "creation_date": 1611047260, "post_id": 53042346, "comment_id": 116317349, "body": "Or in my case, when I want to using a <code>struct</code> that needs to be called with top level arguments within a nested <code>FnMut </code> then I first annotate that struct with <code>#[derive(Clone)]</code> to be able to use <code>clone()</code>."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 9, "last_activity_date": 1540805148, "creation_date": 1540805148, "answer_id": 53042346, "question_id": 53038935, "link": "https://stackoverflow.com/questions/53038935/cannot-move-out-of-captured-variables-in-an-fnmut-closure/53042346#53042346", "title": "Cannot move out of captured variables in an `FnMut` closure", "body": "<p>Nested closures are tricky.</p>\n\n<p>Consider this:</p>\n\n<pre><code>fn use_a_fn_multiple_times(f: impl Fn(String)) {\n    f(\"foo\".to_owned());\n    f(\"bar\".to_owned());\n}\n\nfn use_fn_once(f: impl FnOnce() -&gt; Vec&lt;u8&gt;) {\n    println!(\"Bytes: {:?}\", f());\n}\n\nfn main() {\n  use_a_fn_multiple_times(|a: String| {\n    use_fn_once(move || a.into_bytes());\n  });\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=546cd8a5fe8085a34ed29d0202e106f2\" rel=\"noreferrer\">Playground</a></p>\n\n<p>Notice that the inner closure captures <code>a</code> by move. This is fine. The outer closure owns <code>a</code> and can do with it what it wants, including moving it into the inner closure (which, because it consumes its captured value, is a <code>FnOnce</code>).</p>\n\n<p>The outer closure is called multiple times, each time with a new string, and every time a new inner closure capturing this string is created.</p>\n\n<p>But what if what you want to capture comes from even further out?</p>\n\n<pre><code>fn use_a_fn_multiple_times(f: impl Fn(String)) {\n    f(\"foo\".to_owned());\n    f(\"bar\".to_owned());\n}\n\nfn use_fn_once(f: impl FnOnce() -&gt; Vec&lt;u8&gt;) {\n    println!(\"Bytes: {:?}\", f());\n}\n\nfn main() {\n  let outer_s = \"see:\".to_owned();\n\n  use_a_fn_multiple_times(|a: String| {\n    use_fn_once(move || {\n        let mut v = outer_s.into_bytes();\n        v.extend(a.into_bytes());\n        v\n    });\n  });\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=7f4e4e744abb33fad7a5f5556a32475f\" rel=\"noreferrer\">Playground</a></p>\n\n<p>Then you get the error you're seeing (except for <code>Fn</code> vs <code>FnMut</code>, which is immaterial to the problem). The inner closure is created anew on every call to the outer closure (it has to be, because it has to capture <code>a</code> every time), but it tries to capture <code>outer_s</code> by move every time. This can't work; after the first time, <code>outer_s</code> is moved from and thus invalid.</p>\n\n<p>To map this back to your code, it's wrong to say \"Closure B captures <code>notificator</code>\", because there isn't just one Closure B. There's as many as necessary, however often your nested <code>and_then</code> and <code>for_each</code> calls will end up in that piece of code. But only one can ever capture by move.</p>\n\n<p>So to solve this, you either need to make sure there's only one Closure B, or make sure you have enough <code>mpsc::Sender</code>s for everyone.</p>\n\n<p>The first way is done by pulling the closure out of the nested context.</p>\n\n<pre><code>let closure_b = move |b| {\n    notificator.send(b.len());\n    Ok(())\n};\nproxy.something()\n    .and_then(move |sub| {\n        sub.for_each(move |a| { // &lt;---- Closure A\n            proxy.something_else(a)\n                .and_then(closure_b)\n                .or_else(|e| {\n                    panic!(\"oops {}\", e);\n                    Ok(())\n                })\n        })\n    })\n    .map_err(|e| {\n        ()\n    })\n</code></pre>\n\n<p>except that won't work, since now Closure A faces the same issue, so you have to do it multiple times:</p>\n\n<pre><code>let closure_b = move |b| {\n    notificator.send(b.len());\n    Ok(())\n};\nlet closure_a = move |a| {\n    proxy.something_else(a)\n        .and_then(closure_b)\n        .or_else(|e| {\n            panic!(\"oops {}\", e);\n            Ok(())\n        })\n};\nproxy.something()\n    .and_then(move |sub| {\n        sub.for_each(closure_a)\n    })\n    .map_err(|e| {\n        ()\n    })\n</code></pre>\n\n<p>The second way involves a lot of <code>clone()</code> calls, and since I can't type-check your code, I won't attempt to write it.</p>\n\n<p>When all is said and done, though, your code will still fail, because you're moving out of <code>Proxy</code> while also trying to use it.</p>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3848, "favorite_count": 1, "accepted_answer_id": 53042346, "answer_count": 1, "score": 3, "last_activity_date": 1540805148, "creation_date": 1540788793, "last_edit_date": 1540797645, "question_id": 53038935, "link": "https://stackoverflow.com/questions/53038935/cannot-move-out-of-captured-variables-in-an-fnmut-closure", "title": "Cannot move out of captured variables in an `FnMut` closure", "body": "<pre><code>pub fn create_future(\n    notificator: mpsc::Sender&lt;usize&gt;,\n    proxy: Proxy,\n) -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    proxy.something()\n        .and_then(move |sub| {\n            sub.for_each(move |a| { // &lt;---- Closure A\n                proxy.something_else(a)\n                    .and_then(move |b| { // &lt;---- Closure B\n                        notificator.send(b.len());  // &lt;---- Error!\n                        Ok(())\n                    })\n                    .or_else(|e| {\n                        panic!(\"oops {}\", e);\n                        Ok(())\n                    })\n            })\n        })\n        .map_err(|e| {\n            ()\n        })\n}\n</code></pre>\n\n<p>This doesn't compile because</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.and_then(move |b| {\n          ^^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n</code></pre>\n\n<p>My understanding of the error is:</p>\n\n<ol>\n<li>Closure B is <code>FnMut</code>, and it captures <code>notificator</code> by taking its ownership</li>\n<li>In Closure B, <code>send</code> again needs to take the ownership</li>\n<li>Now both <code>send</code> and Closure B are modifying <code>notificator</code> thus the error.</li>\n</ol>\n\n<p>Is my understanding right? How can I solve this problem?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 196, "user_id": 7119758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5878a5823807d87ba772915a02435c40?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammed", "link": "https://stackoverflow.com/users/7119758/mohammed"}, "edited": false, "score": 0, "creation_date": 1540752755, "post_id": 53034945, "comment_id": 92970081, "body": "But the branch that keeps the reference returns! Otherwise why does the case with simple if statement work? it makes the same borrows."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 196, "user_id": 7119758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5878a5823807d87ba772915a02435c40?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammed", "link": "https://stackoverflow.com/users/7119758/mohammed"}, "edited": false, "score": 0, "creation_date": 1540753134, "post_id": 53034945, "comment_id": 92970196, "body": "@Mohammed There is only one lifetime <code>&#39;b</code>, and the borrow checker tries to find a suitable value for it.  There aren&#39;t two different lifetimes for each branch of the <code>if</code>.  I&#39;ll add a comment to the answer why the other version works."}, {"owner": {"reputation": 196, "user_id": 7119758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5878a5823807d87ba772915a02435c40?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammed", "link": "https://stackoverflow.com/users/7119758/mohammed"}, "edited": false, "score": 0, "creation_date": 1540758765, "post_id": 53034945, "comment_id": 92971815, "body": "Is there a safe way to rewrite it without borrowing twice? The code is logically safe as I see, correct me if I&#39;m wrong"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540759315, "post_id": 53034945, "comment_id": 92971949, "body": "<i>NLLs won&#39;t help you</i> \u2014 they will, when the next iteration of NLL is enabled. See the linked duplicate for more information."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 196, "user_id": 7119758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5878a5823807d87ba772915a02435c40?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammed", "link": "https://stackoverflow.com/users/7119758/mohammed"}, "edited": false, "score": 0, "creation_date": 1540801163, "post_id": 53034945, "comment_id": 92981869, "body": "@Mohammed I think the code is safe as it stands.  I can&#39;t think of an easy solution \u2013 I guess I would need to understand more of the context to make a suggestion how to redesign this."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 3, "last_activity_date": 1540759341, "last_edit_date": 1540759341, "creation_date": 1540752383, "answer_id": 53034945, "question_id": 53034769, "link": "https://stackoverflow.com/questions/53034769/if-let-borrow-stays-after-return-even-with-featurenll/53034945#53034945", "title": "If let borrow stays after return even with #![feature(nll)]", "body": "<p>Let's look at the lifetimes in detail here.  The function <code>foo()</code> is desugared to</p>\n\n<pre><code>fn foo&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;&amp;'a i32&gt;\n</code></pre>\n\n<p>i.e. the returned value lives at most as long as <code>self</code>; similarly for <code>bar()</code>.</p>\n\n<p>In <code>foo()</code>, the line</p>\n\n<pre><code>if let Some(val) = self.bar() {\n</code></pre>\n\n<p>creates a borrow of <code>self</code> that lives for some lifetime <code>'b</code>, and the returned reference <code>val</code> also has this lifetime <code>'b</code>.  Since you then return <code>Some(val)</code>, the lifetime <code>'b</code> must outlive the lifetime <code>'a</code> of the <code>self</code> parameter to <code>foo()</code>, which is definitely longer than the runtime of <code>foo()</code>.  This means you can't borrow <code>self</code> again at any later point in <code>foo()</code>.</p>\n\n<p>I think what is surprising in this example is that the borrow of <code>self</code> even happens if <code>bar()</code> returns <code>None</code>.  Intuitively, we feel that no reference is returned in this case, so we don't need a borrow.  However, lifetimes in Rust are checked by the type checker, and the type checker does not understand the meaning of different values of the type.  The value returned by <code>bar()</code> has the type <code>Option&lt;&amp;'b i32&gt;</code> regardless of whether it returns <code>None</code> or <code>Some</code>, and the lifetime <code>'b</code> hast to be at least as long as <code>'a</code> \u2013 given the constraints, there is no other solution, so the borrow checker has to refuse this.</p>\n\n<p>With non-lexical lifetimes, the compiler can introduce more flexible lifetimes that are not bound to lexical scopes and can overlap in ways that wasn't possible before.  However, if there simply is no lifetime that satisfies all constraints, NLLs won't help you.</p>\n\n<p>The last code snippet you give is quite different.  Let's add lifetimes:</p>\n\n<pre><code>if self.bar&lt;'b&gt;().is_some() {\n    return self.bar&lt;'c&gt;();                                                                                      \n}\n</code></pre>\n\n<p>Now we call <code>bar()</code> twice, and each of these calls can have a different lifetime.  Only the lifetime <code>'c</code> needs to outlive <code>'a</code> now, but the lifetime <code>'b</code> only needs to be long enough to call <code>is_some()</code> on the result.  The borrow with the lifetime <code>'c</code> only happens when the branch is taken, and no conflicts occur.</p>\n"}], "owner": {"reputation": 196, "user_id": 7119758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5878a5823807d87ba772915a02435c40?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammed", "link": "https://stackoverflow.com/users/7119758/mohammed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 226, "favorite_count": 0, "closed_date": 1540759197, "accepted_answer_id": 53034945, "answer_count": 1, "score": 2, "last_activity_date": 1540759341, "creation_date": 1540751196, "last_edit_date": 1540759237, "question_id": 53034769, "link": "https://stackoverflow.com/questions/53034769/if-let-borrow-stays-after-return-even-with-featurenll", "closed_reason": "Duplicate", "title": "If let borrow stays after return even with #![feature(nll)]", "body": "<p>I was working on a big file but this is a small toy example that causes the same issue. Sorry if the example itself makes no sense.</p>\n\n<pre><code>#![feature(nll)]\nstruct S(i32);\n\nimpl S {\n    fn foo(&amp;mut self) -&gt; Option&lt;&amp;i32&gt; {\n        if let Some(val) = self.bar() {\n            return Some(val);\n        }\n        let y = &amp;mut self.0;\n        None\n    }\n\n    fn bar(&amp;mut self) -&gt; Option&lt;&amp;i32&gt; {\n        None\n    }\n}\n\nfn main() {\n    S(0).foo();\n}\n</code></pre>\n\n<p>This doesn't pass the borrow checker:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `self.0` as mutable more than once at a time\n --&gt; test.rs:9:17\n  |\n6 |         if let Some(val) = self.bar() {\n  |                            ---- first mutable borrow occurs here\n...\n9 |         let y = &amp;mut self.0;\n  |                 ^^^^^^^^^^^ second mutable borrow occurs here\n  |\nnote: first borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 5:5...\n --&gt; test.rs:5:5\n  |\n5 | /     fn foo(&amp;mut self) -&gt; Option&lt;&amp;i32&gt; {\n6 | |         if let Some(val) = self.bar() {\n7 | |             return Some(val);\n8 | |         }\n9 | |         let y = &amp;mut self.0;\n10| |         None\n11| |     }\n  | |_____^\n</code></pre>\n\n<p>Shouldn't this be valid (even without <code>#![feature(nll)]</code>) since it is returning in the <code>if let</code> block? It's worth noting that if I change the <code>if let</code> block to the following, it compiles fine</p>\n\n<pre><code>if self.bar().is_some() {\n    return self.bar();                                                                                      \n}\n</code></pre>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540758356, "post_id": 53033807, "comment_id": 92971708, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/53033807/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. Try to produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> or you can reproduce it in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540758598, "post_id": 53033807, "comment_id": 92971778, "body": "<a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540750844, "post_id": 53034427, "comment_id": 92969459, "body": "I would prefer the later, but I don&#39;t know how this can be done, because I need some place to make a dynamic string to a static one. Maybe the StructX is the place?! Don&#39;t know if this is the rust way or there is a better possibility?!"}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540752972, "post_id": 53034427, "comment_id": 92970142, "body": "Not sure... Is it possible to get a static return type, if I move something non-static in?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540758546, "post_id": 53034427, "comment_id": 92971769, "body": "While this is technically true, it&#39;s mostly useless as there&#39;s very few ways to create a structure that meet the requirements without doing terrible things to the rest of the program, like leaking memory."}], "tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": false, "score": 0, "last_activity_date": 1540748707, "creation_date": 1540748707, "answer_id": 53034427, "question_id": 53033807, "link": "https://stackoverflow.com/questions/53033807/how-do-i-get-a-static-path-for-tokiofsfileopen/53034427#53034427", "title": "How do I get a static path for tokio::fs::File::open?", "body": "<p>You can restrict the lifetime of <code>&amp;self</code>:</p>\n\n<pre><code>impl StructX {\n    fn doit(&amp;'static self) {\n        // here, we know that self and its members are 'static\n    }\n}\n</code></pre>\n\n<p>If you do this, you may actually be better off to have <code>StructX</code> store the <code>'static</code> borrow of the path in the first place (instead of a string).</p>\n"}, {"comments": [{"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540759576, "post_id": 53035816, "comment_id": 92972006, "body": "Mmh. Do I have not tried the cloning, because the compiler was talking about lifetimes? I&#39;m not sure. I&#39;ll see."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540761508, "post_id": 53035816, "comment_id": 92972418, "body": "I&#39;m sorry, but the clone doesn&#39;t work. open() wants to have a <a href=\"https://tokio-rs.github.io/tokio/tokio_fs/file/struct.File.html#method.open\" rel=\"nofollow noreferrer\">&#39;static</a> - Perhaps you can show me, how you can implement fn make_static_str&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;&#39;static str;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540761887, "post_id": 53035816, "comment_id": 92972515, "body": "@Markus <i><code>fn make_static_str&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;&#39;static str</code>.</i> please search for existing questions: <a href=\"https://stackoverflow.com/q/23975391/155423\">How to convert a String into a &amp;&#39;static str</a>. However, <a href=\"https://stackoverflow.com/questions/53033807/how-do-i-get-a-static-path-for-tokiofsfileopen/53035816?noredirect=1#comment92971769_53034427\">as I commented</a>, doing so is usually a <b>very bad idea</b>."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540762338, "post_id": 53035816, "comment_id": 92972616, "body": "Ok, I understand this, but I don&#39;t know how I should create a future for <a href=\"https://docs.rs/tokio/0.1.12/tokio/runtime/fn.run.html\" rel=\"nofollow noreferrer\">tokio::run()</a> and how the clone should work, when there are everywhere &#39;static requirements. The clone of &amp;str is a &amp;str and not a &amp;&#39;static str?!"}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540766743, "post_id": 53035816, "comment_id": 92973595, "body": "I&#39;ve updated the question with a link to rust playground."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540826798, "post_id": 53035816, "comment_id": 92997176, "body": "Ok, thanks. But it doesn&#39;t change anything that I&#39;m feeling bad about using stacko. I don&#39;t get the answers to my questions. At the end this stupid path is static const (it is config which doesn&#39;t change), but is read from a configfile during app init. It is stored in memory the whole lifecycle of the app. I don&#39;t see any need in all these clonings. A mutable reference should be enough for a million of threads to read this memory. And all without cloning, moving, borrowing, locking. There must be something wrong with a language if this becomes so difficult and needs mem-io multiple times."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540826960, "post_id": 53035816, "comment_id": 92997271, "body": "<i>At the end this [...] is config which doesn&#39;t change [...] read from a configfile during app init</i> \u2014 this is important information to include. If that&#39;s the case, then <a href=\"https://stackoverflow.com/q/27791532/155423\">make it a singleton</a>, which will make the string itself effectively static. I&#39;ll add an example."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540892620, "post_id": 53035816, "comment_id": 93021243, "body": "I use lazy_static already, but together with the config crate and a RWLock. I have to see, if it is possible to get something static out."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540904128, "post_id": 53035816, "comment_id": 93027813, "body": "@Markus again, more detail that you&#39;ve left out. In that case, no, you cannot get a static reference from it because at <b>any</b> point in the future the <code>RwLock</code> might be locked and the inner value destroyed. Rust will not allow you to introduce memory unsafety."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1540904233, "last_edit_date": 1540904233, "creation_date": 1540758735, "answer_id": 53035816, "question_id": 53033807, "link": "https://stackoverflow.com/questions/53033807/how-do-i-get-a-static-path-for-tokiofsfileopen/53035816#53035816", "title": "How do I get a static path for tokio::fs::File::open?", "body": "<p>TL;DR Use a <code>String</code> instead of a <code>&amp;str</code>. This might change when <code>async</code> / <code>await</code> syntax is stabilized.</p>\n\n<hr>\n\n<p>Here's the MCVE I made of your original question:</p>\n\n<pre><code>extern crate tokio; // 0.1.11\n\ntrait TraitN {}\n\nstruct StructX {\n    path: String,\n}\n\nimpl TraitN for StructX {}\n\nfn new(path: &amp;str) -&gt; Box&lt;TraitN&gt; {\n    Box::new(StructX {\n        path: path.to_string(),\n    })\n}\n\nimpl StructX {\n    fn doit(&amp;self) {\n        tokio::fs::File::open(self.path.clone());\n    }\n}\n</code></pre>\n\n<p>To solve this, clone the <code>String</code> and give ownership of it to the function:</p>\n\n<pre><code>impl StructX {\n    fn doit(&amp;self) {\n        tokio::fs::File::open(self.path.clone());\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>With your example code, there are numerous problems:</p>\n\n<pre><code>fn start_runtime() -&gt; Result&lt;()&gt; {\n    let path: &amp;str = get_path().wait().unwrap().as_str();\n    tokio::run(doit(path.clone()));\n    Ok(())\n}\n</code></pre>\n\n<ol>\n<li><p>You cannot take a reference to the result of <code>unwrap</code> because nothing will own that value. You cannot have a reference to this kind of temporary.</p></li>\n<li><p>Cloning a <code>&amp;'a str</code> returns a <code>&amp;'a str</code>, not a <code>String</code>.</p></li>\n<li><p>It doesn't make sense to call <code>wait</code> on the value because that blocks the thread. Run everything in the reactor loop.</p></li>\n</ol>\n\n<p>This function should look like </p>\n\n<pre><code>fn start_runtime() -&gt; Result&lt;()&gt; {\n    tokio::run({\n        get_path()\n            .map_err(|e| panic!(\"{}\", e))\n            .and_then(|path| doit(path))\n    });\n    Ok(())\n}\n</code></pre>\n\n<p>Then all of your code should switch to <code>impl Into&lt;String&gt;</code> instead of <code>&amp;str</code> of <code>&amp;'static str</code>. <code>doit</code> also needs to be able to create duplicate <code>String</code>s:</p>\n\n<pre><code>fn doit(path: impl Into&lt;String&gt; + Clone) -&gt; impl Future&lt;Item = (), Error = ()&gt; + 'static {\n    let n = 0;\n    let path = path.into();\n    loop_fn(n, move |_nr| {\n        let lh = get_handler(path.clone()).unwrap();\n        lh.get_all()\n            .or_else(|_| Err(()))\n            .and_then(|_all| ok(Loop::Break(())))\n    })\n}\n</code></pre>\n\n<blockquote>\n  <p>this [...] is config which doesn't change [...] read from a configfile during app init.</p>\n</blockquote>\n\n<p>In that case, <a href=\"https://stackoverflow.com/q/27791532/155423\">create a singleton</a> which will give you an effectively-static value:</p>\n\n<pre><code>extern crate lazy_static; // 1.1.0\n\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref PATH: String = {\n        // Should be read from a file.\n        String::from(\"/the/path/to/the/thing\")\n    };\n}\n</code></pre>\n\n<p>Then change all of the values to <code>&amp;'static str</code>:</p>\n\n<pre><code>#[derive(Debug)]\npub struct Handler {\n    path: &amp;'static str,\n}\n\nimpl HandlerTrait for Handler {\n    fn new(path: &amp;'static str) -&gt; Box&lt;HandlerTrait&gt; {\n        Box::new(Handler {\n            path\n        })\n    }\n}\n</code></pre>\n\n<p>And take a reference to the singleton:</p>\n\n<pre><code>fn start_runtime() -&gt; Result&lt;()&gt; {\n    tokio::run(doit(&amp;PATH));\n    Ok(())\n}\n</code></pre>\n\n<p>You can couple this with <a href=\"https://stackoverflow.com/a/53034427/155423\">phimuemue's answer</a> to get a <code>&amp;'static MyConfigStruct</code>, which could then have a <code>fn foo(&amp;'static self)</code> that is available.</p>\n\n<hr>\n\n<blockquote>\n  <p>There must be something wrong with a language if this becomes so difficult and needs mem-io multiple times.</p>\n</blockquote>\n\n<p>You are partially correct. It's difficult to have maximally performant async code with today's Rust (1.30) because Rust wants to ensure memory safety above all else. This doesn't mean that the code is unperformant, just that there's a bit of room to do better.</p>\n\n<p>Honestly, making clones here is unlikely to be a performance bottleneck, but it is annoying. That's where <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md\" rel=\"nofollow noreferrer\"><code>async</code> and <code>await</code> syntax</a> comes in. This will allow futures to more easily make use of references in an idiomatic Rust manner.</p>\n\n<blockquote>\n  <p>because the runtime does not need to run the whole time [...] Do I understand something wrong?</p>\n</blockquote>\n\n<p>However, <code>async</code> and <code>await</code> still might not help you, as by default Tokio will run your future on a different thread. That's one of the primary reasons it requires a <code>'static</code> bound. This prevents a Tokio thread from having a reference to a stack local that goes out of scope, introducing memory unsafety. This isn't a unique problem to Tokio, however.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a></li>\n<li><a href=\"https://stackoverflow.com/q/40053550/155423\">The compiler suggests I add a &#39;static lifetime because the parameter type may not live long enough, but I don&#39;t think that&#39;s what I want</a></li>\n<li><a href=\"https://stackoverflow.com/q/41794800/155423\">Why is the bound `T: &#39;a` required in order to store a reference `&amp;&#39;a T`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38626644/155423\">Why does the Rust compiler request I constrain a generic type parameter&#39;s lifetime (error E0309)?</a></li>\n</ul>\n\n<h2>Other bits</h2>\n\n<p>It appears that <strong>every single</strong> call to <code>wait</code> in this code is a misuse of futures. You may wish to re-read <a href=\"https://tokio.rs/\" rel=\"nofollow noreferrer\">the Tokio docs</a> to better understand understand how you are supposed to chain futures. If there's a <code>wait</code> call, it's usually at the end of everything, and even that is rare when using Tokio. </p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/52521201/155423\">How do I synchronously return a value calculated in an asynchronous Future in stable Rust?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "is_accepted": false, "score": 0, "last_activity_date": 1540772287, "creation_date": 1540772287, "answer_id": 53037254, "question_id": 53033807, "link": "https://stackoverflow.com/questions/53033807/how-do-i-get-a-static-path-for-tokiofsfileopen/53037254#53037254", "title": "How do I get a static path for tokio::fs::File::open?", "body": "<p>I can answer this now by myself:</p>\n\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=f3e2ab83e59162735802bbc4699112ec\" rel=\"nofollow noreferrer\"><code>fn make_static_str&lt;T&gt;(s: T) -&gt; &amp;'static str where T: Into&lt;String&gt;</code></a></li>\n<li>A solution with <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=cc29eb97b06644bb310f72adc0af81e7\" rel=\"nofollow noreferrer\"><code>Arc&lt;Mutex&lt;String&gt;&gt;</code></a> - The test fails because there is no file to read on playground.</li>\n</ul>\n"}], "owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 438, "favorite_count": 0, "accepted_answer_id": 53035816, "answer_count": 3, "score": 0, "last_activity_date": 1540904233, "creation_date": 1540744995, "last_edit_date": 1540817638, "question_id": 53033807, "link": "https://stackoverflow.com/questions/53033807/how-do-i-get-a-static-path-for-tokiofsfileopen", "title": "How do I get a static path for tokio::fs::File::open?", "body": "<p>The <code>tokio::fs::File::open(path: T + 'static)</code> requires a <code>'static</code> lifetime on its <code>path</code> parameter. </p>\n\n<p>This makes sense because it is handled in runtime threads during the program's execution. I think it would make more sense if you could pass your own lifetimes, because the runtime does not need to run the whole time and so you could throw away some stuff. Do I understand something wrong?</p>\n\n<p>I'd like to stay for <code>'static</code> at the moment and so my problem is this...</p>\n\n<p>I have a <code>trait TraitN</code> and some <code>struct StructX { path: String, }</code> with a <code>fn new(path: &amp;String) -&gt; Box&lt;TraitN&gt;</code>. The <code>new</code> creates and sets <code>self.path = path.to_string();</code>.</p>\n\n<p>In some impl <code>fn doit(&amp;self) { ... }</code> for <code>StructX</code>, I'd like to call <code>tokio::fs::File::open(&amp;self.path)</code>.</p>\n\n<p>How can I pass <code>&amp;self.path</code> with a <code>'static</code> lifetime?</p>\n\n<p>This is a complete example:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio;\n#[macro_use]\nextern crate error_chain;\n\nuse futures::future;\nuse futures::future::{loop_fn, ok, Future, Loop};\nuse futures::Stream;\nuse std::io::BufReader;\nuse tokio::{fs, io};\n\nmod error {\n    error_chain!{}\n}\n\nuse error::*;\n\ntype FutureResult&lt;T&gt; = future::FutureResult&lt;T, Error&gt;;\n\ntrait HandlerTrait {\n    fn new(path: &amp;str) -&gt; Box&lt;HandlerTrait&gt;\n    where\n        Self: Sized;\n    fn get_all(&amp;self) -&gt; FutureResult&lt;Vec&lt;String&gt;&gt;;\n}\n\n#[derive(Debug)]\npub struct Handler {\n    path: String,\n}\n\nimpl HandlerTrait for Handler {\n    fn new(path: &amp;str) -&gt; Box&lt;HandlerTrait&gt; {\n        Box::new(Handler {\n            path: path.to_string(),\n        })\n    }\n\n    fn get_all(&amp;self) -&gt; FutureResult&lt;Vec&lt;String&gt;&gt; {\n        let file = fs::File::open(self.path.clone())\n            .and_then(|file: fs::File| ok(file))\n            .wait()\n            .unwrap();\n        let lines = io::lines(BufReader::new(file));\n        ok(lines\n            .filter(|line| line.len() &gt; 80)\n            .map(|all| all[0..80].to_string())\n            .collect()\n            .wait()\n            .unwrap())\n    }\n}\n\nfn get_handler(path: &amp;str) -&gt; Option&lt;Box&lt;HandlerTrait&gt;&gt; {\n    Some(Handler::new(path))\n}\n\nfn get_path() -&gt; FutureResult&lt;String&gt; {\n    ok(\"./somepath/file\".to_string())\n}\n\nfn start_runtime() -&gt; Result&lt;()&gt; {\n    let path: &amp;str = get_path().wait().unwrap().as_str();\n    tokio::run(doit(path.clone()));\n    Ok(())\n}\n\nfn doit(path: &amp;'static str) -&gt; impl Future&lt;Item = (), Error = ()&gt; + 'static {\n    let n = 0;\n    loop_fn(n, move |_nr| {\n        let lh = get_handler(path).unwrap();\n        lh.get_all()\n            .or_else(|_| Err(()))\n            .and_then(|_all| ok(Loop::Break(())))\n    })\n}\n\n#[test]\nfn test() {\n    start_runtime().unwrap();\n    assert!(true);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/lib.rs:63:22\n   |\n63 |     let path: &amp;str = get_path().wait().unwrap().as_str();\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^         - temporary value only lives until here\n   |                      |\n   |                      temporary value does not live long enough\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=91cbc0d549e32285728ca9caee98d043\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540760868, "post_id": 53033377, "comment_id": 92972292, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/30422177/155423\">How do I write an iterator that returns references to itself?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53033377/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540761527, "post_id": 53033377, "comment_id": 92972424, "body": "@Shepmaster Thanks -- as a matter of fact I&#39;ve read that question just earlier today. Please correct me if I&#39;m wrong, but this one&#39;s a bit different since, first, <code>self</code> in the trait method is by-value and not a mutable reference like in the iterator case? And, second, the reference doesn&#39;t escape the trait method, it&#39;s only passed to a closure that this method takes? This led me to think that there&#39;s ways to solve it (unlike the streaming-iterator case which seems to impose more restrictions)"}], "answers": [{"tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": false, "score": 0, "last_activity_date": 1540760647, "last_edit_date": 1540760647, "creation_date": 1540747244, "answer_id": 53034177, "question_id": 53033377, "link": "https://stackoverflow.com/questions/53033377/associated-type-lifetime-when-passing-internal-reference-to-a-generic-closure/53034177#53034177", "title": "Associated type lifetime when passing internal reference to a generic closure", "body": "<p>You can make the first example compile by specifying that <code>F</code> must be able to deal with more generic lifetimes:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn subscribe&lt;F&gt;(self, func: F)\n    where\n        for&lt;'b&gt; F: Fn(&amp;'b i32) + 'a, // f can cope with any lifetime 'b\n    {\n        let val = self.val.clone();\n        consume(move |x| {\n            *val.borrow_mut() = x;\n            func(&amp;*val.borrow())\n        })\n    }\n}\n</code></pre>\n\n<p>As far as I can see, your second example suffers from at least one other problem: You call</p>\n\n<pre><code>self.stream.subscribe(move |x: S::Item| {\n    *val.borrow_mut() = x;\n    func(&amp;*val.borrow());\n})\n</code></pre>\n\n<p>but <code>subscribe</code> accepts a function accepting a borrow (i.e. <code>&amp;S::Item</code>, not <code>S::Item</code>). If you pass in a reference, I am not sure if/how you can assign that to <code>val.borrow_mut</code>. You possibly would have to convert it to an owned value.</p>\n\n<p>As you already mention, you may also set <code>Item = S::Item</code> (without a borrow). This, however means that you cannot simply pass <code>val.borrow()</code> to <code>func</code> within the closure, since that would move from a borrowed value. Again, the solution could be to somehow convert it to an owned value.</p>\n"}], "owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 202, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1540760647, "creation_date": 1540742238, "last_edit_date": 1540760584, "question_id": 53033377, "link": "https://stackoverflow.com/questions/53033377/associated-type-lifetime-when-passing-internal-reference-to-a-generic-closure", "title": "Associated type lifetime when passing internal reference to a generic closure", "body": "<p>Here's an example that compiles fine:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct Foo&lt;'a&gt; {\n    val: Rc&lt;RefCell&lt;i32&gt;&gt;,\n    dummy: Option&lt;&amp;'a i32&gt;,\n}\n\nfn consume&lt;T&gt;(_: T) {}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    // Note that &amp;i32 has no lifetime markers\n    fn subscribe&lt;F&gt;(self, func: F)\n    where\n        F: Fn(&amp;i32) + 'a,\n    {\n        let val = self.val.clone();\n        consume(move |x: i32| {\n            *val.borrow_mut() = x;\n            func(&amp;*val.borrow())\n        })\n    }\n}\n</code></pre>\n\n<p>Here's what what I'm trying to achieve and doesn't compile:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\ntrait Stream&lt;'a&gt; {\n    type Item: 'a;\n\n    fn subscribe&lt;F&gt;(self, func: F)\n    where\n        F: Fn(Self::Item) + 'a;\n}\n\nstruct Bar&lt;'a, S: Stream&lt;'a&gt;&gt; {\n    stream: S,\n    val: Rc&lt;RefCell&lt;S::Item&gt;&gt;,\n}\n\nimpl&lt;'a, S: Stream&lt;'a&gt;&gt; Stream&lt;'a&gt; for Bar&lt;'a, S&gt; {\n    type Item = &amp;'a S::Item; // 'a doesn't seem right here...\n\n    fn subscribe&lt;F&gt;(self, func: F)\n    where\n        F: Fn(Self::Item) + 'a,\n    {\n        let val = self.val.clone();\n        self.stream.subscribe(move |x: S::Item| {\n            *val.borrow_mut() = x;\n            func(&amp;*val.borrow());\n        })\n    }\n}\n</code></pre>\n\n<p>This example is almost identical to the first. The only difference is that because it's a trait, we have to assign an explicit lifetime to the associated type, <code>Item</code>, which is a reference. Setting it to <code>'a</code> causes lifetime conflicts (rightfully so):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; src/lib.rs:27:24\n   |\n27 |             func(&amp;*val.borrow());\n   |                        ^^^^^^\n   |\nnote: first, the lifetime cannot outlive the lifetime  as defined on the body at 25:31...\n  --&gt; src/lib.rs:25:31\n   |\n25 |         self.stream.subscribe(move |x: S::Item| {\n   |                               ^^^^^^^^^^^^^^^^^\nnote: ...so that closure can access `val`\n  --&gt; src/lib.rs:27:20\n   |\n27 |             func(&amp;*val.borrow());\n   |                    ^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 17:6...\n  --&gt; src/lib.rs:17:6\n   |\n17 | impl&lt;'a, S: Stream&lt;'a&gt;&gt; Stream&lt;'a&gt; for Bar&lt;'a, S&gt; {\n   |      ^^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/lib.rs:27:18\n   |\n27 |             func(&amp;*val.borrow());\n   |                  ^^^^^^^^^^^^^^\n</code></pre>\n\n<p>In fact, the first example can be modified to fail with exactly the same error if you were to replace <code>Fn(&amp;i32)</code> with <code>Fn(&amp;'a i32)</code> in the function signature.</p>\n\n<p>Is it possible to make the second example compile? Possibly via the use of some hacks or unsafe blocks, I'd be willing to accept anything really. Changing signatures or reshuffling the logic if that's required. What should the lifetime of the associated type <code>Item</code> be?</p>\n"}, {"tags": ["arrays", "string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 0, "creation_date": 1540739342, "post_id": 53032884, "comment_id": 92966084, "body": "Curios, why can&#39;t I have values of type str?"}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "reply_to_user": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 1, "creation_date": 1540742459, "post_id": 53032884, "comment_id": 92966950, "body": "@camccar it&#39;s because the str type doesn&#39;t have a size. Therefore, its size can&#39;t be calculated for pre-allocating memory on the stack. On the other hand, a reference does have a size (It&#39;s basically just a pointer)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1540738879, "creation_date": 1540738879, "answer_id": 53032884, "question_id": 53032711, "link": "https://stackoverflow.com/questions/53032711/how-do-i-return-a-fixed-size-array-of-string-literals-from-a-function/53032884#53032884", "title": "How do I return a fixed size array of string literals from a function?", "body": "<p>It's saying <code>str</code> doesn't have a fixed size, not that the array doesn't.  You can't <em>have</em> values of type <code>str</code>, you can only have them behind some kind of pointer.</p>\n\n<p>Use <code>[&amp;'static str; 100]</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 0, "creation_date": 1540739160, "post_id": 53032888, "comment_id": 92966037, "body": "Worked fine. I&#39;m a little confused as to why I need to put static if string literals always have a static lifetime."}, {"owner": {"reputation": 4386, "user_id": 15529, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/094c4877f215aa468d84c42a4127c585?s=128&d=identicon&r=PG", "display_name": "gimpf", "link": "https://stackoverflow.com/users/15529/gimpf"}, "reply_to_user": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 0, "creation_date": 1540739559, "post_id": 53032888, "comment_id": 92966142, "body": "Lifetimes are part of the type, and types need to be completely specified for function signatures in rust. The is something called <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\" rel=\"nofollow noreferrer\">lifetime elision</a> which simplifies <i>specific</i> cases, but Rust only rarely used such deduced properties. In this case elision does not apply because there is no lifetime use for the input arguments (as there are none)."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 1, "creation_date": 1540763686, "post_id": 53032888, "comment_id": 92972997, "body": "@camccar No the duplicate say an equivalent of this answer."}, {"owner": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "edited": false, "score": 0, "creation_date": 1540763828, "post_id": 53032888, "comment_id": 92973033, "body": "I don&#39;t see anywhere that says prepend with static."}], "tags": [], "owner": {"reputation": 4386, "user_id": 15529, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/094c4877f215aa468d84c42a4127c585?s=128&d=identicon&r=PG", "display_name": "gimpf", "link": "https://stackoverflow.com/users/15529/gimpf"}, "is_accepted": true, "score": 7, "last_activity_date": 1540739322, "last_edit_date": 1540739322, "creation_date": 1540738896, "answer_id": 53032888, "question_id": 53032711, "link": "https://stackoverflow.com/questions/53032711/how-do-i-return-a-fixed-size-array-of-string-literals-from-a-function/53032888#53032888", "title": "How do I return a fixed size array of string literals from a function?", "body": "<p><code>str</code> is <a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noreferrer\">the str primitive type</a>, which is an <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"noreferrer\">unsized type</a>, having some limitations -- you encountered one of them.</p>\n\n<p>To solve your issue, instead of returning a plain <code>str</code>, you need to return a <code>&amp;str</code>, a borrowed string slice.  In this specific case you could even use <code>&amp;'static str</code>, because string literals always have a <code>static</code> lifetime.</p>\n\n<p>Also, because a primitive array is also a DST (dynamically sized type, another way to size unsized type), you need to specify the number of elements (which you did correctly).</p>\n\n<p>So, the complete declaration would be <code>fn getValues()-&gt; [&amp;'static str; 100]</code>.</p>\n\n<p>If you do not know the size of the array at compile time, you might want to use a <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\"><code>Vec</code></a>, if you have some non-literal strings you likely want to use a <a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noreferrer\"><code>String</code></a>.  That would look like</p>\n\n<pre><code>fn getValues() -&gt; Vec&lt;String&gt; { vec![\"shoten\".into()] }\n</code></pre>\n\n<p>P.S.: Do not shy away from those heap-allocated, owned types -- they do make programming easier.  Fighting with references and lifetimes is good style, but you don't need to do all that upfront, but instead optimize and refactor later.</p>\n"}], "owner": {"reputation": 622, "user_id": 1710501, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e308decda9992832f6c0634f134fb7b1?s=128&d=identicon&r=PG", "display_name": "camccar", "link": "https://stackoverflow.com/users/1710501/camccar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2697, "favorite_count": 0, "accepted_answer_id": 53032888, "answer_count": 2, "score": 2, "last_activity_date": 1540763934, "creation_date": 1540737870, "last_edit_date": 1540763923, "question_id": 53032711, "link": "https://stackoverflow.com/questions/53032711/how-do-i-return-a-fixed-size-array-of-string-literals-from-a-function", "title": "How do I return a fixed size array of string literals from a function?", "body": "<p>This function will work for the type <code>i32</code>, but for the type <code>str</code>:</p>\n\n<pre><code>fn getValues() -&gt; [str; 2] {\n    [\n        \"37107287533902102798797998220837590246510135740250\",\n        \"46376937677490009712648124896970078050417018260538\",\n    ]\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `str` cannot be known at compilation time\n --&gt; src/lib.rs:1:1\n  |\n1 | / fn getValues() -&gt; [str; 2] {\n2 | |     [\n3 | |         \"37107287533902102798797998220837590246510135740250\",\n4 | |         \"46376937677490009712648124896970078050417018260538\",\n5 | |     ]\n6 | | }\n  | |_^ doesn't have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `str`\n  = note: to learn more, visit &lt;https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n  = note: slice and array elements must have `Sized` type\n</code></pre>\n</blockquote>\n\n<p>This error makes me think I need to add the size but I did: a size of 2. What is Rust wanting?</p>\n"}, {"tags": ["rust", "traits", "trait-objects"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1540725695, "post_id": 53030440, "comment_id": 92962511, "body": "Other recommendations: an <code>if..else</code> statement would be more readable than a <code>match</code> statement on a <code>bool</code>. The call to <code>make_numbers</code> also has to list both type parameters, even if just filled with <code>_</code> to let the compiler infer them: <code>make_numbers::&lt;u8, _&gt;(&amp;mut rng)</code>. The implementation of <code>make_numbers</code> can become a one-liner with the iterator API: <code>(0..10).map(|_| format!(&quot;_{}&quot;, rng.gen::&lt;T&gt;())).collect()</code>. Finally, don&#39;t forget to call <code>rustfmt</code> on your code."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1540727422, "post_id": 53030440, "comment_id": 92962952, "body": "@E_net4 I agree this is a duplicate, but there is a specific twist here, since the <code>Rng</code> trait isn&#39;t object safe, and the <code>RngCore</code> trait needs to be used instead."}, {"owner": {"reputation": 421, "user_id": 6148311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/813fb38ee62e940389bd4af40e65d2a1?s=128&d=identicon&r=PG&f=1", "display_name": "mrspl", "link": "https://stackoverflow.com/users/6148311/mrspl"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1540731226, "post_id": 53030440, "comment_id": 92963940, "body": "Thanks for the comments. @E_net4, these are good suggestions! Regarding the duplicate, I agree that this might look like a duplicate, but as Sven mentioned, the boxing solution doesn&#39;t work in this case and my troubles are more about how to find a good solution when the underlying trait is not box-able (object-safe)..."}], "answers": [{"tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": false, "score": 1, "last_activity_date": 1540727805, "creation_date": 1540727805, "answer_id": 53031249, "question_id": 53030440, "link": "https://stackoverflow.com/questions/53030440/generics-plus-dynamic-dispatch/53031249#53031249", "title": "Generics plus dynamic dispatch", "body": "<p>I think you understand that the types of your <code>match</code> arms must be the same. (Otherwise, please refer to the <a href=\"https://stackoverflow.com/questions/26378842/how-do-i-overcome-match-arms-with-incompatible-types-for-structs-implementing-sa\">suggested duplicate</a>.)</p>\n\n<p>One other option I see in your particular case is just calling <code>make_numbers</code> for each arm:</p>\n\n<pre><code>fn main() {\n    let use_std = true;     \n    let s = match use_std {\n        true =&gt; make_numbers::&lt;u8, _&gt;(&amp;mut StdRng::from_seed(b\"thisisadummyseedthisisadummyseed\".to_owned())),\n        false =&gt; make_numbers::&lt;u8, _&gt;(&amp;mut XorShiftRng::from_seed(b\"thisisadummyseed\".to_owned()))\n    };\n    print!(\"{}\", s)\n}\n</code></pre>\n\n<p>I see that this may not make sense if you have lots of additional parameters into <code>make_numbers</code>.</p>\n\n<p>In such cases, I resorted to macros:</p>\n\n<pre><code>fn main() {\n    let use_std = true;  \n    macro_rules! call_make_numbers(($t:ty, $rng:ident, $str:expr) =&gt; {\n        make_numbers::&lt;$t, _&gt;(&amp;mut $rng::from_seed($str.to_owned()))\n    });\n    let s = match use_std {\n        true =&gt; call_make_numbers!(u8, StdRng, b\"thisisadummyseedthisisadummyseed\"),\n        false =&gt; call_make_numbers!(u8, XorShiftRng, b\"thisisadummyseed\"),\n    };\n    print!(\"{}\", s)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 421, "user_id": 6148311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/813fb38ee62e940389bd4af40e65d2a1?s=128&d=identicon&r=PG&f=1", "display_name": "mrspl", "link": "https://stackoverflow.com/users/6148311/mrspl"}, "edited": false, "score": 1, "creation_date": 1540731705, "post_id": 53031336, "comment_id": 92964070, "body": "This is a nice solution to this precise problem, thanks. I hadn&#39;t really thought about using RngCore instead. In situations where such an object-safe trait is not provided, could I always implement a &quot;dummy&quot; trait and an implementation such as <code>impl&lt;R: RngCore + ?Sized&gt; Rng for R</code>? Or am I missing something?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 421, "user_id": 6148311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/813fb38ee62e940389bd4af40e65d2a1?s=128&d=identicon&r=PG&f=1", "display_name": "mrspl", "link": "https://stackoverflow.com/users/6148311/mrspl"}, "edited": false, "score": 0, "creation_date": 1540750101, "post_id": 53031336, "comment_id": 92969224, "body": "@mrspl The reason this works in this case is that all &quot;required&quot; methods are object-safe, and the non-object-safe methods in the <code>Rng</code> trait are all implemented in terms of the object-safe methods in the <code>RngCore</code> trait, i.e. the <code>Rng</code> trait only contains &quot;provided&quot; methods and no &quot;required&quot; methods. If your trait can be split up this way, you can use the same design, but you can never dynamically dispatch to a non-object-safe method."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 6, "last_activity_date": 1540729122, "last_edit_date": 1540729122, "creation_date": 1540728444, "answer_id": 53031336, "question_id": 53030440, "link": "https://stackoverflow.com/questions/53030440/generics-plus-dynamic-dispatch/53031336#53031336", "title": "Generics plus dynamic dispatch", "body": "<p>You noticed yourself that you can't use <code>Box&lt;dyn Rng&gt;</code> since the <code>Rng</code> trait is not object-safe.  The <code>rand</code> crate offers a solution for this, though: The foundation of each RNG is provided by the trait <code>RngCore</code>, which is object-safe, and <code>Box&lt;dyn RngCore&gt;</code> also implements <code>Rng</code> by means of these two trait implementations:</p>\n\n<ul>\n<li><a href=\"https://docs.rs/rand/0.6.0-pre.0/rand/trait.RngCore.html#impl-RngCore-2\" rel=\"noreferrer\"><code>impl&lt;R: RngCore + ?Sized&gt; RngCore for Box&lt;R&gt;</code></a></li>\n<li><a href=\"https://docs.rs/rand/0.6.0-pre.0/rand/trait.Rng.html#impl-Rng\" rel=\"noreferrer\"><code>impl&lt;R: RngCore + ?Sized&gt; Rng for R</code></a></li>\n</ul>\n\n<p>The first implementation makes sure that <code>Box&lt;dyn RngCore&gt;</code> is <code>RngCore</code> itself, while the second one implements <code>Rng</code> for all <code>RngCore</code> objects.  In effect, you will be able to call all <code>Rng</code> methods on <code>RngCore</code> trait objects, and the implementation dynamically dispatches to the required <code>RngCore</code> methods under the hood.</p>\n\n<p>Exploiting this, you can use the following code:</p>\n\n<pre><code>let mut rng: Box&lt;dyn RngCore&gt; = if use_std {\n    Box::new(\n        StdRng::from_seed(b\"thisisadummyseedthisisadummyseed\".to_owned())\n    )\n} else {\n    Box::new(\n        XorShiftRng::from_seed(b\"thisisadummyseed\".to_owned())\n    )\n};\nlet s = make_numbers::&lt;u8, _&gt;(&amp;mut rng);\n</code></pre>\n"}], "owner": {"reputation": 421, "user_id": 6148311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/813fb38ee62e940389bd4af40e65d2a1?s=128&d=identicon&r=PG&f=1", "display_name": "mrspl", "link": "https://stackoverflow.com/users/6148311/mrspl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 232, "favorite_count": 0, "accepted_answer_id": 53031336, "answer_count": 2, "score": 4, "last_activity_date": 1540909750, "creation_date": 1540722061, "last_edit_date": 1540909750, "question_id": 53030440, "link": "https://stackoverflow.com/questions/53030440/generics-plus-dynamic-dispatch", "title": "Generics plus dynamic dispatch", "body": "<p>Consider the case where I have a function <code>make_numbers</code> which should create a string of random numbers, but where I want to decide at runtime (user input) what kind of random number generator should be used. To make it even more difficult, let's assume the <code>make_numbers</code> function to be generic over the type of numbers to be generated.</p>\n\n<p>I wrote what I want to achieve with pseudo code, and I understand why this doesn't work. However, I don't know what an idiomatic way in Rust could look like to achieve this?</p>\n\n<p>My naive ideas would be:</p>\n\n<ol>\n<li>Use <code>Box&lt;Rng&gt;</code>, but that doesn't work since <a href=\"https://docs.rs/rand/0.5.5/rand/trait.Rng.html\" rel=\"nofollow noreferrer\"><code>Rng</code></a> has generic functions.</li>\n<li>Use an enum over <code>StdRng</code> and <code>XorShiftRng</code>, but I cannot really think of a nice way to write this.</li>\n</ol>\n\n<p>Can you give me some hints as to what a nice solution of this particular problem would look like?</p>\n\n<p>Note: This question is not so much about the different match arms having different types (solutions could be <code>Box</code> or enum, as indicated above) - but how to apply these solutions in this case.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate rand;\n\nuse rand::{Rng, SeedableRng, StdRng};\nuse rand::prng::XorShiftRng;\nuse std::string::String;\nuse rand::distributions::{Distribution, Standard};\nuse std::fmt::Display;\n\n// Generic function that should work with any type of random number generator\nfn make_numbers&lt;T, R: Rng&gt;(rng: &amp;mut R) -&gt; String \n    where T: Display, Standard: Distribution&lt;T&gt; \n{\n    let mut s = String::new();\n    for _i in 0..10 {\n        s.push_str(format!(\"_{}\", rng.gen::&lt;T&gt;()).as_str());\n    }\n    s\n}\n\nfn main() {\n    let use_std = true; // -&gt; assume that this will be determined at runtime (e.g. user input)\n\n    // Pseudo code, will not work.\n    let mut rng = match use_std {\n        true =&gt; StdRng::from_seed(b\"thisisadummyseedthisisadummyseed\".to_owned()),\n        false =&gt; XorShiftRng::from_seed(b\"thisisadummyseed\".to_owned())\n    };\n\n    let s = make_numbers::&lt;u8&gt;(&amp;mut rng);\n\n    // ... do some complex stuff with s ...\n\n    print!(\"{}\", s)\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src/main.rs:24:19\n   |\n24 |       let mut rng = match use_std {\n   |  ___________________^\n25 | |         true =&gt; StdRng::from_seed(b\"thisisadummyseedthisisadummyseed\".to_owned()),\n26 | |         false =&gt; XorShiftRng::from_seed(b\"thisisadummyseed\".to_owned())\n   | |                  ------------------------------------------------------ match arm with an incompatible type\n27 | |     };\n   | |_____^ expected struct `rand::StdRng`, found struct `rand::XorShiftRng`\n   |\n   = note: expected type `rand::StdRng`\n              found type `rand::XorShiftRng`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540759797, "post_id": 53029622, "comment_id": 92972052, "body": "Please note the compiler <i>told you what to do</i>: <code>help: make this binding mutable: `mut welcome`</code>"}], "answers": [{"comments": [{"owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 0, "creation_date": 1540717078, "post_id": 53029797, "comment_id": 92960552, "body": "While the rewrite you&#39;ve provided (adding the <code>mut</code>s) does compile, it&#39;s semantically different from the first version of the code I provided. In particular, in the first version, calling <code>welcome()</code> a second time is an error due to usage of a moved value. I realize that in this case I can mutable borrow the values instead, but I&#39;m trying to understand why <code>move</code> doesn&#39;t force the value to be moved into the closure."}, {"owner": {"reputation": 1324, "user_id": 6800156, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/144bd2330b7c506ab60c6f9e68250fa0?s=128&d=identicon&r=PG&f=1", "display_name": "Artemiy Rodionov", "link": "https://stackoverflow.com/users/6800156/artemiy-rodionov"}, "edited": false, "score": 0, "creation_date": 1540718268, "post_id": 53029797, "comment_id": 92960810, "body": "Try to print <code>name</code> variable after <code>welcome</code>. It will result in compile-time error, because of <code>move</code> keyword. You can calling <code>welcome</code> multiple times, because it is <code>FnMut</code> and it captures the <code>name</code> variable. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=f1bb59a9dae591b95c5c291eb38d0ab0\" rel=\"nofollow noreferrer\">This</a> code from the <a href=\"https://doc.rust-lang.org/rust-by-example/fn/closures/input_parameters.html\" rel=\"nofollow noreferrer\">rust by example</a> may clarify it"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 1, "creation_date": 1540718579, "post_id": 53029797, "comment_id": 92960867, "body": "@MichaelSnoyman <code>move</code> <i>does</i> force <code>name</code> to be moved into the closure.  The first version also moves the value into the closure, but then consumes it inside the closure. A closure that consumes a captured value can only be called once."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 0, "creation_date": 1540718857, "post_id": 53029797, "comment_id": 92960931, "body": "@MichaelSnoyman I added a few sentences to this answer \u2013 hope it&#39;s clearer now."}, {"owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 0, "creation_date": 1540724809, "post_id": 53029797, "comment_id": 92962339, "body": "Thanks @SvenMarnach, this helped. The piece that was alluding me was the distinction between <i>moving</i> a value and <i>consuming</i> a value. The link to Rust by Example was elucidating as well Artemiy."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 6, "last_activity_date": 1540759830, "last_edit_date": 1540759830, "creation_date": 1540716658, "answer_id": 53029797, "question_id": 53029622, "link": "https://stackoverflow.com/questions/53029622/why-does-moving-a-value-into-a-closure-still-have-the-error-message-cannot-borr/53029797#53029797", "title": "Why does moving a value into a closure still have the error message &quot;cannot borrow immutable local variable as mutable&quot;?", "body": "<blockquote>\n  <p>I would have thought that adding a <code>move</code> to the beginning of the closure would accomplish the same thing, \u2026</p>\n</blockquote>\n\n<p>It kind of does the same thing.  You just forgot to declare <code>name</code> and <code>welcome</code> as mutable. This code works fine:</p>\n\n<pre><code>fn main() {\n    let mut name = String::from(\"Alice\");\n\n    let mut welcome = move || {\n        name += \" and Bob\";\n        println!(\"Welcome, {}\", name);\n    };\n\n    welcome();\n}\n</code></pre>\n\n<p>Both versions of the closure result in <code>name</code> being moved into the closure.  In the first version, this is implicitly caused by consuming <code>name</code> inside the closure. The second version does not consume <code>name</code>, but uses the <code>move</code> keyword to force the move.</p>\n\n<blockquote>\n  <p>\u2026 and result in the value being moved and the creation of a <code>FnOnce</code>.</p>\n</blockquote>\n\n<p>Moving a value into a closure does not make it <code>FnOnce</code>. If a closure <em>consumes</em> a captured value, it becomes <code>FnOnce</code>, since it obviously can do this only once. Thus, the first version of the closure is <code>FnOnce</code>, since it consumes <code>name</code>. The clousre above is <code>FnMut</code>, and can be called multiple times.  Calling it twice results in the output</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Welcome, Alice and Bob\nWelcome, Alice and Bob and Bob\n</code></pre>\n\n<p>(I used the function trait names somewhat sloppily above. In fact, <em>every</em> closure implements <code>FnOnce</code>, since every closure can be called at least once.  Some closures can be called multiple times, so they are <code>FnMut</code> in addition.  And some closures that can be called multiple times don't alter their captured state, so they are <code>Fn</code> in addition to the other two traits.)</p>\n"}], "owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 285, "favorite_count": 0, "accepted_answer_id": 53029797, "answer_count": 1, "score": 5, "last_activity_date": 1540759830, "creation_date": 1540714989, "last_edit_date": 1540759773, "question_id": 53029622, "link": "https://stackoverflow.com/questions/53029622/why-does-moving-a-value-into-a-closure-still-have-the-error-message-cannot-borr", "title": "Why does moving a value into a closure still have the error message &quot;cannot borrow immutable local variable as mutable&quot;?", "body": "<p>In the code below, I explicitly force the <code>name</code> from the <code>main</code> function to be moved into the closure, and everything works just fine:</p>\n\n<pre><code>fn main() {\n    let name = String::from(\"Alice\");\n\n    let welcome = || {\n        let mut name = name;\n        name += \" and Bob\";\n        println!(\"Welcome, {}\", name);\n    };\n\n    welcome();\n}\n</code></pre>\n\n<p>I would have thought that adding a <code>move</code> to the beginning of the closure would accomplish the same thing, and result in the value being moved and the creation of a <code>FnOnce</code>:</p>\n\n<pre><code>fn main() {\n    let name = String::from(\"Alice\");\n\n    let welcome = move || {\n        name += \" and Bob\";\n        println!(\"Welcome, {}\", name);\n    };\n\n    welcome();\n}\n</code></pre>\n\n<p>Instead, however, I get the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `welcome` as mutable\n --&gt; main.rs:9:5\n  |\n4 |     let welcome = move || {\n  |         ------- help: make this binding mutable: `mut welcome`\n...\n9 |     welcome();\n  |     ^^^^^^^ cannot borrow mutably\n\nerror[E0596]: cannot borrow captured outer variable in an `FnMut` closure as mutable\n --&gt; main.rs:5:9\n  |\n5 |         name += \" and Bob\";\n  |         ^^^^\n</code></pre>\n\n<p>What's the correct way to think about <code>move</code> on a closure in this case?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": true, "score": 3, "last_activity_date": 1540759538, "last_edit_date": 1540759538, "creation_date": 1540708821, "answer_id": 53029006, "question_id": 53028926, "link": "https://stackoverflow.com/questions/53028926/what-does-the-warning-doc-comment-not-used-by-rustdoc-mean-and-how-do-i-fix-it/53029006#53029006", "title": "What does the warning &quot;doc comment not used by rustdoc&quot; mean and how do I fix it?", "body": "<p>Comments starting with <code>///</code> are used to generate documentation. Those documentation comments go before the function they document. Quoting <a href=\"https://doc.rust-lang.org/book/second-edition/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>:</p>\n\n<blockquote>\n  <p>Place documentation comments just before the item they\u2019re documenting.</p>\n</blockquote>\n\n<pre><code>/// Adds source path to the database.\n///\n/// This function saves provided absolute path (on the server) to the database\n/// and goes over all jpeg files recursively in order to add them to DB.\npub fn add_source_path(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 45, "user_id": 5434565, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f4bb8a66d4f1548d62067ad05f50bc2?s=128&d=identicon&r=PG", "display_name": "victor_crimea", "link": "https://stackoverflow.com/users/5434565/victor-crimea"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 786, "favorite_count": 0, "accepted_answer_id": 53029006, "answer_count": 1, "score": 1, "last_activity_date": 1540759538, "creation_date": 1540708026, "last_edit_date": 1540759483, "question_id": 53028926, "link": "https://stackoverflow.com/questions/53028926/what-does-the-warning-doc-comment-not-used-by-rustdoc-mean-and-how-do-i-fix-it", "title": "What does the warning &quot;doc comment not used by rustdoc&quot; mean and how do I fix it?", "body": "<p>The following code produces a warning when compiled:</p>\n\n<pre><code>pub fn add_source_path(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n/// Adds source path to the database.\n///\n/// This function saves provided absolute path (on the server) to the database\n/// and goes over all jpeg files recursively in order to add them to DB.\n\nlet params = request.get_ref::&lt;Params&gt;().unwrap();\n\nlet path = &amp;params[\"path\"];\n</code></pre>\n\n<p>This is the warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: doc comment not used by rustdoc\n--&gt; src/crawler.rs:64:2\n   |\n64 |  /// Adds source path to the database.\n   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unused_doc_comment)] on by default\n</code></pre>\n\n<p>What exactly does this warning mean and how to fix it?</p>\n"}, {"tags": ["rust", "closures", "self", "lifetime", "json-rpc"], "comments": [{"owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "edited": false, "score": 1, "creation_date": 1540677707, "post_id": 53025923, "comment_id": 92955047, "body": "I don&#39;t have a compiler at hand, but did you try <code>move</code>ing <code>self.test</code> (resp. a <code>clone</code> thereof) into the closure?"}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 0, "creation_date": 1540680004, "post_id": 53025923, "comment_id": 92955508, "body": "Would it be possible to add a reference to the closure? This would allow you to set lifetime parameters like <code>let get_var = &amp;&#39;a mut |...| {&#47;*your code*&#47;};</code> and have the same lifetime parameter for self: <code>&amp;&#39;a self</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540819271, "post_id": 53025923, "comment_id": 92992224, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/48613350/155423\">How to return a future combinator with <code>&amp;self</code></a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/53025923/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "answers": [{"tags": [], "owner": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "is_accepted": true, "score": 2, "last_activity_date": 1540819180, "last_edit_date": 1540819180, "creation_date": 1540714678, "answer_id": 53029592, "question_id": 53025923, "link": "https://stackoverflow.com/questions/53025923/adding-a-closure-within-a-self-method-to-an-attribute-in-a-struct/53029592#53029592", "title": "Adding a closure within a &#39;&amp;self&#39; method to an attribute in a struct", "body": "<p>I'm not too familiar with jsonrpc's internals, but the jsonrpc library is implemented in a completely asynchronous way with Tokio. Though you call synchronous request handling, internally it still performs the request asynchronously and simply blocks your thread until it's done. The downside of this is that Tokio cannot guarantee  anything about scheduling your closures in a task executor. Thus any such closure's lifetime is tied more to the executor than any <code>self</code>.</p>\n\n<p>In the code above, you capture a reference to <code>self</code>, but there's no guarantee that <code>self</code> still lives when the closure is executed. Hence you have to <code>move</code> any data the closure uses. Additionally, the closure must be <code>Send</code> to be used with Tokio, so you cannot simply use <code>Rc</code> and move a copy into the closure.</p>\n\n<p>In your case, the easiest way I know of would be to change <code>test</code> to type <code>Arc&lt;Test&gt;</code>. Then change the closure definition to move a copy of the variable into the closure. You also had some mutability problems, here's a complete example that compiles:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde;\nextern crate serde_json;\n\nextern crate jsonrpc_core as rpc;\n\nuse std::borrow::Borrow;\nuse std::sync::Arc;\n\n#[derive(Serialize, Deserialize)]\nstruct Test {\n    var: u32,\n}\n\nstruct TestRpc {\n    test: Arc&lt;Test&gt;,\n    rpc_io_handler: rpc::IoHandler,\n}\n\nimpl TestRpc {\n    fn new() -&gt; Self {\n        let mut ret = Self {\n            test: Arc::new(Test { var: 1 }),\n            rpc_io_handler: rpc::IoHandler::new(),\n        };\n        ret.register_rpc_methods();\n        ret\n    }\n\n    fn register_rpc_methods(&amp;mut self) {\n        let test_clone = self.test.clone();\n        let get_var = move |_params: rpc::Params| match rpc::to_value(test_clone.borrow() as &amp;Test)\n        {\n            Ok(x) =&gt; Ok(x),\n            Err(_) =&gt; Err(rpc::Error::internal_error()),\n        };\n        self.rpc_io_handler.add_method(\"get_var\", get_var);\n    }\n\n    fn get_var_test(&amp;self, msg: &amp;str) -&gt; Option&lt;String&gt; {\n        self.rpc_io_handler.handle_request_sync(msg)\n    }\n}\n\nfn main() {\n    let test = TestRpc::new();\n    let request = r#\"{\"jsonrpc\": \"2.0\", \"method\": \"get_var\", \"id\": 1}\"#;\n    let response = r#\"{\"jsonrpc\":\"2.0\",\"result\":{\"var\":1},\"id\":1}\"#;\n    assert_eq!(test.get_var_test(request), Some(response.to_owned()));\n}\n</code></pre>\n"}], "owner": {"reputation": 133, "user_id": 4129587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6212f1f530613edcfbaff1001d4894e7?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Mildenberger", "link": "https://stackoverflow.com/users/4129587/philipp-mildenberger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "accepted_answer_id": 53029592, "answer_count": 1, "score": 2, "last_activity_date": 1540819180, "creation_date": 1540671477, "last_edit_date": 1540819080, "question_id": 53025923, "link": "https://stackoverflow.com/questions/53025923/adding-a-closure-within-a-self-method-to-an-attribute-in-a-struct", "title": "Adding a closure within a &#39;&amp;self&#39; method to an attribute in a struct", "body": "<p>Consider the following example code:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde;\nextern crate serde_json;\n\nextern crate jsonrpc_core as rpc;\n\n#[derive(Serialize, Deserialize)]\nstruct Test {\n    var: u32,\n}\n\nstruct TestRpc {\n    test: Test,\n    rpc_io_handler: rpc::IoHandler,\n}\n\nimpl TestRpc {\n    fn new() -&gt; Self {\n        let ret = Self {\n            test: Test { var: 1 },\n            rpc_io_handler: rpc::IoHandler::new(),\n        };\n        ret.register_rpc_methods();\n        ret\n    }\n\n    fn register_rpc_methods(&amp;self) {\n        let get_var = |_params: rpc::Params| match rpc::to_value(&amp;self.test) {\n            Ok(x) =&gt; Ok(x),\n            Err(_) =&gt; Err(rpc::Error::internal_error()),\n        };\n        self.rpc_io_handler.add_method(\"get_var\", get_var);\n    }\n\n    fn get_var_test(&amp;self, msg: &amp;str) -&gt; Option&lt;String&gt; {\n        self.rpc_io_handler.handle_request_sync(msg)\n    }\n}\n\nfn main() {\n    let test = TestRpc::new();\n    let request = r#\"{\"jsonrpc\": \"2.0\", \"method\": \"get_var\", \"id\": 1}\"#;\n    let response = r#\"{\"jsonrpc\":\"2.0\",\"result\":{\"var\":1},\"id\":1}\"#;\n    assert_eq!(test.get_var_test(request), Some(response.to_owned()));\n}\n</code></pre>\n\n<p>with the following method signature for 'rpc::IoHandler::add_method'</p>\n\n<pre><code>pub fn add_method&lt;F&gt;(&amp;mut self, name: &amp;str, method: F)\nwhere\n    F: RpcMethodSimple,\n</code></pre>\n\n<p>The <a href=\"https://github.com/paritytech/jsonrpc/blob/master/core/src/io.rs#L134\" rel=\"nofollow noreferrer\">method is from jsonrpc</a>\nas is <a href=\"https://github.com/paritytech/jsonrpc/blob/master/core/src/calls.rs#L15\" rel=\"nofollow noreferrer\"><code>RpcMethodSimple</code></a>.</p>\n\n<p>I get the following error when I try to compile this</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:26:27\n   |\n26 |           let mut get_var = |_params: rpc::Params | {\n   |  ___________________________^\n27 | |             match rpc::to_value(&amp;self.test) {\n28 | |                 Ok(x) =&gt; Ok(x),\n29 | |                 Err(_) =&gt; Err(rpc::Error::internal_error())\n30 | |             }\n31 | |         };\n   | |_________^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 25:5...\n  --&gt; src/main.rs:25:5\n   |\n25 | /     fn register_rpc_methods(&amp;self) {\n26 | |         let mut get_var = |_params: rpc::Params | {\n27 | |             match rpc::to_value(&amp;self.test) {\n28 | |                 Ok(x) =&gt; Ok(x),\n...  |\n32 | |         self.rpc_io_handler.add_method(\"get_var\", get_var);\n33 | |     }\n   | |_____^\n   = note: ...so that the types are compatible:\n           expected &amp;&amp;TestRpc\n              found &amp;&amp;TestRpc\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/main.rs:26:27: 31:10 self:&amp;&amp;TestRpc]` will meet its required lifetime bounds\n  --&gt; src/main.rs:32:29\n   |\n32 |         self.rpc_io_handler.add_method(\"get_var\", get_var);\n   |                             ^^^^^^^^^^\n</code></pre>\n\n<p>Is it possible to use this method (<code>rpc::IoHandler::add_method</code>) without changing the method in the crate? I'm struggling with lifetimes in Rust; is there a <em>simple</em> way to restrict the lifetime of the closure?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 0, "creation_date": 1540680963, "post_id": 53025265, "comment_id": 92955658, "body": "Why don&#39;t you have two concrete buffers and just swap a reference to them? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=3a49b3d69d3ba612caaef67ce3a27f07\" rel=\"nofollow noreferrer\">playground</a>"}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540667543, "post_id": 53025349, "comment_id": 92952573, "body": "I think <code>mem::replace()</code> would be more appropriate here."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540668314, "post_id": 53025349, "comment_id": 92952764, "body": "@SvenMarnach: That works, but I like the ring of <code>swap</code> because this operation in double-buffer is usually called <i>swapping</i> and sometimes the old buffer gets reused. With your suggestion it would look like <code>let next = std::mem::replace(&amp;mut self.next_buffer, new Buffer { ... }); self.current_buffer = next;</code>, which looks nice too, if you don&#39;t plan to reuse the old buffer."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540668659, "post_id": 53025349, "comment_id": 92952857, "body": "I&#39;ll just add this as a separate answer. :)"}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 1, "last_activity_date": 1540759936, "last_edit_date": 1540759936, "creation_date": 1540667165, "answer_id": 53025349, "question_id": 53025265, "link": "https://stackoverflow.com/questions/53025265/replacing-values-in-rust-causing-cannot-move-out-of-borrowed-content/53025349#53025349", "title": "Replacing values in Rust causing &quot;cannot move out of borrowed content&quot;", "body": "<p>Probably the easiest solution is to use <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\"><code>std::mem::swap</code></a>:</p>\n\n<pre><code>std::mem::swap(&amp;mut self.next_buffer, &amp;mut self.current_buffer);\nself.next_buffer = Buffer { ... }; // New buffer\n</code></pre>\n\n<p>You can also assign first and then swap, but I find it more natural this way.</p>\n"}, {"comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1540669392, "post_id": 53025616, "comment_id": 92953078, "body": "Indeed your solution produces slightly shorter code than mine, so it will be a bit faster <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2015&amp;gist=bd47aad8cb3e07dee8f4aa2bdaf2b3db\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 1, "creation_date": 1540671792, "post_id": 53025616, "comment_id": 92953729, "body": "@rodrigo Yours assigns <code>self.next_buffer</code> twice \u2013 the first time in the <code>swap()</code> call, but it is immediately overwritten with the new buffer.  This isn&#39;t really buffer swapping, since a new buffer is created."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 4, "last_activity_date": 1540668981, "creation_date": 1540668981, "answer_id": 53025616, "question_id": 53025265, "link": "https://stackoverflow.com/questions/53025265/replacing-values-in-rust-causing-cannot-move-out-of-borrowed-content/53025616#53025616", "title": "Replacing values in Rust causing &quot;cannot move out of borrowed content&quot;", "body": "<blockquote>\n  <p>How do I tell the borrow checker that I'm not trying to alias <code>self.next_buffer</code>, I'm trying to move it, and put something new in its place?</p>\n</blockquote>\n\n<p>The borrow checker is not complaining about aliasing \u2013 it is complaining because you are moving a field out of a struct that you only borrowed, which is not allowed.  However, moving out and immediately replacing with a new value <em>is</em> allowed, and there is a dedicated function for exactly this use case, called <a href=\"https://doc.rust-lang.org/1.29.0/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>std::mem::replace()</code></a>.  With this function, your code becomes</p>\n\n<pre><code>self.current_buffer = mem::replace(&amp;mut self.next_buffer, Buffer { ... });\n</code></pre>\n"}], "owner": {"reputation": 2192, "user_id": 2480092, "user_type": "registered", "accept_rate": 9, "profile_image": "https://www.gravatar.com/avatar/97f4cd231024913afd99cbe69655a963?s=128&d=identicon&r=PG", "display_name": "TheEnvironmentalist", "link": "https://stackoverflow.com/users/2480092/theenvironmentalist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 905, "favorite_count": 0, "closed_date": 1540759908, "answer_count": 2, "score": 0, "last_activity_date": 1540759936, "creation_date": 1540666500, "question_id": 53025265, "link": "https://stackoverflow.com/questions/53025265/replacing-values-in-rust-causing-cannot-move-out-of-borrowed-content", "closed_reason": "Duplicate", "title": "Replacing values in Rust causing &quot;cannot move out of borrowed content&quot;", "body": "<p>I'm trying to build a graphics engine that works with the fairly common two-buffer pattern. One buffer (<code>current_buffer</code>) is displayed while the next (<code>next_buffer</code>) is prepared, then the next buffer is moved into the current buffer, and is subsequently repopulated by a new buffer, repeating.</p>\n\n<p>I know there are <strong><em>a lot</em></strong> of other questions about <code>cannot move out of borrowed content</code> errors, so I spent a while looking at all I can find so far before finally resorting to asking this as a question.</p>\n\n<p>Here's my code:</p>\n\n<pre><code>pub fn update(&amp;mut self, dt: f64) {\n    if self.is_change_buffer {\n        self.current_buffer = self.next_buffer;\n        self.next_buffer = Buffer { ... }; // New buffer\n    }\n}\n</code></pre>\n\n<p>I'm running into problems with moving <code>self.next_buffer</code> to <code>self.current_buffer</code>, which is understandable considering that <code>self.current_buffer = self.next_buffer</code> would break the \"one owner\" principle. <strong>How do I tell the borrow checker that I'm not trying to alias <code>self.next_buffer</code>, I'm trying to move it, and put something new in its place?</strong></p>\n\n<p>A caveat due to a framework I'm working with is that the function signature of <code>update()</code> <em>must be</em>:</p>\n\n<pre><code>pub fn (&amp;mut self, dt: f64) -&gt; ()\n</code></pre>\n\n<p>Also, a <code>Buffer</code> <em>cannot</em> be cloned. Because of the way <code>Buffer</code>s are stored, cloning them would be an extremely expensive operation, and so cannot practically be done at every screen refresh.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "edited": false, "score": 1, "creation_date": 1540652171, "post_id": 53021939, "comment_id": 92948390, "body": "Is this the same as <a href=\"https://github.com/rust-lang/rust/issues/32315\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/32315</a>?"}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "reply_to_user": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "edited": false, "score": 0, "creation_date": 1540655662, "post_id": 53021939, "comment_id": 92949348, "body": "It does look like it&#39;s the same issue. I&#39;m not too happy that it would require the use of specialization to solve though, since that&#39;s not stable yet. The alternatives I see is to write the implementations out by hand for all types that implement <code>TraitA</code> (which is not very flexible), or to use <code>AsRef</code> instead of <code>Borrow</code> (which is suboptimal for other reasons in my case)."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1540658340, "post_id": 53021939, "comment_id": 92950106, "body": "Is there any reasonable trait bound you could apply to <code>Data</code>? If you can restrict it so it can&#39;t be <code>UserFriendlyDataStructure</code>, the error should be resolved."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1540659783, "post_id": 53021939, "comment_id": 92950512, "body": "<code>Data</code> really allows arbitrary types. Since I control which types implement <code>TypeA</code> (it&#39;s an internal trait that should never have external implementations), I can create an artificial trait bound to <code>Data</code> (e.g. an empty trait). I will try that and write an answer if it works."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1540661800, "post_id": 53021939, "comment_id": 92951044, "body": "Unfortunately, adding a trait bound to <code>Data</code> (via <code>TraitA</code>) didn&#39;t work. I can update the original question or add an answer with my attempt at solving it that way. What should I do?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540662275, "post_id": 53021939, "comment_id": 92951166, "body": "Hm, then there seems to be another bug here. Since it didn&#39;t work, updating the question seems more appropriate."}], "answers": [{"comments": [{"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1540667596, "post_id": 53025089, "comment_id": 92952586, "body": "That worked, thank you! Do you think I should open an issue on the <code>rust</code> repository?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1540667794, "post_id": 53025089, "comment_id": 92952630, "body": "@Eleanore Probably.  Make sure to add a link to the issue phimuemue mentioned above."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540760401, "post_id": 53025089, "comment_id": 92972183, "body": "<i>I don&#39;t know why this works</i> \u2014 because generics are considered &quot;input&quot; types and associated types are considered &quot;output&quot; types. (<a href=\"https://stackoverflow.com/q/32059370/155423\">When is it appropriate to use an associated type versus a generic type?</a>). Multiple trait implementations can have the same output type so it&#39;s ambiguous. Placing it as an input type requires it to be unambiguous (because of coherence)."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540761076, "post_id": 53025089, "comment_id": 92972336, "body": "@Shepmaster I still don&#39;t really understand this.  If I only have a single type parameter <code>A: TraitA</code> and I add the bound <code>A::Data: DataTrait</code>, it is guaranteed that <code>A::Data</code> can&#39;t be <code>UserFriendlyDataStructure</code>, so there are no conflicting implementations. Why is the compiler complaining in this case? (I&#39;m setting aside the fact that <code>A::Data</code> can&#39;t ever be <code>UserFriendlyDataStructure&lt;A&gt;</code> anyway, so there really isn&#39;t a conflict here in any case, but I can understand that the compiler can&#39;t see that.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540761426, "post_id": 53025089, "comment_id": 92972402, "body": "<i>it is guaranteed that <code>A::Data</code> can&#39;t be <code>UserFriendlyDataStructure</code></i> \u2014 why not? Nothing prevents someone from implementing that. This question is basically a duplicate of <a href=\"https://stackoverflow.com/q/37347311/155423\">How is there a conflicting implementation of <code>From</code> when using a generic type?</a>."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540761757, "post_id": 53025089, "comment_id": 92972484, "body": "@Shepmaster The version with two type parameters only works when adding the additional <code>DataTrait</code> constraint, so it&#39;s clearly that constraint that makes the compiler think <code>D</code> can&#39;t be <code>UserFriendlyDataStructure</code>. If <code>UserFriendlyDataStructure</code> implemented the trait <code>DataTrait</code>, the compiler would now, since it would have to be in the current crate. If this constraint helps the compiler understand that <code>A::Data</code> can&#39;t be <code>UserFriendlyDataStructure</code> in one version, why doesn&#39;t the compiler understand this in the other version?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540810635, "post_id": 53025089, "comment_id": 92987247, "body": "@Shepmaster If you are still interested, I&#39;ve boiled the point I don&#39;t understand down to a minimal example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=767c2ec35433903f08bf1ef63770ab57\" rel=\"nofollow noreferrer\">version that compiles</a>, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=2ee279e043b119e49122f9fb239748d6\" rel=\"nofollow noreferrer\">version that doesn&#39;t</a>. I&#39;ve thoroughly read all the threads you linked, but I found no explanation for this behaviour, and I still think that the two versions should be equivalent."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 1, "creation_date": 1540831681, "post_id": 53025089, "comment_id": 93000071, "body": "@EleanoreY No need to report an issue for this \u2013 there already is one: <a href=\"https://github.com/rust-lang/rust/issues/50237\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/50237</a>"}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 3, "last_activity_date": 1540831906, "last_edit_date": 1540831906, "creation_date": 1540665188, "answer_id": 53025089, "question_id": 53021939, "link": "https://stackoverflow.com/questions/53021939/how-can-i-implement-borrow-for-a-generic-container-in-the-case-of-the-use-of-ass/53025089#53025089", "title": "How can I implement Borrow for a generic container in the case of the use of associated types?", "body": "<p>The compiler can be cajoled into accepting the code by introducing a redundant second type parameter that is constrained to be identical to <code>A::Data</code>:</p>\n\n<pre><code>impl&lt;A, D&gt; Borrow&lt;D&gt; for UserFriendlyDataStructure&lt;A&gt;\nwhere\n    A: TraitA&lt;Data = D&gt;,\n    D: DataTrait,\n{\n    fn borrow(&amp;self) -&gt; &amp;A::Data {\n        &amp;self.internal_data\n    }\n}\n</code></pre>\n\n<p>I don't know why this works, and simply constraining <code>A::Data: DataTrait</code> doesn't. I think the compiler should accept both versions.</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=53b800ef074eb251e6964a6eada87018\" rel=\"nofollow noreferrer\">Full code on the playground</a>)</p>\n\n<p><strong>Edit:</strong> The fact that we need the redundant type <code>D</code> in the above code appears to be a <a href=\"https://github.com/rust-lang/rust/issues/50237\" rel=\"nofollow noreferrer\">shortcoming of the current compiler implementation</a>, and is hopefully resolved once the experimental type inference engine <a href=\"https://github.com/rust-lang-nursery/chalk\" rel=\"nofollow noreferrer\">chalk</a> gets integrated in the compiler.</p>\n"}], "owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 53025089, "answer_count": 1, "score": 4, "last_activity_date": 1540831906, "creation_date": 1540643623, "last_edit_date": 1540662966, "question_id": 53021939, "link": "https://stackoverflow.com/questions/53021939/how-can-i-implement-borrow-for-a-generic-container-in-the-case-of-the-use-of-ass", "title": "How can I implement Borrow for a generic container in the case of the use of associated types?", "body": "<p>I would like to implement <code>Borrow</code> for <code>UserFriendlyDataStructure</code> to provide access to the <code>internal_data</code> field within a function that should be agnostic with respect to the data provider. The type of the <code>internal_data</code> field is determined by the type associated to trait <code>TraitA</code>. Note that the <code>Sealed</code> trait ensures that none of these traits here can be implemented by other crates; this is functionality that strictly I provide. Furthermore, the type <code>TraitA::Data</code> is restricted by the empty trait <code>DataTrait</code> to prevent <code>UserFriendlyDataStructure</code> from being used as that type.</p>\n\n<p>The following example explains best:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::borrow::Borrow;\nuse std::marker::PhantomData;\n\nmod private {\n    pub trait Sealed {}\n}\n\npub trait DataTrait: private::Sealed {}\n\npub trait TraitA: private::Sealed {\n    type Data: DataTrait;\n}\n\npub struct UserFriendlyDataStructure&lt;A: TraitA&gt; {\n    internal_data: A::Data,\n    _a: PhantomData&lt;A&gt;,\n}\n\nimpl&lt;A: TraitA&gt; Borrow&lt;A::Data&gt; for UserFriendlyDataStructure&lt;A&gt; {\n    fn borrow(&amp;self) -&gt; &amp;A::Data {\n        &amp;self.internal_data\n    }\n}\n\npub fn important_function&lt;A: TraitA, T: Borrow&lt;A::Data&gt;&gt;(data: &amp;T) {\n    let _internal_data = data.borrow();\n    // Do lots of work.\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    pub struct TestData(u32);\n\n    impl super::private::Sealed for TestData {}\n\n    impl DataTrait for TestData {}\n\n    pub struct TestProvider;\n\n    impl super::private::Sealed for TestProvider {}\n\n    impl TraitA for TestProvider {\n        type Data = TestData;\n    }\n\n    #[test]\n    fn basic_test() {\n        let ufds: UserFriendlyDataStructure&lt;TestProvider&gt; = UserFriendlyDataStructure {\n            internal_data: TestData(100),\n            _a: PhantomData::default(),\n        };\n\n        important_function::&lt;TestProvider, _&gt;(&amp;ufds);\n    }\n}\n</code></pre>\n\n<p>Unfortunately, the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::borrow::Borrow&lt;UserFriendlyDataStructure&lt;_&gt;&gt;` for type `UserFriendlyDataStructure&lt;_&gt;`:\n  --&gt; src/lib.rs:19:1\n   |\n19 | impl&lt;A: TraitA&gt; Borrow&lt;A::Data&gt; for UserFriendlyDataStructure&lt;A&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl&lt;T&gt; std::borrow::Borrow&lt;T&gt; for T\n             where T: ?Sized;\n</code></pre>\n\n<p>Is there a way to achieve what I am trying to do?</p>\n"}, {"tags": ["rust", "undefined-behavior", "unsafe", "raw-pointer"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1540655941, "last_edit_date": 1540655941, "creation_date": 1540654898, "answer_id": 53023564, "question_id": 53018458, "link": "https://stackoverflow.com/questions/53018458/is-it-undefined-behavior-to-dereference-a-mut-t-cast-to-mut-manuallydropt/53023564#53023564", "title": "Is it undefined behavior to dereference a *mut T cast to *mut ManuallyDrop&lt;T&gt;?", "body": "<p><code>ManuallyDrop</code> is <a href=\"https://github.com/rust-lang/rust/blob/1.30.0/src/libcore/mem.rs#L950-L956\" rel=\"noreferrer\">declared as <code>#[repr(transparent)]</code></a>:</p>\n\n<pre><code>#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n#[lang = \"manually_drop\"]\n#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n#[repr(transparent)]\npub struct ManuallyDrop&lt;T: ?Sized&gt; {\n    value: T,\n}\n</code></pre>\n\n<p><code>#[repr(transparent)]</code> is <a href=\"https://doc.rust-lang.org/1.27.0/unstable-book/language-features/repr-transparent.html\" rel=\"noreferrer\">described as</a>:</p>\n\n<blockquote>\n  <p>The attribute can be applied to a newtype-like structs that contains a single field. It indicates that the newtype should be represented exactly like that field's type, i.e., the newtype should be ignored for ABI purpopses [sic]: not only is it laid out the same in memory, it is also passed identically in function calls.</p>\n  \n  <p>[...]</p>\n  \n  <p><code>PtrWithCustomZst</code> is also represented exactly like <code>*const Foo</code></p>\n</blockquote>\n\n<p>I believe that it is safe to perform this transformation.</p>\n\n<hr>\n\n<p>The real question is <em>why</em> would you want to do this? Having a pointer to a <code>ManuallyDrop</code> structure seems rather pointless. If you have a pointer to a <code>T</code>, the underlying value won't be dropped to start with. If you convert the pointer to a reference (while ensuring you uphold the rules of references), the reference won't drop the underlying value either. </p>\n"}], "owner": {"reputation": 33, "user_id": 10565806, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94c8a31ede60c14398e5134c030480f2?s=128&d=identicon&r=PG&f=1", "display_name": "ohboyhereigokillingagain", "link": "https://stackoverflow.com/users/10565806/ohboyhereigokillingagain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 122, "favorite_count": 0, "accepted_answer_id": 53023564, "answer_count": 1, "score": 3, "last_activity_date": 1540826931, "creation_date": 1540610713, "last_edit_date": 1540826931, "question_id": 53018458, "link": "https://stackoverflow.com/questions/53018458/is-it-undefined-behavior-to-dereference-a-mut-t-cast-to-mut-manuallydropt", "title": "Is it undefined behavior to dereference a *mut T cast to *mut ManuallyDrop&lt;T&gt;?", "body": "<p>According to the docs, <code>ManuallyDrop&lt;T&gt;</code> is a zero-cost wrapper. Does that mean I can dereference a raw pointer to <code>ManuallyDrop&lt;T&gt;</code> casted from a raw pointer to <code>T</code>?</p>\n"}, {"tags": ["rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 56759, "user_id": 392949, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=128&d=identicon&r=PG", "display_name": "JoshAdel", "link": "https://stackoverflow.com/users/392949/joshadel"}, "edited": false, "score": 0, "creation_date": 1540646903, "post_id": 53018471, "comment_id": 92946946, "body": "What if the <code>MessageOne</code>, <code>MessageTwo</code>, etc structs are defined in a third-party crate with the <code>op</code> field? Is it still possible to create an <code>enum</code> that collects them together and then parses to the correct one?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 56759, "user_id": 392949, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=128&d=identicon&r=PG", "display_name": "JoshAdel", "link": "https://stackoverflow.com/users/392949/joshadel"}, "edited": false, "score": 0, "creation_date": 1540684224, "post_id": 53018471, "comment_id": 92956131, "body": "@JoshAdel I don&#39;t understand your problem,  just create an untagged enum, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=d97b9f54b0cfaf09fced32cde94de0a3\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>. But your question doesn&#39;t include your real problem. For exemple, if these structures are defined somewhere else why do they derive <code>Serialize</code> and <code>Deserialize</code> ? If you still have problem please do another question that describe exactly your case or come to rust chat."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 13, "last_activity_date": 1540655358, "last_edit_date": 1540655358, "creation_date": 1540610914, "answer_id": 53018471, "question_id": 53018165, "link": "https://stackoverflow.com/questions/53018165/can-serde-deserialize-json-to-one-of-a-set-of-types-depending-on-the-value-of-a/53018471#53018471", "title": "Can Serde deserialize JSON to one of a set of types depending on the value of a field?", "body": "<p>There is no point to keep \"one\" or \"two\" in your structure <code>MessageOne</code> and <code>MessageTwo</code>: if you have constructed this structure you already know if it is message one or message two.</p>\n\n<pre><code>extern crate serde; // 1.0.78\nextern crate serde_json; // 1.0.27\n\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Serialize, Deserialize, Debug)]\n#[serde(tag = \"op\")]\nenum Message {\n    #[serde(rename = \"one\")]\n    One { x: f64, y: f64 },\n    #[serde(rename = \"two\")]\n    Two { a: f64, b: f64 },\n}\n\nfn process_message(message: &amp;Message) {\n    println!(\"Processing a : {:?}\", message);\n}\n\nuse serde_json::Error;\n\nfn main() -&gt; Result&lt;(), Error&gt; {\n    let data = r#\"{\n        \"op\": \"one\",\n        \"x\": 1.0,\n        \"y\": 2.0\n    }\"#;\n\n    let message: Message = serde_json::from_str(data)?;\n    process_message(&amp;message);\n\n    let data = r#\"{\n        \"op\": \"two\",\n        \"a\": 1.0,\n        \"b\": 2.0\n    }\"#;\n\n    let message: Message = serde_json::from_str(data)?;\n    process_message(&amp;message);\n\n    let data = r#\"{\n        \"op\": \"42\",\n        \"i\": 1.0,\n        \"j\": 2.0\n    }\"#;\n\n    let message: Message = serde_json::from_str(data)?;\n    process_message(&amp;message);\n    Ok(())\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Standard Output\nProcessing a : One { x: 1.0, y: 2.0 }\nProcessing a : Two { a: 1.0, b: 2.0 }\n\nStandard Error\nError: Error(\"unknown variant `42`, expected `one` or `two`\", line: 2, column: 18)\n</code></pre>\n"}], "owner": {"reputation": 56759, "user_id": 392949, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=128&d=identicon&r=PG", "display_name": "JoshAdel", "link": "https://stackoverflow.com/users/392949/joshadel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1912, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1540655431, "creation_date": 1540606333, "last_edit_date": 1540655431, "question_id": 53018165, "link": "https://stackoverflow.com/questions/53018165/can-serde-deserialize-json-to-one-of-a-set-of-types-depending-on-the-value-of-a", "title": "Can Serde deserialize JSON to one of a set of types depending on the value of a field?", "body": "<p>I have a group of different messages that come in as JSON and can be distinguished based on a single field, but then each variant has a different collection of secondary fields:</p>\n\n<pre><code>#[derive(Debug, Serialize, Deserialize)]\nstruct MessageOne {\n    ///op will always be \"one\"\n    op: String,\n    x: f64,\n    y: f64,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct MessageTwo {\n    ///op will always be \"two\"\n    op: String,\n    a: f64,\n    b: i64,\n}\n</code></pre>\n\n<p>The different message types are routed to different processing functions (e.g. <code>process_message_one</code>, <code>process_message_two</code>, etc). Is there an elegant or idiomatic way to automatically select the correct message sub-type? Currently I've defined a generic message:</p>\n\n<pre><code>#[derive(Debug, Serialize, Deserialize)]\nstruct MessageGeneric {\n    op: String,\n}\n</code></pre>\n\n<p>then parse the incoming JSON into the <code>MessageGeneric</code>, read the <code>op</code> field and then deserialize again, matching on <code>op</code> to select the correct message type. Full example:</p>\n\n<pre><code>#![allow(unused)]\n\nextern crate serde; // 1.0.78\nextern crate serde_json; // 1.0.27\n\n#[macro_use]\nextern crate serde_derive;\n\nuse std::collections::HashMap;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct MessageGeneric {\n    op: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct MessageOne {\n    ///op will always be \"one\"\n    op: String,\n    x: f64,\n    y: f64,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct MessageTwo {\n    ///op will always be \"two\"\n    op: String,\n    a: f64,\n    b: f64,\n}\n\nfn process_message_one(m: &amp;MessageOne) {\n    println!(\"Processing a MessageOne: {:?}\", m);\n}\n\nfn process_message_two(m: &amp;MessageTwo) {\n    println!(\"Processing a MessageTwo: {:?}\", m);\n}\n\n\n\nfn main() {\n    let data = r#\"{\n        \"op\": \"one\",\n        \"x\": 1.0,\n        \"y\": 2.0\n    }\"#;\n\n    let z: MessageGeneric = serde_json::from_str(data).unwrap();\n\n    match z.op.as_ref() {\n        \"one\" =&gt; {\n            let zp: MessageOne = serde_json::from_str(data).unwrap();\n            process_message_one(&amp;zp);\n        },\n        \"two\" =&gt; {\n            let zp: MessageTwo = serde_json::from_str(data).unwrap();\n            process_message_two(&amp;zp);\n        },\n        _ =&gt; println!(\"Unknown Message Type\")\n\n    }\n\n}\n</code></pre>\n\n<p>I've seen <a href=\"https://serde.rs/enum-representations.html\" rel=\"noreferrer\">Serde's enum representations</a> but it was unclear to me if/how that would be applied in this case. The messages coming in are defined by an external API, so I can't control their content beyond knowing what the variants are.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540596023, "post_id": 53017178, "comment_id": 92938036, "body": "<i>only import the <code>bar!</code> macro</i>  \u2014 FWIW, people could do that before via <code>#[macro_use(foo, bar)]</code>."}, {"owner": {"reputation": 97521, "user_id": 565635, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7b4b3e7c9ac68b7d2c93ad02d0b9c79d?s=128&d=identicon&r=PG", "display_name": "orlp", "link": "https://stackoverflow.com/users/565635/orlp"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540596057, "post_id": 53017178, "comment_id": 92938040, "body": "@Shepmaster Nope, I tried using <code>#[cfg]</code> as a verb there. I reworded it."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1540597001, "creation_date": 1540597001, "answer_id": 53017457, "question_id": 53017178, "link": "https://stackoverflow.com/questions/53017178/how-to-conditionally-change-a-small-part-of-a-rust-macro/53017457#53017457", "title": "How to conditionally change a small part of a Rust macro?", "body": "<blockquote>\n  <p>since Rust 1.30 [...] because users can now [...] only import the <code>bar!</code> macro</p>\n</blockquote>\n\n<p>Actually, this solution is <em>only</em> possible in Rust 1.30 because of the ability to import macros like normal. Remember that your macro can <em>also</em> have <code>use</code> statements!: </p>\n\n<pre><code>#[macro_export]\nmacro_rules! bar {\n    ($val:expr) =&gt; {{\n        use $crate::__bar_foo;\n        __bar_foo!($val)\n    }}\n}\n\n#[cfg(feature = \"foo\")]\n#[macro_export]\nmacro_rules! __bar_foo {\n    ($val:expr) =&gt; ($val + 1)\n}\n\n#[cfg(not(feature = \"foo\"))]\n#[macro_export]\nmacro_rules! __bar_foo {\n    ($val:expr) =&gt; ($val - 1)\n}\n</code></pre>\n\n<p>You can also fully-qualify your helper macro invocation:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! bar {\n    ($val:expr) =&gt; ($crate::__bar_foo!($val))\n}\n</code></pre>\n"}], "owner": {"reputation": 97521, "user_id": 565635, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7b4b3e7c9ac68b7d2c93ad02d0b9c79d?s=128&d=identicon&r=PG", "display_name": "orlp", "link": "https://stackoverflow.com/users/565635/orlp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 408, "favorite_count": 0, "accepted_answer_id": 53017457, "answer_count": 1, "score": 4, "last_activity_date": 1540597001, "creation_date": 1540594133, "last_edit_date": 1540596129, "question_id": 53017178, "link": "https://stackoverflow.com/questions/53017178/how-to-conditionally-change-a-small-part-of-a-rust-macro", "title": "How to conditionally change a small part of a Rust macro?", "body": "<p>I am building a crate which has the feature <code>foo</code>. This crate has a macro <code>bar!</code> that does subtly different things based on whether <code>foo</code> is set.</p>\n\n<p>I could duplicate the entire macro:</p>\n\n<pre><code>#[cfg(feature = \"foo\")]\nmacro_rules! bar {\n    // Lots of rules...\n\n    ( A ) =&gt; {\n        B\n    }\n}\n\n#[cfg(not(feature = \"foo\"))]\nmacro_rules! bar {\n    // Lots of rules...\n\n    ( A ) =&gt; {\n        C\n    }\n}\n</code></pre>\n\n<p>That's a lot of error-prone duplication. Two approaches that don't work:</p>\n\n<ul>\n<li><p>We can't move the <code>cfg</code> inside the macro, because then it will expand in the crate user's scope, which  does not have feature <code>foo</code> appropriately set.</p></li>\n<li><p>We can't use a <code>#[doc(hidden)] #[macro_export] macro_rules! bar_priv_impl__</code> helper macro and use <code>#[cfg]</code> on the helper macro since Rust 1.30, because users can now request <code>use mycrate::bar;</code> to only import the <code>bar!</code> macro, giving errors about how <code>bar_priv_impl__!</code> is not defined.</p></li>\n</ul>\n\n<p>Is there any way that's better than full macro duplication? It gets really bad if you have N features you're testing on, as you need <em>2<sup>n</sup></em> duplications.</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1540593523, "post_id": 53016728, "comment_id": 92937553, "body": "You need to call <code>run()</code> on the event loop to run it.  However, I don&#39;t think the interface is meant to be used this way these days.  Take a look at the <a href=\"https://docs.rs/tokio/0.1.12/tokio/runtime/index.html\" rel=\"nofollow noreferrer\">module-level documentation of <code>tokio::runtime</code></a> for examples for the modern interface."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1540595804, "creation_date": 1540595804, "answer_id": 53017368, "question_id": 53016728, "link": "https://stackoverflow.com/questions/53016728/why-are-spawned-futures-not-executed-by-tokio-corereactorcore/53017368#53017368", "title": "Why are spawned futures not executed by tokio_core::reactor::Core?", "body": "<p>As already mentioned in the comments, you are setting up a bunch of computation but never running any of it. Like iterators, you can think of futures as <em>lazy</em>. The compiler normally tells you about this when you directly create a future but never use it. Here, you are spawning the futures, so you don't get that warning, but nothing ever drives the Tokio reactor.</p>\n\n<p>In many cases, you have a specific future you want to run, and you'd drive the reactor until that completes. In other cases, your run the reactor \"forever\", endlessly handling new work.</p>\n\n<p>In this case, you can use <a href=\"https://docs.rs/tokio-core/0.1.17/tokio_core/reactor/struct.Core.html#method.turn\" rel=\"nofollow noreferrer\"><code>Core::turn</code></a>:</p>\n\n<pre><code>fn main() {\n    let mut eloop = tokio_core::reactor::Core::new().unwrap();\n    let handle = eloop.handle();\n\n    for x in 0..10 {\n        let f = create_a_future(x);\n        handle.spawn(f);\n    }\n\n    eloop.run(None);\n}\n\neloop.turn(None);\n</code></pre>\n\n<hr>\n\n<blockquote>\n<pre><code>-&gt; Box&lt;Future&lt;Item = (), Error = ()&gt;&gt;\n</code></pre>\n</blockquote>\n\n<p>You don't need to (and probably shouldn't) do this in modern Rust. It's preferred to return an anonymous type:</p>\n\n<pre><code>fn create_a_future() -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    futures::future::ok(2).and_then(|a| {\n        println!(\"{}\", a);\n        Ok(())\n    })\n}\n</code></pre>\n\n<blockquote>\n<pre><code> tokio_core::reactor::Core\n</code></pre>\n</blockquote>\n\n<p>My understanding is that this level of Tokio is reserved for more complicated setups. Many people can just use <code>tokio::run</code> and <code>tokio::spawn</code>:</p>\n\n<pre><code>fn main() {\n    tokio::run(futures::lazy(|| {\n        for _ in 0..10 {\n            tokio::spawn(create_a_future());\n        }\n        Ok(())\n    }))\n}\n</code></pre>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 696, "favorite_count": 0, "accepted_answer_id": 53017368, "answer_count": 1, "score": 0, "last_activity_date": 1540595804, "creation_date": 1540590799, "last_edit_date": 1540594768, "question_id": 53016728, "link": "https://stackoverflow.com/questions/53016728/why-are-spawned-futures-not-executed-by-tokio-corereactorcore", "title": "Why are spawned futures not executed by tokio_core::reactor::Core?", "body": "<pre><code>extern crate tokio; // 0.1.8\n\nuse tokio::prelude::*;\n\nfn create_a_future(x: u8) -&gt; Box&lt;Future&lt;Item = (), Error = ()&gt;&gt; {\n    Box::new(futures::future::ok(2).and_then(|a| {\n        println!(\"{}\", a);\n        Ok(())\n    }))\n}\n\nfn main() {\n    let mut eloop = tokio_core::reactor::Core::new().unwrap();\n    let handle = eloop.handle();\n\n    for x in 0..10 {\n        let f = create_a_future(x);\n        handle.spawn(f);\n    }\n}\n</code></pre>\n\n<p>I expect this to print to stdout, but it didn't happen. Am I using <code>spawn</code> in the wrong way?</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1540582582, "post_id": 53015098, "comment_id": 92934123, "body": "I think you need to define a struct <code>ProgramWithProjects</code> or similar, representing the desired structure, including a field <code>projects: Vec&lt;Project&gt;</code>.  You can fill the struct while you hold the database connection, and then serialize it to JSON."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1540597733, "creation_date": 1540597733, "answer_id": 53017536, "question_id": 53015098, "link": "https://stackoverflow.com/questions/53015098/how-do-i-perform-additional-database-queries-when-serializing-a-value-with-serde/53017536#53017536", "title": "How do I perform additional database queries when serializing a value with Serde?", "body": "<p>The practical answer is <strong>don't</strong>. Serialization of a value should not involve arbitrary database calls, it should <em>only serialize</em>. Create a struct to hold all the data:</p>\n\n<pre><code>#[derive(Serialize)]\nstruct ProgramAndProjects {\n    #[serde(flatten)]\n    program: Program,\n    projects: Vec&lt;Project&gt;,\n}\n</code></pre>\n\n<p>Then write a function that populates that struct by doing the required database queries and directly serialize the result.</p>\n\n<p>This has a huge benefit of being wildly more testable, as well.</p>\n\n<hr>\n\n<p>That being said, it is <em>possible</em> to do, but it's likely not worth it. You can stick a database connection <em>into</em> <code>Program</code> (or create a newtype with the connection and the <code>Program</code>) and then make use of the connection during serialization.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/51988630/155423\">How can I get Serde to allocate strings from an arena?</a></li>\n</ul>\n"}], "owner": {"reputation": 353, "user_id": 822406, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/be7b9265dfef43193415f8bb24c8aee4?s=128&d=identicon&r=PG", "display_name": "Ramsundar Shandilya", "link": "https://stackoverflow.com/users/822406/ramsundar-shandilya"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1540836429, "creation_date": 1540581683, "last_edit_date": 1540836429, "question_id": 53015098, "link": "https://stackoverflow.com/questions/53015098/how-do-i-perform-additional-database-queries-when-serializing-a-value-with-serde", "title": "How do I perform additional database queries when serializing a value with Serde?", "body": "<p>A <code>Program</code> has a one-to-many relationship with <code>Project</code>. I'm looking for an ideal way to include all the projects in a program when I print the JSON response.</p>\n\n<pre><code>extern crate rocket_contrib;\n#[macro_use]\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\n#[macro_use]\nextern crate serde_json;\n\nuse rocket_contrib::Json;\nuse serde_json::Value;\n\nmod schema {\n    table! {\n        projects (id) {\n            id -&gt; Int4,\n            title -&gt; Varchar,\n            program_id -&gt; Int4,\n            is_archived -&gt; Bool,\n        }\n    }\n\n    table! {\n        programs (id) {\n            id -&gt; Int4,\n            title -&gt; Varchar,\n            is_archived -&gt; Bool,\n        }\n    }\n}\n\nfn main() {\n    let program = Program::get(id);\n    let json_value = Json(json!({ \"result\": program }));\n}\n</code></pre>\n\n<p>I looked into implementing custom serializing: </p>\n\n<pre><code>impl Serialize for Program {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: Serializer,\n    {\n    }\n}\n</code></pre>\n\n<p>But I do not have the <code>db::Conn</code> required to pull the projects in this function.</p>\n\n<p>I'm looking for a response like:</p>\n\n<pre><code>{ \n    \"id\": 1,\n    \"is_archived\": false,\n    \"title\": \"Program 1\",\n    \"projects\": [{\n      \"id\": 2,\n      \"is_archived\": false,\n       \"title\": \"Project 1\"\n    }]\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6137, "user_id": 847382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/b73e2fff665c33621c8a4347cf8074be?s=128&d=identicon&r=PG", "display_name": "PitaJ", "link": "https://stackoverflow.com/users/847382/pitaj"}, "edited": false, "score": 0, "creation_date": 1540568089, "post_id": 53011844, "comment_id": 92927514, "body": "Have you tried passing <code>&amp;mut writer</code> to the <code>to_writer</code> function?"}], "answers": [{"comments": [{"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540568519, "post_id": 53012027, "comment_id": 92927769, "body": "I know it doesn&#39;t make much sense to buffer memory, but the API needs a writer."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540568601, "post_id": 53012027, "comment_id": 92927802, "body": "@Markus And so does <code>BufWriter</code>.  Everything you can pass to <code>BufWriter::new()</code> is a writer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540568815, "post_id": 53012027, "comment_id": 92927925, "body": "@Markus <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#impl-Write-9\" rel=\"nofollow noreferrer\"><code>impl Write for Vec&lt;u8&gt;</code></a>."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540570249, "post_id": 53012027, "comment_id": 92928616, "body": "@Shepmaster yes, but to_writer doesn&#39;t accept the Vec, I&#39;ve tried that before."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 1, "creation_date": 1540570401, "post_id": 53012027, "comment_id": 92928696, "body": "@Markus It should accept it.  You may need to make the type explicit (<code>let mut buf: Vec&lt;u8&gt; = \u2026</code>) depending on the context."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540570682, "post_id": 53012027, "comment_id": 92928827, "body": "@Markus it certainly should... if you check my last update, you can see that serde_json passes a <code>Vec&lt;u8&gt;</code> to <code>to_writer</code> in its implementation of <code>to_string</code> :-)"}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540571374, "post_id": 53012027, "comment_id": 92929101, "body": "Ah yes, sorry, I&#39;ve forgotten the mut in &amp;mut and the compiler told me only about the &lt;std::vec::Vec&lt;u8&gt; as std::io::Write&gt;."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 2, "last_activity_date": 1540569078, "last_edit_date": 1540569078, "creation_date": 1540568052, "answer_id": 53012027, "question_id": 53011844, "link": "https://stackoverflow.com/questions/53011844/how-can-i-write-to-a-bufwriter-and-get-the-content-that-is-written/53012027#53012027", "title": "How can I write to a BufWriter and get the content that is written?", "body": "<p>There is a <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#impl-Write-18\" rel=\"nofollow noreferrer\">forwarding implementation of <code>Write</code> for mutable references to <code>Write</code></a>:</p>\n\n<pre><code>impl&lt;'a, W: Write + ?Sized&gt; Write for &amp;'a mut W\n</code></pre>\n\n<p>Using this implementation, you can avoid either moving <code>buf</code> or moving <code>writer</code>, by instead just moving a mutable reference.</p>\n\n<p>Note that wrapping a <code>Vec&lt;u8&gt;</code> in a <code>BufWriter</code> isn't really useful. Buffering is meant to reduce the number of writes to a slow backend, but if your backend is memory anyway, you don't gain anything by adding a layer of buffering.</p>\n\n<p>If we remove the <code>BufWriter</code>, your code could look like this:</p>\n\n<pre><code>fn write_to_json_test0() {\n    let json = get_schema_without_optionals0();\n    let mut buf = Vec::new();\n    serde_json::to_writer(&amp;mut buf, &amp;json).unwrap();\n    let s = String::from_utf8(buf).unwrap();\n    assert_eq!(s, json.to_string());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540569413, "post_id": 53012064, "comment_id": 92928212, "body": "The answer would be short and simple, that there is a <code>by_ref()</code> ;-) And it would be more precise to tell that the buffer of the BufWriter is not my Vec, and that&#39;s the cause why the pull request will not help here. Do you like to answer questions here? I&#39;m not sure, but you sound a little bit top-down. I&#39;m pretty sure you know everything about Rust and there is no need to tell anyone what you think he/she doesn&#39;t know..."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 1, "creation_date": 1540569649, "post_id": 53012064, "comment_id": 92928321, "body": "@Markus Please, take a step back. Shepmaster is spending a significant amount of his time helping other people on StackOverflow <i>for free</i>. It&#39;s hard to read the tone of something that an unknown person has written on the internet, but if in doubt, please assume good faith, in particular when someone is trying to help you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 4, "creation_date": 1540569956, "post_id": 53012064, "comment_id": 92928462, "body": "@Markus Some programmers care to understand the <i>why</i> behind a solution, some programmers care to understand that there&#39;s a common pattern that applies in multiple cases, and some programmers care to understand where their reasoning went incorrect. These aren&#39;t true for every programmer. That being said, Stack Overflow isn&#39;t about answering a question solely for the asker, it&#39;s about providing broadly applicable answers so that a vast swath of programmers learn, improve, and never need to ask the same question again. TL;DR: &quot;different strokes for different folks&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1540570308, "post_id": 53012064, "comment_id": 92928645, "body": "@SvenMarnach thanks! I don&#39;t think Markus is intending to be negative here \u2014 my answers often do provide a lot of correlating evidence and links, as well as going up and down the levels of abstraction a bit. Some people come to SO for the quick copy-and-paste solution to a problem and others want the long-form text. Both approaches are absolutely fine."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540570731, "post_id": 53012064, "comment_id": 92928849, "body": "@Shepmaster I understand that the assumption of good faith works both ways. :) I do think that Markus was trying to criticise your tone when saying &quot;you sound a little bit top-down&quot;, but my apologies if I&#39;m wrong."}, {"owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "edited": false, "score": 0, "creation_date": 1540571681, "post_id": 53012064, "comment_id": 92929220, "body": "Good folk ;-) Thanks. I&#39;ve up-to-now from time to time my difficulties to find the right functions and arg-passing. Not so easy to find the way in the Rust world. But once I&#39;ve found my way the code is great <i>smile</i>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1540578698, "last_edit_date": 1540578698, "creation_date": 1540568173, "answer_id": 53012064, "question_id": 53011844, "link": "https://stackoverflow.com/questions/53011844/how-can-i-write-to-a-bufwriter-and-get-the-content-that-is-written/53012064#53012064", "title": "How can I write to a BufWriter and get the content that is written?", "body": "<blockquote>\n  <p>the fastest way to test if <code>to_string()</code> and <code>to_writer()</code> returns the same</p>\n</blockquote>\n\n<p>Look at <a href=\"https://github.com/serde-rs/json/blob/v1.0.32/src/ser.rs#L2273-L2284\" rel=\"nofollow noreferrer\">the source code for <code>to_string</code></a>:</p>\n\n<pre><code>let vec = try!(to_vec(value));\nlet string = unsafe {\n    // We do not emit invalid UTF-8.\n    String::from_utf8_unchecked(vec)\n};\nOk(string)\n</code></pre>\n\n<p>Which calls <a href=\"https://github.com/serde-rs/json/blob/v1.0.32/src/ser.rs#L2241-L2249\" rel=\"nofollow noreferrer\"><code>to_vec</code></a>:</p>\n\n<pre><code>let mut writer = Vec::with_capacity(128);\ntry!(to_writer(&amp;mut writer, value));\nOk(writer)\n</code></pre>\n\n<p>Stuck together, it's almost the same as your code:</p>\n\n<pre><code>let mut writer = Vec::with_capacity(128);\nto_writer(&amp;mut writer, value)?;\nlet string = unsafe {\n    // We do not emit invalid UTF-8.\n    String::from_utf8_unchecked(writer)\n};\nOk(string)\n</code></pre>\n\n<p>It is more more efficient, however:</p>\n\n<ul>\n<li>it pre-allocates some space in the <code>Vec</code></li>\n<li>it avoids the <code>BufWriter</code> (as <a href=\"https://stackoverflow.com/a/53012027/155423\">\nSven Marnach points out</a>)</li>\n<li>it skips the UTF-8 validity checks</li>\n</ul>\n\n<blockquote>\n  <p>a pull-request for a <code>BufWriter::buffer()</code></p>\n</blockquote>\n\n<p>No, you cannot access the buffer of the <code>BufWriter</code> until that pull request is merged and released \u2014 that's part of the reason that it's being added!</p>\n\n<blockquote>\n  <p>written to this writer</p>\n</blockquote>\n\n<p>It does not seem like you fully understand the purpose of <code>BufWriter</code>. It <em>buffers</em> data that you write to it, so that the underlying writer <strong>doesn't</strong> get it. The data in the buffer is data that the underlying writer hasn't seen. The pull request you cite <em>will not help you</em>.</p>\n\n<p>In fact, you need to be sure to <code>flush</code> the <code>BufWriter</code> to ensure that no data remains in the buffer before you try to parse the underlying <code>Vec</code> as a string. Thankfully, <code>into_inner</code> is already doing that for you.</p>\n\n<blockquote>\n  <p>writer moves here</p>\n</blockquote>\n\n<p>This is because Serde is following the \"C-RW-VALUE\" guideline: <a href=\"https://rust-lang-nursery.github.io/api-guidelines/interoperability.html#generic-readerwriter-functions-take-r-read-and-w-write-by-value-c-rw-value\" rel=\"nofollow noreferrer\">Generic reader/writer functions take <code>R: Read</code> and <code>W: Write</code> by value</a>. You can avoid giving away ownership of the writer by using <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>Write::by_ref</code></a>:</p>\n\n<pre><code>#[test]\nfn write_to_json_test0() -&gt; Result&lt;(), io::Error&gt; {\n    let json = Value::Number(42.into());\n\n    let buf = Vec::new();\n    let mut writer = BufWriter::new(buf);\n    serde_json::to_writer(writer.by_ref(), &amp;json)?;\n    let s = String::from_utf8(writer.into_inner()?).unwrap();\n\n    assert_eq!(s, json.to_string());\n    Ok(())\n}\n</code></pre>\n\n<p>This works because <code>by_ref</code> returns a mutable reference to the writer, and there's a <em>blanket implementation</em> of <code>Write</code> for <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#impl-Write-18\" rel=\"nofollow noreferrer\">any mutable reference to a type that itself implements <code>Write</code></a>:</p>\n\n<pre><code>impl&lt;'a, W: Write + ?Sized&gt; Write for &amp;'a mut W\n</code></pre>\n\n<p><code>by_ref</code> is just a convenience function to avoid the relatively strange syntax of taking a mutable reference explicitly. This pattern of <code>by_ref</code> is repeated for <code>Read</code> as well as <code>Iterator</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/33831265/155423\">How to use a file with a BufReader and still be able to write to it?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31374051/155423\">Why does Iterator::take_while take ownership of the iterator?</a></li>\n<li><a href=\"https://stackoverflow.com/q/52515361/155423\">Why does the usage of by_ref().take() differ between the Iterator and Read traits?</a></li>\n<li><a href=\"https://stackoverflow.com/q/39935158/155423\">Cannot use moved BufReader after for loop with bufreader.lines()</a></li>\n</ul>\n"}], "owner": {"reputation": 362, "user_id": 3819791, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/4Mha2.png?s=128&g=1", "display_name": "Markus", "link": "https://stackoverflow.com/users/3819791/markus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1241, "favorite_count": 0, "accepted_answer_id": 53012064, "answer_count": 2, "score": 1, "last_activity_date": 1540578698, "creation_date": 1540567386, "last_edit_date": 1540567607, "question_id": 53011844, "link": "https://stackoverflow.com/questions/53011844/how-can-i-write-to-a-bufwriter-and-get-the-content-that-is-written", "title": "How can I write to a BufWriter and get the content that is written?", "body": "<p>Is there a way to use a <code>Writer</code> and get the content written to this writer back? Something like a <code>BufWriterReader</code>? I've tried this, but doesn't compile:</p>\n\n<pre><code>#[test]\nfn write_to_json_test0() {\n    let json = get_schema_without_optionals0(); // this is a thing serde_json can (de)serialize\n    let buf = Vec::new();\n    let writer = BufWriter::new(buf); // buf moves here\n\n    serde_json::to_writer(writer, &amp;json).unwrap(); // writer moves here\n\n    let s = String::from_utf8(writer.into_inner().unwrap()).unwrap(); // compile error, because writer used after move\n\n    assert_eq!(s, json.to_string());\n}\n</code></pre>\n\n<p>There is <a href=\"https://github.com/rust-lang/rust/pull/55211/commits/1139c9790145e8955a500cdc2eae702ca2271e6f\" rel=\"nofollow noreferrer\">a pull-request for a <code>BufWriter::buffer()</code></a>, but that's not available now. </p>\n\n<p>What is the fastest way to test if <code>to_string()</code> and <code>to_writer()</code> returns the same? Do I really need to write to file and read the file to a string?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 1, "creation_date": 1540561659, "post_id": 53010103, "comment_id": 92923751, "body": "The first example can be simplified to <code>return lots_of_things();</code> (assuming its <code>Result::Ok</code> type is the same). But in general, what if the types were <code>Result&lt;(), ()&gt;</code> or <code>Option&lt;()&gt;</code>? If this was all automatic, how would it decide whether to return <code>Ok(())</code> or <code>Err(())</code>, or <code>Some(())</code> or <code>None</code>? I personally think its a good thing that the return values must be explicitly specified and are not automatic. It makes it way easier to understand and read a function."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1540567210, "post_id": 53010103, "comment_id": 92926959, "body": "Why should it automatically return <code>None</code> instead of <code>Some(())</code>? Why should it automatically return <code>Ok(())</code> instead of some generated error?"}, {"owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "reply_to_user": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1540569111, "post_id": 53010103, "comment_id": 92928085, "body": "@Cornstalks I would propose a convention. In the <code>Result</code> case, if there&#39;s no error to return, then I just assume that everything went well, so I would always return <code>Ok(())</code> instead of <code>Err(())</code>. In the <code>Option</code> case, if there&#39;s nothing to return, I could just assume that&#39;s a <code>None</code> instead of <code>Some(())</code>. That would be default behaviour, though, the programmer could always explicitly return <code>Err(())</code> or <code>Some(())</code> if she wants to."}, {"owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540569526, "post_id": 53010103, "comment_id": 92928259, "body": "@Shepmaster Your question maybe is related to my previous comment. It&#39;s a matter of convention."}], "answers": [{"comments": [{"owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "edited": false, "score": 3, "creation_date": 1540570363, "post_id": 53010392, "comment_id": 92928673, "body": "I took me a while to understand what was going on here, and that&#39;s a problem that could happen while I am debugging. I rest my case. Well done!"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 1, "creation_date": 1540669696, "post_id": 53010392, "comment_id": 92953169, "body": "I would totally upvote adding that helper as <code>std::result::ok()</code>."}, {"owner": {"reputation": 1, "user_id": 1114, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/FFE8V.gif?s=128&g=1", "display_name": "Jeremy", "link": "https://stackoverflow.com/users/1114/jeremy"}, "edited": false, "score": 0, "creation_date": 1549388379, "post_id": 53010392, "comment_id": 95881465, "body": "I thought you were Shep."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 1, "user_id": 1114, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/FFE8V.gif?s=128&g=1", "display_name": "Jeremy", "link": "https://stackoverflow.com/users/1114/jeremy"}, "edited": false, "score": 2, "creation_date": 1549388498, "post_id": 53010392, "comment_id": 95881523, "body": "@JeremyBanks Nope, there is a Kirbymania in the Rust tag nowadays."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 19, "last_activity_date": 1540562509, "last_edit_date": 1540562509, "creation_date": 1540562283, "answer_id": 53010392, "question_id": 53010103, "link": "https://stackoverflow.com/questions/53010103/can-i-automatically-return-ok-or-none-from-a-function/53010392#53010392", "title": "Can I automatically return Ok(()) or None from a function?", "body": "<p>You cannot omit this in Rust. A <a href=\"https://github.com/rust-lang/rfcs/pull/2120\" rel=\"noreferrer\">proposal</a> was made to allow a <code>()</code> \u2192 <code>Result&lt;(), _&gt;</code> coercion rule, but it was massively downvoted and then refused.</p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/pull/2120#issuecomment-324090179\" rel=\"noreferrer\">A comment</a> explains well why it is a bad idea:</p>\n\n<blockquote>\n  <p>I've gotten very wary of implicit coercion because of JavaScript (yes,\n  I know that's an extreme). I have always loved the explicitness of\n  Rust, and that's why I have favored the other RFC more.</p>\n  \n  <p>Here is an example of something I'm afraid of</p>\n\n<pre><code>let x = {\n    // Do some stuff\n    ...\n    if blah {\n        Ok(())\n    } else {\n        Err(\"oh no\");\n   }\n};\n\nif let Ok(_) = x {\n    println!(\"this always prints\");\n}\n</code></pre>\n  \n  <p>Oops... In this case, the type system actually would give false\n  confidence. Scary.</p>\n  \n  <p>Also, more generally I would like the solution to be specific to\n  exiting a function or block.</p>\n</blockquote>\n\n<hr>\n\n<p>When I have a lot of <code>Ok(())</code> in my code, I create a small helper function to make the code prettier:</p>\n\n<pre><code>fn ok&lt;E&gt;() -&gt; Result&lt;(), E&gt; {\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1297, "favorite_count": 0, "accepted_answer_id": 53010392, "answer_count": 1, "score": 6, "last_activity_date": 1618929362, "creation_date": 1540561336, "last_edit_date": 1618929362, "question_id": 53010103, "link": "https://stackoverflow.com/questions/53010103/can-i-automatically-return-ok-or-none-from-a-function", "title": "Can I automatically return Ok(()) or None from a function?", "body": "<p>I have functions that return an <code>Option</code> or a <code>Result</code>:</p>\n<pre><code>fn get_my_result() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    lots_of_things()?;\n    Ok(()) // Could this be omitted?\n}\n\nfn get_my_option() -&gt; Option&lt;&amp;'static str&gt; {\n    if some_condition {\n        return Some(&quot;x&quot;);\n    }\n\n    if another_condition {\n        return Some(&quot;y&quot;);\n    }\n\n    None // Could this be omitted as well?\n}\n</code></pre>\n<p>Currently, neither <code>Ok(())</code> or <code>None</code> are allowed to be omitted, as shown in the examples above. Is there a reason for that? Is it possible for this to be changed in the future?</p>\n<h1>Update</h1>\n<p>We can use <a href=\"https://github.com/withoutboats/fehler\" rel=\"nofollow noreferrer\">Fehler</a> to write code like this:</p>\n<pre><code>#[throws(Box&lt;Error&gt;)]\nfn get_my_result() {\n    let value = lots_of_things()?;\n    // No need to return Ok(())\n}\n</code></pre>\n<p>Fehler also allows to throw as Option.</p>\n"}, {"tags": ["file", "rust", "borrowing"], "comments": [{"owner": {"reputation": 10246, "user_id": 762363, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8cec6320f5a5a8253b3dbfbb8177e001?s=128&d=identicon&r=PG", "display_name": "Tarmil", "link": "https://stackoverflow.com/users/762363/tarmil"}, "edited": false, "score": 0, "creation_date": 1540544904, "post_id": 53003564, "comment_id": 92914326, "body": "<code>seek()</code> takes <code>&amp;mut self</code>, so this is where the mutable borrow happens. Looking at the crate docs, couldn&#39;t you use <code>decoder.total_in()</code> instead?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540566925, "post_id": 53003564, "comment_id": 92926790, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/53003564/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. Sepcifically, we cannot tell where <code>BzDecoder</code> and <code>Archive</code> come from, plus some other traits. Try to produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> or you can reproduce it in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 2802364, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5cd00ff4ba1ec006c87b435062ba5a19?s=128&d=identicon&r=PG&f=1", "display_name": "thanasis2028", "link": "https://stackoverflow.com/users/2802364/thanasis2028"}, "edited": false, "score": 0, "creation_date": 1540566736, "post_id": 53005509, "comment_id": 92926680, "body": "Nice one thanks. I didn&#39;t know about the &amp;File traits implementation. But how does the <code>(&amp;f).seek()</code> version work? Shouldn&#39;t the pointer be mutable according to the trait?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540566870, "post_id": 53005509, "comment_id": 92926760, "body": "See also: <a href=\"https://stackoverflow.com/q/31503488/155423\">Why is it possible to implement Read on an immutable reference to File?</a>."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 115, "user_id": 2802364, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5cd00ff4ba1ec006c87b435062ba5a19?s=128&d=identicon&r=PG&f=1", "display_name": "thanasis2028", "link": "https://stackoverflow.com/users/2802364/thanasis2028"}, "edited": false, "score": 1, "creation_date": 1540567439, "post_id": 53005509, "comment_id": 92927096, "body": "@thanasis2028 <code>(&amp;f).seek()</code> works for exactly the same reason that <code>f.seek()</code> works.  Methods are first looked up on the type of the receiver itselt, say <code>T</code>, then on <code>&amp;T</code>, then on <code>&amp;mut T</code>, then on objects obtained by iteratively dereferencing the receiver.  See <a href=\"https://stackoverflow.com/a/52534876/279627\">this answer</a> for further details."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 8, "last_activity_date": 1540546565, "last_edit_date": 1540546565, "creation_date": 1540545686, "answer_id": 53005509, "question_id": 53003564, "link": "https://stackoverflow.com/questions/53003564/extracting-an-archive-with-progress-bar-mutable-borrow-error/53005509#53005509", "title": "Extracting an archive with progress bar - mutable borrow error", "body": "<p>Files are a bit special. The usual <code>read()</code> and <code>seek()</code> and <code>write()</code> methods (defined on the <code>Read</code>, <code>Seek</code> and <code>Write</code> traits) take <code>self</code> by mutable reference:</p>\n\n<pre><code>fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt;\nfn seek(&amp;mut self, pos: SeekFrom) -&gt; Result&lt;u64&gt;\nfn write(&amp;mut self, buf: &amp;[u8]) -&gt; Result&lt;usize&gt;\n</code></pre>\n\n<p>However, all mentioned traits are also implemented for <code>&amp;File</code>, i.e. for <em>immutable</em> references to a file:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/std/fs/struct.File.html#impl-Read-1\" rel=\"noreferrer\"><code>impl&lt;'a&gt; Read for &amp;'a File</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/nightly/std/fs/struct.File.html#impl-Seek-1\" rel=\"noreferrer\"><code>impl&lt;'a&gt; Seek for &amp;'a File</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/nightly/std/fs/struct.File.html#impl-Write-1\" rel=\"noreferrer\"><code>impl&lt;'a&gt; Write for &amp;'a File</code></a></li>\n</ul>\n\n<p>So you can modify a file even if you only have a read-only reference to the file. For these implementations, the <code>Self</code> type is <code>&amp;File</code>, so accepting <code>self</code> by mutable reference in fact means accepting a <code>&amp;mut &amp;File</code>, a mutable reference to a reference to a file.</p>\n\n<p>Your code passes <code>&amp;f</code> to <code>BzDecoder::new()</code>, creating an immutable borrow. Later you call <code>f.seek(SeekFrom::Current(0))</code>, which passes <code>f</code> to <code>seek</code> by mutable reference.  However, this is not allowed, since you already have an immutable borrow of the file. The solution is to use the <code>Seek</code> implementation on <code>&amp;File</code> instead:</p>\n\n<pre><code>(&amp;mut &amp;f).seek(SeekFrom::Current(0))\n</code></pre>\n\n<p>or slightly simpler</p>\n\n<pre><code>(&amp;f).seek(SeekFrom::Current(0))\n</code></pre>\n\n<p>This only creates a second immutable borrow, which is allowed by Rust's rules for references.</p>\n\n<p>I created a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=dc89b3f30ced58231066e36444a50a13\" rel=\"noreferrer\">playground example demonstrating that this works</a>. If you replace <code>(&amp;f)</code> with <code>f</code> you get the error you originally got.</p>\n"}], "owner": {"reputation": 115, "user_id": 2802364, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5cd00ff4ba1ec006c87b435062ba5a19?s=128&d=identicon&r=PG&f=1", "display_name": "thanasis2028", "link": "https://stackoverflow.com/users/2802364/thanasis2028"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 53005509, "answer_count": 1, "score": 3, "last_activity_date": 1540553732, "creation_date": 1540538747, "last_edit_date": 1540553732, "question_id": 53003564, "link": "https://stackoverflow.com/questions/53003564/extracting-an-archive-with-progress-bar-mutable-borrow-error", "title": "Extracting an archive with progress bar - mutable borrow error", "body": "<p>I am trying to extract a .tar.bz file (or .tar.whatever actually) and also be able to have a xx% progress report. So far I have this:</p>\n\n<pre><code>pub fn extract_file_with_progress&lt;P: AsRef&lt;Path&gt;&gt;(&amp;self, path: P) -&gt; Result&lt;()&gt; {\n    let path = path.as_ref();\n    let size = fs::metadata(path)?;\n    let mut f = File::open(path)?;\n    let decoder = BzDecoder::new(&amp;f);\n    let mut archive = Archive::new(decoder);\n\n    for entry in archive.entries()? {\n        entry?.unpack_in(\".\")?;\n        let pos = f.seek(SeekFrom::Current(0))?;\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<p>The idea is to use <code>pos/size</code> to get the percentage, but compiling the above function gets me the error <code>cannot borrow f as mutable because it is also borrowed as immutable</code>.\nI understand what the error means, but I don't really use <code>f</code> as mutable; I only use the seek function to get the current position.</p>\n\n<p>Is there a way to work-around this, either by forcing the compiler to ignore the mutable borrow or by getting the position in some immutable way?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1540540474, "post_id": 53002597, "comment_id": 92911951, "body": "What do you mean by: a second layer of future?"}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540547523, "post_id": 53003689, "comment_id": 92915848, "body": "I think this is what <code>map()</code> does, while <code>then()</code> chains two futures."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540548253, "post_id": 53003689, "comment_id": 92916265, "body": "@SvenMarnach Oh yes, you&#39;re right. This is a mistake. Do you want to answer, or should I edit my answer?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540548373, "post_id": 53003689, "comment_id": 92916333, "body": "I don&#39;t have time to answer right now, so go ahead. :)"}, {"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540561626, "post_id": 53003689, "comment_id": 92923729, "body": "@SvenMarnach I get that it is lazy. Using your example, suppose <code>t = future_a.then(foo)</code>. My question is: when <code>t.wait()</code> is called, <code>future_a</code> first gets resolved to &quot;a&quot;, then <i>after</i> that, foo(a) is computed and returns a <code>future_b</code>. Is <code>future_b</code> is resolved as well, or it&#39;s returned as it?"}, {"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540561836, "post_id": 53003689, "comment_id": 92923863, "body": "@SvenMarnach now maybe i see it. that&#39;s nothing but the difference between <code>map(foo)</code> and <code>then(foo)</code>: <code>map</code> returns <code>foo(a)</code> while <code>then</code> resolves <code>foo(a)</code>."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 3, "last_activity_date": 1540566772, "last_edit_date": 1540566772, "creation_date": 1540539288, "answer_id": 53003689, "question_id": 53002597, "link": "https://stackoverflow.com/questions/53002597/what-are-the-semantics-of-futurethen/53003689#53003689", "title": "What are the semantics of Future::then?", "body": "<p><a href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.5/futures/future/trait.FutureExt.html#method.then\" rel=\"nofollow noreferrer\"><code>then</code></a> does not wait for the future to be finished. It is lazy, as said by the doc:</p>\n\n<blockquote>\n  <p>The closure is only run <em>after</em> successful completion of the <code>self</code> future.</p>\n</blockquote>\n\n<p>It basically chains 2 futures. Suppose you have:</p>\n\n<ul>\n<li>one future <code>future_a</code> that \"computes\" a <code>a</code>,</li>\n<li>one method <code>foo</code> that takes an <code>a</code> and returns a <code>future_b</code>.</li>\n</ul>\n\n\n\n<pre><code>future_a.then(foo)\n</code></pre>\n\n<p>will be a future that merge those 2 futures to return a <code>future_b</code></p>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1540566772, "creation_date": 1540534817, "last_edit_date": 1540566732, "question_id": 53002597, "link": "https://stackoverflow.com/questions/53002597/what-are-the-semantics-of-futurethen", "title": "What are the semantics of Future::then?", "body": "<p>I\u2019m confused by the semantics of the combinator <code>then</code>. </p>\n\n<p>Intuitively, <code>a.then(|r| f(r))</code> is a future that when <code>a</code> finishes with <code>r</code>, resolves to <code>f(r)</code>. In other words, composing <code>f</code> after <code>a</code>. E.g. <code>a</code> reads a number from I/O and <code>f</code> doubles it. This makes sense and that\u2019s been my mental model.</p>\n\n<p>Digging deeper, in fact there\u2019s more than that. The closure passed to <code>then</code> yields a <code>IntoFuture</code>, which means applying <code>f</code> to the result of <code>a</code> returns another future. The above understanding is incorrect then as <code>f(r)</code> is still not fully resolved. </p>\n\n<p>From what I read in the documentation and the source code, it seems to be the following: <code>a.then(|r| f(r))</code> essentially keeps polling until the future <code>a</code> is resolved, then keep polling <code>f(r)</code> (which is also a future) until it resolves. Finally the whole thing is resolved. </p>\n\n<p>Is this the right way to think about it? Why do we need a second layer of futures?</p>\n"}, {"tags": ["recursion", "macros", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540566623, "post_id": 53000868, "comment_id": 92926621, "body": "Essentially a duplicate of <a href=\"https://stackoverflow.com/q/33751796/155423\">Is there a way to count with macros?</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "is_accepted": true, "score": 2, "last_activity_date": 1540544249, "last_edit_date": 1540544249, "creation_date": 1540526977, "answer_id": 53001282, "question_id": 53000868, "link": "https://stackoverflow.com/questions/53000868/recursive-macro-makes-infinite-recursion/53001282#53001282", "title": "Recursive macro makes infinite recursion", "body": "<p>Well, it really is an infinite recursion. Check what your macro invocation <code>n!(0)</code> will be expanded into:</p>\n\n<pre><code>{\n    let val: usize = 0;\n    match val {\n        0 =&gt; 0,\n        _ =&gt; n!(0 - 1),\n    }\n}\n</code></pre>\n\n<p>...and since there's no way for argument of <code>n!</code> to stop growing negative, it'll repeat (with <code>n!(0 - 1 - 1)</code> in the second match arm, then <code>n!(0 - 1 - 1 - 1)</code> etc.) infinitely.</p>\n\n<p>The key point here is that the macro expansion happens in compile-time, while the <code>match</code> statement you're trying to use to limit the recursion is invoked only at run-time and can't stop anything from appear before that. Unhappily, there's no easy way to do this, since Rust won't evaluate macro arguments (even if it's a constant expression), and so just adding the <code>(0) =&gt; {0}</code> branch to the macro won't work, since the macro will be invoked as (for example) <code>n!(1 - 1)</code>.</p>\n"}], "owner": {"reputation": 167, "user_id": 5906697, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-m8XRMuFIX3A/AAAAAAAAAAI/AAAAAAAAABY/IjID0n9ZLhM/photo.jpg?sz=128", "display_name": "20chan", "link": "https://stackoverflow.com/users/5906697/20chan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 470, "favorite_count": 0, "accepted_answer_id": 53001282, "answer_count": 1, "score": 1, "last_activity_date": 1540566563, "creation_date": 1540523455, "last_edit_date": 1540566563, "question_id": 53000868, "link": "https://stackoverflow.com/questions/53000868/recursive-macro-makes-infinite-recursion", "title": "Recursive macro makes infinite recursion", "body": "<p>I made a simple macro that returns the taken parameter.</p>\n\n<pre><code>macro_rules! n {\n    ($n:expr) =&gt; {{\n        let val: usize = $n;\n        match val {\n            0 =&gt; 0,\n            _ =&gt; n!(val - 1),\n        }\n    }};\n}\n</code></pre>\n\n<p>When I compile this code with the option <code>external-macro-backtrace</code>, it raises an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: recursion limit reached while expanding the macro `n`\n  --&gt; src/main.rs:15:18\n   |\n10 |   macro_rules! n {\n   |  _-\n   | |_|\n   | |\n11 | |     ($n:expr) =&gt; {{\n12 | |         let val: usize = $n;\n13 | |         match val {\n14 | |             0 =&gt; 0,\n15 | |             _ =&gt; n!(val - 1),\n   | |                  ^^^^^^^^^^^\n   | |                  |\n   | |                  in this macro invocation\n16 | |         }\n17 | |     }};\n18 | | }\n   | | -\n   | |_|\n   | |_in this expansion of `n!`\n   |   in this expansion of `n!`\n...\n31 | |     n!(1);\n   | |     ------ in this macro invocation\n   |\n   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n</code></pre>\n\n<p>I changed the <code>recursion_limit</code> to 128 and higher, but the compiler error message just increase as well. Even when I call <code>n!(0)</code> it makes the same error. I think it is infinite recursion, but I can't find the reason.</p>\n"}, {"tags": ["rust", "webassembly", "wasm-bindgen"], "answers": [{"comments": [{"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1541120917, "post_id": 53108654, "comment_id": 93117932, "body": "This definitely got me closer, but I&#39;m running into a different issue now. I created a <code>Game</code> struct that wraps any types that require <code>&#39;static</code> lifetimes to be declared.  I changed the <code>main_loop</code> signature to <code>fn main_loop(mut game: Game)</code> and have the closure <code>move</code> game.   This doesn&#39;t work because now the closure can&#39;t be wrapped by a wasm <code>Closure</code>. It would seem the only other option is to use <code>unsafe</code> and declare a <code>static mut</code> to hold the game state. Or is there another cleaner solution still?"}, {"owner": {"reputation": 446, "user_id": 3755582, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e3619716eddda8c3b1e0ad30c5f8b05?s=128&d=identicon&r=PG", "display_name": "alexcrichton", "link": "https://stackoverflow.com/users/3755582/alexcrichton"}, "reply_to_user": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1541194130, "post_id": 53108654, "comment_id": 93146804, "body": "Hm I&#39;m not sure I quite follow what isn&#39;t working with the new <code>game: Game</code>, do you have a gist of the error message for why it can&#39;t be wrapped in a wasm <code>Closure</code>?"}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1541266248, "post_id": 53108654, "comment_id": 93160919, "body": "The issue is that by adding <code>move</code> the closure becomes a <code>FnOnce</code>, which is incompatible with <code>Closure::wrap()</code>. This makes sense given that there is no way to statically guarantee that a <code>FnOnce</code> wrapped by by <code>Closure</code> is actually only run once in js land. By the way, I really appreciate your help!"}, {"owner": {"reputation": 446, "user_id": 3755582, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e3619716eddda8c3b1e0ad30c5f8b05?s=128&d=identicon&r=PG", "display_name": "alexcrichton", "link": "https://stackoverflow.com/users/3755582/alexcrichton"}, "reply_to_user": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1541431999, "post_id": 53108654, "comment_id": 93205380, "body": "Oh right yeah, I see! For that you can work around it for now by using an <code>Option&lt;T&gt;</code> followed by <code>take</code> to let it be a <code>FnMut</code> closure (but panic if invoked twice). This is something we should add support for in <code>wasm-bindgen</code> as well! (<code>FnOnce</code> closures)"}], "tags": [], "owner": {"reputation": 446, "user_id": 3755582, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e3619716eddda8c3b1e0ad30c5f8b05?s=128&d=identicon&r=PG", "display_name": "alexcrichton", "link": "https://stackoverflow.com/users/3755582/alexcrichton"}, "is_accepted": false, "score": 7, "last_activity_date": 1541118478, "last_edit_date": 1541118478, "creation_date": 1541102959, "answer_id": 53108654, "question_id": 53000413, "link": "https://stackoverflow.com/questions/53000413/how-can-i-work-around-not-being-able-to-export-functions-with-lifetimes-when-usi/53108654#53108654", "title": "How can I work around not being able to export functions with lifetimes when using wasm-bindgen?", "body": "<p>The easiest way to model this is likely to leave invocations of <code>requestAnimationFrame</code> to JS and instead just implement the update/draw logic in Rust.</p>\n\n<p>In Rust, however, what you can also do is to exploit the fact that a closure which doesn't actually capture any variables is zero-size, meaning that <code>Closure&lt;T&gt;</code> of that closure won't allocate memory and you can safely forget it. For example something like this should work:</p>\n\n<pre><code>#[wasm_bindgen]\npub fn main_loop() {\n    update();\n    draw();\n    let window = ...;\n    let closure = Closure::wrap(Box::new(|| main_loop()) as Box&lt;Fn()&gt;);\n    window.request_animation_frame(closure.as_ref().unchecked_ref());\n    closure.forget(); // not actually leaking memory\n}\n</code></pre>\n\n<p>If your state has lifetimes inside of it, that is unfortunately incompatible with returning back to JS because when you return all the way back to the JS event loop then all WebAssembly stack frames have been popped, meaning that any lifetime is invalidated. This means that your game state persisted across iterations of the <code>main_loop</code> will need to be <code>'static</code></p>\n"}, {"tags": [], "owner": {"reputation": 59, "user_id": 10676406, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-OloIasiJwog/AAAAAAAAAAI/AAAAAAAAAAA/AGDgw-jjzribbaHMD_M62ROow8I-3tDXLQ/mo/photo.jpg?sz=128", "display_name": "djozis", "link": "https://stackoverflow.com/users/10676406/djozis"}, "is_accepted": false, "score": 2, "last_activity_date": 1542653212, "last_edit_date": 1542653212, "creation_date": 1542652787, "answer_id": 53380785, "question_id": 53000413, "link": "https://stackoverflow.com/questions/53000413/how-can-i-work-around-not-being-able-to-export-functions-with-lifetimes-when-usi/53380785#53380785", "title": "How can I work around not being able to export functions with lifetimes when using wasm-bindgen?", "body": "<p>I'm a Rust novice, but here's how I addressed the same issue.</p>\n\n<p>You can eliminate the problematic <code>window.request_animation_frame</code> recursion and implement an FPS cap at the same time by invoking <code>window.request_animation_frame</code> from a <code>window.set_interval</code> callback which checks a <code>Rc&lt;RefCell&lt;bool&gt;&gt;</code> or something to see if there's an animation frame request still pending. I'm not sure if the inactive tab behavior will be any different in practice.</p>\n\n<p>I put the bool into my application state since I'm using an <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> to that anyway for other event handling. I haven't checked that this below compiles as is, but here's the relevant parts of how I'm doing this:</p>\n\n<pre><code>pub struct MyGame {\n    ...\n    should_request_render: bool, // Don't request another render until the previous runs, init to false since we'll fire the first one immediately.\n}\n\n...\n\nlet window = web_sys::window().expect(\"should have a window in this context\");\nlet application_reference = Rc::new(RefCell::new(MyGame::new()));\n\nlet request_animation_frame = { // request_animation_frame is not forgotten! Its ownership is moved into the timer callback.\n    let application_reference = application_reference.clone();\n    let request_animation_frame_callback = Closure::wrap(Box::new(move || {\n        let mut application = application_reference.borrow_mut();\n        application.should_request_render = true;\n        application.handle_animation_frame(); // handle_animation_frame being your main loop.\n    }) as Box&lt;FnMut()&gt;);\n    let window = window.clone();\n    move || {\n        window\n            .request_animation_frame(\n                request_animation_frame_callback.as_ref().unchecked_ref(),\n            )\n            .unwrap();\n    }\n};\nrequest_animation_frame(); // fire the first request immediately\n\nlet timer_closure = Closure::wrap(\n    Box::new(move || { // move both request_animation_frame and application_reference here.\n        let mut application = application_reference.borrow_mut();\n        if application.should_request_render {\n            application.should_request_render = false;\n            request_animation_frame();\n        }\n    }) as Box&lt;FnMut()&gt;\n);\nwindow.set_interval_with_callback_and_timeout_and_arguments_0(\n    timer_closure.as_ref().unchecked_ref(),\n    25, // minimum ms per frame\n)?;\ntimer_closure.forget(); // this leaks it, you could store it somewhere or whatever, depends if it's guaranteed to live as long as the page\n</code></pre>\n\n<p>You can store the result of <code>set_interval</code> and the <code>timer_closure</code> in <code>Option</code>s in your game state so that your game can clean itself up if needed for some reason (maybe? I haven't tried this, and it would seem to cause a free of <code>self</code>?). The circular reference won't erase itself unless broken (you're then storing <code>Rc</code>s to the application inside the application effectively). It should also enable you to change the max fps while running, by stopping the interval and creating another using the same closure.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1029, "favorite_count": 1, "answer_count": 2, "score": 5, "last_activity_date": 1542653212, "creation_date": 1540519132, "question_id": 53000413, "link": "https://stackoverflow.com/questions/53000413/how-can-i-work-around-not-being-able-to-export-functions-with-lifetimes-when-usi", "title": "How can I work around not being able to export functions with lifetimes when using wasm-bindgen?", "body": "<p>I'm trying to write a simple game that runs in the browser, and I'm having a hard time modeling a game loop given the combination of restrictions imposed by the browser, rust, and wasm-bindgen. </p>\n\n<p>A typical game loop in the browser follows this general pattern:</p>\n\n<pre><code>function mainLoop() {\n    update();\n    draw();\n    requestAnimationFrame(mainLoop);\n}\n</code></pre>\n\n<p>If I were to model this exact pattern in rust/wasm-bindgen, it would look like this:</p>\n\n<pre><code>let main_loop = Closure::wrap(Box::new(move || {\n    update();\n    draw();\n    window.request_animation_frame(main_loop.as_ref().unchecked_ref()); // Not legal\n}) as Box&lt;FnMut()&gt;);\n</code></pre>\n\n<p>Unlike javascript, I'm unable to reference <code>main_loop</code> from within itself, so this doesn't work. </p>\n\n<p>An alternative approach that someone suggested is to follow the pattern illustrated in the <a href=\"https://rustwasm.github.io/book/game-of-life/implementing.html\" rel=\"noreferrer\">game of life example</a>. At a high-level, it involves exporting a type that contains the game state and includes public <code>tick()</code> and <code>render()</code> functions that can be called from within a javascript game loop. This doesn't work for me because my gamestate requires lifetime parameters, since it effectively just wraps a <a href=\"https://github.com/slide-rs/specs\" rel=\"noreferrer\">specs</a> <code>World</code> and <code>Dispatcher</code> struct, the latter of which has lifetime parameters. Ultimately, this means that I can't export it using <code>#[wasm_bindgen]</code>.</p>\n\n<p>I'm having a hard time finding ways to work around these restrictions, and am looking for suggestions.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1540498429, "post_id": 52996949, "comment_id": 92899633, "body": "The target triple for your Mac probably is <code>x86_64-apple-darwin</code>.  The middle part is the vendor, which for Linux is <code>unknown</code>, but for a Mac it&#39;s <code>apple</code>. However, it appears you want to configure the build script independent of the target, so you shouldn&#39;t need the target triple at all."}, {"owner": {"reputation": 81656, "user_id": 8446, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8f9c683775bfbe76ed4855a19b73dc81?s=128&d=identicon&r=PG", "display_name": "Roger Lipscombe", "link": "https://stackoverflow.com/users/8446/roger-lipscombe"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1540539233, "post_id": 52996949, "comment_id": 92911294, "body": "Yeah, I found the correct answer by looking at the list -- found the two <code>darwin</code> targets, and knew I was on <code>x86_64</code>, but that still requires me to think. Can you expand on &quot;shouldn&#39;t need the target triple at all&quot;?"}], "answers": [{"comments": [{"owner": {"reputation": 61555, "user_id": 648658, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/75ee864ee3bef78f2a144398789fed25?s=128&d=identicon&r=PG", "display_name": "Jens", "link": "https://stackoverflow.com/users/648658/jens"}, "edited": false, "score": 1, "creation_date": 1586504535, "post_id": 52997454, "comment_id": 108155889, "body": "Hmm. <code>error: the option `Z` is only accepted on the nightly compiler</code> (rustc 1.42.0)."}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 1, "last_activity_date": 1540499423, "last_edit_date": 1540499423, "creation_date": 1540498663, "answer_id": 52997454, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target/52997454#52997454", "title": "Discover current default target?", "body": "<p>With a recent enough rustc compiler:</p>\n\n<pre><code>$ rustc -Z unstable-options --print target-spec-json | grep llvm-target\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 7116, "user_id": 5083516, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9f2aeeefc1a95ddb2f19612150ccd7ba?s=128&d=identicon&r=PG&f=1", "display_name": "plugwash", "link": "https://stackoverflow.com/users/5083516/plugwash"}, "is_accepted": false, "score": 2, "last_activity_date": 1587790545, "creation_date": 1587790545, "answer_id": 61421161, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target/61421161#61421161", "title": "Discover current default target?", "body": "<p>What worked for me (inspired by rodrigo's answer)</p>\n\n<pre><code>RUSTC_BOOTSTRAP=1 rustc -Z unstable-options --print target-spec-json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj[\"llvm-target\"])'\n</code></pre>\n\n<p>RUSTC_BOOTSTRAP=1 bypasses the check that normally allows certain features to only be used on the nightly branch. I also used a proper json parser rather than grep.</p>\n"}, {"tags": [], "owner": {"reputation": 3308, "user_id": 161250, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/74b00bbfe9ba0f647bb154ed5f923cb4?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/161250/alex"}, "is_accepted": false, "score": 2, "last_activity_date": 1593517762, "creation_date": 1593517762, "answer_id": 62656769, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target/62656769#62656769", "title": "Discover current default target?", "body": "<p>It's not particularly elegant perhaps, but I found this to work:</p>\n<pre><code>rustup show | grep default | grep -Po &quot;^[^-]+-\\K\\S+&quot;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 250, "user_id": 29371, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9560972a9f93fc0da625e1185719cb5c?s=128&d=identicon&r=PG", "display_name": "mrk", "link": "https://stackoverflow.com/users/29371/mrk"}, "edited": false, "score": 0, "creation_date": 1605956175, "post_id": 62662046, "comment_id": 114815406, "body": "Thanks, it works for me. In shell you can obtain it with: <code>(eval $(rustc --print cfg | grep target); echo $target_arch-$target_vendor-$target_os-$target_env)</code>"}], "tags": [], "owner": {"reputation": 81656, "user_id": 8446, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8f9c683775bfbe76ed4855a19b73dc81?s=128&d=identicon&r=PG", "display_name": "Roger Lipscombe", "link": "https://stackoverflow.com/users/8446/roger-lipscombe"}, "is_accepted": false, "score": 5, "last_activity_date": 1593534695, "creation_date": 1593534695, "answer_id": 62662046, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target/62662046#62662046", "title": "Discover current default target?", "body": "<p><code>rustc --print cfg</code> will output something like the following:</p>\n<pre><code>$ rustc --print cfg\ndebug_assertions\ntarget_arch=&quot;x86_64&quot;\ntarget_endian=&quot;little&quot;\ntarget_env=&quot;gnu&quot;\ntarget_family=&quot;unix&quot;\ntarget_feature=&quot;fxsr&quot;\ntarget_feature=&quot;sse&quot;\ntarget_feature=&quot;sse2&quot;\ntarget_os=&quot;linux&quot;\ntarget_pointer_width=&quot;64&quot;\ntarget_vendor=&quot;unknown&quot;\nunix\n</code></pre>\n<p>The target is <code>&lt;arch&gt;-&lt;vendor&gt;-&lt;os&gt;-&lt;env&gt;</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 388, "user_id": 3549270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1a4f7b5ad4e34ec42f3dfeb6961f911a?s=128&d=identicon&r=PG&f=1", "display_name": "konstin", "link": "https://stackoverflow.com/users/3549270/konstin"}, "is_accepted": false, "score": 0, "last_activity_date": 1617636365, "creation_date": 1617636365, "answer_id": 66955420, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target/66955420#66955420", "title": "Discover current default target?", "body": "<p>cargo uses <code>rustc -vV</code> to detect the default target triple (<a href=\"https://github.com/rust-lang/cargo/blob/1dae5acb7d27568ca30fe2da49b4a447d7b78e90/src/cargo/util/rustc.rs#L50-L68\" rel=\"nofollow noreferrer\">source</a>). We can do the same thing:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::process::Command;\n\nuse anyhow::{format_err, Context, Result};\nuse std::str;\n\nfn get_target() -&gt; Result&lt;String&gt; {\n    let output = Command::new(&quot;rustc&quot;)\n        .arg(&quot;-vV&quot;)\n        .output()\n        .context(&quot;Failed to run rustc to get the host target&quot;)?;\n    let output = str::from_utf8(&amp;output.stdout).context(&quot;`rustc -vV` didn't return utf8 output&quot;)?;\n\n    let field = &quot;host: &quot;;\n    let host = output\n        .lines()\n        .find(|l| l.starts_with(field))\n        .map(|l| &amp;l[field.len()..])\n        .ok_or_else(|| {\n            format_err!(\n                &quot;`rustc -vV` didn't have a line for `{}`, got:\\n{}&quot;,\n                field.trim(),\n                output\n            )\n        })?\n        .to_string();\n    Ok(host)\n}\n\nfn main() -&gt; Result&lt;()&gt; {\n    let host = get_target()?;\n    println!(&quot;target triple: {}&quot;, host);\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 81656, "user_id": 8446, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8f9c683775bfbe76ed4855a19b73dc81?s=128&d=identicon&r=PG", "display_name": "Roger Lipscombe", "link": "https://stackoverflow.com/users/8446/roger-lipscombe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1847, "favorite_count": 1, "answer_count": 5, "score": 3, "last_activity_date": 1617636365, "creation_date": 1540496645, "question_id": 52996949, "link": "https://stackoverflow.com/questions/52996949/discover-current-default-target", "title": "Discover current default target?", "body": "<p>I want to <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#overriding-build-scripts\" rel=\"nofollow noreferrer\">override a build script</a>, which means adding a configuration section that looks like this:</p>\n\n<pre><code>[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-link-lib = [\"foo\"]\nroot = \"/path/to/foo\"\nkey = \"value\"\n</code></pre>\n\n<p>But I'm using a Mac, so <code>x86_64-unknown-linux-gnu</code> isn't the correct target triple.</p>\n\n<p>How do I discover which target triple rustc or cargo are currently using?</p>\n\n<p><code>rustc --print cfg</code> prints a list of values that don't seem to correspond to the triple (there's no <code>unknown</code> in there, in particular).</p>\n\n<p><code>rustc --print target-list</code> displays all available targets; I just want the default.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1594233843, "last_edit_date": 1594233843, "creation_date": 1540486075, "answer_id": 52994358, "question_id": 52994205, "link": "https://stackoverflow.com/questions/52994205/what-is-the-standard-way-to-call-a-mutable-method-in-a-rc-wrapped-object/52994358#52994358", "title": "What is the standard way to call a mutable method in a Rc-wrapped object?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow noreferrer\">documentation for <code>Rc</code></a> says:</p>\n<blockquote>\n<p>See the <a href=\"https://doc.rust-lang.org/std/rc/index.html\" rel=\"nofollow noreferrer\">module-level documentation</a> for more details.</p>\n</blockquote>\n<p>Which has this text:</p>\n<blockquote>\n<p>This is difficult because <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow noreferrer\"><code>Rc</code></a> enforces memory safety by only giving out shared references to the value it wraps, and these don't allow direct mutation. We need to wrap the part of the value we wish to mutate in a <code>RefCell</code>, which provides <em>interior mutability</em>: a method to achieve mutability through a shared reference. <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a> enforces Rust's borrowing rules at runtime.</p>\n</blockquote>\n<p>It then demonstrates how to use it.</p>\n<hr />\n<p>If you didn't read the API documentation, you might have instead chosen to read the entire <a href=\"https://doc.rust-lang.org/beta/book/ch15-04-rc.html\" rel=\"nofollow noreferrer\">chapter about <code>Rc</code></a> in <em>The Rust Programming Language</em>. It has this to say:</p>\n<blockquote>\n<p>Via immutable references, <code>Rc&lt;T&gt;</code> allows you to share data between multiple parts of your program for reading only. If <code>Rc&lt;T&gt;</code> allowed you to have multiple mutable references too, you might violate one of the borrowing rules discussed in Chapter 4: multiple mutable borrows to the same place can cause data races and inconsistencies. But being able to mutate data is very useful! In the next section, we\u2019ll discuss the interior mutability pattern and the <code>RefCell&lt;T&gt;</code> type that you can use in conjunction with an <code>Rc&lt;T&gt;</code> to work with this immutability restriction.</p>\n</blockquote>\n<hr />\n<p>Applying this new knowledge to your code:</p>\n<pre><code>use std::{cell::RefCell, rc::Rc};\n\nfn main() {\n    let x = Rc::new(RefCell::new(Thing { num: 50 }));\n    x.borrow_mut().change_num(19);\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31373255/155423\">How do I share a mutable object between threads using Arc?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30831037/155423\">Situations where Cell or RefCell is the best choice</a></li>\n<li><a href=\"https://stackoverflow.com/q/57367092/155423\">What is the difference between Rc&lt;RefCell&lt;T&gt;&gt; and RefCell&lt;Rc&lt;T&gt;&gt;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30275982/155423\">When I can use either Cell or RefCell, which should I choose?</a></li>\n<li><a href=\"https://stackoverflow.com/q/45674479/155423\">Need holistic explanation about Rust&#39;s cell and reference counted types</a></li>\n</ul>\n<blockquote>\n<p>I am using the <code>get_mut</code> function</p>\n</blockquote>\n<p>It's very unlikely that you want to use this.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44012575/155423\">Explain the behavior of *Rc::make_mut and why it differs compared to Mutex</a></li>\n</ul>\n"}], "owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3318, "favorite_count": 1, "accepted_answer_id": 52994358, "answer_count": 1, "score": 5, "last_activity_date": 1594233843, "creation_date": 1540485425, "last_edit_date": 1540486368, "question_id": 52994205, "link": "https://stackoverflow.com/questions/52994205/what-is-the-standard-way-to-call-a-mutable-method-in-a-rc-wrapped-object", "title": "What is the standard way to call a mutable method in a Rc-wrapped object?", "body": "<p>In the following code, I am trying to change the value of a refcounted object by calling one of its methods:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let mut x = Rc::new(Thing { num: 50 });\n    x.what_to_do_to_get_mut_thing().change_num(19); //what do i do here\n}\n\npub struct Thing {\n    pub num: u32,\n}\n\nimpl Thing {\n    pub fn change_num(&amp;mut self, newnum: u32) {\n        self.num = newnum;\n    }\n}\n</code></pre>\n\n<p>I am using the <code>get_mut</code> function to achieve this, but I don't know if this is a standard way to accomplish this.</p>\n\n<pre><code>if let Some(val) = Rc::get_mut(&amp;mut x) {\n    val.change_num(19);\n}\n</code></pre>\n"}, {"tags": ["rust", "serde", "rust-rocket"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1540483811, "post_id": 52992576, "comment_id": 92892546, "body": "@Mestru Note that you still can <i>implement</i> <code>Serialize</code> for your type, you simply can&#39;t <i>derive</i> it and will have to implement it by hand."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1540484953, "last_edit_date": 1540484953, "creation_date": 1540480067, "answer_id": 52992576, "question_id": 52992164, "link": "https://stackoverflow.com/questions/52992164/serdes-serialize-implementation-not-found-for-rockets-uuid/52992576#52992576", "title": "Serde&#39;s Serialize implementation not found for Rocket&#39;s UUID", "body": "<p><code>rocket_contrib::UUID</code> does <a href=\"https://github.com/SergioBenitez/Rocket/blob/v0.3.17/contrib/src/uuid.rs#L48-L49\" rel=\"noreferrer\">not implement <code>Serialize</code></a>:</p>\n\n<pre><code>#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\npub struct UUID(uuid_ext::Uuid);\n</code></pre>\n\n<p>If the type doesn't implement <code>Serialize</code>, you can't make it.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/52992164/serdes-serialize-implementation-not-found-for-rockets-uuid/52992576?noredirect=1#comment92892546_52992576\">mcarton points out</a>:</p>\n\n<blockquote>\n  <p>you still can <em>implement</em> <code>Serialize</code> for your type, you simply can't <em>derive</em> it and will have to implement it by hand.</p>\n</blockquote>\n\n<p>That could look something like:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\npub struct Document {\n    #[serde(with = \"my_uuid\")]\n    id: UUID,\n    #[serde(with = \"my_uuid\")]\n    user_id: UUID,\n    created: i64,\n    updated: i64,\n    text: String,\n}\n\nmod my_uuid {\n    use rocket_contrib::UUID;\n    use serde::{de::Error, Deserialize, Deserializer, Serialize, Serializer};\n    use std::str::FromStr;\n\n    pub fn serialize&lt;S&gt;(val: &amp;UUID, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: Serializer,\n    {\n        val.to_string().serialize(serializer)\n    }\n\n    pub fn deserialize&lt;'de, D&gt;(deserializer: D) -&gt; Result&lt;UUID, D::Error&gt;\n    where\n        D: Deserializer&lt;'de&gt;,\n    {\n        let val: &amp;str = Deserialize::deserialize(deserializer)?;\n        UUID::from_str(val).map_err(D::Error::custom)\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39383809/155423\">How to transform fields during serialization using Serde?</a></li>\n<li><a href=\"https://stackoverflow.com/q/46753955/155423\">How to transform fields during deserialization using Serde?</a></li>\n<li><a href=\"https://stackoverflow.com/q/48267016/155423\">Is there a way for me to use #[derive] on a struct or enum from a library without editing the actual library&#39;s source code?</a></li>\n<li><a href=\"https://stackoverflow.com/q/25413201/155423\">How do I implement a trait I don&#39;t own for a type I don&#39;t own?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30793710/155423\">Add Serialize attribute to type from third-party lib</a></li>\n</ul>\n"}], "owner": {"reputation": 177, "user_id": 4593610, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6ee188f2a7d7d54f8442eb380a0dd4f6?s=128&d=identicon&r=PG", "display_name": "Mestru", "link": "https://stackoverflow.com/users/4593610/mestru"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1065, "favorite_count": 1, "accepted_answer_id": 52992576, "answer_count": 1, "score": 6, "last_activity_date": 1540484953, "creation_date": 1540478929, "last_edit_date": 1540480096, "question_id": 52992164, "link": "https://stackoverflow.com/questions/52992164/serdes-serialize-implementation-not-found-for-rockets-uuid", "title": "Serde&#39;s Serialize implementation not found for Rocket&#39;s UUID", "body": "<p>I'm trying to create a custom struct using the <code>UUID</code> struct from Rocket as a field type. I want it to be serialized using Serde in order to convert it to JSON easily.</p>\n\n<p>When trying to do this, I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `rocket_contrib::UUID: \nmodel::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Serialize` is not \nsatisfied\n --&gt; src/service/document.rs:4:10\n  |\n4 | #[derive(Serialize, Deserialize)]\n  |          ^^^^^^^^^ the trait \n`model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Serialize` is not \nimplemented for `rocket_contrib::UUID`\n  |\n  = note: required by `model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::ser::SerializeStruct::serialize_field`\n\nerror[E0277]: the trait bound `rocket_contrib::UUID: \nmodel::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Deserialize&lt;'_&gt;` is not satisfied\n --&gt; src/service/document.rs:4:21\n  |\n4 | #[derive(Serialize, Deserialize)]\n  |                     ^^^^^^^^^^^ the trait \n`model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Deserialize&lt;'_&gt;` is not implemented for `rocket_contrib::UUID`\n  |\n  = note: required by `model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::de::SeqAccess::next_element`\n\nerror[E0277]: the trait bound `rocket_contrib::UUID: model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Deserialize&lt;'_&gt;` is not satisfied\n --&gt; src/service/document.rs:4:21\n  |\n4 | #[derive(Serialize, Deserialize)]\n  |                     ^^^^^^^^^^^ the trait `model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::Deserialize&lt;'_&gt;` is not implemented for `rocket_contrib::UUID`\n  |\n  = note: required by `model::event::_IMPL_DESERIALIZE_FOR_Event::_serde::de::MapAccess::next_value`\n</code></pre>\n\n<p>My struct:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\npub struct Document {\n    id: UUID,\n    user_id: UUID,\n    created: i64,\n    updated: i64,\n    text: String\n}\n</code></pre>\n\n<p>My imports:</p>\n\n<pre><code>[dependencies]\nrocket = \"0.3.17\"\nrocket_codegen = \"0.3.17\"\n\nserde_derive = \"1.0.80\"\nserde = \"1.0.80\"\n\nchrono = \"0.4\"\n\n[dependencies.rocket_contrib]\nversion = \"0.3.17\"\ndefault-features = false\nfeatures = [\"json\", \"uuid\", \"serde\"]\n</code></pre>\n\n<p>Endpoint where I use the struct:</p>\n\n<pre><code>#[get(\"/document/&lt;id&gt;\")]\npub fn get_document(id: UUID) -&gt; status::Accepted&lt;Json&lt;Document&gt;&gt; {\n    status::Accepted(Some(Json(document::get_document(id))))\n}\n</code></pre>\n\n<p>I've checked all dependencies, and I have the <code>serde</code> feature enabled in <code>rocket_contrib</code>. I've run out of ideas what to check next.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540475910, "post_id": 52991077, "comment_id": 92887473, "body": "Read the compiler warnings."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1540476124, "post_id": 52991077, "comment_id": 92887611, "body": "The duplicate applied to this question: since <code>anyRandomValue</code> is just an identifier without any other constraints, it will match with any value in <code>status</code>, ignoring the remaining patterns. You should also know about conventional <a href=\"https://rust-lang-nursery.github.io/api-guidelines/naming.html\" rel=\"nofollow noreferrer\">naming</a> in Rust: local variables should be written in snake_case rather than camelCase."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540476227, "post_id": 52991077, "comment_id": 92887676, "body": "Also note, emphasis mine: <a href=\"https://doc.rust-lang.org/book/second-edition/ch06-02-match.html\" rel=\"nofollow noreferrer\"><i>When the match expression executes, it compares the resulting value against the pattern of each arm, <b>in order</b>.</i></a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1540476321, "post_id": 52991077, "comment_id": 92887747, "body": "<i>&quot;Everything goes right if I do <code>use Status::*;</code> instead&quot;</i> \u2014 Are you sure about that? It shouldn&#39;t change anything (and didn&#39;t when I tested in the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=aa111d76ee9d806bcff740eccdcb1594\" rel=\"nofollow noreferrer\">playground</a>)."}, {"owner": {"reputation": 9, "user_id": 9400493, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Antoine Bonnin", "link": "https://stackoverflow.com/users/9400493/antoine-bonnin"}, "edited": false, "score": 1, "creation_date": 1540476665, "post_id": 52991077, "comment_id": 92887978, "body": "Ok I understand now (the rust tutorial consoles was not displaying the warnings ...) And thanks for the remark on rust naming convention"}, {"owner": {"reputation": 9, "user_id": 9400493, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Antoine Bonnin", "link": "https://stackoverflow.com/users/9400493/antoine-bonnin"}, "edited": false, "score": 1, "creation_date": 1540476794, "post_id": 52991077, "comment_id": 92888066, "body": "And I was wrong Peter, indeed, it doesn&#39;t work either. And it is logical according to the previous explainations. I modify the post"}], "owner": {"reputation": 9, "user_id": 9400493, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Antoine Bonnin", "link": "https://stackoverflow.com/users/9400493/antoine-bonnin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 35, "favorite_count": 0, "closed_date": 1540475953, "answer_count": 0, "score": 0, "last_activity_date": 1540476902, "creation_date": 1540475662, "last_edit_date": 1540476902, "question_id": 52991077, "link": "https://stackoverflow.com/questions/52991077/match-behaves-strangely-when-using-only-one-of-the-two-enum-possible-values-in-l", "closed_reason": "Duplicate", "title": "Match behaves strangely when using only one of the two enum possible values in local scope", "body": "<p>I am following the tutorial on the <a href=\"https://doc.rust-lang.org/rust-by-example/custom_types/enum/enum_use.html\" rel=\"nofollow noreferrer\">rust-lang.org</a> website. I am running <a href=\"https://doc.rust-lang.org/rust-by-example/custom_types/enum/enum_use.html\" rel=\"nofollow noreferrer\">this code from Rust By Example</a>:</p>\n\n<pre><code>enum Status {\n    Rich,\n    Poor,\n}\n\nfn main() {\n    // I am only allowing the use of Poor without manual scoping\n    use Status::Poor;\n    let status = Poor;\n\n    match status {\n        anyRandomValue =&gt; println!(\"The rich have lots of money!\"), // &lt;-- Why does match takes this path ???\n        Poor =&gt; println!(\"The poor have no money...\"),              // &lt;-- Was expecting this ...\n    }\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<blockquote>\n  <p>The rich have lots of money!</p>\n</blockquote>\n\n<p>I was expecting \"The poor have no money...\". I guess I am missing some Rust subtility.</p>\n\n<p>Why does <code>match</code> behave this way?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1540473175, "post_id": 52989901, "comment_id": 92885502, "body": "@Shepmaster Why is compiler tryes to use <code>IndexMut</code> instead of <code>Index</code>? It&#39;s ok?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1540475003, "last_edit_date": 1540475003, "creation_date": 1540474644, "answer_id": 52990677, "question_id": 52989901, "link": "https://stackoverflow.com/questions/52989901/why-can-i-not-call-borrow-mut-after-indexing-into-an-immutable-vecrefcell/52990677#52990677", "title": "Why can I not call borrow_mut() after indexing into an immutable Vec&lt;RefCell&gt;?", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rust/issues/28935\" rel=\"noreferrer\">known issue</a> where <code>IndexMut</code> is sometimes selected when <code>Index</code> should actually be used.</p>\n\n<p>Your workaround of using <code>{}</code> is reasonable, but you can also use <code>Index</code> explicitly:</p>\n\n<pre><code>use std::cell::RefCell;\n\nfn f(v: Vec&lt;RefCell&lt;u8&gt;&gt;) {\n    use std::ops::Index;\n    let _t = &amp;mut v.index(0).borrow_mut();\n}\n\nfn main() {}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/46472082/155423\">Why does a mutable borrow of a closure through DerefMut not work?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29074573/155423\">How to use `BorrowMut` contained within `RefCell`?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 103, "user_id": 549678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4a5b34e2f9801099297e55d4cb0b0589?s=128&d=identicon&r=PG", "display_name": "Alexander Irbis", "link": "https://stackoverflow.com/users/549678/alexander-irbis"}, "is_accepted": false, "score": 4, "last_activity_date": 1540475063, "creation_date": 1540475063, "answer_id": 52990839, "question_id": 52989901, "link": "https://stackoverflow.com/questions/52989901/why-can-i-not-call-borrow-mut-after-indexing-into-an-immutable-vecrefcell/52990839#52990839", "title": "Why can I not call borrow_mut() after indexing into an immutable Vec&lt;RefCell&gt;?", "body": "<p>Another workaround is to explicitly call <code>RefCell::borrow_mut(&amp;v[0])</code>.</p>\n"}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 210, "favorite_count": 2, "accepted_answer_id": 52990677, "answer_count": 2, "score": 7, "last_activity_date": 1540475063, "creation_date": 1540472357, "last_edit_date": 1540474408, "question_id": 52989901, "link": "https://stackoverflow.com/questions/52989901/why-can-i-not-call-borrow-mut-after-indexing-into-an-immutable-vecrefcell", "title": "Why can I not call borrow_mut() after indexing into an immutable Vec&lt;RefCell&gt;?", "body": "<p>Let's try to compile this code:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Foo {\n    v: Vec&lt;RefCell&lt;u8&gt;&gt;,\n}\n\nimpl Foo {\n    fn f(&amp;self, i: usize) {\n        let t = &amp;mut *self.v[i].borrow_mut();\n        //let t = &amp;mut *{self.v[i].borrow_mut()}; //compiled ok\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow field `self.v` of immutable binding as mutable\n --&gt; src/main.rs:9:23\n  |\n8 |     fn f(&amp;self, i: usize) {\n  |          ----- use `&amp;mut self` here to make mutable\n9 |         let t = &amp;mut *self.v[i].borrow_mut();\n  |                       ^^^^^^ cannot mutably borrow field of immutable binding\n</code></pre>\n\n<p>Why does this code require adding <code>&amp;mut self</code> to function signature in order to compile?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1540464318, "post_id": 52987181, "comment_id": 92879997, "body": "1. We do expect some effort to solve the problem on your own. 2. I don&#39;t think you would want to obtain a <i>slice</i>, since that one will not own the content."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1541172158, "post_id": 52987181, "comment_id": 93137160, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/32381414/converting-a-hexadecimal-string-to-a-decimal-integer\">Converting a hexadecimal string to a decimal integer</a>"}, {"owner": {"reputation": 1007, "user_id": 1632519, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/4169b372ce9a0bf75abf2282a4e9808f?s=128&d=identicon&r=PG", "display_name": "Philippe", "link": "https://stackoverflow.com/users/1632519/philippe"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1541172722, "post_id": 52987181, "comment_id": 93137511, "body": "@Stargateur, the part that overlaps with my question was edited in after I had asked my question."}], "answers": [{"tags": [], "owner": {"reputation": 1056, "user_id": 3497181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e384ad3cea4b2ccaf03271303a94f1f?s=128&d=identicon&r=PG&f=1", "display_name": "rnstlr", "link": "https://stackoverflow.com/users/3497181/rnstlr"}, "is_accepted": true, "score": 14, "last_activity_date": 1619192503, "last_edit_date": 1619192503, "creation_date": 1540465223, "answer_id": 52987677, "question_id": 52987181, "link": "https://stackoverflow.com/questions/52987181/how-can-i-convert-a-hex-string-to-a-u8-slice/52987677#52987677", "title": "How can I convert a hex string to a u8 slice?", "body": "<p>You could use the <a href=\"https://crates.io/crates/hex\" rel=\"nofollow noreferrer\">hex</a> crate for that. The <a href=\"https://docs.rs/hex/0.3.2/hex/fn.decode.html\" rel=\"nofollow noreferrer\">decode</a> function looks like it does what you want:</p>\n<pre><code>extern crate hex;\n\nfn main() {\n    let input = &quot;090A0B0C&quot;;\n\n    let decoded = hex::decode(input).expect(&quot;Decoding failed&quot;);\n\n    println!(&quot;{:?}&quot;, decoded);\n}\n</code></pre>\n<p>The above will print <code>[9, 10, 11, 12]</code>. Note that <code>decode</code> returns a heap allocated <code>Vec&lt;u8&gt;</code>, if you want to decode into an array you'd want to use the <a href=\"https://docs.rs/hex/0.4.3/hex/fn.decode_to_slice.html\" rel=\"nofollow noreferrer\"><code>decode_to_slice</code></a> function, <del>which is not yet released on crates.io</del> or the <a href=\"https://docs.rs/hex/0.3.2/hex/trait.FromHex.html\" rel=\"nofollow noreferrer\"><code>FromHex</code></a> trait:</p>\n<pre><code>extern crate hex;\n\nuse hex::FromHex;\n\nfn main() {\n    let input = &quot;090A0B0C&quot;;\n\n    let decoded = &lt;[u8; 4]&gt;::from_hex(input).expect(&quot;Decoding failed&quot;);\n\n    println!(&quot;{:?}&quot;, decoded);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1558128098, "post_id": 52992629, "comment_id": 99012012, "body": "your implementtion would be cooler if you wouldn&#39;t rely on <code>fmt</code> crate. I am compiging with <code>no_std</code> flag and I can&#39;t use any <code>std</code>-based crates"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1558206139, "post_id": 52992629, "comment_id": 99026685, "body": "@Nulik But shouldn&#39;t you still be able to use the <code>core</code> library even with <code>no_std</code>?"}, {"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1558209302, "post_id": 52992629, "comment_id": 99027347, "body": "@Seven yep! found out about it this morning."}, {"owner": {"reputation": 1229, "user_id": 548685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beb83a43b70c848e989dd5b435501f5d?s=128&d=identicon&r=PG", "display_name": "Miere", "link": "https://stackoverflow.com/users/548685/miere"}, "edited": false, "score": 0, "creation_date": 1593569831, "post_id": 52992629, "comment_id": 110825111, "body": "You solution is subtle but more versatile than <code>hex</code> one. For instance, I was trying to convert the bytes generated by <code>ed25519_dalek</code> signature into string, what wasn&#39;t possible as it was an 64-bytes long array. By receiving a reference, you shrewdly solve the issue."}, {"owner": {"reputation": 1229, "user_id": 548685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beb83a43b70c848e989dd5b435501f5d?s=128&d=identicon&r=PG", "display_name": "Miere", "link": "https://stackoverflow.com/users/548685/miere"}, "edited": false, "score": 0, "creation_date": 1593569904, "post_id": 52992629, "comment_id": 110825123, "body": "Btw, wouldn&#39;t be interesting if you put it into a crate relieving us the burden of copying and pasting your improved version whenever needed?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 1229, "user_id": 548685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beb83a43b70c848e989dd5b435501f5d?s=128&d=identicon&r=PG", "display_name": "Miere", "link": "https://stackoverflow.com/users/548685/miere"}, "edited": false, "score": 2, "creation_date": 1593607673, "post_id": 52992629, "comment_id": 110839722, "body": "@Miere The main point of this answer was to provide two simple functions that can be used if you don&#39;t want to use the <code>hex</code> crate for some reason, e.g. to reduce compile times. I don&#39;t quite know why I wrote the version on the playground. Does my implementation have any advantage over the <code>hex</code> crate? If so, I&#39;m happy to put it in a new crate."}, {"owner": {"reputation": 1229, "user_id": 548685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beb83a43b70c848e989dd5b435501f5d?s=128&d=identicon&r=PG", "display_name": "Miere", "link": "https://stackoverflow.com/users/548685/miere"}, "edited": false, "score": 0, "creation_date": 1593695601, "post_id": 52992629, "comment_id": 110874424, "body": "I&#39;ll benchmark it. Once I get the results I&#39;ll come back to you, @SvenMarnach"}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 16, "last_activity_date": 1540482577, "last_edit_date": 1540482577, "creation_date": 1540480178, "answer_id": 52992629, "question_id": 52987181, "link": "https://stackoverflow.com/questions/52987181/how-can-i-convert-a-hex-string-to-a-u8-slice/52992629#52992629", "title": "How can I convert a hex string to a u8 slice?", "body": "<p>You can also implement hex encoding and decoding yourself, in case you want to avoid the dependency on the <code>hex</code> crate:</p>\n\n<pre><code>use std::{fmt::Write, num::ParseIntError};\n\npub fn decode_hex(s: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;, ParseIntError&gt; {\n    (0..s.len())\n        .step_by(2)\n        .map(|i| u8::from_str_radix(&amp;s[i..i + 2], 16))\n        .collect()\n}\n\npub fn encode_hex(bytes: &amp;[u8]) -&gt; String {\n    let mut s = String::with_capacity(bytes.len() * 2);\n    for &amp;b in bytes {\n        write!(&amp;mut s, \"{:02x}\", b);\n    }\n    s\n}\n</code></pre>\n\n<p>Note that the <code>decode_hex()</code> function panics if the string length is odd. I've made a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=e241493d100ecaadac3c99f37d0f766f\" rel=\"noreferrer\">version with better error handling and an optimised encoder</a> available on the playground.</p>\n"}], "owner": {"reputation": 1007, "user_id": 1632519, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/4169b372ce9a0bf75abf2282a4e9808f?s=128&d=identicon&r=PG", "display_name": "Philippe", "link": "https://stackoverflow.com/users/1632519/philippe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8814, "favorite_count": 5, "accepted_answer_id": 52987677, "answer_count": 2, "score": 8, "last_activity_date": 1619192503, "creation_date": 1540463591, "last_edit_date": 1540480317, "question_id": 52987181, "link": "https://stackoverflow.com/questions/52987181/how-can-i-convert-a-hex-string-to-a-u8-slice", "title": "How can I convert a hex string to a u8 slice?", "body": "<p>I have a string that looks like this <code>\"090A0B0C\"</code> and I would like to convert it to a slice that looks something like this <code>[9, 10, 11, 12]</code>. How would I best go about doing that?</p>\n\n<p>I don't want to convert a single hex char tuple to a single integer value. I want to convert a string consisting of multiple hex char tuples to a slice of multiple integer values.</p>\n"}]