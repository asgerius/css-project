[{"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1573669635, "last_edit_date": 1592644375, "creation_date": 1509557473, "answer_id": 47060530, "question_id": 47060266, "link": "https://stackoverflow.com/questions/47060266/error-while-trying-to-borrow-2-fields-from-a-struct-wrapped-in-refcell/47060530#47060530", "title": "Error while trying to borrow 2 fields from a struct wrapped in RefCell", "body": "<p>You can manually invoke <code>DerefMut</code> and then save the resulting reference:</p>\n<pre><code>fn write(s: RefCell&lt;S&gt;) {\n    let mut mut_s = s.borrow_mut();\n    let mut tmp = &amp;mut *mut_s; // Here\n    let str = &amp;tmp.data.string;\n    tmp.writer.write(str.as_bytes());\n}\n</code></pre>\n<p>Or in one line:</p>\n<pre><code>fn write(s: RefCell&lt;S&gt;) {\n    let mut_s = &amp;mut *s.borrow_mut(); // Here\n    let str = &amp;mut_s.data.string;\n    mut_s.writer.write(str.as_bytes());\n}\n</code></pre>\n<hr />\n<p>The problem is that <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.borrow_mut\" rel=\"noreferrer\"><code>borrow_mut</code></a> doesn't return your struct directly \u2014 it returns a <a href=\"https://doc.rust-lang.org/std/cell/struct.RefMut.html\" rel=\"noreferrer\"><code>RefMut</code></a>. Normally, this is transparent as this struct implements <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> and <a href=\"https://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"noreferrer\"><code>DerefMut</code></a>, so any methods called on it are passed to the underlying type. The pseudo-expanded code looks something like this:</p>\n<pre><code>use std::cell::RefMut;\nuse std::ops::{Deref, DerefMut};\n\nfn write(s: RefCell&lt;S&gt;) {\n    let mut mut_s: RefMut&lt;S&gt; = s.borrow_mut();\n    let str = &amp;Deref::deref(&amp;mut_s).data.string;\n    DerefMut::deref_mut(&amp;mut mut_s).writer.write(str.as_bytes());\n}\n</code></pre>\n<p>Rust doesn't track field-level borrows across function calls (even for <code>Deref::deref</code> or <code>DerefMut::deref_mut</code>). This causes your error, as the <code>deref_mut</code> method would need to be called during the outstanding borrow from the previous <code>Deref::deref</code>.</p>\n<p>The expanded version with the explicit borrow looks like this, with a single call to <code>Deref::deref_mut</code>:</p>\n<pre><code>use std::cell::RefMut;\nuse std::ops::DerefMut;\n\nfn write(s: RefCell&lt;S&gt;) {\n    let mut mut_s: RefMut&lt;S&gt; = s.borrow_mut();\n    let tmp: &amp;mut S = DerefMut::deref_mut(&amp;mut mut_s);\n    let str = &amp;tmp.data.string;\n    tmp.writer.write(str.as_bytes());\n}\n</code></pre>\n<p>The compiler can then track that the two borrows from that temporary value are disjoint.</p>\n<hr />\n<p>Note that this problem <strong>isn't unique</strong> to <code>RefCell</code>! Any type that implements <a href=\"https://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"noreferrer\"><code>DerefMut</code></a> can experience the same problem. Here's some from the standard library:</p>\n<ul>\n<li><code>Box</code></li>\n<li><code>MutexGuard</code> (from <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a>)</li>\n<li><code>PeekMut</code> (from <a href=\"https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html\" rel=\"noreferrer\"><code>BinaryHeap</code></a>)</li>\n<li><code>RwLockWriteGuard</code> (from <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"noreferrer\"><code>RwLock</code></a>)</li>\n<li><code>String</code></li>\n<li><code>Vec</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/pin/struct.Pin.html\" rel=\"noreferrer\"><code>Pin</code></a></li>\n</ul>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 352, "favorite_count": 1, "accepted_answer_id": 47060530, "answer_count": 1, "score": 8, "last_activity_date": 1573669635, "creation_date": 1509556530, "last_edit_date": 1510841252, "question_id": 47060266, "link": "https://stackoverflow.com/questions/47060266/error-while-trying-to-borrow-2-fields-from-a-struct-wrapped-in-refcell", "title": "Error while trying to borrow 2 fields from a struct wrapped in RefCell", "body": "<p>I have a struct which contains both data and a writer which will eventually be used to write the data. The struct is wrapped in a <code>RefCell</code>. Here's a small reproduction:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::io::Write;\n\nstruct Data {\n    string: String,\n}\n\nstruct S {\n    data: Data,\n    writer: Vec&lt;u8&gt;,\n}\n\nfn write(s: RefCell&lt;S&gt;) {\n    let mut mut_s = s.borrow_mut();\n    let str = &amp;mut_s.data.string;\n    mut_s.writer.write(str.as_bytes());\n}\n</code></pre>\n\n<p>The compiler is angry:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `mut_s` as mutable because it is also borrowed as immutable\n  --&gt; src\\main.rs:16:5\n   |\n15 |     let str = &amp;mut_s.data.string;\n   |                ----- immutable borrow occurs here\n16 |     mut_s.writer.write(str.as_bytes());\n   |     ^^^^^ mutable borrow occurs here\n17 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>Is there a different API I should use? </p>\n"}, {"tags": ["java", "rust", "java-native-interface"], "answers": [{"tags": [], "owner": {"reputation": 1302, "user_id": 2491528, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/723f1b1cb73fa871f360bdea9bd17a8a?s=128&d=identicon&r=PG", "display_name": "Federico", "link": "https://stackoverflow.com/users/2491528/federico"}, "is_accepted": false, "score": 2, "last_activity_date": 1509552391, "creation_date": 1509552391, "answer_id": 47059029, "question_id": 47057700, "link": "https://stackoverflow.com/questions/47057700/java-jni-crashes-on-exit-when-called-from-rust/47059029#47059029", "title": "Java JNI crashes on exit when called from Rust", "body": "<p>The Java method does not return an object, so <code>jvm.call_static_void_method(...)</code> must be used instead of <code>jvm.call_static_object_method(...)</code>.</p>\n\n<p>Correct code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Call the method\njvm.call_static_void_method(\n    &amp;main_class,\n    &amp;greetings_method,\n    args.as_ptr()\n);\n</code></pre>\n\n<p>Then the programs runs fine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello World!\nDone\n</code></pre>\n"}], "owner": {"reputation": 1302, "user_id": 2491528, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/723f1b1cb73fa871f360bdea9bd17a8a?s=128&d=identicon&r=PG", "display_name": "Federico", "link": "https://stackoverflow.com/users/2491528/federico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 164, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1509552391, "creation_date": 1509548206, "question_id": 47057700, "link": "https://stackoverflow.com/questions/47057700/java-jni-crashes-on-exit-when-called-from-rust", "title": "Java JNI crashes on exit when called from Rust", "body": "<p>I want to launch a JVM and call a static Java method from Rust. Initially everything works fine, I see the expected output in the console. However, before the Java method ends, I get a segmentation fault.</p>\n\n<p>This is the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello World!\nSegmentation fault (core dumped)\n</code></pre>\n\n<p>Here is the Java class (packaged in a fat Jar):</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public class HelloWorld {\n    public static void greetings() {\n        System.out.println(\"Hello World!\");\n    }\n}\n</code></pre>\n\n<p>This is the Rust code that I execute:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate rucaja;\n\nuse rucaja::{Jvm, jvalue};\n\nfn main() {\n\n    // The class path must contain the fat JAR.\n    let class_path = \"-Djava.class.path=./java/target/hello-0.1.0.jar\";\n\n    let jvm_options = [class_path];\n\n    unsafe {\n        // Instantiate the embedded JVM.\n        let jvm = Jvm::new(&amp;jvm_options);\n\n        // Resolve the Java wrapper class from the fat JAR.\n        let main_class = jvm.get_class(\"HelloWorld\").expect(\"Could not find Java class\");\n\n        // Resolve Java methods in that wrapper class.\n        let greetings_method = jvm.get_static_method(\n            &amp;main_class,\n            \"greetings\",\n            \"()V\"\n        ).expect(\"Could not find Java method\");\n\n        // Prepare (no) arguments\n        let args: Vec&lt;jvalue&gt; = vec![\n        ];\n\n        // Call the method\n        jvm.call_static_object_method(\n            &amp;main_class,\n            &amp;greetings_method,\n            args.as_ptr()\n        );\n    }\n\n    println!(\"Done\");\n}\n</code></pre>\n\n<p>I tried running it with <code>gdb</code>, but the stack looks broken:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Program received signal SIGSEGV, Segmentation fault.\n0x00007fffe575d2b4 in ?? ()\n(gdb) bt\n#0  0x00007fffe575d2b4 in ?? ()\n#1  0x0000000000000246 in ?? ()\n#2  0x00007fffe575d160 in ?? ()\n#3  0x00007fffffffd530 in ?? ()\n#4  0x00007fffffffd4e0 in ?? ()\n#5  0x00007ffff790a6ad in ?? () from /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so\nBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n</code></pre>\n\n<p>What do you think is the cause of the segmentation fault?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "edited": false, "score": 0, "creation_date": 1509543204, "post_id": 47054695, "comment_id": 81059134, "body": "Do you mean I need to write 3 structs? <code>Data</code>, <code>DataIntoIterator</code> and <code>DataIterator</code>? I&#39;m not sure that the <code>IntoIterator</code> implementation could return a reference here since the trait accepts an owned version of <code>Data</code>"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "edited": false, "score": 0, "creation_date": 1509543916, "post_id": 47054695, "comment_id": 81059664, "body": "No, just <code>Data</code> and <code>DataIterator&lt;&#39;a&gt;</code>; then <code>impl&lt;&#39;a&gt; IntoIterator for &amp;&#39;a Data { type IntoIter = DataIterator&lt;&#39;a&gt;; ... }</code>. Use it like <code>let d = Data::new(...); for i in &amp;d { ... }</code>"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 1, "last_activity_date": 1509538783, "creation_date": 1509538783, "answer_id": 47054695, "question_id": 47054316, "link": "https://stackoverflow.com/questions/47054316/compilation-error-while-trying-to-implement-an-iterator-that-borrows-some-data-a/47054695#47054695", "title": "Compilation error while trying to implement an iterator that borrows some data and owns other data", "body": "<p>The returned value has type <code>Option&lt;&amp;'a str&gt;</code>, but <code>'a</code> doesn't keep the <code>MyIterator&lt;'a&gt;</code> alive, so it could go out of scope, and with it the contained <code>s2: String</code>.  So <code>'a</code> simply doesn't keep <code>s2</code> alive.  (It only keeps <code>s1</code> alive, which would be easier to see if you'd have written <code>fn new(s1: &amp;'a str) -&gt; MyIterator&lt;'a&gt;</code>)</p>\n\n<p>Furthermore the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> trait is designed in a way you can <strong>never</strong> return a reference to something stored in the <code>Iterator</code> itself in the <code>next</code> function.</p>\n\n<p>Instead you could create a type storing the value and implement <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> for a reference to it (with a separate iterator type containing a reference to the storage object).</p>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "closed_date": 1509542255, "accepted_answer_id": 47054695, "answer_count": 1, "score": 0, "last_activity_date": 1509542271, "creation_date": 1509537625, "last_edit_date": 1509542226, "question_id": 47054316, "link": "https://stackoverflow.com/questions/47054316/compilation-error-while-trying-to-implement-an-iterator-that-borrows-some-data-a", "closed_reason": "Duplicate", "title": "Compilation error while trying to implement an iterator that borrows some data and owns other data", "body": "<p>I'm trying to implement an iterator :</p>\n\n<pre><code>struct MyIterator&lt;'a&gt; {\n    s1: &amp;'a str,\n    s2: String,\n\n    idx: usize,\n}\n\nimpl&lt;'a&gt; MyIterator&lt;'a&gt; {\n    fn new(s1: &amp;str) -&gt; MyIterator {\n        MyIterator {\n            s1: s1,\n            s2: \"Rust\".to_string(),\n\n            idx: 0,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for MyIterator&lt;'a&gt; {\n    type Item = &amp;'a str;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.idx += 1;\n\n        match self.idx {\n            1 =&gt; Some(self.s1),\n            2 =&gt; Some(&amp;self.s2),\n            _ =&gt; None,\n        }\n    }\n}\n</code></pre>\n\n<p>And I'm getting this very detailed error message but I can't figure how to fix the code:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --&gt; src\\main.rs:39:23\n   |\n39 |             2 =&gt; Some(&amp;self.s2),\n   |                       ^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 34:5...\n  --&gt; src\\main.rs:34:5\n   |\n34 | /     fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n35 | |         self.idx + 1;\n36 | |\n37 | |         match self.idx {\n...  |\n41 | |         }\n42 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src\\main.rs:39:23\n   |\n39 |             2 =&gt; Some(&amp;self.s2),\n   |                       ^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 31:1...\n  --&gt; src\\main.rs:31:1\n   |\n31 | / impl&lt;'a&gt; Iterator for MyIterator&lt;'a&gt; {\n32 | |     type Item = &amp;'a str;\n33 | |\n34 | |     fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n...  |\n42 | |     }\n43 | | }\n   | |_^\nnote: ...so that types are compatible (expected std::iter::Iterator, found std::iter::Iterator)\n  --&gt; src\\main.rs:34:46\n   |\n34 |       fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n   |  ______________________________________________^\n35 | |         self.idx + 1;\n36 | |\n37 | |         match self.idx {\n...  |\n41 | |         }\n42 | |     }\n</code></pre>\n\n<p>Why isn't <code>s2</code> lifetime simply <code>'a</code>?</p>\n"}, {"tags": ["list", "rust", "stack-overflow"], "answers": [{"comments": [{"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509532532, "post_id": 47052707, "comment_id": 81052605, "body": "but isn&#39;t i am mutating head to nil with <code>let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) </code> in while loop ?"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509532557, "post_id": 47052707, "comment_id": 81052618, "body": "Also, data structure in my code is different from that of tutorial. hence, some changes."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 1, "creation_date": 1509532940, "post_id": 47052707, "comment_id": 81052831, "body": "even if you set head to <code>Nil</code>, it will be dropped again"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509536549, "post_id": 47052707, "comment_id": 81054879, "body": "Can you give some documentation around this ?  i want to understand this."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509536678, "post_id": 47052707, "comment_id": 81054951, "body": "I think this answer is a good start, but this can&#39;t be the only mistake, otherwise inserting <code>if let List::Nil = *self { return; }</code> at the top of <code>drop</code> would fix it, right (see <a href=\"https://play.rust-lang.org/?gist=c14762118e88c9e9230610b356a7dc65&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>)?"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509537534, "post_id": 47052707, "comment_id": 81055482, "body": "@Stefan its not he nil case that is the problem. I think problem is to write drop for this list without creating another reference to self."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509537956, "post_id": 47052707, "comment_id": 81055710, "body": "@Stefan, aochagavia: It isn&#39;t just <code>head</code> that is the problem, it&#39;s also the temporary value returned by the <code>mem::replace</code> in the <code>while</code> loop condition."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509539660, "post_id": 47052707, "comment_id": 81056738, "body": "@aochagavia i tried another version. but it seems that its not compiling for me. Can you suggest something ?"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 2, "last_activity_date": 1509533944, "last_edit_date": 1509533944, "creation_date": 1509531964, "answer_id": 47052707, "question_id": 47051923, "link": "https://stackoverflow.com/questions/47051923/why-does-my-iterative-implementation-of-drop-for-a-linked-list-still-cause-a-sta/47052707#47052707", "title": "Why does my iterative implementation of drop for a linked list still cause a stack overflow?", "body": "<p>You are getting a stack overflow because your drop function is infinitely recursive.</p>\n\n<p>The code below:</p>\n\n<pre><code>let mut head = mem::replace(self, List::Nil);\n</code></pre>\n\n<p>Stores a <code>List</code> object in <code>head</code>, which will be dropped at the end of the scope. This means that, while you are dropping, you create a new list which also needs to be dropped. Repeat this enough times and you get a stack overflow.</p>\n\n<p><strong>Note</strong>: in the tutorial you linked, they use <code>let mut cur_link = mem::replace(&amp;mut self.head, Link::Empty)</code> to avoid recursion.</p>\n"}, {"comments": [{"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509543557, "post_id": 47055499, "comment_id": 81059376, "body": "sorry, but this was discussed earlier in comments of first question. Its not working: <a href=\"https://play.rust-lang.org/?gist=3f3105c83137c13fef0b9829515e98ba&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>  Or am i doing something wrong."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509544014, "post_id": 47055499, "comment_id": 81059732, "body": "i meant.. comments of <i>aochagavia</i> answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1509583087, "last_edit_date": 1509583087, "creation_date": 1509541308, "answer_id": 47055499, "question_id": 47051923, "link": "https://stackoverflow.com/questions/47051923/why-does-my-iterative-implementation-of-drop-for-a-linked-list-still-cause-a-sta/47055499#47055499", "title": "Why does my iterative implementation of drop for a linked list still cause a stack overflow?", "body": "<p>Whenever you write recursive (or iterative) code, <strong>you need to have a stopping condition</strong>. Your code doesn't, so it loops forever. </p>\n\n<hr>\n\n<p>Producing a <a href=\"/help/mcve\">MCVE</a> of your problem is always a good start:</p>\n\n<pre><code>use std::mem;\n\n#[derive(Debug)]\npub enum List {\n    Nil,\n    More(Box&lt;List&gt;),\n}\n\nimpl Drop for List {\n    fn drop(&amp;mut self) {\n        let mut head = mem::replace(self, List::Nil);\n\n        while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n            head = mem::replace(node, List::Nil);\n        }\n    }\n}\n\n#[test]\nfn basics() {\n    List::Nil;\n}\n</code></pre>\n\n<p>Then annotate the code to see where it's recurring:</p>\n\n<pre><code>fn drop(&amp;mut self) {\n    eprintln!(\"1\");\n    let mut head = mem::replace(self, List::Nil);\n    eprintln!(\"2\");\n    while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n        eprintln!(\"3\");\n        head = mem::replace(node, List::Nil);\n        eprintln!(\"4\");\n    }\n    eprintln!(\"5\");\n}\n</code></pre>\n\n<p>This prints out</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1\n2\n1\n2\n</code></pre>\n\n<p>so delete everything after that:</p>\n\n<pre><code>fn drop(&amp;mut self) {\n    eprintln!(\"1\");\n    let mut head = mem::replace(self, List::Nil);\n    eprintln!(\"2\");\n}\n</code></pre>\n\n<p>Why does this cause infinite recursion? You've defined it so that in order to drop <code>List</code>, you have to create a new <code>List</code>, which in turn needs to be dropped, which creates a new <code>List</code>, which...</p>\n\n<p>Add a stopping condition:</p>\n\n<pre><code>fn drop(&amp;mut self) {\n    if let List::Nil = *self { return }\n\n    let mut head = mem::replace(self, List::Nil);\n\n    while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n        head = mem::replace(node, List::Nil);\n    }\n}\n</code></pre>\n\n<p>No more infinite recursion.</p>\n\n<p>Then expand back out to the original and try again. It works for this test case, but not for <code>List::More(Box::new(List::Nil))</code> so we shrink it back:</p>\n\n<pre><code>fn drop(&amp;mut self) {\n    eprintln!(\"1\");\n    if let List::Nil = *self { return }\n    eprintln!(\"2\");\n    let mut head = mem::replace(&amp;mut *self, List::Nil);\n    eprintln!(\"3\");\n    while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n        eprintln!(\"4\");\n        head = mem::replace(node, List::Nil);\n        eprintln!(\"5\");\n    }\n    eprintln!(\"6\");\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>1\n2\n3\n4\n1\n5\n1\n2\n3\n4\n1\n5\n</code></pre>\n\n<p>The problem now is that when we re-assign <code>head</code>, the value we are overwriting needs to be dropped, which triggers the recursion again.</p>\n\n<p>Fixing this is <em>complicated</em>. Like, surprisingly so. You ready for this?</p>\n\n<pre><code>impl Drop for List {\n    fn drop(&amp;mut self) {\n        match *self {\n            List::Nil =&gt; return,\n            List::More(ref more) =&gt; {\n                if let List::Nil = **more {\n                    return;\n                }\n            }\n        }\n\n        let mut head = mem::replace(self, List::Nil);\n\n        while let List::More(ref mut next) = {head} {\n            head = mem::replace(next, List::Nil);\n        }\n    }\n}\n</code></pre>\n\n<p>This now has <strong>two</strong> stopping conditions: </p>\n\n<ol>\n<li><code>Nil</code></li>\n<li><code>More(Nil)</code></li>\n</ol>\n\n<p>In every other case, we iteratively convert the <code>More(x)</code> into a <code>More(Nil)</code>, which is handled by the stopping condition. That means that we only have a single depth of recursion: <em>for each value</em> that is dropped when the previous value of <code>head</code> goes out of scope when it is replaced.</p>\n\n<hr>\n\n<p>For your original code:</p>\n\n<pre><code>impl Drop for List {\n    fn drop(&amp;mut self) {\n        match *self {\n            List::Nil =&gt; return,\n            List::More(ref more) =&gt; {\n                if let List::Nil = more.next {\n                    return;\n                }\n            }\n        }\n\n        let mut head = mem::replace(self, List::Nil);\n\n        while let List::More(ref mut node) = {head} {\n            head = mem::replace(&amp;mut node.next, List::Nil);\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>In the original tutorial you linked, this isn't a problem because the definition of <code>List::drop</code> doesn't modify <code>self</code> at all so it's not self-recursive:</p>\n\n<pre><code>impl Drop for List {\n    fn drop(&amp;mut self) {\n        let mut cur_link = mem::replace(&amp;mut self.head, Link::Empty);\n        while let Link::More(mut boxed_node) = cur_link {\n            cur_link = mem::replace(&amp;mut boxed_node.next, Link::Empty);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 225, "favorite_count": 0, "accepted_answer_id": 47055499, "answer_count": 2, "score": 3, "last_activity_date": 1509583087, "creation_date": 1509529083, "last_edit_date": 1509539572, "question_id": 47051923, "link": "https://stackoverflow.com/questions/47051923/why-does-my-iterative-implementation-of-drop-for-a-linked-list-still-cause-a-sta", "title": "Why does my iterative implementation of drop for a linked list still cause a stack overflow?", "body": "<p>I am following <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/first-final.html\" rel=\"nofollow noreferrer\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a> to write my first program in Rust. I <strong>changed</strong> the program to:</p>\n\n<pre><code>use std::mem;\n\n#[derive(Debug)]\npub enum List {\n    Nil,\n    More(Box&lt;Node&gt;),\n}\n\n#[derive(Debug)]\npub struct Node {\n    val: i32,\n    next: List\n}\n\nimpl List {\n    pub fn new() -&gt; Self {\n        List::Nil\n    }\n\n    pub fn insert(&amp;mut self, v : i32) {\n        let old_head = mem::replace(&amp;mut *self, List::Nil);\n        let new_head = List::More(Box::new(Node { val : v, next: old_head}));\n        *self = new_head\n    }\n\n    pub fn remove(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        match mem::replace(&amp;mut *self, List::Nil) {\n            List::Nil =&gt; {\n                None\n            },\n            List::More(ref mut boxed_node) =&gt; {\n                let result = Some(boxed_node.val);\n                *self = mem::replace(&amp;mut boxed_node.next, List::Nil);\n                result\n            }\n        }\n    }\n}\n\nimpl Drop for List {\n    fn drop(&amp;mut self) {\n        let mut head = mem::replace(&amp;mut *self, List::Nil);\n\n        while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n            head = mem::replace(&amp;mut node.next, List::Nil);\n        }\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::List;\n\n    #[test]\n    fn basics() {\n        let mut list = List::new();\n        list.insert(7);\n        assert_eq!(Some(7), list.remove());\n        assert_eq!(None, list.remove());\n\n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n\n        assert_eq!(Some(3), list.remove());\n        assert_eq!(Some(2), list.remove());\n        assert_eq!(Some(1), list.remove());\n        assert_eq!(None, list.remove());\n    }\n\n    #[test]\n    fn drop_long_list() {\n        let mut list = List::new();\n        for i in 1..100000 {\n            list.insert(i);\n        }\n    }\n}\n</code></pre>\n\n<p>Both of my tests are failing with a stack overflow in <code>drop</code>. Is it because of <code>*self</code> in RHS?</p>\n\n<p>I don't know what is happening with <code>let mut head = mem::replace(&amp;mut *self, List::Nil);</code>.</p>\n\n<p>My understanding is:</p>\n\n<ol>\n<li>It sets <code>List::Nil</code> in <code>self</code>.</li>\n<li>Puts original value of <code>self</code> in <code>head</code>.</li>\n</ol>\n\n<p>Is <code>*self</code> doing something more?</p>\n\n<p>I also tried this version of <code>drop</code>:</p>\n\n<pre><code>impl Drop for List {\n    fn drop(&amp;mut self) {\n        let mut head = mem::replace(self, List::Nil);\n\n        while let List::More(ref mut node) = mem::replace(&amp;mut head, List::Nil) {\n            head = mem::replace(&amp;mut node.next, List::Nil);\n        }\n    }\n}\n</code></pre>\n\n<p>Another try:</p>\n\n<pre><code>impl Drop for List {\n    fn drop(&amp;mut self) {\n        while true {\n            match self {\n                &amp;mut List::Nil =&gt; break,\n                &amp;mut List::More(ref mut node) =&gt; {\n                    *self = mem::replace(&amp;mut node.next, List::Nil)\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `*self` because it is borrowed\n  --&gt; src\\list.rs:48:21\n   |\n47 |                 &amp;mut List::More(ref mut node) =&gt; {\n   |                                 ------------ borrow of `*self` occurs here\n48 |                     *self = mem::replace(&amp;mut node.next, List::Nil)\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `*self` occurs here\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "is_accepted": false, "score": 1, "last_activity_date": 1509536774, "creation_date": 1509536774, "answer_id": 47054083, "question_id": 47049658, "link": "https://stackoverflow.com/questions/47049658/how-to-generalise-access-to-struct-fields/47054083#47054083", "title": "How to generalise access to struct fields?", "body": "<p>Instead of writing one function for each field, receive a pair of <code>Fn</code>s as arguments:</p>\n\n<ul>\n<li><p><code>fn(&amp;S) -&gt; Option&lt;Data&gt;</code>, which can be used to replace this condition</p>\n\n<pre><code>if e.get().v1 == new_variant { /* ... */ }\n</code></pre>\n\n<p>with this</p>\n\n<pre><code>if getter(e.get()) == new_variant { /* ... */ }\n</code></pre></li>\n<li><p><code>fn(&amp;mut S, Option&lt;Data&gt;) -&gt; ()</code>, which replaces </p>\n\n<pre><code>existing.v2 = new_variant;\n</code></pre>\n\n<p>with</p>\n\n<pre><code>setter(&amp;mut existing, new_variant);\n</code></pre></li>\n</ul>\n\n<p>Then on the call site you pass a couple lambdas like this</p>\n\n<ul>\n<li>Getter: <code>|d| d.v1</code></li>\n<li>Setter: <code>|s, d| s.v2 = d</code></li>\n</ul>\n\n<p>Or vice-versa for the other function.</p>\n\n<p>And if you want to keep the <code>update_v1</code> and <code>update_v2</code> function names, just write those as wrappers to this new generalized function that automatically pass the proper lambdas.</p>\n"}, {"comments": [{"owner": {"reputation": 1, "user_id": 492368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5e15e2b2909deb2651ad1006273283a4?s=128&d=identicon&r=PG", "display_name": "Sergey Yelin", "link": "https://stackoverflow.com/users/492368/sergey-yelin"}, "edited": false, "score": 0, "creation_date": 1509550192, "post_id": 47054107, "comment_id": 81063902, "body": "It seems a bit complicated for me, but anyway thanks for you answer!"}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 0, "last_activity_date": 1509536855, "creation_date": 1509536855, "answer_id": 47054107, "question_id": 47049658, "link": "https://stackoverflow.com/questions/47049658/how-to-generalise-access-to-struct-fields/47054107#47054107", "title": "How to generalise access to struct fields?", "body": "<p>You can create a trait to facilitate different ways of accessing the structure.</p>\n\n<pre><code>trait SAccessor {\n    type RV;\n    fn new(Data) -&gt; S;\n    fn v2(&amp;S) -&gt; &amp;Self::RV;\n    fn v1_mut(&amp;mut S) -&gt; &amp;mut Self::RV;\n}\n\nstruct DirectSAccessor;\n\nimpl SAccessor for DirectSAccessor {\n    type RV = Option&lt;Data&gt;;\n    fn new(data: Data) -&gt; S {\n        S {\n            v1: Some(data),\n            v2: None\n        }\n    }\n    fn v2(s: &amp;S) -&gt; &amp;Self::RV {\n        &amp;s.v2\n    }\n    fn v1_mut(s: &amp;mut S) -&gt; &amp;mut Self::RV {\n        &amp;mut s.v1\n    }\n}\n\nfn update&lt;A&gt;(diffs: &amp;mut HashMap&lt;u64, S&gt;, key: u64, data: Data) \nwhere A: SAccessor&lt;RV=Option&lt;Data&gt;&gt;\n{\n    match diffs.entry(key) {\n        Entry::Vacant(v) =&gt; {\n            let variant = A::new(data);\n            v.insert(variant);\n        },\n        Entry::Occupied(e) =&gt; {\n            let new_variant = Some(data);\n            if A::v2(e.get()) == &amp;new_variant {\n                e.remove();\n            } else {\n                let existing = e.into_mut();\n                *A::v1_mut(existing) = new_variant;\n            }\n        }\n    }\n}\n\n// ...\n\n// update::&lt;DirectSAccessor&gt;( ... );\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=04e91fca048f22627654579fa78a66a2&amp;version=stable\" rel=\"nofollow noreferrer\">Full code</a></p>\n"}], "owner": {"reputation": 1, "user_id": 492368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5e15e2b2909deb2651ad1006273283a4?s=128&d=identicon&r=PG", "display_name": "Sergey Yelin", "link": "https://stackoverflow.com/users/492368/sergey-yelin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 240, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1509536855, "creation_date": 1509519193, "question_id": 47049658, "link": "https://stackoverflow.com/questions/47049658/how-to-generalise-access-to-struct-fields", "title": "How to generalise access to struct fields?", "body": "<p>I try to find differences from two streams (represented by iterators) for later analysis, the code below works just fine, but looks a little bit ugly and error prone (copy-paste!) in updating values in <code>update_v?</code> functions. Is there any ways to generalise it assuming that source is matter?</p>\n\n<pre><code>struct Data {};\n\nstruct S {\n    v1: Option&lt;Data&gt;,\n    v2: Option&lt;Data&gt;\n}\n\n...\n\nfn update_v1(diffs: &amp;mut HashMap&lt;u64, Data&gt;, key: u64, data: Data) {\n    match diffs.entry(key) {\n        Entry::Vacant(v) =&gt; {\n            let variant = S {\n                v1: Some(data),\n                v2: None\n            };\n            v.insert(variant);\n        },\n        Entry::Occupied(e) =&gt; {\n            let new_variant = Some(data);\n            if e.get().v2 == new_variant {\n                e.remove();\n            } else {\n                let existing = e.into_mut();\n                existing.v1 = new_variant;\n            }\n        }\n    }\n}\n\nfn update_v2(diffs: &amp;mut HashMap&lt;u64, Data&gt;, key: u64, data: Data) {\n    match diffs.entry(key) {\n        Entry::Vacant(v) =&gt; {\n            let variant = S {\n                v2: Some(data),\n                v1: None\n            };\n            v.insert(variant);\n        },\n        Entry::Occupied(e) =&gt; {\n            let new_variant = Some(data);\n            if e.get().v1 == new_variant {\n                e.remove();\n            } else {\n                let existing = e.into_mut();\n                existing.v2 = new_variant;\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["csv", "rust", "gzip", "gzipfile"], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 7, "last_activity_date": 1509530209, "creation_date": 1509530209, "answer_id": 47052205, "question_id": 47048037, "link": "https://stackoverflow.com/questions/47048037/how-to-iterate-stream-a-gzip-file-containing-a-single-csv/47052205#47052205", "title": "How to iterate / stream a gzip file (containing a single csv)?", "body": "<p>For stream io operations rust has the <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noreferrer\"><code>Read</code></a> and <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"noreferrer\"><code>Write</code></a> traits.  To iterate over input by lines you usually want the <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html\" rel=\"noreferrer\"><code>BufRead</code></a> trait, which you can always get by wrapping a <code>Read</code> implementation in <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html#method.new\" rel=\"noreferrer\"><code>BufReader::new</code></a>.</p>\n\n<p><code>flate2</code> already operates with these traits; <code>GzDecoder</code> implements <code>Read</code>, and <code>GzDecoder::new</code> takes anything that implements <code>Read</code>.</p>\n\n<p>Example decoding stdin (doesn't work well on <a href=\"https://play.rust-lang.org/?gist=9f7a129a0416dacdd59327ce8e133b2a&amp;version=stable\" rel=\"noreferrer\">playground</a> of course):</p>\n\n<pre><code>extern crate flate2;\n\nuse std::io;\nuse std::io::prelude::*;\nuse flate2::read::GzDecoder;\n\nfn main() {\n    let stdin = io::stdin();\n    let stdin = stdin.lock(); // or just open any normal file\n\n    let d = GzDecoder::new(stdin).expect(\"couldn't decode gzip stream\");\n\n    for line in io::BufReader::new(d).lines() {\n        println!(\"{}\", line.unwrap());\n    }\n}\n</code></pre>\n\n<p>You can then decode your lines with your usual (\"without gzip\") logic; perhaps make it generic by taking any input implementing <code>BufRead</code>.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2097, "favorite_count": 2, "accepted_answer_id": 47052205, "answer_count": 1, "score": 3, "last_activity_date": 1509530209, "creation_date": 1509508950, "question_id": 47048037, "link": "https://stackoverflow.com/questions/47048037/how-to-iterate-stream-a-gzip-file-containing-a-single-csv", "title": "How to iterate / stream a gzip file (containing a single csv)?", "body": "<p>How to iterate over a gziped file which contains a single text file (csv)?</p>\n\n<p>Searching crates.io I found <a href=\"https://crates.io/crates/flate2\" rel=\"nofollow noreferrer\">flate2</a> which has the following code example for decompression:</p>\n\n<pre><code>extern crate flate2;\n\nuse std::io::prelude::*;\nuse flate2::read::GzDecoder;\n\nfn main() {\n    let mut d = GzDecoder::new(\"...\".as_bytes()).unwrap();\n    let mut s = String::new();\n    d.read_to_string(&amp;mut s).unwrap();\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>How to stream a gzip csv file?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509483836, "post_id": 47044453, "comment_id": 81036340, "body": "Can you clarify what you mean by &quot;to force the &quot;early&quot; drop&quot;?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509484426, "post_id": 47044453, "comment_id": 81036564, "body": "@Shepmaster Well, with <code>let</code> the drop happens as expected, but compared to the other constructions <code>Foo</code> is dropped &quot;early&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1607993913, "last_edit_date": 1607993913, "creation_date": 1509484103, "answer_id": 47044566, "question_id": 47044453, "link": "https://stackoverflow.com/questions/47044453/what-is-the-scope-of-unnamed-values/47044566#47044566", "title": "What is the scope of unnamed values?", "body": "<p>From <a href=\"https://doc.rust-lang.org/reference/destructors.html#temporary-scopes\" rel=\"nofollow noreferrer\">the reference</a>:</p>\n<blockquote>\n<p>When using an rvalue in most lvalue contexts, a temporary unnamed\nlvalue is created and used instead, if not promoted to <code>'static</code>.\nPromotion of an rvalue expression to a <code>'static</code> slot occurs when the\nexpression could be written in a constant, borrowed, and dereferencing\nthat borrow where the expression was the originally written, without\nchanging the runtime behavior. That is, the promoted expression can be\nevaluated at compile-time and the resulting value does not contain\ninterior mutability or destructors (these properties are determined\nbased on the value where possible, e.g. <code>&amp;None</code> always has the type\n<code>&amp;'static Option&lt;_&gt;</code>, as it contains nothing disallowed). Otherwise, the\nlifetime of temporary values is typically</p>\n<ul>\n<li><p>the innermost enclosing statement; the tail expression of a block is\nconsidered part of the statement that encloses the block, or</p>\n</li>\n<li><p>the\ncondition expression or the loop conditional expression if the\ntemporary is created in the condition expression of an if or an\n<code>if</code>/<code>else</code> or in the loop conditional expression of a <code>while</code> expression.</p>\n</li>\n</ul>\n<p>When a temporary rvalue is being created that is assigned into a <code>let</code>\ndeclaration, however, the temporary is created with the lifetime of\nthe enclosing block instead, as using the enclosing statement (the <code>let</code>\ndeclaration) would be a guaranteed error (since a pointer to the\ntemporary would be stored into a variable, but the temporary would be\nfreed before the variable could be used). The compiler uses simple\nsyntactic rules to decide which values are being assigned into a let\nbinding, and therefore deserve a longer temporary lifetime.</p>\n</blockquote>\n<p>The reference then has examples of these rules.</p>\n"}], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 47044566, "answer_count": 1, "score": 3, "last_activity_date": 1607993913, "creation_date": 1509483523, "last_edit_date": 1509483780, "question_id": 47044453, "link": "https://stackoverflow.com/questions/47044453/what-is-the-scope-of-unnamed-values", "title": "What is the scope of unnamed values?", "body": "<p>When do unnamed values go out of scope, when is the value dropped?</p>\n\n<p><strong>I'm looking for an answer based on <a href=\"https://doc.rust-lang.org/\" rel=\"nofollow noreferrer\">official docs</a>, not based on experiments.</strong></p>\n\n<p>Example 1:</p>\n\n<pre><code>f(foo().bar());\n</code></pre>\n\n<p>Example 2:</p>\n\n<pre><code>match foo().bar() {\n    // ...\n}\n</code></pre>\n\n<p>If <code>bar</code> is <code>fn bar(self) -&gt; ...</code> it takes ownership of the passed value, and it is dropped as usual, but what happens if <code>bar</code> borrows, i.e. <code>fn bar(&amp;self) -&gt; ...</code>?  Does it matter whether the result of <code>bar</code> depends on the lifetime of <code>&amp;self</code>?</p>\n\n<p>That is, <code>foo</code> could be returning a <code>MutexGuard</code>; it is essential to know when the guard is dropped (and the mutex is unlocked).</p>\n\n<p>The experimental method shows that the unnamed value is dropped after the statement it is created in is \"finished\"; to force the \"early\" drop a <code>let</code> statement is required.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6347a1b65c224c7203f1aec8ad86d3c4&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>#[derive(Debug)]\npub struct Foo;\npub fn foo() -&gt; Foo {\n    println!(\"foo()\");\n    Foo\n}\nimpl Foo {\n    pub fn bar(&amp;self) {\n    }\n}\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"Foo::drop()\");\n    }\n}\n\nfn main() {\n    println!(\"--- scope test start\");\n    println!(\"value: {:?}\", foo().bar());\n    println!(\"--- end\");\n\n    println!(\"--- scope test start\");\n    match foo().bar() {\n        v =&gt; println!(\"value: {:?}\", v),\n    }\n    println!(\"--- end\");\n\n    println!(\"--- scope test start\");\n    let v = foo().bar();\n    println!(\"value: {:?}\", v);\n    println!(\"--- end\");\n}\n</code></pre>\n\n<p>prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>--- scope test start\nfoo()\nvalue: ()\nFoo::drop()\n--- end\n--- scope test start\nfoo()\nvalue: ()\nFoo::drop()\n--- end\n--- scope test start\nfoo()\nFoo::drop()\nvalue: ()\n--- end\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1509481386, "post_id": 47043748, "comment_id": 81035182, "body": "This is because <code>#[derive]</code> uses incorrect bounds. You will need to implement <code>Default</code> manually."}, {"owner": {"reputation": 1966, "user_id": 612758, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/97d4d4ce8c458300c845c85a4b5e1ae5?s=128&d=identicon&r=PG", "display_name": "maackle", "link": "https://stackoverflow.com/users/612758/maackle"}, "edited": false, "score": 0, "creation_date": 1573690321, "post_id": 47043748, "comment_id": 103968546, "body": "I have this same question, but I don&#39;t think the linked answer is a relevant answer, or if it is, I don&#39;t see how. This question is specifically about HashMap. <code>HashMap&lt;K, V&gt;</code> does not have a <code>Default</code> type bound for <code>K</code>. The comment above is an answer, but I don&#39;t think that this question should be closed as a duplicate."}], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 140, "favorite_count": 0, "closed_date": 1509481981, "answer_count": 0, "score": 2, "last_activity_date": 1509480547, "creation_date": 1509480547, "question_id": 47043748, "link": "https://stackoverflow.com/questions/47043748/constructing-a-default-hashmap-when-the-key-type-is-unknown", "closed_reason": "Duplicate", "title": "Constructing a default HashMap when the key type is unknown", "body": "<p>I want to have a struct which has a generic parameter that is used as the key type of a <code>HashMap</code> which is a member variable. I also want my struct to implement <code>Default</code> and have the <code>HashMap</code> default to being empty. But this doesn't compile:</p>\n\n<pre><code>use std::hash::Hash;\nuse std::collections::HashMap;\n\n#[derive(Default)]\nstruct X&lt;T: Hash + Eq&gt; {\n    x: HashMap&lt;T, String&gt;\n}\n\nimpl&lt;T: Hash + Eq&gt; X&lt;T&gt; {\n    fn new() -&gt; X&lt;T&gt; {\n        Default::default()\n    }\n}\n\nfn main() {\n\n}\n</code></pre>\n\n<p>It says:</p>\n\n<pre><code>error[E0277]: the trait bound `T: std::default::Default` is not satisfied\n  --&gt; src/main.rs:11:9\n   |\n11 |         Default::default()\n   |         ^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `T`\n   |\n   = help: consider adding a `where T: std::default::Default` bound\n   = note: required because of the requirements on the impl of `std::default::Default` for `X&lt;T&gt;`\n   = note: required by `std::default::Default::default`\n</code></pre>\n\n<p>Why doesn't this work?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1509482238, "post_id": 47043167, "comment_id": 81035571, "body": "<a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String) or Vec (&amp;Vec) as a function argument?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "is_accepted": false, "score": 3, "last_activity_date": 1509485117, "last_edit_date": 1509485117, "creation_date": 1509481825, "answer_id": 47044053, "question_id": 47043167, "link": "https://stackoverflow.com/questions/47043167/does-rust-contain-a-way-to-directly-check-whether-or-not-one-vector-is-a-substr/47044053#47044053", "title": "Does Rust contain a way to directly check whether or not one vector is a &quot;substring&quot; of another?", "body": "<p>To my knowledge, there's no function or method in the standard library to check if a slice is a subslice of another slice.</p>\n\n<p>We can generalize and simplify your algorithm to (<a href=\"https://play.rust-lang.org/?gist=b20ad5d8b16c3b9e232035a4a8dd6342&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>fn is_sub&lt;T: PartialEq&gt;(mut haystack: &amp;[T], needle: &amp;[T]) -&gt; bool {\n    if needle.len() == 0 { return true; }\n    while !haystack.is_empty() {\n        if haystack.starts_with(needle) { return true; }\n        haystack = &amp;haystack[1..];\n    }\n    false\n}\n\nfn main() {\n    let vec1 = vec![1, 2, 3, 4, 5];\n    let vec2 = vec![2, 3]; // vec2 IS a substring of vec1\n    let vec3 = vec![1, 5]; // vec3 is NOT a substring of vec3\n\n    println!(\"should be true: {}\", is_sub(&amp;vec1, &amp;vec2));\n    println!(\"should be false: {}\", is_sub(&amp;vec1, &amp;vec3));\n}\n</code></pre>\n\n<p>The logic is that we check if the <code>needle</code> slice is a prefix of the <code>haystack</code> slice, if it is not, we \"remove\" one element from the <code>haystack</code>. If the <code>haystack</code> ends up empty in the end, it is not a subslice.</p>\n\n<p>With the help of <code>windows</code> we can shorten <code>is_sub</code> further with an approach from functional programming:</p>\n\n<pre><code>fn is_sub&lt;T: PartialEq&gt;(haystack: &amp;[T], needle: &amp;[T]) -&gt; bool {\n    haystack.windows(needle.len()).any(|c| c == needle)\n}\n</code></pre>\n\n<p>Notably, these aren't the fastest algorithms since they have a worst case complexity of <code>O(n^2)</code>, but they work for all <code>T: PartialEq</code>. Algorithms such as <a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\" rel=\"nofollow noreferrer\">Knuth-Morris-Pratt</a> can be used to speed this up, but for small inputs <code>O(n^2)</code> may be better due to constant factors.</p>\n\n<p>We can improve upon this situation by using a trait in conjunction with specialization (which requires nightly):</p>\n\n<pre><code>#![feature(specialization)]\n\npub trait HasPart {\n    fn has_part(&amp;self, rhs: &amp;Self) -&gt; bool;\n}\n\nimpl&lt;T: PartialEq&gt; HasPart for [T] {\n    default fn has_part(&amp;self, rhs: &amp;Self) -&gt; bool {\n        self.windows(rhs.len()).any(|curr| curr == rhs)\n    }\n}\n\nimpl HasPart for [u8] {\n    fn has_part(&amp;self, rhs: &amp;Self) -&gt; bool {\n        unimplemented!() // use Knuth-Morris-Pratt\n    }\n}\n\nfn main() {\n    let vec1 = vec![1, 2, 3, 4, 5];\n    let vec2 = vec![2, 3]; // vec2 IS a substring of vec1\n    let vec3 = vec![1, 5]; // vec3 is NOT a substring of vec3\n\n    println!(\"should be true: {}\", vec1.has_part(&amp;vec2));\n    println!(\"should be false: {}\", vec1.has_part(&amp;vec3));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1511211644, "last_edit_date": 1511211644, "creation_date": 1509488460, "answer_id": 47045355, "question_id": 47043167, "link": "https://stackoverflow.com/questions/47043167/does-rust-contain-a-way-to-directly-check-whether-or-not-one-vector-is-a-substr/47045355#47045355", "title": "Does Rust contain a way to directly check whether or not one vector is a &quot;substring&quot; of another?", "body": "<p>Rust doesn't include this in the standard library.</p>\n\n<p>In general, this is the substring search problem which we can define over arbitrary alphabets. Depending on what properties we have available (only comparable, or also orderable) determines what algorithms we can use.</p>\n\n<p>The benefit of using a substring search algorithm is that the function performs reasonably well for all inputs. The brute force search solution has a <em>worst case</em> that takes a time that is quadratic in the size of the input.</p>\n\n<p>The \u201calphabet\u201d of <code>i32</code> values is <strong>orderable</strong>, so the <em>Two Way</em> algorithm (that the Rust standard library uses in <code>str::find(&amp;str)</code> internally) could be adapted to implement this.</p>\n\n<p>One algorithm which works for all <strong>equality comparable</strong> alphabets is <em>Knuth-Morris-Pratt</em>. It requires preprocessing the pattern we are searching for and requires space proportional to the pattern's length. It is also quite simple to implement.</p>\n\n<p>I've written an implementation of the algorithm for generic elements for Rust @ <a href=\"https://github.com/bluss/knuth-morris-pratt\" rel=\"nofollow noreferrer\">bluss/knuth-morris-pratt</a>, which as of this writing at least, is not published as a crate.</p>\n\n<hr>\n\n<p>Well, christ. You might have nerd-sniped me pretty hard. I spent an inordinate amount of time researching algorithms for this that use no more than <code>T: Eq</code> <strong>and</strong> no more than <em>constant space</em> (meaning Rust core compatible). As of this writing, it's a crate you can use: <a href=\"https://docs.rs/galil-seiferas/\" rel=\"nofollow noreferrer\"><code>galil-seiferas</code></a>.</p>\n"}], "owner": {"reputation": 696, "user_id": 2509572, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1cd622d403da42df85c9bc318708b00d?s=128&d=identicon&r=PG", "display_name": "firechant", "link": "https://stackoverflow.com/users/2509572/firechant"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2914, "favorite_count": 0, "accepted_answer_id": 47045355, "answer_count": 2, "score": 3, "last_activity_date": 1511211644, "creation_date": 1509477950, "last_edit_date": 1509483608, "question_id": 47043167, "link": "https://stackoverflow.com/questions/47043167/does-rust-contain-a-way-to-directly-check-whether-or-not-one-vector-is-a-substr", "title": "Does Rust contain a way to directly check whether or not one vector is a &quot;substring&quot; of another?", "body": "<p>You can do this with a <code>String</code> using <code>contains</code> which searches for a pattern, but <code>Vec::contains</code> is for a single element.</p>\n\n<p>The only way I've been able to do this is by directly implementing some kind of substring function, but I'm sort of hoping there's a built-in way.</p>\n\n<pre><code>let vec1 = vec![1, 2, 3, 4, 5];\nlet vec2 = vec![2, 3]; // vec2 IS a substring of vec1\nlet vec3 = vec![1, 5]; // vec3 is NOT a substring of vec3\n\nfn is_subvec(mainvec: &amp;Vec&lt;i32&gt;, subvec: &amp;Vec&lt;i32&gt;) -&gt; bool {\n    if subvec.len() == 0 { return true; }\n    if mainvec.len() == 0 { return false; }\n\n    'outer: for i in 0..mainvec.len() {\n        for j in 0..subvec.len() {\n            if mainvec[i+j] != subvec[j] {\n                continue 'outer;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nprintln!(\"should be true: {}\", is_subvec(&amp;vec1, &amp;vec2));\nprintln!(\"should be false: {}\", is_subvec(&amp;vec1, &amp;vec3));\n</code></pre>\n\n<p>I've seen <a href=\"https://stackoverflow.com/q/35901547/155423\">How can I find a subsequence in a &amp;[u8] slice?</a>, but that's specifically for <code>u8</code> and I want something that applies regardless of the type in the <code>Vec</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1509460610, "post_id": 47037573, "comment_id": 81022410, "body": "<a href=\"https://stackoverflow.com/questions/28678615/efficiently-insert-multiple-elements-in-the-middle-of-a-vec\">Efficiently insert multiple elements in the middle of a Vec</a> ?"}, {"owner": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509463222, "post_id": 47037573, "comment_id": 81024243, "body": "Yes, prepending is a special case."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509465138, "post_id": 47037573, "comment_id": 81025576, "body": "@trentcl good eye! Do you think we should mark as a duplicate?"}, {"owner": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509469533, "post_id": 47037573, "comment_id": 81028360, "body": "@Shepmaster You could, but the prepend is an essential keyword. This question already is second on Google when searching rust &quot;prepend slice to vec&quot;. The first result is wrong (deals with appending)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509469770, "post_id": 47037573, "comment_id": 81028531, "body": "@user103185 sure, that&#39;s why SO leaves duplicate questions around \u2014 to be used as signposts with extra keywords pointing to the canonical answer, regardless of what keywords it has."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509479113, "post_id": 47037573, "comment_id": 81034036, "body": "@user103185 Just a thought: <code>Vec&lt;T&gt;</code> takes ownership of any <code>T</code> you put in it, but slices (<code>&amp;[T]</code>) don&#39;t own <code>T</code>s to give away. Therefore any safe implementation of <code>insert_slice</code> would copy the contents and have to have at least a <code>T: Clone</code> bound. When you want to move instead of copy, prepending is only possible when the thing you would prepend <i>also</i> owns its elements -- and when it&#39;s a <code>Vec</code>, you could just do <code>b.extend(a)</code> instead of <code>a.prepend(b)</code>."}, {"owner": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509546094, "post_id": 47037573, "comment_id": 81061168, "body": "@trentcl I alluded to the option of appending if the slice were really a Vec, you have made that explicit to those who read this. As a sidenote, though we abstractly talk of Vec, a popular use is ANSI (byte) strings: prepending and insertion should be obvious (not so)."}], "answers": [{"comments": [{"owner": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "edited": false, "score": 0, "creation_date": 1509463898, "post_id": 47037876, "comment_id": 81024731, "body": "Thanks for the &quot;holes&quot; explanation. Note there is a splice method, and also RFC&#39;s related to the question (1964 and 1432)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "edited": false, "score": 0, "creation_date": 1509464219, "post_id": 47037876, "comment_id": 81024945, "body": "@user103185 ah, <code>splice</code> is very new and I missed it in your original question; updated to include it."}, {"owner": {"reputation": 2206, "user_id": 1420237, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/f427f4dce4e8cd75b6154bae65629e88?s=128&d=identicon&r=PG", "display_name": "Lucas Werkmeister", "link": "https://stackoverflow.com/users/1420237/lucas-werkmeister"}, "edited": false, "score": 0, "creation_date": 1608715405, "post_id": 47037876, "comment_id": 115662976, "body": "There is an issue for adding <code>splice</code> and <code>extend_front</code> to <code>VecDeque</code>, though it hasn\u2019t seen much activity so far: <a href=\"https://github.com/rust-lang/rust/issues/69939\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/69939</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1509550615, "last_edit_date": 1509550615, "creation_date": 1509460293, "answer_id": 47037876, "question_id": 47037573, "link": "https://stackoverflow.com/questions/47037573/how-to-prepend-a-slice-to-a-vec/47037876#47037876", "title": "How to prepend a slice to a Vec", "body": "<p><code>String::insert_str</code> makes use of the fact that a string is essentially a <code>Vec&lt;u8&gt;</code>. It <a href=\"https://github.com/rust-lang/rust/blob/1.21.0/src/liballoc/string.rs#L1158-L1170\" rel=\"nofollow noreferrer\">reallocates the underlying buffer, moves all the initial bytes to the end, then adds the new bytes to the beginning</a>.</p>\n\n<p>This is not generally safe and can not be directly added to <code>Vec</code> because during the copy the <code>Vec</code> is no longer in a valid state \u2014 there are \"holes\" in the data. </p>\n\n<p>This doesn't matter for <code>String</code> because the data is <code>u8</code> and <code>u8</code> doesn't implement <code>Drop</code>. There's no such guarantee for an arbitrary <code>T</code> in a <code>Vec</code>, but if you are very careful to track your state and clean up properly, you can do the same thing \u2014 this is what <code>splice</code> does!</p>\n\n<blockquote>\n  <p>the whole concept of prepending has seemingly been exorcised</p>\n</blockquote>\n\n<p>I'd suppose this is because prepending to a <code>Vec</code> is a poor idea from a performance standpoint. If you need to do it, the na\u00efve case is straight-forward:</p>\n\n<pre><code>fn prepend&lt;T&gt;(v: Vec&lt;T&gt;, s: &amp;[T]) -&gt; Vec&lt;T&gt;\nwhere\n    T: Clone,\n{\n    let mut tmp: Vec&lt;_&gt; = s.to_owned();\n    tmp.extend(v);\n    tmp\n}\n</code></pre>\n\n<p>This has a bit higher memory usage as we need to have enough space for two copies of <code>v</code>.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.splice\" rel=\"nofollow noreferrer\"><code>splice</code></a> method accepts an iterator of new values and a range of values to replace. In this case, we don't want to replace anything, so we give an empty range of the index we want to insert at. We also need to convert the slice into an iterator of the appropriate type:</p>\n\n<pre><code>let s = &amp;[1, 2, 3];\nlet mut v = vec![4, 5];\n\nv.splice(0..0, s.iter().cloned());\n</code></pre>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/1.21.0/src/liballoc/vec.rs#L2583-L2623\" rel=\"nofollow noreferrer\"><code>splice</code>'s implementation is non-trivial</a>, but it efficiently does the tracking we need. After removing a chunk of values, it then <em>reuses</em> that chunk of memory for the new values. It also moves the tail of the vector around (maybe a few times, depending on the input iterator). The <code>Drop</code> implementation of <code>Slice</code> ensures that things will always be in a valid state.</p>\n\n<hr>\n\n<p>I'm more surprised that <a href=\"https://doc.rust-lang.org/std/collections/struct.VecDeque.html\" rel=\"nofollow noreferrer\"><code>VecDeque</code></a> doesn't support it, as it's designed to be more efficient about modifying both the head and tail of the  data.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509460732, "post_id": 47037958, "comment_id": 81022513, "body": "I don&#39;t know enough, but I&#39;d be worried about zero-sized types..."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509461149, "post_id": 47037958, "comment_id": 81022821, "body": "@Shepmaster: interesting point; I tested it on an empty struct (which worked), but I&#39;m not sure if this covers all possibilities. I guess it should be safe for the regular primitives, though."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1509460537, "creation_date": 1509460537, "answer_id": 47037958, "question_id": 47037573, "link": "https://stackoverflow.com/questions/47037573/how-to-prepend-a-slice-to-a-vec/47037958#47037958", "title": "How to prepend a slice to a Vec", "body": "<p>Taking into consideration what Shepmaster said, you could implement a function prepending a slice with <code>Copy</code>able elements to a <code>Vec</code> just like <code>String::insert_str()</code> does in the following way:</p>\n\n<pre><code>use std::ptr;\n\nunsafe fn prepend_slice&lt;T: Copy&gt;(vec: &amp;mut Vec&lt;T&gt;, slice: &amp;[T]) {\n    let len = vec.len();\n    let amt = slice.len();\n    vec.reserve(amt);\n\n    ptr::copy(vec.as_ptr(),\n              vec.as_mut_ptr().offset((amt) as isize),\n              len);\n    ptr::copy(slice.as_ptr(),\n              vec.as_mut_ptr(),\n              amt);\n    vec.set_len(len + amt);\n}\n\nfn main() {\n    let mut v = vec![4, 5, 6];\n\n    unsafe { prepend_slice(&amp;mut v, &amp;[1, 2, 3]) }\n\n    assert_eq!(&amp;v, &amp;[1, 2, 3, 4, 5, 6]);\n}\n</code></pre>\n"}], "owner": {"reputation": 447, "user_id": 2816391, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4a81809defa9e2b3b0b1e0540b699616?s=128&d=identicon&r=PG&f=1", "display_name": "user103185", "link": "https://stackoverflow.com/users/2816391/user103185"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7183, "favorite_count": 1, "closed_date": 1509471360, "accepted_answer_id": 47037876, "answer_count": 2, "score": 8, "last_activity_date": 1509550615, "creation_date": 1509459390, "last_edit_date": 1509469522, "question_id": 47037573, "link": "https://stackoverflow.com/questions/47037573/how-to-prepend-a-slice-to-a-vec", "closed_reason": "Duplicate", "title": "How to prepend a slice to a Vec", "body": "<p>I was expecting a <code>Vec::insert_slice(index, slice)</code> method \u2014 a solution for strings (<a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.insert_str\" rel=\"noreferrer\"><code>String::insert_str()</code></a>) does exist. </p>\n\n<p>I know about <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.insert\" rel=\"noreferrer\"><code>Vec::insert()</code></a>, but that inserts only one element at a time, not a slice. Alternatively, when the prepended slice is a <code>Vec</code> one can append to it instead, but this does not generalize. The idiomatic solution probably uses <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.splice\" rel=\"noreferrer\"><code>Vec::splice()</code></a>, but using iterators as in the example makes me scratch my head. </p>\n\n<p>Secondly, the whole concept of prepending has seemingly been exorcised from the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\">docs</a>. There isn't a single mention. I would appreciate comments as to why. Note that relatively obscure methods like <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.swap_remove\" rel=\"noreferrer\"><code>Vec::swap_remove()</code></a> do exist. </p>\n\n<p>My typical use case consists of indexed byte strings. </p>\n"}, {"tags": ["rust", "dependencies", "rust-cargo", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 1, "last_activity_date": 1509440866, "creation_date": 1509440866, "answer_id": 47031589, "question_id": 47031308, "link": "https://stackoverflow.com/questions/47031308/how-to-include-unpublished-dependencies-libraries-in-cargo-toml/47031589#47031589", "title": "How to include unpublished dependencies/libraries in Cargo.toml?", "body": "<p><code>paths</code> are set in <code>.cargo/config</code>, not in <code>Cargo.toml</code>, and are only for replacing already existing dependencies with local forks.</p>\n\n<p>Unpublished crates can be referenced either by <a href=\"http://doc.crates.io/specifying-dependencies.html#specifying-dependencies-from-git-repositories\" rel=\"nofollow noreferrer\">git</a>; other crates in the same repository by <a href=\"http://doc.crates.io/specifying-dependencies.html#specifying-path-dependencies\" rel=\"nofollow noreferrer\">local path</a>.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 661, "favorite_count": 0, "closed_date": 1509451439, "accepted_answer_id": 47031589, "answer_count": 1, "score": -1, "last_activity_date": 1509440866, "creation_date": 1509440044, "last_edit_date": 1509440350, "question_id": 47031308, "link": "https://stackoverflow.com/questions/47031308/how-to-include-unpublished-dependencies-libraries-in-cargo-toml", "closed_reason": "Duplicate", "title": "How to include unpublished dependencies/libraries in Cargo.toml?", "body": "<p>I want to build a currently unpublished library and an application which uses it.</p>\n\n<p>How to include an unpublished library in the executable application's <code>Cargo.toml</code> file?</p>\n\n<p>From looking at the <a href=\"http://doc.crates.io/specifying-dependencies.html#overriding-with-local-dependencies\" rel=\"nofollow noreferrer\">creates documentation</a> it looks like it's something along the line of:</p>\n\n<pre><code>paths = [\"/path/to/uuid\"]\n</code></pre>\n\n<p>How to include unpublished libraries in rust projects using filepaths, or github/gitlab repository links?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1509463921, "post_id": 47028390, "comment_id": 81024745, "body": "Reminded me of <a href=\"https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c\">this classic</a>."}], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 6, "last_activity_date": 1509428343, "last_edit_date": 1509428343, "creation_date": 1509427992, "answer_id": 47028467, "question_id": 47028390, "link": "https://stackoverflow.com/questions/47028390/error-placement-in-expression-syntax-is-experimental-and-subject-to-change-se/47028467#47028467", "title": "error: placement-in expression syntax is experimental and subject to change. (see issue #27779)", "body": "<p>Because you are writing <code>x&lt;-5</code> instead of <code>x &lt; -5</code> with whitespaces, Rust sees <code>&lt;-</code> as <a href=\"https://github.com/rust-lang/rust/issues/27779\" rel=\"noreferrer\">the placement operator</a>. Putting whitespace around your operators would in general be best, since it fixes this and also improved readability a lot.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 151, "favorite_count": 0, "accepted_answer_id": 47028467, "answer_count": 1, "score": 3, "last_activity_date": 1509453156, "creation_date": 1509427546, "last_edit_date": 1509453156, "question_id": 47028390, "link": "https://stackoverflow.com/questions/47028390/error-placement-in-expression-syntax-is-experimental-and-subject-to-change-se", "title": "error: placement-in expression syntax is experimental and subject to change. (see issue #27779)", "body": "<p>I am following <a href=\"https://rustbyexample.com/flow_control/if_else.html\" rel=\"nofollow noreferrer\">Rust By Example</a> and am getting an error which I am not sure how to address:  </p>\n\n<pre><code>fn main() {\n    let x: f32 = 10.;\n\n    if (x == 10) {\n        println!(\"if\");\n    } else if (x &gt; 10) &amp;&amp; (x&lt;-5) {\n        println!(\"else if\");\n    } else {\n        println!(\"else\");\n    }\n}\n</code></pre>\n\n<p>The compiling error below looks to be as a results of the <code>else if</code>. How do perform two conditional checks in the <code>else if</code> and why is it not working?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: placement-in expression syntax is experimental and subject to change. (see issue #27779)\n --&gt; src/main.rs:6:28\n  |\n6 |     } else if (x &gt; 10) &amp;&amp; (x&lt;-5) {\n  |                            ^^^^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509407151, "post_id": 47025694, "comment_id": 80998868, "body": "Prefer using an <code>if let</code> instead of a one-armed <code>match</code>. <a href=\"https://stackoverflow.com/q/40006219/155423\">Accept <code>&amp;str</code> instead of <code>&amp;String</code></a>. My intuition says you will really want the <a href=\"https://stackoverflow.com/q/28512394/155423\">entry API</a>."}], "answers": [{"comments": [{"owner": {"reputation": 4071, "user_id": 2354735, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/Q33GM.jpg?s=128&g=1", "display_name": "Jet Blue", "link": "https://stackoverflow.com/users/2354735/jet-blue"}, "edited": false, "score": 0, "creation_date": 1509407166, "post_id": 47025768, "comment_id": 80998876, "body": "Ah, thanks! I&#39;m working through the docs yet somehow missed this."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1509406348, "creation_date": 1509406348, "answer_id": 47025768, "question_id": 47025694, "link": "https://stackoverflow.com/questions/47025694/how-do-you-make-the-value-of-a-some-returned-from-hashmapget-mutable/47025768#47025768", "title": "How do you make the value of a Some returned from HashMap::get mutable?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>get_mut()</code></a> instead of <code>get()</code>.</p>\n"}], "owner": {"reputation": 4071, "user_id": 2354735, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/Q33GM.jpg?s=128&g=1", "display_name": "Jet Blue", "link": "https://stackoverflow.com/users/2354735/jet-blue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 48, "favorite_count": 0, "accepted_answer_id": 47025768, "answer_count": 1, "score": 0, "last_activity_date": 1509406935, "creation_date": 1509405859, "last_edit_date": 1509406935, "question_id": 47025694, "link": "https://stackoverflow.com/questions/47025694/how-do-you-make-the-value-of-a-some-returned-from-hashmapget-mutable", "title": "How do you make the value of a Some returned from HashMap::get mutable?", "body": "<p>I can't figure out how to modify the value returned by <code>Some</code>:</p>\n\n<pre><code>fn add_employee(\n    employees: &amp;mut HashMap&lt;String, Vec&lt;String&gt;&gt;,\n    employee_name: &amp;String,\n    department_name: &amp;String,\n) {\n    match employees.get(department_name) {\n        Some(members) =&gt; {\n            members.push(employee_name.clone()); // what I want, but it doesn't work\n        }\n        None =&gt; {}\n    }\n}\n</code></pre>\n\n<p>The compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable borrowed content `*members` as mutable\n  --&gt; src/main.rs:10:13\n   |\n10 |             members.push(employee_name.clone());\n   |             ^^^^^^^ cannot borrow as mutable\n</code></pre>\n"}, {"tags": ["rust", "serde", "serde-json"], "answers": [{"tags": [], "owner": {"reputation": 98, "user_id": 8835688, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/128a375c457d13fa5c5b68d12b1eb821?s=128&d=identicon&r=PG&f=1", "display_name": "snake_case", "link": "https://stackoverflow.com/users/8835688/snake-case"}, "is_accepted": false, "score": 2, "last_activity_date": 1509418809, "creation_date": 1509418809, "answer_id": 47027203, "question_id": 47020123, "link": "https://stackoverflow.com/questions/47020123/skipping-serialization-of-a-variant-if-its-value-is-empty-custom-serialization/47027203#47027203", "title": "Skipping serialization of a variant if its value is empty? (custom serialization)", "body": "<p>Try the following:</p>\n\n<pre><code>serializer.serialize_none()\n</code></pre>\n\n<p><a href=\"https://docs.serde.rs/serde/trait.Serializer.html#tymethod.serialize_none\" rel=\"nofollow noreferrer\">This serializes <code>None</code> (as opposed to <code>Some</code>)</a></p>\n"}], "owner": {"reputation": 97, "user_id": 6338341, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/193f481b1d325647699db784e3d92d3a?s=128&d=identicon&r=PG&f=1", "display_name": "Ark", "link": "https://stackoverflow.com/users/6338341/ark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1520100522, "creation_date": 1509381179, "last_edit_date": 1520100522, "question_id": 47020123, "link": "https://stackoverflow.com/questions/47020123/skipping-serialization-of-a-variant-if-its-value-is-empty-custom-serialization", "title": "Skipping serialization of a variant if its value is empty? (custom serialization)", "body": "<p>I want to skip serialization of <code>Token</code> variant if its value is empty. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; Serialize for UriParam&lt;'a&gt; {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer\n    {\n        match self {\n            &amp;UriParam::Token(ref token) =&gt; {\n                if !token.is_empty() {\n                    serializer.serialize_some(token)\n                } else {\n                    // what should I return instead?\n                }\n            },\n            &amp;UriParam::URI(ref uri) =&gt; serializer.serialize_some(uri),\n            &amp;UriParam::Param(ref option) =&gt; serializer.serialize_some(option),\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1509376157, "post_id": 47018493, "comment_id": 80983634, "body": "Would creating a free-standing function <code>printMoves</code> which takes a <code>&amp;Board&lt;Move = T&gt;</code> where <code>T: fmt::Debug</code> solve your issue, or are you bend on a refinement trait?"}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 9, "last_activity_date": 1509417426, "last_edit_date": 1509417426, "creation_date": 1509378824, "answer_id": 47019398, "question_id": 47018493, "link": "https://stackoverflow.com/questions/47018493/traits-with-stricter-associated-type-bounds-than-supertrait/47019398#47019398", "title": "Traits with stricter associated type bounds than supertrait", "body": "<p>Here's what you asked for:</p>\n\n<pre><code>trait TextBoard: Board\nwhere\n    Self::Move: Debug,\n{\n    // ...\n}\n</code></pre>\n\n<p>All the bounds on  a trait have to be in the \"headline\"; you can't impose additional restrictions once you start writing the body of the trait. This bound will prevent you from writing <code>impl TextBoard for Foo</code> when <code>&lt;Foo as Board&gt;::Move</code> does not implement <code>Debug</code> (<a href=\"https://play.rust-lang.org/?gist=3d7067d4429ee3ea7d28f0af9dd1adf8&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>).</p>\n\n<hr>\n\n<p>Maybe that is what you want, but do you really need to <em>prevent</em> implementing <code>TextBoard</code> for other types? For some type there could be another way to write <code>print_moves</code> that makes more sense, and the <code>Debug</code> requirement is just noise. In that case you probably want to skip the <code>where</code> clause and move the body of <code>print_moves</code> to a <em>blanket <code>impl</code></em>:</p>\n\n<pre><code>trait TextBoard {\n    fn print_moves(&amp;self);\n}\n\nimpl&lt;B: Board&gt; TextBoard for B\nwhere\n    B::Move: Debug, // or &lt;Self as Board&gt;::Move: Debug\n{\n    fn print_moves(&amp;self) {\n        println!(\"{:?}\", self.moves());\n    }\n}\n</code></pre>\n\n<p>With this version, you still don't need to write an <code>impl</code> for types where <code>Self::Move: Debug</code>, but you're not <em>prevented</em> from writing an <code>impl</code> for other types where that doesn't hold. It's more of an <em>extension</em> than a <em>refinement</em>.</p>\n\n<hr>\n\n<p>On the other hand, you should pretty much always implement <code>Debug</code> for every type, so is it really useful to have that trait? Maybe what you want is just an optional method on <code>Board</code> that's implemented when <code>Move: Debug</code>:</p>\n\n<pre><code>trait Board {\n    type Move;\n\n    fn moves(&amp;self) -&gt; Vec&lt;Self::Move&gt;;\n\n    fn print_moves(&amp;self)\n    where\n        Self::Move: Debug,\n    {\n        println!(\"{:?}\", self.moves());\n    }\n}\n</code></pre>\n\n<p>This is like the original version, but doesn't require the addition of a new <code>TextBoard</code> trait, so it will probably cut down on the number of explicit bounds you have to write. Many of the standard library traits such as <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> have optional methods defined with bounds like this. The downside, besides the requirement that <code>Move</code> <em>must</em> be <code>Debug</code>, is that it clutters the <code>Board</code> trait with printing code, which you might not consider really part of what it means to be a <code>Board</code>.</p>\n"}], "owner": {"reputation": 194, "user_id": 7732825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/42efe0f0ead85ed3e4ac7685e982be7b?s=128&d=identicon&r=PG&f=1", "display_name": "Morten Lohne", "link": "https://stackoverflow.com/users/7732825/morten-lohne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 315, "favorite_count": 0, "accepted_answer_id": 47019398, "answer_count": 1, "score": 3, "last_activity_date": 1509417426, "creation_date": 1509375899, "last_edit_date": 1509384592, "question_id": 47018493, "link": "https://stackoverflow.com/questions/47018493/traits-with-stricter-associated-type-bounds-than-supertrait", "title": "Traits with stricter associated type bounds than supertrait", "body": "<p>I have a simple trait with an associated type with no bounds. </p>\n\n<pre><code>trait Board {\n    type Move;\n    fn moves(&amp;self) -&gt; Vec&lt;Self::Move&gt;;\n}\n</code></pre>\n\n<p>I also want to use this trait as a supertrait. In particular, I want my new subtrait to have stricter bounds on the associated type. Something like this:</p>\n\n<pre><code>trait TextBoard: Board {\n    type Move: fmt::Debug; // Trying to tighten bounds on associated type\n    fn printMoves(&amp;self) {\n        println!(\"{:?}\", self.moves());\n    }\n}\n</code></pre>\n\n<p>The example is highly simplified, but seems to show the problem: The compiler thinks I'm trying to create a new associated type, but I just want the subtrait to require tighter bounds. Is there any way to achieve this?</p>\n"}, {"tags": ["csv", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1509372550, "creation_date": 1509372550, "answer_id": 47017334, "question_id": 47016911, "link": "https://stackoverflow.com/questions/47016911/trying-to-write-a-csv-record-has-the-error-the-trait-stdconvertasrefu8/47017334#47017334", "title": "Trying to write a CSV record has the error &quot;the trait `std::convert::AsRef&lt;[u8]&gt;` is not implemented for `u8`&quot;", "body": "<p>Review the signature for <code>write_record</code>:</p>\n\n<pre><code>fn write_record&lt;I, T&gt;(&amp;mut self, record: I) -&gt; Result&lt;()&gt; \nwhere\n    I: IntoIterator&lt;Item = T&gt;,\n    T: AsRef&lt;[u8]&gt;, \n</code></pre>\n\n<p>It expects something that can become an <strong>iterator</strong> of values. You are providing a <code>&amp;[u8]</code>, which <em>is</em> an iterator, but only of <code>&amp;u8</code> values. The error is that these <code>&amp;u8</code>s do not implement <code>AsRef&lt;[u8]&gt;</code>.</p>\n\n<p>You can wrap the single passed-in string in another array to create something that can act as an iterator:</p>\n\n<pre><code>writer.write_record(&amp;[buf]);\n</code></pre>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "accepted_answer_id": 47017334, "answer_count": 1, "score": 1, "last_activity_date": 1509372550, "creation_date": 1509371404, "last_edit_date": 1509372298, "question_id": 47016911, "link": "https://stackoverflow.com/questions/47016911/trying-to-write-a-csv-record-has-the-error-the-trait-stdconvertasrefu8", "title": "Trying to write a CSV record has the error &quot;the trait `std::convert::AsRef&lt;[u8]&gt;` is not implemented for `u8`&quot;", "body": "<p>Here's a minimal repro:</p>\n\n<pre><code>extern crate csv;\nuse std::fs::File;\nuse std::io::Write;\n\nfn do_write(writer: &amp;mut csv::Writer&lt;File&gt;, buf: &amp;[u8]) {\n    // The error is coming from this line\n    writer.write_record(buf);\n}\n\nfn main() {\n    let mut writer = csv::Writer::from_path(r\"c:\\temp\\file.csv\").unwrap();\n    let str = \"Hello, World!\".to_string();\n    do_write(&amp;mut writer, str.as_bytes());\n}\n</code></pre>\n\n<p>Which causes a compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `u8: std::convert::AsRef&lt;[u8]&gt;` is not satisfied\n --&gt; src/main.rs:7:16\n  |\n7 |         writer.write_record(buf);\n  |                ^^^^^^^^^^^^ the trait `std::convert::AsRef&lt;[u8]&gt;` is not implemented for `u8`\n  |\n  = note: required because of the requirements on the impl of `std::convert::AsRef&lt;[u8]&gt;` for `&amp;u8`\n</code></pre>\n\n<p>What does this error mean? It seems that I'm already passing a <code>u8</code> slice?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1509346664, "post_id": 47008991, "comment_id": 80965588, "body": "The error is about type hint <code>FnMut(I)-&gt;O</code> on line 16, not <code>iter</code>. <code>FnMut(I)-&gt;O</code> is a trait, but you use it as a type, so compiler treats it as trait object, but trait objects should always be behind a pointer, thus you have the error."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1509346869, "post_id": 47008991, "comment_id": 80965681, "body": "When you&#39;ll fix this error (just remove type annotation), you&#39;ll need <a href=\"https://stackoverflow.com/a/27535594/2731452\">stackoverflow.com/a/27535594/2731452</a> to return iterator properly."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1509347951, "post_id": 47008991, "comment_id": 80966098, "body": "Also, your code doesn&#39;t produce the error you posted. Providing <a href=\"https://stackoverflow.com/help/mcve\">Minimal, Complete, and Verifiable Example</a> saves lots of time."}, {"owner": {"reputation": 3861, "user_id": 590967, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/88ccc433efa17e12844762353ce93b8c?s=128&d=identicon&r=PG", "display_name": "Shisoft", "link": "https://stackoverflow.com/users/590967/shisoft"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1509348498, "post_id": 47008991, "comment_id": 80966330, "body": "@red75prime Oh, thank you. Not realised it is a duplicate question. Closing it now."}, {"owner": {"reputation": 3861, "user_id": 590967, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/88ccc433efa17e12844762353ce93b8c?s=128&d=identicon&r=PG", "display_name": "Shisoft", "link": "https://stackoverflow.com/users/590967/shisoft"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1509358405, "post_id": 47008991, "comment_id": 80971666, "body": "@red75prime After I removed type annotation, it complains <code>expected type parameter, found &#39;struct std::iter::Map&#39;</code> from the beginning of <code>iter.map</code> to the end of the expression. That should be why I use a annotation om the first place. Any thoughts?"}], "owner": {"reputation": 3861, "user_id": 590967, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/88ccc433efa17e12844762353ce93b8c?s=128&d=identicon&r=PG", "display_name": "Shisoft", "link": "https://stackoverflow.com/users/590967/shisoft"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 641, "favorite_count": 0, "closed_date": 1509365106, "answer_count": 0, "score": 0, "last_activity_date": 1509365066, "creation_date": 1509343725, "last_edit_date": 1509365066, "question_id": 47008991, "link": "https://stackoverflow.com/questions/47008991/the-map-method-cannot-be-invoked-on-a-iteratort-trait-object", "closed_reason": "Duplicate", "title": "the `map` method cannot be invoked on a Iterator&lt;T&gt; trait object", "body": "<p>I am trying to implement generic Resilient Distributed Datasets (RDD) in Rust. I have a <code>RDD</code> trait:</p>\n\n<pre><code>pub trait RDD&lt;I, O&gt;: Serialize {\n    fn compute&lt;II, OI&gt;(&amp;self, iter: II, partition: &amp;Partition, context: &amp;TaskContext) -&gt; OI\n    where\n        OI: Iterator&lt;Item = O&gt;,\n        II: Iterator&lt;Item = I&gt;;\n}\n</code></pre>\n\n<p>Then the <code>MapRDD</code> struct and it's implementation of the <code>RDD</code> trait:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\npub struct MapRDD&lt;F, I, O&gt;\nwhere\n    F: RDDFunc&lt;(I), O&gt;,\n{\n    closure: F,\n    marker: PhantomData&lt;(I, O)&gt;,\n}\n\nimpl&lt;F, I, O&gt; RDD&lt;I, O&gt; for MapRDD&lt;F, I, O&gt;\nwhere\n    F: RDDFunc&lt;(I), O&gt;,\n{\n    fn compute&lt;II, OI&gt;(&amp;self, iter: II, partition: &amp;Partition, context: &amp;TaskContext) -&gt; OI\n    where\n        OI: Iterator&lt;Item = O&gt;,\n        II: Iterator&lt;Item = I&gt;,\n    {\n        return iter.map::&lt;O, FnMut(I) -&gt; O&gt;(|x: I| -&gt; O { self.closure.call((x)) });\n    }\n}\n</code></pre>\n\n<p>There may be some dedudant type hint. The code doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the `map` method cannot be invoked on a trait object\n  --&gt; src/rdd/transformations/map.rs:16:25\n   |\n16 |             return iter.map::&lt;O, FnMut(I) -&gt; O&gt;(|x: I| -&gt; O {\n   |\n</code></pre>\n\n<p>Because there will be arbitrary combination of compute results, which is the <code>Iterator&lt;O&gt;</code> or <code>OI</code> be chained to form a workflow, I have to use generic here.</p>\n\n<p>What's the reason for this error? Can't a trait object, which is the <code>iter</code> here, be consumed by its underlying struct function?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1509297328, "post_id": 47002900, "comment_id": 80952472, "body": "For what it&#39;s worth, the error message complains about the missing type parameter to <code>Config</code>.  Just use <code>Config&lt;T&gt;</code> instead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509297477, "post_id": 47002900, "comment_id": 80952516, "body": "The linked duplicates <a href=\"https://play.integer32.com/?gist=3c1e785b89c464f9e78efe379d21834a&amp;version=stable\" rel=\"nofollow noreferrer\">applied to your specific problem</a>. As explained in the first duplicate, you cannot accept a generic <code>T</code> and then decide what <code>T</code> should be in the function. As explained in the second duplicate, you need a <i>trait object</i> to perform dynamic dispatch. Then there&#39;s just a lot of little bugs like the fact that <code>stdout</code> doesn&#39;t implement <code>io::Read</code>, missing if clauses, and mismatched types."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1509297511, "post_id": 47002900, "comment_id": 80952524, "body": "@SvenMarnach no, that will not work. Please read the first linked duplicate to understand why."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509305002, "post_id": 47002900, "comment_id": 80955016, "body": "@Shepmaster I did not mean to imply that everything works with that fixed.  I just meant to explain the specific error message, which is unrelated to the other issues.  I see that my wording is misleading."}], "owner": {"reputation": 11, "user_id": 4664602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e5668259cc63a266dcfa9a885f5d2c9?s=128&d=identicon&r=PG&f=1", "display_name": "Mia", "link": "https://stackoverflow.com/users/4664602/mia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 260, "favorite_count": 0, "closed_date": 1509297193, "answer_count": 0, "score": 0, "last_activity_date": 1509297709, "creation_date": 1509296563, "last_edit_date": 1509297709, "question_id": 47002900, "link": "https://stackoverflow.com/questions/47002900/how-can-i-return-a-value-that-uses-a-trait-as-a-type-interface", "closed_reason": "Duplicate", "title": "How can I return a value that uses a trait as a type/interface?", "body": "<p>Specifically, I'd like to use either <code>io::stdin()</code> or <code>File::open()</code> as <code>io::Read</code>.</p>\n\n<p>I am new to Rust and may be missing some concepts, but I am unable to find any documentation as to how to return a struct containing a trait.</p>\n\n<p>Example of that I am trying to achieve:</p>\n\n<pre><code>use std::io::{self, Error};\nuse std::fs::File;\n\nstruct Config&lt;T: io::Read&gt; {\n    source: T,\n    dest: T,\n}\n\nimpl&lt;T&gt; Config&lt;T&gt;\nwhere\n    T: io::Read,\n{\n    fn new(args: &amp;[String]) -&gt; Result&lt;Config, Box&lt;Error&gt;&gt; {\n        if args.len() == 1 {\n            Ok(Config {\n                source: io::stdin(),\n                dest: io::stdout(),\n            })\n        } else if args.len() == 2 {\n            Ok(Config {\n                source: File::open(args[1])?,\n                dest: io::stdout(),\n            })\n        }\n    }\n}\n\nfn main() {\n    let mut config = Config::new(&amp;[\"\"]);\n}\n</code></pre>\n\n<p>This gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected 1, found 0\n  --&gt; src/main.rs:13:39\n   |\n13 |     fn new(args: &amp;[String]) -&gt; Result&lt;Config, Box&lt;Error&gt;&gt; {\n   |                                       ^^^^^^ expected 1 type argument\n</code></pre>\n"}, {"tags": ["rust", "x11", "xlib", "glium"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509291611, "post_id": 47001895, "comment_id": 80950678, "body": "The <a href=\"https://docs.rs/x11/2.16.0/x11/xlib/fn.XChangeProperty.html\" rel=\"nofollow noreferrer\">second-to-last argument of <code>XChangeProperty</code></a> is a <code>char *</code> \u2014 why are you creating an <code>Atom</code> for it and then casting it?"}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509312209, "post_id": 47001895, "comment_id": 80957261, "body": "@Shepmaster perhaps because the XChangeProperty man page very explicitly says you have to do just that (one needs to cast not the Atom itself but its <i>address</i> to <code>char*</code>, I&#39;m not sure what exactly Rust&#39;s <code>as *const u8</code> does)."}, {"owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "edited": false, "score": 0, "creation_date": 1509312936, "post_id": 47001895, "comment_id": 80957462, "body": "Thanks! I was able to figure it out. As for why an atom for the second-to-last argument, I was going by an example I found here: <a href=\"https://stackoverflow.com/a/31362328/8852117\">stackoverflow.com/a/31362328/8852117</a>"}, {"owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "edited": false, "score": 0, "creation_date": 1509313172, "post_id": 47001895, "comment_id": 80957527, "body": "When I try to pass the second-to-last argument as above, I still get a segfault though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509365901, "post_id": 47001895, "comment_id": 80976357, "body": "I see that you say that you figured it out and then edited your question. You also say it still segfaults. What is the current behavior of the posted code?"}, {"owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "edited": false, "score": 0, "creation_date": 1509377784, "post_id": 47001895, "comment_id": 80984685, "body": "Yeah sorry, I was unclear. I figured out how to pass the C strings from Rust (I think), but I still get the same segfault. When I pass the data argument as you said to do (so just pass the atom by value), it doesn&#39;t segfault, but doesn&#39;t seem to produce the desired behaviour either."}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 1, "creation_date": 1509389358, "post_id": 47001895, "comment_id": 80991495, "body": "I think you need to pass its address. In general you will have an array of those. The last argument is the length of the array (1 if passing a single element, but you still need to pass its address)."}, {"owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "edited": false, "score": 0, "creation_date": 1509392271, "post_id": 47001895, "comment_id": 80992950, "body": "I think that&#39;s what the cast to <code>*const u8</code> should do."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1509417558, "post_id": 47001895, "comment_id": 81001232, "body": "It looks like <code>XInternAtom</code> would return a small-ish integer (like <code>0x188</code> or <code>0x18A</code>). If you are indeed casting that to a raw pointer, then the pointer&#39;s value will point to the memory address <code>0x188</code> or <code>0x18A</code>, leading to the errors. Try <code>let x_foo = xlib::XInternAtom(x_display, x_type.as_ptr(), xlib::False); xlib::XChangeProperty(..., &amp;x_foo, 1);</code> as suggested by @n.m. (if that gives a type error, try <code>&amp;x_foo as const u8</code>)."}, {"owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "edited": false, "score": 0, "creation_date": 1509447575, "post_id": 47001895, "comment_id": 81013677, "body": "Alright, looks like it works now, but unfortunately the call doesn&#39;t have the effect I was hoping for (making the OpenGL window desktop background), so I can&#39;t be sure. Probably need to do some other thing I don&#39;t know about yet. I will post an answer with the code that I have. Thanks a lot in any case :)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509451181, "post_id": 47033769, "comment_id": 81015871, "body": "Please <b>do not</b> use <code>transmute</code>; there&#39;s almost never a reason to do so. Simple casts (maybe even 2 in a row) are always better. Your answer is very lacking in details \u2014 please describe what the changes are (so future readers don&#39;t have to diff the question and answer) and why they are needed."}], "tags": [], "owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "is_accepted": false, "score": -1, "last_activity_date": 1509451115, "last_edit_date": 1509451115, "creation_date": 1509447654, "answer_id": 47033769, "question_id": 47001895, "link": "https://stackoverflow.com/questions/47001895/why-does-calling-xchangeproperty-from-rust-and-glium-generate-a-segfault/47033769#47033769", "title": "Why does calling XChangeProperty from Rust and Glium generate a segfault?", "body": "<p>This should be the correct solution:</p>\n\n<pre><code>unsafe {\n    use x11::xlib;\n\n    let x_display = display.gl_window().platform_display() as *mut xlib::Display;\n    let x_window = display.gl_window().platform_window() as u64;\n    let x_type = CStr::from_bytes_with_nul(b\"_NET_WM_WINDOW_TYPE\\0\").unwrap();\n    let x_value = CStr::from_bytes_with_nul(b\"_NET_WM_WINDOW_TYPE_DESKTOP\\0\").unwrap();\n    let x_data = xlib::XInternAtom(x_display, x_value.as_ptr(), xlib::False);\n    xlib::XChangeProperty(\n        x_display,\n        x_window,\n        xlib::XInternAtom(x_display, x_type.as_ptr(), xlib::False),\n        xlib::XA_ATOM,\n        32,\n        xlib::PropModeReplace,\n        std::mem::transmute(&amp;x_data),\n        1,\n    );\n}\n</code></pre>\n"}], "owner": {"reputation": 1, "user_id": 8852117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1059359735574d1d384ce1e4c47603eb?s=128&d=identicon&r=PG&f=1", "display_name": "Aylmoa", "link": "https://stackoverflow.com/users/8852117/aylmoa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 279, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1509451115, "creation_date": 1509290657, "last_edit_date": 1509366593, "question_id": 47001895, "link": "https://stackoverflow.com/questions/47001895/why-does-calling-xchangeproperty-from-rust-and-glium-generate-a-segfault", "title": "Why does calling XChangeProperty from Rust and Glium generate a segfault?", "body": "<p>I'm trying to make an xlib call from Rust and I can't figure out why this code is giving me a segfault.</p>\n\n<p>main.rs:</p>\n\n<pre><code>extern crate glium;\nextern crate x11;\n\nfn main() {\n    let mut events_loop = glium::glutin::EventsLoop::new();\n    let context = glium::glutin::ContextBuilder::new();\n    let window = glium::glutin::WindowBuilder::new()\n        .with_dimensions(800, 600)\n        .with_title(\"Backr\");\n    let display = glium::Display::new(window, context, &amp;events_loop).unwrap();\n\n    unsafe {\n        use x11::xlib;\n\n        let x_display = display.gl_window().platform_display() as *mut xlib::Display;\n        let x_window = display.gl_window().platform_window() as u64;\n        let x_type = CStr::from_bytes_with_nul(b\"_NET_WM_WINDOW_TYPE\\0\").unwrap();\n        let x_value = CStr::from_bytes_with_nul(b\"_NET_WM_WINDOW_TYPE_DESKTOP\\0\").unwrap();\n        xlib::XChangeProperty(\n            x_display,\n            x_window,\n            xlib::XInternAtom(x_display, x_type.as_ptr(), xlib::False),\n            xlib::XA_ATOM,\n            32,\n            xlib::PropModeReplace,\n            xlib::XInternAtom(x_display, x_type.as_ptr(), xlib::False) as *const u8,\n            1,\n        );\n    }\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"rust-xlib\"\nversion = \"0.1.0\"\nauthors = [\"Me &lt;me@me.me&gt;\"]\n\n[dependencies]\nglium = \"*\" \nx11 = { version = \"*\", features = [\"xlib\"] }\n</code></pre>\n\n<p>The segmentation fault, as reported by Valgrind, is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Invalid read of size 8\n   at 0x4E7DC40: _XData32 (in /usr/lib/libX11.so.6.3.0)\n   by 0x4E58682: XChangeProperty (in /usr/lib/libX11.so.6.3.0)\n   by 0x126898: rust-xlib::main (main.rs:17)\n   by 0x362397: __rust_maybe_catch_panic (in /home/me/dev/rust-xlib/target/debug/rust-xlib)      \n   by 0x34F847: std::panicking::try (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n   by 0x34C325: std::rt::lang_start (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n   by 0x1269F2: main (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n Address 0x188 is not stack'd, malloc'd or (recently) free'd\n\n\nProcess terminating with default action of signal 11 (SIGSEGV): dumping core\n Access not within mapped region at address 0x18A\n   at 0x4E7DC40: _XData32 (in /usr/lib/libX11.so.6.3.0)\n   by 0x4E58682: XChangeProperty (in /usr/lib/libX11.so.6.3.0)\n   by 0x126898: rust-xlib::main (main.rs:17) \n   by 0x362397: __rust_maybe_catch_panic (in /home/me/dev/rust-xlib/target/debug/rust-xlib)      \n   by 0x34F847: std::panicking::try (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n   by 0x34C325: std::rt::lang_start (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n   by 0x1269F2: main (in /home/me/dev/rust-xlib/target/debug/rust-xlib)\n</code></pre>\n\n<p>From the error message it seems like there is something wrong with the <code>data</code> parameter to <code>XChangeProperty</code>, but I don't really know what might be wrong with it.</p>\n"}, {"tags": ["rust", "state", "nom"], "comments": [{"owner": {"reputation": 3250, "user_id": 1259779, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/6d554eab34f0b9d148747d9913b9244d?s=128&d=identicon&r=PG", "display_name": "derekdreery", "link": "https://stackoverflow.com/users/1259779/derekdreery"}, "edited": false, "score": 0, "creation_date": 1513972284, "post_id": 46997481, "comment_id": 82863258, "body": "I&#39;m not sure I know the answer -&gt; I&#39;m not sure what the question is, but I can explain a bit how macros work in <code>nom</code>. In functional languages you can have <a href=\"https://en.wikipedia.org/wiki/Partial_application\" rel=\"nofollow noreferrer\">partial application</a>, where passing some arguments to a function creates a new function asking for the remaining arguments. Nom sees combinators as these functions, where the last argument is the input, so passing other arguments in partial application creates concrete parsers. So <code>tag(&quot;a&quot;)</code> is a function expecting <code>i</code>, and <code>tag(i, &quot;a&quot;)</code> is an actual command to apply the parser.Hope I help"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1513973921, "post_id": 47946743, "comment_id": 82863752, "body": "I&#39;d go ahead and move your comment into your answer \u2014 comments are ephemeral, answers less so."}], "tags": [], "owner": {"reputation": 3250, "user_id": 1259779, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/6d554eab34f0b9d148747d9913b9244d?s=128&d=identicon&r=PG", "display_name": "derekdreery", "link": "https://stackoverflow.com/users/1259779/derekdreery"}, "is_accepted": false, "score": 1, "last_activity_date": 1513972584, "creation_date": 1513972584, "answer_id": 47946743, "question_id": 46997481, "link": "https://stackoverflow.com/questions/46997481/adding-state-to-a-nom-parser/47946743#47946743", "title": "Adding state to a nom parser", "body": "<p>When I need to do something complicated with <code>nom</code>, I normally write my own functions.</p>\n\n<p>For example</p>\n\n<pre><code>named!(my_func&lt;T&gt;, &lt;my_macros&gt;);\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>fn my_func(i: &amp;[u8]) -&gt; nom::IResult&lt;T, &amp;[u8]&gt; {\n    &lt;my_macros&gt;\n}\n</code></pre>\n\n<p>with the proviso that you must pass <code>i</code> to the macro (see my comment).</p>\n\n<p>Creating your own function means you can have any control flow you want in there, and it will play nice with <code>nom</code> as long as it takes a &amp;[u8] and returns nom::IResult where the output &amp;[u8] is the remaining unparsed raw input.</p>\n\n<p>If you need some more info comment and I'll try to improve my answer!</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 701, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1513972584, "creation_date": 1509258841, "question_id": 46997481, "link": "https://stackoverflow.com/questions/46997481/adding-state-to-a-nom-parser", "title": "Adding state to a nom parser", "body": "<p>I wrote a parser in nom that is completely stateless, now I need to wrap it in a few stateful layers.</p>\n\n<p>I have a top-level parsing function named <code>alt_fn</code> that will provide me the next bit of parsed output as an enum variant, the details of which probably aren't important.</p>\n\n<p>I have three things I need to do that involve state:</p>\n\n<p>1) I need to conditionally perform a transformation on the output of <code>alt_fn</code> if there is a match in a non-mutable HashMap that is part of my <code>State</code> struct. This should basically be like a <code>map!</code> but as a method call on my struct. Something like this:</p>\n\n<pre><code>named!(alt_fn&lt;AllTags&gt; ,alt!(// snipped for brevity));\n\nfn applyMath(self, i:AllTags)-&gt;AllTags { // snipped for brevity }\n\nmethod!(apply_math&lt;State, &amp;[u8], AllTags&gt;, mut self, call_m!(self.applyMath, call!(alt_fn)));\n</code></pre>\n\n<p>This currently gives me: <code>error: unexpected end of macro invocation</code> with <code>alt_fn</code> underlined. </p>\n\n<p>2) I need to update the other fields of the state struct with the data I got from the input (such as computing checksums and updating timestamps, etc.), and then transform the output again with this new knowledge. This will probably look like the following:</p>\n\n<pre><code>fn updateState(mut self, i:AllTags) -&gt; AllTags { // snipped for brevity }\n\nmethod!(update_state&lt;State, &amp;[u8], AllTags&gt;, mut self, call_m!(self.updateState, call_m!(self.applyMath)));\n</code></pre>\n\n<p>3) I need to call the method from part two repeatedly until all the input is used up:</p>\n\n<p><code>method!(pub parse&lt;State,&amp;[u8],Vec&lt;AllTags&gt;&gt;, mut self, many1!(update_state));</code></p>\n\n<p>Unfortunately the <code>nom</code> docs are pretty limited, and I'm not great with macro syntax so I don't know what I'm doing wrong.</p>\n"}, {"tags": ["file", "iterator", "rust", "byte", "endianness"], "comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1509255847, "post_id": 46997109, "comment_id": 80941009, "body": "Try <code>hexdump -C</code>"}, {"owner": {"reputation": 2105, "user_id": 870079, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/58fd7fa8ab09a8a4c7b204f67e3f818e?s=128&d=identicon&r=PG", "display_name": "heinrich5991", "link": "https://stackoverflow.com/users/870079/heinrich5991"}, "edited": false, "score": 1, "creation_date": 1509306217, "post_id": 46997109, "comment_id": 80955365, "body": "@pipsqueaker117 If you answer your own question, could you do it as an answer so you can mark it as resolved?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509385613, "post_id": 46997109, "comment_id": 80989479, "body": "Yes, please remove the edited part and post it as an answer. It is <a href=\"https://stackoverflow.com/help/self-answer\">perfectly fine</a> to answer your own question on stackoverflow."}], "answers": [{"tags": [], "owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "is_accepted": false, "score": -1, "last_activity_date": 1509384011, "creation_date": 1509384011, "answer_id": 47020903, "question_id": 46997109, "link": "https://stackoverflow.com/questions/46997109/why-does-filebytes-iterate-over-bytes-in-a-different-order-than-hexdump/47020903#47020903", "title": "Why does File::bytes iterate over bytes in a different order than hexdump?", "body": "<p>I would recommend using the <a href=\"https://crates.io/crates/bytes\" rel=\"nofollow noreferrer\"><code>Bytes</code> create</a>, you should be able to write your <code>parse_int</code> function as:</p>\n\n<pre><code>use bytes::{ByteOrder, BigEndian, LittleEndian};\n\nfn parse_int(index: usize, vector: &amp;[u8]) -&gt; u32 {\n    // BigEndian/Little Edian here should be determined by the file format, NOT the system format\n    LittleEndian::read_u32(&amp;vector[index])\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "edited": false, "score": 0, "creation_date": 1511126996, "post_id": 47024258, "comment_id": 81717009, "body": "hexdump defaults to its <code>-x</code> option which displays every 2 bytes as one hexadecimal number."}], "tags": [], "owner": {"reputation": 2078, "user_id": 1543167, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c85198928645d89fed5cd61c1b684bb4?s=128&d=identicon&r=PG", "display_name": "pipsqueaker117", "link": "https://stackoverflow.com/users/1543167/pipsqueaker117"}, "is_accepted": false, "score": 0, "last_activity_date": 1509398240, "last_edit_date": 1509398240, "creation_date": 1509398064, "answer_id": 47024258, "question_id": 46997109, "link": "https://stackoverflow.com/questions/46997109/why-does-filebytes-iterate-over-bytes-in-a-different-order-than-hexdump/47024258#47024258", "title": "Why does File::bytes iterate over bytes in a different order than hexdump?", "body": "<p>It seems that <code>hexdump</code> was what was actually displaying in the wrong order. <code>hexdump -C</code> reads it correctly.</p>\n"}, {"tags": [], "owner": {"reputation": 1955, "user_id": 8967928, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c0acd9a5526f9cfc04266e4e2b83f60?s=128&d=identicon&r=PG&f=1", "display_name": "lockcmpxchg8b", "link": "https://stackoverflow.com/users/8967928/lockcmpxchg8b"}, "is_accepted": true, "score": 2, "last_activity_date": 1511228152, "creation_date": 1511228152, "answer_id": 47403843, "question_id": 46997109, "link": "https://stackoverflow.com/questions/46997109/why-does-filebytes-iterate-over-bytes-in-a-different-order-than-hexdump/47403843#47403843", "title": "Why does File::bytes iterate over bytes in a different order than hexdump?", "body": "<p>Jan Zerebecki's comment is correct, but might benefit from a little elaboration:</p>\n\n<p>Hexdump defaults to showing you the file as a collection of 16-bit integer values.  The reason they appear to be in the 'wrong order' is that Hexdump respects the endianness of the host computer, and you ran it on a little-endian machine.</p>\n\n<p>Lets do an example using hexdump's custom output-format option.  First, we'll write an xxd-compatible hexdump, and convert it to binary.</p>\n\n<pre><code>$ echo 00000000: 01 23 45 67 89 ab cd ef &gt; num.hex\n$ xxd -r num.hex num.bin\n</code></pre>\n\n<p>Then we'll prove to ourselves that hexdump <em>can</em> read it using the canonical output mode:</p>\n\n<pre><code>$ hexdump -C num.bin\n00000000  01 23 45 67 89 ab cd ef                           |.#Eg....|\n00000008\n</code></pre>\n\n<p>Next, we'll use it's rather obscure output-format option to show the values as hex, but choosing 1,2,4,and 8 bytes at a time:</p>\n\n<pre><code>$ hexdump -e '1/1 \"%02x \"' num.bin\n01 23 45 67 89 ab cd ef\n$ hexdump -e '1/2 \"%02x \"' num.bin\n2301 6745 ab89 efcd\n$ hexdump -e '1/4 \"%02x \"' num.bin\n67452301 efcdab89\n$ hexdump -e '1/8 \"%02x \"' num.bin\nefcdab8967452301\n</code></pre>\n\n<p>What you see is hexdump interpreting those bytes as little-endian integers of varying size, and performing the byte-swap required to place the most-significant-digit on the left...the way we like to represent numbers.</p>\n"}], "owner": {"reputation": 2078, "user_id": 1543167, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c85198928645d89fed5cd61c1b684bb4?s=128&d=identicon&r=PG", "display_name": "pipsqueaker117", "link": "https://stackoverflow.com/users/1543167/pipsqueaker117"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 536, "favorite_count": 0, "accepted_answer_id": 47403843, "answer_count": 3, "score": 1, "last_activity_date": 1511228152, "creation_date": 1509254771, "last_edit_date": 1509398226, "question_id": 46997109, "link": "https://stackoverflow.com/questions/46997109/why-does-filebytes-iterate-over-bytes-in-a-different-order-than-hexdump", "title": "Why does File::bytes iterate over bytes in a different order than hexdump?", "body": "<p>I'm trying to read some raw bytes of a file, so I looked at the docs and threw together a function which looks like it should read the bytes into a vector and read the 32-bit integer starting at the head.</p>\n\n<pre><code>fn filetobytes(name: &amp;'static str) -&gt; Vec&lt;u8&gt; {\n    let file = File::open(name).expect(\"No such file\");\n    let filebytes: Vec&lt;u8&gt; = file.bytes().map(|readbyte| readbyte.unwrap()).collect();\n\n    return filebytes;\n}\n\nfn parse_int(index: usize, vector: &amp;Vec&lt;u8&gt;) -&gt; u32 {\n    let mut num: u32 = 0;\n    for i in 0..4 {\n        num = num &lt;&lt; 8;\n        num = num | ((vector[index + i] as u32) &amp; 0xff);\n        println!(\"Byte is {:x}\", vector[index + i]);\n    }\n    return num;\n}\n\nfn main() {\n    let filebytes = filetobytes(\"diddy.h\");\n    println!(\"0x{:x}\", parse_int(0, &amp;filebytes));\n}\n</code></pre>\n\n<p>I then tried to move forward, but quickly discovered that none of my logic was working. After doing some sniffing, I found that I wasn't getting bytes in the order I expected. For instance, the above code (which prints the first four bytes separately then composited as an integer) produces the following output </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Byte is 23\nByte is 64\nByte is 65\nByte is 66\n0x23646566\n</code></pre>\n\n<p>If I do a <code>hexdump</code> on <code>diddy.h</code>, I get the following output.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0000000 6423 6665 6e69 2065 4944 4444 5f59 4957\n0000010 5444 2048 3031 0a35 6423 6665 6e69 2065\n0000020 4944 4444 5f59 4548 4749 5448 3120 3035\n0000030 630a 6e6f 7473 7520 736e 6769 656e 2064\n0000040 6873 726f 2074 6964 6464 5f79 6164 6174\n0000050 315b 3735 3035 3b5d 000a               \n0000059\n</code></pre>\n\n<p>Oddly enough, it seems that <code>vector[0]</code> accesses byte 1, <code>vector[1]</code> accesses byte 0, <code>vector[2]</code> gets byte 3, <code>vector[3]</code> gets byte 2, and so on.</p>\n\n<p>What could I have possibly done to cause this behavior, and how I can fix it?</p>\n"}, {"tags": ["multithreading", "rust", "channel"], "answers": [{"tags": [], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "is_accepted": true, "score": 2, "last_activity_date": 1509232916, "creation_date": 1509232916, "answer_id": 46995459, "question_id": 46995458, "link": "https://stackoverflow.com/questions/46995458/receiver-closing-and-returning-a-senderror-on-attempt-to-send-over-channel/46995459#46995459", "title": "Receiver closing and returning a SendError on attempt to send over channel", "body": "<p>As it turns out, the problem was that I had forgotten to put the message-receiving code in the child thread in an infinite loop, so as soon as it received its first message, it quit and the corresponding channel closed.</p>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 238, "favorite_count": 0, "accepted_answer_id": 46995459, "answer_count": 1, "score": 1, "last_activity_date": 1509232916, "creation_date": 1509232916, "question_id": 46995458, "link": "https://stackoverflow.com/questions/46995458/receiver-closing-and-returning-a-senderror-on-attempt-to-send-over-channel", "title": "Receiver closing and returning a SendError on attempt to send over channel", "body": "<p>I'm trying to set up a two-way communication between two threads: the child thread can both send to and receive from the parent, and the parent can both send to and receive from the child. Due to the fact that channels in Rust are unidirectional, I'm using a set of two channels, organized like this (a snippet from my homebrewed threading library):</p>\n\n<pre><code>let (tx, rx) = channel();\nlet (tx2, rx2) = channel();\n\n(Endpoint {\n     sender: tx2,\n     receiver: rx,\n },\n Endpoint {\n     sender: tx,\n     receiver: rx2,\n })\n</code></pre>\n\n<p>My code in my setup function looks like this:</p>\n\n<pre><code>let BiChannel {\n    e1: world,\n    e2: thread,\n} = BiChannel::new();\n\nlet ws = WorldState {\n    ...\n    thread_endpoint: thread,\n};\nstd::thread::spawn(threading::handle_life(world));\n</code></pre>\n\n<p>In this snippet, the <code>threading::handle_life</code> function returns a move closure that uses the Endpoint passed (<code>world</code> in the code above) to communicate to the parent thread, while the parent thread uses <code>ws.thread_endpoint</code> to talk to the child thread.</p>\n\n<p>I'm calling unwrap on all calls to <code>send</code> on the endpoints, so if if it fails to send, it crashes. Sure enough, I'm getting a runtime error that looks like this:</p>\n\n<pre><code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: \"SendError(..)\"', src/libcore/result.rs:860\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>The documentation on this is pretty scanty, but what little I could figure out was that this only happens if the channel is closed.</p>\n"}, {"tags": ["collections", "iterator", "rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509228979, "post_id": 46994934, "comment_id": 80936466, "body": "<i>if it were turned into a generic (safe) function</i> \u2014 no such generic safe function is remotely possible. Since that code originally came from Stack Overflow, I updated your link; it now points to the version of the code that is littered with warnings about under exactly which conditions it is valid."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1509229061, "post_id": 46994934, "comment_id": 80936491, "body": "Your text seem to talk about your real world example while your code is just a (more or less) minimal example (which is good!). But maybe you can edit your text to match your code example. This means: removing the mentions of listeners and weak pointer. If I correctly understand your question, it&#39;s basically &quot;How can I remove specific elements of a linked list while iterating over it without creating a new list?&quot;, right?"}, {"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1509229205, "post_id": 46994934, "comment_id": 80936517, "body": "@LukasKalbertodt That&#39;s pretty much it, I included the extra information with the intent of explaining why I could not simply consume <code>self</code> and why I wanted to avoid cloning (and later realized cloning was not terrible). Will simplify..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509229207, "post_id": 46994934, "comment_id": 80936519, "body": "As the <code>LinkedList</code> documentation itself states: <i>Almost always it is better to use <code>Vec</code> or <code>VecDeque</code> instead of <code>LinkedList</code></i> and <code>Vec</code> <a href=\"https://stackoverflow.com/q/37792471/155423\">has a method to do exactly what you want</a>. Now we have to figure out how to do the same with a <code>LinkedList</code>."}, {"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509229514, "post_id": 46994934, "comment_id": 80936594, "body": "@Shepmaster Honestly, you probably are right, I chose a LinkedList because it never needs to be index-wise accessed, and would periodically be appended to and filtered."}, {"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1509382873, "post_id": 46994934, "comment_id": 80987796, "body": "At this point, it seems clear that <code>Vec</code> is clearly a better choice, and as was pointed out, the issue may be primary a result of an under-developed <code>LinkedList</code> API in Rust. <a href=\"https://github.com/rust-lang/rust/issues/39148\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/39148</a>"}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1509281535, "post_id": 46997897, "comment_id": 80947307, "body": "Note that Rust&#39;s built-in collections normally have very cheap empty states, and <a href=\"https://doc.rust-lang.org/src/alloc/linked_list.rs.html#246\" rel=\"nofollow noreferrer\">this holds for <code>LinkedList</code></a>."}, {"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1509382456, "post_id": 46997897, "comment_id": 80987550, "body": "Yes that would work, and yes it would not be too expensive, but I was trying to avoid it because logically it seems stupid. For example, we have the <code>retain</code> function for <code>Vec</code> which implements exactly the desired functionality, and in another language such as C++/Java, you could simply remove the elements while iterating."}, {"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1509383003, "post_id": 46997897, "comment_id": 80987865, "body": "That said, I think this may be the best solution at present given the Rust API short of switching to a <code>Vec</code>."}], "tags": [], "owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "is_accepted": true, "score": 2, "last_activity_date": 1509262697, "creation_date": 1509262697, "answer_id": 46997897, "question_id": 46994934, "link": "https://stackoverflow.com/questions/46994934/how-do-you-replace-the-value-of-a-mutable-variable-by-taking-ownership-of-it/46997897#46997897", "title": "How do you replace the value of a mutable variable by taking ownership of it?", "body": "<p>You can <code>std::mem::swap</code> your field with a temp, and then replace it with your modified list like this. The big downside is the creation of the new LinkedList. I don't know how expensive that is.</p>\n\n<pre><code>pub fn remove_negative(&amp;mut self) {\n    let mut temp = LinkedList::new();\n    std::mem::swap(&amp;mut temp, &amp;mut self.list);\n\n    self.list = temp.into_iter()\n         .filter(|&amp;x| x &gt; 0)\n         .collect();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1509382735, "post_id": 46998229, "comment_id": 80987717, "body": "While cloning is sort of an option in my case, I am actually using Arc, so it would now add an additional synchronization overhead."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 0, "last_activity_date": 1509265736, "creation_date": 1509265736, "answer_id": 46998229, "question_id": 46994934, "link": "https://stackoverflow.com/questions/46994934/how-do-you-replace-the-value-of-a-mutable-variable-by-taking-ownership-of-it/46998229#46998229", "title": "How do you replace the value of a mutable variable by taking ownership of it?", "body": "<p>If the goal is not clone you may use a reference-counting pointer: the clone method on Rc increments the reference counter.</p>\n\n<pre><code>use std::collections::LinkedList;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Example {\n    list: LinkedList&lt;Rc&lt;i8&gt;&gt;,\n    // ...\n}\n\nimpl Example {\n    pub fn default() -&gt; Example {\n        let mut list = LinkedList::new();\n        list.push_back(Rc::new(-5));\n        list.push_back(Rc::new(3));\n        list.push_back(Rc::new(-1));\n        list.push_back(Rc::new(6));\n        Example { list }\n    }\n\n    // Simmilar idea, but with creating a new list\n    pub fn get_positive(&amp;self) -&gt; LinkedList&lt;Rc&lt;i8&gt;&gt; {\n        self.list.iter()\n            .filter(|&amp;x| x.as_ref() &gt; &amp;0)\n            .map(|x| x.clone())\n            .collect()\n    }\n\n    // Now, attempt to filter the elements without cloning anything\n    pub fn remove_negative(&amp;mut self) {\n        self.list = self.list.iter()\n            .filter(|&amp;x| x.as_ref() &gt; &amp;0)\n            .map(|x| x.clone())\n            .collect()\n    }\n\n\n}\n\n\nfn main() {\n    let mut e = Example::default();\n    e.remove_negative();\n    println!(\"{:?}\", e.get_positive());\n    println!(\"{:?}\", e);\n}\n</code></pre>\n"}], "owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 506, "favorite_count": 0, "accepted_answer_id": 46997897, "answer_count": 2, "score": 1, "last_activity_date": 1509265736, "creation_date": 1509228162, "last_edit_date": 1509229361, "question_id": 46994934, "link": "https://stackoverflow.com/questions/46994934/how-do-you-replace-the-value-of-a-mutable-variable-by-taking-ownership-of-it", "title": "How do you replace the value of a mutable variable by taking ownership of it?", "body": "<p>I am working with a <code>LinkedList</code> and I want to remove all elements which do not pass a test. However, I am running into the error <code>cannot move out of borrowed content</code>.</p>\n\n<p>From what I understand, this is because I am working with <code>&amp;mut self</code>, so I do not have the right to invalidate (i.e. move) one of the contained values even for a moment to construct a new list of its values.</p>\n\n<p>In C++/Java, I would simply iterate the list and remove any elements which match a criteria. As there is no remove that I have yet found, I have interpreted it as an iterate, filter, and collect.</p>\n\n<p>The goal is to avoid creating a temporary list, cloning values, and needing take <code>self</code> and return a \"new\" object. I have constructed an example which produces the same error. <a href=\"https://play.rust-lang.org/?gist=f291b25115ccfee4f936801024ef7cb3&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a>.</p>\n\n<pre><code>use std::collections::LinkedList;\n\n#[derive(Debug)]\nstruct Example {\n    list: LinkedList&lt;i8&gt;,\n    // Other stuff here\n}\n\nimpl Example {\n    pub fn default() -&gt; Example {\n        let mut list = LinkedList::new();\n        list.push_back(-5);\n        list.push_back(3);\n        list.push_back(-1);\n        list.push_back(6);\n        Example { list }\n    }\n\n    // Simmilar idea, but with creating a new list\n    pub fn get_positive(&amp;self) -&gt; LinkedList&lt;i8&gt; {\n        self.list.iter()\n            .filter(|&amp;&amp;x| x &gt; 0)\n            .map(|x| x.clone())\n            .collect()\n    }\n\n    // Now, attempt to filter the elements without cloning anything\n    pub fn remove_negative(&amp;mut self) {\n        self.list = self.list.into_iter()\n            .filter(|&amp;x| x &gt; 0)\n            .collect()\n    }\n}\n\nfn main() {\n    let mut e = Example::default();\n    println!(\"{:?}\", e.get_positive());\n    println!(\"{:?}\", e);\n}\n</code></pre>\n\n<p>In my actual case, I cannot simply consume the wrapping object because it needs to be referenced from different places and contains other important values.</p>\n\n<p>In my research, I found some <a href=\"https://stackoverflow.com/q/29570781/155423\">unsafe code</a> which leads me to question if a safe function could be constructed to perform this action in a similar way to <a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>std::mem::replace</code></a>.</p>\n"}, {"tags": ["rust", "reference-counting", "borrow-checker"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1509228480, "post_id": 46993973, "comment_id": 80936335, "body": "Reference counting is done by <code>Rc</code> or <code>Arc</code>, not <code>RefCell</code>. You can put <code>RefCell</code> inside <code>Rc</code> to make it both mutable and reference counted."}, {"owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509234002, "post_id": 46993973, "comment_id": 80937572, "body": "@Shepmaster, please unmark this as duplicated, so people can contribute."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1509235286, "post_id": 46993973, "comment_id": 80937786, "body": "It&#39;s still a duplicate, the specific detail you need was in a comment. Since that appears to be hard to find, I&#39;ve moved it into the accepted answer (it&#39;s also exactly what @interjay said \u2014 <code>Rc</code> or <code>Arc</code>)."}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1169, "favorite_count": 1, "closed_date": 1509229063, "answer_count": 0, "score": 2, "last_activity_date": 1510914919, "creation_date": 1509221219, "last_edit_date": 1510914919, "question_id": 46993973, "link": "https://stackoverflow.com/questions/46993973/how-can-i-organize-multiple-references-to-the-same-object-in-rust-with-reference", "closed_reason": "Duplicate", "title": "How can I organize multiple references to the same object in Rust with reference counting?", "body": "<p>I have a struct representing polynome and I want multiple polynomes to reference the same <strong>mutable</strong> <code>Aliases</code> object. In JavaScript, I'd create an instance of the <code>Aliases</code> object and assign it to <code>p1.aliases</code>, <code>p2.aliases</code> and so on. In Rust, as far as I understand, I need to use <code>RefCell</code>, which should perform reference counting, because there is no garbage collector in Rust:</p>\n\n<pre><code>extern crate rand;\n\nuse std::collections::HashMap;\nuse std::cell::RefCell;\nuse std::collections::*;\n\npub struct Aliases {\n    pub idx_to_name: HashMap&lt;i16, String&gt;,\n    pub name_to_idx: HashMap&lt;String, i16&gt;,\n}\n\npub struct Polynome {\n    pub poly: BTreeMap&lt;i16, f64&gt;,\n    pub aliases: RefCell&lt;Aliases&gt;,\n}\n\nimpl Aliases {\n    pub fn new() -&gt; Aliases {\n        Aliases {\n            idx_to_name: HashMap::new(),\n            name_to_idx: HashMap::new(),\n        }\n    }\n}\n\nimpl Polynome {\n    pub fn new() -&gt; Polynome {\n        Polynome {\n            poly: BTreeMap::new(),\n            aliases: RefCell::new(Aliases::new()),\n        }\n    }\n    pub fn clone(&amp;self) -&gt; Polynome {\n        Polynome {\n            poly: self.poly.clone(),\n            aliases: self.aliases,\n        }\n    }\n}\n</code></pre>\n\n<p>But I get compilation error in <code>clone()</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:36:22\n   |\n36 |             aliases: self.aliases,\n   |                      ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>what is the right way to clone <code>Polynome</code>, so that all clones reference the same <code>Aliases</code> instance?</p>\n\n<p>Please note that this question is not duplicate of <a href=\"https://stackoverflow.com/questions/28418584/how-to-represent-shared-mutable-state\">How to represent shared mutable state?</a>. Because if I try to organize reference with lifetime declaration as proposed there:</p>\n\n<pre><code>pub struct Polynome&lt;'a&gt; {\n    pub poly: BTreeMap&lt;i16, f64&gt;,\n    pub aliases: &amp;'a RefCell&lt;Aliases&gt; \n}\n</code></pre>\n\n<p>then I get 'doesn't live long enough' problem instead of 'can not move out':</p>\n\n<pre><code>pub fn new() -&gt; Polynome&lt;'a&gt; {\n    let alias= RefCell::new (Aliases::new());\n    Polynome {\n        poly: BTreeMap::new(),\n        aliases: &amp;alias,\n    }\n}\n\n     error[E0597]: `alias` does not live long enough\n   |\n24 |             aliases: &amp;alias,\n   |                       ^^^^^ does not live long enough\n25 |         }\n26 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the impl at 19:1...\n</code></pre>\n\n<p>How should I create Aliases instance if I need it to live outside ::new()?</p>\n"}, {"tags": ["rust", "serde", "serde-json"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509226771, "post_id": 46993079, "comment_id": 80935898, "body": "Why have you chosen a <code>Vec</code> to represent a JSON object? How do you expect those values to transfer? In fact, if the API <b>always</b> returns an object (or array, whatever), why do you even have an <code>Option</code> in your struct?"}, {"owner": {"reputation": 175, "user_id": 4776496, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c319ce7e959e835122dd719320005556?s=128&d=identicon&r=PG&f=1", "display_name": "kper", "link": "https://stackoverflow.com/users/4776496/kper"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509257946, "post_id": 46993079, "comment_id": 80941344, "body": "Yeah you are right the structure of the structs was wrong. I edited the code"}], "answers": [{"tags": [], "owner": {"reputation": 175, "user_id": 4776496, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c319ce7e959e835122dd719320005556?s=128&d=identicon&r=PG&f=1", "display_name": "kper", "link": "https://stackoverflow.com/users/4776496/kper"}, "is_accepted": true, "score": 6, "last_activity_date": 1509258315, "creation_date": 1509258315, "answer_id": 46997436, "question_id": 46993079, "link": "https://stackoverflow.com/questions/46993079/how-do-i-change-serdes-default-implementation-to-return-an-empty-object-instead/46997436#46997436", "title": "How do I change Serde&#39;s default implementation to return an empty object instead of null?", "body": "<p>I solved this problem differently with no need to change the default implementation. I used serde's <a href=\"https://serde.rs/field-attrs.html\" rel=\"noreferrer\">field attributes</a> to skip the <code>intent</code> property when the Option is <code>None</code>. Because there is only one property in the struct <code>Intents</code>, this will create an empty object.</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct TextMessage {\n    pub mid: String,\n    pub seq: u64,\n    pub text: String,\n    pub nlp: NLP,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct NLP {\n    pub entities: Intents,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct Intents {\n    #[serde(skip_serializing_if=\"Option::is_none\")]\n    intent: Option&lt;Vec&lt;Intent&gt;&gt;,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct Intent {\n    confidence: f64,\n    value: String,\n}\n</code></pre>\n"}], "owner": {"reputation": 175, "user_id": 4776496, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c319ce7e959e835122dd719320005556?s=128&d=identicon&r=PG&f=1", "display_name": "kper", "link": "https://stackoverflow.com/users/4776496/kper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2073, "favorite_count": 0, "accepted_answer_id": 46997436, "answer_count": 1, "score": 2, "last_activity_date": 1509258315, "creation_date": 1509215373, "last_edit_date": 1509257885, "question_id": 46993079, "link": "https://stackoverflow.com/questions/46993079/how-do-i-change-serdes-default-implementation-to-return-an-empty-object-instead", "title": "How do I change Serde&#39;s default implementation to return an empty object instead of null?", "body": "<p>I'm developing an API wrapper and I'm having some troubles with the deserialization of an empty JSON object. </p>\n\n<p>The API returns this JSON object. Mind the empty object at <code>entities</code>:</p>\n\n<pre><code>{\n  \"object\": \"page\",\n  \"entry\": [\n    {\n      \"id\": \"1158266974317788\",\n      \"messaging\": [\n        {\n          \"sender\": {\n            \"id\": \"some_id\"\n          },\n          \"recipient\": {\n            \"id\": \"some_id\"\n          },\n          \"message\": {\n            \"mid\": \"mid.$cAARHhbMo8SBllWARvlfZBrJc3wnP\",\n            \"seq\": 5728,\n            \"text\": \"test\",\n            \"nlp\": {\n              \"entities\": {} // &lt;-- here\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n\n<p>This is my equivalent struct of the <code>message</code> property (<strong>edited</strong>):</p>\n\n<pre><code> #[derive(Serialize, Deserialize, Clone, Debug)]\npub struct TextMessage {\n    pub mid: String,\n    pub seq: u64,\n    pub text: String,\n    pub nlp: NLP,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct NLP {\n    pub entities: Intents,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct Intents {\n    intent: Option&lt;Vec&lt;Intent&gt;&gt;,\n}\n\n#[derive(Serialize, Deserialize, Clone, Debug)]\npub struct Intent {\n    confidence: f64,\n    value: String,\n}\n</code></pre>\n\n<p>Serde's default is to deserialize <code>Option</code>s, which are <code>None</code>, with <code>::serde_json::Value::Null</code>.</p>\n"}, {"tags": ["rust", "package", "rust-cargo", "rust-crates"], "comments": [{"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1509203138, "post_id": 46985349, "comment_id": 80928789, "body": "I&#39;ve edited the question."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1509204330, "post_id": 46985349, "comment_id": 80929213, "body": "Awesome, thank you :)"}], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 2, "last_activity_date": 1509203547, "creation_date": 1509203547, "answer_id": 46991210, "question_id": 46985349, "link": "https://stackoverflow.com/questions/46985349/install-unregistered-crate-with-cargo/46991210#46991210", "title": "Install unregistered crate with cargo", "body": "<p>There are two options:</p>\n\n<p>add this to Cargo.toml:</p>\n\n<pre><code>[dependencies]\n\"bichannels\" = {git = \"https://github.com/wilbertom/bichannels\"}\n</code></pre>\n\n<p>Or git clone locally the lib and use:</p>\n\n<pre><code>[dependencies]\n\"bichannels\" = {path = \"&lt;roor_dir_of_your_clone&gt;\"}\n</code></pre>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 0, "closed_date": 1509206402, "accepted_answer_id": 46991210, "answer_count": 1, "score": 1, "last_activity_date": 1513187651, "creation_date": 1509153261, "last_edit_date": 1513187651, "question_id": 46985349, "link": "https://stackoverflow.com/questions/46985349/install-unregistered-crate-with-cargo", "closed_reason": "Duplicate", "title": "Install unregistered crate with cargo", "body": "<p>I have a crate (<a href=\"https://github.com/wilbertom/bichannels\" rel=\"nofollow noreferrer\">https://github.com/wilbertom/bichannels</a>) that is not registered on crates.io. I would like to add it to my current crate, as a dependency. I've tried going into its directory (placed inside the outer crate) and running <code>cargo install</code>, but that doesn't work, instead, giving this error:</p>\n\n<pre><code>error: no packages found with binaries or examples\n</code></pre>\n\n<p>So it appears that one can only install a binary crate, but how do I add a library crate to my dependencies? I've tried adding:</p>\n\n<pre><code>bichannels = \"*\"\n</code></pre>\n\n<p>to my Cargo.toml but that just says that this package is not on crates.io.</p>\n"}, {"tags": ["macros", "rust", "println"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 4, "last_activity_date": 1509135758, "creation_date": 1509135758, "answer_id": 46982864, "question_id": 46982715, "link": "https://stackoverflow.com/questions/46982715/how-to-make-a-macro-that-dynamically-prints-an-integer-in-hex-with-leading-zeros/46982864#46982864", "title": "How to make a macro that dynamically prints an integer in hex with leading zeros", "body": "<p>You don't really need a macro for this. With the <a href=\"https://doc.rust-lang.org/stable/std/fmt/index.html#width\" rel=\"nofollow noreferrer\">Formatter's dollar syntax</a>, the width of the printed value can be specified in terms of an expression, as you intend here.</p>\n\n<pre><code>fn hex&lt;T: UpperHex&gt;(e: T) {\n    println!(\"{:01$X}\", e, mem::align_of::&lt;T&gt;() * 2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b1e29d65ffca3d6f61e86a1bac782e56&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 5, "last_activity_date": 1509136320, "creation_date": 1509136320, "answer_id": 46982989, "question_id": 46982715, "link": "https://stackoverflow.com/questions/46982715/how-to-make-a-macro-that-dynamically-prints-an-integer-in-hex-with-leading-zeros/46982989#46982989", "title": "How to make a macro that dynamically prints an integer in hex with leading zeros", "body": "<p>Instead of directly printing it somewhere I suggest using a wrapper structure which will format the content according to your needs:</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\npub struct UpperHexLeadingZeroes&lt;T&gt;(pub T);\nimpl&lt;T: fmt::UpperHex&gt; fmt::Display for UpperHexLeadingZeroes&lt;T&gt; {\n    fn fmt(&amp;self, w: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        use std::mem::size_of;\n        let width = size_of::&lt;T&gt;() * 2; // 2 nibbles per byte\n        write!(w, \"${:0width$X}\", self.0, width = width)\n    }\n}\n</code></pre>\n\n<p>Use it like this:</p>\n\n<pre><code>fn main() {\n    println!(\"{}\", UpperHexLeadingZeroes(2u8));\n    println!(\"{}\", UpperHexLeadingZeroes(2u16));\n    println!(\"{}\", UpperHexLeadingZeroes(2u32));\n    println!(\"{}\", UpperHexLeadingZeroes(2u64));\n}\n</code></pre>\n"}], "owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 215, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1509207124, "creation_date": 1509135118, "last_edit_date": 1509207124, "question_id": 46982715, "link": "https://stackoverflow.com/questions/46982715/how-to-make-a-macro-that-dynamically-prints-an-integer-in-hex-with-leading-zeros", "title": "How to make a macro that dynamically prints an integer in hex with leading zeros", "body": "<p>I am looking to create a macro that will display a type of number in hex along leading zeros equal to its size. For example, <code>hex!(2u8)</code> will print <code>$02</code> (leading zero) and <code>hex!(2u16)</code> will print <code>$0002</code> (16bit leading zeros)</p>\n\n<p>This is what I have now, but it only works for 8bit numbers. It will display numbers larger than 8bit, but it won't display leading zeros equal to the size. I need a way to substitute the size of the integer in for <code>2</code> in <code>${:02X}</code> but the <code>print!()</code> macro requires a string literal.</p>\n\n<pre><code>macro_rules! hex {\n    ($val:expr) =&gt; {{\n        println!(\"${:02X}\", $val);\n    }}\n}\n</code></pre>\n"}, {"tags": ["syntax", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1509128911, "post_id": 46981148, "comment_id": 80910128, "body": "It&#39;s the other way around: <code>if let glutin::Event::WindowEvent { event, .. } = event { ... }</code>"}, {"owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1509129294, "post_id": 46981148, "comment_id": 80910308, "body": "Thanks @E_net4!  An answer explaining the syntax would be much appreciated."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509206625, "post_id": 46981148, "comment_id": 80929977, "body": "<a href=\"https://meta.stackexchange.com/q/39223/281829\"><b>One</b> question per post, please</a>."}, {"owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509232036, "post_id": 46981148, "comment_id": 80937177, "body": "I stand corrected @Shepmaster"}], "answers": [{"comments": [{"owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "edited": false, "score": 0, "creation_date": 1509129456, "post_id": 46981442, "comment_id": 80910363, "body": "Thanks, that&#39;s exactly what I was looking for!  I tried searching for <code>rust lang .. syntax</code> but it didn&#39;t turn up much."}, {"owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "edited": false, "score": 0, "creation_date": 1509129653, "post_id": 46981442, "comment_id": 80910434, "body": "There shouldn&#39;t be a comma after the <code>match</code> expression."}], "tags": [], "owner": {"reputation": 36166, "user_id": 393701, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/250889c646cd2a916920d9252f7c6f42?s=128&d=identicon&r=PG", "display_name": "SirDarius", "link": "https://stackoverflow.com/users/393701/sirdarius"}, "is_accepted": true, "score": 2, "last_activity_date": 1509206591, "last_edit_date": 1509206591, "creation_date": 1509129357, "answer_id": 46981442, "question_id": 46981148, "link": "https://stackoverflow.com/questions/46981148/what-is-the-syntax-for-an-if-let-statement/46981442#46981442", "title": "What is the syntax for an if-let statement?", "body": "<p>The syntax that eludes you is called <a href=\"https://doc.rust-lang.org/stable/book/first-edition/patterns.html#destructuring\" rel=\"nofollow noreferrer\">destructuring</a>.</p>\n\n<p>This pattern allows to match certain fields in a struct, enum, or tuple. You therefore cannot just use if let with the destructuring on the right side of the binding.</p>\n\n<p>The code you want is probably:</p>\n\n<pre><code>if let glutin::Event::WindowEvent { event, .. } = event {\n  match event {\n      glutin::WindowEvent::Closed =&gt; return glutin::ControlFlow::Break,\n      glutin::WindowEvent::Resized(w, h) =&gt; gl_window.resize(w, h),\n      _ =&gt; (),\n  }\n}\n</code></pre>\n\n<p>There is a possible confusion between the right hand <code>event</code> variable and the one extracted from the pattern.\nThe use of <code>event</code> in the destructuring is made mandatory because it needs to use struct fields by name.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 2, "last_activity_date": 1509129487, "creation_date": 1509129487, "answer_id": 46981479, "question_id": 46981148, "link": "https://stackoverflow.com/questions/46981148/what-is-the-syntax-for-an-if-let-statement/46981479#46981479", "title": "What is the syntax for an if-let statement?", "body": "<p>Directly quoting from <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch06-03-if-let.html\" rel=\"nofollow noreferrer\">The Book, second edition</a>:</p>\n\n<blockquote>\n  <p>The <code>if let</code> syntax lets you combine <code>if</code> and <code>let</code> into a less verbose way to handle values that match one pattern and ignore the rest.</p>\n</blockquote>\n\n<p>It also provides this example:</p>\n\n<pre><code>if let Some(3) = some_u8_value {\n    println!(\"three\");\n}\n</code></pre>\n\n<p>The correct syntax is <code>if let \u00abpattern\u00bb = \u00abexpression\u00bb { ... }</code>, and not the opposite written in the question.</p>\n\n<pre><code>if let glutin::Event::WindowEvent { event, .. } = event {\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 434, "favorite_count": 0, "accepted_answer_id": 46981442, "answer_count": 2, "score": 0, "last_activity_date": 1509206591, "creation_date": 1509127997, "last_edit_date": 1509206565, "question_id": 46981148, "link": "https://stackoverflow.com/questions/46981148/what-is-the-syntax-for-an-if-let-statement", "title": "What is the syntax for an if-let statement?", "body": "<p>I encountered this snippet in some example code.  It works fine, but I got a linter error saying that it should be structured as an if-let statement.</p>\n\n<pre><code>match event {\n  glutin::Event::WindowEvent { event, .. } =&gt; match event {\n      glutin::WindowEvent::Closed =&gt; return glutin::ControlFlow::Break,\n      glutin::WindowEvent::Resized(w, h) =&gt; gl_window.resize(w, h),\n      _ =&gt; (),\n  },\n  _ =&gt; ()\n}\n</code></pre>\n\n<p>This was my attempt to restructure it:</p>\n\n<pre><code>if let _ = glutin::Event::WindowEvent { event, .. } {\n    match event {\n       glutin::WindowEvent::Closed =&gt; return glutin::ControlFlow::Break,\n       glutin::WindowEvent::Resized(w, h) =&gt; gl_window.resize(w, h),\n       _ =&gt; (),\n   }\n}\n</code></pre>\n\n<p>Oops, that's a syntax error.  What would be the correct way to clear the linter warning?</p>\n\n<p>After looking at the code more closely, I realized that I don't understand the syntax.  <code>glutin::Event::WindowEvent { event, .. }</code> looks like the syntax for creating a new instance of <code>WindowEvent</code> but how can that be allowed inside a match statement?</p>\n\n<p>Also, what does the <code>..</code> mean?  I'm familiar with <code>..Default::default()</code>, but not the double dot by itself.</p>\n"}, {"tags": ["rust", "borrow-checker", "hyper", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 532, "user_id": 1193986, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ddd940e63555f3ba66c2a4a32b1c7c09?s=128&d=identicon&r=PG", "display_name": "YvesQuemener", "link": "https://stackoverflow.com/users/1193986/yvesquemener"}, "edited": false, "score": 0, "creation_date": 1607942481, "post_id": 46972164, "comment_id": 115421086, "body": "Is that a bug or is there a reason I am not understanding behind this <code>&#39;static</code> lifetime requirement?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 532, "user_id": 1193986, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ddd940e63555f3ba66c2a4a32b1c7c09?s=128&d=identicon&r=PG", "display_name": "YvesQuemener", "link": "https://stackoverflow.com/users/1193986/yvesquemener"}, "edited": false, "score": 1, "creation_date": 1608639138, "post_id": 46972164, "comment_id": 115639320, "body": "@YvesQuemener I can only speculate, but implementing it only for <code>&#39;static</code> means it doesn&#39;t need to copy (&quot;clone&quot;) data, it simply stores the reference. I.e. you need to clone the data yourself if it isn&#39;t <code>&#39;static</code>. Or use a shared <code>Bytes</code> buffer (which it probably uses internally anyway, and which also supports construction from <code>&#39;static</code> references)."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 2, "last_activity_date": 1509097665, "creation_date": 1509097665, "answer_id": 46972164, "question_id": 46970966, "link": "https://stackoverflow.com/questions/46970966/request-message-value-must-be-valid-for-the-static-lifetime/46972164#46972164", "title": "Request message value must be valid for the static lifetime", "body": "<p><a href=\"https://docs.rs/hyper/0.11.6/hyper/client/struct.Request.html#method.set_body\" rel=\"nofollow noreferrer\"><code>request.set_body()</code></a> takes a parameter that needs to be convertible into <a href=\"https://docs.rs/hyper/0.11.6/hyper/struct.Body.html\" rel=\"nofollow noreferrer\"><code>hyper::Body</code></a> (the default for <code>B</code> in <code>hyper::client::Request&lt;B&gt;</code>).</p>\n\n<p>If you take a look at the list of <code>From</code> (the \"dual\" trait for <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>Into</code></a>) implementations for <a href=\"https://docs.rs/hyper/0.11.6/hyper/struct.Body.html\" rel=\"nofollow noreferrer\"><code>hyper::Body</code></a> you'll see <code>impl From&lt;&amp;'static [u8]&gt; for Body</code> - this is where you're static lifetime requirement comes from (there is no <code>impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for Body</code> that would take any other reference to \"bytes\").</p>\n\n<p>But you'll also see <code>impl From&lt;String&gt; for Body</code> - so it should be fine to just pass <code>msg</code> (which should be a <code>String</code> as far as I can tell) instead of <code>msg.as_bytes()</code> to <a href=\"https://docs.rs/hyper/0.11.6/hyper/client/struct.Request.html#method.set_body\" rel=\"nofollow noreferrer\"><code>request.set_body()</code></a>.  It will take ownership of the string <code>msg</code>, so you can't use it yourself afterwards anymore.</p>\n"}], "owner": {"reputation": 1302, "user_id": 2491528, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/723f1b1cb73fa871f360bdea9bd17a8a?s=128&d=identicon&r=PG", "display_name": "Federico", "link": "https://stackoverflow.com/users/2491528/federico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 557, "favorite_count": 0, "accepted_answer_id": 46972164, "answer_count": 1, "score": 1, "last_activity_date": 1509206874, "creation_date": 1509093881, "last_edit_date": 1509206874, "question_id": 46970966, "link": "https://stackoverflow.com/questions/46970966/request-message-value-must-be-valid-for-the-static-lifetime", "title": "Request message value must be valid for the static lifetime", "body": "<p>I want to implement a blocking function that sends a POST request with a JSON body and returns the JSON object of the response:</p>\n\n<pre><code>extern crate tokio_core;\nextern crate rustc_serialize;\nextern crate hyper;\nextern crate futures;\n\nuse std::str;\nuse rustc_serialize::json;\nuse rustc_serialize::{Decoder, Decodable};\nuse hyper::{Method, Uri};\nuse hyper::client::{Client, Request};\nuse self::tokio_core::reactor::Core;\nuse self::futures::{Future, Stream};\n\n#[derive(Debug, Clone)]\npub struct FooBar {\n    pub foo: String,\n    pub bar: String\n}\n\nimpl Decodable for FooBar {\n    fn decode&lt;D: Decoder&gt;(d: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt; {\n        d.read_struct(\"root\", 0, |d| {\n            Ok(FooBar {\n                foo: try!(d.read_struct_field(\"foo\", 0, |d| Decodable::decode(d))),\n                bar: try!(d.read_struct_field(\"bar\", 1, |d| Decodable::decode(d)))\n            })\n        })\n    }\n}\n\nfn send_request(url: Uri, obj: json::Object) -&gt; Option&lt;FooBar&gt; {\n    let mut core = Core::new().unwrap();\n    let client = Client::new(&amp;core.handle());\n    let msg = json::encode(&amp;obj).unwrap();\n\n    let mut request = Request::new(Method::Post, url);\n    request.set_body(msg.as_bytes());\n\n    let mut response = client.request(request).wait().unwrap();\n    assert_eq!(response.status(), hyper::Ok);\n\n    let res_vec = response.body().concat2().wait().unwrap().to_vec();\n    let res_str = str::from_utf8(&amp;res_vec).unwrap();\n    return match json::decode(&amp;res_str) {\n        Ok(res_obj) =&gt; Some(res_obj),\n        Err(err) =&gt; {\n            println!(\"{}\", err);\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>I get the error that <code>msg</code> does not live long enough:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `msg` does not live long enough\n  --&gt; src/test.rs:37:22\n   |\n37 |     request.set_body(msg.as_bytes());\n   |                      ^^^ does not live long enough\n...\n51 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>At this point I have two questions:</p>\n\n<ol>\n<li><strong>What is the component that wants <code>msg</code> to be valid for the static lifetime?</strong> It is not clear to me from the message.</li>\n<li>How can I implement such a function without making <code>msg</code> valid for the static lifetime? In my case it is not a viable solution.</li>\n</ol>\n\n<hr>\n\n<p>Dependencies:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc-serialize = \"0.3\"\nfutures = \"0.1\"\nhyper = \"0.11\"\ntokio-core = \"0.1\"\n</code></pre>\n"}, {"tags": ["syntax", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1509090128, "last_edit_date": 1592644375, "creation_date": 1509090128, "answer_id": 46969907, "question_id": 46969733, "link": "https://stackoverflow.com/questions/46969733/why-is-there-no-semicolon-after-a-macro-call/46969907#46969907", "title": "Why is there no semicolon after a macro call?", "body": "<p>The <code>write</code> macro uses the <code>write_fmt()</code> method either from <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Write.html\" rel=\"noreferrer\"><code>std::fmt::Write</code></a> or from <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Write.html\" rel=\"noreferrer\"><code>std::io::Write</code></a>; both return <code>Result&lt;(), Error&gt;</code> and you need to omit the semicolon in order to have it as the output of <code>fmt()</code>.</p>\n<p>from <a href=\"https://doc.rust-lang.org/book/first-edition/functions.html\" rel=\"noreferrer\">The Rust Book</a>, 1st edition:</p>\n<blockquote>\n<p>Rust functions return exactly one value, and you declare the type\nafter an \u2018arrow\u2019, which is a dash (-) followed by a greater-than sign\n(&gt;). The last line of a function determines what it returns. You\u2019ll\nnote the lack of a semicolon here. If we added it in we would\nget an error.</p>\n<p>This reveals two interesting things about Rust: it is an\nexpression-based language, and semicolons are different from\nsemicolons in other \u2018curly brace and semicolon\u2019-based languages.</p>\n</blockquote>\n"}], "owner": {"reputation": 803, "user_id": 1223136, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5d9f53c06996b9dcaf7a6792fb76bd4b?s=128&d=identicon&r=PG", "display_name": "Francesco Rigoni", "link": "https://stackoverflow.com/users/1223136/francesco-rigoni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 228, "favorite_count": 0, "accepted_answer_id": 46969907, "answer_count": 1, "score": 1, "last_activity_date": 1509090391, "creation_date": 1509089483, "last_edit_date": 1509090391, "question_id": 46969733, "link": "https://stackoverflow.com/questions/46969733/why-is-there-no-semicolon-after-a-macro-call", "title": "Why is there no semicolon after a macro call?", "body": "<p>I am following some tutorial I found on Rust, and I ran across something that my Java/C/C++ mind cannot comprehend:</p>\n\n<pre><code>impl fmt::Display for Matrix {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"({}, {})\\n({}, {})\", self.0, self.1, self.2, self.3)\n    }\n}\n</code></pre>\n\n<p>I don't understand the lack of semicolon at the end of the <code>write!</code> macro call. I get an error from the compiler if I add it.\nI am guessing that if the semicolon is not there then the <code>Result</code> from <code>write!</code> is used as return value of <code>fmt</code>, but can anybody provide a more specific explanation to why that is and if it always applies?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 303, "user_id": 3736239, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9c083a66a74c166d019192bc85cc78d8?s=128&d=identicon&r=PG&f=1", "display_name": "stuffy", "link": "https://stackoverflow.com/users/3736239/stuffy"}, "edited": false, "score": 0, "creation_date": 1509131760, "post_id": 46966446, "comment_id": 80911385, "body": "Questions! (1) Aren&#39;t these objects going to be on the heap anyway? Does <code>Box</code> add a second level of indirection, in that case? (2) In your second code snippet, it works because <code>main</code> owns a single <code>sphere</code> handle, but if I dynamically generate a <code>Vec&lt;&amp;AnySceneObject&gt;</code> (say, from a file), something needs to own the objects (right?), hence my use of <code>Box</code> (I realize this was elided in my simplified example). (3) Where does inferred <code>&#39;static</code> come from? The fact that this is in <code>main</code>? (4) Enums sound better for this. Where can I read up on how they compare to references in this context?"}], "tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": false, "score": 8, "last_activity_date": 1509069956, "creation_date": 1509069956, "answer_id": 46966446, "question_id": 46965867, "link": "https://stackoverflow.com/questions/46965867/rust-borrowed-value-must-be-valid-for-the-static-lifetime/46966446#46966446", "title": "rust: borrowed value must be valid for the static lifetime", "body": "<p>First of all, if you have hundreds of thousands of scene objects, putting them in a box (which is basically a heap object) is definitely not a good idea.</p>\n\n<p>The error is called because the <code>Box</code>'s content must not have any reference that might expire. You can move a <code>Box</code> around and it may never be deleted until the end of the process, so any references it holds must have <code>'static</code> lifetime.</p>\n\n<p>You can fix it by using <code>Box&lt;T + 'a&gt;</code> to indicate that it will have a limited lifetime:</p>\n\n<pre><code>pub struct Scene&lt;'a&gt; {\n    objects: Vec&lt;Box&lt;AnySceneObject + 'a&gt;&gt;,\n}\n</code></pre>\n\n<p>You can also use <code>Vec&lt;&amp;Trait&gt;</code> to store a collection of references to different objects implementing a trait. The following code compiles:</p>\n\n<pre><code>pub struct Scene&lt;'a&gt; {\n    objects: Vec&lt;&amp;'a AnySceneObject&gt;,\n}\n\nfn main() {\n    let material = Material {};\n    let sphere = Sphere { material: &amp;material };\n    Scene {\n        objects: vec![&amp;sphere] \n    };\n}\n</code></pre>\n\n<p>If you know all possible implementations of your trait, you can replace it with a enum. This would make the code more performant, as you would have a vector owning enums instead of references.</p>\n"}], "owner": {"reputation": 303, "user_id": 3736239, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9c083a66a74c166d019192bc85cc78d8?s=128&d=identicon&r=PG&f=1", "display_name": "stuffy", "link": "https://stackoverflow.com/users/3736239/stuffy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4078, "favorite_count": 0, "closed_date": 1509207001, "answer_count": 1, "score": 6, "last_activity_date": 1509069956, "creation_date": 1509065207, "question_id": 46965867, "link": "https://stackoverflow.com/questions/46965867/rust-borrowed-value-must-be-valid-for-the-static-lifetime", "closed_reason": "Duplicate", "title": "rust: borrowed value must be valid for the static lifetime", "body": "<p>I'm working on a toy ray tracer project in Rust and am hung up on a lifetime-related error. I've stripped down my code to the following self-contained failing case:</p>\n\n<pre><code>struct Material {}\n\npub struct Sphere&lt;'a&gt; {\n    material: &amp;'a Material,\n}\n\npub trait AnySceneObject {}\n\nimpl&lt;'a&gt; AnySceneObject for Sphere&lt;'a&gt; {}\n\npub struct Scene {\n    objects: Vec&lt;Box&lt;AnySceneObject&gt;&gt;,\n}\n\nfn main() {\n    let material = Material {};\n    let boxed_sphere: Box&lt;AnySceneObject&gt; = Box::new(Sphere { material: &amp;material });\n    Scene { objects: vec![boxed_sphere] };\n}\n</code></pre>\n\n<p>which complains</p>\n\n<pre><code>error[E0597]: `material` does not live long enough\n  --&gt; main.rs:17:74\n   |\n17 |     let boxed_sphere: Box&lt;AnySceneObject&gt; = Box::new(Sphere { material: &amp;material });\n   |                                                                          ^^^^^^^^ does not live long enough\n18 |     Scene { objects: vec![boxed_sphere] };\n19 | }\n   | - borrowed value only lives until here\n   |\n  = note: borrowed value must be valid for the static lifetime...\n\nerror: aborting due to previous error(s)\n</code></pre>\n\n<p>I want to use traits to define objects in the scene, but I want the <code>Scene</code> object to own them. My current understanding is that this means I need <code>Box</code> or something equivalent because trait objects are of unknown size.</p>\n\n<p>I also want objects to share references to <code>Material</code>s, since there won't be that many of them and though they're relatively simple and <code>Copy</code>able, I don't want literally tens or hundreds of thousands of identical copies of the same thing (hence using <code>&amp;'a Material</code>).</p>\n\n<p>I'm confused why it's problematic to pass <code>&amp;material</code> here though: since values are dropped latest-first, wouldn't <code>Scene</code> be dropped first, allowing <code>boxed_sphere</code> to be dropped (since it now owns a <code>Vec</code> that owns that <code>Box</code>), which it then is, allowing <code>material</code> to be dropped, no problem? It seems like it should live at least as long as the other two values in the function, since I'm holding onto the value with the name <code>material</code> for the scope of the whole function.</p>\n\n<p>Also somewhat confusingly, commenting out the instantiation of <code>Scene</code> fixes the issue for reasons I don't understand.</p>\n"}, {"tags": ["vector", "iterator", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1509033468, "post_id": 46958593, "comment_id": 80864982, "body": "Considering that you have working code, the question might be more suitable for <a href=\"//codereview.stackexchange.com\">Code Review SE</a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1509035278, "post_id": 46958593, "comment_id": 80866114, "body": "<a href=\"https://play.rust-lang.org/?gist=de697ed924eba97b96e8e705b31ca8b2&amp;version=stable\" rel=\"nofollow noreferrer\">One possible approach</a>. Personally, though, I like your version (with the loop) better. Just because you <i>can</i> write code in a functional style, doesn&#39;t mean you <i>should</i>"}], "answers": [{"comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1509085727, "post_id": 46962691, "comment_id": 80884844, "body": "Nitpicking: if <code>tuples.len() != num_tuples</code>, it might mean too many as well as too few"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 2, "creation_date": 1509104031, "post_id": 46962691, "comment_id": 80895458, "body": "@Jmb how so? Doesn&#39;t the <code>take</code> prevent that case?"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1509197007, "post_id": 46962691, "comment_id": 80926863, "body": "you&#39;re right, I missed the <code>take</code>, sorry for the noise"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1509047514, "creation_date": 1509047514, "answer_id": 46962691, "question_id": 46958593, "link": "https://stackoverflow.com/questions/46958593/idiomatically-parsing-a-whitespace-separated-string-into-a-vec-of-tuples-of-diff/46962691#46962691", "title": "Idiomatically parsing a whitespace-separated string into a Vec of tuples of differing types", "body": "<blockquote>\n  <p>The questionmark-operator seems not to work in this context (within the tuple).</p>\n</blockquote>\n\n<p>The problem is that <code>?</code> returns an <code>Err</code> in case of failure and you weren't returning an <code>Ok</code> in case of success. The operator works just fine if you do that. Beyond that, you can avoid the extraneous allocation of the <code>Vec</code> by operating on the iterator from splitting on whitespace:</p>\n\n<pre><code>fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n    let mut elems = s.split_whitespace();\n\n    let num_tuples = elems.next().expect(\"error handling: count missing\").parse()?;\n    let tuples: Vec&lt;_&gt; = elems\n        .by_ref()\n        .tuples()\n        .map(|(a, b, c)| Ok((a.into(), b.into(), c.parse()?)))\n        .take(num_tuples)\n        .collect::&lt;Result&lt;_, _&gt;&gt;()?;\n\n    if tuples.len() != num_tuples { panic!(\"error handling: too few\") }\n    if elems.next().is_some() { panic!(\"error handling: too many\") }\n\n    Ok(EnclosingObject { tuples })\n}\n</code></pre>\n\n<p>I've also used Itertools' <code>tuples</code> method which automatically groups an iterator into tuples and collected into a <code>Result&lt;Vec&lt;_&gt;, _&gt;</code>. I reduced the redundant <code>tuples: tuples</code> in the struct and added some placeholders for the remainder of the error handling. I removed the <code>Vec::with_capacity</code> because I trust that the <code>size_hint</code> set by <code>take</code> will be good enough. If you didn't trust it, you could still use <code>with_capacity</code> and then <code>extend</code> the vector with the iterator.</p>\n"}], "owner": {"reputation": 2673, "user_id": 7274990, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6819319104c8dbd5f1612d86ea8d9216?s=128&d=identicon&r=PG&f=1", "display_name": "Calculator", "link": "https://stackoverflow.com/users/7274990/calculator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 209, "favorite_count": 0, "accepted_answer_id": 46962691, "answer_count": 1, "score": 0, "last_activity_date": 1509049065, "creation_date": 1509032756, "last_edit_date": 1509049065, "question_id": 46958593, "link": "https://stackoverflow.com/questions/46958593/idiomatically-parsing-a-whitespace-separated-string-into-a-vec-of-tuples-of-diff", "title": "Idiomatically parsing a whitespace-separated string into a Vec of tuples of differing types", "body": "<p>I have a struct <code>EnclosingObject</code> which contains a field of a <code>Vec</code> of tuples. I want to implement <code>FromStr</code> for this struct in a way that an <code>EnclosingObject</code> can be parsed from a string with the following structure: <code>&lt;number of tuples&gt; &lt;tuple1 str1&gt; &lt;tuple1 str2&gt; &lt;tuple1 i32&gt; &lt;tuple2 str1&gt; &lt;tuple2 str2&gt;</code> ...</p>\n\n<p>This is what I have come up with so far (ignoring the case of an invalid number of tuples):</p>\n\n<pre><code>use std::str::FromStr;\nuse std::num::ParseIntError;\n\n#[derive(Debug)]\nstruct EnclosingObject{\n    tuples: Vec&lt;(String, String, i32)&gt;,\n}\n\nimpl FromStr for EnclosingObject {\n    type Err = ParseIntError;\n\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        let elems_vec = s.split_whitespace().collect::&lt;Vec&lt;_&gt;&gt;();\n        let mut elems = elems_vec.as_slice();\n\n        let num_tuples = elems[0].parse::&lt;usize&gt;()?;\n        elems = &amp;elems[1..];\n        let mut tuples = Vec::with_capacity(num_tuples);\n        for chunk in elems.chunks(3).take(num_tuples){\n            tuples.push((chunk[0].into(),\n                    chunk[1].into(),\n                    chunk[2].parse::&lt;i32&gt;()?));\n        }\n\n        Ok(EnclosingObject{\n            tuples : tuples\n        })\n    }\n}\n\nfn main(){  \n    println!(\"{:?}\", EnclosingObject::from_str(\"3 a b 42 c d 32 e f 50\"));  \n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=e34a361ee7750e33bb0ff90c75e9dd52&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>As expected, for a valid string it prints out:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Ok(EnclosingObject { tuples: [(\"a\", \"b\", 42), (\"c\", \"d\", 32), (\"e\", \"f\", 50)] })\n</code></pre>\n\n<p>and for an invalid string e.g. \"3 a b x c d 32 e f 50\":</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Err(ParseIntError { kind: InvalidDigit })\n</code></pre>\n\n<p>Can I parse this <code>Vec</code> of tuples in a more elegant/idiomatic way, such as by using iterators?</p>\n\n<p>I tried a combination of <code>map</code> and <code>collect</code>, but the problem with this is the error handling:</p>\n\n<pre><code>let tuples = elems\n            .chunks(3)\n            .take(num_tuples)\n            .map(|chunk| (chunk[0].into(),\n                    chunk[1].into(),\n                    chunk[2].parse::&lt;i32&gt;()?))\n            .collect();\n</code></pre>\n\n<p>The questionmark-operator seems not to work in this context (within the tuple). So I transformed it a bit: </p>\n\n<pre><code>let tuples = try!(elems\n            .chunks(3)\n            .take(num_tuples)\n            .map(|chunk| {\n                    let integer = chunk[2].parse::&lt;i32&gt;()?;\n                    Ok((chunk[0].into(),\n                    chunk[1].into(),\n                    integer))})\n            .collect());\n</code></pre>\n\n<p>... which works, but again appears a bit cumbersome.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509024576, "post_id": 46955206, "comment_id": 80858524, "body": "Why don&#39;t you use <code>impl&lt;T: option::FlatMap&gt; FlatMap for T {}</code> for the alias trait?"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509029179, "post_id": 46955206, "comment_id": 80862109, "body": "@Stefan because I didn&#39;t think of it. However it doesn&#39;t work either: the implicit conversions still don&#39;t work with the aliased trait."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509127263, "post_id": 46955206, "comment_id": 80909384, "body": "Under what circumstances must<code>Option</code> convert implicitly to <code>option::FlatMap</code>? Could you perhaps <code>impl Deref for FlatMap { type Target=option::FlatMap; ... }</code> to make it work again?"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509350719, "post_id": 46955206, "comment_id": 80967239, "body": "@trentcl The <code>FlatMap</code> trait adds a <code>flat_map</code> method to option objects which I then call as <code>o.flat_map(...)</code>. I need this because it&#39;s actually called by a macro that must work transparently with iterators and <code>Option</code> (and <code>Result</code> and any user-defined type that defines the <code>map</code> and <code>flat_map</code> methods). The full code of my crate is on <a href=\"https://bitbucket.org/jmb/rust-map_for/src/5ba07063d242381fa120bf4bba33d679e02376aa/src/lib.rs?at=default&amp;fileviewer=file-view-default#lib.rs-97\" rel=\"nofollow noreferrer\">Bitbucket</a>."}], "answers": [{"comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1509954663, "post_id": 47087585, "comment_id": 81213610, "body": "Like I said, I need it to be called <code>flat_map</code> for duck-typing purposes. Actually it started as a straight equivalent for <code>and_then</code>, the current generalization evolved from an attempt to make it possible to mix options and iterators transparently (I needed a generic way to create an empty instance of any iterator, and I was hoping without looking at the docs that iterators implemented <code>Default</code> that way)."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 1, "last_activity_date": 1509677415, "last_edit_date": 1592644375, "creation_date": 1509676155, "answer_id": 47087585, "question_id": 46955206, "link": "https://stackoverflow.com/questions/46955206/deprecated-alias-does-not-generate-a-warning/47087585#47087585", "title": "Deprecated alias does not generate a warning", "body": "<p>Being able to call <code>option::FlatMap</code> methods on an <code>Option</code> isn't a conversion, implicit or otherwise -- it's just how methods are resolved. Trait methods may be resolved on an object if the trait has been <code>use</code>d, but the top level <code>FlatMap</code> trait has no methods, so it doesn't add anything to the object at all.</p>\n<p>It seems the best way to achieve this in Rust right now is to copy the trait (<em>with</em> all its contents) into the top level, annotate it <code>#[deprecated]</code>, and write a blanket <code>impl</code> that defers to the &quot;real&quot; version.</p>\n<pre><code>pub mod option {\n    pub trait FlatMap&lt;T&gt; {\n        type Item;\n        type FlatMap;\n        fn flat_map&lt;F&gt;(self, f: F) -&gt; Self::FlatMap\n        where\n            F: FnOnce(Self::Item) -&gt; T;\n    }\n    // ...\n}\n\n#[deprecated(note = &quot;Use option::FlatMap instead&quot;)]\npub trait FlatMap&lt;T&gt; {\n    type Item;\n    type FlatMap;\n    fn flat_map&lt;F&gt;(self, f: F) -&gt; Self::FlatMap\n    where\n        F: FnOnce(Self::Item) -&gt; T;\n}\n\n#[allow(deprecated)]\nimpl&lt;T, U&gt; FlatMap&lt;T&gt; for U\nwhere\n    U: option::FlatMap&lt;T&gt;,\n{\n    type Item = U::Item;\n    type FlatMap = U::FlatMap;\n    fn flat_map&lt;F&gt;(self, f: F) -&gt; Self::FlatMap\n    where\n        F: FnOnce(Self::Item) -&gt; T,\n    {\n        option::FlatMap::flat_map(self, f)\n    }\n}\n</code></pre>\n<p>Any attempt to use the &quot;outer&quot; <code>FlatMap</code> will generate the deprecation warning (<a href=\"https://play.rust-lang.org/?gist=8afb5d028e87e3531998e3297f07b98d&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a>).</p>\n<p>One limitation of this approach (besides the verbosity) is that the two traits won't be compatible as trait objects (e.g., you couldn't pass an <code>&amp;FlatMap</code> to a function expecting <code>&amp;option::FlatMap</code>.) However, this trait isn't object safe anyway, so in this case it doesn't matter.</p>\n<p><em>As it happens, your definition of <code>flat_map</code> -- while a generalization of <code>and_then</code> -- is a different generalization than <a href=\"http://swiftdoc.org/v2.2/type/Optional/#func-flatmap_\" rel=\"nofollow noreferrer\">several</a> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#flatMap-java.util.function.Function-\" rel=\"nofollow noreferrer\">other</a> <a href=\"http://www.scala-lang.org/api/2.12.3/scala/Option.html#flatMap%5BB%5D(f:A=%3EOption%5BB%5D):Option%5BB%5D\" rel=\"nofollow noreferrer\">languages</a> use, including <a href=\"https://doc.rust-lang.org/core/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\">Rust's own <code>Iterator::flat_map</code></a>. So you might want to consider renaming it. (I think <code>map_or_default</code> would fit in well, name-wise, with the other methods available on <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a>.)</em></p>\n"}], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "accepted_answer_id": 47087585, "answer_count": 1, "score": 2, "last_activity_date": 1509677415, "creation_date": 1509023287, "last_edit_date": 1509029093, "question_id": 46955206, "link": "https://stackoverflow.com/questions/46955206/deprecated-alias-does-not-generate-a-warning", "title": "Deprecated alias does not generate a warning", "body": "<p>I have a library that used to have a top-level public trait (call it <code>FlatMap</code>) implemented for <code>Option</code>. Now I have refactored my library and moved that trait into a submodule named <code>option</code>, and I have ensured backward compatibility by publicly importing <code>FlatMap</code> into the top-level of the crate. I would like to warn users of the top-level trait that it is deprecated. I have tried the following:</p>\n\n<pre><code>pub mod option {\n   pub trait FlatMap&lt;T&gt; {}\n}\n#[deprecated(note=\"Use option::FlatMap instead\")]\npub use option::FlatMap;\n</code></pre>\n\n<p>However this does not work: I can now <code>use mylib::FlatMap</code> and <code>use mylib::option::FlatMap</code> and either works fine with no warning. I would like the first use to generate a deprecation warning.</p>\n\n<p>Note that I can't use an alias trait like this:</p>\n\n<pre><code>pub mod option {\n   pub trait FlatMap&lt;T&gt; {}\n}\n#[deprecated(note=\"Use option::FlatMap instead\")]\npub trait FlatMap&lt;T&gt;: option::FlatMap&lt;T&gt; {}\nimpl&lt;T&gt; FlatMap&lt;T&gt; for Option&lt;T&gt; {}\n</code></pre>\n\n<p>because I rely on implicit conversion from <code>Option</code> to <code>option::FlatMap</code> to add a method to <code>Option</code> instances, and the implicit conversion does not work with the aliased trait.</p>\n"}, {"tags": ["function", "struct", "reference", "rust", "self"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1508991766, "post_id": 46945500, "comment_id": 80838768, "body": "if <code>add_later</code> doesn&#39;t actually use <code>&amp;mut self</code>, why pass that to the function at all? You can make it a normal function instead. Otherwise this is like <a href=\"https://stackoverflow.com/questions/27335252/how-can-i-call-a-mutating-method-while-holding-a-reference-to-self\" title=\"how can i call a mutating method while holding a reference to self\">stackoverflow.com/questions/27335252/&hellip;</a> and I think others."}, {"owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1508992360, "post_id": 46945500, "comment_id": 80838925, "body": "@loganfsmyth Isn&#39;t it considered good practice to keep the behavior relating to Foo inside the Foo implementation? That&#39;s the only reason I have the function defined in there."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1508992830, "post_id": 46945500, "comment_id": 80839061, "body": "If something is conceptually a method then sure, but your function never even uses <code>self</code>, so it definitely isn&#39;t method-like."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1508993079, "post_id": 46945500, "comment_id": 80839150, "body": "@user2936448, you can create a &quot;method&quot; without <code>self</code>. You have one already: <code>new()</code>"}, {"owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1508993353, "post_id": 46945500, "comment_id": 80839230, "body": "@loganfsmyth I get what you&#39;re saying, but in my actual implementation I need to use &#39;self&#39; in the add_later function because it updates additional properties of the struct along with changing the 2nd parameter. I didn&#39;t do anything with self in this example because I didn&#39;t need to use self in order to demonstrate the compiler error."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1508993549, "post_id": 46945500, "comment_id": 80839286, "body": "Sounds good, that&#39;d what I was trying to clarify. This seems like a duplicate of the question I linked above then."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1508994948, "post_id": 46945500, "comment_id": 80839740, "body": "It would be great if your example more closely represented your use case. Given your description above, I&#39;m not sure why <a href=\"https://play.rust-lang.org/?gist=a5de15f8a75bb27d8cbfadc996a82b64&amp;version=stable\" rel=\"nofollow noreferrer\">this isn&#39;t acceptable</a>. That is, if you&#39;re just modifying fields of the struct <i>and the struct is very much aware of these fields as it owns them already</i>, why not just call the method with no arguments?"}, {"owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1508998247, "post_id": 46945500, "comment_id": 80841029, "body": "@SimonWhitehead I am making an emulator where the CPU (Foo) holds a list of u8 registers (a, b, c,.. etc). I want to make a generic add(&amp;reg1, &amp;reg2) function to add 2 registers. This means that I can have 1 function that will handle all variations of ADD(R, R). After the addition of two registers, one specific F register <i>also</i> gets its bits updated based on the calculation between the two parameters."}, {"owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1508998818, "post_id": 46945500, "comment_id": 80841281, "body": "@SimonWhitehead Well that&#39;s a coincidence. I looked at your github and realized you are working on a GB emu in rust. This is the same project I am working on, except I&#39;m re-doing mine in Rust. I looked at how you handled this problem out of curiosity, and you wrote a unique function for every single case and have 4,000 lines of CPU code. This is something that I want to avoid which is why I posted this question."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1509000175, "post_id": 46945500, "comment_id": 80842031, "body": "In that case, can&#39;t you just store the registers in an array and pass the index of the modified register as the parameter? Bonus, it will probably be easier to implement since such an index is already stored in the emulated code."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1509010653, "post_id": 46945500, "comment_id": 80848669, "body": "@user2936448 hah - yes, I did do that didn&#39;t I. My emu is still heavily in active development. I do plan on cleaning that up but it was helpful for me to write tracing code while I was implementing it. I will clean it up at some point though :D To answer your question: most of the opcodes you&#39;ll be implementing have defined destinations for the results of the operations. So for the most part, <a href=\"https://play.rust-lang.org/?gist=d223a0cbdc55630324e857e6b8220fc7&amp;version=stable\" rel=\"nofollow noreferrer\">you can structure your code somewhat like this</a> to do what you want if that appeals to you."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1509010725, "post_id": 46945500, "comment_id": 80848722, "body": "@user2936448 There are <i>much</i> fancier options out there if you&#39;re looking for as much code-reuse as possible. One that comes to mind <a href=\"https://github.com/Gekkio/mooneye-gb/blob/master/src/cpu/ops.rs\" rel=\"nofollow noreferrer\">specifically is Mooneye-GB</a> - you might find the source to that interesting."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 2, "creation_date": 1509013428, "post_id": 46945500, "comment_id": 80850616, "body": "You are trying to write <b>wrong</b> code here. The correct would be to pass <code>&amp;mut self</code> and use <code>a</code> field of <code>self</code>. There is a very simple error caused by the borrow checker - you can&#39;t have more than one mutable reference to a object at a time. I don&#39;t even know what to discuss here."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1509029431, "post_id": 46945500, "comment_id": 80862288, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/27335252/how-can-i-call-a-mutating-method-while-holding-a-reference-to-self\">How can I call a mutating method while holding a reference to self?</a>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1509109318, "post_id": 46945500, "comment_id": 80898773, "body": "This is a duplicate of a question I already answered to, but I cannot find it."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1509206950, "post_id": 46945500, "comment_id": 80930076, "body": "You might want to look at <a href=\"https://stackoverflow.com/a/46144233/1600898\">this answer</a>, which covers a similar case."}], "owner": {"reputation": 313, "user_id": 2936448, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/c537d61dd3d3324664ad4e88f8579e07?s=128&d=identicon&r=PG&f=1", "display_name": "user2936448", "link": "https://stackoverflow.com/users/2936448/user2936448"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 169, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1508989330, "creation_date": 1508989330, "question_id": 46945500, "link": "https://stackoverflow.com/questions/46945500/how-to-have-a-mut-self-function-that-can-share-itself-with-another-mut-self-fu", "title": "How to have a &amp;mut self function that can share itself with another &amp;mut self function?", "body": "<p>I have a struct that has many properties. This struct has a function that makes a decision, and passes the appropriate property to a different function that performs arithmetic on the referenced property. Why am I not able to do this kind of multi-leveled reference passing in rust?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ef0cfc561afc2e4374475b93b2f62ab0&amp;version=stable\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=ef0cfc561afc2e4374475b93b2f62ab0&amp;version=stable</a></p>\n\n<pre><code>struct Foo {\n    pub a: u8\n}\n\nimpl Foo {\n    pub fn new() -&gt; Foo {\n        Foo {\n            a: 1\n        }\n    }\n\n    pub fn calculate(&amp;mut self) {\n        self.a += 1; // This is perfectly fine\n        self.add_later(&amp;mut self.a); // This throws an error\n    }\n\n    fn add_later(&amp;mut self, arg: &amp;mut u8) {\n        *arg += 1;\n    }\n}\n\nfn main() {\n    let mut bar = Foo::new();\n    println!(\"{}\", bar.a);\n    bar.calculate();\n    println!(\"{}\", bar.a);\n}\n</code></pre>\n"}]