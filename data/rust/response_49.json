[{"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450302837, "post_id": 34321510, "comment_id": 56387389, "body": "Your code here has a type parameter on the function, but your example code has it on the builder struct. These mean different things."}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450396642, "post_id": 34321510, "comment_id": 56434549, "body": "@Shepmaster yes I know I just wanted to keep my examples consistent."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450400961, "post_id": 34321510, "comment_id": 56435743, "body": "<i>to keep my examples consistent</i> \u2014 but... your examples are <b>inconsistent</b>. One has a parameterized function, the other has a parameterized type. I must be missing something obvious...?"}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450498648, "post_id": 34321510, "comment_id": 56476631, "body": "@Shepmaster yes your right that the last example is misleading, it would have been better to have all of the snippets be the struct definition.  I&#39;m just talking about the types being stored, not the exact implementation of how they get stored."}], "answers": [{"comments": [{"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1450397978, "post_id": 34323327, "comment_id": 56434934, "body": "you&#39;re right that holding on the iterator won&#39;t help much. I was just worried about being wasteful, but you&#39;re right about the cons of holding on to an iterator like that. Also your example is much more concise than mine (using <code>I::Item</code>), that&#39;s pretty cool!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1450563839, "post_id": 34323327, "comment_id": 56493690, "body": "@MichaelEden finally answered how to do it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1450563821, "last_edit_date": 1450563821, "creation_date": 1450304842, "answer_id": 34323327, "question_id": 34321510, "link": "https://stackoverflow.com/questions/34321510/how-can-i-specify-an-iterator-over-traits/34323327#34323327", "title": "How can I specify an iterator over traits?", "body": "<p>A pragmatic solution is to simply discard the concrete types of the types and introduce some indirection. We can <code>Box</code> the trait object and store that as a known type:</p>\n\n<pre><code>use std::borrow::Borrow;\n\nstruct Builder {\n    strings: Option&lt;Box&lt;Iterator&lt;Item = Box&lt;Borrow&lt;str&gt;&gt;&gt;&gt;&gt;,\n}\n\nimpl Builder {\n    fn new() -&gt; Self {\n        Builder { strings: None }\n    }\n\n    fn strings&lt;I&gt;(mut self, iter: I) -&gt; Self\n        where I: IntoIterator + 'static,\n              I::Item: Borrow&lt;str&gt; + 'static,\n    {\n        let i = iter.into_iter().map(|x| Box::new(x) as Box&lt;Borrow&lt;str&gt;&gt;);\n        self.strings = Some(Box::new(i));\n        self\n    }\n\n    fn build(self) -&gt; String {\n        match self.strings {\n            Some(iter) =&gt; {\n                let mut s = String::new();\n                for i in iter {\n                    s.push_str((*i).borrow());\n                }\n                s\n            },\n            None =&gt; format!(\"No strings here!\"),\n        }\n    }\n}\n\nfn main() {\n    let s = \n        Builder::new()\n        .strings(vec![\"a\", \"b\"])\n        .build();\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Here we convert the input iterator to a boxed iterator of boxed things that implement <code>Borrow</code>. We have to do some gyrations to convert the specific concrete type we have into a conceptually higher level type but that is still concrete.</p>\n\n<hr>\n\n<p>This remainder doesn't directly answer your question about an iterator of traits, but it provides an alternate solution that I would use.</p>\n\n<p>You have to pick between that might be a bit more optimal and have a worse user experience, or something that might be a bit suboptimal but a nicer user experience.</p>\n\n<p>You are currently storing the iterator in the builder struct:</p>\n\n<pre><code>struct Builder\n    where I: Iterator\n{\n    things: Option&lt;I&gt;,\n}\n</code></pre>\n\n<p>This requires that the <em>concrete type</em> of <code>I</code> be known in order to instantiate a <code>Builder</code>. Specifically, the size of that type needs to be known in order to allocate enough space. There's nothing around this; if you want to store a generic type, you need to know what type it is.</p>\n\n<p>For the same reasons, you cannot have this standalone statement:</p>\n\n<pre><code>let foo = None;\n</code></pre>\n\n<p>How much space needs to be allocated for <code>foo</code>? You cannot know until you know what type the <code>Some</code> might hold.</p>\n\n<p>The way I would go would be to not add type parameters for the <em>struct</em>, but have them on the <em>function</em>. This means that the struct has to have a fixed type to store the values. In your example, a <code>String</code> is a good fit:</p>\n\n<pre><code>struct Builder {\n    strings: Vec&lt;String&gt;,\n}\n\nimpl Builder {\n    fn strings&lt;I&gt;(mut self, iter: I) -&gt; Self\n        where I: IntoIterator,\n              I::Item: Into&lt;String&gt;,\n    {\n        self.strings.extend(iter.into_iter().map(Into::into));\n        self\n    }\n}\n</code></pre>\n\n<p>A <code>Vec</code> has very compact storage (it only takes 3 machine-sized values), and doesn't allocate any heap memory when it is empty. For that reason, I wouldn't wrap it in an <code>Option</code> unless you needed to tell 0 items from the absence of a provided value.</p>\n\n<p>If you are just appending each value to one big string, you might as well do that in the <code>strings</code> method. That depends on your application.</p>\n\n<p>You mention that you might be providing a large amount of data, but I'm not sure that holding the iterator until the <code>build</code> call will really help. You are going to pay the cost earlier or later.</p>\n\n<p>If you are going to reuse the builder, then it depends on what is expensive. If iterating is expensive, then doing it once and reusing that for each <code>build</code> call will be more efficient. If holding onto the memory is expensive, then you don't want to have multiple builders <em>or</em> built items around concurrently. Since the builder will transfer ownership of the memory to the new item, there shouldn't be any waste here.</p>\n"}], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 639, "favorite_count": 0, "accepted_answer_id": 34323327, "answer_count": 1, "score": 2, "last_activity_date": 1450563821, "creation_date": 1450297781, "last_edit_date": 1450304961, "question_id": 34321510, "link": "https://stackoverflow.com/questions/34321510/how-can-i-specify-an-iterator-over-traits", "title": "How can I specify an iterator over traits?", "body": "<p>I've been trying to make a websocket client, but one that has tons of options! I thought of using a builder style since the configuration can be stored in a nice way:</p>\n\n<pre><code>let client = Client::new()\n    .options(5)\n    .stuff(true)\n    // now users can store the config before calling build\n    .build();\n</code></pre>\n\n<p>I am having trouble creating a function that takes in a list of strings. Of course I have a few options:</p>\n\n<pre><code>fn strings(self, list: &amp;[&amp;str]) -&gt; Self;\nfn strings(self, list: Vec&lt;String&gt;) -&gt; Self;\nfn strings(self, list: &amp;[&amp;String]) -&gt; Self;\n// etc...\n</code></pre>\n\n<p>I would like to accept generously so I would like to accept <code>&amp;String</code>, <code>&amp;str</code>, and hopefully keys in a <code>HashMap</code> (since this might be used with a large routing table) so I thought I would accept an iterator over items that implement <code>Borrow&lt;str&gt;</code> like so:</p>\n\n<pre><code>fn strings&lt;P, Sp&gt;(self, P)\nwhere P: Iterator&lt;Item = &amp;'p Sp&gt;,\n  Sp: Borrow&lt;str&gt; + 'p;\n</code></pre>\n\n<p>A full example is available <a href=\"https://play.rust-lang.org/?gist=43eb09db15f9a314538a&amp;version=stable\" rel=\"nofollow\">here</a>.</p>\n\n<p>This was great until I needed to add another optional list of strings (extensions) to the builder.</p>\n\n<p>This meant that if I created a builder without specifying both lists of strings that the compiler would complain that it couldn't infer the type of the <code>Builder</code>, which makes sense. The only reason this is not OK is that both these fields are optional so the user might never know the type of a field it hasn't yet set.</p>\n\n<p>Does anyone have any ideas on how to specify an iterator over traits? Then I wouldn't have to specify the type fully at compile time. Or maybe just a better way to do this entirely?</p>\n"}, {"tags": ["generics", "rust", "associated-types"], "comments": [{"owner": {"reputation": 43, "user_id": 1898872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VI3ah.png?s=128&g=1", "display_name": "excaliburHisSheath", "link": "https://stackoverflow.com/users/1898872/excaliburhissheath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450302011, "post_id": 34319294, "comment_id": 56386957, "body": "@Shepmaster Good point, I added a clarification."}], "owner": {"reputation": 43, "user_id": 1898872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VI3ah.png?s=128&g=1", "display_name": "excaliburHisSheath", "link": "https://stackoverflow.com/users/1898872/excaliburhissheath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 332, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1450301988, "creation_date": 1450289865, "last_edit_date": 1450301988, "question_id": 34319294, "link": "https://stackoverflow.com/questions/34319294/type-mismatch-expected-associated-type-found-struct", "title": "type mismatch: expected associated type found struct", "body": "<p>I have the following example code:</p>\n\n<pre><code>trait Manager: Sized {\n    type Item: Item&lt;Manager=Self&gt;;\n}\n\ntrait Item: Sized {\n    type Manager: Manager&lt;Item=Self&gt; = DefaultManager&lt;Self&gt;;\n}\n\nstruct DefaultManager&lt;T: Item&lt;Manager=DefaultManager&lt;T&gt;&gt;&gt;(::std::marker::PhantomData&lt;T&gt;);\n\nimpl&lt;T: Item&lt;Manager=DefaultManager&lt;T&gt;&gt;&gt; Manager for DefaultManager&lt;T&gt; {\n    type Item = T;\n}\n</code></pre>\n\n<p>Which produces the warning (and future error):</p>\n\n<pre><code>&lt;anon&gt;:9:5: 9:61 warning: type mismatch resolving `&lt;Self as Item&gt;::Manager == DefaultManager&lt;Self&gt;`: expected associated type, found struct `DefaultManager` [E0271]\n&lt;anon&gt;:9     type Manager: Manager&lt;Item=Self&gt; = DefaultManager&lt;Self&gt;;\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:9:5: 9:61 help: see the detailed explanation for E0271\n&lt;anon&gt;:9:5: 9:61 note: this warning results from recent bug fixes and clarifications; it will become a HARD ERROR in the next release. See RFC 1214 for details.\n&lt;anon&gt;:9     type Manager: Manager&lt;Item=Self&gt; = DefaultManager&lt;Self&gt;;\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:9:5: 9:61 note: required by `DefaultManager`\n</code></pre>\n\n<p>My question is where is the type mismatch coming from? The warning highlights the default value for <code>Item::Manager</code> but notes that the type requirement being broken comes from <code>DefaultManager</code>. If I remove the default value for <code>Item::Manager</code> the warning goes away however I'd prefer to keep the default value. Changing</p>\n\n<pre><code>struct DefaultManager&lt;T: Item&lt;Manager=DefaultManager&lt;T&gt;&gt;&gt;(...)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>struct DefaultMananger&lt;T: Item&gt;\n</code></pre>\n\n<p>(but leaving the associated type constraint on the <code>Manager</code> impl for <code>DefaultManager</code>) also clears the warning but is possibly less-than-ideal because it would allow something like the following to happen:</p>\n\n<pre><code>struct Foo;\nimpl Item for Foo { type Manager = FooManager; }\n\nstruct FooManager;\nimpl Manager for FooManager { type Item = Foo; }\n\ntype DefaultFooManager = DefaultManager&lt;Foo&gt;;\n</code></pre>\n\n<p>In that case <code>DefaultManager&lt;Foo&gt;</code> should not be a valid type because <code>&lt;Foo as Item&gt;::Manager</code> is <code>FooManager</code>, not <code>DefaultManager&lt;Foo&gt;</code>.</p>\n\n<p>What is causing the type mismatch and how can I clarify to the compiler that the type constraints are met?</p>\n\n<p>EDIT: To clarify, I'm using the unstable <code>associated_type_defaults</code> feature so that I can provide a default value for <code>Item::Manager</code> so this example only builds on nightly at the moment.</p>\n"}, {"tags": ["oauth", "rust", "jwt", "hyper", "nickel"], "answers": [{"comments": [{"owner": {"reputation": 33, "user_id": 5687650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/086309104f3316f66bfd4cd59892faf8?s=128&d=identicon&r=PG&f=1", "display_name": "Marcos", "link": "https://stackoverflow.com/users/5687650/marcos"}, "edited": false, "score": 0, "creation_date": 1450293638, "post_id": 34318287, "comment_id": 56382360, "body": "It looks like it is related with <a href=\"https://github.com/rust-lang/cargo/issues/1636\" rel=\"nofollow noreferrer\">github.com/rust-lang/cargo/issues/1636</a>, also wildcard is <a href=\"http://doc.crates.io/faq.html#can-libraries-use-%2A-as-a-version-for-their-dependencies?\" rel=\"nofollow noreferrer\">deprecated</a> and yet another <a href=\"https://en.wikipedia.org/wiki/Dependency_hell\" rel=\"nofollow noreferrer\">dependency-hell problem</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 33, "user_id": 5687650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/086309104f3316f66bfd4cd59892faf8?s=128&d=identicon&r=PG&f=1", "display_name": "Marcos", "link": "https://stackoverflow.com/users/5687650/marcos"}, "edited": false, "score": 0, "creation_date": 1450293831, "post_id": 34318287, "comment_id": 56382471, "body": "@Marcos wildcard dependencies are deprecated <i>for published libraries</i>. Binaries may use them as they have a corresponding <code>Cargo.lock</code> file. Amusingly, this is the inverse of the traditional dependency hell issue. There, you cannot have conflicting versions of the same crate. Here, you can, but they conflict if you try to use them interchangeably."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1450286630, "creation_date": 1450286630, "answer_id": 34318287, "question_id": 34317700, "link": "https://stackoverflow.com/questions/34317700/how-to-get-the-authorization-bearer-header/34318287#34318287", "title": "How to get the Authorization Bearer header?", "body": "<p>Looking at the documentation for <a href=\"http://hyper.rs/hyper/hyper/header/struct.Authorization.html\" rel=\"nofollow\"><code>Authorization</code></a>, we can see that it does indeed implement <code>Header</code>:</p>\n\n<pre><code>impl&lt;S: Scheme + Any&gt; Header for Authorization&lt;S&gt;\n    where S::Err: 'static\n</code></pre>\n\n<p>So you were on the right track. My guess is that you are running into something more insidious: multiple versions of the same crate.</p>\n\n<p>Specifically, the version of nickel that I compiled today (0.7.3), depends on hyper 0.6.16. However, if I add <code>hyper = \"*\"</code> to my Cargo.toml, then I <strong>also</strong> get the newest version of hyper - 0.7.0.</p>\n\n<p>As unintuitive as it may seem, items from hyper 0.7 are not compatible with items from hyper 0.6. This is nothing specific about hyper either; it's true for all crates.</p>\n\n<p>If you update your dependency to lock to the same version of hyper that nickel wants, then you should be good to go.</p>\n\n<hr>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code># ...\n\n[dependencies]\nhyper = \"0.6.16\"\nnickel = \"*\"\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>extern crate nickel;\nextern crate hyper;\n\nuse hyper::header::{Authorization, Bearer};\nuse nickel::{HttpRouter, Request};\n\nfn foo(request: Request) {\n    // Get the full Authorization header from the incoming request headers\n    let auth_header = match request.origin.headers.get::&lt;Authorization&lt;Bearer&gt;&gt;() {\n        Some(header) =&gt; header,\n        None =&gt; panic!(\"No authorization header found\")\n    };\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 5687650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/086309104f3316f66bfd4cd59892faf8?s=128&d=identicon&r=PG&f=1", "display_name": "Marcos", "link": "https://stackoverflow.com/users/5687650/marcos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1367, "favorite_count": 0, "accepted_answer_id": 34318287, "answer_count": 1, "score": 3, "last_activity_date": 1450286630, "creation_date": 1450284886, "last_edit_date": 1450285134, "question_id": 34317700, "link": "https://stackoverflow.com/questions/34317700/how-to-get-the-authorization-bearer-header", "title": "How to get the Authorization Bearer header?", "body": "<p>I would like to get the Authorization Bearer header for OAuth purposes, but it looks a bit confusing reading the docs</p>\n\n<pre><code>use nickel::{Nickel, JsonBody, HttpRouter, Request, Response, MiddlewareResult, MediaType};\n\n    // Get the full Authorization header from the incoming request headers\n    let auth_header = match request.origin.headers.get::&lt;Authorization&lt;Bearer&gt;&gt;() {\n        Some(header) =&gt; header,\n        None =&gt; panic!(\"No authorization header found\")\n    };\n</code></pre>\n\n<p>This generates the error:</p>\n\n<blockquote>\n  <p>src/main.rs:84:56: 84:86 error: the trait <code>hyper::header::HeaderFormat</code> is not implemented for the type  <code>hyper::header::common::authorization::Authorization&lt;hyper::header::common::authorization::Bearer&gt;</code> [E0277]</p>\n</blockquote>\n\n<p>Looking at implementation it appears for me to be correct:</p>\n\n<p><a href=\"https://github.com/hyperium/hyper/blob/master/src/header/common/authorization.rs\" rel=\"nofollow\">https://github.com/hyperium/hyper/blob/master/src/header/common/authorization.rs</a></p>\n\n<pre><code>impl&lt;S: Scheme + Any&gt; HeaderFormat for Authorization&lt;S&gt; where &lt;S as FromStr&gt;::Err: 'static {\n    fn fmt_header(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        if let Some(scheme) = &lt;S as Scheme&gt;::scheme() {\n            try!(write!(f, \"{} \", scheme))\n        };\n        self.0.fmt_scheme(f)\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/auth0/rust-api-example/issues/1\" rel=\"nofollow\">https://github.com/auth0/rust-api-example/issues/1</a></p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 55, "user_id": 3346169, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001033961145/picture?type=large", "display_name": "xistoso", "link": "https://stackoverflow.com/users/3346169/xistoso"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450279430, "post_id": 34315525, "comment_id": 56373230, "body": "ty for the input it&#39;s Cargo.toml @Shepmaster"}], "answers": [{"comments": [{"owner": {"reputation": 55, "user_id": 3346169, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001033961145/picture?type=large", "display_name": "xistoso", "link": "https://stackoverflow.com/users/3346169/xistoso"}, "edited": false, "score": 0, "creation_date": 1450360850, "post_id": 34324490, "comment_id": 56414153, "body": "Ty. I have checked bitdefender loggs and there are messages about openssl0.7 in cargo folders. Will try add cargo and project folders to exception list and report back."}, {"owner": {"reputation": 55, "user_id": 3346169, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001033961145/picture?type=large", "display_name": "xistoso", "link": "https://stackoverflow.com/users/3346169/xistoso"}, "edited": false, "score": 0, "creation_date": 1450366800, "post_id": 34324490, "comment_id": 56418238, "body": "Yes it was AV software bitdefender. After an uninstall i deleted all the files in .cargo and project folder. Recompiled with rust -msvc version. Now i have to solve &quot;openssl/hmac.h&quot; file not being found. Ty @Francis Gagn&#233;"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1450310952, "creation_date": 1450310952, "answer_id": 34324490, "question_id": 34315525, "link": "https://stackoverflow.com/questions/34315525/could-not-rename-crate-when-compiling-a-basic-example-of-rustless-on-windows/34324490#34324490", "title": "&quot;could not rename crate&quot; when compiling a basic example of rustless on Windows", "body": "<p>Do you have antivirus/anti-malware software on your computer? It might be trying to analyze your program, locking the file. Try disabling it temporarily or adding an exception on your project directory, then try building again.</p>\n"}], "owner": {"reputation": 55, "user_id": 3346169, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001033961145/picture?type=large", "display_name": "xistoso", "link": "https://stackoverflow.com/users/3346169/xistoso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 205, "favorite_count": 0, "accepted_answer_id": 34324490, "answer_count": 1, "score": 0, "last_activity_date": 1450310952, "creation_date": 1450278657, "last_edit_date": 1450282811, "question_id": 34315525, "link": "https://stackoverflow.com/questions/34315525/could-not-rename-crate-when-compiling-a-basic-example-of-rustless-on-windows", "title": "&quot;could not rename crate&quot; when compiling a basic example of rustless on Windows", "body": "<p>I'm trying to build <a href=\"https://github.com/rustless/rustless\" rel=\"nofollow\" title=\"rustless\">rustless</a> on Windows:</p>\n\n<p>This is my Cargo.toml:</p>\n\n<pre><code>[dependencies.rustless]\ngit = \"https://github.com/rustless/rustless\"\n\n[package]\n\nname = \"ccampo_substancias_srv\"\nversion = \"0.0.1\"\nauthors = [ \"------------------------------\" ]\n\n[[bin]]\n\nname = \"Rest_test\"\n</code></pre>\n\n<p>This is main.rs:</p>\n\n<pre><code>#![feature(plugin)]\n\n#[plugin]\nextern crate rustless;\nextern crate hyper;\nextern crate iron;\nextern crate \"rustc-serialize\" as rustc_serialize;\nextern crate valico;\n\nuse hyper::status::StatusCode;\nuse iron::Iron;\nuse rustless::{\n    Application, Api, Nesting, Versioning\n};\nuse rustc_serialize::json::ToJson;\n\nfn main() {\n\n    let api = Api::build(dsl!(|api| {\n        // Specify API version\n        version(\"v1\", Versioning::AcceptHeader(\"chat\"));\n        prefix(\"api\");\n\n        // Create API for chats\n        mount(Api::build(dsl!(|chats_api| {\n\n            after(|client, _params| {\n                client.set_status(StatusCode::NotFound);\n                Ok(())\n            });\n\n            // Add namespace\n            namespace(\"chats/:id\", dsl!(|chat_ns| {\n\n                // Valico settings for this namespace\n                params(|params| {\n                    params.req_typed(\"id\", valico::u64())\n                });\n\n                // Create endpoint for POST /chats/:id/users/:user_id\n                post(\"users/:user_id\", dsl!(|endpoint| {\n\n                    // Add description\n                    desc(\"Update user\");\n\n                    // Valico settings for endpoint params\n                    params(|params| {\n                        params.req_typed(\"user_id\", valico::u64());\n                        params.req_typed(\"name\", valico::string())\n                    });\n\n                    handle(|client, params| {\n                        client.json(&amp;params.to_json())\n                    })\n                }));\n\n            }));\n        })));\n    }));\n\n    let app = Application::new(api);\n\n    Iron::new(app).listen(\"localhost:4000\").unwrap();\n    println!(\"On 4000\");\n\n    println!(\"Rustless server started!\");\n}\n</code></pre>\n\n<p>Building with \"cargo build --verbose\" and rust 1.5 (64bit) on Windows 10.\nThis is the error I'm getting, looks like it's related to some file path:</p>\n\n<pre><code> Fresh jsonway v0.3.5\n\n Fresh conduit-mime-types v0.7.3\n\n Fresh winapi v0.2.5\n\n Build failed, waiting for other jobs to finish...\n\n could not rename crate \"C:\\\\Users\\\\Pedro\\\\workspace\\\\ccampo-substancias-srv\\\\target\\\\debug\\\\build\\\\advapi32-sys-cfef7a1f30f1e5f6\\\\build_script_build.exe\"\n\nCaused by:   Acesso negado. (os error 5)\n</code></pre>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486716497, "post_id": 34304593, "comment_id": 71475719, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items\">Is it possible to create a macro which counts the number of expanded items?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450245711, "post_id": 34304907, "comment_id": 56351676, "body": "I was worried this might be the case. Thanks for your implementation - I have no idea how it works but I&#39;ll figure it out!  Maybe it&#39;s easier in this case to write a compiler plugin? I haven&#39;t looked at them yet but from what I&#39;ve read this is a decent use case?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450261691, "post_id": 34304907, "comment_id": 56360538, "body": "@user124784: You could do that, but keep in mind that compiler plugins are unstable, break frequently, and cannot be used on anything other than nightly compiler builds."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1450245531, "creation_date": 1450245531, "answer_id": 34304907, "question_id": 34304593, "link": "https://stackoverflow.com/questions/34304593/counting-length-of-repetition-in-macro/34304907#34304907", "title": "Counting length of repetition in macro", "body": "<p>First, to quickly address the title of your question: see the <a href=\"https://danielkeep.github.io/tlborm/book/blk-counting.html\" rel=\"nofollow\">Counting chapter in The Little Book of Rust Macros</a>.  To summarise: there is no direct way, you need to write a macro that expands to something you can count in regular code.</p>\n\n<p>Now, to address your <em>actual</em> question: hoo boy.</p>\n\n<p>It's not so much <em>counting</em> that you want, it's to fail at compile time if the sub-sequences have different lengths.</p>\n\n<p>First of all, there's no <em>clean</em> way to trigger a compilation failure from a macro.  You can trigger some <em>other</em> pre-existing error, but you can't control the actual error message.</p>\n\n<p>Secondly, there's no easy way to do \"variable\" comparisons in macros <em>at all</em>.  You can <em>sometimes</em> compare against a fixed token sequence, but you're not doing that here.</p>\n\n<p>So it's <em>doubly</em> not-really-doable.</p>\n\n<p>The simplest thing to do is check the lengths during construction at runtime, and return an error or panic if they don't match.</p>\n\n<hr>\n\n<p>Is it <em>actually</em> impossible?  I don't believe so.  If you're willing to accept inscrutable error messages and a <em>massive</em> jump in complexity, you can check for length equality between two token sequences like so:</p>\n\n<pre><code>macro_rules! tts_equal_len {\n    (($_lhs:tt $($lhs_tail:tt)*), ($_rhs:tt $($rhs_tail:tt)*)) =&gt; {\n        tts_equal_len!(($($lhs_tail)*), ($($rhs_tail)*))\n    };\n    (($($_lhs_tail:tt)+), ()) =&gt; { do_something_bad!() };\n    ((), ($($_rhs_tail:tt)+)) =&gt; { do_something_bad!() };\n    ((), ()) =&gt; { do_something_good!() };\n}\n\nmacro_rules! do_something_bad { () =&gt; { { println!(\"kaboom!\") } } }\nmacro_rules! do_something_good { () =&gt; { { println!(\"no kaboom!\") } } }\n\nfn main() {\n    tts_equal_len!((,,,), (,,,));\n    tts_equal_len!((,,,), (,,));\n    tts_equal_len!((,), (,,));\n}\n</code></pre>\n\n<p>Again, the real problem is finding some way to fail at compile time such that the user will understand <em>why</em> compilation failed.</p>\n"}, {"comments": [{"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450324152, "post_id": 34324856, "comment_id": 56394514, "body": "Thanks for the response! This is a really smart answer but it does create an issue - the user can&#39;t create a single row matrix. Is that something which can be fixed? Can we make the repeated rows optional?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1450334557, "post_id": 34324856, "comment_id": 56397830, "body": "You should replace <code>0</code> and <code>1</code> in <code>count!</code> with <code>0usize</code> and <code>1usize</code>, or you&#39;ll <i>rapidly</i> hit exponential compile time problems due to integer inference.  Also, this definition of <code>count!</code> is only good up to about 64 elements; the link in my answer has more robust definitions.  Having said that, using the array length like that is clever; I haven&#39;t seen that one before."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450357445, "post_id": 34324856, "comment_id": 56411763, "body": "@user124784: It&#39;s just a matter of adding another pattern to the macro, which I&#39;ve added in my answer (it&#39;s much simpler since we don&#39;t need to validate the width of rows)."}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450365554, "post_id": 34324856, "comment_id": 56417381, "body": "@FrancisGagn&#233; That&#39;s awesome! I don&#39;t think I need to worry about the user exceeding the 64 element count limit."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 5, "last_activity_date": 1450357338, "last_edit_date": 1450357338, "creation_date": 1450313289, "answer_id": 34324856, "question_id": 34304593, "link": "https://stackoverflow.com/questions/34304593/counting-length-of-repetition-in-macro/34324856#34324856", "title": "Counting length of repetition in macro", "body": "<pre><code>macro_rules! count {\n    () =&gt; (0usize);\n    ( $x:tt $($xs:tt)* ) =&gt; (1usize + count!($($xs)*));\n}\n\nmacro_rules! mat {\n    ( $( $x:expr ),* ) =&gt; { {\n        let vec = vec![$($x),*];\n        Matrix { cols : vec.len(), rows: 1, data: vec }\n    } };\n    ( $( $x0:expr ),* ; $($( $x:expr ),*);* ) =&gt; { {\n        let mut _assert_width0 = [(); count!($($x0)*)];\n        let mut vec = Vec::new();\n        let rows = 1usize;\n        let cols = count!($($x0)*);\n\n        $( vec.push($x0); )*\n\n        $(\n            let rows = rows + 1usize;\n            let _assert_width = [(); count!($($x)*)];\n            _assert_width0 = _assert_width;\n            $( vec.push($x); )*\n        )*\n\n        Matrix { cols : cols, rows: rows, data: vec }\n    } }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/173rwm\" rel=\"noreferrer\">playground</a></p>\n\n<p>The <code>count!</code> macro expands to a constant expression that represents the number of arguments it got as input. It's just a helper for the <code>mat!</code> macro. If you need to count a lot of items and the compiler can't cope with it, see <a href=\"https://danielkeep.github.io/tlborm/book/blk-counting.html\" rel=\"noreferrer\">the Counting chapter in The Little Book of Rust Macros</a>, which has more complex macros for counting.</p>\n\n<p>My version of the macro uses dummy variables and assignments to verify that the width of all rows are the same. First off, I changed the macro's pattern to handle the first row separately from the subsequent rows. The first variable, <code>_assert_width0</code>, is initialized with an array of units (<code>()</code>, which makes the array take no memory), with the size of the array being the number of items in the first row. Then, <code>_assert_width</code> is also initialized with an array of units, with the size of the array being the number of items in each subsequent row. Then, <code>_assert_width</code> is assigned to <code>_assert_width0</code>. The magic here is that this line will raise a compiler error if the width of a row doesn't match the width of the first row, since the types of the array won't match (you might have e.g. <code>[(); 3]</code> and <code>[(); 4]</code>). The error isn't super clear if you don't know what's going on in the macro, though:</p>\n\n<pre><code>&lt;anon&gt;:38:24: 38:37 error: mismatched types:\n expected `[(); 3]`,\n    found `[(); 4]`\n(expected an array with a fixed size of 3 elements,\n    found one with 4 elements) [E0308]\n&lt;anon&gt;:38           _assert_width0 = _assert_width;\n                                     ^~~~~~~~~~~~~\n&lt;anon&gt;:47:13: 47:44 note: in this expansion of mat! (defined in &lt;anon&gt;)\n&lt;anon&gt;:38:24: 38:37 help: see the detailed explanation for E0308\n</code></pre>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3064, "favorite_count": 2, "accepted_answer_id": 34304907, "answer_count": 2, "score": 6, "last_activity_date": 1450357338, "creation_date": 1450243925, "last_edit_date": 1450244749, "question_id": 34304593, "link": "https://stackoverflow.com/questions/34304593/counting-length-of-repetition-in-macro", "title": "Counting length of repetition in macro", "body": "<p>I'm trying to implement a macro to allow MATLAB-esque matrix creation. I've got a basic working macro but I still have a long way to go.</p>\n\n<p>I want to be able to enforce the right structure (same number of elements in each row) but I'm not sure how to do this within the macro. I think I want to enforce that each internal repetition has the same length - is this something I can do?</p>\n\n<p>Here is my code so far:</p>\n\n<pre><code>pub struct Matrix&lt;T&gt; {\n    pub cols: usize,\n    pub rows: usize,\n    pub data: Vec&lt;T&gt;\n}\n\nmacro_rules! mat {\n    ( $($( $x:expr ),*);* ) =&gt; {\n        {\n            let mut vec = Vec::new();\n            let mut rows = 0;\n\n            $(\n                $(\n                    vec.push($x);\n                )*\n                rows += 1;\n            )*\n            Matrix { cols : vec.len()/rows, rows: rows, data: vec}\n        }\n    };\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=946214bff9b15f5cec6a&amp;version=stable\" rel=\"noreferrer\">It works</a> but as you can see isn't very safe. It has no restrictions on the structure.</p>\n\n<p>I want to do a lot more with this macro but I think this is a good start!</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Here is <a href=\"https://play.rust-lang.org/?gist=9347cae85fe9d845d666&amp;version=stable\" rel=\"noreferrer\">some playground code</a> for a crappy implementation I worked out. If anyone has any better suggestions please let me know! Otherwise I'll close this myself.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 17, "last_activity_date": 1530029145, "last_edit_date": 1530029145, "creation_date": 1450244392, "answer_id": 34304701, "question_id": 34304341, "link": "https://stackoverflow.com/questions/34304341/can-i-destructure-a-tuple-without-binding-the-result-to-a-new-variable-in-a-let/34304701#34304701", "title": "Can I destructure a tuple without binding the result to a new variable in a let/match/for statement?", "body": "<p>No.</p>\n\n<p>Destructuring is something you can only do with patterns; the left-hand side of an assignment is <em>not</em> a pattern, hence you can't destructure-and-assign.</p>\n\n<p>See <a href=\"https://github.com/rust-lang/rfcs/issues/372\" rel=\"noreferrer\">proto-RFC 372 (Destructuring assignment)</a> which discusses the possibility of adding this feature.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1605385433, "creation_date": 1605385433, "answer_id": 64838265, "question_id": 34304341, "link": "https://stackoverflow.com/questions/34304341/can-i-destructure-a-tuple-without-binding-the-result-to-a-new-variable-in-a-let/64838265#64838265", "title": "Can I destructure a tuple without binding the result to a new variable in a let/match/for statement?", "body": "<p>Nightly Rust has <a href=\"https://github.com/rust-lang/rust/issues/71126\" rel=\"nofollow noreferrer\"><code>feature(destructuring_assignment)</code></a>, which allows your original attempt to compile as-is:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(destructuring_assignment)]\n\nfn main() {\n    let mut list = &amp;[0, 1, 2, 3][..];\n    while !list.is_empty() {\n        let head;\n        (head, list) = list.split_at(1);\n        println!(&quot;{:?}&quot;, head);\n    }\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>[0]\n[1]\n[2]\n[3]\n</code></pre>\n<hr />\n<p>However, I'd solve this using stable features like slice pattern matching, which avoids the need for the double check in <code>split_at</code> and <code>is_empty</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut list = &amp;[0, 1, 2, 3][..];\n\n    while let [head, rest @ ..] = list {\n        println!(&quot;{:?}&quot;, head);\n        list = rest;\n    }\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31798737/155423\">How to swap two variables?</a></li>\n</ul>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4196, "favorite_count": 6, "accepted_answer_id": 34304701, "answer_count": 2, "score": 20, "last_activity_date": 1605385433, "creation_date": 1450242625, "last_edit_date": 1605385343, "question_id": 34304341, "link": "https://stackoverflow.com/questions/34304341/can-i-destructure-a-tuple-without-binding-the-result-to-a-new-variable-in-a-let", "title": "Can I destructure a tuple without binding the result to a new variable in a let/match/for statement?", "body": "<p>I'd like to destructure a tuple and assign part of the result to a new variable and assign another part of the result to an existing.</p>\n<p>The following code illustrates the intent (it's a dumb example which results in an infinite loop printing <code>[0]</code>):</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut list = &amp;[0, 1, 2, 3][..];\n    while !list.is_empty() {\n        let (head, list) = list.split_at(1);\n        // An obvious workaround here is to introduce a new variable in the above\n        // let statement, and then just assign it to list.\n        println!(&quot;{:?}&quot;, head);\n    }\n}\n</code></pre>\n<p>This code creates a new variable <code>list</code> instead of reassigning it.</p>\n<p>If I change the code to the following (to avoid the <code>let</code> that introduces the new <code>list</code> variable), it doesn't compile:</p>\n<pre><code>fn main() {\n    let mut list = &amp;[0, 1, 2, 3][..];\n    while !list.is_empty() {\n        let head;\n        (head, list) = list.split_at(1);\n        println!(&quot;{:?}&quot;, head);\n    }\n}\n</code></pre>\n<p>Compilation error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0070]: invalid left-hand side of assignment\n --&gt; src/main.rs:5:22\n  |\n5 |         (head, list) = list.split_at(1);\n  |         ------------ ^\n  |         |\n  |         cannot assign to this expression\n  |\n</code></pre>\n<p>Is there a way to do this, or can destructuring only be used in <code>let</code>, <code>match</code>, and <code>for</code> statements?</p>\n"}, {"tags": ["postgresql", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1638, "user_id": 1087667, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4043b15c5ed79ab482b6f2318dd23ddf?s=128&d=identicon&r=PG", "display_name": "ibrabeicker", "link": "https://stackoverflow.com/users/1087667/ibrabeicker"}, "edited": false, "score": 0, "creation_date": 1450222679, "post_id": 34301489, "comment_id": 56345131, "body": "I just discovered that Rust does not have a built-in decimal type, this just made everything more difficult"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 1638, "user_id": 1087667, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4043b15c5ed79ab482b6f2318dd23ddf?s=128&d=identicon&r=PG", "display_name": "ibrabeicker", "link": "https://stackoverflow.com/users/1087667/ibrabeicker"}, "edited": false, "score": 0, "creation_date": 1450222719, "post_id": 34301489, "comment_id": 56345147, "body": "@ibrabeicker, There&#39;s <a href=\"https://www.reddit.com/r/rust/comments/3wfhro/decimal_d128_type_for_rust_for_decimal_floating/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/3wfhro/&hellip;</a>; see also <a href=\"https://www.reddit.com/r/rust/comments/3wubj0/numeric_types_in_rust/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/3wubj0/numeric_types_in_rust</a>"}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 3, "last_activity_date": 1520812877, "last_edit_date": 1520812877, "creation_date": 1450222513, "answer_id": 34301489, "question_id": 34301180, "link": "https://stackoverflow.com/questions/34301180/what-is-the-correct-way-of-using-a-fixed-precision-number-in-rust-postgres/34301489#34301489", "title": "What is the correct way of using a fixed precision number in rust-postgres?", "body": "<p><code>Numeric</code> is not in the <a href=\"http://sfackler.github.io/rust-postgres/doc/v0.10.2/postgres/types/trait.ToSql.html\" rel=\"nofollow noreferrer\">supported types</a>.\nYou need to implement the trait ToSql yourself with something like:</p>\n\n<pre><code>struct Float64(f64);\n\nimpl ToSql for Float64 { // Or a fixed-precision type.\n    to_sql_checked!();\n\n    fn to_sql&lt;W: Write + ?Sized&gt;(&amp;self, _: &amp;Type, mut w: &amp;mut W, _: &amp;SessionInfo) -&gt; Result&lt;IsNull&gt; {\n        let num = 0;\n        w.write_f64::&lt;BigEndian&gt;(num)?;\n        *self = Float64(num);\n        Ok(IsNull::No)\n    }\n\n    accepts!(Type::Numeric);\n}\n</code></pre>\n"}], "owner": {"reputation": 1638, "user_id": 1087667, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4043b15c5ed79ab482b6f2318dd23ddf?s=128&d=identicon&r=PG", "display_name": "ibrabeicker", "link": "https://stackoverflow.com/users/1087667/ibrabeicker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 0, "accepted_answer_id": 34301489, "answer_count": 1, "score": 3, "last_activity_date": 1520812877, "creation_date": 1450220897, "last_edit_date": 1450229070, "question_id": 34301180, "link": "https://stackoverflow.com/questions/34301180/what-is-the-correct-way-of-using-a-fixed-precision-number-in-rust-postgres", "title": "What is the correct way of using a fixed precision number in rust-postgres?", "body": "<p>What is the correct way of defining and passing a fixed precision number (decimal or numeric in Postgres) to a insert in rust-postgres?</p>\n\n<pre><code>transaction.execute(\"INSERT INTO commons_account(\n            display_name, blocked, balance, blocked_balance, password, salt)\n            VALUES ($1, $2, $3, $4, $5, $6);\", &amp;[&amp;\"bob\", &amp;false, &amp;0, &amp;0, &amp;\"dfasdfsa\", &amp;\"dfsdsa\"]).unwrap();\n</code></pre>\n\n<p>Both balance and blocked balance are <code>numeric</code> and running this code gives this error</p>\n\n<pre><code>thread 'test' panicked at 'called `Result::unwrap()` on an `Err` value: WrongType(Numeric)'\n</code></pre>\n"}, {"tags": ["json", "serialization", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1450216190, "creation_date": 1450216190, "answer_id": 34300059, "question_id": 34298262, "link": "https://stackoverflow.com/questions/34298262/decoding-a-variable-length-json-array-into-a-rust-array/34300059#34300059", "title": "Decoding a variable-length JSON array into a Rust array", "body": "<p>Having an array that is only partially filled doesn't really make sense. Arrays statically know exactly how much space to allocate, but you have to fill that space with <em>something</em> in avoid some security issues with uninitialized data. They have no concept of \"unused\" spots.</p>\n\n<p>The easiest fix is to use a <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\"><code>Vec</code></a>:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct Men {\n    ok:     bool,\n    people: Vec&lt;Man&gt;,\n}\n</code></pre>\n\n<p>A <code>Vec</code> represents a <em>resizable</em> contiguous amount of data. It knows how much space is allocated <em>and</em> how many of those allocations are valid, and will never let you access the invalid items.</p>\n"}, {"tags": [], "owner": {"reputation": 813, "user_id": 1453453, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24d7111ef96c9534289fa27d069594e2?s=128&d=identicon&r=PG", "display_name": "aepsil0n", "link": "https://stackoverflow.com/users/1453453/aepsil0n"}, "is_accepted": false, "score": 4, "last_activity_date": 1450216301, "creation_date": 1450216301, "answer_id": 34300089, "question_id": 34298262, "link": "https://stackoverflow.com/questions/34298262/decoding-a-variable-length-json-array-into-a-rust-array/34300089#34300089", "title": "Decoding a variable-length JSON array into a Rust array", "body": "<p>Well, either you really have only lists of men with length 1, in that case you could change the type to <code>people: [Man; 1]</code>. Or you actually have variable length at run-time, in which case you'd be better off picking a dynamically sized vector like <code>people: Vec&lt;Man&gt;</code>.</p>\n\n<p>As a hint: <code>serde</code> and <code>serde_json</code> might be better choices as dependencies, since <code>rustc-serialize</code> was only extracted from the compiler, so that it would not have to end up in <code>std</code> permanently.</p>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 795, "favorite_count": 0, "accepted_answer_id": 34300059, "answer_count": 2, "score": 1, "last_activity_date": 1450216301, "creation_date": 1450209424, "last_edit_date": 1450216243, "question_id": 34298262, "link": "https://stackoverflow.com/questions/34298262/decoding-a-variable-length-json-array-into-a-rust-array", "title": "Decoding a variable-length JSON array into a Rust array", "body": "<p>I'm trying to decode this data:</p>\n\n<pre><code>{\n  \"ok\": true,\n  \"people\": [\n    {\n      \"name\": \"John\",\n      \"age\": \"10\"\n    }\n  ]\n}\n</code></pre>\n\n<p>Into a struct.The code is:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json;\n\n#[derive(RustcDecodable)]\nstruct Man {\n    name: String,\n    age: i32,\n}\n\n#[derive(RustcDecodable)]\nstruct Men {\n    ok:      bool,\n    people: [Man; 16],\n}\n\n...\n\nlet json: Men = json::decode(&amp;data).unwrap();\n\n...\n</code></pre>\n\n<p>The problem is that when the length of the array in <code>Men</code> doesn't match the length of corresponding field in JSON exactly, this error happens:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called `Result::unwrap()`\non an `Err` value: ApplicationError(\"wrong array length\")',\n../src/libcore/result.rs:738\n</code></pre>\n\n<p>Any ideas on how to deal with this?\nGeneral code style advice is also welcome.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1450191970, "post_id": 34284905, "comment_id": 56326492, "body": "I think the most important thing here is <i>the Range iterator [...] knows that is exactly 5 elements long</i>. That&#39;s how I&#39;d write this code, although I&#39;d use type inference on the <code>collect</code> type parameter: <code>(0..5).map(|_| None).collect::&lt;Vec&lt;_&gt;&gt;().into_boxed_slice()</code>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1450191811, "last_edit_date": 1450191811, "creation_date": 1450170179, "answer_id": 34284905, "question_id": 34284191, "link": "https://stackoverflow.com/questions/34284191/initialize-boxed-slice-without-clone-or-copy/34284905#34284905", "title": "Initialize boxed slice without clone or copy", "body": "<p>Let's start with <code>by_vec2</code>. You are taking a <code>&amp;mut</code> reference to a <code>Vec</code>. You shouldn't do that, work directly with the <code>Vec</code> and make the <code>v</code> binding mutable.</p>\n\n<p>Then you are iterating over the length of a <code>Vec</code> with a capacity of 5 and a length of 0. That means your loop never gets executed. What you wanted was to iterate over <code>0..v.cap()</code>.</p>\n\n<p>Since your <code>v</code> is still of length 0, accessing <code>v[i]</code> in the loop will panic at runtime. What you actually want is <code>v.push(None)</code>. This would normally cause reallocations, but in your case you already allocated with <code>Vec::with_capacity</code>, so pushing 5 times will not allocate.</p>\n\n<p>This time around we did not take a reference to the <code>Vec</code> so <code>into_boxed_slice</code> will actually work.</p>\n\n<pre><code>fn by_vec2&lt;T&gt;() -&gt; Box&lt;[Option&lt;T&gt;]&gt; {\n    let mut v = Vec::with_capacity(5);\n    for _ in 0..v.capacity() {\n        v.push(None);\n    }\n    v.into_boxed_slice()\n}\n</code></pre>\n\n<p>Your <code>by_iter</code> function actually only allocates once. The Range iterator created by <code>0..5</code> knows that is exactly 5 elements long. So <code>collect</code> will in fact check that length and allocate only once.</p>\n"}], "owner": {"reputation": 958, "user_id": 2626742, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3376e8297d843faf775b3cee1a906f9a?s=128&d=identicon&r=PG", "display_name": "Cody", "link": "https://stackoverflow.com/users/2626742/cody"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 900, "favorite_count": 0, "accepted_answer_id": 34284905, "answer_count": 1, "score": 1, "last_activity_date": 1450191858, "creation_date": 1450167970, "last_edit_date": 1450191858, "question_id": 34284191, "link": "https://stackoverflow.com/questions/34284191/initialize-boxed-slice-without-clone-or-copy", "title": "Initialize boxed slice without clone or copy", "body": "<p>I'm trying to initialize a boxed slice of <code>None</code> values, such that the underlying type <code>T</code> does not need to implement <code>Clone</code> or <code>Copy</code>. Here a few ideal solutions:</p>\n\n<pre><code>fn by_vec&lt;T&gt;() -&gt; Box&lt;[Option&lt;T&gt;]&gt; {\n    vec![None; 5].into_boxed_slice()\n}\n\nfn by_arr&lt;T&gt;() -&gt; Box&lt;[Option&lt;T&gt;]&gt; {\n    Box::new([None; 5])\n}\n</code></pre>\n\n<p>Unfortunately, the <code>by_vec</code> implementation requires <code>T: Clone</code> and the <code>by_arr</code> implemenation requires <code>T: Copy</code>. I've experimented with a few more approaches:</p>\n\n<pre><code>fn by_vec2&lt;T&gt;() -&gt; Box&lt;[Option&lt;T&gt;]&gt; {\n    let v = &amp;mut Vec::with_capacity(5);\n    for i in 0..v.len() {\n        v[i] = None;\n    }\n    v.into_boxed_slice() // Doesn't work: cannot move out of borrowed content\n}\n\nfn by_iter&lt;T&gt;() -&gt; Box&lt;[Option&lt;T&gt;]&gt; {\n     (0..5).map(|_| None).collect::&lt;Vec&lt;Option&lt;T&gt;&gt;&gt;().into_boxed_slice()\n}\n</code></pre>\n\n<p><code>by_vec2</code> doesn't get past the compiler (I'm not sure I understand why), but <code>by_iter</code> does. I'm concerned about the performance of <code>collect</code> -- will it need to resize the vector it is collecting into as it iterates, or can it allocate the correct sized vector to begin with?</p>\n\n<p>Maybe I'm going about this all wrong -- I'm very new to Rust, so any tips would be appreciated!</p>\n"}, {"tags": ["rust", "iron"], "comments": [{"owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 0, "creation_date": 1450162486, "post_id": 34281849, "comment_id": 56307205, "body": "I am wondering if <a href=\"http://ironframework.io/doc/bodyparser/struct.Json.html\" rel=\"nofollow noreferrer\">bodyparser::Json</a> can be used."}], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 4, "last_activity_date": 1450188996, "creation_date": 1450188996, "answer_id": 34291502, "question_id": 34281849, "link": "https://stackoverflow.com/questions/34281849/how-can-the-submitted-values-in-a-post-message-be-accessed-in-rust-iron-framewor/34291502#34291502", "title": "How can the submitted values in a POST message be accessed in Rust/Iron framework?", "body": "<p>You can use the <a href=\"https://crates.io/crates/params/\" rel=\"nofollow\"><code>params</code></a> crate for this.</p>\n\n<p>With this crate, you can get the POST parameters with:</p>\n\n<pre><code>let params = req.get_ref::&lt;Params&gt;();\n</code></pre>\n\n<p>(See the <a href=\"https://github.com/iron/params/blob/master/examples/params.rs\" rel=\"nofollow\">example</a> for a complete code.)</p>\n"}], "owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 34291502, "answer_count": 1, "score": 1, "last_activity_date": 1450188996, "creation_date": 1450157986, "question_id": 34281849, "link": "https://stackoverflow.com/questions/34281849/how-can-the-submitted-values-in-a-post-message-be-accessed-in-rust-iron-framewor", "title": "How can the submitted values in a POST message be accessed in Rust/Iron framework?", "body": "<p>I am using a form which uses the <code>POST</code> method to submit the input. Is it possible to access the input like accessing a dictionary? I think there must be a better way than parsing the request body.</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 113, "favorite_count": 1, "answer_count": 0, "score": 5, "last_activity_date": 1450192086, "creation_date": 1450151995, "last_edit_date": 1450192086, "question_id": 34280911, "link": "https://stackoverflow.com/questions/34280911/why-cant-a-higher-kinded-trait-bound-of-from-on-an-associated-type-be-satisfi", "title": "Why can&#39;t a higher kinded trait bound of From&lt;&gt; on an associated type be satisfied, but Into&lt;&gt; can?", "body": "<pre class=\"lang-rust prettyprint-override\"><code>trait A&lt;'self_&gt; {\n    type T;\n}\n\ntrait B: for&lt;'self_&gt; A&lt;'self_&gt; {\n    type U: for&lt;'self_&gt; From&lt;&lt;Self as A&lt;'self_&gt;&gt;::T&gt;;  // &lt;-- this won't compile\n    // type U: for&lt;'self_&gt; Into&lt;&lt;Self as A&lt;'self_&gt;&gt;::T&gt;;  // &lt;-- but this will\n}\n\nstruct M;\nimpl&lt;'self_&gt; A&lt;'self_&gt; for M {\n    type T = usize;\n}\nimpl B for M {\n    type U = usize;\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"http://is.gd/xSYneN\" rel=\"nofollow\">playpen link</a></p>\n\n<p>Why will the line marked \"this won't compile\" fail to compile (even though <code>From&lt;T&gt;</code> is implemented for all <code>T</code>), while the one marked \"but this will\" (which depends on a blanket impl on <code>Into</code> from <code>From</code> in the standard library) will?</p>\n\n<p>I suspect that this is legitimately a bug, but would rather avoid filing anything and adding to the noise if there's simply something special about <code>From</code> vs. <code>Into</code> I wasn't aware of.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1450150011, "post_id": 34280483, "comment_id": 56303013, "body": "Probably a duplicate of <a href=\"http://stackoverflow.com/q/31029095/155423\">Disable registry update in Cargo</a>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1450150062, "post_id": 34280483, "comment_id": 56303032, "body": "@Shepmaster I think you&#39;re right... I was just writing up how to do this.  Do you know, I <i>completely forgot</i> that I&#39;d already answered this?  Where would we be without you? :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1450150095, "post_id": 34280483, "comment_id": 56303043, "body": "@DK.&lt;3 Just doing my part to help out. :-)"}], "owner": {"reputation": 682, "user_id": 4719039, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0901a072c48b7ab95f6552fbf3b5bfb4?s=128&d=identicon&r=PG&f=1", "display_name": "F001", "link": "https://stackoverflow.com/users/4719039/f001"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 103, "favorite_count": 0, "closed_date": 1450404995, "answer_count": 0, "score": 6, "last_activity_date": 1450717674, "creation_date": 1450148955, "last_edit_date": 1450717674, "question_id": 34280483, "link": "https://stackoverflow.com/questions/34280483/how-to-setup-a-local-repository-of-crates-io", "closed_reason": "Duplicate", "title": "How to setup a local repository of &#39;crates.io&#39;?", "body": "<p>Visiting 'crates.io' is really slow in my country. Can I setup a local repository of 'crates.io' for our team? Is there any detailed documentation?</p>\n"}, {"tags": ["json", "rust", "twitch"], "comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1450140044, "post_id": 34279141, "comment_id": 56300302, "body": "I&#39;m confused about your output: That&#39;s the output of the last <code>println!</code>?"}, {"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1450140291, "post_id": 34279141, "comment_id": 56300409, "body": "I can update it with an exact terminal output example for you? The output of the last println is the status, headers and json together as one."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1450140323, "post_id": 34279141, "comment_id": 56300424, "body": "That would be great."}, {"owner": {"reputation": 27290, "user_id": 16959, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/SlC7g.jpg?s=128&g=1", "display_name": "Jason Sperske", "link": "https://stackoverflow.com/users/16959/jason-sperske"}, "edited": false, "score": 0, "creation_date": 1450140398, "post_id": 34279141, "comment_id": 56300453, "body": "According to <a href=\"https://www.branah.com/ascii-converter\" rel=\"nofollow noreferrer\">branah.com/ascii-converter</a> that string of ints equals <code>{ &quot; m a t u r e &quot; : f a l</code>"}, {"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1450140589, "post_id": 34279141, "comment_id": 56300510, "body": "@erip I have updated it with the example."}, {"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "reply_to_user": {"reputation": 27290, "user_id": 16959, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/SlC7g.jpg?s=128&g=1", "display_name": "Jason Sperske", "link": "https://stackoverflow.com/users/16959/jason-sperske"}, "edited": false, "score": 0, "creation_date": 1450140609, "post_id": 34279141, "comment_id": 56300519, "body": "@JasonSperske Yes, that is example what I expected."}, {"owner": {"reputation": 27290, "user_id": 16959, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/SlC7g.jpg?s=128&g=1", "display_name": "Jason Sperske", "link": "https://stackoverflow.com/users/16959/jason-sperske"}, "edited": false, "score": 0, "creation_date": 1450141038, "post_id": 34279141, "comment_id": 56300639, "body": "Looks like this might help <a href=\"http://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string\" title=\"how do i print a vector of u8 as a string\">stackoverflow.com/questions/28123923/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "edited": false, "score": 0, "creation_date": 1450140708, "post_id": 34279216, "comment_id": 56300550, "body": "I saw the signature indeed but I was not sure what I had to do with it. Thanks for the tips and the explanation. This should help me to get further."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1450140434, "creation_date": 1450140434, "answer_id": 34279216, "question_id": 34279141, "link": "https://stackoverflow.com/questions/34279141/why-do-i-get-a-list-of-numbers-instead-of-json-when-using-the-twitch-api-via-rus/34279216#34279216", "title": "Why do I get a list of numbers instead of JSON when using the Twitch API via Rust?", "body": "<p>The <a href=\"https://github.com/carllerche/curl-rust/blob/76172b3ebf958fcf0b10d400f19ee02486a80ee7/src/http/response.rs#L37\" rel=\"nofollow\"><code>get_body</code> function</a> has signature:</p>\n\n<pre><code>pub fn get_body&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a [u8] {\n</code></pre>\n\n<p>That is, it is returning a slice of bytes, and printing such a slice prints them as numbers. The numbers are the raw values of the (ASCII) characters in the JSON, which can be viewed as a <code>str</code> (if they are UTF-8 encoded) via <a href=\"http://doc.rust-lang.org/std/str/fn.from_utf8.html\" rel=\"nofollow\"><code>from_utf8</code></a>:</p>\n\n<pre><code>fn main() {\n    let b = [123_u8, 34, 109, 97, 116, 117, 114, 101, 34, 58, 102, 97, 108];\n\n    println!(\"{:?}\", std::str::from_utf8(&amp;b));\n}\n</code></pre>\n\n<p>Which outputs <code>Ok(\"{\\\"mature\\\":fal\")</code>. i.e. the bytes are the first part of the JSON data you're expecting.</p>\n\n<p>BTW, knowing the types of functions is a really useful thing, which you can do easily by running <code>cargo doc --open</code>, which will run <code>rustdoc</code> on your crate and all your dependencies, and then open it in your web-browser (if <code>--open</code> doesn't work, then navigating to <code>/path/to/project/target/doc/curl/index.html</code> in your web-browser should work too).</p>\n"}], "owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 34279216, "answer_count": 1, "score": 0, "last_activity_date": 1450140697, "creation_date": 1450139861, "last_edit_date": 1450140697, "question_id": 34279141, "link": "https://stackoverflow.com/questions/34279141/why-do-i-get-a-list-of-numbers-instead-of-json-when-using-the-twitch-api-via-rus", "title": "Why do I get a list of numbers instead of JSON when using the Twitch API via Rust?", "body": "<p>I'm playing around with the Twitch API in Rust, but I can't manage to get a correct JSON output from the response.</p>\n\n<pre><code>extern crate curl;\n\nuse curl::http;\n\nfn main() {\n    let url = \"http://api.twitch.tv/kraken/channels/twitch\";\n\n    let resp = http::handle()\n        .get(url)\n        .exec().unwrap();\n\n    /* Prints StatusCode and Headers correctly. Print Body (requested json as numbers) */\n    println!(\"Code : {}\\nHeaders : {:?}\\nHeaders : {:?}\\nBody : {:?}\", \n        resp.get_code(), resp.get_header(\"content-length\"), resp.get_headers(), resp.get_body());\n\n    /* Prints everything after each other and prints json correctly */\n    println!(\"{}\", resp);\n}\n</code></pre>\n\n<p>I don't understand why I get numbers as output instead of the JSON.</p>\n\n<p>Example of output json: </p>\n\n<blockquote>\n  <p>[123, 34, 109, 97, 116, 117, 114, 101, 34, 58, 102, 97, 108]</p>\n</blockquote>\n\n<p>Example of correct json: </p>\n\n<blockquote>\n  <p>{\"mature\":false,\"status\":\"Twitch Weekly - 12/11/2015\",\"broadcaster_language\":\"en\"}</p>\n</blockquote>\n\n<p>Example of the full output: <a href=\"https://bitbucket.org/snippets/adrianz/q88KM\" rel=\"nofollow\">https://bitbucket.org/snippets/adrianz/q88KM</a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1450150483, "last_edit_date": 1450150483, "creation_date": 1450140463, "answer_id": 34279224, "question_id": 34278607, "link": "https://stackoverflow.com/questions/34278607/can-not-move-out-of-type-which-defines-the-drop-trait-e0509/34279224#34279224", "title": "Can not move out of type which defines the `Drop` trait [E0509]", "body": "<p>The <code>Transaction::commit</code> method <a href=\"https://github.com/sfackler/rust-postgres/blob/cdcaec2463380f193659259b029d85c03846cd30/src/lib.rs#L1292-L1296\" rel=\"noreferrer\"><em>consumes</em> the transaction</a>:</p>\n\n<pre><code>pub fn commit(self) -&gt; Result&lt;()&gt; {\n    self.set_commit();\n    self.finish()\n}\n</code></pre>\n\n<p>If you <em>were</em> able to call <code>commit</code>, then the value of <code>self</code> would be in some inconsistent state, because what would the value of <code>self.transaction</code> be? It's been moved out!</p>\n\n<p>If the type <em>didn't</em> implement <code>Drop</code>, this wouldn't be a problem, as the compiler would just drop all the other pieces of the struct. However, since it implements <code>Drop</code>, then you can never pull apart the struct because then <code>Drop</code> could not run! This even applies when you are inside the <code>Drop</code> implementation itself.</p>\n\n<p>If you actually needed to do this, you'd have to have <code>transaction</code> be some type that you could easily replace. An <code>Option</code> is a good choice, as you can use <code>take</code> to replace it with a <code>None</code>.</p>\n\n<hr>\n\n<p>In the specific case of the <code>Transaction</code>, you don't have to do anything special. While a <code>Transaction</code> normally rolls back on drop, you can call <a href=\"http://sfackler.github.io/rust-postgres/doc/v0.10.2/postgres/struct.Transaction.html#method.set_commit\" rel=\"noreferrer\"><code>Transaction::set_commit</code></a> so that it commits on drop.</p>\n"}], "owner": {"reputation": 1638, "user_id": 1087667, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4043b15c5ed79ab482b6f2318dd23ddf?s=128&d=identicon&r=PG", "display_name": "ibrabeicker", "link": "https://stackoverflow.com/users/1087667/ibrabeicker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2161, "favorite_count": 0, "accepted_answer_id": 34279224, "answer_count": 1, "score": 2, "last_activity_date": 1450150483, "creation_date": 1450136391, "last_edit_date": 1450139260, "question_id": 34278607, "link": "https://stackoverflow.com/questions/34278607/can-not-move-out-of-type-which-defines-the-drop-trait-e0509", "title": "Can not move out of type which defines the `Drop` trait [E0509]", "body": "<p>I have the following Rust code using <a href=\"https://github.com/sfackler/rust-postgres\" rel=\"nofollow\">rust-postgres</a> with the intention of committing a transaction after my struct goes out of scope</p>\n\n<pre><code>struct SqlTransaction&lt;'a&gt; {\n    connection: &amp;'a Connection,\n    transaction: Transaction&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Drop for SqlTransaction&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        let result = self.transaction.commit();\n        match result {\n            Ok(_) =&gt; print!(\"herp\"),\n            Error =&gt; print!(\"lol\"),\n\n        }\n    }\n}\n</code></pre>\n\n<p>The compiler complains about the <code>commit()</code> line with the following message</p>\n\n<pre><code>cannot move out of type `SqlTransaction&lt;'a&gt;`, which defines the `Drop` trait [E0509]at line 12 col 22\n</code></pre>\n\n<p>What is happening and how can I fix that?</p>\n"}, {"tags": ["enums", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1450131673, "creation_date": 1450131673, "answer_id": 34277705, "question_id": 34276918, "link": "https://stackoverflow.com/questions/34276918/pattern-matching-over-borrowed-hashmap-containing-enums/34277705#34277705", "title": "Pattern matching over borrowed HashMap containing enums", "body": "<p>Review what the compiler error message is:</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\n         Some(&amp;op) =&gt; {\n              ^~~\nnote: attempting to move value to here\n         Some(&amp;op) =&gt; {\n               ^~\nhelp: to prevent the move, use `ref op` or `ref mut op` to capture value by reference\n</code></pre>\n\n<p>While technically correct, using <code>Some(ref op)</code> would be a bit silly, as the type of <code>op</code> would then be a double-reference (<code>&amp;&amp;Op</code>). Instead, we simply remove the <code>&amp;</code> and have <code>Some(op)</code>.</p>\n\n<p>This is a common mistake that bites people, because to get it right you have to be familiar with both <em>pattern matching</em> and <em>references</em>, plus Rust's strict borrow checker. When you have <code>Some(&amp;op)</code>, that says</p>\n\n<blockquote>\n  <p>Match an <code>Option</code> that is the variant <code>Some</code>. The <code>Some</code> must contain a reference to a value. The referred-to thing should be moved out of where it is and placed into <code>op</code>.</p>\n</blockquote>\n\n<p>When pattern matching, the two keywords <code>ref</code> and <code>mut</code> can come into play. These are <em>not</em> pattern-matched, but instead they control how the value is <em>bound</em> to the variable name. They are analogs of <code>&amp;</code> and <code>mut</code>.</p>\n\n<p>This leads us to the next error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;Op`,\n    found `Op`\n\n    Op::Not(input) =&gt; return eval_output(input.as_str(), outputs),\n    ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>It's preferred to do <code>match *some_reference</code>, when possible, but in this case you cannot. So we need to update the pattern to match a reference to an <code>Op</code> \u2014 <code>&amp;Op</code>. Look at what error comes next...</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\n    &amp;Op::Not(input) =&gt; return eval_output(input.as_str(), outputs),\n    ^~~~~~~~~~~~~~~\n</code></pre>\n\n<p>It's our friend from earlier. This time, we will follow the compilers advice, and change it to <code>ref input</code>. A bit more changes and we have it:</p>\n\n<pre><code>use std::collections::HashMap;\n\nenum Op {\n    Not(String),\n    Value(u16),\n}\n\nfn eval_output(output: &amp;str, outputs: &amp;HashMap&lt;String, Op&gt;) -&gt; u16 {\n    match outputs.get(output) {\n        Some(op) =&gt; {\n            match op {\n                &amp;Op::Not(ref input) =&gt; eval_output(input, outputs),\n                &amp;Op::Value(value) =&gt; value,\n            }\n        }\n        None =&gt; panic!(\"Did not find input for wire {}\", output),\n    }\n}\n\nfn main() {\n    let mut outputs = HashMap::new();\n\n    outputs.insert(\"x\".into(), Op::Value(17));\n    outputs.insert(\"a\".into(), Op::Not(\"x\".into()));\n\n    println!(\"Calculated output is {}\", eval_output(\"a\", &amp;outputs));\n}\n</code></pre>\n\n<ol>\n<li><p>There's no need to <code>use std::prelude::*;</code> \u2014 the compiler inserts that automatically.</p></li>\n<li><p><code>as_str</code> doesn't exist in stable Rust. A reference to a <code>String</code> (<code>&amp;String</code>) can use <em>deref coercions</em> to act like a string slice (<code>&amp;str</code>).</p></li>\n<li><p>I used <code>into</code> instead of <code>String::from</code> as it's a bit shorter. No real better reason.</p></li>\n</ol>\n"}], "owner": {"reputation": 761, "user_id": 491426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fefa0ec76c08bd63c39dff52ee418f0c?s=128&d=identicon&r=PG", "display_name": "Kotte", "link": "https://stackoverflow.com/users/491426/kotte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 395, "favorite_count": 0, "accepted_answer_id": 34277705, "answer_count": 1, "score": 3, "last_activity_date": 1450131673, "creation_date": 1450128438, "last_edit_date": 1450130942, "question_id": 34276918, "link": "https://stackoverflow.com/questions/34276918/pattern-matching-over-borrowed-hashmap-containing-enums", "title": "Pattern matching over borrowed HashMap containing enums", "body": "<p>I'm trying to learn Rust, so bear with me if I'm way off :-)</p>\n\n<p>I have a program that inserts enums into a <code>HashMap</code>, and uses <code>String</code>s as keys. I'm trying to match over the content of the <code>HashMap</code>. Problem is that I can't figure out how to get the correct borrowings, references and types in the <code>eval_output</code> function. How should the <code>eval_output</code> function look to properly handle a reference to a <code>HashMap</code>? Is there any good document that I can read to learn more about this particular subject?</p>\n\n<pre><code>use std::prelude::*;\nuse std::collections::HashMap;\n\nenum Op {\n    Not(String),\n    Value(u16),\n}\n\nfn eval_output(output: &amp;str, outputs: &amp;HashMap&lt;String, Op&gt;) -&gt; u16 {\n    match outputs.get(output) {\n        Some(&amp;op) =&gt; {\n            match op {\n                Op::Not(input) =&gt; return eval_output(input.as_str(), outputs),\n                Op::Value(value) =&gt; return value,\n            }\n        }\n        None =&gt; panic!(\"Did not find input for wire {}\", output),\n    }\n}\n\nfn main() {\n    let mut outputs = HashMap::new();\n\n    outputs.insert(String::from(\"x\"), Op::Value(17));\n    outputs.insert(String::from(\"a\"), Op::Not(String::from(\"x\")));\n\n    println!(\"Calculated output is {}\", eval_output(\"a\", &amp;outputs));\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 30586, "user_id": 149311, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0d6b052f4e55072d8767ff1acf9bf923?s=128&d=identicon&r=PG", "display_name": "Thomas Jung", "link": "https://stackoverflow.com/users/149311/thomas-jung"}, "edited": false, "score": 0, "creation_date": 1450172102, "post_id": 34276535, "comment_id": 56312549, "body": "I&#39;m happy with using slices, but calculating the indices for the slice is error-prone."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1450126962, "creation_date": 1450126962, "answer_id": 34276535, "question_id": 34275181, "link": "https://stackoverflow.com/questions/34275181/using-take-on-an-iterator-without-copying/34276535#34276535", "title": "Using take on an iterator without copying", "body": "<p><a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take\" rel=\"nofollow\"><code>Iterator::take</code></a> doesn't do any copying. Collecting the iterator into a vector, on the other hand, both allocates space and then moves items from the iterator into the collection.</p>\n\n<p>Using a slice is the most idiomatic solution here. You have a contiguous range of bytes that you want to output in the vector, and slicing into that vector gives you an almost-free view into a range of those bytes.</p>\n"}], "owner": {"reputation": 30586, "user_id": 149311, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0d6b052f4e55072d8767ff1acf9bf923?s=128&d=identicon&r=PG", "display_name": "Thomas Jung", "link": "https://stackoverflow.com/users/149311/thomas-jung"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1450126962, "creation_date": 1450121801, "last_edit_date": 1450126540, "question_id": 34275181, "link": "https://stackoverflow.com/questions/34275181/using-take-on-an-iterator-without-copying", "title": "Using take on an iterator without copying", "body": "<p>I had to replace</p>\n\n<pre><code>let mut bo = vec![];\ntry!(o.read_to_end(&amp;mut bo));\nlet mut bo = bo.into_iter();\nlet vs : Vec&lt;_&gt; = (&amp;mut bo).take(BUFFER).collect();\ntry!(io::stdout().write(&amp;vs));\n</code></pre>\n\n<p>with this</p>\n\n<pre><code>let mut bo = vec![];\ntry!(o.read_to_end(&amp;mut bo));\nlet mut io = 0;\nlet next = min(bo.len(), io + BUFFER);\ntry!(io::stdout().write(&amp;bo[io..next]));\n</code></pre>\n\n<p>Using a slice was more than twice as fast as copying data into a <code>Vec</code>. Is there a way to use <code>take(n)</code> without copying?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1450191974, "post_id": 34270031, "comment_id": 56326497, "body": "There are two questions in one here: (1) implementing two traits at once and (2) implementing a trait on multiple structs once. The title only matches (1), so I would recommend opening a new dedicated for (2). SO is not a forum, and the format just is not adapted to multiple unrelated questions."}, {"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1450193076, "post_id": 34270031, "comment_id": 56327334, "body": "@MatthieuM. Thanks for your comments. I will open a new one for the second question."}], "answers": [{"comments": [{"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1450114663, "post_id": 34270802, "comment_id": 56288179, "body": "Sebastian, with coordinate I mean the fn coordinate(){ ... } which is defined in both impl&#39;s and in trait."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1450175470, "post_id": 34270802, "comment_id": 56314995, "body": "@user3419211 So the problem is defining it in both impls? It&#39;s not defined in the trait."}, {"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1450175691, "post_id": 34270802, "comment_id": 56315167, "body": "@SebastianRedl yes the problem is that it&#39;s defined in both impl&#39;s and when I remove these two and only define it in trait BasicInfo then I can&#39;t access it"}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 1, "last_activity_date": 1450107090, "creation_date": 1450107090, "answer_id": 34270802, "question_id": 34270031, "link": "https://stackoverflow.com/questions/34270031/how-to-implement-multiple-traits-for-a-struct-without-repeating-methods/34270802#34270802", "title": "How to implement multiple traits for a struct without repeating methods?", "body": "<p>There's nothing wrong with implementing multiple traits for one type; it's very common in fact.</p>\n\n<p>I also don't understand what you mean by repeating <code>coordinate</code> in the trait and the impl. The function is declared in the trait and implemented in the impl, just like every other trait function. Did you mean that the function's implementation is identical in the Square and Circle impls? Macros would help you there, although there may be a better way.</p>\n"}, {"comments": [{"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1450209480, "post_id": 34292688, "comment_id": 56338276, "body": "Thanks for your comment, I haven&#39;t used traits with conditions and didn&#39;t really thought about it. Now I&#39;m carious about it"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1450192255, "last_edit_date": 1592644375, "creation_date": 1450192255, "answer_id": 34292688, "question_id": 34270031, "link": "https://stackoverflow.com/questions/34270031/how-to-implement-multiple-traits-for-a-struct-without-repeating-methods/34292688#34292688", "title": "How to implement multiple traits for a struct without repeating methods?", "body": "<p><em>Disclaimer: at the time of writing, there are two questions bundled in one, and the latter does not match the title. So going by the title...</em></p>\n<blockquote>\n<p>Is it possible to implement multiple traits at once?</p>\n<pre><code>impl BasicInfo &amp;&amp; Sides for Square {\n    ....\n}\n</code></pre>\n</blockquote>\n<p><strong>No.</strong></p>\n<p>The overhead of implementing them separately is relatively low, and for more complex situations, when constraints are necessary, it might not be possible as you would want different types of constraints for each trait.</p>\n<p>That being said, you could potentially open an RFC suggesting this be implemented, and then let the community/developers decide whether they find it worth implementing or not.</p>\n"}, {"comments": [{"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1450209181, "post_id": 34293399, "comment_id": 56338083, "body": "Thank you for introducing me to macro, this helps with not repeating the same code."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 9, "last_activity_date": 1450194223, "creation_date": 1450194223, "answer_id": 34293399, "question_id": 34270031, "link": "https://stackoverflow.com/questions/34270031/how-to-implement-multiple-traits-for-a-struct-without-repeating-methods/34293399#34293399", "title": "How to implement multiple traits for a struct without repeating methods?", "body": "<p>for your second question (avoid repeating the identical implementation of <code>coordinate</code>) I wanted to show you the macro-based solution.</p>\n\n<p>Funnily enough, it leaves you with 3 traits instead of 2, so it goes in the exact opposite direction of your first question. I guess you can't have everything! :)</p>\n\n<pre><code>// factoring out the Coordinates trait from BasicInfo\ntrait Coordinates {\n    fn coordinate(&amp;self) -&gt; (f64, f64);\n}\n\n// but we can require implementors of BasicInfo to also impl Coordinates\ntrait BasicInfo: Coordinates {\n    fn area(&amp;self) -&gt; f64;\n}\n\n// helper macro to avoid repetition of \"basic\" impl Coordinates\nmacro_rules! impl_Coordinates { \n    ($T:ident) =&gt; {\n        impl Coordinates for $T {\n            fn coordinate(&amp;self) -&gt; (f64, f64) { (self.x, self.y) }\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\n#[derive(Debug)]\nstruct Square {\n    x: f64,\n    y: f64,\n    width: f64,\n    sides: i32,\n}\n\n// the macro here will expand to identical implementations\n// for Circle and Square. There are also more clever (but a bit\n// harder to understand) ways to write the macro, so you can\n// just do impl_Coordinates!(Circle, Square, Triangle, OtherShape)\n// instead of repeating impl_Coordinates!\nimpl_Coordinates!(Circle);\nimpl_Coordinates!(Square);\n\n\ntrait Sides {\n    fn has_sides(&amp;self) -&gt; i32;\n}\n\nimpl BasicInfo for Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nimpl BasicInfo for Square {\n    fn area(&amp;self) -&gt; f64 {\n        self.width.powf(2.0)\n    }\n}\n\nimpl Sides for Square {\n    fn has_sides(&amp;self) -&gt; i32 {\n        self.sides\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5178, "favorite_count": 4, "answer_count": 3, "score": 6, "last_activity_date": 1450194223, "creation_date": 1450104917, "last_edit_date": 1450126300, "question_id": 34270031, "link": "https://stackoverflow.com/questions/34270031/how-to-implement-multiple-traits-for-a-struct-without-repeating-methods", "title": "How to implement multiple traits for a struct without repeating methods?", "body": "<p>The code below works just fine, but I'm repeating myself a lot\nand I don't think this is really Rustic. For example I'm implementing two traits for <code>Square</code> and this doesn\u2019t feel right! Also the function <code>coordinate()</code> is repeated in the trait and in the implementation.</p>\n\n<p>Is there a way to implement this code without repeating myself so often? Is it possible to implement the two traits like:</p>\n\n<pre><code>impl BasicInfo &amp;&amp; Sides for Square {\n    ....\n} \n</code></pre>\n\n<p>the above code does not work, it is just an idea. When a function can be applied to multiple structs, is it possible to define it just once in the trait <code>BasicInfo</code> and access it.</p>\n\n<pre><code>fn main() {\n    let x_1: f64 = 2.5;\n    let y_1: f64 = 5.2;\n    let radius_1: f64 = 5.5;\n    let width_01 = 10.54;\n\n    let circle_01 = Circle { x: x_1, y: y_1, radius: radius_1 };\n    let square_01 = Square { x: x_1, y: y_1, width: width_01, sides: 4 };\n\n    println!(\"circle_01 has an area of {:.3}.\", \n        circle_01.area().round());\n    println!(\"{:?}\", circle_01);\n    println!(\"The coordinate of circle_01 is {:?}.\\n\", circle_01.coordinate());\n    println!(\"coordinate of square_01: {:?} has an area of: {} m2 and also has {} sides.\", \n        square_01.coordinate(), \n        (square_01.area() * 100.0).round() / 100.0,\n        square_01.has_sides() );\n}\n\n#[derive(Debug)]\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    width: f64,\n    sides: i32,\n}\n\ntrait BasicInfo {\n    fn area(&amp;self) -&gt; f64;\n    // coordinate() is declared here, but not defined. Is it possible to define it here and still be able to access it when I want it.\n    fn coordinate(&amp;self) -&gt; (f64, f64);\n}\n\ntrait Sides {\n    fn has_sides(&amp;self) -&gt; i32;\n}\n\nimpl BasicInfo for Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n    // coordinate() gets defined again, and looks like repeating code\n    fn coordinate(&amp;self) -&gt; (f64, f64) {\n        (self.x, self.y)\n    }\n}\n\nimpl BasicInfo for Square {\n    fn area(&amp;self) -&gt; f64 {\n        self.width.powf(2.0)\n    }\n    // coordinate() gets defined again, and looks like repeating code\n    fn coordinate(&amp;self) -&gt; (f64, f64) {\n        (self.x, self.y)\n    }\n}\n\nimpl Sides for Square {\n    fn has_sides(&amp;self) -&gt; i32 {\n        self.sides\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1450093983, "post_id": 34266073, "comment_id": 56273777, "body": "Duplicate of <a href=\"http://stackoverflow.com/questions/30486227/idiomatic-alternative-to-reflection\">Idiomatic alternative to reflection</a>, also related: <a href=\"http://stackoverflow.com/questions/28403648/do-i-necessarily-need-to-box-here\" title=\"do i necessarily need to box here\">stackoverflow.com/questions/28403648/&hellip;</a>"}, {"owner": {"reputation": 101, "user_id": 5261541, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/NVRyR.png?s=128&g=1", "display_name": "duesee", "link": "https://stackoverflow.com/users/5261541/duesee"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450094984, "post_id": 34266073, "comment_id": 56274405, "body": "Woops, I tried the search, but did not found those questions, thanks."}], "owner": {"reputation": 101, "user_id": 5261541, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/NVRyR.png?s=128&g=1", "display_name": "duesee", "link": "https://stackoverflow.com/users/5261541/duesee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 34, "favorite_count": 0, "closed_date": 1450095105, "answer_count": 0, "score": 0, "last_activity_date": 1450103152, "creation_date": 1450093023, "last_edit_date": 1450103152, "question_id": 34266073, "link": "https://stackoverflow.com/questions/34266073/how-do-i-set-a-variable-to-one-of-a-set-of-types-that-implement-a-trait", "closed_reason": "Duplicate", "title": "How do I set a variable to one of a set of types that implement a trait?", "body": "<p>I think the following code is self-explanatory.</p>\n\n<pre><code>extern crate crypto;\n\nuse crypto::sha2::Sha256;\nuse crypto::md5::Md5;\nuse crypto::digest::Digest;\n\nfn main() {\n    let mut args = std::env::args();\n\n    let _       = args.next().expect(\"unknown argument environment...\");\n    let command = args.next().expect(\"no command given...\");\n    let data    = args.next().expect(\"no data given...\");\n\n    let mut digest: Digest = match command.as_ref() {\n        \"md5\"    =&gt; Md5::new(),\n        \"sha256\" =&gt; Sha256::new(),\n        _        =&gt; panic!(\"algorithm not supported\")\n    };  \n\n    digest.input_str(&amp;data);\n\n    print!(\"{} of \\\"{}\\\" is \\\"{}\\\"\", command, data, digest.result_str());\n}\n</code></pre>\n\n<p>As far as I understand, traits are used to tell the compiler that a specific set of methods are available for a specific type. In this case, the <code>input_str</code> and <code>result_str</code> methods are available for both <code>Sha256</code> and <code>Md5</code> since they are implementing the trait <code>Digest</code>. However, I can't figure out how to tell Rust that I want to continue with just using methods of the <code>Digest</code> trait.</p>\n\n<p>Compiler output is:</p>\n\n<pre><code>src/main.rs:15:21: 15:31 error: mismatched types:\n expected `crypto::digest::Digest`,\n    found `crypto::md5::Md5`\n(expected trait crypto::digest::Digest,\n    found struct `crypto::md5::Md5`) [E0308]\nsrc/main.rs:15         \"md5\"    =&gt; Md5::new(),\n                                   ^~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1450191726, "post_id": 34256165, "comment_id": 56326320, "body": "Given the answers, I would expect this qualifies as a bug of rustc. You might want to open a bug report so that it is checked and fixed."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1525813663, "last_edit_date": 1525813663, "creation_date": 1450040084, "answer_id": 34256218, "question_id": 34256165, "link": "https://stackoverflow.com/questions/34256165/how-do-i-move-multiple-values-out-of-a-boxed-value-without-calling-clone/34256218#34256218", "title": "How do I move multiple values out of a boxed value without calling clone?", "body": "<p>Unboxing in two steps works:</p>\n\n<pre><code>fn do_something(f: Foo) -&gt; Foo {\n    match f {\n        Foo::Base =&gt; Foo::Base,\n        Foo::Branch(pair) =&gt; {\n            let pair = *pair;\n            let (f1, f2) = pair;\n            if f2 == Foo::Base {\n                f1\n            } else {\n                f2\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 1, "last_activity_date": 1525813695, "last_edit_date": 1525813695, "creation_date": 1450069694, "answer_id": 34260141, "question_id": 34256165, "link": "https://stackoverflow.com/questions/34256165/how-do-i-move-multiple-values-out-of-a-boxed-value-without-calling-clone/34260141#34260141", "title": "How do I move multiple values out of a boxed value without calling clone?", "body": "<p>Enclosing within curly braces also works.</p>\n\n<pre><code>fn do_something(f: Foo) -&gt; Foo {\n    match f {\n        Foo::Base =&gt; Foo::Base,\n        Foo::Branch(pair) =&gt; {\n            let (f1, f2) = { *pair };\n            if f2 == Foo::Base {\n                f1\n            } else {\n                f2\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1585058688, "last_edit_date": 1585058688, "creation_date": 1529529956, "answer_id": 50957250, "question_id": 34256165, "link": "https://stackoverflow.com/questions/34256165/how-do-i-move-multiple-values-out-of-a-boxed-value-without-calling-clone/50957250#50957250", "title": "How do I move multiple values out of a boxed value without calling clone?", "body": "<p>This was fixed when <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> were introduced. The original code now compiles as-is:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Debug)]\nenum Foo {\n    Base,\n    Branch(Box&lt;(Foo, Foo)&gt;),\n}\n\nfn do_something(f: Foo) -&gt; Foo {\n    match f {\n        Foo::Base =&gt; Foo::Base,\n        Foo::Branch(pair) =&gt; {\n            let (f1, f2) = *pair;\n            if f2 == Foo::Base {\n                f1\n            } else {\n                f2\n            }\n        }\n    }\n}\n\nfn main() {\n    let f = Foo::Branch(Box::new((Foo::Base, Foo::Base)));\n    println!(\"{:?}\", do_something(f));\n}\n</code></pre>\n\n<p>This was tracked in <a href=\"https://github.com/rust-lang/rust/issues/16223\" rel=\"nofollow noreferrer\">issue 16223</a>. </p>\n"}], "owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 386, "favorite_count": 0, "closed_date": 1529530118, "answer_count": 3, "score": 3, "last_activity_date": 1585058688, "creation_date": 1450039785, "last_edit_date": 1529529683, "question_id": 34256165, "link": "https://stackoverflow.com/questions/34256165/how-do-i-move-multiple-values-out-of-a-boxed-value-without-calling-clone", "closed_reason": "Duplicate", "title": "How do I move multiple values out of a boxed value without calling clone?", "body": "<p>I have a boxed tuple to avoid recursion. However, when I pattern match against the tuple, I can't seem to get at both tuple values. To illustrate my problem, take <a href=\"https://play.rust-lang.org/?gist=612cee39c059b5c047973a67e1d9b236&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">the following code</a>:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Debug)]\nenum Foo {\n    Base,\n    Branch(Box&lt;(Foo, Foo)&gt;),\n}\n\nfn do_something(f: Foo) -&gt; Foo {\n    match f {\n        Foo::Base =&gt; Foo::Base,\n        Foo::Branch(pair) =&gt; {\n            let (f1, f2) = *pair;\n            if f2 == Foo::Base {\n                f1\n            } else {\n                f2\n            }\n        }\n    }\n}\n\nfn main() {\n    let f = Foo::Branch(Box::new((Foo::Base, Foo::Base)));\n    println!(\"{:?}\", do_something(f));\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `pair`\n  --&gt; src/main.rs:11:22\n   |\n11 |             let (f1, f2) = *pair;\n   |                  --  ^^ value used here after move\n   |                  |\n   |                  value moved here\n   |\n   = note: move occurs because `pair.0` has type `Foo`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I've read about boxed syntax, but I'd like to avoid unstable features if at all possible. It feels like the only answer is redefining <code>Branch</code> as </p>\n\n<pre><code>Branch(Box&lt;Foo&gt;, Box&lt;Foo&gt;)\n</code></pre>\n\n<p>but this seems like it avoids answering the question (which is admittedly mostly a thought exercise at this point).</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450037411, "post_id": 34255625, "comment_id": 56253110, "body": "Thanks for clarifying! I&#39;m a mostly OO programmer by practice and so some of this feels unfamiliar. As I learn more about Rust I&#39;m getting ever more fond of it!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1450037554, "post_id": 34255625, "comment_id": 56253163, "body": "@user124784 glad to hear it! It was pointed out to me that Rust <i>is</i> an OO language, so I&#39;ll take the opportunity to point out the same to you. Ultimately it comes down to what the core parts of OO are (for me \u2014 message passing and state encapsulation)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1450036558, "creation_date": 1450036558, "answer_id": 34255625, "question_id": 34255475, "link": "https://stackoverflow.com/questions/34255475/is-it-required-to-import-a-trait-whenever-it-is-used/34255625#34255625", "title": "Is it required to import a trait whenever it is used?", "body": "<p>Yes, it is <em>always</em> required that the end-user has <strong>explicitly</strong> declared that a trait is to be used. You can see examples of this in the standard library, as the <code>std::io::Read</code> trait is not available by default and must be used.</p>\n\n<p>You can also follow the IO modules lead here, as it <a href=\"http://doc.rust-lang.org/std/io/prelude/index.html\" rel=\"nofollow\">defines a <em>prelude</em></a>. This is a module called <code>prelude</code> which <em>re-exports</em> common traits and structs.</p>\n\n<p>There's even a <a href=\"http://doc.rust-lang.org/std/prelude/index.html\" rel=\"nofollow\">prelude for the entire standard library</a>. The only difference is that the compiler automatically adds this for you, unless you use the <code>no_std</code> feature.</p>\n\n<p>You can do the same for your crate, if you expect that everyone will want to use certain traits if they use it at all.</p>\n\n<hr>\n\n<p>A bit of editorial, but I really prefer this style. As an end-user, I can have a very good sense of what it is that I am importing and relying on. This helps me, the programmer, keep track of my dependencies and make sure that my code isn't gathering \"secret\" dependencies that ultimately decrease the organization of my code.</p>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 457, "favorite_count": 0, "accepted_answer_id": 34255625, "answer_count": 1, "score": 1, "last_activity_date": 1450036558, "creation_date": 1450035777, "last_edit_date": 1450036315, "question_id": 34255475, "link": "https://stackoverflow.com/questions/34255475/is-it-required-to-import-a-trait-whenever-it-is-used", "title": "Is it required to import a trait whenever it is used?", "body": "<p>I want to be able to have a trait which I can implement multiple times but not need to explicitly import it each time when using the library.</p>\n\n<p>I have a lib.rs file which looks like this:</p>\n\n<pre><code>pub mod learning {\n    pub mod lin_reg;\n\n    pub trait Model&lt;T,U&gt; {\n        fn predict(&amp;self, data:T) -&gt; U;\n\n        fn train(&amp;mut self, data:T, value:U);\n    }\n}\n</code></pre>\n\n<p>And then I implement this <code>Model</code> trait in each of my models (like the Linear Regression model).</p>\n\n<p>Now if the user wants to use the linear regression model they will need to do the following:</p>\n\n<pre><code>use ...::learning::lin_reg::LinRegressor;\nuse ...::learning::Model;\n\nlet model = LinRegressor:new();\nmodel.train(...)\n</code></pre>\n\n<p>I want to be able to remove the need to import the <code>Model</code> trait each time. Is it possible to do this? Will I need to restructure my library?</p>\n"}, {"tags": ["closures", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1449981065, "post_id": 34247879, "comment_id": 56237725, "body": "Your implementation is broken and produces insecure code that reads from undefined memory. Your <code>onconnect_callback </code> method <b>takes ownership</b> of the <code>callback</code> value, and thus the reference to it is only valid while that method lives. Rust would point that out for you, except you convert it into a raw pointer, which means you take responsibility for lifetimes. Reread the <a href=\"http://stackoverflow.com/a/32270215/155423\">answer that suggested this technique</a>, especially the part &quot;<i>this would only work if the [function] does not store the pointer to callback</i>&quot;."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1450042088, "post_id": 34247879, "comment_id": 56254788, "body": "I&#39;d say that the variant with <code>Box</code> which I&#39;ve added in that answer should solve your problem. Please consider it again. If it does work for you, we&#39;ll close this question as a duplicate; if it doesn&#39;t, please edit your answer to explain what exactly does not work with the <code>Box</code> approach suggested there, and we&#39;ll try to find a solution then."}, {"owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "edited": false, "score": 0, "creation_date": 1450062782, "post_id": 34247879, "comment_id": 56259824, "body": "Sure. I&#39;ll try that today."}, {"owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1450251565, "post_id": 34247879, "comment_id": 56354307, "body": "@VladimirMatveev Thank you very much. The method you suggested works. But this is not an option in my case because other callbacks are overwriting the user data and wrong closures are getting invoked. <a href=\"https://users.rust-lang.org/t/garbage-value-in-callback-closure/3942/5\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/garbage-value-in-callback-closure/3942&zwnj;&#8203;/5</a> . I used an alternate way (in the link). If it is ok, can you please take a look at that."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1450273726, "post_id": 34247879, "comment_id": 56369037, "body": "@tez yes, I think your approach is fine, given the constraints of your C library API (I wonder why it allows only one piece of user data for all callbacks...)."}], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 473, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1449980609, "creation_date": 1449979604, "last_edit_date": 1449980609, "question_id": 34247879, "link": "https://stackoverflow.com/questions/34247879/rust-closure-as-callback-for-c-bindings-receiving-garbage-value-in-captured-vari", "title": "Rust closure as callback for C bindings receiving garbage value in captured variable", "body": "<p>I'm writing Rust wrappers for C bindings so that they look more Rusty. One such C function is this:</p>\n\n<pre><code>void mosquitto_connect_callback_set(\n    struct mosquitto * mosq,\n    void (*on_connect)(struct mosquitto *, void *, int)\n)\n</code></pre>\n\n<p>I'm using the below technique to pass a Rust closure as the user data to above binding (<code>void*</code> in the callback) so that the Rust closure will be called when the C callback is invoked.</p>\n\n<pre><code>//  Registered callback is called when the broker sends a CONNACK message in response\n// to a connection. Will be called even incase of failure. All your sub/pub stuff\n// should ideally be done in this callback when connection is successful\n\npub fn onconnect_callback&lt;F&gt;(&amp;self, callback: F)\n    where F: Fn(i32)\n{\n    // Convert the rust closure into void* to be used as user_data. This will\n    // be passed to callback automatically by the library\n    let cb = &amp;callback as *const _ as *mut libc::c_void;\n\n    unsafe {\n        // Set our closure as user data\n        bindings::mosquitto_user_data_set(self.mosquitto, cb);\n        // Register callback\n        bindings::mosquitto_connect_callback_set(self.mosquitto, Some(onconnect_wrapper::&lt;F&gt;));\n    }\n\n    // Registered callback. user data is our closure\n    unsafe extern \"C\" fn onconnect_wrapper&lt;F&gt;(mqtt: *mut bindings::Struct_mosquitto,\n                                              closure: *mut libc::c_void,\n                                              val: libc::c_int)\n        where F: Fn(i32)\n    {\n        let closure = closure as *mut F;\n        println!(\"rc = {:?}\", val as i32);\n        (*closure)(val as i32);\n\n    }\n}\n</code></pre>\n\n<p>But the problem is that user data is set using a function instead of directly passing it to the callback set function </p>\n\n<pre><code>// Set our closure as user data\nbindings::mosquitto_user_data_set(self.mosquitto, cb);\n</code></pre>\n\n<p>I think the <code>callback: F</code> closure passed to <code>onconnect_callback</code> might get destroyed by the time the actual C callback is invoked. This might be the reason I'm getting garbage values when capturing a variable.</p>\n\n<pre><code>let i = 100;\n\nclient.onconnect_callback(|a: i32|{\n    println!(\"i = {:?}\", i);\n    println!(\"@@@ On connect callback {}@@@\", a)\n    });\n\nmatch client.connect(\"localhost\"){\n    Ok(_) =&gt; println!(\"Connection successful --&gt; {:?}\", client),\n    Err(n) =&gt; panic!(\"Connection error = {:?}\", n)\n}\n</code></pre>\n\n<p>OUTPUT:</p>\n\n<pre><code>i = 734146560\n@@@ On connect callback 0@@@\n</code></pre>\n\n<p>How do I fix this without passing closure as reference?</p>\n\n<p><a href=\"https://github.com/kteza1/mosquitto-rs/blob/master/src/lib.rs#L148-L162\" rel=\"nofollow\">The full code</a></p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1547407587, "last_edit_date": 1547407587, "creation_date": 1449970731, "answer_id": 34247093, "question_id": 34247038, "link": "https://stackoverflow.com/questions/34247038/implementing-mean-function-for-generic-types/34247093#34247093", "title": "Implementing mean function for generic types", "body": "<p>The primitive types implement <a href=\"https://docs.rs/num/0.2.0/num/trait.FromPrimitive.html\" rel=\"nofollow noreferrer\">the <code>FromPrimitive</code> trait</a>, defined in <a href=\"https://crates.io/crates/num/\" rel=\"nofollow noreferrer\">the <code>num</code> crate</a>, to allow conversions between primitive types, including <code>usize</code>. We can add a <code>FromPrimitive</code> bound on the function, and then we can convert the <code>usize</code> to a <code>T</code>:</p>\n\n<pre><code>extern crate num; // 0.2.0\n\nuse num::{FromPrimitive, Zero};\nuse std::ops::{Add, Div};\n\nimpl&lt;T&gt; Vector&lt;T&gt;\nwhere\n    T: Copy + Zero + Add&lt;T, Output = T&gt; + Div&lt;T, Output = T&gt; + FromPrimitive,\n{\n    pub fn mean(&amp;self) -&gt; T {\n        let sum = self.sum();\n        sum / FromPrimitive::from_usize(self.data.len()).unwrap()\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1551273932, "creation_date": 1551273932, "answer_id": 54906568, "question_id": 34247038, "link": "https://stackoverflow.com/questions/34247038/implementing-mean-function-for-generic-types/54906568#54906568", "title": "Implementing mean function for generic types", "body": "<p>In many cases, it doesn't make sense to compute an average of the input type. For example, the <em>integer average</em> of the integers 1 and 2 is <strong>1</strong>. If you want to be able to get the average of any iterator of values that can be treated as an <code>i64</code> and get the average as a <code>f64</code>, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum\" rel=\"nofollow noreferrer\">Iterator::sum</a> and <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>Into</code></a>:</p>\n\n<pre><code>fn avg_iter&lt;I&gt;(s: I) -&gt; f64\nwhere\n    I: IntoIterator,\n    I::Item: Into&lt;i64&gt;,\n{\n    let mut count = 0;\n    let total = s\n        .into_iter()\n        .map(Into::into)\n        .inspect(|_| count += 1)\n        .sum::&lt;i64&gt;();\n    total as f64 / count as f64\n}\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>use std::collections::VecDeque;\n\nfn main() {\n    let a: Vec&lt;u16&gt; = vec![1, 2, 3];\n    let b: Vec&lt;u32&gt; = vec![1, 2, 3];\n    let c: VecDeque&lt;u16&gt; = vec![1u16, 2, 3].into();\n\n    let v = avg_iter(a.iter().cloned());\n    println!(\"{}\", v);\n    let v = avg_iter(a);\n    println!(\"{}\", v);\n\n    let v = avg_iter(b.iter().cloned());\n    println!(\"{}\", v);\n    let v = avg_iter(b);\n    println!(\"{}\", v);\n\n    let v = avg_iter(c.iter().cloned());\n    println!(\"{}\", v);\n    let v = avg_iter(c);\n    println!(\"{}\", v);\n}\n\n</code></pre>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 453, "favorite_count": 2, "accepted_answer_id": 34247093, "answer_count": 2, "score": 4, "last_activity_date": 1551273932, "creation_date": 1449970169, "last_edit_date": 1547407708, "question_id": 34247038, "link": "https://stackoverflow.com/questions/34247038/implementing-mean-function-for-generic-types", "title": "Implementing mean function for generic types", "body": "<p>I'm trying to write a function to return the mean of a <code>Vector</code>. I want it to work with generic types but I'm having some difficulty implementing it.</p>\n\n<pre><code>extern crate num; // 0.2.0\n\nuse num::Zero;\nuse std::ops::{Add, Div};\n\npub struct Vector&lt;T&gt; {\n    pub size: usize,\n    pub data: Vec&lt;T&gt;,\n}\n\nimpl&lt;T: Copy + Zero + Add&lt;T, Output = T&gt;&gt; Vector&lt;T&gt; {\n    pub fn sum(&amp;self) -&gt; T {\n        self.data.iter().fold(T::zero(), |sum, &amp;val| sum + val)\n    }\n}\n\nimpl&lt;T: Copy + Zero + Add&lt;T, Output = T&gt; + Div&lt;T, Output = T&gt;&gt; Vector&lt;T&gt; {\n    pub fn mean(&amp;self) -&gt; T {\n        let sum = self.sum();\n        sum / self.data.len()\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c777d16bfa315fa92054&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>.</p>\n\n<p>The above example doesn't compile as <code>self.data.len()</code> is a <code>usize</code> and <code>sum</code> is of type <code>T</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:20:15\n   |\n20 |         sum / self.data.len()\n   |               ^^^^^^^^^^^^^^^ expected type parameter, found usize\n   |\n   = note: expected type `T`\n              found type `usize`\n</code></pre>\n\n<p>I know I could change the signature to:</p>\n\n<pre><code>impl&lt;T: Copy + Zero + Add&lt;T, Output = T&gt; + Div&lt;usize, Output = T&gt;&gt; Vector&lt;T&gt;\n</code></pre>\n\n<p>It would compile - but this isn't implemented for the Rust primitive types. How should I go about this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 93, "user_id": 2582685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/697a04d02185bc5dee29d85fb5957128?s=128&d=identicon&r=PG", "display_name": "Geoff Clements", "link": "https://stackoverflow.com/users/2582685/geoff-clements"}, "edited": false, "score": 0, "creation_date": 1450033652, "post_id": 34245533, "comment_id": 56251825, "body": "Thank-you that compiles ok. What is still puzzling me is that using <code>out_stream: Arc&lt;Mutex&lt;Box&lt;Write + Send&gt;&gt;&gt;</code> is saying that the object that is wrapped in Arc, Mutex and Box is guaranteed to have the <code>Write</code> and <code>Send</code> traits. However, in  this example we are wrapping a <code>LineWriter</code> which has only <code>Write</code>. Therefore this guarantee is not met so I&#39;m puzzled as to how this compiles."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 93, "user_id": 2582685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/697a04d02185bc5dee29d85fb5957128?s=128&d=identicon&r=PG", "display_name": "Geoff Clements", "link": "https://stackoverflow.com/users/2582685/geoff-clements"}, "edited": false, "score": 1, "creation_date": 1450038582, "post_id": 34245533, "comment_id": 56253547, "body": "The documentation doesn&#39;t show the types for which <code>Send</code> and <code>Sync</code> is implemented automatically by the compiler. It only shows explicit implementations (whether positive or negative) mentioned in the code. <code>LineWriter</code> does in fact implement <code>Send</code> if the wrapped writer is <code>Send</code> (<a href=\"http://is.gd/c4EhG4\" rel=\"nofollow noreferrer\">demonstation</a>)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1449957924, "creation_date": 1449957924, "answer_id": 34245533, "question_id": 34245196, "link": "https://stackoverflow.com/questions/34245196/sharing-a-file-handle-between-threads/34245533#34245533", "title": "Sharing a file handle between threads", "body": "<p><a href=\"https://doc.rust-lang.org/log/log/trait.Log.html\" rel=\"nofollow\">The <code>Log</code> trait</a> is a subtrait of <code>Send</code> and <code>Sync</code>:</p>\n\n<pre><code>pub trait Log: Sync + Send {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool;\n    fn log(&amp;self, record: &amp;LogRecord);\n}\n</code></pre>\n\n<p>In order to implement <code>Log</code> for your own type, your type must be <code>Send</code> and <code>Sync</code> as well.</p>\n\n<p>However, your <code>MyLogger</code> struct is neither <code>Send</code> nor <code>Sync</code>, because the <code>Box&lt;Write&gt;</code> could contain a non-<code>Send</code> type. We can restrict the box to containing a <code>Send</code> type:</p>\n\n<pre><code>struct MyLogger {\n    out_stream: Arc&lt;Mutex&lt;Box&lt;Write + Send&gt;&gt;&gt;\n}\n</code></pre>\n\n<p>This is enough to make <code>MyLogger</code> both <code>Send</code> and <code>Sync</code>. Here's your code with this fix and other necessary fixes applied:</p>\n\n<pre><code>extern crate log;\n\nuse log::{LogRecord, LogMetadata, LogLevelFilter, SetLoggerError};\nuse std::io::{LineWriter, stderr, Write};\nuse std::fs::OpenOptions;\nuse std::sync::{Arc, Mutex};\n\nstruct MyLogger {\n    out_stream: Arc&lt;Mutex&lt;Box&lt;Write + Send&gt;&gt;&gt;\n}\n\nimpl log::Log for MyLogger {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n        unimplemented!()\n    }\n\n    fn log(&amp;self, record: &amp;LogRecord) {\n        unimplemented!()\n    }\n}\n\nimpl MyLogger {\n    fn init(outfile: &amp;str) -&gt; Result&lt;(), SetLoggerError&gt; {\n        let logfile = match OpenOptions::new().create(true).append(true).open(outfile) {\n                Ok(f)  =&gt; Box::new(LineWriter::new(f)) as Box&lt;Write + Send&gt;,\n                Err(_) =&gt; Box::new(LineWriter::new(stderr())) as Box&lt;Write + Send&gt;\n            };\n\n        log::set_logger(|max_log_level| {\n            max_log_level.set(LogLevelFilter::Warn);\n            Box::new(MyLogger { out_stream: Arc::new(Mutex::new(logfile)) })\n        })\n    }\n}\n\nfn main() {\n    MyLogger::init(\"\");\n}\n</code></pre>\n"}], "owner": {"reputation": 93, "user_id": 2582685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/697a04d02185bc5dee29d85fb5957128?s=128&d=identicon&r=PG", "display_name": "Geoff Clements", "link": "https://stackoverflow.com/users/2582685/geoff-clements"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1368, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1449957924, "creation_date": 1449955754, "last_edit_date": 1449956147, "question_id": 34245196, "link": "https://stackoverflow.com/questions/34245196/sharing-a-file-handle-between-threads", "title": "Sharing a file handle between threads", "body": "<p>I'm using the log crate to do some basic logging and I want the log messages to go to either a file or stderr. I have created a struct to hold the output destination but get the following error:</p>\n\n<pre><code>error: the trait `core::marker::Send` is not implemented for the type `std::io::Write + 'static` [E0277]\n    impl log::Log for MyLogger {\n        fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n        }\n\n        fn log(&amp;self, record: &amp;LogRecord) {\n        }\n    ...\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: `std::io::Write + 'static` cannot be sent between threads safely\nnote: required because it appears within the type `Box&lt;std::io::Write + 'static&gt;`\nnote: required because it appears within the type `MyLogger`\nnote: required by `log::Log`\n</code></pre>\n\n<p>Here's the code I put together to test this:</p>\n\n<pre><code>extern crate log;\n\nuse log::{LogRecord, LogMetadata, LogLevelFilter, SetLoggerError};\nuse std::io::{LineWriter, stderr, Write};\nuse std::fs::OpenOptions;\nuse std::sync::{Arc, Mutex};\n\nstruct MyLogger {\n    out_stream: Arc&lt;Mutex&lt;Box&lt;Write&gt;&gt;&gt;\n}\n\nimpl log::Log for MyLogger {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n    }\n\n    fn log(&amp;self, record: &amp;LogRecord) {\n    }\n}\n\nimpl MyLogger {\n    fn init(outfile: String) -&gt; Result&lt;(), SetLoggerError&gt; {\n        let logfile = match OpenOptions::new().create(true).append(true).open(&amp;outfile) {\n                Ok(f)  =&gt; Box::new(LineWriter::new(f)) as Box&lt;Write&gt;,\n                Err(_) =&gt; Box::new(LineWriter::new(stderr())) as Box&lt;Write&gt;\n            };\n\n        log::set_logger(|max_log_level| {\n            max_log_level.set(LogLevelFilter::Warn);\n            Box::new(MyLogger{out_stream: logfile})         \n        })\n    }\n}\n\nfn main() {\n    MyLogger::init(\"\");\n}\n</code></pre>\n"}, {"tags": ["collections", "functional-programming", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1508, "user_id": 3919805, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/9261f5cafc1016051e0d9fdae28ce9da?s=128&d=identicon&r=PG", "display_name": "rilut", "link": "https://stackoverflow.com/users/3919805/rilut"}, "edited": false, "score": 1, "creation_date": 1449954987, "post_id": 34244864, "comment_id": 56231948, "body": "Cool! Never thought that I can call iter without map/filter/fold. Thanks for your further explanation too!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1449955484, "last_edit_date": 1449955484, "creation_date": 1449953584, "answer_id": 34244864, "question_id": 34244518, "link": "https://stackoverflow.com/questions/34244518/create-a-vecbtreesetchar-from-vecvecchar/34244864#34244864", "title": "Create a Vec&lt;BTreeSet&lt;char&gt;&gt; from Vec&lt;Vec&lt;char&gt;&gt;", "body": "<p>The error message is a bit odd. Here's the solution:</p>\n\n<pre><code>let transaction_set: Vec&lt;BTreeSet&lt;_&gt;&gt; =\n    transaction_list\n    .iter()\n    .map(|t| t.iter().cloned().collect())\n    .collect();\n</code></pre>\n\n<p>The two main changes are:</p>\n\n<ol>\n<li><code>map(|x| x)</code> is pointless. It is a no-op.</li>\n<li>I removed the outer <code>cloned</code>. The result type of the <code>map</code> call is already going to be a <code>BTreeSet</code>. There's no need to then clone it again.</li>\n</ol>\n\n<p>The latter fixes your problem, so let's look at the definition:</p>\n\n<pre><code>fn cloned&lt;'a, T&gt;(self) -&gt; Cloned&lt;Self&gt; \n    where Self: Iterator&lt;Item=&amp;'a T&gt;,\n          T: 'a + Clone\n</code></pre>\n\n<p>To be able to call <code>cloned</code>, the iterator <code>Item</code> has to be a <strong>reference</strong> to something that is cloneable. However, you are trying to iterate over <code>BTreeSet</code>s, which are not references. The compiler chooses to tell you that there's no way to <code>collect</code> your inner iterator of <code>char</code> into a <code>&amp;_</code> (a reference to some type), which would then satisfy the requirement to call <code>cloned</code>. My guess is that the inner type has more wiggle-room than the type needed by <code>collect</code>. If we rewrite the original code a bit to have a more definitive type on the inside:</p>\n\n<pre><code>let transaction_set: Vec&lt;_&gt; =\n    transaction_list\n    .iter()\n    .map(|t| -&gt; BTreeSet&lt;_&gt; {t.iter().cloned().collect()})\n    .cloned().collect();\n</code></pre>\n\n<p>We get a different set of errors:</p>\n\n<pre><code>error: type mismatch resolving `&lt;[closure...] as core::ops::FnOnce&lt;(&amp;collections::vec::Vec&lt;char&gt;,)&gt;&gt;::Output == &amp;_`:\n expected struct `collections::btree::set::BTreeSet`,\n    found &amp;-ptr [E0271]\n         .cloned().collect();\n          ^~~~~~~~\n\nerror: no method named `collect` found for type `core::iter::Cloned&lt;core::iter::Map&lt;core::slice::Iter&lt;'_, collections::vec::Vec&lt;char&gt;&gt;, [closure...]&gt;&gt;` in the current scope\n         .cloned().collect();\n                   ^~~~~~~~~\nnote: the method `collect` exists but the following trait bounds were not satisfied: `core::iter::Cloned&lt;core::iter::Map&lt;core::slice::Iter&lt;'_, collections::vec::Vec&lt;char&gt;&gt;, [closure...]&gt;&gt; : core::iter::Iterator`\n</code></pre>\n\n<p>Which helps highlight that the problem arises from the outer use of <code>cloned</code>.</p>\n"}], "owner": {"reputation": 1508, "user_id": 3919805, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/9261f5cafc1016051e0d9fdae28ce9da?s=128&d=identicon&r=PG", "display_name": "rilut", "link": "https://stackoverflow.com/users/3919805/rilut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 610, "favorite_count": 0, "accepted_answer_id": 34244864, "answer_count": 1, "score": 4, "last_activity_date": 1449955484, "creation_date": 1449951458, "last_edit_date": 1449954238, "question_id": 34244518, "link": "https://stackoverflow.com/questions/34244518/create-a-vecbtreesetchar-from-vecvecchar", "title": "Create a Vec&lt;BTreeSet&lt;char&gt;&gt; from Vec&lt;Vec&lt;char&gt;&gt;", "body": "<p>I'm trying to create a vector of set (<code>Vec&lt;BTreeSet&lt;char&gt;&gt;</code>) from <code>Vec&lt;Vec&lt;char&gt;&gt;</code>. Here's my progress so far:</p>\n\n<pre><code>use std::collections::BTreeSet;\n\nfn main() {\n    // The data\n    let transaction_list = [\n        vec!['A','B','C','D'],\n        vec!['B','B','C'],\n        vec!['A','B','B','D']\n    ];\n\n    // Successfully created a set from the Vec of Vec. It contains unique chars\n    let item_set: BTreeSet&lt;char&gt; = transaction_list.iter().flat_map(|t| t).cloned().collect();\n\n    // Made the same Vec of Vec. Basically just experimenting with map and collect\n    let the_same_transaction_list: Vec&lt;Vec&lt;char&gt;&gt; = transaction_list.iter().map(|t| t ).cloned().collect::&lt;Vec&lt;_&gt;&gt;();\n\n    // ERROR\n    let transaction_set: Vec&lt;BTreeSet&lt;char&gt;&gt; = transaction_list\n                                                .iter()\n                                                .map(|t| t.iter().map(|t| t).cloned().collect() )\n                                                .cloned().collect::&lt;Vec&lt;_&gt;&gt;();\n}\n</code></pre>\n\n<p>The error message was:</p>\n\n<pre><code>error: the trait `core::iter::FromIterator&lt;char&gt;` is not implemented for the type `&amp;_` [E0277]\n                                      .map(|t| t.iter().map(|t| t).cloned().collect() )\n                                                                            ^~~~~~~~~\nhelp: see the detailed explanation for E0277\nnote: a collection of type `&amp;_` cannot be built from an iterator over elements of type `char`\n</code></pre>\n\n<p>I haven't found the correct way to make a <code>Vec&lt;BTreeSet&lt;char&gt;&gt;</code> out of <code>Vec&lt;Vec&lt;char&gt;&gt;</code>. Here's the playground url: <a href=\"http://is.gd/WVONHY\" rel=\"nofollow\">http://is.gd/WVONHY</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449941343, "post_id": 34242640, "comment_id": 56227359, "body": "Welcome to Stack Overflow! It is <a href=\"http://meta.stackexchange.com/q/39223/281829\">frowned upon to ask multiple questions in one post</a>. Additionally, your questions have already been asked. The &quot;does not live long enough&quot; could be <a href=\"http://stackoverflow.com/q/31775915/155423\">stackoverflow.com/q/31775915/155423</a>, and &quot;already borrowed as mutable&quot; could be <a href=\"http://stackoverflow.com/q/28512394/155423\">stackoverflow.com/q/28512394/155423</a>. Please search for duplicates <i>before</i> asking a question, and then describe <i>why</i> your question is different from the previous questions if you decide it&#39;s not a duplicate."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1449941191, "creation_date": 1449941191, "answer_id": 34242812, "question_id": 34242640, "link": "https://stackoverflow.com/questions/34242640/maintain-a-hashmap-of-tcpstreams-in-a-loop/34242812#34242812", "title": "Maintain a HashMap of TcpStreams in a loop", "body": "<p>You cannot insert a reference to the stream in the <code>HashMap</code>, since the stream is a local variable that goes out of scope at the end of the <code>match</code> expression. The <code>HashMap</code> must own the stream.</p>\n\n<p>The easiest way to implement this is using the <a href=\"http://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow\"><code>entry()</code></a> method on <code>HashMap</code> to open the stream at first use.</p>\n\n<pre><code>fn main() {\n    let socket_addr = /* ... */;\n    let mut streams = HashMap::new();\n    let msg_builder = /* ... */;\n    loop {\n        let stream = streams.entry(&amp;socket_addr).or_insert_with(|| {\n            TcpStream::connect(socket_addr).unwrap()\n        });\n        capnp::serialize::write_message(stream, &amp;msg_builder).unwrap();\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 47, "user_id": 5498524, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/29384e7c43b0b8ca779899c353acaf52?s=128&d=identicon&r=PG&f=1", "display_name": "hamersaw", "link": "https://stackoverflow.com/users/5498524/hamersaw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1449941191, "creation_date": 1449940347, "last_edit_date": 1592644375, "question_id": 34242640, "link": "https://stackoverflow.com/questions/34242640/maintain-a-hashmap-of-tcpstreams-in-a-loop", "title": "Maintain a HashMap of TcpStreams in a loop", "body": "<p>I'm writing an application that uses a Distributed Hashtable (DHT) to distribute data to various nodes. When inserting data, I have to loop through it all and write various parts to different nodes. Instead of opening a new <code>TcpStream</code> object for each write, I would like to maintain a map of streams that I can use to write the data as needed. I'm very new to the Rust language and I'm having issues with lifetimes, specifically the errors</p>\n<blockquote>\n<p>cannot borrow 'streams' as mutable because it is already borrowed as mutable</p>\n<p>'stream' does not live long enough.</p>\n</blockquote>\n<p>I'm sure there is a fancy Rust way of doing this. The code I'm working with is below.</p>\n<pre><code>let mut streams = HashMap::new();\n...\n//get socket address to send data too\nloop {\n    match streams.get(&amp;socket_addr) {\n        Some(stream) =&gt; {\n             capnp::serialize::write_message(*stream, &amp;msg_builder).unwrap();\n        },\n        None =&gt; {\n             let mut stream = TcpStream::connect(socket_addr).unwrap();\n             streams.insert(socket_addr, &amp;mut stream);\n             capnp::serialize::write_message(&amp;mut stream, &amp;msg_builder).unwrap();\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 5591573, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aef45ac155364d606d3db265eac2be63?s=128&d=identicon&r=PG&f=1", "display_name": "James Matheson", "link": "https://stackoverflow.com/users/5591573/james-matheson"}, "edited": false, "score": 0, "creation_date": 1449983992, "post_id": 34239753, "comment_id": 56238133, "body": "Thank you. I see now I was so concentrated on trying to solve the bad borrow compile error that I didn&#39;t step back and look at if I   even needed the string conversion in the first place. In the case where you did actually need to create a new reference to add to a collection  (For example some struct based on the character) would explicit lifetimes be the way to go?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 35, "user_id": 5591573, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aef45ac155364d606d3db265eac2be63?s=128&d=identicon&r=PG&f=1", "display_name": "James Matheson", "link": "https://stackoverflow.com/users/5591573/james-matheson"}, "edited": false, "score": 0, "creation_date": 1450016374, "post_id": 34239753, "comment_id": 56245655, "body": "No, explicit lifetimes probably wouldn&#39;t help you. The problem is that you can&#39;t put a reference to a value in a collection if the collection outlives the value that the reference points to, because the reference would become invalid. Explicit lifetime annotations never extend the lifetime of a value."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 2, "last_activity_date": 1449929271, "last_edit_date": 1449929271, "creation_date": 1449922705, "answer_id": 34239753, "question_id": 34239478, "link": "https://stackoverflow.com/questions/34239478/is-boxing-or-explicit-lifetimes-the-right-solution-when-referencing-a-collection/34239753#34239753", "title": "Is boxing or explicit lifetimes the right solution when referencing a collection item in a loop?", "body": "<p>I don't think either of your approaches is the best solution. You can just use the char itself as a key for your HashMap, no need to convert it to a String:</p>\n\n<pre><code>fn do_something(word:&amp;str) -&gt; usize {\n    let mut seen_chars = HashMap::new();\n    let mut answer : usize = 0;\n    for (i,c) in word.chars().enumerate() {\n        match seen_chars.get(&amp;c) {\n            Some(&amp;index) =&gt; {\n                answer = answer + index;\n            },\n            None =&gt; {seen_chars.insert(c,i);}\n        };\n    }\n    answer\n}\n</code></pre>\n\n<p>(I also had to change the type of <code>answer</code> to get this to compile, since <code>enumerate</code> gives you <code>usize</code>s . Alternatively, you could cast <code>i</code> to <code>u32</code> where necessary)</p>\n\n<p>If, for some reason, you wanted to have string keys instead of <code>char</code>, you would have to use owned strings (i.e. <code>String</code>) instead of string slices (<code>&amp;str</code>). You would end up with something like this:</p>\n\n<pre><code>fn do_something(word:&amp;str) -&gt; usize {\n    let mut seen_chars : HashMap&lt;String,usize&gt; = HashMap::new();\n    let mut answer : usize = 0;\n    for (i,c) in word.chars().enumerate() {\n        let char_str = c.to_string();\n        match seen_chars.get(&amp;char_str) {\n            Some(&amp;index) =&gt; {\n                answer = answer + index;\n            },\n            None =&gt; {seen_chars.insert(char_str,i);}\n        };\n    }\n    answer\n}\n</code></pre>\n\n<p>But I strongly suspect that the first options is what you actually want.</p>\n"}], "owner": {"reputation": 35, "user_id": 5591573, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aef45ac155364d606d3db265eac2be63?s=128&d=identicon&r=PG&f=1", "display_name": "James Matheson", "link": "https://stackoverflow.com/users/5591573/james-matheson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 0, "accepted_answer_id": 34239753, "answer_count": 1, "score": 1, "last_activity_date": 1449929271, "creation_date": 1449920927, "question_id": 34239478, "link": "https://stackoverflow.com/questions/34239478/is-boxing-or-explicit-lifetimes-the-right-solution-when-referencing-a-collection", "title": "Is boxing or explicit lifetimes the right solution when referencing a collection item in a loop?", "body": "<p>In Rust (version 1.x) I want to use elements of a collection inside a loop such as the example \nbelow (which recors the characters it has seen and does something when it spots a repeated char) where the collection is defined inside the function and only used by the loop.</p>\n\n<pre><code>    fn do_something(word:&amp;str) -&gt; u32 {\n            let mut seen_chars = HashMap::new();\n            let mut answer : u32 = 0;\n            for (i,c) in word.chars().enumerate() {\n            let char_str = Box::new(c.to_string());\n            match seen_chars.get(&amp;char_str) {\n                    Some(&amp;index) =&gt; {\n                    answer = answer + index;\n                    },\n                    None =&gt; {seen_chars.insert(char_str,i);}\n            }; \n\n    }\n    answer\n    }\n</code></pre>\n\n<p>In order to store references to c in my hashmap (which I have declared outside the loop) I need to box c \n and allocate it on the heap. This feels inefficent and like I must be doing something wrong. \n I wondered if using explicit lifetimes would be a better way to do things, below is my best attempt but I can't get it to compile. </p>\n\n<pre><code>    fn do_something&lt;'a&gt;(word:&amp;str) -&gt; u32 {\n            let mut seen_chars = : &amp;'a HashMap&lt;&amp;str,usize&gt; = &amp;HashMap::new();\n            let mut answer : u32 = 0;\n            for (i,c) in word.chars().enumerate() {\n            let char_str =  &amp;'a str = &amp;c.to_string();\n            match seen_chars.get(&amp;char_str) {\n                    Some(&amp;index) =&gt; {\n                    answer = answer + index;\n                    },\n                    None =&gt; {seen_chars.insert(char_str,i);}\n            }; \n\n    }\n    answer\n    }\n</code></pre>\n\n<p>When I try compiling I get \"error: borrowed value does not live long enough\" with an indication that \"&amp;HashMap::new()\" is the problem.\n Can I use lifetime specification to solve this issue or am doing things the wrong way here?</p>\n"}, {"tags": ["casting", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1449860762, "post_id": 34230738, "comment_id": 56205205, "body": "This is commonly referred to as <i>downcasting</i>, so this is likely a duplicate of <a href=\"http://stackoverflow.com/q/33687447/155423\">stackoverflow.com/q/33687447/155423</a>."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449861139, "post_id": 34230738, "comment_id": 56205383, "body": "You already said that. My bad for not realising the significance of the <code>as_any()</code> function: it&#39;s the only way to get a reference to the trait object, <i>seen as a <code>&amp;S</code>, not <code>&amp;T</code></i>. Confusing."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449861747, "post_id": 34230738, "comment_id": 56205691, "body": "Sorry, so many people ask duplicate questions without searching, so I just point them out. If you know it&#39;s not a duplicate, <b>say so</b> in your question and explain <i>why</i> it isn&#39;t; linking to the not-a-duplicate is even better. Otherwise, we don&#39;t know why it&#39;s not different, and it&#39;s more likely to be marked as a duplicate."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449867034, "post_id": 34230738, "comment_id": 56208451, "body": "Yes, it&#39;s a duplicate. The problem is, I saw the answer <i>the first is to use <code>Any</code></i>, and tried to use the library docs. They&#39;re rather inspecific and use <code>Any</code> in a different way (as a bound on a generic type)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1449868184, "post_id": 34230738, "comment_id": 56209009, "body": "I agree that those docs aren&#39;t the greatest. I think I saw a minor lie in them, which I&#39;m working on fixing :-) Rust is pretty happy to improve though, so I&#39;d encourage you to open an issue with some suggestions on how to improve the docs."}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 95, "favorite_count": 0, "closed_date": 1449879433, "answer_count": 0, "score": 1, "last_activity_date": 1449860616, "creation_date": 1449860616, "question_id": 34230738, "link": "https://stackoverflow.com/questions/34230738/recovering-concrete-type-of-a-trait-object", "closed_reason": "Duplicate", "title": "Recovering concrete type of a trait object", "body": "<pre><code>trait T {}\nstruct S;\nimpl T for S {}\n\nfn use_trait_obj(o: Box&lt;T&gt;) -&gt; Box&lt;T&gt; {\n    // does some stuff ...\n    o\n}\n\nfn main(){\n    let s = S;\n    let t: Box&lt;T&gt; = use_trait_obj(Box::new(s));\n    let s: Box&lt;S&gt; = ...; // ?\n}\n</code></pre>\n\n<p>Can I revert a trait object to its concrete type?</p>\n\n<p>In my use-case, <code>T</code> is a fixed trait, <code>S</code> is a special implementation for testing purposes, and after calling the function I wish to check the internal fields of the object as part of the test.</p>\n\n<p>I tried adapting <code>T</code> to \"extend\" the special trait <code>std::any::Any</code> but still couldn't figure out how to do this.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 1, "creation_date": 1449852645, "post_id": 34228327, "comment_id": 56200939, "body": "<code>let () =</code> trick is great, this is probably well-known but I am starting in Rust as well, and this is handy."}, {"owner": {"reputation": 555, "user_id": 1889809, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b25705b93d86c91f45186a9811b9772d?s=128&d=identicon&r=PG", "display_name": "glenbot", "link": "https://stackoverflow.com/users/1889809/glenbot"}, "edited": false, "score": 1, "creation_date": 1449856295, "post_id": 34228327, "comment_id": 56203021, "body": "<code>let () =</code> is an amazing trick! Thank you! Also, really appreciate the idiomatic syntax and the great explanation. When you say <code>Display</code> do mean <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\">this trait</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 555, "user_id": 1889809, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b25705b93d86c91f45186a9811b9772d?s=128&d=identicon&r=PG", "display_name": "glenbot", "link": "https://stackoverflow.com/users/1889809/glenbot"}, "edited": false, "score": 0, "creation_date": 1449858373, "post_id": 34228327, "comment_id": 56204021, "body": "@glenbot yup. I&#39;ve edited that link into my answer too. :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1449858343, "last_edit_date": 1495541043, "creation_date": 1449851886, "answer_id": 34228327, "question_id": 34227456, "link": "https://stackoverflow.com/questions/34227456/using-rustc-serialize-and-getting-unquoted-strings/34228327#34228327", "title": "Using rustc_serialize and getting unquoted strings", "body": "<p>The problem is that <code>message_string</code> isn't what you think it is. I discovered that when I tried to use <code>len</code> on the \"string\", which didn't work (I assume that's why you have a <code>to_string</code> when you are slicing). Let's <a href=\"https://stackoverflow.com/q/21747136/155423\">make the compiler tell us what it is</a>:</p>\n\n<pre><code>let () = message_string;\n</code></pre>\n\n<p>Has the error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;rustc_serialize::json::Json`,\n    found `()`\n</code></pre>\n\n<p>It's a <a href=\"https://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/enum.Json.html\" rel=\"nofollow noreferrer\"><code>Json</code></a>! We need to convert that enumerated type into a string-like thing:</p>\n\n<pre><code>let message_object = message.as_object().unwrap();\nlet message_json = message_object.get(\"text\").unwrap();\nlet message_string = message_json.as_string().unwrap();\n</code></pre>\n\n<p>Ultimately, I'd argue that <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code></a> (which allows the <code>{}</code> format string) should <strong>not</strong> have been implemented for this type, as <code>Display</code> means format in an end-user-focused manner. It's probably too late to change that decision now though.</p>\n\n<hr>\n\n<p>I know that <code>unwrap</code> is great for quick prototyping, but I'd be remiss in not showing a slightly more idiomatic way of doing this:</p>\n\n<pre><code>fn main() {\n    let mut buffer = String::new();\n    io::stdin().read_to_string(&amp;mut buffer).expect(\"Could not read from stdin\");\n\n    let message = Json::from_str(&amp;mut buffer).expect(\"Stdin provided invalid JSON\");\n\n    let message_string = message.as_object().and_then(|obj| {\n        obj.get(\"text\").and_then(|json| {\n            json.as_string()\n        })\n    }).expect(\"The `text` key was missing or not a string\");\n\n    println!(\"{}\", message_string);\n}\n</code></pre>\n\n<p>Ignoring the <code>Result</code> from <code>read_to_string</code> is worse than panicking. ^_^</p>\n"}], "owner": {"reputation": 555, "user_id": 1889809, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b25705b93d86c91f45186a9811b9772d?s=128&d=identicon&r=PG", "display_name": "glenbot", "link": "https://stackoverflow.com/users/1889809/glenbot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 434, "favorite_count": 0, "accepted_answer_id": 34228327, "answer_count": 1, "score": 2, "last_activity_date": 1449858343, "creation_date": 1449849024, "last_edit_date": 1449851317, "question_id": 34227456, "link": "https://stackoverflow.com/questions/34227456/using-rustc-serialize-and-getting-unquoted-strings", "title": "Using rustc_serialize and getting unquoted strings", "body": "<p>So I have gone through 90% of the tutorial on Rust and I think I mostly have a grasp on the syntax. I'm attempting to start writing code with it I'm currently using the <code>rustc_serialize</code> library to parse JSON from <code>stdin</code> and I'm not getting the results I expect. I have the following JSON file called <code>message.txt</code> the following content:</p>\n\n<pre><code>{\"text\": \"hello world\"}\n</code></pre>\n\n<p>Here is the Rust code to accept <code>stdin</code> and parse out the <code>text</code> field:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse std::io::{self, Read};\nuse rustc_serialize::json::Json;\n\nfn main() {\n    // provide a buffer for stdin\n    let mut buffer = String::new();\n    let _ = io::stdin().read_to_string(&amp;mut buffer);\n\n    // parse the json\n    let message = match Json::from_str(&amp;mut buffer) {\n        Ok(m) =&gt; m,\n        Err(_) =&gt; panic!(\"Stdin provided invalid JSON\")\n    };\n\n    // get the message object and \"text\" field string\n    let message_object = message.as_object().unwrap();\n    let message_string = message_object.get(\"text\").unwrap();\n\n    println!(\"{}\", message_string);\n    println!(\"{}\", &amp;message_string.to_string()[0..4]);\n}\n</code></pre>\n\n<p>The following code outputs:</p>\n\n<pre><code>\"Hello World\"\n\"Hel\n</code></pre>\n\n<p>I'm currently outputting the byte slice to make sure the quote wasn't something that was added by print. According to the docs <code>message_string</code> shouldn't have quotes around it.</p>\n\n<p>If I print out the data using the example from the documentation then it prints the value of \"text\" without quotes:</p>\n\n<pre><code>for (key, value) in message_object.iter() {\n    println!(\"{}: {}\", key, match *value {\n        Json::U64(v) =&gt; format!(\"{} (u64)\", v),\n        Json::String(ref v) =&gt; format!(\"{} (string)\", v),\n        _ =&gt; format!(\"other\")\n    });\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>text: hello world (string)\n</code></pre>\n\n<p>I'm a newbie to Rust so I probably just don't understand the string manipulation parts of Rust all that well.</p>\n"}, {"tags": ["rust", "rust-cargo", "rustdoc"], "answers": [{"comments": [{"owner": {"reputation": 2086, "user_id": 1644618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0b1b9b9e169f5e077d819493330a7c8?s=128&d=identicon&r=PG", "display_name": "yerlilbilgin", "link": "https://stackoverflow.com/users/1644618/yerlilbilgin"}, "edited": false, "score": 0, "creation_date": 1617972362, "post_id": 34215536, "comment_id": 118467261, "body": "Thank you soo much! Didn&#39;t see that anywhere. That command is unfortunately counterintuitive. I would expect <code>cargo do</code> without deps, and <code>cargo doc --with-deps</code> with deps"}], "tags": [], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "is_accepted": true, "score": 34, "last_activity_date": 1449803788, "creation_date": 1449803788, "answer_id": 34215536, "question_id": 34215411, "link": "https://stackoverflow.com/questions/34215411/how-do-i-prevent-rust-doc-from-adding-dependencies-to-documentation/34215536#34215536", "title": "How do I prevent `rust doc` from adding dependencies to documentation?", "body": "<p>I found the answer: <code>cargo doc --no-deps</code>.</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2195, "favorite_count": 1, "accepted_answer_id": 34215536, "answer_count": 1, "score": 20, "last_activity_date": 1450717715, "creation_date": 1449802784, "last_edit_date": 1450717715, "question_id": 34215411, "link": "https://stackoverflow.com/questions/34215411/how-do-i-prevent-rust-doc-from-adding-dependencies-to-documentation", "title": "How do I prevent `rust doc` from adding dependencies to documentation?", "body": "<p>I've just started playing with Rust and was trying to generate docs for the code I've written. When I issued <code>cargo doc</code>, I saw something a little weird.</p>\n\n<pre><code>21:53 $ cargo doc\n   Compiling regex-syntax v0.2.2\n   Compiling libc v0.2.2\n   Compiling memchr v0.1.7\n   Compiling aho-corasick v0.3.4\n   Compiling regex v0.1.41\n   Compiling my_project v0.0.1 (path/to/my_project)\n</code></pre>\n\n<p>When I opened <code>my_project/target/doc/my_project/index.html</code>, I noticed that all of the dependencies were included in my docs:</p>\n\n<blockquote>\n  <p><a href=\"https://i.stack.imgur.com/Prdun.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Prdun.png\" alt=\"Those damn crates\"></a></p>\n</blockquote>\n\n<p>I'd like these dependencies' documentations to be hidden from the user so my documentation only shows how to use <em>my</em> code.</p>\n\n<p>How can I do this? </p>\n\n<h1>Cargo.lock</h1>\n\n<pre><code>[root]\nname = \"my_project\"\nversion = \"0.0.1\"\ndependencies = [\n \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"memchr 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"memchr\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"aho-corasick 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"memchr 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex-syntax 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 4, "creation_date": 1581000684, "post_id": 34215930, "comment_id": 106290295, "body": "what an over-complicated way to get a random element :("}, {"owner": {"reputation": 677, "user_id": 2948173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0688f525f1bc8e15c870d6a6ac0926ae?s=128&d=identicon&r=PG&f=1", "display_name": "Ethan McCue", "link": "https://stackoverflow.com/users/2948173/ethan-mccue"}, "edited": false, "score": 8, "creation_date": 1584579018, "post_id": 34215930, "comment_id": 107482671, "body": "I&#39;d disagree. The only differences with this approach and other languages are the need to put the trait in scope and manually needing to specify where the rng state comes from.  Perhaps a tad more explicit than usual, but I find it okay."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 50, "last_activity_date": 1577895423, "last_edit_date": 1577895423, "creation_date": 1449806629, "answer_id": 34215930, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array/34215930#34215930", "title": "How can I randomly select one element from a vector or array?", "body": "<p>You want the <a href=\"https://crates.io/crates/rand/\" rel=\"noreferrer\"><code>rand</code></a> crate, specifically the <a href=\"https://docs.rs/rand/0.7.2/rand/seq/trait.SliceRandom.html#tymethod.choose\" rel=\"noreferrer\"><code>choose</code></a> method.</p>\n\n<pre><code>use rand::seq::SliceRandom; // 0.7.2\n\nfn main() {\n    let vs = vec![0, 1, 2, 3, 4];\n    println!(\"{:?}\", vs.choose(&amp;mut rand::thread_rng()));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 6782830, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8e0156adce61cccedb6cf71486f7684a?s=128&d=identicon&r=PG", "display_name": "Stefano", "link": "https://stackoverflow.com/users/6782830/stefano"}, "is_accepted": false, "score": 5, "last_activity_date": 1611358415, "last_edit_date": 1611358415, "creation_date": 1472726163, "answer_id": 39269256, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array/39269256#39269256", "title": "How can I randomly select one element from a vector or array?", "body": "<p>If you want to choose more than one element then the <a href=\"https://crates.io/crates/random_choice\" rel=\"nofollow noreferrer\">random_choice</a> crate may be right for you:</p>\n<pre><code>extern crate random_choice;\nuse self::random_choice::random_choice;\n\nfn main() {\n    let mut samples = vec![&quot;hi&quot;, &quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test!&quot;];\n    let weights: Vec&lt;f64&gt; = vec![5.6, 7.8, 9.7, 1.1, 2.0];\n\n    let number_choices = 100;\n    let choices = random_choice().random_choice_f64(&amp;samples, &amp;weights, number_choices);\n\n    for choice in choices {\n        print!(&quot;{}, &quot;, choice);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "is_accepted": false, "score": 10, "last_activity_date": 1577895462, "last_edit_date": 1577895462, "creation_date": 1487245058, "answer_id": 42272866, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array/42272866#42272866", "title": "How can I randomly select one element from a vector or array?", "body": "<p>Using <a href=\"https://docs.rs/rand/0.7.2/rand/seq/trait.SliceRandom.html#tymethod.choose_multiple\" rel=\"nofollow noreferrer\"><code>choose_multiple</code></a>:</p>\n\n<pre><code>use rand::seq::SliceRandom; // 0.7.2\n\nfn main() {\n    let samples = vec![\"hi\", \"this\", \"is\", \"a\", \"test!\"];\n    let sample: Vec&lt;_&gt; = samples\n        .choose_multiple(&amp;mut rand::thread_rng(), 1)\n        .collect();\n    println!(\"{:?}\", sample);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4455, "user_id": 1460448, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0dd5a0fbb2b5d5592a49d2e60ef98f0a?s=128&d=identicon&r=PG&f=1", "display_name": "xji", "link": "https://stackoverflow.com/users/1460448/xji"}, "is_accepted": false, "score": 5, "last_activity_date": 1577895536, "last_edit_date": 1577895536, "creation_date": 1553007444, "answer_id": 55243947, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array/55243947#55243947", "title": "How can I randomly select one element from a vector or array?", "body": "<p>Another choice for weighted sampling that is already included in the <code>rand</code> crate is <a href=\"https://docs.rs/rand/0.7.2/rand/distributions/weighted/struct.WeightedIndex.html\" rel=\"nofollow noreferrer\"><code>WeightedIndex</code></a>, which has an example:</p>\n\n<blockquote>\n<pre><code>use rand::prelude::*;\nuse rand::distributions::WeightedIndex;\n\nlet choices = ['a', 'b', 'c'];\nlet weights = [2,   1,   1];\nlet dist = WeightedIndex::new(&amp;weights).unwrap();\nlet mut rng = thread_rng();\nfor _ in 0..100 {\n    // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'\n    println!(\"{}\", choices[dist.sample(&amp;mut rng)]);\n}\n\nlet items = [('a', 0), ('b', 3), ('c', 7)];\nlet dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();\nfor _ in 0..100 {\n    // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'\n    println!(\"{}\", items[dist2.sample(&amp;mut rng)].0);\n}\n</code></pre>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 508, "user_id": 11950764, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8213f0ffc9106d7663c4b5f29f4ec9e5?s=128&d=identicon&r=PG", "display_name": "joe", "link": "https://stackoverflow.com/users/11950764/joe"}, "is_accepted": false, "score": 2, "last_activity_date": 1567282160, "creation_date": 1567282160, "answer_id": 57741295, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array/57741295#57741295", "title": "How can I randomly select one element from a vector or array?", "body": "<p>If you also want to <strong>remove</strong> the chosen element, here's one way to do that (using the <code>rand</code> crate):</p>\n\n<pre><code>let mut vec = vec![0,1,2,3,4,5,6,7,8,9];\n\nlet index = (rand::random::&lt;f32&gt;() * vec.len() as f32).floor() as usize;\nlet value = vec.remove( index );\n\nprintln!(\"index: {} value: {}\", index, value);\nprintln!(\"{:?}\", vec);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=10fc430ad87f7fa0e1ff8a6eecbcf4f4\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p><code>remove(index)</code> removes that value at <code>index</code> (shifting all the elements after it to the left) and the returns the value that was at <code>index</code> (<a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.remove\" rel=\"nofollow noreferrer\">docs</a>).</p>\n"}], "owner": {"reputation": 503, "user_id": 4559989, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh5.googleusercontent.com/-eRpedyCStI0/AAAAAAAAAAI/AAAAAAAAAB4/MKAPxowX8ZA/photo.jpg?sz=128", "display_name": "coco", "link": "https://stackoverflow.com/users/4559989/coco"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12921, "favorite_count": 2, "accepted_answer_id": 34215930, "answer_count": 5, "score": 31, "last_activity_date": 1611358415, "creation_date": 1449801686, "last_edit_date": 1487255585, "question_id": 34215280, "link": "https://stackoverflow.com/questions/34215280/how-can-i-randomly-select-one-element-from-a-vector-or-array", "title": "How can I randomly select one element from a vector or array?", "body": "<p>I have a vector where the element is a <code>(String, String)</code>. How can I randomly pick one of these elements?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1449800228, "post_id": 34214136, "comment_id": 56174743, "body": "Macros only dispatch on syntax, traits OTOH can dispatch based on the type. Consider using a trait, or using a trait somehow inside your macro."}], "answers": [{"comments": [{"owner": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "edited": false, "score": 5, "creation_date": 1449834947, "post_id": 34214916, "comment_id": 56189642, "body": "so in this context rust macros are less powerful than c++ templates?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "edited": false, "score": 4, "creation_date": 1449845300, "post_id": 34214916, "comment_id": 56196274, "body": "@Arne if that&#39;s the way you want to think of it, then sure. Rust macros and C++ templates are only comparable in broad strokes and have different capabilities. However, both <i>languages</i> give you the same ability here, as evidenced by the trait example. My biased opinion is that the Rust version is <i>better</i> as you don&#39;t need the metaprogramming of a template / macro at all \u2014 I&#39;d probably leave off the macro and just call <code>(2+2).attribute()</code> in <code>main</code>."}, {"owner": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1449853590, "post_id": 34214916, "comment_id": 56201539, "body": "@Shepmaster I don&#39;t need, static or dynamic dispatch, I need the result of it at compile time."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 28, "last_activity_date": 1449837258, "last_edit_date": 1449837258, "creation_date": 1449798596, "answer_id": 34214916, "question_id": 34214136, "link": "https://stackoverflow.com/questions/34214136/how-do-i-match-the-type-of-an-expression-in-a-rust-macro/34214916#34214916", "title": "How do I match the type of an expression in a Rust macro?", "body": "<p>Rust macros aren't able to do that. Macros operate at the syntactic level, not at the semantic level. That means that although the compiler knows it has an expression (syntax), it doesn't know what the type of the expression's value (semantic) is at the moment the macro is expanded.</p>\n\n<p>A workaround would be to pass the expected type to the macro:</p>\n\n<pre><code>macro_rules! attribute {\n    ($e:expr, f32) =&gt; { /* magical float stuff */ };\n    ($e:expr, i64) =&gt; { /* mystical int stuff */ };\n}\n\nfn main() {\n    attribute!(2 + 2, i64);\n}\n</code></pre>\n\n<p>Or, more simply, define multiple macros.</p>\n\n<hr>\n\n<p>If you want to do static (compile-time) dispatch based on the type of an expression, you can use traits. Define a trait with the necessary methods, then implement the trait for the types you need. You can implement a trait for <em>any</em> type (including primitives and types from other libraries) if the <code>impl</code> block is in the same crate as the trait definition.</p>\n\n<pre><code>trait Attribute {\n    fn process(&amp;self);\n}\n\nimpl Attribute for f32 {\n    fn process(&amp;self) { /* TODO */ }\n}\n\nimpl Attribute for i64 {\n    fn process(&amp;self) { /* TODO */ }\n}\n\nmacro_rules! attribute {\n    ($e:expr) =&gt; { Attribute::process(&amp;$e) };\n}\n\nfn main() {\n    attribute!(2 + 2);\n}\n</code></pre>\n\n<p>Note: You could also write <code>$e.process()</code> in the macro's body, but then the macro might call an unrelated <code>process</code> method.</p>\n"}, {"comments": [{"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 8, "creation_date": 1574065409, "post_id": 48208342, "comment_id": 104083093, "body": "Note that this incurs runtime overhead unless the compiler is able to optimize it away."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 7, "last_activity_date": 1515677640, "creation_date": 1515677640, "answer_id": 48208342, "question_id": 34214136, "link": "https://stackoverflow.com/questions/34214136/how-do-i-match-the-type-of-an-expression-in-a-rust-macro/48208342#48208342", "title": "How do I match the type of an expression in a Rust macro?", "body": "<p>As already explained, you cannot expand differently depending on the type of an <code>expr</code>. But as a workaround, you can use the <a href=\"https://doc.rust-lang.org/std/any/index.html\" rel=\"noreferrer\"><code>any</code> module</a> and try to downcast from the <code>Any</code> trait:</p>\n\n<pre><code>use std::any::Any;\n\nmacro_rules! attribute {\n    ( $e:expr ) =&gt; {\n        if let Some(f) = (&amp;$e as &amp;Any).downcast_ref::&lt;f32&gt;() {\n            println!(\"`{}` is f32.\", f);\n        } else if let Some(f) = (&amp;$e as &amp;Any).downcast_ref::&lt;f64&gt;() {\n            println!(\"`{}` is f64.\", f);\n        } else {\n            println!(\"I dunno what is `{:?}` :(\", $e);\n        }\n    };\n}\n\nfn main() {\n    attribute!(0f32);\n    attribute!(0f64);\n    attribute!(0);\n}\n</code></pre>\n\n<p>Displays:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>`0` is f32.\n`0` is f64.\nI dunno what is `0` :(\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 99, "user_id": 13040224, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-gNSff6FWjoE/AAAAAAAAAAI/AAAAAAAAAAA/AKF05nB3l3IIbwLwFkRNkJ6tw1eqSsIAAA/photo.jpg?sz=128", "display_name": "Mist Korba", "link": "https://stackoverflow.com/users/13040224/mist-korba"}, "is_accepted": false, "score": 1, "last_activity_date": 1616693825, "creation_date": 1616693825, "answer_id": 66804789, "question_id": 34214136, "link": "https://stackoverflow.com/questions/34214136/how-do-i-match-the-type-of-an-expression-in-a-rust-macro/66804789#66804789", "title": "How do I match the type of an expression in a Rust macro?", "body": "<p>While all the answers here are correct, I'd like to provide an answer more akin to your C++ version.\nRust provides its own version of templates, generics, and they can be used in the same way you use templates.\nSo, to define a struct and implement functions for certain types:</p>\n<pre><code>struct Attribute&lt;T&gt; {\n    value: T,\n}\n\nimpl Attribute&lt;u32&gt; {\n    fn call(&amp;self) {\n        println!(&quot;{} is a u32&quot;, self.value);\n    }\n}\n\nimpl Attribute&lt;f64&gt; {\n    fn call(&amp;self) {\n        println!(&quot;{} is a f64&quot;, self.value);\n    }\n}\n\nimpl Attribute&lt;String&gt; {\n    fn call(&amp;self) {\n        println!(&quot;{} is a string&quot;, self.value);\n    }\n}\n</code></pre>\n<p>We'd use it like that:</p>\n<pre><code>fn main() {\n    let a = Attribute{\n        value: 5_u32\n    };\n\n\n    a.call();\n}\n</code></pre>\n<p>Or simply like this:</p>\n<pre><code>Attribute{value: 6.5}.call()\n</code></pre>\n<p>Sadly, Rust doesn't provide () operator overloading in its stable version. You can still define a macro to do the job:</p>\n<pre><code>macro_rules! attribute {\n    ( $e:expr ) =&gt; {\n        Attribute{value: $e}.call(); \n    };\n}\n</code></pre>\n<p>And use it as so:</p>\n<pre><code>attribute!(&quot;Hello World!&quot;.to_string());\n</code></pre>\n<p>I'd recommend using the trait based approach shown in <a href=\"https://stackoverflow.com/a/34214916/13040224\">this answer</a>, as it doesn't use a struct, but a trait, which is considered better practice. This answer may still be helpful in many situations.</p>\n"}], "owner": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9269, "favorite_count": 6, "accepted_answer_id": 34214916, "answer_count": 3, "score": 20, "last_activity_date": 1616693825, "creation_date": 1449792962, "last_edit_date": 1449843034, "question_id": 34214136, "link": "https://stackoverflow.com/questions/34214136/how-do-i-match-the-type-of-an-expression-in-a-rust-macro", "title": "How do I match the type of an expression in a Rust macro?", "body": "<p>This is just pseudocode:</p>\n\n<pre><code>macro_rules! attribute {\n    $e: expr&lt;f32&gt; =&gt; { /* magical float stuff */ };\n    $e: expr&lt;i64&gt; =&gt; { /* mystical int stuff */ };\n};\n</code></pre>\n\n<p>I would like to have a differently expanded macro depending on the type that I passed to the macro. </p>\n\n<p>This is how it would work in C++</p>\n\n<pre><code>template &lt;typename T&gt;\nstruct Attribute{ void operator(T)() {} };\n\ntemplate &lt;&gt;\nstruct Attribute&lt;float&gt; {\n    void operator(float)(float) { /* magical float stuff */ }\n};\n\ntemplate &lt;&gt;\nstruct Attribute&lt;long&gt; {\n    void operator()(long) { /* mystical int stuff */ }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1449762271, "post_id": 34205771, "comment_id": 56156475, "body": "I&#39;m sorry, but unfortunately questions about finding a library or a program are <a href=\"http://stackoverflow.com/help/on-topic\">off-topic</a> on Stackoverflow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 5, "creation_date": 1449763101, "post_id": 34205771, "comment_id": 56157099, "body": "@VladimirMatveev isn&#39;t this a sticky middle ground? OP isn&#39;t asking for a library, but just how to get the value. A library <i>may</i> be an answer, but the question doesn&#39;t require it."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1449764715, "post_id": 34205771, "comment_id": 56158238, "body": "This sounds like a feature request for num_cpus"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1449765100, "post_id": 34205771, "comment_id": 56158519, "body": "<a href=\"http://libcpuid.sourceforge.net/index.html\" rel=\"nofollow noreferrer\">libcpuid.sourceforge.net/index.html</a> available from rust via, e.g., <a href=\"https://crates.io/crates/cpuid\" rel=\"nofollow noreferrer\">crates.io/crates/cpuid</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1449765236, "post_id": 34205771, "comment_id": 56158614, "body": "And if you want a pure-Rust version that uses inline assembly (requiring nightly); there&#39;s <a href=\"https://crates.io/crates/cupid\" rel=\"nofollow noreferrer\">cupid</a>."}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1449765728, "post_id": 34205771, "comment_id": 56158912, "body": "libcpuid seems to have the information I&#39;m requiring (while I couldn&#39;t find it in cupid) but now I need to decide of it&#39;s worth it to do that as it would complicate the build process quite a bit, I guess (having external dependencies)."}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1449766527, "post_id": 34205771, "comment_id": 56159413, "body": "Maybe doing it on the command line might be better. I only need to do this once during startup anyway."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1449768525, "post_id": 34205771, "comment_id": 56160653, "body": "Huh. Libcpuid simply <a href=\"https://github.com/anrieff/libcpuid/blob/7c52fba50615659f8edeb9ec1564796117808ac6/libcpuid/cpuid_main.c#L85\" rel=\"nofollow noreferrer\">calls into the OS</a> to get the total number of CPUs. This seems to be the same thing as <a href=\"https://github.com/seanmonstar/num_cpus/blob/ac827925a1f3125a7441042ba661ed311c1abe68/src/lib.rs\" rel=\"nofollow noreferrer\">num_cpus</a>. Which data from libcpuid are you using?"}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1449774329, "post_id": 34205771, "comment_id": 56163641, "body": "I actually didn&#39;t try myself. Well, I realized that the performance difference isn&#39;t that big anyway. :)"}], "answers": [{"tags": [], "owner": {"reputation": 4204, "user_id": 1385087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20dd8c0e6b00089d1a8f39b54c3d46e3?s=128&d=identicon&r=PG", "display_name": "Konstantin V. Salikhov", "link": "https://stackoverflow.com/users/1385087/konstantin-v-salikhov"}, "is_accepted": false, "score": 1, "last_activity_date": 1452273425, "creation_date": 1452273425, "answer_id": 34682551, "question_id": 34205771, "link": "https://stackoverflow.com/questions/34205771/how-can-i-get-the-number-of-real-cores/34682551#34682551", "title": "How can I get the number of real cores?", "body": "<p>You can do this by using rust <a href=\"https://github.com/daschl/hwloc-rs\" rel=\"nofollow\">binding</a> for <a href=\"http://www.open-mpi.org/projects/hwloc/\" rel=\"nofollow\">hwloc</a> library as described in this blog <a href=\"http://nitschinger.at/Discovering-Hardware-Topology-in-Rust/\" rel=\"nofollow\">post</a>. </p>\n\n<p>It can be used under various platforms and allows you to get count of physical cores and logical processing units (in case of hyperthreading) like this (code from blog post):</p>\n\n<pre><code>extern crate hwloc;\n\nuse hwloc::{Topology, ObjectType};\n\nfn main() {\n    // Create a new Topology\n    let topology = Topology::new();\n\n    // Get all objects with type \"Core\"\n    let cores = topology.objects_with_type(&amp;ObjectType::Core);\n\n    // Match on the returned Result and print the length if successful.\n    match cores {\n       Ok(c) =&gt; println!(\"There are {} cores on this machine.\", c.len()),\n       Err(e) =&gt; panic!(format!(\"Could not load cores because of: {:?}\", e))\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1452273425, "creation_date": 1449761402, "last_edit_date": 1449763038, "question_id": 34205771, "link": "https://stackoverflow.com/questions/34205771/how-can-i-get-the-number-of-real-cores", "title": "How can I get the number of real cores?", "body": "<p>The <a href=\"https://crates.io/crates/num_cpus\" rel=\"nofollow\">num_cpus</a> crate gives me the number of cores, but this includes hyper threaded cores. In my case, this is significantly (almost 2x) slower than using a real core.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1449735290, "post_id": 34195219, "comment_id": 56138982, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/28595075/cannot-move-out-of-borrowed-content-when-borrowing-a-generic-type\">Cannot move out of borrowed content when borrowing a generic type</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449754376, "post_id": 34197771, "comment_id": 56150911, "body": "And the important thing about <code>into_iter</code> is that <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html#tymethod.into_iter\" rel=\"nofollow noreferrer\">it <i>consumes</i> the <code>self</code> argument</a>: <code>fn into_iter(self) -&gt; Self::IntoIter</code>. <code>iter</code>, on the other hand, only <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"nofollow noreferrer\">requires a reference</a> (<code>&amp;self</code>)."}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1449761008, "post_id": 34197771, "comment_id": 56155564, "body": "Thanks for clearing that up. I knew it had to be something simple!"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1449738900, "creation_date": 1449738900, "answer_id": 34197771, "question_id": 34195219, "link": "https://stackoverflow.com/questions/34195219/moving-collection-out-of-context/34197771#34197771", "title": "Moving collection out of context", "body": "<p>This happens because you are using <code>into_iter()</code> on the vector. Since you have <code>Copy</code> bound on <code>T</code>, this is unnecessary; you can use just <code>iter()</code> and dereference the argument in the closure:</p>\n\n<pre><code>pub struct Matrix&lt;T&gt; {\n    pub cols: usize,\n    pub rows: usize,\n    pub data: Vec&lt;T&gt;\n}\n\nimpl&lt;'a, 'b, T: Copy + Mul&lt;T, Output=T&gt;&gt; Mul&lt;&amp;'b T&gt; for &amp;'a Matrix&lt;T&gt; {\n    type Output = Matrix&lt;T&gt;;\n\n    fn mul(self, f: &amp;T) -&gt; Matrix&lt;T&gt; {\n        let new_data: Vec&lt;T&gt; = self.data.iter().map(|v| *v * *f).collect();\n\n        Matrix {\n            cols: self.cols,\n            rows: self.rows,\n            data: new_data\n        }\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=da1dff5374ff9b62275e&amp;version=stable\" rel=\"nofollow\">playground</a>)</p>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "accepted_answer_id": 34197771, "answer_count": 1, "score": 1, "last_activity_date": 1449738900, "creation_date": 1449729271, "question_id": 34195219, "link": "https://stackoverflow.com/questions/34195219/moving-collection-out-of-context", "title": "Moving collection out of context", "body": "<p>I'm trying to implement some traits using life times but as per usual I'm fighting the borrow checker.</p>\n\n<p>My trait looks like this:</p>\n\n<pre><code>pub struct Matrix&lt;T&gt; {\n    pub cols: usize,\n    pub rows: usize,\n    pub data: Vec&lt;T&gt;\n}\n\nimpl&lt;'a, 'b, T: Copy + Mul&lt;T, Output=T&gt;&gt; Mul&lt;&amp;'b T&gt; for &amp;'a Matrix&lt;T&gt; {\n    type Output = Matrix&lt;T&gt;;\n\n    fn mul(self, f: &amp;T) -&gt; Matrix&lt;T&gt; {\n        let new_data : Vec&lt;T&gt; = self.data.into_iter().map(|v| v * (*f)).collect();\n\n        Matrix {\n            cols: self.cols,\n            rows: self.rows,\n            data: new_data\n        }\n    }\n}\n</code></pre>\n\n<p>Playground <a href=\"https://play.rust-lang.org/?gist=b215a84e4381a440fa7c&amp;version=stable\" rel=\"nofollow\">link</a></p>\n\n<p>This gives the following error:</p>\n\n<pre><code>error: cannot move out of borrowed content\n</code></pre>\n\n<p>I think I understand why this is happening: I am borrowing self and so I can't copy the data. How do I get around this?</p>\n"}]