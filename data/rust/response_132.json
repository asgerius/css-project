[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1500488202, "post_id": 45197990, "comment_id": 77363445, "body": "I see. Is the ownership transferred to <code>e2</code> (in my example)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1500488386, "post_id": 45197990, "comment_id": 77363556, "body": "@qweruiop No more or less than if you had used <code>*e1</code> in the first loop. An <code>i32</code> implements <code>Copy</code>, so it will copy the bits. If it didn&#39;t implement <code>Copy</code>, you&#39;d get the &quot;cannot move out of borrowed context&quot; error. The default is that you cannot take ownership of the value behind a reference because doing so would leave the referenced item in an unknown state."}, {"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1500489144, "post_id": 45197990, "comment_id": 77364023, "body": "Okay. I tried with a struct without <code>Copy</code>, I did get that borrow error. Is it equivalent to say: If a value has references, then its ownership can&#39;t be taken through its refs?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1500489312, "post_id": 45197990, "comment_id": 77364127, "body": "@qweruiop equivalent to which part? You can <i>never</i> transfer ownership through a reference. If you have a reference to something that implements <code>Copy</code>, then dereferencing it might go ahead and make that copy. If it implements <code>Clone</code>, you could call <code>clone</code> on the reference and get something you own. In either case, the original owner of the value that the reference is to still owns the value."}, {"owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "edited": false, "score": 0, "creation_date": 1500489420, "post_id": 45197990, "comment_id": 77364174, "body": "To &quot;The default is that [...]&quot;. But I think I get it. Thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1500488090, "last_edit_date": 1500488090, "creation_date": 1500487617, "answer_id": 45197990, "question_id": 45197826, "link": "https://stackoverflow.com/questions/45197826/what-is-the-difference-between-e1-and-e2-when-used-as-the-for-loop-variable/45197990#45197990", "title": "What is the difference between `e1` and `&amp;e2` when used as the for-loop variable?", "body": "<p>When used in a <em>destructuring pattern binding</em>, the ampersand <code>&amp;</code> is used to dereference a value:</p>\n\n<pre><code>let a_number: i32 = 42;\nlet a_reference_to_a_number: &amp;i32 = &amp;a_number;\n\nlet another_reference = a_reference_to_a_number;\nlet &amp;another_number = a_reference_to_a_number;\n\nlet () = another_reference; // expected type `&amp;i32`\nlet () = another_number;    // expected type `i32`\n</code></pre>\n\n<p>This applies anywhere a pattern is accepted, such as in a <code>let</code> or <code>if let</code>, as a function argument, the for-loop variable, or a match arm.</p>\n\n<hr>\n\n<p>While initially confusing to many people, this is actually the language being consistent with how enums and structs are pattern matched and thus <em>removed</em> from the inner variable binding:</p>\n\n<pre><code>let a_value: Option&lt;&amp;i32&gt; = Some(&amp;42);\n\nif let Some(&amp;val) = a_value {\n    let () = val; // expected type `i32`\n}\n</code></pre>\n\n<p>Note how <code>val</code> is no longer \"wrapped\" by the <code>Some</code>, just like it is no longer \"wrapped\" by the reference.</p>\n\n<p>This behavior of <code>&amp;</code> in patterns is why the <code>ref</code> keyword is needed. The <code>ref</code> keyword is used to unambiguously <em>introduce</em> a reference in a pattern match.</p>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "accepted_answer_id": 45197990, "answer_count": 1, "score": 3, "last_activity_date": 1500488090, "creation_date": 1500487082, "last_edit_date": 1500487431, "question_id": 45197826, "link": "https://stackoverflow.com/questions/45197826/what-is-the-difference-between-e1-and-e2-when-used-as-the-for-loop-variable", "title": "What is the difference between `e1` and `&amp;e2` when used as the for-loop variable?", "body": "<p>The compiler says that <code>e1: &amp;i32</code> and <code>e2: i32</code>. Having read the docs <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"nofollow noreferrer\">for <code>slice::Iter</code></a> and <a href=\"https://doc.rust-lang.org/book/first-edition/loops.html\" rel=\"nofollow noreferrer\">the book chapter on loops</a>, I'm still confused.</p>\n\n<p>More generally, can a particular element in a slice be owned? It seems like in case 2, <code>e2</code> is owning an element, is it?</p>\n\n<pre><code>fn main() {\n    let slice = &amp;[1, 2, 3];\n    for e1 in slice.iter() {\n        println!(\"{}\", e1); // case 1\n    }\n\n    for &amp;e2 in slice.iter() {\n        println!(\"{}\", e2); // case 2\n    }\n}\n</code></pre>\n"}, {"tags": ["memory", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 8320319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f144a2be73899a9d1cb571a165692eb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dragon", "link": "https://stackoverflow.com/users/8320319/dragon"}, "edited": false, "score": 0, "creation_date": 1500481394, "post_id": 45195881, "comment_id": 77359470, "body": "I guess that using i_vec.iter() twice does not suffer the wrath of the borrow checker, since we are not binding i_vec to something."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 41, "user_id": 8320319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f144a2be73899a9d1cb571a165692eb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dragon", "link": "https://stackoverflow.com/users/8320319/dragon"}, "edited": false, "score": 1, "creation_date": 1500481730, "post_id": 45195881, "comment_id": 77359672, "body": "@Dragon It works because it takes a read-only reference each time and it&#39;s fine to have more than one. The problem with your original code is that <code>for i in my_vector</code> consumes the vector (it&#39;s used to move data out of the vector) so you can&#39;t use the vector after that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500484115, "post_id": 45195881, "comment_id": 77361146, "body": "Even more idiomatic (as Clippy tells you) is <code>for i in &amp;i_vec { for j in &amp;i_vec { ... }}</code>."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500496794, "post_id": 45195881, "comment_id": 77368376, "body": "@Shepmaster: That&#39;s true, but the question already mentioned that method so I didn&#39;t mention it in my answer."}], "tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 4, "last_activity_date": 1500484081, "last_edit_date": 1500484081, "creation_date": 1500480807, "answer_id": 45195881, "question_id": 45195454, "link": "https://stackoverflow.com/questions/45195454/does-cloning-an-iterator-copy-the-entire-underlying-vector/45195881#45195881", "title": "Does cloning an iterator copy the entire underlying vector?", "body": "<p>Cloning a slice iterator (this is the type of iterator you get when calling <code>iter()</code> on a <code>Vec</code> or an array) does not copy the underlying data. Both iterators still point to data stored in the original vector, so the clone operation is cheap.</p>\n\n<p>The same is likely true for clonable iterators on other types.</p>\n\n<p>In your case, instead of calling <code>i_vec.iter()</code> and then cloning it, you can also call <code>i_vec.iter()</code> multiple times:</p>\n\n<pre><code>for i in i_vec.iter() {\n    for j in i_vec.iter() {\n</code></pre>\n\n<p>which gives the same result but is probably more readable.</p>\n"}], "owner": {"reputation": 41, "user_id": 8320319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f144a2be73899a9d1cb571a165692eb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dragon", "link": "https://stackoverflow.com/users/8320319/dragon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 948, "favorite_count": 0, "accepted_answer_id": 45195881, "answer_count": 1, "score": 3, "last_activity_date": 1500484081, "creation_date": 1500479465, "last_edit_date": 1500483993, "question_id": 45195454, "link": "https://stackoverflow.com/questions/45195454/does-cloning-an-iterator-copy-the-entire-underlying-vector", "title": "Does cloning an iterator copy the entire underlying vector?", "body": "<p>I would like to iterate over a vector several times: </p>\n\n<pre><code>let my_vector = vec![1, 2, 3, 4, 5];\nlet mut out_vector = vec![];\nfor i in my_vector {\n    for j in my_vector {\n        out_vector.push(i * j + i + j);\n    }\n}\n</code></pre>\n\n<p>The j-loop has a \"value used here after move\" error. I know that I can place an <code>&amp;</code> before the two <code>my_vector</code>s and borrow the vectors, but it is nice to have more than one way to do things. I would like a little insight as well.</p>\n\n<p>Alternatively, I can write the following:</p>\n\n<pre><code>let i_vec = vec![1, 2, 3, 4, 5, 6];\nlet iterator = i_vec.iter();\nlet mut out_vec = vec![];\nfor i in iterator.clone() {\n    for j in iterator.clone() {\n        out_vec.push(i * j + i + j);\n    }\n}\n</code></pre>\n\n<p>I looked at <a href=\"https://stackoverflow.com/questions/35402244/whats-the-most-efficient-way-to-reuse-an-iterator-in-rust\">What&#39;s the most efficient way to reuse an iterator in Rust?</a>:</p>\n\n<blockquote>\n  <p>Iterators in general are Clone-able if all their \"pieces\" are Clone-able.</p>\n</blockquote>\n\n<p>Is the actual heap allocated data a \"piece\" of the iterator or is it the memory address that points to the heap data the aforementioned piece?</p>\n"}, {"tags": ["reference", "rust", "binary-search-tree", "lifetime-scoping"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1500477600, "post_id": 45194762, "comment_id": 77356937, "body": "Have you tried placing a bound <code>+ &#39;a</code> on <code>T</code> alongside <code>Ord</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1500478103, "post_id": 45194762, "comment_id": 77357341, "body": "Welcome to Stack Overflow! We <a href=\"https://meta.stackoverflow.com/q/261592/155423\">expect a good amount of effort here</a>. For example, have you tried doing <b>what the compiler suggests</b>: <i>consider adding an explicit lifetime bound <code>T: &#39;a</code></i>? If not, <i>why not</i>? If you did, what issue did you have with that? There are also <a href=\"https://stackoverflow.com/search?q=%5Brust%5D+The+parameter+type+may+not+live+long+enough+is%3Aq\">19 or so existing questions with the same error message</a>. You should read through them because someone has already taken the time to answer them. Tell us what doesn&#39;t work after that"}], "answers": [{"comments": [{"owner": {"reputation": 109, "user_id": 4976630, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-5csfNjG9dD0/AAAAAAAAAAI/AAAAAAAAADY/2CJGnuAs62k/photo.jpg?sz=128", "display_name": "Dimo Chanev", "link": "https://stackoverflow.com/users/4976630/dimo-chanev"}, "edited": false, "score": 0, "creation_date": 1500537283, "post_id": 45195427, "comment_id": 77383251, "body": "Thanks for the explanation and notifying me for the mistake with <code>self</code>. But as I said i&#39;d like to make it with references for exercise."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 109, "user_id": 4976630, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-5csfNjG9dD0/AAAAAAAAAAI/AAAAAAAAADY/2CJGnuAs62k/photo.jpg?sz=128", "display_name": "Dimo Chanev", "link": "https://stackoverflow.com/users/4976630/dimo-chanev"}, "edited": false, "score": 1, "creation_date": 1500542408, "post_id": 45195427, "comment_id": 77387058, "body": "@DimoChanev I understand that, but as I explained that would be impossible because the nodes have no owner."}], "tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 1, "last_activity_date": 1500479381, "creation_date": 1500479381, "answer_id": 45195427, "question_id": 45194762, "link": "https://stackoverflow.com/questions/45194762/the-parameter-type-t-may-not-live-long-enough-when-writing-a-binary-searching/45195427#45195427", "title": "The parameter type `T` may not live long enough when writing a binary searching tree", "body": "<p>As the error message says, that specific error can be fixed by adding a lifetime bound <code>T: 'a</code>. But then you'll get many other errors, because what you are trying to do is unsound: You are trying to store references to objects which don't have an owner elsewhere.</p>\n\n<p>When you do something like storing <code>&amp;mut BST::&lt;'a, T&gt;::new()</code> in your node, <code>BST::&lt;'a, T&gt;::new()</code> returns a temporary value which will soon be destroyed, so you can't store a reference to it and expect it to live on.</p>\n\n<p>Instead of references, you need your node to own its children. You can do this by changing the child type to <code>left: Box&lt;BST&lt;T&gt;&gt;</code> and using <code>Box::new</code> when you create a new child node. Once you do this, you can get rid of all the <code>'a</code> everywhere and won't get the lifetime-related errors.</p>\n\n<p>Another issue is that your <code>add</code> consumes the <code>self</code> parameter so it won't be able to be used anymore by the caller. You should make it take <code>&amp;mut self</code> instead so that it can modify the tree owned by the caller.</p>\n"}], "owner": {"reputation": 109, "user_id": 4976630, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-5csfNjG9dD0/AAAAAAAAAAI/AAAAAAAAADY/2CJGnuAs62k/photo.jpg?sz=128", "display_name": "Dimo Chanev", "link": "https://stackoverflow.com/users/4976630/dimo-chanev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 454, "favorite_count": 0, "accepted_answer_id": 45195427, "answer_count": 1, "score": 0, "last_activity_date": 1500538812, "creation_date": 1500477531, "last_edit_date": 1500538812, "question_id": 45194762, "link": "https://stackoverflow.com/questions/45194762/the-parameter-type-t-may-not-live-long-enough-when-writing-a-binary-searching", "title": "The parameter type `T` may not live long enough when writing a binary searching tree", "body": "<p>I'm trying to write a binary searching tree in Rust, but I don't understand what is going on:</p>\n\n<pre><code>enum BST&lt;'a, T: Ord&gt; {\n    Leaf,\n    BinTree { value: T, left: &amp;'a mut BST&lt;'a, T&gt;, right: &amp;'a mut BST&lt;'a, T&gt; }\n}\n\nimpl&lt;'a, T: Ord&gt; BST&lt;'a, T&gt; {\n    fn new() -&gt; BST&lt;'a, T&gt; {\n        BST::Leaf\n    }\n\n    fn add(self, val: T) {\n        match self {\n            BST::Leaf =&gt; self = BST::BinTree {\n                value: val,\n                left: &amp;mut BST::&lt;'a, T&gt;::new(),\n                right: &amp;mut BST::&lt;'a, T&gt;::new()\n            },\n            BST::BinTree{value: v, left: l, right: r} =&gt; if val &lt; v {\n                l.add(val);\n            } else {\n                r.add(val);\n            }\n        }\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>When I try to compile this, I get the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0309]: the parameter type `T` may not live long enough\n --&gt; heap.rs:3:25\n  |\n3 |     BinTree { value: T, left: &amp;'a mut BST&lt;'a, T&gt;, right: &amp;'a mut BST&lt;'a, T&gt; }\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider adding an explicit lifetime bound `T: 'a`...\nnote: ...so that the reference type `&amp;'a mut BST&lt;'a, T&gt;` does not outlive the data it points at\n --&gt; heap.rs:3:25\n  |\n3 |     BinTree { value: T, left: &amp;'a mut BST&lt;'a, T&gt;, right: &amp;'a mut BST&lt;'a, T&gt; }\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Well, after doing lots of research and doing the things that the compiler suggests I came up with this code:</p>\n\n<pre><code>enum BST&lt;'a, T: Ord + 'a&gt; {\n    Leaf,\n    BinTree { \n        value: T,\n        left: &amp;'a mut BST&lt;'a, T&gt;,\n        right: &amp;'a mut BST&lt;'a, T&gt;\n    }\n}\n\nimpl&lt;'a, T: Ord + 'a &gt; BST&lt;'a, T&gt; {\n    fn new() -&gt; BST&lt;'a, T&gt; {\n        BST::Leaf\n    }\n\n    fn add(&amp;mut self, val: T) {\n        match *self {\n            BST::Leaf =&gt; *self = BST::BinTree {\n                value: val,\n                left: &amp;mut BST::&lt;'a, T&gt;::new() as &amp;'a mut BST&lt;'a, T&gt;,\n                right: &amp;mut BST::&lt;'a, T&gt;::new() as &amp;'a mut BST&lt;'a, T&gt;\n            },\n            BST::BinTree{value: ref v, left: ref mut l, right: ref mut r} =&gt; if val &lt; *v {\n                l.add(val);\n            } else {\n                r.add(val);\n            }\n        }\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>But I still get errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; heap.rs:19:16\n   |\n19 |                left: &amp;mut BST::&lt;'a, T&gt;::new() as &amp;'a mut BST&lt;'a, T&gt;,\n   |                           ^^^^^^^^^^^^^^^^^^^ does not live long enough\n20 |                right: &amp;mut BST::&lt;'a, T&gt;::new() as &amp;'a mut BST&lt;'a, T&gt;\n21 |            },\n   |            - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the body at 15:27...\n  --&gt; heap.rs:15:28\n   |\n15 |    fn add(&amp;mut self, val: T) {\n   |  ____________________________^\n16 | |      match *self {\n17 | |          BST::Leaf =&gt; *self = BST::BinTree {\n18 | |              value: val,\n...  |\n27 | |      }\n28 | |  }\n   | |__^\n\nerror: borrowed value does not live long enough\n  --&gt; heap.rs:20:17\n   |\n20 |                right: &amp;mut BST::&lt;'a, T&gt;::new() as &amp;'a mut BST&lt;'a, T&gt;\n   |                            ^^^^^^^^^^^^^^^^^^^ does not live long enough\n21 |            },\n   |            - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the body at 15:27...\n  --&gt; heap.rs:15:28\n   |\n15 |    fn add(&amp;mut self, val: T) {\n   |  ____________________________^\n16 | |      match *self {\n17 | |          BST::Leaf =&gt; *self = BST::BinTree {\n18 | |              value: val,\n...  |\n27 | |      }\n28 | |  }\n   | |__^\n\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I know this can be fixed by using <code>Box</code>es instead of references, but I want to make it like this for exercise.</p>\n"}, {"tags": ["hashmap", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1500477545, "post_id": 45194220, "comment_id": 77356879, "body": "I&#39;d <b>strongly</b> encourage you to read the documentation of any method you are calling, especially when you get an error. For example, <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.iter\" rel=\"nofollow noreferrer\"><code>HashMap::iter</code></a> has a <i>tiny</i> amount of documentation that explains all of your problems: &quot;An iterator visiting all key-value pairs in arbitrary order. The iterator element type is <code>(&amp;&#39;a K, &amp;&#39;a V)</code>.&quot;"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1500477597, "last_edit_date": 1500477597, "creation_date": 1500476263, "answer_id": 45194293, "question_id": 45194220, "link": "https://stackoverflow.com/questions/45194220/get-first-element-from-hashmap/45194293#45194293", "title": "Get first element from HashMap", "body": "<p><code>HashMap::iter</code> returns an iterator over <code>(&amp;Key, &amp;Value)</code> pairs. What you want is <code>HashMap::values</code>, which produces an iterator that only produces the values of the <code>HashMap</code>.</p>\n\n<p>Note that the order of the values is random. It has nothing to do with the order you put the values in or with the actual value of the values.</p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 10, "last_activity_date": 1607725741, "last_edit_date": 1607725741, "creation_date": 1500476792, "answer_id": 45194487, "question_id": 45194220, "link": "https://stackoverflow.com/questions/45194220/get-first-element-from-hashmap/45194487#45194487", "title": "Get first element from HashMap", "body": "<p>There is no such thing as the &quot;first&quot; item in a <code>HashMap</code>. There are <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.iter\" rel=\"nofollow noreferrer\">no guarantees about the order</a> in which the values are stored nor the order in which you will iterate over them.</p>\n<p>If order is important then perhaps you can switch to a <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"nofollow noreferrer\"><code>BTreeMap</code></a>, which preserves order based on the keys.</p>\n<p>If you just need to get the first value <em>that you come across</em>, in other words <em>any</em> value, you can do something similar to your original code: create an iterator, just taking the first value:</p>\n<pre><code>fn get_first_elem(idx: VarIdx) -&gt; i16 {\n    match idx.values().next() {\n        Some(&amp;x) =&gt; x as i16,\n        None =&gt; -1,\n    }\n}\n</code></pre>\n<p>The method <code>values()</code> creates an iterator over just the values. The reason for your error is that <code>iter()</code> will create an iterator over pairs of keys and values which is why you got the error <em>&quot;expected tuple&quot;</em>.</p>\n<p>To make it compile, I had to change a couple of other things: <code>-1</code> is not a valid <code>u16</code> value so that had to become <code>i16</code>, and your values are <code>u8</code> so had to be cast to <code>i16</code>.</p>\n<p>As another general commentary, returning <code>-1</code> to indicate failure is not very &quot;Rusty&quot;. This is what <code>Option</code> is for and, given that <code>next()</code> already returns an <code>Option</code>, this is very easy to accomplish:</p>\n<pre><code>fn get_first_elem(idx: VarIdx) -&gt; Option&lt;u8&gt; {\n    idx.values().copied().next()\n}\n</code></pre>\n<p>The <code>.copied()</code> is needed in order to convert the <code>&amp;u8</code> values of the iterator into <code>u8</code>.</p>\n"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3008, "favorite_count": 0, "accepted_answer_id": 45194487, "answer_count": 2, "score": 5, "last_activity_date": 1607725741, "creation_date": 1500476058, "last_edit_date": 1500477206, "question_id": 45194220, "link": "https://stackoverflow.com/questions/45194220/get-first-element-from-hashmap", "title": "Get first element from HashMap", "body": "<p>I have a <code>HashMap</code> and need to get the first element:</p>\n\n<pre><code>type VarIdx = std::collections::HashMap&lt;u16, u8&gt;;\n\nfn get_first_elem(idx: VarIdx) -&gt; u16 {\n    let it = idx.iter();\n    let ret = match it.next() {\n        Some(x) =&gt; x,\n        None =&gt; -1,\n    };\n    ret\n}\n\nfn main() {}\n</code></pre>\n\n<p>but the code doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n --&gt; src/main.rs:5:15\n  |\n5 |       let ret = match it.next() {\n  |  _______________^\n6 | |         Some(x) =&gt; x,\n7 | |         None =&gt; -1,\n8 | |     };\n  | |_____^ expected tuple, found integral variable\n  |\n  = note: expected type `(&amp;u16, &amp;u8)`\n             found type `{integer}`\nnote: match arm with an incompatible type\n --&gt; src/main.rs:7:17\n  |\n7 |         None =&gt; -1,\n  |                 ^^\n</code></pre>\n\n<p>how can I fix it? </p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500467588, "post_id": 45190383, "comment_id": 77348434, "body": "<i>and then return it if it works</i> \u2014 you aren&#39;t returning the <code>Context</code>, you are trying to return a <i>reference to it</i>. Once the function exits, the <code>Context</code> is destroyed and any references to it are invalidated. You just attempted to add memory unsafety to your program and Rust prevented it. Return <code>Result&lt;Context, BoError&gt;</code> instead."}, {"owner": {"reputation": 756, "user_id": 1609018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a419eb40faa1dd00f9b24b07dad3f3e0?s=128&d=identicon&r=PG", "display_name": "Johannes Mittendorfer", "link": "https://stackoverflow.com/users/1609018/johannes-mittendorfer"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500467818, "post_id": 45190383, "comment_id": 77348618, "body": "I know. But what is the way to make <code>context</code> live as long as <code>Bo</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500468418, "post_id": 45190383, "comment_id": 77349124, "body": "You cannot <i>make</i> anything live longer via lifetimes; <a href=\"https://doc.rust-lang.org/stable/book/first-edition/lifetimes.html#lifetimes-1\" rel=\"nofollow noreferrer\">they are descriptive, not prescriptive</a>. Return <code>Result&lt;Context, BoError&gt;</code> instead. There&#39;s nothing inside <code>Context</code> that cares about <code>Bo</code>, so there&#39;s no reason that the <code>Context</code> should not outlive <code>Bo</code>. If <code>Context</code> had a reference to <code>Bo</code>, then the compiler would prevent it from outliving it."}], "owner": {"reputation": 756, "user_id": 1609018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a419eb40faa1dd00f9b24b07dad3f3e0?s=128&d=identicon&r=PG", "display_name": "Johannes Mittendorfer", "link": "https://stackoverflow.com/users/1609018/johannes-mittendorfer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1500467489, "answer_count": 0, "score": 0, "last_activity_date": 1500467518, "creation_date": 1500466755, "last_edit_date": 1500467518, "question_id": 45190383, "link": "https://stackoverflow.com/questions/45190383/variable-does-not-live-long-enough-using-match", "closed_reason": "Duplicate", "title": "Variable does not live long enough using match", "body": "<p>I want to create a new <code>Context</code> object and then return it if it works. However, Rust says that <code>&amp;context</code> does not live long enough.</p>\n\n<p>How can I force <code>context</code> to live as long as <code>Bo</code> in this case? Is it not enough to use the lifetime parameter <code>b</code> in the definition of the return type?</p>\n\n<pre><code>impl&lt;'b&gt; Bo {\n    pub fn new() -&gt; Result&lt;&amp;'b Context, BoError&gt; {\n        match Context::new() {\n            Ok(context) =&gt; {\n                return Ok(&amp;context);\n            }\n            Err(e) =&gt; Err(BoError {}),\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "gtk"], "comments": [{"owner": {"reputation": 3671, "user_id": 7728864, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hv4Sl.jpg?s=128&g=1", "display_name": "Jos&#233; Fonte", "link": "https://stackoverflow.com/users/7728864/jos%c3%a9-fonte"}, "edited": false, "score": 2, "creation_date": 1500428418, "post_id": 45179539, "comment_id": 77327740, "body": "The code inside the callback is, probably, taking too long and the UI freezes until it finishes and then Gtk can resume and close the window. Maybe you should use threads or async methods."}, {"owner": {"reputation": 23, "user_id": 5880780, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Ow9bOLyG_Vw/AAAAAAAAAAI/AAAAAAAAfg8/TceXfnYV0j8/photo.jpg?sz=128", "display_name": "TheBitStick", "link": "https://stackoverflow.com/users/5880780/thebitstick"}, "reply_to_user": {"reputation": 3671, "user_id": 7728864, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hv4Sl.jpg?s=128&g=1", "display_name": "Jos&#233; Fonte", "link": "https://stackoverflow.com/users/7728864/jos%c3%a9-fonte"}, "edited": false, "score": 1, "creation_date": 1500467046, "post_id": 45179539, "comment_id": 77348031, "body": "@Jos&#233;Fonte I figured out how to correctly use threads with GTK&#39;s idle_add."}], "answers": [{"comments": [{"owner": {"reputation": 23, "user_id": 5880780, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Ow9bOLyG_Vw/AAAAAAAAAAI/AAAAAAAAfg8/TceXfnYV0j8/photo.jpg?sz=128", "display_name": "TheBitStick", "link": "https://stackoverflow.com/users/5880780/thebitstick"}, "edited": false, "score": 0, "creation_date": 1541385907, "post_id": 45192979, "comment_id": 93186327, "body": "Spawning a thread is no longer needed apparently. <a href=\"https://github.com/ShareXin/ShareXin/blob/master/src/dialog.rs#L120\" rel=\"nofollow noreferrer\">github.com/ShareXin/ShareXin/blob/master/src/dialog.rs#L120</a>"}], "tags": [], "owner": {"reputation": 23, "user_id": 5880780, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Ow9bOLyG_Vw/AAAAAAAAAAI/AAAAAAAAfg8/TceXfnYV0j8/photo.jpg?sz=128", "display_name": "TheBitStick", "link": "https://stackoverflow.com/users/5880780/thebitstick"}, "is_accepted": true, "score": 0, "last_activity_date": 1500473951, "last_edit_date": 1500473951, "creation_date": 1500473037, "answer_id": 45192979, "question_id": 45179539, "link": "https://stackoverflow.com/questions/45179539/how-to-close-main-window-while-doing-other-tasks-in-a-clicked-button-event/45192979#45192979", "title": "How to close main window while doing other tasks in a clicked button event?", "body": "<p>To correctly close the main window and do other tasks, I used <code>idle_add</code> from glib.  </p>\n\n<pre><code>thread::spawn(move || {\n    glib::idle_add(move || {\n        toot(tweet);\n        gtk::main_quit();\n        Continue(false)\n    });\n});\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 5880780, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Ow9bOLyG_Vw/AAAAAAAAAAI/AAAAAAAAfg8/TceXfnYV0j8/photo.jpg?sz=128", "display_name": "TheBitStick", "link": "https://stackoverflow.com/users/5880780/thebitstick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "accepted_answer_id": 45192979, "answer_count": 1, "score": 2, "last_activity_date": 1500473951, "creation_date": 1500427539, "last_edit_date": 1500455284, "question_id": 45179539, "link": "https://stackoverflow.com/questions/45179539/how-to-close-main-window-while-doing-other-tasks-in-a-clicked-button-event", "title": "How to close main window while doing other tasks in a clicked button event?", "body": "<p>I'm trying to recreate <a href=\"https://github.com/ShareXin/ShareXin\" rel=\"nofollow noreferrer\">this Python project in Rust</a>. The Python version uses PyQt5, but the Ruby version uses GTK. When using Rust or Ruby, I don't know how to properly execute the \"Tweeting\" code when the user presses \"Tweet\".  </p>\n\n<p>The button the user presses is called \"send\", and this code is called when it's pressed:  </p>\n\n<pre><code>send.connect_clicked(move |_| {\n    let sent: Option&lt;String&gt; = TextBuffer::get_text(\n        &amp;TextView::get_buffer(&amp;text).unwrap(),\n        &amp;TextBuffer::get_start_iter(&amp;TextView::get_buffer(&amp;text).unwrap()), \n        &amp;TextBuffer::get_end_iter(&amp;TextView::get_buffer(&amp;text).unwrap()), false);\n    let actual = sent.unwrap();\n    println!(\"Text: {}\", actual);\n    let toot = Command::new(\"t\").output()\n        .expect(\"Nope\");\n    println!(\"{}\", String::from_utf8_lossy(&amp;toot.stdout));\n    Notification::new().summary(\"Sent\")\n        .body(&amp;actual).show().unwrap();\n    gtk::main_quit();\n});\n</code></pre>\n\n<p>Whenever the user presses it though, the window freezes until the code is done running, then the main window quits.  </p>\n\n<p>How would I correctly close the window and execute this code?  It's probably very simple but I've barely properly researched functions. Bad habit from writing Python scripts.</p>\n"}, {"tags": ["parsing", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500413506, "post_id": 45177131, "comment_id": 77323455, "body": "Have you tried doing what the compiler suggested? What was insufficient about that?"}, {"owner": {"reputation": 63, "user_id": 3662805, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ab43d40071275098a4cee224f9ddfc5?s=128&d=identicon&r=PG&f=1", "display_name": "lgg", "link": "https://stackoverflow.com/users/3662805/lgg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500414258, "post_id": 45177131, "comment_id": 77323799, "body": "I did not since I don&#39;t expect <code>ch</code> should be considered mutable here. making the change however seems to shift the issue further up in the code."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1500456456, "post_id": 45177131, "comment_id": 77340172, "body": "If I were you, I&#39;d read all the inputs into memory and then iterate over <i>that</i> :)"}], "answers": [{"comments": [{"owner": {"reputation": 63, "user_id": 3662805, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ab43d40071275098a4cee224f9ddfc5?s=128&d=identicon&r=PG&f=1", "display_name": "lgg", "link": "https://stackoverflow.com/users/3662805/lgg"}, "edited": false, "score": 0, "creation_date": 1500415305, "post_id": 45177663, "comment_id": 77324214, "body": "Thanks, I understood what the &amp; was doing, but it did not occur to me that a bind was happening in the match (seems obvious now). On your last note: Why would it matter in this case if <code>peek</code> is invalidated during the match block? I am looking at <code>match</code> as (vaguely) semantically similar to a case, with no fall through. Shouldn&#39;t the validity of it be irrelevant after <code>input.next</code> is called?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 63, "user_id": 3662805, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ab43d40071275098a4cee224f9ddfc5?s=128&d=identicon&r=PG&f=1", "display_name": "lgg", "link": "https://stackoverflow.com/users/3662805/lgg"}, "edited": false, "score": 0, "creation_date": 1500415701, "post_id": 45177663, "comment_id": 77324362, "body": "@user3662805 I added a comment to the last example. TL;DR: that would require <i>non-lexical lifetimes</i>, a much-anticipated feature but not one we have now."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1500415612, "last_edit_date": 1500415612, "creation_date": 1500414439, "answer_id": 45177663, "question_id": 45177131, "link": "https://stackoverflow.com/questions/45177131/peeking-at-stdin-using-match/45177663#45177663", "title": "Peeking at stdin using match", "body": "<p>It's got nothing to do with the return value of <code>match</code>, or even <code>match</code> itself::</p>\n\n<pre><code>use std::io::Read;\n\nfn lexan() {\n    let mut input = std::io::stdin().bytes().peekable();\n    if let Some(&amp;ch) = input.peek() {}\n}\n</code></pre>\n\n<p>The issue is that you are attempting to bind the result of <a href=\"https://doc.rust-lang.org/std/iter/struct.Peekable.html#method.peek\" rel=\"nofollow noreferrer\"><code>Peekable::peek</code></a>  <em>while dereferencing it</em> (that's what the <code>&amp;</code> in <code>&amp;ch</code> does). In this case, the return type is an <code>Option&lt;&amp;Result&lt;u8, std::io::Error&gt;&gt;</code> because the <code>Bytes</code> iterator returns errors from the underlying stream. Since this type does not implement <code>Copy</code>, trying to dereference the type requires that you transfer ownership of the value. You cannot do so as you don't own the original value \u2014 thus the error message.</p>\n\n<p>The piece that causes the inability to copy is the error type of the <code>Result</code>. Because of that, you can match one level deeper:</p>\n\n<pre><code>match input.peek() {\n    Some(&amp;Ok(ch)) =&gt; {\n        match ch {\n            _ =&gt; println!(\"{:?}\", input.next()),\n        }\n    }\n    Some(&amp;Err(_)) =&gt; panic!(),\n    None =&gt; break,\n}\n</code></pre>\n\n<p>Be aware that this code is pretty close to being uncompilable though. The result of <code>peek</code> will be invalidated when <code>next</code> is called, so many small changes to this code will trigger the borrow checker to fail the code. I'm actually a bit surprised the above worked on the first go.</p>\n\n<p>If you didn't care about errors at all, you could do</p>\n\n<pre><code>while let Some(&amp;Ok(ch)) = input.peek() {\n    match ch {\n        _ =&gt; println!(\"{:?}\", input.next()),\n    }\n}\n</code></pre>\n\n<p>Unfortunately, you can't split the middle, as this would cause the borrow of <code>input</code> to last during the call to <code>next</code>:</p>\n\n<pre><code>while let Some(x) = input.peek() {\n    match *x {\n        Ok(ch) =&gt; {\n            match ch {\n                _ =&gt; println!(\"{:?}\", input.next()),\n            }\n        }\n        Err(_) =&gt; {}\n    }\n\n    // Could still use `x` here, compiler doesn't currently see that we don't\n}\n</code></pre>\n"}], "owner": {"reputation": 63, "user_id": 3662805, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ab43d40071275098a4cee224f9ddfc5?s=128&d=identicon&r=PG&f=1", "display_name": "lgg", "link": "https://stackoverflow.com/users/3662805/lgg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 244, "favorite_count": 0, "accepted_answer_id": 45177663, "answer_count": 1, "score": 1, "last_activity_date": 1500415612, "creation_date": 1500412177, "last_edit_date": 1500412972, "question_id": 45177131, "link": "https://stackoverflow.com/questions/45177131/peeking-at-stdin-using-match", "title": "Peeking at stdin using match", "body": "<p>I'm trying to port a translator/parser example from an old compiler textbook from C into Rust.</p>\n\n<p>I have the following code:</p>\n\n<pre><code>use std::io::Read;\n\nfn lexan() {\n    let mut input = std::io::stdin().bytes().peekable();\n    loop {\n        match input.peek() {\n            Some(&amp;ch) =&gt; {\n                match ch {\n                    _ =&gt; println!(\"{:?}\", input.next()),\n                }\n            }\n            None =&gt; break,\n        }\n    }\n}\n</code></pre>\n\n<p>At this point I'm not actively trying to parse the input, just get my head around how <code>match</code> works. The aim is to add parse branches to the inner match. Unfortunately this fails to compile because I appear to fail in understanding the semantics of match:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/main.rs:7:18\n  |\n7 |             Some(&amp;ch) =&gt; {\n  |                  ^--\n  |                  ||\n  |                  |hint: to prevent move, use `ref ch` or `ref mut ch`\n  |                  cannot move out of borrowed content\n</code></pre>\n\n<p>From what I understand, this error is because I don't own the return value of the <code>match</code>. The thing is, I don't believe that I'm using the return value of either match. I thought perhaps <code>input.next()</code> may have been the issue, but the same error occurs with or without this part (or indeed, the entire println! call).</p>\n\n<p>What am I missing here? It's been some time since I looked at Rust (and never in a serious level of effort), and most of the search results for things of this nature appear to be out of date.</p>\n"}, {"tags": ["string", "rust", "constants"], "comments": [{"owner": {"reputation": 1704, "user_id": 5978459, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/fHmIL.jpg?s=128&g=1", "display_name": "perfect5th", "link": "https://stackoverflow.com/users/5978459/perfect5th"}, "edited": false, "score": 0, "creation_date": 1500409644, "post_id": 45176403, "comment_id": 77321459, "body": "Have you tried <code>const DATABASE = String::</code> instead of <code>const DATABASE :</code>? The : implies you are annotating the type, which you are not."}, {"owner": {"reputation": 195, "user_id": 3818171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43695c967e20dac254e535ff08980858?s=128&d=identicon&r=PG&f=1", "display_name": "arsalan86", "link": "https://stackoverflow.com/users/3818171/arsalan86"}, "reply_to_user": {"reputation": 1704, "user_id": 5978459, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/fHmIL.jpg?s=128&g=1", "display_name": "perfect5th", "link": "https://stackoverflow.com/users/5978459/perfect5th"}, "edited": false, "score": 0, "creation_date": 1500409732, "post_id": 45176403, "comment_id": 77321512, "body": "I did try that. Here&#39;s the compiler output:  <code>error: expected &#39;:&#39;, found &#39;=&#39;</code> for: <code>const DATABASE = String::from(&quot;f&quot;)</code>"}, {"owner": {"reputation": 1704, "user_id": 5978459, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/fHmIL.jpg?s=128&g=1", "display_name": "perfect5th", "link": "https://stackoverflow.com/users/5978459/perfect5th"}, "edited": false, "score": 1, "creation_date": 1500409920, "post_id": 45176403, "comment_id": 77321622, "body": "Ah... you have to annotate the type of a const, and you can&#39;t use <code>String</code> because it needs a static size, so you&#39;ll have to use <code>&amp;str</code>. try this: <code>const DATABASE: &amp;str = &quot;&#47;var&#47;lib&#47;tracker&#47;tracker.json&quot;;</code> See Shepmaster&#39;s answer."}], "answers": [{"comments": [{"owner": {"reputation": 195, "user_id": 3818171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43695c967e20dac254e535ff08980858?s=128&d=identicon&r=PG&f=1", "display_name": "arsalan86", "link": "https://stackoverflow.com/users/3818171/arsalan86"}, "edited": false, "score": 0, "creation_date": 1500410347, "post_id": 45176487, "comment_id": 77321842, "body": "Thanks! this worked, and the explanation is really helpful too!  I am reading the book, and I now realize what I was doing wrong."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1500456000, "post_id": 45176487, "comment_id": 77339861, "body": "Note: <i>not something that can be computed at compile time</i> =&gt; this is more an implementation limitation than a language limitation. It would be perfectly reasonable to pre-compute the String (and do nothing about the Drop), after all, there is not much difference between <code>&amp;str</code> (pointer + length) and <code>String</code> (pointer + length + capacity)."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 1, "creation_date": 1537524130, "post_id": 45176487, "comment_id": 91825223, "body": "The inability to call String::from at compile time is certainly a language limitation, not merely an implementation limitation ... and there&#39;s no other way to express pre-computation of a String."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 1, "creation_date": 1537533719, "post_id": 45176487, "comment_id": 91830696, "body": "@JimBalter please see the update which links to multiple ways to express the concept. It&#39;s both a language limitation as well as an implementation limitation, but it&#39;s something that people are very actively working to try and allow."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 1, "creation_date": 1537745666, "post_id": 45176487, "comment_id": 91884246, "body": "My comment was a correction of Matthieu&#39;s claim. You and I are both saying that it&#39;s both a language limitation and an implementation limitation, which it obviously is, contrary to what Matthieu said. You say at the link that this might be doable in the &quot;far future&quot;, after several changes have been made to the language."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1520, "user_id": 7417755, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/l7yQA.jpg?s=128&g=1", "display_name": "dustytrash", "link": "https://stackoverflow.com/users/7417755/dustytrash"}, "edited": false, "score": 0, "creation_date": 1601776997, "post_id": 45176487, "comment_id": 113509935, "body": "@dustytrash there are three pieces of code so \u201cthis\u201d is not helpful. Please provide a playground link with the problematic code in question."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 21, "last_activity_date": 1537533624, "last_edit_date": 1537533624, "creation_date": 1500409746, "answer_id": 45176487, "question_id": 45176403, "link": "https://stackoverflow.com/questions/45176403/trying-to-declare-a-string-const-results-in-expected-type-found-my-string/45176487#45176487", "title": "Trying to declare a String const results in expected type, found &quot;my string&quot;", "body": "<p>You should read <a href=\"https://doc.rust-lang.org/stable/book/second-edition/\" rel=\"noreferrer\"><em>The Rust Programming Language</em>, second edition</a>, specifically the <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\" rel=\"noreferrer\">chapter that discusses constants</a>. The proper syntax for declaring a <code>const</code> is:</p>\n\n<pre><code>const NAME: Type = value;\n</code></pre>\n\n<p>In this case:</p>\n\n<pre><code>const DATABASE: String = String::from(\"/var/lib/tracker/tracker.json\");\n</code></pre>\n\n<p><strong>However</strong>, this won't work because allocating a string is <em>not something that can be computed at compile time</em>. That's what <code>const</code> means. You may want to use a <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch04-03-slices.html#string-slices\" rel=\"noreferrer\">string slice</a>, specifically one with a static lifetime, which is implicit in <code>const</code>s and <code>static</code>s:</p>\n\n<pre><code>const DATABASE: &amp;str = \"/var/lib/tracker/tracker.json\";\n</code></pre>\n\n<p>Functions that just need to read a string should accept a <code>&amp;str</code>, so this is unlikely to cause any issues. It also has the nice benefit of requiring no allocation whatsoever, so it's pretty efficient.</p>\n\n<p>If you <em>need</em> a <code>String</code>, it's likely that you will need to mutate it. In that case, making it global would lead to threading issues. Instead, you should just allocate when you need it with <code>String::from(DATABASE)</code> and pass in the <code>String</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32956050/155423\">How to create a static string at compile time</a></li>\n</ul>\n"}], "owner": {"reputation": 195, "user_id": 3818171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43695c967e20dac254e535ff08980858?s=128&d=identicon&r=PG&f=1", "display_name": "arsalan86", "link": "https://stackoverflow.com/users/3818171/arsalan86"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8161, "favorite_count": 2, "accepted_answer_id": 45176487, "answer_count": 1, "score": 10, "last_activity_date": 1537533624, "creation_date": 1500409416, "last_edit_date": 1500409599, "question_id": 45176403, "link": "https://stackoverflow.com/questions/45176403/trying-to-declare-a-string-const-results-in-expected-type-found-my-string", "title": "Trying to declare a String const results in expected type, found &quot;my string&quot;", "body": "<p>I'm trying to declare a <code>String</code> constant in Rust, but I get a compiler error I just can't make sense of</p>\n\n<pre><code>const DATABASE : String::from(\"/var/lib/tracker/tracker.json\");\n</code></pre>\n\n<p>and here's what I get when I try to compile it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected type, found `\"/var/lib/tracker/tracker.json\"`\n  --&gt; src/main.rs:19:31\n   |\n19 | const DATABASE : String::from(\"/var/lib/tracker/tracker.json\");\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected one of `!`, `+`, `-&gt;`, `::`, or `=`, found `)`\n  --&gt; src/main.rs:19:64\n   |\n19 | const DATABASE : String::from(\"/var/lib/tracker/tracker.json\");\n   |                                                                ^ expected one of `!`, `+`, `-&gt;`, `::`, or `=` here\n</code></pre>\n"}, {"tags": ["rust", "add"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1534260238, "last_edit_date": 1534260238, "creation_date": 1500402953, "answer_id": 45174592, "question_id": 45174458, "link": "https://stackoverflow.com/questions/45174458/how-can-i-implement-an-operator-like-add-for-a-reference-type-so-that-i-can-add/45174592#45174592", "title": "How can I implement an operator like Add for a reference type so that I can add more than two values at once?", "body": "<p>I would probably just implement <code>Add</code> of a reference to a value:</p>\n\n<pre><code>impl&lt;'a&gt; Add&lt;&amp;'a Point&gt; for Point {\n    type Output = Point;\n    fn add(self, other: &amp;'a Point) -&gt; Point {\n        Point {\n            x: self.x + &amp;other.x,\n            y: self.y + &amp;other.y,\n        }\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>Bracketing doesn't seem to help.</p>\n</blockquote>\n\n<p>You can take a reference to the result of part of the expression:</p>\n\n<pre><code>let d = &amp;(&amp;a + &amp;b) + &amp;b;\n</code></pre>\n\n<p>I'm not sure if that looks better or not to you.</p>\n\n<blockquote>\n  <p>now there are 4 cases in total</p>\n</blockquote>\n\n<p>There's actually 4 cases <em>per operation</em>: <code>(T, T)</code>, <code>(T, &amp;T)</code>, <code>(&amp;T, T)</code>, <code>(&amp;T, &amp;T)</code>.</p>\n\n<blockquote>\n  <p>Is there a nicer way?</p>\n</blockquote>\n\n<p>Not really, but that's because of your next requirement...</p>\n\n<blockquote>\n  <p>I'd also like to avoid unnecessary copying in the non-reference versions</p>\n</blockquote>\n\n<p>That's why the operations consume by value, to allow you to reuse any potential allocations. In the case of the <code>Point</code>, it's (ahem) pointless because the structs are so small. It's more believable for types like <code>Vec</code>.</p>\n\n<hr>\n\n<p>All that being said, people usually use a macro to avoid the drudgery of writing the same thing over and over. For example, the <a href=\"https://github.com/rust-lang/rust/blob/1.18.0/src/libcore/internal_macros.rs#L34-L70\" rel=\"nofollow noreferrer\">standard library has a macro that assumes the types implement <code>Copy</code></a>. If you want to <em>reuse</em> allocation, however, that means you do not want all 4 implementations to be the same. At best you might be able to write two  implementations <code>(&amp;T, &amp;T)</code> and <code>(T, &amp;T)</code> and forward from the remaining two variants.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28005134/155423\">How do I implement the Add trait for a reference to a struct?</a></li>\n</ul>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1569030"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 253, "favorite_count": 0, "accepted_answer_id": 45174592, "answer_count": 1, "score": 2, "last_activity_date": 1553103937, "creation_date": 1500402460, "last_edit_date": 1553103937, "question_id": 45174458, "link": "https://stackoverflow.com/questions/45174458/how-can-i-implement-an-operator-like-add-for-a-reference-type-so-that-i-can-add", "title": "How can I implement an operator like Add for a reference type so that I can add more than two values at once?", "body": "<p>I'd like to make an immutable, by-reference data type with addition a bit like this:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct Point {\n    x: i64,\n    y: i64,\n}\n\nimpl&lt;'a&gt; Add for &amp;'a Point {\n    type Output = Point;\n    fn add(self, other: &amp;Point) -&gt; Point {\n        Point {\n            x: self.x + &amp;other.x,\n            y: self.y + &amp;other.y,\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/28005134/how-do-i-implement-the-add-trait-for-a-reference-to-a-struct\">How do I implement the Add trait for a reference to a struct?</a> suggests implementing <code>Add</code> on the reference type.</p>\n\n<p>I can do this, where <code>a</code> and <code>b</code> are <code>Point</code>s:</p>\n\n<pre><code>let c = &amp;a + &amp;b;\nlet d = &amp;c + &amp;b;\n</code></pre>\n\n<p>but not this:</p>\n\n<pre><code>let d = &amp;a + &amp;b + &amp;b;\n</code></pre>\n\n<p>I don't mind the <code>&amp;</code> signs, but not being able to chain adds doesn't look good to me. I want to implement multiplication (<code>z = a + b * c;</code> or if I must, <code>z = &amp;a + &amp;b * &amp;c;</code>), it would look clearer if I didn't have to create a temporary variable.</p>\n\n<p>Is there a way to get this to work cleanly? Bracketing doesn't seem to help.</p>\n\n<p>I understand what's going on, <code>&amp;a + &amp;b</code> gives a <code>Point</code> not a <code>&amp;Point</code>, which suggests that I could implement both <code>add(&amp;Point, Point)</code> and <code>add(&amp;Point, &amp;Point)</code> - but now there are 4 cases in total to get all combinations working since <code>a + b * c</code> and <code>a * b + c</code> have different precedence / parse trees after all. Is there a nicer way?</p>\n\n<p>I'd also like to avoid unnecessary copying in the non-reference versions. I'm returning a new object anyway, so cloning the inputs first seems a waste of time to me.</p>\n"}, {"tags": ["rust", "serde", "toml"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500388559, "post_id": 45169626, "comment_id": 77307705, "body": "You need to include your <code>Cargo.toml</code>&#39;s dependency section.  This is probably a version mismatch."}, {"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500388656, "post_id": 45169626, "comment_id": 77307795, "body": "Thank you, @DK. just added it."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500389128, "post_id": 45169626, "comment_id": 77308224, "body": "Just tried it with rustc 1.20.0 nightly of 2016-06-22, and it works just fine."}, {"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500389262, "post_id": 45169626, "comment_id": 77308335, "body": "Thanks for trying it, @DK. Any suggestions on why it could be failing on my machine? I&#39;m running Ubuntu 16.04."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500389307, "post_id": 45169626, "comment_id": 77308377, "body": "And it also appears to work fine with 1.18.0 stable."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500389426, "post_id": 45169626, "comment_id": 77308467, "body": "I don&#39;t know.  Have you tried in a fresh directory with no existing build artefacts or temporary files?  Maybe there&#39;s a messed-up <code>Cargo.lock</code> file."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1500389456, "post_id": 45169626, "comment_id": 77308496, "body": "This even runs in a <a href=\"http://play.integer32.com/?gist=95b00206bbeb7c64f5496680d0bf41c9&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>, so I can only imagine a corrupted target folder or a bad Cargo.lock."}, {"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 0, "creation_date": 1500389619, "post_id": 45169626, "comment_id": 77308657, "body": "Alright, that&#39;s confirmation enough for me that this is localized to my environment. Thanks for the help, guys. I&#39;ll close the issue with the crate maintainer and dig up more."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500390320, "post_id": 45169626, "comment_id": 77309243, "body": "I agree with @DK. \u2014 you almost certainly have two versions of Serde and your dependency is using a different version from what you have. I&#39;ve marked as a duplicate of a question that shows how to figure out exactly why."}], "owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 191, "favorite_count": 0, "closed_date": 1500390264, "answer_count": 0, "score": 1, "last_activity_date": 1500390226, "creation_date": 1500387981, "last_edit_date": 1500390226, "question_id": 45169626, "link": "https://stackoverflow.com/questions/45169626/toml-decoding-in-rust", "closed_reason": "Duplicate", "title": "TOML decoding in Rust?", "body": "<p>I'm trying to use the TOML crate to read a configuration file into a Rust struct. I was getting a consistent Serde error that seemed unrelated to my code, so I decided to try the decode examples from the TOML documentation and to my surprise, it failed to build with the exact same error.</p>\n\n<p>I have filed an issue with the crate maintainer, but I have a nagging feeling I might be missing something.</p>\n\n<p>The code example in question is the following:</p>\n\n<pre><code>//! An example showing off the usage of `Deserialize` to automatically decode\n//! TOML into a Rust `struct`\n\n#![deny(warnings)]\n\nextern crate toml;\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\n/// This is what we're going to decode into. Each field is optional, meaning\n/// that it doesn't have to be present in TOML.\n#[derive(Debug, Deserialize)]\nstruct Config {\n    global_string: Option&lt;String&gt;,\n    global_integer: Option&lt;u64&gt;,\n    server: Option&lt;ServerConfig&gt;,\n    peers: Option&lt;Vec&lt;PeerConfig&gt;&gt;,\n}\n\n/// Sub-structs are decoded from tables, so this will decode from the `[server]`\n/// table.\n///\n/// Again, each field is optional, meaning they don't have to be present.\n#[derive(Debug, Deserialize)]\nstruct ServerConfig {\n    ip: Option&lt;String&gt;,\n    port: Option&lt;u64&gt;,\n}\n\n#[derive(Debug, Deserialize)]\nstruct PeerConfig {\n    ip: Option&lt;String&gt;,\n    port: Option&lt;u64&gt;,\n}\n\nfn main() {\n    let toml_str = r#\"\n        global_string = \"test\"\n        global_integer = 5\n        [server]\n        ip = \"127.0.0.1\"\n        port = 80\n        [[peers]]\n        ip = \"127.0.0.1\"\n        port = 8080\n        [[peers]]\n        ip = \"127.0.0.1\"\n    \"#;\n\n    let decoded: Config = toml::from_str(toml_str).unwrap();\n    println!(\"{:#?}\", decoded);\n}\n</code></pre>\n\n<p>The error I get when building is the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Config: serde::de::Deserialize&lt;'_&gt;` is not satisfied\n  --&gt; src/main.rs:51:27\n   |\n51 |     let decoded: Config = toml::from_str(toml_str).unwrap();\n   |                           ^^^^^^^^^^^^^^ the trait `serde::de::Deserialize&lt;'_&gt;` is not implemented for `Config`\n   |\n   = note: required by `toml::from_str`\n</code></pre>\n\n<p>I have tried to build it with the following toolchains:</p>\n\n<ul>\n<li><p>rustc 1.20.0-nightly (2652ce677 2017-07-17)</p></li>\n<li><p>rustc 1.18.0 (03fc9d622 2017-06-06)</p></li>\n</ul>\n\n<p>My Cargo.toml includes the following:</p>\n\n<pre><code>[dependencies]\nserde = \"*\"\nserde_derive = \"*\"\ntoml = \"*\"\n</code></pre>\n\n<p>Am I missing something, or is the base example of decoding with this crate simply broken?</p>\n"}, {"tags": ["rust", "rustdoc"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500381067, "post_id": 45165193, "comment_id": 77301541, "body": "<i>why?</i> If the code is relevant to the example, show it. If it&#39;s not relevant to the example, just <a href=\"https://doc.rust-lang.org/stable/book/first-edition/documentation.html\" rel=\"nofollow noreferrer\">prefix the lines with <code>#</code> to hide them</a>: <i>you can add lines that start with <code>#</code>, and they will be hidden from the output, but will be used when compiling your code</i>"}, {"owner": {"reputation": 125, "user_id": 4062906, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hRy4j.jpg?s=128&g=1", "display_name": "Krampenschiesser", "link": "https://stackoverflow.com/users/4062906/krampenschiesser"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500392933, "post_id": 45165193, "comment_id": 77311309, "body": "I was thinking that I could extract non relevant parts into that file. Otherwise it will boat up the documentation to only be readable when rendered."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1500377027, "creation_date": 1500377027, "answer_id": 45165411, "question_id": 45165193, "link": "https://stackoverflow.com/questions/45165193/can-i-externalize-parts-of-a-rust-documentation-test-to-an-external-file/45165411#45165411", "title": "Can I externalize parts of a Rust documentation test to an external file?", "body": "<p>I don't think it is officially supported at this moment; there is a related <a href=\"https://github.com/rust-lang/cargo/issues/739\" rel=\"nofollow noreferrer\">Cargo issue</a> and <a href=\"https://github.com/Geal/cargo-external-doc\" rel=\"nofollow noreferrer\">a tool</a> that attempts to allow it until it is introduced in Cargo (I haven't used it, though).</p>\n"}, {"tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": true, "score": 3, "last_activity_date": 1500380914, "last_edit_date": 1500380914, "creation_date": 1500377216, "answer_id": 45165489, "question_id": 45165193, "link": "https://stackoverflow.com/questions/45165193/can-i-externalize-parts-of-a-rust-documentation-test-to-an-external-file/45165489#45165489", "title": "Can I externalize parts of a Rust documentation test to an external file?", "body": "<p><code># include!(\"src/fragment.rs\")</code> appears to work and does not show up in the output.  I have no idea how this interferes with Cargo's dependency processing, though.</p>\n"}], "owner": {"reputation": 125, "user_id": 4062906, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hRy4j.jpg?s=128&g=1", "display_name": "Krampenschiesser", "link": "https://stackoverflow.com/users/4062906/krampenschiesser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 45165489, "answer_count": 2, "score": 2, "last_activity_date": 1500380914, "creation_date": 1500376455, "last_edit_date": 1500380906, "question_id": 45165193, "link": "https://stackoverflow.com/questions/45165193/can-i-externalize-parts-of-a-rust-documentation-test-to-an-external-file", "title": "Can I externalize parts of a Rust documentation test to an external file?", "body": "<p>When writing Rust documentation tests, is it possible to externalize parts of the code to an external file to keep the example short?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5304, "user_id": 2757035, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fade5daafd5717576b33f2e08f4f9429?s=128&d=identicon&r=PG&f=1", "display_name": "underscore_d", "link": "https://stackoverflow.com/users/2757035/underscore-d"}, "edited": false, "score": 1, "creation_date": 1500371276, "post_id": 45163024, "comment_id": 77294418, "body": "What you really want is a variable that can be used in a constant expression. A language should provide mechanisms for achieving that which are actually native and typesafe, rather than relying upon a preprocessor to naively substitute text everywhere. And as far as I can tell, Rust does."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 5304, "user_id": 2757035, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fade5daafd5717576b33f2e08f4f9429?s=128&d=identicon&r=PG&f=1", "display_name": "underscore_d", "link": "https://stackoverflow.com/users/2757035/underscore-d"}, "edited": false, "score": 1, "creation_date": 1500371447, "post_id": 45163024, "comment_id": 77294534, "body": "@underscore_d The possible duplicate uses an outdated syntax."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1500371631, "post_id": 45163024, "comment_id": 77294698, "body": "@Olof: For future reference, this is a case of <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem/66378#66378\">the XY problem</a>: you should ask about what you&#39;re doing (abstract out buffer size), not <i>how</i> you&#39;re attempting to do it (C preprocessor macros in Rust)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500372470, "post_id": 45163024, "comment_id": 77295266, "body": "@Boiethios: Then it&#39;s time to update it!"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1500372906, "post_id": 45163024, "comment_id": 77295564, "body": "@MatthieuM. I think it is not really a duplicate: the author of the other question seems to ask for a <code>sizeof</code> at compile-time."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1500374341, "post_id": 45163024, "comment_id": 77296582, "body": "@Boiethios: So... duplicates can be a bit funny that way. What matters is not so much what the question was about, but what the answers teach. That is, the guideline is to close A as duplicate of B whenever A is answered by the answers of B. <i>If you think this is not the case, please feel free to come to the chatroom and grab one of the other gold-badge users of Rust, so they can reopen the question.</i>"}, {"owner": {"reputation": 5304, "user_id": 2757035, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fade5daafd5717576b33f2e08f4f9429?s=128&d=identicon&r=PG&f=1", "display_name": "underscore_d", "link": "https://stackoverflow.com/users/2757035/underscore-d"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500374509, "post_id": 45163024, "comment_id": 77296736, "body": "@Boiethios A lot of the problem is when people ask one question in the title and then another in the body. Which were they really asking? Which are other people going to be searching for? And what does the final answer end up being? I think in this case, it was basically the same in the end, albeit outdated as you mentioned. Which makes an update over there a nice idea!"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1500381230, "post_id": 45163024, "comment_id": 77301675, "body": "@MatthieuM. Thanks for the explanation. I think that the sentence <i>This question was marked as an exact duplicate of an existing question.</i> is confusing."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500384046, "post_id": 45163024, "comment_id": 77303895, "body": "@Boiethios: It is :( It&#39;s been brought up on multiple occasions on meta :("}, {"owner": {"reputation": 5304, "user_id": 2757035, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fade5daafd5717576b33f2e08f4f9429?s=128&d=identicon&r=PG&f=1", "display_name": "underscore_d", "link": "https://stackoverflow.com/users/2757035/underscore-d"}, "edited": false, "score": 0, "creation_date": 1500392609, "post_id": 45163024, "comment_id": 77311055, "body": "There used to be more variations on the duplicate message, right? Like you could still flag it, but IIRC that would not always close the question and might instead just highlight it as &quot;Possible duplicate&quot;. And those old reasons remain on old questions even if they are no longer selectable."}], "answers": [{"comments": [{"owner": {"reputation": 696, "user_id": 2129644, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/8feb0a34801725042b245cd1158fda48?s=128&d=identicon&r=PG", "display_name": "Olof", "link": "https://stackoverflow.com/users/2129644/olof"}, "edited": false, "score": 0, "creation_date": 1500373417, "post_id": 45163061, "comment_id": 77295901, "body": "It works, took me some time to understand. The compiler needs to know the size of an array during compiling but since a constant never changes the compiler knows the size to use."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 696, "user_id": 2129644, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/8feb0a34801725042b245cd1158fda48?s=128&d=identicon&r=PG", "display_name": "Olof", "link": "https://stackoverflow.com/users/2129644/olof"}, "edited": false, "score": 2, "creation_date": 1500373576, "post_id": 45163061, "comment_id": 77296015, "body": "@Olof Exactly. <code>const</code> in Rust means &quot;known at compile-time&quot;. I edited my answer to add that."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 7, "last_activity_date": 1500380887, "last_edit_date": 1500380887, "creation_date": 1500371016, "answer_id": 45163061, "question_id": 45163024, "link": "https://stackoverflow.com/questions/45163024/whats-the-equivalent-of-a-c-preprocessor-like-define-for-an-array-length/45163061#45163061", "title": "What&#39;s the equivalent of a C preprocessor-like #define for an array length?", "body": "<p>Use <code>const</code> to fulfill your need:</p>\n\n<pre><code>const BUFFER: usize = 512;\n</code></pre>\n\n<p>However, this is <em>not</em> preprocessor: as underscore_d's comment says, the usage of preprocessor is a pretty archaic mechanism. It has been replaced in Rust with:</p>\n\n<ul>\n<li><code>const</code> in case of literal value;</li>\n<li>macros, to generate code.</li>\n</ul>\n\n<p>You can understand the Rust's <code>const</code> keyword as \"evaluated at compile-time\". The (maybe) incoming functions evaluated at compile-time will be marked as <code>const</code> also.</p>\n\n<p>Furthermore, even in C, <a href=\"https://stackoverflow.com/questions/136946/difference-between-enum-and-define-statements\">using the preprocessor to create a compile-time constant is not the best practice</a>.</p>\n"}], "owner": {"reputation": 696, "user_id": 2129644, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/8feb0a34801725042b245cd1158fda48?s=128&d=identicon&r=PG", "display_name": "Olof", "link": "https://stackoverflow.com/users/2129644/olof"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3198, "favorite_count": 1, "closed_date": 1500372479, "accepted_answer_id": 45163061, "answer_count": 1, "score": 8, "last_activity_date": 1500380887, "creation_date": 1500370938, "last_edit_date": 1500380805, "question_id": 45163024, "link": "https://stackoverflow.com/questions/45163024/whats-the-equivalent-of-a-c-preprocessor-like-define-for-an-array-length", "closed_reason": "Duplicate", "title": "What&#39;s the equivalent of a C preprocessor-like #define for an array length?", "body": "<p>I am writing a test to see the time difference on different buffer sizes when reading from a stream. Instead of changing the buffer size everywhere in the code, it would be nice to have some preprocessor doing it for me so that I will only need to change the value in one place.</p>\n\n<p>An example of what I'm thinking of is writing a C macro <code>define BUFFER 1024</code>, and when creating a array using it to define the size.</p>\n"}, {"tags": ["function", "parameters", "rust", "traits", "dereference"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1500362476, "post_id": 45159914, "comment_id": 77288345, "body": "You do not need to dereference <code>current</code>, it is automatic."}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500362805, "post_id": 45159914, "comment_id": 77288578, "body": "@Boiethios Thanks :), this takes me from 10 <code>*</code> to 8."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500363985, "post_id": 45159914, "comment_id": 77289318, "body": "That&#39;s a beginning. There is a problem on <code>other</code> because the type is <code>&amp;mut &amp;mut std::boxed::Box&lt;Trait&gt;</code>."}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500365528, "post_id": 45159914, "comment_id": 77290370, "body": "Yeah, that&#39;s true. But I did not find a way to prevent this, as <code>active_objects</code> has to be a vector of references, as I would move out of borrowed context otherwise, and I have to <code>iter_mut</code> to be able to mutate the traitobject, so while I agree that <code>&amp;mut &amp;mut</code> is something undesirable I don&#39;t know how to do it otherwise..."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500367653, "post_id": 45159914, "comment_id": 77291825, "body": "You could ask the question: &quot;How to visit all pair mutably in a vector?&quot;. I would search in this direction: <a href=\"https://doc.rust-lang.org/1.1.0/collections/slice/struct.Permutations.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.1.0/collections/slice/&hellip;</a> or <a href=\"https://crates.io/crates/permutohedron/\" rel=\"nofollow noreferrer\">crates.io/crates/permutohedron</a>"}], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500366010, "post_id": 45161147, "comment_id": 77290735, "body": "Nice solution, but I am convinced there is a simpler solution to do what OP wants."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500366132, "post_id": 45161147, "comment_id": 77290809, "body": "Well, I agree ;) This is just one step further"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500366383, "post_id": 45161147, "comment_id": 77290950, "body": "<code>let current = current.as_mut(); ...</code> works too. And I&#39;m not sure it can be simpler."}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1500367943, "post_id": 45161147, "comment_id": 77292022, "body": "It definitely looks better than my first test, I did some testing and it is actually faster than my original function by about 4% which I most certainly did not expect. In case there won&#39;t be a better answer I will accept yours. Thanks!"}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1500369240, "post_id": 45161147, "comment_id": 77292994, "body": "<code>as_mut</code>  and <code>borrow_mut</code> don&#39;t seem to effect process speed at all, so using <code>as_mut</code> should be cleaner due to the fact that I don&#39;t have to <code>use</code> anything."}], "tags": [], "owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "is_accepted": false, "score": 3, "last_activity_date": 1500380014, "last_edit_date": 1500380014, "creation_date": 1500365825, "answer_id": 45161147, "question_id": 45159914, "link": "https://stackoverflow.com/questions/45159914/is-there-a-way-to-avoid-dereferencing-with-trait-objects/45161147#45161147", "title": "Is there a way to avoid dereferencing with trait objects?", "body": "<p>As <a href=\"https://stackoverflow.com/questions/45159914/is-there-a-way-to-avoid-dereferencing-with-traitobjects#comment77290950_45161147\">red75prime points out</a>, <code>as_mut()</code> is a possibility to take a mutable reference to a <code>Box</code>, which provides an even better solution:</p>\n\n<pre><code>fn foo(objects: &amp;mut [Box&lt;Trait&gt;]) {\n    let mut active_objects: Vec&lt;&amp;mut Box&lt;Trait&gt;&gt; = vec!();\n\n    for current in objects.iter_mut() {\n        for other in active_objects.iter_mut() {\n            let current = current.as_mut();\n            let other = other.as_mut();\n\n            if current.is_interacting(other) {\n                current.boo(other);\n                other.boo(current);\n            }\n        }\n\n        active_objects.push(current);\n    }\n}\n\ntrait Trait {\n    fn boo(&amp;mut self, other: &amp;mut Trait);\n\n    fn is_interacting(&amp;self, other: &amp;Trait) -&gt; bool;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1500369843, "post_id": 45162463, "comment_id": 77293411, "body": "Nice, but it&#39;s worth to remember that <code>&amp;mut Trait</code> is a fat pointer that takes twice as much space as <code>&amp;mut Box&lt;Trait&gt;</code>."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 2, "creation_date": 1500370044, "post_id": 45162463, "comment_id": 77293543, "body": "But that means that it uses less indirections so it could provide faster access"}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1500370438, "post_id": 45162463, "comment_id": 77293812, "body": "I compared the speed of both answers, this one is 10 to 15% faster than the other functions, which is impressive, the best solution yet! Thanks"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 0, "creation_date": 1500371083, "post_id": 45162463, "comment_id": 77294267, "body": "@ViktorChv&#225;tal, right, but as always it&#39;s better to bench. Decreased number of memory accesses could be offset by increased cache pressure."}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": false, "score": 2, "last_activity_date": 1500369428, "creation_date": 1500369428, "answer_id": 45162463, "question_id": 45159914, "link": "https://stackoverflow.com/questions/45159914/is-there-a-way-to-avoid-dereferencing-with-trait-objects/45162463#45162463", "title": "Is there a way to avoid dereferencing with trait objects?", "body": "<p>It's not necessary to keep references to <code>Box</code> objects in the <code>active_objects</code> vector.  This should work and eliminates most of the dereferencing:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn foo(objects: &amp;mut [Box&lt;Trait&gt;]) {\n    let mut active_objects: Vec&lt;&amp;mut Trait&gt; = vec!();\n\n    for current in objects.iter_mut() {\n        let current = current.as_mut();\n        for other in active_objects.iter_mut() {\n            if current.is_interacting(*other) {\n                current.boo(*other);\n                other.boo(current);\n            }\n        }\n\n        active_objects.push(current);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1500382476, "post_id": 45166606, "comment_id": 77302576, "body": "Thanks, I didn&#39;t know it was possible to use <code>impl</code> on <code>&amp;</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1500380316, "creation_date": 1500380316, "answer_id": 45166606, "question_id": 45159914, "link": "https://stackoverflow.com/questions/45159914/is-there-a-way-to-avoid-dereferencing-with-trait-objects/45166606#45166606", "title": "Is there a way to avoid dereferencing with trait objects?", "body": "<p>You can remove <strong>all</strong> dereferences in your code:</p>\n\n<pre><code>fn foo(objects: &amp;mut [Box&lt;Trait&gt;]) {\n    let mut active_objects: Vec&lt;&amp;mut Box&lt;Trait&gt;&gt; = vec![];\n\n    for current in objects.iter_mut() {\n        for other in active_objects.iter_mut() {\n            if current.is_interacting(other) {\n                current.boo(other);\n                other.boo(current);\n            }\n        }\n\n        active_objects.push(current);\n    }\n}\n</code></pre>\n\n<p>You enable this by <a href=\"https://stackoverflow.com/q/28799372/155423\">implementing the trait itself for references and boxes to the type</a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; Trait for &amp;'a mut T\nwhere\n    T: Trait + ?Sized,\n{\n    fn boo(&amp;mut self, other: &amp;mut Trait) {\n        (**self).boo(other)\n    }\n\n    fn is_interacting(&amp;self, other: &amp;Trait) -&gt; bool {\n        (**self).is_interacting(other)\n    }\n}\n\nimpl&lt;T&gt; Trait for Box&lt;T&gt;\nwhere\n    T: Trait + ?Sized,\n{\n    fn boo(&amp;mut self, other: &amp;mut Trait) {\n        (**self).boo(other)\n    }\n\n    fn is_interacting(&amp;self, other: &amp;Trait) -&gt; bool {\n        (**self).is_interacting(other)\n    }\n}\n</code></pre>\n\n<p>This is a one-time piece of code that you add near your trait definition allowing the call site to be cleaner.</p>\n"}], "owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "accepted_answer_id": 45166606, "answer_count": 3, "score": 2, "last_activity_date": 1500380316, "creation_date": 1500361806, "last_edit_date": 1500379972, "question_id": 45159914, "link": "https://stackoverflow.com/questions/45159914/is-there-a-way-to-avoid-dereferencing-with-trait-objects", "title": "Is there a way to avoid dereferencing with trait objects?", "body": "<p>I came across a problem which I thought would be perfect to use trait objects for. While I managed to make it work, it looks far more complicated than it should so I would like to know if there is a more optimal way to use trait objects.</p>\n\n<p>Exemplified code:</p>\n\n<pre><code>/* This takes a slice of objects implementing trait and compares each of \n them with all other objects in the slice, if they interact with each other\n both objects should call a certain function with the other object as a parameter.\n\n This is used for a collision system, in case you know of a better way to solve this please\n let me know. */\n\nfn foo(objects: &amp;mut [Box&lt;Trait&gt;]) {\n    let mut active_objects: Vec&lt;&amp;mut Box&lt;Trait&gt;&gt; = vec!();\n\n    for current in objects.iter_mut() {\n        for other in active_objects.iter_mut() {\n            if (**current).is_interacting(&amp;***other) {\n                current.boo(&amp;mut ***other);\n                other.boo(&amp;mut **current);\n            }\n        }\n\n        active_objects.push(current);\n    }\n}\n\ntrait Trait {\n    fn boo(&amp;mut self, other: &amp;mut Trait);\n\n    fn is_interacting(&amp;self, other: &amp; Trait) -&gt; bool;\n}\n</code></pre>\n\n<p>Is there a way I don't have to write something like <code>&amp;***</code> every time I want to use the actual object?</p>\n\n<p><code>if (**current).is_interacting(&amp;***other)</code> becomes <code>if current.is_interacting(&amp;***other)</code> as Rust automatically dereferences in this case.</p>\n"}, {"tags": ["types", "compiler-errors", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1500360774, "post_id": 45159414, "comment_id": 77287320, "body": "It seems my google-fu is really weak as I could have sworn there was a duplicate for this :("}], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500363952, "post_id": 45160283, "comment_id": 77289300, "body": "BTW, <code>fn(A) -&gt; B {plus}</code> is not a pointer. <a href=\"https://play.rust-lang.org/?gist=0ad4ee6d789294e3af47d0a71dc74940&amp;version=stable\" rel=\"nofollow noreferrer\">It is zero-sized.</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500364426, "post_id": 45160283, "comment_id": 77289604, "body": "@red75prime: Oh right, I always forget about this neat thing!"}, {"owner": {"reputation": 438, "user_id": 3739851, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/bP6eh.jpg?s=128&g=1", "display_name": "isaacg", "link": "https://stackoverflow.com/users/3739851/isaacg"}, "edited": false, "score": 0, "creation_date": 1500365467, "post_id": 45160283, "comment_id": 77290326, "body": "Thanks for the very detailed and comprehensive answer. This perfectly answers my question."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 1, "last_activity_date": 1500364480, "last_edit_date": 1500364480, "creation_date": 1500363037, "answer_id": 45160283, "question_id": 45159414, "link": "https://stackoverflow.com/questions/45159414/type-signature-of-a-rust-hashmap-of-a-function/45160283#45160283", "title": "Type signature of a Rust HashMap of a function", "body": "<p>If you look closely at the difference you will have your answer, although it can be puzzling.</p>\n\n<p>I expect that <code>plus</code> has been declared as:</p>\n\n<pre><code>fn plus(v: Vec&lt;Expression&gt;) -&gt; Expression;\n</code></pre>\n\n<p>In this case, the type of <code>plus</code> is <code>fn(Vec&lt;Expression&gt;) -&gt; Expression {plus}</code>, and is actually a <a href=\"https://wiki.dlang.org/Voldemort_types\" rel=\"nofollow noreferrer\">Voldemort Type</a>: it cannot be named.</p>\n\n<p>Most notably, it differs from an eventual <code>fn(Vec&lt;Expression&gt;) -&gt; Expression {multiply}</code>.</p>\n\n<p>Those two types can be coerced into a bare <code>fn(Vec&lt;Expression&gt;) -&gt; Expression</code> (without the <code>{plus}</code>/<code>{multiply}</code> denomination).</p>\n\n<p>And this latter type can be transformed into a <code>Fn(Vec&lt;Expression&gt;) -&gt; Expression</code>, which is a trait for any callable which do not modify their environments (such as the closure <code>|v: Vec&lt;Expression&gt;| v[0].clone()</code>).</p>\n\n<hr>\n\n<p>The problem, however, is that while <code>fn(a) -&gt; b {plus}</code> can be transformed into <code>fn(a) -&gt; b</code> which can be transformed into <code>Fn(a) -&gt; b</code>... the transformation requires <em>a change of memory representation</em>. This is because:</p>\n\n<ul>\n<li><code>fn(a) -&gt; b {plus}</code> is a zero-sized type,</li>\n<li><code>fn(a) -&gt; b</code> is a pointer to function,</li>\n<li><code>Box&lt;Fn(a) -&gt; b&gt;</code> is a boxed <strong>trait object</strong> which generally means both a virtual pointer <em>and</em> a data pointer.</li>\n</ul>\n\n<p>And therefore the type ascription doesn't work, because it can only perform cost-free coercions.</p>\n\n<hr>\n\n<p>The solution is to perform the transformation before it's too late:</p>\n\n<pre><code>// Not strictly necessary, but it does make code shorter.\ntype FnExpr = Box&lt;Fn(Vec&lt;Expression&gt;) -&gt; Expression&gt;;\n\nlet functions: HashMap&lt;_, _&gt; =\n    vec!((\"+\", Box::new(plus) as FnExpr)).into_iter().collect();\n               ^~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Or maybe you'd rather keep unboxed functions:</p>\n\n<pre><code>// Simple functions only\ntype FnExpr = fn(Vec&lt;Expression&gt;) -&gt; Expression;\n\nlet functions: HashMap&lt;_, _&gt; =\n    vec!((\"+\", plus as FnExpr)).into_iter().collect();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 2, "last_activity_date": 1500364960, "last_edit_date": 1500364960, "creation_date": 1500363167, "answer_id": 45160321, "question_id": 45159414, "link": "https://stackoverflow.com/questions/45159414/type-signature-of-a-rust-hashmap-of-a-function/45160321#45160321", "title": "Type signature of a Rust HashMap of a function", "body": "<p>The relevant parts of error message are <code>Box&lt;std::ops::Fn ...  &gt;</code> and <code>Box&lt;fn ... {plus}&gt;</code>. The first is a boxed <code>Fn</code> trait object. The second is a boxed function <code>plus</code>. Note that it isn't a boxed pointer to a function, which would be <code>Box&lt;fn ...&gt;</code> with no <code>{plus}</code> part. It is the unique and unnameable type of the function <code>plus</code> itself.</p>\n\n<p>That is you cannot write real type of this <code>HashMap</code>, as the type it contains is unnameable. It's not a big deal though, you can only put <code>plus</code> function into it.</p>\n\n<p>The following code gives compilation error</p>\n\n<pre><code>let functions: HashMap&lt;_, _&gt; =\n    vec![(\"+\", Box::new(plus)), \n         (\"-\", Box::new(minus))].into_iter().collect();\n                        ^^^^^ expected fn item, found a different fn item\n</code></pre>\n\n<p>This works, but it is useless</p>\n\n<pre><code>let functions: HashMap&lt;_, _&gt; =\n    vec![(\"+\", Box::new(plus)), \n         (\"-\", Box::new(plus))].into_iter().collect();\n</code></pre>\n\n<p>One possible solution is to convert first element of a vector into the required type.</p>\n\n<pre><code>type BoxedFn = Box&lt;Fn(Vec&lt;Expression&gt;) -&gt; Expression&gt;;\n\nlet functions: HashMap&lt;&amp;str, BoxedFn&gt; =\n    vec![(\"+\", Box::new(plus) as BoxedFn),\n         (\"_\", Box::new(minus))].into_iter().collect();\n</code></pre>\n\n<p>Another one is type ascription of intermediate variable.</p>\n\n<pre><code>type BoxedFn = Box&lt;Fn(Vec&lt;Expression&gt;) -&gt; Expression&gt;;\n\nlet v: Vec&lt;(_, BoxedFn)&gt; = vec![(\"+\", Box::new(plus)), (\"_\", Box::new(minus))];\nlet functions: HashMap&lt;&amp;str, BoxedFn&gt; = v.into_iter().collect();\n</code></pre>\n"}], "owner": {"reputation": 438, "user_id": 3739851, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/bP6eh.jpg?s=128&g=1", "display_name": "isaacg", "link": "https://stackoverflow.com/users/3739851/isaacg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 903, "favorite_count": 0, "accepted_answer_id": 45160283, "answer_count": 2, "score": 0, "last_activity_date": 1500381173, "creation_date": 1500360317, "last_edit_date": 1500381173, "question_id": 45159414, "link": "https://stackoverflow.com/questions/45159414/type-signature-of-a-rust-hashmap-of-a-function", "title": "Type signature of a Rust HashMap of a function", "body": "<p>I create a HashMap which maps strings to functions of type <code>Vec&lt;Expression&gt; -&gt; Expression</code>, where <code>Expression</code> is a type I have defined. The code in question is:</p>\n\n<pre><code>let functions: HashMap&lt;_, _&gt; = vec!((\"+\", Box::new(plus))).into_iter().collect();\n</code></pre>\n\n<p>If I let Rust infer the type for me, as in the code above, it compiles and runs fine, as in the code above. However, if I try to specify the type, it doesn't compile:</p>\n\n<pre><code>let functions: HashMap&lt;&amp;str, Box&lt;Fn(Vec&lt;Expression&gt;) -&gt; Expression&gt;&gt; =\n    vec!((\"+\", Box::new(plus))).into_iter().collect();\n</code></pre>\n\n<p>The compiler error message isn't very helpful:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>let functions: HashMap&lt;&amp;str, Box&lt;Fn(Vec&lt;Expression&gt;) -&gt; Expression&gt;&gt; = vec!((\"+\", Box::new(plus))).into_iter().collect();\n^^^^^^^ a collection of type `std::collections::HashMap&lt;&amp;str, std::boxed::Box&lt;std::ops::Fn(std::vec::Vec&lt;Expression&gt;) -&gt; Expression&gt;&gt;` cannot be built from an iterator over elements of type `(&amp;str, std::boxed::Box&lt;fn(std::vec::Vec&lt;Expression&gt;) -&gt; Expression {plus}&gt;)`\n</code></pre>\n\n<p>What is the actual type of this <code>HashMap</code>?</p>\n"}, {"tags": ["rust", "traits", "trait-objects"], "answers": [{"tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": true, "score": 11, "last_activity_date": 1500318159, "creation_date": 1500318159, "answer_id": 45151772, "question_id": 45151770, "link": "https://stackoverflow.com/questions/45151770/what-is-the-difference-between-t-trait-boxt-and-trait-boxtrait/45151772#45151772", "title": "What is the difference between &lt;T: Trait&gt; Box&lt;T&gt; and &amp;Trait / Box&lt;Trait&gt;?", "body": "<p>With <code>&lt;T: Trait&gt; Box&lt;T&gt;</code> you are using a trait bound to tell the compiler that you want a <code>Box</code> with an instance of some type <code>T</code> which implements <code>Trait</code>, and you will specify <code>T</code> when you use it. The Rust compiler will likely create different, efficient, code for each different <code>T</code> in your code (monomorphization).</p>\n\n<p>With <code>Box&lt;Trait&gt;</code> you are telling the compiler that you want a <code>Box</code> with a trait object, a pointer to an <em>unknown</em> type which implements <code>Trait</code>, which means that the compiler will use dynamic dispatch.</p>\n\n<p>I've included two examples which makes the difference a bit clearer:</p>\n\n<p><code>&lt;T: Trait&gt; Box&lt;T&gt;</code>, i.e. trait bound:</p>\n\n<pre><code>use std::fmt::Debug;\n\nstruct Wrapper&lt;T&gt; {\n    contents: Option&lt;Box&lt;T&gt;&gt;,\n}\n\nimpl&lt;T: Debug&gt; Wrapper&lt;T&gt; {\n    fn new() -&gt; Wrapper&lt;T&gt; {\n        Wrapper { contents: None }\n    }\n\n    fn insert(&amp;mut self, val: Box&lt;T&gt;) {\n    }\n}\n\nfn main() {\n    let mut w = Wrapper::new();\n\n    // makes T for w be an integer type, e.g. Box&lt;i64&gt;\n    w.insert(Box::new(5));\n\n    // type error, &amp;str is not an integer type\n    // w.insert(Box::new(\"hello\"));\n}\n</code></pre>\n\n<p><code>Box&lt;Trait&gt;</code>, i.e. trait object:</p>\n\n<pre><code>use std::fmt::Debug;\n\nstruct Wrapper {\n    contents: Option&lt;Box&lt;Debug&gt;&gt;,\n}\n\nimpl Wrapper {\n    fn new() -&gt; Wrapper {\n        Wrapper { contents: None }\n    }\n\n    fn insert(&amp;mut self, val: Box&lt;Debug&gt;) {\n    }\n}\n\nfn main() {\n    let mut w = Wrapper::new();\n    w.insert(Box::new(5));\n    w.insert(Box::new(\"hello\"));\n}\n</code></pre>\n\n<p>For further details on the difference between trait bounds and trait objects I recommend <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html\" rel=\"noreferrer\">the section on trait objects in the first edition of the Rust book</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1509366987, "creation_date": 1509366987, "answer_id": 47015465, "question_id": 45151770, "link": "https://stackoverflow.com/questions/45151770/what-is-the-difference-between-t-trait-boxt-and-trait-boxtrait/47015465#47015465", "title": "What is the difference between &lt;T: Trait&gt; Box&lt;T&gt; and &amp;Trait / Box&lt;Trait&gt;?", "body": "<p>Importantly, you don't <strong>have</strong> to put the generic type behind a reference (like <code>&amp;</code> or <code>Box</code>), you can accept it directly:</p>\n\n<pre><code>fn myfunction3&lt;T: Debug&gt;(v: T) {\n    println!(\"{:?}\", v);\n}\n\nfn main() {\n    myfunction3(5);\n}\n</code></pre>\n\n<p>This has the same benefits of monomorphization without the downside of additional memory allocation (<code>Box</code>) or needing to keep ownership of the value somewhere (<code>&amp;</code>).</p>\n\n<p>I would say that generics should often be the default choice \u2014 you only require a <em>trait object</em> when there is dynamic dispatch / heterogeneity. </p>\n"}], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 777, "favorite_count": 0, "accepted_answer_id": 45151772, "answer_count": 2, "score": 12, "last_activity_date": 1509366987, "creation_date": 1500318159, "last_edit_date": 1509366702, "question_id": 45151770, "link": "https://stackoverflow.com/questions/45151770/what-is-the-difference-between-t-trait-boxt-and-trait-boxtrait", "title": "What is the difference between &lt;T: Trait&gt; Box&lt;T&gt; and &amp;Trait / Box&lt;Trait&gt;?", "body": "<p>When writing code with traits you can put the trait in a trait bound:</p>\n\n<pre><code>use std::fmt::Debug;\n\nfn myfunction1&lt;T: Debug&gt;(v: Box&lt;T&gt;) {\n    println!(\"{:?}\", v);\n}\n\nfn myfunction2&lt;T: Debug&gt;(v: &amp;T) {\n    println!(\"{:?}\", v);\n}\n\nfn main() {\n    myfunction1(Box::new(5));\n    myfunction2(&amp;5);\n}\n</code></pre>\n\n<p>Or directly in a <code>Box</code> or reference type:</p>\n\n<pre><code>use std::fmt::Debug;\n\nfn myfunction3(v: Box&lt;Debug&gt;) {\n    println!(\"{:?}\", v);\n}\n\nfn myfunction4(v: &amp;Debug) {\n    println!(\"{:?}\", v);\n}\n\nfn main() {\n    myfunction3(Box::new(5));\n    myfunction4(&amp;5);\n}\n</code></pre>\n\n<p>These give the same output. So what is the difference?</p>\n\n<p>(This question was inspired by <a href=\"https://stackoverflow.com/questions/45148102/what-is-the-reason-why-this-generic-type-not-work-but-type-alias-is-ok#45148102\">another question</a> where this was just one of several intermingled concepts)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1500307050, "post_id": 45148102, "comment_id": 77266473, "body": "Just to clarify the vote: <code>T</code> is implicitly <code>Sized</code> in <code>Box&lt;T&gt; where T: FnOnce() + Send + &#39;static</code>, yet the first version attempts to call <code>Worker::new</code> where <code>T = (FnOnce() + Send + &#39;static)</code>, which is not sized. Just add <code>?Sized</code> to the constraint and it will compile: <a href=\"http://play.integer32.com/?gist=cbaff0acd0eb5842ef77da5d0201df33&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>"}, {"owner": {"reputation": 152, "user_id": 2218120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/60064b82586d40b379d635e2aaa824e6?s=128&d=identicon&r=PG", "display_name": "Frio", "link": "https://stackoverflow.com/users/2218120/frio"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1500307491, "post_id": 45148102, "comment_id": 77266773, "body": "Thanks for you response! I want to know a little more, why in type alias version, I don&#39;t need to add the ?Sized trait?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1500307578, "post_id": 45148102, "comment_id": 77266831, "body": "That&#39;s because you don&#39;t have a type parameter in the second version at all. Had you declared <code>Job</code> like <code>type Job&lt;T: FnOnce() + Send + &#39;static&gt; = Box&lt;T&gt;;</code>, you would have had the same problem."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500307753, "post_id": 45148102, "comment_id": 77266933, "body": "There&#39;s additional problem. It will compile, but it will not work. <code>Box&lt;FnOnce()&gt;</code> is unusable yet. <code>Box&lt;Fn()&gt;</code> should be used instead."}, {"owner": {"reputation": 152, "user_id": 2218120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/60064b82586d40b379d635e2aaa824e6?s=128&d=identicon&r=PG", "display_name": "Frio", "link": "https://stackoverflow.com/users/2218120/frio"}, "edited": false, "score": 0, "creation_date": 1500307870, "post_id": 45148102, "comment_id": 77267006, "body": "oh, I see.Can you tell me when should I add ?Sized? Feel like ?Size  doesn&#39;t make any sense, Why compiler don&#39;t add ?Size automatically for me?"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500308824, "post_id": 45148102, "comment_id": 77267585, "body": "@Frio, in this case you don&#39;t really need <code>?Sized</code> or generic <code>new&lt;T&gt;()</code>. I&#39;ll try to add answer a bit later."}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1500309328, "post_id": 45148102, "comment_id": 77267867, "body": "I feel this was closed a bit prematurely, as the primary issue of the question in the title does not have to do with <code>Sized</code>, but the difference between trait objects and types that implements traits (i.e. <code>&lt;T: SomeTrait&gt; Box&lt;T&gt;</code> vs <code>Box&lt;SomeTrait&gt;</code>). Probably an answer for that somewhere as well, just have not found a one that matches this question well yet."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500309487, "post_id": 45148102, "comment_id": 77267956, "body": "It seems I will not. Anyway, every closure, you seem to intend to pass into <code>Worker</code>, has unique type. Thus you will be able to pass exactly one closure into it. Other closures will have incompatible types. You&#39;ll need to use trait object <code>Box&lt;Fn()&gt;</code>, that is what you do in second version of your code."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1500309699, "post_id": 45148102, "comment_id": 77268082, "body": "@E_net4, please, consider removal of duplicate status."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1500310491, "post_id": 45148102, "comment_id": 77268489, "body": "@red75prime I do not have such a privilege, the OP has accepted the duplicate and it can only be retracted by voting to reopen or directly done so by a gold badge holder. Besides, it&#39;s not reasonable to reopen now without the question covering that concern, which was recently discovered. If the question is rephrased to ask about that problem in particular, then it&#39;s fair to reconsider."}, {"owner": {"reputation": 152, "user_id": 2218120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/60064b82586d40b379d635e2aaa824e6?s=128&d=identicon&r=PG", "display_name": "Frio", "link": "https://stackoverflow.com/users/2218120/frio"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500310737, "post_id": 45148102, "comment_id": 77268644, "body": "@red75prime Why I have to use Fn()? The closure I want to pass is a task which would be processed only once.Is&#39;t it more suitable with FnOnce()?"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500310924, "post_id": 45148102, "comment_id": 77268731, "body": "@Frio, <code>Box&lt;FnOnce()&gt;</code> doesn&#39;t work yet, you get compilation error if you call it. <a href=\"https://github.com/rust-lang/rust/issues/28796\" rel=\"nofollow noreferrer\">Issue #28796</a>"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1500318212, "post_id": 45148102, "comment_id": 77272521, "body": "I couldn&#39;t really find a good question/answer to link to. So I wrote a new one here: <a href=\"https://stackoverflow.com/questions/45151770/what-is-the-difference-between-t-trait-boxt-and-boxtrait-in-rust/45151772#45151772\" title=\"what is the difference between t trait boxt and boxtrait in rust\">stackoverflow.com/questions/45151770/&hellip;</a>"}, {"owner": {"reputation": 152, "user_id": 2218120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/60064b82586d40b379d635e2aaa824e6?s=128&d=identicon&r=PG", "display_name": "Frio", "link": "https://stackoverflow.com/users/2218120/frio"}, "reply_to_user": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1500339519, "post_id": 45148102, "comment_id": 77280541, "body": "@ErikVesteraas Your new question/answers has resovled all my question now.thanks!"}], "owner": {"reputation": 152, "user_id": 2218120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/60064b82586d40b379d635e2aaa824e6?s=128&d=identicon&r=PG", "display_name": "Frio", "link": "https://stackoverflow.com/users/2218120/frio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 160, "favorite_count": 1, "closed_date": 1500308759, "answer_count": 0, "score": 3, "last_activity_date": 1500307042, "creation_date": 1500305317, "last_edit_date": 1500307042, "question_id": 45148102, "link": "https://stackoverflow.com/questions/45148102/what-is-the-reason-why-this-generic-type-not-work-but-type-alias-is-ok", "closed_reason": "Duplicate", "title": "What is the reason why this generic type not work but type alias is OK?", "body": "<p>I don't know why this code is not ok</p>\n\n<pre><code>use std::thread::{self, JoinHandle};\nuse std::sync::mpsc::{self, Sender, Receiver};\nuse std::sync::{Arc, Mutex};\n\nstruct Worker;\n\nimpl Worker {\n    fn new&lt;T: FnOnce() + Send + 'static&gt;(receiver: Arc&lt;Mutex&lt;Receiver&lt;Box&lt;T&gt;&gt;&gt;&gt;) -&gt; Worker {\n        Worker\n    }\n}\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n    let rx: Arc&lt;Mutex&lt;Receiver&lt;Box&lt;FnOnce() + Send + 'static&gt;&gt;&gt;&gt; = Arc::new(Mutex::new(rx));\n    Worker::new(rx);\n}\n</code></pre>\n\n<p>The compiler told me </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::ops::FnOnce() + std::marker::Send + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:16:5\n   |\n16 |     Worker::new(rx);\n   |     ^^^^^^^^^^^ the trait `std::marker::Sized` is not implemented for `std::ops::FnOnce() + std::marker::Send + 'static`\n   |\n   = note: `std::ops::FnOnce() + std::marker::Send + 'static` does not have a constant size known at compile-time\n   = note: required by `Worker::new`\n</code></pre>\n\n<p>but when I use type alias like this, compilation is passed. Can anyone tell me the reason? I'm very confused ... In my opinion, the two methods is same, the type alias \"Job\" is just a shorten method. </p>\n\n<pre><code>use std::thread::JoinHandle;\nuse std::thread;\nuse std::sync::mpsc;\nuse std::sync::mpsc::{Sender, Receiver};\nuse std::sync::{Arc, Mutex};\nstruct Worker;\n\ntype Job = Box&lt;FnOnce() + Send + 'static&gt;;\n\nimpl Worker {\n    fn new(receiver: Arc&lt;Mutex&lt;Receiver&lt;Job&gt;&gt;&gt;)-&gt;Worker {\n        Worker\n    }\n}\n\nfn main(){\n   let (tx, rx) = mpsc::channel();\n   let rx = Arc::new(Mutex::new(rx));\n   Worker::new(rx);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500299424, "post_id": 45146056, "comment_id": 77260902, "body": "I was going to answer similarly, but OP is likely just misusing the term &quot;type ascription&quot;. They really just mean to use a turbofish. They also want to have a <code>Box&lt;[i32]&gt;</code>, not a <code>Box&lt;[i32; 2]&gt;</code> \u2014 these are different types."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500299541, "post_id": 45146056, "comment_id": 77260990, "body": "@Shepmaster in that case I don&#39;t know if it&#39;s possible :) - especially if you want a boxed slice without a specific length."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500299641, "post_id": 45146056, "comment_id": 77261066, "body": "Hum, I think I understand now from your comments."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1500299343, "creation_date": 1500299343, "answer_id": 45146056, "question_id": 45145887, "link": "https://stackoverflow.com/questions/45145887/how-to-create-a-boxed-slice-with-type-ascription/45146056#45146056", "title": "How to create a boxed slice with type ascription?", "body": "<p>This is an <a href=\"https://github.com/rust-lang/rust/issues/23416\" rel=\"nofollow noreferrer\">experimental feature</a>:</p>\n\n<pre><code>#![feature(type_ascription)]\n\nfn main() {\n    let _ = Box::new([42, 0]: [i32; 2]);\n}\n</code></pre>\n\n<p>Also, in that case you need to be explicit about the length.</p>\n"}, {"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500299990, "post_id": 45146261, "comment_id": 77261358, "body": "Is <code>::&lt;Type&gt;::</code> not type ascription?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500300248, "post_id": 45146261, "comment_id": 77261556, "body": "@Boiethios no, that&#39;s a separate feature that is not stabilized."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500300515, "post_id": 45146261, "comment_id": 77261771, "body": "About the last line, I tried to use the opposite: <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.into_vec\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.slice.html#method.into_vec</a> with an empty slice, <i>e.g.</i>: <code>Box::&lt;[i32]&gt;::new([]).into_vec()</code>"}, {"owner": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "edited": false, "score": 2, "creation_date": 1500300672, "post_id": 45146261, "comment_id": 77261892, "body": "Just a terminological point: it seems to be an unsizing coercion and not a <code>Deref</code> coercion."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "edited": false, "score": 0, "creation_date": 1500301253, "post_id": 45146261, "comment_id": 77262391, "body": "@MasakiHara thank you! I always screw up the various coercions."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1500301337, "post_id": 45146261, "comment_id": 77262462, "body": "@Shepmaster, <code>as</code> casts are <a href=\"https://doc.rust-lang.org/nomicon/casts.html\" rel=\"nofollow noreferrer\">superset of coercions</a> and <code>Box&lt;[T; N]&gt;</code> can be coerced to <code>Box&lt;[T]&gt;</code> because <code>[T; N]</code> is <code>Unsize&lt;[T]&gt;</code> (<a href=\"https://doc.rust-lang.org/std/marker/trait.Unsize.html\" rel=\"nofollow noreferrer\">Unsize trait</a>) and there exists blanket implementation <a href=\"https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html\" rel=\"nofollow noreferrer\"><code>impl&lt;T: Unsize&lt;U&gt;, U&gt; CoerceUnsized&lt;Box&lt;U&gt;&gt; for Box&lt;T&gt;</code></a>"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500302066, "post_id": 45146261, "comment_id": 77262991, "body": "Anyway, for now it can be described as compiler magic. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\" rel=\"nofollow noreferrer\">DST coercion RFC</a> isn&#39;t stable yet."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1500301228, "last_edit_date": 1500301228, "creation_date": 1500299890, "answer_id": 45146261, "question_id": 45145887, "link": "https://stackoverflow.com/questions/45145887/how-to-create-a-boxed-slice-with-type-ascription/45146261#45146261", "title": "How to create a boxed slice with type ascription?", "body": "<blockquote>\n  <p>It is easy to create a boxed slice</p>\n</blockquote>\n\n<p>Except you didn't do that. If you <a href=\"https://stackoverflow.com/q/21747136/155423\">print the type</a>, you can see that <code>Box::new([1, 2])</code> creates a <em>boxed array</em>, not a slice. On the other hand, <code>let _: Box&lt;[i32]&gt; = Box::new([1, 2])</code> creates a boxed array and the converts it to a <em>boxed slice</em>. These have different types. Notably, the first type has a length known at compile time, the second no longer does.</p>\n\n<p>You can use <code>as</code> as well:</p>\n\n<pre><code>fn main() {\n    let _ = Box::new([1, 2]) as Box&lt;[i32]&gt;;\n}\n</code></pre>\n\n<p><code>Box::&lt;[i32]&gt;::new([1, 2])</code> doesn't work for the reason the error message says: <code>T</code> is not <code>Sized</code>. <code>T</code> is directly mapped to the type being boxed.</p>\n\n<p><code>Box::new([1, 2]) as Box&lt;[i32]&gt;</code> works because a sized item is passed to <code>Box::new</code> and then it is converted to a type with an unsized inner bit using <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">unsized coercions</a>.</p>\n\n<p>It appears that unsized coercions don't apply for <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\" rel=\"nofollow noreferrer\"><em>actual</em> type ascription</a>, an unstable feature in nightly Rust:</p>\n\n<pre><code>#![feature(type_ascription)]\n\nfn main() {\n    let foo = Box::new([1, 2]): Box&lt;[i32]&gt;;\n}\n</code></pre>\n\n<hr>\n\n<p>For this <em>specific</em> case, you can use <code>into_boxed_slice</code>, which should avoid the need for any stack allocation.</p>\n\n<pre><code>vec![1, 2].into_boxed_slice();\n</code></pre>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 989, "favorite_count": 0, "accepted_answer_id": 45146261, "answer_count": 2, "score": 0, "last_activity_date": 1500302010, "creation_date": 1500298930, "last_edit_date": 1500302010, "question_id": 45145887, "link": "https://stackoverflow.com/questions/45145887/how-to-create-a-boxed-slice-with-type-ascription", "title": "How to create a boxed slice with type ascription?", "body": "<p>It is easy to create a boxed slice:</p>\n\n<pre><code>fn main() {\n    let _ = Box::new([42, 0]);\n}\n</code></pre>\n\n<p>But if I want to add type ascription:</p>\n\n<pre><code>fn main() {\n    let _ = Box::&lt;[i32]&gt;::new([42, 0]);\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no associated item named `new` found for type `std::boxed::Box&lt;[i32]&gt;` in the current scope\n  --&gt; src/main.rs:2:13\n   |\n 2 |     let _ = Box::&lt;[i32]&gt;::new([42, 0]);\n   |             ^^^^^^^^^^^^^^^^^\n   |\n   = note: the method `new` exists but the following trait bounds were not satisfied: `[i32] : std::marker::Sized`\n</code></pre>\n\n<p>This is really strange, because this works:</p>\n\n<pre><code>fn main() {\n    let _: Box&lt;[i32]&gt; = Box::new([42, 0]);\n}\n</code></pre>\n"}, {"tags": ["error-handling", "rust", "stdin"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1500304202, "last_edit_date": 1500304202, "creation_date": 1500290247, "answer_id": 45142831, "question_id": 45142694, "link": "https://stackoverflow.com/questions/45142694/what-is-purpose-of-unwrap-if-the-return-value-is-not-used/45142831#45142831", "title": "What is purpose of `unwrap()` if the return value is not used?", "body": "<p>If you don't want to \"elegantly\" handle cases where there is a failure to read a line from stdin (e.g. by attempting it once again or picking a default value), you can use <code>unwrap()</code> to trigger a panic; it silences the warning caused by a <code>Result</code> that is not used:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused result which must be used\n --&gt; src/main.rs:5:5\n  |\n5 |     io::stdin().read_line(&amp;mut line);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(unused_must_use)] on by default\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500294258, "post_id": 45142866, "comment_id": 77257066, "body": "<i>a bit of compiler magic</i> \u2014 it&#39;s not restricted to the compiler, FWIW. Any user type can also be annotated with <code>#[must_use]</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1500294428, "post_id": 45142866, "comment_id": 77257189, "body": "@Shepmaster: Sure, the attribute itself however <i>is</i> magic (black magic, I would argue). I mean, it could be modeled &quot;properly&quot; in the type system if Rust supported Linear Types (instead of merely Affine Types), however it doesn&#39;t and instead we have this little attribute which makes a type &quot;close-to-linear-but-not-quite&quot;."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1500290350, "creation_date": 1500290350, "answer_id": 45142866, "question_id": 45142694, "link": "https://stackoverflow.com/questions/45142694/what-is-purpose-of-unwrap-if-the-return-value-is-not-used/45142866#45142866", "title": "What is purpose of `unwrap()` if the return value is not used?", "body": "<blockquote>\n  <p>What is the purpose of <code>unwrap()</code> if the returned value is not used? Just to throw an error?</p>\n</blockquote>\n\n<p><strong>Yes, but that's not all</strong>.</p>\n\n<p>Ignoring potential errors is bad; there's a big difference between an empty <code>line</code> and a <code>line</code> that's not been read because of an error; for example in a typical \"pipeline\" command in a shell, the program <em>needs</em> to stop when it stops receiving input, otherwise the user has to kill it.</p>\n\n<p>In C, ignoring errors is too easy. Many languages solve this by having exceptions, but Rust doesn't.</p>\n\n<p>In order to avoid the issue plaguing C programs that it's too easy to forget to check the return code, normally Rust functions will bundle the expected return value and error in <code>Result</code>, so that you <em>have</em> to check it to get the return value.</p>\n\n<p>There is one potential issue left, however: what if the caller doesn't care about the return value? Most notably, when the value is <code>()</code>, nobody really cares about it.</p>\n\n<p>There is a bit of compiler magic invoked here: the <code>Result</code> structure is tagged with the <code>#[must_use]</code> attribute. This attribute makes it <strong>mandatory to do something with <code>Result</code></strong> when it's returned.</p>\n\n<p>Therefore, in your case, not only is unwrapping good, it's also the simplest way to \"do something\" and avoid a compilation warning.</p>\n"}], "owner": {"reputation": 11598, "user_id": 869330, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/34be19b80429871a85ea92656850bceb?s=128&d=identicon&r=PG&f=1", "display_name": "Naetmul", "link": "https://stackoverflow.com/users/869330/naetmul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 496, "favorite_count": 0, "accepted_answer_id": 45142866, "answer_count": 2, "score": 6, "last_activity_date": 1500304202, "creation_date": 1500289780, "last_edit_date": 1500294191, "question_id": 45142694, "link": "https://stackoverflow.com/questions/45142694/what-is-purpose-of-unwrap-if-the-return-value-is-not-used", "title": "What is purpose of `unwrap()` if the return value is not used?", "body": "<p>I found this Rust code for getting a line from <code>stdin</code>:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut line = String::new();\n    io::stdin().read_line(&amp;mut line).unwrap();\n    println!(\"Input: {}\", line);\n}\n</code></pre>\n\n<p><code>io::stdin().read_line(&amp;mut line)</code> sets the <code>line</code> variable to a line read from <code>stdin</code>. From my understanding, <code>read_line()</code> returns a <code>Result</code> value, which can be pattern-matched, or <code>.unwrap()</code> can be used to get the inner value if it is not an <code>Err</code>.</p>\n\n<p>However, the returned value of <code>read_line()</code> is never used. Only the <code>line</code> string variable is used, but people use <code>.unwrap()</code> most of the time even if it is not used.</p>\n\n<p>What is the purpose of <code>unwrap()</code> if the returned value is not used? Just to throw an error?</p>\n"}, {"tags": ["assembly", "optimization", "x86", "rust", "embedded"], "comments": [{"owner": {"reputation": 35113, "user_id": 3826372, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/P0peM.png?s=128&g=1", "display_name": "Ross Ridge", "link": "https://stackoverflow.com/users/3826372/ross-ridge"}, "edited": false, "score": 0, "creation_date": 1500267204, "post_id": 45135949, "comment_id": 77241628, "body": "I don&#39;t know Rust, but the second infinite loop in the disassembly may be the second infinite loop in your source code at the end. Giving loop branch targets 16 byte alignment is a very common performance optimization, although obviously the performance of an infinite loop likely isn&#39;t going to matter."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1500275903, "post_id": 45135949, "comment_id": 77245380, "body": "Try to add <code>-C llvm-args=-align-all-blocks=1</code> to <code>rustc</code> options."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500279146, "post_id": 45135949, "comment_id": 77247078, "body": "Code for <code>pub extern panic_fmt()</code> is included into the binary probably because you declared it as an exported public function or because you <a href=\"https://doc.rust-lang.org/core/#how-to-use-the-core-library\" rel=\"nofollow noreferrer\">didn&#39;t declared <code>panic_fmt</code> correcly</a>. I cannot build your code at the moment, so I can&#39;t verify this."}, {"owner": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "edited": false, "score": 1, "creation_date": 1500283765, "post_id": 45135949, "comment_id": 77249868, "body": "Are you sure you are not sweating the small stuff?  26 bytes here may be 13% of the entire footprint, but that is unlikely to scale for non-trivial applications - that is it will be much less than 13%.  What is &quot;embedded-like&quot;?  Not all embedded systems are resource constrained; if targeting i586 (with typically large SDRAM) is the byte alignment really going to be a significant issue in a non-trivial example?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "edited": false, "score": 0, "creation_date": 1500313509, "post_id": 45135949, "comment_id": 77270100, "body": "@Clifford I&#39;d even say that the question should have been at least three \u2014 &quot;why is this alignment here&quot;, &quot;how do I remove the alignment&quot;, &quot;why is this other code included&quot;. I&#39;d have expected a bit better from a 25K+ rep user :-(."}, {"owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "reply_to_user": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "edited": false, "score": 0, "creation_date": 1500334549, "post_id": 45135949, "comment_id": 77279375, "body": "@Clifford it&#39;s a lot easier to determine where space goes at this kind of level in a small program than in a big program. Also I agree with the title change, and high rep users are mostly just people who&#39;ve used it since the early days. I stopped daily browsing of SO when nitpicking over format and rules was more common than simply answering questions, even if they bend the rules a bit. Some of the best questions on SO are not ones you could ask today with it&#39;s current user base"}], "answers": [{"comments": [{"owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "edited": false, "score": 0, "creation_date": 1568847891, "post_id": 45138518, "comment_id": 102409091, "body": "Coming back to this a year later... <code>align-all-functions=1</code> actually will actually align all functions on a 2 byte border. Meanwhile, <code>align-all-functions=0</code> will use platform defaults (only align certain functions, but align those to a 16 or 32 byte boundary). For my use case size is significantly more important than performance"}], "tags": [], "owner": {"reputation": 88, "user_id": 5904738, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8a3e8b8f1f15fcdd558f389dbbe00801?s=128&d=identicon&r=PG", "display_name": "bug", "link": "https://stackoverflow.com/users/5904738/bug"}, "is_accepted": true, "score": 6, "last_activity_date": 1500293918, "last_edit_date": 1500293918, "creation_date": 1500277214, "answer_id": 45138518, "question_id": 45135949, "link": "https://stackoverflow.com/questions/45135949/how-can-i-prevent-functions-from-being-aligned-to-16-bytes-boundary-when-compili/45138518#45138518", "title": "How can I prevent functions from being aligned to 16 bytes boundary when compiling for X86?", "body": "<p>As <a href=\"https://stackoverflow.com/questions/45135949/are-functions-aligned-to-16-bytes-boundary#comment77241628_45135949\">Ross states</a>, aligning functions and branch points to 16 bytes is a common x86 optimization recommended by Intel, although it can occasionally be less efficient, such as in your case.  For a compiler to optimally decide whether or not to align is a hard problem, and I believe LLVM simply opts to always align.  <a href=\"https://stackoverflow.com/a/18287872/5904738\">See more info on Performance optimisations of x86-64 assembly - Alignment and branch prediction</a>.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/45135949/are-functions-aligned-to-16-bytes-boundary#comment77245380_45135949\">red75prime's comment hints</a> (but doesn't explain), LLVM uses the value of the <code>align-all-blocks</code> as the byte alignment for branch points, so setting it to 1 will disable alignment.  Note that this applies globally, and that comparison benchmarks are recommended.</p>\n"}], "owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 382, "favorite_count": 0, "accepted_answer_id": 45138518, "answer_count": 1, "score": 5, "last_activity_date": 1500313460, "creation_date": 1500265394, "last_edit_date": 1500313460, "question_id": 45135949, "link": "https://stackoverflow.com/questions/45135949/how-can-i-prevent-functions-from-being-aligned-to-16-bytes-boundary-when-compili", "title": "How can I prevent functions from being aligned to 16 bytes boundary when compiling for X86?", "body": "<p>I'm working in an embedded-like environment where each byte is extremely precious, much more so than additional cycles for unaligned accesses. I have some simple Rust code from an OS development example:</p>\n\n<pre><code>#![feature(lang_items)]\n#![no_std]\nextern crate rlibc;\n#[no_mangle]\npub extern fn rust_main() {\n\n    // ATTENTION: we have a very small stack and no guard page\n\n    let hello = b\"Hello World!\";\n    let color_byte = 0x1f; // white foreground, blue background\n\n    let mut hello_colored = [color_byte; 24];\n    for (i, char_byte) in hello.into_iter().enumerate() {\n        hello_colored[i*2] = *char_byte;\n    }\n\n    // write `Hello World!` to the center of the VGA text buffer\n    let buffer_ptr = (0xb8000 + 1988) as *mut _;\n    unsafe { *buffer_ptr = hello_colored };\n\n    loop{}\n\n}\n\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\n#[lang = \"panic_fmt\"] #[no_mangle] pub extern fn panic_fmt() -&gt; ! {loop{}}\n</code></pre>\n\n<p>I also use this linker script:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>OUTPUT_FORMAT(\"binary\")\nENTRY(rust_main)\nphys = 0x0000;\nSECTIONS\n{\n  .text phys : AT(phys) {\n    code = .;\n    *(.text.start);\n    *(.text*)\n    *(.rodata)\n    . = ALIGN(4);\n  }\n  __text_end=.;\n  .data : AT(phys + (data - code))\n  {\n    data = .;\n    *(.data)\n    . = ALIGN(4);\n  }\n  __data_end=.;\n  .bss : AT(phys + (bss - code))\n  {\n    bss = .;\n    *(.bss)\n    . = ALIGN(4);\n  }\n  __binary_end = .;\n}\n</code></pre>\n\n<p>I optimize it with <code>opt-level: 3</code> and LTO using an i586 targeted compiler and the GNU ld linker, including <code>-O3</code> in the linker command. I've also tried <code>opt-level: z</code> and a coupled <code>-Os</code> at the linker, but this resulted in code that was bigger (it didn't unroll the loop). As it stands, the size seems pretty reasonable with <code>opt-level: 3</code>.</p>\n\n<p>There are quite a few bytes that seem wasted on aligning functions to some boundary. After the unrolled loop, 7 <code>nop</code> instructions are inserted and then there is an infinite loop as expected. After this, there appears to be another infinite loop that is preceded by 7 16-bit override <code>nop</code> instructions (ie, <code>xchg ax,ax</code> rather than <code>xchg eax,eax</code>). This adds up to about 26 bytes wasted in a 196 byte flat binary.</p>\n\n<ul>\n<li>What exactly is the optimizer doing here?</li>\n<li>What options do I have to disable it?</li>\n<li>Why is unreachable code being included in the binary? </li>\n</ul>\n\n<p>The full assembly listing below:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   0:   c6 05 c4 87 0b 00 48    movb   $0x48,0xb87c4\n   7:   c6 05 c5 87 0b 00 1f    movb   $0x1f,0xb87c5\n   e:   c6 05 c6 87 0b 00 65    movb   $0x65,0xb87c6\n  15:   c6 05 c7 87 0b 00 1f    movb   $0x1f,0xb87c7\n  1c:   c6 05 c8 87 0b 00 6c    movb   $0x6c,0xb87c8\n  23:   c6 05 c9 87 0b 00 1f    movb   $0x1f,0xb87c9\n  2a:   c6 05 ca 87 0b 00 6c    movb   $0x6c,0xb87ca\n  31:   c6 05 cb 87 0b 00 1f    movb   $0x1f,0xb87cb\n  38:   c6 05 cc 87 0b 00 6f    movb   $0x6f,0xb87cc\n  3f:   c6 05 cd 87 0b 00 1f    movb   $0x1f,0xb87cd\n  46:   c6 05 ce 87 0b 00 20    movb   $0x20,0xb87ce\n  4d:   c6 05 cf 87 0b 00 1f    movb   $0x1f,0xb87cf\n  54:   c6 05 d0 87 0b 00 57    movb   $0x57,0xb87d0\n  5b:   c6 05 d1 87 0b 00 1f    movb   $0x1f,0xb87d1\n  62:   c6 05 d2 87 0b 00 6f    movb   $0x6f,0xb87d2\n  69:   c6 05 d3 87 0b 00 1f    movb   $0x1f,0xb87d3\n  70:   c6 05 d4 87 0b 00 72    movb   $0x72,0xb87d4\n  77:   c6 05 d5 87 0b 00 1f    movb   $0x1f,0xb87d5\n  7e:   c6 05 d6 87 0b 00 6c    movb   $0x6c,0xb87d6\n  85:   c6 05 d7 87 0b 00 1f    movb   $0x1f,0xb87d7\n  8c:   c6 05 d8 87 0b 00 64    movb   $0x64,0xb87d8\n  93:   c6 05 d9 87 0b 00 1f    movb   $0x1f,0xb87d9\n  9a:   c6 05 da 87 0b 00 21    movb   $0x21,0xb87da\n  a1:   c6 05 db 87 0b 00 1f    movb   $0x1f,0xb87db\n  a8:   90                      nop\n  a9:   90                      nop\n  aa:   90                      nop\n  ab:   90                      nop\n  ac:   90                      nop\n  ad:   90                      nop\n  ae:   90                      nop\n  af:   90                      nop\n  b0:   eb fe                   jmp    0xb0\n  b2:   66 90                   xchg   %ax,%ax\n  b4:   66 90                   xchg   %ax,%ax\n  b6:   66 90                   xchg   %ax,%ax\n  b8:   66 90                   xchg   %ax,%ax\n  ba:   66 90                   xchg   %ax,%ax\n  bc:   66 90                   xchg   %ax,%ax\n  be:   66 90                   xchg   %ax,%ax\n  c0:   eb fe                   jmp    0xc0\n  c2:   66 90                   xchg   %ax,%ax\n</code></pre>\n"}, {"tags": ["rust", "idioms", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500233835, "post_id": 45132533, "comment_id": 77234521, "body": "You didn&#39;t really fix OP&#39;s problem: You had to write <code>best_by_pos[y][x]</code> multiple times to avoid the borrow, but OP borrowed the value precisely to avoid doing that. Using <code>Option</code>&#39;s implementation of <code>PartialOrd</code> is an orthogonal issue."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1500234312, "post_id": 45132533, "comment_id": 77234671, "body": "Technically, the stated problem is the borrow that lasts too long and code bloat. <code>Ord</code> implementation for <code>Option&lt;T&gt;</code> is not orthogonal for the second part."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500234402, "post_id": 45132533, "comment_id": 77234692, "body": "It is 100% unrelated to OP&#39;s question which was about avoiding a problem with the borrow checker. It would make a good comment though. By the way, you are missing a <code>clone()</code>. And if you add the <code>clone()</code> to the first line, it will hurt the code&#39;s performance relative to the original."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500235241, "post_id": 45132533, "comment_id": 77234935, "body": "Fair point. The point about <code>clone()</code> that is. I&#39;ve edited my answer accordingly."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500235552, "post_id": 45132533, "comment_id": 77234996, "body": "So now the only thing your answer changes is remove one <code>unwrap</code> and add an extra <code>Some</code>. What&#39;s the benefit exactly? How does this make the code less bloated?"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500236060, "post_id": 45132533, "comment_id": 77235109, "body": "The benefit is to know the tools at one&#39;s disposal. But this conversation becomes unhelpful."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 1, "last_activity_date": 1500235178, "last_edit_date": 1500235178, "creation_date": 1500233227, "answer_id": 45132533, "question_id": 45132283, "link": "https://stackoverflow.com/questions/45132283/whats-the-most-idiomatic-rust-way-to-modify-an-optional-element-of-a-vec-condit/45132533#45132533", "title": "What&#39;s the most idiomatic Rust way to modify an optional element of a Vec conditionally?", "body": "<p><code>Option&lt;T&gt;</code> implements <code>Ord</code> for all types <code>T</code>, which implement <code>Ord</code>, in such a way that <code>None</code> is less than <code>Some(v)</code> for any <code>v</code>. You can write your code like this:</p>\n\n<pre><code>if best_by_pos[y][x].is_none() || Some(&amp;new_cost) &lt; best_by_pos[y][x].as_ref() {\n    best_by_pos[y][x] = Some(new_cost.clone());\n}\n</code></pre>\n\n<p>Taking into account interjay answer, it can also be written as</p>\n\n<pre><code>let cost = &amp;mut best_by_pos[y][x];\nif cost.is_none() || Some(&amp;new_cost) &lt; cost.as_ref() {\n    *cost = Some(new_cost.clone());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 4, "last_activity_date": 1500233516, "creation_date": 1500233516, "answer_id": 45132572, "question_id": 45132283, "link": "https://stackoverflow.com/questions/45132283/whats-the-most-idiomatic-rust-way-to-modify-an-optional-element-of-a-vec-condit/45132572#45132572", "title": "What&#39;s the most idiomatic Rust way to modify an optional element of a Vec conditionally?", "body": "<p>You can make <code>old_best</code> a mutable reference into the vector, and write to it in the assignment. This also allows you to avoid indexing the vector again:</p>\n\n<pre><code>let old_best = &amp;mut best_by_pos[y][x];\nif old_best.is_none() || &amp;new_cost &lt; old_best.as_ref().unwrap() {\n    *old_best = Some(new_cost.clone());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1535034243, "last_edit_date": 1535034243, "creation_date": 1500241848, "answer_id": 45133607, "question_id": 45132283, "link": "https://stackoverflow.com/questions/45132283/whats-the-most-idiomatic-rust-way-to-modify-an-optional-element-of-a-vec-condit/45133607#45133607", "title": "What&#39;s the most idiomatic Rust way to modify an optional element of a Vec conditionally?", "body": "<p>If you have to stay with a <code>Vec</code>, something like this avoids any explicit <code>unwrap</code>s:</p>\n\n<pre><code>let slot = &amp;mut best_by_pos[y][x];\nlet is_better = slot.as_ref().map_or(true, |old_cost| &amp;new_cost &lt; old_cost);\nif is_better {\n    *slot = Some(new_cost.clone());\n}\n</code></pre>\n\n<p>This still holds a mutable borrow into the vector, so you'd need to wrap it in a scope.</p>\n\n<p>Another possibility is some less-common pattern syntax:</p>\n\n<pre><code>match best_by_pos[y][x] {\n    ref mut entry @ None =&gt; *entry = Some(new_cost.clone()), \n    Some(ref mut entry) =&gt; {\n        if &amp;new_cost &lt; entry {\n            *entry = new_cost.clone();\n        }\n    }\n}\n</code></pre>\n\n<p>Guessing, based on the usage of <code>Option</code> inside the vector, I'd encourage you to <em>not use a <code>Vec</code></em>. Instead, a <code>HashMap</code> can better represent the concept of a sparse array. In addition, you get to use the Entry API:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry;\n\nlet mut best_by_pos: HashMap&lt;(usize, usize), BigInt&gt; = Default::default();\n\nmatch best_by_pos.entry((x, y)) {\n    Entry::Vacant(e) =&gt; {\n        e.insert(new_cost.clone());\n    }\n    Entry::Occupied(mut e) =&gt; {\n        if &amp;new_cost &lt; e.get() {\n            e.insert(new_cost.clone());\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 76, "user_id": 3774327, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/abf52057ca173e78c5c16894311028ac?s=128&d=identicon&r=PG&f=1", "display_name": "user3774327", "link": "https://stackoverflow.com/users/3774327/user3774327"}, "is_accepted": false, "score": 1, "last_activity_date": 1535195146, "last_edit_date": 1535195146, "creation_date": 1534943062, "answer_id": 51967573, "question_id": 45132283, "link": "https://stackoverflow.com/questions/45132283/whats-the-most-idiomatic-rust-way-to-modify-an-optional-element-of-a-vec-condit/51967573#51967573", "title": "What&#39;s the most idiomatic Rust way to modify an optional element of a Vec conditionally?", "body": "<p><code>HashMap</code> can be quite concise, if you use other <code>Entry</code> methods, <code>and_modify</code> and <code>or_insert</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut best_pos: HashMap&lt;(usize, usize), f64&gt; = Default::default();\n    let newprice = 60.0;\n\n    best_pos\n        .entry((1, 2))\n        .and_modify(|e| *e = e.min(newprice))\n        .or_insert(newprice);\n}\n</code></pre>\n"}], "owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 472, "favorite_count": 0, "accepted_answer_id": 45132572, "answer_count": 4, "score": 3, "last_activity_date": 1535195146, "creation_date": 1500231476, "last_edit_date": 1500243840, "question_id": 45132283, "link": "https://stackoverflow.com/questions/45132283/whats-the-most-idiomatic-rust-way-to-modify-an-optional-element-of-a-vec-condit", "title": "What&#39;s the most idiomatic Rust way to modify an optional element of a Vec conditionally?", "body": "<p>I'm confused about the best way to write the following very common kind of code:</p>\n\n<pre><code>let old_best = best_by_pos[y][x].as_ref();\nif old_best.is_none() || &amp;new_cost &lt; old_best.unwrap() {\n    best_by_pos[y][x] = Some(new_cost.clone());\n}\n</code></pre>\n\n<p>This is just a code sample, but it illustrates the problem.</p>\n\n<p><code>best_by_pos</code> is a <code>Vec&lt;Vec&lt;Option&lt;BigInt&gt;&gt;&gt;</code>; when we find a new possibility for the best cost at that point, we want to (a) check if the new cost is better than the old cost, and (b) if it is, update the vector.</p>\n\n<p>The problem is that <code>old_best</code> borrows <code>best_by_pos</code> immutably, and that borrow persists until the end of the scope. This prevents the mutation inside the if block. Ideally I'd like to free up <code>old_best</code> immediately after the test but it's not clear how to do that.</p>\n\n<p>There is a very ugly way to do it -- make a deeper scope which does the test and exposes a boolean, then doing a conditional on that. This is functional but unpleasant.</p>\n\n<p>Alternately, I can make a helper method which does the comparison (and frees up its borrows when it terminates), which looks cleaner, but still feels bloated.</p>\n\n<p>Is there a cleaner way to achieve this?</p>\n"}, {"tags": ["compiler-errors", "rust", "lifetime"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1500206939, "post_id": 45128292, "comment_id": 77226462, "body": "I&#39;m pretty sure this question is a duplicate, but I can&#39;t find a good dupe-question right now. In short, the answer to your question is: No, you can&#39;t just do it. Lifetime-annotations are not magic and they can&#39;t actually change lifetimes. The actual lifetimes are completely determined by your function body (and thus one lifetime is too short). <a href=\"https://doc.rust-lang.org/book/first-edition/lifetimes.html\" rel=\"nofollow noreferrer\">The book</a> says: &quot;lifetime annotations are <i>descriptive</i>, not <i>prescriptive</i>&quot;. I don&#39;t know your application, but the solution is to think of another API/function signature."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1500214644, "post_id": 45128292, "comment_id": 77228694, "body": "It is a slight variation of <a href=\"https://stackoverflow.com/q/44643430/2731452\">stackoverflow.com/q/44643430/2731452</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500255083, "post_id": 45128292, "comment_id": 77238986, "body": "<i>another API/function signature</i> \u2014 specifically, you can accept the result of <code>&amp;mut packet_contents[20..]</code> or you can embed the array inside of <code>MutableEchoRequestPacket</code>."}], "owner": {"reputation": 11, "user_id": 8314991, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5852f4d5e58bfc27b3734daaa26500c5?s=128&d=identicon&r=PG&f=1", "display_name": "SlavGradev", "link": "https://stackoverflow.com/users/8314991/slavgradev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 60, "favorite_count": 0, "closed_date": 1500254937, "answer_count": 0, "score": 1, "last_activity_date": 1500206382, "creation_date": 1500206185, "last_edit_date": 1500206382, "question_id": 45128292, "link": "https://stackoverflow.com/questions/45128292/borrowed-value-lifetime-error", "closed_reason": "Duplicate", "title": "Borrowed value lifetime error", "body": "<p>Trying to refactor and cleanup our code we ran into a lifetime compile error. Compiling the following code:</p>\n\n<pre><code>fn create_ping_packet&lt;'a&gt;(sequence_number: u16) -&gt; echo_request::MutableEchoRequestPacket&lt;'a&gt; {\n    let mut packet_contents = [0; 48];\n    let mut ping_packet = echo_request::MutableEchoRequestPacket::new(&amp;mut packet_contents[20..]).unwrap();\n    ping_packet.set_icmp_type(IcmpTypes::EchoRequest);\n    ping_packet.set_icmp_code(echo_request::IcmpCodes::NoCode);\n    ping_packet.set_identifier(902);\n    ping_packet.set_sequence_number(sequence_number);\n    ping_packet.set_payload(b\"Ring ring\");\n    ping_packet\n}\n\nfn main() {\n    // ...\n    let mut sequence_number = 0;\n    loop {\n        let packet = create_ping_packet(sequence_number);\n        // ...\n    }\n}\n</code></pre>\n\n<p>Gives us :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `packet_contents` does not live long enough\n  --&gt; src/main.rs:15:76\n   |\n15 |     let mut ping_packet =     echo_request::MutableEchoRequestPacket::new(&amp;mut     packet_contents[20..]).unwrap();\n   |                                                                                ^^^^^^^^^^^^^^^ does not live long enough\n...\n22 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on     the body at 13:94...\n  --&gt; src/main.rs:13:95\n   |\n13 |   fn create_ping_packet&lt;'a&gt;(sequence_number: u16) -&gt;     echo_request::MutableEchoRequestPacket&lt;'a&gt; {\n   |      __________________________________________________________________________    _____________________^\n14 | |     let mut packet_contents = [0; 48];\n15 | |     let mut ping_packet =         echo_request::MutableEchoRequestPacket::new(&amp;mut             packet_contents[20..]).unwrap();\n16 | |     ping_packet.set_icmp_type(IcmpTypes::EchoRequest);\n...  |\n21 | |     ping_packet\n22 | | }\n   | |_^\n</code></pre>\n\n<p>We understand the problem is that <code>packet_contents</code> is allocated on the stack and goes out of scope at the end of the function. Is there a way to allocate <code>packet_contents</code> inside and give it a lifetime of <code>'a</code>?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1500281093, "post_id": 45126120, "comment_id": 77248134, "body": "Related: <a href=\"https://stackoverflow.com/questions/45033704/why-do-i-get-conflicting-implementations-of-trait-for-f32-which-does-not-imple\" title=\"why do i get conflicting implementations of trait for f32 which does not imple\">stackoverflow.com/questions/45033704/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500198021, "post_id": 45127092, "comment_id": 77224193, "body": "The main point of this question is not about specialization. It is about why <code>&amp;&#39;a String</code> is considered as implemented <code>Into&lt;String&gt;</code> in this context but not in another."}, {"owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500198383, "post_id": 45127092, "comment_id": 77224267, "body": "because of automatic dereferencing"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500198558, "post_id": 45127092, "comment_id": 77224308, "body": "Please explain in your answer, along with your workaround."}, {"owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500199931, "post_id": 45127092, "comment_id": 77224621, "body": "<code>&amp;String</code> can be considered as one which implement <code>Into&lt;String&gt;</code> when you try call <code>into</code> on its instance because of <code>automatic dereferencing</code>. But, in my code <code>&amp;String</code> considered as <code>MyIntoString</code> because of I implemented this trait for <code>&amp;String</code>. In your code it doesn&#39;t work because misusing of <code>specialization</code>."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500200122, "post_id": 45127092, "comment_id": 77224661, "body": "If you read my other question <a href=\"https://stackoverflow.com/questions/45118060/why-doesnt-string-implement-fromstring\" title=\"why doesnt string implement fromstring\">stackoverflow.com/questions/45118060/&hellip;</a>, you know I am actually not able to call <code>into</code> on a <code>&amp;String</code>. So I didn&#39;t understand why it is automatic dereferenced here but not there."}, {"owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500201097, "post_id": 45127092, "comment_id": 77224882, "body": "Code from your previous question doesn&#39;t compiles since compiler dereferenced <code>&amp;s</code>  in type you didn&#39;t expected. To fix that you need to write <code>let st: MyStruct = MyStruct::new(&amp;s as &amp;str);</code>"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500201598, "post_id": 45127092, "comment_id": 77224973, "body": "I didn&#39;t understand. Yes your &quot;fix&quot; works, but only when I introduce a new type <code>&amp;str</code> rather than <code>&amp;String</code>. But I was expected an implementation for <code>&amp;String</code>, not <code>&amp;str</code>. So, if no implementation found for <code>&amp;String</code> why it implements <code>Into&lt;String&gt;</code>?"}, {"owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500204036, "post_id": 45127092, "comment_id": 77225599, "body": "<code>So, if no implementation found for &amp;String why it implements Into&lt;String&gt;</code> -- it doesn&#39;t. It&#39;s not implemented in <code>std</code>. Why? I think because you can convert &amp;String into String with dereferencing, that most natural way to do it."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500206512, "post_id": 45127092, "comment_id": 77226326, "body": "Putting things together, it is weird isn&#39;t it: the compiler think you are able to call <code>into</code> on an <code>&amp;String</code> so it don&#39;t let you implementing &quot;conflicting&quot; implementations. But as soon as you try to call <code>into</code> on <code>&amp;String</code> the compiler said you cannot because you didn&#39;t implement for this."}], "tags": [], "owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "is_accepted": false, "score": 0, "last_activity_date": 1500209299, "last_edit_date": 1500209299, "creation_date": 1500197809, "answer_id": 45127092, "question_id": 45126120, "link": "https://stackoverflow.com/questions/45126120/if-intostring-is-not-implemented-for-string-why-are-these-implementation/45127092#45127092", "title": "If `Into&lt;String&gt;` is not implemented for `&amp;String`, why are these implementations conflicting?", "body": "<p>This code works with specialization</p>\n\n<pre><code>#![feature(specialization)]\n\n#[derive(Debug)]\nstruct MyStruct(String);\n\nimpl MyStruct {\n    fn new&lt;T&gt;(t: T) -&gt; MyStruct\n    where\n        T: MyIntoString,\n    {\n        MyStruct(t.my_into())\n    }\n}\n\ntrait MyIntoString {\n    fn my_into(self) -&gt; String;\n}\n\nimpl&lt;'a&gt; MyIntoString for &amp;'a String {\n    fn my_into(self) -&gt; String {\n        self.clone()\n    }\n}\n\ndefault impl&lt;I&gt; MyIntoString for I \n{\n    default fn my_into(self) -&gt; String {\n        String::from(\"FOO\")\n    }\n}\n\nfn main() {\n    let s: String = \"Hello world!\".into();\n    let st: MyStruct = MyStruct::new(&amp;s);\n    println!(\"{:?}\", st);\n}\n</code></pre>\n\n<p>So, AFAIU, your version can't be specialized since compiler can't decide which version is more <code>specialized</code></p>\n\n<h1>edit</h1>\n\n<p>Why code from previous question doesn't compile?\nBecause when you pass <code>&amp;s</code> to <code>new</code> in</p>\n\n<pre><code>    let st: MyStruct = MyStruct::new(&amp;s);\n</code></pre>\n\n<p>compiler consider <code>&amp;s</code> as <code>&amp;String</code>, and from code in <code>std</code> it see:</p>\n\n<pre><code>impl&lt;T, U&gt; Into&lt;U&gt; for T where U: From&lt;T&gt;\n\nimpl&lt;T, U&gt; Into&lt;U&gt; for T where U: From&lt;T&gt; {\n    fn into(self) -&gt; U {\n        U::from(self)\n    }\n}\n\n// From (and thus Into) is reflexive\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl&lt;T&gt; From&lt;T&gt; for T {\n    fn from(t: T) -&gt; T { t }\n}\n</code></pre>\n\n<p>and since <code>From&lt;&amp;String&gt;</code> is not implemented for <code>String</code> it show compile error. So you must explicitly say that <code>&amp;s</code> is type from which <code>String</code> can be constructed, that is <code>&amp;str</code></p>\n\n<pre><code>    let st: MyStruct = MyStruct::new(&amp;s as &amp;str);\n</code></pre>\n\n<p>and now compiler can see this</p>\n\n<pre><code>impl&lt;'a&gt; From&lt;&amp;'a str&gt; for String\n</code></pre>\n\n<blockquote>\n  <p>The compiler now claim that the two implementation of MyIntoString are > conflicting. This is even weirder to me as we already see in the other > question that From&lt;&amp;String> didn't implement for String and so it\n  didn't find an implementation of Into for &amp;String</p>\n</blockquote>\n\n<p>The error happen just because compiler cannot decide which implementation is more <code>specialized</code> even if you use specialization.</p>\n"}, {"comments": [{"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 1, "creation_date": 1500209518, "post_id": 45128503, "comment_id": 77227163, "body": "This code does the same thing as mine but in a completely different way. This code implements <code>Into&lt;String&gt;</code> on <code>Wrapper&lt;&#39;a&gt; == &amp;&#39;a String</code>, but my code implements <code>MyIntoString</code> on <code>&amp;&#39;a String</code>. Both should be passed the orphan rule."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 2, "creation_date": 1500209975, "post_id": 45128503, "comment_id": 77227290, "body": "No. Blanket implementation of <code>MyIntoString</code> (that is <code>impl&lt;I: Into&lt;String&gt;&gt; MyIntoString for I</code>) combined with <code>impl MyIntoString for &amp;String</code> creates potential for code breakage caused by minor changes in standard library. Newtype variant will not break."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 2, "creation_date": 1500210351, "post_id": 45128503, "comment_id": 77227387, "body": "I don&#39;t see how the orphan rule is relevant, since OP is implementing his own trait <code>MyIntoString</code>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1500211037, "post_id": 45128503, "comment_id": 77227589, "body": "The orphan rules are made to allow for <i>negative reasoning</i> (&quot;trait Y is not implemented for type X&quot;), which is necessary from time to time. But OP&#39;s original problem is that the orphan rules are not strong enough in this case. We cannot apply negative reasoning to assume that <code>From&lt;&amp;String&gt;</code> is not implemented for <code>String</code> (because such an impl can be added by a non-breaking change). But I guess you could explain this without mentioning &quot;orphan rules&quot; at all :/"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1500212177, "post_id": 45128503, "comment_id": 77227917, "body": "@LukasKalbertodt, &quot;orphan rule&quot; is a relevant search term if one wants to explore the topic."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500245257, "post_id": 45128503, "comment_id": 77237306, "body": "I think now I understand what the real problem is. The &quot;conflict&quot; is only potential, but the error message didn&#39;t even include this fact, and so I get confused when the &quot;confilict&quot; was proved that does not exist. So, it is the error message needed to blame."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500252539, "post_id": 45128503, "comment_id": 77238575, "body": "And unfortunately, the solution or workaround in this answer is not better than calling <code>clone()</code> on the usage side. So it is not even a proper &quot;workaround&quot;. But that is what we can get before specification stablised."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500265921, "post_id": 45128503, "comment_id": 77241231, "body": "I adjusted this answer as the document of <code>Into</code> said we should not implement <code>Into</code> directly. Implement <code>From</code> instead."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1500294340, "last_edit_date": 1500294340, "creation_date": 1500207509, "answer_id": 45128503, "question_id": 45126120, "link": "https://stackoverflow.com/questions/45126120/if-intostring-is-not-implemented-for-string-why-are-these-implementation/45128503#45128503", "title": "If `Into&lt;String&gt;` is not implemented for `&amp;String`, why are these implementations conflicting?", "body": "<p>The error is caused by the orphan rules (see The Book second ed. chapter 10.2 at the end of <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html#implementing-a-trait-on-a-type\" rel=\"nofollow noreferrer\">Implementing a trait on a type</a>). </p>\n\n<p>These prevents your code from breaking when there are minor changes (as per <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md\" rel=\"nofollow noreferrer\">RFC#1105</a>) in crates you use. If the authors of the standard library decided to implement <code>Into&lt;String&gt;</code> for <code>&amp;String</code>, then your program would contain a conflicting definition for <code>my_into</code> and would break. The addition of a trait implementation should be a minor change and shouldn't break your program.</p>\n\n<p><a href=\"https://internals.rust-lang.org/t/allow-to-go-around-e-g-the-orphan-rules-for-trait-implementations/4062/5\" rel=\"nofollow noreferrer\">This post</a> provides justification for the rule.</p>\n\n<p>The Book suggests using the <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-03-advanced-traits.html#the-newtype-pattern-to-implement-external-traits-on-external-types\" rel=\"nofollow noreferrer\">newtype pattern</a> to work around this issue.</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyStruct(String);\n\nimpl MyStruct {\n    fn new&lt;T&gt;(t: T) -&gt; MyStruct\n    where\n        T: Into&lt;String&gt;,\n    {\n        MyStruct(t.into())\n    }\n}\n\nstruct Wrapper&lt;'a&gt;(&amp;'a String);\n\nimpl&lt;'a&gt; From&lt;Wrapper&lt;'a&gt;&gt; for String  {\n    fn from(t: Wrapper&lt;'a&gt;) -&gt; String {\n        t.0.clone()\n    }\n}\n\nfn main() {\n    let s: String = \"Hello world!\".into();\n    let st: MyStruct = MyStruct::new(Wrapper(&amp;s));\n    println!(\"{:?}\", st);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9da32e5f300a7bafa650fc10ece658ff&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 408, "favorite_count": 0, "accepted_answer_id": 45128503, "answer_count": 2, "score": 5, "last_activity_date": 1500294544, "creation_date": 1500190009, "last_edit_date": 1500294544, "question_id": 45126120, "link": "https://stackoverflow.com/questions/45126120/if-intostring-is-not-implemented-for-string-why-are-these-implementation", "title": "If `Into&lt;String&gt;` is not implemented for `&amp;String`, why are these implementations conflicting?", "body": "<p>I asked a <a href=\"https://stackoverflow.com/questions/45118060/why-doesnt-string-implement-fromstring\">relevant question</a> about why there is no implementation of <code>From&lt;&amp;String&gt;</code> for <code>String</code>. I now want to create my own trait as the following:</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyStruct(String);\n\nimpl MyStruct {\n    fn new&lt;T&gt;(t: T) -&gt; MyStruct\n    where\n        T: MyIntoString,\n    {\n        MyStruct(t.my_into())\n    }\n}\n\ntrait MyIntoString {\n    fn my_into(self) -&gt; String;\n}\n\nimpl&lt;'a&gt; MyIntoString for &amp;'a String {\n    fn my_into(self) -&gt; String {\n        self.clone()\n    }\n}\n\nimpl&lt;I&gt; MyIntoString for I\nwhere\n    I: Into&lt;String&gt;,\n{\n    fn my_into(self) -&gt; String {\n        self.into()\n    }\n}\n\nfn main() {\n    let s: String = \"Hello world!\".into();\n    let st: MyStruct = MyStruct::new(&amp;s);\n    println!(\"{:?}\", st);\n}\n</code></pre>\n\n<p>The compiler now claims that the two implementations of <code>MyIntoString</code> are conflicting. This is even weirder to me as we already see in the other question that <code>From&lt;&amp;String&gt;</code> didn't implement for <code>String</code> and so it didn't find an implementation of <code>Into&lt;String&gt;</code> for <code>&amp;String</code>. So how come this is conflicting now?</p>\n\n<p>Furthermore, even when I turned on <code>#![feature(specialization)]</code>, the same conflict was detected. </p>\n\n<p><strong>The error message</strong></p>\n\n<p>According to one answer of this question, it looks like the error message didn't guide me to the right track.</p>\n\n<p>So let me post the error message to blame, as it may changed in the future.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `MyIntoString` for type `&amp;std::string::String`:\n  --&gt; src/main.rs:23:1\n   |\n17 | / impl&lt;'a&gt; MyIntoString for &amp;'a String {\n18 | |     fn my_into(self) -&gt; String {\n19 | |         self.clone()\n20 | |     }\n21 | | }\n   | |_- first implementation here\n22 |   \n23 | / impl&lt;I&gt; MyIntoString for I\n24 | | where\n25 | |     I: Into&lt;String&gt;,\n26 | | {\n...  |\n29 | |     }\n30 | | }\n   | |_^ conflicting implementation for `&amp;std::string::String`\n</code></pre>\n\n<p>To me, this is a claim by the compiler that there is a REAL conflict, not a potential one.</p>\n"}, {"tags": ["while-loop", "rust", "iteration", "chars"], "comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1500150562, "post_id": 45122446, "comment_id": 77215785, "body": "<code>Chars&lt;&gt;</code> is an iterator, not a collection, so you can&#39;t index into it that way anyway."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1500150971, "post_id": 45122446, "comment_id": 77215895, "body": "Just use <code>continue</code> when you want to skip a char..."}, {"owner": {"reputation": 1004, "user_id": 4901806, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Cy6qw.jpg?s=128&g=1", "display_name": "duck", "link": "https://stackoverflow.com/users/4901806/duck"}, "edited": false, "score": 0, "creation_date": 1500151014, "post_id": 45122446, "comment_id": 77215907, "body": "I have indeed noticed this, this is however a quick piece of code i came up with to illustrate the type of behavior i am looking for."}], "answers": [{"comments": [{"owner": {"reputation": 778, "user_id": 1391648, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0ba57886380485febe3117271f21b582?s=128&d=identicon&r=PG", "display_name": "hddh", "link": "https://stackoverflow.com/users/1391648/hddh"}, "edited": false, "score": 0, "creation_date": 1562145317, "post_id": 45122528, "comment_id": 100282351, "body": "Based on my interpretation of <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/str/struct.Chars.html</a>, the Chars iterator is already fused. According to the documentation, calling fused() on an already fused operator has no effect and results no performance penalty. Was your use of &quot;.fuse()&quot; intentional? Maybe that aspect of the library has been updated since 15/07/17."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 778, "user_id": 1391648, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0ba57886380485febe3117271f21b582?s=128&d=identicon&r=PG", "display_name": "hddh", "link": "https://stackoverflow.com/users/1391648/hddh"}, "edited": false, "score": 0, "creation_date": 1562154809, "post_id": 45122528, "comment_id": 100287605, "body": "@hddh you&#39;ve basically answered your own question: <i>calling <code>fused()</code> on an already fused operator has no effect and results no performance penalty</i>. Always call <code>fuse</code> when you need the ability to call <code>next</code> after the iterator returns <code>None</code> once."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1500153964, "last_edit_date": 1500153964, "creation_date": 1500151024, "answer_id": 45122528, "question_id": 45122446, "link": "https://stackoverflow.com/questions/45122446/how-do-i-iterate-over-a-list-of-chars-while-still-being-able-to-skip-in-the-iter/45122528#45122528", "title": "How do I iterate over a list of chars while still being able to skip in the iteration?", "body": "<p>It's better to iterate over something instead of using an index:</p>\n\n<pre><code>let mut chars = \"gravy train\".chars().fuse();\n\nwhile let Some(c) = chars.next() {\n    if c == 'x' {\n        chars.next(); // Skip the next one\n    }\n}\n</code></pre>\n\n<p>We <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fuse\" rel=\"noreferrer\"><code>fuse</code></a> the iterator to avoid any issues with calling <code>next</code> after the first <code>None</code> is returned.</p>\n\n<hr>\n\n<p>Your code has a number of issues:</p>\n\n<ol>\n<li><p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count\" rel=\"noreferrer\"><code>Iterator::count</code></a> consumes the iterator. Once you've called that, the iterator is <strong>gone</strong>. That's the cause of your error. An alternate solution is to use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref\" rel=\"noreferrer\"><code>Iterator::by_ref</code></a> so that consuming the iterator you count isn't the end of the line.</p></li>\n<li><p><code>chars</code> is of type <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html\" rel=\"noreferrer\"><code>Chars</code></a>, which does not support indexing. <code>chars[lex_index]</code> is nonsensical.</p></li>\n<li><p>You cannot compare a <code>char</code> to a string, so <code>chars[lex_index] == \"something\"</code> wouldn't compile either. It's possible you could use <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html#method.as_str\" rel=\"noreferrer\"><code>Chars::as_str</code></a>, but then you'd have to give up <code>Fuse</code> and deal with that yourself.</p></li>\n</ol>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1500166242, "creation_date": 1500166242, "answer_id": 45124000, "question_id": 45122446, "link": "https://stackoverflow.com/questions/45122446/how-do-i-iterate-over-a-list-of-chars-while-still-being-able-to-skip-in-the-iter/45124000#45124000", "title": "How do I iterate over a list of chars while still being able to skip in the iteration?", "body": "<p>You can use the <a href=\"https://docs.rs/strcursor/0.2.5/strcursor/index.html\" rel=\"nofollow noreferrer\"><code>strcursor</code></a> crate for this:</p>\n\n<pre><code>extern crate strcursor;\n\nfn main() {\n    use strcursor::StrCursor;\n    let expr = r\"abc\\xdef\";\n    let mut cur = StrCursor::new_at_start(expr);\n\n    // `after`: the next grapheme cluster\n    while let Some(gc) = cur.after() {\n        if gc == \"\\\\\" {\n            // Move right two grapheme clusters.\n            cur.seek_next();\n            cur.seek_next();\n        } else {\n            print!(\"{}\", gc);\n            cur.seek_next();\n        }\n    }\n    println!(\"\");\n}\n\n// Output: `abcdef`\n</code></pre>\n"}], "owner": {"reputation": 1004, "user_id": 4901806, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Cy6qw.jpg?s=128&g=1", "display_name": "duck", "link": "https://stackoverflow.com/users/4901806/duck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1844, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1500166242, "creation_date": 1500150353, "last_edit_date": 1500150773, "question_id": 45122446, "link": "https://stackoverflow.com/questions/45122446/how-do-i-iterate-over-a-list-of-chars-while-still-being-able-to-skip-in-the-iter", "title": "How do I iterate over a list of chars while still being able to skip in the iteration?", "body": "<p>I have the following piece of code:</p>\n\n<pre><code>let mut lex_index = 0;\nlet chars = expression.chars();\nwhile lex_index &lt; chars.count() {\n    if(chars[lex_index] == \"something\") {\n        lex_index += 2;\n    } else {\n        lex_index += 1;\n    }\n}\n</code></pre>\n\n<p>I use a <code>while</code> loop here since I sometimes need to skip a char in <code>chars</code>.\nHowever, this gives me the following error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `chars`\n  --&gt; src/main.rs:23:15\n   |\n23 |     while i &lt; chars.count() {\n   |               ^^^^^ value moved here in previous iteration of loop\n   |\n   = note: move occurs because `chars` has type `std::str::Chars&lt;'_&gt;`, which does not implement the `Copy` trait\n</code></pre>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500134931, "post_id": 45120191, "comment_id": 77211185, "body": "I&#39;d suggest moving this answer to (one of) the linked duplicates."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1500134911, "last_edit_date": 1500134911, "creation_date": 1500134820, "answer_id": 45120191, "question_id": 45120080, "link": "https://stackoverflow.com/questions/45120080/how-to-initialize-a-vec-of-very-large-arrays/45120191#45120191", "title": "How to initialize a Vec of very large arrays?", "body": "<p>You could do it in a dedicated thread with a greater stack size:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    const N: usize = 10000000;\n\n    let builder = thread::Builder::new().name(\"reductor\".into()).stack_size(\n        1024 * 1024 *\n            1024,\n    );\n\n    let handler = builder\n        .spawn(|| {\n            let mut v = Vec::&lt;[usize; N]&gt;::with_capacity(10);\n            v.push([0; N]);\n\n            println!(\"{:?}\", v[0][0]);\n        })\n        .unwrap();\n\n    handler.join().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 374, "favorite_count": 0, "closed_date": 1500134839, "answer_count": 1, "score": 0, "last_activity_date": 1500134911, "creation_date": 1500134105, "last_edit_date": 1500134671, "question_id": 45120080, "link": "https://stackoverflow.com/questions/45120080/how-to-initialize-a-vec-of-very-large-arrays", "closed_reason": "Duplicate", "title": "How to initialize a Vec of very large arrays?", "body": "<p>I need to create a huge NxN array. Simple arrays are created on the stack, so no success there. Static arrays have to be <code>const</code> or <code>unsafe mut</code>, so that's a no.</p>\n\n<p>I tried <code>Box</code>ing that array:</p>\n\n<pre><code>const N: usize = 1000000;\nlet mut boxed: Box&lt;[usize; N]&gt; = Box::new([0; N]);\nboxed[1] = 1;\n</code></pre>\n\n<p>But that overflows the stack anyway, presumably, because it creates a temporary array that is then copied into a <code>Box</code>.</p>\n\n<p>I tried a <code>Vec</code> of arrays:</p>\n\n<pre><code>const N: usize = 1000000;\nlet mut v = Vec::&lt;[usize; N]&gt;::with_capacity(10);\n\nv.push([0; N]);\n</code></pre>\n\n<p>with the same result. As far as I understand <code>with_capacity</code> only allocates memory; since Rust has no constructors, I still have to push (i.e.) copy something into that memory.</p>\n\n<p>So, what is the proper way of doing that without going nightly for placement new?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "edited": false, "score": 0, "creation_date": 1500134673, "post_id": 45120043, "comment_id": 77211105, "body": "Why not use <code>Box&lt;[T]&gt;</code> like <code>struct Node&lt;K, V&gt;(u64, Box&lt;[Node&lt;K, V&gt;]&gt;)</code> in this case? The data layout seems almost the same except for the maximum length of the array and the order of the fields."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500135175, "post_id": 45120043, "comment_id": 77211269, "body": "No, you cannot generate new identifiers (<code>Node1</code>, <code>Node2</code>, ...) in a macro."}], "owner": {"reputation": 118, "user_id": 2471220, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9b62144aad1b5a344bcd88715444fb8?s=128&d=identicon&r=PG", "display_name": "saik0", "link": "https://stackoverflow.com/users/2471220/saik0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 64, "favorite_count": 0, "closed_date": 1500135156, "answer_count": 0, "score": 0, "last_activity_date": 1500135553, "creation_date": 1500133791, "last_edit_date": 1500135553, "question_id": 45120043, "link": "https://stackoverflow.com/questions/45120043/is-it-possible-to-write-a-macro-to-generate-n-enum-variants-based-on-a-common-na", "closed_reason": "Duplicate", "title": "Is it possible to write a macro to generate N enum variants based on a common name?", "body": "<p>I'd like to write a macro with the shape:</p>\n\n<pre><code>macro_rules! build {\n    ($name:ident, $mask:ty, $end:expr)  =&gt; {\n        enum $name&lt;K, V {\n            //???\n        }\n    };\n}\n</code></pre>\n\n<p>Such that when invoked with:</p>\n\n<pre><code>build! {\n    Node, u64, 64\n}\n</code></pre>\n\n<p>It expands to:</p>\n\n<pre><code>enum Node&lt;K, V&gt; {\n    Node1(u64, Box&lt;[Node&lt;K, V&gt;; 1]&gt;),\n    Node2(u64, Box&lt;[Node&lt;K, V&gt;; 2]&gt;),\n    // ...\n    Node64(u64, Box&lt;[Node&lt;K, V&gt;; 64]&gt;),\n}\n</code></pre>\n\n<p>Is this possible with <code>macro_rules</code>?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1500121338, "post_id": 45118060, "comment_id": 77207263, "body": "I wouldn&#39;t say it is anti-intuitive - other objects don&#39;t do it either, e.g. <code>Vec&lt;T&gt;</code> doesn&#39;t <code>impl From&lt;&amp;Vec&lt;T&gt;&gt;</code>; also <code>impl&lt;&#39;a&gt; From&lt;&amp;&#39;a str&gt;</code> is much a more probable use case and it&#39;s readily available."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1500192342, "post_id": 45118060, "comment_id": 77222843, "body": "I feel that the real answer have something to do with my relevent question <a href=\"https://stackoverflow.com/questions/45126120/if-intostring-not-implemented-for-string-why-these-implementations-are-co\" title=\"if intostring not implemented for string why these implementations are co\">stackoverflow.com/questions/45126120/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1500284719, "last_edit_date": 1500284719, "creation_date": 1500210442, "answer_id": 45128943, "question_id": 45118060, "link": "https://stackoverflow.com/questions/45118060/why-doesnt-string-implement-fromstring/45128943#45128943", "title": "Why doesn&#39;t String implement From&lt;&amp;String&gt;?", "body": "<p>To solve your problem, one could imagine adding a new generic impl to the standard library:</p>\n\n<pre><code>impl&lt;'a, T: Clone&gt; From&lt;&amp;'a T&gt; for T { ... }\n</code></pre>\n\n<p>Or to make it more generic:</p>\n\n<pre><code>impl&lt;B, O&gt; From&lt;B&gt; for O where B: ToOwned&lt;Owned=O&gt; { ... }\n</code></pre>\n\n<hr>\n\n<p>However, there are two problems with doing that:</p>\n\n<ol>\n<li><p><strong>Specialization</strong>: the specialization feature that allows to overlapping trait-impls is still unstable. It turns out that designing specialization in a sound way is way <a href=\"https://aturon.github.io/blog/2017/07/08/lifetime-dispatch/\" rel=\"nofollow noreferrer\">more difficult than expected</a> (mostly due to lifetimes).</p>\n\n<p>Without it being stable, the Rust devs are very careful not to expose that feature somewhere in the standard library's public API. This doesn't mean that it isn't used at all in std! A famous example is the specialized <code>ToString</code> impl for <code>str</code>. It was introduced <a href=\"https://github.com/rust-lang/rust/pull/32586\" rel=\"nofollow noreferrer\">in this PR</a>. As you can read in the PR's discussion, they only accepted it because it does not change the API (<code>to_string()</code> was already implemented for <code>str</code>).</p>\n\n<p>However, it's different when we would add the generic impl above: it would change the API. Thus, it's not allowed in std yet.</p></li>\n<li><p><strong><code>core</code> vs <code>std</code></strong>: the traits <code>From</code> and <code>Into</code> are defined in the \n<a href=\"https://doc.rust-lang.org/stable/core/\" rel=\"nofollow noreferrer\"><code>core</code> library</a>, whereas <code>Clone</code> and <code>ToOwned</code> are defined in <code>std</code>. This means that we can't add a generic impl in <code>core</code>, because <code>core</code> doesn't know anything about <code>std</code>. But we also can't add the generic impl in <code>std</code>, because generic impls need to be in the same crate as the trait (it's a consequence of the orphan rules).</p>\n\n<p>Thus, it would required some form of refactoring and moving around definitions (which may or may not be difficult) before able to add such a generic impl.</p></li>\n</ol>\n\n<hr>\n\n<p>Note that adding</p>\n\n<pre><code>impl&lt;'a&gt; From&lt;&amp;'a String&gt; for String { ... }\n</code></pre>\n\n<p>... works just fine. It doesn't require specialization and doesn't have problems with orphan rules. But of course, we wouldn't want to add a specific impl, when the generic impl would make sense.</p>\n\n<p>(<em>thanks to the lovely people on IRC for explaining stuff to me</em>)</p>\n"}, {"tags": [], "owner": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "is_accepted": false, "score": 1, "last_activity_date": 1542572378, "last_edit_date": 1542572378, "creation_date": 1542572063, "answer_id": 53365009, "question_id": 45118060, "link": "https://stackoverflow.com/questions/45118060/why-doesnt-string-implement-fromstring/53365009#53365009", "title": "Why doesn&#39;t String implement From&lt;&amp;String&gt;?", "body": "<p>Since <code>String</code> does implement <code>From&lt;&amp;str&gt;</code>, you can make a simple change:</p>\n\n<pre><code>fn main() {\n    let s: String = \"Hello world!\".into();\n    // Replace &amp;s with s.as_str()\n    let st: MyStruct = MyStruct::new(s.as_str());\n    println!(\"{:?}\", st);\n}\n</code></pre>\n\n<p>All <code>&amp;String</code>s can be trivially converted into <code>&amp;str</code> via <code>as_str</code>, which is why all APIs should prefer to use <code>&amp;str</code>; it's a strict superset of accepting <code>&amp;String</code>.</p>\n"}], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 228, "favorite_count": 0, "accepted_answer_id": 45128943, "answer_count": 2, "score": 3, "last_activity_date": 1542572378, "creation_date": 1500120702, "last_edit_date": 1500270659, "question_id": 45118060, "link": "https://stackoverflow.com/questions/45118060/why-doesnt-string-implement-fromstring", "title": "Why doesn&#39;t String implement From&lt;&amp;String&gt;?", "body": "<p><strong>Background</strong></p>\n\n<p>I know that in Rust people prefer <code>&amp;str</code> rather than <code>&amp;String</code>. But in some case we were only given <code>&amp;String</code>.</p>\n\n<p>One example is when you call <code>std::iter::Iterator::peekable</code>. The return value is a <code>Peekable&lt;I&gt;</code> object that wraps the original iterator into it and gives you one extra method <code>peek</code>.</p>\n\n<p>The point here is that <code>peek</code> only gives you a reference to the iterator item. So if you have an iterator that contains <code>String</code>s, you only have <code>&amp;String</code> in this case. Of cause, you can easily use <code>as_str</code> to get a <code>&amp;str</code> but in the code I will show below it is equivalent to a call to <code>clone</code>.</p>\n\n<p><strong>The question</strong></p>\n\n<p>This code</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyStruct(String);\n\nimpl MyStruct {\n    fn new&lt;T&gt;(t: T) -&gt; MyStruct\n    where\n        T: Into&lt;String&gt;,\n    {\n        MyStruct(t.into())\n    }\n}\n\nfn main() {\n    let s: String = \"Hello world!\".into();\n    let st: MyStruct = MyStruct::new(&amp;s);\n    println!(\"{:?}\", st);\n}\n</code></pre>\n\n<p>doesn't compile because <code>String</code> doesn't implement <code>From&lt;&amp;String&gt;</code>. This is not intuitive.</p>\n\n<p>Why does this not work? Is it just a missing feature of the standard library or there are some other reasons that prevent the standard library from implementing it?</p>\n\n<p>In the real code, I only have a reference to a <code>String</code> and I know to make it work I only need to call <code>clone</code> instead, but I want to know why.</p>\n"}, {"tags": ["generics", "rust", "traits", "dynamic-dispatch", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 613, "user_id": 5887173, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/79b38d81d1940702368a33e011783c81?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander", "link": "https://stackoverflow.com/users/5887173/alexander"}, "edited": false, "score": 2, "creation_date": 1500122544, "post_id": 45117062, "comment_id": 77207560, "body": "I don&#39;t like such kind of variant because then I can&#39;t substitute T with another instance later."}], "tags": [], "owner": {"reputation": 1693, "user_id": 1031979, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/GnZfS.jpg?s=128&g=1", "display_name": "Zernike", "link": "https://stackoverflow.com/users/1031979/zernike"}, "is_accepted": false, "score": 11, "last_activity_date": 1537297247, "last_edit_date": 1537297247, "creation_date": 1500113928, "answer_id": 45117062, "question_id": 45116984, "link": "https://stackoverflow.com/questions/45116984/the-trait-cannot-be-made-into-an-object/45117062#45117062", "title": "The trait cannot be made into an object", "body": "<pre><code>pub struct MyStruct&lt;T&gt;\nwhere\n    T: MyTrait,\n{\n    my_trait: T,\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pub struct MyStruct&lt;T: MyTrait&gt; {\n    my_trait: T,\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html#trait-bounds\" rel=\"noreferrer\">https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html#trait-bounds</a></p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 30, "last_activity_date": 1556379635, "last_edit_date": 1556379635, "creation_date": 1500122916, "answer_id": 45118378, "question_id": 45116984, "link": "https://stackoverflow.com/questions/45116984/the-trait-cannot-be-made-into-an-object/45118378#45118378", "title": "The trait cannot be made into an object", "body": "<p>You can either add a type parameter to your struct, as in <a href=\"https://stackoverflow.com/a/45117062/155423\">Zernike's answer</a>, or use a trait object. </p>\n\n<p>Using the type parameter is better for performance because each value of <code>T</code> will create a specialized copy of the struct, which allows for static dispatch. A trait object uses dynamic dispatch so it lets you swap the concrete type at runtime.</p>\n\n<p>The trait object approach looks like this:</p>\n\n<pre><code>pub struct MyStruct&lt;'a&gt; {\n    my_trait: &amp;'a dyn MyTrait,\n}\n</code></pre>\n\n<p>Or this:</p>\n\n<pre><code>pub struct MyStruct {\n    my_trait: Box&lt;dyn MyTrait&gt;,\n}\n</code></pre>\n\n<p>However, in your case, <code>MyStruct</code> cannot be made into an object because <code>receive</code> is a static method. You'd need to change it to take <code>&amp;self</code> or <code>&amp;mut self</code> as its first argument for this to work. There are also <a href=\"https://huonw.github.io/blog/2015/01/object-safety/\" rel=\"noreferrer\">other restrictions</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537296986, "post_id": 52392917, "comment_id": 91731034, "body": "<a href=\"https://stackoverflow.com/q/25740916/155423\">How do you actually use dynamically sized types in Rust?</a>."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537297144, "post_id": 52392917, "comment_id": 91731105, "body": "@Shepmaster I know how use unsized types. But I cannot find a way to instantiate this particular type. I know how to work with types like <code>struct Foo(str)</code> but I couldn&#39;t find a way to work with this one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537297382, "post_id": 52392917, "comment_id": 91731210, "body": "I agree that you can&#39;t do it at the moment. The link is for when someone stumbles on this answer in X months, whenever it is possible to use DSTs more easily. That Q&amp;A will be updated with new information; it&#39;s unlikely that this one will."}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 0, "last_activity_date": 1556382037, "last_edit_date": 1556382037, "creation_date": 1537296729, "answer_id": 52392917, "question_id": 45116984, "link": "https://stackoverflow.com/questions/45116984/the-trait-cannot-be-made-into-an-object/52392917#52392917", "title": "The trait cannot be made into an object", "body": "<p>There is a fourth option available, but this will make your struct unsized, a.k.a. you will not be able to create instances of this struct.</p>\n\n<pre><code>pub trait MyTrait {}\n\npub struct MyStruct {\n    my_trait: dyn MyTrait + 'static,\n}\n</code></pre>\n\n<p>This means that <code>MyStruct</code> is an unsized type, and you cannot create direct instances of such type. As Rust currently does not have a way to allocate structs directly on the stack, I do not know if you can create an instance of such a type at all. But hey, <a href=\"https://play.rust-lang.org/?gist=8821a58844fb20580c5498b73bcb8048&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">it compiles</a>.</p>\n"}], "owner": {"reputation": 613, "user_id": 5887173, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/79b38d81d1940702368a33e011783c81?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander", "link": "https://stackoverflow.com/users/5887173/alexander"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 25573, "favorite_count": 6, "accepted_answer_id": 45118378, "answer_count": 3, "score": 30, "last_activity_date": 1556382037, "creation_date": 1500113374, "last_edit_date": 1556379665, "question_id": 45116984, "link": "https://stackoverflow.com/questions/45116984/the-trait-cannot-be-made-into-an-object", "title": "The trait cannot be made into an object", "body": "<p>I have the following code:</p>\n\n<pre><code>extern crate futures; // 0.1.24\n\nuse futures::Future;\nuse std::io;\n\nstruct Context;\n\npub trait MyTrait {\n    fn receive(context: Context) -&gt; Future&lt;Item = (), Error = io::Error&gt;;\n}\n\npub struct MyStruct {\n    my_trait: MyTrait,\n}\n</code></pre>\n\n<p>When I try to compile it I get the error message: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `MyTrait` cannot be made into an object\n  --&gt; src/lib.rs:13:5\n   |\n13 |     my_trait: MyTrait,\n   |     ^^^^^^^^^^^^^^^^^ the trait `MyTrait` cannot be made into an object\n   |\n   = note: method `receive` has no receiver\n</code></pre>\n\n<p>I think I know why it happens, but how do I refer to the trait from the struct? Is it possible? Maybe there are other ways to implement the same behavior?</p>\n"}, {"tags": ["macros", "rust", "rust-macros"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1500110070, "last_edit_date": 1500110070, "creation_date": 1500103013, "answer_id": 45115585, "question_id": 45115433, "link": "https://stackoverflow.com/questions/45115433/match-an-underscore-instead-of-ident-in-macro/45115585#45115585", "title": "Match an underscore instead of ident in macro", "body": "<p>The simplest way is to add a second arm that matches an underscore:</p>\n\n<pre><code>macro_rules! if_some {\n    ($x:expr, _, $expr:expr) =&gt; {\n        match $x {\n            None =&gt; None,\n            Some(_) =&gt; Some($expr),\n        }\n    };\n\n    ($x:expr, $id:ident, $expr:expr) =&gt; {\n        match $x {\n            None =&gt; None,\n            Some($id) =&gt; Some($expr),\n        }\n    };\n}\n</code></pre>\n\n<p>And, yes, this sounds like you just want <code>Option::map</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 2645, "user_id": 5254193, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-PTHapBqhSQM/AAAAAAAAAAI/AAAAAAAABA4/r5mrExVuDgU/photo.jpg?sz=128", "display_name": "Masaki Hara", "link": "https://stackoverflow.com/users/5254193/masaki-hara"}, "is_accepted": true, "score": 3, "last_activity_date": 1500138883, "creation_date": 1500138883, "answer_id": 45120834, "question_id": 45115433, "link": "https://stackoverflow.com/questions/45115433/match-an-underscore-instead-of-ident-in-macro/45120834#45120834", "title": "Match an underscore instead of ident in macro", "body": "<p><code>Option::map</code> seems to be the best solution for this particular problem, but when you really need a macro which expect both idents and <code>_</code> as a pattern, you can also use the <code>$p:pat</code> fragment. The fragment of course accepts a broader range of patterns like <code>(ref x, y)</code>, but typically this will be acceptable.</p>\n\n<pre><code>macro_rules! if_some {\n    ($x:expr, $p:pat, $expr:expr) =&gt; {\n        match $x {\n            None =&gt; None,\n            Some($p) =&gt; Some($expr),\n        }\n    };\n}\n\nfn main() {\n    println!(\"{:?}\", if_some!(Some(12), x, x + 1)); // Some(13)\n    println!(\"{:?}\", if_some!(Some(12), _, 1)); // Some(1)\n}\n</code></pre>\n"}], "owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 364, "favorite_count": 0, "accepted_answer_id": 45120834, "answer_count": 2, "score": 1, "last_activity_date": 1500138883, "creation_date": 1500101968, "last_edit_date": 1500126141, "question_id": 45115433, "link": "https://stackoverflow.com/questions/45115433/match-an-underscore-instead-of-ident-in-macro", "title": "Match an underscore instead of ident in macro", "body": "<p>I'm creating a macro that matches two expressions and an identifier. I would like to be able to ignore the identifier if it's not needed, but the compiler seems to complain if I use <code>_</code> there.</p>\n\n<p>My macro:</p>\n\n<pre><code>macro_rules! if_some {\n    ($x:expr, $id:ident, $expr:expr) =&gt; {\n        match $x {\n            None =&gt; None,\n            Some($id) =&gt; Some($expr),\n        }\n    };\n}\n</code></pre>\n\n<p>What I'd like to do:</p>\n\n<pre><code>if_some!(obtain_an_option(), x, do_something_with(x))\n</code></pre>\n\n<p>and</p>\n\n<pre><code>if_some!(obtain_an_option(), _, do_something())\n</code></pre>\n\n<p>The second call fails.</p>\n\n<p>I worked around it by defining a second macro <code>if_some_!</code> that doesn't receive an identifier (I could not use a second pattern either). I'm sure there's a way to say \"here accept an identifier or just <code>_</code>.</p>\n\n<p>Maybe there's already a macro/function for this (like <code>Option::map</code> now I think about it)... nevertheless it'd be nice to now.</p>\n"}, {"tags": ["macros", "rust", "dereference"], "answers": [{"comments": [{"owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "edited": false, "score": 0, "creation_date": 1500092089, "post_id": 45114365, "comment_id": 77199985, "body": "&gt;&gt; As expected, the i32 type implements Display, which is what allows your  case #1 and case #2 to work. Because they are getting a standard i32  value, not a reference, it all works.&lt;&lt; Do you mean case #2 and #3? Case #1 is a reference"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "edited": false, "score": 0, "creation_date": 1500092201, "post_id": 45114365, "comment_id": 77200005, "body": "Sorry 100% typoed the case numbers."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 3, "last_activity_date": 1500092187, "last_edit_date": 1500092187, "creation_date": 1500091732, "answer_id": 45114365, "question_id": 45114172, "link": "https://stackoverflow.com/questions/45114172/how-does-rusts-println-macro-perform-dereferencing/45114365#45114365", "title": "How Does Rust&#39;s println! macro perform dereferencing?", "body": "<p>The important thing here is that using <code>{}</code> in the format string invokes the <code>Display</code> trait on the value passed.</p>\n\n<p>As expected, <a href=\"https://doc.rust-lang.org/std/primitive.i32.html\" rel=\"nofollow noreferrer\">the i32 type</a> implements <code>Display</code>, which is what allows your case #2 and case #3 to work. Because they are getting a standard <code>i32</code> value, not a reference, it all works.</p>\n\n<p>For your case #1, <code>x</code> would be an <code>&amp;i32</code>, which seems to be the core of your question. The answer there is in <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html#implementors\" rel=\"nofollow noreferrer\">the <code>Display</code> trait</a>. Display contains the following:</p>\n\n<pre><code>impl&lt;'a, T&gt; Display for &amp;'a T \nwhere\n    T: Display + ?Sized\n</code></pre>\n\n<p>which says \"for the reference type of <code>T</code>, implement <code>Display</code> if <code>T</code> implements <code>Display</code>\". This means that because <code>i32</code> implements <code>Display</code>, the reference type also implements it automatically.</p>\n\n<p>There is no special type handling being done by the compiler here. The compiler-implemented code passes on that responsibility to the <code>Display</code> trait's implementation.</p>\n"}], "owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 484, "favorite_count": 1, "closed_date": 1500125269, "accepted_answer_id": 45114365, "answer_count": 1, "score": 0, "last_activity_date": 1500126482, "creation_date": 1500089244, "last_edit_date": 1500126482, "question_id": 45114172, "link": "https://stackoverflow.com/questions/45114172/how-does-rusts-println-macro-perform-dereferencing", "closed_reason": "Duplicate", "title": "How Does Rust&#39;s println! macro perform dereferencing?", "body": "<p>The <code>println!</code> macro handles both values and references without requiring explicit dereferencing.</p>\n\n<p>First, create a vector</p>\n\n<pre><code>let v = vec![0, 2, 3, -4];\n</code></pre>\n\n<ol>\n<li><p>Printing references from <code>vec.iter</code></p>\n\n<pre><code>for x in v.iter() {\n    println!(\"x: {}\", x);\n}\n</code></pre></li>\n<li><p>Printing dereferenced elements from <code>vec.iter</code></p>\n\n<pre><code>for x in v.iter() {\n    println!(\"x: {}\", *x);\n}\n</code></pre></li>\n<li><p>Printing values from <code>vec</code></p>\n\n<pre><code>for x in v {\n    println!(\"x: {}\", x);\n}\n</code></pre></li>\n</ol>\n\n<p>How is the internal dereferencing in Case 1 done?</p>\n\n<p>I know internally <code>println!</code> makes another macro call but the last macro in the chain <code>format_args!</code> is implemented at the compiler level and I have no view into it.</p>\n\n<pre><code>macro_rules! println {\n    ($fmt:expr) =&gt; (print!(concat!($fmt, \"\\n\")));\n    ($fmt:expr, $($arg:tt)*) =&gt; (print!(concat!($fmt, \"\\n\"), $($arg)*));\n}\n\nmacro_rules! print {\n    ($($arg:tt)*) =&gt; ($crate::io::_print(format_args!($($arg)*)));\n}\n\nmacro_rules! format_args {\n    ($fmt:expr, $($args:tt)*) =&gt; ({ /* compiler built-in */ })\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/1.6.0/src/std/macros.rs.html#118-121\" rel=\"nofollow noreferrer\">Source code Reference</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 677, "user_id": 1865521, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0507b7d11d629274263fb5ad3d1b5f31?s=128&d=identicon&r=PG", "display_name": "david king", "link": "https://stackoverflow.com/users/1865521/david-king"}, "edited": false, "score": 0, "creation_date": 1500073865, "post_id": 45112589, "comment_id": 77197080, "body": "C doesn&#39;t support runtime extension of union types either, so I don&#39;t think the problem here is really rust-specific. But if it&#39;s allocation you&#39;re trying to avoid, look at e.g. <a href=\"https://doc.rust-lang.org/nomicon/exotic-sizes.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/exotic-sizes.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1500074882, "last_edit_date": 1500074882, "creation_date": 1500073786, "answer_id": 45112773, "question_id": 45112589, "link": "https://stackoverflow.com/questions/45112589/tagged-unions-with-runtime-defined-members/45112773#45112773", "title": "Tagged unions with runtime defined members", "body": "<p>It sounds like you want something like</p>\n\n<pre><code>enum Object {\n    Nil,\n    Int(i32),\n    Runtime(TypeId, RuntimeType),\n}\n</code></pre>\n\n<p>You could ensure that <code>RuntimeType</code> contains only a pointer or choose to box it immediately (<code>Runtime(TypeId, Box&lt;RuntimeType&gt;),</code>), but have the same end result.</p>\n\n<p>If it contains a <code>Box</code>, this struct takes up 24 bytes on a 64-bit machine. Unfortunately, there's no way I'm aware of to inform the compiler that the <code>TypeId</code> and the enum's discriminant should inhabit the same location. You could instead choose to move the <code>TypeId</code> into the <code>Box&lt;RuntimeType&gt;</code> if your measurements show that the dereference is less bad than the extra stack size. This is all very malleable depending on what other types you embed directly into the enum. For example, a <code>Vec</code> is 3-pointers worth of stack space. If that were included, you could get away with inlining more values.</p>\n\n<p>The trick becomes: what is <code>RuntimeType</code>? You haven't described the problem enough for me to guess. It could be a concrete type, or it might end up being a boxed trait object.</p>\n\n<p>A slightly more complete example:</p>\n\n<pre><code>struct RuntimeType;\ntype TypeId = u64;\n\nenum Object {\n    Nil,\n    Int(i32),\n    Runtime(TypeId, RuntimeType),\n}\n\nimpl Object {\n    fn type_id(&amp;self) -&gt; TypeId {\n        use Object::*;\n\n        match *self {\n            Nil =&gt; 0,\n            Int(..) =&gt; 1,\n            Runtime(id, ..) =&gt; id,\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 10289, "user_id": 209878, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/f96817a4958b8414a464a616a178c999?s=128&d=identicon&r=PG", "display_name": "Timothy Baldridge", "link": "https://stackoverflow.com/users/209878/timothy-baldridge"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 45112773, "answer_count": 1, "score": 1, "last_activity_date": 1500074882, "creation_date": 1500072410, "last_edit_date": 1500073422, "question_id": 45112589, "link": "https://stackoverflow.com/questions/45112589/tagged-unions-with-runtime-defined-members", "title": "Tagged unions with runtime defined members", "body": "<p>I'm working on a small interpreter and I'd like to represent some types on the stack with others being pointers. Here's what it would look like in C++:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>enum {\n  NIL_TYPE,\n  INT_TYPE,\n  REF_TYPE_START,\n}\n\nunion Data \n{\n  int int_val;\n  void *obj_val\n}\n\nstruct Object\n{\n  size_t _type_id;\n  Data _data;\n}\n</code></pre>\n\n<p><code>_type_id</code> acts as a tag for the rest of the struct. Things like integers, boolean, nils, etc, can be passed on the stack while larger things like strings and objects can be passed by reference. </p>\n\n<p>The interpreter will create new types at runtime, which is what the <code>REF_START_TYPE</code> is for. When a new type is created, we'll add a value to some internal counter and that becomes the next type id and that type is expected to be a pointer. </p>\n\n<p>How can I represent something like this in Rust? Enum types seem awesome, but they don't seem to allow extension. Untagged unions seem to be very much a WIP and not much help. Is there any way I can get this sort of on-stack behavior (thereby reducing a ton of allocations during math operations), while still allowing for runtime extension? </p>\n"}, {"tags": ["rust", "hyper", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 742, "user_id": 1006006, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/c7e18db000f12082ea6b1a68ae678701?s=128&d=identicon&r=PG", "display_name": "Vishal Kumar", "link": "https://stackoverflow.com/users/1006006/vishal-kumar"}, "is_accepted": false, "score": 1, "last_activity_date": 1500311698, "creation_date": 1500311698, "answer_id": 45150057, "question_id": 45111783, "link": "https://stackoverflow.com/questions/45111783/reuse-hyperclient-and-tokio-core-in-iron-and-hyper/45150057#45150057", "title": "Reuse hyper::client and tokio_core in Iron and Hyper", "body": "<p>I created a Downloader class that wraps client and core. Below is snippet.</p>\n\n<pre><code>use hyper;\nuse tokio_core;\nuse std::sync::{mpsc};\nuse std::thread;\nuse futures::Future;\nuse futures::stream::Stream;\nuse std::time::Duration;\nuse std::io::{self, Write};\nuse time::precise_time_ns;\nuse hyper::Client;\n\npub struct Downloader {\n    sender : mpsc::Sender&lt;(hyper::Request, mpsc::Sender&lt;hyper::Chunk&gt;)&gt;,\n    #[allow(dead_code)]\n    tr : thread::JoinHandle&lt;hyper::Request&gt;,\n}\nimpl Downloader {\n    pub fn new() -&gt; Downloader {\n        let (sender, receiver) = mpsc::channel::&lt;(hyper::Request,mpsc::Sender&lt;hyper::Chunk&gt;)&gt;();\n        let tr = thread::spawn(move||{\n            let mut core = tokio_core::reactor::Core::new().unwrap();\n            let client =  Client::new(&amp;core.handle());\n            loop {\n                let (req , sender) = receiver.recv().unwrap();\n                let begin = precise_time_ns();\n                let work = client.request(req)   \n                .and_then(|res| {\n                    res.body().for_each(|chunk| {\n\n                        sender.send(chunk)\n                        .map_err(|e|{\n                            //io::sink().write(&amp;chunk).unwrap();\n                            io::Error::new(io::ErrorKind::Other, e)\n                        })?;\n                        Ok(())\n                    })\n                    //sender.close();\n                //res.body().concat2()\n                });\n            core.run(work).map_err(|e|{println!(\"Error Is {:?}\", e);});\n           //This time prints same as all request processing time. \n            debug!(\"Time taken In Download {:?} ms\", (precise_time_ns() - begin) / 1000000);\n            }\n        });\n        Downloader{sender,\n                tr,\n        }\n    }\n\n    pub fn download(&amp;self, req : hyper::Request, results:  mpsc::Sender&lt;Vec&lt;u8&gt;&gt;){\n        self.sender.send((req, results)).unwrap();\n    }\n}\n</code></pre>\n\n<p>Now client of this class can have a static variable. </p>\n\n<pre><code>lazy_static!{\n    static ref DOWNLOADER : Mutex&lt;downloader::Downloader&gt; = \nMutex::new(downloader::Downloader::new());\n}\nlet (sender, receiver) = mpsc::channel();\nDOWNLOADER.lock().unwrap().download(payload, sender);\n</code></pre>\n\n<p>and then read through receive channel. \nOne may need to close sender channel using sender.drop() </p>\n"}], "owner": {"reputation": 742, "user_id": 1006006, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/c7e18db000f12082ea6b1a68ae678701?s=128&d=identicon&r=PG", "display_name": "Vishal Kumar", "link": "https://stackoverflow.com/users/1006006/vishal-kumar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 409, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1500311698, "creation_date": 1500067318, "last_edit_date": 1500067579, "question_id": 45111783, "link": "https://stackoverflow.com/questions/45111783/reuse-hyperclient-and-tokio-core-in-iron-and-hyper", "title": "Reuse hyper::client and tokio_core in Iron and Hyper", "body": "<p>I make a client request inside an Iron handler. How can I reuse Tokio's <code>Core</code> and Hyper's <code>Client</code>? I'm using hyper 0.11.0 and tokio-core 0.1.</p>\n\n<pre><code>fn get_result(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut payload = String::new();\n    req.body.read_to_string(&amp;mut payload).unwrap();\n\n    // can we re-use core and client somehow. Making then global with lazy_static!() does not work.\n    let mut core = tokio_core::reactor::Core::new().unwrap();\n    let client = Client::new(&amp;core.handle());\n\n    let uri = \"http://host:port/getResult\".parse().unwrap();\n    let mut req: hyper::Request = hyper::Request::new(hyper::Method::Post, uri);\n    req.headers_mut().set(ContentType::json());\n    req.headers_mut().set(ContentLength(payload.len() as u64));\n    req.set_body(payload);\n\n    let mut results: Vec&lt;RequestFormat&gt; = Vec::new();\n    let work = client.request(req).and_then(|res| {\n        res.body().for_each(|chunk| {\n            let re: ResultFormat = serde_json::from_slice(&amp;chunk).unwrap();\n            results.push(re);\n            Ok(())\n        })\n    });\n\n    Ok(Response::with(\n        (iron::status::Ok, serde_json::to_string(&amp;results).unwrap()),\n    ))\n}\n</code></pre>\n"}, {"tags": ["rust", "dependency-management", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 856, "user_id": 3573385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1ad39bc31e3f35e7759a12baa943472?s=128&d=identicon&r=PG", "display_name": "Daniel Harding", "link": "https://stackoverflow.com/users/3573385/daniel-harding"}, "edited": false, "score": 0, "creation_date": 1500318315, "post_id": 45111362, "comment_id": 77272580, "body": "Thanks, that nailed it.  And in fact if I explicitly set the mysql version in Cargo.toml without changing the byteorder dependency to 1.0, a cargo update will just sit and spin the CPU as it tries to find a solution to the dependency conflict.  I killed it after several minutes so I don&#39;t know if it would eventually give up or not."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 856, "user_id": 3573385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1ad39bc31e3f35e7759a12baa943472?s=128&d=identicon&r=PG", "display_name": "Daniel Harding", "link": "https://stackoverflow.com/users/3573385/daniel-harding"}, "edited": false, "score": 0, "creation_date": 1500318455, "post_id": 45111362, "comment_id": 77272659, "body": "@DanielHarding do you mean <code>mysql = &quot;11.3.0&quot; byteorder=&quot;1&quot;</code>? I can&#39;t say it&#39;s a bug or anything, but I&#39;d encourage you to report any such thing that takes that long. One of the heuristics I&#39;d expect would be to stop searching after some period of time."}, {"owner": {"reputation": 856, "user_id": 3573385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1ad39bc31e3f35e7759a12baa943472?s=128&d=identicon&r=PG", "display_name": "Daniel Harding", "link": "https://stackoverflow.com/users/3573385/daniel-harding"}, "edited": false, "score": 0, "creation_date": 1500321057, "post_id": 45111362, "comment_id": 77274000, "body": "well now I can&#39;t reproduce it :-(  If it comes up again and I can make a reproducible test case I&#39;ll be sure to report it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1500067106, "last_edit_date": 1500067106, "creation_date": 1500065171, "answer_id": 45111362, "question_id": 45111087, "link": "https://stackoverflow.com/questions/45111087/why-does-adding-byteorder-make-cargo-downgrade-mysql-to-version-8-0-0/45111362#45111362", "title": "Why does adding byteorder make Cargo downgrade mysql to version 8.0.0?", "body": "<blockquote>\n  <p>how to stop it from doing so</p>\n</blockquote>\n\n<p>This is the easy part: don't use wildcard versions. The chances of your code working with <strong>literally</strong> any version of that crate that has ever been published is, on average, zero.</p>\n\n<blockquote>\n  <p>why the byteorder dependency is making Cargo downgrade mysql</p>\n</blockquote>\n\n<p>This is actually <em>really</em> hard to answer. Picking dependencies <a href=\"https://stackoverflow.com/questions/28099683/algorithm-for-dependency-resolution\">is an NP-hard problem</a>. Since most programmers don't care to wait that long, there are heuristics and preferences and shortcuts in every dependency manager. I don't know all the nuances of Cargo's algorithm, so most of this is educated guesses or investigation.</p>\n\n<p>You've told Cargo \"I don't care what version mysql to use\" by saying <code>mysql = \"*\"</code>. Cargo is now free to use whatever version it wants to, a very flexible requirement.</p>\n\n<p>In this case, <a href=\"https://github.com/blackbeam/rust-mysql-simple/blob/v11.3.0/Cargo.toml#L56\" rel=\"nofollow noreferrer\">mysql 11.3.0 has chosen to require <code>byteorder = \"~1.0\"</code></a>. That does <em>not</em> allow byteorder 1.1.0. Some aspect of the dependency resolution sees this and says it'd be better to allow your crate to have version 1.1.0 of byteorder, even if that means that mysql needs to be downgraded to a non-conflicting version. The important thing is that version 8.0.0 was the last version that only requires byteorder 0.5.3.</p>\n\n<p>If you try to force both to the current versions, you'll see this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to select a version for `byteorder` (required by `mysql`):\nall possible versions conflict with previously selected versions of `byteorder`\n  version 1.1.0 in use by byteorder v1.1.0\n  possible versions to select: 1.0.0\n</code></pre>\n\n<p>However, you can get almost fully updated:</p>\n\n<pre><code>[dependencies]\nmysql = \"11.3.0\"\nbyteorder = \"1.0.0\"\n</code></pre>\n\n<p>I'm not fully sure why Cargo will allow you to have version 1.1 and 0.5 at the same time but not 1.1 and 1.0, but my guess is that a heuristic is to have only one semantic major version of a given crate.</p>\n\n<p>Future enhancements to Cargo will likely introduce the concept of <a href=\"https://github.com/rust-lang/rfcs/pull/1977\" rel=\"nofollow noreferrer\">\"public\" and \"private\" dependencies</a>, which will likely change the resolution algorithm as well as make this case better as byteorder is probably an internal dependency of mysql and you don't need to match it.</p>\n"}], "owner": {"reputation": 856, "user_id": 3573385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1ad39bc31e3f35e7759a12baa943472?s=128&d=identicon&r=PG", "display_name": "Daniel Harding", "link": "https://stackoverflow.com/users/3573385/daniel-harding"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 178, "favorite_count": 0, "accepted_answer_id": 45111362, "answer_count": 1, "score": 1, "last_activity_date": 1500067106, "creation_date": 1500063813, "last_edit_date": 1500063977, "question_id": 45111087, "link": "https://stackoverflow.com/questions/45111087/why-does-adding-byteorder-make-cargo-downgrade-mysql-to-version-8-0-0", "title": "Why does adding byteorder make Cargo downgrade mysql to version 8.0.0?", "body": "<p>I've been developing a project in Rust for awhile.  A few days ago I ran <code>cargo update</code> and a whole bunch of my dependencies got downgraded, and I haven't been able to figure out why.  I created a new project and have found that if the dependencies in <code>Cargo.toml</code> are just</p>\n\n<pre><code>[dependencies]\nmysql = \"*\"\n</code></pre>\n\n<p>it builds with the latest <code>mysql</code> (11.3.0) as I would expect. If I add</p>\n\n<pre><code>byteorder = \"1\"\n</code></pre>\n\n<p>then run <code>cargo clean</code>/<code>cargo update</code>, <code>mysql</code> gets downgraded to 8.0.0.  </p>\n\n<p>Any help figuring out why the <code>byteorder</code> dependency is making Cargo downgrade <code>mysql</code> or how to stop it from doing so would be appreciated.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 6, "last_activity_date": 1526218051, "last_edit_date": 1526218051, "creation_date": 1500062100, "answer_id": 45110682, "question_id": 45110443, "link": "https://stackoverflow.com/questions/45110443/how-do-i-build-code-in-a-documentation-test-but-not-run-it/45110682#45110682", "title": "How do I build code in a documentation test but not run it?", "body": "<p>There are several annotations you can use to change how the Rust code is processed. See <a href=\"https://doc.rust-lang.org/stable/rustdoc/documentation-tests.html#attributes\" rel=\"nofollow noreferrer\">the test documentation</a>.</p>\n\n<p>In your case it sounds like <code>no_run</code> is the one you'd want</p>\n\n<pre><code>//!```rust,no_run\n//!fn main() {\n//!    panic!(\"Not run me\");\n//!}\n//!```\n</code></pre>\n\n<p>Alternatively you could use <code>should_panic</code> so Rust will run the code, but <em>expect</em> the panic. If it's code that won't actually compile, you can use <code>ignore</code>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 334, "favorite_count": 1, "accepted_answer_id": 45110682, "answer_count": 1, "score": 3, "last_activity_date": 1526218051, "creation_date": 1500060929, "last_edit_date": 1500063502, "question_id": 45110443, "link": "https://stackoverflow.com/questions/45110443/how-do-i-build-code-in-a-documentation-test-but-not-run-it", "title": "How do I build code in a documentation test but not run it?", "body": "<p>I have code in my documentation that can only be run if the user has some software on their machine. To emulate this, I add <code>panic!</code> to the sample code:</p>\n\n<pre><code>//!```rust\n//!fn main() {\n//!    panic!(\"Not run me\");\n//!}\n//!```\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {}\n}\n</code></pre>\n\n<p>I want to check that the code in the comments can be compiled, but I do not want it to be run during <code>cargo test</code>. Right now, I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>running 1 test\ntest src/lib.rs -  (line 1) ... FAILED\n\nfailures:\n\n---- src/lib.rs -  (line 1) stdout ----\n        thread 'rustc' panicked at 'test executable failed:\n\nthread 'main' panicked at 'Not run me', &lt;anon&gt;:2\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>I <a href=\"http://doc.crates.io/manifest.html\" rel=\"nofollow noreferrer\">read about <code>doctest = false</code></a>, but that disables not only the running of code in comments, but also syntax checking the code in comments.</p>\n\n<p>How can I only disable running of code in comments, but still enable compilation of code in comments during <code>cargo test</code>?</p>\n"}, {"tags": ["pointers", "rust", "binary-search-tree"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1500054739, "post_id": 45108489, "comment_id": 77189350, "body": "That&#39;s <b>not a tree</b>. If it has a parent pointer, it&#39;s a <i>graph</i>, not a <i>tree</i>."}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1500054852, "post_id": 45108489, "comment_id": 77189410, "body": "I disagree. Having a parent pointer is an implementation detail. Ultimately what makes the data structure a tree or a graph is the API it exposes (i.e. from the user&#39;s standpoint are their cycles or not in the data structure?)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500055102, "post_id": 45108489, "comment_id": 77189518, "body": "The compiler doesn&#39;t care that you are only exposing half of the graph - the concept of ownership within a graph is not easily expressible and that&#39;s what the compiler is telling you."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500055172, "post_id": 45108489, "comment_id": 77189546, "body": "@Shepmaster This is a special case of a graph. For that reason I don&#39;t think it should be closed as duplicate: A solution that will work in this case (e.g. using <code>Rc</code> for child pointers and weak references for parent pointers) won&#39;t necessarily work for general graphs."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1500055308, "post_id": 45108489, "comment_id": 77189636, "body": "@interjay the duplicate target also has a node with children and parents and an answer suggests using <code>Rc</code>, just as you suggest; why do you think that&#39;s not a valid target?"}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "edited": false, "score": 0, "creation_date": 1500055366, "post_id": 45108489, "comment_id": 77189673, "body": "It is still unclear to me why what I am doing is unsafe. It seems perfectly valid for a child to have a reference to the parent and in turn be owned by the parent. The child can only go out of scope when the parent relinquishes ownership of it and there is no problem of dangling pointers."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500055409, "post_id": 45108489, "comment_id": 77189701, "body": "@Shepmaster I looked at the other duplicate which said that it is impossible in safe Rust.  By the way, the Rust documentation refers to a tree with parent pointers as a tree, not a graph: <a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/rc/struct.Weak.html</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1500055673, "post_id": 45108489, "comment_id": 77189831, "body": "I didn&#39;t say it was <i>unsafe</i>. You can totally have a value contain a reference to itself, <i>so long as you never modify or move it</i>, which is not what most people want. See <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> for details \u2014 your parent would store a child which would have a reference to the parent, thus you are storing a reference to yourself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500055995, "post_id": 45108489, "comment_id": 77190011, "body": "Remember that <i>safe Rust</i> is only capable of expressing a certain subset of the programs that are <i>actually safe</i>. Use of the <code>unsafe</code> keyword allows the programmer to say &quot;no, <b>I guarantee</b> that this code is safe by Rust&#39;s safety rules even though the compiler cannot see that it is&quot;. You cannot write code that is <i>actually unsafe</i> regardless of how many keywords you add."}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "edited": false, "score": 1, "creation_date": 1500056724, "post_id": 45108489, "comment_id": 77190376, "body": "&quot;You cannot write code that is actually unsafe regardless of how many keywords you add.&quot; - that&#39;s just not true. In an unsafe block you can write code that dereferences unallocated memory which is absolutely unsafe. For example: unsafe {         let p = 1;         let q = p as *const i64;         println!(&quot;{:?}&quot;, *q);     }"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500056964, "post_id": 45108489, "comment_id": 77190486, "body": "@user1413793 you are correct; I used ambiguous phrasing \u2014 I&#39;m sorry I confused the issue. I meant to say something closer to: &quot;You <i>must never</i> write code that is actually unsafe regardless of how many keywords you add.&quot;"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1500065630, "post_id": 45108489, "comment_id": 77194638, "body": "I don&#39;t agree that this is a duplicate of either of the marked questions. I&#39;ve nominated for reopening."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500276261, "post_id": 45108489, "comment_id": 77245554, "body": "@user1413793: &quot;It seems perfectly valid for a child to have a reference to the parent and in turn be owned by the parent.&quot;  Which do you drop first?  If you drop the parent first, the child has a dangling pointer to it when it gets dropped.  If you drop the child first, the parent has a dangling pointer to it when <i>it</i> gets dropped.  Neither of these are situations Rust will allow in safe code."}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "edited": false, "score": 0, "creation_date": 1500392358, "post_id": 45108489, "comment_id": 77310878, "body": "By rust&#39;s ownership rules, only the parent may drop the child as the parent owns it. So, the parent (or whoever owns the parent) can safely drop the left (or right) child with no dangling pointers. Because the child only has a reference to the parent, this is perfectly okay."}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1991, "favorite_count": 0, "closed_date": 1500054849, "answer_count": 0, "score": 5, "last_activity_date": 1500054917, "creation_date": 1500052599, "last_edit_date": 1500054362, "question_id": 45108489, "link": "https://stackoverflow.com/questions/45108489/what-is-the-paradigmatic-way-to-create-a-rust-tree-with-a-parent-pointer", "closed_reason": "Duplicate", "title": "What is the paradigmatic way to create a Rust tree with a parent pointer?", "body": "<p>I need to define a binary search tree where each node has access to the parent:</p>\n\n<pre><code>enum Tree&lt;'a&gt; {\n    Leaf,\n    Node {\n        left: Box&lt;Tree&lt;'a&gt;&gt;,\n        right: Box&lt;Tree&lt;'a&gt;&gt;,\n        parent: &amp;'a Tree&lt;'a&gt;,\n        data: u64,\n    }\n}\n\nimpl &lt;'a&gt; Tree&lt;'a&gt; {\n    pub fn new(data: u64, parent: &amp;'a Tree) -&gt; Tree&lt;'a&gt; {\n        Tree::Node {\n            left: Box::new(Tree::Leaf),\n            right: Box::new(Tree::Leaf),\n            parent,\n            data\n        }\n    }\n    pub fn insert_at_left_leaf(&amp;'a mut self, data: u64) {\n        match *self {\n            Tree::Leaf =&gt; panic!(\"Leaf has no children\"),\n            Tree::Node {ref mut left, ..} =&gt; {\n                **left = Tree::new(data, self);\n            }\n        }\n    }\n}\n\nfn main() {\n    let parent = Tree::Leaf;\n    let mut t = Tree::Node {\n        left: Box::new(Tree::Leaf),\n        right: Box::new(Tree::Leaf),\n        parent: &amp;parent,\n        data: 1u64\n    };\n    t.insert_at_left_leaf(2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ce09b5a3ac1959cf7968e590f2de6bbe&amp;version=stable\" rel=\"noreferrer\">playground</a></p>\n\n<p>However, I get the following compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as immutable because `self.left` is also borrowed as mutable\n  --&gt; src/main.rs:24:42\n   |\n23 |             Tree::Node {ref mut left, ..} =&gt; {\n   |                         ------------ mutable borrow occurs here\n24 |                 **left = Tree::new(data, self);\n   |                                          ^^^^ immutable borrow occurs here\n25 |             }\n26 |         }\n   |         - mutable borrow ends here\n</code></pre>\n\n<p>What is the paradigmatic way to do this in safe Rust? Specifically, when I insert a new node as the leaf of an existing node, I do not want to re-allocate space for it. There is already space allocated for the <code>Leaf</code> and I want to simply overwrite it with the new node.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1619, "user_id": 3342206, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/92d5672ff3c806eb71d84d7298d5be43?s=128&d=identicon&r=PG&f=1", "display_name": "8bittree", "link": "https://stackoverflow.com/users/3342206/8bittree"}, "is_accepted": false, "score": 3, "last_activity_date": 1500053382, "last_edit_date": 1500053382, "creation_date": 1500053042, "answer_id": 45108614, "question_id": 45108086, "link": "https://stackoverflow.com/questions/45108086/why-cant-a-mutable-variable-be-used-when-a-mutable-reference-to-that-variable-c/45108614#45108614", "title": "Why can&#39;t a mutable variable be used when a mutable reference to that variable can?", "body": "<p>The <a href=\"https://doc.rust-lang.org/book/first-edition/mutability.html\" rel=\"nofollow noreferrer\">Rust Book</a> explains question 1 pretty well:</p>\n\n<blockquote>\n<pre><code>let mut x = 5;\nlet y = &amp;mut x;\n</code></pre>\n  \n  <p><code>y</code> is an immutable binding to a mutable reference, which means that\n  you can\u2019t bind 'y' to something else (<code>y = &amp;mut z</code>), but <code>y</code> can be\n  used to bind <code>x</code> to something else (<code>*y = 5</code>).</p>\n</blockquote>\n\n<p>Basically, <code>variable.push_str(\" test\");</code> is mutating the <code>String</code> that <code>variable</code> references, but it does not affect <code>variable</code> (i.e. the binding) itself.</p>\n\n<hr>\n\n<p>The compiler error should explain question 2.</p>\n"}, {"comments": [{"owner": {"reputation": 921, "user_id": 638674, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9b01fb0377213dab05d73832ae59c686?s=128&d=identicon&r=PG", "display_name": "Peter", "link": "https://stackoverflow.com/users/638674/peter"}, "edited": false, "score": 0, "creation_date": 1526181835, "post_id": 45108659, "comment_id": 87641121, "body": "I came here after not understanding the book and this answer helped explain it further. The important part for me was the reference to String::push_str(&amp;mut string...), where the book presumes that the reader is aware that string.push_str is implemented in that way and doesn&#39;t mention it"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1500053735, "last_edit_date": 1500053735, "creation_date": 1500053249, "answer_id": 45108659, "question_id": 45108086, "link": "https://stackoverflow.com/questions/45108086/why-cant-a-mutable-variable-be-used-when-a-mutable-reference-to-that-variable-c/45108659#45108659", "title": "Why can&#39;t a mutable variable be used when a mutable reference to that variable can?", "body": "<p>You're getting this error because mutable borrowing is exclusive:</p>\n\n<pre><code>let mut string = String::from(\"test\")\nlet variable = &amp;mut string;\n</code></pre>\n\n<p>Here you create a mutable reference to a variable; because mutable references imply exclusive access, it is now impossible to access the original variable, because otherwise you would be violating aliasing guarantees.</p>\n\n<p>Consider this:</p>\n\n<pre><code>let mut string = String::from(\"test\");\n{\n    let variable = &amp;mut string;\n    variable.push_str(\" test\");\n}\nstring.push_str(\" test\");\n</code></pre>\n\n<p>This code will compile and work as intended, because the mutable reference goes out of scope before the original variable is accessed again.</p>\n\n<p>You can read more about this <a href=\"https://doc.rust-lang.org/book/first-edition/references-and-borrowing.html#mut-references\" rel=\"nofollow noreferrer\">in the Rust book</a> (see <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#mutable-references\" rel=\"nofollow noreferrer\">this</a> link for the second edition of the book).</p>\n\n<p>As for why you can call the mutating method on a non-mut variable, well, it is possible simply because the <code>push_str()</code> method accepts its receiver by <code>&amp;mut</code>; if you already have <code>&amp;mut</code> then it is used directly, but if you don't have one, then Rust will automatically try to create one for you, which is not possible if the variable is not <code>mut</code>:</p>\n\n<pre><code>let mut string = String::from(\"test\");\n\nstring.push_str(\"test\");\n// equivalent to:\nString::push_str(&amp;mut string, \"test\");  // won't work if `string` is not `mut`\n\nlet variable = &amp;mut string;\nvariable.push_str(\"test\");\n// [almost] equivalent to:\nString::push_str(variable, \"test\");  // works because `variable` is already `&amp;mut`\n</code></pre>\n\n<p>I wrote \"almost\" in the example above because in this case there is another step called reborrowing which basically ensures that the mutable reference can be used again after this call instead of being moved into the function call, but it doesn't really matter for this answer.</p>\n"}], "owner": {"reputation": 1627, "user_id": 1019182, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/1d72f23d6846ea76eb29a997e715b7e9?s=128&d=identicon&r=PG", "display_name": "Programmer9000", "link": "https://stackoverflow.com/users/1019182/programmer9000"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 760, "favorite_count": 1, "accepted_answer_id": 45108659, "answer_count": 2, "score": 3, "last_activity_date": 1500054700, "creation_date": 1500051130, "last_edit_date": 1500054700, "question_id": 45108086, "link": "https://stackoverflow.com/questions/45108086/why-cant-a-mutable-variable-be-used-when-a-mutable-reference-to-that-variable-c", "title": "Why can&#39;t a mutable variable be used when a mutable reference to that variable can?", "body": "<p>I have a mutable string variable, and an immutable variable bound to a mutable reference to the mutable string variable.  </p>\n\n<pre><code>let mut string = String::from(\"test\");\nlet variable: &amp;mut String = &amp;mut string;\nvariable.push_str(\" test\");\nstring.push_str(\" test\");\n</code></pre>\n\n<p>This fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `string` as mutable more than once at a time\n --&gt; src/main.rs:5:5\n  |\n3 |     let variable: &amp;mut String = &amp;mut string;\n  |                                      ------ first mutable borrow occurs here\n4 |     variable.push_str(\" test\");\n5 |     string.push_str(\" test\");\n  |     ^^^^^^ second mutable borrow occurs here\n6 | }\n  | - first borrow ends here\n</code></pre>\n\n<ol>\n<li>Without the second variable being mutable, why am I able to call <code>push_str</code>?</li>\n<li>Why am I able to call <code>push_str</code> on the second variable and not on the first?</li>\n</ol>\n"}, {"tags": ["rust", "immutability"], "answers": [{"tags": [], "owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "is_accepted": true, "score": 1, "last_activity_date": 1500054434, "last_edit_date": 1500054434, "creation_date": 1500051105, "answer_id": 45108078, "question_id": 45107820, "link": "https://stackoverflow.com/questions/45107820/why-does-a-for-loop-not-require-the-iterator-to-be-mutable/45108078#45108078", "title": "Why does a for loop not require the iterator to be mutable?", "body": "<blockquote>\n  <p>Didn't the for loop just use <code>f</code> mutably?</p>\n</blockquote>\n\n<p>No. <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take\" rel=\"nofollow noreferrer\"><code>take</code> returns a <em>new</em> iterator</a>. But even then, <a href=\"https://doc.rust-lang.org/1.18.0/std/iter/index.html#for-loops-and-intoiterator\" rel=\"nofollow noreferrer\"><code>for</code> is syntactic sugar</a>. Your code gets transformed into</p>\n\n<pre><code>let f: Fibonacci = fibonacci();\n\n{\n    let result = match IntoIterator::into_iter(f.take(5)) {\n        mut iter =&gt; {\n            loop {\n                match iter.next() {\n                    Some(i) =&gt; {\n                        println!(\"{}\", i);\n                    }\n                    None =&gt; break,\n                }\n            }\n        }\n    };\n    result\n}\n</code></pre>\n\n<p>Due to <code>IntoIterator</code>, we never have to mutate <code>f</code> or <code>f.take(5)</code>, but only the result of <code>into_iter</code>.</p>\n"}], "owner": {"reputation": 65, "user_id": 8280387, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/02caa927d659f60d45cfbc483318f33d?s=128&d=identicon&r=PG&f=1", "display_name": "Ritzymon", "link": "https://stackoverflow.com/users/8280387/ritzymon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 98, "favorite_count": 0, "closed_date": 1500054587, "accepted_answer_id": 45108078, "answer_count": 1, "score": 0, "last_activity_date": 1500054559, "creation_date": 1500050036, "last_edit_date": 1500054559, "question_id": 45107820, "link": "https://stackoverflow.com/questions/45107820/why-does-a-for-loop-not-require-the-iterator-to-be-mutable", "closed_reason": "Duplicate", "title": "Why does a for loop not require the iterator to be mutable?", "body": "<p>I do not understand the mutability of Rust iterators. To try to figure it out, I have the following:</p>\n\n<pre><code>struct Fibonacci {\n    curr: u32,\n    next: u32,\n}\n\nimpl Iterator for Fibonacci {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        let new_next = self.curr + self.next;\n        self.curr = self.next;\n        self.next = new_next;\n        Some(self.curr)\n    }\n}\n\nfn fibonacci() -&gt; Fibonacci {\n    Fibonacci { curr: 1, next: 1 }\n}\n\nfn main() {\n    let f: Fibonacci = fibonacci();\n    for i in f.take(5) {\n        println!(\"&gt; {}\", i);\n    }\n}\n</code></pre>\n\n<p>Very simply, I have a custom iterator that I return using <code>fibonacci</code>. Now, when I create this, the <code>f</code> variable is immutable. What happens in the <code>for</code> loop that makes this work? Didn't the for loop just use <code>f</code> mutably?</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 695, "user_id": 1407530, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/34d7caadb1601d6fec8f7065300a56ff?s=128&d=identicon&r=PG", "display_name": "Lars R&#246;nnb&#228;ck", "link": "https://stackoverflow.com/users/1407530/lars-r%c3%b6nnb%c3%a4ck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 29, "favorite_count": 0, "closed_date": 1500040264, "answer_count": 0, "score": 1, "last_activity_date": 1500040376, "creation_date": 1500040147, "last_edit_date": 1500040376, "question_id": 45104687, "link": "https://stackoverflow.com/questions/45104687/is-it-possible-to-get-back-the-implementing-type-from-a-trait", "closed_reason": "Duplicate", "title": "Is it possible to get back the implementing type from a trait?", "body": "<p>Is it possible to get back the implementing type from a trait, when you have used the trait in order to store different generic structs in a <code>Vec</code>? The following attempt conveys the idea.</p>\n\n<pre><code>#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\nstruct AStruct&lt;T&gt; { a: T }\n\ntrait A { \n    fn downcast(&amp;self) -&gt; &amp;Self;\n}\n\nimpl&lt;T&gt; A for AStruct&lt;T&gt; where T: Eq { \n    fn downcast(&amp;self) -&gt; &amp;AStruct&lt;T&gt; {\n        &amp;self\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;Box&lt;A&gt;&gt; = Vec::new();\n    let a_num_box = Box::new(AStruct {a: 42});\n    let a_str_box = Box::new(AStruct {a: \"the answer\"});\n    v.push(a_num_box);\n    v.push(a_str_box);\n    let a: &amp;AStruct&lt;usize&gt; = v[0].as_ref().downcast(); \n}\n</code></pre>\n"}, {"tags": ["enums", "rust", "pattern-matching"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1500040084, "post_id": 45104600, "comment_id": 77180292, "body": "Why are you not comparing <code>&amp;Token::Word</code>? Should two <code>Word</code> be marked &quot;equal&quot; even if their content is not?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1500040103, "post_id": 45104600, "comment_id": 77180309, "body": "Seems likely a duplicate of <a href=\"https://stackoverflow.com/q/32554285/155423\">stackoverflow.com/q/32554285/155423</a>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500040405, "post_id": 45104600, "comment_id": 77180538, "body": "&quot;I do not implement <code>Eq</code>.&quot;  Uh... why?"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500040476, "post_id": 45104600, "comment_id": 77180595, "body": "@Shepmaster No... and yes I don&#39;t care the value as well, but I have already put an answer for that question. My question is further: how can I reduce the code I have to write as I only need to say &quot;I want to match that both side of the tuple are in the SAME variant, but I don&#39;t want to say All those variant&#39;s names&quot;"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1500040521, "post_id": 45104600, "comment_id": 77180629, "body": "@DK to make it more generic. Sometimes we don&#39;t want to have <code>Eq</code> and maybe the <code>Eq</code> is not what we want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1500040564, "post_id": 45104600, "comment_id": 77180655, "body": "@EarthEngine did you read the <i>entire</i> answer? Including the part that is &quot;here&#39;s a macro to automatically generate the match function based on the enum definition&quot;?"}], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 694, "favorite_count": 0, "closed_date": 1500255157, "answer_count": 0, "score": 0, "last_activity_date": 1500040119, "creation_date": 1500039925, "last_edit_date": 1500040119, "question_id": 45104600, "link": "https://stackoverflow.com/questions/45104600/how-to-match-enum-variants-dynamically-in-rust", "closed_reason": "Duplicate", "title": "How to match enum variants dynamically in Rust?", "body": "<p>I have the following enum:</p>\n\n<pre><code>enum Token {\n    Word(String),\n    Semicolon,\n    Comma\n}\n</code></pre>\n\n<p>I do not implement <code>Eq</code>. I want to write a function to match the above through type comparisons:</p>\n\n<pre><code>fn expect(t: &amp;Token, const_t: &amp;Token) -&gt; bool {\n    match (t, const_t) {\n        (&amp;Token::Semicolon, &amp;Token::Semicolon) =&gt; true,\n        (&amp;Token::Comma, &amp;Token::Comma) =&gt; true,\n        _ =&gt; false,\n    }\n}\n</code></pre>\n\n<p>The above code is working, but has poor scalablity. If I have 100 variants, I will have a lot of helper functions and will rely on the default match <code>_</code> a lot.</p>\n\n<p>I don't see an easy way to hide the different variants of the <code>Enum</code> to simply say \"I want to match up the variants of two similar enums\".</p>\n\n<p>Are there any other workaround for this purpose?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1500013434, "creation_date": 1500013434, "answer_id": 45096049, "question_id": 45095523, "link": "https://stackoverflow.com/questions/45095523/why-does-creating-a-mutable-reference-to-a-dereferenced-mutable-reference-work/45096049#45096049", "title": "Why does creating a mutable reference to a dereferenced mutable reference work?", "body": "<p>Is there more than one mutable pointer somewhere in memory referring to the same location?  Yes.</p>\n\n<p>Is there more than one mutable pointer in the code to the same location which is <em>usable</em>?  No.</p>\n\n<p>Re-borrowing a mutable pointer locks out the one you're re-borrowing from.</p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1500038144, "last_edit_date": 1500038144, "creation_date": 1500020769, "answer_id": 45098230, "question_id": 45095523, "link": "https://stackoverflow.com/questions/45095523/why-does-creating-a-mutable-reference-to-a-dereferenced-mutable-reference-work/45098230#45098230", "title": "Why does creating a mutable reference to a dereferenced mutable reference work?", "body": "<p>I analyzed the differences in MIR between <code>test(mutable_reference)</code> and <code>test(&amp;mut *mutable_reference)</code>. It appears that the latter only introduces an additional level of indirection:</p>\n\n<p><a href=\"https://i.stack.imgur.com/bKaCq.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/bKaCq.png\" alt=\"code comparison: left is test(mutable_reference), right is test(&amp;mut *mutable_reference)\"></a></p>\n\n<p>When you are using an extra dereference in the function call, it doesn't create a mutable reference that holds; in other words, it doesn't cause any actual difference outside the function call.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1522682314, "last_edit_date": 1522682314, "creation_date": 1500039989, "answer_id": 45104627, "question_id": 45095523, "link": "https://stackoverflow.com/questions/45095523/why-does-creating-a-mutable-reference-to-a-dereferenced-mutable-reference-work/45104627#45104627", "title": "Why does creating a mutable reference to a dereferenced mutable reference work?", "body": "<p><strong>The rule</strong></p>\n\n<p>There shall only be one <em>usable</em> mutable reference to a particular value at any point in time.</p>\n\n<p>This is NOT a <em>spatial exclusion</em> (there CAN be multiple references to the same piece) but a <em>temporal exclusion</em>.</p>\n\n<p><strong>The mechanism</strong></p>\n\n<p>In order to enforce this, <code>&amp;mut T</code> is NOT <code>Copy</code>; therefore calling:</p>\n\n<pre><code>test(mutable_reference);\n</code></pre>\n\n<p>should move the reference into <code>test</code>.</p>\n\n<p>Actually doing this would make it unusable later on and not be very ergonomic, so the Rust compiler inserts an automatic <em>reborrowing</em>, much like you did yourself:</p>\n\n<pre><code>test(&amp;mut *mutable_reference);\n</code></pre>\n\n<p>You can force the move if you wanted to:</p>\n\n<pre><code>test({ let x = mutable_reference; x });\n</code></pre>\n\n<p><strong>The effect</strong></p>\n\n<p>Re-borrowing is, in essence, just borrowing:</p>\n\n<ul>\n<li><code>mutable_reference</code> is borrowed for as long as the unnamed temporary mutable reference exists (or anything that borrows from it),</li>\n<li>the unnamed temporary mutable reference is moved into <code>test</code>,</li>\n<li>at the of expression, the unnamed temporary mutable reference is destroyed, and therefore the borrow of <code>mutable_reference</code> ends.</li>\n</ul>\n"}], "owner": {"reputation": 1627, "user_id": 1019182, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/1d72f23d6846ea76eb29a997e715b7e9?s=128&d=identicon&r=PG", "display_name": "Programmer9000", "link": "https://stackoverflow.com/users/1019182/programmer9000"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 682, "favorite_count": 2, "accepted_answer_id": 45104627, "answer_count": 3, "score": 10, "last_activity_date": 1522682314, "creation_date": 1500011203, "last_edit_date": 1500037862, "question_id": 45095523, "link": "https://stackoverflow.com/questions/45095523/why-does-creating-a-mutable-reference-to-a-dereferenced-mutable-reference-work", "title": "Why does creating a mutable reference to a dereferenced mutable reference work?", "body": "<p>I understand you're not allowed to create two mutable references to an object at once in Rust.  I don't entirely understand why the following code works:</p>\n\n<pre><code>fn main() {\n    let mut string = String::from(\"test\");\n    let mutable_reference: &amp;mut String = &amp;mut string;\n    mutable_reference.push_str(\" test\");\n    // as I understand it, this creates a new mutable reference (2nd?)\n    test(&amp;mut *mutable_reference);\n\n    println!(\"{}\", mutable_reference);\n}\n\nfn test(s: &amp;mut String) {\n    s.push_str(\" test\");\n}\n</code></pre>\n"}, {"tags": ["if-statement", "rust", "conditional-operator"], "comments": [{"owner": {"reputation": 589605, "user_id": 1491895, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG", "display_name": "Barmar", "link": "https://stackoverflow.com/users/1491895/barmar"}, "edited": false, "score": 2, "creation_date": 1499990667, "post_id": 45092638, "comment_id": 77157962, "body": "<a href=\"https://github.com/rust-lang/rfcs/issues/1362\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1362</a>"}, {"owner": {"reputation": 589605, "user_id": 1491895, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG", "display_name": "Barmar", "link": "https://stackoverflow.com/users/1491895/barmar"}, "edited": false, "score": 3, "creation_date": 1499990691, "post_id": 45092638, "comment_id": 77157966, "body": "Google &quot;rust ternary operator&quot; and you&#39;ll find a bunch of hits."}, {"owner": {"reputation": 42006, "user_id": 3807729, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UEUbF.jpg?s=128&g=1", "display_name": "Galik", "link": "https://stackoverflow.com/users/3807729/galik"}, "reply_to_user": {"reputation": 46073, "user_id": 3002139, "user_type": "moderator", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/tYIVC.png?s=128&g=1", "display_name": "Baum mit Augen", "link": "https://stackoverflow.com/users/3002139/baum-mit-augen"}, "edited": false, "score": 0, "creation_date": 1499991044, "post_id": 45092638, "comment_id": 77158070, "body": "@Baum This question requires understanding of both Rust and C++ so it is one of the very few questions that should have both tags. I do, however, think it should be closed for <i>other</i> reasons."}, {"owner": {"reputation": 46073, "user_id": 3002139, "user_type": "moderator", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/tYIVC.png?s=128&g=1", "display_name": "Baum mit Augen", "link": "https://stackoverflow.com/users/3002139/baum-mit-augen"}, "reply_to_user": {"reputation": 42006, "user_id": 3807729, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UEUbF.jpg?s=128&g=1", "display_name": "Galik", "link": "https://stackoverflow.com/users/3807729/galik"}, "edited": false, "score": 0, "creation_date": 1499991258, "post_id": 45092638, "comment_id": 77158132, "body": "@Galik Nah, tags are for finding relevant stuff. No one with a C++ question will want to find this question, so it should not have the tag. It&#39;s not a C++ question, but solely a rust question. (Also, I don&#39;t get the &quot;it should be closed for <i>other</i> reasons&quot; part, that appears to pretty orthogonal to the whole tagging issue.)"}, {"owner": {"reputation": 42006, "user_id": 3807729, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UEUbF.jpg?s=128&g=1", "display_name": "Galik", "link": "https://stackoverflow.com/users/3807729/galik"}, "reply_to_user": {"reputation": 46073, "user_id": 3002139, "user_type": "moderator", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/tYIVC.png?s=128&g=1", "display_name": "Baum mit Augen", "link": "https://stackoverflow.com/users/3002139/baum-mit-augen"}, "edited": false, "score": 0, "creation_date": 1499992391, "post_id": 45092638, "comment_id": 77158415, "body": "@BaummitAugen But how do you expect a pure Rust programmer to convert code from a language he doesn&#39;t understand? Some knowledge of C++ is required. If people don&#39;t want to find this question then it should rather be closed than mistagged"}, {"owner": {"reputation": 46073, "user_id": 3002139, "user_type": "moderator", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/tYIVC.png?s=128&g=1", "display_name": "Baum mit Augen", "link": "https://stackoverflow.com/users/3002139/baum-mit-augen"}, "reply_to_user": {"reputation": 42006, "user_id": 3807729, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UEUbF.jpg?s=128&g=1", "display_name": "Galik", "link": "https://stackoverflow.com/users/3807729/galik"}, "edited": false, "score": 0, "creation_date": 1500033516, "post_id": 45092638, "comment_id": 77175769, "body": "@Galik <i>&quot;But how do you expect a pure Rust programmer to convert code from a language he doesn&#39;t understand?&quot;</i> I don&#39;t expect people who don&#39;t know this syntax to answer this question at all, but that does not make this a question about C++. <i>&quot;If people don&#39;t want to find this question then it should rather be closed than mistagged&quot;</i> People looking for <i>C++</i> answers won&#39;t want to find it. People looking of Rust answer probably will. Thus it should be tagged [rust], but not [c++]."}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1530996904, "post_id": 45092638, "comment_id": 89433794, "body": "i just wanted to say that... coming from C/C++, the &quot;match&quot; statement is like a &quot;super ternary&quot; operator.... in that the ternary operator only allows to check a boolean to continue to one of two values... with match you can check a pattern against an input, and continue to many many different values."}], "answers": [{"comments": [{"owner": {"reputation": 3719, "user_id": 2550406, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GhBMm.png?s=128&g=1", "display_name": "lucidbrot", "link": "https://stackoverflow.com/users/2550406/lucidbrot"}, "edited": false, "score": 7, "creation_date": 1569075868, "post_id": 45092948, "comment_id": 102482839, "body": "I&#39;m just here to tell you that I think this is a really good answer that covers many relevant things. Have a nice day :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 72, "last_activity_date": 1549414435, "last_edit_date": 1549414435, "creation_date": 1499993166, "answer_id": 45092948, "question_id": 45092638, "link": "https://stackoverflow.com/questions/45092638/how-can-i-port-c-code-that-uses-the-ternary-operator-to-rust/45092948#45092948", "title": "How can I port C++ code that uses the ternary operator to Rust?", "body": "<p>Rust does not have the ternary operator because it's not needed. Everything evaluates to some value, and <code>if</code> / <code>else</code> statements are no exception:</p>\n\n<pre><code>let r = 42.42;\nlet sgn_r = if r &gt;= 0. { 1. } else { -1. };\n</code></pre>\n\n<p>You'll note that I've also changed your variable names to be idiomatic Rust. Identifiers use <code>snake_case</code>.</p>\n\n<p>Do not be confused by the <code>?</code> operator that Rust <em>does</em> have. This is <a href=\"https://doc.rust-lang.org/stable/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\" rel=\"noreferrer\">called the \"try operator\" and is used to propagate errors</a>.</p>\n\n<hr>\n\n<p>Specifically for <em>this</em> code, it's likely you should use <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.signum\" rel=\"noreferrer\"><code>f64::signum</code></a>:</p>\n\n<pre><code>let r = 42.42_f64;\nlet sgn_r = r.signum();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "is_accepted": false, "score": 1, "last_activity_date": 1617751964, "creation_date": 1617751964, "answer_id": 66977775, "question_id": 45092638, "link": "https://stackoverflow.com/questions/45092638/how-can-i-port-c-code-that-uses-the-ternary-operator-to-rust/66977775#66977775", "title": "How can I port C++ code that uses the ternary operator to Rust?", "body": "<p>As of Rust 1.50, you can use <a href=\"https://doc.rust-lang.org/std/primitive.bool.html#method.then\" rel=\"nofollow noreferrer\"><code>bool::then</code></a> to accomplish the same thing:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let sgn_r = (r &gt;= 0).then(|| 1).unwrap_or(-1);\n</code></pre>\n<p>Note that it is generally better to use a regular <code>if/else</code> statement for readability reasons, but <code>bool::then</code> is an alternative that may be nicer in certain circumstances.</p>\n"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5818, "favorite_count": 0, "accepted_answer_id": 45092948, "answer_count": 2, "score": 23, "last_activity_date": 1617751964, "creation_date": 1499990528, "last_edit_date": 1499993054, "question_id": 45092638, "link": "https://stackoverflow.com/questions/45092638/how-can-i-port-c-code-that-uses-the-ternary-operator-to-rust", "title": "How can I port C++ code that uses the ternary operator to Rust?", "body": "<p>How can I port this C++ code to Rust:</p>\n\n\n\n<pre><code>auto sgnR = (R &gt;= 0.) ? 1. : -1.;\n</code></pre>\n\n<p>I have seen some examples with the <code>match</code> keyword, but I don't understand how it works.</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1499980704, "post_id": 45090958, "comment_id": 77154680, "body": "I didn&#39;t clearly understand."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499981133, "post_id": 45090958, "comment_id": 77154869, "body": "Can you clarify what you mean by <i>non-destructively</i>?"}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 2, "creation_date": 1499981169, "post_id": 45090958, "comment_id": 77154884, "body": "<code>fold</code> doesn&#39;t seem like the right tool here. You should instead use <code>enumerate</code> to generate the <code>x</code> index, and <code>map</code> followed by <code>collect</code> to create the vector of widgets."}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981177, "post_id": 45090958, "comment_id": 77154892, "body": "Sure! I guess I expected the function signature to explain what I meant, but I&#39;ll try to do better. Sorry!"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1499981238, "post_id": 45090958, "comment_id": 77154913, "body": "Is it what you want? <code>fn append&lt;T&gt;(mut vs: Vec&lt;T&gt;, v: T) -&gt; Vec&lt;T&gt; { vs.push(v); vs }</code>"}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981249, "post_id": 45090958, "comment_id": 77154919, "body": "Ah, That was the kind of answer I was looking for, interjay. I thought about doing the enumerate/map/collect thing but for some reason decided it wasn&#39;t going to work. I&#39;ll look at my actual code and try to figure out why."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499981268, "post_id": 45090958, "comment_id": 77154930, "body": "It&#39;s exactly because of the function signature that I ask. You&#39;ve given up control of the <code>Vec</code>, so why do you care what happens to it, destroyed or otherwise."}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981277, "post_id": 45090958, "comment_id": 77154937, "body": "red75prime, that is what I wanted but I was hoping it would be a builtin. (:"}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981310, "post_id": 45090958, "comment_id": 77154954, "body": "I meant non-destructively as in &quot;without mutation going on.&quot; So like the ++ operator in Haskell."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499981383, "post_id": 45090958, "comment_id": 77154985, "body": "But again, <i>why</i> \u2014 red75prime&#39;s answer uses mutability (<code>push</code>), but it fits exactly with the signature you asked for. You can&#39;t <i>tell</i> that there&#39;s mutability though."}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981494, "post_id": 45090958, "comment_id": 77155030, "body": "I just didn&#39;t want to deal with the mutability. I just wanted to return an expression. That&#39;s all."}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "edited": false, "score": 0, "creation_date": 1499981539, "post_id": 45090958, "comment_id": 77155055, "body": "This was more of a question about how to idiomatically do the above (a la interjay&#39;s answer) than about that specific function. That&#39;s why I put idiomatic in the title."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1499982488, "last_edit_date": 1499982488, "creation_date": 1499982152, "answer_id": 45091385, "question_id": 45090958, "link": "https://stackoverflow.com/questions/45090958/what-is-an-idiomatic-way-to-non-destructively-append-a-value-to-a-vector/45091385#45091385", "title": "What is an idiomatic way to non-destructively append a value to a vector?", "body": "<blockquote>\n  <p>non-destructively append a value to a vector</p>\n</blockquote>\n\n<p>This is impossible. Modifying a vector... modifies it. You can't get around that. You can choose to <code>clone</code> the vector, which avoids mutating the <em>original</em> vector. You still need to mutate the clone, however:</p>\n\n<pre><code>let things = vec![1];\nlet things2 = {\n    let mut tmp = things.clone();\n    tmp.push(2);\n    tmp\n};\n</code></pre>\n\n<p>If you are done with the original vector, you can reuse it:</p>\n\n<pre><code>let things = vec![1];\nlet things2 = {\n    let mut tmp = things;\n    tmp.push(2);\n    tmp\n};\n</code></pre>\n\n<p>This can be extracted into your desired function signature:</p>\n\n<pre><code>fn append(vec: Vec&lt;i32&gt;, item: i32) -&gt; Vec&lt;i32&gt; {\n    let mut vec = vec;\n    vec.push(item);\n    vec\n};\n</code></pre>\n\n<p>Which would idiomatically but equivalently be written as</p>\n\n<pre><code>fn append(mut vec: Vec&lt;i32&gt;, item: i32) -&gt; Vec&lt;i32&gt; {\n    vec.push(item);\n    vec\n};\n\nlet things = vec![1];\nlet things2 = append(things.clone(), 2);\nlet things2 = append(things, 2);\n</code></pre>\n\n<blockquote>\n  <p>It seems like this (or this as a method on <code>Vec</code>) would be very idiomatic for Rust</p>\n</blockquote>\n\n<p>Not really - to have this method signature, you have to own the <code>Vec</code>. It's more common to only have a mutable reference to the <code>Vec</code>, which offers a different set of capabilities. </p>\n\n<p>There was some talk about implementing <code>Add</code> for <code>Vec</code>, which might have allowed something like <code>let things2 = things + 2</code>, but I don't know that went anywhere.</p>\n\n<hr>\n\n<p>For what it's worth, I'd write your code as:</p>\n\n<pre><code>let foos = [\"a\", \"b\", \"c\"];\n\nlet ws: Vec&lt;_&gt; = foos.iter()\n    .enumerate()\n    .map(|(i, text)| Widget { foo: i as isize, text })\n    .collect();\n</code></pre>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 419, "favorite_count": 0, "accepted_answer_id": 45091385, "answer_count": 1, "score": 0, "last_activity_date": 1499982488, "creation_date": 1499980248, "last_edit_date": 1499980734, "question_id": 45090958, "link": "https://stackoverflow.com/questions/45090958/what-is-an-idiomatic-way-to-non-destructively-append-a-value-to-a-vector", "title": "What is an idiomatic way to non-destructively append a value to a vector?", "body": "<p>I have a program in which I <code>fold</code> over a vector of strings, and increment a value and build another vector over that. Something like this:</p>\n\n<pre><code>struct Widget { foo: isize, text: &amp;'static str }\nlet foos = vec![\"a\", \"b\", \"c\"];\nlet (final, ws) = foos.iter().fold((0, widgets), |(x, ws), text| {\n    (x+1, Widget { foo: x, text: text })\n});\n</code></pre>\n\n<p>The problem with the above code is that I need to <em>append</em> the new widget to <code>ws</code>, not return the new widget in place of <code>ws</code>. To do this, I need a way to non-destructively append a value to a vector. Here's the signature, roughly, of the function I'm looking for:</p>\n\n<p><code>fn append&lt;T&gt;(vec: Vec&lt;T&gt;, item: T) -&gt; Vec&lt;T&gt;</code></p>\n\n<p>I can't seem to find a function like this. It seems like this (or this as a method on <code>Vec</code>) would be very idiomatic for Rust, but its just not there. Is there another way to implement this more idiomatically, or is there a function like the above?</p>\n"}, {"tags": ["rust", "dereference"], "answers": [{"comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 21, "creation_date": 1499982560, "post_id": 45086999, "comment_id": 77155437, "body": "I have to disagree, at least in regards to <code>Deref</code> \u2013 most of my newtypes exist solely as fancy constructors, so that I can pass data around with a static guarantee that it satisfies certain invariants. I.e., once the object is constructed I no longer really care about the newtype, <i>only</i> the underlying data; having to pattern match/<code>.0</code> everywhere is just noise, and delegating every method I might care about would be as well. I suppose it might be surprising to have a type implement <code>Deref</code> and not <code>DerefMut</code>, but they are separate traits for a reason, after all..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 3, "creation_date": 1499983040, "post_id": 45086999, "comment_id": 77155670, "body": "@ildjarn <i>with a static guarantee that it satisfies certain invariants</i> \u2014 if you implement <code>DerefMut</code>, you can no longer statically guarantee those invariants as anyone can trivially change them, regardless of the visibility of the newtype fields. If you only implement <code>Deref</code>, you still allow people to poke at your data. This shouldn&#39;t cause any material harm, but often presents a wider API than you need to expose."}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 6, "creation_date": 1499983566, "post_id": 45086999, "comment_id": 77155909, "body": "&quot;<i>This shouldn&#39;t cause any material harm, but often presents a wider API than you need to expose.</i>&quot; No more so than <code>std::str</code> IMO; in protocol work, for example, you&#39;re often dealing with sequences of primitive types where it&#39;s rather pointless to obscure (/try to abstract away) that fact, <i>but</i> there are strict invariants to maintain (c.f. UTF-8). I don&#39;t feel strongly about it; I just feel like &quot;bad practice&quot; is putting it rather strongly. :-] (EDIT: If one could make <code>deref_mut</code> unsafe then I probably would feel strongly as there would be no <code>Deref</code> sans <code>DerefMut</code> conundrum.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1499984401, "post_id": 45086999, "comment_id": 77156210, "body": "@ildjarn I think that&#39;s an interesting example. <code>std::str</code> does <i>not</i> implement <code>Deref&lt;Target = [u8]&gt;</code> but that&#39;s all it is internally. A <code>str</code> <i>is-not-a</i> slice of bytes, but it does <i>have-a</i> slice of bytes. From the sounds of it, I&#39;ve not done as much as lower-level work as you, but I&#39;ve found that forcing myself to add the delegation makes me evaluate each and in turn makes me develop higher-level APIs around the details (bit-tricks -&gt; <code>read_le_u8</code> -&gt; <code>read_msg</code>)."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1558512243, "post_id": 45086999, "comment_id": 99121518, "body": "I think that this link would perfectly fit in your answer: <a href=\"https://rust-lang-nursery.github.io/api-guidelines/predictability.html#only-smart-pointers-implement-deref-and-derefmut-c-deref\" rel=\"nofollow noreferrer\">rust-lang-nursery.github.io/api-guidelines/&hellip;</a>"}, {"owner": {"reputation": 529, "user_id": 11877195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ed77976acc203f50e7699ba07061865?s=128&d=identicon&r=PG&f=1", "display_name": "Sahsahae", "link": "https://stackoverflow.com/users/11877195/sahsahae"}, "edited": false, "score": 1, "creation_date": 1571324821, "post_id": 45086999, "comment_id": 103211568, "body": "<code>This comes back to the is-a and has-a concepts from object-oriented modeling. Is MyArray an array? Should it be able to be used anywhere an array can? Does it have preconditions that the object should uphold that a consumer shouldn&#39;t be able to break?</code> Might be a bit late, but newtypes are quite literally for <code>is-a</code> cases... You only ever use it when you do want a new type that acts as old type. If it&#39;s unsafe (not rust kind of unsafe) to expose all functionality of wrapped type, general composition should be used, not newtype pattern. You have right concerns but for wrong reasons."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1610439544, "post_id": 45086999, "comment_id": 116125889, "body": "There is now a <a href=\"https://crates.io/crates/delegate\" rel=\"nofollow noreferrer\"><code>delegate</code></a> crate."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 25, "last_activity_date": 1610460665, "last_edit_date": 1610460665, "creation_date": 1499965413, "answer_id": 45086999, "question_id": 45086595, "link": "https://stackoverflow.com/questions/45086595/is-it-considered-a-bad-practice-to-implement-deref-for-newtypes/45086999#45086999", "title": "Is it considered a bad practice to implement Deref for newtypes?", "body": "<p>I think it's a <strong>bad practice</strong>.</p>\n<blockquote>\n<p>since I can use my newtype as if it were the underlying type in some situations</p>\n</blockquote>\n<p>That's the problem \u2014 it can be implicitly used as the underlying type <em>whenever</em> a reference is. If you implement <code>DerefMut</code>, then it also applies when a mutable reference is needed.</p>\n<p>You don't have any control over what is and what is not available from the underlying type; everything is. In your example, do you want to allow people to call <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr\" rel=\"nofollow noreferrer\"><code>as_ptr</code></a>? What about <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort\" rel=\"nofollow noreferrer\"><code>sort</code></a>? I sure hope you do, because they can!</p>\n<p>About all you can do is attempt to overwrite methods, but they still have to exist:</p>\n<pre><code>impl MyArray {\n    fn as_ptr(&amp;self) -&gt; *const i32 {\n        panic!(&quot;No, you don't!&quot;)\n    }\n}\n</code></pre>\n<p>Even then, they can still be called explicitly (<code>&lt;[i32]&gt;::as_ptr(&amp;*my_array);</code>).</p>\n<p>I consider it bad practice for the same reason I believe that using inheritance for code reuse is bad practice. In your example, you are essentially inheriting from an array. I'd never write something like the following Ruby:</p>\n<pre class=\"lang-rb prettyprint-override\"><code>class MyArray &lt; Array\n  # ...\nend\n</code></pre>\n<p>This comes back to the <em>is-a</em> and <em>has-a</em> concepts from object-oriented modeling. Is <code>MyArray</code> <strong>an array</strong>? Should it be able to be used <em>anywhere an array can</em>? Does it have preconditions that the object should uphold that a consumer shouldn't be able to break?</p>\n<blockquote>\n<p>but I am tired of writing <code>my_type.0.call_to_whatever(...)</code></p>\n</blockquote>\n<p>Like in other languages, I believe the correct solution is composition over inheritance. If you need to forward a call, create a method on the newtype:</p>\n<pre><code>impl MyArray {\n    fn call_to_whatever(&amp;self) { self.0.call_to_whatever() } \n}\n</code></pre>\n<p>The main thing that makes this painful in Rust is the lack of <em>delegation</em>. A <strong>hypothetical</strong> delegation syntax could be something like</p>\n<pre><code>impl MyArray {\n    delegate call_to_whatever -&gt; self.0; \n}\n</code></pre>\n<p>While waiting for first-class delegation, we can use crates like <a href=\"https://crates.io/crates/delegate\" rel=\"nofollow noreferrer\">delegate</a> or <a href=\"https://crates.io/crates/ambassador\" rel=\"nofollow noreferrer\">ambassador</a> to help fill in some of the gaps.</p>\n<p>So when <strong>should</strong> you use <code>Deref</code> / <code>DerefMut</code>? I'd advocate that the only time it makes sense is when you are implementing a <em>smart pointer</em>.</p>\n<hr />\n<p>Speaking practically, I <em>do</em> use <code>Deref</code> / <code>DerefMut</code> for newtypes that are <strong>not</strong> exposed publicly on projects where I am the sole or majority contributor. This is because I trust myself and have good knowledge of what I mean. If delegation syntax existed, I wouldn't.</p>\n"}, {"comments": [{"owner": {"reputation": 14053, "user_id": 2189130, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/trlri.png?s=128&g=1", "display_name": "kmdreko", "link": "https://stackoverflow.com/users/2189130/kmdreko"}, "edited": false, "score": 0, "creation_date": 1615963921, "post_id": 66659596, "comment_id": 117851518, "body": "While use in popular crates isn&#39;t necessarily a good argument for &quot;best practices&quot;, I agree that actix&#39;s <code>Json</code> <i>should</i> be <code>Deref</code>, its only there as a marker to the rest of the framework and it should be as transparent as possible to the user&#39;s code."}], "tags": [], "owner": {"reputation": 745, "user_id": 1403530, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bM6iA.png?s=128&g=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/1403530/daniel"}, "is_accepted": false, "score": 1, "last_activity_date": 1615912982, "creation_date": 1615912982, "answer_id": 66659596, "question_id": 45086595, "link": "https://stackoverflow.com/questions/45086595/is-it-considered-a-bad-practice-to-implement-deref-for-newtypes/66659596#66659596", "title": "Is it considered a bad practice to implement Deref for newtypes?", "body": "<p>Contrary to the accepted answer, I found out that some popular crates implement <code>Deref</code> for types which are newtypes and aren't smart pointers:</p>\n<ol>\n<li><p><code>actix_web::web::Json&lt;T&gt;</code> is a tuple struct of <code>(T,)</code> and it <a href=\"https://docs.rs/actix-web/3.3.2/actix_web/web/struct.Json.html#impl-Deref\" rel=\"nofollow noreferrer\">implements <code>Deref&lt;Target=T&gt;</code></a>.</p>\n</li>\n<li><p><code>bstr::BString</code> has one field typed <code>Vec&lt;u8&gt;</code> and it <a href=\"https://docs.rs/bstr/0.2.15/bstr/struct.BString.html#impl-Deref\" rel=\"nofollow noreferrer\">implements <code>Deref&lt;Target=Vec&lt;u8&gt;&gt;</code></a>.</p>\n</li>\n</ol>\n<p>So, maybe it's fine as long as it's not abused, e.g. to simulate multi-level inheritance hierarchies. I also noticed that the two examples above have either zero public methods or only one <code>into_inner</code> method which returns the inner value. It seems then a good idea to keep the number of methods of a wrapper type minimal.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6359, "favorite_count": 9, "accepted_answer_id": 45086999, "answer_count": 2, "score": 36, "last_activity_date": 1615912982, "creation_date": 1499964083, "last_edit_date": 1499964296, "question_id": 45086595, "link": "https://stackoverflow.com/questions/45086595/is-it-considered-a-bad-practice-to-implement-deref-for-newtypes", "title": "Is it considered a bad practice to implement Deref for newtypes?", "body": "<p>I often use the newtype pattern, but I am tired of writing <code>my_type.0.call_to_whatever(...)</code>. I am tempted to implement the <code>Deref</code> trait because it permits writing simpler code since I can use my newtype as if it were the underlying type in some situations, <em>e.g.</em>:</p>\n\n<pre><code>use std::ops::Deref;\n\ntype Underlying = [i32; 256];\nstruct MyArray(Underlying);\n\nimpl Deref for MyArray {\n    type Target = Underlying;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.0\n    }\n}\n\nfn main() {\n    let my_array = MyArray([0; 256]);\n\n    println!(\"{}\", my_array[0]); // I can use my_array just like a regular array\n}\n</code></pre>\n\n<p>Is this a good or bad practice? Why? What can be the downsides?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499954719, "post_id": 45082787, "comment_id": 77138563, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Your code isn&#39;t syntactically valid (at the very least it&#39;s missing a <code>}</code>) and you haven&#39;t defined what <code>Core</code>, <code>Manager</code>, <code>CoreType</code>, <code>U2FManager</code>, <code>HDWallet</code>, or <code>NanoCore</code> are."}, {"owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499955979, "post_id": 45082787, "comment_id": 77139582, "body": "@Shepmaster, are there way in rust to create builder function that will return instances with different types for generic, but that will fit trait bound?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499956088, "post_id": 45082787, "comment_id": 77139662, "body": "<a href=\"https://stackoverflow.com/a/31061204/155423\">Something like this</a>, perhaps?"}, {"owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499956663, "post_id": 45082787, "comment_id": 77140133, "body": "Kind of, but yeah, I can&#39;t make such builder - it will produce structs with different concrete types, and compiler won&#39;t handle this. Thanks."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1499957613, "post_id": 45082787, "comment_id": 77140915, "body": "I think you&#39;re looking for the <a href=\"https://aturon.github.io/ownership/builders.html#consuming-builders:\" rel=\"nofollow noreferrer\">consuming builder</a> pattern. Otherwise, we really can&#39;t tell without a new question."}], "owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 177, "favorite_count": 0, "closed_date": 1499954453, "answer_count": 0, "score": 0, "last_activity_date": 1499954408, "creation_date": 1499954105, "last_edit_date": 1499954408, "question_id": 45082787, "link": "https://stackoverflow.com/questions/45082787/rust-builder-function-of-generic-structure", "closed_reason": "Duplicate", "title": "Rust builder function of generic structure", "body": "<p>I am trying to create factory function for creating a struct with one generic field as follows:</p>\n\n<pre><code>///\nstruct MyStruct&lt;T: Core&gt; {\n    u2f: Manager,\n    id: CoreType,\n    core: T,\n}\n\n///\npub fn create_wallet&lt;T: Core&gt;(id: CoreType) -&gt; Option&lt;MyStruct&lt;T&gt;&gt; {\n    match id {\n        CoreType::Nano =&gt; {\n            if let Ok(m) = U2FManager::new() {\n                return Some(HDWallet::&lt;NanoCore&gt; {\n                     u2f: m,\n                     id: CoreType::Nano,\n                     core: NanoCore,\n                });\n            }\n            None\n        },\n        _ =&gt; None,\n    }\n</code></pre>\n\n<p>this gives me error, that <code>expected type parameter, found struct hd::led::NanoCore'</code></p>\n\n<p>How one should specify concrete struct in my case?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499952588, "post_id": 45081768, "comment_id": 77136838, "body": "I think that the referred question is about cloning parts of the slice into new owned vectors, I wish not to allocate any new memory, just copy contents of a vector in place as it is"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1499953716, "post_id": 45081768, "comment_id": 77137715, "body": "@ViktorChv&#225;tal: The solution is the same: create two, non-overlapping slices.  You can read from a mutable slice just fine."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499953767, "post_id": 45081768, "comment_id": 77137767, "body": "Check out the <a href=\"https://stackoverflow.com/a/30278246/155423\"><i>second</i> answer</a> (yes, sometimes reading past the first answer or first search result is the right thing to do)."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 0, "creation_date": 1499954155, "post_id": 45081768, "comment_id": 77138095, "body": "Thank you, I missed that, using split_at_mut was exactly what I was looking for"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499953803, "post_id": 45082624, "comment_id": 77137792, "body": "If you agree with the duplicate, don&#39;t answer the question. That just clutters up SO."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499953922, "post_id": 45082624, "comment_id": 77137889, "body": "@Shepmaster I considered that the question is distant enough to possible duplicate. That&#39;s not an &quot;exact duplicate&quot;."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1499954303, "post_id": 45082624, "comment_id": 77138221, "body": "@Boiethios It is enough for an answer in a duplicate to cover the solution to this question."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 0, "creation_date": 1499955086, "post_id": 45082624, "comment_id": 77138873, "body": "Thank you, @Boiethios, your answer shows a nice implementation of what I was willing to do, however, answers in duplicates already contain solutions to my question. Should I also accept this answer or leave it as it is?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 1, "creation_date": 1499955319, "post_id": 45082624, "comment_id": 77139054, "body": "@ViktorChv&#225;tal I do not know, I am looking for some source in meta."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 1, "creation_date": 1499956521, "post_id": 45082624, "comment_id": 77140006, "body": "@Boiethios Ok, on <a href=\"https://meta.stackexchange.com/questions/10841/how-should-duplicate-questions-be-handled/\">meta</a> I have found an advice &quot;If you don&#39;t think the answers on the duplicate question are good enough, write an answer there.&quot; I consider your answer better suiting my needs, so I&#39;m accepting it"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 1, "creation_date": 1499956621, "post_id": 45082624, "comment_id": 77140101, "body": "@ViktorChv&#225;tal Got same answer there: <a href=\"https://meta.stackoverflow.com/a/352195/4498831\">meta.stackoverflow.com/a/352195/4498831</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "edited": false, "score": 0, "creation_date": 1499957430, "post_id": 45082624, "comment_id": 77140764, "body": "@ViktorChv&#225;tal &quot;If you don&#39;t think the answers on the duplicate question are good enough, write an answer there.&quot; \u2014 &quot;there&quot; means <i>on the duplicate <b>target</i></b>, not on the question that is being marked as the duplicate."}, {"owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499957830, "post_id": 45082624, "comment_id": 77141104, "body": "@Shepmaster Thank you for pointing that out, I&#39;m going to know next time"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 2, "last_activity_date": 1499960456, "last_edit_date": 1499960456, "creation_date": 1499953753, "answer_id": 45082624, "question_id": 45081768, "link": "https://stackoverflow.com/questions/45081768/efficiently-copy-non-overlapping-slices-of-the-same-vector-in-rust/45082624#45082624", "title": "Efficiently copy non overlapping slices of the same vector in Rust", "body": "<p>As said in comment, use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a>. Then you can use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice\" rel=\"nofollow noreferrer\"><code>clone_from_slice</code></a>.</p>\n\n<p><strong>Example of implementation:</strong></p>\n\n<pre><code>// split the slice in two mutable slices\n// then copy one subslice to other\nfn copy_within_a_slice&lt;T: Clone&gt;(v: &amp;mut [T], from: usize, to: usize, len: usize) {\n    if from &gt; to {\n        let (dst, src) = v.split_at_mut(from);\n        dst[to..to + len].clone_from_slice(&amp;src[..len]);\n    } else {\n        let (src, dst) = v.split_at_mut(to);\n        dst[..len].clone_from_slice(&amp;src[from..from + len]);\n    }\n}\n\nfn main() {\n    let mut v = (0..10).collect::&lt;Vec&lt;_&gt;&gt;();\n    println!(\"{:?}\", v);\n    copy_within_a_slice(&amp;mut v, 6, 1, 3);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p><strong>Ouput:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 6, 7, 8, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p>Do not forget to pay attention to the values because the code will panic if you are out of bounds.</p>\n"}], "owner": {"reputation": 433, "user_id": 4958456, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57a7388ee6a853860e40a850c88edcc?s=128&d=identicon&r=PG&f=1", "display_name": "Viktor Chv&#225;tal", "link": "https://stackoverflow.com/users/4958456/viktor-chv%c3%a1tal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1496, "favorite_count": 0, "closed_date": 1499953783, "accepted_answer_id": 45082624, "answer_count": 1, "score": 2, "last_activity_date": 1499960456, "creation_date": 1499951774, "last_edit_date": 1499953990, "question_id": 45081768, "link": "https://stackoverflow.com/questions/45081768/efficiently-copy-non-overlapping-slices-of-the-same-vector-in-rust", "closed_reason": "Duplicate", "title": "Efficiently copy non overlapping slices of the same vector in Rust", "body": "<p>I have a <code>Vec&lt;T&gt;</code> where <code>T: Copy + Clone</code> and I would like to efficiently copy a slice of the vector to another slice of the same vector, where slices have the same length and do not overlap. In C++ I would use <a href=\"http://en.cppreference.com/w/cpp/string/byte/memcpy\" rel=\"nofollow noreferrer\"><code>std::memcpy</code></a> for the same purpose.</p>\n\n<p>I would like to:</p>\n\n<ul>\n<li>avoid using unsafe functions like <a href=\"https://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html\" rel=\"nofollow noreferrer\"><code>std::ptr::copy_nonoverlapping</code></a></li>\n<li>use a library function, without implementing the copy loop myself</li>\n</ul>\n\n<p>What I have tried:</p>\n\n<pre><code>#[test]\nfn copy_within_a_vector() {\n    let mut data = vec![1, 2, 0, 0];\n    let src = &amp;data[0..2];\n    let mut dst = &amp;mut data[3..4];\n    dst.copy_from_slice(src);\n}\n</code></pre>\n\n<p>This code does not even get compiled because the borrow checker complains about borrowing <code>data</code> both mutable and immutable at the same time (and it is right).</p>\n\n<p>Is it possible to rewrite the code to compile on stable Rust?</p>\n\n<p>Related questions:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35938561/writing-to-multiple-bytes-efficiently-in-rust\">Writing to multiple bytes efficiently in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28219231/how-to-idiomatically-copy-a-slice\">How to idiomatically copy a slice?</a></li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 306, "user_id": 569173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f748f66f4419fb34553f17c8b08a7131?s=128&d=identicon&r=PG", "display_name": "hutch", "link": "https://stackoverflow.com/users/569173/hutch"}, "edited": false, "score": 0, "creation_date": 1499940868, "post_id": 45070022, "comment_id": 77127756, "body": "You might find this interesting <a href=\"https://chrismorgan.info/blog/rust-fizzbuzz.html\" rel=\"nofollow noreferrer\">chrismorgan.info/blog/rust-fizzbuzz.html</a>"}], "answers": [{"comments": [{"owner": {"reputation": 365, "user_id": 3498886, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/b7e53d3b11d7866d583c8469b96cb00f?s=128&d=identicon&r=PG&f=1", "display_name": "gangwerz", "link": "https://stackoverflow.com/users/3498886/gangwerz"}, "edited": false, "score": 0, "creation_date": 1499911067, "post_id": 45070082, "comment_id": 77113459, "body": "That worked! Thanks, I guess I was over complicating it."}, {"owner": {"reputation": 4201, "user_id": 35054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2489e1bbb7b21422d28f3cec3192257f?s=128&d=identicon&r=PG", "display_name": "dmitry_vk", "link": "https://stackoverflow.com/users/35054/dmitry-vk"}, "edited": false, "score": 2, "creation_date": 1499944024, "post_id": 45070082, "comment_id": 77129874, "body": "As an optimization, one may return Cow instead of String. This will ensure that no dynamic allocation happens if one returns static string."}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": true, "score": 4, "last_activity_date": 1499909840, "creation_date": 1499909840, "answer_id": 45070082, "question_id": 45070022, "link": "https://stackoverflow.com/questions/45070022/return-a-str-rust-lifetimes/45070082#45070082", "title": "Return a str - Rust Lifetimes", "body": "<p>You can't return a <code>&amp;str</code> in this situation, because it would point to the contents of <code>out</code> which goes out of scope at the end of the function. You have to return the String <code>out</code> instead.</p>\n\n<p>Alternatively, if you want to limit allocations, you could return an enum which can be one of:</p>\n\n<pre><code>Pling,\nPlang,\nPlong,\nOther(u64)\n</code></pre>\n\n<p>and then print the response based on the value.</p>\n"}], "owner": {"reputation": 365, "user_id": 3498886, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/b7e53d3b11d7866d583c8469b96cb00f?s=128&d=identicon&r=PG&f=1", "display_name": "gangwerz", "link": "https://stackoverflow.com/users/3498886/gangwerz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 381, "favorite_count": 0, "closed_date": 1499950755, "accepted_answer_id": 45070082, "answer_count": 1, "score": 2, "last_activity_date": 1499950806, "creation_date": 1499909429, "last_edit_date": 1499950806, "question_id": 45070022, "link": "https://stackoverflow.com/questions/45070022/return-a-str-rust-lifetimes", "closed_reason": "Duplicate", "title": "Return a str - Rust Lifetimes", "body": "<p>I am running into some trouble when trying to return a string. I have been trying various ways of defining my variables and return value to try and make it so I can return the string primitive, but I get an array of lifetime related error messages.</p>\n\n<pre><code>pub fn raindrops(int: u64) -&gt; &amp;'a str {\n    let mut out = String::new();\n\n    if int % 3 == 0 {\n        out.push_str(\"Pling\");\n    }\n    if int % 5 == 0 {\n        out.push_str(\"Plang\");\n    }\n    if int % 7 == 0 {\n        out.push_str(\"Plong\");\n    }\n    if out.is_empty() {\n        out.push_str(&amp;format!(\"{}\", int));\n    }\n\n    out.shrink_to_fit();\n\n    return out.as_str();\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0261]: use of undeclared lifetime name `'a`\n --&gt; src/lib.rs:1:32\n  |\n1 | pub fn raindrops(int: u64) -&gt; &amp;'a str {\n  |                                ^^ undeclared lifetime\n\nerror: aborting due to previous error\n\nerror: Could not compile `raindrops`.\nBuild failed, waiting for other jobs to finish...\nerror[E0261]: use of undeclared lifetime name `'a`\n --&gt; src/lib.rs:1:32\n  |\n1 | pub fn raindrops(int: u64) -&gt; &amp;'a str {\n  |                                ^^ undeclared lifetime\n</code></pre>\n"}]