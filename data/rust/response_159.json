[{"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516846618, "post_id": 48432842, "comment_id": 83860758, "body": "Why isn&#39;t the <code>impl&lt;T&gt; Foo for T {}</code> sufficient? I mean, why do you need to implement it specially for <code>&amp;mut</code> references? Do you need another kind of implementation for <code>&amp;&#39;a T</code> as well?"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516909636, "post_id": 48432842, "comment_id": 83894393, "body": "<code>&amp;mut T</code> is not <code>Clone</code>. <code>&amp;mut T</code> does satisfy <code>for T</code> (since &amp;mut T is a type, <code>impl&lt;T&gt; Bar for T</code> also implements Bar for every <code>&amp;mut T</code>). The clone version doesn&#39;t conflict because <code>&amp;mut T</code> is never <code>Clone</code> (you can&#39;t have two mutable references)."}], "answers": [{"tags": [], "owner": {"reputation": 339, "user_id": 9210924, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-4wYHrjZFWfw/AAAAAAAAAAI/AAAAAAAAAEs/Ql3GeOp43dk/photo.jpg?sz=128", "display_name": "Daniel Wilkins", "link": "https://stackoverflow.com/users/9210924/daniel-wilkins"}, "is_accepted": false, "score": 2, "last_activity_date": 1516837560, "creation_date": 1516837560, "answer_id": 48433513, "question_id": 48432842, "link": "https://stackoverflow.com/questions/48432842/implementing-a-trait-for-reference-and-non-reference-types-causes-conflicting-im/48433513#48433513", "title": "Implementing a trait for reference and non reference types causes conflicting implementations", "body": "<p>The reason for the <code>Clone</code> version works is because the types that the trait is being implemented for are no longer conflicting on the implementation. </p>\n\n<p>Take the first example and add a default implementation.</p>\n\n<pre><code>trait Foo {\n    fn hi(&amp;self){\n        println!(\"Hi\");\n    }\n}\n</code></pre>\n\n<p>And then we implement <code>Foo</code> for all of type <code>T</code> with <code>impl&lt;T&gt; Foo for T {}</code> this actually implements enough for us to use a reference to our types and use the <code>Foo</code> trait. For Example:</p>\n\n<pre><code>fn say_hi&lt;'a&gt;(b: &amp;'a mut Foo){\n    b.hi();\n}\n\nfn main(){\n    let mut five = 5;\n\n    five.hi(); // integer using Foo\n    say_hi(&amp;mut five); // &amp;'a mut Foo\n}\n</code></pre>\n\n<p>To answer the second part of you question, you didn't need the second implement of <code>impl&lt;'a,T&gt; Foo for &amp;'a mut T {}</code> because <code>impl&lt;T&gt; Foo for T {}</code> was enough to give you what you were looking for.</p>\n\n<p>Now that we have seen that the first example works without the second implement it starts to make sense that the example using <code>Clone</code> works because you are implementing for a subset of types <code>T</code> that are <code>Clone</code> and a different subset of types <code>&amp;'a mut T</code> that are <code>Clone+static</code></p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 9, "last_activity_date": 1516899381, "last_edit_date": 1516899381, "creation_date": 1516851175, "answer_id": 48435201, "question_id": 48432842, "link": "https://stackoverflow.com/questions/48432842/implementing-a-trait-for-reference-and-non-reference-types-causes-conflicting-im/48435201#48435201", "title": "Implementing a trait for reference and non reference types causes conflicting implementations", "body": "<p>As you have learned, a generic <code>T</code> can be anything\u00b9, so the <code>Foo</code> impls overlap (conflict) whenever <code>T</code> in the first impl is <code>&amp;'a mut U</code>, because the second impl also covers that case (when <code>T</code> is <code>U</code>).</p>\n\n<p>The <code>Clone</code> version works simply because <code>&amp;mut</code> references never implement <code>Clone</code>, so there's no overlap between <code>T where T: Clone</code> and <code>&amp;'a mut T</code>.\u00b2 If you try to implement <code>Bar</code> for immutable (<code>&amp;</code>) references, you will have a conflict again, because immutable references <em>do</em> implement <code>Clone</code>.</p>\n\n<blockquote>\n  <p>[H]ow can I make it work without it?</p>\n</blockquote>\n\n<p>If by \"it\" you mean one implementation for reference types and another, different one for non-reference types, that's not possible in Rust for the same reason you can't implement a trait one way for <code>struct</code>s and another way for <code>enum</code>s: there simply is no way to express it (in current Rust).</p>\n\n<p>One common pattern that <em>might</em> work for you is implementing your trait individually for whatever non-reference types you need, and then adding a \"blanket impl\" that covers any reference to a type for which the trait is already implemented, e.g.:</p>\n\n<pre><code>impl Foo for u32 { ... }\nimpl Foo for i32 { ... }\nimpl&lt;'a, T&gt; Foo for &amp;'a T where T: Foo + 'a { ... }\nimpl&lt;'a, T&gt; Foo for &amp;'a mut T where T: Foo + 'a { ... }\n</code></pre>\n\n<hr>\n\n<p>\u00b9 Well, anything that is <code>Sized</code>, at least. <a href=\"https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean\">You have to add <code>?Sized</code> if that's not what you want.</a></p>\n\n<p>\u00b2 The <code>where T: Clone + 'static</code> clause doesn't matter, because <code>&amp;'a mut T</code> will never be <code>Clone</code> whether <code>T</code> itself is or not.</p>\n"}], "owner": {"reputation": 41, "user_id": 9264612, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f7f4590c0a445f739eae49467aeef9ee?s=128&d=identicon&r=PG&f=1", "display_name": "bearclaw", "link": "https://stackoverflow.com/users/9264612/bearclaw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 902, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1516899381, "creation_date": 1516833357, "last_edit_date": 1516890707, "question_id": 48432842, "link": "https://stackoverflow.com/questions/48432842/implementing-a-trait-for-reference-and-non-reference-types-causes-conflicting-im", "title": "Implementing a trait for reference and non reference types causes conflicting implementations", "body": "<p>I'm trying to create a trait and provide one implementation for all non-reference types, and another for all reference types.</p>\n\n<p>This fails to compile:</p>\n\n<pre><code>trait Foo {}\nimpl&lt;T&gt; Foo for T {}\nimpl&lt;'a, T&gt; Foo for &amp;'a mut T {}\n</code></pre>\n\n<p>This fails with the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `Foo` for type `&amp;mut _`:\n --&gt; src/main.rs:3:1\n  |\n2 | impl&lt;T&gt; Foo for T {}\n  | -------------------- first implementation here\n3 | impl&lt;'a, T&gt; Foo for &amp;'a mut T {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&amp;mut _`\n</code></pre>\n\n<p>Strangely enough, this works:</p>\n\n<pre><code>trait Bar {}\n\nimpl&lt;T&gt; Bar for T\nwhere\n    T: Clone,\n{}\n\nimpl&lt;'a, T&gt; Bar for &amp;'a mut T\nwhere\n    T: Clone + 'static,\n{}\n</code></pre>\n\n<p>Why does the version with the <code>Clone</code> constraint work, and how can I make it work without it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "edited": false, "score": 0, "creation_date": 1572890136, "post_id": 48431339, "comment_id": 103693764, "body": "This is most upvoted but failure and error-chain adding additional complex and not standard traits. Nowadays there are crates that work with just standard rust error handling for example: <a href=\"https://stackoverflow.com/a/53130345/5190508\">custom_error</a> and <a href=\"https://stackoverflow.com/a/58337971/5190508\">thiserror</a>. Could you also include them here?"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 18, "last_activity_date": 1522697790, "last_edit_date": 1522697790, "creation_date": 1516826900, "answer_id": 48431339, "question_id": 48430836, "link": "https://stackoverflow.com/questions/48430836/rust-proper-error-handling-auto-convert-from-one-error-type-to-another-with-que/48431339#48431339", "title": "Rust proper error handling (auto convert from one error type to another with question mark)", "body": "<p>Unfortunately, in your case you cannot create a <code>reqwest::Error</code> from other error types, if the <code>reqwest</code> library does not provide a way to do so (and it likely doesn't). To solve this problem, which is very common, especially in applications which use multiple libraries, the proper solution would be one of the following:</p>\n\n<ol>\n<li><p>Declare your own custom enum with all errors your application works with (or one subsystem of your application; granularity highly depends on the project), and declare <code>From</code> conversions from all errors you work with to this enum type.</p>\n\n<p>As an extension of this approach, you can use <a href=\"https://crates.io/crates/error-chain\" rel=\"noreferrer\"><code>error-chain</code></a> (or <a href=\"https://crates.io/crates/quick-error\" rel=\"noreferrer\"><code>quick-error</code></a>, on which error-chain is basically based) to generate such custom types and conversions in a semi-automatic way.</p></li>\n<li><p>Use a special, generic error type. There are basically two of them:</p>\n\n<p>a. <code>Box&lt;Error&gt;</code> where <a href=\"https://doc.rust-lang.org/std/error/trait.Error.html\" rel=\"noreferrer\"><code>Error</code></a> is defined in the standard library.</p>\n\n<p>b.  Use the <a href=\"https://docs.rs/failure/0.1.1/failure/struct.Error.html\" rel=\"noreferrer\"><code>Error</code></a> type defined in the <a href=\"https://crates.io/crates/failure\" rel=\"noreferrer\"><code>failure</code></a> crate.</p>\n\n<p>Then the question mark operator will be able to convert any compatible error to one of these types because of various <code>Into</code> and <code>From</code> trait implementations.</p></li>\n</ol>\n\n<p>Note that the <code>failure</code> crate is intended to be <em>the</em> way to define errors promoted in the Rust community. Not only does it provide a common error type and trait (which fixes various issues with the <code>std::error::Error</code> trait; see for example <a href=\"https://boats.gitlab.io/blog/post/2017-11-16-announcing-failure/\" rel=\"noreferrer\">here</a>), it also has facilities to define your own error types (for example, with <a href=\"https://crates.io/crates/failure_derive\" rel=\"noreferrer\"><code>failure_derive</code></a>), and for tracking error context, causes and generating backtrace. Additionally, it tries to be as compatible with the existing error handling approaches as possible, therefore it can be used to integrate with libraries which use other, older approaches (<code>std::error::Error</code>, <code>error-chain</code>, <code>quick-error</code>) quite easily. So I strongly suggest you to consider using this crate first, before other options.</p>\n\n<p>I have already started using <code>failure</code> in my application projects, and I just can't express how much easier and nicer error handling has become. My approach is as follows:</p>\n\n<ol>\n<li><p>Define the <code>Result</code> type:</p>\n\n<pre><code>type Result&lt;T&gt; = std::result::Result&lt;T, failure::Error&gt;;\n</code></pre></li>\n<li><p>Use <code>Result&lt;Something&gt;</code> everywhere where an error can be returned, using the question mark operator (<code>?</code>) to convert between errors and functions like <a href=\"https://docs.rs/failure/0.1.1/failure/fn.err_msg.html\" rel=\"noreferrer\"><code>err_msg</code></a> or <a href=\"https://docs.rs/failure/0.1.1/failure/macro.format_err.html\" rel=\"noreferrer\"><code>format_err!</code></a> or <a href=\"https://docs.rs/failure/0.1.1/failure/macro.bail.html\" rel=\"noreferrer\"><code>bail!</code></a> to create my own error messages.</p></li>\n</ol>\n\n<p>I have yet to write a library using <code>failure</code>, but I imagine that for libraries it would be important to create more specific errors declared as an enum, which can be done with the <code>failure_derive</code> crate. For applications, though, the <code>failure::Error</code> type is more than enough.</p>\n"}, {"comments": [{"owner": {"reputation": 101, "user_id": 3425115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/abc0881c5dc28e2856f52fd0093c5bcd?s=128&d=identicon&r=PG&f=1", "display_name": "Paul Houghton", "link": "https://stackoverflow.com/users/3425115/paul-houghton"}, "edited": false, "score": 0, "creation_date": 1588504289, "post_id": 51582421, "comment_id": 108916452, "body": "&#39;failure&#39; has been deprecated. &#39;anyhow&#39; (easier) and &#39;thiserror&#39; (more precise, like for libraries) are preferred modern alternatives. Both are by the same author and can be used together."}], "tags": [], "owner": {"reputation": 11, "user_id": 10151909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8219adaf14cf8edb61bd1825bca68b9d?s=128&d=identicon&r=PG&f=1", "display_name": "Nightsneaker", "link": "https://stackoverflow.com/users/10151909/nightsneaker"}, "is_accepted": false, "score": 1, "last_activity_date": 1577330857, "last_edit_date": 1577330857, "creation_date": 1532882490, "answer_id": 51582421, "question_id": 48430836, "link": "https://stackoverflow.com/questions/48430836/rust-proper-error-handling-auto-convert-from-one-error-type-to-another-with-que/51582421#51582421", "title": "Rust proper error handling (auto convert from one error type to another with question mark)", "body": "<p>As <a href=\"https://stackoverflow.com/a/48431339/155423\">already stated by \nVladimir Matveev</a>, the <a href=\"https://docs.rs/failure/0.1.1/failure/\" rel=\"nofollow noreferrer\">failure</a> crate should be your starting point. Here is my solution:</p>\n\n<pre><code>use std::io;\nuse std::result;\n\nuse failure::{Backtrace, Fail};\n\n/// This is a new error type manged by Oxide library.\n/// The custom derive for Fail derives an impl of both Fail and Display.\n#[derive(Debug, Fail)]\npub enum OxideError {\n    #[fail(display = \"{}\", message)]\n    GeneralError { message: String },\n\n    #[fail(display = \"{}\", message)]\n    IoError {\n        message: String,\n        backtrace: Backtrace,\n        #[cause]\n        cause: io::Error,\n    },\n}\n\n/// Create general error\npub fn general(fault: &amp;str) -&gt; OxideError {\n    OxideError::GeneralError {\n        message: String::from(fault),\n    }\n}\n\n/// Create I/O error with cause and backtrace\npub fn io(fault: &amp;str, error: io::Error) -&gt; OxideError {\n    OxideError::IoError {\n        message: String::from(fault),\n        backtrace: Backtrace::new(),\n        cause: error,\n    }\n}\n</code></pre>\n\n<p>This error enumeration is extendible which allows it to accommodate future modifications that might be made to the program.</p>\n"}, {"comments": [{"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "edited": false, "score": 1, "creation_date": 1541501783, "post_id": 53130345, "comment_id": 93230670, "body": "Oo. Thanks for that crate. I first use failure but now I would like just use standard trait Error and this macro do it super easy way!"}], "tags": [], "owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "is_accepted": false, "score": 4, "last_activity_date": 1541256121, "last_edit_date": 1541256121, "creation_date": 1541240163, "answer_id": 53130345, "question_id": 48430836, "link": "https://stackoverflow.com/questions/48430836/rust-proper-error-handling-auto-convert-from-one-error-type-to-another-with-que/53130345#53130345", "title": "Rust proper error handling (auto convert from one error type to another with question mark)", "body": "<p>In that case, reusing the underlying error type is not possible because you cannot construct its hidden fields. And even when it is possible, I would advise against it, in order to make your code more flexible and future-proof.</p>\n\n<p>Defining custom error types can involve writing a lot of boilerplate, but fortunately several libraries exist to alleviate this pain. <em>failure</em>, <em>error-chain</em> and <em>quick-error</em> were already mentioned above, but I would like to point you to a crate I wrote that involves even less boilerplate than the others : <a href=\"https://crates.io/crates/custom_error\" rel=\"nofollow noreferrer\"><strong>custom_error</strong></a>. With it, you can write:</p>\n\n<pre><code>#[macro_use] extern crate custom_error;\n\ncustom_error!{ MyError\n    Request{source: reqwest::Error} = \"request error\",\n    Url{source: url::ParseError}    = \"invalid url\"\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1158, "user_id": 4956078, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44600007f35ab98b7badbf1110df0687?s=128&d=identicon&r=PG&f=1", "display_name": "JMAA", "link": "https://stackoverflow.com/users/4956078/jmaa"}, "edited": false, "score": 1, "creation_date": 1591809139, "post_id": 58337971, "comment_id": 110200186, "body": "+1 for <code>thiserror</code>, but a quick correction: you use the <code>#[from]</code> attribute to get automatic conversion with the <code>?</code> operator, not <code>#[source]</code> (which is implied by <code>#[from]</code>)"}], "tags": [], "owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "is_accepted": true, "score": 20, "last_activity_date": 1591991962, "last_edit_date": 1591991962, "creation_date": 1570785257, "answer_id": 58337971, "question_id": 48430836, "link": "https://stackoverflow.com/questions/48430836/rust-proper-error-handling-auto-convert-from-one-error-type-to-another-with-que/58337971#58337971", "title": "Rust proper error handling (auto convert from one error type to another with question mark)", "body": "<h2>Update 2020</h2>\n\n<p>The rust programming language is evolving quickly so a new answer can be added! I really liked <a href=\"https://stackoverflow.com/a/53130345/5190508\">custom_error</a> but now I think <a href=\"https://github.com/dtolnay/thiserror\" rel=\"noreferrer\"><code>thiserror</code></a> will be my loved one!</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n</code></pre>\n\n<p>This allow change <code>io::Error</code> to <code>DataStoreError::Disconnect</code> with question mark <code>?</code>. Go here for <a href=\"https://github.com/dtolnay/thiserror#details\" rel=\"noreferrer\">details</a></p>\n\n<p>useful links:</p>\n\n<ul>\n<li><a href=\"https://nick.groenen.me/posts/rust-error-handling/\" rel=\"noreferrer\"><strong>great blog about using <code>thiserror</code> in combine with <code>anyhow</code></strong></a></li>\n</ul>\n\n<hr>\n\n<h2>Other interesting crates:</h2>\n\n<ul>\n<li><a href=\"https://crates.io/crates/anyhow\" rel=\"noreferrer\">anyhow</a> -  Flexible concrete Error type built on std::error::Error </li>\n<li><a href=\"https://crates.io/crates/snafu\" rel=\"noreferrer\">snafu</a> - Situation Normal: All Fouled Up - SNAFU is a library to easily assign underlying errors into domain-specific errors while adding context. (similar to thiserror)</li>\n<li><a href=\"https://crates.io/crates/custom_error\" rel=\"noreferrer\">custom_error</a> - This crate contains a <strong>macro</strong> that should make it easier to define custom errors without having to write a lot of boilerplate code.</li>\n</ul>\n\n<h3>for panics:</h3>\n\n<ul>\n<li><a href=\"https://crates.io/crates/proc-macro-error\" rel=\"noreferrer\">proc-macro-error</a> - This crate aims to make error reporting in proc-macros simple and easy to use.</li>\n<li><a href=\"https://crates.io/crates/human-panic\" rel=\"noreferrer\">human-panic</a> - Panic messages for humans. Handles panics by calling std::panic::set_hook to make errors nice for humans.</li>\n</ul>\n"}], "owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12924, "favorite_count": 7, "accepted_answer_id": 58337971, "answer_count": 4, "score": 25, "last_activity_date": 1607565691, "creation_date": 1516824724, "last_edit_date": 1516895296, "question_id": 48430836, "link": "https://stackoverflow.com/questions/48430836/rust-proper-error-handling-auto-convert-from-one-error-type-to-another-with-que", "title": "Rust proper error handling (auto convert from one error type to another with question mark)", "body": "<p>I want to learn how to properly deal with errors in Rust. I have read the <a href=\"https://doc.rust-lang.org/book/second-edition/ch09-02-recoverable-errors-with-result.html\" rel=\"noreferrer\">book</a> and <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html#examples\" rel=\"noreferrer\">this example</a>; now I would like to know how I should deal with errors in this function:</p>\n\n<pre><code>fn get_synch_point(&amp;self) -&gt; Result&lt;pv::synch::MeasPeriods, reqwest::Error&gt; {\n    let url = self.root.join(\"/term/pv/synch\"); // self.root is url::Url\n    let url = match url {\n        Ok(url) =&gt; url,\n        // ** this err here is url::ParseError and can be converted to Error::Kind https://docs.rs/reqwest/0.8.3/src/reqwest/error.rs.html#54-57 **//\n        Err(err) =&gt; {\n            return Err(Error {\n                kind: ::std::convert::From::from(err),\n                url: url.ok(),\n            })\n        }\n    };\n\n    Ok(reqwest::get(url)?.json()?) //this return reqwest::Error or convert to pv::sych::MeasPeriods automaticly\n}      \n</code></pre>\n\n<p>This code is improper; it causes a compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0451]: field `kind` of struct `reqwest::Error` is private\n  --&gt; src/main.rs:34:42\n   |\n34 |             Err(err) =&gt; return Err(Error{kind: ::std::convert::From::from(err), url: url.ok()})\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `kind` is private\n\nerror[E0451]: field `url` of struct `reqwest::Error` is private\n  --&gt; src/main.rs:34:81\n   |\n34 |             Err(err) =&gt; return Err(Error{kind: ::std::convert::From::from(err), url: url.ok()})\n   |                                                                                 ^^^^^^^^^^^^^ field `url` is private\n</code></pre>\n\n<p>What is a proper pattern to deal with that case? For me, <code>reqwest::Error</code> in this case is a good solution so I would like to avoid defining my own error type:</p>\n\n<pre><code>enum MyError {\n    Request(reqwest::Error),\n    Url(url::ParseError) // this already a part of request::Error::Kind!!!\n} \n</code></pre>\n"}, {"tags": ["rust", "llvm", "llvm-clang"], "comments": [{"owner": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "edited": false, "score": 0, "creation_date": 1516823585, "post_id": 48430136, "comment_id": 83851943, "body": "You need to link Rust&#39;s libraries. See <a href=\"https://stackoverflow.com/a/42626498/598057\">this</a> for inspiration."}, {"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1516824539, "post_id": 48430136, "comment_id": 83852467, "body": "Use <code>-l</code> flag to actually link libraries."}, {"owner": {"reputation": 163, "user_id": 4714610, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-UE2GMU-nrT8/AAAAAAAAAAI/AAAAAAAAAHk/V10JOKR1StQ/photo.jpg?sz=128", "display_name": "Jon Catanio", "link": "https://stackoverflow.com/users/4714610/jon-catanio"}, "reply_to_user": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "edited": false, "score": 0, "creation_date": 1516833242, "post_id": 48430136, "comment_id": 83856867, "body": "@StanislavPankevich hmm, seems like that didn&#39;t work for me I did <code>clang -L&#47;Users&#47;JonCatanio&#47;.rustup&#47;toolchains&#47;&lt;arch&gt;&#47;lib test.ll -lstd-826c8d3b356e180c</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516891794, "post_id": 48430136, "comment_id": 83883001, "body": "<i>Why</i> use LLVM IR instead of just creating an object file and linking it as normal?"}, {"owner": {"reputation": 163, "user_id": 4714610, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-UE2GMU-nrT8/AAAAAAAAAAI/AAAAAAAAAHk/V10JOKR1StQ/photo.jpg?sz=128", "display_name": "Jon Catanio", "link": "https://stackoverflow.com/users/4714610/jon-catanio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1516997727, "post_id": 48430136, "comment_id": 83931490, "body": "@Shepmaster I was writing a library in Rust that provides an FFI allowing custom LLVM to call into Rust. I&#39;m working on writing a compiler for Python in Rust and wanted to offload some of the work to a library so I don&#39;t have to generate a ton of LLVM. I realize now that I wasn&#39;t approaching it properly and found these as reference to help me:  <a href=\"http://zsiciarz.github.io/24daysofrust/book/vol1/day23.html\" rel=\"nofollow noreferrer\">tutorial</a> <a href=\"https://doc.rust-lang.org/book/first-edition/ffi.html\" rel=\"nofollow noreferrer\">FFI info in the Rust book</a>"}], "owner": {"reputation": 163, "user_id": 4714610, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-UE2GMU-nrT8/AAAAAAAAAAI/AAAAAAAAAHk/V10JOKR1StQ/photo.jpg?sz=128", "display_name": "Jon Catanio", "link": "https://stackoverflow.com/users/4714610/jon-catanio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 328, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1516823412, "creation_date": 1516821797, "last_edit_date": 1516823412, "question_id": 48430136, "link": "https://stackoverflow.com/questions/48430136/running-llvm-file-generated-with-rustc-with-clang", "title": "Running LLVM file, generated with rustc, with clang", "body": "<p>I'm trying to run a <code>.ll</code> file with clang and getting linker errors. I have a file <code>test.rs</code> that simply includes a main function with a <code>println!</code> statement. I generate the LLVM IR with the command <code>rustc --emit=llvm-ir --crate-type=bin test.rs</code>. When I try to run the output <code>test.ll</code> file with <code>clang test.ll</code> I get a linker error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Undefined symbols for architecture x86_64:\n  \"std::io::stdio::_print::h178318b95760562a\", referenced from:\n      rust_test::main::h84a9713c734a1b45 in rust_test-9ea667.o\n  \"_main\", referenced from:\n     implicit entry/start for main executable\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n\n<p>So I figured clang couldn't find the Rust libraries and attempted to provide a path to them with the command <code>clang -L$HOME/.rustup/toolchains/&lt;arch&gt;/lib test.ll</code> but I receive the same error.</p>\n\n<hr>\n\n<p>The goal here is to create a couple functions in Rust that I will call from LLVM, so I'll have a custom <code>file.ll</code> that will use functions that the Rust LLVM IR will provide. I noticed that <code>rustc</code> has a <code>crate-type</code> command-line argument called <code>staticlib</code> and tried to use that as well but to no avail.</p>\n"}, {"tags": ["c++", "opencv", "rust", "ffi"], "comments": [{"owner": {"reputation": 23093, "user_id": 7359094, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/HxJgU.jpg?s=128&g=1", "display_name": "Fran&#231;ois Andrieux", "link": "https://stackoverflow.com/users/7359094/fran%c3%a7ois-andrieux"}, "edited": false, "score": 0, "creation_date": 1516820525, "post_id": 48429742, "comment_id": 83850178, "body": "I would strongly recommend templates instead of macros for <code>Result</code>. A simple templated <code>struct</code>, with a type alias would work just fine. It&#39;s also not necessary to <code>typedef struct</code> in c++. <code>struct</code> are implicitly proper type names."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 23093, "user_id": 7359094, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/HxJgU.jpg?s=128&g=1", "display_name": "Fran&#231;ois Andrieux", "link": "https://stackoverflow.com/users/7359094/fran%c3%a7ois-andrieux"}, "edited": false, "score": 0, "creation_date": 1516820619, "post_id": 48429742, "comment_id": 83850230, "body": "@Fran&#231;oisAndrieux IIRC templates cannot be used in <code>extern C</code> interfaces. See <a href=\"https://stackoverflow.com/questions/4877705/why-cant-templates-be-within-extern-c-blocks\" title=\"why cant templates be within extern c blocks\">stackoverflow.com/questions/4877705/&hellip;</a>"}, {"owner": {"reputation": 23093, "user_id": 7359094, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/HxJgU.jpg?s=128&g=1", "display_name": "Fran&#231;ois Andrieux", "link": "https://stackoverflow.com/users/7359094/fran%c3%a7ois-andrieux"}, "edited": false, "score": 0, "creation_date": 1516820699, "post_id": 48429742, "comment_id": 83850265, "body": "I hadn&#39;t noticed it was <code>extern C</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1516820859, "post_id": 48429742, "comment_id": 83850346, "body": "The documentation on <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.from_raw\" rel=\"nofollow noreferrer\"><code>CString::from_raw</code></a> already answers the first part of the question: <i>&quot;This should only ever be called with a pointer that was earlier obtained by calling into_raw on a <code>CString</code>&quot;</i>. This question is then narrowed down to returning an owning string from C into Rust code."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1516821007, "post_id": 48429742, "comment_id": 83850421, "body": "@E_net4 when I saw OpenCV examples from documentation (<a href=\"https://docs.opencv.org/2.4/modules/core/doc/intro.html#error-handling\" rel=\"nofollow noreferrer\">link</a>) I didn&#39;t see they free <code>e.what()</code> so probably it&#39;s a static string which can be safely converted into <code>CStr</code>. But i&#39;m not sure. However, I see your point, good catch."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1516821368, "post_id": 48429742, "comment_id": 83850625, "body": "In C++, exceptions and their contents are already freed automatically. The <code>what</code> member function usually either returns a static string or returns a pointer to a string that was previously built and kept as a member of the exception. In OpenCV, it seems to be the latter. I&#39;m afraid that it is not safe to return that pointer in particular."}, {"owner": {"reputation": 52656, "user_id": 225074, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/dea26ac1ef8259140d28aa8b5ba4f1b3?s=128&d=identicon&r=PG", "display_name": "Thomas Matthews", "link": "https://stackoverflow.com/users/225074/thomas-matthews"}, "edited": false, "score": 1, "creation_date": 1516822082, "post_id": 48429742, "comment_id": 83851039, "body": "Are <code>try</code>/<code>catch</code> allowed in <code>extern &quot;C&quot;</code> sections since <code>try</code> and <code>catch</code> are not in the C language?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 52656, "user_id": 225074, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/dea26ac1ef8259140d28aa8b5ba4f1b3?s=128&d=identicon&r=PG", "display_name": "Thomas Matthews", "link": "https://stackoverflow.com/users/225074/thomas-matthews"}, "edited": false, "score": 0, "creation_date": 1516822160, "post_id": 48429742, "comment_id": 83851080, "body": "@ThomasMatthews I think it&#39;s ok since it isn&#39;t used in public API."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1516822279, "post_id": 48429742, "comment_id": 83851148, "body": "Can you check whether that <code>return ResultDouble{value: cv::someOpenCvMethod(), message: nullptr};</code> compiles? I don&#39;t think naming the arguments like that is valid C++."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1516822547, "post_id": 48429742, "comment_id": 83851291, "body": "@E_net4 i&#39;m sure it does and I actually get the error message on rust side: <code>running 1 test OpenCV Error: Assertion failed (A.size == arrays[i0]-&gt;size) in init, file C:\\Users\\Alex\\Documents\\foo\\opencv\\modules\\core\\src\\matrix.c&zwnj;&#8203;pp, line 4845 error: test failed, to rerun pass &#39;--test test_imgproc&#39; </code>. I think it&#39;s works because of gcc, see <a href=\"https://stackoverflow.com/a/14101575/2559709\">link</a>"}, {"owner": {"reputation": 374849, "user_id": 734069, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a356923f858fbe363dad1dc566837fc6?s=128&d=identicon&r=PG", "display_name": "Nicol Bolas", "link": "https://stackoverflow.com/users/734069/nicol-bolas"}, "edited": false, "score": 2, "creation_date": 1516824315, "post_id": 48429742, "comment_id": 83852364, "body": "@AlexZhukovskiy: That&#39;s not C initializer syntax. Designated initializers would look like <code>{.value = ..., .message = ...}</code>."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1516824951, "post_id": 48430677, "comment_id": 83852667, "body": "If you want C-strings, I suggest you use C-like code instead. The entire catch clause can be rewritten: <code>return ResultDouble{0, std::strdup(e.what())};</code>, then you have to rewrite the body of <code>free_result</code> to <code>std::free(res-&gt;message);</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1516825023, "post_id": 48430677, "comment_id": 83852708, "body": "The <code>str_slice</code> you create on the Rust side is never used... I think it&#39;s a left-over. Or that there is a mix-up as <code>s</code> is not a <code>String</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1516825783, "post_id": 48430677, "comment_id": 83853112, "body": "@MatthiewM I deliberately avoided <code>strdup</code> because it is not ISO C (although it should work in practice, all right). As for the <code>str_slice </code>, yep, I meant to return it instead of <code>s</code>. That&#39;s fixed."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1516829861, "post_id": 48430677, "comment_id": 83855183, "body": "@E_net4 nice one. However, your <code>exercise to the reader</code> has been already solved in the question :)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1516829997, "post_id": 48430677, "comment_id": 83855248, "body": "@AlexZhukovskiy Well, yet another reason to omit the solution here for brevity. :)"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 7, "last_activity_date": 1520602935, "last_edit_date": 1520602935, "creation_date": 1516823930, "answer_id": 48430677, "question_id": 48429742, "link": "https://stackoverflow.com/questions/48429742/map-c-exceptions-to-result/48430677#48430677", "title": "Map C++ exceptions to Result", "body": "<blockquote>\n  <ol>\n  <li>Is it ok that I use *const char on C++ side but *mut c_char on Rust one? I need it because CString::from_raw requires mutable reference.</li>\n  </ol>\n</blockquote>\n\n<p>The documentation on <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.from_raw\" rel=\"nofollow noreferrer\"><code>CString::from_raw</code></a> already answers the first part of the question:</p>\n\n<blockquote>\n  <p>\"This should only ever be called with a pointer that was earlier obtained by calling into_raw on a <code>CString</code>\".</p>\n</blockquote>\n\n<p>Attempting to use a pointer to a string which was not created by <code>CString</code> is inappropriate here, and will eat your laundry.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Should I use CStr instead? If yes, how should I manage its lifetime? Should I free this memory or maybe it has static lifetime?</li>\n  </ol>\n</blockquote>\n\n<p>If the returned C-style string is guaranteed to have a static lifetime (as in, it has <a href=\"http://en.cppreference.com/w/c/language/storage_duration\" rel=\"nofollow noreferrer\">static duration</a>), then you could create a <code>&amp;'static CStr</code> from it and return that. However, this is not the case: <a href=\"https://docs.opencv.org/3.3.1/d1/dee/classcv_1_1Exception.html\" rel=\"nofollow noreferrer\"><code>cv::Exception</code></a> contains multiple members, some of which are owning string objects. Once the program leaves the scope of <code>myFunc</code>, the caught exception object <code>e</code> is destroyed, and so, anything that came from <code>what()</code> is invalidated.</p>\n\n<pre><code>        const char* err_msg = e.what();\n        return ResultDouble{0, err_msg}; // oops! a dangling pointer is returned\n</code></pre>\n\n<p>While it is possible to transfer values across the FFI boundary, the responsibility of ownership should always stay at the source of that value. In other words, if the C++ code is creating exceptions and we want to provide that information to Rust code, then it's the C++ code that must retain that value and free it in the end. I took the liberty of choosing one possible approach below.</p>\n\n<p>By following <a href=\"https://stackoverflow.com/q/9593798/1233251\">this question on duplicating C strings</a>, we can reimplement <code>myFunc</code> to store the string in a dynamically allocated array:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;cstring&gt;\n\nResultDouble myFunc() \n{\n    try\n    {\n        return ResultDouble{value: cv::someOpenCvMethod(), message: nullptr};\n    }\n    catch( cv::Exception&amp; e )\n    {\n        const char* err_msg = e.what();\n        auto len = std::strlen(err_msg);\n        auto retained_err = new char[len + 1];\n        std::strcpy(retained_err, err_msg);\n        return ResultDouble{value: 0, message: retained_err};\n    }\n}\n</code></pre>\n\n<p>This makes it so that we are returning a pointer to valid memory. Then, a new public function will have to be exposed to free the result:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>// in extern \"C\"\nvoid free_result(ResultDouble* res) {\n    delete[] res-&gt;message;\n}\n</code></pre>\n\n<p>In Rust-land, we'll retain a copy of the same string with the approach described in <a href=\"https://stackoverflow.com/q/24145823/1233251\">this question</a>. Once that is done, we no longer need the contents of <code>result</code>, and so it can be freed with an FFI function call to <code>free_result</code>. Handling the outcome of <code>to_str()</code> without <code>unwrap</code> is left as an exercise to the reader.</p>\n\n<pre><code>extern \"C\" {\n    fn myFunc() -&gt; CResult&lt;c_double&gt;;\n    fn free_result(res: *mut CResult&lt;c_double&gt;);\n}\n\npub fn my_func() -&gt; Result&lt;f64, String&gt; {\n    let result = unsafe {\n        myFunc()\n    };\n    if result.message.is_null() {\n        Ok(result.value)\n    } else {\n        unsafe {\n            let s = std::ffi::CStr::from_ptr(result.message);\n            let str_slice: &amp;str = c_str.to_str().unwrap();\n            free_result(&amp;mut result);\n            Err(str_slice.to_owned())\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 323, "favorite_count": 2, "accepted_answer_id": 48430677, "answer_count": 1, "score": 4, "last_activity_date": 1520602935, "creation_date": 1516820230, "last_edit_date": 1517305886, "question_id": 48429742, "link": "https://stackoverflow.com/questions/48429742/map-c-exceptions-to-result", "title": "Map C++ exceptions to Result", "body": "<p>I'm writing a Rust library which is a wrapper over a C++ library.</p>\n\n<p>Here is the C++ side:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#define Result(type,name) typedef struct { type value; const char* message; } name\n\nextern \"C\" \n{\n    Result(double, ResultDouble);\n\n    ResultDouble myFunc() \n    {\n        try\n        {\n            return ResultDouble{value: cv::someOpenCvMethod(), message: nullptr};\n        }\n        catch( cv::Exception&amp; e )\n        {\n            const char* err_msg = e.what();\n            return ResultDouble{value: 0, message: err_msg};\n        }\n    }\n}\n</code></pre>\n\n<p>and corresponding Rust side:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\nstruct CResult&lt;T&gt; {\n    value: T,\n    message: *mut c_char,\n}\n\nextern \"C\" {\n    fn myFunc() -&gt; CResult&lt;c_double&gt;;\n}\n\npub fn my_func() -&gt; Result&lt;f64, Cow&lt;'static, str&gt;&gt; {\n    let result = unsafe { myFunc() };\n    if result.message.is_null() {\n        Ok(result.value)\n    } else {\n        unsafe {\n            let str = std::ffi::CString::from_raw(result.message);\n            let err = match str.into_string() {\n                Ok(message) =&gt; message.into(),\n                _ =&gt; \"Unknown error\".into(),\n            };\n            Err(err)\n        }\n    }\n}\n</code></pre>\n\n<p>I have two questions here:</p>\n\n<ol>\n<li>Is it ok that I use <code>*const char</code> on C++ side but <code>*mut c_char</code> on Rust one? I need it because <code>CString::from_raw</code> requires mutable reference.</li>\n<li>Should I use <code>CStr</code> instead? If yes, how should I manage its lifetime? Should I free this memory or maybe it has static lifetime?</li>\n</ol>\n\n<p>Generally I just want to map a C++ exception which occurs in FFI call to Rust <code>Result&lt;T,E&gt;</code></p>\n\n<p>What is the idiomatic way to do it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 2, "creation_date": 1516790962, "post_id": 48420218, "comment_id": 83830674, "body": "Maybe rather than returning a tuple, return a struct with <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> inside it, and then have that struct hold the reference? There may well be a more idiomatic way to implement this, though."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 5, "creation_date": 1516796056, "post_id": 48420218, "comment_id": 83833885, "body": "<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>Vec::split_at_mut</code></a> will be a first step."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516802425, "post_id": 48420218, "comment_id": 83838020, "body": "Good performing matrices do not use <code>Vec&lt;Vec&lt;T&gt;&gt;</code>, instead they use a <code>Vec&lt;T&gt;</code> to avoid extra indirection."}, {"owner": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 1, "creation_date": 1516803525, "post_id": 48420218, "comment_id": 83838773, "body": "Matrix implementation can be implemented with a  <i>single</i> vector, and access to quadrants make by computing right index based on required column and row."}], "answers": [{"tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": false, "score": 0, "last_activity_date": 1516802291, "last_edit_date": 1516802291, "creation_date": 1516798693, "answer_id": 48423104, "question_id": 48420218, "link": "https://stackoverflow.com/questions/48420218/how-to-implement-multiple-mutable-borrows-of-a-vector-in-rust/48423104#48423104", "title": "How to implement multiple mutable borrows of a vector in Rust?", "body": "<p>Safe Rust does not allow to have multiple mutable bindings at once. This is implemented with checking the binding type (whether it is mutable) and counting. The compiler is not so smart to understand your intentions fully and so it can be told that the slices you use will never intersect. By having multiple mutable references in your code, even to different parts of the data, you still violate the rule.</p>\n\n<p>As a solution it is possible to have one reference and indexes which will give you quadrant data: its <code>begin</code> and <code>end</code> indexes, or just <code>begin</code> and <code>count</code>:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3b85cc2936f15a6294f63ecf5214d2f7&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre><code>pub struct SliceMut&lt;'a, T: 'a&gt; {\n    matrix: &amp;'a mut Matrix&lt;T&gt;,\n    quadrants: Vec&lt;(Range&lt;usize&gt;, Range&lt;usize&gt;)&gt;,\n}\n\nfn quadrants_mut&lt;'a, T&gt;(matrix: &amp;'a mut Matrix&lt;T&gt;) -&gt; SliceMut&lt;'a, T&gt; {\n    let (rows, cols) = matrix.dim();\n\n    let mid_rows = rows / 2;\n    let mid_cols = cols / 2;\n\n    SliceMut {\n        matrix: matrix,\n        quadrants: vec![\n            (0..0, mid_rows..mid_cols),\n            (0..mid_rows, mid_cols..cols),\n            (mid_rows..rows, 0..mid_cols),\n            (mid_rows..rows, mid_cols..cols),\n        ],\n    }\n}\n</code></pre>\n\n<p>As for <code>split_at_mut</code>, it uses unsafe Rust and implemented <a href=\"https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src/libcore/slice/mod.rs#L452\" rel=\"nofollow noreferrer\">as the following</a>:</p>\n\n<pre><code>#[inline]\nfn split_at_mut(&amp;mut self, mid: usize) -&gt; (&amp;mut [T], &amp;mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n\n    unsafe {\n        assert!(mid &lt;= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 0, "last_activity_date": 1516802393, "last_edit_date": 1516802393, "creation_date": 1516799174, "answer_id": 48423262, "question_id": 48420218, "link": "https://stackoverflow.com/questions/48420218/how-to-implement-multiple-mutable-borrows-of-a-vector-in-rust/48423262#48423262", "title": "How to implement multiple mutable borrows of a vector in Rust?", "body": "<p>What you want to do, is definitely possible. However it's hard. <strong><em>Really</em></strong> hard. </p>\n\n<p>Luckily, I'll only show how to do the easy part.</p>\n\n<hr>\n\n<p>If you look at how <a href=\"https://doc.rust-lang.org/src/core/slice/mod.rs.html#71-227\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a> is implemented, you can notice it requires you to create a parallel structure that mimics return value of <code>quadrants_mut</code> (i.e. <code>SliceMut</code>):</p>\n\n<pre><code>pub struct SliceMut&lt;'a, T: 'a&gt; {\n    matrix: &amp;'a mut Matrix&lt;T&gt;,\n    start: (usize, usize),\n    end: (usize, usize),\n}\n\n#[repr(C)]\nstruct MatrixRaw&lt;T&gt; {\n    data: *const Matrix&lt;T&gt;,\n    start: (usize, usize),\n    end: (usize, usize),\n}\n</code></pre>\n\n<p>Note the similarity between these two structures. If at any point they diverge, your <code>mem::transmute</code> will either stop working, or your safe code will experience segfaults.</p>\n\n<p>Then we create a method that transmutes <code>MatrixRaw</code> into <code>SliceMut</code>.</p>\n\n<pre><code>#[inline]\npub unsafe fn from_raw_mat_mut&lt;'a, T&gt;(\n    p: *mut Matrix&lt;T&gt;,\n    start: (usize, usize),\n    end: (usize, usize),\n) -&gt; SliceMut&lt;'a, T&gt; {\n    mem::transmute(MatrixRaw {\n        data: p,\n        start: start,\n        end: end,\n    })\n}\n</code></pre>\n\n<p>As a last step, we add an <code>unsafe</code> block to <code>quadrant_mut</code>:</p>\n\n<pre><code>unsafe {\n    let a = from_raw_mat_mut(matrix, (0, 0), (mid_rows, mid_cols));\n    let b = from_raw_mat_mut(matrix, (0, mid_rows), (mid_cols, cols));\n    let c = from_raw_mat_mut(matrix, (mid_rows, rows), (0, mid_cols));\n    let d = from_raw_mat_mut(matrix, (mid_rows, rows), (mid_cols, cols));\n\n    (a, b, c, d)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ff619d99e0717a5af38b87901df66c0c&amp;version=stable\" rel=\"nofollow noreferrer\">Link to playground</a></p>\n\n<hr>\n\n<p>HARD PART: Here comes the hard part - making sure your methods, and iterators, don't accidentally invalidate your data and invariants. This is extremely hard to achieve in the <code>Matrix</code> case. </p>\n\n<p>Why? Well, because there isn't a nice way to say to your data, \"don't touch these parts\" like you can with an array. With an array, you just offset your data and you're pretty much good to go. But a <code>Matrix</code>? It's not impossible, but I suspect I don't know of a way that doesn't introduce performance penalties.</p>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1420, "favorite_count": 0, "closed_date": 1516799931, "answer_count": 2, "score": 2, "last_activity_date": 1516802393, "creation_date": 1516789799, "last_edit_date": 1516799880, "question_id": 48420218, "link": "https://stackoverflow.com/questions/48420218/how-to-implement-multiple-mutable-borrows-of-a-vector-in-rust", "closed_reason": "Duplicate", "title": "How to implement multiple mutable borrows of a vector in Rust?", "body": "<p>I am implementing matrices in Rust. The code is adapted for the example, but there might be minor mistakes:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\npub struct Matrix&lt;T&gt; {\n    inner: Vec&lt;Vec&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; Matrix&lt;T&gt; {\n    pub fn dim(&amp;self) -&gt; (usize, usize) {\n        if self.inner.len() == 0 {\n            (0, 0)\n        } else {\n            (self.inner.len(), self.inner[0].len())\n        }\n    }\n}\n</code></pre>\n\n<p>I want to have the ability to get quadrants of the matrix:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+----+----+\n| Q1 | Q2 |\n+----+----+\n| Q3 | Q4 |\n+----+----+\n</code></pre>\n\n<p>I introduced the <code>Slice</code> and <code>SliceMut</code> structures to borrow a part of the matrix:</p>\n\n<pre><code>pub struct Slice&lt;'a, T: 'a&gt; {\n    matrix: &amp;'a Matrix&lt;T&gt;,\n    start: (usize, usize),\n    end: (usize, usize),\n}\n\npub struct SliceMut&lt;'a, T: 'a&gt; {\n    matrix: &amp;'a mut Matrix&lt;T&gt;,\n    start: (usize, usize),\n    end: (usize, usize),\n}\n</code></pre>\n\n<p>Now I want to implement two functions: </p>\n\n<ul>\n<li><code>quadrants</code> - to get a tuple of four slices</li>\n<li><code>quadrants_mut</code> - to get a tuple of four mutable slices</li>\n</ul>\n\n<p>I cannot mutably borrow one matrix several times in <code>quadrants_mut</code>:</p>\n\n<pre><code>fn quadrants_mut&lt;'a, T&gt;(matrix: &amp;'a mut Matrix&lt;T&gt;) -&gt; (SliceMut&lt;'a, T&gt;, SliceMut&lt;'a, T&gt;, SliceMut&lt;'a, T&gt;, SliceMut&lt;'a, T&gt;) {\n    let (rows, cols) = matrix.dim();\n\n    let mid_rows = rows / 2;\n    let mid_cols = cols / 2;\n\n    let a = SliceMut { matrix: matrix, start: (0, 0), end: (mid_rows, mid_cols) };\n    let b = SliceMut { matrix: matrix, start: (0, mid_rows), end: (mid_cols, cols) };\n    let c = SliceMut { matrix: matrix, start: (mid_rows, rows), end: (0, mid_cols) };\n    let d = SliceMut { matrix: matrix, start: (mid_rows, rows), end: (mid_cols, cols) };\n\n    (a, b, c, d)\n}\n</code></pre>\n\n<p>When I try to compile that, I have an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*matrix` as mutable more than once at a time\n  --&gt; src/matrix/slice.rs:62:13\n   |\n59 |     let a = SliceMut { matrix: matrix, start: (0, 0), end: (mid_rows, mid_cols) };\n   |                        ------ first mutable borrow occurs here\n...\n60 |     let b = SliceMut { matrix: matrix, start: (0, mid_rows), end: (mid_cols, cols) };\n   |                        ^^^^^^ second mutable borrow occurs here\n...\n66 | }\n</code></pre>\n\n<p>I am trying to mutably borrow a matrix four times. How should I change the code to make it compile?</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 2, "creation_date": 1516788009, "post_id": 48419142, "comment_id": 83828770, "body": "If <code>source</code> is not deserialized, what should Serde put in it when deserializing a <code>Flow</code>?"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516790551, "post_id": 48419142, "comment_id": 83830439, "body": "Yes, I understand the need. I&#39;m just wondering the best way to comply: ask Url to implement Default (an enhancement request), or is there some way to derive it? or do I have to implement default for Url, or other solution."}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1516791984, "post_id": 48419142, "comment_id": 83831343, "body": "You&#39;d have to implement <code>Default</code> for <code>Flow</code>, not <code>Url</code>, as <a href=\"https://doc.rust-lang.org/error-index.html#E0117\" rel=\"nofollow noreferrer\">you can&#39;t implement traits that aren&#39;t local to your crate for types that aren&#39;t local to your crate</a>. For <code>Url</code> to implement <code>Default</code>, the <code>url</code> crate would need to be changed."}, {"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 4, "creation_date": 1516795720, "post_id": 48419142, "comment_id": 83833675, "body": "You can use an <code>Option&lt;Url&gt;</code> instead."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1516801593, "post_id": 48419142, "comment_id": 83837442, "body": "I had thought about Option as a workaround, just that the field (later on) is not optional - but that&#39;s a possibility. thanks for reminding me."}], "answers": [{"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 1, "creation_date": 1516802326, "post_id": 48423496, "comment_id": 83837949, "body": "Sounds interesting - let me see if I can use that!"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 1, "creation_date": 1516829153, "post_id": 48423496, "comment_id": 83854808, "body": "There are multiple ways to solve my problem I guess, but this is the one that leads to least extra code, delegates the most (possible) to serde, and is most obvious what the extra stuff is for - so selecting as the answer. thanks."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 11, "last_activity_date": 1516799976, "creation_date": 1516799976, "answer_id": 48423496, "question_id": 48419142, "link": "https://stackoverflow.com/questions/48419142/how-to-avoid-serde-needing-the-default-trait-for-a-field-that-skips-serializatio/48423496#48423496", "title": "How to avoid Serde needing the Default trait for a field that skips serialization?", "body": "<p>You can use <a href=\"https://serde.rs/field-attrs.html#serdedefault--path\" rel=\"noreferrer\"><code>#[serde(default = \"path\")]</code></a> on the field to give a function with the signature <code>fn() -&gt; Url</code> that should be called if the field is missing.</p>\n"}, {"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1516805659, "post_id": 48424102, "comment_id": 83840421, "body": "Sure, I&#39;d like to avoid having to do that and leverage Serde for deserialization. Thanks for mentioning though."}, {"owner": {"reputation": 8515, "user_id": 44014, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a1ac7908dc7ba59d1d73494b1dd39920?s=128&d=identicon&r=PG", "display_name": "Zargony", "link": "https://stackoverflow.com/users/44014/zargony"}, "reply_to_user": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 1, "creation_date": 1516836878, "post_id": 48424102, "comment_id": 83858168, "body": "Sure this is the most inconvenient option, but also the most flexible one (and one that&#39;s often overseen, so I just wanted to mention it for the sake of completeness)"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1517065069, "post_id": 48424102, "comment_id": 83947180, "body": "Hmm... it looks like I might need to go this route, as I am deserializing some files that have relative urls in them, so I need to set the base for Url::parse() to deserialize them into an absolute url...."}], "tags": [], "owner": {"reputation": 8515, "user_id": 44014, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a1ac7908dc7ba59d1d73494b1dd39920?s=128&d=identicon&r=PG", "display_name": "Zargony", "link": "https://stackoverflow.com/users/44014/zargony"}, "is_accepted": false, "score": 1, "last_activity_date": 1516801823, "creation_date": 1516801823, "answer_id": 48424102, "question_id": 48419142, "link": "https://stackoverflow.com/questions/48419142/how-to-avoid-serde-needing-the-default-trait-for-a-field-that-skips-serializatio/48424102#48424102", "title": "How to avoid Serde needing the Default trait for a field that skips serialization?", "body": "<p>It's also possible to <a href=\"https://serde.rs/impl-deserialize.html\" rel=\"nofollow noreferrer\">implement <code>Deserialize</code></a> yourself and handle missing values appropriately.</p>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 540, "favorite_count": 0, "accepted_answer_id": 48423496, "answer_count": 2, "score": 7, "last_activity_date": 1516801823, "creation_date": 1516786800, "last_edit_date": 1516799226, "question_id": 48419142, "link": "https://stackoverflow.com/questions/48419142/how-to-avoid-serde-needing-the-default-trait-for-a-field-that-skips-serializatio", "title": "How to avoid Serde needing the Default trait for a field that skips serialization?", "body": "<p>I have this struct that is created by deserializing with Serde and I want to have a field of type <code>Url</code> in it which is not deserialized:</p>\n\n<pre><code>#[derive(Deserialize, Debug)]\npub struct Flow {\n    #[serde(skip_deserializing)]\n    pub source: Url,\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2c8d2f2301578e64c7252607a92ca5cd&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<p>Serde complains about <code>Url</code> not satisfying the <code>Default</code> trait. I have tried with and without deriving <code>Default</code>. Is my only option for me to implement the <code>Default</code> trait for <code>Url</code> myself?</p>\n"}, {"tags": ["rust", "allocation"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516803493, "post_id": 48417884, "comment_id": 83838755, "body": "For personal interest, what documentation are you referring to? For instance, I don&#39;t know why you picked <code>System</code> instead of <code>Heap</code>."}, {"owner": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516815814, "post_id": 48417884, "comment_id": 83847661, "body": "@trentcl <a href=\"https://doc.rust-lang.org/1.20.0/std/heap/index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.20.0/std/heap/index.html</a> It was not immediately obvious, that Heap would have default(). Looks like I should use Heap::default()"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1516784225, "creation_date": 1516784225, "answer_id": 48418377, "question_id": 48417884, "link": "https://stackoverflow.com/questions/48417884/how-to-obtain-an-instance-of-rusts-new-stdheapsystem/48418377#48418377", "title": "How to obtain an instance of Rust&#39;s new std::heap::System?", "body": "<p>Look at the <a href=\"https://doc.rust-lang.org/nightly/std/heap/struct.System.html\" rel=\"noreferrer\">documentation for <code>System</code></a>:</p>\n\n<pre><code>pub struct System;\n</code></pre>\n\n<p>It's a structure with no fields, so you create an instance by just naming it.</p>\n\n<pre><code>let system_alloc = std::heap::System;\n</code></pre>\n"}], "owner": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 125, "favorite_count": 0, "accepted_answer_id": 48418377, "answer_count": 1, "score": 2, "last_activity_date": 1516799070, "creation_date": 1516782520, "last_edit_date": 1516799070, "question_id": 48417884, "link": "https://stackoverflow.com/questions/48417884/how-to-obtain-an-instance-of-rusts-new-stdheapsystem", "title": "How to obtain an instance of Rust&#39;s new std::heap::System?", "body": "<p>I am trying to port <a href=\"https://github.com/rphmeier/allocators\" rel=\"nofollow noreferrer\">the allocators crate</a> to the latest toolchain, and it uses the now-removed <code>heap::alloc</code>. Judging by the documentation, I should be using <code>std::heap::System</code> but I don't see how to obtain an instance of it.</p>\n"}, {"tags": ["variables", "rust", "immutability", "mutability"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516783427, "post_id": 48414992, "comment_id": 83825810, "body": "You may be interested by <a href=\"https://github.com/TeXitoi/structopt\" rel=\"nofollow noreferrer\">github.com/TeXitoi/structopt</a>"}], "answers": [{"tags": [], "owner": {"reputation": 21, "user_id": 7869921, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-oy6_QluL1B8/AAAAAAAAAAI/AAAAAAAAADc/Zmt7Tu50TNo/photo.jpg?sz=128", "display_name": "Liam Borella", "link": "https://stackoverflow.com/users/7869921/liam-borella"}, "is_accepted": false, "score": 2, "last_activity_date": 1516770047, "creation_date": 1516770047, "answer_id": 48415115, "question_id": 48414992, "link": "https://stackoverflow.com/questions/48414992/is-it-possible-to-initialize-immutable-variables-with-match-in-rust/48415115#48415115", "title": "Is it possible to initialize immutable variables with match in Rust?", "body": "<p>Yes, just initialise the variable like so: <code>let a = match b { /* your code here*/ };</code></p>\n"}, {"comments": [{"owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "edited": false, "score": 0, "creation_date": 1516770710, "post_id": 48415184, "comment_id": 83820113, "body": "This is exactly what I was looking for. Thanks."}], "tags": [], "owner": {"reputation": 5514, "user_id": 3190758, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MM5AT.jpg?s=128&g=1", "display_name": "grovesNL", "link": "https://stackoverflow.com/users/3190758/grovesnl"}, "is_accepted": true, "score": 8, "last_activity_date": 1516770439, "creation_date": 1516770439, "answer_id": 48415184, "question_id": 48414992, "link": "https://stackoverflow.com/questions/48414992/is-it-possible-to-initialize-immutable-variables-with-match-in-rust/48415184#48415184", "title": "Is it possible to initialize immutable variables with match in Rust?", "body": "<p>Sure, match is an expression, so you should be able to rewrite it as follows:</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().collect();\nlet width_arg = &amp;args[1];\nlet height_arg = &amp;args[2];\n\nlet width = match width_arg.parse::&lt;i32&gt;() {\n    Ok(w) =&gt; w,\n    Err(_) =&gt; ask_for_number(),\n};\n\nlet height = match height_arg.parse::&lt;i32&gt;() {\n    Ok(h) =&gt; h,\n    Err(_) =&gt; ask_for_number(),\n};\n</code></pre>\n"}], "owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "accepted_answer_id": 48415184, "answer_count": 2, "score": 1, "last_activity_date": 1516770439, "creation_date": 1516769227, "question_id": 48414992, "link": "https://stackoverflow.com/questions/48414992/is-it-possible-to-initialize-immutable-variables-with-match-in-rust", "title": "Is it possible to initialize immutable variables with match in Rust?", "body": "<p>I have this piece of code where I try to convert command line arguments to integers. The problem is, the variables width and height should really be immutable, as I don't plan to change them. Is there any way I can use match like <code>let width = {match....}</code> and initialize them in one step as immutable variables rather than giving them a default value and mutating them? I believe this would be safer and more efficient.</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().collect();\nlet width_arg = &amp;args[1];\nlet height_arg = &amp;args[2];\n\nlet mut width = 0;\nlet mut height = 0;\n\nmatch width_arg.parse::&lt;i32&gt;() {\n    Ok(w) =&gt; width = w,\n    Err(_) =&gt; ask_for_number(),\n}\n\nmatch height_arg.parse::&lt;i32&gt;() {\n    Ok(h) =&gt; height = h,\n    Err(_) =&gt; ask_for_number(),\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1516754383, "post_id": 48413068, "comment_id": 83816128, "body": "You may be interested in <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\">Iterator::filter</a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516754835, "post_id": 48413068, "comment_id": 83816241, "body": "<a href=\"https://play.rust-lang.org/?gist=23b32d6af42677b0d8a65a1508d00409&amp;version=stable\" rel=\"nofollow noreferrer\">Working, you say?</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516755352, "post_id": 48413068, "comment_id": 83816394, "body": "To replace your code (minus the bug), the duplicate suggests simply <code>self.enms.retain(|e| e.x &gt;= 0.0)</code>."}], "owner": {"reputation": 33, "user_id": 7977992, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-HorAfYDYRO4/AAAAAAAAAAI/AAAAAAAAALE/gGjwnkKvuDw/photo.jpg?sz=128", "display_name": "samo", "link": "https://stackoverflow.com/users/7977992/samo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 38, "favorite_count": 0, "closed_date": 1516755434, "answer_count": 0, "score": 1, "last_activity_date": 1516755457, "creation_date": 1516753930, "last_edit_date": 1516755457, "question_id": 48413068, "link": "https://stackoverflow.com/questions/48413068/how-do-i-delete-some-elements-of-a-vector-depending-on-some-value-of-the-element", "closed_reason": "Duplicate", "title": "How do I delete some elements of a vector depending on some value of the element?", "body": "<p>I got this working iterating once to get the indices of elements to be deleted and then delete the elements later on, but is there a better way to do this? Maybe in a more functional style?</p>\n\n<p>My working code:</p>\n\n<pre><code>let mut tmpv = vec![];\nfor (index, e) in self.enms.iter().enumerate() {\n    if e.x &lt; 0.0 {\n        tmpv.push(index);\n    }\n}\nfor i in tmpv {\n    self.enms.swap_remove(i);\n}\n</code></pre>\n"}, {"tags": ["memory-management", "types", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1516743376, "post_id": 48411196, "comment_id": 83812149, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/485119/what-does-the-word-literal-mean\">What does the word &quot;literal&quot; mean?</a>"}, {"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516743441, "post_id": 48411196, "comment_id": 83812171, "body": "My question is more specific to Rust Ownership. I will edit to make it more specific. Thanks."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1516743483, "post_id": 48411196, "comment_id": 83812191, "body": "The meaning of the word &quot;literal&quot; is not specific to Rust and it appears to me this is your main confusion. <code>&quot;a&quot;</code> is a literal; <code>a</code> is not."}, {"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516743950, "post_id": 48411196, "comment_id": 83812386, "body": "It may well be, however, that answer doesn&#39;t help."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 2, "creation_date": 1516744118, "post_id": 48411196, "comment_id": 83812457, "body": "In your example the value <code>a</code> is an identifier with a value of &quot;a&quot; which is a string literal. Therefore <code>a</code> is a mutable value that can be changed from an immutable string literal to another one if desired."}, {"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 0, "creation_date": 1516744411, "post_id": 48411196, "comment_id": 83812597, "body": "thank you for the title edit, yes, that is what I am asking."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516744740, "post_id": 48411196, "comment_id": 83812782, "body": "The third piece of the puzzle is probably <a href=\"https://stackoverflow.com/questions/24158114/what-are-the-differences-between-rusts-string-and-str\">What are the differences between Rust&#39;s <code>String</code> and <code>str</code>?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 0, "creation_date": 1516747881, "post_id": 48411723, "comment_id": 83814137, "body": "Thank you for this. Would you please explain the String confusion I have. I.e. What is the reason we cannot use <code>String</code> literal data-type &amp; have to specifically use <code>String::from()</code> as mentioned &amp; linked in the docs. Clearly, as per the example, in my code, both can be mutable &amp; thus the references changed for the variables."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 3, "creation_date": 1516750950, "post_id": 48411723, "comment_id": 83815166, "body": "@Kayote So-called &quot;string literals&quot; are not of type <code>String</code>, but of type <code>&amp;&#39;static str</code>: <a href=\"https://stackoverflow.com/questions/37149831/what-is-the-difference-between-these-3-ways-of-declaring-a-string-in-rust\">this question has more</a>."}, {"owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "edited": false, "score": 0, "creation_date": 1516781391, "post_id": 48411723, "comment_id": 83824739, "body": "That answers my question. Thank you both for the help."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1516753317, "last_edit_date": 1516753317, "creation_date": 1516745692, "answer_id": 48411723, "question_id": 48411196, "link": "https://stackoverflow.com/questions/48411196/what-is-the-difference-between-literals-and-non-literals-other-than-the-fact-th/48411723#48411723", "title": "What is the difference between literals and non-literals, other than the fact that non-literals go into the heap?", "body": "<blockquote>\n  <p>Clearly literals can be mutable in Rust</p>\n</blockquote>\n\n<p>First, you need to understand <a href=\"https://stackoverflow.com/q/485119/155423\"><em>what</em> a literal is</a>. Literals are <strong>never</strong> mutable because they are <em>literally</em> written in the source code and compiled into the final binary. Your program does not change your source code!</p>\n\n<p>An example showing that you cannot modify a literal:</p>\n\n<pre><code>fn main() {\n    1 += 2;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0067]: invalid left-hand side expression\n --&gt; src/main.rs:2:5\n  |\n2 |     1 += 2;\n  |     ^ invalid expression for left-hand side\n</code></pre>\n\n<p>On the other hand, a literal can be copied into a variable and then the <em>variable</em> can be changed, but we still are not mutating the literal <code>1</code>:</p>\n\n<pre><code>fn main() {\n    let mut a = 1;\n    a += 2;\n}\n</code></pre>\n\n<p>To be honest, I don't know what I would call a \"non-literal\". A literal is a specific type of <em>expression</em>, but there are other types of things in a program besides expressions. It's kind of like saying \"cats\" and \"non-cats\" \u2014 does that second group include dogs, mushrooms, sand, and/or emotions?</p>\n\n<hr>\n\n<blockquote>\n  <p>the fact that literals go into the stack, while non-literals go into the heap</p>\n</blockquote>\n\n<p>Those two qualities aren't really directly related. It's pretty easy to have non-literals on the stack:</p>\n\n<pre><code>fn main() {\n    let a = 1;\n    let b = 2;\n    let c = a + b;\n}\n</code></pre>\n\n<p>All three variables are on the stack, but there is no literal <code>3</code> anywhere in the source code.</p>\n\n<p>Right now, Rust doesn't allow for a literal value to have a heap-allocation, but that's a language-specific thing that might change over time. Other languages probably allow it.</p>\n\n<p>In fact, you have to go out of your way in Rust to put something on the heap. Types like <code>Box</code>, <code>Vec</code>, and <code>String</code> all call functions to allocate space on the heap. The only way for your code to use heap memory is if you use these types, other types that use them, or types which allocate heap memory in some other way.</p>\n\n<hr>\n\n<blockquote>\n  <p>What is the reason we cannot use <code>String</code> literal data-type</p>\n</blockquote>\n\n<p>There is no <code>String</code> literal\u00a0\u2014 none. The source code <code>\"foo\"</code> creates a literal of type <code>&amp;'static str</code>. <a href=\"https://stackoverflow.com/q/24158114/155423\">These are drastically different types</a>. Specifically, the Rust language can work in environments where <em>there is no heap</em>; no literal could assume that it's possible to allocate memory. </p>\n\n<blockquote>\n  <p>have to specifically use <code>String::from()</code></p>\n</blockquote>\n\n<p><code>String::from</code> converts from <code>&amp;str</code> to a <code>String</code>; they are two different types and a conversion must be performed.</p>\n\n<blockquote>\n  <p>Clearly, as per the example, in my code, both can be mutable</p>\n</blockquote>\n\n<p><strong>No</strong>, they cannot. It is impossible to start with <code>let mut foo = \"a\"</code> and modify that \"a\" to become anything else. You <em>can</em> change what that <code>foo</code> points to:</p>\n\n<pre><code>let mut foo = \"a\";\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>                foo\n     +-----------+\n     |\n     |\n +---v---+              \n |       |              \n |  \"a\"  |           \n |       |     \n +-------+         \n</code></pre>\n\n\n\n<pre><code>foo = \"b\";\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>                  foo\n                   +----------+\n                              |\n                              |\n   +-------+              +---v---+\n   |       |              |       |\n   |  \"a\"  |              |  \"b\"  |\n   |       |              |       |\n   +-------+              +-------+\n</code></pre>\n\n<p>Neither <code>\"a\"</code> nor <code>\"b\"</code> <em>ever change</em>, but what <code>foo</code> points to <em>does</em>.</p>\n\n<p>This <strong>isn't specific to Rust</strong>. Java and C# strings are also immutable, for example, but you can <em>reassign</em> a variable to point to a different immutable string.</p>\n\n<hr>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/485119/155423\">What does the word &quot;literal&quot; mean?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference in `mut` before a variable name and after the `:`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/24158114/155423\">What are the differences between Rust&#39;s `String` and `str`?</a></li>\n</ul>\n"}], "owner": {"reputation": 10596, "user_id": 434697, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/a97016db5e1fc5100f8f6a0a3e5cdadf?s=128&d=identicon&r=PG", "display_name": "Kayote", "link": "https://stackoverflow.com/users/434697/kayote"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 976, "favorite_count": 0, "accepted_answer_id": 48411723, "answer_count": 1, "score": 1, "last_activity_date": 1516753317, "creation_date": 1516743232, "last_edit_date": 1516744356, "question_id": 48411196, "link": "https://stackoverflow.com/questions/48411196/what-is-the-difference-between-literals-and-non-literals-other-than-the-fact-th", "title": "What is the difference between literals and non-literals, other than the fact that non-literals go into the heap?", "body": "<p>I am  confused by the difference between literals and non-literals (the ones that go on the heap, I do not know what they are called). For example, <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html#the-string-type\" rel=\"nofollow noreferrer\">taking the <code>String</code> type as an example</a>:</p>\n\n<blockquote>\n  <p>We\u2019ve already seen string literals, where a string value is hardcoded\n  into our program. String literals are convenient, but they aren\u2019t\n  always suitable for every situation in which you want to use text. One\n  reason is that they\u2019re immutable. ...</p>\n</blockquote>\n\n<p>I do not understand the above, as we have already seen an example like this:</p>\n\n<pre><code>let mut a = \"a\"; // this is String literal here, so sitting on the stack\na = \"b\";\nprintln!(\"a is being changed to...{}\", a); // this is the same String literal sitting on the stack?\n</code></pre>\n\n<p>Clearly literals can be mutable in Rust. What is the difference between the two, other than the fact that literals go into the stack, while non-literals go into the heap?</p>\n\n<p>I am trying to understand why I shouldn't just use mutable literals in my code, considering that the stack is faster than the heap.</p>\n\n<pre><code>// a is mutable literal\nlet mut a = \"a\";\na = \"b\";\n// b is mutable 'non-literal'\nlet mut b = String::from(\"a\");\nb = String::from(\"b\");\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1516734064, "post_id": 48408745, "comment_id": 83807211, "body": "<a href=\"https://play.rust-lang.org/?gist=059fa974e0d1570d12b65b875d2b6ec5&amp;version=stable\" rel=\"nofollow noreferrer\">Move all of the relevant variables to a new struct, move the method to that struct, then embed the new struct in your existing one</a>. That&#39;s your &quot;real&quot; abstraction, anyway."}], "owner": {"reputation": 589, "user_id": 4352154, "user_type": "registered", "accept_rate": 69, "profile_image": "https://lh4.googleusercontent.com/-63Z0G5h6oFA/AAAAAAAAAAI/AAAAAAAAAHg/guAmotTzoqo/photo.jpg?sz=128", "display_name": "Kai Schmidt", "link": "https://stackoverflow.com/users/4352154/kai-schmidt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 531, "favorite_count": 0, "closed_date": 1516733828, "answer_count": 0, "score": 4, "last_activity_date": 1516734142, "creation_date": 1516733098, "last_edit_date": 1516734142, "question_id": 48408745, "link": "https://stackoverflow.com/questions/48408745/is-there-an-elegant-solution-to-calling-a-structs-mutating-method-from-another", "closed_reason": "Duplicate", "title": "Is there an elegant solution to calling a struct&#39;s mutating method from another mutating method?", "body": "<p>I have a struct and method like this:</p>\n\n<pre><code>pub struct S {\n    a: Vec&lt;u32&gt;,\n    b: Vec&lt;u32&gt;,\n}\n\nimpl S {\n    // Pretend that this function has a similar signature but an\n    // implementation that is much more complicated and verbose\n    fn b_index_mut(&amp;mut self, i: usize) -&gt; &amp;mut u32 {\n        &amp;mut self.b[i]\n    }\n\n    pub fn foo(&amp;mut self) {\n        for (i, x) in self.a.iter_mut().enumerate() {\n            *self.b_index_mut(i) += *x;\n        }\n    }\n}\n</code></pre>\n\n<p><code>S.foo()</code> will not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src\\main.rs:15:14\n   |\n14 |         for (i, x) in self.a.iter_mut().enumerate() {\n   |                       ------ first mutable borrow occurs here\n15 |             *self.b_index_mut(i) += *x;\n   |              ^^^^ second mutable borrow occurs here\n16 |         }\n   |         - first borrow ends here\n</code></pre>\n\n<p>There is this possible implementation which eliminates this error by simply moving the body of <code>S.b_index_mut()</code> into <code>S.foo()</code>:</p>\n\n<pre><code>impl S {\n    pub fn foo(&amp;mut self) {\n        for (i, x) in self.a.iter_mut().enumerate() {\n            self.b[i] += *x;\n        }\n    }\n}\n</code></pre>\n\n<p>However, as I said in the comment in the first implementation, the real <code>S.b_index_mut()</code> that I have in mind is much more verbose that the example, and it is really something that should have its own function.</p>\n\n<p>A possible work around is to pass <code>b</code> as an argument to <code>S.b_index_mut()</code>:</p>\n\n<pre><code>impl S {\n    // Pretend that this function has a similar signature but an\n    // implementation that is much more complicated and verbose\n    fn b_index_mut(b: &amp;mut Vec&lt;u32&gt;, i: usize) -&gt; &amp;mut u32 {\n        &amp;mut b[i]\n    }\n\n    pub fn foo(&amp;mut self) {\n        for (i, x) in self.a.iter_mut().enumerate() {\n            *S::b_index_mut(&amp;mut self.b, i) += *x;\n        }\n    }\n}\n</code></pre>\n\n<p>This solution compiles and solves the abstraction problem. However, it seems inelegant. Something feels wrong to me about calling a struct function that doesn't take <code>self</code> for anything other than a constructor.</p>\n\n<p>If the real version of <code>S.b_index_mut()</code> requires factoring in more members of <code>S</code> (that are not <code>a</code>), just writing the function call itself can become quite verbose.</p>\n\n<p>Is there an elegant solution to this problem?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1516723955, "post_id": 48406077, "comment_id": 83801134, "body": "Does <a href=\"https://stackoverflow.com/q/30441456/155423\">How to implement an addition method of linked list?</a> answer your question? Maybe <a href=\"https://stackoverflow.com/q/43976787/155423\">Adding an append method to a singly linked list</a>? There&#39;s also <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html\" rel=\"nofollow noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a>"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 6, "creation_date": 1516724072, "post_id": 48406077, "comment_id": 83801214, "body": "<code>Option&lt;Box&lt;&amp;Node&lt;T&gt;&gt;&gt;</code> This type makes no sense. It&#39;s optionally a dynamically allocated reference to a node. But why would you ever dynamically allocate the reference? If your iteration loop contains <code>Box::new</code> (as it does), then you know you&#39;ve done something wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516724331, "post_id": 48406077, "comment_id": 83801383, "body": "See also <a href=\"https://stackoverflow.com/q/37986640/155423\">Obtaining a mutable reference by iterating a recursive structure</a>."}], "answers": [{"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 1, "last_activity_date": 1519599392, "creation_date": 1519599392, "answer_id": 48979369, "question_id": 48406077, "link": "https://stackoverflow.com/questions/48406077/mutation-of-a-variable-inside-while-loop/48979369#48979369", "title": "Mutation of a variable inside while loop", "body": "<p>I would implement the <code>add</code> method as follows.</p>\n\n<pre><code>fn add(&amp;mut self, element: T) {\n    let node = Node { element, next: None };\n    match self.head {\n        None =&gt; {\n            self.head = Some(node);\n        }\n        Some(ref mut head) =&gt; {\n            let mut cur = head;\n            while cur.next.is_some() {\n                cur = {cur}.next.as_mut().unwrap();\n            }\n            cur.next = Some(Box::new(node));\n        }\n    }\n}\n</code></pre>\n\n<p>To test the implementation:</p>\n\n<pre><code>fn main() {\n    let mut list = List::new();\n    println!(\"{:?}\", list);\n\n    list.add(5);\n    println!(\"{:?}\", list);\n\n    list.add(4);\n    println!(\"{:?}\", list);\n\n    list.add(3);\n    println!(\"{:?}\", list);\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>List { head: None }\nList { head: Some(Node { element: 5, next: None }) }\nList { head: Some(Node { element: 5, next: Some(Node { element: 4, next: None }) }) }\nList { head: Some(Node { element: 5, next: Some(Node { element: 4, next: Some(Node { element: 3, next: None }) }) }) }\n</code></pre>\n"}], "owner": {"reputation": 1055, "user_id": 4071245, "user_type": "registered", "accept_rate": 29, "profile_image": "https://i.stack.imgur.com/XCJqT.jpg?s=128&g=1", "display_name": "Aravindh S", "link": "https://stackoverflow.com/users/4071245/aravindh-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 363, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1519599392, "creation_date": 1516723592, "last_edit_date": 1516723779, "question_id": 48406077, "link": "https://stackoverflow.com/questions/48406077/mutation-of-a-variable-inside-while-loop", "title": "Mutation of a variable inside while loop", "body": "<p>I am trying to build a singly linked list:</p>\n\n<pre><code>pub struct Node&lt;T&gt; {\n    pub element: T,\n    pub next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nstruct List&lt;T&gt; {\n    head: Option&lt;Node&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; List&lt;T&gt; {\n    fn new() -&gt; Self {\n        List { head: None }\n    }\n\n    fn add(&amp;mut self, element: T) {\n        let node = Node {\n            next: None,\n            element,\n        };\n        // get the node at the end of the list\n        match self.head {\n            None =&gt; self.head = Some(node),\n            Some(_) =&gt; {\n                let mut last_node: Option&lt;Box&lt;&amp;Node&lt;T&gt;&gt;&gt; =\n                    Some(Box::new(self.head.as_ref().unwrap()));\n                while let Some(node) = last_node {\n                    let n = node.next.take().map(|n| &amp;n);\n                    last_node = n;\n                }\n            }\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I am getting a compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:28:33\n   |\n28 |                     last_node = n;\n   |                                 ^ expected struct `std::boxed::Box`, found reference\n   |\n   = note: expected type `std::option::Option&lt;std::boxed::Box&lt;&amp;Node&lt;T&gt;&gt;&gt;`\n              found type `std::option::Option&lt;&amp;std::boxed::Box&lt;Node&lt;T&gt;&gt;&gt;`\n</code></pre>\n\n<p>While I understand the reasoning behind the error, I am not able to work around this.</p>\n\n<p>I need to add an element at the last of the list. For this, I take the approach where I repeatedly loop over the next element of the list until it is not a <code>None</code> and set the new value there.</p>\n\n<p>I am aware that this is an imperative approach which we do in C or Java. I am not sure how to do this in Rust.</p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1516718667, "creation_date": 1516718667, "answer_id": 48404399, "question_id": 48404204, "link": "https://stackoverflow.com/questions/48404204/why-is-the-closure-called-when-using-hashmaps-or-insert/48404399#48404399", "title": "Why is the closure called when using HashMap&#39;s or_insert?", "body": "<p>The closure is called <em>because you called it</em>:</p>\n\n<pre><code>(closure)(arg)\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert\" rel=\"noreferrer\"><code>hash_map::Entry::or_insert</code></a> doesn't accept a closure:</p>\n\n<blockquote>\n<pre><code>pub fn or_insert(self, default: V) -&gt; &amp;'a mut V\n</code></pre>\n  \n  <p>Ensures a value is in the entry by inserting the default if empty, and\n  returns a mutable reference to the value in the entry.</p>\n</blockquote>\n\n<p><a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert_with\" rel=\"noreferrer\"><code>hash_map::Entry::or_insert_with</code></a> does:</p>\n\n<blockquote>\n<pre><code>pub fn or_insert_with&lt;F: FnOnce() -&gt; V&gt;(self, default: F) -&gt; &amp;'a mut V\n</code></pre>\n  \n  <p>Ensures a value is in the entry by inserting the result of the default\n  function if empty, and returns a mutable reference to the value in the\n  entry.</p>\n</blockquote>\n\n<p>Applied to your code:</p>\n\n<pre><code>fn result(&amp;mut self, arg: u32) -&gt; u32 {\n    match self.result.get(&amp;arg) {\n        Some(v) =&gt; println!(\"I have value {} for {}\", v, arg),\n        None =&gt; println!(\"No value for {}\", arg),\n    }\n    *self.result.entry(arg).or_insert_with(|| {\n        println!(\"Doing complicated stuff.....\");\n        thread::sleep(Duration::from_secs(2));\n        arg + 42\n    })\n}\n</code></pre>\n"}], "owner": {"reputation": 1855, "user_id": 899674, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/2cf30171cb9e26beb230ceccbe14e6ef?s=128&d=identicon&r=PG", "display_name": "chopchop", "link": "https://stackoverflow.com/users/899674/chopchop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 760, "favorite_count": 0, "accepted_answer_id": 48404399, "answer_count": 1, "score": 1, "last_activity_date": 1516718737, "creation_date": 1516718028, "last_edit_date": 1516718737, "question_id": 48404204, "link": "https://stackoverflow.com/questions/48404204/why-is-the-closure-called-when-using-hashmaps-or-insert", "title": "Why is the closure called when using HashMap&#39;s or_insert?", "body": "<p>I am beginning with Rust and have troubles understanding how the following snippet of code outputs what it does. Surely the closure in <code>or_insert</code> method should not be called when the entry exists or am I completely missing something?</p>\n\n<pre><code>struct Cacher {\n    result: HashMap&lt;u32, u32&gt;,\n}\n\nimpl Cacher {\n    fn new() -&gt; Cacher {\n        Cacher{\n            result: HashMap::new()\n        }\n    }\n\n    fn result(&amp;mut self, arg: u32) -&gt; u32 {\n        match self.result.get(&amp;arg) {\n            Some(v) =&gt; println!(\"I have value {} for {}\", v, arg),\n            None =&gt; println!(\"No value for {}\", arg)\n        }\n        let closure = |x| {\n            println!(\"Doing complicated stuff.....\");\n            thread::sleep(Duration::from_secs(2));\n            x + 42\n        };\n        let v = self.result.entry(arg).or_insert((closure)(arg));\n        *v\n    }\n}\n\nfn main() {\n    let mut business_logic = Cacher::new();\n    business_logic.result(10);\n    business_logic.result(10);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>No value for 10\nDoing complicated stuff.....\nI have value 52 for 10\nDoing complicated stuff.....\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1516693355, "post_id": 48395370, "comment_id": 83780438, "body": "Possibly related: <a href=\"https://stackoverflow.com/questions/44835712/how-do-i-mutate-a-structure-i-am-looping-over\">How do I mutate a structure I am looping over?</a>"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1516694755, "post_id": 48395370, "comment_id": 83781190, "body": "If you were able to do this, you could end up with a bunch of invalid references in <code>attendees</code> array. <code>HashMap</code> can reallocate its storage."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1516695962, "post_id": 48395370, "comment_id": 83781798, "body": "Short answer: you can&#39;t (store references and then invalidate them by mutating the container)."}], "answers": [{"tags": [], "owner": {"reputation": 1095, "user_id": 1861380, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f21f0116f74b334df72253c7de23c05?s=128&d=identicon&r=PG", "display_name": "nyro_0", "link": "https://stackoverflow.com/users/1861380/nyro-0"}, "is_accepted": true, "score": 7, "last_activity_date": 1530110697, "last_edit_date": 1530110697, "creation_date": 1516695960, "answer_id": 48397140, "question_id": 48395370, "link": "https://stackoverflow.com/questions/48395370/adding-entries-to-a-hashmap-and-getting-references-to-them-in-a-for-loop/48397140#48397140", "title": "Adding entries to a HashMap and getting references to them in a for loop", "body": "<p>Your problem is not that you are trying to add elements to your <code>HashMap</code> in a loop, it's that you are modifying your hashmap <strong>and</strong> trying access your <code>hmap</code> in the scope of the loop. </p>\n\n<p>As you have a mutable borrow on <code>hmap</code>, you are not allowed to push its elements to your <code>attendees</code> vector in the loop. Adding a value to the <code>HashMap</code> may require that the hashmap reallocate itself, which would invalidate any references to values inside it.</p>\n\n<p>One easy solution for your problem could be this:</p>\n\n<pre><code>fn main() {\n    let meeting_one_email = [\"email1\", \"email2\", \"email1\"];\n\n    let mut hmap: HashMap&lt;String, String&gt; = HashMap::new();\n\n    for m in meeting_one_email.iter() {\n        set_if_needed_and_get(&amp;mut hmap, m.to_string());\n    }\n    let attendees: Vec&lt;&amp;String&gt; = hmap.keys().collect();\n}\n</code></pre>\n\n<p>In this code, you are accessing the hashmap <em>after</em> filling it up to also fill your <code>attendees</code> vector.</p>\n"}], "owner": {"reputation": 3592, "user_id": 988828, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/NEIcC.jpg?s=128&g=1", "display_name": "lc2817", "link": "https://stackoverflow.com/users/988828/lc2817"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 618, "favorite_count": 0, "accepted_answer_id": 48397140, "answer_count": 1, "score": 5, "last_activity_date": 1530110785, "creation_date": 1516688236, "last_edit_date": 1530110785, "question_id": 48395370, "link": "https://stackoverflow.com/questions/48395370/adding-entries-to-a-hashmap-and-getting-references-to-them-in-a-for-loop", "title": "Adding entries to a HashMap and getting references to them in a for loop", "body": "<p>I am trying to add multiple elements to a <code>HashMap</code> in a <code>for</code> loop but can't seem to get it right:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn set_if_needed_and_get(hmap: &amp;mut HashMap&lt;String, String&gt;, st: String) -&gt; &amp;String {\n    hmap.entry(st.clone()).or_insert(st.clone())\n}\n\nfn main() {\n    let meeting_one_email = [\"email1\", \"email2\", \"email1\"];\n\n    let mut hmap: HashMap&lt;String, String&gt; = HashMap::new();\n    let mut attendees: std::vec::Vec&lt;&amp;String&gt; = std::vec::Vec::new();\n\n    for m in meeting_one_email.iter() {\n        attendees.push(set_if_needed_and_get(&amp;mut hmap, m.to_string()));\n    }\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `hmap` as mutable more than once at a time\n  --&gt; src/main.rs:14:51\n   |\n14 |         attendees.push(set_if_needed_and_get(&amp;mut hmap, m.to_string()));\n   |                                                   ^^^^ mutable borrow starts here in previous iteration of loop\n15 |     }\n16 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>I understand that I cannot borrow <code>hmap</code> as mutable more than once, so how can I solve this while still using a for loop? Using a set and inserting in batches would work, but I want to use a for loop.</p>\n"}, {"tags": ["rust", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "edited": false, "score": 0, "creation_date": 1516706442, "post_id": 48395307, "comment_id": 83788753, "body": "Time for NLL :-)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516706923, "post_id": 48395307, "comment_id": 83789066, "body": "<a href=\"https://play.rust-lang.org/?gist=034570c3b03dc03d5834217691300ff9&amp;version=nightly\" rel=\"nofollow noreferrer\">Still doesn&#39;t compile on nightly with <code>#![feature(nll)]</code></a>. Not sure if this is a weakness in the current implementation or if the code is subtly incorrect."}, {"owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "reply_to_user": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "edited": false, "score": 0, "creation_date": 1516707218, "post_id": 48395307, "comment_id": 83789284, "body": "@Malice what is it?"}, {"owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516708159, "post_id": 48395307, "comment_id": 83789913, "body": "@trentcl I see that my problem is marked as problem case #4 there, maybe I should just quit trying and wait for the language to get updated? I&#39;m only interested in rust for recreational purposes anyway."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516708282, "post_id": 48395307, "comment_id": 83789989, "body": "@trentcl I&#39;d say weakness. The block works fine in a separate <code>get_or_add_child(&amp;mut self, value: char) -&gt; &amp;mut Node</code> method (which is also easy to implement without NLL, so I&#39;d recommend going for that - same as in my answer in the linked duplicate)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516715882, "post_id": 48395307, "comment_id": 83795211, "body": "The duplicate applied to your situation <a href=\"https://play.rust-lang.org/?gist=dd350569456fa8e178ca9aeedd364ffb&amp;version=nightly\" rel=\"nofollow noreferrer\">with NLL</a> @Stefan you want to chime in with the non-NLL solution?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516718215, "post_id": 48395307, "comment_id": 83796850, "body": "@Shepmaster I must be missing something - I can&#39;t get it working. I may have been wrong with my duplicate suggestion.  It seems without NLL the early return still blocks the lifetime in other paths, as the returned value uses the lifetime too (the linked question doesn&#39;t have a return value)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516719463, "post_id": 48395307, "comment_id": 83797770, "body": "The second duplicate applied to your situation, <a href=\"https://play.rust-lang.org/?gist=13686fc99b2f44cf1f0cd4c9831313e0&amp;version=stable\" rel=\"nofollow noreferrer\">without NLL</a>. This requires a bit of inefficiency because we have to use an index instead of the reference. We are all very excited for <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\" rel=\"nofollow noreferrer\">Non-Lexical Lifetimes</a> to land!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1516719951, "post_id": 48395307, "comment_id": 83798128, "body": "@Stefan OK, I&#39;ve added another duplicate which uses indices to work around it. Seem reasonable? In the future, I recommend solving the problem using the suggested duplicate(s). This lets us be sure that it is a duplicate and then we can paste it in as a comment to help the OP see how it works."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516720093, "post_id": 48395307, "comment_id": 83798232, "body": "@SarpBa\u015faraner <i>maybe I should just quit trying and wait for the language to get updated? I&#39;m only interested in rust for recreational purposes anyway.</i> \u2014 I love Rust and am biased, but I think there&#39;s lots of good things to use and learn right now. There are some annoying cases (of which is this one!) but the community is working on making things better. If you just want to play with Rust, you can even think about using a nightly compiler and enabling the NLL feature to get a jump on the future ;-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516722080, "post_id": 48395307, "comment_id": 83799750, "body": "<i>The block works fine in a separate <code>get_or_add_child(&amp;mut self, value: char) -&gt; &amp;mut Node</code> method</i> \u2014 I&#39;ve opened <a href=\"https://github.com/rust-lang/rust/issues/47680\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/47680</a> for this."}, {"owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516723841, "post_id": 48395307, "comment_id": 83801046, "body": "@Shepmaster well with all the help I&#39;m getting at least its community seems amazing! I will keep tinkering with Rust I guess. Also, for years I&#39;ve tried to make a meaningful contribution to any major FOSS, it&#39;ll be very interesting if this problem that I didn&#39;t even comprehend fully turns out to affect stuff significantly :)"}], "owner": {"reputation": 373, "user_id": 8399495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d4dcf7abc7d47d4c9e4f563f4964d0c?s=128&d=identicon&r=PG&f=1", "display_name": "Sarp Ba\u015faraner", "link": "https://stackoverflow.com/users/8399495/sarp-ba%c5%9faraner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 679, "favorite_count": 0, "closed_date": 1516715497, "answer_count": 0, "score": 1, "last_activity_date": 1516719365, "creation_date": 1516687962, "last_edit_date": 1516715355, "question_id": 48395307, "link": "https://stackoverflow.com/questions/48395307/cannot-borrow-variable-as-mutable-more-than-once-at-a-time", "closed_reason": "Duplicate", "title": "Cannot borrow variable as mutable more than once at a time", "body": "<p>I'm  trying to implement a trie but the borrow checker is really giving me a hard time:</p>\n\n<pre><code>struct Node {\n    // a trie node\n    value: char,\n    children: Vec&lt;Node&gt;,\n}\n\nimpl Node {\n    fn add_child(&amp;mut self, value: char) -&gt; &amp;mut Node {\n        // adds a child to given node\n        let vec: Vec&lt;Node&gt; = Vec::new();\n        let node = Node {\n            value,\n            children: vec,\n        };\n        self.children.push(node);\n        self.children.last_mut().unwrap()\n    }\n\n    fn get_child(&amp;mut self, value: char) -&gt; Option&lt;&amp;mut Node&gt; {\n        // checks if given node has a child with given value, returns the child if it exists\n        for child in self.children.iter_mut() {\n            if child.value == value {\n                return Some(child);\n            }\n        }\n        None\n    }\n\n    fn has_child(&amp;self, value: char) -&gt; bool {\n        for child in self.children.iter() {\n            if child.value == value {\n                return true;\n            }\n        }\n        false\n    }\n\n    fn add_word(&amp;mut self, word: String) {\n        let mut cursor = self;\n        for c in word.chars() {\n            match cursor.get_child(c) {\n                Some(node) =&gt; cursor = node,\n                None =&gt; cursor = cursor.add_child(c),\n            }\n        }\n        cursor.add_child('~');\n    }\n}\n</code></pre>\n\n<p>The <code>add_word</code> method gives these 5 errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*cursor` as mutable more than once at a time\n  --&gt; src/main.rs:41:19\n   |\n41 |             match cursor.get_child(c) {\n   |                   ^^^^^^ mutable borrow starts here in previous iteration of loop\n...\n47 |     }\n   |     - mutable borrow ends here\n\nerror[E0506]: cannot assign to `cursor` because it is borrowed\n  --&gt; src/main.rs:42:31\n   |\n41 |             match cursor.get_child(c) {\n   |                   ------ borrow of `cursor` occurs here\n42 |                 Some(node) =&gt; cursor = node,\n   |                               ^^^^^^^^^^^^^ assignment to borrowed `cursor` occurs here\n\nerror[E0506]: cannot assign to `cursor` because it is borrowed\n  --&gt; src/main.rs:43:25\n   |\n41 |             match cursor.get_child(c) {\n   |                   ------ borrow of `cursor` occurs here\n42 |                 Some(node) =&gt; cursor = node,\n43 |                 None =&gt; cursor = cursor.add_child(c),\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `cursor` occurs here\n\nerror[E0499]: cannot borrow `*cursor` as mutable more than once at a time\n  --&gt; src/main.rs:43:34\n   |\n41 |             match cursor.get_child(c) {\n   |                   ------ first mutable borrow occurs here\n42 |                 Some(node) =&gt; cursor = node,\n43 |                 None =&gt; cursor = cursor.add_child(c),\n   |                                  ^^^^^^ second mutable borrow occurs here\n...\n47 |     }\n   |     - first borrow ends here\n\nerror[E0499]: cannot borrow `*cursor` as mutable more than once at a time\n  --&gt; src/main.rs:46:9\n   |\n41 |             match cursor.get_child(c) {\n   |                   ------ first mutable borrow occurs here\n...\n46 |         cursor.add_child('~');\n   |         ^^^^^^ second mutable borrow occurs here\n47 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>This is the Go code that I was trying to translate:</p>\n\n<pre class=\"lang-golang prettyprint-override\"><code>func (n *trieNode) AddWord(word string) {\ncursor := n\nfor i := 0; i &lt; len(word); i++ {\n    if cursor.HasChild(byte(word[i])) == nil {\n        cursor = cursor.AddChild(byte(word[i]))\n    } else {\n        cursor = cursor.HasChild(byte(word[i]))\n    }\n}\n// tilde indicates the end of the word\ncursor.AddChild(byte('~'))\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516700185, "post_id": 48393114, "comment_id": 83784451, "body": "Actually <code>write!</code> only needs a <code>write_fmt</code> method in scope, which is <i>usually</i> provided by <code>std::io::Write</code> or <code>std::fmt::Write</code>, but it doesn&#39;t need to be that way."}, {"owner": {"reputation": 2993, "user_id": 364938, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/558ea1f66cb437936d74c8e447bc3f43?s=128&d=identicon&r=PG", "display_name": "Igor \u0160ar\u010devi\u0107", "link": "https://stackoverflow.com/users/364938/igor-%c5%a0ar%c4%8devi%c4%87"}, "edited": false, "score": 0, "creation_date": 1516703727, "post_id": 48393114, "comment_id": 83786924, "body": "Thanks for the detailed answer Francis. Works great."}, {"owner": {"reputation": 390, "user_id": 3747942, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/081ec3ff7ebbd8cf4812f90a16c963af?s=128&d=identicon&r=PG", "display_name": "quadrupleslap", "link": "https://stackoverflow.com/users/3747942/quadrupleslap"}, "edited": false, "score": 0, "creation_date": 1531911243, "post_id": 48393114, "comment_id": 89771017, "body": "For future readers, the liner <code>fn hello(stdout: &amp;mut io::Write) {</code> is usually written as <code>fn hello&lt;W: Write&gt;(stdout: W) {</code> for monomorphization (which is usually what you want)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1516673171, "creation_date": 1516673171, "answer_id": 48393114, "question_id": 48392213, "link": "https://stackoverflow.com/questions/48392213/testing-standard-output-by-substituting-stdout/48393114#48393114", "title": "Testing standard output by substituting stdout", "body": "<p>The <a href=\"https://doc.rust-lang.org/stable/std/macro.write.html\" rel=\"noreferrer\"><code>write!</code></a> macro expects the destination operand to implement <em>either</em> <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Write.html\" rel=\"noreferrer\"><code>std::fmt::Write</code></a> or <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Write.html\" rel=\"noreferrer\"><code>std::io::Write</code></a>. Since <a href=\"https://doc.rust-lang.org/stable/std/macro.writeln.html\" rel=\"noreferrer\"><code>writeln!</code></a> delegates to <code>write!</code>, this also applies to <code>writeln!</code>.</p>\n\n<p>The documentation for <code>std::fmt::Write</code> says this:</p>\n\n<blockquote>\n  <p>the <code>io::Write</code> trait is favored over implementing this trait</p>\n</blockquote>\n\n<p>Since <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Stdout.html\" rel=\"noreferrer\"><code>Stdout</code></a> implements <code>std::io::Write</code>, you should change the bounds on your code from <code>fmt::Write</code> to <code>io::Write</code>. Note, however, that <code>String</code> doesn't implement <code>io::Write</code>, since <code>io::Write</code> accepts arbitrary bytes that may not be well-formed UTF-8; you can use <code>Vec&lt;u8&gt;</code> instead.</p>\n\n<pre><code>use std::io;\n\nfn hello(stdout: &amp;mut io::Write) {\n    writeln!(stdout, \"Hello world\");\n}\n\n#[test]\nfn hello_test() {\n    let mut stdout = Vec::new();\n\n    // pass fake stdout when calling when testing\n    hello(&amp;mut stdout);\n\n    assert_eq!(stdout, b\"Hello world\\n\");\n}\n\nfn main() {\n    // pass real stdout when calling from main\n\n    hello(&amp;mut io::stdout());\n}\n</code></pre>\n\n<p>For improved performance, if only one threads need to write on stdout, consider passing a <a href=\"https://doc.rust-lang.org/stable/std/io/struct.StdoutLock.html\" rel=\"noreferrer\"><code>StdoutLock</code></a> rather than a <code>Stdout</code> to your function (with <code>Stdout</code>, each write acquires and releases a lock).</p>\n\n<hr>\n\n<p>If you really prefer to use <code>std::fmt::Write</code> instead, then you could use an adapter struct that converts <code>fmt::Write</code> calls to <code>io::Write</code> calls.</p>\n\n<pre><code>use std::io;\nuse std::fmt;\n\nstruct WriteAdapter&lt;W&gt;(W);\n\nimpl&lt;W&gt; fmt::Write for WriteAdapter&lt;W&gt;\nwhere\n    W: io::Write,\n{\n    fn write_str(&amp;mut self, s: &amp;str) -&gt; Result&lt;(), fmt::Error&gt; {\n        self.0.write_all(s.as_bytes()).map_err(|_| fmt::Error)\n    }\n\n    fn write_fmt(&amp;mut self, args: fmt::Arguments) -&gt; Result&lt;(), fmt::Error&gt; {\n        self.0.write_fmt(args).map_err(|_| fmt::Error)\n    }\n}\n\nfn hello(stdout: &amp;mut fmt::Write) {\n    writeln!(stdout, \"Hello world\");\n}\n\n#[test]\nfn hello_test() {\n    let mut stdout = String::new();\n\n    // pass fake stdout when calling when testing\n    hello(&amp;mut stdout);\n\n    assert_eq!(stdout, \"Hello world\\n\");\n}\n\nfn main() {\n    // pass real stdout when calling from main\n\n    hello(&amp;mut WriteAdapter(io::stdout()));\n}\n</code></pre>\n"}], "owner": {"reputation": 2993, "user_id": 364938, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/558ea1f66cb437936d74c8e447bc3f43?s=128&d=identicon&r=PG", "display_name": "Igor \u0160ar\u010devi\u0107", "link": "https://stackoverflow.com/users/364938/igor-%c5%a0ar%c4%8devi%c4%87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1491, "favorite_count": 0, "closed_date": 1516714016, "accepted_answer_id": 48393114, "answer_count": 1, "score": 6, "last_activity_date": 1516713994, "creation_date": 1516665990, "last_edit_date": 1516713994, "question_id": 48392213, "link": "https://stackoverflow.com/questions/48392213/testing-standard-output-by-substituting-stdout", "closed_reason": "Duplicate", "title": "Testing standard output by substituting stdout", "body": "<p>My goal is to test the output of a function that goes to the standard output. So far, my best attempt is to substitute the stream with a string in the tests.</p>\n\n<p>This is what I managed to achieve so far:</p>\n\n<pre><code>use std::io;\nuse std::fmt;\n\nfn hello(stdout: &amp;mut std::fmt::Write) {\n    writeln!(stdout, \"Hello world\");\n}\n\n#[test]\nfn hello_test() {\n    let mut stdout = String::new();\n\n    // pass fake stdout when calling when testing\n    hello(&amp;mut stdout);\n\n    assert_eq!(stdout, \"Hello world\\n\".to_string());\n}\n\nfn main() {\n    // pass real stdout when calling from main\n\n    hello(&amp;mut io::stdout());\n}\n</code></pre>\n\n<p>The tests work, but unfortunately <code>io::stdout()</code> does not implement the <code>fmt::Write</code> trait.</p>\n\n<p>What is the best solution for testing a function that writes to the standard output in Rust? Is there a way to fix my solution with strings, or should I look for an alternative?</p>\n"}, {"tags": ["rust", "default", "operator-keyword"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1516651124, "post_id": 48389072, "comment_id": 83766327, "body": "See also <a href=\"https://stackoverflow.com/q/31797599/155423\">What does the double-ellipsis operator mean in the context of a &amp;str subscript?</a> for information about another use of <code>..</code> in Rust."}], "answers": [{"comments": [{"owner": {"reputation": 75, "user_id": 888621, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ab46e726e3c95d2e7f663cedbccab36e?s=128&d=identicon&r=PG", "display_name": "Shabgard", "link": "https://stackoverflow.com/users/888621/shabgard"}, "edited": false, "score": 0, "creation_date": 1606126878, "post_id": 48389214, "comment_id": 114856315, "body": "I&#39;ve also seen initialization like this <code>let SomeOptions { foo: 42 .. } = SomeOptions::default();</code> which seems similar. Does anyone know what it does?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 75, "user_id": 888621, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ab46e726e3c95d2e7f663cedbccab36e?s=128&d=identicon&r=PG", "display_name": "Shabgard", "link": "https://stackoverflow.com/users/888621/shabgard"}, "edited": false, "score": 1, "creation_date": 1606137071, "post_id": 48389214, "comment_id": 114860891, "body": "@Shabgard you have not seen that in real Rust code because it&#39;s <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c24d69bf55b4e8d9ffe777cc7ba9034a\" rel=\"nofollow noreferrer\">invalid Rust syntax</a>. If you meant <code>let SomeOptions { foo, .. } =</code>, then <a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#ignoring-remaining-parts-of-a-value-with-\" rel=\"nofollow noreferrer\">Ignoring Remaining Parts of a Value with ..</a>"}, {"owner": {"reputation": 75, "user_id": 888621, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ab46e726e3c95d2e7f663cedbccab36e?s=128&d=identicon&r=PG", "display_name": "Shabgard", "link": "https://stackoverflow.com/users/888621/shabgard"}, "edited": false, "score": 0, "creation_date": 1606141134, "post_id": 48389214, "comment_id": 114862973, "body": "Thank you. No, I don&#39;t think it&#39;s the case that you mentioned but it was also educating for me. <a href=\"https://github.com/paritytech/polkadot/blob/ffedeab4f0097107240bec74cf376a79a5240181/runtime/parachains/src/scheduler.rs#L1587\" rel=\"nofollow noreferrer\">This piece of code</a> is the exact instance of the usage that I had in mind."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 75, "user_id": 888621, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ab46e726e3c95d2e7f663cedbccab36e?s=128&d=identicon&r=PG", "display_name": "Shabgard", "link": "https://stackoverflow.com/users/888621/shabgard"}, "edited": false, "score": 0, "creation_date": 1606142496, "post_id": 48389214, "comment_id": 114863745, "body": "@Shabgard that&#39;s exactly the syntax that I used in my comment; why do you think it&#39;s different?"}, {"owner": {"reputation": 75, "user_id": 888621, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ab46e726e3c95d2e7f663cedbccab36e?s=128&d=identicon&r=PG", "display_name": "Shabgard", "link": "https://stackoverflow.com/users/888621/shabgard"}, "edited": false, "score": 0, "creation_date": 1606145852, "post_id": 48389214, "comment_id": 114865508, "body": "Oh, I got confused because of the link you sent was pointing to this section &quot;Ignoring Remaining Parts of a Value with ..&quot; which  was used inside a <code>match</code> block. But now that I studied the whole page it seems to be the case of <a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#destructuring-to-break-apart-values\" rel=\"nofollow noreferrer\">Destructuring Structs</a>. Now I understand it. Very helpful page anyway!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 23, "last_activity_date": 1549663172, "last_edit_date": 1549663172, "creation_date": 1516650566, "answer_id": 48389214, "question_id": 48389072, "link": "https://stackoverflow.com/questions/48389072/what-is-the-syntax-inside-a-struct-literal-in-rust/48389214#48389214", "title": "What is the &quot;..&quot; syntax inside a struct literal in Rust?", "body": "<p>This is the <a href=\"https://doc.rust-lang.org/stable/book/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\" rel=\"noreferrer\">struct update syntax</a>. It is \"needed\" only to have a succinct way of moving / copying all of the members of a struct to a new one, potentially with some small modifications.</p>\n\n<p>The \"long\" way of writing this would be:</p>\n\n<pre><code>let a = SomeOptions::default();\nlet options = SomeOptions { foo: 42, bar: a.bar };\n</code></pre>\n\n<p>You could indeed think of it similar to the JavaScript \"spread\" operator, but Rust's nuances of ownership and strong typing still come into play, so it's not as widely used. For example, you can't use this syntax to go between values of different types.</p>\n"}], "owner": {"reputation": 1141, "user_id": 612192, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/791db340b99a41843ac0922ed74aa883?s=128&d=identicon&r=PG", "display_name": "Evan Rose", "link": "https://stackoverflow.com/users/612192/evan-rose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5794, "favorite_count": 4, "accepted_answer_id": 48389214, "answer_count": 1, "score": 16, "last_activity_date": 1549663172, "creation_date": 1516649973, "last_edit_date": 1516650674, "question_id": 48389072, "link": "https://stackoverflow.com/questions/48389072/what-is-the-syntax-inside-a-struct-literal-in-rust", "title": "What is the &quot;..&quot; syntax inside a struct literal in Rust?", "body": "<p>From the <a href=\"https://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"noreferrer\"><code>std::default::Default</code></a> docs:</p>\n\n<pre><code>#[derive(Default)]\nstruct SomeOptions {\n    foo: i32,\n    bar: f32,\n}\n\nfn main() {\n    let options = SomeOptions { foo: 42, ..Default::default() };\n}\n</code></pre>\n\n<p>What is the <code>..</code> prefix doing to the returned value of <code>Default::default()</code> and why is it necessary here? It almost seems like it's acting as a spread operator, but I'm not sure. I understand what <code>..Default::default()</code> is doing -- filling in the remaining struct parameters with the default values of <code>SomeOptions</code>, but not how <code>..</code> works. What is the name of this operator?</p>\n"}, {"tags": ["segmentation-fault", "rust", "unsafe"], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1516637122, "post_id": 48385528, "comment_id": 83758745, "body": "If I am not mistaken, order of the fields in a fat pointer is not specified. Transmutation into <code>&amp;mut Box&lt;VecStorage&lt;C&gt;&gt;</code> thus is not safe."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1516637628, "post_id": 48385528, "comment_id": 83759045, "body": "@red75prime it is specified, but only as nightly API. Updated the answer accordingly."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 6, "last_activity_date": 1516637589, "last_edit_date": 1516637589, "creation_date": 1516636478, "answer_id": 48385528, "question_id": 48384622, "link": "https://stackoverflow.com/questions/48384622/transmuting-from-trait-a-to-trait-b-on-type-that-implements-both-segfaults/48385528#48385528", "title": "Transmuting from trait A to trait B on type that implements both segfaults", "body": "<p><code>Box&lt;SomeTrait&gt;</code> stores two pointers: one to the object, and one to the vtable. <code>Box&lt;SomeType&gt;</code> stores only one pointer: the one to the object.</p>\n\n<p>You can use the following code in your example to see the sizes:</p>\n\n<pre><code>println!(\"{}\", mem::size_of::&lt;Box&lt;AnyStorable + 'static&gt;&gt;());\nprintln!(\"{}\", mem::size_of::&lt;Box&lt;Insertable&lt;C&gt;&gt;&gt;());\nprintln!(\"{}\", mem::size_of::&lt;Box&lt;VecStorage&lt;C&gt;&gt;&gt;());\n</code></pre>\n\n<p>Calling <code>transmute</code> to change the trait of the <code>Box</code> will break the vtable: vtables of different traits are not compatible.</p>\n\n<p>Calling <code>transmute</code> to change from a reference to <code>Box&lt;SomeTrait&gt;</code> to a reference to <code>Box&lt;SomeType&gt;</code> (and the type happens to be the correct one) happens to works, because it will only use the first pointer to the object and forget about the trait.</p>\n\n<p>The internal representation of a fat pointer (i.e. data pointer with vtable) is defined in <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow noreferrer\"><code>TraitObject</code></a>, which is only accessible in nightly builds.  Although unlikely the representation might change in way that the data pointer is not the first pointer anymore, which would break the second <code>transmute</code>.</p>\n\n<p>The documentation for <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow noreferrer\"><code>TraitObject</code></a> is also worth reading.</p>\n\n<p>(While <code>transmute</code> makes sure the sizes of the passed types are equal, you're passing a reference to types - which are always exactly one pointer big.  It doesn't check the types those references point to.)</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 97, "favorite_count": 0, "accepted_answer_id": 48385528, "answer_count": 1, "score": 2, "last_activity_date": 1516637589, "creation_date": 1516633678, "last_edit_date": 1516634450, "question_id": 48384622, "link": "https://stackoverflow.com/questions/48384622/transmuting-from-trait-a-to-trait-b-on-type-that-implements-both-segfaults", "title": "Transmuting from trait A to trait B on type that implements both segfaults", "body": "<p>Few days ago, there was a question regarding OOP that wanted to solve the issue using downcast. As a self-imposed challenge, I tried to solve the issue using <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>std::mem::transmute</code></a> and unsafe blocks, which produced a segmentation fault.</p>\n\n<p>Here is the <a href=\"https://play.rust-lang.org/?gist=87d17ef6a9e0f43de14da4f48445d038&amp;version=stable\" rel=\"nofollow noreferrer\">full code in Rust Playground</a>.</p>\n\n<p>The offending part of code is this:</p>\n\n<pre><code>unsafe {\n    let storage =\n        mem::transmute::&lt;&amp;mut Box&lt;AnyStorable + 'static&gt;, &amp;mut Box&lt;Insertable&lt;C&gt;&gt;&gt;(x);\n    println!(\"{:#?}\", x);\n    storage.insert(component); // This segfaults\n};\n</code></pre>\n\n<p>It produces an segfault when run:</p>\n\n<blockquote>\n  <p>/root/entrypoint.sh: line 7:     5 Segmentation fault      timeout --signal=KILL ${timeout} \"$@\"</p>\n</blockquote>\n\n<p>However, when I replace this line:</p>\n\n<pre><code>let storage =\n    mem::transmute::&lt;&amp;mut Box&lt;AnyStorable + 'static&gt;, &amp;mut Box&lt;Insertable&lt;C&gt;&gt;&gt;(x);\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>let storage =\n    mem::transmute::&lt;&amp;mut Box&lt;AnyStorable + 'static&gt;, &amp;mut Box&lt;VecStorage&lt;C&gt;&gt;&gt;(x);\n</code></pre>\n\n<p>It works. Why does the first line fail and the second doesn't?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516633997, "post_id": 48384562, "comment_id": 83756535, "body": "What&#39;s wrong with this?"}], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 498916, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c92e05bbd345dfe577c437a3c4c77935?s=128&d=identicon&r=PG", "display_name": "Rik", "link": "https://stackoverflow.com/users/498916/rik"}, "edited": false, "score": 0, "creation_date": 1516638510, "post_id": 48384787, "comment_id": 83759607, "body": "Thanks! Sorry if this seemed a trivial question \u2013 I was closer than I thought I was. I think <code>Fn</code> vs <code>fn</code> and the syntax of <code>a_foo.updater =  Some(|bar: &amp;mut Foo| {})</code> was what confused me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1516638712, "last_edit_date": 1516638712, "creation_date": 1516634215, "answer_id": 48384787, "question_id": 48384562, "link": "https://stackoverflow.com/questions/48384562/what-is-the-correct-way-to-have-an-optional-self-mutating-function-as-a-struct-m/48384787#48384787", "title": "What is the correct way to have an optional self mutating function as a struct member?", "body": "<p>You can use a function pointer:</p>\n\n<pre><code>struct Foo {\n    id: u32,\n    updater: Option&lt;fn(&amp;mut Foo)&gt;,\n}\n\nimpl Foo {\n    fn update(&amp;mut self) {\n        if let Some(the_updater) = self.updater {\n            the_updater(self);\n        }\n    }\n}\n\nfn main() {\n    let mut foo = Foo { id: 41, updater: None };\n    foo.updater = Some(|foo| foo.id += 1);\n    foo.update();\n\n    println!(\"foo.id: {}\", foo.id);\n}\n</code></pre>\n\n<p>Here, a closure that doesn't capture anything is implicitly converted to a function and then used as a function pointer.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43273971/155423\">How to pass a member function of a struct to another struct as callback</a></li>\n</ul>\n"}], "owner": {"reputation": 423, "user_id": 498916, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c92e05bbd345dfe577c437a3c4c77935?s=128&d=identicon&r=PG", "display_name": "Rik", "link": "https://stackoverflow.com/users/498916/rik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 48384787, "answer_count": 1, "score": -2, "last_activity_date": 1516638712, "creation_date": 1516633479, "last_edit_date": 1516633967, "question_id": 48384562, "link": "https://stackoverflow.com/questions/48384562/what-is-the-correct-way-to-have-an-optional-self-mutating-function-as-a-struct-m", "title": "What is the correct way to have an optional self mutating function as a struct member?", "body": "<p>I want to do this:</p>\n\n<pre><code>struct Foo {\n    id: u32,\n    updater: Option&lt;Fn(&amp;mut Foo)&gt;, // the Foo here should be self\n}\n\nimpl Foo {\n    fn update(&amp;mut self) {\n        if let Some(the_updater) = self.updater {\n            the_updater(&amp;mut self);\n        }\n    }\n}\n</code></pre>\n\n<p>Is the intention here possible? What would the syntax look like for assigning to <code>Foo::updater</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516628322, "post_id": 48382267, "comment_id": 83752464, "body": "Adding <code>extern crate hyper; use hyper::mime::*;</code> to your code does not produce the second error you state when using Rust 1.23.0. What version of Rust are you using?"}, {"owner": {"reputation": 615, "user_id": 7119734, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9af9ffd6954945b49d98fbd9e7a04ccf?s=128&d=identicon&r=PG&f=1", "display_name": "yassin", "link": "https://stackoverflow.com/users/7119734/yassin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516628432, "post_id": 48382267, "comment_id": 83752542, "body": "@Shepmaster I am using rustc 1.23.0 and cargo 0.24.0 (on Windows)"}], "answers": [{"comments": [{"owner": {"reputation": 615, "user_id": 7119734, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9af9ffd6954945b49d98fbd9e7a04ccf?s=128&d=identicon&r=PG&f=1", "display_name": "yassin", "link": "https://stackoverflow.com/users/7119734/yassin"}, "edited": false, "score": 0, "creation_date": 1516628304, "post_id": 48382770, "comment_id": 83752446, "body": "So shouldn&#39;t the misspelling be found while parsing before macros are expanded?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 615, "user_id": 7119734, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9af9ffd6954945b49d98fbd9e7a04ccf?s=128&d=identicon&r=PG&f=1", "display_name": "yassin", "link": "https://stackoverflow.com/users/7119734/yassin"}, "edited": false, "score": 2, "creation_date": 1516628442, "post_id": 48382770, "comment_id": 83752547, "body": "@yassin why? It&#39;s not a parsing error. Both <code>mime!</code> and <code>#[marco_use]</code> are typos as far as the compiler is concerned, not syntax errors. It just happens that macros-by-example are expanded before attributes since they can expand <i>into</i> attributes. Since the macro cannot be expanded, the compiler stops."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1516629764, "post_id": 48382770, "comment_id": 83753421, "body": "How did you write this? Where did you get all this information from?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1516630245, "post_id": 48382770, "comment_id": 83753736, "body": "@VictorPolevoy I didn&#39;t - it was written by japaric and the description is linked in the answer."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1516630284, "post_id": 48382770, "comment_id": 83753774, "body": "Oh, I could not read your message fully. This picture is so amazing that I read only first sentence. :D"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 8, "last_activity_date": 1516628249, "last_edit_date": 1516628249, "creation_date": 1516627884, "answer_id": 48382770, "question_id": 48382267, "link": "https://stackoverflow.com/questions/48382267/why-does-cargo-build-not-show-all-errors-in-my-code/48382770#48382770", "title": "Why does `cargo build` not show all errors in my code?", "body": "<p>The compilation process is divided into several stages and if during one of them an error breaks the build, the following stages are not processed further. This is not specific to Cargo, but <code>rustc</code> as well (example: <a href=\"https://stackoverflow.com/questions/39595782/when-are-numeric-literals-assigned-to-default-types\">When are numeric literals assigned to default types?</a>).</p>\n\n<p>I haven't seen it officially documented, but the high-level process <a href=\"https://users.rust-lang.org/t/the-big-picture-of-compilation-in-rust/6380/3\" rel=\"noreferrer\">has been described by japaric</a>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/ob3x6.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ob3x6.jpg\" alt=\"enter image description here\"></a></p>\n"}], "owner": {"reputation": 615, "user_id": 7119734, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9af9ffd6954945b49d98fbd9e7a04ccf?s=128&d=identicon&r=PG&f=1", "display_name": "yassin", "link": "https://stackoverflow.com/users/7119734/yassin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 413, "favorite_count": 0, "accepted_answer_id": 48382770, "answer_count": 1, "score": 4, "last_activity_date": 1516628499, "creation_date": 1516626324, "last_edit_date": 1516628499, "question_id": 48382267, "link": "https://stackoverflow.com/questions/48382267/why-does-cargo-build-not-show-all-errors-in-my-code", "title": "Why does `cargo build` not show all errors in my code?", "body": "<p>This code doesn't compile:</p>\n\n<pre><code>extern crate iron;\n#[marco_use] //misspelled here\nextern crate mime;\n\nuse iron::prelude::*;\nuse iron::status;\n\nfn main() {\n    let mut response = Response::new();\n    response.set_mut(mime!(Text/Html; Charset=Utf8));\n}\n</code></pre>\n\n<p>it shows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot find macro `mime!` in this scope\n  --&gt; src/main.rs:10:22\n   |\n10 |     response.set_mut(mime!(Text/Html; Charset=Utf8));\n   |                      ^^^^\n</code></pre>\n\n<p>If I add <code>extern crate hyper; use hyper::mime::*;</code>, then it shows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: The attribute `marco_use` is currently unknown to the compiler and \nmay have meaning added to it in the future (see issue #29642)\n --&gt; src\\main.rs:2:1\n  |\n2 | #[marco_use] extern crate mime;\n  | ^^^^^^^^^^^^\n</code></pre>\n\n<p>If I could've seen this earlier, it would've helped me to fix the mistake...</p>\n\n<p>I guess Cargo only shows one error? I could not find anything about this behaviour online. How can I see all errors?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579030, "post_id": 48372993, "comment_id": 83733081, "body": "Isn&#39;t this asking for you to declare <code>rustc</code> in your <code>Cargo.toml</code>?"}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579129, "post_id": 48372993, "comment_id": 83733100, "body": "@tadman I&#39;m not sure. How should I do that? Can you post an answer? I couldn&#39;t find a crate page for the <code>rustc</code> crate on <code>crates.io</code>."}, {"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579193, "post_id": 48372993, "comment_id": 83733116, "body": "I mean add it to <code>Cargo.toml</code> to pull down that dependency instead of using the private one that ships with Rust. Just add that line and try it!"}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579338, "post_id": 48372993, "comment_id": 83733145, "body": "@tadman It doesn&#39;t work. <code>error: no matching package named `rustc` found (required by `rust-swift-serde-gen`)</code>...  So sad."}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579372, "post_id": 48372993, "comment_id": 83733152, "body": "I added <code>rustc = &quot;1.23.0&quot;</code>."}, {"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1516579381, "post_id": 48372993, "comment_id": 83733154, "body": "Guess it&#39;s time to open the magical mystery box that is issue #27812."}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 1, "creation_date": 1516579692, "post_id": 48372993, "comment_id": 83733224, "body": "@tadman Okay. I&#39;m gonna check it out."}], "answers": [{"comments": [{"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "edited": false, "score": 1, "creation_date": 1516580208, "post_id": 48373037, "comment_id": 83733351, "body": "Ah... sounds like there will be no stable <code>rustc</code> crate forever."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 1, "creation_date": 1516585694, "post_id": 48373037, "comment_id": 83734539, "body": "Definitely true! This seems like an XY problem though: What do you want to use <code>rustc</code> for? There might be a stable way of achieving that, given that depending on <code>rustc</code> itself as a library will never be stable."}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516611150, "post_id": 48373037, "comment_id": 83742046, "body": "@daboross I&#39;d like to extract DTO(serializable objects) schema from Rust source code, and make a code generator for another language (e.g. Swift). It&#39;s okay if this code work only on latest stable Rust compiler, but dependency to nightly seems to be an overkill for daily use... I think here&#39;s some missing link..."}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "edited": false, "score": 0, "creation_date": 1516615494, "post_id": 48373037, "comment_id": 83744496, "body": "It seems what I have to make is a compiler plugin rather than a independent program."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516626506, "post_id": 48373037, "comment_id": 83751344, "body": "Ah, cool! It might be a bit more work but I&#39;d recommend making a library for use in build scripts and parsing source using the <a href=\"https://github.com/dtolnay/syn\" rel=\"nofollow noreferrer\">syn</a> crate. I think making a source-parsing plugin deserves a question of its own though here on SO if you&#39;d be willing to make one and link it."}, {"owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1526915594, "post_id": 48373037, "comment_id": 87916581, "body": "@daboross Recently I restarted this work, and I finally discovered that I need type resolution - so analysis stage. Would <code>syn</code> provide fully resolved type info?"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1526930481, "post_id": 48373037, "comment_id": 87924012, "body": "Unfortunately it won&#39;t, it just parses syntax into an AST. I&#39;m not sure what you&#39;ll need to do type resolution at/before compile time, but either hooking into rustc as a plugin or using it as a library is probably a good idea."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1516579382, "creation_date": 1516579382, "answer_id": 48373037, "question_id": 48372993, "link": "https://stackoverflow.com/questions/48372993/how-to-use-rustc-crate/48373037#48373037", "title": "How to use `rustc` crate?", "body": "<p><code>rustc</code> is indeed not published on crates.io.</p>\n\n<p>Because the API for the <code>rustc</code> crate is not stable, you must switch to the nightly compiler and opt in by adding this line at the beginning of your crate root (<code>main.rs</code> or <code>lib.rs</code>):</p>\n\n<pre><code>#![feature(rustc_private)]\n</code></pre>\n\n<p>Naturally, since the API is not stable, every time you update your nightly compiler, things may break without warning!</p>\n"}, {"tags": [], "owner": {"reputation": 101, "user_id": 9970487, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/grcyx.png?s=128&g=1", "display_name": "pylint", "link": "https://stackoverflow.com/users/9970487/pylint"}, "is_accepted": false, "score": 0, "last_activity_date": 1618382980, "creation_date": 1618382980, "answer_id": 67086772, "question_id": 48372993, "link": "https://stackoverflow.com/questions/48372993/how-to-use-rustc-crate/67086772#67086772", "title": "How to use `rustc` crate?", "body": "<h2>Method 1: use rustc-dev component</h2>\n<blockquote>\n<p>rustup component add rustc-dev</p>\n</blockquote>\n<p>then you can use</p>\n<pre><code>#![feature(rustc_private)]\nextern crate rustc_ast;\n</code></pre>\n<h2>Method 2: use rustc-ap-rustc_* crates</h2>\n<p>according to <a href=\"https://github.com/alexcrichton/rustc-auto-publish\" rel=\"nofollow noreferrer\">rustc-auto-publish</a> repo</p>\n<p>crate rustc-ap-rustc_ast is same as rustc_ast in rust source code</p>\n<p>racer, rust-analyzer use rustc-ap-rustc_* crates</p>\n<p>here is some code from racer's Cargo.toml:</p>\n<pre><code>[dependencies.rustc_errors]\npackage = &quot;rustc-ap-rustc_errors&quot;\nversion = &quot;712.0.0&quot;\n\n[dependencies.rustc_parse]\npackage = &quot;rustc-ap-rustc_parse&quot;\nversion = &quot;712.0.0&quot;\n\n[dependencies.rustc_session]\npackage = &quot;rustc-ap-rustc_session&quot;\nversion = &quot;712.0.0&quot;\n</code></pre>\n"}], "owner": {"reputation": 74890, "user_id": 246776, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/PZwCJ.jpg?s=128&g=1", "display_name": "eonil", "link": "https://stackoverflow.com/users/246776/eonil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1620, "favorite_count": 1, "accepted_answer_id": 48373037, "answer_count": 2, "score": 3, "last_activity_date": 1618382980, "creation_date": 1516578966, "last_edit_date": 1516579414, "question_id": 48372993, "link": "https://stackoverflow.com/questions/48372993/how-to-use-rustc-crate", "title": "How to use `rustc` crate?", "body": "<p>I'm trying to use <code>rustc</code> crate in my program.</p>\n\n<pre><code>#[macro_use]\nextern crate rustc;\nextern crate rustc_typeck;\nextern crate syntax;\nextern crate syntax_pos;\n\nuse rustc::hir;\n\nfn main() {\n    println!(\"Hello, world!\");\n\n}                              \n</code></pre>\n\n<p>I also added extra dependency in <code>Cargo.toml</code> file.</p>\n\n<pre><code>[dependencies]\nlog = \"0.4.1\"\n</code></pre>\n\n<p><code>cargo run</code> emits bunch of errors that it's private and nightly only.</p>\n\n<pre><code>error: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n --&gt; src/main.rs:2:1\n  |\n2 | extern crate rustc;\n  | ^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>It seems Cargo want a stable crate from <code>crates.io</code>, but I don't know which crate I should use. There's no crate named <code>rustc</code> on <code>crates.io</code>.</p>\n\n<p>Here's my Rust installation version.</p>\n\n<ul>\n<li>rustc 1.23.0 (766bd11c8 2018-01-01)</li>\n<li>cargo 0.24.0 (45043115c 2017-12-05)</li>\n</ul>\n\n<p>I installed it using <code>rustup</code>.</p>\n\n<p>How can I use <code>rustc</code> crate for my program?</p>\n\n<hr>\n\n<p>Update</p>\n\n<p>I added <code>rustc = \"1.23.0\"</code> to <code>Cargo.toml</code>, but it still doesn't work with this error.</p>\n\n<pre><code>error: no matching package named `rustc` found (required by `rust-swift-serde-gen`)\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516590282, "post_id": 48372207, "comment_id": 83735418, "body": "What happens if you run <code>xargo +nightly rustc --target nvptx64-nvidia-cuda -- --emit=asm</code>?"}, {"owner": {"reputation": 73, "user_id": 2333816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2db04d55b9d799475142b3b247d1112a?s=128&d=identicon&r=PG", "display_name": "Christopher Jackson", "link": "https://stackoverflow.com/users/2333816/christopher-jackson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516636477, "post_id": 48372207, "comment_id": 83758271, "body": "@Shepmaster It gives the same error"}], "answers": [{"tags": [], "owner": {"reputation": 73, "user_id": 2333816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2db04d55b9d799475142b3b247d1112a?s=128&d=identicon&r=PG", "display_name": "Christopher Jackson", "link": "https://stackoverflow.com/users/2333816/christopher-jackson"}, "is_accepted": false, "score": 2, "last_activity_date": 1517093389, "creation_date": 1517093389, "answer_id": 48481361, "question_id": 48372207, "link": "https://stackoverflow.com/questions/48372207/xargo-not-running-in-nightly/48481361#48481361", "title": "Xargo not running in nightly", "body": "<p>Turns out all I had to run was <code>rustup default nightly</code> to solve this issue.</p>\n"}], "owner": {"reputation": 73, "user_id": 2333816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2db04d55b9d799475142b3b247d1112a?s=128&d=identicon&r=PG", "display_name": "Christopher Jackson", "link": "https://stackoverflow.com/users/2333816/christopher-jackson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 850, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1517093389, "creation_date": 1516572420, "last_edit_date": 1516589999, "question_id": 48372207, "link": "https://stackoverflow.com/questions/48372207/xargo-not-running-in-nightly", "title": "Xargo not running in nightly", "body": "<p>I am trying to <a href=\"https://github.com/japaric/nvptx\" rel=\"nofollow noreferrer\">follow some instructions to run my Rust code on a GPU</a>. However, I am unable to get it to compile. </p>\n\n<p>Despite me installing Rust nightly, Xargo still claims that Rust nightly is not installed. I tried uninstalling and reinstalling Xargo twice and nothing changed. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>xargo rustc --target nvptx64-nvidia-cuda -- --emit=asm\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>WARNING: the sysroot can't be built for the Stable channel. Switch to nightly.\n   Compiling kernel v0.1.0 (file:///C:/Users/shado/Workspace/kernel)\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `nvptx64-nvidia-cuda` target may not be installed\n\nerror: aborting due to previous error\n\nerror: Could not compile `kernel`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc --version\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.25.0-nightly (15a1e2844 2018-01-20)\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516557066, "post_id": 48369773, "comment_id": 83726412, "body": "See also: <a href=\"https://stackoverflow.com/q/30633177/155423\">stackoverflow.com/q/30633177/155423</a>, <a href=\"https://stackoverflow.com/q/43081345/155423\">stackoverflow.com/q/43081345/155423</a>, <a href=\"https://stackoverflow.com/q/22243527/155423\">stackoverflow.com/q/22243527/155423</a>."}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516557790, "post_id": 48369773, "comment_id": 83726628, "body": "@Shepmaster it complains that there is no such method like <code>as secs</code> <code>write!(f, &quot;{}&quot;, self.as_secs())</code>. But it exist in <code>std::time::Durration</code> look <a href=\"https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs\" rel=\"nofollow noreferrer\">here</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516557826, "post_id": 48369773, "comment_id": 83726639, "body": "Please carefully read the duplicate answers: <code>&#47;&#47; use `self.0` here</code>. Not just <code>self</code>."}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516558347, "post_id": 48369773, "comment_id": 83726794, "body": "I read it twice. And make a test with <code>struct Timeout(std::time::Duration);</code> and <code>struct Timeout { timeout:std::time::Duration}</code> the second compile fine. (Of course for second there is <code>write!(f, &quot;{}&quot;, self.timeout.as_secs())</code>) So I don&#39;t get it :/"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516558464, "post_id": 48369773, "comment_id": 83726823, "body": "<code>write!(f, &quot;{}&quot;, self.0.as_secs())</code> not <code>write!(f, &quot;{}&quot;, self.as_secs())</code>. <b>self.0</b>.as_secs() not <b>self</b>.as_secs(). <code>self.0</code> not <code>self</code> \u2014 I don&#39;t know how to say it any differently, I&#39;m sorry."}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516558610, "post_id": 48369773, "comment_id": 83726875, "body": "Oh. I get it. But this is just more complex. If I need to write <code>0</code> is better to use <code>timeout</code> that meaning at least sth :)"}], "owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 51, "favorite_count": 0, "closed_date": 1516557031, "answer_count": 0, "score": 0, "last_activity_date": 1516556995, "creation_date": 1516556331, "last_edit_date": 1516556537, "question_id": 48369773, "link": "https://stackoverflow.com/questions/48369773/how-should-i-manage-structures-that-can-be-formatted-differently-in-many-places", "closed_reason": "Duplicate", "title": "How should I manage structures that can be formatted differently in many places in programs but are not my type?", "body": "<p>I want to create a structure called <code>Timeout</code> that is exactly <code>std::time::Duration</code> but implement <code>Display</code> trait for it.</p>\n\n<h2>Background</h2>\n\n<p>I want to use the <a href=\"https://crates.io/crates/query_params\" rel=\"nofollow noreferrer\">query_params</a> crate on my structure that looks like:</p>\n\n<pre><code>#[macro_use]\nextern crate query_params;\nuse std::time::Duration;\n\n#[derive(QueryParams)]\nstruct PullRequestsParametersApi {\n    page: Option&lt;i32&gt;,\n    timeout: Option&lt;Duration&gt;,\n}\n\nfn main() {\n    let pr = PullRequestsParametersApi {\n        page: Some(32),\n        timeout: None,\n    };\n\n    println!(\"Query=  {} &lt;&lt;end\", pr.to_query_params());\n}\n</code></pre>\n\n<p>This causes a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>--&gt; src/main.rs:5:10\n  |\n5 | #[derive(QueryParams)]\n  |          ^^^^^^^^^^^ `std::time::Duration` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n  |\n  = help: the trait `std::fmt::Display` is not implemented for `std::time::Duration`\n  = note: required because of the requirements on the impl of `std::fmt::Display` for `&amp;std::time::Duration`\n  = note: required by `std::fmt::Display::fmt`\n</code></pre>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1516548879, "last_edit_date": 1516548879, "creation_date": 1516547938, "answer_id": 48368321, "question_id": 48368228, "link": "https://stackoverflow.com/questions/48368228/handling-non-stdioerrors-while-implementing-stdiowrite/48368321#48368321", "title": "Handling non std::io::Error(s) while implementing std::io::Write?", "body": "<p>Using <code>io::Error</code> is the <em>only</em> thing you can do because that's the contract that the trait requires. Everything else just boils down to details and ergonomics.</p>\n\n<p><a href=\"https://doc.rust-lang.org/std/io/struct.Error.html#method.new\" rel=\"nofollow noreferrer\"><code>io::Error::new</code></a> accepts an <a href=\"https://doc.rust-lang.org/std/io/enum.ErrorKind.html\" rel=\"nofollow noreferrer\"><code>io::ErrorKind</code></a> and something that can be converted into an <code>error::Error</code>.</p>\n\n<p>I'd probably write a function that transforms your domain error into a <code>io::Error</code> by calling <code>io::Error::new</code> and then use this new function in <code>map_err</code> everywhere. I'd start by cramming everything into <code>ErrorKind::Other</code> until I found a reason that a specific Reqwest error should be something else.</p>\n\n<p>Will your consumers really care about something specifically being too many redirects? By construction, the answer <em>must</em> be \"no\" because they might be operating on a <code>File</code> or a <code>TcpSocket</code>, neither of which have such a concept.</p>\n\n<p>I don't believe I would create a wrapper error type in this case; I can't see how it would provide any value. It would require extra type annotations that you get \"for free\" with a function.</p>\n\n<blockquote>\n  <p>This is not always trivial.</p>\n</blockquote>\n\n<p>That is correct \u2014 gluing two wildly different pieces together sometimes doesn't line up exactly the way we want. That's part of what makes programming both exciting and terrible.</p>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 374, "favorite_count": 0, "accepted_answer_id": 48368321, "answer_count": 1, "score": 0, "last_activity_date": 1516548879, "creation_date": 1516547353, "last_edit_date": 1516547567, "question_id": 48368228, "link": "https://stackoverflow.com/questions/48368228/handling-non-stdioerrors-while-implementing-stdiowrite", "title": "Handling non std::io::Error(s) while implementing std::io::Write?", "body": "<p>I'm trying to implement <code>std::io::Write</code> over HTTP and I'm not sure how to handle errors that do not have a counterpart in <code>std::io::ErrorKind</code>.</p>\n\n<p>Here's a short reproduction:</p>\n\n<pre><code>extern crate reqwest;\n\nuse std::io::Write;\nuse std::io::Result;\n\nstruct HttpClient {\n    // Some configurations (compression, certificates, timeouts)\n}\n\nimpl Write for HttpClient {\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; Result&lt;usize&gt; {\n        let client = ::reqwest::Client::builder().build()?;\n        let res = client.post(\"http://httpbin.org/post\").body(buf).send()?;\n        Ok(buf.len())\n    }\n\n    fn flush(&amp;mut self) -&gt; Result&lt;()&gt; {\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>The compiler responds with 2 errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::io::Error: std::convert::From&lt;reqwest::Error&gt;` is not satisfied\n  --&gt; src/main.rs:12:22\n   |\n12 |         let client = ::reqwest::Client::builder().build()?;\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From&lt;reqwest::Error&gt;` is not implemented for `std::io::Error`\n   |\n   = help: the following implementations were found:\n             &lt;std::io::Error as std::convert::From&lt;std::io::ErrorKind&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;std::ffi::NulError&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;std::io::IntoInnerError&lt;W&gt;&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;serde_json::error::Error&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;openssl::error::ErrorStack&gt;&gt;\n   = note: required by `std::convert::From::from`\n\nerror[E0277]: the trait bound `std::io::Error: std::convert::From&lt;reqwest::Error&gt;` is not satisfied\n  --&gt; src/main.rs:13:19\n   |\n13 |         let res = client.post(\"http://httpbin.org/post\").body(buf).send()?;\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From&lt;reqwest::Error&gt;` is not implemented for `std::io::Error`\n   |\n   = help: the following implementations were found:\n             &lt;std::io::Error as std::convert::From&lt;std::io::ErrorKind&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;std::ffi::NulError&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;std::io::IntoInnerError&lt;W&gt;&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;serde_json::error::Error&gt;&gt;\n             &lt;std::io::Error as std::convert::From&lt;openssl::error::ErrorStack&gt;&gt;\n   = note: required by `std::convert::From::from`\n</code></pre>\n\n<p>There's a couple of things I could do, but I'm not happy with either of them:</p>\n\n<ol>\n<li><p>Use <code>map_err</code> to map <code>reqwest::Error</code> to <code>std::io::Error</code> - This is not always trivial. For example, how would I map <code>TooManyRedirects</code>? I could use <code>std::io::ErrorKind::Other</code> but it doesn't feel right.</p></li>\n<li><p>Define my own error type <code>MyError</code> and implement <code>std::convert::From</code> for <code>reqwest::Error</code> to <code>MyError</code> and for <code>MyError</code> to <code>std::io::Error</code> - This raises the same concerns from before - not all errors are easily convertible.</p></li>\n</ol>\n\n<p>Are there any other better options here? </p>\n"}, {"tags": ["rust", "glium"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516546700, "post_id": 48363897, "comment_id": 83722784, "body": "Welcome to Stack Overflow! Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Specifically, you should be able to provide a <b>small</b> piece of code that reproduces the same error. I would guess it would only need to be one file  about 5 lines long. Hint: make it so this has the same error <code>fn x(_: glium::glutin::EventsLoop) {}</code>"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516559180, "post_id": 48363897, "comment_id": 83727056, "body": "It&#39;s super hard to tell exactly where your error is given that you don&#39;t include your <code>use</code> and <code>extern crate</code> statements, but my best guess is that you aren&#39;t depending on <code>glium</code>, or the &quot;glium&quot; module you&#39;re trying to use isn&#39;t actually <code>glium</code>? There&#39;s a <code>conrod::backend::glium</code> module which <i>is not the same as <code>glium</code></i>. Since you aren&#39;t depending on <code>glium = 0.19</code> in your Cargo.toml, I assume you&#39;re trying to use conrod&#39;s glium module rather than glium itself? The <i>actual</i> <code>glium</code> crate does have a <code>glutin</code> property."}, {"owner": {"reputation": 145, "user_id": 8028639, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89f9827aac5f994b31bdd9376f743ec3?s=128&d=identicon&r=PG&f=1", "display_name": "jmcph4", "link": "https://stackoverflow.com/users/8028639/jmcph4"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516690521, "post_id": 48363897, "comment_id": 83779139, "body": "@daboross your comment solved the problem. Basically I was trying to use <code>conrod::backend::glium</code> insterad of <code>glium::glutin</code>. I attribute this to myself but also the misleading Conrod example code (personally I think their documentation is lacking). I&#39;d like to mark this as answered, care to post it as such?"}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1516690605, "post_id": 48363897, "comment_id": 83779176, "body": "I&#39;ll do that - glad it works!"}], "answers": [{"tags": [], "owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "is_accepted": true, "score": 1, "last_activity_date": 1516690806, "creation_date": 1516690806, "answer_id": 48395862, "question_id": 48363897, "link": "https://stackoverflow.com/questions/48363897/cannot-find-glutin-in-glium-when-using-conrod/48395862#48395862", "title": "Cannot find `glutin` in `glium` when using Conrod", "body": "<p>I believe this is a misconception about the module structure of <code>conrod</code> and <code>glium</code>.</p>\n\n<p>The conrod crate has a number of backend modules, containing utility functions for each of the different backends. <code>conrod::backend::glium</code> is this module for glium, and it contains structures and things useful for using conrod with glium.</p>\n\n<p>In your case, however, I think you mistook this module for <em><code>glium</code> itself</em>.</p>\n\n<p><code>glium</code> is a separate crate from conrod, and you'll need to depend on it much like you depend on <code>glutin</code>. <code>glium</code> does indeed have a <code>glium::conrod</code> property, so if you do pull it in with <code>extern crate glium;</code> rather than using <code>conrod::backend::glium</code>, it should \"just work\"!</p>\n\n<p>You'll need to add some line <code>glium = 0.x</code> in your <code>Cargo.toml</code> as well, but that should be trivial.</p>\n"}], "owner": {"reputation": 145, "user_id": 8028639, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89f9827aac5f994b31bdd9376f743ec3?s=128&d=identicon&r=PG&f=1", "display_name": "jmcph4", "link": "https://stackoverflow.com/users/8028639/jmcph4"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 568, "favorite_count": 0, "accepted_answer_id": 48395862, "answer_count": 1, "score": 0, "last_activity_date": 1516690806, "creation_date": 1516511541, "last_edit_date": 1516549040, "question_id": 48363897, "link": "https://stackoverflow.com/questions/48363897/cannot-find-glutin-in-glium-when-using-conrod", "title": "Cannot find `glutin` in `glium` when using Conrod", "body": "<p>I am attempting to add a GUI to a <a href=\"https://github.com/jmcph4/rsnotes\" rel=\"nofollow noreferrer\">small project of mine</a> using Conrod. I have managed to work my way down to 3 compilation errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0433]: failed to resolve. Could not find `glutin` in `glium`\n  --&gt; src/support/mod.rs:88:53\n   |\n88 |     pub fn next(&amp;mut self, events_loop: &amp;mut glium::glutin::EventsLoop) -&gt; Vec&lt;glium::glutin::Event&gt; {\n   |                                                     ^^^^^^ Could not find `glutin` in `glium`\n\nerror[E0433]: failed to resolve. Could not find `glutin` in `glium`\n  --&gt; src/support/mod.rs:88:87\n   |\n88 |     pub fn next(&amp;mut self, events_loop: &amp;mut glium::glutin::EventsLoop) -&gt; Vec&lt;glium::glutin::Event&gt; {\n   |                                                                                       ^^^^^^ Could not find `glutin` in `glium`\n\nerror[E0433]: failed to resolve. Could not find `glutin` in `glium`\n   --&gt; src/support/mod.rs:106:24\n    |\n106 |                 glium::glutin::ControlFlow::Break\n    |                        ^^^^^^ Could not find `glutin` in `glium`\n</code></pre>\n\n<p>I've studied the examples that ship with Conrod (particularly the <code>text_edit.rs</code> example) and have successfully compiled and run them. As far as I can tell, they use the same techniques (as my code is directly inspired by their examples), yet does not suffer from the unresolved imports of <code>glutin</code>.</p>\n\n<p>Furthermore, I cannot seem to find any reference to <code>glutin</code> in the project directory itself:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$&gt; pwd\n~/dev/conrod/src\n$&gt; tree.\n    .\n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 gfx.rs\n\u2502   \u251c\u2500\u2500 glium.rs\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u251c\u2500\u2500 piston\n\u2502   \u2502   \u251c\u2500\u2500 draw.rs\n\u2502   \u2502   \u251c\u2500\u2500 event.rs\n\u2502   \u2502   \u2514\u2500\u2500 mod.rs\n\u2502   \u2514\u2500\u2500 winit.rs\n\u251c\u2500\u2500 border.rs\n\u251c\u2500\u2500 color.rs\n\u251c\u2500\u2500 cursor.rs\n\u251c\u2500\u2500 event.rs\n\u251c\u2500\u2500 graph\n\u2502   \u251c\u2500\u2500 algo.rs\n\u2502   \u251c\u2500\u2500 depth_order.rs\n\u2502   \u2514\u2500\u2500 mod.rs\n\u251c\u2500\u2500 guide\n\u2502   \u251c\u2500\u2500 chapter_1.rs\n\u2502   \u251c\u2500\u2500 chapter_2.rs\n\u2502   \u2514\u2500\u2500 mod.rs\n\u251c\u2500\u2500 image.rs\n\u251c\u2500\u2500 input\n\u2502   \u251c\u2500\u2500 global.rs\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u251c\u2500\u2500 state.rs\n\u2502   \u2514\u2500\u2500 widget.rs\n\u251c\u2500\u2500 label.rs\n\u251c\u2500\u2500 lib.rs\n\u251c\u2500\u2500 position\n\u2502   \u251c\u2500\u2500 matrix.rs\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u251c\u2500\u2500 range.rs\n\u2502   \u2514\u2500\u2500 rect.rs\n\u251c\u2500\u2500 render.rs\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 global_input.rs\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u251c\u2500\u2500 ui.rs\n\u2502   \u2514\u2500\u2500 widget_input.rs\n\u251c\u2500\u2500 text.rs\n\u251c\u2500\u2500 theme.rs\n\u251c\u2500\u2500 ui.rs\n\u251c\u2500\u2500 utils.rs\n\u2514\u2500\u2500 widget\n    \u251c\u2500\u2500 bordered_rectangle.rs\n    \u251c\u2500\u2500 builder.rs\n    \u251c\u2500\u2500 button.rs\n    \u251c\u2500\u2500 canvas.rs\n    \u251c\u2500\u2500 collapsible_area.rs\n    \u251c\u2500\u2500 drop_down_list.rs\n    \u251c\u2500\u2500 envelope_editor.rs\n    \u251c\u2500\u2500 file_navigator\n    \u2502   \u251c\u2500\u2500 directory_view.rs\n    \u2502   \u2514\u2500\u2500 mod.rs\n    \u251c\u2500\u2500 graph\n    \u2502   \u251c\u2500\u2500 mod.rs\n    \u2502   \u2514\u2500\u2500 node.rs\n    \u251c\u2500\u2500 grid.rs\n    \u251c\u2500\u2500 id.rs\n    \u251c\u2500\u2500 list.rs\n    \u251c\u2500\u2500 list_select.rs\n    \u251c\u2500\u2500 matrix.rs\n    \u251c\u2500\u2500 mod.rs\n    \u251c\u2500\u2500 number_dialer.rs\n    \u251c\u2500\u2500 plot_path.rs\n    \u251c\u2500\u2500 primitive\n    \u2502   \u251c\u2500\u2500 image.rs\n    \u2502   \u251c\u2500\u2500 line.rs\n    \u2502   \u251c\u2500\u2500 mod.rs\n    \u2502   \u251c\u2500\u2500 point_path.rs\n    \u2502   \u251c\u2500\u2500 shape\n    \u2502   \u2502   \u251c\u2500\u2500 circle.rs\n    \u2502   \u2502   \u251c\u2500\u2500 mod.rs\n    \u2502   \u2502   \u251c\u2500\u2500 oval.rs\n    \u2502   \u2502   \u251c\u2500\u2500 polygon.rs\n    \u2502   \u2502   \u251c\u2500\u2500 rectangle.rs\n    \u2502   \u2502   \u2514\u2500\u2500 triangles.rs\n    \u2502   \u2514\u2500\u2500 text.rs\n    \u251c\u2500\u2500 range_slider.rs\n    \u251c\u2500\u2500 rounded_rectangle.rs\n    \u251c\u2500\u2500 scrollbar.rs\n    \u251c\u2500\u2500 scroll.rs\n    \u251c\u2500\u2500 slider.rs\n    \u251c\u2500\u2500 tabs.rs\n    \u251c\u2500\u2500 text_box.rs\n    \u251c\u2500\u2500 text_edit.rs\n    \u251c\u2500\u2500 title_bar.rs\n    \u251c\u2500\u2500 toggle.rs\n\u2514\u2500\u2500 xy_pad.rs\n</code></pre>\n\n<p>For reference, my <code>Cargo.toml</code> also includes <code>glutin</code> as a dependency:</p>\n\n<pre><code>[features]\ndefault = [\"winit\", \"glium\"]\n\nwinit = [\"conrod/winit\"]\nglium = [\"conrod/glium\"]\n\n[dependencies]\nconrod = \"^0.57\"\nfind_folder = \"*\"\nglutin = \"*\"\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1681, "user_id": 1394731, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/18e7f1db4c9cd9109baef63567e26f51?s=128&d=identicon&r=PG", "display_name": "theicfire", "link": "https://stackoverflow.com/users/1394731/theicfire"}, "edited": false, "score": 0, "creation_date": 1516509167, "post_id": 48363524, "comment_id": 83714186, "body": "Ah thanks! And to explicitly answer the second question, <code>*(s.deref())</code> is not allowed because <code>s.deref()</code> is borrowed (a reference)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1516506947, "creation_date": 1516506947, "answer_id": 48363524, "question_id": 48363500, "link": "https://stackoverflow.com/questions/48363500/does-rcderef-return-a-reference/48363524#48363524", "title": "Does Rc::deref return a reference?", "body": "<p><code>*s</code> doesn't expand to <code>s.deref()</code>, it expands to <code>*(s.deref())</code>. That's because the <code>*</code> operator's primary function is to dereference pointers. Intuitively, you would expect <code>*s</code> to not return a pointer (unless <code>s</code> was a pointer to a pointer) whether <code>s</code> is a normal pointer or a smart pointer. This expansion preserves that intuition.</p>\n"}], "owner": {"reputation": 1681, "user_id": 1394731, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/18e7f1db4c9cd9109baef63567e26f51?s=128&d=identicon&r=PG", "display_name": "theicfire", "link": "https://stackoverflow.com/users/1394731/theicfire"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 227, "favorite_count": 0, "closed_date": 1516546927, "accepted_answer_id": 48363524, "answer_count": 1, "score": 2, "last_activity_date": 1516508874, "creation_date": 1516506582, "last_edit_date": 1516508874, "question_id": 48363500, "link": "https://stackoverflow.com/questions/48363500/does-rcderef-return-a-reference", "closed_reason": "Duplicate", "title": "Does Rc::deref return a reference?", "body": "<p>The following code:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let s = Rc::new(String::from(\"Hello\"));\n    let o: &amp;String = *s;\n}\n</code></pre>\n\n<p>Gives me this error:</p>\n\n<pre><code>  = note: expected type `&amp;std::string::String`\n             found type `std::string::String`\n</code></pre>\n\n<p>I expected that <code>*s</code> would give some sort of reference, because the <code>deref</code> signature is <code>fn deref(&amp;self) -&gt; &amp;T</code>.</p>\n\n<p>One thing that confuses me is if I change the <code>let o</code> line to this:</p>\n\n<pre><code>let o: String = *s;\n</code></pre>\n\n<p>I now get an error of <code>cannot move out of borrowed content</code>. </p>\n\n<p>So I have two related questions</p>\n\n<ol>\n<li>Why does <code>*s</code> for Rc values not return a reference?</li>\n<li>I understand how references cannot be moved, how is <code>*s</code> a borrow, but not a reference? I thought these words meant the same thing?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516504600, "post_id": 48363238, "comment_id": 83713513, "body": "You almost <i>never</i> want to use <code>Rc::get_mut</code> or <code>Rc::make_mut</code>."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516535824, "post_id": 48363238, "comment_id": 83719545, "body": "<code>FnMut</code> requires mutable access; if you need mutable access to a shared value you need a locking concept.  Common patterns are <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> and <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> - but <code>FnMut</code> (and most other traits) won&#39;t be implemented automatically because you need to handle lock failures."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516504643, "post_id": 48363306, "comment_id": 83713520, "body": "You almost <i>never</i> want to use <code>Rc::try_unwrap</code>; that consumes the <code>Rc</code> and only works if there are no other shared owners."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516504669, "post_id": 48363306, "comment_id": 83713522, "body": "If you have a single match arm, you can just use <code>if let</code>"}], "tags": [], "owner": {"reputation": 1681, "user_id": 1394731, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/18e7f1db4c9cd9109baef63567e26f51?s=128&d=identicon&r=PG", "display_name": "theicfire", "link": "https://stackoverflow.com/users/1394731/theicfire"}, "is_accepted": false, "score": 0, "last_activity_date": 1516504512, "last_edit_date": 1516504512, "creation_date": 1516504076, "answer_id": 48363306, "question_id": 48363238, "link": "https://stackoverflow.com/questions/48363238/using-a-rcfnmut-as-an-fnmut/48363306#48363306", "title": "Using a Rc&lt;FnMut&gt; as an FnMut", "body": "<p>Ah! <code>try_unwrap</code> will give you move access to the closure, while <code>*f</code> will give you a reference to the closure.</p>\n\n<p>So a solution could be:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let f = Rc::new(|x| x);\n    let v = vec![1, 2, 3];\n    match Rc::try_unwrap(f) {\n        Ok(f2) =&gt; {\n            let _: Vec&lt;_&gt; = v.into_iter().map(f2).collect();\n        }\n        _ =&gt; ()\n    }\n}\n</code></pre>\n\n<p>(Although there's probably a cleaner way to do it)</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1516506743, "last_edit_date": 1516506743, "creation_date": 1516504286, "answer_id": 48363323, "question_id": 48363238, "link": "https://stackoverflow.com/questions/48363238/using-a-rcfnmut-as-an-fnmut/48363323#48363323", "title": "Using a Rc&lt;FnMut&gt; as an FnMut", "body": "<p>Passing <code>f</code> directly doesn't work, because <code>Rc&lt;T&gt; where T: FnMut</code> doesn't implement <code>FnMut</code>.</p>\n\n<p>If your closure doesn't perform any mutation (i.e. it implements <code>Fn</code>), you can write <code>&amp;*f</code> instead. This works because:</p>\n\n<ol>\n<li><code>Rc</code> implements <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code></a>, which changes the behavior of the <code>*</code> operator such that <code>*x</code> expands to <code>*(x.deref())</code>, giving us access to the wrapped closure.</li>\n<li>the <code>*</code> operator produces an lvalue, which allows you to take a reference to the result</li>\n<li>immutable references to types that implement <code>Fn</code> <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.FnMut.html#implementors\" rel=\"nofollow noreferrer\">implement</a> <code>FnMut</code>.</li>\n</ol>\n\n\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let f = Rc::new(|x| x);\n    let v = vec![1, 2, 3];\n    let _: Vec&lt;_&gt; = v.into_iter().map(&amp;*f).collect();\n}\n</code></pre>\n\n<p>However, <code>&amp;mut *f</code> won't work if the closure is stored in an <code>Rc</code>, because <code>Rc</code> doesn't implement <code>DerefMut</code>, and thus doesn't let us mutably borrow its interior.</p>\n\n<p>Another option is to pass a closure that calls <code>f</code> to <code>map</code>.</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let f = Rc::new(|x| x);\n    let v = vec![1, 2, 3];\n    let _: Vec&lt;_&gt; = v.into_iter().map(|v| f(v)).collect();\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/first-edition/deref-coercions.html#deref-and-method-calls\" rel=\"nofollow noreferrer\"><code>Deref</code> coercions are also applied on method calls.</a> Although it doesn't look like one, <code>f(v)</code> actually expands (as of Rust 1.23) to <code>f.call((v,))</code> (note that this syntax is unstable and thus only a nightly compiler will accept it, if the <code>fn_traits</code> feature is enabled).</p>\n\n<hr>\n\n<p>If the closure is in a <code>Box</code> instead, then you can write <code>&amp;mut *f</code>, because <code>Box</code> implements <code>DerefMut</code>.</p>\n\n<pre><code>fn main() {\n    let mut f = Box::new(|x| x);\n    let v = vec![1, 2, 3];\n    let _: Vec&lt;_&gt; = v.into_iter().map(&amp;mut *f).collect();\n}\n</code></pre>\n"}], "owner": {"reputation": 1681, "user_id": 1394731, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/18e7f1db4c9cd9109baef63567e26f51?s=128&d=identicon&r=PG", "display_name": "theicfire", "link": "https://stackoverflow.com/users/1394731/theicfire"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 0, "accepted_answer_id": 48363323, "answer_count": 2, "score": 2, "last_activity_date": 1516506743, "creation_date": 1516503348, "last_edit_date": 1516504137, "question_id": 48363238, "link": "https://stackoverflow.com/questions/48363238/using-a-rcfnmut-as-an-fnmut", "title": "Using a Rc&lt;FnMut&gt; as an FnMut", "body": "<p>Given a <code>Rc&lt;FnMut&gt;</code>, how do I use this when mapping over an iterator? For example:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let f = Rc::new(|x| x);\n    let v = vec![1, 2, 3];\n    let _: Vec&lt;_&gt; = v.into_iter().map(f).collect();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3a3e947872377713364655667ee319ef&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Gives the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::rc::Rc&lt;[closure@src/main.rs:6:21: 6:26]&gt;: std::ops::FnMut&lt;({integer},)&gt;` is not satisfied\n --&gt; src/main.rs:8:35\n  |\n8 |     let _: Vec&lt;_&gt; = v.into_iter().map(f).collect();\n  |                                   ^^^ the trait `std::ops::FnMut&lt;({integer},)&gt;` is not implemented for `std::rc::Rc&lt;[closure@src/main.rs:6:21: 6:26]&gt;`\n\nerror[E0599]: no method named `collect` found for type `std::iter::Map&lt;std::vec::IntoIter&lt;{integer}&gt;, std::rc::Rc&lt;[closure@src/main.rs:6:21: 6:26]&gt;&gt;` in the current scope\n --&gt; src/main.rs:8:42\n  |\n8 |     let _: Vec&lt;_&gt; = v.into_iter().map(f).collect();\n  |                                          ^^^^^^^\n  |\n  = note: the method `collect` exists but the following trait bounds were not satisfied:\n          `std::iter::Map&lt;std::vec::IntoIter&lt;{integer}&gt;, std::rc::Rc&lt;[closure@src/main.rs:6:21: 6:26]&gt;&gt; : std::iter::Iterator`\n          `&amp;mut std::iter::Map&lt;std::vec::IntoIter&lt;{integer}&gt;, std::rc::Rc&lt;[closure@src/main.rs:6:21: 6:26]&gt;&gt; : std::iter::Iterator`\n</code></pre>\n\n<p>I thought a simple <code>*f</code> would fix the problem, but then I get a <code>cannot move out of borrowed content</code> error.</p>\n\n<p>The closest I've come is this:</p>\n\n<pre><code>use std::rc::Rc;\n\nfn main() {\n    let mut f = Rc::new(|x| x);\n    let v = vec![1, 2, 3];\n    let _: Vec&lt;_&gt; = v.into_iter().map(Rc::get_mut(&amp;mut f).unwrap()).collect();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8bfaf1d834a47c82861344a82b7fd321&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": ["variables", "rust", "unused-variables"], "comments": [{"owner": {"reputation": 878, "user_id": 4136114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/PkUs6.jpg?s=128&g=1", "display_name": "RichardForrester", "link": "https://stackoverflow.com/users/4136114/richardforrester"}, "edited": false, "score": 2, "creation_date": 1563771806, "post_id": 48361537, "comment_id": 100794366, "body": "Haskell does the same thing. Perhaps that is the inspiration."}], "answers": [{"comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 8, "creation_date": 1516489549, "post_id": 48361729, "comment_id": 83710825, "body": "<i>It is possible to use a _ pattern for that</i> <code>let _ = </code> and <code>let _foo = </code> have slightly different behavior. Both will stop the warning, but <code>let _</code> it will cause the returned value to be <code>Drop</code>ed at the end of the statement instead of at the end of the scope because there is no binding to hold it."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 2, "creation_date": 1516494307, "post_id": 48361729, "comment_id": 83711849, "body": "The next words were literally &quot;which is not a variable binding&quot;. But I&#39;ve added this remark in the &quot;RAII&quot; point, for clarification."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1516495321, "post_id": 48361729, "comment_id": 83712046, "body": "Fair. I think most beginners would have no way to know that a pattern and a binding have different drop behaviors, so I honestly couldn&#39;t tell if that&#39;s what you were trying to say when you referenced that."}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1597318684, "post_id": 48361729, "comment_id": 112097053, "body": "@loganfsmyth I guess that is not true, see: <a href=\"https://youtu.be/b4mS5UPHh20?t=3054\" rel=\"nofollow noreferrer\">youtu.be/b4mS5UPHh20?t=3054</a>. The value is not dropped although assigned to an underscore variable."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1597321363, "post_id": 48361729, "comment_id": 112098364, "body": "@J.Doe I didn&#39;t bother watching the video, but what loganfsmyth is absolutely correct."}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1597321620, "post_id": 48361729, "comment_id": 112098485, "body": "@mcarton What about this: <a href=\"https://codeandbitters.com/drop-or-not/\" rel=\"nofollow noreferrer\">codeandbitters.com/drop-or-not</a>? The value won&#39;t be dropped when assigned to a underscore variable. Or won&#39;t you bother reading the article?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1597327459, "post_id": 48361729, "comment_id": 112101672, "body": "Oh, but in the usual case of <code>let _ = foo();</code> the result <i>is</i> dropped, in the special case of <code>let _ = another_binding;</code> then there is a difference, but no-one would ever write that. <a href=\"https://codeandbitters.com/drop-or-not/\" rel=\"nofollow noreferrer\">The article</a> summarizes that well with \u201c The wildcard pattern _ means &quot;don&#39;t bind the result to a name&quot;, not &quot;throw away the result&quot;. If the right side is a variable name, the &quot;don&#39;t bind&quot; behavior overrides the right side being evaluated as an expression (which would trigger a move).\u201d"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 22, "last_activity_date": 1597327764, "last_edit_date": 1597327764, "creation_date": 1516487240, "answer_id": 48361729, "question_id": 48361537, "link": "https://stackoverflow.com/questions/48361537/why-do-underscore-prefixed-variables-exist/48361729#48361729", "title": "Why do underscore prefixed variables exist?", "body": "<p>I can see several reasons:</p>\n<ul>\n<li>You are calling a function that returns a <code>#[must_use]</code> type, but in your specific case, you know you can safely ignore the value. It is possible to use a <code>_</code> pattern for that (which is not a variable binding, it's a pattern of its own, but this is probably where the underscore prefix convention comes from), but you might want to document why you ignore the value, or what that value is. This is particularly common in tests in my experience.</li>\n<li>Function parameter: You might have to name a parameter because it's part of your API, but don't actually need to use it. <a href=\"https://github.com/rust-lang/rfcs/pull/1685\" rel=\"noreferrer\">Anonymous parameters were removed in the 2018 edition.</a></li>\n<li>Macros. A variable created in a macro may or may not be used later. It would be annoying to not be able to silence warnings in a macro call. In this case there is a convention of doubling the underscores, this is enforced for example by clippy's <a href=\"https://rust-lang.github.io/rust-clippy/current/#used_underscore_binding\" rel=\"noreferrer\"><code>used_underscore_binding</code></a> lint.</li>\n<li>RAII. You might want to have a variable exist for its destructor side effect, but not use it otherwise. It is not possible to use simply <code>_</code> for this use-case, as <code>_</code> is not a variable binding and the value would not be dropped at the end of the enclosing block as with variable binding.</li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 11934, "user_id": 54606, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e7de961282b156410426c657342ef466?s=128&d=identicon&r=PG", "display_name": "Lo&#239;c Faure-Lacroix", "link": "https://stackoverflow.com/users/54606/lo%c3%afc-faure-lacroix"}, "edited": false, "score": 2, "creation_date": 1560223659, "post_id": 48370313, "comment_id": 99654639, "body": "I&#39;d argue that in the case of the <code>Drop</code> it would make more sense to call <code>drop</code> manually than to use the <code>_result</code> to hide that <code>_result</code> is being actually used for something. In the case of calling <code>drop</code> where required, it would make the value used and still be obvious that it required to be dropped somewhere."}], "tags": [], "owner": {"reputation": 339, "user_id": 9210924, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-4wYHrjZFWfw/AAAAAAAAAAI/AAAAAAAAAEs/Ql3GeOp43dk/photo.jpg?sz=128", "display_name": "Daniel Wilkins", "link": "https://stackoverflow.com/users/9210924/daniel-wilkins"}, "is_accepted": false, "score": 4, "last_activity_date": 1516560432, "last_edit_date": 1516560432, "creation_date": 1516559806, "answer_id": 48370313, "question_id": 48361537, "link": "https://stackoverflow.com/questions/48361537/why-do-underscore-prefixed-variables-exist/48370313#48370313", "title": "Why do underscore prefixed variables exist?", "body": "<p>Here are some examples as to why you might want the behavior of ignoring an unused variable. Consider <code>_s</code> in the following function.</p>\n\n<pre><code>fn add_numbers(f: i32, _s: i32) -&gt; i32 {\n    f + 1\n}\n</code></pre>\n\n<p>The <code>_s</code> variable makes it so we can keep the signature the same even if we haven't implemented it. This also works if we found out we didn't need the <code>_s</code> but because our library is used in so many different projects we didn't want to change the API to our function. This may or may not be bad practice but could be useful in a situation where <code>_s</code> needs to stay and not do anything. We could also use <code>_</code> here but <code>_s</code> potentially has more meaning as to what the variable is for in the future.</p>\n\n<p>The next place where this can be useful is when a type implements <code>Drop</code> and you care where that logic happens. In this example you can see that the <code>_result</code> variable is needed so that the <code>Drop</code> happens at the end.</p>\n\n<pre><code>fn main() {\n    let mut num = 1;\n    // let _ = try_add_numbers(&amp;mut num); // Drop is called here for _\n    let _result = try_add_numbers(&amp;mut num); // without the _result we have a warning.\n\n    println!(\"{}\", num);\n    // Drop is called here for the _result\n}\n\n// keep the api the same even if an aurgument isn't needed anymore or\n// has not been used yet.\nfn add_numbers(f: i32, _s: i32) -&gt; i32 {\n    f + 1\n}\n\n// This function returns a result\nfn try_add_numbers(i: &amp;mut i32) -&gt; Result&lt;GoodResult, GoodResult&gt; {\n    if *i &gt; 3 {\n        return Err(GoodResult(false));\n    }\n    *i = add_numbers(*i, 0);\n    Ok(GoodResult(true))\n}\n\nstruct GoodResult(bool);\n\nimpl Drop for GoodResult {\n    fn drop(&amp;mut self) {\n        let &amp;mut GoodResult(result) = self;\n        if result {\n            println!(\"It worked\");\n        } else {\n            println!(\"It failed\");\n        }\n    }\n}\n</code></pre>\n\n<p>If we use <code>let _result = try_add_numbers(&amp;mut num);</code> we have a variable that is in scope until the end of main and drop will be called then. If we had used <code>let _ = try_add_numbers(&amp;mut num);</code> we still don't get a warning but drop is called at the end of the statement. If we use <code>try_add_numbers(&amp;mut num);</code> without a let binding we get a warning. The output of this program does change depending on which we use with our try_add_numbers function. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>It worked\n2\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2\nIt worked\n</code></pre>\n\n<p>So there is a use for both <code>_</code> and <code>_named</code> variables which need to be chosen based on what the output of your programs needs to be. Play around with my example on the <a href=\"https://play.rust-lang.org/?gist=acf39effd39434491c28b6482c48231c&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a> to get a feel for it. </p>\n"}, {"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1597328934, "post_id": 60344192, "comment_id": 112102497, "body": "The question is \u201cWhy would you ever use <code>_e</code>\u201d. This says \u201cActually, you can just use <code>_</code> instead.\u201d How is this an answer to the question?"}, {"owner": {"reputation": 5615, "user_id": 1858327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/i9v0b.jpg?s=128&g=1", "display_name": "Captain Man", "link": "https://stackoverflow.com/users/1858327/captain-man"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1597429477, "post_id": 60344192, "comment_id": 112140114, "body": "@mcarton Wrote this answer a while ago now while learning Rust on a toy project. Can&#39;t remember my exact logic because I don&#39;t remember how I got here. Best guess from the context is that I was doing something like <code>Err(e)</code> and got an error about it being unused. Maybe the compiler even suggested something like <code>use _e to avoid the warning</code> and it led me here. I likely then learned that I could use <code>_</code> to avoid the error. Assuming that&#39;s what OP is dealing with it answers the underlying concern. Either way, since I got here due to <code>_e</code> I am sure others do too and suggesting <code>_</code> seems helpful."}, {"owner": {"reputation": 5615, "user_id": 1858327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/i9v0b.jpg?s=128&g=1", "display_name": "Captain Man", "link": "https://stackoverflow.com/users/1858327/captain-man"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1597429792, "post_id": 60344192, "comment_id": 112140226, "body": "@mcarton I know I&#39;ve seen stuff like this addressed on Meta before but I can&#39;t remember the terms. Here are (again, tangentially) related posts about answers to &quot;different questions&quot; than the one asked: <a href=\"https://meta.stackexchange.com/q/8891/289725\">meta.stackexchange.com/q/8891/289725</a> <a href=\"https://meta.stackexchange.com/q/66377/289725\">meta.stackexchange.com/q/66377/289725</a>"}], "tags": [], "owner": {"reputation": 5615, "user_id": 1858327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/i9v0b.jpg?s=128&g=1", "display_name": "Captain Man", "link": "https://stackoverflow.com/users/1858327/captain-man"}, "is_accepted": false, "score": -1, "last_activity_date": 1597327522, "last_edit_date": 1597327522, "creation_date": 1582308735, "answer_id": 60344192, "question_id": 48361537, "link": "https://stackoverflow.com/questions/48361537/why-do-underscore-prefixed-variables-exist/60344192#60344192", "title": "Why do underscore prefixed variables exist?", "body": "<p>I stumbled here through Google while looking up this warning related to match variables. This is tangentially related.</p>\n<p>Sometimes you may have code where you get a <code>Result</code> and want to match on the cases, but you don't care about the error value. Instead of using <code>_e</code> or something, you can actually just use <code>_</code> which explicitly doesn't bind. Here's a concrete example. We don't care about the value of the error since we're returning our own.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn some_method() -&gt; Result&lt;u32, MyCustomError&gt; {\n    // ...\n    let id: u32 = match some_str.parse() {\n        Ok(value) =&gt; value,\n        Err(_) =&gt; return Err(MyCustomError::Blah)\n    };\n    // ...\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 15011229, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fY3PpZbe5CA/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rebICcGh31WRSRDxgpRkfNIMMCXFw/photo.jpg?sz=128", "display_name": "imlk", "link": "https://stackoverflow.com/users/15011229/imlk"}, "is_accepted": false, "score": 0, "last_activity_date": 1610702081, "creation_date": 1610702081, "answer_id": 65733313, "question_id": 48361537, "link": "https://stackoverflow.com/questions/48361537/why-do-underscore-prefixed-variables-exist/65733313#65733313", "title": "Why do underscore prefixed variables exist?", "body": "<ul>\n<li><code>let a</code> is a value binding, and a stack space will be allocated to store it's value.</li>\n<li><code>let _a</code> is something behaves like <code>let a</code>. In addition, it is marked as <code>intentional</code>, so that compiler will not pop up a warning if <code>_a</code> is not used.</li>\n<li><code>let _</code> is a pattern, and <code>_</code> is a <code>reserved identifier</code> which cannot be used elsewhere. This will not cause a stack space to be allocated, so the value on the right side of <code>=</code> will be released soon after this statement.</li>\n</ul>\n<p>Here is a example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0cd471ed80a7170778291a41b295f88c\" rel=\"nofollow noreferrer\">Playground</a></p>\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct Node {\n    value: usize,\n}\n\nimpl Drop for Node {\n    fn drop(&amp;mut self) {\n        println!(&quot;drop() {}&quot;, self.value);\n    }\n}\n\npub fn square() {\n    let a = Node { value: 1 };\n    let _a = Node { value: 2 };\n    let _ = Node { value: 3 };\n\n    println!(&quot;Hello, world!&quot;);\n}\n\nfn main() {\n    square();\n}\n</code></pre>\n<p>the output is:</p>\n<pre><code>drop() 3\nHello, world!\ndrop() 2\ndrop() 1\n</code></pre>\n<p>You can read <a href=\"https://medium.com/codechain/rust-underscore-does-not-bind-fec6a18115a8\" rel=\"nofollow noreferrer\">this</a> to learn more</p>\n"}], "owner": {"reputation": 293, "user_id": 7702791, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SHQuG.gif?s=128&g=1", "display_name": "Sir Platypus", "link": "https://stackoverflow.com/users/7702791/sir-platypus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9504, "favorite_count": 1, "accepted_answer_id": 48361729, "answer_count": 4, "score": 19, "last_activity_date": 1610702081, "creation_date": 1516485743, "question_id": 48361537, "link": "https://stackoverflow.com/questions/48361537/why-do-underscore-prefixed-variables-exist", "title": "Why do underscore prefixed variables exist?", "body": "<p>I am learning Rust, and came across the fact that adding an underscore at the beginning of a variable name will make the compiler not warn if it is unused.  I am wondering why that feature exists, since unused variables are frowned upon. </p>\n"}, {"tags": ["rust", "future", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516473815, "post_id": 48359296, "comment_id": 83706356, "body": "Could it be that the future has registered itself with the <code>Core</code>, thus you&#39;ve only dropped one of multiple shared owners?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516529160, "post_id": 48359296, "comment_id": 83717931, "body": "I&#39;m assuming this is related to my answer in <a href=\"https://stackoverflow.com/questions/48359296/why-doesnt-dropping-this-spawnhandle-cancel-its-future\" title=\"why doesnt dropping this spawnhandle cancel its future\">stackoverflow.com/questions/48359296/&hellip;</a> - sorry for not having tested it.  I&#39;ll look into it."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516530858, "post_id": 48359296, "comment_id": 83718298, "body": "It&#39;s an inverted logic <a href=\"https://github.com/alexcrichton/futures-rs/issues/669\" rel=\"nofollow noreferrer\">bug in <code>futures</code></a>.  If you call <code>forget()</code> on the <code>SpawnHandle</code> it should actually drop it, which is the opposite of what the doc says."}], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1516899229, "last_edit_date": 1516899229, "creation_date": 1516533030, "answer_id": 48366144, "question_id": 48359296, "link": "https://stackoverflow.com/questions/48359296/why-doesnt-dropping-this-spawnhandle-cancel-its-future/48366144#48366144", "title": "Why doesn&#39;t dropping this SpawnHandle cancel its future?", "body": "<p>This is a (now fixed) <a href=\"https://github.com/alexcrichton/futures-rs/issues/669\" rel=\"nofollow noreferrer\">bug in the <code>futures</code> crate</a>; version <code>0.1.18</code> should include the fix.</p>\n\n<p>It used inverted values for <code>keep_running: bool</code> in <code>SpawnHandle</code>/<code>Executor</code>.</p>\n"}], "owner": {"reputation": 105, "user_id": 9238239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae7c677f0100c97729bb3d8c8e3ed97?s=128&d=identicon&r=PG&f=1", "display_name": "sdlkjslfie", "link": "https://stackoverflow.com/users/9238239/sdlkjslfie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 484, "favorite_count": 0, "accepted_answer_id": 48366144, "answer_count": 1, "score": 3, "last_activity_date": 1516899229, "creation_date": 1516470648, "question_id": 48359296, "link": "https://stackoverflow.com/questions/48359296/why-doesnt-dropping-this-spawnhandle-cancel-its-future", "title": "Why doesn&#39;t dropping this SpawnHandle cancel its future?", "body": "<p>Here is an example program:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\n\nuse futures::{Async, Future, Stream};\nuse tokio_core::reactor::Core;\nuse tokio_core::net::TcpListener;\n\nfn main() {\n    let mut core = Core::new().unwrap();\n\n    futures::sync::oneshot::spawn(\n        TcpListener::bind(&amp;\"127.0.0.1:5000\".parse().unwrap(), &amp;core.handle())\n            .unwrap()\n            .incoming()\n            .for_each(|_| {\n                println!(\"connection received\");\n                Ok(())\n            }),\n        &amp;core,\n    );\n\n    let ft = futures::future::poll_fn::&lt;(), (), _&gt;(|| {\n        std::thread::sleep_ms(50);\n        Ok(Async::NotReady)\n    });\n\n    core.run(ft);\n}\n</code></pre>\n\n<p>As you can see, I call <code>oneshot::spawn</code> and then immediately drop its return value, which should theoretically cancel the future contained inside. However, when I run this program and then make a connection to <code>127.0.0.1:5000</code>, it still prints \"connection received.\" Why does it do this? I expected it to not print anything and drop the <code>TcpListener</code>, unbinding from the port.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1516462159, "creation_date": 1516462159, "answer_id": 48357841, "question_id": 48357712, "link": "https://stackoverflow.com/questions/48357712/error-encountered-while-building-trpl-ebook-patterns-arent-allowed-in-methods/48357841#48357841", "title": "Error encountered while building trpl-ebook: patterns aren&#39;t allowed in methods without bodies", "body": "<p><a href=\"https://crates.io/crates/rustc-serialize/0.3.19\" rel=\"noreferrer\">rustc-serialize 0.3.19</a> was released on April 4, 2016. It includes the syntax:</p>\n\n<pre><code>fn read_enum_struct_variant_field&lt;T, F&gt;(\n    &amp;mut self,\n    &amp;f_name: &amp;str, // This is no longer allowed\n    f_idx: usize,\n    f: F,\n) -&gt; Result&lt;T, Self::Error&gt;;\n</code></pre>\n\n<p>This syntax was erroneously allowed until <a href=\"https://github.com/rust-lang/rust/commit/811a2b91de8fe0c6bbd8d49186d0d5be192f644e\" rel=\"noreferrer\">Oct 21, 2016 (Rust 1.14.0)</a> when it was turned into a warning. On <a href=\"https://github.com/rust-lang/rust/commit/f7b4b88840d872909a67e5f9623281e3e2165fba\" rel=\"noreferrer\">Nov 4, 2017 (Rust 1.23.0)</a>, this became an error.</p>\n\n<p>The solution is to update the version of rustc-serialize:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo update -p rustc-serialize\n</code></pre>\n"}], "owner": {"reputation": 45, "user_id": 4652483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f371c2d6ea7551bd6c7f77b189159da6?s=128&d=identicon&r=PG&f=1", "display_name": "Nabarun Pal", "link": "https://stackoverflow.com/users/4652483/nabarun-pal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 393, "favorite_count": 0, "accepted_answer_id": 48357841, "answer_count": 1, "score": 1, "last_activity_date": 1516467013, "creation_date": 1516461302, "last_edit_date": 1516467013, "question_id": 48357712, "link": "https://stackoverflow.com/questions/48357712/error-encountered-while-building-trpl-ebook-patterns-arent-allowed-in-methods", "title": "Error encountered while building trpl-ebook: patterns aren&#39;t allowed in methods without bodies", "body": "<p>I want to generate the epub ebook of <a href=\"https://doc.rust-lang.org/book/second-edition\" rel=\"nofollow noreferrer\">The Rust Programming Language</a> for my Kindle.</p>\n\n<p>I downloaded <a href=\"https://github.com/killercup/trpl-ebook\" rel=\"nofollow noreferrer\">this Github project</a> to rebuild the book the second edition draft. When I do <code>cargo run --release</code>, I encounter the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>nabarun@pal:~/codesl/trpl-ebook (git:master) $ cargo run --release\n   Compiling rustc-serialize v0.3.19\n   Compiling memchr v0.1.11\n   Compiling kernel32-sys v0.2.2\nerror[E0642]: patterns aren't allowed in methods without bodies\n   --&gt; /home/nabarun/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs:147:45\n    |\n147 |                                             &amp;f_name: &amp;str,\n    |                                             ^^^^^^^\n\n   Compiling aho-corasick v0.5.3\n   Compiling thread-id v2.0.0\n   Compiling thread_local v0.2.7\n   Compiling regex v0.1.77\nerror: aborting due to previous error\n\nerror: Could not compile `rustc-serialize`.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</code></pre>\n\n<p>I tried to search and debug the error but couldn't do so owing to my lack of knowledge of Rust at the moment. Did anyone else encounter this error?</p>\n\n<p>I am using Ubuntu 16.04, Rust 1.25.0-nightly (b5392f545 2018-01-08), xargo 0.3.10, cargo 0.25.0-nightly (a88fbace4 2017-12-29)</p>\n\n<p>I have also <a href=\"https://github.com/killercup/trpl-ebook/issues/49\" rel=\"nofollow noreferrer\">filed an issue on the GitHub repo</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1516447945, "post_id": 48355373, "comment_id": 83697726, "body": "Lifetimes are also used with <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html#lifetime-bounds\" rel=\"nofollow noreferrer\">lifetime bounds</a>, which is what OP is trying to use here. They give a bound on all references contained in a type."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1516457112, "post_id": 48355373, "comment_id": 83700622, "body": "An object can have lifetime if it contains a member with a lifetime."}], "tags": [], "owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "is_accepted": false, "score": 1, "last_activity_date": 1516446465, "creation_date": 1516446465, "answer_id": 48355373, "question_id": 48355092, "link": "https://stackoverflow.com/questions/48355092/how-do-i-specify-a-closure-that-takes-a-reference-and-returns-any-type-implement/48355373#48355373", "title": "How do I specify a closure that takes a reference and returns any type implementing a trait with the same lifetime as the reference?", "body": "<p>Lifetimes can only be given to <em>references</em>. Changing the line to this works:</p>\n\n<pre><code>F: for&lt;'a&gt; Fn(&amp;'a P) -&gt; &amp;'a Q\n</code></pre>\n\n<p>An object by itself does not have a \"lifetime\" as such - it lives until it is dropped. The borrow checker, however, must be informed of how long the object thst a reference points to lives relative to other referenced objects. <em>That's</em> where lifetimes come in.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516460357, "post_id": 48355374, "comment_id": 83701771, "body": "<i>and it should be obvious why that doesn&#39;t work</i> \u2014 if things were obvious, then Stack Overflow wouldn&#39;t need to exist ^_^. If something is truly obvious, you don&#39;t need to state that it is obvious. If you do need to state it, then providing explanation or links to explanation is good."}, {"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 0, "creation_date": 1516463481, "post_id": 48355374, "comment_id": 83702764, "body": "Well yeah it&#39;s unfortunate then that compiler cannot do it. All I need to tell is that Q implements SomeTrait and is parametrized by some lifetime, so that I could use it in closure..."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 1, "creation_date": 1516487600, "post_id": 48355374, "comment_id": 83710318, "body": "@user1682175 The planned Rust feature that will enable this is called <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\">generic associated types</a>, although that RFC was accepted only a few months ago and it will probably be some time yet before there is an implementation. In the mean time, a workaround (when <code>SomeTrait</code> is object safe) is to have <code>F</code> return <code>Box&lt;SomeTrait + &#39;a&gt;</code>."}, {"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516529157, "post_id": 48355374, "comment_id": 83717930, "body": "@trentcl Alas, the trait is not object safe in my case )"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1516463511, "last_edit_date": 1516463511, "creation_date": 1516446468, "answer_id": 48355374, "question_id": 48355092, "link": "https://stackoverflow.com/questions/48355092/how-do-i-specify-a-closure-that-takes-a-reference-and-returns-any-type-implement/48355374#48355374", "title": "How do I specify a closure that takes a reference and returns any type implementing a trait with the same lifetime as the reference?", "body": "<p><code>Q</code> is not a trait, it is a type; something like <code>T: Q + 'a</code> doesn't make sense.</p>\n\n<p>If you try <code>F: for&lt;'a&gt; Fn(&amp;'a P) -&gt; (Q + 'a)</code> you'll get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found type parameter `Q`\n</code></pre>\n\n<p>Your example actually parses like <code>F: (for&lt;'a&gt; Fn(&amp;'a P) -&gt; Q) + 'a</code> - and it should be obvious why that doesn't work.</p>\n\n<p>Now to:</p>\n\n<blockquote>\n  <p>I need to tell the compiler that <code>F</code> returns something that implements <code>SomeTrait</code> with lifetime <code>'a</code>.</p>\n</blockquote>\n\n<p>Your function can't return different types depending on (passed) lifetimes apart from using those lifetimes for references or generic lifetime parameters. You could write a Rust compiler that simply ignores lifetimes completely, and if the original program was valid it would still do the same thing.</p>\n\n<p>There is no way yet to specify type parameters that take generic parameters, for either lifetimes or types.</p>\n\n<p>If there was, it could look like this:</p>\n\n<pre><code>trait SomeTrait {}\n\nfn foo&lt;P, for&lt;'a&gt; Q&lt;'a&gt;, F&gt;(func: F)\nwhere\n    for&lt;'a&gt; Q&lt;'a&gt;: SomeTrait,\n    for&lt;'a&gt; F: Fn(&amp;'a P) -&gt; Q&lt;'a&gt;,\n{\n}\n</code></pre>\n"}], "owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 0, "accepted_answer_id": 48355374, "answer_count": 2, "score": 3, "last_activity_date": 1516463511, "creation_date": 1516444731, "last_edit_date": 1516463411, "question_id": 48355092, "link": "https://stackoverflow.com/questions/48355092/how-do-i-specify-a-closure-that-takes-a-reference-and-returns-any-type-implement", "title": "How do I specify a closure that takes a reference and returns any type implementing a trait with the same lifetime as the reference?", "body": "<p>I need to tell the compiler that <code>F</code> returns something that implements <code>SomeTrait</code> with the lifetime <code>'a</code>:</p>\n\n<pre><code>trait SomeTrait {}\n\nfn foo&lt;P, Q, F&gt;(func: F)\nwhere\n    Q: SomeTrait,\n    F: for&lt;'a&gt; Fn(&amp;'a P) -&gt; Q + 'a,\n{}\n</code></pre>\n\n<p>But I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0261]: use of undeclared lifetime name `'a`\n --&gt; src/main.rs:6:33\n  |\n6 |     F: for&lt;'a&gt; Fn(&amp;'a P) -&gt; Q + 'a,\n  |                                 ^^ undeclared lifetime\n</code></pre>\n\n<p>It is like it doesn't understand <code>Q + 'a</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1516441906, "post_id": 48354220, "comment_id": 83695919, "body": "Maybe the crate <a href=\"https://crates.io/crates/bidir-map\" rel=\"nofollow noreferrer\">bidir-map</a> could help you?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1516444265, "post_id": 48354220, "comment_id": 83696580, "body": "@LukasKalbertodt I disagree with marking this as duplicate.  The question is not why the presented <code>struct</code> doesn&#39;t work, but how got get it working in a idiomatic way.  The answers of the linked question don&#39;t answer this particular problem as far as I can tell."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516444413, "post_id": 48354220, "comment_id": 83696617, "body": "If <code>bidir_map</code> is not a solution I guess you could write your own abstraction (this will require <code>unsafe</code> code blocks; I&#39;d probably use <code>&amp;&#39;static T</code> references internally).  I would keep this abstraction separate from the remaining logic for this type so it is easier to check whether your <code>unsafe</code> code blocks are safe."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516451472, "post_id": 48354220, "comment_id": 83698863, "body": "@Stefan &quot;<i>tell Rust that the object reference will never outlive the struct. Is there a way to do this in idiomatic Rust?</i>&quot; -- No, there is not a way to do that in idiomatic, non-unsafe Rust. This is explained in the linked answers. At least that&#39;s how I understood this question. But if others also think this was wrong, I have no problem with reopening this via Reopen votes :)"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1516453245, "post_id": 48354220, "comment_id": 83699388, "body": "@LukasKalbertodt I disagree with your implied statement that idiomatic code cannot use <code>unsafe</code> blocks (also I wouldn&#39;t read too much into the word &quot;idiomatic&quot; - users are usually just looking for a good/acceptable solution, and a good abstraction using <code>unsafe</code> blocks certainly fits).  If I had the reputation to vote for reopening I certainly would."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516453634, "post_id": 48354220, "comment_id": 83699490, "body": "@Stefan Oh, no no, I didn&#39;t want to imply this (I meant it as in &quot;I like reading nice, long books&quot; ... which doesn&#39;t imply that only long books can be nice). But as you said: you would want to hide <code>unsafe</code> behind an abstraction and not scatter it around in your actual program logic. Let&#39;s wait for others to vote to reopen, then."}, {"owner": {"reputation": 113, "user_id": 4183722, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6958e630d65ff6d6cee704bd434ae6ba?s=128&d=identicon&r=PG&f=1", "display_name": "sl0th", "link": "https://stackoverflow.com/users/4183722/sl0th"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516457288, "post_id": 48354220, "comment_id": 83700690, "body": "@Stefan I&#39;ve updated my question with a detailed implementation. Can you explain why <code>&#39;static</code> is preferable in this case?"}, {"owner": {"reputation": 113, "user_id": 4183722, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6958e630d65ff6d6cee704bd434ae6ba?s=128&d=identicon&r=PG&f=1", "display_name": "sl0th", "link": "https://stackoverflow.com/users/4183722/sl0th"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1516457874, "post_id": 48354220, "comment_id": 83700926, "body": "@LukasKalbertodt Thanks for the suggestion but bidir-map is O(n), which is not efficient enough for my case. I&#39;ve also read the linked post but I wasn&#39;t satisfied with the solution."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1516458027, "post_id": 48354220, "comment_id": 83700973, "body": "@sl0th Well, in your abstraction you need to use <code>unsafe</code>.  That means you can either use <code>unsafe</code> to use raw pointers (but creating them is safe iirc), or use <code>unsafe</code> to transform normal lifetimes into <code>&#39;static</code>.  The <code>HashMap</code> is easier to use with <code>&amp;&#39;static T</code> than with raw pointers (you&#39;d probably have to wrap them in a struct)."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516458776, "post_id": 48354220, "comment_id": 83701226, "body": "@sl0th Also maybe try using <code>Rc&lt;T&gt;</code> first. If you don&#39;t use threads this should just work.  With threads and your described scenario you probably could mark the <code>Oid</code> <a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow noreferrer\"><code>Sync</code></a> and it would still be safe."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1516459941, "post_id": 48354220, "comment_id": 83701632, "body": "@Stefan If you want to show how to implement a BiDir map using unsafe, the additional duplicate I&#39;ve added would be a good place."}], "owner": {"reputation": 113, "user_id": 4183722, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6958e630d65ff6d6cee704bd434ae6ba?s=128&d=identicon&r=PG&f=1", "display_name": "sl0th", "link": "https://stackoverflow.com/users/4183722/sl0th"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 423, "favorite_count": 0, "closed_date": 1516441868, "answer_count": 0, "score": 1, "last_activity_date": 1516459893, "creation_date": 1516438330, "last_edit_date": 1516459868, "question_id": 48354220, "link": "https://stackoverflow.com/questions/48354220/storing-reference-to-an-element-in-vecbox", "closed_reason": "Duplicate", "title": "Storing reference to an element in Vec&lt;Box&lt;_&gt;&gt;", "body": "<p>I have a struct <code>Oid</code>, which <em>owns</em> a vector of distinct objects. It also has a reverse map which maps an object to its index in the vector. Objects are <em>never deleted</em> from the struct. However, new objects can be added. The use case is simple: I need fast retrieval of an object by its index and of the index of a given object. Here's my attempt so far:</p>\n\n<pre><code>struct Oid&lt;'a, T&gt;\nwhere\n    T: Eq + Hash,\n{\n    objects: Vec&lt;Box&lt;T&gt;&gt;,\n    rev_map: HashMap&lt;&amp;'a T, usize&gt;,\n}\n\nimpl&lt;'a, T&gt; Oid&lt;'a, T&gt;\nwhere\n    T: Eq + Hash,\n{\n    pub fn insert(&amp;mut self, t: T) -&gt; usize {\n        match self.objects.get(&amp;t) {\n            Some(&amp;i) =&gt; i,\n            _ =&gt; {\n                let i = self.objects.size();\n                self.objects.push(Box::new(t));\n                self.rev_map\n                    .insert(unsafe { &amp;*(&amp;*self.objects[i] as *const T) }, i);\n                i\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>As the memory locations of objects can change as the vector grows, I put each object in a <code>Box</code>, which ensures address stability. The problem is in <code>rev_map</code>, I can't figure out how to tell Rust that the object reference will never outlive the struct. Is there a way to do this in idiomatic Rust?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1516407606, "post_id": 48350791, "comment_id": 83689423, "body": "There is <code>target_os=&quot;emscripten&quot;</code> for <code>wasm32-unknown-emscripten</code>. <a href=\"https://www.hellorust.com/emscripten/\" rel=\"nofollow noreferrer\">hellorust.com/emscripten</a> which may or may not be worth differentiating. Depends on what the user&#39;s code needs."}, {"owner": {"reputation": 339, "user_id": 9210924, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-4wYHrjZFWfw/AAAAAAAAAAI/AAAAAAAAAEs/Ql3GeOp43dk/photo.jpg?sz=128", "display_name": "Daniel Wilkins", "link": "https://stackoverflow.com/users/9210924/daniel-wilkins"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1516409210, "post_id": 48350791, "comment_id": 83689743, "body": "Sorry I had the target triple wrong in my mind.The triple has the general format &lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;. The sys part of that is generally the OS which is emscripten in the case of wasm32-unknown-emscripten. Will update post to correct."}], "tags": [], "owner": {"reputation": 339, "user_id": 9210924, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-4wYHrjZFWfw/AAAAAAAAAAI/AAAAAAAAAEs/Ql3GeOp43dk/photo.jpg?sz=128", "display_name": "Daniel Wilkins", "link": "https://stackoverflow.com/users/9210924/daniel-wilkins"}, "is_accepted": true, "score": 10, "last_activity_date": 1516410542, "last_edit_date": 1516410542, "creation_date": 1516403031, "answer_id": 48350791, "question_id": 48350087, "link": "https://stackoverflow.com/questions/48350087/how-do-i-conditionally-compile-for-webassembly-in-rust/48350791#48350791", "title": "How do I conditionally compile for WebAssembly in Rust?", "body": "<p>This is how <a href=\"https://github.com/koute/stdweb/blob/70f42102c1f664ef72ebbc8b35cee28d0cf51495/src/webcore/ffi/mod.rs#L1\" rel=\"noreferrer\">stdweb</a> is doing it:</p>\n\n<pre><code>#[cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))]\n</code></pre>\n\n<p>I tested it out and it looks like something simple like this works just fine:</p>\n\n<pre><code>#[cfg(target_arch = \"wasm32\")]\nfn add_seven(x: i32) -&gt; i32 {\n    x + 7\n}\n\n#[cfg(not(target_arch = \"wasm32\"))]\nfn add_seven(x: i32) -&gt; i32 {\n    x + 6\n}\n\nfn main() {\n    let eight = add_seven(1);\n    println!(\"{}\", eight);\n}\n</code></pre>\n\n<p>Conditional compilation in Rust allows for a great amount of granularity in that you can specify OS, architecture, etc. If you do not need that granularity then you do not have to use it.</p>\n\n<p>There are <code>unknown</code> and <code>emscripten</code> OS targets for <code>wasm32</code>, so it would be best to differentiate the two if your code needs to be different for the two platforms.</p>\n\n<p>Stdweb has chosen to use the more granular approach. If I were doing it I would follow what they are doing, but it seems like it would work either way.</p>\n"}], "owner": {"reputation": 3489, "user_id": 1350184, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/EQnef.jpg?s=128&g=1", "display_name": "tversteeg", "link": "https://stackoverflow.com/users/1350184/tversteeg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1002, "favorite_count": 0, "accepted_answer_id": 48350791, "answer_count": 1, "score": 5, "last_activity_date": 1516410542, "creation_date": 1516398851, "last_edit_date": 1516410418, "question_id": 48350087, "link": "https://stackoverflow.com/questions/48350087/how-do-i-conditionally-compile-for-webassembly-in-rust", "title": "How do I conditionally compile for WebAssembly in Rust?", "body": "<p>How can I make a config flag where I conditionally choose the <code>wasm32-unknown-unkown</code> target?</p>\n\n<p>I printed the current environment using the following <code>build.rs</code>:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    for (key, value) in env::vars() {\n        if key.starts_with(\"CARGO_CFG_\") {\n            println!(\"{}: {:?}\", key, value);\n        }\n    }\n    panic!(\"stop and dump stdout\");\n}\n</code></pre>\n\n<p>Which prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>CARGO_CFG_DEBUG_ASSERTIONS: \"\"\nCARGO_CFG_TARGET_ARCH: \"wasm32\"\nCARGO_CFG_TARGET_ENDIAN: \"little\"\nCARGO_CFG_TARGET_ENV: \"\"\nCARGO_CFG_TARGET_HAS_ATOMIC: \"16,32,8,ptr\"\nCARGO_CFG_TARGET_OS: \"unknown\"\nCARGO_CFG_TARGET_POINTER_WIDTH: \"32\"\nCARGO_CFG_TARGET_VENDOR: \"unknown\"\n</code></pre>\n\n<p>Normally I would do <code>#[cfg(target_os = \"linux\")]</code> but that probably doesn't work in this case because <code>#[cfg(target_os = \"unknown\")]</code> probably matches more than <code>wasm32-unknown-unknown</code>. Do I have to use a combination of <code>target_arch</code> and <code>target_os</code> for this to work properly or maybe just <code>target_arch</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516411248, "post_id": 48349120, "comment_id": 83690104, "body": "I&#39;d highly recommend learning the proper name for the tools and techniques you are using. That&#39;s not an &quot;operator&quot; and it goes by the name <a href=\"http://en.cppreference.com/w/cpp/language/bit_field\" rel=\"nofollow noreferrer\">bit field</a>."}], "answers": [{"tags": [], "owner": {"reputation": 93509, "user_id": 4086, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e4a1b4bf6865eddd0edfe8cb90361c84?s=128&d=identicon&r=PG", "display_name": "Ferruccio", "link": "https://stackoverflow.com/users/4086/ferruccio"}, "is_accepted": true, "score": 5, "last_activity_date": 1516408021, "last_edit_date": 1516408021, "creation_date": 1516394741, "answer_id": 48349281, "question_id": 48349120, "link": "https://stackoverflow.com/questions/48349120/what-is-similar-in-rust-to-the-colon-operator-in-c/48349281#48349281", "title": "What is similar in Rust to the colon operator in C?", "body": "<p>Rust does not have bit fields built into the language like C does.\nHowever, you can use a crate like <a href=\"https://crates.io/crates/bitfield\" rel=\"nofollow noreferrer\">bitfield</a> to achieve the same thing.\nThe <code>bitfield</code> macro lets you define the types, size and accessor methods for each bit field.</p>\n\n<pre><code>#[macro_use] extern crate bitfield;\n\nbitfield! {\n    struct Example(u8);\n    u8;\n    get_pmport, set_pmport: 3, 0; // bits 0-3\n    get_rsv0, set_rsv0: 6, 4;     // bits 4-6\n    get_c, set_c: 7, 7;           // bit 7\n}\n\nfn main() {\n    println!(\"size of Example: {}\", ::std::mem::size_of::&lt;Example&gt;());\n    let mut e = Example(0);\n    println!(\"pmport: {}, rsv0: {}, c: {}\", e.get_pmport(), e.get_rsv0(), e.get_c());\n    e.set_pmport(5);\n    println!(\"pmport: {}, rsv0: {}, c: {}\", e.get_pmport(), e.get_rsv0(), e.get_c());\n    e.set_rsv0(3);\n    println!(\"pmport: {}, rsv0: {}, c: {}\", e.get_pmport(), e.get_rsv0(), e.get_c());\n    e.set_c(1);\n    println!(\"pmport: {}, rsv0: {}, c: {}\", e.get_pmport(), e.get_rsv0(), e.get_c());\n    e.set_rsv0(0);\n    println!(\"pmport: {}, rsv0: {}, c: {}\", e.get_pmport(), e.get_rsv0(), e.get_c());\n}\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 6861720, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/edfbcf83eddb9c18f9ed3e6c0619ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "Dragonight", "link": "https://stackoverflow.com/users/6861720/dragonight"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 210, "favorite_count": 1, "closed_date": 1516410046, "accepted_answer_id": 48349281, "answer_count": 1, "score": 1, "last_activity_date": 1516410128, "creation_date": 1516394044, "last_edit_date": 1516410128, "question_id": 48349120, "link": "https://stackoverflow.com/questions/48349120/what-is-similar-in-rust-to-the-colon-operator-in-c", "closed_reason": "Duplicate", "title": "What is similar in Rust to the colon operator in C?", "body": "<p>How to represent this kind of code in Rust? </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>uint8_t  pmport:4;  \nuint8_t  rsv0:3;        \nuint8_t  c:1;       \n</code></pre>\n\n<p>I want to pack these 3 values into a single <code>u8</code>. How can this be achieved in Rust? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516392211, "post_id": 48348575, "comment_id": 83683566, "body": "Can you <a href=\"https://stackoverflow.com/posts/48348575/edit\">edit</a> your question to further explain (a) what exactly your &quot;iterator-type-object&quot; returns, (b) why <code>Iterator::flat_map</code> isn&#39;t sufficient, (c) what you mean by &quot;small buffering iterator&quot;."}, {"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1516392231, "post_id": 48348575, "comment_id": 83683574, "body": "<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_m&zwnj;&#8203;ap</a>?"}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "edited": false, "score": 0, "creation_date": 1516392423, "post_id": 48348575, "comment_id": 83683667, "body": "Thanks! It&#39;s a sequence of lexer tokens (if that makes any difference). <code>flat_map</code> looks like it could be what I&#39;m trying to describe."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516392570, "post_id": 48348575, "comment_id": 83683735, "body": "Your <i>question</i> states that you want to &quot;implement a multi-valued iterator&quot;, but that doesn&#39;t make any sense to me. You state that you <i>already</i> have an &quot;iterator-type-object&quot;, so why are you asking about how to implement it?"}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "edited": false, "score": 0, "creation_date": 1516393128, "post_id": 48348575, "comment_id": 83683997, "body": "By &quot;I want to implement&quot; I mean &quot;I want to express this idiom in Rust&quot;. I&#39;m sorry if the title could be pithier. I can currently only see how to do this by allocating a Vec on the heap at each cycle. From what I&#39;ve learned about Rust so far, I wouldn&#39;t be surprised to find there&#39;s a better way."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1516393335, "post_id": 48348575, "comment_id": 83684100, "body": "It is not clear to me what you want. What&#39;s your input, what&#39;s the desired output? Which intermediate operations do you expect to be available to map between those two? Maybe pseudocode?"}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "edited": false, "score": 0, "creation_date": 1516393502, "post_id": 48348575, "comment_id": 83684190, "body": "The desired input is an object that can return one or more T items each time it is called. The desired output is something that provides <code>next()</code>,  returning one item at a time, per the <code>Iter</code> trait. I will try and add some code to the question."}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "reply_to_user": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1516394374, "post_id": 48348575, "comment_id": 83684658, "body": "I&#39;ve added an example, informed by @Ryan above. This may well be the best way to do it."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1516395670, "post_id": 48348575, "comment_id": 83685240, "body": "The example allocates because the iterator itself allocates. If you have an iterator that doesn&#39;t allocate, calling <code>.flat_map()</code> on it won&#39;t cause it to."}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "edited": false, "score": 0, "creation_date": 1516396845, "post_id": 48348575, "comment_id": 83685776, "body": "Ok, so how could I implement the same behaviour (i.e. return an arbitrary number of items) without heap allocation?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 2, "creation_date": 1516403705, "post_id": 48348575, "comment_id": 83688367, "body": "In your real implementation, where are these items coming from? You could avoid the <code>Vec</code>s by maintaining a second counter to track which number, but without a representative example if is hard to say what applies to your real code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516411361, "post_id": 48348575, "comment_id": 83690120, "body": "<i>return an arbitrary number of items without heap allocation</i> \u2014 why do you believe that such a thing is even possible?"}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516443677, "post_id": 48348575, "comment_id": 83696419, "body": "@Shepmaster - The reason I&#39;m asking a question is because I don&#39;t know the answer. The reason I&#39;m asking a question at a general patterns, not bits-and-bytes, level because Rust provides different abstractions to languages I&#39;m familiar with and there might be another one I don&#39;t know about. This thread has helped me frame my problem, and I&#39;m grateful for the help."}, {"owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1516443920, "post_id": 48348575, "comment_id": 83696479, "body": "@loganfsmyth - It&#39;s a lexer that can return a number of tokens at each step.  I thought it would be easier to include a running code example and concentrate on the abstraction than yank bits out of the real code with no context."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 1, "last_activity_date": 1516458500, "creation_date": 1516458500, "answer_id": 48357287, "question_id": 48348575, "link": "https://stackoverflow.com/questions/48348575/how-to-implement-multi-valued-iterator-pattern-in-rust/48357287#48357287", "title": "How to implement multi-valued iterator pattern in Rust?", "body": "<p>If you know how to generate the \"inner\" values programmatically, replace <code>Vec&lt;String&gt;</code> with a struct you define that implements <code>Iterator&lt;Item = String&gt;</code>. (Technically only <code>IntoIterator</code> is necessary, but <code>Iterator</code> is sufficient.)</p>\n\n<pre><code>struct Inner {\n    index: usize,\n    stop: usize,\n}\n\nimpl Inner {\n    fn new(n: usize) -&gt; Self {\n        Inner { index: 0, stop: n }\n    }\n}\n\nimpl Iterator for Inner {\n    type Item = String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {\n        static WORDS: [&amp;str; 3] = [\"One\", \"Two\", \"Three\"];\n        let result = if self.index &lt; self.stop {\n            WORDS.get(self.index).map(|r| r.to_string())\n        } else {\n            None\n        };\n        self.index += 1;\n        result\n    }\n}\n</code></pre>\n\n<p>Because <code>Inner</code> implements <code>Iterator&lt;Item = String&gt;</code>, it can be iterated over much like <code>Vec&lt;String&gt;</code>. But <code>Inner</code> does not have to pre-allocate a <code>Vec</code> and consume items one by one; it can lazily create each <code>String</code> on demand.</p>\n\n<p>The \"outer\" iterator is just a struct that implements <code>Iterator&lt;Item = Inner&gt;</code>, likewise constructing each <code>Inner</code> lazily:</p>\n\n<pre><code>struct Outer {\n    counter: i32,\n}\n\nimpl Iterator for Outer {\n    type Item = Inner;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Inner&gt; {\n        self.counter = 1 + self.counter % 3;\n\n        Some(Inner::new(self.counter as usize))\n    }\n}\n</code></pre>\n\n<p>As you know, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\"><code>Iterator::flat_map</code></a> flattens nested structure, so something like the following <a href=\"https://play.rust-lang.org/?gist=718afa38be294c4228b05ee42845ea35&amp;version=stable\" rel=\"nofollow noreferrer\">works</a>:</p>\n\n<pre><code>let things = Outer { counter: 0 };\n\nfor item in things.flat_map(|x| x).take(100) {\n    println!(\"{:?}\", item);\n}\n</code></pre>\n\n<p>In real-life code, <code>Inner</code> and <code>Outer</code> are probably pretty different from this example most of the time. For example, it's not necessarily possible to write <code>Inner</code> without doing the equivalent of allocating a <code>Vec</code>. So the precise shapes and semantics of these iterators depend on concrete information about the use case.</p>\n\n<hr>\n\n<p>The above assumes that <code>Inner</code> is somehow useful, or easier to implement on its own. You could easily write a single struct that iterates over the sequence without needing to be flattened, but you have to also put the inner iterator state (the <code>index</code> field) into <code>Outer</code>:</p>\n\n<pre><code>struct Outer {\n    index: usize,\n    counter: i32,\n}\n\nimpl Iterator for Outer {\n    type Item = String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {\n        static WORDS: [&amp;str; 3] = [\"One\", \"Two\", \"Three\"];\n        let result = WORDS.get(self.index).map(|r| r.to_string());\n        self.index += 1;\n        if self.index &gt;= self.counter as usize {\n            self.counter = 1 + self.counter % 3;\n            self.index = 0;\n        };\n        result\n    }\n}\n\nfn main() {\n    let things = Outer { counter: 1, index: 0 };\n\n    for item in things.take(100) {\n        println!(\"{:?}\", item);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 42480, "user_id": 148423, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/6ed1f9b5afd258d0b73ad1eae10ac384?s=128&d=identicon&r=PG", "display_name": "Joe", "link": "https://stackoverflow.com/users/148423/joe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 253, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1516458500, "creation_date": 1516391590, "last_edit_date": 1516394331, "question_id": 48348575, "link": "https://stackoverflow.com/questions/48348575/how-to-implement-multi-valued-iterator-pattern-in-rust", "title": "How to implement multi-valued iterator pattern in Rust?", "body": "<p>I have an iterator-type-object that can return zero, one or more items each time it's called. I want to implement a standard <code>Iter</code> API, i.e. <code>next</code> returns <code>Option&lt;Self::Item&gt;</code>, so it can be consumed item by item.</p>\n\n<p>In Clojure I would probably do this with <code>mapcat</code> (\"map and concatenate\"). </p>\n\n<p>My current solution (thanks to @Ryan) uses <code>flat_map</code> but still requires a lot of allocation:</p>\n\n<pre><code>// Desired input:\n// A stateful object that implements an iterator which returns a number of results each time.\n// The real code is a bit more complicated, this is the minimal example.\nstruct MyThing {\n    counter: i32,\n}\n\nimpl Iterator for MyThing {\n    type Item = Vec&lt;String&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Vec&lt;String&gt;&gt; {\n        self.counter += 1;\n        if self.counter == 4 {\n            self.counter = 1;\n        }\n\n        match self.counter {\n            1 =&gt; Some(vec![\"One\".to_string()]),\n            2 =&gt; Some(vec![\"One\".to_string(), \"Two\".to_string()]),\n            3 =&gt; Some(vec![\n                \"One\".to_string(),\n                \"Two\".to_string(),\n                \"Three\".to_string(),\n            ]),\n            _ =&gt; Some(vec![]),\n        }\n    }\n}\n\nfn main() {\n    let things = MyThing { counter: 0 };\n\n    // Missing piece, though the following line does the job:\n    let flattened = things.flat_map(|x| x);\n\n    // However this requires a heap allocation at each loop.\n\n    // Desired output: I can iterate, item by item.\n    for item in flattened {\n        println!(\"{:?}\", item);\n    }\n}\n</code></pre>\n\n<p>Given the innovative things I have seen, I wonder if there's a more idiomatic, less expensive way of accomplishing this pattern.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516386066, "post_id": 48347246, "comment_id": 83680461, "body": "You will probably need to be more explicit. Individual crates aren&#39;t <i>linked</i> to anything. As <code>file</code> is telling you, a crate is closer to a bundle of object files. Only when the final product is built (executable, cdylib, etc) do all the crates get combined together and a final link step is performed."}, {"owner": {"reputation": 547, "user_id": 832176, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8d7cd2cd4d6d4ef64df3b266136ab853?s=128&d=identicon&r=PG", "display_name": "M Farkas-Dyck", "link": "https://stackoverflow.com/users/832176/m-farkas-dyck"}, "edited": false, "score": 2, "creation_date": 1544176274, "post_id": 48347246, "comment_id": 94191635, "body": "You may want to try <a href=\"https://github.com/hobofan/cargo-nono\" rel=\"nofollow noreferrer\">cargo-nono</a> \u2014 it&#39;s rough yet but this is what it&#39;s for."}], "answers": [{"tags": [], "owner": {"reputation": 11, "user_id": 14934180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9831e25654bcce6192f77084acbf389f?s=128&d=identicon&r=PG&f=1", "display_name": "u296", "link": "https://stackoverflow.com/users/14934180/u296"}, "is_accepted": false, "score": 1, "last_activity_date": 1611077134, "creation_date": 1611077134, "answer_id": 65796463, "question_id": 48347246, "link": "https://stackoverflow.com/questions/48347246/how-do-i-find-out-which-crate-dependency-is-requiring-the-standard-library-to-be/65796463#65796463", "title": "How do I find out which crate dependency is requiring the standard library to be linked?", "body": "<p>You can use <code>cargo tree</code> to get a tree graph of all the dependencies and sub-dependencies of your project. Then you can find out which crate requires <code>std</code>, and potentially look for solutions/alternatives.</p>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "answer_count": 1, "score": 11, "last_activity_date": 1611077134, "creation_date": 1516385835, "last_edit_date": 1516387098, "question_id": 48347246, "link": "https://stackoverflow.com/questions/48347246/how-do-i-find-out-which-crate-dependency-is-requiring-the-standard-library-to-be", "title": "How do I find out which crate dependency is requiring the standard library to be linked?", "body": "<p>I want to completely eliminate the dependency on <code>std</code> in my project so I disable the <code>std</code> feature in extern crates.</p>\n\n<p>Somehow the final product is still linked to <code>std</code>, so I want to figure out which external crate is causing the linkage to <code>std</code>.</p>\n\n<p>For standard shared libraries, this can be accomplished with <code>ldd</code>, but according to <code>file</code>, the <code>rlib</code> files in the deps directory are <code>ar</code> archives.</p>\n"}, {"tags": ["types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1516376748, "last_edit_date": 1516376748, "creation_date": 1516376387, "answer_id": 48344606, "question_id": 48344483, "link": "https://stackoverflow.com/questions/48344483/return-type-of-peekable-isnt-peekablet/48344606#48344606", "title": "Return type of .peekable() isn&#39;t Peekable&lt;T&gt;", "body": "<p>You need to cast the function pointer from its specific concrete type to the non-specific function pointer type:</p>\n\n<pre><code>fn tokenize_peekable_ok_now&lt;'a&gt;(code: &amp;'a str) -&gt; Peekable&lt;Split&lt;'a, fn(char) -&gt; bool&gt;&gt; {\n    code.split(char::is_whitespace as fn(char) -&gt; bool).peekable()\n}\n</code></pre>\n\n<p>Your working solution automatically does this when you call the <code>tokenize</code> function because the number of steps the type system has to make is only one (<code>Split&lt;'a, fn(char) -&gt; bool {specific}&gt;</code> -> <code>Split&lt;'a, fn(char) -&gt; bool&gt;</code>). In <code>tokenize_peekable_bad</code>, it's already wrapped <code>Split</code> inside of <code>Peekable</code> by the time it checks the return type, so it doesn't know to flow the cast back to the original location. Specifically, it's not at a <a href=\"https://doc.rust-lang.org/beta/nomicon/coercions.html\" rel=\"nofollow noreferrer\"><em>coercion site</em></a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/42157511/155423\">What is a function signature and type?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43418766/155423\">How can I cast a struct reference to isize?</a></li>\n</ul>\n"}], "owner": {"reputation": 688, "user_id": 3934904, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb37eab7ffaa3a64f2300cdcf156598d?s=128&d=identicon&r=PG&f=1", "display_name": "iafisher", "link": "https://stackoverflow.com/users/3934904/iafisher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "accepted_answer_id": 48344606, "answer_count": 1, "score": 3, "last_activity_date": 1516376748, "creation_date": 1516375962, "last_edit_date": 1516376090, "question_id": 48344483, "link": "https://stackoverflow.com/questions/48344483/return-type-of-peekable-isnt-peekablet", "title": "Return type of .peekable() isn&#39;t Peekable&lt;T&gt;", "body": "<p>I'm trying to compile the following code with Rust version 1.22.1:</p>\n\n<pre><code>use std::str::Split;\nuse std::iter::Peekable;\n\n// This is fine...\nfn tokenize&lt;'a&gt;(code: &amp;'a str) -&gt; Split&lt;'a, fn(char) -&gt; bool&gt; {\n    code.split(char::is_whitespace)\n}\n\n// ...but this is not...\nfn tokenize_peekable_bad&lt;'a&gt;(code: &amp;'a str) -&gt; Peekable&lt;Split&lt;'a, fn(char) -&gt; bool&gt;&gt; {\n    code.split(char::is_whitespace).peekable()\n}\n\n// ...however this is?\nfn tokenize_peekable&lt;'a&gt;(code: &amp;'a str) -&gt; Peekable&lt;Split&lt;'a, fn(char) -&gt; bool&gt;&gt; {\n    tokenize(&amp;code).peekable()\n}\n</code></pre>\n\n<p>It seems to me that <code>tokenize_peekable_bad</code> and <code>tokenize_peekable</code> should have the exact same type signature, but <code>tokenize_peekable_bad</code> gives a compiler error while <code>tokenize_peekable</code> is just fine.</p>\n\n<p>The error is </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:11:5\n   |\n11 |     code.split(char::is_whitespace).peekable()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found fn item\n   |\n   = note: expected type `std::iter::Peekable&lt;std::str::Split&lt;'a, fn(char) -&gt; bool&gt;&gt;`\n              found type `std::iter::Peekable&lt;std::str::Split&lt;'_, fn(char) -&gt; bool {std::char::&lt;impl char&gt;::is_whitespace}&gt;&gt;`\n</code></pre>\n\n<p>Can someone explain this puzzling result?</p>\n"}, {"tags": ["string", "rust", "converter"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516367396, "post_id": 48341384, "comment_id": 83668948, "body": "You (and potential answerers) may like to read <a href=\"https://stackoverflow.com/questions/38406793/why-is-capitalizing-the-first-letter-of-a-string-so-convoluted-in-rust\">Why is capitalizing the first letter of a string so convoluted in Rust?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516372454, "post_id": 48342230, "comment_id": 83672238, "body": "I probably wouldn&#39;t use this, but it amuses me that it works: <code>result.extend(cs.next().into_iter().flat_map(|c| c.to_uppercase()));</code>"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1516372217, "last_edit_date": 1516372217, "creation_date": 1516368516, "answer_id": 48342230, "question_id": 48341384, "link": "https://stackoverflow.com/questions/48341384/how-do-i-convert-reverse-domain-notation-to-pascalcase/48342230#48342230", "title": "How do I convert reverse domain notation to PascalCase?", "body": "<p>Your solution is a good start.  You could probably make it work without heap allocations in the \"functional\" style; I prefer putting complex logic into normal <code>for</code> loops though.</p>\n\n<p>Also I don't like assuming input is in ASCII without actually checking - this should work with any string.</p>\n\n<p>You probably could also use <code>String::with_capacity</code> in your code to avoid reallocations in standard cases.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=aa8e7a5e235296e97e7fd78981429ebf&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>fn dotted_to_pascal_case(s: &amp;str) -&gt; String {\n    let mut result = String::with_capacity(s.len());\n    for part in s.split('.') {\n        let mut cs = part.chars();\n        if let Some(c) = cs.next() {\n            result.extend(c.to_uppercase());\n        }\n        result.push_str(cs.as_str());\n    }\n    result\n}\n\nfn main() {\n    println!(\"{}\", dotted_to_pascal_case(\"foo.bar.baz\"));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516371759, "post_id": 48342871, "comment_id": 83671744, "body": "Yes, looks similar. Do you know whether this will (pre)allocate the string with the correct length, or is it similar to the fold starting with an empty string?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1516372418, "post_id": 48342871, "comment_id": 83672218, "body": "@Stefan I took a look at the source of <code>collect</code> and it looks like it starts with an empty string and pushes individual characters (<a href=\"https://doc.rust-lang.org/stable/src/alloc/string.rs.html#1602-1606\" rel=\"nofollow noreferrer\">source</a>). I doubt there is a significant difference between our approaches, my reasoning was primarily &quot;not enough iterators&quot; ;)."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 1, "creation_date": 1516376486, "post_id": 48342871, "comment_id": 83674878, "body": "You could replace the <code>.expect</code> with <code>.iter()</code> if you want it to accept strings that contain consecutive dots."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516376819, "post_id": 48342871, "comment_id": 83675092, "body": "<code>FromIterator&lt;char&gt;</code> for <code>String</code> can&#39;t usefully preallocate because any of those <code>char</code>s could be 1, 2, 3, or 4 bytes long when encoded as UTF-8. <code>Chars::size_hint</code> (<a href=\"https://doc.rust-lang.org/beta/src/core/str/mod.rs.html#584-590\" rel=\"nofollow noreferrer\">source</a>) has the inverse problem: it can&#39;t know how many <code>char</code>s the string contains because they can be variable length. (And let&#39;s not get into how changing a character&#39;s case can alter its length...)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516378023, "post_id": 48342871, "comment_id": 83675814, "body": "@trentcl: It could definitely usefully pre-allocate, the result will <i>at least</i> have as many bytes as there are unicode characters, so it&#39;s never wasteful to start from that much. At worst, there&#39;d be 2 growth if a lot of characters are actually 4 bytes wide, which is better than &quot;lots&quot;."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1516374854, "last_edit_date": 1516374854, "creation_date": 1516370729, "answer_id": 48342871, "question_id": 48341384, "link": "https://stackoverflow.com/questions/48341384/how-do-i-convert-reverse-domain-notation-to-pascalcase/48342871#48342871", "title": "How do I convert reverse domain notation to PascalCase?", "body": "<p>Stefan's answer is correct, but I decided to get rid of that first <code>String</code> allocation and go full-functional, without loops:</p>\n\n<pre><code>fn dotted_to_pascal_case(s: &amp;str) -&gt; String {\n    s.split('.')\n        .map(|piece| piece.chars())\n        .flat_map(|mut chars| {\n            chars\n                .next()\n                .expect(\"empty section between dots!\")\n                .to_uppercase()\n                .chain(chars)\n        })\n        .collect()\n}\n\nfn main() {\n    println!(\"{}\", dotted_to_pascal_case(\"foo.bar.baz\"));\n}\n</code></pre>\n"}], "owner": {"reputation": 1233, "user_id": 3977812, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cb3f865af885e77ac4d07b8d617a9a0?s=128&d=identicon&r=PG&f=1", "display_name": "Harald Hoyer", "link": "https://stackoverflow.com/users/3977812/harald-hoyer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 48342230, "answer_count": 2, "score": 3, "last_activity_date": 1516375007, "creation_date": 1516365671, "last_edit_date": 1516375007, "question_id": 48341384, "link": "https://stackoverflow.com/questions/48341384/how-do-i-convert-reverse-domain-notation-to-pascalcase", "title": "How do I convert reverse domain notation to PascalCase?", "body": "<p>I want to convert <code>\"foo.bar.baz\"</code> to <code>\"FooBarBaz\"</code>. My input will always be only ASCII. I tried:</p>\n\n<pre><code>let result = \"foo.bar.baz\"\n    .to_string()\n    .split(\".\")\n    .map(|x| x[0..1].to_string().to_uppercase() + &amp;x[1..])\n    .fold(\"\".to_string(), |acc, x| acc + &amp;x);\nprintln!(\"{}\", result);\n</code></pre>\n\n<p>but that feels inefficient.</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1548657240, "post_id": 48336833, "comment_id": 95604255, "body": "How do you drop the <code>TcpListener</code> / the <code>Future</code> returned by <code>for_each</code> if you have passed that to <code>core.run(future)</code>?  :-/"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1527666220, "last_edit_date": 1527666220, "creation_date": 1516350248, "answer_id": 48336833, "question_id": 48334079, "link": "https://stackoverflow.com/questions/48334079/is-it-possible-to-close-a-tcplistener-in-tokio/48336833#48336833", "title": "Is it possible to close a TcpListener in Tokio?", "body": "<p>In short, you need to drop the <code>TcpListener</code> / the <code>Future</code> returned by <code>for_each</code>.</p>\n\n<p>You could:</p>\n\n<ul>\n<li><p>Write a <code>Future</code> implementation for some struct containing the rest of your application's state. The <code>Future::poll</code> implementation for your struct then <code>poll</code>s all the contained <code>Future</code> states, and returns <code>Async::Ready</code> if you want to exit early.  It might help performance if the contained <code>Future</code>s are wrapped in <a href=\"https://docs.rs/futures/0.1.17/futures/sync/oneshot/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>oneshot::spawn</code></a> to run in their own task.</p>\n\n<p>Your struct would contain an <code>Option&lt;SpawnHandle&lt;(), ...&gt;&gt;</code>. If you want to stop listening just set it to <code>None</code>.</p></li>\n<li>Filter the <code>incoming</code> stream by checking some \"global\" (<code>Arc&lt;AtomicBool&gt;</code>) flag whether to continue listening using <a href=\"https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.take_while\" rel=\"nofollow noreferrer\"><code>Stream::take_while</code></a></li>\n<li>Check at the end of your <code>for_each</code> handler whether to continue listening and return an error otherwise (which stops the <code>for_each</code> loop)</li>\n</ul>\n\n<p>The latter two methods only stop after seeing/handling an incoming connection, so they only work in a busy environment.</p>\n"}, {"tags": [], "owner": {"reputation": 8515, "user_id": 44014, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a1ac7908dc7ba59d1d73494b1dd39920?s=128&d=identicon&r=PG", "display_name": "Zargony", "link": "https://stackoverflow.com/users/44014/zargony"}, "is_accepted": false, "score": 4, "last_activity_date": 1516611910, "creation_date": 1516611910, "answer_id": 48377907, "question_id": 48334079, "link": "https://stackoverflow.com/questions/48334079/is-it-possible-to-close-a-tcplistener-in-tokio/48377907#48377907", "title": "Is it possible to close a TcpListener in Tokio?", "body": "<p>Here's another option I recently found out about.</p>\n\n<p>You basically need to drop the <code>TcpListener</code>/<code>for_each</code> future to stop listening. Since it never completes on its own, simply combine it with another future you control (e.g. a <code>oneshot::Receiver&lt;()&gt;</code>) using <code>select()</code>. The returned future will complete if either the listener completes (never) or the oneshot receives a value (which you can trigger by sending something into the other end).</p>\n\n<p>There are also suggestions to <a href=\"https://github.com/alexcrichton/futures-rs/pull/696\" rel=\"nofollow noreferrer\">make this easier in the futures crate itself</a>.</p>\n"}], "owner": {"reputation": 105, "user_id": 9238239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae7c677f0100c97729bb3d8c8e3ed97?s=128&d=identicon&r=PG&f=1", "display_name": "sdlkjslfie", "link": "https://stackoverflow.com/users/9238239/sdlkjslfie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1807, "favorite_count": 1, "accepted_answer_id": 48336833, "answer_count": 2, "score": 7, "last_activity_date": 1527666220, "creation_date": 1516335673, "question_id": 48334079, "link": "https://stackoverflow.com/questions/48334079/is-it-possible-to-close-a-tcplistener-in-tokio", "title": "Is it possible to close a TcpListener in Tokio?", "body": "<p>I have a <code>tokio_core::net::TcpListener</code> that I create and then call the <code>incoming</code> method on to get a stream of incoming connections. I then use the <code>for_each</code> method on that stream to turn it into a future and run the future on an event loop. Once I do that is there any way to unbind from the port at some later time?</p>\n\n<p>If not, is there any other API in Tokio that can be used to create a TCP server which can be closed?</p>\n"}, {"tags": ["rust", "reactor", "mio"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1516322270, "post_id": 48332284, "comment_id": 83650660, "body": "&quot;C/C++&quot;, C or C++ ? XD that make me mad... whatever your MCVE is not complete what is <code>reagent::ReAgent</code> ? (I suppose it&#39;s a trait and this trait don&#39;t have a compile size, AFAIK)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516328192, "post_id": 48332284, "comment_id": 83651955, "body": "I think <a href=\"https://stackoverflow.com/questions/28044231/what-does-sized-is-not-implemented-mean\">What does &quot;Sized is not implemented&quot; mean?</a> might be a closer match."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1516328297, "post_id": 48332284, "comment_id": 83651979, "body": "Either way, the application is: add <code>+ ?Sized</code> to the bounds on <code>R</code> and it should work :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516330852, "post_id": 48332284, "comment_id": 83652483, "body": "Addressing your title: <code>Box</code> is sized, as you said. That&#39;s why the error message says: <b><i>`reagent::ReAgent`</b> does not have a constant size known at compile-time</i>."}, {"owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516391194, "post_id": 48332284, "comment_id": 83683088, "body": "@Shepmaster That&#39;s my point: Box is a pointer object. It has a constant size.  Why does the receiver function care what size the thing pointed to?  None of the recommended answers pointed to give me a clear answer to that question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516392392, "post_id": 48332284, "comment_id": 83683643, "body": "@ElfSternberg the first sentence of the <a href=\"https://stackoverflow.com/a/28045264/155423\">accepted answer of the first linked duplicate</a> states, emphasis mine: <i>The <code>Sized</code> trait is rather special, so special that <b>it is a default bound on type parameters</b> in most situations</i>. You have a type parameter (<code>R</code>). It has the <code>Sized</code> type bound. The trait type <code>ReAgent</code> does not have a size, thus it fails the requirements."}], "owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 224, "favorite_count": 0, "closed_date": 1516330627, "answer_count": 0, "score": 1, "last_activity_date": 1516330642, "creation_date": 1516320423, "last_edit_date": 1516330606, "question_id": 48332284, "link": "https://stackoverflow.com/questions/48332284/why-isnt-a-box-automatically-sized", "closed_reason": "Duplicate", "title": "Why isn&#39;t a Box automatically Sized?", "body": "<p>I am trying to implement a server using Mio and a reactor pattern. I want my <code>Reactor</code> to handle both <code>TcpListeners</code> and <code>TcpStreams</code>, so abstracting over that is my real challenge here.</p>\n\n<p>I have a trait <code>ReAgent</code> that implements various handlers for informing the <code>Reactor</code> about changes in status, while <code>Reactor</code> informs each individual <code>ReAgent</code> about events important to that <code>ReAgent</code>.  In turn, I'll have two different <code>ReAgent</code> types, one for accepting (<code>TcpListeners</code>) which will spawn clients (<code>TcpStreams</code>) to pass back to the <code>Reactor</code> for event handling.  A very standard <code>Reactor</code> pattern for multiple server endpoints; I've written half a dozen of these in C/C++ over my career.  Eliding details about my <code>TokenPool</code>, etc., here's where my headache lies:</p>\n\n<pre><code>pub struct Reactor&lt;'a&gt; {\n    poll: Poll,\n    agents: HashMap&lt;Token, Box&lt;ReAgent + 'a&gt;&gt;,\n    tokens: TokenPool,\n}\n\n\nimpl&lt;'a&gt; Reactor&lt;'a&gt; {\n    pub fn add_agent&lt;R: ReAgent + 'a&gt;(&amp;mut self, mut agent: Box&lt;R&gt;) -&gt; Result&lt;()&gt;\n    {\n        if let Some(next_token) = self.tokens.pop() {\n            agent.set_token(next_token);\n            self.agents.insert(agent.get_token(), agent);\n            return Ok(())\n        } \n        bail!(ErrorKind::ConnectionsExhausted)\n    }\n}\n\n//... \n\n/// Received a Box&lt;ReAgent&gt; (a Client);\n/// add and start conversation\nSome(boxed_agent) =&gt; self.add_agent(boxed_agent)\n</code></pre>\n\n<p>When I compile this, I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Some(boxed_agent) =&gt; self.add_agent(boxed_agent)\n                          ^^^^^^^^^ `reagent::ReAgent` does not have a constant size known at compile-time\n</code></pre>\n\n<p>... which I don't get at all.  It's a <code>Box</code>.  A <code>Box</code> has a known constant size at compile time.  That's the whole point here of using <code>Box</code> to support a dynamic type object, right?  The client has a known size, it's a concrete implementation of <code>ReAgent</code>.</p>\n\n<p>What am I missing?</p>\n\n<p>I know I'll probably have to use a <code>RefCell</code> later, since I'm mutating the <code>ReAgent</code> to set its polling token; that's for later, I just want to get past this.</p>\n"}, {"tags": ["rust", "pattern-matching", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516309749, "post_id": 48329804, "comment_id": 83646389, "body": "Probably a duplicate of <a href=\"https://stackoverflow.com/q/30073684/155423\">How to get mutable references to two array elements at the same time?</a>"}, {"owner": {"reputation": 355, "user_id": 5955876, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5b29bb86b71b9c789283bd5180355d5c?s=128&d=identicon&r=PG&f=1", "display_name": "Count Zero", "link": "https://stackoverflow.com/users/5955876/count-zero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516311510, "post_id": 48329804, "comment_id": 83647270, "body": "Unfortunately, using split_at_mut() method, as suggest here <a href=\"https://stackoverflow.com/questions/30073684/how-to-get-mutable-references-to-two-array-elements-at-the-same-time\" title=\"how to get mutable references to two array elements at the same time\">stackoverflow.com/questions/30073684/&hellip;</a> didn&#39;t help. I changed this line: <code>match a[1] {</code> to this: <code>let (left, right) = a.split_at_mut(1); match right[0] {</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516311638, "post_id": 48329804, "comment_id": 83647329, "body": "You have to do it beforehand: <a href=\"https://play.rust-lang.org/?gist=dedc3a423709198dc059a12684cb1bfd&amp;version=nightly\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 355, "user_id": 5955876, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5b29bb86b71b9c789283bd5180355d5c?s=128&d=identicon&r=PG&f=1", "display_name": "Count Zero", "link": "https://stackoverflow.com/users/5955876/count-zero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516312321, "post_id": 48329804, "comment_id": 83647616, "body": "In my code I determine the index that is used in second match just before this match. How to do this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516314464, "post_id": 48329804, "comment_id": 83648479, "body": "Split the original array into 3 parts: before <code>a[x]</code>, <code>a[x]</code>, and after <code>a[x]</code>. The first match will match on <code>a[x]</code> and then the second match can use the other two pieces."}, {"owner": {"reputation": 355, "user_id": 5955876, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5b29bb86b71b9c789283bd5180355d5c?s=128&d=identicon&r=PG&f=1", "display_name": "Count Zero", "link": "https://stackoverflow.com/users/5955876/count-zero"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516358436, "post_id": 48329804, "comment_id": 83663493, "body": "I still don&#39;t understand your idea, could you please give an example?"}], "answers": [{"tags": [], "owner": {"reputation": 339, "user_id": 9210924, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-4wYHrjZFWfw/AAAAAAAAAAI/AAAAAAAAAEs/Ql3GeOp43dk/photo.jpg?sz=128", "display_name": "Daniel Wilkins", "link": "https://stackoverflow.com/users/9210924/daniel-wilkins"}, "is_accepted": true, "score": 2, "last_activity_date": 1516373670, "last_edit_date": 1516373670, "creation_date": 1516334128, "answer_id": 48333890, "question_id": 48329804, "link": "https://stackoverflow.com/questions/48329804/how-to-access-a-mutable-vector-multiple-times-in-nested-match-statements/48333890#48333890", "title": "How to access a mutable vector multiple times in nested match statements?", "body": "<p>If you are willing to make the trade off of having a copy for the first match, you can do something like this:</p>\n\n<pre><code>#[derive(Debug, Copy, Clone)]\nenum T {\n    A(bool),\n    B(u8),\n}\n\nfn main() {\n    let mut a = vec![T::A(true), T::B(42)];\n    let first = a[0]; // make a copy\n    match first {\n        // match on the copy\n        T::A(value) =&gt; println!(\"A: {}\", value),\n        T::B(b) =&gt; {\n            match a[1] {\n                T::A(value) =&gt; println!(\"One more A: {}\", value),\n                T::B(ref mut value) =&gt; *value += 1,\n            }\n            a[0] = T::B(b + 1) // then update the vector\n        }\n    }\n    println!(\"{:?}\", a); // the original didn't get split\n}\n</code></pre>\n\n<p>This should also work with <code>Clone</code> if your types are <code>Clone</code> but not <code>Copy</code>. The other option is to use <code>split_at_mut()</code> as suggested in the question comments.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 0, "last_activity_date": 1516373771, "last_edit_date": 1516373771, "creation_date": 1516354378, "answer_id": 48337939, "question_id": 48329804, "link": "https://stackoverflow.com/questions/48329804/how-to-access-a-mutable-vector-multiple-times-in-nested-match-statements/48337939#48337939", "title": "How to access a mutable vector multiple times in nested match statements?", "body": "<p>If you use the nightly compiler, you can use</p>\n\n<ul>\n<li>the feature <code>slice_patterns</code> to match against slices</li>\n<li><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a> as suggested in comments</li>\n</ul>\n\n<p>Code:</p>\n\n<pre><code>#![feature(slice_patterns)]\n\nenum T {\n    A(bool),\n    B(u8),\n}\n\nfn main() {\n    let mut a = vec![T::A(true), T::B(42)];\n    match a.split_at_mut(0) {\n        (&amp;mut [T::A(value)], _) =&gt; println!(\"A: {}\", value),\n        (&amp;mut [T::B(ref mut b)], ref mut rest) =&gt; {\n            match *rest {\n                &amp;mut [T::A(value)] =&gt; println!(\"One more A: {}\", value),\n                &amp;mut [T::B(ref mut value)] =&gt; *value += 1,\n                _ =&gt; (), // mandatory, because we match against slice\n            }\n            *b += 1\n        }\n        _ =&gt; (), // mandatory, because we match against slice\n    }\n}\n</code></pre>\n\n<p>This code is not super readable because everything is a reference and because you need to exhaustively cover the patterns but it fulfills your requirements.</p>\n"}], "owner": {"reputation": 355, "user_id": 5955876, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5b29bb86b71b9c789283bd5180355d5c?s=128&d=identicon&r=PG&f=1", "display_name": "Count Zero", "link": "https://stackoverflow.com/users/5955876/count-zero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 415, "favorite_count": 0, "accepted_answer_id": 48333890, "answer_count": 2, "score": 0, "last_activity_date": 1516373771, "creation_date": 1516307426, "last_edit_date": 1516313839, "question_id": 48329804, "link": "https://stackoverflow.com/questions/48329804/how-to-access-a-mutable-vector-multiple-times-in-nested-match-statements", "title": "How to access a mutable vector multiple times in nested match statements?", "body": "<p>I have the following code:</p>\n\n<pre><code>enum T {\n    A(bool),\n    B(u8),\n}\n\nfn main() {\n    let mut a = vec![T::A(true), T::B(42)];\n    match a[0] {\n        T::A(value) =&gt; println!(\"A: {}\", value),\n        T::B(ref mut b) =&gt; {\n            match a[1] {\n                T::A(value) =&gt; println!(\"One more A: {}\", value),\n                T::B(ref mut value) =&gt; *value += 1,\n            }\n            *b += 1\n        }\n    }\n}\n</code></pre>\n\n<p>The compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `a` as mutable more than once at a time\n  --&gt; src/main.rs:11:19\n   |\n8  |     match a[0] {\n   |           - first mutable borrow occurs here\n...\n11 |             match a[1] {\n   |                   ^ second mutable borrow occurs here\n...\n17 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>I understand that the problem is because I have two mutable references to <code>a</code>, but I cannot find the solution.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516302155, "post_id": 48327964, "comment_id": 83642632, "body": "Please <a href=\"https://stackoverflow.com/posts/48327964/edit\">edit</a> your question to explain why it&#39;s not a duplicate of <a href=\"https://stackoverflow.com/q/27957103/155423\">How do I create a heterogeneous collection of objects?</a>."}, {"owner": {"reputation": 41, "user_id": 2209243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53a9b5c2c7d80aeb563350be0e7f43bd?s=128&d=identicon&r=PG", "display_name": "totorigolo", "link": "https://stackoverflow.com/users/2209243/totorigolo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516303507, "post_id": 48327964, "comment_id": 83643336, "body": "@Shepmaster because of the word &quot;generic&quot;. I know how to create a heterogeneous collection and how to use polymorphism in Rust, but not with genericity. Should I add this as an introductory paragraph?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1516304619, "post_id": 48327964, "comment_id": 83643938, "body": "@totorigolo That is not possible. Trait objects cannot have generic type parameters, because these are resolved in compile time. The usual way of going around that is to use/manipulate the contained objects through another common trait for all components. That, or forget heterogeneity and use concrete types (as in, multiple containers for each type, or an enum type for the components)."}, {"owner": {"reputation": 41, "user_id": 2209243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53a9b5c2c7d80aeb563350be0e7f43bd?s=128&d=identicon&r=PG", "display_name": "totorigolo", "link": "https://stackoverflow.com/users/2209243/totorigolo"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1516308048, "post_id": 48327964, "comment_id": 83645593, "body": "@E_net4 Thanks for your clarification. But I realize that the title of my question is very unclear. What I want to do isn&#39;t <i>stricto sensus</i> a collection of heterogeneous generics: that&#39;s what is the <code>StorageMgr</code> from a macro view. (I can&#39;t put it clearly, sorry) I wrote a common trait, <code>AnyStorage</code>, as you suggest, and I&#39;m sure there is a way to get my <code>VecStorage</code> back since <code>println!(&quot;{:?}&quot;, storage);</code> prints <code>VecStorage([])</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1516308182, "post_id": 48327964, "comment_id": 83645661, "body": "You can only do that because you added the <code>Debug</code> constraint to <code>AnyStorage</code>. It sounds like you want to have the method <code>insert</code> in <code>AnyStorage</code>."}], "answers": [{"tags": [], "owner": {"reputation": 613, "user_id": 3052732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09c3bb34576efcc1b5655f6479d76e1f?s=128&d=identicon&r=PG&f=1", "display_name": "Sabumnim", "link": "https://stackoverflow.com/users/3052732/sabumnim"}, "is_accepted": true, "score": 5, "last_activity_date": 1516420308, "last_edit_date": 1516420308, "creation_date": 1516399451, "answer_id": 48350194, "question_id": 48327964, "link": "https://stackoverflow.com/questions/48327964/store-a-collection-of-heterogeneous-types-with-generic-type-parameters-in-rust/48350194#48350194", "title": "Store a collection of heterogeneous types with generic type parameters in Rust", "body": "<p>I wasn't sure if something like this was possible but I've finally figured it out. There are a couple things to note as to why your posted example was failing.</p>\n\n<ol>\n<li>Trait <code>AnyStorage</code> in your example did not implement <code>ComponentStorage&lt;T&gt;</code>, therefore because you were storing your \"storage\"s in a <code>HashMap&lt;TypeId, Box&lt;AnyStorage&gt;&gt;</code>, Rust could not guarantee that every stored type implemented <code>ComponentStorage&lt;T&gt;::insert()</code> because it only knew that they were <code>AnyStorage</code>s.</li>\n<li>If you did combine the two traits into one simply called <code>Storage&lt;T&gt;</code> and stored them in a <code>HashMap&lt;TypeId, Box&lt;Storage&lt;T&gt;&gt;</code>, every version of <code>Storage</code> would have to store the same type because of the single <code>T</code>. Rust doesn't have a way to dynamically type the values of a map based on the TypeId of the key, as a solution like this would require. Also, you can't replace <code>T</code> with <code>Any</code> because <code>Any</code> isn't <code>Sized</code>, which <code>Vec</code> and all other storage types require. I'm guessing you knew all of this which is why you used two different traits in your original example.</li>\n</ol>\n\n<p>The solution I ended up using stored the <code>Storage&lt;T&gt;</code>s as <code>Any</code>s in a <code>HashMap&lt;TypeId, Box&lt;Any&gt;&gt;</code>, and then I downcasted the <code>Any</code>s into <code>Storage&lt;T&gt;</code>s inside the implementation functions for <code>StorageMgr</code>. I've put a short example below, and a full version is on Rust Playground <a href=\"https://play.rust-lang.org/?gist=c28337253e0ca3e6188cd0bd391e9f42&amp;version=nightly\" rel=\"noreferrer\">here</a>\n.</p>\n\n<pre><code>trait Component: Debug + Sized + Any {\n    type Storage: Storage&lt;Self&gt;;\n}\n\ntrait Storage&lt;T: Debug&gt;: Debug + Any {\n    fn new() -&gt; Self\n    where\n        Self: Sized;\n\n    fn insert(&amp;mut self, value: T);\n}\n\nstruct StorageMgr {\n    storages: HashMap&lt;TypeId, Box&lt;Any&gt;&gt;,\n}\n\nimpl StorageMgr {\n    pub fn new() -&gt; Self {\n        Self {\n            storages: HashMap::new(),\n        }\n    }\n\n    pub fn get_storage_mut&lt;C: Component&gt;(&amp;mut self) -&gt; &amp;mut &lt;C as Component&gt;::Storage {\n        let type_id = TypeId::of::&lt;C&gt;();\n\n        // Add a storage if it doesn't exist yet\n        if !self.storages.contains_key(&amp;type_id) {\n            let new_storage = &lt;C as Component&gt;::Storage::new();\n\n            self.storages.insert(type_id, Box::new(new_storage));\n        }\n\n        // Get the storage for this type\n        match self.storages.get_mut(&amp;type_id) {\n            Some(probably_storage) =&gt; {\n                // Turn the Any into the storage for that type\n                match probably_storage.downcast_mut::&lt;&lt;C as Component&gt;::Storage&gt;() {\n                    Some(storage) =&gt; storage,\n                    None =&gt; unreachable!(), // &lt;- you may want to do something less explosive here\n                }\n            }\n            None =&gt; unreachable!(),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 2209243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53a9b5c2c7d80aeb563350be0e7f43bd?s=128&d=identicon&r=PG", "display_name": "totorigolo", "link": "https://stackoverflow.com/users/2209243/totorigolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1409, "favorite_count": 2, "accepted_answer_id": 48350194, "answer_count": 1, "score": 3, "last_activity_date": 1516420308, "creation_date": 1516299920, "last_edit_date": 1516412457, "question_id": 48327964, "link": "https://stackoverflow.com/questions/48327964/store-a-collection-of-heterogeneous-types-with-generic-type-parameters-in-rust", "title": "Store a collection of heterogeneous types with generic type parameters in Rust", "body": "<p>I'm trying to implement a basic <a href=\"https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system\" rel=\"nofollow noreferrer\">ECS</a> in Rust. I want a data structure storing, for each component, a storage of that particular component. Because some components are common while others are rare, I want different types of storage policies such as <code>VecStorage&lt;T&gt;</code> and <code>HashMapStorage&lt;T&gt;</code>.</p>\n\n<p>As components are unknown to the game engine's ECS, I came up with:</p>\n\n<pre><code>trait AnyStorage: Debug {\n    fn new() -&gt; Self\n    where\n        Self: Sized;\n}\n\n#[derive(Default, Debug)]\nstruct StorageMgr {\n    storages: HashMap&lt;TypeId, Box&lt;AnyStorage&gt;&gt;,\n}\n</code></pre>\n\n<p>with <code>VecStorage</code> and <code>HashMapStorage&lt;T&gt;</code> implementing the <code>AnyStorage</code> trait. Since <code>AnyStorage</code> doesn't know <code>T</code>, I added one more trait implemented by both concrete storages: <code>ComponentStorage&lt;T&gt;</code>.</p>\n\n<p>While I was able to register new components (i.e. add a new <code>Box&lt;AnyStorage&gt;</code> in <code>StorageMgr</code>'s <code>storages</code>), I didn't find a way to insert components.</p>\n\n<p>Here is the erroneous code:</p>\n\n<pre><code>pub fn add_component_to_storage&lt;C: Component&gt;(&amp;mut self, component: C) {\n    let storage = self.storages.get_mut(&amp;TypeId::of::&lt;C&gt;()).unwrap();\n    // storage is of type: &amp;mut Box&lt;AnyStorage + 'static&gt;\n\n    println!(\"{:?}\", storage); // Prints \"VecStorage([])\"\n\n    storage.insert(component); // This doesn't work\n\n    // This neither:\n    // let any_stor: &amp;mut Any = storage;\n    // let storage = any_stor.downcast_ref::&lt;ComponentStorage&lt;C&gt;&gt;();\n}\n</code></pre>\n\n<p>I know that my problem comes from the fact that <code>storage</code>'s type is <code>&amp;mut Box&lt;AnyStorage&gt;</code>; can I obtain the concrete <code>VecStorage</code> from it?</p>\n\n<p>The whole point of doing all this is that I want components to be contiguous in memory and to have different storage for each component type.  I can not resolve myself to use <code>Box&lt;Component&gt;</code>, or I don't see how.</p>\n\n<p>I reduced my problem to a minimal code <a href=\"https://play.rust-lang.org/?gist=58aefba48b9d35d636a44afd12eb85df&amp;version=stable\" rel=\"nofollow noreferrer\">on Rust Playground</a>.</p>\n"}, {"tags": ["rust", "clippy"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1516290578, "post_id": 48325153, "comment_id": 83635769, "body": "Frankly, that&#39;s just a bug with Clippy that you should report."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1516290604, "post_id": 48325153, "comment_id": 83635791, "body": "FWIW, it&#39;s going to say <code>.unwrap_or_else(|| &quot;&#47;&#47; No modules&quot;.to_string());</code>"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1516298753, "post_id": 48325153, "comment_id": 83640765, "body": "Clippy dev here. We don&#39;t actually generate error messages ourselves, we just ask rustc to do it for us. If the message is cut before the end, it&#39;s rustc&#39;s decision. But I&#39;d say it&#39;s also kinda your fault for making such a long expression, why not making the lambda a function?"}], "owner": {"reputation": 1302, "user_id": 2491528, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/723f1b1cb73fa871f360bdea9bd17a8a?s=128&d=identicon&r=PG", "display_name": "Federico", "link": "https://stackoverflow.com/users/2491528/federico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 65, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1516290375, "creation_date": 1516290375, "question_id": 48325153, "link": "https://stackoverflow.com/questions/48325153/how-to-increase-the-length-of-messages-displayed-by-clippy-or-rustc", "title": "How to increase the length of messages displayed by clippy or rustc", "body": "<p>How can I increase the number of source code lines shown in <code>rustc</code> or <code>clippy</code> messages? I have the problem that one of the changes suggested by <code>clippy</code> is truncated because it's too long.</p>\n\n<p>For example, the warning message that I see is this:</p>\n\n<pre><code>warning: use of `unwrap_or` followed by a function call\n  --&gt; jni-gen/src/generators/module.rs:17:24\n   |\n17 |       let modules_tree = modules\n   |  ________________________^\n18 | |         .visit(|modules| {\n19 | |             let modules: HashMap&lt;String, Option&lt;String&gt;&gt; = modules;\n20 | |             let mut res: Vec&lt;String&gt; = vec![];\n...  |\n36 | |         })\n37 | |         .unwrap_or(\"// No modules\".to_string());\n   | |_______________________________________________^\n   |\n   = note: #[warn(or_fun_call)] on by default\n   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.180/index.html#or_fun_call\nhelp: try this\n   |\n17 |     let modules_tree = modules\n18 |         .visit(|modules| {\n19 |             let modules: HashMap&lt;String, Option&lt;String&gt;&gt; = modules;\n20 |             let mut res: Vec&lt;String&gt; = vec![];\n21 |             for (name, opt_rec_result) in modules {\n22 |                 match opt_rec_result {\n ...\n</code></pre>\n\n<p>And the problem is that the suggested change regarding the <code>unwrap_or</code> call is not shown.</p>\n"}, {"tags": ["algorithm", "linked-list", "rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1516285918, "post_id": 48323623, "comment_id": 83632556, "body": "Note: did you really mean lifecyles, or did you mean lifetimes?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1516286354, "post_id": 48323623, "comment_id": 83632845, "body": "You don&#39;t need to borrow mutably to <i>print</i>; is printing really all you want to do, or is it a placeholder for a function where you <i>would</i> like to mutate things?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516286609, "post_id": 48323623, "comment_id": 83633035, "body": "I wonder why everybody wants to write a linked-list in Rust. IMHO, this is not a good point to start."}, {"owner": {"reputation": 23, "user_id": 6840647, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20630733c4cd40c9a9b822599005183d?s=128&d=identicon&r=PG&f=1", "display_name": "Emulebest", "link": "https://stackoverflow.com/users/6840647/emulebest"}, "edited": false, "score": 0, "creation_date": 1516286788, "post_id": 48323623, "comment_id": 83633158, "body": "I want to implement my own print that would be able to leave me the context of variable &#39;d&#39;"}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 4, "creation_date": 1516287980, "post_id": 48323623, "comment_id": 83633976, "body": "Obligatory link: <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a>."}, {"owner": {"reputation": 23, "user_id": 6840647, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20630733c4cd40c9a9b822599005183d?s=128&d=identicon&r=PG&f=1", "display_name": "Emulebest", "link": "https://stackoverflow.com/users/6840647/emulebest"}, "edited": false, "score": 0, "creation_date": 1516288887, "post_id": 48323623, "comment_id": 83634624, "body": "Borrowing mutably for printing is just for learning purpose"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516290290, "post_id": 48323623, "comment_id": 83635562, "body": "Follow the first duplicate, then the second, and you will end up <a href=\"https://play.rust-lang.org/?gist=b3b49e5a95ae47d7dc8e37b69867688b&amp;version=stable\" rel=\"nofollow noreferrer\">with code like this</a>."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516295629, "post_id": 48323623, "comment_id": 83638991, "body": "@boie Why not? Sounds like a good way to study how lifetimes and borrowing work using a toy example."}], "owner": {"reputation": 23, "user_id": 6840647, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20630733c4cd40c9a9b822599005183d?s=128&d=identicon&r=PG&f=1", "display_name": "Emulebest", "link": "https://stackoverflow.com/users/6840647/emulebest"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 102, "favorite_count": 0, "closed_date": 1516290214, "answer_count": 0, "score": 0, "last_activity_date": 1516290250, "creation_date": 1516285827, "last_edit_date": 1516287793, "question_id": 48323623, "link": "https://stackoverflow.com/questions/48323623/what-is-wrong-with-borrowing-self-in-classic-singly-linked-list-implementation", "closed_reason": "Duplicate", "title": "What is wrong with borrowing self in classic singly-linked list implementation", "body": "<p>I am a newcomer to the huge world of Rust. I have been learning it for a week and got some concept going, however something is a bit wrong with my classic implementation of singly-linked list and it is connected with borrowing and my lack of understanding of lifetimes. Here is the code:</p>\n\n<pre><code>use std::fmt::Display;\n\n#[derive(Debug)]\nstruct Node&lt;T&gt; {\n    payload: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;\n}\n\nimpl&lt;T&gt; Node&lt;T&gt;\n    where T: Display + PartialEq {\n    fn new(payload: T, next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;) -&gt; Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt; {\n        Some(Box::new(Node {\n            payload,\n            next\n        }))\n    }\n\n    fn print_nodes(&amp;mut self) {\n        let this = self;\n        loop {\n            match this.next {\n                Some(_) =&gt; {\n                    print!(\"{} -&gt; \", &amp;this.payload);\n                }\n                None =&gt; {\n                    print!(\"{}\", &amp;this.payload);\n                    break;\n                }\n            }\n            this = &amp;mut this.next.unwrap();\n        }\n    }\n}\n\nfn main() {\n    let a = Node::new(String::from(\"hello\"), None);\n    let b = Node::new(String::from(\"hey\"), a);\n    let mut d = b.unwrap();\n    d.print_nodes();\n}\n</code></pre>\n\n<p>Here is the error I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; main.rs:31:43\n   |\n31 |             this = &amp;mut this.next.unwrap();\n   |                         ------------------^ temporary value dropped here while still borrowed\n   |                         |\n   |                         temporary value created here\n32 |         }\n33 |     }\n   |     - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; main.rs:31:25\n   |\n31 |             this = &amp;mut this.next.unwrap();\n   |                         ^^^^ cannot move out of borrowed content\n\nerror[E0384]: cannot assign twice to immutable variable `this`\n  --&gt; main.rs:31:13\n   |\n20 |         let this = self;\n   |             ---- first assignment to `this`\n...\n31 |             this = &amp;mut this.next.unwrap();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n</code></pre>\n\n<p>I would be grateful if somebody could explain my mistake and recommend something to fix this.</p>\n"}, {"tags": ["testing", "rust", "measurement"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1516286064, "post_id": 48323487, "comment_id": 83632660, "body": "<i>&quot;I thought there should be 2 numbers per test&quot;</i> And indeed there are two numbers for each benched function, as you did expect. Can you be more specific?"}, {"owner": {"reputation": 313, "user_id": 7085243, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d9eb042d6fbc096ff6cbe4db83f16e5?s=128&d=identicon&r=PG&f=1", "display_name": "Sergey", "link": "https://stackoverflow.com/users/7085243/sergey"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1516286663, "post_id": 48323487, "comment_id": 83633065, "body": "I edited the question be more specific about numbers."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2794, "user_id": 371843, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/efa4525aa8ee707913ca277b3af19bd4?s=128&d=identicon&r=PG", "display_name": "Alec", "link": "https://stackoverflow.com/users/371843/alec"}, "edited": false, "score": 0, "creation_date": 1619113851, "post_id": 48323870, "comment_id": 118813447, "body": "@Alec uhh, no idea what went wrong there! My brain must have been stuck in one mode!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1619113819, "last_edit_date": 1619113819, "creation_date": 1516286547, "answer_id": 48323870, "question_id": 48323487, "link": "https://stackoverflow.com/questions/48323487/how-do-i-interpret-the-output-of-cargo-bench/48323870#48323870", "title": "How do I interpret the output of `cargo bench`?", "body": "<p>The numbers are the <a href=\"https://en.wikipedia.org/wiki/Median\" rel=\"nofollow noreferrer\"><em>median</em></a> and the <em>difference between the maximum and minimum</em>, expressed using US-centric number styles (which use the comma as the thousands separator).</p>\n<p>For your example:</p>\n<ul>\n<li>median: 26249920 ns/iter</li>\n<li>max-min: 2836381 ns/iter</li>\n</ul>\n<pre class=\"lang-rust prettyprint-override\"><code>let median = bs.ns_iter_summ.median as usize;\nlet deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n\nwrite!(\n    output,\n    &quot;{:&gt;11} ns/iter (+/- {})&quot;,\n    fmt_thousands_sep(median, ','),\n    fmt_thousands_sep(deviation, ',')\n)\n</code></pre>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1.51.0/library/test/src/bench.rs#L56-L74\" rel=\"nofollow noreferrer\">source code</a></p>\n<p>Note that there's various statistical work <a href=\"https://github.com/rust-lang/rust/blob/1.51.0/library/test/src/bench.rs#L111-L178\" rel=\"nofollow noreferrer\">underlying the benchmarking</a>, most obviously the fact that the upper and lower 5% of samples are truncated to reduce the effect of outliers.</p>\n"}, {"comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516286920, "post_id": 48323947, "comment_id": 83633260, "body": "@Shepmaster do you have a link for that? Those numbers look awfully small for variances, but they look about right for standard deviations\u2026"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516287540, "post_id": 48323947, "comment_id": 83633676, "body": "Looks like we are both wrong. According to <a href=\"https://docs.rs/bencher/%2A/src/bencher/lib.rs.html#403\" rel=\"nofollow noreferrer\">the source code</a> these numbers are actually the <i>median</i> and the <i>total deviation</i> (i.e. <code>max-min</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1516287752, "post_id": 48323947, "comment_id": 83633836, "body": "Yep, was doing the same searching."}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 2, "last_activity_date": 1516287789, "last_edit_date": 1516287789, "creation_date": 1516286742, "answer_id": 48323947, "question_id": 48323487, "link": "https://stackoverflow.com/questions/48323487/how-do-i-interpret-the-output-of-cargo-bench/48323947#48323947", "title": "How do I interpret the output of `cargo bench`?", "body": "<p>Your example does show the two numbers you expect per test: the median and total deviation (i.e. <code>max-min</code>) in nanoseconds per iteration.</p>\n\n<p>Note that for large numbers, it is standard practice in US English to write digits in groups of 3 separated by commas. For example, 26249920 is often written 26,249,920.</p>\n"}], "owner": {"reputation": 313, "user_id": 7085243, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d9eb042d6fbc096ff6cbe4db83f16e5?s=128&d=identicon&r=PG&f=1", "display_name": "Sergey", "link": "https://stackoverflow.com/users/7085243/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 657, "favorite_count": 0, "accepted_answer_id": 48323947, "answer_count": 2, "score": 3, "last_activity_date": 1619113819, "creation_date": 1516285389, "last_edit_date": 1516286664, "question_id": 48323487, "link": "https://stackoverflow.com/questions/48323487/how-do-i-interpret-the-output-of-cargo-bench", "title": "How do I interpret the output of `cargo bench`?", "body": "<p>I benchmarked my Rust project with <code>cargo bench</code> and see many numbers on the results... What do they mean?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2 tests\ntest bench_few_core ... bench:  26,249,920 ns/iter (+/- 2,836,381)\ntest bench_one_core ... bench:   6,087,923 ns/iter (+/- 752,064)\n</code></pre>\n\n<p>For example for <code>test bench_few_core</code>, I see:</p>\n\n<ul>\n<li>number 1 = 26</li>\n<li>number 2 = 249</li>\n<li>number 3 = 920</li>\n<li>number 4 = 2</li>\n<li>number 5 = 836</li>\n<li>number 6 = 381 </li>\n</ul>\n\n<p>What do they all mean?</p>\n\n<p>I thought there should be 2 numbers per test: math expectation (or mean) and standard deviation.</p>\n"}, {"tags": ["iterator", "rust", "traits"], "comments": [{"owner": {"reputation": 138, "user_id": 2054726, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hM5QU.jpg?s=128&g=1", "display_name": "Mario Idival", "link": "https://stackoverflow.com/users/2054726/mario-idival"}, "edited": false, "score": 2, "creation_date": 1516279025, "post_id": 48321087, "comment_id": 83628162, "body": "This a unstable feature...  This is a nightly-only experimental API. (step_trait #42168)  likely to be replaced by finer-grained traits"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1516284281, "post_id": 48321087, "comment_id": 83631473, "body": "As Mario says, the ability to make ranges of generic types (or more precisely, the ability to iterate over such ranges) is dependent on the <code>Step</code> trait, which you can only use in nightly Rust. There is no way to do this with stable."}], "answers": [{"tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 2, "last_activity_date": 1516281039, "creation_date": 1516281039, "answer_id": 48322187, "question_id": 48321087, "link": "https://stackoverflow.com/questions/48321087/iterating-over-a-range-of-generic-type/48322187#48322187", "title": "Iterating over a range of generic type", "body": "<p>To do this kind of thing generically the <code>num</code> crate is helpful.</p>\n\n<pre><code>extern crate num;\n\nuse num::{Num, One};\nuse std::fmt::Debug;\n\nfn iterate&lt;T&gt;(low: T, high: T)\nwhere\n    T: Num + One + PartialOrd + Copy + Clone + Debug,\n{\n    let one = T::one();\n    let mut i = low;\n    loop {\n        if i &gt; high {\n            break;\n        }\n        println!(\"{:?}\", i);\n\n        i = i + one;\n    }\n}\n\nfn main() {\n    iterate(0i32, 10i32);\n    iterate(5u8, 7u8);\n    iterate(0f64, 10f64);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1516286272, "creation_date": 1516286272, "answer_id": 48323774, "question_id": 48321087, "link": "https://stackoverflow.com/questions/48321087/iterating-over-a-range-of-generic-type/48323774#48323774", "title": "Iterating over a range of generic type", "body": "<p>If you want to require that a <code>Range&lt;T&gt;</code> can be iterated over, just use that as your trait bound:</p>\n\n<pre><code>trait Bounded {\n    type Index: Sized + Copy;\n    fn bounds(&amp;self) -&gt; (Self::Index, Self::Index);\n}\n\nfn iterate&lt;T&gt;(it: &amp;T)\nwhere\n    T: Bounded,\n    std::ops::Range&lt;T::Index&gt;: IntoIterator,\n{\n    let (low, high) = it.bounds();\n    for i in low..high {}\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 761, "user_id": 353478, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9c416ca500d3cf73fa70d31318ee9aef?s=128&d=identicon&r=PG", "display_name": "larvyde", "link": "https://stackoverflow.com/users/353478/larvyde"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 519, "favorite_count": 1, "accepted_answer_id": 48323774, "answer_count": 2, "score": 4, "last_activity_date": 1516287869, "creation_date": 1516277635, "last_edit_date": 1516287869, "question_id": 48321087, "link": "https://stackoverflow.com/questions/48321087/iterating-over-a-range-of-generic-type", "title": "Iterating over a range of generic type", "body": "<p>I have a trait</p>\n\n<pre><code>trait B {\n    type Index: Sized + Copy;\n    fn bounds(&amp;self) -&gt; (Self::Index, Self::Index);\n}\n</code></pre>\n\n<p>I want to get all the <code>Index</code>es within <code>bounds</code>:</p>\n\n<pre><code>fn iterate&lt;T: B&gt;(it: &amp;T) {\n    let (low, high) = it.bounds();\n    for i in low..high {}\n}\n</code></pre>\n\n<p>This won't work since there's no constraint that the type <code>T</code> can be \"ranged\" over, and the compiler says as much:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&lt;T as B&gt;::Index: std::iter::Step` is not satisfied\n --&gt; src/main.rs:8:5\n  |\n8 |     for i in low..high {}\n  |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::iter::Step` is not implemented for `&lt;T as B&gt;::Index`\n  |\n  = help: consider adding a `where &lt;T as B&gt;::Index: std::iter::Step` bound\n  = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::Range&lt;&lt;T as B&gt;::Index&gt;`\n</code></pre>\n\n<p>I tried adding the <code>Step</code> bound to <code>Index</code></p>\n\n<pre><code>use std::iter::Step;\n\ntrait B {\n    type Index: Sized + Copy + Step;\n    fn bounds(&amp;self) -&gt; (Self::Index, Self::Index);\n}\n</code></pre>\n\n<p>but apparently it isn't stable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: use of unstable library feature 'step_trait': likely to be replaced by finer-grained traits (see issue #42168)\n --&gt; src/main.rs:1:5\n  |\n1 | use std::iter::Step;\n  |     ^^^^^^^^^^^^^^^\n\nerror: use of unstable library feature 'step_trait': likely to be replaced by finer-grained traits (see issue #42168)\n --&gt; src/main.rs:4:32\n  |\n4 |     type Index: Sized + Copy + Step;\n  |                                ^^^^\n</code></pre>\n\n<p>Am I missing something or is it just not possible to do so right now?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1516268244, "post_id": 48317761, "comment_id": 83621453, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/46288670/how-do-i-create-a-function-that-accepts-an-iterator-of-i32s-as-either-values-or\">How do I create a function that accepts an iterator of i32s as either values or references and sums them?</a>"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1516268677, "post_id": 48317761, "comment_id": 83621733, "body": "The question is similar, but the key difference is that the person there just wants to sum things up and <code>Add</code> is implemented for references, while I need to pass the value on to a function that simply takes an <code>u32</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516268901, "post_id": 48317761, "comment_id": 83621870, "body": "If you take things by value, this is a consuming iterator. Thus in order to consume a vector, you must own it, not borrow it. You have incompatible requirements."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516268945, "post_id": 48317761, "comment_id": 83621898, "body": "@Boiethios I want the function to be agnostic to consuming or not consuming the sequence."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1516269185, "post_id": 48317761, "comment_id": 83622070, "body": "@SebastianRedl ah, ok; I&#39;ll retract my close vote, but you may want to adjust the question so that it doesn&#39;t come back from someone else :)."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516269279, "post_id": 48317761, "comment_id": 83622142, "body": "Ah, I understand: the problem is in <code>process_one</code>... But the question is still unclear for me."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516270218, "post_id": 48317761, "comment_id": 83622735, "body": "@Boiethios Is it clearer now what I want? Note that I can&#39;t change <code>process_one</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516270571, "post_id": 48317761, "comment_id": 83622963, "body": "You do not have to own the vector, because <code>u32</code> can be cloned, so why do you not write: <code>fn process(slice: &amp;[u32])</code>? Furthermore, there is no overhead when cloning an <code>u32</code>. If the user does not want his vector anymore after that, he does not have to use it."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1516270705, "post_id": 48317761, "comment_id": 83623051, "body": "@Boiethios That wouldn&#39;t work with other iterables, e.g. a range <code>1..42u32</code>, which is <code>IntoIterator&lt;Item=u32&gt;</code>. I&#39;m also not worried about performance overhead, I&#39;m worried about syntactic overhead."}], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1516274950, "post_id": 48319042, "comment_id": 83625657, "body": "It would be useful if compiler had exposed automatic dereference functionality. Something like this: <a href=\"https://play.rust-lang.org/?gist=b3f7edd5890c61f5b0a24a9968158b73&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1516292733, "post_id": 48319042, "comment_id": 83637255, "body": "This is essentially <code>ToOwned</code> but limited to <code>Copy</code> types, right?"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1516300002, "post_id": 48319042, "comment_id": 83641497, "body": "Yes, but <code>ToOwned</code> has an internal <code>type Owned: Borrow&lt;Self&gt;</code> requirement, which made it impossible to use for me."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 2, "last_activity_date": 1516285171, "last_edit_date": 1516285171, "creation_date": 1516271266, "answer_id": 48319042, "question_id": 48317761, "link": "https://stackoverflow.com/questions/48317761/how-to-write-a-generic-function-taking-any-iterator-of-u32-or-u32/48319042#48319042", "title": "How to write a generic function taking any iterator of `u32` or `&amp;u32`?", "body": "<p>Here's how I would do it with a custom trait.</p>\n\n<pre><code>trait ToValue&lt;V&gt; {\n    fn to_value(self) -&gt; V;\n}\n\nimpl&lt;T&gt; ToValue&lt;T&gt; for T {\n    fn to_value(self) -&gt; T {\n        self\n    }\n}\n\nimpl&lt;'a, T&gt; ToValue&lt;T&gt; for &amp;'a T\nwhere\n    T: Copy,\n{\n    fn to_value(self) -&gt; T {\n        *self\n    }\n}\n\nfn process&lt;N, II&gt;(ii: II)\nwhere\n    II: IntoIterator&lt;Item = N&gt;,\n    N: ToValue&lt;u32&gt;,\n{\n    for n in ii {\n        process_one(n.to_value());\n    }\n}\n</code></pre>\n\n<p>While this solves my problem, it leaves me rather unsatisfied, and I still think there should be a solution that doesn't involve my own trait.</p>\n"}, {"tags": [], "owner": {"reputation": 205, "user_id": 4846418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/be82940aac7db2359ec9e7b64a9e511b?s=128&d=identicon&r=PG&f=1", "display_name": "raggy", "link": "https://stackoverflow.com/users/4846418/raggy"}, "is_accepted": true, "score": 9, "last_activity_date": 1516315282, "last_edit_date": 1516315282, "creation_date": 1516274488, "answer_id": 48320104, "question_id": 48317761, "link": "https://stackoverflow.com/questions/48317761/how-to-write-a-generic-function-taking-any-iterator-of-u32-or-u32/48320104#48320104", "title": "How to write a generic function taking any iterator of `u32` or `&amp;u32`?", "body": "<p><a href=\"https://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow noreferrer\"><code>Borrow</code></a> works:</p>\n\n<pre><code>use std::borrow::Borrow;\n\nfn main() {\n    let x = vec![1, 2, 3];\n    process(x.iter());\n    process(x);\n    process(1..3);\n}\n\nfn process_one(n: u32) {\n    println!(\"{}\", n)\n}\n\nfn process&lt;I&gt;(iter: I)\nwhere\n    I: IntoIterator,\n    I::Item: Borrow&lt;u32&gt;,\n{\n    for x in iter {\n        process_one(*x.borrow());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 486, "favorite_count": 0, "accepted_answer_id": 48320104, "answer_count": 2, "score": 4, "last_activity_date": 1604537283, "creation_date": 1516267507, "last_edit_date": 1604537283, "question_id": 48317761, "link": "https://stackoverflow.com/questions/48317761/how-to-write-a-generic-function-taking-any-iterator-of-u32-or-u32", "title": "How to write a generic function taking any iterator of `u32` or `&amp;u32`?", "body": "<p>I'm trying to write a function that processes a sequence of integers.</p>\n<pre><code>fn process_one(n: u32) {}\n\nfn process&lt;II&gt;(ii: II)\nwhere\n    II: IntoIterator&lt;Item = u32&gt;,\n{\n    for n in ii {\n        process_one(n);\n    }\n}\n</code></pre>\n<p>I want the client to be able to pass a <code>Vec&lt;u32&gt;</code> without consuming it (<code>process(&amp;v)</code>). This function can't be used because <code>&lt;&amp;Vec&lt;u32&gt; as IntoIterator&gt;::Item</code> is <code>&amp;u32</code>; I'd have to pass <code>v.iter().cloned()</code> instead, which is annoying.</p>\n<p>Alternatively, I could make the bound <code>Item = &amp;u32</code> and use <code>process_one(*n)</code>, but then I have the reverse problem.</p>\n<p>I'm trying to think of a way to write this generically, but I can't figure out how. As far as I can tell, none of <code>AsRef</code>, <code>Borrow</code>, <code>ToOwned</code>, or <code>Deref</code> work.</p>\n<p>What I need is a way to write this:</p>\n<pre><code>fn process&lt;II&gt;(ii: II)\nwhere\n    II: IntoIterator&lt;Item = MAGIC&gt;, /* MORE MAGIC */\n{\n    for n in ii {\n        process_one(MAGIC(n));\n    }\n}\n</code></pre>\n<p>so that all of these compile:</p>\n<pre><code>fn test() {\n    let v: Vec&lt;u32&gt; = vec![1, 2, 3, 4];\n    process(&amp;v);\n    process(v);\n    process(1..10);\n}\n</code></pre>\n<p>I know I can do this using a custom trait, but I feel like there should be a way without all that boilerplate.</p>\n"}, {"tags": ["rust", "mutability"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1516254958, "post_id": 48314548, "comment_id": 83614974, "body": "Maybe not an exact duplicate, but that may be close enough?"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1516257060, "post_id": 48314548, "comment_id": 83615649, "body": "I&#39;d agree that the let-rebinding question answers this already. But for the OP, the short version is that the second &#39;let&#39; does not modify the first variable but instead creates a <i>new</i> variable with the same name, which doesn&#39;t interfere with mutability."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1516257300, "post_id": 48314548, "comment_id": 83615738, "body": "Indeed, and as an example: <a href=\"https://play.rust-lang.org/?gist=f7aaf36001fda16ea6756f8147d7df3f&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "is_accepted": false, "score": 2, "last_activity_date": 1516257547, "creation_date": 1516257547, "answer_id": 48315222, "question_id": 48314548, "link": "https://stackoverflow.com/questions/48314548/why-does-changing-a-variable-without-a-mut-not-throw-a-mutability-error/48315222#48315222", "title": "Why does changing a variable without a &quot;mut&quot; not throw a mutability error?", "body": "<p>The 1st variable get shadowed by the 2nd one. Rust allows that. It's as if you defined 2 different variables with different names.</p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 2, "last_activity_date": 1516277874, "creation_date": 1516277874, "answer_id": 48321170, "question_id": 48314548, "link": "https://stackoverflow.com/questions/48314548/why-does-changing-a-variable-without-a-mut-not-throw-a-mutability-error/48321170#48321170", "title": "Why does changing a variable without a &quot;mut&quot; not throw a mutability error?", "body": "<p>Mutability prevents modification of a variable, but it will not prevent you introducing a variable with same name using <code>let</code>. The difference is subtle but noticeable. Shadowing can change the type of value. Mutability can't.</p>\n\n<p>Shadowing:</p>\n\n<pre><code>let x = 2;\nlet x = \"String\";\n</code></pre>\n\n<p>Mutability:</p>\n\n<pre><code>let x = 2;\nx = 3; // will not compile because the variable that's immutable was assigned twice.\n\nlet mut x = 2;\nx = 3;\nx = \"String\"; // will not compile because you changed the type.\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=934c6875e70ef1428d8952313c9badb8&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a></p>\n"}], "owner": {"reputation": 455, "user_id": 9218031, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e130f1944fa76209ad76e225df9e4786?s=128&d=identicon&r=PG&f=1", "display_name": "Desert Digital", "link": "https://stackoverflow.com/users/9218031/desert-digital"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 216, "favorite_count": 1, "closed_date": 1516285722, "accepted_answer_id": 48321170, "answer_count": 2, "score": 3, "last_activity_date": 1516285858, "creation_date": 1516254187, "last_edit_date": 1516285858, "question_id": 48314548, "link": "https://stackoverflow.com/questions/48314548/why-does-changing-a-variable-without-a-mut-not-throw-a-mutability-error", "closed_reason": "Duplicate", "title": "Why does changing a variable without a &quot;mut&quot; not throw a mutability error?", "body": "<p>I was reading the <a href=\"https://rustbyexample.com/variable_bindings/scope.html#scope-and-shadowing\" rel=\"nofollow noreferrer\">Scopes and Shadowing</a> section of <em>Rust By Example</em> and was confused about the mutability of variables. \nIn this example there is a variable defined to a value of 1.</p>\n\n<pre><code>let long_lived_binding = 1;\n</code></pre>\n\n<p>It is later changed to</p>\n\n<pre><code>let long_lived_binding = 'a';\n</code></pre>\n\n<p>To my understanding, if you wanted to change a variable you needed to put the keyword <code>mut</code> in front of it. For example <code>let mut long_lived_binding = 1;</code> Why does the given example in <em>Rust By Example</em> not throw a mutability error? </p>\n"}, {"tags": ["datetime", "rust", "timestamp", "rust-chrono"], "answers": [{"comments": [{"owner": {"reputation": 247, "user_id": 9202260, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b989ea2f27e2346f04a52d6573f88a?s=128&d=identicon&r=PG&f=1", "display_name": "Kurama", "link": "https://stackoverflow.com/users/9202260/kurama"}, "edited": false, "score": 0, "creation_date": 1516249865, "post_id": 48313163, "comment_id": 83613462, "body": "how to get that in days, hours, minutes?"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 247, "user_id": 9202260, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b989ea2f27e2346f04a52d6573f88a?s=128&d=identicon&r=PG&f=1", "display_name": "Kurama", "link": "https://stackoverflow.com/users/9202260/kurama"}, "edited": false, "score": 2, "creation_date": 1516261874, "post_id": 48313163, "comment_id": 83617767, "body": "@Kurama what&#39;s the question about? This method returns the <code>Duration</code> object which has all the methods you want, - to get days, hours and minutes. Just open that link and you&#39;ll see."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516282488, "post_id": 48313163, "comment_id": 83630272, "body": "Or you can simply use subtraction to get a <code>Duration</code> from two <code>NaiveDateTime</code> instances: <code>now-dt1</code>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516282554, "post_id": 48313163, "comment_id": 83630319, "body": "@Jmb That was my first thought, but <code>Sub&lt;NaiveDateTime&gt;</code> isn&#39;t implemented for <code>NaiveDateTime</code>."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516283132, "post_id": 48313163, "comment_id": 83630681, "body": "@trentcl oops, my bad, I read the doc a little too quickly: I saw that <code>Sub&lt;Something&gt;</code> was implemented for <code>NaiveDateTime</code> and I didn&#39;t pay attention to what the <code>Something</code> actually was (in this case <code>FixedOffset</code>)"}, {"owner": {"reputation": 247, "user_id": 9202260, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b989ea2f27e2346f04a52d6573f88a?s=128&d=identicon&r=PG&f=1", "display_name": "Kurama", "link": "https://stackoverflow.com/users/9202260/kurama"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1516283710, "post_id": 48313163, "comment_id": 83631065, "body": "@Jmb which will yield another Duration. What will I do with it?"}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 4, "last_activity_date": 1516281675, "last_edit_date": 1516281675, "creation_date": 1516244402, "answer_id": 48313163, "question_id": 48312801, "link": "https://stackoverflow.com/questions/48312801/how-to-find-the-difference-between-2-naivedatetimes/48313163#48313163", "title": "How to find the difference between 2 NaiveDateTimes?", "body": "<p>Use <a href=\"https://docs.rs/chrono/0.4.0/chrono/naive/struct.NaiveDateTime.html#method.signed_duration_since\" rel=\"nofollow noreferrer\"><code>NaiveDateTime::signed_duration_since</code></a>:</p>\n\n<pre><code>println!(\"{:?}\", dt1.signed_duration_since(now))\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=2fedc40eda9d4257d08331e1ffc1a5ae&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>It returns a <a href=\"https://docs.rs/chrono/0.4.0/chrono/struct.Duration.html\" rel=\"nofollow noreferrer\"><code>Duration</code></a>, which has <code>&amp;self</code>-taking methods to yield whatever units you like, e.g. <code>dt1.signed_duration_since(now).num_days()</code>.</p>\n"}], "owner": {"reputation": 247, "user_id": 9202260, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b989ea2f27e2346f04a52d6573f88a?s=128&d=identicon&r=PG&f=1", "display_name": "Kurama", "link": "https://stackoverflow.com/users/9202260/kurama"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1516285926, "creation_date": 1516241491, "last_edit_date": 1516285926, "question_id": 48312801, "link": "https://stackoverflow.com/questions/48312801/how-to-find-the-difference-between-2-naivedatetimes", "title": "How to find the difference between 2 NaiveDateTimes?", "body": "<p>I am using <a href=\"https://crates.io/crates/chrono\" rel=\"nofollow noreferrer\">chrono</a>. I have <code>now()</code> and some other <code>NaiveDateTime</code>. How can I find a difference between them?</p>\n\n<pre><code>let now = Utc::now().naive_utc();\nlet dt1 = get_my_naive_datetime();\n</code></pre>\n"}]