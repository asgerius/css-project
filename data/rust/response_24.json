[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 3, "creation_date": 1435187561, "post_id": 31037822, "comment_id": 50101197, "body": "That does not remove the borrow, it just drops the value."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1435222369, "post_id": 31037822, "comment_id": 50113493, "body": "@SteveKlabnik What about the example in the docs? <code>drop(mutable_borrow)</code>?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1435253728, "post_id": 31037822, "comment_id": 50135242, "body": "That&#39;s specific to RefCell, which does run-time borrow checking rather than compile-time. That example is very poor :("}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1435268737, "post_id": 31037822, "comment_id": 50143173, "body": "Ah. The example catered to my wishful thinking. Makes sense now."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 6, "last_activity_date": 1435183701, "last_edit_date": 1435183701, "creation_date": 1435182942, "answer_id": 31037822, "question_id": 31037679, "link": "https://stackoverflow.com/questions/31037679/cannot-move-out-of-req-because-it-is-borrowed/31037822#31037822", "title": "Cannot move out of `req` because it is borrowed", "body": "<p>You have make sure the borrow ends before you move the value. To adapt your code:</p>\n\n<pre><code>fn handle_request(req: Request) {\n    {\n        let headers = req.headers();\n        // working with headers\n    }\n    let res = Response::from_string(\"hi\");\n    req.respond(res);\n}\n</code></pre>\n\n<p>The borrow will only last for the block at the top of the function, so after the end of the block you're free to move <code>res</code>.</p>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1755, "favorite_count": 0, "accepted_answer_id": 31037822, "answer_count": 1, "score": 6, "last_activity_date": 1435183701, "creation_date": 1435182453, "question_id": 31037679, "link": "https://stackoverflow.com/questions/31037679/cannot-move-out-of-req-because-it-is-borrowed", "title": "Cannot move out of `req` because it is borrowed", "body": "<p>I'm playing with Rust and <a href=\"https://github.com/frewsxcv/tiny-http\" rel=\"noreferrer\">tiny-http</a>. I've created a function in which I'm messing with the headers of request and then sending response:</p>\n\n<pre><code>fn handle_request(req: Request) {\n    let headers = req.headers();\n    // working with headers\n    let res = Response::from_string(\"hi\");\n    req.respond(res);\n}\n</code></pre>\n\n<p>It fails with error:</p>\n\n<pre><code>main.rs:41:5: 41:8 error: cannot move out of `req` because it is borrowed\nmain.rs:41     req.respond(res);\n               ^~~\nmain.rs:27:19: 27:22 note: borrow of `req` occurs here\nmain.rs:27     let headers = req.headers();\n                             ^~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>So I kinda understand that <code>req.headers()</code> accepts <code>&amp;self</code> which performs borrowing <code>req</code> and <code>req.respond()</code> \"moves\" <code>req</code> since it accepts <code>self</code>. I'm not sure what I should do here, can someone help me understand that?</p>\n"}, {"tags": ["testing", "module", "documentation", "rust"], "answers": [{"comments": [{"owner": {"reputation": 75, "user_id": 4774703, "user_type": "registered", "profile_image": "https://graph.facebook.com/875190032538614/picture?type=large", "display_name": "heyx3", "link": "https://stackoverflow.com/users/4774703/heyx3"}, "edited": false, "score": 0, "creation_date": 1435176199, "post_id": 31035729, "comment_id": 50096172, "body": "Thanks, that fixed it!"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 5, "last_activity_date": 1435175493, "creation_date": 1435175493, "answer_id": 31035729, "question_id": 31035491, "link": "https://stackoverflow.com/questions/31035491/error-using-local-modules-in-documentation-tests/31035729#31035729", "title": "Error using local modules in documentation tests", "body": "<p>You must specify the toplevel name of your crate (let's call it mylib):</p>\n\n<pre><code>use mylib::my_math::Vec2;\n</code></pre>\n\n<p>The rationale is that your doc example must be usable as-is by a client of your library. If you put yourself in their shoes, they would fetch your library (usually by cargo, but it doesn't matter) and then put an <code>extern crate mylib</code> in their toplevel lib.rs/main.rs. Then, in order to use parts of your library, they would have to specify the fully qualified name in order to use its children. </p>\n\n<p>And that's exactly what you have to do in your rustdoc-tested comment.</p>\n\n<p>Also, I think it's worth quoting to the relevant part of the Rust book, <a href=\"https://doc.rust-lang.org/book/documentation.html#documentation-as-tests\">Documentation as tests</a>, which explains some minor modifications applied to doc-code snippets. One of them is: </p>\n\n<blockquote>\n  <p>If the example does not contain <code>extern crate</code>, then <code>extern crate &lt;mycrate&gt;;</code> is inserted.</p>\n</blockquote>\n"}], "owner": {"reputation": 75, "user_id": 4774703, "user_type": "registered", "profile_image": "https://graph.facebook.com/875190032538614/picture?type=large", "display_name": "heyx3", "link": "https://stackoverflow.com/users/4774703/heyx3"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 31035729, "answer_count": 1, "score": 4, "last_activity_date": 1435176537, "creation_date": 1435174600, "last_edit_date": 1592644375, "question_id": 31035491, "link": "https://stackoverflow.com/questions/31035491/error-using-local-modules-in-documentation-tests", "title": "Error using local modules in documentation tests", "body": "<p>I'm playing around with a small crate for 2D noise generation. Here is a simplified snippet of my &quot;lib.rs&quot; file:</p>\n<pre><code>pub mod my_math {\n    pub struct Vec2&lt;T&gt; {\n        ...\n    }\n    ...\n}\npub mod my_noise {\n    use num::Float;\n    use std::num::Wrapping;\n    use my_math::*;\n\n    /// Gets pseudo-random noise based on a seed vector.\n    /// \n    /// # Examples\n    /// \n    /// ```\n    /// use my_math::Vec2;\n    /// \n    /// let v_seed = Vec2::&lt;f32&gt;::new_values(4.134, -23.141);\n    /// let noise_val = get_noise_white(&amp;v_seed);\n    /// \n    /// assert!(noise_val &gt;= 0.0);\n    /// assert!(noise_val &lt;= 1.0);\n    /// ```\n    pub fn get_noise_white(seed: &amp;Vec2&lt;f32&gt;) -&gt; f32 {\n        ...\n    }\n}\n</code></pre>\n<p>However, when I run <strong>cargo test</strong>, I get the following error:</p>\n<blockquote>\n<p>---- my_noise::get_noise_white_0 stdout ----</p>\n<p>&lt;anon&gt;:3:9: 3:16 error: unresolved import <code>my_math::Vec2</code>. Maybe a missing <code>extern crate my_math</code>?</p>\n<p>&lt;anon&gt;:3     use my_math::Vec2;</p>\n</blockquote>\n<p>I have also tried other forms of the <code>use</code> statement in the doc comment, including <code>use my_math::*;</code> and <code>use self::my_math::*;</code>. If I remove the line entirely, then I get an error that <code>Vec2</code> is undefined.</p>\n<p>What is the correct way to do this?</p>\n"}, {"tags": ["rust", "traits", "infix-operator"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 4, "creation_date": 1435163229, "post_id": 31031871, "comment_id": 50088479, "body": "Why are you trying to redefine the trait? The standard <code>Add</code> trait already provides overloading on the binary <code>+</code> operator."}, {"owner": {"reputation": 19, "user_id": 5039336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ff478f6cb2973a8b851dfc3d654337?s=128&d=identicon&r=PG&f=1", "display_name": "tyro1", "link": "https://stackoverflow.com/users/5039336/tyro1"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1435177643, "post_id": 31031871, "comment_id": 50096961, "body": "because the standard Add uses associated type Output - that it&#39;s a piece I don&#39;t want to use. If you look at the def. of my function, you could see that."}], "answers": [{"comments": [{"owner": {"reputation": 19, "user_id": 5039336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ff478f6cb2973a8b851dfc3d654337?s=128&d=identicon&r=PG&f=1", "display_name": "tyro1", "link": "https://stackoverflow.com/users/5039336/tyro1"}, "edited": false, "score": 0, "creation_date": 1435178254, "post_id": 31032301, "comment_id": 50097301, "body": "thanks - that solves the problem. Beautiful solution -  kudos."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1435170849, "last_edit_date": 1435170849, "creation_date": 1435164042, "answer_id": 31032301, "question_id": 31031871, "link": "https://stackoverflow.com/questions/31031871/redefine-trait-for-infix-operators/31032301#31032301", "title": "Redefine trait for infix operators", "body": "<p>It is not possible to redefine any traits. You could create your own trait with the same name and same methods, which is what you have done. However, the operator <code>+</code> is tied to <code>std::ops::Add</code>, so it wouldn't be useful in this case.</p>\n\n<p>In your case, it looks like you just want to specify <code>Add::Output</code> to return a <code>T</code>:</p>\n\n<pre><code>use std::ops::Add;\n\nfn summ&lt;T&gt;(a: T, b: T) -&gt; T\n    where T: Add&lt;Output = T&gt;\n{  \n    a + b\n}\n</code></pre>\n"}], "owner": {"reputation": 19, "user_id": 5039336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ff478f6cb2973a8b851dfc3d654337?s=128&d=identicon&r=PG&f=1", "display_name": "tyro1", "link": "https://stackoverflow.com/users/5039336/tyro1"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 1, "accepted_answer_id": 31032301, "answer_count": 1, "score": 2, "last_activity_date": 1435170849, "creation_date": 1435162849, "last_edit_date": 1435164140, "question_id": 31031871, "link": "https://stackoverflow.com/questions/31031871/redefine-trait-for-infix-operators", "title": "Redefine trait for infix operators", "body": "<p>I'm trying to redefine the <code>Add</code> trait so that I could use it as infix operator:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>//use std::ops::Add;\n\ntrait Add&lt;RHS=Self&gt; {\n    // type Output;\n\n    fn add(self, rhs: RHS) -&gt; Self;\n}\n\nfn summ&lt;T: Add&gt;(a: T, b: T) -&gt; T {  \n    a+b\n}  // doesn't compile \n</code></pre>\n\n<p>Is it possible to redefine the <code>Add</code> trait so that it will use the <code>+</code> operator for add functionality?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1435155222, "post_id": 31028993, "comment_id": 50082492, "body": "<i>Six seconds</i>.  Still, mine is longer.  :P"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1435155252, "post_id": 31028993, "comment_id": 50082519, "body": "I was thinking the exact same thing"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 3, "last_activity_date": 1435158515, "last_edit_date": 1435158515, "creation_date": 1435155168, "answer_id": 31028993, "question_id": 31028555, "link": "https://stackoverflow.com/questions/31028555/split-hashmap-into-equal-chunks/31028993#31028993", "title": "split HashMap into equal chunks", "body": "<p>As long as you don't care about the order of the elements you take out of the <code>HashMap</code>, you can convert your <code>HashMap&lt;String, String&gt;</code> into a <code>Vec&lt;(String, String)&gt;</code> by calling <code>your_map.into_iter().collect::&lt;Vec&lt;_&gt;&gt;()</code></p>\n\n<p>Then you can use the same algorithm you used to convert your <code>Vec&lt;String&gt;</code></p>\n\n<hr>\n\n<p>To be able to compete with @DK.'s elaborate answer I decided to create a generic version of your chunking algorithm:</p>\n\n<pre><code>fn chunk&lt;T, U&gt;(data: U) -&gt; Vec&lt;U&gt;\n    where U: IntoIterator&lt;Item=T&gt;,\n    U: FromIterator&lt;T&gt;,\n    &lt;U as IntoIterator&gt;::IntoIter: ExactSizeIterator\n{\n    let cpu_count = 6 /*num_cpus::get()*/;\n\n    let mut iter = data.into_iter();\n    let iter = iter.by_ref();\n\n    let chunk_len = (iter.len() / cpu_count) as usize + 1;\n\n    let mut chunks = Vec::new();\n    for _ in 0..cpu_count {\n        chunks.push(iter.take(chunk_len).collect())\n    }\n    chunks\n}\n</code></pre>\n\n<p>Try it out in the <a href=\"http://is.gd/4NPszY\" rel=\"nofollow\">PlayPen</a></p>\n"}, {"comments": [{"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1435162792, "post_id": 31028995, "comment_id": 50088206, "body": "Thanks. I am curious about one thing though, why did you use <code>hash.into_iter()</code> instead of <code>hash.iter()</code>. I was just trying to multithread my actual situation and the compiler was killing me with <code>does not live long enough</code> until I changed <code>iter()</code> into <code>into_iter()</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 1, "creation_date": 1435166080, "post_id": 31028995, "comment_id": 50090284, "body": "@Caballero: <code>into_iter()</code> consumes the subject, taking ownership of its contents.  <code>iter()</code> just <i>borrows</i> the subject and its contents.  The more immediate reason is that <code>iter()</code> produces a sequence of <code>&amp;(String, i32)</code>s, whilst <code>into_iter()</code> produces a sequence of <code>(String, i32)</code>s; note the lack of a borrow!  That reduces the levels of indirection and cloning that I might have to do."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1435155174, "creation_date": 1435155174, "answer_id": 31028995, "question_id": 31028555, "link": "https://stackoverflow.com/questions/31028555/split-hashmap-into-equal-chunks/31028995#31028995", "title": "split HashMap into equal chunks", "body": "<p>I'm not sure it makes any sense to \"chunk\" a <code>HashMap</code> directly.  In any case, the solution is obvious: <em>don't</em>.  You can chunk a <code>Vec</code> (actually any array slice), so just use that!  After all, a <code>HashMap</code> is logically just an unordered sequence of <code>(Key, Value)</code> pairs.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn chunk_vec() {\n    let cpu_count = 6 /*num_cpus::get()*/;\n\n    let list: Vec&lt;String&gt; = [\n        \"one\", \"two\", \"three\", \"four\", \"five\",\n        \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\n    ].iter().map(|&amp;s| s.into()).collect();\n\n    let chunk_len = (list.len() / cpu_count) as usize + 1;\n    let chunks: Vec&lt;Vec&lt;_&gt;&gt; = list.chunks(chunk_len)\n        .map(|c| c.iter().collect())\n        .collect();\n    for chunk in chunks {\n        println!(\"{:?}\", chunk);\n    }\n}\n\nfn chunk_hash() {\n    use std::collections::HashMap;\n\n    let cpu_count = 6 /*num_cpus::get()*/;\n\n    let hash: HashMap&lt;String, i32&gt; = [\n        (\"one\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4), (\"five\", 5),\n        (\"six\", 6), (\"seven\", 7), (\"eight\", 8), (\"nine\", 9), (\"ten\", 10)\n    ].iter().map(|&amp;(k, v)| (k.into(), v)).collect();\n\n    let list: Vec&lt;_&gt; = hash.into_iter().collect();\n\n    let chunk_len = (list.len() / cpu_count) as usize + 1;\n    let chunks: Vec&lt;HashMap&lt;_, _&gt;&gt; = list.chunks(chunk_len)\n        .map(|c| c.iter().cloned().collect())\n        .collect();\n    for chunk in chunks {\n        println!(\"{:?}\", chunk);\n    }\n}\n</code></pre>\n\n<p>I took the liberty of fiddling with your example code a little to highlight the similarities (and differences) between the two functions.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 648, "favorite_count": 1, "accepted_answer_id": 31028995, "answer_count": 2, "score": 0, "last_activity_date": 1435158515, "creation_date": 1435154049, "question_id": 31028555, "link": "https://stackoverflow.com/questions/31028555/split-hashmap-into-equal-chunks", "title": "split HashMap into equal chunks", "body": "<p>What's the best way to split a <code>HashMap</code> into equal chunks? For instance, this is how I split a <code>Vec&lt;String&gt;</code>:</p>\n\n<pre><code>extern crate num_cpus;\n\nfn main() {\n\n    let cpu_count = num_cpus::get();\n\n    let list: Vec&lt;String&gt; = vec![\"one\".into(), \"two\".into(), \"three\".into(), \"four\".into(), \"five\".into(), \"six\".into(), \"seven\".into(), \"eight\".into(), \"nine\".into(), \"ten\".into()];\n\n    let chunk_len = (list.len() / cpu_count) as usize + 1;\n    let mut chunks = Vec::new();\n    for chunk in list.chunks(chunk_len) {\n        chunks.push(chunk.to_owned());\n    }\n\n    for chunk in chunks {\n        println!(\"{:?}\", chunk);\n    }\n\n}\n</code></pre>\n\n<p>produces output</p>\n\n<pre><code>[\"one\", \"two\"]\n[\"three\", \"four\"]\n[\"five\", \"six\"]\n[\"seven\", \"eight\"]\n[\"nine\", \"ten\"]\n</code></pre>\n\n<p>How would I do the same with <code>HashMap&lt;String, String&gt;</code>?</p>\n"}, {"tags": ["ruby", "string", "rust", "ffi"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 7, "creation_date": 1435136170, "post_id": 31021453, "comment_id": 50069052, "body": "Quick comment: there are two immediate problems with this.  Firstly, <code>CStr</code> <b>is not a FFI-safe type</b> and should not be used like this.  You should be using <code>*const libc::c_char</code>.  Secondly, the answer depends entirely on who, exactly, owns the resulting string.  Does Ruby manage it?  If so, how?  Which heap does it need to be allocated on?  Does Rust still own it?  If so, how do you provide a cleanup function?  All I can recommend is to find out how to do this in C, then just do it that way in Rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435148429, "post_id": 31021453, "comment_id": 50077315, "body": "Also look at <a href=\"http://stackoverflow.com/q/30510764/155423\">stackoverflow.com/q/30510764/155423</a>, as it covers all the important parts. Adapting it to Ruby is easy at that point."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 1, "creation_date": 1435164632, "post_id": 31021453, "comment_id": 50089357, "body": "<a href=\"http://clalance.blogspot.ca/2011/01/writing-ruby-extensions-in-c-part-8.html\" rel=\"nofollow noreferrer\">clalance.blogspot.ca/2011/01/&hellip;</a> will be helpful, as will be <a href=\"https://github.com/ruby/ruby/blob/trunk/doc/extension.rdoc\" rel=\"nofollow noreferrer\">github.com/ruby/ruby/blob/trunk/doc/extension.rdoc</a>"}], "answers": [{"tags": [], "owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "is_accepted": true, "score": 6, "last_activity_date": 1435520074, "last_edit_date": 1495541257, "creation_date": 1435520074, "answer_id": 31103942, "question_id": 31021453, "link": "https://stackoverflow.com/questions/31021453/ruby-string-to-rust-and-back-again/31103942#31103942", "title": "Ruby string to rust and back again", "body": "<p>Thanks to some guidance from <a href=\"https://stackoverflow.com/users/24817/steve-klabnik\" title=\"Steve Klabnik\">Steve Klabnik</a>, <a href=\"https://stackoverflow.com/users/155423/shepmaster\">shepmaster</a> and <a href=\"https://stackoverflow.com/users/42353/dk\">DK</a>  I figured out how to write a external string concat function in Rust and use it in Ruby.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// lib.rs\n#![feature(libc)]\n#![feature(cstr_to_str)]\n#![feature(cstr_memory)]\nextern crate libc;\nuse std::ffi::{CStr,CString};\n\n#[no_mangle]\npub extern fn concat(s1: *const libc::c_char, s2: *const libc::c_char) -&gt; *const libc::c_char {\n    let s1_cstr = unsafe { CStr::from_ptr(s1) };  // &amp;std::ffi::c_str::CStr\n    let s2_cstr = unsafe { CStr::from_ptr(s2) };  // &amp;std::ffi::c_str::CStr\n    let s1_and_str = s1_cstr.to_str().unwrap();  // &amp;str\n    let s2_and_str = s2_cstr.to_str().unwrap();  // &amp;str\n\n    let mut s1_string = s1_and_str.to_string();  // collections::string::String\n\n    s1_string.push_str(s2_and_str);\n    // s1_string + s2_and_str); // same thing\n\n    let concated_string = CString::new(s1_string).unwrap();  // std::ffi::c_str::CString\n\n    concated_string.into_ptr() // const i8\n}\n</code></pre>\n\n<pre class=\"lang-ruby prettyprint-override\"><code># rust.rb\nrequire 'ffi'\n\nmodule Rust\n  extend FFI::Library\n  ffi_lib './bin/libembed.dylib'\n\n  attach_function :concat, [:string, :string], :string\nend\n</code></pre>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>#calling the function in Ruby\n\nRust.concat('This is a ', 'cohesive sentence') # =&gt; 'This is a cohesive sentence'\n</code></pre>\n"}], "owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 594, "favorite_count": 1, "accepted_answer_id": 31103942, "answer_count": 1, "score": 9, "last_activity_date": 1435520074, "creation_date": 1435134398, "last_edit_date": 1435135253, "question_id": 31021453, "link": "https://stackoverflow.com/questions/31021453/ruby-string-to-rust-and-back-again", "title": "Ruby string to rust and back again", "body": "<p>I am trying to pass a string in Ruby to a rust executable, manipulate it and pass the manipulated string back.</p>\n\n<p>So far I can pass the string in and return it but I am at a loss as to how to convert it into a rust string, manipulate it and then pass it back to ruby.  Here is what I have so far:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// lib.rs\nuse std::ffi::CStr;\n\n#[no_mangle]\npub extern fn return_string(test_str: &amp;CStr) -&gt; &amp;CStr {\n    // working funciton\n    test_str\n}\n\n#[no_mangle]\npub extern fn manipulate_and_return_string(mystr: &amp;CStr) -&gt; &amp;CStr {\n    // mystr type == &amp;std::ffi::c_str::CStr\n    // println!(\"{:?}\", mystr); =&gt; std::ffi::c_str::CStr` cannot be formatted using `:?`\n    let cstr = mystr.to_bytes_with_nul();\n    // println!(\"{:?}\", mystr); =&gt; []\n    // cstr type == &amp;[u8]\n    let ptr = cstr.as_ptr();\n    // ptr type == *const u8\n    // println!(\"{:?}\", mystr); =&gt; 0x7fd898edb520\n    let str_slice: &amp;str = std::str::from_utf8(cstr).unwrap();\n    // str type == &amp;str\n    // println!(\"{:?}\", mystr); =&gt; \"\"\n    let str_buf: String = str_slice.to_owned();\n    // str_bug == collections::string::String\n    // println!(\"{:?}\", mystr); =&gt; \"\"\n}\n</code></pre>\n\n<pre class=\"lang-ruby prettyprint-override\"><code># rust.rb\nrequire 'ffi'\n\nmodule Rust\n  extend FFI::Library\n  ffi_lib './bin/libembed.dylib'\n\n  attach_function :return_string, [:string], :string\n  attach_function :manipulate_and_return_string, [:string], :string\nend\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 625, "user_id": 3834754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8749cd6261f1c0b80d0afba519cdd2b?s=128&d=identicon&r=PG&f=1", "display_name": "WillEngler", "link": "https://stackoverflow.com/users/3834754/willengler"}, "edited": false, "score": 0, "creation_date": 1435107498, "post_id": 31015853, "comment_id": 50058279, "body": "Yes! That was what I was looking for. (I saw your answer just after I added my edit. Sorry for the strangeness there.)"}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 3, "last_activity_date": 1435107197, "creation_date": 1435107197, "answer_id": 31015853, "question_id": 31015640, "link": "https://stackoverflow.com/questions/31015640/getting-sequence-of-bytes-u8-from-a-char/31015853#31015853", "title": "Getting sequence of bytes (u8) from a char", "body": "<p>It seems to me like what you want is <a href=\"https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\" rel=\"nofollow\"><code>encode_utf8</code></a>, but that is also unstable. You can see its implementation <a href=\"https://github.com/rust-lang/rust/blob/9cc0b2247509d61d6a246a5c5ad67f84b9a2d8b6/src/libcore/char.rs#L220\" rel=\"nofollow\">here</a>.</p>\n"}], "owner": {"reputation": 625, "user_id": 3834754, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8749cd6261f1c0b80d0afba519cdd2b?s=128&d=identicon&r=PG&f=1", "display_name": "WillEngler", "link": "https://stackoverflow.com/users/3834754/willengler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5721, "favorite_count": 0, "accepted_answer_id": 31015853, "answer_count": 1, "score": 4, "last_activity_date": 1435116207, "creation_date": 1435105461, "last_edit_date": 1435116207, "question_id": 31015640, "link": "https://stackoverflow.com/questions/31015640/getting-sequence-of-bytes-u8-from-a-char", "title": "Getting sequence of bytes (u8) from a char", "body": "<p>I need to examine the bytes that make up a character. I know it is possible to do so by going from a <code>char</code> to a <code>String</code> to a <code>&amp;[u8]</code> like so:</p>\n\n<pre><code>let multi_byte_char = '\u00e1';\nlet little_string = multi_byte_char.to_string();\nlet byte_slice = little_string.as_bytes();\n\nfor byte in byte_slice {\n    println!(\"{}\", byte); // Prints \"195, 161\"\n}\n</code></pre>\n\n<p>Is there a way to go straight from a <code>char</code> to a <code>&amp;[u8]</code>? I can't find anything in <a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"nofollow\">the char documentation</a>. Another option is to <code>mem::transmute</code> from a <code>char</code> to a <code>[u8; 4]</code>, but using unsafe code here seems silly.</p>\n\n<p>EDIT: There is <a href=\"http://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\" rel=\"nofollow\">an unstable <code>encode_utf8</code> method</a> on <code>char</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6932, "user_id": 4149826, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/xjN5y.png?s=128&g=1", "display_name": "duan", "link": "https://stackoverflow.com/users/4149826/duan"}, "edited": false, "score": 2, "creation_date": 1583403226, "post_id": 31012923, "comment_id": 107107511, "body": "Rust&#39;s source code has <a href=\"https://github.com/rust-lang/rust/blob/2e6eaceedeeda764056eb0e2134735793533770d/src/libcore/marker.rs#L272\" rel=\"nofollow noreferrer\">relevant explanation</a>"}, {"owner": {"reputation": 440, "user_id": 7907717, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-0LU0FCk5puc/AAAAAAAAAAI/AAAAAAAAOaA/0yHHaz1nXq8/photo.jpg?sz=128", "display_name": "CircArgs", "link": "https://stackoverflow.com/users/7907717/circargs"}, "reply_to_user": {"reputation": 6932, "user_id": 4149826, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/xjN5y.png?s=128&g=1", "display_name": "duan", "link": "https://stackoverflow.com/users/4149826/duan"}, "edited": false, "score": 0, "creation_date": 1609887226, "post_id": 31012923, "comment_id": 115961578, "body": "@duan here those comments are on the official docs site: <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#whats-the-difference-between-copy-and-clone\" rel=\"nofollow noreferrer\">What is the difference between <code>Copy</code> and <code>Clone</code></a> and more on the very top of the docs page for <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\"><code>Clone</code></a>"}], "answers": [{"comments": [{"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 1, "creation_date": 1435092151, "post_id": 31013047, "comment_id": 50052943, "body": "Cool! This clears up a secondary question I had regarding whether the Clone trait provides implicit copying. Turns out that question and this one were more related than I thought. Thanks!"}, {"owner": {"reputation": 22686, "user_id": 3758484, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/pJmdo.jpg?s=128&g=1", "display_name": "johnbakers", "link": "https://stackoverflow.com/users/3758484/johnbakers"}, "edited": false, "score": 0, "creation_date": 1525454939, "post_id": 31013047, "comment_id": 87377644, "body": "In your first example, suppose you wanted <code>y</code> to get a moved <code>x</code>, not a copy of it, like with your last commented out example <code>w = v</code>. How would you specify that?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 2, "creation_date": 1525863322, "post_id": 31013047, "comment_id": 87520344, "body": "You can&#39;t, and you don&#39;t, because <code>Copy</code> is meant to be implemented for &quot;cheap&quot; types, such as <code>u8</code> in the example. If you write a quite heavyweight type, for which you think a move is more efficient than a copy, make it <i>not</i> impl <code>Copy</code>. Note that in the u8 case, you cannot possibly be more efficient with a move, since under the hood it would probably at least entail a pointer copy -- which is already as expensive as a u8 copy, so why bother."}, {"owner": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 0, "creation_date": 1548646702, "post_id": 31013047, "comment_id": 95601879, "body": "Does this mean that the presence of the <code>Copy</code> trait has an impact on the implicit lifetime scopes of variables?  If so I think that&#39;s noteworthy."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 91, "last_activity_date": 1435092463, "last_edit_date": 1435092463, "creation_date": 1435091899, "answer_id": 31013047, "question_id": 31012923, "link": "https://stackoverflow.com/questions/31012923/what-is-the-difference-between-copy-and-clone/31013047#31013047", "title": "What is the difference between Copy and Clone?", "body": "<p>The main difference is that cloning is explicit. Implicit notation means move for a non-<code>Copy</code> type.</p>\n\n<pre><code>// u8 implements Copy\nlet x: u8 = 123;\nlet y = x;\n// x can still be used\nprintln!(\"x={}, y={}\", x, y);\n\n// Vec&lt;u8&gt; implements Clone, but not Copy\nlet v: Vec&lt;u8&gt; = vec![1, 2, 3];\nlet w = v.clone();\n//let w = v // This would *move* the value, rendering v unusable.\n</code></pre>\n\n<p>By the way, every <code>Copy</code> type is also required to be <code>Clone</code>. However, they are not required to do the same thing! For your own types, <code>.clone()</code> can be an arbitrary method of your choice, whereas implicit copying will always trigger a <code>memcpy</code>, not the <code>clone(&amp;self)</code> implementation.</p>\n"}, {"comments": [{"owner": {"reputation": 565, "user_id": 646733, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/ec748bb46aace72908ff78afeb3b87d8?s=128&d=identicon&r=PG", "display_name": "Djvu", "link": "https://stackoverflow.com/users/646733/djvu"}, "edited": false, "score": 6, "creation_date": 1461567724, "post_id": 31013156, "comment_id": 61238408, "body": "Can I understand as <code>Clone</code> is a deep-copy, and <code>Copy</code> is shadow-copy?"}, {"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 15, "creation_date": 1473462212, "post_id": 31013156, "comment_id": 66166545, "body": "<code>Clone</code> opens the <i>possibility</i> that the type might do either a deep or shallow copy: &quot;arbitrarily complicated&quot;."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 134, "last_activity_date": 1518183829, "last_edit_date": 1518183829, "creation_date": 1435092241, "answer_id": 31013156, "question_id": 31012923, "link": "https://stackoverflow.com/questions/31012923/what-is-the-difference-between-copy-and-clone/31013156#31013156", "title": "What is the difference between Copy and Clone?", "body": "<p><code>Clone</code> is designed for arbitrary duplications: a <code>Clone</code> implementation for a type <code>T</code> can do arbitrarily complicated operations required to create a new <code>T</code>. It is a normal trait (other than being in the prelude), and so requires being used like a normal trait, with method calls, etc. </p>\n\n<p>The <code>Copy</code> trait represents values that can be safely duplicated via <code>memcpy</code>: things like reassignments and passing an argument by-value to a function are always <code>memcpy</code>s, and so for <code>Copy</code> types, the compiler understands that it doesn't need to consider those <a href=\"https://stackoverflow.com/q/24253344/1256624\">a move</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578331209, "post_id": 59615606, "comment_id": 105395943, "body": "@Shepmaster I removed it although I find it much more readable because it contains the nice color coding of the Rust compiler and I specifically made sure that all the search relevant words are also contained in the text."}, {"owner": {"reputation": 13792, "user_id": 2490497, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/8UW7x.png?s=128&g=1", "display_name": "jangorecki", "link": "https://stackoverflow.com/users/2490497/jangorecki"}, "edited": false, "score": 0, "creation_date": 1610564958, "post_id": 59615606, "comment_id": 116177307, "body": "Clone can be cheaper, no? when it is a shallow copy."}, {"owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "reply_to_user": {"reputation": 13792, "user_id": 2490497, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/8UW7x.png?s=128&g=1", "display_name": "jangorecki", "link": "https://stackoverflow.com/users/2490497/jangorecki"}, "edited": false, "score": 0, "creation_date": 1610573308, "post_id": 59615606, "comment_id": 116180293, "body": "@jangorecki I&#39;m not sure. My understanding is that <code>Copy</code> simply does a memcpy of the raw struct in memory. This is as &quot;shallow&quot; as it can get, and should not be confused with &quot;deep copying&quot;. The cheapest possible <code>Clone</code> that doesn&#39;t lose information would basically have to emulate a memcpy. Perhaps a <code>Clone</code> can be cheaper e.g. if it doesn&#39;t copy all fields though."}], "tags": [], "owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "is_accepted": false, "score": 18, "last_activity_date": 1582816112, "last_edit_date": 1582816112, "creation_date": 1578328060, "answer_id": 59615606, "question_id": 31012923, "link": "https://stackoverflow.com/questions/31012923/what-is-the-difference-between-copy-and-clone/59615606#59615606", "title": "What is the difference between Copy and Clone?", "body": "<p>As already covered by other answers:</p>\n\n<ul>\n<li><code>Copy</code> is implicit, inexpensive, and cannot be re-implemented (memcpy).</li>\n<li><code>Clone</code> is explicit, may be expensive, and may be re-implement arbitrarily.</li>\n</ul>\n\n<p>What is sometimes missing in the discussion of <code>Copy</code> vs <code>Clone</code> is that it also affects how the compiler uses moves vs automatic copies. For instance:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug, Clone, Copy)]\npub struct PointCloneAndCopy {\n    pub x: f64,\n}\n\n#[derive(Debug, Clone)]\npub struct PointCloneOnly {\n    pub x: f64,\n}\n\nfn test_copy_and_clone() {\n    let p1 = PointCloneAndCopy { x: 0. };\n    let p2 = p1; // because type has `Copy`, it gets copied automatically.\n    println!(\"{:?} {:?}\", p1, p2);\n}\n\nfn test_clone_only() {\n    let p1 = PointCloneOnly { x: 0. };\n    let p2 = p1; // because type has no `Copy`, this is a move instead.\n    println!(\"{:?} {:?}\", p1, p2);\n}\n</code></pre>\n\n<p>The first example (<code>PointCloneAndCopy</code>) works fine here because of the implicit copy, but the second example (<code>PointCloneOnly</code>) would error with a use after move:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: borrow of moved value: `p1`\n  --&gt; src/lib.rs:20:27\n   |\n18 |     let p1 = PointCloneOnly { x: 0. };\n   |         -- move occurs because `p1` has type `PointCloneOnly`, which does not implement the `Copy` trait\n19 |     let p2 = p1;\n   |              -- value moved here\n20 |     println!(\"{:?} {:?}\", p1, p2);\n   |                           ^^ value borrowed here after move\n</code></pre>\n\n<p>To avoid the implicit move, we could explicitly call <code>let p2 = p1.clone();</code>.</p>\n\n<p>This may raise the question of <a href=\"https://stackoverflow.com/q/31168589/1804173\">how to force a move of a type which implements the Copy trait?</a>. Short answer: You can't / doesn't make sense.</p>\n"}], "owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 27421, "favorite_count": 24, "accepted_answer_id": 31013156, "answer_count": 3, "score": 152, "last_activity_date": 1582816112, "creation_date": 1435091469, "last_edit_date": 1435116188, "question_id": 31012923, "link": "https://stackoverflow.com/questions/31012923/what-is-the-difference-between-copy-and-clone", "title": "What is the difference between Copy and Clone?", "body": "<p><a href=\"https://github.com/rust-lang/rust/issues/23790\" rel=\"noreferrer\">This issue</a> seems to imply it's just an implementation detail (<code>memcpy</code> vs ???), but I can't find any explicit description of the differences.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435059268, "post_id": 31001394, "comment_id": 50031069, "body": "<a href=\"http://stackoverflow.com/questions/28654978/lifetime-troubles-sharing-references-between-threads/28661524#28661524\">This answer</a> from Shepmaster might shed some clues on your issue. In short, there is no guarantee that your reference lives longer than the thread you spawn. Either pass by value or encapsulate the reference in <code>Arc</code>."}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435059396, "post_id": 31001394, "comment_id": 50031148, "body": "@MatthieuM. How do I go about passing by value?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435059708, "post_id": 31001394, "comment_id": 50031338, "body": "You would need a <code>String</code>, created from <code>test</code> in the loop body (but outside the closure) so that each thread you spawn get its own."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1435060187, "last_edit_date": 1495535197, "creation_date": 1435060187, "answer_id": 31002005, "question_id": 31001394, "link": "https://stackoverflow.com/questions/31001394/captured-variable-does-not-outlive-the-enclosing-closure/31002005#31002005", "title": "captured variable does not outlive the enclosing closure", "body": "<p>Checkout <a href=\"https://stackoverflow.com/a/28661524/1103681\">@Shepmaster's answer</a> for an explanation. There are two solutions to your problem depending on your use-case.</p>\n\n<p>If your use case is just string literals (of type <code>&amp;'static str</code>) and not arbitrary strings that are created during the program's execution, you can modify your function's signature to</p>\n\n<pre><code>fn test(test: &amp;'static str)\n</code></pre>\n\n<p>This will allow you to pass any string literal to this function and move the string literal to another thread.</p>\n\n<p>If on the other hand you want to create new strings by e.g. taking them from program arguments or environment variables, then you can create one <code>String</code> object per thread and pass that.</p>\n\n<pre><code>use std::thread;\nuse std::env;\n\nfn main() {\n    test(\"test\");\n    test(std::env::var(\"HOME\").unwrap()); // pass the current home-directory\n}\n\nfn test(test: &amp;str) {\n    for _x in 0..2 {\n        let string_object = test.to_string();\n        let handle = thread::spawn(move || {\n            for _y in 0..2 {\n                println!(\"{}\", string_object);\n            }\n        });\n    }    \n}\n</code></pre>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 226, "favorite_count": 0, "closed_date": 1435064719, "answer_count": 1, "score": 2, "last_activity_date": 1435060187, "creation_date": 1435058452, "last_edit_date": 1435059703, "question_id": 31001394, "link": "https://stackoverflow.com/questions/31001394/captured-variable-does-not-outlive-the-enclosing-closure", "closed_reason": "Duplicate", "title": "captured variable does not outlive the enclosing closure", "body": "<p>I have a threading operation in Rust which requires the use of a variable passed as an argument to the function the threads are spawned within, however I am seeing the following compile time error:</p>\n\n<pre><code>   Compiling Test v0.0.1 (file:///Users/clarkj84/Desktop/RustTest)\nmain.rs:9:22: 9:35 error: captured variable `test` does not outlive the enclosing closure\nmain.rs:9         let handle = thread::spawn(move || {\n                               ^~~~~~~~~~~~~\nmain.rs:7:20: 16:2 note: captured variable is valid for the anonymous lifetime #1 defined on the block at 7:19\nmain.rs:7 fn test(test: &amp;str){\nmain.rs:8     for _x in 0..2 {\nmain.rs:9         let handle = thread::spawn(move || {\nmain.rs:10             for _y in 0..2 {\nmain.rs:11                 println!(\"{}\", test);\nmain.rs:12             }\n           ...\nnote: closure is valid for the static lifetime\nerror: aborting due to previous error\nCould not compile `Test`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>This is my code implementation:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    test(\"test\");\n}\n\nfn test(test: &amp;str){\n    for _x in 0..2 {\n        let handle = thread::spawn(move || {\n            for _y in 0..2 {\n                println!(\"{}\", test);\n            }\n        });\n    }    \n}\n</code></pre>\n"}, {"tags": ["encoding", "binary", "buffer", "rust"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 3, "creation_date": 1435055360, "post_id": 30999684, "comment_id": 50028575, "body": "I think it would be best if you made a topic for each specific problem you&#39;re encountering rather than asking how to write such a lib in general. If you don&#39;t even know where to start I suggest looking at the rustc_serialize crate."}, {"owner": {"reputation": 1983, "user_id": 2224188, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/fbea3284e949fe5cb35a9c3f34bca37d?s=128&d=identicon&r=PG", "display_name": "Lorenz", "link": "https://stackoverflow.com/users/2224188/lorenz"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1435067499, "post_id": 30999684, "comment_id": 50036794, "body": "@A.B. Is it specific enough now?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1435083213, "post_id": 30999684, "comment_id": 50047655, "body": "IIRC this was moved out of the standard library and can be found in a crate. <a href=\"https://crates.io/crates/byteorder\" rel=\"nofollow noreferrer\">crates.io/crates/byteorder</a>. <a href=\"https://crates.io/crates/podio\" rel=\"nofollow noreferrer\">crates.io/crates/podio</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435116380, "post_id": 30999684, "comment_id": 50060158, "body": "Are you asking &quot;how do I overload the argument type of the method <code>add_binary_representation</code>?&quot; or are you asking &quot;how do I write specific bytes or bits to a vector&quot;?"}, {"owner": {"reputation": 1983, "user_id": 2224188, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/fbea3284e949fe5cb35a9c3f34bca37d?s=128&d=identicon&r=PG", "display_name": "Lorenz", "link": "https://stackoverflow.com/users/2224188/lorenz"}, "edited": false, "score": 0, "creation_date": 1435156030, "post_id": 30999684, "comment_id": 50083195, "body": "The question is more about how to write the different data types to vectors. The libraries ArtemGr linked seem to help, I&#39;ll see if I need anything else."}], "owner": {"reputation": 1983, "user_id": 2224188, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/fbea3284e949fe5cb35a9c3f34bca37d?s=128&d=identicon&r=PG", "display_name": "Lorenz", "link": "https://stackoverflow.com/users/2224188/lorenz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 85, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1435116292, "creation_date": 1435053667, "last_edit_date": 1435116292, "question_id": 30999684, "link": "https://stackoverflow.com/questions/30999684/serialize-to-specific-binary-encoding", "title": "Serialize to specific binary encoding", "body": "<p>I'm writing a Rust wrapper for a binary protocol (Netlink) and for that purpose I need to encode some data (Strings and different sorts of ints and uints) into some kind of buffer, and I saw that <code>Vec&lt;u8&gt;</code> is uausally used for that. My current pseudocode looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct NetlinkHeader {\n    length: u32,\n    _type: u16,\n    flags: u16,\n    sequence: u32,\n    pid: u32\n}\n\nimpl NetlinkSerializable for NetlinkHeader {\n    fn to_wire_format(&amp;self) -&gt; Result&lt;str, &amp;'static str&gt; {\n        let mut binary_data: Vec&lt;u8&gt; = Vec::with_capacity(16);\n        binary_data.add_binary_representation(self.length);\n        binary_data.add_binary_representation(self._type);\n        binary_data.add_binary_representation(self.flags);\n        binary_data.add_binary_representation(self.sequence);\n        binary_data.add_binary_representation(self.pid);\n    }\n}\n</code></pre>\n\n<p>I need help implementing something that does what <code>add_binary_representation</code> in the above pseudocode would do.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 1, "creation_date": 1435063758, "post_id": 30999678, "comment_id": 50034036, "body": "Well, catching all Error is the whole point of such a generic implementation. Unfortunately there is no existing impl I can use. That would only work if I would always want to return <code>Box&lt;Error&gt;</code>. For now I use use <code>map_err</code> to wrap it at every call site."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1435066328, "post_id": 30999678, "comment_id": 50035904, "body": "@Ferio: The problem is that <i>even if you could</i> write that impl, it would immediately prevent you from <i>ever</i> implementing more specific logic for any other type.  Your <code>ErrorType</code> enum would <i>literally</i> be the same as <code>Box&lt;Error&gt;</code>.  You don&#39;t need to use <code>map_err</code>, you just need to write a <code>From</code> impl for every source error type, which is what <code>error-type</code> was designed for."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1435070281, "post_id": 30999678, "comment_id": 50039088, "body": "True\u2026I didn\u2019t consider how <code>try!</code> is implemented. Seems that a catch-all is not possible."}, {"owner": {"reputation": 178, "user_id": 8620595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f046cd65fd96b254e6bc1b2dcf04b364?s=128&d=identicon&r=PG", "display_name": "Lordie", "link": "https://stackoverflow.com/users/8620595/lordie"}, "edited": false, "score": 0, "creation_date": 1607281978, "post_id": 30999678, "comment_id": 115217183, "body": "it wouldn&#39;t be literally the same, you can&#39;t impl foreign traits for Box&lt;&gt;"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1435053656, "creation_date": 1435053656, "answer_id": 30999678, "question_id": 30999253, "link": "https://stackoverflow.com/questions/30999253/implementing-a-generic-conversion-from-an-object-implementing-the-error-trait/30999678#30999678", "title": "Implementing a generic conversion from an object implementing the `Error` trait", "body": "<p>You don't.</p>\n\n<p>That implementation would be a bit useless, anyway.  It would mean that <em>all</em> other error types would just be immediately boxed.  At that point, you might as well just make use of the existing conversions involving <code>Box&lt;Error&gt;</code> and use <em>that</em> instead.</p>\n\n<p>If you want an error type that actually <em>preserves</em> the type of the unified errors, you'll need to implement <code>From</code> once for each of them.  The <a href=\"https://crates.io/crates/error-type\" rel=\"nofollow\"><code>error-type</code></a> crate can help with defining unifying error types.</p>\n"}, {"tags": [], "owner": {"reputation": 8171, "user_id": 311655, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=128&d=identicon&r=PG", "display_name": "DenisKolodin", "link": "https://stackoverflow.com/users/311655/deniskolodin"}, "is_accepted": false, "score": 0, "last_activity_date": 1475903922, "creation_date": 1475903922, "answer_id": 39928945, "question_id": 30999253, "link": "https://stackoverflow.com/questions/30999253/implementing-a-generic-conversion-from-an-object-implementing-the-error-trait/39928945#39928945", "title": "Implementing a generic conversion from an object implementing the `Error` trait", "body": "<p>According comments above I've found this one approach works only:</p>\n\n<pre><code>impl&lt;T: error::Error + 'static&gt; From&lt;Box&lt;T&gt;&gt; for Error {\n    fn from(e: Box&lt;T&gt;) -&gt; Self {\n        Error::Other(e)\n    }\n}\n</code></pre>\n\n<p>To use it you should <code>Box</code> errors:</p>\n\n<pre><code>try!(any_result().map_err(Box::new))\n</code></pre>\n\n<p>But if you need generic error (for user-defined tasks, as example) you don't need to wrap it with enum, try to use it directly:</p>\n\n<pre><code>trait AnyTask {\n    fn do_it(&amp;self) -&gt; Result&lt;Success, Box&lt;Error&gt;&gt;;\n}\n</code></pre>\n\n<p>It makes possible to use <code>try!</code> or <code>.into()</code> everywhere. This way:</p>\n\n<pre><code>fn do_it(&amp;self) -&gt; Result&lt;Succeed, Box&lt;Error&gt;&gt; {\n\n    let row = try!(self.database.find_last());\n\n    if row.some_condition {\n        return Err(\"I don't like it!\".into());\n    }\n\n    try!(self.database.insert(row));\n\n    Ok(Success)\n}\n</code></pre>\n"}], "owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 0, "accepted_answer_id": 30999678, "answer_count": 2, "score": 5, "last_activity_date": 1475903922, "creation_date": 1435052472, "question_id": 30999253, "link": "https://stackoverflow.com/questions/30999253/implementing-a-generic-conversion-from-an-object-implementing-the-error-trait", "title": "Implementing a generic conversion from an object implementing the `Error` trait", "body": "<p>I cannot get the following code to compile. </p>\n\n<ul>\n<li>I get an error that <code>From</code> is already implemented.</li>\n<li>If I remove the manual impl of <code>From</code> I get the error that <code>From</code> is not implemented.</li>\n<li>If I do not implement <code>Error</code> it works fine.</li>\n</ul>\n\n<p>I suppose that this is due to the blank impl <code>impl&lt;T&gt; From&lt;T&gt; for T</code> in core. How should I work around this? Not implementing <code>Error</code> is not really an option.</p>\n\n<p>Code (<a href=\"http://is.gd/6kxEM6\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre><code>use std::fmt;\nuse std::io;\nuse std::error::Error;\n\n#[derive(Debug)]\nenum ErrorType {\n    Other(Box&lt;Error&gt;)\n}\n\nimpl fmt::Display for ErrorType {\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        fmt.write_str(\"not implemented\")\n    }\n}\n\nimpl Error for ErrorType {\n    fn description(&amp;self) -&gt; &amp;str {\n        use self::ErrorType::*;\n        match *self {\n            Other(ref err) =&gt; err.description(),\n        }\n    }\n}\n\nimpl&lt;E: Error + 'static&gt; From&lt;E&gt; for ErrorType {\n    fn from(other: E) -&gt; Self {\n        ErrorType::Other(Box::new(other))\n    }\n}\n\nfn ret_io_err() -&gt; Result&lt;(), io::Error&gt; {\n    Ok(())\n}\n\nfn ret_error_type() -&gt; Result&lt;(), ErrorType&gt; {\n    try!(ret_io_err());\n    Ok(())\n}\n\nfn main() {}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 5035975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86b8a45528ffb522cc508feefae2345f?s=128&d=identicon&r=PG&f=1", "display_name": "anthony de meulemeester", "link": "https://stackoverflow.com/users/5035975/anthony-de-meulemeester"}, "edited": false, "score": 0, "creation_date": 1435044839, "post_id": 30996457, "comment_id": 50021872, "body": "damn thx. Comming from high level languages doenst make me smart i guess."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1435052232, "post_id": 30996457, "comment_id": 50026488, "body": "feel free to mention anything you would like to have clarified :)"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 5, "last_activity_date": 1435044861, "last_edit_date": 1435044861, "creation_date": 1435044547, "answer_id": 30996457, "question_id": 30996333, "link": "https://stackoverflow.com/questions/30996333/indexing-a-string/30996457#30996457", "title": "Indexing a String", "body": "<p>Indeed, the size of a <code>[u8]</code> isn't known at compile time. The size of <code>&amp;[u8]</code> however is known at compile time because it's just a pointer plus a <code>usize</code> representing the length of sequence.</p>\n\n<pre><code>format!(\"{:?}/{:?}\", &amp;bytes[0..2], &amp;bytes[2..4])\n</code></pre>\n\n<p>Rust strings are encoded in utf-8, so working with strings in this way is generally a bad idea because a single unicode character may consist of multiple bytes.</p>\n"}], "owner": {"reputation": 41, "user_id": 5035975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86b8a45528ffb522cc508feefae2345f?s=128&d=identicon&r=PG&f=1", "display_name": "anthony de meulemeester", "link": "https://stackoverflow.com/users/5035975/anthony-de-meulemeester"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "accepted_answer_id": 30996457, "answer_count": 1, "score": 3, "last_activity_date": 1435064606, "creation_date": 1435044194, "last_edit_date": 1435064606, "question_id": 30996333, "link": "https://stackoverflow.com/questions/30996333/indexing-a-string", "title": "Indexing a String", "body": "<p>I want to perform a very simple task, but I cannot manage to stop the compiler from complaining.</p>\n\n<pre><code>fn transform(s: String) -&gt; String {\n    let bytes = s.as_bytes();\n    format!(\"{}/{}\", bytes[0..2], bytes[2..4])\n}\n</code></pre>\n\n<p><code>[u8]</code> does not have a constant size known at compile-time.</p>\n\n<p>Some tips making this operation to work as intended?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 519, "user_id": 4377783, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Jj1hT.jpg?s=128&g=1", "display_name": "Virbhadrasinh", "link": "https://stackoverflow.com/users/4377783/virbhadrasinh"}, "edited": false, "score": 0, "creation_date": 1435035926, "post_id": 30994176, "comment_id": 50017643, "body": "try <code>assert_eq!(res1.unwrap(),&quot;just for test&quot;);</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1435042904, "post_id": 30994176, "comment_id": 50020750, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/30787271/result-type-does-not-implement-method-in-scope-named-unwrap\">Result type does not implement method in scope named `unwrap`</a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1435044635, "post_id": 30994296, "comment_id": 50021759, "body": "Do you know if there is a feature request opened against rustc to explicitly list <i>why</i> the methods were not considered when it finds methods with the right name? It might be tough, for common names, though they could be prioritized in some may and limited in number, however this is something I found invaluable in C++ SFINAE since Clang introduced the feature."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1435045203, "post_id": 30994296, "comment_id": 50022041, "body": "@MatthieuM. I actually <a href=\"https://github.com/rust-lang/rust/issues/26516\" rel=\"nofollow noreferrer\">opened one in response to this question</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435046551, "post_id": 30994296, "comment_id": 50022793, "body": "@DK.: I can&#39;t comment on it right now, you might want to mention that Clang manages it with SFINAE exclusion on template methods in C++, which is fairly similar (since SFINAE is about culling methods depending on some conditions). This not only means the feature is actually implementable, but may also provide a reference implementation for a would-be implementer."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 4, "creation_date": 1571518884, "post_id": 30994296, "comment_id": 103270332, "body": "Any idea why they didn&#39;t implement <code>unwrap()</code> for non-<code>Debug</code> types?"}, {"owner": {"reputation": 617, "user_id": 2036930, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5611c46bb33e051bf692b69cf4411377?s=128&d=identicon&r=PG", "display_name": "statusfailed", "link": "https://stackoverflow.com/users/2036930/statusfailed"}, "reply_to_user": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 2, "creation_date": 1575030536, "post_id": 30994296, "comment_id": 104441434, "body": "@Timmmm I assume this is because they want to include some informative message in the panic! that happens if you try to unwrap() an error- you need Debug to turn the E value into this message."}, {"owner": {"reputation": 18645, "user_id": 50385, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2faf0c72f6a7f65431e7df489878be24?s=128&d=identicon&r=PG", "display_name": "Joseph Garvin", "link": "https://stackoverflow.com/users/50385/joseph-garvin"}, "edited": false, "score": 0, "creation_date": 1613957003, "post_id": 30994296, "comment_id": 117228220, "body": "So what do you do if you want to <code>unwrap()</code> but you didn&#39;t define the error type so it&#39;s not up to you whether it&#39;s Debug? Running into this with <code>TryInto&lt;usize&gt;</code>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 28, "last_activity_date": 1495854242, "last_edit_date": 1495854242, "creation_date": 1435036329, "answer_id": 30994296, "question_id": 30994176, "link": "https://stackoverflow.com/questions/30994176/result-has-no-method-called-unwrap/30994296#30994296", "title": "Result has no method called &quot;unwrap()&quot;?", "body": "<p>If you read the documentation for <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap\" rel=\"noreferrer\"><code>Result::unwrap</code></a>, you'll note that it's under a little section called:</p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; \n    where E: Debug\n</code></pre>\n\n<p>This means the methods in that section <em>only exist</em> so long as the given constraints are satisfied.</p>\n\n<p>The only reason <code>unwrap</code> wouldn't exist is that <code>Error</code> doesn't implement <code>Debug</code>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5698, "favorite_count": 2, "accepted_answer_id": 30994296, "answer_count": 1, "score": 25, "last_activity_date": 1495854242, "creation_date": 1435035742, "last_edit_date": 1495854202, "question_id": 30994176, "link": "https://stackoverflow.com/questions/30994176/result-has-no-method-called-unwrap", "title": "Result has no method called &quot;unwrap()&quot;?", "body": "<p>What a strange error:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nstruct MyStruct1;\nstruct Error;\n\nfn get_res() -&gt; Result&lt;(MyStruct1, BTreeMap&lt;String, String&gt;), Error&gt; {\n    Err(Error)\n}\n\nfn main() {\n    let res1 = get_res();\n    assert!(res1.is_ok());\n    assert_eq!(\"just for test\", res1.unwrap()); //error\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `unwrap` found for type `std::result::Result&lt;(MyStruct1, std::collections::BTreeMap&lt;std::string::String, std::string::String&gt;), Error&gt;` in the current scope\n  --&gt; src/main.rs:13:38\n   |\n13 |     assert_eq!(\"just for test\", res1.unwrap()); //error\n   |                                      ^^^^^^\n   |\n   = note: the method `unwrap` exists but the following trait bounds were not satisfied: `Error : std::fmt::Debug`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434995992, "post_id": 30985803, "comment_id": 50003417, "body": "try using <code>&amp;self</code> as the parameter of the <code>hashname</code> function instead of <code>self</code>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1435002238, "last_edit_date": 1435002238, "creation_date": 1435001496, "answer_id": 30988287, "question_id": 30985803, "link": "https://stackoverflow.com/questions/30985803/idiomatic-borrowing/30988287#30988287", "title": "Idiomatic borrowing", "body": "<p>This is not a question whether this is idiomatic or not, I believe; what you need to write depends on what you want to achieve.</p>\n\n<p>Using by-value <code>self</code> and moving <code>String</code> out of the struct, consuming it in process (this is what your example does) is perfectly legitimate thing in certain contexts and wholly depends on your use cases.</p>\n\n<p>On the other hand, if you want only to get the value of the string to read it somewhere (as your example suggests), it is better to return a string slice:</p>\n\n<pre><code>impl BlobRef {\n     fn hashname(&amp;self) -&gt; &amp;str {\n         &amp;self.hashname\n     }\n}\n</code></pre>\n\n<p>Now your second piece code could look like this:</p>\n\n<pre><code>fn write(bref: &amp;BlobRef, source: &amp;[u8]) -&gt; io::Result&lt;String&gt; {\n    let hashname = bref.hashname();\n    match fs::create_dir_all(hashname) {\n        Ok(_) =&gt; Ok(hashname.into()),\n        Err(e) =&gt; Err(e)\n    }\n}\n</code></pre>\n\n<p>This require additional allocation in order to get a <code>String</code> out of <code>&amp;str</code>.</p>\n\n<p>However, if the only purpose of <code>BlobRef</code> is to transfer the string to this function, then your original approach is perfectly fine.</p>\n"}], "owner": {"reputation": 829, "user_id": 2390578, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/62520d427d50bcb88092c16214510d4a?s=128&d=identicon&r=PG", "display_name": "Anthony De Meulemeester", "link": "https://stackoverflow.com/users/2390578/anthony-de-meulemeester"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "accepted_answer_id": 30988287, "answer_count": 1, "score": 2, "last_activity_date": 1435002238, "creation_date": 1434992692, "last_edit_date": 1434997486, "question_id": 30985803, "link": "https://stackoverflow.com/questions/30985803/idiomatic-borrowing", "title": "Idiomatic borrowing", "body": "<p>I'm new to Rust and have the following working code. But I don't think what I am doing is the best way. I'm looking for insights about this piece of simple code.</p>\n\n<p>I have a simple struct that holds some data:</p>\n\n<pre><code>struct BlobRef {\n    hashname: String,\n}\n\nimpl BlobRef {\n     fn hashname(self) -&gt; String {\n         self.hashname\n     }\n}\n</code></pre>\n\n<p>And a function call. Don't worry about the <code>source: &amp;[u8]</code>, it will have its time to shine.</p>\n\n<pre><code>fn write(bref: BlobRef, source: &amp;[u8]) -&gt; io::Result&lt;String&gt; {\n    let hashname = bref.hashname();\n    match fs::create_dir_all(&amp;hashname) {\n        Ok(_) =&gt; Ok(hashname),\n        Err(e) =&gt; Err(e)\n    }\n}\n</code></pre>\n\n<p>I need to assign another scoped variable <code>hashname</code> to stop the compiler complaining about \"use of moved variable\". Is this idiomatic?</p>\n"}, {"tags": ["python", "rust", "ctypes"], "comments": [{"owner": {"reputation": 18935, "user_id": 19405, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a72b55a41a43ea0493fc64641a1ed295?s=128&d=identicon&r=PG", "display_name": "nobody", "link": "https://stackoverflow.com/users/19405/nobody"}, "edited": false, "score": 0, "creation_date": 1435495942, "post_id": 30984688, "comment_id": 50215315, "body": "Do not put solutions in your question. If you want to share the code that worked for you, you can post an answer of your own."}], "answers": [{"comments": [{"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "edited": false, "score": 0, "creation_date": 1435021575, "post_id": 30992210, "comment_id": 50014012, "body": "This is incredibly thorough. Thank you so much."}, {"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1435029865, "post_id": 30992210, "comment_id": 50015975, "body": "Here are the documentation links for <a href=\"https://docs.python.org/2/library/ctypes.html#ctypes._CData.from_param\" rel=\"nofollow noreferrer\"><code>from_param</code></a> and <a href=\"https://docs.python.org/2/library/ctypes.html#ctypes._FuncPtr.errcheck\" rel=\"nofollow noreferrer\"><code>errcheck</code></a>."}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1435062674, "post_id": 30992210, "comment_id": 50033287, "body": "@eryksun Any chance you could put together a basic example incorporating your suggestions?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1435064501, "post_id": 30992210, "comment_id": 50034544, "body": "@eryksun I&#39;ve updated, thanks again! The part I&#39;m least sure about is the <code>errcheck</code> function; does it make sense the way I wrote it?"}, {"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 1, "creation_date": 1435065100, "post_id": 30992210, "comment_id": 50035024, "body": "I&#39;d use <code>return ctypes.cast(array.data, ctypes.POINTER(FFITuple * array.len))[0]</code> to return a <code>FFITuple</code> array. Also, I forgot that in <code>from_param</code> you should pass along an instance of the class, e.g. <code>return arg if isinstance(arg, cls) else cls(arg)</code>."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435394941, "post_id": 30992210, "comment_id": 50190860, "body": "@Shepmaster +1 Nice idea. Regarding your statement, <i>&quot;To have a fully correct example, you&#39;d need to add another method that would accept the pointer back from the callee, transform it back into a Vec, then allow Rust to drop the value&quot;</i> - Is this doable in Rust? Can you return the <i>same</i> pointer from Python and allow Rust to catch the <i>same</i> and drop it?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1435064365, "last_edit_date": 1495540053, "creation_date": 1435021043, "answer_id": 30992210, "question_id": 30984688, "link": "https://stackoverflow.com/questions/30984688/convert-rust-vector-of-tuples-to-a-c-compatible-structure/30992210#30992210", "title": "Convert Rust vector of tuples to a C compatible structure", "body": "<p>The most important thing to note is that there is <strong>no such thing</strong> as a tuple in C. C is the <em>lingua franca</em> of library interoperability, and you will be required to restrict yourself to abilities of this language. It doesn't matter if you are talking between Rust and another high-level language; you have to speak C.</p>\n\n<p>There may not be tuples in C, but there are <code>struct</code>s. A two-element tuple is just a struct with two members! </p>\n\n<p>Let's start with the C code that we would write:</p>\n\n<pre class=\"lang-C prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\ntypedef struct {\n  uint32_t a;\n  uint32_t b;\n} tuple_t;\n\ntypedef struct {\n  void *data;\n  size_t len;\n} array_t;\n\nextern array_t convert_vec(array_t lat, array_t lon);\n\nint main() {\n  uint32_t lats[3] = {0, 1, 2};\n  uint32_t lons[3] = {9, 8, 7};\n\n  array_t lat = { .data = lats, .len = 3 };\n  array_t lon = { .data = lons, .len = 3 };\n\n  array_t fixed = convert_vec(lat, lon);\n  tuple_t *real = fixed.data;\n\n  for (int i = 0; i &lt; fixed.len; i++) {\n    printf(\"%d, %d\\n\", real[i].a, real[i].b);\n  }\n\n  return 0;\n}\n</code></pre>\n\n<p>We've defined two <code>struct</code>s \u2014 one to represent our tuple, and another to represent an array, as we will be passing those back and forth a bit.</p>\n\n<p>We will follow this up by defining the <em>exact same</em> structs in Rust and define them to have the <em>exact same</em> members (types, ordering, names). Importantly, we use <code>#[repr(C)]</code> to let the Rust compiler know to not do anything funky with reordering the data.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate libc;\n\nuse std::slice;\nuse std::mem;\n\n#[repr(C)]\npub struct Tuple {\n    a: libc::uint32_t,\n    b: libc::uint32_t,\n}\n\n#[repr(C)]\npub struct Array {\n    data: *const libc::c_void,\n    len: libc::size_t,\n}\n\nimpl Array {\n    unsafe fn as_u32_slice(&amp;self) -&gt; &amp;[u32] {\n        assert!(!self.data.is_null());\n        slice::from_raw_parts(self.data as *const u32, self.len as usize)\n    }\n\n    fn from_vec&lt;T&gt;(mut vec: Vec&lt;T&gt;) -&gt; Array {\n        // Important to make length and capacity match\n        // A better solution is to track both length and capacity\n        vec.shrink_to_fit();\n\n        let array = Array { data: vec.as_ptr() as *const libc::c_void, len: vec.len() as libc::size_t };\n\n        // Whee! Leak the memory, and now the raw pointer (and\n        // eventually C) is the owner.\n        mem::forget(vec);\n\n        array\n    }\n}\n\n#[no_mangle]\npub extern fn convert_vec(lon: Array, lat: Array) -&gt; Array {\n    let lon = unsafe { lon.as_u32_slice() };\n    let lat = unsafe { lat.as_u32_slice() };\n\n    let vec =\n        lat.iter().zip(lon.iter())\n        .map(|(&amp;lat, &amp;lon)| Tuple { a: lat, b: lon })\n        .collect();\n\n    Array::from_vec(vec)\n}\n</code></pre>\n\n<p>We must <em>never</em> accept or return non-<code>repr(C)</code> types across the FFI boundary, so we pass across our <code>Array</code>. Note that there's a good amount of <code>unsafe</code> code, as we have to convert an unknown pointer to data (<code>c_void</code>) to a specific type. That's the price of being generic in C world.</p>\n\n<p>Let's turn our eye to Python now. Basically, we just have to mimic what the C code did:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import ctypes\n\nclass FFITuple(ctypes.Structure):\n    _fields_ = [(\"a\", ctypes.c_uint32),\n                (\"b\", ctypes.c_uint32)]\n\nclass FFIArray(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_void_p),\n                (\"len\", ctypes.c_size_t)]\n\n    # Allow implicit conversions from a sequence of 32-bit unsigned\n    # integers.\n    @classmethod\n    def from_param(cls, seq):\n        return cls(seq)\n\n    # Wrap sequence of values. You can specify another type besides a\n    # 32-bit unsigned integer.\n    def __init__(self, seq, data_type = ctypes.c_uint32):\n        array_type = data_type * len(seq)\n        raw_seq = array_type(*seq)\n        self.data = ctypes.cast(raw_seq, ctypes.c_void_p)\n        self.len = len(seq)\n\n# A conversion function that cleans up the result value to make it\n# nicer to consume.\ndef void_array_to_tuple_list(array, _func, _args):\n    tuple_array = ctypes.cast(array.data, ctypes.POINTER(FFITuple))\n    return [tuple_array[i] for i in range(0, array.len)]\n\nlib = ctypes.cdll.LoadLibrary(\"./target/debug/libtupleffi.dylib\")\n\nlib.convert_vec.argtypes = (FFIArray, FFIArray)\nlib.convert_vec.restype = FFIArray\nlib.convert_vec.errcheck = void_array_to_tuple_list\n\nfor tupl in lib.convert_vec([1,2,3], [9,8,7]):\n    print tupl.a, tupl.b\n</code></pre>\n\n<p>Forgive my rudimentary Python. <s>I'm sure an experienced Pythonista could make this look a lot prettier!</s> Thanks to @eryksun for <a href=\"https://stackoverflow.com/questions/30984688/convert-rust-vector-of-tuples-to-a-c-compatible-structure/30992210#comment50015596_30992210\">some nice advice</a> on how to make the consumer side of  calling the method <strong>much</strong> nicer. </p>\n\n<h1>A word about ownership and memory leaks</h1>\n\n<p>In this example code, we've leaked the memory allocated by the <code>Vec</code>. Theoretically, the FFI code now owns the memory, but realistically, it can't do anything useful with it. To have a fully correct example, you'd need to add another method that would accept the pointer back from the callee, transform it back into a <code>Vec</code>, then allow Rust to drop the value. This is the only safe way, as Rust is almost guaranteed to use a different memory allocator than the one your FFI language is using.</p>\n\n<blockquote>\n  <p>Not sure whether I should be returning a reference and how I would have to annotate the function with the appropriate lifetime specifier if I did</p>\n</blockquote>\n\n<p>No, you don't want to (read: <em>can't</em>) return a reference. If you could, then the ownership of the item would end with the function call, and the reference would point to nothing. This is why we need to do the two-step dance with <code>mem::forget</code> and returning a raw pointer.</p>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1703, "favorite_count": 4, "accepted_answer_id": 30992210, "answer_count": 1, "score": 17, "last_activity_date": 1435495879, "creation_date": 1434989037, "last_edit_date": 1495541906, "question_id": 30984688, "link": "https://stackoverflow.com/questions/30984688/convert-rust-vector-of-tuples-to-a-c-compatible-structure", "title": "Convert Rust vector of tuples to a C compatible structure", "body": "<p>Following <a href=\"https://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function?lq=1\">these</a> <a href=\"https://stackoverflow.com/questions/29182843/pass-a-c-array-to-a-rust-function\">answers</a>, I've currently defined a Rust 1.0 function as follows, in order to be callable from Python using <code>ctypes</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::vec;\n\nextern crate libc;\nuse libc::{c_int, c_float, size_t};\nuse std::slice;\n\n#[no_mangle]\npub extern fn convert_vec(input_lon: *const c_float, \n                          lon_size: size_t, \n                          input_lat: *const c_float, \n                          lat_size: size_t) -&gt; Vec&lt;(i32, i32)&gt; {\n    let input_lon = unsafe {\n        slice::from_raw_parts(input_lon, lon_size as usize)\n    };\n    let input_lat = unsafe {\n        slice::from_raw_parts(input_lat, lat_size as usize)\n    };\n\n    let combined: Vec&lt;(i32, i32)&gt; = input_lon\n        .iter()\n        .zip(input_lat.iter())\n        .map(|each| convert(*each.0, *each.1))\n        .collect();\n    return combined\n}\n</code></pre>\n\n<p>And I'm setting up the Python part like so:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>from ctypes import *\n\nclass Int32_2(Structure):\n    _fields_ = [(\"array\", c_int32 * 2)]\n\nrust_bng_vec = lib.convert_vec_py\nrust_bng_vec.argtypes = [POINTER(c_float), c_size_t, \n                         POINTER(c_float), c_size_t]\nrust_bng_vec.restype = POINTER(Int32_2)\n</code></pre>\n\n<p>This seems to be OK, but I'm:</p>\n\n<ul>\n<li>Not sure how to transform <code>combined</code> (a <code>Vec&lt;(i32, i32)&gt;</code>) to a C-compatible structure, so it can be returned to my Python script.</li>\n<li>Not sure whether I should be returning a reference (<code>return &amp;combined</code>?) and how I would have to annotate the function with the appropriate lifetime specifier if I did</li>\n</ul>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 2, "creation_date": 1434975560, "post_id": 30979334, "comment_id": 49989770, "body": "No, it&#39;s not safe in general!"}], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434977704, "post_id": 30979632, "comment_id": 49991343, "body": "Well I also wanted to guarantee that any <code>&amp;mut [T]</code> produced from <code>Vec</code> would have correct length and won&#39;t cause out of bounds errors."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434980455, "post_id": 30979632, "comment_id": 49993252, "body": "@DanielFath sorry, I had not seen the last part of your question."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434988875, "post_id": 30979632, "comment_id": 49999277, "body": "@DanielFath I&#39;m still not sure if I understand your question... unless you use unsafe code somewhere, references in Rust already maintain the information about the length of the vec (so you should have no out of bound errors)"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434990107, "post_id": 30979632, "comment_id": 50000066, "body": "Here is what I was doing <a href=\"http://is.gd/U0VXtU\" rel=\"nofollow noreferrer\">is.gd/U0VXtU</a> Without <code>set_len</code> the thing would panic. And I needed the offsets."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434992164, "post_id": 30979632, "comment_id": 50001301, "body": "@DanielFath well, you ARE doing something unsafe... :) In that case AFAIK the set_length &quot;forces&quot; the destination vector to be seen as already containing 10 elements, as ptr::copy apparently iterates on length, not capacity"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434992470, "post_id": 30979632, "comment_id": 50001472, "body": "From what @ker said its not unsafe unless I go outside what was copied, i.e. if I read uninitialized memory."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1434992752, "post_id": 30979632, "comment_id": 50001651, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/81204/discussion-between-daniel-fath-and-paolo-falabella\">continue this discussion in chat</a>."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 1, "last_activity_date": 1434974892, "creation_date": 1434974892, "answer_id": 30979632, "question_id": 30979334, "link": "https://stackoverflow.com/questions/30979334/safety-of-set-len-operation-on-vec-with-predefined-capacity/30979632#30979632", "title": "Safety of set_len operation on Vec, with predefined capacity", "body": "<p>If by \"I need my Vector to be of size N\" you mean you need memory to be allocated for 10 elements, <code>with_capacity</code> is already doing that.</p>\n\n<p>If you mean you want to have a vector with length 10 (not sure why you would, though...) you need to initialize it with an initial value.\ni.e.:</p>\n\n<pre><code>let mut temp: Vec&lt;i32&gt; = Vec::with_capacity(10); // allocate room in memory for \n                                            // 10 elements. The vector has \n                                            // initial capacity 10, length will be the \n                                            // number of elements you push into it\n                                            // (initially 0)\nv.push(1); // now length is 1, capacity still 10\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>let mut v: Vec&lt;i32&gt; = vec![0; 10]; // create a vector with 10 elements\n                                   // initialized to 0. You can mutate\n                                   // those in place later.\n                                   // At this point, length = capacity = 10\n\nv[0] = 1; // mutating first element to 1.\n          // length and capacity are both still 10\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1434977457, "post_id": 30979689, "comment_id": 49991167, "body": "It&#39;s not so much I&#39;m avoid instructions as to not having to constrain my types to be <code>Clone</code>, which <code>vec!</code> macro requires."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434975043, "creation_date": 1434975043, "answer_id": 30979689, "question_id": 30979334, "link": "https://stackoverflow.com/questions/30979334/safety-of-set-len-operation-on-vec-with-predefined-capacity/30979689#30979689", "title": "Safety of set_len operation on Vec, with predefined capacity", "body": "<p>The docs are just a little ambiguously stated. The wording could be better. Your code example is as \"safe\" as the following stack-equivalent:</p>\n\n<pre><code>let mut arr: [T; N] = mem::uninitialized();\n</code></pre>\n\n<p>Which means that as long as you write to an element of the array before reading it you are fine. If you read before writing, you open the door to <a href=\"http://catb.org/jargon/html/N/nasal-demons.html\" rel=\"noreferrer\">nasal demons</a> and memory unsafety.</p>\n\n<blockquote>\n  <p>I just wanted to avoid clone that vec![0;n] would bring.</p>\n</blockquote>\n\n<p>llvm will optimize this to a single memset.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 572, "favorite_count": 0, "accepted_answer_id": 30979689, "answer_count": 2, "score": 3, "last_activity_date": 1434985261, "creation_date": 1434973934, "last_edit_date": 1434985261, "question_id": 30979334, "link": "https://stackoverflow.com/questions/30979334/safety-of-set-len-operation-on-vec-with-predefined-capacity", "title": "Safety of set_len operation on Vec, with predefined capacity", "body": "<p>Is it safe to call <code>set_len</code> on <code>Vec</code> that has declared capacity? Like this:</p>\n\n<pre><code>let vec = unsafe {\n    let temp = Vec::with_capacity(N);\n    temp.set_len(N);\n    temp\n}\n</code></pre>\n\n<p>I need my Vector to be of size N before any elements are to be added.</p>\n\n<p>Looking at docs:  </p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/collections/vec/struct.Vec.html#capacity-and-reallocation\" rel=\"nofollow\">https://doc.rust-lang.org/collections/vec/struct.Vec.html#capacity-and-reallocation</a></li>\n<li><a href=\"https://doc.rust-lang.org/collections/vec/struct.Vec.html#method.with_capacity\" rel=\"nofollow\">https://doc.rust-lang.org/collections/vec/struct.Vec.html#method.with_capacity</a></li>\n<li><a href=\"https://doc.rust-lang.org/collections/vec/struct.Vec.html#method.set_len\" rel=\"nofollow\">https://doc.rust-lang.org/collections/vec/struct.Vec.html#method.set_len</a></li>\n</ul>\n\n<p>I'm a bit confused. Docs say that <code>with_capacity</code> doesn't change length and <code>set_len</code> says that caller must insure vector has proper length. So is this safe?</p>\n\n<p>The reason I need this is because I was looking for a way to declare a mutable buffer (<code>&amp;mut [T]</code>) of size N and <code>Vec</code> seems to fit the bill the best. I just wanted to avoid having my types implement Clone that <code>vec![0;n]</code> would bring.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434985283, "post_id": 30978056, "comment_id": 49996824, "body": "&quot;<i>but I can&#39;t get it to work</i>&quot; - please <a href=\"https://stackoverflow.com/posts/30978056/edit\">edit</a> your question to show what you tried and why it doesn&#39;t work. In this case if &quot;not working&quot; was an error like &quot;no text editor installed&quot;, then no amount of code would be able to help you."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1434973544, "post_id": 30978192, "comment_id": 49988512, "body": "The function&#39;s name is... special."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434985207, "post_id": 30978192, "comment_id": 49996753, "body": "@MatthieuM. I agree; it clearly should be <code>open::this</code>!"}, {"owner": {"reputation": 922, "user_id": 1922663, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b62abe78741a1c5c6d2adf8cefe8dace?s=128&d=identicon&r=PG", "display_name": "Ruhrpottpatriot", "link": "https://stackoverflow.com/users/1922663/ruhrpottpatriot"}, "edited": false, "score": 0, "creation_date": 1435053419, "post_id": 30978192, "comment_id": 50027314, "body": "exactly what I needed. Thanks!"}, {"owner": {"user_type": "does_not_exist", "display_name": "user5707327"}, "edited": false, "score": 0, "creation_date": 1536417842, "post_id": 30978192, "comment_id": 91421248, "body": "But that uses <code>xdg-open</code> or some equivalent. Wouldn&#39;t it be more appropriate to use <code>$EDITOR</code> for console based programs?"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1434985165, "last_edit_date": 1434985165, "creation_date": 1434970641, "answer_id": 30978192, "question_id": 30978056, "link": "https://stackoverflow.com/questions/30978056/how-can-i-open-a-file-with-the-standard-text-editor/30978192#30978192", "title": "How can I open a file with the standard text editor?", "body": "<p>You can use the <a href=\"https://crates.io/crates/open\" rel=\"nofollow\"><code>open</code> crate</a>. It supports Windows, OS X and Linux. To open a text-file on your <code>C:</code> drive, you can use</p>\n\n<pre><code>extern crate open;\n\nfn main() {\n    open::that(\"C:\\textfile.txt\");\n}\n</code></pre>\n"}], "owner": {"reputation": 922, "user_id": 1922663, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b62abe78741a1c5c6d2adf8cefe8dace?s=128&d=identicon&r=PG", "display_name": "Ruhrpottpatriot", "link": "https://stackoverflow.com/users/1922663/ruhrpottpatriot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 502, "favorite_count": 1, "accepted_answer_id": 30978192, "answer_count": 1, "score": 0, "last_activity_date": 1434985273, "creation_date": 1434970178, "last_edit_date": 1434985273, "question_id": 30978056, "link": "https://stackoverflow.com/questions/30978056/how-can-i-open-a-file-with-the-standard-text-editor", "title": "How can I open a file with the standard text editor?", "body": "<p>My console based program has a config file which can be opened and edited in a text editor.</p>\n\n<p>How would I open said config file with the default text editor? I know there is <code>std::process</code>, but I can't get it to work.</p>\n\n<p>The program should be able to run on Windows, OS X and Linux systems.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1568211451, "last_edit_date": 1568211451, "creation_date": 1434969701, "answer_id": 30977891, "question_id": 30977752, "link": "https://stackoverflow.com/questions/30977752/how-can-i-remove-duplicates-from-a-vector-of-custom-structs/30977891#30977891", "title": "How can I remove duplicates from a vector of custom structs?", "body": "<p>If you look at the documentation for <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup\" rel=\"nofollow noreferrer\"><code>Vec::dedup</code></a>, you'll note that it's in a little section marked by the following:</p>\n\n<pre><code>impl&lt;T&gt; Vec&lt;T&gt;\nwhere\n    T: PartialEq&lt;T&gt;, \n</code></pre>\n\n<p>This means that the methods below it exist <em>only</em> when the given constraints are satisfied.  In this case, <code>dedup</code> isn't there because <code>User</code> doesn't implement the <code>PartialEq</code> trait. Newer compiler errors even state this explicitly:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   = note: the method `dedup` exists but the following trait bounds were not satisfied:\n           `User : std::cmp::PartialEq`\n</code></pre>\n\n<p>In this particular case, you can derive <code>PartialEq</code>:</p>\n\n<pre><code>#[derive(PartialEq)]\nstruct User { /* ... */ }\n</code></pre>\n\n<p>It's generally a good idea to derive all applicable traits; it would probably be a good idea to <em>also</em> derive <code>Eq</code>, <code>Clone</code> and <code>Debug</code>.</p>\n\n<blockquote>\n  <p>How can I remove duplicates from <code>users</code> by <code>email</code> values?</p>\n</blockquote>\n\n<p>You can use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by\" rel=\"nofollow noreferrer\"><code>Vec::dedup_by</code></a>:</p>\n\n<pre><code>users.dedup_by(|a, b| a.email == b.email);\n</code></pre>\n\n<p>In other cases, you might be able to use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by_key\" rel=\"nofollow noreferrer\"><code>Vec::dedup_by_key</code></a></p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1537, "favorite_count": 2, "accepted_answer_id": 30977891, "answer_count": 1, "score": 4, "last_activity_date": 1568212112, "creation_date": 1434969298, "last_edit_date": 1568212112, "question_id": 30977752, "link": "https://stackoverflow.com/questions/30977752/how-can-i-remove-duplicates-from-a-vector-of-custom-structs", "title": "How can I remove duplicates from a vector of custom structs?", "body": "<p>I'm trying to remove duplicates in the below example:</p>\n\n<pre><code>struct User {\n    reference: String,\n    email: String,\n}\n\nfn main() {\n    let mut users: Vec&lt;User&gt; = Vec::new();\n    users.push(User {\n        reference: \"abc\".into(),\n        email: \"test@test.com\".into(),\n    });\n    users.push(User {\n        reference: \"def\".into(),\n        email: \"test@test.com\".into(),\n    });\n    users.push(User {\n        reference: \"ghi\".into(),\n        email: \"test1@test.com\".into(),\n    });\n\n    users.sort_by(|a, b| a.email.cmp(&amp;b.email));\n    users.dedup();\n}\n</code></pre>\n\n<p>I'm getting the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `dedup` found for type `std::vec::Vec&lt;User&gt;` in the current scope\n  --&gt; src/main.rs:23:11\n   |\n23 |     users.dedup();\n   |           ^^^^^\n   |\n</code></pre>\n\n<p>How can I remove duplicates from <code>users</code> by <code>email</code> values? Can I implement the <code>dedup()</code> function for <code>struct User</code> or do I have to do something else?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1434963306, "post_id": 30975536, "comment_id": 49982335, "body": "<b>For Duration you can use the time crate on crates.io by adding it to the dependencies in your Cargo.toml.</b> - that&#39;s what I&#39;m doing as you can see  --&gt; <code>use std::time::duration::Duration;</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1434963563, "post_id": 30975536, "comment_id": 49982497, "body": "oh, I shouldn&#39;t use <code>std::time::duration::Duration</code>, right? But doesn&#39;t the crate <code>time</code> contain std::time::duration::Duration?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1434963690, "post_id": 30975536, "comment_id": 49982565, "body": "you should <code>use time::duration::Duration;</code>, otherwise you&#39;re still referencing the deprecated Duration in std"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 2, "last_activity_date": 1434962699, "creation_date": 1434962699, "answer_id": 30975536, "question_id": 30975088, "link": "https://stackoverflow.com/questions/30975088/use-of-unstable-library-feature-how-can-i-fix-those/30975536#30975536", "title": "use of unstable library feature - how can I fix those?", "body": "<p>I'm assuming you're using Rust stable. In that case unstable features can't be enabled.</p>\n\n<p>For <code>Duration</code> you can use the <a href=\"https://crates.io/crates/time\" rel=\"nofollow\">time crate on crates.io</a> by adding it to the dependencies in your Cargo.toml.</p>\n\n<p>In the other cases, you should be able to simply use <code>&amp;aaa</code> and <code>&amp;bbb</code> respectively to get slices out of Vec or String.\ne.g.</p>\n\n<pre><code>let b = String::from(\"foo\"); // b is a String\nlet c: &amp;str = &amp;b; // c expects a &amp;str; b is automatically dereferenced\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7697, "favorite_count": 1, "accepted_answer_id": 30975536, "answer_count": 1, "score": 5, "last_activity_date": 1434962699, "creation_date": 1434961254, "last_edit_date": 1434961583, "question_id": 30975088, "link": "https://stackoverflow.com/questions/30975088/use-of-unstable-library-feature-how-can-i-fix-those", "title": "use of unstable library feature - how can I fix those?", "body": "<p>I got a bunch of errors again:</p>\n\n<pre><code>$ cargo build\nerror: use of unstable library feature 'std_misc'\nuse std::time::duration::Duration;\n                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: use of unstable library feature 'convert': waiting on RFC revision\nlet my_let1 = aaa(bbb.as_str(), ccc, ddd.eee);\n                                                        ^~~~~~~~\nerror: use of unstable library feature 'convert': waiting on RFC revision\nlet let1 = aaa.as_slice();\n                                             ^~~~~~~~~~\nerror: use of unstable library feature 'convert': waiting on RFC revision\nlet let1 = str::from_utf8(aaa.as_slice()).unwrap();\n                                                ^~~~~~~~~~\n</code></pre>\n\n<p>How to solve them? What does it mean: <code>add #![feature(collections)] to the crate attributes to enable</code> - what crates? I don't have the source code of my crates. How would other people compile my library on their machines then?</p>\n\n<p>And oddly enough this also throws an error:</p>\n\n<pre><code>src/lib.rs:1:1: 1:31 error: unstable feature\nsrc/lib.rs:1 #![feature(convert, std_misc)]\n</code></pre>\n\n<p>when I add it at the top my library.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434960238, "post_id": 30974593, "comment_id": 49980640, "body": "actually the error is now in the next line, not in the line you added the <code>still the error</code> comment"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434963511, "post_id": 30974593, "comment_id": 49982467, "body": "the solution is to implement copy, the question is about &quot;cannot move out of borrowed content&quot;, I think this is very much a duplicate"}], "answers": [{"tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 3, "last_activity_date": 1434961266, "last_edit_date": 1434961266, "creation_date": 1434960376, "answer_id": 30974840, "question_id": 30974593, "link": "https://stackoverflow.com/questions/30974593/cannot-move-out-of-borrowed-content-ref-doesnt-work/30974840#30974840", "title": "cannot move out of borrowed content - ref doesn&#39;t work", "body": "<h1>Short answer</h1>\n\n<p>The function <code>fn2</code> receives a <em>reference</em> to a <code>MyEnum1</code> as a parameter, but the <code>Struct1</code> contains an <em>owned</em> <code>MyEnum1</code>. This means that you are actually trying to turn a reference into an owned value, which is only possible if you copy the data.</p>\n\n<h1>Long answer</h1>\n\n<p>Your code would work if <code>MyEnum1</code> implemented the <code>Copy</code> trait (which in turn requires implementing the <code>Clone</code> trait). If a type implements <code>Copy</code>, it will be automatically copied when you dereference it and when you assign it (for example, the <code>i32</code> type in the standard library implements <code>Copy</code>). Try something like the following:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nenum MyEnum1 {\n  val1, \n  val2\n}\n</code></pre>\n\n<p>You may also choose to implement only <code>Clone</code> and clone the object explicitly, in case your data structure is expensive to copy (for example, the <code>String</code> struct in the standard library implements <code>Clone</code> but not <code>Copy</code>). Then you would need to use the following code:</p>\n\n<pre><code>#[derive(Clone)]\nenum MyEnum1 {\n  val1, \n  val2\n}\n\nfn fn2(a: &amp;MyEnum1) {\n  let s = Struct1 { field1: a.clone(), field2: \"fdsfds\".to_string() };\n}\n</code></pre>\n\n<p>Finally, you may also choose to pass the <code>MyEnum1</code> by value, instead of by reference. Then, the only change you need to apply is:</p>\n\n<pre><code>fn fn1(a: Struct1, b: String, c: String) {\n  let let1 = fn2(a.field1);\n}\n\nfn fn2(a: MyEnum1) {\n  let s = Struct1 { field1: a, field2: \"fdsfds\".to_string() };\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 513, "favorite_count": 0, "closed_date": 1434985017, "accepted_answer_id": 30974840, "answer_count": 1, "score": 2, "last_activity_date": 1434961266, "creation_date": 1434959414, "question_id": 30974593, "link": "https://stackoverflow.com/questions/30974593/cannot-move-out-of-borrowed-content-ref-doesnt-work", "closed_reason": "Duplicate", "title": "cannot move out of borrowed content - ref doesn&#39;t work", "body": "<p>I have this code:</p>\n\n<pre><code>enum MyEnum1 {\n  val1, \n  val2\n}\n\nstruct Struct1 { \n  field1: MyEnum1,\n  field2: String\n}\n\nfn fn1(a: Struct1, b: String, c: String) {\n  let let1 = fn2(&amp;a.field1);\n}\n\n\nfn fn2(a: &amp;MyEnum1) {\n  let a11 = *a; // error\n  let s = Struct1 { field1: a11, field2: \"fdsfds\".to_string() };\n}\n\nfn main() {\n    println!(\"Hello World!\");\n}\n</code></pre>\n\n<p>The error is  error: <strong>cannot move out of borrowed content</strong></p>\n\n<p>I was suggested by the compiler to use <code>ref</code> or <code>ref mut</code>, I tried to use them and still that didn't help.</p>\n\n<pre><code>fn fn2(a: &amp;MyEnum1) {\n  let ref a11 = *a; // still the error\n  let s = Struct1 { field1: *a11, field2: \"fdsfds\".to_string() };\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434953308, "post_id": 30972695, "comment_id": 49977349, "body": "your code produces different errors than you describe, please provide a working example"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1434953367, "post_id": 30972695, "comment_id": 49977370, "body": "Your code is inconsistent. <code>fn3</code> declaration does not agree with how it is invoked. This code would give you type errors, not ownership ones. Please make your code <a href=\"http://stackoverflow.com/help/mcve\">a compilable example</a>."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1434958091, "post_id": 30973100, "comment_id": 49979595, "body": "Thanks, that&#39;s what I need. One thing: how do I derefence <code>e</code> in <code>fn use_myenum(e: &amp;MyEnum1)</code> - convert from a pointer to a &quot;normal&quot; MyEnum1?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1434958424, "post_id": 30973100, "comment_id": 49979755, "body": "Because when I&#39;m trying  to use <code>*e</code> I get &quot;error: cannot move out of borrowed content&quot;"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434960155, "post_id": 30973100, "comment_id": 49980599, "body": "even if this is the answer you were looking for, it would still be great if you updated your question to include a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1435000987, "post_id": 30973100, "comment_id": 50006192, "body": "@jawanam, you can&#39;t just write <code>*e</code> and get the value of the enum because it is not copyable. You can match on the enum variant, it can be done if you don&#39;t move any values out of the variant: <code>match *e { MyEnum1::Variant1 =&gt; { ... } MyEnum1::Variant2(ref x, _) =&gt; { ... }</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1435001038, "post_id": 30973100, "comment_id": 50006225, "body": "@jawanam, or, if you can make the enum copyable (with <code>#[derive(Copy, Clone)]</code>, for example), then writing <code>*e</code> will just work."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1434953507, "creation_date": 1434953507, "answer_id": 30973100, "question_id": 30972695, "link": "https://stackoverflow.com/questions/30972695/error-use-of-moved-value-should-i-use-or-mut-or-something-else/30973100#30973100", "title": "error: use of moved value - should I use &quot;&amp;&quot; or &quot;mut&quot; or something else?", "body": "<p>These errors come from the most important concept in Rust - ownership. You should read <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow\">the official book</a>, especially the chapter on <a href=\"http://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">ownership</a> - this would help you understand \"how tho fix this kind of errors\".</p>\n\n<p>In short, specifically in your code, the problem is that <code>String</code> is a non-copyable type, that is, <code>String</code> values are not copied when passed to functions or assigned to local variables, they are <em>moved</em>. This means that wherever they were before, they are not accessible from there anymore.</p>\n\n<p>Let's look at your function:</p>\n\n<pre><code>enum MyEnum1 {\n  //....\n}\n\nstruct Struct1 { \n  field1: MyEnum1,\n  field2: String\n}\n\nfn fn1(a: Struct1, b: String, c: String) -&gt; String {\n  let let1 = fn2(a.field1);\n  let let2 = fn3(let1, b, c);\n  format!(\"{} something 123 {}\", let1, let2)\n}\n\nfn fn2(a: MyEnum1) -&gt; String {\n  //....   \n}\n</code></pre>\n\n<p>All types here are not automatically copyable (they don't implement <code>Copy</code> trait). <code>String</code> is not copyable because it is a heap-allocated string and copying would need a fresh allocation (an expensive operation which better be not implicit), <code>MyEnum1</code> is not copyable because it does not implement <code>Copy</code> (with <code>#[deriving(Copy, Clone)]</code>, for example; and it is unclear if it can be made copyable because you didn't provide its variants), and <code>Struct1</code> is not copyable because it contains non-copyable types.</p>\n\n<p>In <code>fn1</code> you invoke <code>fn2</code>, passing it <code>field1</code> and getting a <code>String</code> back. Then you immediately passes this <code>String</code> to <code>fn3</code>. Because <code>String</code> is not copyable, whatever is stored in <code>let1</code> is <em>moved</em> into the called function, making <code>let1</code> inaccessible. This is what \"use of moved value\" error is about. (The code you provided can't cause \"use of moved value: <code>a.field1</code>\" error, so it probably came from the parts you omitted, but the basic idea is absolutely the same)</p>\n\n<p>There are several ways to fix these errors, but the most natural and common one is indeed to use borrowed references. In general if you only want to read some non-copyable value in a function you should pass it there by reference:</p>\n\n<pre><code>fn use_myenum(e: &amp;MyEnum1)\n</code></pre>\n\n<p>For strings and arrays, however, the better way would be to pass slices:</p>\n\n<pre><code>fn use_str(s: &amp;str) { ... }\n\nlet s: String = ...;\nuse_str(&amp;s);  // here &amp;String is automatically converted to &amp;str\n</code></pre>\n\n<p>You can find more on slices in the book, <a href=\"http://doc.rust-lang.org/book/strings.html\" rel=\"nofollow\">here</a>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 176, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1434953507, "creation_date": 1434951310, "question_id": 30972695, "link": "https://stackoverflow.com/questions/30972695/error-use-of-moved-value-should-i-use-or-mut-or-something-else", "title": "error: use of moved value - should I use &quot;&amp;&quot; or &quot;mut&quot; or something else?", "body": "<p>My code:</p>\n\n<pre><code>enum MyEnum1 {\n  //....\n}\n\nstruct Struct1 { \n  field1: MyEnum1,\n  field2: String\n}\n\nfn fn1(a: Struct1, b: String, c: String) -&gt; String {\n  let let1 = fn2(a.field1);\n  let let2 = fn3(let1, b, c);\n  format!(\"{} something 123 {}\", let1, let2)\n}\n\n\nfn fn2(a: MyEnum1) -&gt; String {\n  //....   \n}\n\nfn fn3(a: MyEnum1, b: Struct1) -&gt; String {\n  //....   \n}\n\n\nerror: use of moved value: `a.field1`\nerror: use of moved value: `let1`\n</code></pre>\n\n<p>How can I fix them? Should I add <code>&amp;</code> to the parameters of 'fn2<code>and</code>fn3<code>? Or</code>mut`? I can't understand the idea of how to fix these kind of errors.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 8, "last_activity_date": 1517968918, "last_edit_date": 1517968918, "creation_date": 1434947794, "answer_id": 30972190, "question_id": 30972047, "link": "https://stackoverflow.com/questions/30972047/type-must-be-known-in-this-context-when-using-iteratorcollect/30972190#30972190", "title": "Type must be known in this context when using Iterator::collect", "body": "<p>On an iterator, <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\">the <code>collect</code> method</a> can produce many types of collections:</p>\n\n<pre><code>fn collect&lt;B&gt;(self) -&gt; B\nwhere\n    B: FromIterator&lt;Self::Item&gt;, \n</code></pre>\n\n<p>Types that implement <code>FromIterator</code> include <code>Vec</code>, <code>String</code> and <a href=\"http://doc.rust-lang.org/std/iter/trait.FromIterator.html#implementors\" rel=\"nofollow noreferrer\">many more</a>. Because there are so many possibilities, something needs to constrain the result type. You can specify the type with something like <code>.collect::&lt;Vec&lt;_&gt;&gt;()</code> or <code>let something: Vec&lt;_&gt; = some_iter.collect()</code>. </p>\n\n<p>Until the type is known, you cannot call the method <code>len()</code> because it's impossible to know if an unknown type has a specific method.</p>\n\n<hr>\n\n<p>If you\u2019re purely wanting to find out how many items there are in an iterator, use <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count\" rel=\"nofollow noreferrer\"><code>Iterator.count()</code></a>; creating a vector for the purpose is rather inefficient.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2989, "favorite_count": 1, "accepted_answer_id": 30972190, "answer_count": 1, "score": 5, "last_activity_date": 1517968918, "creation_date": 1434946468, "last_edit_date": 1517968634, "question_id": 30972047, "link": "https://stackoverflow.com/questions/30972047/type-must-be-known-in-this-context-when-using-iteratorcollect", "title": "Type must be known in this context when using Iterator::collect", "body": "<p>I want to get a length of a string which I've split:</p>\n\n<pre><code>fn fn1(my_string: String) -&gt; bool {\n    let mut segments = my_string.split(\".\");\n    segments.collect().len() == 55\n}\n\nfn main() {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0619]: the type of this value must be known in this context\n --&gt; src/main.rs:3:5\n  |\n3 |     segments.collect().len() == 55\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>How can I fix that error?</p>\n"}, {"tags": ["pattern-matching", "rust", "unwrap"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434984932, "post_id": 30971800, "comment_id": 49996554, "body": "I&#39;m voting to close this question as off-topic because it better belongs on <a href=\"http://codereview.stackexchange.com/\">Code Review</a>, which is for questions to &quot;<i>Improve code that you wrote or maintain, through peer review.</i>&quot; Please note that the submission guidelines on Code Review are a bit different, so double check them before just copy-and-pasting your question."}, {"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435028802, "post_id": 30971800, "comment_id": 50015710, "body": "I think it&#39;s borderline since there is a specific question implied in the question, but I won&#39;t argue.  I&#39;ve reposted at: <a href=\"http://codereview.stackexchange.com/questions/94408/recursively-pop-the-last-node-from-a-singly-linked-list\" title=\"recursively pop the last node from a singly linked list\">codereview.stackexchange.com/questions/94408/&hellip;</a>  There were some minor edits to fit Code Review better, and also it doesn&#39;t have the pattern-matching tag since that tag doesn&#39;t exist over there and I don&#39;t have enough rep to create it."}], "answers": [{"comments": [{"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 1, "creation_date": 1435028859, "post_id": 30978014, "comment_id": 50015730, "body": "At Shepmaster&#39;s behest, I&#39;ve reposted this question on Code Review at <a href=\"http://codereview.stackexchange.com/questions/94408/recursively-pop-the-last-node-from-a-singly-linked-list\" title=\"recursively pop the last node from a singly linked list\">codereview.stackexchange.com/questions/94408/&hellip;</a> .  Please repost your answer there so I can give you credit for it."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 1, "last_activity_date": 1434970049, "creation_date": 1434970049, "answer_id": 30978014, "question_id": 30971800, "link": "https://stackoverflow.com/questions/30971800/can-this-unwrap-pattern-matching-code-be-made-more-clear-idiomatic/30978014#30978014", "title": "Can this unwrap/pattern matching code be made more clear/idiomatic?", "body": "<p>Due to the <code>Box</code>, pattern matching with boxes is messy on stable. If you are willing to use nightly until box patterns are stabilized, you can rewrite your <code>pop_back</code> function (instead of just the <code>pop_last_node</code> function):</p>\n\n<pre><code>pub fn pop_back(&amp;mut self) -&gt; Result&lt;T, LinkedListError&gt; {\n    fn pop_last_node&lt;T&gt;(node: &amp;mut NodePtr&lt;T&gt;) -&gt; Option&lt;T&gt; {\n        match node.take() {\n            None =&gt; None,\n            // is a leaf\n            Some(box Node { next: None, data }) =&gt; Some(data),\n            Some(mut this) =&gt; {\n                // recurse\n                let ret = pop_last_node(&amp;mut this.next);\n                // put this subnode back, since it's not a leaf\n                *node = Some(this);\n                ret\n            }\n        }\n    }\n    pop_last_node(&amp;mut self.head).ok_or(LinkedListError {\n        kind: LinkedListErrorKind::Empty\n    })\n}\n</code></pre>\n\n<p>Try it out in the <a href=\"http://is.gd/LD5OBQ\" rel=\"nofollow\">PlayPen</a></p>\n"}], "owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 733, "favorite_count": 0, "accepted_answer_id": 30978014, "answer_count": 1, "score": 4, "last_activity_date": 1434970049, "creation_date": 1434944360, "question_id": 30971800, "link": "https://stackoverflow.com/questions/30971800/can-this-unwrap-pattern-matching-code-be-made-more-clear-idiomatic", "title": "Can this unwrap/pattern matching code be made more clear/idiomatic?", "body": "<p>I am exploring different ways of implementing a linked list in Rust as a learning project.  In one particular place, I've got some code that works properly, but it makes multiple calls to unwrap--I am under the impression this is generally regarded as unsafe/poor style.  I'd like to make it better.</p>\n\n<p>Here are some relevant definitions, with some unimportant details elided.  Note that it is a singly linked list, with owning <code>next</code> pointers.  These definitions should all be straight-forward and skim-able; I'll separate out the interesting part for ease of reading.</p>\n\n<pre><code>type NodePtr&lt;T&gt; = Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;;\nstruct Node&lt;T&gt; {\n    data: T,\n    next: NodePtr&lt;T&gt;,\n}\npub struct LinkedList&lt;T&gt; {\n    head: NodePtr&lt;T&gt;,\n}\nimpl&lt;T&gt; LinkedList&lt;T&gt; {\n    pub fn pop_back(&amp;mut self) -&gt; Result&lt;T, LinkedListError&gt; {\n        if self.head.is_none() {\n            Err(LinkedListError { kind: LinkedListErrorKind::Empty })\n        } else {\n            Ok(LinkedList::pop_last_node(&amp;mut self.head))\n        }\n    }\n    // definition for pop_last_node coming up shortly...\n}\n</code></pre>\n\n<p>In this particular implementation I'm experimenting with recursive functions, and this is my working version of <code>pop_last_node</code>.</p>\n\n<pre><code>fn pop_last_node(node_ref: &amp;mut NodePtr&lt;T&gt;) -&gt; T {\n    match node_ref.as_ref().unwrap().next {\n        None =&gt; {\n            let old_tail = node_ref.take();\n            old_tail.unwrap().data\n        }\n        _ =&gt; LinkedList::pop_last_node(&amp;mut node_ref.as_mut().unwrap().next)\n    }\n}\n</code></pre>\n\n<p>This is working correctly, but since I'm doing this as a learning experiment, I wanted to see if I could cut down on the unwrap calls and use some more pattern matching.  This part of the experiment did not go as well.</p>\n\n<p>Here is my attempt to do so.  Unfortunately, this version is much more verbose (and confusing!) than the original.  I especially don't like the \"fall through out of this scope before you can do anything\" part, but I haven't been able to come up with an idea on how to make it better.</p>\n\n<pre><code>fn pop_last_node(node_ref: &amp;mut NodePtr&lt;T&gt;) -&gt; T {\n    {\n        let next_node = match node_ref.as_mut() {\n            None =&gt; panic!(\"Error handling will go here...\"),\n            Some(node_box) =&gt; &amp;mut node_box.next,\n        };\n        match *next_node {\n            None =&gt; {\n                // fall through to code below\n            },\n            _ =&gt; {\n                return LinkedList::pop_last_node(next_node)\n            },\n        }\n    }\n    // no sense converting this to a match--the \"None\" case was already checked above\n    node_ref.take().unwrap().data\n}\n</code></pre>\n\n<p>And that's where I am now.  The main question is this: <strong><em>Is there a less crazy way to write the pattern matching version?</em></strong>  Are there significant ways to improve the clarity or idiomatic-ness of either version?</p>\n"}, {"tags": ["rust", "side-effects"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434926436, "post_id": 30969907, "comment_id": 49971592, "body": "The detailed explanation is missing in stable Rust, but available in the nightly channel: <a href=\"https://doc.rust-lang.org/nightly/error-index.html#E0368\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/error-index.html#E0368</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434926387, "post_id": 30970021, "comment_id": 49971582, "body": "The only non-redundant part of my answer is a link to <a href=\"https://github.com/rust-lang/rfcs/pull/953\" rel=\"nofollow noreferrer\">the RFC that would allow implementing the operator assignment methods</a>."}, {"owner": {"reputation": 115, "user_id": 1750545, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5f06fc4f44f5ef4b78925cf037d05efc?s=128&d=identicon&r=PG", "display_name": "hxwalker", "link": "https://stackoverflow.com/users/1750545/hxwalker"}, "edited": false, "score": 0, "creation_date": 1434971475, "post_id": 30970021, "comment_id": 49987176, "body": "Thanks for detailed explanation!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1434926516, "last_edit_date": 1434926516, "creation_date": 1434926281, "answer_id": 30970021, "question_id": 30969907, "link": "https://stackoverflow.com/questions/30969907/how-to-implement-variable-increment-via-side-effect/30970021#30970021", "title": "How to implement variable increment via side effect?", "body": "<p>At present, <code>+=</code> is only defined on the primitive integer types; generically, you will need to expand it to <code>*x = *x + 1;</code> instead. This then reveals more problems:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:4:15: 4:16 error: mismatched types:\n expected `T`,\n    found `_`\n(expected type parameter,\n    found integral variable) [E0308]\n&lt;anon&gt;:4     *x = *x + 1; \n                       ^\n&lt;anon&gt;:4:10: 4:16 error: mismatched types:\n expected `T`,\n    found `&lt;T as core::ops::Add&gt;::Output`\n(expected type parameter,\n    found associated type) [E0308]\n&lt;anon&gt;:4     *x = *x + 1; \n                  ^~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>Let\u2019s look at the <code>Add</code> trait\u2019s definition:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Add&lt;RHS = Self&gt; {\n    /// The resulting type after applying the `+` operator\n    type Output;\n\n    /// The method for the `+` operator\n    fn add(self, rhs: RHS) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>So <code>Self + RHS</code> produces an object of type <code>&lt;Self as Add&lt;RHS&gt;&gt;::Output</code>.</p>\n\n<p>As you\u2019re storing the value back in <code>*x</code>, the result of the calculation must be a <code>T</code>; thus we establish that the bound on <code>T</code> will need to be not <code>Add</code> but <code>Add&lt;<em>???</em>, Output = T&gt;</code>.</p>\n\n<p>What, then, will <code><em>???</em></code> be? What is the type of <code>1</code>? It\u2019s not generic; it\u2019s one of the ten known primitive integer types (<code>isize</code>, <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>usize</code>, <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>). This clearly won\u2019t work, because the integral types don\u2019t implement addition of lesser types\u2014the default value for <code>RHS</code> of <code>Self</code> (that is, where <code>T: Add</code> means <code>T: Add&lt;Self&gt;</code>) is all you can count on, but <code>1</code> cannot be of type <code>T</code>.</p>\n\n<p>The solution is to use a generic function that produces the value <em>1</em>. There is one unstable in <a href=\"http://doc.rust-lang.org/std/num/trait.One.html#tymethod.one\" rel=\"nofollow\"><code>std::num::One</code></a>, and a stable one in the <code>num</code> crate from crates.io, <code>num::One</code>. Using the former requires the Rust nightly, using the latter requires dropping the <code>std::</code>, adding an <code>extern crate num;</code> and adding <code>num</code> to your Cargo.toml dependencies section.</p>\n\n<p>We also need a <code>Copy</code> bound to allow the <code>*x</code> of <code>*x + 1</code> to work.</p>\n\n<p><a href=\"http://is.gd/3HK79e\" rel=\"nofollow\">Here\u2019s the final result:</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(zero_one)]\n\nuse std::ops::Add;\nuse std::num::One;\n\nfn inc&lt;T: Copy + One + Add&lt;T, Output = T&gt;&gt;(x: &amp;mut T) {\n    *x = *x + T::one(); \n}\n\nfn main() {\n    let mut x: i32 = 10;\n    let mut y: u8 = 1;\n    inc(&amp;mut x);\n    inc(&amp;mut y);\n    println!(\"{} {}\", x, y);\n}\n</code></pre>\n"}], "owner": {"reputation": 115, "user_id": 1750545, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5f06fc4f44f5ef4b78925cf037d05efc?s=128&d=identicon&r=PG", "display_name": "hxwalker", "link": "https://stackoverflow.com/users/1750545/hxwalker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3509, "favorite_count": 0, "accepted_answer_id": 30970021, "answer_count": 1, "score": 5, "last_activity_date": 1434926516, "creation_date": 1434925267, "last_edit_date": 1434926471, "question_id": 30969907, "link": "https://stackoverflow.com/questions/30969907/how-to-implement-variable-increment-via-side-effect", "title": "How to implement variable increment via side effect?", "body": "<p>For learning purposes, I tried this solution, but <a href=\"http://is.gd/NHY03w\" rel=\"noreferrer\">it does not work</a>:</p>\n\n<pre><code>use std::ops::Add;\n\nfn inc&lt;T: Add&gt;(x:&amp;mut T) {\n    *x += 1; \n}\n\nfn main() {\n    let mut x:i32 = 10;\n    let mut y:u8 = 1;\n    inc(&amp;mut x);\n    inc(&amp;mut y);\n    println!(\"{} {}\", x, y);\n}\n</code></pre>\n\n<p>Error message:</p>\n\n<pre><code>&lt;anon&gt;:4:5: 4:7 error: binary assignment operation `+=` cannot be applied to types `T` and `_` [E0368]\n&lt;anon&gt;:4     *x += 1; \n             ^~\n&lt;anon&gt;:4:5: 4:7 help: see the detailed explanation for E0368\nerror: aborting due to previous error\n</code></pre>\n\n<p>What is the right way to do that?</p>\n"}, {"tags": ["performance", "memory", "optimization", "rust", "memory-footprint"], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 88, "favorite_count": 0, "closed_date": 1434984714, "answer_count": 0, "score": 2, "last_activity_date": 1434927268, "creation_date": 1434908244, "last_edit_date": 1434922410, "question_id": 30967408, "link": "https://stackoverflow.com/questions/30967408/get-the-current-memory-usage-of-a-variable", "closed_reason": "Duplicate", "title": "Get the current memory usage of a variable?", "body": "<p><em>I'm new to Rust, and this might be a silly question.</em></p>\n\n<p>Is it possible to get the current memory usage of a variable?</p>\n\n<p>I am writing a programme that uses a lot of memory (which I'd expect), and I'd like to reduce its memory footprint. However premature optimisation is the root of all evil, so before I start playing around with refactoring, I'd like to see what is currently using memory. When I make a change, I'd like to see if what I've done has reduced the memory footprint at all.</p>\n\n<p>My current programme has lots of <code>HashMaps</code> and so forth, so that's the sort of objects I want to measure.</p>\n"}, {"tags": ["python", "rust", "ctypes"], "comments": [{"owner": {"reputation": 36413, "user_id": 2301450, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/4xgoZ.png?s=128&g=1", "display_name": "vaultah", "link": "https://stackoverflow.com/users/2301450/vaultah"}, "edited": false, "score": 0, "creation_date": 1434904809, "post_id": 30966886, "comment_id": 49965241, "body": "related? <a href=\"http://stackoverflow.com/questions/30789765/using-rust-returned-array-in-python-using-ctypes\" title=\"using rust returned array in python using ctypes\">stackoverflow.com/questions/30789765/&hellip;</a>"}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 36413, "user_id": 2301450, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/4xgoZ.png?s=128&g=1", "display_name": "vaultah", "link": "https://stackoverflow.com/users/2301450/vaultah"}, "edited": false, "score": 0, "creation_date": 1434905264, "post_id": 30966886, "comment_id": 49965374, "body": "Yep, that works. Can you post it as an answer?"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 45, "favorite_count": 0, "closed_date": 1434922555, "answer_count": 0, "score": 2, "last_activity_date": 1434904739, "creation_date": 1434904739, "question_id": 30966886, "link": "https://stackoverflow.com/questions/30966886/rust-function-called-using-ctypes-only-returns-first-value", "closed_reason": "Duplicate", "title": "Rust function called using ctypes only returns first value", "body": "<p>I have a rust function that looks like so:</p>\n\n<pre><code>#[no_mangle]\npub fn convert(inp_a: f32, inp_b: f32) -&gt; (i32, i32) {\n    // some things happen\n    return (res_a, res_b)\n}\n</code></pre>\n\n<p>This works as expected.</p>\n\n<p>However, if I attempt to call it from Python, like so:</p>\n\n<pre><code>from ctypes import cdll, c_float\nfrom sys import platform\n\nif platform == \"darwin\":\n    ext = \"dylib\"\nelse:\n    ext = \"so\"\n\nlib = cdll.LoadLibrary('target/debug/foreign.' + ext)\nconvert = lib.convert\n\na = -0.32824866\nb = 51.44533267\nprint convert(c_float(a), c_float(b))\n</code></pre>\n\n<p>I only get the first half of the result back, as an <code>int</code>.</p>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["collections", "iterator", "rust", "immutability"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434908595, "post_id": 30967250, "comment_id": 49966384, "body": "as the documentation states, <i>interior mutability is something of a last resort</i>, and I do believe there are other avenues to explore before falling back to cell types"}, {"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434909258, "post_id": 30967250, "comment_id": 49966606, "body": "I fail to see how Cell is a last resort when it has no runtime cost. The choice between using a different approach or using Cell comes down to preference."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1434909842, "post_id": 30967250, "comment_id": 49966752, "body": "The issue is not the runtime-cost, it is the circumvention of Rust&#39;s borrow-check rules, which do not only help protect against memory unsafety, but also against unintended behavior that results from modifying the same memory location in arbitrary locations instead of just where you have a <code>&amp;mut</code> reference. Think about it a little like the <code>mutable</code> keyword on C++ class members. Your non-mutable objects suddenly are allowed to be modified."}, {"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1434911586, "post_id": 30967250, "comment_id": 49967377, "body": "I agree that a Cell should not publicly be exposed to users - but as building block for abstractions it&#39;s perfectly fine."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1434919288, "post_id": 30967250, "comment_id": 49969687, "body": "1) It allows logical errors of multiple writes that may be unwanted 2) It&#39;s only zero cost to an approximation, in reality it will not / may not optimize as well. Subject to changes in llvm and rustc, of course."}, {"owner": {"reputation": 1545, "user_id": 1763669, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b76f89fc7735e31f12d6d71e0af67610?s=128&d=identicon&r=PG&f=1", "display_name": "arnm", "link": "https://stackoverflow.com/users/1763669/arnm"}, "edited": false, "score": 0, "creation_date": 1434920856, "post_id": 30967250, "comment_id": 49970190, "body": "Currently, this is the only answer that answered my original question. Though, as it&#39;s been discussed here, it may not be the safest solution it is a solution to the problem."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 6, "last_activity_date": 1528207393, "last_edit_date": 1528207393, "creation_date": 1434907199, "answer_id": 30967250, "question_id": 30966867, "link": "https://stackoverflow.com/questions/30966867/how-can-i-modify-a-collection-while-also-iterating-over-it/30967250#30967250", "title": "How can I modify a collection while also iterating over it?", "body": "<blockquote>\n  <p>Is there a way that I could make this code update the board \"in place\"?</p>\n</blockquote>\n\n<p>There exists a type specially made for situations such as these. It's coincidentally called <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow noreferrer\"><code>std::cell::Cell</code></a>. You're allowed to mutate the contents of a <code>Cell</code> even when it has been immutably borrowed multiple times. <code>Cell</code> is limited to types that implement <code>Copy</code> (for others you have to use <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>, and if multiple threads are involved then you must use an <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> in combination with somethinng like a <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a>). </p>\n\n<pre><code>use std::cell::Cell;\n\nfn main() {\n    let board = vec![Cell::new(0), Cell::new(1), Cell::new(2)];\n\n    for a in board.iter() {\n        for b in board.iter() {\n            a.set(a.get() + b.get());\n        }\n    }\n    println!(\"{:?}\", board);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1545, "user_id": 1763669, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b76f89fc7735e31f12d6d71e0af67610?s=128&d=identicon&r=PG&f=1", "display_name": "arnm", "link": "https://stackoverflow.com/users/1763669/arnm"}, "edited": false, "score": 0, "creation_date": 1434909027, "post_id": 30967411, "comment_id": 49966536, "body": "Yes, this would be the simplest solution but I just wanted to see any alternative ways to do it with iterators. Btw, the code is <a href=\"https://gist.github.com/anonymous/ea4b440c9bf77f49592e#file-main-rs-L53\" rel=\"nofollow noreferrer\">here</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1545, "user_id": 1763669, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b76f89fc7735e31f12d6d71e0af67610?s=128&d=identicon&r=PG&f=1", "display_name": "arnm", "link": "https://stackoverflow.com/users/1763669/arnm"}, "edited": false, "score": 0, "creation_date": 1434909472, "post_id": 30967411, "comment_id": 49966671, "body": "it&#39;s impossible with iterators unless you create your own iterator (and probably board-type) that is specifically tailored to your Cell-update-function. On a related note, Unless your update-function only accesses cells to the right and the bottom of the current cell, you will get really weird behavior, and definitely not a synchronous cellular automaton. Game of life will be impossible to implement this way."}, {"owner": {"reputation": 1545, "user_id": 1763669, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b76f89fc7735e31f12d6d71e0af67610?s=128&d=identicon&r=PG&f=1", "display_name": "arnm", "link": "https://stackoverflow.com/users/1763669/arnm"}, "edited": false, "score": 0, "creation_date": 1434920697, "post_id": 30967411, "comment_id": 49970134, "body": "Yes, that would definitely be a problem. Thanks for that. I haven&#39;t been focusing too much on the actual problem of implementing Conway&#39;s Game of Life but rather been trying to learn Rust."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1528207509, "last_edit_date": 1528207509, "creation_date": 1434908261, "answer_id": 30967411, "question_id": 30966867, "link": "https://stackoverflow.com/questions/30966867/how-can-i-modify-a-collection-while-also-iterating-over-it/30967411#30967411", "title": "How can I modify a collection while also iterating over it?", "body": "<p>It entirely depends on your <code>next_gen</code> function. Assuming we know nothing about the function except its signature, the easiest way is to use indices:</p>\n\n<pre><code>fn step(board: &amp;mut Board) {\n    for row_index in 0..board.len() {\n        for column_index in 0..board[row_index].len() {\n            let cell_next = next_gen((row_index, column_index), &amp;board);\n            if board[row_index][column_index] != cell_next {\n                board[row_index][column_index] = cell_next;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>With more information about <code>next_gen</code> a different solution might be possible, but it sounds a lot like a cellular automaton to me, and to the best of my knowledge this cannot be done in an iterator-way in Rust without changing the type of <code>Board</code>.</p>\n\n<p>You might fear that the indexing solution will be less efficient than an iterator solution, but you should trust LLVM on this. In case your <code>next_gen</code> function is in another crate, you should mark it <code>#[inline]</code> so LLVM can optimize it too (not necessary if everything is in one crate).</p>\n\n<hr>\n\n<p>Not an answer to your question, but to your problem:</p>\n\n<p>Since you are implementing Conway's Game of Life, you cannot do the modification in-place. Imagine the following pattern:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>00000\n00100\n00100\n00100\n00000\n</code></pre>\n\n<p>If you update line 2, it will change the <code>1</code> in that line to a <code>0</code> since it has only two <code>1</code>s in its neighborhood. This will cause the middle <code>1</code> to see only two <code>1</code>s instead of the three that were there to begin with. Therefor you always need to either make a copy of the entire <code>Board</code>, or, as you did in your code, write all the changes to some other location, and splice them in after going through the entire board.</p>\n"}], "owner": {"reputation": 1545, "user_id": 1763669, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b76f89fc7735e31f12d6d71e0af67610?s=128&d=identicon&r=PG&f=1", "display_name": "arnm", "link": "https://stackoverflow.com/users/1763669/arnm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3092, "favorite_count": 2, "accepted_answer_id": 30967250, "answer_count": 2, "score": 8, "last_activity_date": 1528207704, "creation_date": 1434904663, "last_edit_date": 1528207704, "question_id": 30966867, "link": "https://stackoverflow.com/questions/30966867/how-can-i-modify-a-collection-while-also-iterating-over-it", "title": "How can I modify a collection while also iterating over it?", "body": "<p>I have a <code>Board</code> (a.k.a. <code>&amp;mut Vec&lt;Vec&lt;Cell&gt;&gt;</code>) which I would like to update while iterating over it. The new value I want to update with is derived from a function which requires a <code>&amp;Vec&lt;Vec&lt;Cell&gt;&gt;</code> to the collection I'm updating.</p>\n\n<p>I have tried several things:</p>\n\n<ol>\n<li><p>Use <code>board.iter_mut().enumerate()</code> and <code>row.iter_mut().enumerate()</code> so that I could update the <code>cell</code> in the innermost loop. Rust does not allow calling the <code>next_gen</code> function because it requires a <code>&amp;Vec&lt;Vec&lt;Cell&gt;&gt;</code> and you cannot have a immutable reference when you already have a mutable reference.</p></li>\n<li><p>Change the <code>next_gen</code> function signature to accept a <code>&amp;mut Vec&lt;Vec&lt;Cell&gt;&gt;</code>. Rust does not allow multiple mutable references to an object.</p></li>\n</ol>\n\n<p>I'm currently deferring all the updates to a <code>HashMap</code> and then applying them after I've performed my iteration:</p>\n\n<pre><code>fn step(board: &amp;mut Board) {\n    let mut cells_to_update: HashMap&lt;(usize, usize), Cell&gt; = HashMap::new();\n    for (row_index, row) in board.iter().enumerate() {\n        for (column_index, cell) in row.iter().enumerate() {\n            let cell_next = next_gen((row_index, column_index), &amp;board);\n            if *cell != cell_next {\n                cells_to_update.insert((row_index, column_index), cell_next);\n            }\n        }\n    }\n\n    println!(\"To Update: {:?}\", cells_to_update);\n    for ((row_index, column_index), cell) in cells_to_update {\n        board[row_index][column_index] = cell;\n    }\n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/anonymous/ea4b440c9bf77f49592e#file-main-rs-L53\" rel=\"nofollow noreferrer\">Full source</a></p>\n\n<p>Is there a way that I could make this code update the <code>board</code> \"in place\", that is, inside the innermost loop while still being able to call <code>next_gen</code> inside the innermost loop?</p>\n\n<p><strong>Disclaimer</strong>: </p>\n\n<p>I'm learning Rust and I know this is not the best way to do this. I'm playing around to see what I can and cannot do. I'm also trying to limit any copying to restrict myself a little bit. As <a href=\"https://stackoverflow.com/questions/30966867/modify-collection-while-iterating-over-it#comment49966671_30967411\">oli_obk - ker mentions, this implementation for Conway's Game of Life is flawed</a>.</p>\n\n<p>This code was intended to gauge a couple of things: </p>\n\n<ol>\n<li>if this is even possible </li>\n<li>if it is idiomatic Rust</li>\n</ol>\n\n<p>From what I have gathered in the comments, it is possible with <code>std::cell::Cell</code>. However, using <code>std:cell:Cell</code> circumvents some of the core Rust principles, which I described as my \"dilemma\" in the original question.</p>\n"}, {"tags": ["sorting", "rust", "insertion-sort"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434958029, "post_id": 30965257, "comment_id": 49979559, "body": "You can bypass bounds-checks by using <code>get_unchecked</code>, which is an <code>unsafe</code> method, instead of <code>[]</code>. It may help a lot here."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434957888, "post_id": 30969274, "comment_id": 49979461, "body": "I am not sure building a version with iterators will be easy, the borrowing rules are going to be hard to satisfy."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1434920300, "creation_date": 1434920300, "answer_id": 30969274, "question_id": 30965257, "link": "https://stackoverflow.com/questions/30965257/why-is-my-rust-implementation-of-insertionsort-slower-than-my-c-version/30969274#30969274", "title": "Why is my Rust implementation of InsertionSort slower than my C version?", "body": "<blockquote>\n  <p>Why is a simple insertion sort so slow?</p>\n</blockquote>\n\n<p>I would be willing to bet it's the bounds checks on array access. You're doing a lot of them.</p>\n\n<p>If you use iterators instead of direct accesses, you don't pay this penalty. I don't have a version with iterators handy for you, at the moment, unfortunately. Maybe someone else can contribute one. :)</p>\n"}], "owner": {"reputation": 41, "user_id": 5033353, "user_type": "registered", "profile_image": "https://graph.facebook.com/924514330928259/picture?type=large", "display_name": "Vladislav Orlov", "link": "https://stackoverflow.com/users/5033353/vladislav-orlov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1434922728, "creation_date": 1434894729, "last_edit_date": 1434922728, "question_id": 30965257, "link": "https://stackoverflow.com/questions/30965257/why-is-my-rust-implementation-of-insertionsort-slower-than-my-c-version", "title": "Why is my Rust implementation of InsertionSort slower than my C version?", "body": "<p>I decided to start learning a programming language to rewrite my programs. The first were a simple program from the second year at the university. But... look at the tests! Why is a simple insertion sort so slow?</p>\n\n<p>Test on C:</p>\n\n<pre><code>ARRAY SIZE: 100000\n&lt; counting_sort:  0.003602\n&lt; insertion_sort: 8.273647\n&lt; heap_sort:      0.017918\n</code></pre>\n\n<p>Test on Rust:</p>\n\n<pre><code>ARRAY SIZE: 100000\n&lt; counting_sort:  PT0.039530982S\n&lt; insertion_sort: PT276.529915469S\n&lt; heap_sort:      PT0.117946209S\n</code></pre>\n\n<p>How can I improve my converted code?</p>\n\n<p>C-version:</p>\n\n<pre><code>void insertion_sort(int a[], int length) {\n    int i, j, value;\n    for (i = 1; i &lt; length; i++) {\n        value = a[i];\n        for (j = i - 1; j &gt;= 0 &amp;&amp; a[j] &gt; value; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = value;\n    }\n}\n</code></pre>\n\n<p>Rust-version:</p>\n\n<pre><code>pub fn insertion_sort(array: &amp;mut [i32]) {\n    let mut value;\n    for i in 1..array.len() {\n        value = array[i];\n        let mut flag = true;\n        for j in (0..i).rev() {\n            if array[j] &gt; value {\n                array[j + 1] = array[j];\n            } else {\n                flag = false;\n                array[j + 1] = value;\n                break;\n            }\n        }\n        if flag {\n            array[0] = value;\n        }\n    }\n}\n</code></pre>\n\n<p>I was not building in release mode. Even after compiling in release mode:</p>\n\n<p>C-version (<code>gcc -O3</code>):</p>\n\n<pre><code>ARRAY SIZE: 100000\n&lt; counting_sort:  0.001252\n&lt; insertion_sort: 1.672351\n&lt; heap_sort:      0.008694\n</code></pre>\n\n<p>Rust-version (<code>cargo build --release</code>):</p>\n\n<pre><code>ARRAY SIZE: 100000\n&lt; counting_sort:  PT0.001556914S\n&lt; insertion_sort: PT3.291146043S\n&lt; heap_sort:      PT0.008269021S\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1434893005, "post_id": 30964977, "comment_id": 49961773, "body": "1) how can I access <code>aa</code>? 2) is it a recommended style to use Impl or is it better to use &quot;pure&quot; functions without wrapping them into Impl?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1434893117, "post_id": 30964977, "comment_id": 49961807, "body": "@jawanam (1) is another question and should be asked separately. It&#39;s also covered by <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>, which you should <b>definitely</b> read. (2) is &quot;it depends&quot;. Is your function highly related to the struct? If so, I&#39;d use <code>impl</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1434892910, "creation_date": 1434892910, "answer_id": 30964977, "question_id": 30964942, "link": "https://stackoverflow.com/questions/30964942/calling-an-impl-method-from-another-impl-method/30964977#30964977", "title": "Calling an impl method from another impl method", "body": "<p>You need to fully qualify the method you are calling.</p>\n\n<pre><code>struct St1 {\n    aa: String\n}\n\nimpl St1 {\n    pub fn method1() -&gt; String {\n        St1::method2()\n    }\n\n    pub fn method2() -&gt; String {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>On the off chance that you mean for these methods to be instance methods, then you still have to fully qualify them, but using <code>self</code> instead:</p>\n\n<pre><code>struct St1 {\n    aa: String\n}\n\nimpl St1 {\n    pub fn method1(&amp;self) -&gt; String {\n        self.method2()\n    }\n\n    pub fn method2(&amp;self) -&gt; String {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>Note that Rust style is 4-space indents.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1913, "favorite_count": 1, "accepted_answer_id": 30964977, "answer_count": 1, "score": 3, "last_activity_date": 1434893036, "creation_date": 1434892690, "last_edit_date": 1434893036, "question_id": 30964942, "link": "https://stackoverflow.com/questions/30964942/calling-an-impl-method-from-another-impl-method", "title": "Calling an impl method from another impl method", "body": "<p>It seems I can't call the method of the same struct in Rust or maybe I don't understand something:</p>\n\n<pre><code>struct St1 {\n  aa: String\n}\n\nimpl St1 {\n  pub fn method1() -&gt; String {\n    //....\n    method2() //error: unresolved name method2\n  }\n\n  pub fn method2() -&gt; String {\n    //....\n  }\n}\n</code></pre>\n\n<p>Is this how it's supposed to be?</p>\n"}, {"tags": ["rust", "traits", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "edited": false, "score": 0, "creation_date": 1434926756, "post_id": 30961552, "comment_id": 49971668, "body": "Thanks, that fixed the issue, but now theres a couple of other problems I added to the question. Would you be able to take a look?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "edited": false, "score": 0, "creation_date": 1434929705, "post_id": 30961552, "comment_id": 49972202, "body": "@neon64: that\u2019s a new issue, really, and one that is probably not surmountable in this design. You may need to look into other ways of representing the trait."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 1, "last_activity_date": 1434864457, "creation_date": 1434864457, "answer_id": 30961552, "question_id": 30960970, "link": "https://stackoverflow.com/questions/30960970/why-is-this-trait-implementation-incompatible-bound-lifetime-vs-concrete-lifet/30961552#30961552", "title": "Why is this trait/implementation incompatible - bound lifetime vs concrete lifetime", "body": "<p>When comparing things like this, you need to remember to expand all the generics so that you can <em>actually</em> compare it all. In this case, you haven\u2019t expanded <code>R</code>. If you do, the answer becomes obvious: <code>R</code> is <code>OpenGLResources&lt;'z&gt;</code>, linking the <code>OpenGLResources</code> to the <code>impl</code> block, whereas your method definition has elided the lifetime on <code>OpenGLResources</code>, causing it to be inferred as <code>self</code>\u2019s lifetime, which is <code>'a</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "is_accepted": true, "score": 0, "last_activity_date": 1435564464, "creation_date": 1435564464, "answer_id": 31110490, "question_id": 30960970, "link": "https://stackoverflow.com/questions/30960970/why-is-this-trait-implementation-incompatible-bound-lifetime-vs-concrete-lifet/31110490#31110490", "title": "Why is this trait/implementation incompatible - bound lifetime vs concrete lifetime", "body": "<p>Thanks the hints of @Chris Morgan I managed to implement this functionality and its now working fine.</p>\n\n<p>If we start with the base trait with the <code>'a</code> lifetime included:</p>\n\n<pre><code>trait Resources&lt;'a&gt; {\n    type Shader: Shader;\n    type ShaderProgram: ShaderProgram;\n}\n</code></pre>\n\n<p>Then implement it for OpenGL. (note the <code>PhantomData</code> struct)</p>\n\n<pre><code>struct OpenGLResources&lt;'a&gt; {\n   phantom: PhantomData&lt;&amp;'a u32&gt; // 'a is the lifetime of the context reference\n}\n\nimpl&lt;'a&gt; ResourcesTrait&lt;'a&gt; for Resources&lt;'a&gt; {\n    type Shader = Shader&lt;'a&gt;;\n    type ShaderProgram = ShaderProgram&lt;'a&gt;;\n    type CommandBuffer = CommandBuffer;\n    type CommandBufferBuilder = CommandBufferBuilder;\n} \n</code></pre>\n\n<p>Its a bit verbose, but the <code>GraphicsContext</code> trait works fine too now. The <code>'a</code> lifetime goes in the type parameters part.</p>\n\n<pre><code>trait GraphicsContext&lt;'a, R: Resources&lt;'a&gt;&gt; {\n\n    fn create_shader(&amp;'a self, ty: Type, source: &amp;str) -&gt; Result&lt;R::Shader, ShaderCreationError&gt;\n\n}\n</code></pre>\n\n<p>Finally this is the required code in the graphics context implementation.\nIt is extremely verbose with the <code>'a</code> lifetimes sprinkled everywhere but at least it works!</p>\n\n<pre><code>impl&lt;'a&gt; GraphicsContext&lt;'a, Resources&lt;'a&gt;&gt; for OpenGLGraphicsContext\n</code></pre>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 125, "favorite_count": 1, "accepted_answer_id": 31110490, "answer_count": 2, "score": 1, "last_activity_date": 1435564464, "creation_date": 1434856924, "last_edit_date": 1495539955, "question_id": 30960970, "link": "https://stackoverflow.com/questions/30960970/why-is-this-trait-implementation-incompatible-bound-lifetime-vs-concrete-lifet", "title": "Why is this trait/implementation incompatible - bound lifetime vs concrete lifetime", "body": "\n\n<p>I'm struggling with this error <code>rustc</code> gives me:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>error: method `create_shader_explicit` has an incompatible type for trait: expected bound lifetime parameter 'a, found concrete lifetime\n</code></pre>\n\n<p>My trait declaration is pretty much this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait GraphicsContext&lt;R: Resources&gt; {\n\n    /// Creates a shader object\n    fn create_shader&lt;'a&gt;(&amp;'a self, shader::Stage, source: &amp;str) -&gt; \n        Result&lt;handle::Shader&lt;R&gt;, shader::CreateError&gt;;\n\n}\n</code></pre>\n\n<p>Here's my implementation,</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct OpenGLResources&lt;'a&gt; {\n    phantom: PhantomData&lt;&amp;'a u32&gt; \n}\n\nimpl&lt;'a&gt; Resources for OpenGLResources&lt;'a&gt; {\n    type Shader = Shader&lt;'a&gt;;\n}\n\nimpl&lt;'z&gt; GraphicsContext&lt;OpenGLResources&lt;'z&gt;&gt; for OpenGLGraphicsContext {\n\n    /// Creates a shader object\n    fn create_shader&lt;'a&gt;(&amp;'a self, stage: shader::Stage, source: &amp;str) -&gt; \n        Result&lt;handle::Shader&lt;OpenGLResources&gt;, shader::CreateError&gt; {\n\n        let shader = Shader::new(self, stage);\n        try!(shader.compile_from_source(source));\n\n        Ok(shader)\n    }\n\n}\n</code></pre>\n\n<p>In <a href=\"https://stackoverflow.com/questions/24847331/rust-lifetime-error-expected-concrete-lifetime-but-found-bound-lifetime\" title=\"Other examples\">other questions</a> on StackOverflow, they are missing things like <code>&lt;'a&gt;</code> between <code>create_shader</code> and <code>()</code>, however when I compare the fn definitions in mine they look identical.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Changing the definition inside <code>impl</code> to the following fixes that issue</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_shader&lt;'a&gt;(&amp;'a self, stage: shader::Stage, source: &amp;str) -&gt;     \n    Result&lt;handle::Shader&lt;OpenGLResources**&lt;'z&gt;**&gt;, shader::CreateError&gt;\n</code></pre>\n\n<p>But then the issue is that <code>'a</code> and <code>'z</code> need to be the same lifetime. If I change it to this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_shader(**&amp;'z** self, stage: shader::Stage, source: &amp;str) -&gt; \n    Result&lt;handle::Shader&lt;OpenGLResources&lt;'z&gt;&gt;, shader::CreateError&gt;\n</code></pre>\n\n<p>The <code>impl</code> block works, but then I need a way of specifying the <code>'z</code> lifetime in the trait definition. I tried the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait&lt;'z&gt; GraphicsContext&lt;R: Resources&lt;'z&gt;&gt;\n</code></pre>\n\n<p>But it didn't work.</p>\n"}, {"tags": ["c", "arrays", "r", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1434842447, "post_id": 30959706, "comment_id": 49952304, "body": "Rust doesn&#39;t have strided slices in std. You&#39;ll need to wrap it manually or get a library."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434844983, "post_id": 30959706, "comment_id": 49952714, "body": "Arrays have <i>compile time length</i>, that&#39;s one of the core parts of them. Your question has nothing to do with FFI or C; you simply cannot create arrays with dynamic length. This should be a duplicate of <a href=\"http://stackoverflow.com/q/27859822/155423\">stackoverflow.com/q/27859822/155423</a>, or of <a href=\"http://stackoverflow.com/q/30312885/155423\">stackoverflow.com/q/30312885/155423</a>."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1434845530, "post_id": 30959706, "comment_id": 49952803, "body": "<a href=\"http://nalgebra.org/doc/nalgebra/struct.DMat.html\" rel=\"nofollow noreferrer\">nalgebra.org/doc/nalgebra/struct.DMat.html</a> - &quot;<i>Matrix with dimensions unknown at compile-time</i>&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1434893808, "post_id": 30959706, "comment_id": 49962007, "body": "@ArtemGr I have a feeling that a <code>DMat</code> is going to be <i>much</i> harder to cross the FFI boundary :-) Really anything with a generic type."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434894207, "post_id": 30959706, "comment_id": 49962118, "body": "@Shepmaster, riiight. Pointer arithmetics should be used to read the matrix from the C memory."}, {"owner": {"reputation": 535, "user_id": 2637585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f70e6a2388790df1862d108e1294a0a?s=128&d=identicon&r=PG", "display_name": "Christophe Augier", "link": "https://stackoverflow.com/users/2637585/christophe-augier"}, "edited": false, "score": 1, "creation_date": 1435161705, "post_id": 30959706, "comment_id": 50087432, "body": "you should probably look at <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/slice/fn.from_raw_parts.html</a> that allows one to create a slice using a pointer of type T and the number of elements."}], "answers": [{"tags": [], "owner": {"reputation": 1003, "user_id": 4957011, "user_type": "registered", "accept_rate": 82, "profile_image": "https://lh3.googleusercontent.com/-qCvohWQdhyo/AAAAAAAAAAI/AAAAAAAAAyc/5cVJx4KgEFE/photo.jpg?sz=128", "display_name": "Phoenix", "link": "https://stackoverflow.com/users/4957011/phoenix"}, "is_accepted": false, "score": 1, "last_activity_date": 1534519634, "last_edit_date": 1534519634, "creation_date": 1534519579, "answer_id": 51898583, "question_id": 30959706, "link": "https://stackoverflow.com/questions/30959706/pass-array-from-c-to-rust-with-dimensions-defined-during-runtime/51898583#51898583", "title": "Pass array from C to Rust with dimensions defined during runtime", "body": "<p>Here's what I'd suggest, assuming this is in row-major order.</p>\n\n<p>C code:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>void test2(double* matrix, int32_t nrow, int32_t ncol);\n</code></pre>\n\n<p>Rust code:</p>\n\n<pre><code>use std::slice;\n\n#[no_mangle]\npub extern fn test2(pointer: *const f64, nrow: i32, ncol: i32) {\n    let mut rows: Vec&lt;&amp;[f64]&gt; = Vec::new();\n    for i in 0..nrow as usize {\n        rows.push(unsafe {\n            slice::from_raw_parts(\n                pointer.offset(i as isize * ncol as isize), \n                ncol as usize\n            )\n        });\n    }\n    let matrix: &amp;[&amp;[f64]] = &amp;rows[..];\n\n    println!(\"{:#?}\", matrix);\n}\n</code></pre>\n"}], "owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 356, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1534519634, "creation_date": 1434841490, "question_id": 30959706, "link": "https://stackoverflow.com/questions/30959706/pass-array-from-c-to-rust-with-dimensions-defined-during-runtime", "title": "Pass array from C to Rust with dimensions defined during runtime", "body": "<p>I am trying to pass a matrix from R to Rust by way of C. I can pass a two-dimensional array if I hard-code the array-dimensions in the rust function signature. Is there a way to do this dynamically by passing a pointer to the array along with the number of rows and columns?</p>\n\n<p>My C code:</p>\n\n<pre><code>#include \"Rinternals.h\"\n#include \"R.h\"\n#include &lt;stdint.h&gt;\n\nvoid test1(double* matrix);\n\nvoid test2(double* matrix, int32_t nrow, int32_t ncol);\n\nSEXP pass_matrix_to_rust(SEXP mat, SEXP nrow, SEXP ncol) {\n\n    // store nrows and ncols into integers\n    int32_t rows = *INTEGER(nrow);\n    int32_t cols = *INTEGER(ncol);\n\n    // store pointer to matrix of doubles\n    double *matrix = REAL(mat);\n\n    test1(matrix); // hard coded version\n    test2(matrix, rows, cols);\n\n    return R_NilValue;\n}\n</code></pre>\n\n<p>My Rust code:</p>\n\n<pre><code>// This function works but I have to specify the size at compile time\n#[no_mangle]\npub extern fn test1(value: *const [[f64; 10]; 10]) {\n  let matrix = unsafe{*value};\n\n  println!(\"{:?}\", matrix);\n}\n\n// this function doesn't compile\n#[no_mangle]\npub extern fn test2(value: *const f64, nrow: i32, ncol: i32) {\n  let matrix: [[f64; nrow]; ncol] = unsafe{*value};\n\n  println!(\"{:?}\", matrix);\n}\n\n// rustc output:\n rustc glue.rs\nglue.rs:30:29: 30:33 error: no type for local variable 161\nglue.rs:30   let matrix: [[f64; nrow]; ncol] = unsafe{*value};\n                                       ^~~~\nglue.rs:30:22: 30:26 error: no type for local variable 158\nglue.rs:30   let matrix: [[f64; nrow]; ncol] = unsafe{*value};\n                                ^~~~\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8828, "user_id": 6533, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a885b38125089c597214473996dbd36a?s=128&d=identicon&r=PG", "display_name": "Fixpoint", "link": "https://stackoverflow.com/users/6533/fixpoint"}, "edited": false, "score": 0, "creation_date": 1434935004, "post_id": 30959696, "comment_id": 49973188, "body": "Thanks. While this wasn&#39;t directly applicable to what I was trying to do, it helped me to wrap my head around Rust perspective on lifetimes and ownership."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 5, "last_activity_date": 1499382112, "last_edit_date": 1499382112, "creation_date": 1434841373, "answer_id": 30959696, "question_id": 30959539, "link": "https://stackoverflow.com/questions/30959539/how-to-iterate-over-a-slice-of-mapped-slices/30959696#30959696", "title": "How to iterate over a slice of mapped slices?", "body": "<p><code>&amp;T</code> can't be iterated as <code>next</code> mutates.</p>\n\n<p>Thus if you have a <code>&amp;Map&lt;_, _&gt;</code>, you can't iterate it.</p>\n\n<p>You might not realize that <code>&amp;[1,2,3].iter().map(|&amp;x| x+1)</code> means</p>\n\n<pre><code>&amp;([1,2,3].iter().map(|&amp;x| x+1))\n</code></pre>\n\n<p>giving the reference.</p>\n\n<p>Using <code>for &amp;xs in &amp;[&amp;mut ...]</code> won't work either, as it requires moving <code>xs</code> out of an immutable reference. There is also currently no by-value iterator over fixed length arrays. I believe the easiest solution is</p>\n\n<pre><code>for xs in &amp;mut [&amp;mut [1, 2, 3].iter().map(|&amp;x| x+1)] {\n    for x in xs {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n\n<p>Note that this also requires fixing a problem with the <code>map</code> call, which didn't dereference its input.</p>\n"}], "owner": {"reputation": 8828, "user_id": 6533, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a885b38125089c597214473996dbd36a?s=128&d=identicon&r=PG", "display_name": "Fixpoint", "link": "https://stackoverflow.com/users/6533/fixpoint"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1682, "favorite_count": 0, "accepted_answer_id": 30959696, "answer_count": 1, "score": 3, "last_activity_date": 1499384003, "creation_date": 1434839920, "last_edit_date": 1499384003, "question_id": 30959539, "link": "https://stackoverflow.com/questions/30959539/how-to-iterate-over-a-slice-of-mapped-slices", "title": "How to iterate over a slice of mapped slices?", "body": "<p>Here's an example of what I'm trying to do:</p>\n\n<pre><code>for &amp;xs in &amp;[&amp;[1, 2, 3].iter().map(|x| x + 1)] {\n    for &amp;x in xs {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n\n<p>This gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;std::iter::Map&lt;std::slice::Iter&lt;'_, {integer}&gt;, [closure@src/main.rs:2:40: 2:49]&gt;: std::iter::Iterator` is not satisfied\n --&gt; src/main.rs:3:9\n  |\n3 | /         for &amp;x in xs {\n4 | |             println!(\"{}\", x);\n5 | |         }\n  | |_________^ the trait `std::iter::Iterator` is not implemented for `&amp;std::iter::Map&lt;std::slice::Iter&lt;'_, {integer}&gt;, [closure@src/main.rs:2:40: 2:49]&gt;`\n  |\n  = note: `&amp;std::iter::Map&lt;std::slice::Iter&lt;'_, {integer}&gt;, [closure@src/main.rs:2:40: 2:49]&gt;` is not an iterator; maybe try calling `.iter()` or a similar method\n  = note: required by `std::iter::IntoIterator::into_iter`\n</code></pre>\n\n<p>...which is very surprising, because I clearly see <a href=\"https://doc.rust-lang.org/std/iter/struct.Map.html\" rel=\"nofollow noreferrer\">how <code>std::Iter::Map</code> implements <code>Iterator</code></a>.</p>\n\n<p>Why does it complain and how to iterate over a slice of mapped slices?</p>\n"}, {"tags": ["windows", "signals", "rust"], "comments": [{"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1434823344, "post_id": 30956966, "comment_id": 49947178, "body": "The Windows console (conhost.exe) generates events in attached processes, such as <code>CTRL_C_EVENT</code>. Console processes can set handlers for these events. If the process is using Microsoft&#39;s C runtime, it installs a handler that calls its registered handler for the standard C <code>SIGINT</code> signal. If rust uses a CRT, it may provide a mechanism to ignore <code>SIGINT</code>, or at least some interface that lets you call C <code>signal(SIGINT, SIG_IGN)</code> or Win32 <code>SetConsoleCtrlHandler(NULL, TRUE)</code>."}, {"owner": {"reputation": 141, "user_id": 2525572, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f197ddbfc4b93453d40c92287a167639?s=128&d=identicon&r=PG", "display_name": "lines", "link": "https://stackoverflow.com/users/2525572/lines"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1434824074, "post_id": 30956966, "comment_id": 49947418, "body": "I know that I could use FFI, however I would <i>like</i> (not need) a somewhat native way to do this. (If someone tells me I need to use FFI, I will accept an Answer in that vein)"}, {"owner": {"reputation": 141, "user_id": 2525572, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f197ddbfc4b93453d40c92287a167639?s=128&d=identicon&r=PG", "display_name": "lines", "link": "https://stackoverflow.com/users/2525572/lines"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1434825395, "post_id": 30956966, "comment_id": 49947827, "body": "Yeah, I said &#39;SIGINT equivalent&#39; for a reason."}], "answers": [{"comments": [{"owner": {"reputation": 699, "user_id": 1256121, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd9ea8d9c9b6ef91cd7f5bdda5b707b4?s=128&d=identicon&r=PG", "display_name": "iajrz", "link": "https://stackoverflow.com/users/1256121/iajrz"}, "edited": false, "score": 0, "creation_date": 1448411172, "post_id": 33906409, "comment_id": 55575483, "body": "If you do go the FFI way, please consider contributing to chan-signal, the author is <a href=\"http://burntsushi.net/rustdoc/chan_signal/#platform-support-no-windows-support\" rel=\"nofollow noreferrer\">looking for support</a> in that front."}], "tags": [], "owner": {"reputation": 699, "user_id": 1256121, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd9ea8d9c9b6ef91cd7f5bdda5b707b4?s=128&d=identicon&r=PG", "display_name": "iajrz", "link": "https://stackoverflow.com/users/1256121/iajrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1448410912, "creation_date": 1448410912, "answer_id": 33906409, "question_id": 30956966, "link": "https://stackoverflow.com/questions/30956966/is-there-a-way-to-listen-to-signals-on-windows/33906409#33906409", "title": "Is there a way to listen to signals on Windows", "body": "<p>There is <a href=\"https://crates.io/crates/chan-signal\" rel=\"nofollow\">a crate</a>, <code>chan-signal</code>, that aims to help in handling this, by spawning a thread and having it wait for signals.</p>\n\n<p>EDIT: It doesn't currently support windows.</p>\n\n<p>There is <a href=\"https://github.com/rust-lang/rfcs/issues/1368\" rel=\"nofollow\">an RFC</a> asking for this functionality to be integrated into the language's standard library, but it is very young.</p>\n\n<p>It seems your option is to go with FFI.</p>\n"}], "owner": {"reputation": 141, "user_id": 2525572, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f197ddbfc4b93453d40c92287a167639?s=128&d=identicon&r=PG", "display_name": "lines", "link": "https://stackoverflow.com/users/2525572/lines"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 348, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1448410912, "creation_date": 1434821398, "last_edit_date": 1434844477, "question_id": 30956966, "link": "https://stackoverflow.com/questions/30956966/is-there-a-way-to-listen-to-signals-on-windows", "title": "Is there a way to listen to signals on Windows", "body": "<p>I'm writing a small shell for Windows in Rust, and want to kill the <code>Command</code> I spawned and prevent my shell from quitting.</p>\n\n<p>Is there a way of capturing the Windows <code>SIGINT</code> equivalent in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434779149, "creation_date": 1434779149, "answer_id": 30950728, "question_id": 30950312, "link": "https://stackoverflow.com/questions/30950312/renaming-a-crate-with-a-hyphen-doesnt-compile-anymore/30950728#30950728", "title": "Renaming a crate with a hyphen doesn&#39;t compile anymore", "body": "<p>Dashes in extern crate names can be replaced with underscores. So your example should be</p>\n\n<pre><code>extern crate my_crate as my_crate1;\n</code></pre>\n\n<p>Or if you want the underscored name, using the following will work</p>\n\n<pre><code>extern crate my_crate;\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 303, "favorite_count": 0, "accepted_answer_id": 30950728, "answer_count": 1, "score": 6, "last_activity_date": 1434810178, "creation_date": 1434775253, "last_edit_date": 1434810178, "question_id": 30950312, "link": "https://stackoverflow.com/questions/30950312/renaming-a-crate-with-a-hyphen-doesnt-compile-anymore", "title": "Renaming a crate with a hyphen doesn&#39;t compile anymore", "body": "<p>This no longer compiles:</p>\n\n<pre><code>extern crate \"my-crate\" as my_crate1;\n</code></pre>\n\n<p>What's the new syntax? I did not find anything by searching.</p>\n"}, {"tags": ["rust", "default"], "answers": [{"comments": [{"owner": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "edited": false, "score": 0, "creation_date": 1434768010, "post_id": 30949671, "comment_id": 49933362, "body": "Hm. Interesting interaction. Thanks for clear explanation. But anyway, IMO, compiler shouldn&#39;t let me do this sort of stuff"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "edited": false, "score": 4, "creation_date": 1434768249, "post_id": 30949671, "comment_id": 49933397, "body": "@Cherrionella It&#39;s not the compiler&#39;s job to keep you from making logic errors or solve the halting problem. :)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1434782293, "post_id": 30949671, "comment_id": 49935824, "body": "@DK.: well, many forms of unbounded recursion which cannot possibly be what you wanted are trivial to detect, and one could easily form a case for the compiler complaining of such things."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1434783647, "post_id": 30949671, "comment_id": 49936117, "body": "@ChrisMorgan: I didn&#39;t want to get bogged down in the comments section on the subject; I agree that detecting <i>almost certainly</i> incorrect behaviour in lints is a good thing, but I think expecting or relying on a language to detect all such mistakes is just <i>begging</i> for trouble."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "edited": false, "score": 1, "creation_date": 1434846182, "post_id": 30949671, "comment_id": 49952925, "body": "@Cherrionella I&#39;ve <a href=\"https://github.com/Manishearth/rust-clippy/issues/103\" rel=\"nofollow noreferrer\">submitted an issue</a> to <a href=\"https://github.com/Manishearth/rust-clippy\" rel=\"nofollow noreferrer\">rust-clippy</a>, which I believe is more suited for this kind of thing than the rust compiler. If you are on nightly, consider yourself invited to try it."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1434767583, "creation_date": 1434767583, "answer_id": 30949671, "question_id": 30949498, "link": "https://stackoverflow.com/questions/30949498/implementing-default-on-nested-structures-causes-a-stack-overflow/30949671#30949671", "title": "Implementing Default on nested structures causes a stack overflow", "body": "<p>Of <em>course</em> it causes a stack overflow.</p>\n\n<p>To make this clearer, let's change the example a little:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct A {\n    x: i32,\n    y: i32,\n}\n\nimpl Default for A {\n    fn default() -&gt; A {\n        A { x: 1, ..Default::default() }\n    }\n}\n</code></pre>\n\n<p>When you say <code>A { ..Default::default() }</code>, you <em>are not</em> saying \"create me an <code>A</code> and execute <code>Default::default()</code> for each field\".  This means that the implementation of <code>default</code> is <strong>not</strong> equivalent to:</p>\n\n<pre><code>A { x: 1, y: Default::default() }\n</code></pre>\n\n<p>It is, in fact, this:</p>\n\n<pre><code>let temp: A = Default::default();\ntemp.x = 1;\ntemp\n</code></pre>\n\n<p>So yes, it causes a stack overflow: you've defined the default value of <code>A</code> in terms of itself.</p>\n"}], "owner": {"reputation": 111, "user_id": 3702607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ba2673e93e7a12d89823b85224ee3ce?s=128&d=identicon&r=PG&f=1", "display_name": "Cherrionella", "link": "https://stackoverflow.com/users/3702607/cherrionella"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 393, "favorite_count": 0, "accepted_answer_id": 30949671, "answer_count": 1, "score": 2, "last_activity_date": 1434810518, "creation_date": 1434765359, "last_edit_date": 1434810518, "question_id": 30949498, "link": "https://stackoverflow.com/questions/30949498/implementing-default-on-nested-structures-causes-a-stack-overflow", "title": "Implementing Default on nested structures causes a stack overflow", "body": "<p>I found an unusual behavior of <code>std::default</code>. If you create a nested structure with default setters and try to create the highest level struct with default parameters, it causes a stack overflow.</p>\n\n<p>This code compiles, but when you try to run it throws <code>thread '&lt;main&gt;' has overflowed its stack</code>:</p>\n\n<pre><code>use std::default;\n\npub struct A {\n    x: i32\n}\n\nimpl Default for A {\n    fn default() -&gt; A {\n        A { ..Default::default() }\n    }\n}\n\nfn main() {\n    let test = A { ..Default::default() };\n}\n</code></pre>\n\n<p>But if you set the defaults of inherited by props, it works:</p>\n\n<pre><code>use std::default;\n\npub struct A {\n    x: i32\n}\n\nimpl Default for A {\n    fn default() -&gt; A {\n        A { x: 0 }\n    }\n}\n\nfn main() {\n    let test = A { ..Default::default() };\n}\n</code></pre>\n\n<p>Is this a known issue and should I post it to the Rust issue tracker? My compiler version is <code>rustc 1.2.0-nightly (0250ff9a5 2015-06-17)</code>. </p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1434786540, "last_edit_date": 1434786540, "creation_date": 1434768154, "answer_id": 30949731, "question_id": 30943930, "link": "https://stackoverflow.com/questions/30943930/why-do-i-have-to-expose-a-macro-implementations-use-in-the-client-library/30949731#30949731", "title": "Why do I have to expose a macro implementation&#39;s &#39;use&#39; in the client library?", "body": "<p>Because <code>macro_rules!</code> is a bit dumber than you might expect.  It does not, for example, bring imports with it when it expands something.  It's best to think of macro expansion as <em>mostly</em> just a dumb copy+paste job.</p>\n\n<p>If you look at any reasonably well-written macro that depends on outside symbols, you'll see things like <code>::std::result::Result</code> instead of <code>Result</code>.  This is because the macro writer cannot depend on <code>Result</code> meaning what they expect in the expansion context.  So the first step is to qualify paths absolutely.</p>\n\n<p>The second thing to know is that every macro expansion gets a <code>$crate</code> substitution that is the path to the crate in which the macro was defined.  You can use this to access, for example, <code>DbaxError</code> as <code>$crate::DbaxError</code>.</p>\n\n<p>Finally, you're in luck; given the expansion, you can cheat a little and just add the <code>use</code> items <em>inside</em> the expansion:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_export]\nmacro_rules! dbax_call_test {\n    ($func: expr) =&gt; {\n        {\n            use std::ffi::CString;\n            use $crate::dbax_function;\n            let call_c_func = unsafe { dbax_function(CString::new($func).unwrap().as_ptr(),0) };\n            // ...\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 568, "favorite_count": 0, "accepted_answer_id": 30949731, "answer_count": 1, "score": 5, "last_activity_date": 1434786540, "creation_date": 1434734713, "last_edit_date": 1495541033, "question_id": 30943930, "link": "https://stackoverflow.com/questions/30943930/why-do-i-have-to-expose-a-macro-implementations-use-in-the-client-library", "title": "Why do I have to expose a macro implementation&#39;s &#39;use&#39; in the client library?", "body": "<p>I'm trying to use a macro I've created in a separate module. With reference to <a href=\"https://stackoverflow.com/questions/28526180/unresolved-import-when-calling-a-macro-defined-in-an-external-crate\">this SO question</a>, I've imported a macro fine. However it seems that I have </p>\n\n<p><strong>Update to add macro implementation</strong></p>\n\n<p>lib.rs</p>\n\n<pre><code>#![macro_use]\nuse std::fmt;\nuse std::ffi::CString;\nuse std::ffi::CStr;\nuse std::str;\nextern crate libc;\n\npub enum DbaxError {\n    DBAXException(String)\n}\n\n #[macro_export]\nmacro_rules! dbax_call_test {\n    ( $func : expr ) =&gt; {\n        {\n            let call_c_func = unsafe { dbax_function(CString::new($func).unwrap().as_ptr(),0) };\n            match unsafe { getErrorCode() as i32 } {\n                0 =&gt; Ok(\"Done\".to_owned() + $func),\n                _ =&gt; Err(DbaxError::DBAXException( str::from_utf8(unsafe { CStr::from_ptr(getError()) }.to_bytes()).unwrap().to_string()))\n            }\n        }\n\n    }\n}\n</code></pre>\n\n<p>and main.rs in a separate crate</p>\n\n<pre><code>// Import macro\n#[macro_use] extern crate rustdbax;\n// Import implementation details of macro\nuse rustdbax::*;\nuse std::ffi::CString;\nuse std::ffi::CStr;\nuse std::str;\n\nfn main() {\n    // Call my macro\n    dbax_call_test!(\"DateAdd\");\n}\n</code></pre>\n\n<p>This works fine, but <code>use std::*</code> lines are all part of the implementation in the <code>lib.rs</code>.</p>\n\n<p>Why do I have to expose the implementation's 'use' in the client library? Shouldn't rustc as part of it's expansion 'include' whatever was in the <code>lib.rs</code>?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 2, "last_activity_date": 1434733749, "last_edit_date": 1434733749, "creation_date": 1434733448, "answer_id": 30943559, "question_id": 30943116, "link": "https://stackoverflow.com/questions/30943116/why-calling-cloned-on-iter-with-inferred-item-type-allows-it-to-be-passed-into/30943559#30943559", "title": "Why calling cloned() on Iter with inferred Item type allows it to be passed into this function?", "body": "<p>Your <code>print</code> function expects an Iterator of <code>usize</code>s as an argument, but <code>it</code> (in your first version) is an iterator that yields <code>&amp;usize</code> values, i.e. references to a <code>usize</code>.</p>\n\n<p><code>cloned()</code> essentially maps <code>Clone::clone</code> over an iterator, so it transforms an iterator of <code>&amp;T</code> into an iterator of <code>T</code>, so that fixes the type mismatch in your program.</p>\n\n<p>Your final version (<code>let it = a.iter().map(|&amp;x| x);</code>) also converts the iterator from an iterator of <code>&amp;T</code> into an iterator of <code>T</code>, but this time by dereferencing the elements using pattern matching.</p>\n\n<p>Since <code>print</code> doesn't actually need to own the elements of the iterator, you could also fix your problem by changing its type to the following:</p>\n\n<pre><code>fn print&lt;'a, I: Iterator&lt;Item=&amp;'a usize&gt;&gt;(iter: I)\n</code></pre>\n"}], "owner": {"reputation": 75, "user_id": 5028255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ab2fc9a6592bbffab688d877b0dd0fb9?s=128&d=identicon&r=PG&f=1", "display_name": "st1hy", "link": "https://stackoverflow.com/users/5028255/st1hy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 0, "accepted_answer_id": 30943559, "answer_count": 1, "score": 3, "last_activity_date": 1434733749, "creation_date": 1434731897, "question_id": 30943116, "link": "https://stackoverflow.com/questions/30943116/why-calling-cloned-on-iter-with-inferred-item-type-allows-it-to-be-passed-into", "title": "Why calling cloned() on Iter with inferred Item type allows it to be passed into this function?", "body": "<p>I was trying to learn a little bit about Iterator and how it works and I was hoping some of you could explain to me somthing about this code:</p>\n\n<pre><code>fn main() {\n    let a: Vec&lt;_&gt; = (0..10).map(|_| 2).collect();\n    let it = a.iter();\n    print(it);\n}\n\nfn print&lt;I: Iterator&lt;Item=usize&gt;&gt;(iter: I) {\n    for x in iter {\n        println!(\"{}\",x);\n    }\n}\n</code></pre>\n\n<p>I know that the code above is very convoluted, but its the simples code that I ve created from much more complicated version in which it made more sense, just to find the core of the problem and understand it better.</p>\n\n<p>When compiling this code in rustc I have this compile error:</p>\n\n<pre><code>src/main.rs:5:5: 5:8 error: type mismatch resolving `&lt;core::slice::Iter&lt;'_, _&gt; as core::iter::Iterator&gt;::Item == usize`:\n expected &amp;-ptr,\n    found usize [E0271]\nsrc/main.rs:5     print(it);\n                  ^~~\n</code></pre>\n\n<p>I fixed it by changing let to:</p>\n\n<pre><code>let it = a.iter().cloned();\n</code></pre>\n\n<p>or</p>\n\n<pre><code>let it = a.iter().map(|&amp;x| x);\n</code></pre>\n\n<p>As far as I understand the error suggest that compiler cannot safely inferr type of the Item that I am trying to pass as argument, but why does calling cloned() or map changes anything?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1434735566, "post_id": 30942408, "comment_id": 49923101, "body": "Probably a duplicate of <a href=\"http://stackoverflow.com/q/29184358/155423\">stackoverflow.com/q/29184358/155423</a>."}], "answers": [{"comments": [{"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 1, "creation_date": 1434807108, "post_id": 30942496, "comment_id": 49942085, "body": "That works, but <i>why</i> does it work? If I call <code>divide</code> with <code>T</code> of type <code>u32</code> and assign the returned value to a variable of type <code>u32</code> (i.e., <code>let x: u32 = divide(42u32, 18u32);</code>) then it compiles. Why is it the return expression inside <code>divide -&gt; T</code> cannot convert from <code>T::Output</code> to <code>T</code>, but when using the returned value outside <code>divide</code> the type system allows the conversion (from <code>u32::Output</code> to <code>u32</code>)? I.e., appending<code>::Output</code> to the return type of <code>divide</code> moves the conversion from <i>inside</i> the function to <i>outside</i> the function. What&#39;s going on here?"}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 2, "creation_date": 1434808983, "post_id": 30942496, "comment_id": 49942651, "body": "Because when you are IN your generic function <code>divide</code>, the compiler yet doesn&#39;t know that you can cast <code>T</code> to <code>T:Output</code>. (They are generic, they can be anything, even something that cannot cast) <code>a &#47; b</code> produces something of type <code>T::Output</code>, so in the solution above there is not cast, <code>T::Output</code> is simply the right type."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 11, "last_activity_date": 1434961256, "last_edit_date": 1434961256, "creation_date": 1434729637, "answer_id": 30942496, "question_id": 30942408, "link": "https://stackoverflow.com/questions/30942408/casting-to-a-generic-type/30942496#30942496", "title": "Casting to a generic type", "body": "<p>You simply have to specify <code>T::Output</code> as the return type of the function:</p>\n\n<pre><code>fn divide&lt;T: std::ops::Div&gt;(a: T, b: T) -&gt; T::Output {\n    a / b\n}\n</code></pre>\n\n<p><strong>Edit to add more explanation on why you cannot do the cast inside the function</strong></p>\n\n<p>When you are IN your generic function divide, the compiler yet doesn't know that you can cast <code>T</code> to <code>T::Output</code>, so the cast is invalid. They are generic types, they can be anything, how the compiler knows that you can cast from <code>T</code> to <code>T::Output</code> ?</p>\n\n<p><code>a / b</code> produces something of type <code>T::Output</code>, so in the solution above there is not cast, <code>T::Output</code> is simply the right type.</p>\n\n<p><strong>Edit to add another possible solution using std::convert::From</strong></p>\n\n<p>The most (I think) generic implementation is when you know that the cast from <code>T::Output</code> to T is possible. You can bound <code>T</code> to implement <code>From</code> for <code>T::Output</code>.\nThis is a complete example:</p>\n\n<pre><code>use std::ops::Div;\nuse std::convert::From;\n\nfn divide&lt;T: Div&gt;(a: T, b: T) -&gt; T\n    where T: From&lt;&lt;T as Div&gt;::Output&gt;\n{\n    T::from(a / b)\n}\n\n#[derive(Debug)]\nstruct Bip(u32);\n\nimpl Div for Bip {\n    type Output = f32;\n\n    fn div(self, rhs: Bip) -&gt; f32 {\n        (self.0 / rhs.0) as f32\n    }\n}\n\nimpl From&lt;f32&gt; for Bip {\n    fn from(value: f32) -&gt; Self {\n        Bip(value as u32)\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", divide(12, 4));\n    println!(\"{:?}\", divide(Bip(12), Bip(4)));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 3, "creation_date": 1434961539, "post_id": 30973307, "comment_id": 49981337, "body": "Good point on the <code>=</code> constraint. I don&#39;t find too much of that in the official docs, can you give us some references ?? However to add even more stuff, there&#39;s the case when You can require the <code>From</code> trait to be implemented for <code>T</code>. (I edited my response again)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 1, "creation_date": 1434963694, "post_id": 30973307, "comment_id": 49982569, "body": "@AndreaP: It&#39;s alluded to at the very end of the <a href=\"https://doc.rust-lang.org/book/associated-types.html#trait-objects-with-associated-types\" rel=\"nofollow noreferrer\">Associated Types</a> chapter. There is not much to say about them, so the docs don&#39;t say much, but I admit it&#39;s easy to miss."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1434954416, "creation_date": 1434954416, "answer_id": 30973307, "question_id": 30942408, "link": "https://stackoverflow.com/questions/30942408/casting-to-a-generic-type/30973307#30973307", "title": "Casting to a generic type", "body": "<p>Andreas' answer explains why the cast is impossible, and that making the function as generic as possible solves this issue.</p>\n\n<p>It is not, however, the only solution. Rust also supports the ability to constrain the associated types (<code>Output</code> here) of a generic function.</p>\n\n<p>An alternative would be:</p>\n\n<pre><code>use std::ops::Div;\n\nfn divide&lt;T&gt;(a: T, b: T) -&gt; T\n    where T: Div&lt;Output = T&gt;\n{\n    a / b\n}\n</code></pre>\n\n<p>The <code>&lt;Output = T&gt;</code> bit instructs the compiler to only accept in this functions types <code>T</code> for which the implementation of <code>Div</code> has an <code>Output</code> equal to <code>T</code>. This is obviously more restricting, but it allows ensuring that the result of <code>divide</code> is of type <code>T</code>.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3625, "favorite_count": 0, "accepted_answer_id": 30942496, "answer_count": 2, "score": 12, "last_activity_date": 1434961256, "creation_date": 1434729327, "last_edit_date": 1434735441, "question_id": 30942408, "link": "https://stackoverflow.com/questions/30942408/casting-to-a-generic-type", "title": "Casting to a generic type", "body": "<p>I have a newbie question about generics in Rust (version 1.0).</p>\n\n<p>Let's say I write a generic function to do division. Never mind the usefulness of such a function; it's a simple function to keep this question simple.</p>\n\n<pre><code>fn divide&lt;T: std::ops::Div&gt;(a: T, b: T) -&gt; T {\n    a / b\n}\n\nfn main() {\n    println!(\"{}\", divide(42, 18))\n}\n</code></pre>\n\n<p>This program fails to compile.</p>\n\n<pre><code>src/main.rs:2:5: 2:10 error: mismatched types:\n expected `T`,\n    found `&lt;T as core::ops::Div&gt;::Output`\n(expected type parameter,\n    found associated type) [E0308]\nsrc/main.rs:2     a / b\n                  ^~~~~\n</code></pre>\n\n<p>I understand that the compiler error is telling me that the result of the division operation is type <code>Output</code>, not <code>T</code>, and I see the <code>Output</code> type in the <a href=\"https://doc.rust-lang.org/std/ops/trait.Div.html\" rel=\"noreferrer\">standard library documentation</a>.</p>\n\n<p>How do I convert from <code>Output</code> to <code>T</code>? I try to use <code>as</code> to cast.</p>\n\n<pre><code>fn divide&lt;T: std::ops::Div&gt;(a: T, b: T) -&gt; T {\n    (a / b) as T\n}\n\nfn main() {\n    println!(\"{}\", divide(42, 18))\n}\n</code></pre>\n\n<p>This causes a different compiler error.</p>\n\n<pre><code>src/main.rs:2:5: 2:17 error: non-scalar cast: `&lt;T as core::ops::Div&gt;::Output` as `T`\nsrc/main.rs:2     (a / b) as T\n                  ^~~~~~~~~~~~\n</code></pre>\n\n<p>I'm out of ideas to make this work, and I realize I lack understanding of something fundamental about the language here, but I don't even know what to look for to make this work. Help?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1434719593, "post_id": 30938596, "comment_id": 49912897, "body": "Why doesn&#39;t it complain about <code>new_with_param</code> though? It also requires reserving the right amount of space on the stack of its caller."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 0, "creation_date": 1434721175, "post_id": 30938596, "comment_id": 49914012, "body": "So my idea was correct, but then why <code>Size</code> is not required in generic structs ?? I updated the question."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1434721335, "post_id": 30938596, "comment_id": 49914129, "body": "@Matthieu M. The <code>new_with_param</code> is just a trait method definition, not an implementation."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 3, "creation_date": 1434722561, "post_id": 30938596, "comment_id": 49915060, "body": "@AndreaP: a <code>struct</code> is always <code>Sized</code> by default."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 0, "creation_date": 1434723095, "post_id": 30938596, "comment_id": 49915471, "body": "I think I got it. Apparently, the generic type <code>T</code>(not the struct) is by default treated as Sized for struct (unless you put <code>?Sized</code>) but not for Traits. <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/unsized-types.html</a>"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 6, "last_activity_date": 1434718184, "creation_date": 1434718184, "answer_id": 30938596, "question_id": 30938499, "link": "https://stackoverflow.com/questions/30938499/why-is-the-sized-bound-necessary-in-this-trait/30938596#30938596", "title": "Why is the `Sized` bound necessary in this trait?", "body": "<p>Let's see what would happen if you did this with an unsized type.</p>\n\n<p><code>new()</code> <em>moves</em> the result of your <code>new_with_param(_)</code> method to the caller. But unless the type is sized, how many bytes should be moved? We simply cannot know. That's why move semantics require <code>Sized</code> types.</p>\n\n<p>Note: The various <code>Box</code>es have been designed to offer runtime services for exactly this problem.</p>\n"}, {"comments": [{"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 4, "creation_date": 1434727641, "post_id": 30941589, "comment_id": 49918717, "body": "Thanks for such a complete answer. I didn&#39;t know all the &quot;by default is Sized but Self is not&quot; part. That&#39;s the main reason I was puzzled."}, {"owner": {"reputation": 185, "user_id": 6165740, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f365e2ce66ac98048b63e6d1a35b3d32?s=128&d=identicon&r=PG&f=1", "display_name": "Cryptor", "link": "https://stackoverflow.com/users/6165740/cryptor"}, "edited": false, "score": 1, "creation_date": 1522914525, "post_id": 30941589, "comment_id": 86343591, "body": "@Vladimir unfortunately <a href=\"https://github.com/rust-lang/book/blob/master/second-edition/src/ch19-03-advanced-traits.md\" rel=\"nofollow noreferrer\">Advanced Traits</a> and <a href=\"https://github.com/rust-lang/book/blob/master/second-edition/src/ch19-04-advanced-types.md\" rel=\"nofollow noreferrer\">Advanced Types</a> chapters of the Rust Book are frozen already. Otherwise you should definitely consider to propose your explanation there"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 106, "last_activity_date": 1516331279, "last_edit_date": 1516331279, "creation_date": 1434726685, "answer_id": 30941589, "question_id": 30938499, "link": "https://stackoverflow.com/questions/30938499/why-is-the-sized-bound-necessary-in-this-trait/30941589#30941589", "title": "Why is the `Sized` bound necessary in this trait?", "body": "<p>As you probably already know, types in Rust can be sized and unsized. Unsized types, as their name suggests, do not have a size required to store values of this type which is known to the compiler. For example, <code>[u32]</code> is an unsized array of <code>u32</code>s; because the number of elements is not specified anywhere, the compiler doesn't know its size. Another example is a bare trait object type, for example, <code>Display</code>, when it is used directly as a type:</p>\n\n<pre><code>let x: Display = ...;\n</code></pre>\n\n<p>In this case, the compiler does not know which type is actually used here, it is erased, therefore it does not know the size of values of these types. The above line is not valid - <strong>you can't make a local variable without knowing its size</strong> (to allocate enough bytes on the stack), and you <strong>can't pass the value of an unsized type into a function as an argument or return it from one</strong>.</p>\n\n<p>Unsized types can be used through a pointer, however, which can carry additional information - the length of available data for slices (<code>&amp;[u32]</code>) or a pointer to a virtual table (<code>Box&lt;SomeTrait&gt;</code>). Because pointers always have a fixed and known size, they can be stored in local variables and be passed into or returned from functions.</p>\n\n<p>Given any concrete type you can always say whether it is sized or unsized. With generics, however, a question arises - is some type parameter sized or not?</p>\n\n<pre><code>fn generic_fn&lt;T&gt;(x: T) -&gt; T { ... }\n</code></pre>\n\n<p>If <code>T</code> is unsized, then such a function definition is incorrect, as you can't pass unsized values around directly. If it is sized, then all is OK.</p>\n\n<p>In Rust all generic type parameters are sized by default everywhere - in functions, in structs and in traits. They have an implicit <code>Sized</code> bound;  <code>Sized</code> is a trait for marking sized types:</p>\n\n<pre><code>fn generic_fn&lt;T: Sized&gt;(x: T) -&gt; T { ... }\n</code></pre>\n\n<p>This is because in the overwhelming number of times you want your generic parameters to be sized. Sometimes, however, you'd want to opt-out of sizedness, and this can be done with <code>?Sized</code> bound:</p>\n\n<pre><code>fn generic_fn&lt;T: ?Sized&gt;(x: &amp;T) -&gt; u32 { ... }\n</code></pre>\n\n<p>Now <code>generic_fn</code> can be called like <code>generic_fn(\"abcde\")</code>, and <code>T</code> will be instantiated with <code>str</code> which is unsized, but that's OK - this function accepts a reference to <code>T</code>, so nothing bad happens.</p>\n\n<p>However, there is another place where question of sizedness is important. Traits in Rust are always implemented for some type:</p>\n\n<pre><code>trait A {\n    fn do_something(&amp;self);\n}\n\nstruct X;\nimpl A for X {\n    fn do_something(&amp;self) {}\n}\n</code></pre>\n\n<p>However, this is only necessary for convenience and practicality purposes. It is possible to define traits to always take one type parameter and to not specify the type the trait is implemented for:</p>\n\n<pre><code>// this is not actual Rust but some Rust-like language\n\ntrait A&lt;T&gt; {\n    fn do_something(t: &amp;T);\n}\n\nstruct X;\nimpl A&lt;X&gt; {\n    fn do_something(t: &amp;X) {}\n}\n</code></pre>\n\n<p>That's how Haskell type classes work, and, in fact, that's how traits are actually implemented in Rust at a lower level.</p>\n\n<p>Each trait in Rust has an implicit type parameter, called <code>Self</code>, which designates the type this trait is implemented for. It is always available in the body of the trait:</p>\n\n<pre><code>trait A {\n    fn do_something(t: &amp;Self);\n}\n</code></pre>\n\n<p>This is where the question of sizedness comes into the picture. Is the <code>Self</code> parameter sized?</p>\n\n<p>It turns out that no, <code>Self</code> is not sized by default in Rust. Each trait has an implicit <code>?Sized</code> bound on <code>Self</code>. One of the reasons this is needed because there are a lot of traits which can be implemented for unsized types and still work. For example, any trait which only contains methods which only take and return <code>Self</code> by reference can be implemented for unsized types. You can read more about motivation in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0546-Self-not-sized-by-default.md\" rel=\"noreferrer\">RFC 546</a>.</p>\n\n<p>Sizedness is not an issue when you only define the signature of the trait and its methods. Because there is no actual code in these definitions, the compiler can't assume anything. However, when you start writing generic code which uses this trait, which includes default methods because they take an implicit <code>Self</code> parameter, you should take sizedness into account. Because <code>Self</code> is not sized by default, default trait methods can't return <code>Self</code> by value or take it as a parameter by value. Consequently, you either need to specify that <code>Self</code> must be sized by default:</p>\n\n<pre><code>trait A: Sized { ... }\n</code></pre>\n\n<p>or you can specify that a method can only be called if <code>Self</code> is sized:</p>\n\n<pre><code>trait WithConstructor {\n    fn new_with_param(param: usize) -&gt; Self;\n\n    fn new() -&gt; Self\n    where\n        Self: Sized,\n    {\n        Self::new_with_param(0)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14688, "favorite_count": 18, "accepted_answer_id": 30941589, "answer_count": 2, "score": 42, "last_activity_date": 1516331279, "creation_date": 1434717906, "last_edit_date": 1516330986, "question_id": 30938499, "link": "https://stackoverflow.com/questions/30938499/why-is-the-sized-bound-necessary-in-this-trait", "title": "Why is the `Sized` bound necessary in this trait?", "body": "<p>I have a trait with two associated functions:</p>\n\n<pre><code>trait WithConstructor: Sized {\n    fn new_with_param(param: usize) -&gt; Self;\n\n    fn new() -&gt; Self {\n        Self::new_with_param(0)\n    }\n}\n</code></pre>\n\n<p>Why does the default implementation of the second method (<code>new()</code>) force me to put the <code>Sized</code> bound on the type? I think it's because of the stack pointer manipulation, but I'm not sure.</p>\n\n<p>If the compiler needs to know the size to allocate memory on the stack,\nwhy does the following example not require <code>Sized</code> for <code>T</code>?  </p>\n\n<pre><code>struct SimpleStruct&lt;T&gt; {\n    field: T,\n}\n\nfn main() {\n    let s = SimpleStruct { field: 0u32 };\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1434704149, "post_id": 30933567, "comment_id": 49902970, "body": "Don&#39;t use <code>to_string()</code> to convert <code>&amp;str</code> to <code>String</code> because it goes through the entire <code>std::fmt</code> machinery. You&#39;d want to use <code>into()</code> when <code>String</code> target type could be inferred from the context and <code>to_owned()</code> otherwise."}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 8, "last_activity_date": 1434703487, "creation_date": 1434703487, "answer_id": 30933772, "question_id": 30933567, "link": "https://stackoverflow.com/questions/30933567/create-a-vector-from-iterating-hashmap/30933772#30933772", "title": "Create a vector from iterating hashmap", "body": "<p>Your resulting Vec needs to own the Strings, so remove the <code>&amp;</code> before the <code>user.reference.clone()</code>.</p>\n\n<p>Playground URL: <a href=\"https://play.rust-lang.org/?gist=6a6b50ebf589fcce1dbf&amp;version=nightly\" rel=\"noreferrer\">https://play.rust-lang.org/?gist=6a6b50ebf589fcce1dbf&amp;version=nightly</a></p>\n\n<p>Gist URL: <a href=\"https://gist.github.com/6a6b50ebf589fcce1dbf\" rel=\"noreferrer\">https://gist.github.com/6a6b50ebf589fcce1dbf</a></p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8160, "favorite_count": 3, "accepted_answer_id": 30933772, "answer_count": 1, "score": 8, "last_activity_date": 1434703487, "creation_date": 1434702741, "question_id": 30933567, "link": "https://stackoverflow.com/questions/30933567/create-a-vector-from-iterating-hashmap", "title": "Create a vector from iterating hashmap", "body": "<p>What is the optional way in Rust to iterate a <code>HashMap</code> and collect the result into a <code>Vec</code>? This is my attempt so far:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct User {\n    reference: String,\n    email: String\n}\n\nfn main() {\n\n    let mut users: HashMap&lt;String, User&gt; = HashMap::new();\n    users.insert(\"first\".to_string(), User { reference: \"ref1\".to_string(), email: \"test@test.com\".to_string() });\n    users.insert(\"second\".to_string(), User { reference: \"ref2\".to_string(), email: \"test1@test.com\".to_string() });\n    users.insert(\"third\".to_string(), User { reference: \"ref3\".to_string(), email: \"test3@test.com\".to_string() });\n\n    //this is my failed attempt\n    let user_refs: Vec&lt;String&gt; = users.iter().map(|(_, user)| &amp;user.reference.clone()).collect();\n\n}\n</code></pre>\n\n<p>throws an error</p>\n\n<pre><code>src/main.rs:15:85: 15:94 error: the trait `core::iter::FromIterator&lt;&amp;collections::string::String&gt;` is not implemented for the type `collections::vec::Vec&lt;collections::string::String&gt;` [E0277]\nsrc/main.rs:15  let user_refs: Vec&lt;String&gt; = users.iter().map(|(_, user)| &amp;user.reference.clone()).collect();\n                                                                                                   ^~~~~~~~~\nsrc/main.rs:15:85: 15:94 note: a collection of type `collections::vec::Vec&lt;collections::string::String&gt;` cannot be built from an iterator over elements of type `&amp;collections::string::String`\nsrc/main.rs:15  let user_refs: Vec&lt;String&gt; = users.iter().map(|(_, user)| &amp;user.reference.clone()).collect();\n                                                                                                   ^~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["syntax", "rust", "traits", "lifetime", "associated-types"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1434700510, "post_id": 30932622, "comment_id": 49900960, "body": "Please split your question in two. Currently it contains two questions which are only marginally related, with the first one likely being unfit for Stackoverflow."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434700618, "post_id": 30932622, "comment_id": 49901030, "body": "For the second question - it would require associated types to have lifetime parameters: <code>type Shader&lt;&#39;a&gt; = OpenGLShader&lt;&#39;a&gt;</code>. This feature is known as higher-kinded types and it is not yet available in Rust. I&#39;m not writing this as an answer now because of the reason in the above comment."}, {"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434701563, "post_id": 30932622, "comment_id": 49901518, "body": "@VladimirMatveev I was considering just asking the first question, but then i thought that the second wouldn&#39;t matter if my &#39;abstract&#39; idea was flawed, so I included it. I you want I&#39;ll get rid of it."}, {"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434701674, "post_id": 30932622, "comment_id": 49901583, "body": "As for the second comment, it sounds like I&#39;m trying to achieve the impossible then. However could i turn <code>OpenGLGraphicsContext</code> into <code>OpenGLGraphicsContext&lt;&#39;f&gt;</code> and specify the lifetime for <code>Resources</code> as <code>Resources&lt;&#39;f&gt;</code> and then write  <code>type Shader = OpenGLShader&lt;&#39;f&gt;</code>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1434704055, "post_id": 30932622, "comment_id": 49902914, "body": "Yes, I think you can, because methods in your trait do not use <code>&#39;a</code>. You just need to be careful about handling lifetimes in the <code>OpenGLGraphicsContext</code> itself - you would probably need to use <a href=\"http://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\"><code>PhantomData</code></a>. It is not possible to do in general, though."}], "answers": [{"tags": [], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "is_accepted": false, "score": 0, "last_activity_date": 1435564944, "last_edit_date": 1435564944, "creation_date": 1434856984, "answer_id": 30960979, "question_id": 30932622, "link": "https://stackoverflow.com/questions/30932622/how-can-i-specify-lifetimes-in-associated-types/30960979#30960979", "title": "How can I specify lifetimes in associated types?", "body": "<p>I ended up switching to generics, which provided a successful implementation.</p>\n\n<p>Given the <code>Resources&lt;'a&gt;</code>, I can define <code>GraphicsContext</code> like so:</p>\n\n<pre><code>trait GraphicsContext&lt;'a, R: Resources&lt;'a&gt;&gt;\n</code></pre>\n\n<p>The 2 <code>'a</code> lifetimes above are needed for the <code>Shader&lt;'a&gt;</code> and <code>ShaderProgram&lt;'a&gt;</code> structs inside <code>Resources</code></p>\n\n<p>Then the OpenGL implementation can be provided. Note that <code>Resources</code> has been changed to <code>OpenGLResources</code>.</p>\n\n<pre><code>                             // replaced here\nimpl&lt;'a&gt; GraphicsContext&lt;'a, OpenGLResources&lt;'a&gt;&gt; for OpenGLGraphicsContext&lt;'a&gt; {\n\n    fn create_shader(&amp;'a self, ty: Type, source: &amp;str) -&gt; Result&lt;Shader&lt;'a&gt;, ShaderCreationError&gt; {\n        // do something\n    }\n\n}\n</code></pre>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 520, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1547830778, "creation_date": 1434699647, "last_edit_date": 1547830778, "question_id": 30932622, "link": "https://stackoverflow.com/questions/30932622/how-can-i-specify-lifetimes-in-associated-types", "title": "How can I specify lifetimes in associated types?", "body": "\n\n<p>I'm trying to get each <code>GraphicsContext</code> implementation to return a different implementation of <code>Shader</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Resources {\n    type Shader: shader::Shader;\n}\n\npub trait GraphicsContext {\n\n    type Resources: Resources;\n\n    /// Creates a shader object\n    fn create_shader&lt;'a&gt;(&amp;'a self, shader::Stage, source: &amp;str)\n        -&gt; Result&lt;&lt;&lt;Self as GraphicsContext&gt;::Resources as Resources&gt;::Shader,\n                  shader::CreateError&gt;;\n\n    /// Creates a shader program object\n    fn create_shader_program&lt;'a&gt;(&amp;'a self, shaders: Vec&lt;&amp;shader::Shader&gt;)\n        -&gt; Result&lt;Box&lt;shader::ShaderProgram + 'a&gt;, shader::ProgramCreateError&gt;;\n\n    // more to come\n\n}\n</code></pre>\n\n<p>This is so that the <code>create_shader_program</code> method (and other methods) know the concrete type of <code>Shader</code> so that they can call implementation specific methods on the shader object.</p>\n\n<p>I don't want to put these methods (such as <code>setCurrent</code> or <code>attach</code>) into a trait that all implementations must use. Not all graphics APIs use the same system: OpenGL is bind/unbind, Vulkan will be structs/set fields, DirectX is something else etc.</p>\n\n<p><strong>Firstly, I ask is this the right way to structure my engine.</strong> I believe that in my framework/application level code that require these <code>Shader</code> objects, I can specify the concrete type based upon the current type of the <code>Context</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// almost certain this doesn't compile, but should be possible in theory\n// I'm trying to say:\n// the type of the `shader` argument must match to the associated type\n// contained within the `context`\nfn do_something_with_shader(context: &amp;GraphicsContext,\n                            shader: ??**GraphicsContext::Resources::Shader**??)\n                           -&gt; Result&lt;Foo, Bar&gt;;\n</code></pre>\n\n<p>or perhaps:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn do_something_with_shader&lt;T&gt;(context: &amp;GraphicsContext&lt;T&gt;,\n                               shader: ??**T::Shader**??)\n    where T: GraphicsContext::Resources -&gt; Result&lt;Foo, Bar&gt;;\n</code></pre>\n\n<p>Is something like this possible? Hopefully you can see I sort of understand the basic generics (I come from Java), but this is driving me insane (it does feel <em>very</em> hackish).</p>\n\n<p>If that is the right way to go, then there comes a problem with my implementation. <code>rustc</code> wants the associated type to have a lifetime specified.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>wrong number of lifetime parameters: expected 1, found 0 [E0107]\nopal_driver_gl/src/context.rs:23     type Shader = Shader;\n</code></pre>\n\n<p>My <code>OpenGLShader</code> struct is actually of type <code>OpenGLShader&lt;'a&gt;</code>, so the error makes sense. My question is where do I get the lifetime from in this bunch of code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct OpenGLResources;\n\nimpl Resources for OpenGLResources {\n    type Shader = OpenGLShader;\n}\n\nimpl GraphicsContext for OpenGLGraphicsContext {\n\n    type Resources = Resources;\n\n    /// Creates a shader object\n    fn create_shader&lt;'a&gt;(&amp;'a self, stage: core_shader::Stage, source: &amp;str)\n        -&gt; Result&lt;&lt;&lt;Self as GraphicsContext&gt;::Resources as Resources&gt;::Shader,\n                  core_shader::CreateError&gt; {\n       // impl goes here\n    }\n\n}\n</code></pre>\n\n<p>I tried attaching a lifetime to <code>OpenGLResources</code> and <code>OpenGLGraphicsContext</code>, which solved the error but then said <code>error: parameter 'a is never used</code>.</p>\n\n<p>So <strong>secondly, I ask how I can include that lifetime inside my associated type</strong>.</p>\n\n<p>Thanks so much if you can take a look at this. I feel that something like this must be possible to be checked at compile time but I'm pretty new to Rust so I just can't quite grok how to implement it.</p>\n"}, {"tags": ["multithreading", "unit-testing", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1434694276, "post_id": 30930547, "comment_id": 49897699, "body": "in case you don&#39;t care about threading but just want the panic-catching, you can use <a href=\"https://doc.rust-lang.org/nightly/std/thread/fn.catch_panic.html\" rel=\"nofollow noreferrer\"><code>std::thread::catch_panic</code></a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1434693991, "post_id": 30930668, "comment_id": 49897559, "body": "This is pretty generic advice, and most of the time <i>you</i> (the developer) should not implement <code>Send</code> by yourself: the compiler implements <code>Send</code> when it sees fit. I think you should review this answer, and maybe tailor it a bit more toward the specific bit of code the OP showed."}], "tags": [], "owner": {"reputation": 12952, "user_id": 2398375, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1a5530da29f23682b10bb5568076f83d?s=128&d=identicon&r=PG", "display_name": "Dioxin", "link": "https://stackoverflow.com/users/2398375/dioxin"}, "is_accepted": false, "score": 0, "last_activity_date": 1434692349, "creation_date": 1434692349, "answer_id": 30930668, "question_id": 30930547, "link": "https://stackoverflow.com/questions/30930547/how-can-i-send-a-function-to-another-thread/30930668#30930668", "title": "How can I send a function to another thread?", "body": "<p>As stated in the <a href=\"https://doc.rust-lang.org/book/concurrency.html\" rel=\"nofollow\">Rust HandBook's Concurrency section</a>:</p>\n\n<blockquote>\n  <p>When a type T implements Send, it indicates to the compiler that something of this type is able to have ownership transferred safely between threads.</p>\n</blockquote>\n\n<p>If you do not implement Send, ownership cannot be transfered between threads.</p>\n"}, {"comments": [{"owner": {"reputation": 305, "user_id": 1798668, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a3OyG.jpg?s=128&g=1", "display_name": "Nik Klassen", "link": "https://stackoverflow.com/users/1798668/nik-klassen"}, "edited": false, "score": 0, "creation_date": 1434766558, "post_id": 30932640, "comment_id": 49933181, "body": "Thanks, this solution was very descriptive and informative.  However, it blocks on the line <code>let mut fixture = fixture.lock().unwrap();</code> and doesn&#39;t continue.  Do you know why that would be?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 305, "user_id": 1798668, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a3OyG.jpg?s=128&g=1", "display_name": "Nik Klassen", "link": "https://stackoverflow.com/users/1798668/nik-klassen"}, "edited": false, "score": 0, "creation_date": 1434775264, "post_id": 30932640, "comment_id": 49934416, "body": "Indeed, you&#39;re right. This is because the temporary mutex guard obtained in the for loop initializer (<code>for t in fixture.lock()...</code>) is not freed until the end of the for block, which naturally prohibits from obtaining the lock in the child threads. The solution is to extract the vector separately. I&#39;ve updated my answer."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1434775342, "last_edit_date": 1434775342, "creation_date": 1434699745, "answer_id": 30932640, "question_id": 30930547, "link": "https://stackoverflow.com/questions/30930547/how-can-i-send-a-function-to-another-thread/30932640#30932640", "title": "How can I send a function to another thread?", "body": "<p>There are several problems with your code, I'll show you how to fix them one by one.</p>\n\n<p>The first problem is that you're using <code>map()</code> to iterate over an iterator. It won't work correctly because <code>map()</code> is lazy - unless you consume the iterator, the closure you passed to it won't run. The correct way is to use <code>for</code> loop:</p>\n\n<pre><code>for t in fixture().tests().iter() {\n</code></pre>\n\n<p>Second, you're iterating the vector of closures by reference:</p>\n\n<pre><code>fixture.tests().iter().map(|t| {\n</code></pre>\n\n<p><code>iter()</code> on a <code>Vec&lt;T&gt;</code> returns an iterator yielding items of type <code>&amp;T</code>, so your <code>t</code> will be of type <code>&amp;Box&lt;Fn(&amp;mut Self)&gt;</code>. However, <code>Box&lt;Fn(&amp;mut T)&gt;</code> does not implement <a href=\"http://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"noreferrer\"><code>Sync</code></a> by default (it is a trait object which have no information about the underlying type except that you specified explicitly), so <code>&amp;Box&lt;Fn(&amp;mut T)&gt;</code> can't be used across multiple threads. That's what the second error you see is about.</p>\n\n<p>Most likely you don't want to use these closures by reference; you probably want to move them to the spawned thread entirely. For this you need to use <code>into_iter()</code> instead of <code>iter()</code>:</p>\n\n<pre><code>for t in fixture.tests().into_iter() {\n</code></pre>\n\n<p>Now <code>t</code> will be of type <code>Box&lt;Fn(&amp;mut T)&gt;</code>. However, it still can't be sent across threads. Again, it is a trait object, and the compiler does not know if the type contained inside is <code>Send</code>. For this you need to add <code>Send</code> bound to the type of the closure:</p>\n\n<pre><code>fn tests(&amp;mut self) -&gt; Vec&lt;Box&lt;Fn(&amp;mut Self)+Send&gt;&gt;\n</code></pre>\n\n<p>Now the error about <code>Fn</code> is gone.</p>\n\n<p>The last error is about <code>Send</code> not being implemented for <code>T</code>. We need to add a <code>Send</code> bound on <code>T</code>:</p>\n\n<pre><code>pub fn test_fixture_runner&lt;T: TestFixture+Send&gt;(fixture: &amp;mut T) {\n</code></pre>\n\n<p>And now the error becomes more comprehensible:</p>\n\n<pre><code>test.rs:18:22: 18:35 error: captured variable `fixture` does not outlive the enclosing closure\ntest.rs:18         let handle = thread::spawn(move || {\n                                ^~~~~~~~~~~~~\nnote: in expansion of closure expansion\ntest.rs:18:5: 28:6 note: expansion site\ntest.rs:15:66: 31:2 note: captured variable is valid for the anonymous lifetime #1 defined on the block at 15:65\ntest.rs:15 pub fn test_fixture_runner&lt;T: TestFixture+Send&gt;(fixture: &amp;mut T) {\ntest.rs:16     fixture.setup();\ntest.rs:17\ntest.rs:18     for t in fixture.tests().into_iter() {\ntest.rs:19         let handle = thread::spawn(move || {\ntest.rs:20             fixture.before_each();\n           ...\nnote: closure is valid for the static lifetime\n</code></pre>\n\n<p>This error happens because you're trying to use a reference in a <code>spawn()</code>ed thread. <code>spawn()</code> requires its closure argument to have <code>'static</code> bound, that is, its captured environment must not contain references with non-<code>'static</code> lifetimes. But that's exactly what happens here - <code>&amp;mut T</code> is not <code>'static</code>. <code>spawn()</code> design does not prohibit avoiding joining, so it is explicitly written to disallow passing non-<code>'static</code> references to the spawned thread.</p>\n\n<p>Note that while you're using <code>&amp;mut T</code>, this error is unavoidable, even if you put <code>&amp;mut T</code> in <code>Arc</code>, because then the lifetime of <code>&amp;mut T</code> would be \"stored\" in <code>Arc</code> and so <code>Arc&lt;Mutex&lt;&amp;mut T&gt;&gt;</code> also won't be <code>'static</code>.</p>\n\n<p>There are two ways to do what you want.</p>\n\n<p>First, you can use the unstable <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"noreferrer\"><code>thread::scoped()</code></a> API. It is unstable because <a href=\"https://github.com/rust-lang/rust/issues/24292\" rel=\"noreferrer\">it is shown</a> to allow memory unsafety in safe code, and the plan is to provide some kind of replacement for it in the future. However, you can use it in nightly Rust (it won't cause memory unsafety by itself, only in specifically crafted situations):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn test_fixture_runner&lt;T: TestFixture+Send&gt;(fixture: &amp;mut T) {\n    fixture.setup();\n\n    let tests = fixture.lock().unwrap().tests();\n    for t in tests.into_iter() {\n        let f = &amp;mut *fixture;\n\n        let handle = thread::scoped(move || {\n            f.before_each();\n            t(f);\n            f.after_each();\n        });\n\n        handle.join();\n    }\n\n    fixture.teardown();\n}\n</code></pre>\n\n<p>This code compiles because <code>scoped()</code> is written in such a way that it guarantees (in most cases) that the thread won't outlive all captured references. I had to reborrow <code>fixture</code> because otherwise (because <code>&amp;mut</code> references aren't copyable) it would be moved into the thread and <code>fixture.teardown()</code> would be prohibited. Also I had to extract <code>tests</code> variable because otherwise the mutex will be locked by the main thread for the duration of the for loop which would naturally disallow locking it in the child threads.</p>\n\n<p>However, with <code>scoped()</code> you can't isolate the panic in the child thread. If the child thread panics, this panic will be rethrown from <code>join()</code> call. This may or may not be a problem in general, but I think it <em>is</em> a problem for your code.</p>\n\n<p>Another way is to refactor your code to hold the fixture in <code>Arc&lt;Mutex&lt;..&gt;&gt;</code> from the beginning:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn test_fixture_runner&lt;T: TestFixture + Send + 'static&gt;(fixture: Arc&lt;Mutex&lt;T&gt;&gt;) {\n    fixture.lock().unwrap().setup();\n\n    for t in fixture.lock().unwrap().tests().into_iter() {\n        let fixture = fixture.clone();\n\n        let handle = thread::spawn(move || {\n            let mut fixture = fixture.lock().unwrap();\n\n            fixture.before_each();\n            t(&amp;mut *fixture);\n            fixture.after_each();\n        });\n\n        if let Err(_) = handle.join() {\n            println!(\"Test failed!\")\n        } \n    }\n\n    fixture.lock().unwrap().teardown();\n}\n</code></pre>\n\n<p>Note that now <code>T</code> has also to be <code>'static</code>, again, because otherwise it couldn't be used with <code>thread::spawn()</code> as it requires <code>'static</code>. <code>fixture</code> inside the inner closure is not <code>&amp;mut T</code> but a <code>MutexGuard&lt;T&gt;</code>, and so it has to be explicitly converted to <code>&amp;mut T</code> in order to pass it to <code>t</code>.</p>\n\n<p>This may seem overly and unnecessarily complex, however, such design of a programming language does prevent you from making many errors in multithreaded programming. Each of the above errors we have seen is valid - each of them would be a potential cause of memory unsafety or data races if it was ignored.</p>\n"}], "owner": {"reputation": 305, "user_id": 1798668, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a3OyG.jpg?s=128&g=1", "display_name": "Nik Klassen", "link": "https://stackoverflow.com/users/1798668/nik-klassen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2704, "favorite_count": 0, "accepted_answer_id": 30932640, "answer_count": 2, "score": 5, "last_activity_date": 1434775342, "creation_date": 1434691762, "last_edit_date": 1434713959, "question_id": 30930547, "link": "https://stackoverflow.com/questions/30930547/how-can-i-send-a-function-to-another-thread", "title": "How can I send a function to another thread?", "body": "<p>I am attempting to write a simpler unit test runner for my Rust project.  I have created a TestFixture trait that my test fixture structs will implement, similar to inheriting from the unit test base class in other testing frameworks.  The trait is fairly simple.  This is my test fixture</p>\n\n<pre><code>pub trait TestFixture {\n    fn setup(&amp;mut self) -&gt; () {}\n    fn teardown(&amp;mut self) -&gt; () {}\n    fn before_each(&amp;mut self) -&gt; () {}\n    fn after_each(&amp;mut self) -&gt; () {}\n    fn tests(&amp;mut self) -&gt; Vec&lt;Box&lt;Fn(&amp;mut Self)&gt;&gt;\n        where Self: Sized {\n        Vec::new()\n    }\n}\n</code></pre>\n\n<p>My test running function is as follows</p>\n\n<pre><code>pub fn test_fixture_runner&lt;T: TestFixture&gt;(fixture: &amp;mut T) {\n    fixture.setup();\n\n    let _r = fixture.tests().iter().map(|t| {\n        let handle = thread::spawn(move || {\n            fixture.before_each();\n            t(fixture);\n            fixture.after_each();\n        });\n\n        if let Err(_) = handle.join() {\n            println!(\"Test failed!\")\n        } \n    });\n\n    fixture.teardown();\n}\n</code></pre>\n\n<p>I get the error</p>\n\n<pre><code>src/tests.rs:73:22: 73:35 error: the trait `core::marker::Send` is not implemented for the type `T` [E0277]\nsrc/tests.rs:73         let handle = thread::spawn(move || {\n                                     ^~~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/tests.rs:69:41: 84:6 note: expansion site\nsrc/tests.rs:73:22: 73:35 note: `T` cannot be sent between threads safely\nsrc/tests.rs:73         let handle = thread::spawn(move || {\n                                     ^~~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/tests.rs:69:41: 84:6 note: expansion site\nsrc/tests.rs:73:22: 73:35 error: the trait `core::marker::Sync` is not implemented for the type `for&lt;'r&gt; core::ops::Fn(&amp;'r mut T)` [E0277]\nsrc/tests.rs:73         let handle = thread::spawn(move || {\n                                     ^~~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/tests.rs:69:41: 84:6 note: expansion site\nsrc/tests.rs:73:22: 73:35 note: `for&lt;'r&gt; core::ops::Fn(&amp;'r mut T)` cannot be shared between threads safely\nsrc/tests.rs:73         let handle = thread::spawn(move || {\n                                     ^~~~~~~~~~~~~\nnote: in expansion of closure expansion\n</code></pre>\n\n<p>I have tried adding Arcs around the types being sent to the thread, no dice, same error.</p>\n\n<pre><code>pub fn test_fixture_runner&lt;T: TestFixture&gt;(fixture: &amp;mut T) {\n    fixture.setup();\n\n    let fix_arc = Arc::new(Mutex::new(fixture));\n    let _r = fixture.tests().iter().map(|t| {\n        let test_arc = Arc::new(Mutex::new(t));\n        let fix_arc_clone = fix_arc.clone();\n        let test_arc_clone = test_arc.clone();\n        let handle = thread::spawn(move || {\n            let thread_test = test_arc_clone.lock().unwrap();\n            let thread_fix = fix_arc_clone.lock().unwrap();\n            (*thread_fix).before_each();\n            (*thread_test)(*thread_fix);\n            (*thread_fix).after_each();\n        });\n\n        if let Err(_) = handle.join() {\n            println!(\"Test failed!\")\n        } \n    });\n\n    fixture.teardown();\n}\n</code></pre>\n\n<p>A sample test fixture would be something like</p>\n\n<pre><code>struct BuiltinTests {\n    pwd: PathBuf\n}\n\nimpl TestFixture for BuiltinTests {\n    fn setup(&amp;mut self) {\n        let mut pwd = env::temp_dir();\n        pwd.push(\"pwd\");\n\n        fs::create_dir(&amp;pwd);\n        self.pwd = pwd;\n    }\n\n    fn teardown(&amp;mut self) {\n        fs::remove_dir(&amp;self.pwd);\n    }\n\n    fn tests(&amp;mut self) -&gt; Vec&lt;Box&lt;Fn(&amp;mut BuiltinTests)&gt;&gt; {\n        vec![Box::new(BuiltinTests::cd_with_no_args)]\n    }\n}\n\nimpl BuiltinTests {\n    fn new() -&gt; BuiltinTests {\n        BuiltinTests {\n            pwd: PathBuf::new()\n        }\n    }\n}\n\nfn cd_with_no_args(&amp;mut self) {\n    let home = String::from(\"/\");\n    env::set_var(\"HOME\", &amp;home);\n\n    let mut cd = Cd::new();\n    cd.run(&amp;[]);\n\n    assert_eq!(env::var(\"PWD\"), Ok(home));\n}\n\n#[test]\nfn cd_tests() {\n    let mut builtin_tests = BuiltinTests::new();\n    test_fixture_runner(&amp;mut builtin_tests);\n}\n</code></pre>\n\n<p>My whole intention of using threads is isolation from the test runner.  If a test fails an assertion it causes a panic which kills the runner.  Thanks for any insight, I'm willing to change my design if that will fix the panic problem.</p>\n"}, {"tags": ["rust", "nickel"], "comments": [{"owner": {"reputation": 295000, "user_id": 208809, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/LXDBV.png?s=128&g=1", "display_name": "Gordon", "link": "https://stackoverflow.com/users/208809/gordon"}, "edited": false, "score": 0, "creation_date": 1434715709, "post_id": 30928235, "comment_id": 49910261, "body": "What happens when you uncomment the commented lines?"}, {"owner": {"reputation": 469, "user_id": 3816764, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b0186345e573ed7e14119054caea8e81?s=128&d=identicon&r=PG&f=1", "display_name": "user3816764", "link": "https://stackoverflow.com/users/3816764/user3816764"}, "reply_to_user": {"reputation": 295000, "user_id": 208809, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/LXDBV.png?s=128&g=1", "display_name": "Gordon", "link": "https://stackoverflow.com/users/208809/gordon"}, "edited": false, "score": 0, "creation_date": 1434752868, "post_id": 30928235, "comment_id": 49930672, "body": "It doesn&#39;t pick up either variable in this case. I&#39;ve tried many different ways, I&#39;m just not sure if it&#39;s possible, the docs don&#39;t mention it."}], "answers": [{"comments": [{"owner": {"reputation": 469, "user_id": 3816764, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b0186345e573ed7e14119054caea8e81?s=128&d=identicon&r=PG&f=1", "display_name": "user3816764", "link": "https://stackoverflow.com/users/3816764/user3816764"}, "edited": false, "score": 0, "creation_date": 1434758270, "post_id": 30948341, "comment_id": 49931936, "body": "Oh, haha, it was just example text. I wouldn&#39;t send a password like that, don&#39;t worry :P Why POST over GET? I&#39;m not overly familiar with this sort of thing."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 469, "user_id": 3816764, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b0186345e573ed7e14119054caea8e81?s=128&d=identicon&r=PG&f=1", "display_name": "user3816764", "link": "https://stackoverflow.com/users/3816764/user3816764"}, "edited": false, "score": 0, "creation_date": 1434780648, "post_id": 30948341, "comment_id": 49935451, "body": "see <a href=\"http://stackoverflow.com/questions/504947/when-should-i-use-get-or-post-method-whats-the-difference-between-them\" title=\"when should i use get or post method whats the difference between them\">stackoverflow.com/questions/504947/&hellip;</a> and its answers"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 2, "last_activity_date": 1434753835, "creation_date": 1434753835, "answer_id": 30948341, "question_id": 30928235, "link": "https://stackoverflow.com/questions/30928235/how-to-use-multiple-variables-in-routes-with-nickel/30948341#30948341", "title": "How to use multiple variables in routes with Nickel?", "body": "<p>You need a separator. For example:</p>\n\n<pre><code>#[macro_use] extern crate nickel;\n\nuse nickel::Nickel;\n\nfn main() {\n    let mut server = Nickel::new();\n\n    server.utilize(router! {\n        get \"/start/:userid/:passwd\" =&gt; |request, _response| {\n            println!(\"this is user: {:?} = {:?}\",\n                     request.param(\"userid\"),\n                     request.param(\"passwd\")\n                    );\n\n            \"Hello world!\"\n        }\n    });\n\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n\n<p>It looks from your question like you might be expecting <code>passwd</code> as some sort of query parameter, rather than in the URL, though.</p>\n\n<p>I would caution you against creating a session with <code>GET</code>, and you should be using <code>POST</code> instead.</p>\n"}], "owner": {"reputation": 469, "user_id": 3816764, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b0186345e573ed7e14119054caea8e81?s=128&d=identicon&r=PG&f=1", "display_name": "user3816764", "link": "https://stackoverflow.com/users/3816764/user3816764"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 174, "favorite_count": 0, "accepted_answer_id": 30948341, "answer_count": 1, "score": 2, "last_activity_date": 1434753835, "creation_date": 1434675009, "last_edit_date": 1434708774, "question_id": 30928235, "link": "https://stackoverflow.com/questions/30928235/how-to-use-multiple-variables-in-routes-with-nickel", "title": "How to use multiple variables in routes with Nickel?", "body": "<p><a href=\"http://docs.nickel.rs/nickel/\" rel=\"nofollow\">Nickel</a> states that you can use variables in the URLs, which sounds very useful, but is it possible to use multiple variables?</p>\n\n<p>Something like:</p>\n\n<pre><code>www.example.com/login/:userid?:apikey?:etc\n\nserver.get(\"/start/:userid?:passwd\", middleware! { |request|\n    // format!(\"This is user: {:?} = {:?}\",\n    // request.param(\"userid\"),\n    // request.param(\"passwd\")\n    // );\n});\n</code></pre>\n"}, {"tags": ["build", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 6477, "user_id": 3961271, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/2cKoq.jpg?s=128&g=1", "display_name": "Woodrow Barlow", "link": "https://stackoverflow.com/users/3961271/woodrow-barlow"}, "edited": false, "score": 0, "creation_date": 1434652197, "post_id": 30922911, "comment_id": 49882918, "body": "is there an equivalent to <code>CARGO_TARGET_DIR</code>, except for the src directory? i&#39;d rather not explicitly give the path to all the files."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 6477, "user_id": 3961271, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/2cKoq.jpg?s=128&g=1", "display_name": "Woodrow Barlow", "link": "https://stackoverflow.com/users/3961271/woodrow-barlow"}, "edited": false, "score": 0, "creation_date": 1434653703, "post_id": 30922911, "comment_id": 49883754, "body": "you only need to specify the <code>lib.rs</code>, all the sub-modules don&#39;t need to be specified. In case you mean <code>[bin]</code>, <code>[test]</code> and <code>[bench]</code> targets, then yes, you need to specify one for each of them."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1434651757, "creation_date": 1434651757, "answer_id": 30922911, "question_id": 30922372, "link": "https://stackoverflow.com/questions/30922372/specify-non-standard-source-folder/30922911#30922911", "title": "Specify Non-Standard Source Folder", "body": "<p>To manually set the path to your <code>lib.rs</code> you can create a <code>[lib]</code> section in your <code>Cargo.toml</code> and set <code>path</code> to <code>src/rust/lib.rs</code>. The relevant Documentation can be found here: <a href=\"http://doc.crates.io/manifest.html#configuring-a-target\" rel=\"noreferrer\">http://doc.crates.io/manifest.html#configuring-a-target</a></p>\n\n<p>For the output, you can set the environment variable <code>CARGO_TARGET_DIR</code> to <code>out</code>. Relevant documentation can be found here: <a href=\"http://doc.crates.io/config.html#environment-variables\" rel=\"noreferrer\">http://doc.crates.io/config.html#environment-variables</a></p>\n\n<p>Or you can create a <code>.cargo/config</code> file (also a <code>toml</code>-file, but no file extension) and add a <code>[build]</code> section with the key <code>target-dir</code> set to <code>out</code>. Relevant documentation can be found here: <a href=\"http://doc.crates.io/config.html#configuration-keys\" rel=\"noreferrer\">http://doc.crates.io/config.html#configuration-keys</a></p>\n"}], "owner": {"reputation": 6477, "user_id": 3961271, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/2cKoq.jpg?s=128&g=1", "display_name": "Woodrow Barlow", "link": "https://stackoverflow.com/users/3961271/woodrow-barlow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1220, "favorite_count": 0, "accepted_answer_id": 30922911, "answer_count": 1, "score": 6, "last_activity_date": 1462456952, "creation_date": 1434649983, "last_edit_date": 1462456952, "question_id": 30922372, "link": "https://stackoverflow.com/questions/30922372/specify-non-standard-source-folder", "title": "Specify Non-Standard Source Folder", "body": "<p>I am writing a multi-language project (a Java library which loads and calls Rust functions through the FFI), and so I want to divide my code files up a little bit. Rather than just putting everything in <code>src</code>, I've made folders <code>src/rust</code> and <code>src/java</code>. How can I tell Cargo that my <code>lib.rs</code> file (and all of my other source files) is in <code>src/rust</code> rather than <code>src</code>? Additionally, how can I tell it to output to <code>out/rust</code> rather than <code>target</code>?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 25, "last_activity_date": 1522954345, "last_edit_date": 1522954345, "creation_date": 1434625534, "answer_id": 30913647, "question_id": 30913384, "link": "https://stackoverflow.com/questions/30913384/is-it-possible-to-filter-on-a-vector-in-place/30913647#30913647", "title": "is it possible to filter on a vector in-place?", "body": "<p>If you want to remove elements, you can use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain\" rel=\"noreferrer\"><code>retain()</code></a>, which removes elements from the vector if the closure returns <code>false</code>:</p>\n\n<pre><code>let mut vec = vec![1, 2, 3, 4];\nvec.retain(|&amp;x| x % 2 == 0);\nassert_eq!(vec, [2, 4]);\n</code></pre>\n\n<p>If you want to modify the elements in place, you have to do that in a <code>for x in vec.iter_mut()</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1522954682, "creation_date": 1522954682, "answer_id": 49679582, "question_id": 30913384, "link": "https://stackoverflow.com/questions/30913384/is-it-possible-to-filter-on-a-vector-in-place/49679582#49679582", "title": "is it possible to filter on a vector in-place?", "body": "<p>If you truly want to mutate the vector's elements <em>while</em> filtering it, you can use the nightly-only method <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain_filter\" rel=\"noreferrer\"><code>Vec::drain_filter</code></a>, an extremely flexible tool:</p>\n\n<pre><code>#![feature(drain_filter)]\n\nfn main() {\n    let mut vec = vec![1, 2, 3, 4];\n    vec.drain_filter(|x| {\n        if *x % 2 == 0 {\n            true\n        } else {\n            *x += 100;\n            false\n        }\n    });\n    assert_eq!(vec, [101, 103]);\n}\n</code></pre>\n\n<p>It also allows you to get the removed elements as the return value of the entire method is an iterator!</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2741, "favorite_count": 0, "accepted_answer_id": 30913647, "answer_count": 2, "score": 18, "last_activity_date": 1522954682, "creation_date": 1434624861, "last_edit_date": 1522954310, "question_id": 30913384, "link": "https://stackoverflow.com/questions/30913384/is-it-possible-to-filter-on-a-vector-in-place", "title": "is it possible to filter on a vector in-place?", "body": "<p>I'd like to remove some elements from a <code>Vec</code>, but <code>vec.iter().filter().collect()</code> creates a new vector with borrowed items. </p>\n\n<p>I'd like to mutate the original <code>Vec</code> without extra memory allocation (and keep memory of removed elements as an extra capacity of the vector).</p>\n"}, {"tags": ["websocket", "rust", "iron"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1434608479, "post_id": 30907776, "comment_id": 49853565, "body": "Your question seems awfully broad, at first glance (though it may just be me not knowing enough of the topic). Have you tried anything that could serve as a stepping stone for more full-fledged solutions, steering the answers in the direction you are interested in?"}, {"owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434617459, "post_id": 30907776, "comment_id": 49858889, "body": "Well, the fact is that I need to write a high-performance websocket server, but the rust iron I have tried befroe does not provide such functional, so I looked at the rust-websocket. But I doubt it&#39;s performance, so I have thought about using them both."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1434640001, "post_id": 30907776, "comment_id": 49875468, "body": "In which way do you want to use both? Do you want to use Iron for the website and <code>rust-websocket</code> only for the websockets part?"}, {"owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "edited": false, "score": 0, "creation_date": 1434648923, "post_id": 30907776, "comment_id": 49880983, "body": "No, just a websocket server. Ideally I want to reorient Iron to listen websockets instead of http(s)."}], "answers": [{"tags": [], "owner": {"reputation": 71, "user_id": 3667348, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/3yYqm.jpg?s=128&g=1", "display_name": "AndrewBrinker", "link": "https://stackoverflow.com/users/3667348/andrewbrinker"}, "is_accepted": false, "score": 0, "last_activity_date": 1471032666, "creation_date": 1471032666, "answer_id": 38925779, "question_id": 30907776, "link": "https://stackoverflow.com/questions/30907776/using-rust-websocket-with-iron/38925779#38925779", "title": "Using rust-websocket with Iron", "body": "<p>It sound like you want to swap out Hyper inside of Iron for rust-websocket. This is likely to be difficult, if it is even possible at all. Iron is heavily integrated with Hyper, and the entire design is built around working over HTTP(S). If it's really something you want to do, it may be worthwhile to reach out to the Iron developers to see about the possibility of allowing the communication interface to be swappable, but I don't know how likely it is that they would be receptive to the idea.</p>\n"}, {"tags": [], "owner": {"reputation": 255, "user_id": 1527069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90d0279f562504ff47d88f62a51b7f19?s=128&d=identicon&r=PG", "display_name": "IceyEC", "link": "https://stackoverflow.com/users/1527069/iceyec"}, "is_accepted": false, "score": 0, "last_activity_date": 1479936739, "creation_date": 1479936739, "answer_id": 40774480, "question_id": 30907776, "link": "https://stackoverflow.com/questions/30907776/using-rust-websocket-with-iron/40774480#40774480", "title": "Using rust-websocket with Iron", "body": "<p>I'm looking at doing using both Iron and rust-websocket in a single project and the architecture that I've come to includes having the websocket listen on a separate port. I can mask this in deploy with Nginx in front proxying back to the specific ports</p>\n"}, {"tags": [], "owner": {"reputation": 2420, "user_id": 682349, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=128&d=identicon&r=PG", "display_name": "Ultrasaurus", "link": "https://stackoverflow.com/users/682349/ultrasaurus"}, "is_accepted": false, "score": 1, "last_activity_date": 1566218233, "creation_date": 1566218233, "answer_id": 57556921, "question_id": 30907776, "link": "https://stackoverflow.com/questions/30907776/using-rust-websocket-with-iron/57556921#57556921", "title": "Using rust-websocket with Iron", "body": "<p>Since your goal is to create a high-performance websocket server, then starting with an HTTP server, like Iron, probably does not make sense. (Iron is based on <a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow noreferrer\">Hyper</a>, which advertises itself as \"a fast and correct HTTP implementation\").  I would recommend looking at <a href=\"https://tokio.rs/\" rel=\"nofollow noreferrer\">tokio</a> which was designed as \"an asynchronous, event driven platform\" and is used by Hyper and Iron.</p>\n\n<p>WebSockets require a different protocol that creates a two-way interactive communication session.  From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\" rel=\"nofollow noreferrer\">Mozilla docs</a>:</p>\n\n<blockquote>\n  <p>you can send messages to a server and receive event-driven responses without having to poll the server for a reply.</p>\n</blockquote>\n\n<p>So, if you don't need HTTP, then starting with a server that is focused on request/response is likely to introduce more complexity than benefit. While <a href=\"https://github.com/iron/iron/issues/359\" rel=\"nofollow noreferrer\">iron websocket issue</a> is still open, <a href=\"https://github.com/iron/iron/issues/359#issuecomment-347728228\" rel=\"nofollow noreferrer\">recent comment</a> notes:</p>\n\n<blockquote>\n  <p>Personally I think it's pretty difficult to fit websocket into Iron's request-middleware-response model. I haven't seen elegant abstraction in other languages for this.</p>\n</blockquote>\n\n<p>If you really want to explore using WebSockets with Iron, you would need to extend hyper to support WebSockets (<a href=\"http://zderadicka.eu/hyper-websocket/\" rel=\"nofollow noreferrer\">good discussion here</a>) and then access lower-level hyper connection (explained in <a href=\"https://github.com/iron/iron/issues/478\" rel=\"nofollow noreferrer\">iron issue #478</a>). After establishing the connection, a WebSocket library would be useful (though rust-websocket appears to be no longer maintained).  </p>\n"}], "owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1846, "favorite_count": 4, "answer_count": 3, "score": 11, "last_activity_date": 1566220296, "creation_date": 1434608094, "last_edit_date": 1566220296, "question_id": 30907776, "link": "https://stackoverflow.com/questions/30907776/using-rust-websocket-with-iron", "title": "Using rust-websocket with Iron", "body": "<p>For a high-performance websocket server, ideally I want to reorient Iron to listen websockets instead of http(s).</p>\n\n<p>Is it possible to use <a href=\"https://github.com/cyderize/rust-websocket\" rel=\"nofollow noreferrer\">rust-websocket</a> with <a href=\"https://github.com/iron/iron\" rel=\"nofollow noreferrer\">iron</a>, or does it not make sense to use both together?</p>\n\n<p>If it is possible, how can I realize it?</p>\n"}, {"tags": ["multithreading", "rust", "blocking", "channel"], "comments": [{"owner": {"reputation": 161657, "user_id": 122718, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/213Kw.png?s=128&g=1", "display_name": "usr", "link": "https://stackoverflow.com/users/122718/usr"}, "edited": false, "score": 3, "creation_date": 1434622407, "post_id": 30906533, "comment_id": 49862282, "body": "The general pattern for threads that can&#39;t be cleaned up reliably immediately is to notify them to clean up, just let them run and make sure they no longer produce side-effects. For a TcpListener that&#39;s not acceptable but for outgoing requests or file operations it often is."}, {"owner": {"reputation": 1057, "user_id": 1789237, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/71e0187d388e7261f59dade5f3d1dbe4?s=128&d=identicon&r=PG", "display_name": "sleeparrow", "link": "https://stackoverflow.com/users/1789237/sleeparrow"}, "reply_to_user": {"reputation": 161657, "user_id": 122718, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/213Kw.png?s=128&g=1", "display_name": "usr", "link": "https://stackoverflow.com/users/122718/usr"}, "edited": false, "score": 1, "creation_date": 1434626553, "post_id": 30906533, "comment_id": 49865044, "body": "@usr Yep, but I&#39;m looking for a Rust solution. (It doesn&#39;t need to fit that mold exactly, I guess.) I asked this question because I haven&#39;t been able to find a way using the current (safe) API."}, {"owner": {"reputation": 1057, "user_id": 1789237, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/71e0187d388e7261f59dade5f3d1dbe4?s=128&d=identicon&r=PG", "display_name": "sleeparrow", "link": "https://stackoverflow.com/users/1789237/sleeparrow"}, "edited": false, "score": 1, "creation_date": 1435597999, "post_id": 30906533, "comment_id": 50255937, "body": "<a href=\"http://www.rust-lang.org/\" rel=\"nofollow noreferrer\">rust-lang.org</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1047, "user_id": 204442, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92fa12e9d6c3916c06b7f0043da30d0a?s=128&d=identicon&r=PG", "display_name": "SpamapS", "link": "https://stackoverflow.com/users/204442/spamaps"}, "is_accepted": false, "score": 2, "last_activity_date": 1497979165, "last_edit_date": 1497979165, "creation_date": 1497976826, "answer_id": 44658699, "question_id": 30906533, "link": "https://stackoverflow.com/questions/30906533/how-can-i-reliably-clean-up-rust-threads-performing-blocking-io/44658699#44658699", "title": "How can I reliably clean up Rust threads performing blocking IO?", "body": "<p>One simply cannot safely cancel a thread reliably in Windows or Linux/Unix/POSIX, so it isn't available in the Rust standard library.</p>\n\n<p><a href=\"https://internals.rust-lang.org/t/thread-cancel-support/3056\" rel=\"nofollow noreferrer\">Here is an internals discussion about it</a>.</p>\n\n<p>There are a lot of unknowns that come from cancelling threads forcibly. It can get really messy. Beyond that, the combination of threads and blocking I/O will always face this issue: you need every blocking I/O call to have timeouts for it to even have a chance of being interruptible reliably. If one can't write async code, one needs to either use processes (which have a defined boundary and can be ended by the OS forcibly, but obviously come with heavier weight and data sharing challenges) or non-blocking I/O which will land your thread back in an event loop that is interruptible.</p>\n\n<p><a href=\"https://crates.io/crates/mio\" rel=\"nofollow noreferrer\">mio</a> is available for async code. <a href=\"https://crates.io/crates/tokio\" rel=\"nofollow noreferrer\">Tokio</a> is a higher level crate based on mio which makes writing non-blocking async code even more straight forward.</p>\n"}], "owner": {"reputation": 1057, "user_id": 1789237, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/71e0187d388e7261f59dade5f3d1dbe4?s=128&d=identicon&r=PG", "display_name": "sleeparrow", "link": "https://stackoverflow.com/users/1789237/sleeparrow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1411, "favorite_count": 1, "answer_count": 1, "score": 10, "last_activity_date": 1497979165, "creation_date": 1434602176, "last_edit_date": 1497978977, "question_id": 30906533, "link": "https://stackoverflow.com/questions/30906533/how-can-i-reliably-clean-up-rust-threads-performing-blocking-io", "title": "How can I reliably clean up Rust threads performing blocking IO?", "body": "<p>It seems to be a common idiom in Rust to spawn off a thread for blocking IO so you can use non-blocking channels:</p>\n\n<pre><code>use std::sync::mpsc::channel;\nuse std::thread;\nuse std::net::TcpListener;\n\nfn main() {\n    let (accept_tx, accept_rx) = channel();\n\n    let listener_thread = thread::spawn(move || {\n        let listener = TcpListener::bind(\":::0\").unwrap();\n        for client in listener.incoming() {\n            if let Err(_) = accept_tx.send(client.unwrap()) {\n                break;\n            }\n        }\n    });\n}\n</code></pre>\n\n<p>The problem is, rejoining threads like this depends on the spawned thread \"realizing\" that the receiving end of the channel has been dropped (i.e., calling <code>send(..)</code> returns <code>Err(_)</code>):</p>\n\n<pre><code>drop(accept_rx);\nlistener_thread.join(); // blocks until listener thread reaches accept_tx.send(..)\n</code></pre>\n\n<p>You can make dummy connections for <code>TcpListener</code>s, and shutdown <code>TcpStream</code>s via a clone, but these seem like really hacky ways to clean up such threads, and as it stands, I don't even know of a <em>hack</em> to trigger a thread blocking on a read from <code>stdin</code> to join.</p>\n\n<p>How can I clean up threads like these, or is my architecture just wrong?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "edited": false, "score": 7, "creation_date": 1581281974, "post_id": 30905994, "comment_id": 106369646, "body": "Sure, but the compiler could easily special case this case."}, {"owner": {"reputation": 457352, "user_id": 87234, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FkjBe.png?s=128&g=1", "display_name": "GManNickG", "link": "https://stackoverflow.com/users/87234/gmannickg"}, "edited": false, "score": 0, "creation_date": 1609372218, "post_id": 30905994, "comment_id": 115828451, "body": "This answer begs the question. The only reason <code>std::mem::drop</code> exists at all is so that the caller is forced to give up ownership before <code>drop</code> is called. If <code>drop</code> accepted <code>self</code> directly there would be no need for <code>std::mem::drop</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 16, "last_activity_date": 1434614097, "last_edit_date": 1434614097, "creation_date": 1434598134, "answer_id": 30905994, "question_id": 30905826, "link": "https://stackoverflow.com/questions/30905826/why-does-drop-take-mut-self-instead-of-self/30905994#30905994", "title": "Why does Drop take &amp;mut self instead of self?", "body": "<p>Let's look at how <code>std::mem::drop</code> is implemented:</p>\n\n<pre><code>pub fn drop&lt;T&gt;(_x: T) { }\n</code></pre>\n\n<p>That's right: it's an empty function! That's because it takes advantage of move semantics to acquire ownership of its argument. If <code>T</code> implements <code>Drop</code>, the compiler automatically inserts a call to <code>Drop::drop(_x)</code> at the end of the function. This happens to all arguments received by value (that is, in fact, <em>all</em> arguments whatsoever, but dropping a reference doesn't drop the referent).</p>\n\n<p>Now consider what would happen if <code>Drop::drop</code> took its argument by value: the compiler would try to invoke <code>Drop::drop</code> on the argument within <code>Drop::drop</code> &mdash; this would cause a stack overflow! And of course, you would be able to call <code>mem::drop</code> on the argument, which would also try to recursively call <code>Drop::drop</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 1, "creation_date": 1434609130, "post_id": 30907833, "comment_id": 49853925, "body": "Sorry, I wasn\u2019t clear. I do not intend to manually delete each field. My intention is to call functions that consume some of my fields so that I can wait on a thread or log any errors (I admit that I shouldn\u2019t have brought up <code>std::mem::drop</code> which doesn\u2019t tell you any errors that happened)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 1, "creation_date": 1434609633, "post_id": 30907833, "comment_id": 49854194, "body": "@yonran: Well, asking for a rationale as you did is a valid question so I am reluctant to tell you to edit it and completely change it, instead I would advise you to simply ask another question on how to do what you want to do, preferably with a MCVE on <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">the playpen</a> that we can tinker with to make sure our solution does compile."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 1, "creation_date": 1482787806, "post_id": 30907833, "comment_id": 69875497, "body": "@yonran: Did you ever ask another question? I&#39;m having exactly the same problem as you; specifically with using <a href=\"https://docs.rs/hound/3.0.0/hound/struct.WavWriter.html#method.finalize\" rel=\"nofollow noreferrer\"><code>WavWriter::finalize()</code></a> in a <code>Drop()</code>."}, {"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "reply_to_user": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 1, "creation_date": 1482793860, "post_id": 30907833, "comment_id": 69877103, "body": "@Timmmm, sorry, no I didn\u2019t. I think I just used an <code>Option&lt;T&gt;</code> in order to consume it during <code>drop</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 8, "last_activity_date": 1434608333, "creation_date": 1434608333, "answer_id": 30907833, "question_id": 30905826, "link": "https://stackoverflow.com/questions/30905826/why-does-drop-take-mut-self-instead-of-self/30907833#30907833", "title": "Why does Drop take &amp;mut self instead of self?", "body": "<p>Actually, it is unnecessary for <code>Drop::drop</code> to take ownership of the value.</p>\n\n<p>In Rust, ownership is automatically handled at language level, and therefore the compile makes sure to properly implement ownership semantics; thus when a <code>Foo { a: int, b: String }</code> goes out of scope, the compiler will drop <code>Foo</code> by dropping its inner fields automatically.</p>\n\n<p>It is thus unnecessary for <code>Drop::drop</code> to drop the fields!</p>\n\n<p>Actually, <em>after</em> <code>Drop::drop</code> is called on <code>Foo</code>, the compiler will itself <code>mem::drop</code> the different fields (which may also invoke <code>Drop::drop</code> on those fields which define it, such as <code>b: String</code> here).</p>\n\n<hr>\n\n<p>What does <code>Drop::drop</code> do, then?</p>\n\n<p>It is used to implement <em>extra</em> logic on top of what the compiler will do; taking your <code>JoinHandle</code> example:</p>\n\n<pre><code>#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[unsafe_destructor]\nimpl&lt;T&gt; Drop for JoinHandle&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        if !self.0.joined {\n            unsafe { imp::detach(self.0.native) }\n        }\n    }\n}\n</code></pre>\n\n<p>Here, <code>Drop::drop</code> is used to detach the thread, for example.</p>\n\n<p>In a collection such as <code>Vec::vec</code>:</p>\n\n<pre><code>#[unsafe_destructor]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl&lt;T&gt; Drop for Vec&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        // This is (and should always remain) a no-op if the fields are\n        // zeroed (when moving out, because of #[unsafe_no_drop_flag]).\n        if self.cap != 0 &amp;&amp; self.cap != mem::POST_DROP_USIZE {\n            unsafe {\n                for x in &amp;*self {\n                    ptr::read(x);\n                }\n                dealloc(*self.ptr, self.cap)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Here, as the raw memory is manipulated in a way opaque to the compiler, this implementation takes care of:</p>\n\n<ol>\n<li>Dropping each element held by the vector</li>\n<li>Deallocating the memory</li>\n</ol>\n"}], "owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1776, "favorite_count": 0, "accepted_answer_id": 30905994, "answer_count": 2, "score": 19, "last_activity_date": 1434614097, "creation_date": 1434596754, "last_edit_date": 1434597101, "question_id": 30905826, "link": "https://stackoverflow.com/questions/30905826/why-does-drop-take-mut-self-instead-of-self", "title": "Why does Drop take &amp;mut self instead of self?", "body": "<p>Why does <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Drop.html\" rel=\"noreferrer\"><code>Drop</code></a>\u2019s method have signature <code>fn drop(&amp;mut self)</code> instead of <code>fn drop(self)</code>? This makes it difficult to move values out of the fields e.g. <a href=\"https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.join\" rel=\"noreferrer\"><code>self.join_handle.join()</code></a> or <code>std::mem::drop(self.file)</code> (error: cannot move out of type <code>X</code>, which defines the <code>Drop</code> trait).</p>\n"}, {"tags": ["r", "shared-libraries", "rust"], "answers": [{"comments": [{"owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "edited": false, "score": 0, "creation_date": 1434635985, "post_id": 30916832, "comment_id": 49872197, "body": "Thank you! I will read more about rpaths but I was able to load the shared library by launching R from the same directory. I have learned a lot asking these two questions."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1434634410, "last_edit_date": 1495540979, "creation_date": 1434634410, "answer_id": 30916832, "question_id": 30905762, "link": "https://stackoverflow.com/questions/30905762/load-a-shared-library-linked-to-rust-library-in-r/30916832#30916832", "title": "Load a shared library linked to Rust library in R", "body": "<p>The problem is going to boil down to the fact that your shared libraries are not in the directories that your system expects them to be by default.</p>\n\n<p>There are a few tricks that you can use, 2 of which I was able to make work:</p>\n\n<ol>\n<li><p>Run R from the same directory you compiled the libraries.</p></li>\n<li><p>Set the <code>LD_LIBRARY_PATH</code> (Linux) or <code>DYLD_LIBRARY_PATH</code> (OS X) before launching R.</p>\n\n<pre><code>DYLD_LIBRARY_PATH=/path/to/rust/lib/ R\n</code></pre></li>\n<li><p>You <em>should</em> be able to set the rpath when building the shared library.</p>\n\n<pre><code>g++ -shared treble.cxx -o treble.so -L/tmp/ -Wl,-rpath,/tmp -lglue\n</code></pre>\n\n<p>However, I wasn't able to get this to work nicely on OS X, so I'm not sure what I'm doing wrong.</p></li>\n<li><p>(OS X only) After building your C++ library, you can change the <em>install name</em> that refers to the original Rust library and include the absolute path:</p>\n\n<pre><code>install_name_tool -change libglue.dylib /tmp/libglue.dylib treble.so\n</code></pre></li>\n</ol>\n\n<p>Basically, you will want to look up how to have shared libraries that depend on other shared libraries when multiple of those libraries do not exist in your default linker search paths.</p>\n\n<p><strong>Sources</strong></p>\n\n<p><a href=\"https://stackoverflow.com/questions/14656657/linking-a-dynamic-library-libjvm-dylib-in-mac-os-x-rpath-issue\">Linking a dynamic library (libjvm.dylib) in Mac OS X (rpath issue)</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/12521802/print-rpath-of-executable-on-osx\">Print rpath of executable on OSX</a></p>\n\n<p><a href=\"https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath\" rel=\"nofollow noreferrer\">@executable_path, @load_path and @rpath</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/7169398/how-do-i-modify-the-install-name-of-a-dylib-at-build-time\">How do I modify the install name of a .dylib at build time</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/27506450/clang-change-dependent-shared-library-install-name-at-link-time\">clang, change dependent shared library install name at link time</a></p>\n"}, {"tags": [], "owner": {"reputation": 1317, "user_id": 2496293, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/00f8e804a4fc2e35e44f88aae73100d9?s=128&d=identicon&r=PG", "display_name": "Sam De Meyer", "link": "https://stackoverflow.com/users/2496293/sam-de-meyer"}, "is_accepted": false, "score": 0, "last_activity_date": 1450970254, "last_edit_date": 1495535247, "creation_date": 1450970254, "answer_id": 34454779, "question_id": 30905762, "link": "https://stackoverflow.com/questions/30905762/load-a-shared-library-linked-to-rust-library-in-r/34454779#34454779", "title": "Load a shared library linked to Rust library in R", "body": "<p>Although the original answer is good, I put forward an alternative approach for this <a href=\"https://stackoverflow.com/a/34454695/2496293\">here</a>.</p>\n"}], "owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1155, "favorite_count": 2, "accepted_answer_id": 30916832, "answer_count": 2, "score": 7, "last_activity_date": 1450970254, "creation_date": 1434596223, "last_edit_date": 1495540979, "question_id": 30905762, "link": "https://stackoverflow.com/questions/30905762/load-a-shared-library-linked-to-rust-library-in-r", "title": "Load a shared library linked to Rust library in R", "body": "<p>Following up on this question <a href=\"https://stackoverflow.com/questions/30904870/create-shared-c-object-linked-to-rust-dylib-for-use-in-r\">here</a>, I am having issues using <code>dyn.load</code> to load a shared library that is linked to a Rust dylib. I suspect it has something to do with where R is looking for the Rust dylib, but I have not found a way to specify another location than whatever the default is.</p>\n\n<p>From R, I execute the following:</p>\n\n<pre><code>&gt; dyn.load('src/test.so')\n</code></pre>\n\n<p>And receive this error message:</p>\n\n<pre><code>Error in dyn.load(\"src/test.so\") : \n  unable to load shared object '/Users/Zelazny7/r-dev/rustr/src/test.so':\n  dlopen(/Users/Zelazny7/r-dev/rustr/src/test.so, 6): Library not loaded: libglue.dylib\n  Referenced from: /Users/Zelazny7/r-dev/rustr/src/test.so\n  Reason: image not found\n</code></pre>\n\n<p>How do I load a shared library that depends on another shared library?</p>\n\n<p>The <a href=\"https://stat.ethz.ch/R-manual/R-devel/library/base/html/dynload.html\" rel=\"nofollow noreferrer\">documentation</a> for <code>dyn.load</code> does not specify how to do this.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Thanks to shepmaster I was able to successfully build and import a shared library in R. The shared library was compiled in C and is itself linked to a Rust library. These were my steps:</p>\n\n<ol>\n<li>Compile shared Rust library</li>\n<li>Compile shared C library and link to the Rust library using the following command (in Windows as I'm at work this morning)</li>\n</ol>\n\n<p>My directory contents:</p>\n\n<pre><code>C:\\Users\\gravesee\\test&gt;ls\nrglue.dll  rglue.rs  rustr.c  treble.h\n</code></pre>\n\n<p>Compiling the final shared library:</p>\n\n<pre><code>gcc -shared -m64 -I\"C:\\Program Files\\R\\R-3.2.0\\include\" rustr.c -L\"C:\\Program Files\\R\\R-3.2.0\\bin\\x64\" -lR -L. -lrglue -o test.dll\n</code></pre>\n\n<p>Loading the library in R:</p>\n\n<pre><code>&gt; dyn.load(\"test.dll\")\n&gt; is.loaded(\"triple\")\n[1] TRUE\n&gt; .Call(\"triple\", as.integer(32))\nThe triple is 96\n</code></pre>\n"}, {"tags": ["c++", "c", "r", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434589896, "post_id": 30904870, "comment_id": 49848300, "body": "Try making a <a href=\"/help/mcve\">MCVE</a>. For example, do you need to link against the R libraries to reproduce the error? I&#39;d guess not."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434607788, "post_id": 30904870, "comment_id": 49853244, "body": "If you want C code, why are you compiling as C++? Both gcc and Clang can compile as C, in which case there is no mangling without having to specify <code>extern</code>."}, {"owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "edited": false, "score": 0, "creation_date": 1434629881, "post_id": 30904870, "comment_id": 49867334, "body": "Mostly for my own learning. There is no reason for me to use C++, but that is how I started the project and I got to this point by making small edits. And now I am aware of name mangling!"}], "answers": [{"comments": [{"owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "edited": false, "score": 0, "creation_date": 1434594943, "post_id": 30905010, "comment_id": 49849438, "body": "This indeed allowed me to compile successfully. I suspected it might have something to with mangling when the gcc version (stripped of the extern &quot;C&quot;) worked. I am still having troubling loading the dynamic library in R, but  I&#39;ll save that for another question."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1434590221, "creation_date": 1434590221, "answer_id": 30905010, "question_id": 30904870, "link": "https://stackoverflow.com/questions/30904870/create-shared-c-object-linked-to-rust-dylib-for-use-in-r/30905010#30905010", "title": "Create shared C object linked to Rust dylib for use in R", "body": "<p>In the C++ code, you need to declare the Rust function (which is available via the C ABI) as <code>extern \"C\"</code>.</p>\n\n<p><strong>treble.h</strong></p>\n\n<pre><code>#include &lt;stdint.h&gt;\n\nextern \"C\" {\n  int32_t treble(int32_t value);\n}\n</code></pre>\n\n<p>The error you are getting is because the C++ compiler is <em>name mangling</em> the method <code>treble</code> before attempting to link against it. <code>extern \"C\"</code> disables the mangling.</p>\n\n<p>Additionally, your Rust FFI code should always use the types from the <a href=\"http://doc.rust-lang.org/libc/libc/index.html\" rel=\"nofollow\">libc crate</a>; in your case you want <code>libc::int32_t</code>.</p>\n"}], "owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 886, "favorite_count": 2, "accepted_answer_id": 30905010, "answer_count": 1, "score": 4, "last_activity_date": 1434590221, "creation_date": 1434589162, "question_id": 30904870, "link": "https://stackoverflow.com/questions/30904870/create-shared-c-object-linked-to-rust-dylib-for-use-in-r", "title": "Create shared C object linked to Rust dylib for use in R", "body": "<p>I am trying to create a shared object I can load into R that calls Rust functions by way of R's C API. To call Rust from C, I am following this <a href=\"http://harkablog.com/calling-rust-from-c-and-python.html\" rel=\"nofollow\">blog post</a>. My problem arises when I try to create the shared library and link to the Rust library. The linker complains that it can't find my Rust function. I am quite new to compiled languages and have given this a couple days' worth of effort before turning to SO. In that time I have learned a lot about compiler flags and yet come no closer to a solution. I think it may be something obvious.</p>\n\n<p>My C++ code:</p>\n\n<pre><code>#include \"Rinternals.h\"\n#include \"R.h\"\n#include \"treble.h\"\n\n// test.cpp\nextern \"C\" {\n\nSEXP triple(SEXP val) {\n\n    int32_t ival = *INTEGER(val);\n    Rprintf(\"9 tripled is %d\\n\", treble(ival));\n    return R_NilValue;\n}\n\n}\n</code></pre>\n\n<p>treble.h:</p>\n\n<pre><code>#include &lt;stdint.h&gt;\n\nint32_t treble(int32_t value);\n</code></pre>\n\n<p>My Rust code:</p>\n\n<pre><code>#![crate_type = \"dylib\"]\n\n#[no_mangle]\npub extern fn treble(value: i32) -&gt; i32 {\n  value * 3\n}\n</code></pre>\n\n<p>This is what I'm doing on the command line:</p>\n\n<pre><code>$ rustc glue.rs\n$ g++ -shared test.cpp -o test.so -I/Library/Frameworks/R.framework/Headers -L/Library/Frameworks/R.framework/Libraries -L. -lR -lglue\nUndefined symbols for architecture x86_64:\n  \"treble(int)\", referenced from:\n      _triple in test-dac64b.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n\n<p>Inspecting the object file that rust creates:</p>\n\n<pre><code>$ nm -gU libglue.dylib\n...\n0000000000001750 T _treble\n</code></pre>\n"}]