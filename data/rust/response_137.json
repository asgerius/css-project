[{"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1556491786, "last_edit_date": 1556491786, "creation_date": 1503515380, "answer_id": 45847657, "question_id": 45847522, "link": "https://stackoverflow.com/questions/45847522/when-can-the-rust-compiler-not-prove-that-borrows-are-disjoint/45847657#45847657", "title": "When can the Rust compiler not prove that borrows are disjoint?", "body": "<p>The key is in the previous sentence:</p>\n\n<blockquote>\n  <p>Rust explicitly enables [reborrowing into multiple mutable references] to be done with disjoint struct fields, because disjointness can be statically proven</p>\n</blockquote>\n\n<p>Outside of this case, the compiler cannot tell that two borrows are disjoint. In practice, this means that the compiler cannot tell that borrows resulting from a function call will be disjoint.</p>\n\n<pre><code>struct Thing {\n    a: i32,\n    b: i32,\n}\n</code></pre>\n\n<pre><code>fn example_works(thing: &amp;mut Thing) {\n    let a = &amp;mut thing.a;\n    let b = &amp;mut thing.b;\n}\n</code></pre>\n\n<pre><code>fn get_a(thing: &amp;mut Thing) -&gt; &amp;mut i32 {\n    &amp;mut thing.a\n}\n\nfn get_b(thing: &amp;mut Thing) -&gt; &amp;mut i32 {\n    &amp;mut thing.b\n}\n\nfn example_doesnt_work(thing: &amp;mut Thing) {\n    let a = get_a(thing);\n    let b = get_b(thing);\n    println!(\"{}, {}\", a, b);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*thing` as mutable more than once at a time\n  --&gt; src/lib.rs:26:19\n   |\n25 |     let a = get_a(thing);\n   |                   ----- first mutable borrow occurs here\n26 |     let b = get_b(thing); // cannot borrow `*thing` as mutable more than once at a time\n   |                   ^^^^^ second mutable borrow occurs here\n27 |     println!(\"{}, {}\", a, b);\n   |                        - first borrow later used here\n</code></pre>\n\n<blockquote>\n  <p>Will this ever occur in a tuple struct?</p>\n</blockquote>\n\n<p>Not specifically <em>because</em> it's a tuple struct, but yes, it can happen for the same reasons. If you obtain a borrow from a function call, you will get the same problem as a \"traditional\" struct.</p>\n"}], "owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 1, "accepted_answer_id": 45847657, "answer_count": 1, "score": 2, "last_activity_date": 1556491786, "creation_date": 1503514838, "last_edit_date": 1503515178, "question_id": 45847522, "link": "https://stackoverflow.com/questions/45847522/when-can-the-rust-compiler-not-prove-that-borrows-are-disjoint", "title": "When can the Rust compiler not prove that borrows are disjoint?", "body": "<p>In <a href=\"https://doc.rust-lang.org/nomicon/references.html#liveness\" rel=\"nofollow noreferrer\">section 3.2 of the Nomicon</a>, under the heading \"liveness\", it says</p>\n\n<blockquote>\n  <p>However it's often the case that Rust isn't sufficiently smart to\n  prove that  multiple borrows are disjoint.</p>\n</blockquote>\n\n<p>What is an example where the Rust compiler cannot prove that they are disjoint? Will this ever occur in a tuple struct?</p>\n"}, {"tags": ["rust", "tuples"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503515507, "post_id": 45847338, "comment_id": 78653441, "body": "Highly relevant: <a href=\"https://stackoverflow.com/q/41413336/155423\">Do all primitive types implement the Copy trait?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 65, "user_id": 6438354, "user_type": "registered", "profile_image": "https://graph.facebook.com/999108400204345/picture?type=large", "display_name": "Zarni Phyo", "link": "https://stackoverflow.com/users/6438354/zarni-phyo"}, "edited": false, "score": 0, "creation_date": 1503516653, "post_id": 45847404, "comment_id": 78654044, "body": "Thank you for the quick answer."}, {"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1563896720, "post_id": 45847404, "comment_id": 100849301, "body": "If the arity is above 12, your tuple is probably pretty bulky, e.g. <code>i128</code> of size 12 already takes 192 bytes, so it indeed doesn&#39;t make sense to try to copy a tuple such large (not to mention that there shouldn&#39;t be such enormous tuples in the first place; use an array instead)"}], "tags": [], "owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "is_accepted": true, "score": 9, "last_activity_date": 1616083128, "last_edit_date": 1616083128, "creation_date": 1503514440, "answer_id": 45847404, "question_id": 45847338, "link": "https://stackoverflow.com/questions/45847338/do-tuples-implement-copy/45847404#45847404", "title": "Do tuples implement `Copy`?", "body": "<p>Yes; according to <a href=\"https://doc.rust-lang.org/std/primitive.tuple.html#trait-implementations-1\" rel=\"nofollow noreferrer\">the docs</a>, this is true for tuples of arity 12 or less:</p>\n<blockquote>\n<p>If every type inside a tuple implements one of the following traits, then a tuple itself also implements it.</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\"><code>Clone</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\" rel=\"nofollow noreferrer\"><code>PartialEq</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"nofollow noreferrer\"><code>Eq</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"nofollow noreferrer\"><code>PartialOrd</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"nofollow noreferrer\"><code>Ord</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html\" rel=\"nofollow noreferrer\"><code>Debug</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"nofollow noreferrer\"><code>Default</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/hash/trait.Hash.html\" rel=\"nofollow noreferrer\"><code>Hash</code></a></li>\n</ul>\n<p>Due to a temporary restriction in Rust's type system, these traits are only implemented on tuples of arity 12 or less. In the future, this may change.</p>\n</blockquote>\n"}], "owner": {"reputation": 65, "user_id": 6438354, "user_type": "registered", "profile_image": "https://graph.facebook.com/999108400204345/picture?type=large", "display_name": "Zarni Phyo", "link": "https://stackoverflow.com/users/6438354/zarni-phyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1161, "favorite_count": 0, "accepted_answer_id": 45847404, "answer_count": 1, "score": 6, "last_activity_date": 1616083128, "creation_date": 1503514212, "last_edit_date": 1503514673, "question_id": 45847338, "link": "https://stackoverflow.com/questions/45847338/do-tuples-implement-copy", "title": "Do tuples implement `Copy`?", "body": "<p>In the Rust Book, Chapter 18, they give an example of a tuple in pattern matching.</p>\n\n<pre><code>fn print_coordinates(&amp;(x, y): &amp;(i32, i32)) {\n    println!(\"Current location: ({}, {})\", x, y);\n}\n\nfn main() {\n    let point = (3, 5);\n    print_coordinates(&amp;point);   // point passed as reference\n}\n</code></pre>\n\n<p>Out of curiosity, I tried without passing as a reference like this.</p>\n\n<pre><code>fn print_coordinates((x, y): (i32, i32)) {\n    println!(\"Current location: ({}, {})\", x, y);\n}\n\nfn main() {\n    let point = (3, 5);\n    print_coordinates(point);   // point passed as value\n    print_coordinates(point);   // point is still valid here\n}\n</code></pre>\n\n<p>It compiles and prints out the coordinates 2 times.</p>\n\n<p>Can tuples be passed into functions just like other primitive data types (numbers, booleans, etc.)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1503484991, "post_id": 45837189, "comment_id": 78631943, "body": "In other ECS libraries (I assume that&#39;s what you&#39;re trying to implement!), rather than having components defined as enums, they tend to be defined as structs that <code>impl</code> a <code>Component</code> trait."}, {"owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "reply_to_user": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1503485045, "post_id": 45837189, "comment_id": 78631976, "body": "I tried this approach aswell, how would I access their data though? Since that is nothing they share."}], "answers": [{"comments": [{"owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "edited": false, "score": 0, "creation_date": 1503484849, "post_id": 45837334, "comment_id": 78631853, "body": "I clarified the question a tiny bit, an Entity (that holds the collection of components) should be able to have them added/removed to/from it.  So an Entity could have just a Position-component, or even none of them!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "edited": false, "score": 0, "creation_date": 1503485079, "post_id": 45837334, "comment_id": 78632000, "body": "@Kim: Then you can use <code>Option</code>.  Or <code>typemap</code> if you&#39;re going to have many, many, many more than you&#39;ve listed."}, {"owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "edited": false, "score": 0, "creation_date": 1503485448, "post_id": 45837334, "comment_id": 78632269, "body": "Can&#39;t see how these won&#39;t work, I&#39;ll give it a sho! ty!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1503484895, "last_edit_date": 1503484895, "creation_date": 1503484501, "answer_id": 45837334, "question_id": 45837189, "link": "https://stackoverflow.com/questions/45837189/how-can-i-store-an-enum-so-i-can-retrieve-it-by-only-identifying-the-variant/45837334#45837334", "title": "How can I store an enum so I can retrieve it by only identifying the variant?", "body": "<p>It sounds like you want a structure, not a collection of enum variants.</p>\n\n<pre><code>struct Component {\n    position: Option&lt;[f64; 2]&gt;,\n    render_fn: Option&lt;fn(Display, &amp;mut Frame, Entity)&gt;,\n}\n</code></pre>\n\n<p>If this is likely to involve <em>many</em> kinds of components, and they mostly won't all be present, then maybe you want something like the <a href=\"https://crates.io/crates/typemap\" rel=\"nofollow noreferrer\"><code>typemap</code></a> crate.</p>\n\n<p>But to answer your question: no, a variant can't be separated from its associated values.</p>\n"}], "owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 45837334, "answer_count": 1, "score": 1, "last_activity_date": 1503515816, "creation_date": 1503484092, "last_edit_date": 1503515816, "question_id": 45837189, "link": "https://stackoverflow.com/questions/45837189/how-can-i-store-an-enum-so-i-can-retrieve-it-by-only-identifying-the-variant", "title": "How can I store an enum so I can retrieve it by only identifying the variant?", "body": "<p>I have an enum like:</p>\n\n<pre><code>pub enum Component {\n    Position { vector: [f64; 2] },\n    RenderFn { render_fn: fn(Display, &amp;mut Frame, Entity), },\n}\n</code></pre>\n\n<p>I would like to store <code>Component</code>s in a hashset/hashmap where they are identified only by their enum variant (<code>Position</code> or <code>RenderFn</code>).</p>\n\n<p>There can be zero or one <code>Position</code> and zero or one <code>RenderFn</code> in the collection. I would like to be able to remove/retrieve it by passing an identifier/type (<code>Position</code>/<code>RenderFn</code>).</p>\n\n<p>Is there any way to do this without any ugly hacks? Perhaps enums are not the way to go?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1503497762, "post_id": 45837114, "comment_id": 78642065, "body": "You should read the documentation a bit more closely :)"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1503498474, "post_id": 45837114, "comment_id": 78642659, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/44888196/how-do-i-sort-an-array\">How do I sort an array?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "is_accepted": true, "score": 9, "last_activity_date": 1503484796, "last_edit_date": 1503484796, "creation_date": 1503484213, "answer_id": 45837233, "question_id": 45837114, "link": "https://stackoverflow.com/questions/45837114/why-does-a-truncated-string-rust-print-as-an-empty-pair-of-parenthesis/45837233#45837233", "title": "Why does a truncated string Rust print as an empty pair of parenthesis?", "body": "<p>When in doubt, go to the <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.truncate\" rel=\"noreferrer\">docs</a> - here's the function signature of <code>String::truncate</code>:</p>\n\n<pre><code>fn truncate(&amp;mut self, new_len: usize)\n</code></pre>\n\n<p>Note two things:</p>\n\n<ul>\n<li>It takes <code>self</code> as <code>&amp;mut</code>.</li>\n<li>It has no return value.</li>\n</ul>\n\n<p>From that, the problem becomes pretty clear - <code>truncate</code> does not return a new truncated string, it truncates the existing string in place.</p>\n\n<p>This might seem a little unintuitive at first, but Rust APIs tend not to allocate new objects in memory unless you specifically ask them to - if you're never going to use <code>guess</code> again, then it'd be ineffecient to create a whole new <code>String</code>. If you wanted to make a truncated <em>copy</em>, then you'd need to be explicit:</p>\n\n<pre><code>let truncated = guess.clone();\ntruncated.truncate(string_length);\n</code></pre>\n\n<p>Or if you just wanted to reference <em>part</em> of the existing string, you could do what Ryan's answer suggests.</p>\n"}, {"tags": [], "owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "is_accepted": false, "score": 4, "last_activity_date": 1503484338, "creation_date": 1503484338, "answer_id": 45837285, "question_id": 45837114, "link": "https://stackoverflow.com/questions/45837114/why-does-a-truncated-string-rust-print-as-an-empty-pair-of-parenthesis/45837285#45837285", "title": "Why does a truncated string Rust print as an empty pair of parenthesis?", "body": "<p><code>truncate</code> <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.truncate\" rel=\"nofollow noreferrer\">operates in place</a>, which is why it returns <code>()</code>. Looks like you\u2019re just looking for a regular non-mutating substring:</p>\n\n<pre><code>let correct_string_length = &amp;guess[..string_length];\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 5, "last_activity_date": 1503488312, "creation_date": 1503488312, "answer_id": 45838675, "question_id": 45837114, "link": "https://stackoverflow.com/questions/45837114/why-does-a-truncated-string-rust-print-as-an-empty-pair-of-parenthesis/45838675#45838675", "title": "Why does a truncated string Rust print as an empty pair of parenthesis?", "body": "<p>Just to compliment the other answers here..</p>\n\n<p>Attempting to truncate a string in Rust that is not on a character boundary will cause a runtime panic.</p>\n\n<p>So while this works now:</p>\n\n<pre><code>let correct_string_length = &amp;guess[..string_length];\n</code></pre>\n\n<p>If you're trying to truncate a string with wider characters, your code will panic at runtime. This is especially true if you're truncating user input.. who knows what it could be. For example:</p>\n\n<pre><code>fn main() {\n    let s = \"Hello, \u4e16\u754c\";\n\n    println!(\"{}\", &amp;s[..8]); // &lt;--- panic\n}\n</code></pre>\n\n<p>You can use the <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.is_char_boundary\" rel=\"noreferrer\"><code>str::is_char_boundary(usize)</code></a> method to make sure you're not about to break up a wide character accidentally:</p>\n\n<pre><code>fn print_safely(s: &amp;str, mut idx: usize) {\n    loop {\n        if s.is_char_boundary(idx) || idx &gt;= s.len() - 1 {\n            break;\n        }\n        idx += 1;\n    }\n\n    println!(\"{}\", &amp;s[..idx]);\n}\n</code></pre>\n\n<p>User input could be anything so this is just something to consider.</p>\n\n<p>Playground link: <a href=\"http://play.integer32.com/?gist=632ff6c81c56f9ba52e0837ff25939bc&amp;version=stable\" rel=\"noreferrer\">http://play.integer32.com/?gist=632ff6c81c56f9ba52e0837ff25939bc&amp;version=stable</a></p>\n"}], "owner": {"reputation": 773, "user_id": 5476912, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/sMjhL.jpg?s=128&g=1", "display_name": "ColdHands", "link": "https://stackoverflow.com/users/5476912/coldhands"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 399, "favorite_count": 0, "accepted_answer_id": 45837233, "answer_count": 3, "score": 1, "last_activity_date": 1503515594, "creation_date": 1503483879, "last_edit_date": 1503515594, "question_id": 45837114, "link": "https://stackoverflow.com/questions/45837114/why-does-a-truncated-string-rust-print-as-an-empty-pair-of-parenthesis", "title": "Why does a truncated string Rust print as an empty pair of parenthesis?", "body": "<p>I have</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"CHAR COUNT\");\n    let mut guess = String::new();\n    io::stdin().read_line(&amp;mut guess).expect(\n        \"Failed to read line\",\n    );\n\n    let string_length = guess.len() - 2;\n    let correct_string_length = guess.truncate(string_length);\n\n    println!(\"Your text: {}\", guess);\n    println!(\"Your texts wrong length is: {}\", string_length);\n    println!(\"Your texts correct length: {}\", correct_string_length);\n}\n</code></pre>\n\n<p>The last line gives me</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `(): std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:15:47\n   |\n15 |     println!(\"Your texts correct length: {}\", correct_string_length);\n   |                                               ^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `()`\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>What am I doing wrong? If I use <code>{:?}</code> then I get <code>()</code> instead of a formatted string.</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503481705, "post_id": 45834055, "comment_id": 78629610, "body": "Second variant tells the compiler that <code>Boo&lt;&#39;b&gt;</code> should live as long as borrow <code>&amp;&#39;b self</code>. That is when <code>Boo&lt;&#39;b&gt;</code> is no longer in lexical scope where it was taken, <code>self</code> is no longer borrowed."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503482026, "post_id": 45834055, "comment_id": 78629837, "body": "First variant ties lifetime of borrow <code>&amp;&#39;a self</code> to the lifetime of structure <code>Foo&lt;&#39;a&gt;</code>. If <code>Foo&lt;&#39;a&gt;</code> is <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">invariant</a> over <code>&#39;a</code>, it means that <code>self</code> should remain borrowed as long as <code>&#39;a</code>."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503574487, "post_id": 45834055, "comment_id": 78678927, "body": "I added a bit of explanation why variance of <code>Foo</code> affects your code."}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503576824, "post_id": 45834055, "comment_id": 78680604, "body": "great, now I understand why I failed at creating a MVCE. My original struct contained something which prevents it from being variant while my test structs only contained <code>&amp;str</code> which does not prevent variance."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 6, "last_activity_date": 1503574416, "last_edit_date": 1503574416, "creation_date": 1503475537, "answer_id": 45834055, "question_id": 45833618, "link": "https://stackoverflow.com/questions/45833618/what-is-the-difference-between-self-and-a-self/45834055#45834055", "title": "What is the difference between &#39;&amp;self&#39; and &#39;&amp;&#39;a self&#39;?", "body": "<p>Lifetime <code>'a</code> in <code>fn foo(&amp;'a self, ...) ...</code> is defined for <code>impl&lt;'a&gt;</code>, that is it is the same for all <code>foo</code> calls.</p>\n\n<p>Lifetime <code>'a</code> in <code>fn get_mut&lt;'a&gt;(&amp;'a mut self) ...</code> is defined for the function. Different calls of <code>get_mut</code> can have different values for <code>'a</code>.</p>\n\n<p>Your code </p>\n\n<blockquote>\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn foo(&amp;'a self, path: &amp;str) -&gt; Boo&lt;'a&gt; { /* */ }\n}\n</code></pre>\n</blockquote>\n\n<p>is not the expansion of elided lifetime. This code ties lifetime of borrow <code>&amp;'a self</code> to the lifetime of structure <code>Foo&lt;'a&gt;</code>. If <code>Foo&lt;'a&gt;</code> is invariant over <code>'a</code>, then <code>self</code> should remain borrowed as long as <code>'a</code>.</p>\n\n<p>Correct expansion of elided lifetime is</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn foo&lt;'b&gt;(&amp;'b self, path: &amp;str) -&gt; Boo&lt;'b&gt; { /* */ }\n}\n</code></pre>\n\n<p>This code doesn't depend on variance of structure <code>Foo</code> to be able to borrow <code>self</code> for shorter lifetimes.</p>\n\n<p>Example of differences between variant and invariant structures.</p>\n\n<pre><code>use std::cell::Cell;\n\nstruct Variant&lt;'a&gt;(&amp;'a u32);\n\nstruct Invariant&lt;'a&gt;(Cell&lt;&amp;'a u32&gt;);\n\nimpl&lt;'a&gt; Variant&lt;'a&gt; {\n    fn foo(&amp;'a self) -&gt; &amp;'a u32 {\n        self.0\n    }\n}\n\nimpl&lt;'a&gt; Invariant&lt;'a&gt; {\n    fn foo(&amp;'a self) -&gt; &amp;'a u32 {\n        self.0.get()\n    }\n}\n\nfn main() {\n    let val = 0;\n    let mut variant = Variant(&amp;val);// variant: Variant&lt;'long&gt;\n    let mut invariant = Invariant(Cell::new(&amp;val));// invariant: Invariant&lt;'long&gt;\n    {\n        let r = variant.foo();\n        // Pseudocode to explain what happens here\n        // let r: &amp;'short u32 = Variant::&lt;'short&gt;::foo(&amp;'short variant);\n        // Borrow of `variant` ends here, as it was borrowed for `'short` lifetime\n\n        // Compiler can do this conversion, because `Variant&lt;'long&gt;` is\n        // subtype of Variant&lt;'short&gt; and `&amp;T` is variant over `T`\n        // thus `variant` of type `Variant&lt;'long&gt;` can be passed into the function \n        // Variant::&lt;'short&gt;::foo(&amp;'short Variant&lt;'short&gt;)\n    }\n    // variant is not borrowed here\n    variant = Variant(&amp;val);\n\n    {\n        let r = invariant.foo();\n        // compiler can't shorten lifetime of `Invariant`\n        // thus `invariant` is borrowed for `'long` lifetime\n    }\n    // Error. invariant is still borrowed here\n    //invariant = Invariant(Cell::new(&amp;val));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3dd956a3aedcfc68caafb658f80616ce&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}], "owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 283, "favorite_count": 2, "accepted_answer_id": 45834055, "answer_count": 1, "score": 5, "last_activity_date": 1503574416, "creation_date": 1503474271, "question_id": 45833618, "link": "https://stackoverflow.com/questions/45833618/what-is-the-difference-between-self-and-a-self", "title": "What is the difference between &#39;&amp;self&#39; and &#39;&amp;&#39;a self&#39;?", "body": "<p>I recently had an error which was simply resolved by changing</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn foo(&amp;'a self, path: &amp;str) -&gt; Boo&lt;'a&gt; { /* */ }\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn foo(&amp;self, path: &amp;str) -&gt; Boo { /* */ }\n}\n</code></pre>\n\n<p>which did not make sense according to my understanding, as I thought that the second version is exactly the same as the first with applied lifetime elision.</p>\n\n<hr>\n\n<p>In case we introduce a new lifetime for the method this seems to be the case according this example from the <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\" rel=\"noreferrer\">nomicon</a>.</p>\n\n<pre><code>fn get_mut(&amp;mut self) -&gt; &amp;mut T;                        // elided\nfn get_mut&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut T;              // expanded\n</code></pre>\n\n<p>So what are the differences between this and my first code snipped.</p>\n"}, {"tags": ["rust", "compiler-warnings"], "answers": [{"comments": [{"owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "edited": false, "score": 6, "creation_date": 1503471925, "post_id": 45832019, "comment_id": 78622786, "body": "Pretty smart compiler"}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 10, "last_activity_date": 1503469240, "creation_date": 1503469240, "answer_id": 45832019, "question_id": 45831980, "link": "https://stackoverflow.com/questions/45831980/why-does-rust-not-see-a-variable-after-a-loop-is-read/45832019#45832019", "title": "Why does Rust not see a variable after a loop is read?", "body": "<p>Because you never exit from the inner loop?</p>\n"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 176, "favorite_count": 0, "accepted_answer_id": 45832019, "answer_count": 1, "score": 0, "last_activity_date": 1503516159, "creation_date": 1503469054, "last_edit_date": 1503516159, "question_id": 45831980, "link": "https://stackoverflow.com/questions/45831980/why-does-rust-not-see-a-variable-after-a-loop-is-read", "title": "Why does Rust not see a variable after a loop is read?", "body": "<p>I have a function, the abbreviated version of which might look like:</p>\n\n<pre><code>loop {\n    let mut changed = false;\n    for p in 0..sys.len() {\n        k = ...\n        if k == None { continue; }\n        // some stuff\n        for (v, _) in &amp;key.0 {\n           // some stuff\n            loop {\n                if n == 2 {\n                    changed = true;\n                } else if n % 2 == 0 {\n                    changed = true;\n                } else if n &gt;= 2 {\n                    changed = true;\n                } else {\n                    changed = true;\n                }\n            }\n        }\n    }\n    if !changed { return; }\n}\n</code></pre>\n\n<p>You can see that flag is accessed in the last if statement. But I get this warning message: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: value assigned to `changed` is never read\n202 |                         changed = true;\n    |                         ^^^^^^^\n    |\n    = note: #[warn(unused_assignments)] on by default\n</code></pre>\n\n<p>And I get no other warning/error messages. Why is this?</p>\n"}, {"tags": ["gdb", "rust", "symbols", "missing-symbols"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1503419380, "post_id": 45822612, "comment_id": 78603619, "body": "Which version of Rust are you using? <code>-msvc</code> or <code>-gnu</code>?"}, {"owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1503419866, "post_id": 45822612, "comment_id": 78603891, "body": "C:\\Users\\steve\\.cargo\\bin&gt;rustc.exe -V rustc 1.18.0 (03fc9d622 2017-06-06)"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1503420129, "post_id": 45822612, "comment_id": 78604028, "body": "Try <code>rustc.exe -vV</code>"}, {"owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1503420670, "post_id": 45822612, "comment_id": 78604334, "body": "Yes, the toolchain was wrong, msvc binaries doesn&#39;t seem to work with gdb."}], "answers": [{"comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1503420855, "post_id": 45823165, "comment_id": 78604432, "body": "The gnu toolchain doesn&#39;t understand how to consume native Windows executables or debug symbols. If you&#39;re trying to debug Rust code produced by the <code>-msvc</code> toolchain, you can use any Windows native debugger like <code>windgb</code>, Visual Studio, or Visual Studio Code with the C++ debugger."}], "tags": [], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "is_accepted": true, "score": 3, "last_activity_date": 1503420638, "creation_date": 1503420638, "answer_id": 45823165, "question_id": 45822612, "link": "https://stackoverflow.com/questions/45822612/gdb-doesnt-find-debugging-symbols-in-rust-executable/45823165#45823165", "title": "GDB doesn&#39;t find debugging symbols in Rust executable", "body": "<p>Ok, the solution is to switch toolchain, i.e. to make binaries be compatible with GNU:</p>\n\n<pre><code>rustup install stable-gnu \nrustup default stable-gnu\n</code></pre>\n\n<p>I don't know if there is gdb.exe for msvc toolchain.</p>\n"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1175, "favorite_count": 0, "accepted_answer_id": 45823165, "answer_count": 1, "score": 5, "last_activity_date": 1503420638, "creation_date": 1503418556, "question_id": 45822612, "link": "https://stackoverflow.com/questions/45822612/gdb-doesnt-find-debugging-symbols-in-rust-executable", "title": "GDB doesn&#39;t find debugging symbols in Rust executable", "body": "<p>This is my Cargo.toml with debugging settings:</p>\n\n<pre><code>[package] \nname = \"rpolysolve\" \nversion = \"0.1.0\" \nauthors = [\"stiv\"]\n\n[dependencies] \n[profile.dev] \ndebug = true  \nopt-level = 0\n</code></pre>\n\n<p>As I can see from console output, cargo has not removed debug symbols:</p>\n\n<pre><code>Finished dev [unoptimized + debuginfo] target(s) in 5.66 secs\n</code></pre>\n\n<p>I have downloaded gdb-7.9.1-tdm64-2 to my C:\\gdb-7.9.1-tdm64-2 folder on windows7. Now I try to launch it with this command from project folder:</p>\n\n<pre><code>C:\\gdb-7.9.1-tdm64-2\\gdb64\\bin\\gdb.exe ./target/debug/rpolysolve.exe\n\nGNU gdb (GDB) 7.9.1\n... GNU blablabla cut here ...\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./target/debug/rpolysolve.exe...(no debugging symbols found)...done.\n</code></pre>\n\n<p>As you see it says <strong>no debugging symbols found</strong> and there is now way how I can set a breakpoint. How can I fix this?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9895, "user_id": 452775, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/88963e7cc58eabf150447e7b78a24793?s=128&d=identicon&r=PG", "display_name": "Lii", "link": "https://stackoverflow.com/users/452775/lii"}, "edited": false, "score": 0, "creation_date": 1503419622, "post_id": 45822602, "comment_id": 78603757, "body": "Hi Kim, I change the references to code elements in your text to use the customary inline code formatting. I hope your are okay with that!"}], "answers": [{"comments": [{"owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "edited": false, "score": 0, "creation_date": 1503420428, "post_id": 45822858, "comment_id": 78604196, "body": "I&#39;m positive a simple function pointer will work, thanks for clearing that up!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1503419475, "creation_date": 1503419475, "answer_id": 45822858, "question_id": 45822602, "link": "https://stackoverflow.com/questions/45822602/lifetime-of-function-reference-in-rust/45822858#45822858", "title": "Lifetime of function reference in Rust", "body": "<p>A few things:</p>\n\n<ul>\n<li>You used <code>&amp;Fn()</code> instead of <code>fn()</code>. The former is a trait object of the <code>Fn</code> trait, the latter is a good ol' function pointer. While the former is more general (in particular, it supports closures), it's rather unusual to store a reference to a closure that lives somewhere else. \n\n<ul>\n<li>Therefore, if you want to store closures as well, you'd probably use a <code>Box&lt;Fn()&gt;</code> which solves your lifetime problems.</li>\n<li>If you don't care about closures, but just want to save function pointer, you can simply write <code>Visual(fn(Entity)),</code>. Function pointer always have a static lifetime. So this solves your lifetime problems as well.</li>\n<li>But what if you really want to store a reference to an <code>Fn</code> trait object, which lives somewhere else? The solution depends on <em>where</em> it lives:</li>\n<li><strong>In <code>Entity</code></strong>: see <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct/32300133#32300133\">here</a></li>\n<li><strong>somehere else</strong>: use a lifetime <code>&lt;'a&gt;</code></li>\n</ul></li>\n<li>You wrote <code>Fn(Entity) -&gt; ()</code>. The <code>-&gt; ()</code> is always useless, you can omit it.</li>\n</ul>\n"}], "owner": {"reputation": 137, "user_id": 3872464, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9e586fd4dd77f18a8db8ac69eea788c7?s=128&d=identicon&r=PG&f=1", "display_name": "Kim", "link": "https://stackoverflow.com/users/3872464/kim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 511, "favorite_count": 0, "accepted_answer_id": 45822858, "answer_count": 1, "score": 4, "last_activity_date": 1503419551, "creation_date": 1503418524, "last_edit_date": 1503419551, "question_id": 45822602, "link": "https://stackoverflow.com/questions/45822602/lifetime-of-function-reference-in-rust", "title": "Lifetime of function reference in Rust", "body": "<p>So I'm trying to squeeze in callbacks to this enum variant (<code>Visual</code>) - which will be stored in a vector as seen within the struct <code>EntityComponents</code>:</p>\n\n<pre><code>enum Component {\n    Position([f64; 2]),\n    Visual(&amp; Fn(Entity) -&gt; ()),\n}\n\nstruct EntityComponents {\n    components_of_entity: HashMap&lt;TypeId, Vec&lt;Component&gt;&gt;,\n}\n</code></pre>\n\n<p>However, Rust requires me to provide explicit lifetime parameters here.\nMy idea is that I want the function reference to live at least as long as its argument (the <code>Entity</code>), but I have no idea how the syntax for that would look like? Is it even possible?</p>\n\n<p>The idea is that as long as an <code>Entity</code> has a <code>Visual</code> component, we can use this callback to render it!</p>\n"}, {"tags": ["rust", "asm.js", "webassembly"], "answers": [{"comments": [{"owner": {"reputation": 3311, "user_id": 980922, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/113cac87e662e7150d6d48eb3efac502?s=128&d=identicon&r=PG", "display_name": "imichaelmiers", "link": "https://stackoverflow.com/users/980922/imichaelmiers"}, "edited": false, "score": 0, "creation_date": 1503422487, "post_id": 45810714, "comment_id": 78605231, "body": "This doesn&#39;t appear to work. But need to do some digging to be sure. In particular, it appears that the special linker is never invoked with a .cargo/config in the project directory"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 3311, "user_id": 980922, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/113cac87e662e7150d6d48eb3efac502?s=128&d=identicon&r=PG", "display_name": "imichaelmiers", "link": "https://stackoverflow.com/users/980922/imichaelmiers"}, "edited": false, "score": 0, "creation_date": 1503424385, "post_id": 45810714, "comment_id": 78606261, "body": "This is hard to debug.. cargo does not complain about invalid settings in the config file as long it&#39;s valid Toml. What happens if you pass the linker directly to rustc with <code>-C linker=</code>?"}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 3, "last_activity_date": 1503394918, "last_edit_date": 1503394918, "creation_date": 1503384615, "answer_id": 45810714, "question_id": 45807869, "link": "https://stackoverflow.com/questions/45807869/rust-webassembly-and-passing-arguments-for-increased-total-memory/45810714#45810714", "title": "rust, WebAssembly, and passing arguments for increased total memory", "body": "<p><a href=\"https://gregkatz.github.io/2017-05-20-rust-emscripten.html\" rel=\"nofollow noreferrer\">This</a> blog post offers a solution that I think can be applied in your case too:</p>\n\n<blockquote>\n  <p>As best as I can tell there is no way to pass most linker arguments through cargo. Instead, hack around the limitation by specifying a custom linker that is actually a shell script wrapping the real linker.</p>\n</blockquote>\n\n<p>Create a shell script like <code>emcc_link</code> that calls emscripten with the appropriate options:</p>\n\n<pre><code>emcc \"-s\" \"TOTAL_MEMORY=33554432\" $@\n</code></pre>\n\n<p>(You may need other options to make it work. Check the <a href=\"https://gregkatz.github.io/2017-05-20-rust-emscripten.html\" rel=\"nofollow noreferrer\">blog post</a> for details.)</p>\n\n<p>And specify to use it for your project by editing/creating <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow noreferrer\"><code>.cargo/config</code></a>:</p>\n\n<pre><code>[target.wasm32-unknown-emscripten]\nlinker = \"/your/project/dir/emcc_sdl\"\n\n[target.asmjs-unknown-emscripten]\nlinker = \"/your/project/dir/emcc_sdl\"\n</code></pre>\n\n<p>I ruthlessly assumed the build environment is Linux or the like. On Windows the shell script should probably be a batch script and I'm not sure if there are any differences in <code>.cargo/config</code>.</p>\n\n<p>Disclaimer: I have not tried any of this.</p>\n"}], "owner": {"reputation": 3311, "user_id": 980922, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/113cac87e662e7150d6d48eb3efac502?s=128&d=identicon&r=PG", "display_name": "imichaelmiers", "link": "https://stackoverflow.com/users/980922/imichaelmiers"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 636, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1504716742, "creation_date": 1503367448, "last_edit_date": 1504716742, "question_id": 45807869, "link": "https://stackoverflow.com/questions/45807869/rust-webassembly-and-passing-arguments-for-increased-total-memory", "title": "rust, WebAssembly, and passing arguments for increased total memory", "body": "<p>I have a rust project I am compiling to webasm per <a href=\"http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/\" rel=\"noreferrer\">http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/</a></p>\n\n<p>Project compiles. When I run it in Chrome Canary, it runs out of memory and gives me a very helpful error message:</p>\n\n<pre><code>abort(\"Cannot enlarge memory arrays. Either (1) compile with  -s \nTOTAL_MEMORY=X  with X higher than the current value 16777216, (2) compile \nwith  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, \n...\n</code></pre>\n\n<p>Problem is, its not clear how to pass those flags to rustc / the build tool chain.</p>\n\n<p>Neither  setting EMMAKEN_CFLAGS or  the following work:</p>\n\n<pre><code>cargo  rustc -v --target=wasm32-unknown-emscripten --release -- -Clink-args=\"-s TOTAL_MEMORY=33554432\" \n</code></pre>\n"}, {"tags": ["websocket", "rust", "hyper"], "answers": [{"comments": [{"owner": {"reputation": 2312, "user_id": 306297, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/107a923c2edf9d5683db0ef5399d26ec?s=128&d=identicon&r=PG", "display_name": "cruppstahl", "link": "https://stackoverflow.com/users/306297/cruppstahl"}, "edited": false, "score": 1, "creation_date": 1503513890, "post_id": 45824862, "comment_id": 78652595, "body": "Thank you. This was well hidden in the documentation. I would not have found it."}], "tags": [], "owner": {"reputation": 835, "user_id": 506880, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8dd65cde3482a70d32c33c161f2d4c4f?s=128&d=identicon&r=PG", "display_name": "Alex jg", "link": "https://stackoverflow.com/users/506880/alex-jg"}, "is_accepted": true, "score": 8, "last_activity_date": 1503427664, "creation_date": 1503427664, "answer_id": 45824862, "question_id": 45806359, "link": "https://stackoverflow.com/questions/45806359/running-websocket-and-http-server-on-the-same-port-rust-hyper/45824862#45824862", "title": "Running websocket and http server on the same port (Rust, hyper)", "body": "<p>There seems to be some docs on this in the rust-websocket documentation <a href=\"http://cyderize.github.io/rust-websocket/doc/websocket/server/upgrade/sync/struct.HyperRequest.html\" rel=\"noreferrer\">here</a></p>\n\n<p>Pasting from the docs: </p>\n\n<pre><code>use hyper::server::{Server, Request, Response};\nuse websocket::Message;\nuse websocket::sync::server::upgrade::IntoWs;\nuse websocket::sync::server::upgrade::HyperRequest;\n\nServer::http(\"0.0.0.0:80\").unwrap().handle(move |req: Request, res: Response| {\n    match HyperRequest(req).into_ws() {\n        Ok(upgrade) =&gt; {\n            // `accept` sends a successful handshake, no need to worry about res\n            let mut client = match upgrade.accept() {\n                Ok(c) =&gt; c,\n                Err(_) =&gt; panic!(),\n            };\n\n            client.send_message(&amp;Message::text(\"its free real estate\"));\n        },\n\n        Err((request, err)) =&gt; {\n            // continue using the request as normal, \"echo uri\"\n            res.send(b\"Try connecting over ws instead.\").unwrap();\n        },\n    };\n})\n.unwrap();\n</code></pre>\n"}], "owner": {"reputation": 2312, "user_id": 306297, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/107a923c2edf9d5683db0ef5399d26ec?s=128&d=identicon&r=PG", "display_name": "cruppstahl", "link": "https://stackoverflow.com/users/306297/cruppstahl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1724, "favorite_count": 2, "accepted_answer_id": 45824862, "answer_count": 1, "score": 8, "last_activity_date": 1612382973, "creation_date": 1503354236, "question_id": 45806359, "link": "https://stackoverflow.com/questions/45806359/running-websocket-and-http-server-on-the-same-port-rust-hyper", "title": "Running websocket and http server on the same port (Rust, hyper)", "body": "<p>I want to write a webserver using Rust, Hyper and websocket-rs. The webserver must be able to handle http requests AND websocket requests <strong>on the same port</strong>. I used the official sample (<code>async-server.rs</code>: <a href=\"https://github.com/cyderize/rust-websocket/blob/master/examples/async-server.rs\" rel=\"noreferrer\">https://github.com/cyderize/rust-websocket/blob/master/examples/async-server.rs</a>) and tried to modify it. My idea was to change the error handling. If the client's request is a simple http request then do not return an error, but spawn a future which handles the request instead.</p>\n\n<p>Based on another SO question (<a href=\"https://stackoverflow.com/questions/44974034/how-do-i-handle-an-error-when-using-rust-websocket-so-that-only-that-connection/45055116#45055116\">How do I handle an error when using rust-websocket so that only that connection fails and not the entire program?</a>) I changed the error handling from the sample.</p>\n\n<p>This is the old code:</p>\n\n<pre><code>.map_err(|InvalidConnection {error, ..}| {\n    println!(\"Error:{:?}\",error);\n    return error;\n})\n</code></pre>\n\n<p>Here is my new code:</p>\n\n<pre><code>.map(Some).or_else(|_| -&gt; Result&lt;_, ()&gt; {\n    // SPAWN THE FUTURE\n    Ok(None)\n})\n</code></pre>\n\n<p>This is where I am stuck. The sample code calls a function <code>spawn_future</code>, which expects a parameter (<code>upgrade.reject()</code>) which is not available in my code since I do not have access to an <code>upgrade</code> structure. I tried a few other things (i.e. calling <code>handle.spawn_fn</code>) but the compiler never liked what I did. (I could paste some of the compiler errors, but I do not think that they would improve the quality of my post.)</p>\n\n<p><strong>Here is my question</strong>: What is the recommended way to write an asynchronous server which can handle http requests AND websocket requests on the same port? If my approach is correct: can you please help me to fill the <code>SPAWN THE FUTURE</code> line?</p>\n\n<p>Additional context (if you haven't noticed yet): I am a total Rust beginner. </p>\n"}, {"tags": ["vector", "collections", "rust", "move-semantics"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503342253, "post_id": 45803990, "comment_id": 78565775, "body": "Do you mean specifically <code>Option&lt;T&gt;</code> rather than <code>Option&lt;&amp;T&gt;</code> that you can get from <code>vec.get(index)</code>, or did you miss that <code>.get</code> exists?"}, {"owner": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1503342341, "post_id": 45803990, "comment_id": 78565824, "body": "@loganfsmyth I specifically mean <code>Option&lt;T&gt;</code> like it says in my question. What I want is similar to <code>option.take()</code> if that makes sense?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1503394664, "post_id": 45803990, "comment_id": 78585499, "body": "Note: if you find yourself throwing <code>Vec</code> on a regular basis, you may want to see if you can avoid materializing them to start with. Not doing anything is always faster than doing something, no matter how efficient you are at doing it."}], "answers": [{"comments": [{"owner": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "edited": false, "score": 1, "creation_date": 1503344305, "post_id": 45804069, "comment_id": 78566695, "body": "Ah, this is a bit of an ugly solution, but I think it should work! I still think a <code>take</code> method on Vec would be great..."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "edited": false, "score": 0, "creation_date": 1503380625, "post_id": 45804069, "comment_id": 78576870, "body": "@Others Maybe you should open a RFC"}, {"owner": {"reputation": 154, "user_id": 6261816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ba543809a6a39a1fec992b8bf8721e8?s=128&d=identicon&r=PG&f=1", "display_name": "lukwol", "link": "https://stackoverflow.com/users/6261816/lukwol"}, "edited": false, "score": 0, "creation_date": 1503382697, "post_id": 45804069, "comment_id": 78577757, "body": "How about changing <code>mut vec: Vec&lt;T&gt;</code> to <code>vec: &amp;mut Vec&lt;T&gt;</code> in first solution?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 154, "user_id": 6261816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ba543809a6a39a1fec992b8bf8721e8?s=128&d=identicon&r=PG&f=1", "display_name": "lukwol", "link": "https://stackoverflow.com/users/6261816/lukwol"}, "edited": false, "score": 1, "creation_date": 1503393594, "post_id": 45804069, "comment_id": 78584738, "body": "@lukwol: Why? The OP explicitly asked something that consumes the vector."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 15, "last_activity_date": 1568214993, "last_edit_date": 1568214993, "creation_date": 1503342524, "answer_id": 45804069, "question_id": 45803990, "link": "https://stackoverflow.com/questions/45803990/how-can-i-take-an-item-from-a-vec-in-rust/45804069#45804069", "title": "How can I take an item from a Vec in Rust?", "body": "<p>You can write your function like this:</p>\n\n<pre><code>fn take&lt;T&gt;(mut vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt; {\n    if vec.get(index).is_none() {\n        None\n    } else {\n        Some(vec.swap_remove(index))\n    }\n}\n</code></pre>\n\n<p>The code you <em>see</em> here (<code>get</code> and <code>swap_remove</code>) is guaranteed O(1). </p>\n\n<p><em>However</em>, kind of hidden, <code>vec</code> is dropped at the end of the function and this drop operation is likely not O(1), but O(n) (where n is <code>vec.len()</code>). If <code>T</code> implements <code>Drop</code>, then <code>drop()</code> is called for every element still inside the vector, meaning dropping the vector is guaranteed O(n). If <code>T</code> does not implement <code>Drop</code>, then the <code>Vec</code> only needs to deallocate the memory. The time complexity of the <code>dealloc</code> operation depends on the allocator and is not specified, so we cannot assume it is O(1).</p>\n\n<hr>\n\n<p>To mention another solution using iterators:</p>\n\n<pre><code>fn take&lt;T&gt;(vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt; {\n    vec.into_iter().nth(index)\n}\n</code></pre>\n\n<p>I was about to write this:</p>\n\n<blockquote>\n  <p>While <code>Iterator::nth()</code> usually is a <em>linear time</em> operation, the iterator over a vector overrides this method to make it a O(1) operation.</p>\n</blockquote>\n\n<p>But then I noticed, that this is only true for the iterator which iterates over slices. The <code>std::vec::IntoIter</code> iterator which would be used in the code above, doesn't override <code>nth()</code>. It has been attempted <a href=\"https://github.com/rust-lang/rust/pull/25047\" rel=\"noreferrer\">here</a>, but it doesn't seem to be that easy.</p>\n\n<p>So, as of right now, the iterator solution above is a O(n) operation! Not to mention the time needed to drop the vector, as explained above.</p>\n"}, {"comments": [{"owner": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "edited": false, "score": 1, "creation_date": 1503415017, "post_id": 45814000, "comment_id": 78600684, "body": "I&#39;m not necessarily only complaining about the overhead of restoring Vec&#39;s invariants (although the code I&#39;m working with is in a tight inner loop, so speed really does matter to me), I also want to write code that follows what I mean. In this case, I really want to express the <code>take</code> operation, not a <code>remove</code> operation. Even if this was just a speed issue, I need an alternative to profile against anyway."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "edited": false, "score": 1, "creation_date": 1503419923, "post_id": 45814000, "comment_id": 78603924, "body": "@Others: &quot;Tight inner loop&quot; and &quot;dropping <code>Vec</code>&quot; don&#39;t sound too good together. Once you&#39;ve written the code, I encourage you to post it to Code Reviews or reddit and ask how to optimize it; hopefully there&#39;ll be a way to avoid a memory deallocation in your inner loop as those are costly."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1568216875, "last_edit_date": 1568216875, "creation_date": 1503394609, "answer_id": 45814000, "question_id": 45803990, "link": "https://stackoverflow.com/questions/45803990/how-can-i-take-an-item-from-a-vec-in-rust/45814000#45814000", "title": "How can I take an item from a Vec in Rust?", "body": "<p>The reason <code>fn take&lt;T&gt;(vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt;</code> does not exist in the standard library is that it is not very useful in general. For example, supposing that you have a <code>Vec&lt;String&gt;</code> of length 10, it means throwing away 9 strings and only using 1. This seems wasteful.</p>\n\n<p>In general, the standard library will try to provide an API that is useful in a maximum of scenarios, and in this instance it would be more logical to have a <code>fn take&lt;T&gt;(vec: &amp;mut Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt;</code>.</p>\n\n<p>The only question is how to preserve the invariant, of course:</p>\n\n<ul>\n<li>it can be preserved by exchanging with the last element, which is what <code>Vec::swap_remove</code> does,</li>\n<li>it can be preserved by shifting the successor elements in, which is what <code>Vec::drain</code> does.</li>\n</ul>\n\n<p>Those are very flexible, and can be adapted to fill more specific scenarios, such as yours.</p>\n\n<hr>\n\n<p>Adapting <code>swap_remove</code>:</p>\n\n<pre><code>fn take&lt;T&gt;(mut vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt; {\n    if index &lt; vec.len() {\n        Some(vec.swap_remove(index))\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>Adapting <code>drain</code>:</p>\n\n<pre><code>fn take&lt;T&gt;(mut vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt; {\n    if index &lt; vec.len() {\n        vec.drain(index..index+1).next()\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>Noting that the former is more efficient: it's O(1).</p>\n\n<hr>\n\n<blockquote>\n  <p>I'm looking for a method that consumes the <code>Vec</code> and returns one element, without the overhead of restoring <code>Vec</code>'s invariants the way <code>remove</code> and <code>swap_remove</code> do.</p>\n</blockquote>\n\n<p>This reeks of premature micro-optimization to me.</p>\n\n<p>First of all, note that it is necessary to destroy the elements of the vector; you can accomplish this in two ways:</p>\n\n<ol>\n<li><code>swap_remove</code>, then iterate over each element to destroy them,</li>\n<li>Iterate over each element to destroy them, skipping the specific <code>index</code>.</li>\n</ol>\n\n<p>It is not clear to me that the latter would be faster than the former; if anything it looks more complicated, with more branches (I advise two loops), which may throw off the predictor and may be less amenable to vectorization.</p>\n\n<p>Secondly, before complaining about the overhead of restoring the <code>Vec</code>'s invariant, have you properly <strong>profiled</strong> the solution?</p>\n\n<p>If we look at the <code>swap_remove</code> variant, there are 3 steps:</p>\n\n<ol>\n<li><code>swap_remove</code> (O(1)),</li>\n<li>destroy each remaining element (O(N)),</li>\n<li>free the backing memory.</li>\n</ol>\n\n<p>Step 2 may be optimized out if the element has no <code>Drop</code> implementation, but otherwise I would be it's a toss whether (2) or (3) is dominating the cost.</p>\n\n<p><strong>TL;DR</strong>: I am afraid that you are fighting ghost issues, <strong>profile</strong> before trying to optimize.</p>\n"}], "owner": {"reputation": 2286, "user_id": 1981468, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/HnKNp.jpg?s=128&g=1", "display_name": "Others", "link": "https://stackoverflow.com/users/1981468/others"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8725, "favorite_count": 1, "accepted_answer_id": 45804069, "answer_count": 2, "score": 16, "last_activity_date": 1568234947, "creation_date": 1503342159, "last_edit_date": 1568234947, "question_id": 45803990, "link": "https://stackoverflow.com/questions/45803990/how-can-i-take-an-item-from-a-vec-in-rust", "title": "How can I take an item from a Vec in Rust?", "body": "<p>I'm looking for a method that <strong>consumes</strong> a <code>Vec</code> and returns one element, without the overhead of restoring <code>Vec</code>'s invariants the way <code>remove</code> and <code>swap_remove</code> do:</p>\n\n<pre><code>fn take&lt;T&gt;(vec: Vec&lt;T&gt;, index: usize) -&gt; Option&lt;T&gt;\n</code></pre>\n\n<p>However, I can't find such a method. Am I missing something? Is this actually unsafe or impossible?</p>\n\n<p>This is a different question from <a href=\"https://stackoverflow.com/questions/37489004/built-in-safe-way-to-move-out-of-vect\">Built in *safe* way to move out of Vec&lt;T&gt;?</a>\nThere the goal was a <code>remove</code> method that didn't panic on out of bounds access and returned a <code>Result</code>. I'm looking for a method that consumes a <code>Vec</code> and returns one of the elements. None of the answers to the above question address my question.</p>\n"}, {"tags": ["function", "struct", "scope", "rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 19, "last_activity_date": 1503341674, "creation_date": 1503341674, "answer_id": 45803886, "question_id": 45803779, "link": "https://stackoverflow.com/questions/45803779/rust-scoping-rules-for-struct-owned-functions/45803886#45803886", "title": "Rust scoping rules for struct-owned functions", "body": "<p>These functions are called <strong><em>associated functions</em></strong>. And they live in the namespace of the type. They always have to be called like <code>Type::function()</code>. In your case, that's <code>Blob::generate_a_result()</code>. But for referring to your own type, there is the special keyword <code>Self</code>. So the best solution is:</p>\n\n<pre><code>Self::generate_a_result()\n</code></pre>\n"}], "owner": {"reputation": 175, "user_id": 4847959, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/X03fw.jpg?s=128&g=1", "display_name": "Scott L.", "link": "https://stackoverflow.com/users/4847959/scott-l"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3277, "favorite_count": 1, "accepted_answer_id": 45803886, "answer_count": 1, "score": 13, "last_activity_date": 1503341674, "creation_date": 1503341186, "last_edit_date": 1503341464, "question_id": 45803779, "link": "https://stackoverflow.com/questions/45803779/rust-scoping-rules-for-struct-owned-functions", "title": "Rust scoping rules for struct-owned functions", "body": "<p>I am trying to understand what exactly the scope is for functions defined within an <code>impl</code> block but which don't accept <code>&amp;self</code> as a parameter.  For example, why doesn't the following chunk of code compile? I get the error \"cannot find function <code>generate_a_result</code> in this scope\".</p>\n\n<pre><code>pub struct Blob {\n    num: u32,\n}\n\nimpl Blob {\n    pub fn new() -&gt; Blob {\n        generate_a_result()\n    }\n\n    fn generate_a_result() -&gt; Blob {\n        let result = Blob {\n            num: 0\n        };\n\n        result\n    }\n}\n</code></pre>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 1, "creation_date": 1503316840, "post_id": 45796365, "comment_id": 78550665, "body": "Aa @Ijedrz pointed out, this does not work without using either interrior mutability or unsafe code. Both are things I would not recommend unless you are really expierenced in using rust. In 95 % of cases there are more ideomatic solutions which are quicker and safer. Once I am at home I will probably write an acual answer in case noone else does this for me"}, {"owner": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "reply_to_user": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503317063, "post_id": 45796365, "comment_id": 78550827, "body": "At this point, the only idiomatic solution I can think of that does not use either interior mutability or unsafe code is to pass an immutable buffer reference as a parameter to the Parser when invoking a Parser method. This strikes me as a bit awkward though..."}, {"owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "edited": false, "score": 0, "creation_date": 1503319979, "post_id": 45796365, "comment_id": 78552845, "body": "Another idea would be to have one struct containing both the string and and a vec of parser closures. While this probably requires a complete rewrite it should quite fast/ideomatic. Or in case you only need to add items to the buffer, this could be safely written using a wrapper containimg a &#180;UnsafeCell&lt;String&gt; which only enables a the &#180;push_str()&#180; method and one getter method which returns a &#180;&amp;str&#180; of the current length. Both approaches would be completely safe. <i>--written on mobile,sry</i>"}], "answers": [{"comments": [{"owner": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "edited": false, "score": 0, "creation_date": 1503316922, "post_id": 45796445, "comment_id": 78550730, "body": "Your answer is as I expected but is this really idiomatic Rust? Using a shared reference is a common C++ solution..."}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "reply_to_user": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "edited": false, "score": 2, "creation_date": 1503317269, "post_id": 45796445, "comment_id": 78550961, "body": "Isn&#39;t that exactly what you are trying to achieve, though? Maybe I understand your question wrong. If not a shared reference, what is it you&#39;re trying to do?"}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "reply_to_user": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "edited": false, "score": 0, "creation_date": 1503317475, "post_id": 45796445, "comment_id": 78551137, "body": "Would you mind elaborating? Maybe then I am able to come up with something better."}, {"owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "reply_to_user": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "edited": false, "score": 0, "creation_date": 1503345039, "post_id": 45796445, "comment_id": 78567012, "body": "@GearoidMurphy <code>Arc</code>&#39;s are shared references. A <code>RwLock</code> or <code>Mutex</code> can provide the ability to temporarily lock the resource while it&#39;s being read/written to. It has a cost, but this is the safest solution."}], "tags": [], "owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "is_accepted": false, "score": 2, "last_activity_date": 1503317160, "last_edit_date": 1503317160, "creation_date": 1503316418, "answer_id": 45796445, "question_id": 45796365, "link": "https://stackoverflow.com/questions/45796365/idiomatic-rust-method-for-handling-references-to-a-buffer/45796445#45796445", "title": "Idiomatic Rust method for handling references to a buffer", "body": "<p>The golden rule of the rust borrow checker is: Only one writer OR multiple readers can access a resource at a time. This ensures that algorithms are safe to run in multiple threads.</p>\n\n<p>You breach this rule here:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Parser&lt;'a&gt; {\n    buffer: &amp;'a String\n}\n\nfn main() {\n    // mutable access begins here\n    let mut source = String::from(\"Peter\");\n    // immutable access begins here\n    let buffer = &amp;source;\n    let parser = Parser { buffer };\n\n    source.push_str(\" Pan\");\n\n    println!(\"{:?}\", parser);\n    // Both immutable and mutable access end here\n}\n</code></pre>\n\n<p>If you are sure that your program doesn't actively access resources at the same time mutably and immutably, you can move the check from compile time to run time by wrapping your resource in a <code>RefCell</code>:  </p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Parser {\n    buffer: Rc&lt;RefCell&lt;String&gt;&gt;\n}\n\nfn main() {\n    let source = Rc::new(RefCell::new(String::from(\"Peter\")));\n    let parser = Parser { buffer: source.clone() };\n\n    source.borrow_mut().push_str(\" Pan\");\n\n    println!(\"{:?}\", parser);\n}\n</code></pre>\n\n<p>If you plan on passing your resource around threads, you can use an <code>RwLock</code> to block the thread until the resource is available:  </p>\n\n<pre><code>use std::sync::{RwLock, Arc};\n\n#[derive(Debug)]\nstruct Parser {\n    buffer: Arc&lt;RwLock&lt;String&gt;&gt;\n}\n\nfn main() {\n    let source = Arc::new(RwLock::new(String::from(\"Peter\")));\n    let parser = Parser { buffer: source.clone() };\n\n    source.write().unwrap().push_str(\" Pan\");\n\n    println!(\"{:?}\", parser);\n}\n</code></pre>\n\n<hr>\n\n<p>On another note, you should prefer <code>&amp;str</code> over <code>&amp;String</code></p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1503319638, "creation_date": 1503319638, "answer_id": 45797540, "question_id": 45796365, "link": "https://stackoverflow.com/questions/45796365/idiomatic-rust-method-for-handling-references-to-a-buffer/45797540#45797540", "title": "Idiomatic Rust method for handling references to a buffer", "body": "<p>It's hard to tell what exactly you want to achieve by mutating the <code>source</code>; I would assume you don't want it to happen while the parser is doing its work? You can always try (depending on your specific use case) to separate the immutable from the mutable with an extra scope:</p>\n\n<pre><code>fn main() {\n    let mut source = String::from(\"Peter\");\n\n    {    \n        let buffer = &amp;source;\n        let parser = Parser { buffer };\n\n        println!(\"{:?}\", parser);\n    }\n\n    source.push_str(\" Pan\");\n}\n</code></pre>\n\n<p>If you don't want to use <code>RefCell</code>, <code>unsafe</code> (or to simply keep a mutable reference to <code>source</code> in <code>Parser</code> and use that), I'm afraid it doesn't get better than plain refactoring.</p>\n"}, {"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "is_accepted": false, "score": 1, "last_activity_date": 1503345129, "last_edit_date": 1503345129, "creation_date": 1503344503, "answer_id": 45804466, "question_id": 45796365, "link": "https://stackoverflow.com/questions/45796365/idiomatic-rust-method-for-handling-references-to-a-buffer/45804466#45804466", "title": "Idiomatic Rust method for handling references to a buffer", "body": "<p>To elaborate on how this can be done unsafely, what you've described can be achieved by using a raw const pointer to avoid the borrowing rules, which of course is inherently unsafe, as the very concept of what you've described is pretty unsafe. There are ways to make it safer though, should you choose this path. But I would probably default to using an <code>Arc&lt;RwLock&gt;</code> or <code>Arc&lt;Mutex&gt;</code> should safety be important.</p>\n\n<pre><code>use std::fmt::{self, Display};\n\n#[derive(Debug)]\nstruct Parser {\n    buffer: *const String\n}\n\nimpl Display for Parser {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let buffer = unsafe { &amp;*self.buffer };\n        write!(f, \"{}\", buffer)\n    }\n}\n\nfn main() {\n    let mut source = String::from(\"Peter\");\n    let buffer = &amp;source as *const String;\n    let parser = Parser { buffer };\n\n    source.push_str(\" Pan\");\n\n    println!(\"{}\", parser);\n}\n</code></pre>\n"}], "owner": {"reputation": 10926, "user_id": 300745, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/7KEV8.png?s=128&g=1", "display_name": "Gearoid Murphy", "link": "https://stackoverflow.com/users/300745/gearoid-murphy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 467, "favorite_count": 0, "accepted_answer_id": 45797540, "answer_count": 3, "score": 0, "last_activity_date": 1503345129, "creation_date": 1503316106, "question_id": 45796365, "link": "https://stackoverflow.com/questions/45796365/idiomatic-rust-method-for-handling-references-to-a-buffer", "title": "Idiomatic Rust method for handling references to a buffer", "body": "<p>I would like to be able to construct objects that contain immutable references to a mutable buffer object. The following code does not work but illustrates my use case, is there an idiomatic Rust method for handling this?</p>\n\n<pre><code>#[derive(Debug)]\nstruct Parser&lt;'a&gt; {\n    buffer: &amp;'a String\n}\n\nfn main() {\n    let mut source = String::from(\"Peter\");\n    let buffer = &amp;source;\n    let parser = Parser { buffer };\n\n    // How can I legally change source?\n    source.push_str(\" Pan\");\n\n    println!(\"{:?}\", parser);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1503326392, "post_id": 45794917, "comment_id": 78557661, "body": "Could this be addressed by change in the source code e.g. adding <code>#[inline(never)]</code> instead of changing the opt-level?"}, {"owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1503328485, "post_id": 45794917, "comment_id": 78559090, "body": "@kennytm: unfortunately not..The optimizer does much more than reallocating code, and Rust has no means to control optimization at function level."}], "answers": [{"tags": [], "owner": {"reputation": 11492, "user_id": 1386111, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/2c78c6c45c0cc6aaab86683f479c82ed?s=128&d=identicon&r=PG", "display_name": "Alvin Wong", "link": "https://stackoverflow.com/users/1386111/alvin-wong"}, "is_accepted": true, "score": 5, "last_activity_date": 1592386803, "creation_date": 1592386803, "answer_id": 62425992, "question_id": 45794917, "link": "https://stackoverflow.com/questions/45794917/specific-profiles-for-workspace-members/62425992#62425992", "title": "Specific profiles for workspace members", "body": "<p>This is now supported and stabilized since Rust 1.43:</p>\n\n<pre><code>[profile.release]\nopt-level = 3\n\n[profile.release.package.hal]\n# optimizer kills assembly code\nopt-level = 1\n</code></pre>\n\n<p>See: <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#overrides\" rel=\"noreferrer\">https://doc.rust-lang.org/cargo/reference/profiles.html#overrides</a></p>\n"}], "owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1128, "favorite_count": 1, "accepted_answer_id": 62425992, "answer_count": 1, "score": 10, "last_activity_date": 1592386803, "creation_date": 1503311636, "last_edit_date": 1503313248, "question_id": 45794917, "link": "https://stackoverflow.com/questions/45794917/specific-profiles-for-workspace-members", "title": "Specific profiles for workspace members", "body": "<p>Is it possible to specify specific profiles for members of a workspace?\nIf I write a profile into the member <code>Cargo.toml</code> I get:</p>\n\n<blockquote>\n  <p>warning: profiles for the non root package will be ignored, specify profiles at the workspace root:</p>\n</blockquote>\n\n<p>I also tried to put a specific profile into workspace root's <code>Cargo.toml</code>:</p>\n\n<pre><code>[profile.release]\nopt-level = 3\n\n[profile.release.hal]\n# optimizer kills assembly code\nopt-level = 1\n</code></pre>\n\n<p>However, it seems to be ignored too, as the applied options in the the verbose output show:</p>\n\n<blockquote>\n  <p>Running `rustc --crate-name hal src/hal/lib.rs --crate-type lib -C opt-level=3 --emit=dep-info,link [...]</p>\n</blockquote>\n\n<p>Is there any other way beside avoiding workspaces at all?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1503286399, "post_id": 45788866, "comment_id": 78535723, "body": "Why not use <code>read_to_end</code> to get the bytes without decoding to <code>String</code>?"}, {"owner": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1503367594, "post_id": 45788866, "comment_id": 78573566, "body": "@Veedrac I need to read line by line, any advice?"}], "answers": [{"comments": [{"owner": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "edited": false, "score": 0, "creation_date": 1503303507, "post_id": 45789128, "comment_id": 78542210, "body": "yes, I know there&#39;s a <code>encoding</code> crate which can decode or encode between different encodings.   But, it run into errors where I called <code>f.read_to_string(&amp;mut contents)</code> ,before I can do some encoding work. How can I read the content into String?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "edited": false, "score": 0, "creation_date": 1503317790, "post_id": 45789128, "comment_id": 78551330, "body": "@Will You can&#39;t, that&#39;s the point.  You have to read the file as bytes, then use <code>encoding</code> to decode it into a String."}, {"owner": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "edited": false, "score": 0, "creation_date": 1503369936, "post_id": 45789128, "comment_id": 78574042, "body": "how to read the file as bytes line by line? I know <code>read_to_end </code>, but I need to read line by line because the file is too big to load into memory."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "edited": false, "score": 0, "creation_date": 1503375105, "post_id": 45789128, "comment_id": 78575145, "body": "@Will: If, for some reason, you can&#39;t just decode the entire file at once then you&#39;ll need to do line splitting manually.  In any case, this has now turned into a different question, and I&#39;m not playing Question Tennis."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1503288227, "creation_date": 1503288227, "answer_id": 45789128, "question_id": 45788866, "link": "https://stackoverflow.com/questions/45788866/how-to-read-a-gbk-encoded-file-into-a-string/45789128#45789128", "title": "How to read a GBK-encoded file into a String?", "body": "<p>You likely want the <a href=\"https://crates.io/crates/encoding\" rel=\"nofollow noreferrer\"><code>encoding</code></a> crate.</p>\n"}, {"tags": [], "owner": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "is_accepted": true, "score": 5, "last_activity_date": 1503666746, "last_edit_date": 1503666746, "creation_date": 1503631006, "answer_id": 45873902, "question_id": 45788866, "link": "https://stackoverflow.com/questions/45788866/how-to-read-a-gbk-encoded-file-into-a-string/45873902#45873902", "title": "How to read a GBK-encoded file into a String?", "body": "<p>I figured out how to read line by line from a GBK-encoded file.</p>\n\n<pre><code>extern crate encoding;\n\nuse std::env;\nuse std::fs::File;\nuse std::io::prelude::*;\nuse std::io::BufReader;\n\nuse encoding::all::GBK;\nuse encoding::{Encoding, EncoderTrap, DecoderTrap};\n\nfn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n    let filename = &amp;args[1];\n\n    let mut file = File::open(filename).expect(\"file not found\");\n    let reader = BufReader::new(&amp;file);\n\n    let mut lines = reader.split(b'\\n').map(|l| l.unwrap());\n\n    for line in lines {\n        let decoded_string = GBK.decode(&amp;line, DecoderTrap::Strict).unwrap();\n        println!(\"{}\", decoded_string);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 702, "user_id": 4064006, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/QrdHQ.jpg?s=128&g=1", "display_name": "Will", "link": "https://stackoverflow.com/users/4064006/will"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 922, "favorite_count": 1, "accepted_answer_id": 45873902, "answer_count": 2, "score": 1, "last_activity_date": 1503666746, "creation_date": 1503285448, "last_edit_date": 1503666698, "question_id": 45788866, "link": "https://stackoverflow.com/questions/45788866/how-to-read-a-gbk-encoded-file-into-a-string", "title": "How to read a GBK-encoded file into a String?", "body": "<pre><code>use std::env;\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n    let filename = &amp;args[1];\n    let mut f = File::open(filename).expect(\"file not found\");\n    let mut contents = String::new();\n    f.read_to_string(&amp;mut contents).expect(\"something went wrong reading the file\");\n    println!(\"file content:\\n{}\", contents);\n}\n</code></pre>\n\n<p>When I attempt to read a <a href=\"https://en.wikipedia.org/wiki/GBK\" rel=\"nofollow noreferrer\">GBK</a> encoded file, I get the following error:</p>\n\n<pre><code>thread 'main' panicked at 'something went wrong reading the file: Error { repr: Custom(Custom { kind: InvalidData, error: StringError(\"stream did not contain valid UTF-8\") }) }', /checkout/src/libcore/result.rs:860\n</code></pre>\n\n<p>It says the stream must contain valid UTF-8. How can I read a GBK file?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1503300702, "post_id": 45788808, "comment_id": 78540777, "body": "Not related, but you can write <code>for arg in std::env::args().skip(1) { &#47;*etc.*&#47; }</code>"}], "answers": [{"tags": [], "owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "is_accepted": true, "score": 3, "last_activity_date": 1503289327, "creation_date": 1503289327, "answer_id": 45789271, "question_id": 45788808, "link": "https://stackoverflow.com/questions/45788808/mismatched-types-on-matching-string/45789271#45789271", "title": "Mismatched types on matching string", "body": "<p>Here arg is of type <code>String</code> in the match and <code>\"--bytes\"</code> is of type <code>&amp;str</code>. So <code>arg</code> of type <code>String</code> has to be converted to <code>&amp;str</code>.  This can be done using <code>String::as_ref()</code>.</p>\n\n<pre><code>let args_vector: Vec&lt;String&gt; = env::args().collect();\nfor arg in &amp;args_vector[1..] {\n    match arg.as_ref() {\n        \"--bytes\" =&gt; {\n            flag.c = true;\n        }\n        \"--chars\" =&gt; {\n            flag.m = true;\n        }\n        _ =&gt; println!(\"Error\")\n    };\n}\n</code></pre>\n\n<p>Note the missing <code>;</code> after <code>println!</code> to make all <code>match</code> arms return the same type.</p>\n"}], "owner": {"reputation": 345, "user_id": 2179079, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ebbf8303d2f09da0b0a55ef801b58597?s=128&d=identicon&r=PG", "display_name": "KDN", "link": "https://stackoverflow.com/users/2179079/kdn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 134, "favorite_count": 0, "closed_date": 1523994934, "accepted_answer_id": 45789271, "answer_count": 1, "score": 0, "last_activity_date": 1503300762, "creation_date": 1503284859, "last_edit_date": 1503300762, "question_id": 45788808, "link": "https://stackoverflow.com/questions/45788808/mismatched-types-on-matching-string", "closed_reason": "Duplicate", "title": "Mismatched types on matching string", "body": "<p>I seem to be mixing types but I can't quite figure out how to fix this. Can someone help me?</p>\n\n<pre><code>let args_vector: Vec&lt;String&gt;  = env::args().collect();\nfor arg in &amp;args_vector[1..]{\n    match arg{\n        \"--bytes\"  =&gt; {\n                flag.c = true;\n            },\n        \"--chars\" =&gt; {\n                flag.m =true;\n            },\n        _ =&gt; println! (\"Error\"),\n    }\n}\n</code></pre>\n\n<p>On the matches, I'm getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>mismatched types: expected struct `std::string::String`, found str  \n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": false, "score": 3, "last_activity_date": 1503281697, "creation_date": 1503281697, "answer_id": 45788533, "question_id": 45788242, "link": "https://stackoverflow.com/questions/45788242/rust-method-that-returns-token-name-as-a-string/45788533#45788533", "title": "Rust method that returns token name as a string", "body": "<p>No, this is not possible. These two constructs execute at different times in different contexts.</p>\n\n<p>Macros execute during the process of compilation, and thus have access to all of the information about the original source files. This means they are able to process individual source tokens and perform operations based on them.</p>\n\n<p>Methods execute when your program itself runs, and only have access to their arguments, and global variables. They have no data about the original sourcecode of the application, because that information is not stored in the compiled binary.</p>\n"}], "owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 565, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1503281697, "creation_date": 1503278589, "question_id": 45788242, "link": "https://stackoverflow.com/questions/45788242/rust-method-that-returns-token-name-as-a-string", "title": "Rust method that returns token name as a string", "body": "<p>The <code>stringify</code> macro returns the string of a token passed to it:</p>\n\n<pre><code>struct A;\n\nfn main() {\n    let my_identifier = A {};\n    assert!(stringify!(my_identifier) == \"my_identifier\");\n}\n</code></pre>\n\n<p>[<a href=\"https://play.rust-lang.org/?gist=ccd2ecc16736e06ae6d92e07b336dad0&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a>]</p>\n\n<p>Is there a way to for a method to return the string of the token on which it is called?</p>\n\n<p>Something like:</p>\n\n<pre><code>struct A;\n\nimpl A {\n    fn token_to_string(&amp;self) -&gt; &amp;str{\n        /* ... */\n    }\n}\n\nfn main() {\n    let my_identifier = A {};\n    assert!(my_identifier.token_to_string() == \"my_identifier\");\n}\n</code></pre>\n\n<p>[<a href=\"https://play.rust-lang.org/?gist=888868743d213bab8562fb0f2988ae5a&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a>]</p>\n\n<p>Googling for this has not been fruitful. I'm not sure if it's possible, but I thought it reasonable to ask here before diving into the implementation of <code>stringify</code> which would be my next step in investigating this.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503268749, "post_id": 45787322, "comment_id": 78532567, "body": "It&#39;s generally an <a href=\"https://stackoverflow.com/help/mcve\"><code>MVCE</code></a> in your question, along with the full error from the compiler. Ideally this should all work if dropped into <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">play.rust-lang.org</a>. There isn&#39;t really enough to go on as-is."}, {"owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503269245, "post_id": 45787322, "comment_id": 78532644, "body": "Does that help at all?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503269644, "post_id": 45787322, "comment_id": 78532715, "body": "Nothing about your example code would trigger errors about <code>Sync</code> / <code>Send</code>, so presumable there is more code that needs to be included."}, {"owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503269774, "post_id": 45787322, "comment_id": 78532746, "body": "My bad, examples were inverted. The first line gives out the error even in play.rust-lang"}], "answers": [{"comments": [{"owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "edited": false, "score": 1, "creation_date": 1503316663, "post_id": 45796295, "comment_id": 78550540, "body": "That is perfect, thanks. I&#39;m still getting used to the compiler so I&#39;m seeing myself getting confused about its messages s more often than I&#39;d like. Awesome answer, thanks."}], "tags": [], "owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "is_accepted": true, "score": 4, "last_activity_date": 1503315906, "creation_date": 1503315906, "answer_id": 45796295, "question_id": 45787322, "link": "https://stackoverflow.com/questions/45787322/why-is-into-not-send-sync/45796295#45796295", "title": "Why is `Into` not Send/Sync?", "body": "<p>Note that the full error message is this:</p>\n\n<pre><code>error[E0225]: only Send/Sync traits can be used as additional traits in a trait object\n --&gt; src/main.rs:1:25\n  |\n1 | fn b&lt;A&gt;(a: A, b: Copy + Into&lt;A&gt;) {}\n  |                         ^^^^^^^ non-Send/Sync additional trait\n</code></pre>\n\n<p>This error message is not making a statement about whether <code>Into&lt;A&gt;</code> implements <code>Send</code> or <code>Sync</code>; it is saying that the trait <code>Into&lt;A&gt;</code> is <em>itself</em> not either of those traits.</p>\n\n<p>The compiler is telling you this because the compiler is assuming that you are deliberately attempting to create a <em>trait object</em> with multiple traits.</p>\n\n<ul>\n<li><p>Typical examples of <em>trait objects</em> are things like <code>Box&lt;Trait&gt;</code> or <code>&amp;Trait</code>. You happen to have written your code without any indirection before the trait itself, which is not supported (at least not in Rust today), but the compiler is treating your code as if your type declaration <code>b: Copy + Into&lt;A&gt;</code> <em>is</em> a trait object, and then finding problems that arise after making such an assumption.</p></li>\n<li><p>You can read more about trait objects in <a href=\"https://doc.rust-lang.org/book/second-edition/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\">the book</a></p></li>\n<li><p>If you write your code with only one trait in the trait object, e.g. <code>b: std::fmt::Debug</code>, then the compiler will give you a different error:</p>\n\n<pre><code>error[E0277]: the trait bound `std::fmt::Debug + 'static: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:1:15\n  |\n1 | fn b&lt;A&gt;(a: A, b: std::fmt::Debug) {}\n  |               ^ `std::fmt::Debug + 'static` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + 'static`\n  = note: all local variables must have a statically known size\n</code></pre></li>\n</ul>\n\n<p><em>Anyway</em>, in Rust today, you cannot generally put multiple traits into a single \"trait object\". But there is one exceptional case: you can currently use <code>Send</code> and/or <code>Sync</code> as additional traits in a trait object.</p>\n\n<p>So the compiler is telling you that your attempt to use <code>Into&lt;A&gt;</code> as an additional trait in the trait object is invalid, because you can only have <code>Send</code> or <code>Sync</code> as an additional trait, and <code>Into&lt;A&gt;</code> is not either of those.</p>\n"}], "owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 0, "accepted_answer_id": 45796295, "answer_count": 1, "score": 2, "last_activity_date": 1503315906, "creation_date": 1503267979, "last_edit_date": 1503269751, "question_id": 45787322, "link": "https://stackoverflow.com/questions/45787322/why-is-into-not-send-sync", "title": "Why is `Into` not Send/Sync?", "body": "<p>From this line:</p>\n\n<pre><code>fn b&lt;A&gt;(a: A, b: Copy + Into&lt;A&gt;) {}\n</code></pre>\n\n<p>I'm getting the error <code>non-Send/Sync additional trait</code>, pointing to the <code>Into&lt;B&gt;</code> bit. If I remove it, it compiles. If I change the definition to take an additional type parameter that satisfies both traits, it also compiles.</p>\n\n<pre><code>fn a&lt;A, B: Copy + Into&lt;A&gt;&gt;(a: A, b: B) {}\n</code></pre>\n"}, {"tags": ["iterator", "rust", "iteration"], "answers": [{"comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1503453615, "post_id": 45790579, "comment_id": 78616617, "body": "&quot;<i><code>|_| if i % 2 == 0 {true} else {false}</code></i>&quot; Please, just <code>|_| i % 2 == 0</code>... ;-]"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1503469923, "post_id": 45790579, "comment_id": 78621577, "body": "@ildjarn hah, yes. I also hoisted the modulo out of the closure. although the compiler might be able to optimize it anyway."}], "tags": [], "owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "is_accepted": true, "score": 6, "last_activity_date": 1503515870, "last_edit_date": 1503515870, "creation_date": 1503297063, "answer_id": 45790579, "question_id": 45787053, "link": "https://stackoverflow.com/questions/45787053/conditionally-return-empty-iterator-from-flat-map/45790579#45790579", "title": "Conditionally return empty iterator from flat_map", "body": "<p>Since Rust is statically typed and each step in an iterator chain changes the result to a new type that entrains the previous types (unless you use boxed trait objects) you will have to write it in a way where both branches are covered by the same types.</p>\n\n<p>One way to convey conditional emptiness with a single type is the <a href=\"https://doc.rust-lang.org/std/iter/struct.TakeWhile.html\" rel=\"nofollow noreferrer\"><code>TakeWhile</code></a> iterator implementation.</p>\n\n<pre><code>.flat_map(|(i, row)| {\n    let iter = row.iter().map(|x| x * 2);\n    let take = i % 2 == 0;\n    iter.take_while(|_| take)\n})\n</code></pre>\n\n<p>If you don't mind ignoring the edge-case where the input iterator <code>foo</code> could have more than <code>usize</code> elements you could also use <code>Take</code> instead with either 0 or usize::MAX. It has the advantage of providing a better <code>size_hint()</code> than <code>TakeWhile</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 5, "last_activity_date": 1503515895, "last_edit_date": 1503515895, "creation_date": 1503307629, "answer_id": 45793607, "question_id": 45787053, "link": "https://stackoverflow.com/questions/45787053/conditionally-return-empty-iterator-from-flat-map/45793607#45793607", "title": "Conditionally return empty iterator from flat_map", "body": "<p>In your specific example, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\"><code>filter</code></a> to remove unwanted elements prior to calling <code>flat_map</code>:</p>\n\n<pre><code>let result: Vec&lt;_&gt; = foo.iter()\n    .enumerate()\n    .filter(|&amp;(i, _)| i % 2 == 0)\n    .flat_map(|(_, row)| row.iter().map(|x| x * 2))\n    .collect();\n</code></pre>\n\n<p>If you ever want to use it with <code>map</code> instead of <code>flat_map</code>, you can combine the calls to <code>filter</code> and <code>map</code> by using <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow noreferrer\">filter_map</a> which takes a function returning an <code>Option</code> and only keeps elements that are <code>Some(thing)</code>.</p>\n"}], "owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1377, "favorite_count": 0, "accepted_answer_id": 45790579, "answer_count": 2, "score": 7, "last_activity_date": 1503516061, "creation_date": 1503265418, "last_edit_date": 1503516061, "question_id": 45787053, "link": "https://stackoverflow.com/questions/45787053/conditionally-return-empty-iterator-from-flat-map", "title": "Conditionally return empty iterator from flat_map", "body": "<p>Given this definition for <code>foo</code>:</p>\n\n<pre><code>let foo = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n</code></pre>\n\n<p>I'd like to be able to write code like this:</p>\n\n<pre><code>let result: Vec&lt;_&gt; = foo.iter()\n    .enumerate()\n    .flat_map(|(i, row)| if i % 2 == 0 {\n        row.iter().map(|x| x * 2)\n    } else {\n        std::iter::empty()\n    })\n    .collect();\n</code></pre>\n\n<p>but that raises an error about the if and else clauses having incompatible types. I tried removing the <code>map</code> temporarily and I tried defining an empty vector outside the closure and returning an iterator over that like so:</p>\n\n<pre><code>let empty = vec![];\n\nlet result: Vec&lt;_&gt; = foo.iter()\n    .enumerate()\n    .flat_map(|(i, row)| if i % 2 == 0 {\n        row.iter() //.map(|x| x * 2)\n    } else {\n        empty.iter()\n    })\n    .collect();\n</code></pre>\n\n<p>This seems kind of silly but it compiles. If I try to uncomment the <code>map</code> then it still complains about the if and else clauses having incompatible types. Here's part of the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: if and else have incompatible types\n  --&gt; src/main.rs:6:30\n   |\n6  |           .flat_map(|(i, row)| if i % 2 == 0 {\n   |  ______________________________^\n7  | |             row.iter().map(|x| x * 2)\n8  | |         } else {\n9  | |             std::iter::empty()\n10 | |         })\n   | |_________^ expected struct `std::iter::Map`, found struct `std::iter::Empty`\n   |\n   = note: expected type `std::iter::Map&lt;std::slice::Iter&lt;'_, {integer}&gt;, [closure@src/main.rs:7:28: 7:37]&gt;`\n              found type `std::iter::Empty&lt;_&gt;`\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d33ff7da39455fa55ecef524b91ea0e9&amp;version=stable\" rel=\"nofollow noreferrer\">Playground Link</a></p>\n\n<p>I know I could write something that does what I want with some nested <code>for</code> loops but I'd like to know if there's a terse way to write it using iterators.</p>\n"}, {"tags": ["functional-programming", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1503265668, "post_id": 45786955, "comment_id": 78531851, "body": "As for the main goal, you might be looking for this: <a href=\"https://stackoverflow.com/q/36284637/1233251\">stackoverflow.com/q/36284637/1233251</a>"}, {"owner": {"reputation": 1156, "user_id": 6394734, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/793813350717904/picture?type=large", "display_name": "Seun LanLege", "link": "https://stackoverflow.com/users/6394734/seun-lanlege"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1503265793, "post_id": 45786955, "comment_id": 78531894, "body": "doesn&#39;t apply to my case."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 12, "last_activity_date": 1503396046, "last_edit_date": 1503396046, "creation_date": 1503303719, "answer_id": 45792346, "question_id": 45786955, "link": "https://stackoverflow.com/questions/45786955/how-to-compose-functions-in-rust/45792346#45792346", "title": "How to compose functions in Rust?", "body": "<p>Just add references in <code>finally</code> and it will work:</p>\n\n<pre><code>fn main() {\n    let addAndMultiply = compose(|x| x * 2, |x| x + 2);\n    let divideAndSubtract = compose(|x| x / 2, |x| x - 2);\n\n    let finally = compose(&amp;*addAndMultiply, &amp;*divideAndSubtract);\n    println!(\"Result is {}\", finally(10));\n}\n</code></pre>\n\n<p>Dereferencing <code>addAndMultiply</code> or <code>divideAndSubtract</code> uncovers a trait object which is not <code>Sized</code>; it needs to either be wrapped in a <code>Box</code> or referenced in order for it to be passed to a function with a <code>Sized</code> constraint.</p>\n"}, {"comments": [{"owner": {"reputation": 6527, "user_id": 1422197, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/6bcbddbd9c7b31aaff8cf25a356bc96c?s=128&d=identicon&r=PG", "display_name": "gnzlbg", "link": "https://stackoverflow.com/users/1422197/gnzlbg"}, "edited": false, "score": 7, "creation_date": 1554633229, "post_id": 45792463, "comment_id": 97816375, "body": "Depending on taste, one might want to use <code>impl Trait</code> in argument position to simplify things a bit further."}, {"owner": {"reputation": 766, "user_id": 1660116, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/023e6e2fb13bd8e3d1128eb0d704b613?s=128&d=identicon&r=PG", "display_name": "Victor Savu", "link": "https://stackoverflow.com/users/1660116/victor-savu"}, "edited": false, "score": 1, "creation_date": 1555156125, "post_id": 45792463, "comment_id": 98016975, "body": "<code>compose_two</code> is not strictly necessary. Inlining the function inside the macro works but may produce terrible compile errors when the types don&#39;t match: <code>( $head:expr, $($tail:expr), +) =&gt; { |x| compose!($($tail),+)($head(x)) }</code>"}, {"owner": {"reputation": 69, "user_id": 1945937, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/A9fdO.jpg?s=128&g=1", "display_name": "Orco", "link": "https://stackoverflow.com/users/1945937/orco"}, "edited": false, "score": 1, "creation_date": 1582819431, "post_id": 45792463, "comment_id": 106916170, "body": "It might sound futile, but people getting familiar with programming will find a bit counter-intuitive that add_and_multiply actually should be called multiply_and_add, as per the implementation above. Nice answer though."}, {"owner": {"reputation": 144, "user_id": 8299684, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/13e72908732ef4648880cd34f9b0279d?s=128&d=identicon&r=PG", "display_name": "Raskell", "link": "https://stackoverflow.com/users/8299684/raskell"}, "edited": false, "score": 0, "creation_date": 1599882685, "post_id": 45792463, "comment_id": 112920052, "body": "Does this work for functions with more than one arg? Although I guess one can pass tuples. Rust doesn&#39;t have that nice feature as in Haskell where multiple arguments are equivalent to a tuple of those arguments."}], "tags": [], "owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "is_accepted": true, "score": 122, "last_activity_date": 1582820728, "last_edit_date": 1582820728, "creation_date": 1503304068, "answer_id": 45792463, "question_id": 45786955, "link": "https://stackoverflow.com/questions/45786955/how-to-compose-functions-in-rust/45792463#45792463", "title": "How to compose functions in Rust?", "body": "<p>As <a href=\"https://stackoverflow.com/a/45792346/5903309\">@ljedrz points out</a>, to make it work you only need to reference the composed functions again:  </p>\n\n<pre><code>let finally = compose(&amp;*multiply_and_add, &amp;*divide_and_subtract);\n</code></pre>\n\n<p>(Note that in Rust, convention dictates that variable names should be in snake_case) </p>\n\n<hr>\n\n<p>However, we can make this better!</p>\n\n<p>Since Rust 1.26, we can use <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"noreferrer\">abstract return types</a> (previously featured gated as <code>#![feature(conservative_impl_trait)]</code>). This can help you simplify your example greatly, as it allows you to skip the lifetimes, references, <code>Sized</code> constraints and <code>Box</code>es:</p>\n\n<pre><code>fn compose&lt;A, B, C, G, F&gt;(f: F, g: G) -&gt; impl Fn(A) -&gt; C\nwhere\n    F: Fn(A) -&gt; B,\n    G: Fn(B) -&gt; C,\n{\n    move |x| g(f(x))\n}\n\nfn main() {\n    let multiply_and_add = compose(|x| x * 2, |x| x + 2);\n    let divide_and_subtract = compose(|x| x / 2, |x| x - 2);\n\n    let finally = compose(multiply_and_add, divide_and_subtract);\n    println!(\"Result is {}\", finally(10));\n}\n</code></pre>\n\n<hr>\n\n<p>Finally, since you mention rest parameters, I suspect that what you actually want is to have a way to chain-compose as many functions as you want in a flexible manner. I wrote this macro for this purpose:</p>\n\n<pre><code>macro_rules! compose {\n    ( $last:expr ) =&gt; { $last };\n    ( $head:expr, $($tail:expr), +) =&gt; {\n        compose_two($head, compose!($($tail),+))\n    };\n}\n\nfn compose_two&lt;A, B, C, G, F&gt;(f: F, g: G) -&gt; impl Fn(A) -&gt; C\nwhere\n    F: Fn(A) -&gt; B,\n    G: Fn(B) -&gt; C,\n{\n    move |x| g(f(x))\n}\n\nfn main() {\n    let add = |x| x + 2;\n    let multiply = |x| x * 2;\n    let divide = |x| x / 2;\n    let intermediate = compose!(add, multiply, divide);\n\n    let subtract = |x| x - 2;\n    let finally = compose!(intermediate, subtract);\n\n    println!(\"Result is {}\", finally(10));\n}\n</code></pre>\n"}], "owner": {"reputation": 1156, "user_id": 6394734, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/793813350717904/picture?type=large", "display_name": "Seun LanLege", "link": "https://stackoverflow.com/users/6394734/seun-lanlege"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13085, "favorite_count": 34, "accepted_answer_id": 45792463, "answer_count": 2, "score": 77, "last_activity_date": 1582820728, "creation_date": 1503264455, "last_edit_date": 1554641900, "question_id": 45786955, "link": "https://stackoverflow.com/questions/45786955/how-to-compose-functions-in-rust", "title": "How to compose functions in Rust?", "body": "<p>I'm trying to write a function that composes two functions. The initial design is pretty simple: a function that takes two functions and returns a composed function which I can then compose with other functions, since Rust doesn't have rest parameters. I've run into a wall built with frustrating non-helpful compiler errors.</p>\n\n<p>My compose function:</p>\n\n<pre><code>fn compose&lt;'a, A, B, C, G, F&gt;(f: F, g: G) -&gt; Box&lt;Fn(A) -&gt; C + 'a&gt;\nwhere\n    F: 'a + Fn(A) -&gt; B + Sized,\n    G: 'a + Fn(B) -&gt; C + Sized,\n{\n    Box::new(move |x| g(f(x)))\n}\n</code></pre>\n\n<p>How I would like to use it:</p>\n\n<pre><code>fn main() {\n    let addAndMultiply = compose(|x| x * 2, |x| x + 2);\n    let divideAndSubtract = compose(|x| x / 2, |x| x - 2);\n\n    let finally = compose(*addAndMultiply, *divideAndSubtract);\n    println!(\"Result is {}\", finally(10));\n}\n</code></pre>\n\n<p>The compiler doesn't like that, no matter what I try, the trait bounds are never satisfied. The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `dyn std::ops::Fn(_) -&gt; _` cannot be known at compilation time\n  --&gt; src/main.rs:13:19\n   |\n13 |     let finally = compose(*addAndMultiply, *divideAndSubtract);\n   |                   ^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `dyn std::ops::Fn(_) -&gt; _`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\nnote: required by `compose`\n  --&gt; src/main.rs:1:1\n   |\n1  | / fn compose&lt;'a, A, B, C, G, F&gt;(f: F, g: G) -&gt; Box&lt;Fn(A) -&gt; C + 'a&gt;\n2  | | where\n3  | |     F: 'a + Fn(A) -&gt; B + Sized,\n4  | |     G: 'a + Fn(B) -&gt; C + Sized,\n5  | | {\n6  | |     Box::new(move |x| g(f(x)))\n7  | | }\n   | |_^\n</code></pre>\n"}, {"tags": ["arrays", "recursion", "reference", "rust", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 1156, "user_id": 6394734, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/793813350717904/picture?type=large", "display_name": "Seun LanLege", "link": "https://stackoverflow.com/users/6394734/seun-lanlege"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1503266486, "post_id": 45787052, "comment_id": 78532073, "body": "ah got me there,"}, {"owner": {"reputation": 250, "user_id": 4496332, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/t5K8I.jpg?s=128&g=1", "display_name": "Manuel", "link": "https://stackoverflow.com/users/4496332/manuel"}, "edited": false, "score": 0, "creation_date": 1503267360, "post_id": 45787052, "comment_id": 78532262, "body": "Actually I&#39;m just declaring my_array as <code>let mut my_array: [u64, 10] = [0; 10];</code> but I think this doesn&#39;t change things (right?).  Anyway thank you, now I get the first example, but the second one I pointed out still troubles me, how can just that reduntant <code>mut</code> keyword mess the syntax up? What is going on there?"}, {"owner": {"reputation": 1156, "user_id": 6394734, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/793813350717904/picture?type=large", "display_name": "Seun LanLege", "link": "https://stackoverflow.com/users/6394734/seun-lanlege"}, "edited": false, "score": 0, "creation_date": 1503267717, "post_id": 45787052, "comment_id": 78532339, "body": "its desctructuring syntax, since array in the function is already a mutable reference, passing <code>&amp;mut array</code> is making a reference to a reference. which probably isn&#39;t what you want."}], "tags": [], "owner": {"reputation": 1156, "user_id": 6394734, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/793813350717904/picture?type=large", "display_name": "Seun LanLege", "link": "https://stackoverflow.com/users/6394734/seun-lanlege"}, "is_accepted": true, "score": 3, "last_activity_date": 1503395769, "last_edit_date": 1503395769, "creation_date": 1503265415, "answer_id": 45787052, "question_id": 45786768, "link": "https://stackoverflow.com/questions/45786768/rust-passing-array-recursively/45787052#45787052", "title": "Rust: passing array recursively", "body": "<p>when declaring your array, you're probably doing </p>\n\n<pre><code>let myarray = Vec::new();\n</code></pre>\n\n<p>to which you call as,</p>\n\n<pre><code>set_values(0, 42, &amp;mut my_array);\n</code></pre>\n\n<p>in the above statement, you're making a mutable reference out of your array. because you function expects a mutable reference to an array, well basically the types have to match. simple enough?</p>\n\n<p>within your function the type of array is already known as <code>&amp;mut [u64]</code></p>\n\n<p>so you don't need to make a mutable reference out of it since it's already a mutable reference. :).   </p>\n"}, {"tags": [], "owner": {"reputation": 39, "user_id": 3566751, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34dc762d42e7108bb8ddddf34e097531?s=128&d=identicon&r=PG&f=1", "display_name": "aeveris", "link": "https://stackoverflow.com/users/3566751/aeveris"}, "is_accepted": false, "score": 0, "last_activity_date": 1503269345, "creation_date": 1503269345, "answer_id": 45787463, "question_id": 45786768, "link": "https://stackoverflow.com/questions/45786768/rust-passing-array-recursively/45787463#45787463", "title": "Rust: passing array recursively", "body": "<p>The recursive call differs from the first call in that <code>array</code> already is a binding to a <code>&amp;mut [u64]</code>, so you can just pass it on like you did in the first example.<br>\nIn the second example you are trying to create a <strong>mutable</strong> reference to <code>array</code>, but that binding is declared in the function header as an <strong>immutable</strong> binding to a mutable reference.<br>\nThis is why the compiler suggests changing <code>array</code> into a mutable binding.</p>\n"}], "owner": {"reputation": 250, "user_id": 4496332, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/t5K8I.jpg?s=128&g=1", "display_name": "Manuel", "link": "https://stackoverflow.com/users/4496332/manuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 403, "favorite_count": 0, "accepted_answer_id": 45787052, "answer_count": 2, "score": 1, "last_activity_date": 1503395769, "creation_date": 1503262868, "question_id": 45786768, "link": "https://stackoverflow.com/questions/45786768/rust-passing-array-recursively", "title": "Rust: passing array recursively", "body": "<p>I just got started with Rust and I already have mixed feelings.\nTake this dummy example, I hope this is self-explanatory:</p>\n\n<pre><code>fn set_values(pos: usize, val: u64, array: &amp;mut [u64]) {\n    if pos &gt;= array.len() {\n        return;\n    }\n    array[pos] = val;\n    set_values(pos+1, val+1, array);\n}\n</code></pre>\n\n<p>This works fine by calling:</p>\n\n<pre><code>set_values(0, 42, &amp;mut my_array);\n</code></pre>\n\n<p>I totally get the reason behind <code>&amp;mut</code> in the first function call, but why the hell during the recursive call I don't have to specify it?</p>\n\n<p>Not only that, if I decide to write <code>set_values(pos+1, val+1, &amp;mut array);</code> then the compiler complains and tells me that I have to change the function signature to</p>\n\n<pre><code>fn set_values(pos: usize, val: u64, mut array: &amp;mut [u64])\n</code></pre>\n\n<p>Sorry but to me this doesn't make any sense.</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1503262888, "post_id": 45786717, "comment_id": 78531133, "body": "And what problem are you facing?"}, {"owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1503263119, "post_id": 45786717, "comment_id": 78531193, "body": "I can&#39;t wrap my head around how do I take the two borrows and make a borrowed tuple. Or how to turn &amp;A and &amp;B into &amp;(A, B), which is what I need to <code>.get</code> the hashmap"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1503308187, "post_id": 45786717, "comment_id": 78545169, "body": "It will be easier for people to help you if you show what you tried and what errors or problems you encountered. See <a href=\"https://stackoverflow.com/help/mcve\">stackoverflow.com/help/mcve</a>"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1503309047, "post_id": 45786717, "comment_id": 78545772, "body": "I don&#39;t think you can because the <code>(A,B)</code> tuple requires its elements to be next to each other in memory, whereas your <code>&amp;A</code> and <code>&amp;B</code> may be stored anywhere. You will need to use <code>Copy</code>able or <code>Clone</code>able keys so you can duplicate them as needed, or remove the references and move them inside your <code>get</code> function."}, {"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 0, "creation_date": 1503310080, "post_id": 45786717, "comment_id": 78546426, "body": "The borrow checker is lurking behind what you are trying to do: While you have borrows on <code>A</code> and <code>B</code> individually, neither the caller nor the hashmap is not going to keep ownership of the tuple <code>(&amp;A, &amp;B)</code>. If you construct the tuple yourself and use a reference to that, nobody is holding ownership while the tuple is referenced by the map. Long story short: You can&#39;t. Construct map for <code>&amp;(&amp;A, &amp;B)</code> directly and have the caller construct the tuples, instead of trying to use two individual keys."}], "answers": [{"comments": [{"owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "edited": false, "score": 4, "creation_date": 1503316451, "post_id": 45795699, "comment_id": 78550400, "body": "I&#39;m stunned on how complete and detailed this answer was. After reading it three times (that&#39;s on Rust, not you), I think I get it. Yeah, I thought I was missing something but it turns out the problem was kind of tricky. Many many thanks."}, {"owner": {"reputation": 3862, "user_id": 142456, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e084f5673214074a5c737c131f082a43?s=128&d=identicon&r=PG", "display_name": "fostandy", "link": "https://stackoverflow.com/users/142456/fostandy"}, "edited": false, "score": 0, "creation_date": 1580433592, "post_id": 45795699, "comment_id": 106105499, "body": "yeah, mad props. This is a great answer to the question, but also a great example for beginners of how to leverage and understand Rust&#39;s trait system"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 43, "last_activity_date": 1580472660, "last_edit_date": 1580472660, "creation_date": 1503314134, "answer_id": 45795699, "question_id": 45786717, "link": "https://stackoverflow.com/questions/45786717/how-to-implement-hashmap-with-two-keys/45795699#45795699", "title": "How to implement HashMap with two keys?", "body": "<p>This is certainly possible. The <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"noreferrer\">signature of <code>get</code></a> is</p>\n\n<pre><code>fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt; \nwhere\n    K: Borrow&lt;Q&gt;,\n    Q: Hash + Eq, \n</code></pre>\n\n<p>The problem here is to implement a <code>&amp;Q</code> type such that</p>\n\n<ol>\n<li><code>(A, B): Borrow&lt;Q&gt;</code></li>\n<li><code>Q</code> implements <code>Hash + Eq</code></li>\n</ol>\n\n<p>To satisfy condition (1), we need to think of how to write</p>\n\n<pre><code>fn borrow(self: &amp;(A, B)) -&gt; &amp;Q\n</code></pre>\n\n<p>The trick is that <code>&amp;Q</code> <em>does not need to be a simple pointer</em>, it can be a <a href=\"https://stackoverflow.com/questions/27567849/what-makes-something-a-trait-object\">trait object</a>! The idea is to create a trait <code>Q</code> which will have two implementations:</p>\n\n<pre><code>impl Q for (A, B)\nimpl Q for (&amp;A, &amp;B)\n</code></pre>\n\n<p>The <code>Borrow</code> implementation will simply return <code>self</code> and we can construct a <code>&amp;dyn Q</code> trait object from the two elements separately.</p>\n\n<hr>\n\n<p>The <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fa1d88a3f3255fa7a6ca39dee02da4d8\" rel=\"noreferrer\">full implementation</a> is like this:</p>\n\n<pre><code>use std::borrow::Borrow;\nuse std::collections::HashMap;\nuse std::hash::{Hash, Hasher};\n\n// See explanation (1).\ntrait KeyPair&lt;A, B&gt; {\n    /// Obtains the first element of the pair.\n    fn a(&amp;self) -&gt; &amp;A;\n    /// Obtains the second element of the pair.\n    fn b(&amp;self) -&gt; &amp;B;\n}\n\n// See explanation (2).\nimpl&lt;'a, A, B&gt; Borrow&lt;dyn KeyPair&lt;A, B&gt; + 'a&gt; for (A, B)\nwhere\n    A: Eq + Hash + 'a,\n    B: Eq + Hash + 'a,\n{\n    fn borrow(&amp;self) -&gt; &amp;(dyn KeyPair&lt;A, B&gt; + 'a) {\n        self\n    }\n}\n\n// See explanation (3).\nimpl&lt;A: Hash, B: Hash&gt; Hash for (dyn KeyPair&lt;A, B&gt; + '_) {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        self.a().hash(state);\n        self.b().hash(state);\n    }\n}\n\nimpl&lt;A: Eq, B: Eq&gt; PartialEq for (dyn KeyPair&lt;A, B&gt; + '_) {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.a() == other.a() &amp;&amp; self.b() == other.b()\n    }\n}\n\nimpl&lt;A: Eq, B: Eq&gt; Eq for (dyn KeyPair&lt;A, B&gt; + '_) {}\n\n// OP's Table struct\npub struct Table&lt;A: Eq + Hash, B: Eq + Hash&gt; {\n    map: HashMap&lt;(A, B), f64&gt;,\n}\n\nimpl&lt;A: Eq + Hash, B: Eq + Hash&gt; Table&lt;A, B&gt; {\n    fn new() -&gt; Self {\n        Table {\n            map: HashMap::new(),\n        }\n    }\n\n    fn get(&amp;self, a: &amp;A, b: &amp;B) -&gt; f64 {\n        *self.map.get(&amp;(a, b) as &amp;dyn KeyPair&lt;A, B&gt;).unwrap()\n    }\n\n    fn set(&amp;mut self, a: A, b: B, v: f64) {\n        self.map.insert((a, b), v);\n    }\n}\n\n// Boring stuff below.\n\nimpl&lt;A, B&gt; KeyPair&lt;A, B&gt; for (A, B) {\n    fn a(&amp;self) -&gt; &amp;A {\n        &amp;self.0\n    }\n    fn b(&amp;self) -&gt; &amp;B {\n        &amp;self.1\n    }\n}\nimpl&lt;A, B&gt; KeyPair&lt;A, B&gt; for (&amp;A, &amp;B) {\n    fn a(&amp;self) -&gt; &amp;A {\n        self.0\n    }\n    fn b(&amp;self) -&gt; &amp;B {\n        self.1\n    }\n}\n\n//----------------------------------------------------------------\n\n#[derive(Eq, PartialEq, Hash)]\nstruct A(&amp;'static str);\n\n#[derive(Eq, PartialEq, Hash)]\nstruct B(&amp;'static str);\n\nfn main() {\n    let mut table = Table::new();\n    table.set(A(\"abc\"), B(\"def\"), 4.0);\n    table.set(A(\"123\"), B(\"456\"), 45.0);\n    println!(\"{:?} == 45.0?\", table.get(&amp;A(\"123\"), &amp;B(\"456\")));\n    println!(\"{:?} == 4.0?\", table.get(&amp;A(\"abc\"), &amp;B(\"def\")));\n    // Should panic below.\n    println!(\"{:?} == NaN?\", table.get(&amp;A(\"123\"), &amp;B(\"def\")));\n}\n</code></pre>\n\n<p>Explanation:</p>\n\n<ol>\n<li><p>The <code>KeyPair</code> trait takes the role of <code>Q</code> we mentioned above. We'd need to <code>impl Eq + Hash for dyn KeyPair</code>, but <code>Eq</code> and <code>Hash</code> are both not <a href=\"https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety\">object safe</a>. We add the <code>a()</code> and <code>b()</code> methods to help implementing them manually.</p></li>\n<li><p>Now we implement the <code>Borrow</code> trait from <code>(A, B)</code> to <code>dyn KeyPair + 'a</code>. Note the <code>'a</code> \u2014 this is a subtle bit that is needed to make <code>Table::get</code> actually work. The arbitrary <code>'a</code> allows us to say that an <code>(A, B)</code> can be borrowed to the trait object for <em>any</em> lifetime. If we don't specify the <code>'a</code>, the unsized trait object will <a href=\"https://stackoverflow.com/questions/26212397/references-to-traits-in-structs\">default to <code>'static</code></a>, meaning the <code>Borrow</code> trait can only be applied when the implementation like <code>(&amp;A, &amp;B)</code> outlives <code>'static</code>, which is certainly not the case. </p></li>\n<li><p>Finally, we implement <code>Eq</code> and <code>Hash</code>. Same reason as point 2, we implement for <code>dyn KeyPair + '_</code> instead of <code>dyn KeyPair</code> (which means <code>dyn KeyPair + 'static</code> in this context). The <code>'_</code> here is a syntax sugar meaning arbitrary lifetime.</p></li>\n</ol>\n\n<hr>\n\n<p>Using trait objects will incur indirection cost when computing the hash and checking equality in <code>get()</code>. The cost can be eliminated if the optimizer is able to devirtualize that, but whether LLVM will do it is unknown.</p>\n\n<p>An alternative is to store the map as <code>HashMap&lt;(Cow&lt;A&gt;, Cow&lt;B&gt;), f64&gt;</code>. Using this requires less \"clever code\", but there is now a memory cost to store the owned/borrowed flag as well as runtime cost in both <code>get()</code> and <code>set()</code>.</p>\n\n<p>Unless you fork the standard <code>HashMap</code> and add a method to look up an entry via <code>Hash + Eq</code> alone, there is no guaranteed-zero-cost solution.</p>\n"}, {"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 3, "last_activity_date": 1527071711, "creation_date": 1527071711, "answer_id": 50486153, "question_id": 45786717, "link": "https://stackoverflow.com/questions/45786717/how-to-implement-hashmap-with-two-keys/50486153#50486153", "title": "How to implement HashMap with two keys?", "body": "<p>A <code>Memory</code> trait that take two keys, <em>set</em> by value and <em>get</em> by reference:</p>\n\n<pre><code>trait Memory&lt;A: Eq + Hash, B: Eq + Hash&gt; {\n\n    fn get(&amp;self, a: &amp;A, b: &amp;B) -&gt; Option&lt;&amp;f64&gt;;\n\n    fn set(&amp;mut self, a: A, b: B, v: f64);\n}\n</code></pre>\n\n<p>You can <code>impl</code> such trait using a Map of Maps:</p>\n\n<pre><code>pub struct Table&lt;A: Eq + Hash, B: Eq + Hash&gt; {\n    table: HashMap&lt;A, HashMap&lt;B, f64&gt;&gt;,\n}   \n\nimpl&lt;A: Eq + Hash, B: Eq + Hash&gt; Memory&lt;A, B&gt; for Table&lt;A, B&gt; {\n\n    fn get(&amp;self, a: &amp;A, b: &amp;B) -&gt; Option&lt;&amp;f64&gt; {\n        self.table.get(a)?.get(b)\n    }\n\n    fn set(&amp;mut self, a: A, b: B, v: f64) {\n        let inner = self.table.entry(a).or_insert(HashMap::new());\n        inner.insert(b, v);\n    }\n}\n</code></pre>\n\n<p>Please note that if the solution is somewhat elegant the memory footprint of an <em>HashMap of HashMaps</em> have to be considered when thousands of <code>HashMap</code> instances has to be managed.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ad5e688ef41e760db1b6da7f95186abb&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Full example</a></p>\n"}], "owner": {"reputation": 305, "user_id": 8452477, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aBA6o.jpg?s=128&g=1", "display_name": "lsunsi", "link": "https://stackoverflow.com/users/8452477/lsunsi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3984, "favorite_count": 9, "accepted_answer_id": 45795699, "answer_count": 2, "score": 28, "last_activity_date": 1580472660, "creation_date": 1503262547, "last_edit_date": 1527609505, "question_id": 45786717, "link": "https://stackoverflow.com/questions/45786717/how-to-implement-hashmap-with-two-keys", "title": "How to implement HashMap with two keys?", "body": "<p><code>HashMap</code> implements the <code>get</code> and <code>insert</code> methods which take a single immutable borrow and a single move of a value respectively.</p>\n\n<p>I want a trait which is just like this but which takes two keys instead of one. It uses the map inside, but it's just a detail of implementation.</p>\n\n<pre><code>pub struct Table&lt;A: Eq + Hash, B: Eq + Hash&gt; {\n    map: HashMap&lt;(A, B), f64&gt;,\n}\n\nimpl&lt;A: Eq + Hash, B: Eq + Hash&gt; Memory&lt;A, B&gt; for Table&lt;A, B&gt; {\n    fn get(&amp;self, a: &amp;A, b: &amp;B) -&gt; f64 {\n        let key: &amp;(A, B) = ??;\n        *self.map.get(key).unwrap()\n    }\n\n    fn set(&amp;mut self, a: A, b: B, v: f64) {\n        self.map.insert((a, b), v);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-crates"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1503257471, "post_id": 45786024, "comment_id": 78529675, "body": "Cannot reproduce; you need to <code>use std::fs::File;</code> in the <i>actual</i> file where you are calling <code>File::open</code>."}], "answers": [{"comments": [{"owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "edited": false, "score": 0, "creation_date": 1503409475, "post_id": 45786207, "comment_id": 78596285, "body": "thanks - so  when having multiple <code>mod</code> in a single file I need to add this to every mod namespace so to say?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "edited": false, "score": 0, "creation_date": 1503410076, "post_id": 45786207, "comment_id": 78596761, "body": "@abdoe Yes that&#39;s right. Rust doesn&#39;t care about which files the modules live in, it just cares about the module structure."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 3, "last_activity_date": 1503260087, "last_edit_date": 1503260087, "creation_date": 1503258540, "answer_id": 45786207, "question_id": 45786024, "link": "https://stackoverflow.com/questions/45786024/why-do-i-need-to-use-an-extra-prefix-to-access-an-imported-struct/45786207#45786207", "title": "Why do I need to use an extra `::` prefix to access an imported struct?", "body": "<p>You can think of the <code>::</code> module path separator the same way as <code>/</code> in a file path, and just as a leading <code>/</code> means the root directory, a leading <code>::</code> refers to your application's root module. </p>\n\n<p>When you import an item with <code>use</code> then the name of that item effectively becomes a (private by default) member of that module, and can be referred to from other modules using absolute or relative paths. So the fact that you are having this problem tells me that your <code>use</code> statements are in your root module, while the other code is in a child module. That is why commenters above were unable to reproduce it from the code you actually posted.</p>\n\n<p>You have some module structure like this:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\n\nmod Foo {\n    struct Css {}\n    impl Css { \n        pub fn save_result_to_file(file_to_save: String) {\n            println!(\"Saving output to {}\", file_to_save);\n            let mut f = ::File::open(file_to_save).expect(\"Unable to open file\");\n        }\n    }\n}\n</code></pre>\n\n<p>The leading <code>::</code> is necessary because <code>File</code> was imported into the root module, but you are using it in a child module. If you move the import into the actual module that contains your code then it will work fine without the leading <code>::</code>:</p>\n\n<pre><code>mod Foo {\n    use std::fs::File;\n    use std::io::Read;\n\n    struct Css {}\n    impl Css { \n        pub fn save_result_to_file(file_to_save: String) {\n            println!(\"Saving output to {}\", file_to_save);\n            let mut f = File::open(file_to_save).expect(\"Unable to open file\");\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 475, "favorite_count": 0, "accepted_answer_id": 45786207, "answer_count": 1, "score": 1, "last_activity_date": 1503260087, "creation_date": 1503257172, "last_edit_date": 1503259959, "question_id": 45786024, "link": "https://stackoverflow.com/questions/45786024/why-do-i-need-to-use-an-extra-prefix-to-access-an-imported-struct", "title": "Why do I need to use an extra `::` prefix to access an imported struct?", "body": "<p>In my <code>lib.rs</code> I wanted to do <code>use std::fs::File</code>.</p>\n\n<p>Here is the example code:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\n\nimpl Css { \n    pub fn save_result_to_file(file_to_save: String) {\n        println!(\"Saving output to {}\", file_to_save);\n        let mut f = File::open(file_to_save).expect(\"Unable to open file\");\n        // let mut f = ::File::open(file_to_save).expect(\"Unable to open file\"); -&gt; Works\n    }\n}\n</code></pre>\n\n<p>Without the presence of <code>::</code> before <code>File</code> I'm getting a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>|  let mut f = File::open(file_to_save).expect(\"Unable to open file\");\n|                         ^^^^^^^^^^ Use of undeclared type or module `File`\n</code></pre>\n\n<p>My question is - is the <code>::</code> prefix always necessary? I'm sure it's not, but cannot see how to do this.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503245168, "post_id": 45784099, "comment_id": 78525712, "body": "<i>at the top of my program</i> \u2014 what file is this code in?"}, {"owner": {"reputation": 719, "user_id": 893959, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Y5izK.jpg?s=128&g=1", "display_name": "Adam Hammes", "link": "https://stackoverflow.com/users/893959/adam-hammes"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503245530, "post_id": 45784099, "comment_id": 78525827, "body": "Added more info/the directory structure."}], "owner": {"reputation": 719, "user_id": 893959, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Y5izK.jpg?s=128&g=1", "display_name": "Adam Hammes", "link": "https://stackoverflow.com/users/893959/adam-hammes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 142, "favorite_count": 0, "closed_date": 1503245634, "answer_count": 0, "score": 1, "last_activity_date": 1503245676, "creation_date": 1503244799, "last_edit_date": 1503245467, "question_id": 45784099, "link": "https://stackoverflow.com/questions/45784099/why-does-this-rust-import-need-self", "closed_reason": "Duplicate", "title": "Why does this Rust import need `self`?", "body": "<p>I have the following set of imports at the top of my program:</p>\n\n<pre><code>extern crate serde_bencode;\nextern crate serde;\nextern crate serde_bytes;\nextern crate url;\nextern crate url_serde;\n\nuse serde_bytes::ByteBuf;\nuse serde_bencode::de;\nuse serde_bencode::error::Result;\nuse serde_bencode::Error::{Custom, InvalidLength};\nuse self::url::{Url};\n</code></pre>\n\n<p>This program currently <em>does</em> compile. However, I don't understand why I need to write <code>self</code> on the <code>use self::url::{Url};</code> line. None of the other <code>use</code> statements need <code>self</code> - why does <code>url</code>?</p>\n\n<p>For context, the snippet above is from a file called <code>file_reader.rs</code>, in a directory with the following structure:</p>\n\n<pre><code>roar/\n    file_reader.rs\n    main.rs\n    lib.rs\n</code></pre>\n\n<p>Edit: I just noticed that if I add the line <code>extern crate url;</code> to <code>lib.rs</code>, then I don't need the <code>self</code>; however, I don't know <em>why</em> this step is necessary.</p>\n"}, {"tags": ["rust", "serde", "rust-rocket"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1503240906, "post_id": 45783315, "comment_id": 78524225, "body": "Can you put the code in the <a href=\"https://play.rust-lang.com\" rel=\"nofollow noreferrer\">playground</a>, so that it can be easily reproduced? At first glance, there seems to be a missing relation between the lifetimes <code>&#39;f</code> and <code>&#39;de</code>."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1503241147, "post_id": 45783315, "comment_id": 78524315, "body": "@E_net4 Not quite, since the playground doesn&#39;t have the Rocket crate, sadly. I&#39;ll make a more complete example that can be pasted into a file."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1503243834, "post_id": 45783315, "comment_id": 78525273, "body": "@E_net4 Added gist!"}], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1503244271, "post_id": 45783943, "comment_id": 78525402, "body": "Ah, now I understand. It makes sense that input must outlive output, I didn&#39;t realize how the lifetimes were connected from the reference alone. But I have to agree with Shepmaster, please answer the question inline."}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 4, "last_activity_date": 1503244566, "last_edit_date": 1503244566, "creation_date": 1503243751, "answer_id": 45783943, "question_id": 45783315, "link": "https://stackoverflow.com/questions/45783315/lifetimes-when-deserializing-json-within-a-fromform/45783943#45783943", "title": "Lifetimes when Deserializing JSON within a FromForm", "body": "<p><a href=\"https://serde.rs/lifetimes.html#trait-bounds\" rel=\"nofollow noreferrer\"><strong>This section of the Serde website covers <code>Deserialize</code> bounds in detail.</strong></a></p>\n\n<hr>\n\n<blockquote>\n  <p>There are two main ways to write <code>Deserialize</code> trait bounds, whether\n  on an impl block or a function or anywhere else.</p>\n  \n  <ul>\n  <li><p><strong><code>&lt;'de, T&gt; where T: Deserialize&lt;'de&gt;</code></strong></p>\n  \n  <p>This means \"T can be deserialized from <strong>some</strong> lifetime.\" The caller gets to decide what lifetime that is. Typically this is used\n  when the caller also provides the data that is being deserialized\n  from, for example in a function like\n  <a href=\"https://docs.serde.rs/serde_json/fn.from_str.html\" rel=\"nofollow noreferrer\"><code>serde_json::from_str</code></a>.\n  In that case the input data must also have lifetime <code>'de</code>, for example\n  it could be <code>&amp;'de str</code>.</p></li>\n  <li><p><strong><code>&lt;T&gt; where T: DeserializeOwned</code></strong></p>\n  \n  <p>This means \"T can be deserialized from <strong>any</strong> lifetime.\" The callee gets to decide what lifetime. Usually this is because the data\n  that is being deserialized from is going to be thrown away before the\n  function returns, so T must not be allowed to borrow from it. <strong>In your\n  case the data is coming from URL-decoding some input, and the decoded\n  data is thrown away after deserializing T.</strong> Another common use of this\n  bound is functions that deserialize from an IO stream, such as\n  <a href=\"https://docs.serde.rs/serde_json/fn.from_reader.html\" rel=\"nofollow noreferrer\"><code>serde_json::from_reader</code></a>.</p>\n  \n  <p>To say it more technically, the <a href=\"https://docs.serde.rs/serde/de/trait.DeserializeOwned.html\" rel=\"nofollow noreferrer\"><code>DeserializeOwned</code></a>\n  trait is equivalent to the <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">higher-rank trait\n  bound</a>\n  <code>for&lt;'de&gt; Deserialize&lt;'de&gt;</code>. The only difference is <code>DeserializeOwned</code> is more\n  intuitive to read. It means T owns all the data that gets\n  deserialized.</p></li>\n  </ul>\n</blockquote>\n\n<p>Replacing your <code>T: Deserialize&lt;'f&gt;</code> bound with <code>T: DeserializeOwned</code>\ncorrectly communicates that T is not allowed to borrow from the\nURL-decoded data because the URL-decoded data will not outlive T.</p>\n"}], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 477, "favorite_count": 0, "accepted_answer_id": 45783943, "answer_count": 1, "score": 1, "last_activity_date": 1506694341, "creation_date": 1503240100, "last_edit_date": 1506694341, "question_id": 45783315, "link": "https://stackoverflow.com/questions/45783315/lifetimes-when-deserializing-json-within-a-fromform", "title": "Lifetimes when Deserializing JSON within a FromForm", "body": "<p>I'm having trouble understanding the relationship between the lifetimes on this code. Basically, I have a Rocket API that receives some <code>x-www-form-urlencoded</code> data, with only one key: <code>json</code>. This key contains, intuitively, a JSON value, encoded with percent-encoding, of a struct <code>Message&lt;T&gt;</code>.</p>\n\n<p>(I'm aware this is suboptimal API design, but this is reverse-engineering work, so I have no option)</p>\n\n<p>To be easily used as a request guard as <code>From&lt;Message&lt;T&gt;&gt;</code>, I'm implementing <code>FromForm</code>. To do that, I need to implement <code>FromForm&lt;'f&gt;</code> for any <code>Message&lt;T&gt;</code> where <code>T</code> implements <code>Deserialize&lt;'de&gt;</code>. I wrote my impl signature as <code>impl&lt;'f, 'de, T&gt; FromForm&lt;'f&gt; for Message&lt;T&gt; where T: Deserialize&lt;'de&gt;</code>.</p>\n\n<p>To actually perform the decoding, I:</p>\n\n<ol>\n<li>Get the <code>\"json\"</code> key of the form data;</li>\n<li>URL-decode the value;</li>\n<li>Parse the JSON contained in the value.</li>\n</ol>\n\n<p>Bailing out as soon as possible. Code doing that (explicit type annotations for the reader's convenience):</p>\n\n<pre><code>fn from_form(items: &amp;mut FormItems&lt;'f&gt;, strict: bool) -&gt; Result&lt;Self, Self::Error&gt; {\n    // Get JSON field\n    let encoded: Option&lt;&amp;RawStr&gt; = items.find(|&amp;(k, _)| k.as_str() == \"json\")\n        .map(|(_, v)| v);\n    if let None = encoded {\n        return Err(MessageFormError::MissingJsonKey);\n    }\n\n    // Decode URL-string\n    let decoded: Result&lt;String, Utf8Error&gt; = encoded.unwrap().url_decode();\n    if let Err(e) = decoded {\n        return Err(MessageFormError::InvalidUrl(e));\n    }\n\n    // Parse JSON\n    let json: String = decoded.unwrap();\n    serde_json::from_str::&lt;Self&gt;(&amp;json) // Line 205\n        .map_err(|e| MessageFormError::InvalidJson(e))\n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/kroltan/f7317173f08a11230930ef1abb8c1e54\" rel=\"nofollow noreferrer\">A Gist demonstrating the problem</a> in a paste-and-run way (doesn't work on the Playground since it depends on Rocket).</p>\n\n<p>As I understand:</p>\n\n<ul>\n<li>The <code>&amp;RawStr</code> of <code>encoded</code> has lifetime <code>'f</code>.</li>\n<li>A <code>String</code> is created out of it by <code>url_decode</code>, which lives until the end of the function</li>\n<li><code>serde_json</code> takes a <code>&amp;'x str</code> where <code>'x</code> does not need to coincide with <code>'de</code>, and returns a value (so it lives to the end of the function, and since it's returned, gets moved beyond it)</li>\n</ul>\n\n<p>But it seems my understanding is incorrect:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>205 |         serde_json::from_str::&lt;Self&gt;(&amp;json)\n    |                                       ^^^^ does not live long enough\n206 |             .map_err(|e| MessageFormError::InvalidJson(e))\n207 |     }\n    |     - borrowed value only lives until here\n    |\nnote: borrowed value must be valid for the lifetime 'f as defined on the impl at 184:1...\n   --&gt; src/transport.rs:184:1\n    |\n184 | / impl&lt;'f, T&gt; FromForm&lt;'f&gt; for Message&lt;T&gt;\n185 | |     where T: Deserialize&lt;'f&gt;\n186 | | {\n187 | |     type Error = MessageFormError;\n...   |\n207 | |     }\n208 | | }\n    | |_^\n</code></pre>\n\n<p>What am I getting wrong, and how can I return the deserialized value properly?</p>\n"}, {"tags": ["rust", "destructuring"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 27, "last_activity_date": 1610457461, "last_edit_date": 1610457461, "creation_date": 1503232579, "answer_id": 45782199, "question_id": 45782069, "link": "https://stackoverflow.com/questions/45782069/is-there-a-way-to-destructure-a-struct-partially/45782199#45782199", "title": "Is there a way to destructure a struct partially?", "body": "<p><code>..</code> as a field in a <code>struct</code> or tuple pattern means &quot;and the rest&quot;:</p>\n<pre><code>let ThreeDPoint { x: my_x, y: my_y, .. } = point;\n</code></pre>\n<p>There's more about this in <a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#ignoring-remaining-parts-of-a-value-with-\" rel=\"nofollow noreferrer\">the Rust Book</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 154, "user_id": 6261816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ba543809a6a39a1fec992b8bf8721e8?s=128&d=identicon&r=PG&f=1", "display_name": "lukwol", "link": "https://stackoverflow.com/users/6261816/lukwol"}, "is_accepted": false, "score": 3, "last_activity_date": 1503254894, "last_edit_date": 1503254894, "creation_date": 1503232811, "answer_id": 45782232, "question_id": 45782069, "link": "https://stackoverflow.com/questions/45782069/is-there-a-way-to-destructure-a-struct-partially/45782232#45782232", "title": "Is there a way to destructure a struct partially?", "body": "<p>You can partially destructure a struct like this:</p>\n\n<pre><code>let point = ThreeDPoint { x: 0.3, y: 0.4, z: 0.5 };\nlet ThreeDPoint { my_x, my_y, .. } = point;\n</code></pre>\n"}], "owner": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4655, "favorite_count": 2, "accepted_answer_id": 45782199, "answer_count": 2, "score": 20, "last_activity_date": 1610457461, "creation_date": 1503231717, "last_edit_date": 1503243804, "question_id": 45782069, "link": "https://stackoverflow.com/questions/45782069/is-there-a-way-to-destructure-a-struct-partially", "title": "Is there a way to destructure a struct partially?", "body": "<p>I have a struct:</p>\n\n<pre><code>struct ThreeDPoint {\n    x: f32,\n    y: f32,\n    z: f32\n}\n</code></pre>\n\n<p>and I want to <strong>extract two</strong> of the three properties after instantiating it:</p>\n\n<pre><code>let point: ThreeDPoint = ThreeDPoint { x: 0.3, y: 0.4, z: 0.5 };\nlet ThreeDPoint { x: my_x, y: my_y } = point;\n</code></pre>\n\n<p>The compiler throws the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0027]: pattern does not mention field `z`\n  --&gt; src/structures.rs:44:9\n   |\n44 |     let ThreeDPoint { x: my_x, y: my_y } = point;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `z`\n</code></pre>\n\n<p>In JavaScript (ES6), the equivalent destructuring would look like this:</p>\n\n<pre><code>let { x: my_x, y: my_y } = point;\n</code></pre>\n"}, {"tags": ["rust", "tuples", "traits"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503206021, "post_id": 45778608, "comment_id": 78514937, "body": "On its own this seems like maybe an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a>, or a misunderstanding. What makes you expect there to be a method for this already? You&#39;ve defined your own new datatype <code>Matrix</code> so it would be up to you to define a method to get the length, but given your example that would just be returning a constant anyway. At the moment this question is just &quot;how do I define a method&quot;."}, {"owner": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503206582, "post_id": 45778608, "comment_id": 78515040, "body": "Good point. I am asking an XY question. I have asked a fundamental question about the language, however, in order to solve the problem on my own. The top answer for the question you linked to suggests posting context as a solution to the XY question, so please see the edit to the question"}, {"owner": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1503207760, "post_id": 45778608, "comment_id": 78515254, "body": "@loganfsmyth I have edited my question"}], "answers": [{"comments": [{"owner": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "edited": false, "score": 0, "creation_date": 1503209488, "post_id": 45778903, "comment_id": 78515557, "body": "Thank you very much for your answer! Do you think Vector would be a better data structure to implement a matrix of dynamic length?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "edited": false, "score": 0, "creation_date": 1503209592, "post_id": 45778903, "comment_id": 78515569, "body": "If it has an unknown number of items, a <code>Vec</code> makes sense, but your examples don&#39;t seem to imply that."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 2, "last_activity_date": 1503257306, "last_edit_date": 1503257306, "creation_date": 1503208252, "answer_id": 45778903, "question_id": 45778608, "link": "https://stackoverflow.com/questions/45778608/how-can-i-get-the-length-of-a-tuple/45778903#45778903", "title": "How can I get the length of a tuple?", "body": "<p>There are a few ways to approach this question. I'll try to expand as I go.</p>\n\n<pre><code>matrix.len();    // expected `4`\n</code></pre>\n\n<p>You've defined your own <code>Matrix</code> datatype. With no additional logic, it's entirely up to you to define this, e.g.</p>\n\n<pre><code>impl Matrix {\n    fn len(&amp;self) -&gt; usize {\n        4\n    }\n}\n</code></pre>\n\n<p>Personally I think your <code>reverse</code> function is fine as-is, because it's important to balance DRY with readability, and also differentiate repetition of code with repetition of logic.</p>\n\n<p>The other piece here is that having the length on its own doesn't offer much here. <code>matrix.0</code> is explicit syntax in Rust, but there's no way to actually use the length to do anything about that. <code>matrix[i]</code> is not an operation you have implemented on your datatype. You <em>can</em> potentially implement that or <code>Iterator</code> for this type, but that doesn't seem like what you'd actually want here. An iterator is a stream of consistent items, but your matrix items have explicit meaning based on their indices that would kind of lose their meaning in the context of an iterator.</p>\n\n<p>I'll also add that you can trim down your <code>reverse</code> using destructuring assignment and auto-return, via</p>\n\n<pre><code>fn reverse(matrix: Matrix) -&gt; Matrix {\n    let Matrix(a, b, c, d) = matrix;\n    Matrix(d, c, b, a)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 5735880, "user_type": "registered", "profile_image": "https://graph.facebook.com/502136309956205/picture?type=large", "display_name": "Idan Geraffi", "link": "https://stackoverflow.com/users/5735880/idan-geraffi"}, "is_accepted": false, "score": 0, "last_activity_date": 1602240481, "creation_date": 1602240481, "answer_id": 64278511, "question_id": 45778608, "link": "https://stackoverflow.com/questions/45778608/how-can-i-get-the-length-of-a-tuple/64278511#64278511", "title": "How can I get the length of a tuple?", "body": "<p>In rust you cant iterate or ask for tuple length.\nTuples are implemented in a similar way to struct (anonymous struct if you like).\nConsidering tuple/struct with different types, what is it's length ?</p>\n"}], "owner": {"reputation": 3359, "user_id": 5950725, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/6uR5y.jpg?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/5950725/tom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1468, "favorite_count": 0, "accepted_answer_id": 45778903, "answer_count": 2, "score": 3, "last_activity_date": 1602240481, "creation_date": 1503205149, "last_edit_date": 1503243431, "question_id": 45778608, "link": "https://stackoverflow.com/questions/45778608/how-can-i-get-the-length-of-a-tuple", "title": "How can I get the length of a tuple?", "body": "<p>This is the behaviour I tried:</p>\n\n<pre><code>struct Matrix(f32, f32, f32, f32);\nlet matrix = Matrix(1.1, 1.2, 2.1, 2.2);\nmatrix.len();    // expected `4`\n</code></pre>\n\n<p>which produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `len` found for type `&amp;tuples::Matrix` in the current scope\n  --&gt; src/tuples.rs:19:44\n   |\n19 |         println!(\"matrix length: {}\", self.len());\n   |                                            ^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following traits define an item `len`, perhaps you need to implement one of them:\n           candidate #1: `std::iter::ExactSizeIterator`\n           candidate #2: `core::slice::SliceExt`\n           candidate #3: `core::str::StrExt`\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/iter/trait.ExactSizeIterator.html\" rel=\"nofollow noreferrer\"><code>std::iter::ExactSizeIterator</code></a> looks like a good candidate, but I still don't know how to implement it</p>\n\n<h3>Context</h3>\n\n<p>Whilst trying to reverse <code>Matrix</code>, I realized that instead of <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow noreferrer\">dryly</a> listing the reverse indexes of the matrix like so:</p>\n\n<pre><code>fn reverse(matrix: Matrix) -&gt; Matrix {\n    return Matrix(matrix.3, matrix.2, matrix.1, matrix.0)\n}\n</code></pre>\n\n<p>I could perhaps iterate over the <code>Matrix</code> in reverse order. I saw <a href=\"https://stackoverflow.com/q/29148544/155423\">How to iterate or map over tuples?</a> and thought that it was complex. If one were able to get the length of the tuple, one could solve the question \"How to iterate or map over tuples?\" with a simpler solution. Obviously, I could just use '4' as the length, but what if I weren't using a struct but rather a tuple of an unknown length.</p>\n"}, {"tags": ["rust", "mmap", "virtual-memory", "darwin", "huge-pages"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1503179567, "post_id": 45776542, "comment_id": 78511008, "body": "It&#39;s most likely that no one else has needed those flags yet. I&#39;d advocate just submitting a PR to the libc crate."}, {"owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 0, "creation_date": 1543101319, "post_id": 45776542, "comment_id": 93797716, "body": "<a href=\"https://github.com/rust-lang/libc/pull/749\" rel=\"nofollow noreferrer\">The PR</a> was merged August 30th, 2017."}], "owner": {"reputation": 16549, "user_id": 836390, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/tNl4E.jpg?s=128&g=1", "display_name": "joshlf", "link": "https://stackoverflow.com/users/836390/joshlf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 147, "favorite_count": 1, "answer_count": 0, "score": 4, "last_activity_date": 1503179485, "creation_date": 1503178924, "last_edit_date": 1503179485, "question_id": 45776542, "link": "https://stackoverflow.com/questions/45776542/is-there-a-way-that-i-can-use-mmap-on-darwin-with-superpages-in-rust", "title": "Is there a way that I can use `mmap` on Darwin with superpages in Rust?", "body": "<p>The <a href=\"https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man2/mmap.2.html\" rel=\"nofollow noreferrer\"><code>mmap</code> manpage on Darwin</a> specifies that in order to use <code>mmap</code> with superpages (the Darwin equivalent of Linux's huge pages), the <code>VM_FLAGS_SUPERPAGE_SIZE_*</code> flags should be used.</p>\n\n<p>I'm trying to use this functionality in Rust, but I can't find these constants in either of the Rust libc versions for Darwin (<a href=\"https://doc.rust-lang.org/libc/i686-apple-darwin/libc/index.html\" rel=\"nofollow noreferrer\">i686</a>, <a href=\"https://doc.rust-lang.org/libc/x86_64-apple-darwin/libc/index.html\" rel=\"nofollow noreferrer\">x86_64</a>).</p>\n"}, {"tags": ["types", "rust", "image-resizing"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1503163369, "post_id": 45773626, "comment_id": 78506745, "body": "Please provide a more accurate <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Your question should enable us to reproduce the problem without visiting external links or inferring unmentioned API usage. In particular, where is the code that includes the line <code>let image = Resize::new(w1, h1, w2, h2, src);</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 154, "user_id": 6261816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ba543809a6a39a1fec992b8bf8721e8?s=128&d=identicon&r=PG&f=1", "display_name": "lukwol", "link": "https://stackoverflow.com/users/6261816/lukwol"}, "is_accepted": true, "score": 1, "last_activity_date": 1503167671, "last_edit_date": 1503167671, "creation_date": 1503165957, "answer_id": 45774824, "question_id": 45773626, "link": "https://stackoverflow.com/questions/45773626/refactor-to-module-creates-different-type-request-from-compiler/45774824#45774824", "title": "Refactor to module creates different type request from compiler?", "body": "<p><strong>TL;DR: Expected type of <code>src</code> variable is <code>Vec&lt;u16&gt;</code>, but it's set to <code>Vec&lt;u8&gt;</code>, because of type inference.</strong></p>\n\n<hr>\n\n<p>Variable <code>src</code> is assigned in line:</p>\n\n<pre><code>let mut src = vec![0;info.buffer_size()];\n</code></pre>\n\n<p>It infers the type as <code>Vec&lt;u8&gt;</code> later by calling:</p>\n\n<pre><code>reader.next_frame(&amp;mut src).unwrap();\n</code></pre>\n\n<p>or</p>\n\n<pre><code>resize::resize(w1, h1, w2, h2, Gray8, Triangle, &amp;src, &amp;mut dst);\n</code></pre>\n\n<p>Because those functions expect type <code>&amp;mut [u8]</code>, not <code>&amp;mut [u16]</code>.</p>\n\n<p>If we set expected type <code>Vec&lt;u16&gt;</code> explicitly when assigning <code>src</code>:</p>\n\n<pre><code>let mut src: Vec&lt;u16&gt; = vec![0; info.buffer_size()];\n</code></pre>\n\n<p>Now calling <code>next_frame()</code> and <code>resize()</code> will fail because types not match, but compiler will give us better hints what's wrong and what can we do about it.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:65:23\n   |\n65 |     reader.next_frame(&amp;mut src).unwrap();\n   |                       ^^^^^^^^ expected slice, found struct `std::vec::Vec`\n   |\n   = note: expected type `&amp;mut [u8]`\n              found type `&amp;mut std::vec::Vec&lt;u16&gt;`\n   = help: here are some functions which might fulfill your needs:\n           - .as_mut_slice()\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:74:53\n   |\n74 |     resize::resize(w1, h1, w2, h2, Gray8, Triangle, &amp;src, &amp;mut dst);\n   |                                                     ^^^^ expected slice, found struct `std::vec::Vec`\n   |\n   = note: expected type `&amp;[u8]`\n              found type `&amp;std::vec::Vec&lt;u16&gt;`\n   = help: here are some functions which might fulfill your needs:\n           - .as_slice()\n</code></pre>\n"}], "owner": {"reputation": 758, "user_id": 1275386, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/4M0HT.jpg?s=128&g=1", "display_name": "Brandon Clark", "link": "https://stackoverflow.com/users/1275386/brandon-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 0, "accepted_answer_id": 45774824, "answer_count": 1, "score": 0, "last_activity_date": 1503167671, "creation_date": 1503158652, "last_edit_date": 1503165482, "question_id": 45773626, "link": "https://stackoverflow.com/questions/45773626/refactor-to-module-creates-different-type-request-from-compiler", "title": "Refactor to module creates different type request from compiler?", "body": "<p>Why I am getting a compiler request for different types when refactoring this <a href=\"https://github.com/PistonDevelopers/resize/blob/master/examples/resize.rs\" rel=\"nofollow noreferrer\">example code</a> to use a wrapper around the <a href=\"https://github.com/PistonDevelopers/resize\" rel=\"nofollow noreferrer\">resize</a> image library. </p>\n\n<p>Basically resize always seems to be <code>u16</code> output so why is my change asking for <code>u8</code> when the original code never required this conversion?</p>\n\n<pre><code>extern crate resize;\n\nuse resize::Type;\nuse resize::Pixel;\n\npub struct Resize{\n    w1:usize,\n    h1:usize,\n    w2:usize,\n    h2:usize,\n    src: Vec&lt;u16&gt;,\n}\n\nimpl Resize {\n    pub fn new(\n        ow:usize, \n        oh:usize, \n        dw:usize, \n        dh:usize,\n        inc: Vec&lt;u16&gt;\n    ) -&gt; Resize {\n        Resize {\n            w1:ow,\n            h1:oh,\n            w2:dw,\n            h2:dh,\n            src:inc,\n        }\n    }\n\n    pub fn run(&amp;self) -&gt; Vec&lt;u16&gt; {\n        let mut dst = vec![0;self.w2*self.h2];\n        resize::resize(\n            self.w1, \n            self.h1, \n            self.w2, \n            self.h2, \n            Pixel::RGBA64, \n            Type::Lanczos3, \n            self.src.as_slice(), \n            &amp;mut dst,\n        );\n        dst\n    }\n}\n</code></pre>\n\n<p><strong>Compiler error message</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:24:45\n   |\n24 |     let image = Resize::new(w1, h1, w2, h2, src);\n   |                                             ^^^ expected u16, found u8\n   |\n   = note: expected type `std::vec::Vec&lt;u16&gt;`\n              found type `std::vec::Vec&lt;u8&gt;`\n   = help: here are some functions which might fulfill your needs:\n           - .to_vec()\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:30:54\n   |\n30 |     encoder.write_header().unwrap().write_image_data(dst).unwrap();\n   |                                                      ^^^ expected u8, found u16\n   |\n   = note: expected type `&amp;[u8]`\n              found type `&amp;[u16]`\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1503164466, "creation_date": 1503164466, "answer_id": 45774546, "question_id": 45773442, "link": "https://stackoverflow.com/questions/45773442/extern-libraries-as-dependency-to-local-libs/45774546#45774546", "title": "Extern libraries as dependency to local libs", "body": "<blockquote>\n  <p>I want to divide my project into several translation units</p>\n</blockquote>\n\n<p>You don't explain <strong>why</strong> you want to do this. If it's for compilation performance reasons, then you might just want to wait for better incremental compilation support. Splitting into crates may or may not help with compilation time based on what kind of code is involved \u2014 crates with highly generic APIs will see less benefit, for example.</p>\n\n<p>I'd say that semantic / organizational reasons are the best reason to split things up.</p>\n\n<blockquote>\n  <p>Does this mean that E's code is included several times in the final binary?</p>\n</blockquote>\n\n<p>No. When Cargo performs dependency resolution, it attempts to resolve a single version of each dependency. If your dependency tree has conflicting version requirements, then multiple versions might be included, but that's the only way to compile such code anyway. Using a tool like cargo-tree can help you find crates that are forcing multiple versions to be included.</p>\n\n<blockquote>\n  <p>I have to change all Cargo.toml files. </p>\n</blockquote>\n\n<p>Your <strong>Cargo.toml</strong> file should not need to be changed <em>unless</em> you need to upgrade to a semver incompatible version of a crate. Your <strong>Cargo.lock</strong>, which <a href=\"http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries\" rel=\"nofollow noreferrer\">only exists for your final binary</a> is the only file that needs to be changed.</p>\n\n<blockquote>\n  <p>Is the cited approach idiomatic? While possible, the Rust community seems not to advocate sub-crates beside of in workspaces</p>\n</blockquote>\n\n<p>The main downside I see is that you will need to <em>publish</em> multiple crates if you wanted to do something like that. If you are just building a binary, I see no reason not to do so. <a href=\"https://github.com/paritytech/parity/\" rel=\"nofollow noreferrer\">Parity</a> is an example of a larger binary project that is composed of many smaller crates.</p>\n"}], "owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 184, "favorite_count": 0, "accepted_answer_id": 45774546, "answer_count": 1, "score": 0, "last_activity_date": 1503164466, "creation_date": 1503157453, "last_edit_date": 1592644375, "question_id": 45773442, "link": "https://stackoverflow.com/questions/45773442/extern-libraries-as-dependency-to-local-libs", "title": "Extern libraries as dependency to local libs", "body": "<p>In a language like C, we deal with three different translation units: object files, libraries, and executables. If I've understood correctly, Rust has skipped the first. That is, if I want to divide my project into several translation units I have to use local crates as shown in this <a href=\"https://gillesleblanc.wordpress.com/2014/10/10/using-a-local-crate-with-cargo/\" rel=\"nofollow noreferrer\">blog</a>.</p>\n<p>If one uses the extern crate (E) nearly everywhere in code (i.e. my local lib crates and the binary crate), then one has to include E in all <code>Cargo.toml</code> dependencies.</p>\n<p>Questions:</p>\n<ul>\n<li>Does this mean that E's code is included several times in the final binary?</li>\n<li>If I want to update E's version, I have to change all <code>Cargo.toml</code> files. Is there an alternative where I can specify &quot;common&quot; dependencies?</li>\n<li>Is the cited approach idiomatic? While possible, the Rust community seems not to advocate<sup>1</sup> sub-crates beside of in workspaces</li>\n</ul>\n<p>I'm aware that using dynamic libraries would be a solution in part; however, my project is an embedded one without support for dynamic libraries.</p>\n<p><sup>1</sup> <em>This is my personal impression; sorry if I'm wrong here.</em></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1503140584, "post_id": 45769508, "comment_id": 78499599, "body": "Hi! I&#39;ve found your original question a bit difficult to understand. I attempted to reformulate a few sentences to make things more clear. I also answered based on my understanding of your original question. If I made a mistake or you just disagree with my changes, just click on &quot;rollback&quot;."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1503149465, "post_id": 45769508, "comment_id": 78502349, "body": "@LukasKalbertodt My question is only about types, if it is not clear, you can reformulte my question."}], "answers": [{"comments": [{"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1503149414, "post_id": 45770642, "comment_id": 78502333, "body": "You example is not <code>type</code>"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 1, "creation_date": 1503155538, "post_id": 45770642, "comment_id": 78504268, "body": "I read the question as being about paths, not specifically type paths."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1503155717, "post_id": 45770642, "comment_id": 78504331, "body": "I updated my question to make it more clear, I mean paths only in context of types. Not abstract path to module, crates and so on."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 1, "creation_date": 1503157887, "post_id": 45770642, "comment_id": 78504973, "body": "Then Lukas Kalbertodt&#39;s answer answers your question: types can follow types with associated types, and while those cannot be generic yet, it will probably change in the future."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": -1, "last_activity_date": 1503139834, "creation_date": 1503139834, "answer_id": 45770642, "question_id": 45769508, "link": "https://stackoverflow.com/questions/45769508/is-it-possible-to-have-type-paths-in-which-multiple-segments-have-angle-bracket/45770642#45770642", "title": "Is it possible to have type paths in which multiple segments have angle-bracket parameters?", "body": "<p>It is already possible for each segment to have parameters:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    t: T,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn bar&lt;U&gt;() {}\n}\n\nfn main() {\n    Foo::&lt;u8&gt;::bar::&lt;u32&gt;();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1503149363, "post_id": 45770682, "comment_id": 78502313, "body": "Both of your examples are not types. Or I missed something? Full path of function != type"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 2, "creation_date": 1503160008, "post_id": 45770682, "comment_id": 78505640, "body": "@fghj My answer already contained all the information to answer your question. I reformulated it a bit to make it more clear."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1503159981, "last_edit_date": 1503159981, "creation_date": 1503140164, "answer_id": 45770682, "question_id": 45769508, "link": "https://stackoverflow.com/questions/45769508/is-it-possible-to-have-type-paths-in-which-multiple-segments-have-angle-bracket/45770682#45770682", "title": "Is it possible to have type paths in which multiple segments have angle-bracket parameters?", "body": "<p>It's certainly possible today to have a path with generic parameters on multiple segments. For example, you could write this:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    _dummy: T,\n}\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn bar&lt;U&gt;() {}\n}\n\n// So many parameters!\nFoo::&lt;u32&gt;::bar::&lt;char&gt;();\n</code></pre>\n\n<p>Another example with <code>Option</code> from the standard library:</p>\n\n<pre><code>Option::&lt;u32&gt;::ok_or::&lt;char&gt;(None, 'a');\n</code></pre>\n\n<p>However, that only works because the last segment is a function. But that's all we can do right now: parameters on <em>two</em> segments, one of which is a function. We can have the following possible path segments:</p>\n\n<ul>\n<li><strong>Modules/Crates</strong>\n\n<ul>\n<li>Can be followed by: module, type, function</li>\n<li>Can <strong>not</strong> have any generic parameters</li>\n</ul></li>\n<li><strong>Types</strong>\n\n<ul>\n<li>Can be followed by: type\u00b9, function</li>\n<li><strong>Can</strong> have generic parameters</li>\n</ul></li>\n<li><strong>Functions</strong>\n\n<ul>\n<li>Can be followed by: <em>nothing</em></li>\n<li><strong>Can</strong> have generic parameters</li>\n</ul></li>\n</ul>\n\n<p>Ignoring the (\u00b9) for a moment, one could think that we can just nest a lot of types in one another to create arbitrarily long paths with type parameter on each segment. But (!) a type can only be followed by another type if this other type is an <em>associated type</em>. And right now, associated types <strong>cannot</strong> have type parameters. However, this will probably <a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"nofollow noreferrer\">change soon</a>.</p>\n\n<p>So in summary: today, paths to a type have at most one segment with angle-bracket parameters. But this is very likely to change in the near future.</p>\n"}], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "accepted_answer_id": 45770682, "answer_count": 2, "score": 1, "last_activity_date": 1503159981, "creation_date": 1503131896, "last_edit_date": 1503155539, "question_id": 45769508, "link": "https://stackoverflow.com/questions/45769508/is-it-possible-to-have-type-paths-in-which-multiple-segments-have-angle-bracket", "title": "Is it possible to have type paths in which multiple segments have angle-bracket parameters?", "body": "<p>I am playing with <a href=\"https://github.com/dtolnay/syn\" rel=\"nofollow noreferrer\"><code>syn</code></a> to parse Rust code. Looking at the type definitions of the AST nodes, I noticed something and got interested: is it possible to have type's path (e.g. <code>a::b::c</code>) where there are multiple segments which have angle-bracket parameters? So far I've only seen angle-bracket parameters on the last segment.</p>\n\n<p>Here are the type definitions of some AST nodes; <a href=\"https://dtolnay.github.io/syn/syn/enum.Ty.html\" rel=\"nofollow noreferrer\"><code>Ty</code></a>:</p>\n\n<pre><code>pub enum Ty {\n    ...\n    Path(Option&lt;QSelf&gt;, Path),\n}\n</code></pre>\n\n<p><a href=\"https://dtolnay.github.io/syn/syn/struct.Path.html\" rel=\"nofollow noreferrer\"><code>Path</code></a>:</p>\n\n<pre><code>pub struct Path {\n    pub global: bool,\n    pub segments: Vec&lt;PathSegment&gt;,\n}\n</code></pre>\n\n<p>And <a href=\"https://dtolnay.github.io/syn/syn/struct.PathSegment.html\" rel=\"nofollow noreferrer\"><code>PathSegment</code></a></p>\n\n<pre><code>pub struct PathSegment {\n    pub ident: Ident,\n    pub parameters: PathParameters,\n}\n</code></pre>\n\n<p>So apparently after parsing a Rust type it is possible to have parameters on each path segment, like <code>A&lt;i32&gt;::B&lt;i32&gt;</code> for <strong>type</strong>. Is that really possible? Maybe not with type parameters, but lifetimes? Or is it only possible in the near future after an RFC was merged?</p>\n\n<p>This is question is only in context of type.</p>\n"}, {"tags": ["string", "split", "rust", "linefeed"], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1503155655, "post_id": 45765236, "comment_id": 78504313, "body": "You could also use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.lines\" rel=\"nofollow noreferrer\"><code>string.lines()</code></a> if you want to treat <code>\\r\\n</code> as the same as <code>\\n</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1503158365, "post_id": 45765236, "comment_id": 78505123, "body": "@kennytm a great point! If you make it an answer I&#39;ll up vote \ud83d\ude09"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1503091894, "last_edit_date": 1503091894, "creation_date": 1503091479, "answer_id": 45765236, "question_id": 45765134, "link": "https://stackoverflow.com/questions/45765134/how-do-i-remove-line-feeds-line-breaks-from-stdstringstring/45765236#45765236", "title": "How do I remove line feeds / line breaks from std::string::String?", "body": "<p>First, you have to define what a \"line feed\" is. I choose the character <code>\\n</code>. In that case, I'd just use <code>replace</code>:</p>\n\n<pre><code>println!(\"{}\", string.replace('\\n', \"\"))\n</code></pre>\n\n<p>This works for for <code>&amp;str</code> and <code>String</code>.</p>\n\n<p>If you didn't need a new string, I'd split on newlines and print them out:</p>\n\n<pre><code>pub fn minify(string: &amp;str) {\n    for line in string.split('\\n') {\n        print!(\"{}\", line);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2699, "favorite_count": 0, "accepted_answer_id": 45765236, "answer_count": 1, "score": 0, "last_activity_date": 1503091894, "creation_date": 1503090852, "last_edit_date": 1503091190, "question_id": 45765134, "link": "https://stackoverflow.com/questions/45765134/how-do-i-remove-line-feeds-line-breaks-from-stdstringstring", "title": "How do I remove line feeds / line breaks from std::string::String?", "body": "<p>I cannot find something that will do this. What I have so far is only for whitespace:</p>\n\n<pre><code>pub fn minify(&amp;self) {\n    println!(\"Minify task started ... \");\n    let mut string_iter = self.mystring.split_whitespace();\n    for strings in string_iter {\n        println!(\"{}\", strings);\n    }\n}\n</code></pre>\n\n<p><code>mystring</code> is something like:</p>\n\n<pre><code>let mystring = \"p {\n                  text-align: center;\n                  color: red;\n                } \";\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1503090031, "post_id": 45764578, "comment_id": 78488458, "body": "Not every iterator has items that it can return references to. I think you need to show how you were trying to use the first <code>compute</code> and the compiler error; it&#39;s not clear why that wouldn&#39;t work."}, {"owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "edited": false, "score": 0, "creation_date": 1503090439, "post_id": 45764578, "comment_id": 78488643, "body": "When you write <code>PartialEq</code> after the <code>Item=</code>, it is in a <i>type context</i> so it is interpreted as a trait object, not as a trait."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1503141944, "post_id": 45764578, "comment_id": 78499992, "body": "You are right about the abbreviation: LHS is used for Left Hand Side and RHS for Right Hand Side when talking about binary operators (I personally prefer to refer to them as Left and Right when both are in scope, because I do not like identifiers differing by a single letter)."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1503090188, "creation_date": 1503090188, "answer_id": 45765019, "question_id": 45764578, "link": "https://stackoverflow.com/questions/45764578/what-does-rhs-refer-to-in-a-compiler-error-message-about-partialeq/45765019#45765019", "title": "What does Rhs refer to in a compiler error message about PartialEq?", "body": "<p><code>PartialEq</code> is a trait that allows you to compare two values. Those two values do <em>not</em> have to be of the same type! The <em>generic type</em> <code>Rhs</code> is used to specify what type we are comparing with. By default, the value of <code>Rhs</code> is the same as the type that is being compared to:</p>\n\n<pre><code>pub trait PartialEq&lt;Rhs = Self&gt; \nwhere\n    Rhs: ?Sized, \n</code></pre>\n\n<p>In this case, you are actually requesting that the iterator value be the  <em>trait object</em> <code>&amp;PartialEq</code>. As the error message states:</p>\n\n<blockquote>\n  <p>because of the default <code>Self</code> reference, type parameters must be specified on object types</p>\n</blockquote>\n\n<p>We could specify it:</p>\n\n<pre><code>fn compute&lt;'a, T&gt;(first: T, second: T, len: usize) -&gt; usize\nwhere\n    T: Iterator&lt;Item = &amp;'a std::cmp::PartialEq&lt;i32&gt;&gt;,\n</code></pre>\n\n<p>or </p>\n\n<pre><code>fn compute&lt;'a, T: 'a&gt;(first: T, second: T, len: usize) -&gt; usize\nwhere\n    T: Iterator&lt;Item = &amp;'a std::cmp::PartialEq&lt;&amp;'a T&gt;&gt;,\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>but iterates (as far as I understand) not by reference but by value </p>\n</blockquote>\n\n<p>It's quite possible for it to iterate by reference. Remember that <code>T</code> is <em>any</em> type and that <code>i32</code>, <code>&amp;i32</code>, and <code>&amp;mut i32</code> are <em>all</em> types. Your first example is the formulation of the signature I would use:</p>\n\n<pre><code>fn compute&lt;T: Iterator&gt;(first: T, second: T, len: usize) -&gt; usize\nwhere\n    T::Item: std::cmp::PartialEq,\n{\n    42\n}\n\nfn main() {\n    let a = [1, 2, 3];\n    let b = [4, 5, 6];\n\n    compute(a.iter(), b.iter(), 1);\n    compute(a.iter(), b.iter(), 2);\n    compute(a.iter(), b.iter(), 3);\n}\n</code></pre>\n"}], "owner": {"reputation": 1622, "user_id": 1563394, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/67835df71913e21410945dfa8c33d70f?s=128&d=identicon&r=PG", "display_name": "lwi", "link": "https://stackoverflow.com/users/1563394/lwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 641, "favorite_count": 0, "accepted_answer_id": 45765019, "answer_count": 1, "score": 1, "last_activity_date": 1503090188, "creation_date": 1503087906, "last_edit_date": 1503089381, "question_id": 45764578, "link": "https://stackoverflow.com/questions/45764578/what-does-rhs-refer-to-in-a-compiler-error-message-about-partialeq", "title": "What does Rhs refer to in a compiler error message about PartialEq?", "body": "<p>I am trying to create a function that takes two iterators as as parameters and iterates over the items by reference. Each <code>Iterator</code> item should implement <code>PartialEq</code>. </p>\n\n<p>My first attempt was: </p>\n\n<pre><code>fn compute&lt;T: Iterator&gt;(first: T, second: T, len: usize) -&gt; usize\nwhere\n    T::Item: std::cmp::PartialEq,\n{\n    // ...\n}\n</code></pre>\n\n<p>This compiles but iterates (as far as I understand) not by reference but by value and the compiler complains about a move when iterating.</p>\n\n<p>My second attempt was something like:</p>\n\n<pre><code>fn compute&lt;'a, T&gt;(first: T, second: T, len: usize) -&gt; usize\nwhere\n    T: Iterator&lt;Item = &amp;'a std::cmp::PartialEq&gt;,\n{\n    //...\n}\n</code></pre>\n\n<p>resulting in a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0393]: the type parameter `Rhs` must be explicitly specified\n --&gt; src/main.rs:3:28\n  |\n3 |     T: Iterator&lt;Item = &amp;'a std::cmp::PartialEq&gt;,\n  |                            ^^^^^^^^^^^^^^^^^^^ missing reference to `Rhs`\n  |\n  = note: because of the default `Self` reference, type parameters must be specified on object types\n</code></pre>\n\n<p>What does the <code>Rhs</code> (Right hand side?) the compiler refers to here mean? Why do I need a reference to it? How do I pass a bounded reference-based <code>Iterator</code> into a function?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 16, "last_activity_date": 1612888220, "last_edit_date": 1612888220, "creation_date": 1503075699, "answer_id": 45761619, "question_id": 45761364, "link": "https://stackoverflow.com/questions/45761364/what-is-the-canonical-way-to-implement-is-empty-for-iterator/45761619#45761619", "title": "What is the canonical way to implement is_empty for Iterator?", "body": "<p>I would write <code>iter.next().is_some()</code>.</p>\n<p>However, you need to be aware that doing this <em>advances the iterator</em>.</p>\n<pre><code>fn main() {\n    let scores = [1, 2, 3];\n    let mut iter = scores.iter();\n    \n    println!(&quot;{}&quot;, iter.next().is_some()); // true\n    println!(&quot;{}&quot;, iter.next().is_some()); // true\n    println!(&quot;{}&quot;, iter.next().is_some()); // true\n    println!(&quot;{}&quot;, iter.next().is_some()); // false\n}\n</code></pre>\n<p>In many cases I'd use <a href=\"https://doc.rust-lang.org/std/iter/struct.Peekable.html\" rel=\"nofollow noreferrer\"><code>Peekable</code></a>:</p>\n<pre><code>fn main() {\n    let scores = [1, 2, 3];\n    let mut iter = scores.iter().peekable();\n    \n    println!(&quot;{}&quot;, iter.peek().is_some()); // true\n    println!(&quot;{}&quot;, iter.peek().is_some()); // true\n    println!(&quot;{}&quot;, iter.peek().is_some()); // true\n    println!(&quot;{}&quot;, iter.peek().is_some()); // true\n}\n</code></pre>\n<blockquote>\n<p>so a future reader can understand on sight</p>\n</blockquote>\n<p>I'd <a href=\"https://stackoverflow.com/q/30540766/155423\">add a method on iterator</a> named <code>is_empty</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 349, "user_id": 1539761, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adefe3e0223276ffaef63d286724891d?s=128&d=identicon&r=PG", "display_name": "edb", "link": "https://stackoverflow.com/users/1539761/edb"}, "is_accepted": false, "score": 7, "last_activity_date": 1503121767, "creation_date": 1503121767, "answer_id": 45768142, "question_id": 45761364, "link": "https://stackoverflow.com/questions/45761364/what-is-the-canonical-way-to-implement-is-empty-for-iterator/45768142#45768142", "title": "What is the canonical way to implement is_empty for Iterator?", "body": "<p>The canonical way to implement <code>is_empty</code> for <code>Iterator</code> is not to do so. An <code>Iterator</code> is <a href=\"https://doc.rust-lang.org/core/iter/index.html#laziness\" rel=\"noreferrer\">lazy</a>, so by definition cannot know if it has any more elements without iterating.</p>\n\n<p>Logically, it might seem as if it should be simple for an Iterator to know whether it has any more elements, but that can only be the case (without iterating) if its size in known. And indeed, <a href=\"https://doc.rust-lang.org/std/iter/trait.ExactSizeIterator.html#method.is_empty\" rel=\"noreferrer\">ExactSizeIterator</a> implements <code>is_empty</code>.</p>\n\n<p>To check whether an <code>Iterator</code> is empty, you must attempt to iterate and check if you receive <code>None</code>, however (as mentioned by @Shepmaster), you can only do so without advancing the <code>Iterator</code> when you have a <code>Peekable</code> <code>Iterator</code>. You can <code>peek()</code> at the next element and check if it <code>is_none()</code>:</p>\n\n<pre><code>let mut iterator = vec![1,2,3].into_iter().peekable();\nprintln!(\"is_empty: {}\", iterator.peek().is_none());\n</code></pre>\n\n<p>This becomes more obvious when considering that an to implement <code>Iterator</code>, one only needs to provide a <code>next</code> function that returns either <code>Some</code> or <code>None</code> to indicate whether further elements exist. We could provide an implementation of <code>next</code> that randomly decides whether the next element exists, which makes it clear that we can't know without executing <code>next</code> whether our iterator is empty:</p>\n\n<pre><code>struct RandomThings {}\nimpl Iterator for RandomThings {\n    type Item = bool;\n    fn next(&amp;mut self) -&gt; Option&lt;bool&gt; {\n        let has_next = rand::random::&lt;bool&gt;();\n        if has_next {Some(true)} else {None}\n    }\n}\n</code></pre>\n\n<p>So creating a <code>Peekable</code> Iterator and calling <code>.peek().is_none()</code> is actually very explicit, and should be easily understood by future readers. If you are only dealing with iterators of known size, then you can constrain your type further to <code>ExactSizeIterator</code> and use <code>is_empty</code>. If you were to add <code>is_empty</code> for an ordinary <code>Iterator</code> you would only be hiding the fact that its <code>next</code> function must be called to determine whether it is empty.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1582, "favorite_count": 1, "answer_count": 2, "score": 15, "last_activity_date": 1612888220, "creation_date": 1503074510, "last_edit_date": 1503076015, "question_id": 45761364, "link": "https://stackoverflow.com/questions/45761364/what-is-the-canonical-way-to-implement-is-empty-for-iterator", "title": "What is the canonical way to implement is_empty for Iterator?", "body": "<p>I have something that implements <code>std::iter::Iterator</code> and I want to know if there are <code>&gt; 0</code> elements. What is the standard way to do it? <code>count() &gt; 0</code> looks too expensive. </p>\n\n<p>I see two candidates: <code>any(|_| true)</code> and <code>nth(0).is_some()</code>, but which one should I pick so a future reader can understand on sight what I'm checking here?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503073769, "post_id": 45761106, "comment_id": 78480339, "body": "<i>Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs</i> \u2014 that&#39;s your project compiling successfully. <b>There is no error</b>."}, {"owner": {"reputation": 3085, "user_id": 4040600, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/B4ER6.png?s=128&g=1", "display_name": "&#201;amonn Olive", "link": "https://stackoverflow.com/users/4040600/%c3%89amonn-olive"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503073815, "post_id": 45761106, "comment_id": 78480359, "body": "@Shepmaster There is still an error when compiling.  Cargo doesn&#39;t error but the compiler does."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1503073878, "post_id": 45761106, "comment_id": 78480401, "body": "<code>cargo build</code> <i>runs the compiler</i> and reports no errors. I don&#39;t understand how you are getting an error outside of that"}, {"owner": {"reputation": 3085, "user_id": 4040600, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/B4ER6.png?s=128&g=1", "display_name": "&#201;amonn Olive", "link": "https://stackoverflow.com/users/4040600/%c3%89amonn-olive"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503074014, "post_id": 45761106, "comment_id": 78480462, "body": "@Shepmaster Ah I did not know that.  Thanks for the help."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1503073999, "creation_date": 1503073999, "answer_id": 45761233, "question_id": 45761106, "link": "https://stackoverflow.com/questions/45761106/unable-to-find-crate-when-compiling-even-after-successfully-running-cargo-build/45761233#45761233", "title": "Unable to find crate when compiling even after successfully running `cargo build`", "body": "<blockquote>\n  <p>I ran cargo build successfully and attempted to compile the Rust source again.</p>\n</blockquote>\n\n<p>Cargo runs the compiler for you. By calling <code>cargo build</code>, you have already implicitly called the compiler (<code>rustc</code>) and the program is built and ready to be executed: <code>cargo run</code> or <code>./target/debug/my-app-name</code>.</p>\n\n<p>It's a very rare occurrence to call <code>rustc</code> directly.</p>\n"}], "owner": {"reputation": 3085, "user_id": 4040600, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/B4ER6.png?s=128&g=1", "display_name": "&#201;amonn Olive", "link": "https://stackoverflow.com/users/4040600/%c3%89amonn-olive"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "accepted_answer_id": 45761233, "answer_count": 1, "score": 0, "last_activity_date": 1503074259, "creation_date": 1503073460, "last_edit_date": 1503074259, "question_id": 45761106, "link": "https://stackoverflow.com/questions/45761106/unable-to-find-crate-when-compiling-even-after-successfully-running-cargo-build", "title": "Unable to find crate when compiling even after successfully running `cargo build`", "body": "<p>I've been trying to compile a project written in Rust.  When I first compiled, I got the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0463]: can't find crate for `argparse`\n --&gt; src/main.rs:6:1\n  |\n6 | extern crate argparse;\n  | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n</code></pre>\n\n<p>This seemed like a dependency error meaning that I needed to use Cargo. Luckily, the project provided a <code>Cargo.toml</code> file for me to use.  I ran <code>cargo build</code> successfully and attempted to compile the Rust source again.</p>\n\n<p>The error persisted so I opened up the <code>Cargo.toml</code> to take a look.  It contained what I would have expected</p>\n\n<pre><code>[package]\nname = \"stones\"\nversion = \"0.5.0\"\nauthors = [\"cheezgi &lt;zackh@firemail.cc&gt;\"]\n\n[dependencies]\nargparse = \"*\"\nrustyline = \"*\"\n\n[profile.dev]\ndebug = true\n</code></pre>\n\n<p>I ran <code>cargo build -v</code> to make sure everything was going as expected.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>       Fresh unicode-width v0.1.4\n       Fresh bitflags v0.4.0\n       Fresh libc v0.2.20\n       Fresh argparse v0.2.1\n       Fresh encode_unicode v0.1.3\n       Fresh nix v0.5.1\n       Fresh rustyline v1.0.0\n       Fresh stones v0.5.0 (file:///Users/eamonolive/projects/stones)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n</code></pre>\n\n<p>I couldn't see anything wrong with the results here, it looked like everything was installed properly but the compiler continues to be unable to find the crate for argparse.</p>\n\n<p>I'm using rustc 1.19.0 if it makes any difference.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503073481, "post_id": 45760060, "comment_id": 78480219, "body": "Pedantically, this doesn&#39;t allow you to modify two fields in the same struct <i>at once</i> \u2014 any ideas on how to do that?"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 2, "last_activity_date": 1503069689, "creation_date": 1503069689, "answer_id": 45760060, "question_id": 45759964, "link": "https://stackoverflow.com/questions/45759964/how-to-alter-two-fields-at-once-in-a-rust-struct/45760060#45760060", "title": "How to alter two fields at once in a Rust struct?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\"><code>std::mem::swap</code></a>:</p>\n\n<pre><code>pub fn foo(bar: &amp;mut Bar) {\n    let next = vec![3, 4, 5];\n\n    std::mem::swap(&amp;mut bar.prev, &amp;mut bar.curr);\n    bar.curr = next;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503073472, "post_id": 45760183, "comment_id": 78480217, "body": "Pedantically, this doesn&#39;t allow you to modify two fields in the same struct <i>at once</i> \u2014 any ideas on how to do that?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1503070057, "creation_date": 1503070057, "answer_id": 45760183, "question_id": 45759964, "link": "https://stackoverflow.com/questions/45759964/how-to-alter-two-fields-at-once-in-a-rust-struct/45760183#45760183", "title": "How to alter two fields at once in a Rust struct?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"noreferrer\"><code>std::mem::replace</code></a> or <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"noreferrer\"><code>std::mem::swap</code></a>.</p>\n\n<pre><code>pub fn foo(bar: &amp;mut Bar) {\n    use std::mem;\n    let next = vec![3, 4, 5];\n    bar.prev = mem::replace(&amp;mut bar.curr, next);\n}\n</code></pre>\n\n<blockquote>\n  <p>It is somewhat interesting that the following code compiles [...]</p>\n</blockquote>\n\n<p>This is because you own the structure, so the compiler can safely break it apart.  It can't do this when the structure is borrowed or behind some kind of pointer.  The key question is: what happens if you panic half-way through a modification (answer: it's possible code higher in the call stack could observe the invalid value, and Rust won't allow that to happen).</p>\n\n<p>This isn't a bug, it's just how Rust works.</p>\n"}], "owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 45760183, "answer_count": 2, "score": 1, "last_activity_date": 1503073406, "creation_date": 1503069325, "last_edit_date": 1503073406, "question_id": 45759964, "link": "https://stackoverflow.com/questions/45759964/how-to-alter-two-fields-at-once-in-a-rust-struct", "title": "How to alter two fields at once in a Rust struct?", "body": "<p>Consider the following simple example:</p>\n\n<pre><code>pub struct Bar {\n    curr: Vec&lt;i32&gt;,\n    prev: Vec&lt;i32&gt;,\n}\n\npub fn main() {\n    let mut b = Bar { curr: vec![1, 2, 3], prev: vec![2, 3, 4] };\n\n    foo(&amp;mut b);\n}\n\npub fn foo(bar: &amp;mut Bar) {\n    let next = vec![3, 4, 5];\n\n    bar.prev = bar.curr;\n    bar.curr = next;\n}\n</code></pre>\n\n<p>The use of <code>Vec</code> doesn't matter; the point is that <code>Bar</code> has two fields which don't implement <code>Copy</code>. This doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; derp.rs:15:16\n   |\n15 |     bar.prev = bar.curr;\n   |                ^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>It's not hard to see why: by moving <code>bar.curr</code> without replacing it immediately, we have to move <code>bar</code> itself, which we're not allowed to do, as it's only borrowed mutably, not actually owned.</p>\n\n<p>However this is a very common use case (in this case -- keeping the last two outputs of a function, for example) and I feel like there must be an idiomatic Rust use case. I realize this can be gotten around by using a single tuple <code>(curr, prev)</code> and assigning it at once, but (supposing the function <code>foo</code> was written long after the struct <code>Bar</code> has been in use) the refactoring could be pretty frustrating.</p>\n\n<p>Assigning two values at once doesn't seem legal: the code <code>(bar.prev, bar.curr) = (bar.curr, next)</code> doesn't compile as the left side isn't a legal left-hand-side value.</p>\n\n<p>It is somewhat interesting that the following code compiles:</p>\n\n<pre><code>pub struct Bar {\n    curr: Vec&lt;i32&gt;,\n    prev: Vec&lt;i32&gt;,\n}\n\npub fn main() {\n    let b = Bar { curr: vec![1, 2, 3], prev: vec![2, 3, 4] };\n\n    foo(b);\n}\n\npub fn foo(mut bar: Bar) -&gt; Bar {\n    let next = vec![3, 4, 5];\n\n    bar.prev = bar.curr;\n    bar.curr = next;\n\n    bar\n}\n</code></pre>\n\n<p>While the line <code>bar.prev = bar.curr</code> seems to <em>require</em> move privileges, it doesn't seem to <em>use</em> them, as the following line <code>bar.curr = next</code> shouldn't compile if <code>bar</code> has been moved.</p>\n\n<p>Additionally, if you take the <code>bar.curr = next</code> line <em>out</em>, it no longer compiles (<code>bar</code> is returned after being moved), so it seems like the compiler is smart enough to figure out how to resolve this issue (that the fields all end up stably assigned), but can't do the same task for mutable pointers.</p>\n\n<p>So I guess (a) is this a bug, (b) is this a <em>known</em> bug, and (c) is there a workaround so I can still do this with mutable pointers?</p>\n"}, {"tags": ["reference", "rust", "idioms"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 3, "creation_date": 1503059711, "post_id": 45756582, "comment_id": 78470827, "body": "Rust is designed for system programming. This function gets a buffer to write in, and returns the written size. This is a very common design in such languages (think about C&#39;s <code>sprintf</code>, for example). This design is only useful in case of buffers IMO."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1503060296, "post_id": 45756582, "comment_id": 78471222, "body": "Related: <a href=\"https://stackoverflow.com/questions/36562262/why-does-rust-have-both-call-by-value-and-call-by-reference\">Why does Rust have both call by value and call by reference?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 598, "user_id": 1826241, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2aaac949383a1f98d77696b8e80b9fe4?s=128&d=identicon&r=PG", "display_name": "dlukes", "link": "https://stackoverflow.com/users/1826241/dlukes"}, "edited": false, "score": 0, "creation_date": 1503062542, "post_id": 45757012, "comment_id": 78472908, "body": "So to sum up, the typical use for this pattern would be in functions where it&#39;s unclear at compile time how much memory needs to be allocated to hold the result and/or it might be a good idea to reuse previously allocated memory, and therefore these decisions are left to the caller? Is that a fair description?  (In other words, <a href=\"https://stackoverflow.com/questions/45756582/functions-in-rust-populating-a-reference-vs-moving-an-owned-value?noredirect=1#comment78470827_45756582\">this comment</a> would be right in saying that it&#39;s primarily useful for buffers.)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 598, "user_id": 1826241, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2aaac949383a1f98d77696b8e80b9fe4?s=128&d=identicon&r=PG", "display_name": "dlukes", "link": "https://stackoverflow.com/users/1826241/dlukes"}, "edited": false, "score": 0, "creation_date": 1503069653, "post_id": 45757012, "comment_id": 78477989, "body": "@dlukes Broadly, yes."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 598, "user_id": 1826241, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2aaac949383a1f98d77696b8e80b9fe4?s=128&d=identicon&r=PG", "display_name": "dlukes", "link": "https://stackoverflow.com/users/1826241/dlukes"}, "edited": false, "score": 1, "creation_date": 1503069835, "post_id": 45757012, "comment_id": 78478105, "body": "@dlukes Regardless of whether you know at compile time how much memory is needed, if you already have a buffer and you want to re-use it, there is no way to use a function that returns an owned buffer. This might come up, for instance, when writing a program like <code>cat</code> that reads a file line-by-line and discards each line before reading the next. There are lots of situations where you have a buffer &quot;in hand&quot; and it&#39;s more efficient to reuse it than trash it and make a new one."}, {"owner": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 0, "creation_date": 1524688704, "post_id": 45757012, "comment_id": 87077953, "body": "Why not just create the buffer, pass it by giving the <code>read_to_string</code> function its ownership, then have that function return the filled buffer back?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 44680, "user_id": 1031791, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/fb710534fda446d2286074bb7692e65a?s=128&d=identicon&r=PG", "display_name": "MaiaVictor", "link": "https://stackoverflow.com/users/1031791/maiavictor"}, "edited": false, "score": 0, "creation_date": 1524813020, "post_id": 45757012, "comment_id": 87130644, "body": "@MaiaVictor: That doesn&#39;t work if <i>your</i> code is given a borrow from somewhere else.  The buffer might be stack-allocated, or kept in a structure somewhere else.  A mutable borrow is the most flexible choice available."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1503060280, "creation_date": 1503060280, "answer_id": 45757012, "question_id": 45756582, "link": "https://stackoverflow.com/questions/45756582/is-it-always-preferable-to-pass-in-a-mutable-reference-vs-creating-and-returning/45757012#45757012", "title": "Is it always preferable to pass in a mutable reference vs creating and returning an owned value?", "body": "<p>If <code>read_to_string</code> wanted to return an owned <code>String</code>, this means it would have to heap allocate a new <code>String</code> every time it was called.  Also, because <code>Read</code> implementations don't always know how much data there is to be read, it would probably have to incrementally re-allocate the work-in-progress <code>String</code> multiple times.  This also means every temporary <code>String</code> has to go back to the allocator to be destroyed.</p>\n\n<p>This is wasteful.  Rust is a system programming language.  System programming languages <em>abhor</em> waste.</p>\n\n<p>Instead, the caller is responsible for allocating and providing the buffer.  If you only call <code>read_to_string</code> once, nothing changes.  If you call it <em>more</em> than once, however, you can re-use the same buffer multiple times without the constant allocate/resize/deallocate cycle.  Although it doesn't apply in this specific case, similar interfaces can be design to also support stack buffers, meaning in some cases you can avoid heap activity entirely.</p>\n\n<p>Having the caller pass the buffer in is strictly more flexible than the alternative.</p>\n"}], "owner": {"reputation": 598, "user_id": 1826241, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/2aaac949383a1f98d77696b8e80b9fe4?s=128&d=identicon&r=PG", "display_name": "dlukes", "link": "https://stackoverflow.com/users/1826241/dlukes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 1, "accepted_answer_id": 45757012, "answer_count": 1, "score": 1, "last_activity_date": 1524676669, "creation_date": 1503059072, "last_edit_date": 1524676669, "question_id": 45756582, "link": "https://stackoverflow.com/questions/45756582/is-it-always-preferable-to-pass-in-a-mutable-reference-vs-creating-and-returning", "title": "Is it always preferable to pass in a mutable reference vs creating and returning an owned value?", "body": "<p>Coming to Rust from dynamic languages like Python, I'm not used to the programming pattern where you provide a function with a mutable reference to an empty data structure and that function populates it. A typical example is reading a file into a <code>String</code>:</p>\n\n<pre><code>let mut f = File::open(\"file.txt\").unwrap();\nlet mut contents = String::new();\nf.read_to_string(&amp;mut contents).unwrap();\n</code></pre>\n\n<p>To my Python-accustomed eyes, an API where you just create an owned value within the function and move it out as a return value looks much more intuitive / ergonomic / what have you:</p>\n\n<pre><code>let mut f = File::open(\"file.txt\").unwrap();\nlet contents = f.read_to_string().unwrap();\n</code></pre>\n\n<p>Since the Rust standard library takes the former road, I figure there must be a reason for that.</p>\n\n<p>Is it always preferable to use the reference pattern? If so, why? (Performance reasons? What specifically?) If not, how do I spot the cases where it might be beneficial? Is it mostly useful when I want to return another value in addition to populating the result data structure (as in the first example above, where <code>.read_to_string()</code> returns the number of bytes read)? Why not use a tuple? Is it simply a matter of personal preference?</p>\n"}, {"tags": ["vector", "iterator", "rust", "compiler-optimization"], "comments": [{"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 3, "creation_date": 1503051813, "post_id": 45753923, "comment_id": 78465676, "body": "While it&#39;s an interesting question about optimization, note that you can implement your intent more clearly and don&#39;t worry about such optimizations if you just write <code>for i in &amp;mut u { *i += 1; }</code>."}, {"owner": {"reputation": 6367, "user_id": 6914441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1", "display_name": "jferard", "link": "https://stackoverflow.com/users/6914441/jferard"}, "reply_to_user": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 0, "creation_date": 1503052467, "post_id": 45753923, "comment_id": 78466128, "body": "@PavelStrakhov if I understand correctly, your code is approximately the Rust translation of my pseudo-code, without the original &quot;functional style&quot;. Also note that in my example, <code>u</code> is not mutable."}], "answers": [{"tags": [], "owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "is_accepted": false, "score": 2, "last_activity_date": 1503053202, "last_edit_date": 1503053202, "creation_date": 1503052719, "answer_id": 45754659, "question_id": 45753923, "link": "https://stackoverflow.com/questions/45753923/can-a-vector-be-moved-and-modified-without-an-extra-allocation/45754659#45754659", "title": "Can a vector be moved and modified without an extra allocation?", "body": "<blockquote>\n  <p>Is there an allocation of a new Vec when we convert a Vec into an iterator and then map this iterator to an iterator on elements of the same type and then collect the result into a Vec?</p>\n</blockquote>\n\n<p>Yes, the necessary optimization to avoid that allocation is simply too high-level to perform for any of the compiler tiers since they would have to reason about heap allocations and the pointer magic going on in the unsafe code blocks that underpin the <code>Vec</code> implementation. Doubly so in the general case where drop-handlers, panics inside the <code>map</code> and similar things come into play.</p>\n\n<p>It might be possible to optimize at the library level by <a href=\"https://github.com/rust-lang/rust/issues/31844\" rel=\"nofollow noreferrer\">specializing</a><br>\n<code>collect() -&gt; Vec&lt;T&gt;</code> for specific types such as <code>std::iter::Map&lt;std::vec::IntoIter&lt;T&gt;, _&gt;</code>, but those optimizations would have to be applied on a case-by-case basis where it is known to be safe.</p>\n\n<blockquote>\n  <p>if I understand correctly, your code is approximately the Rust translation of my pseudo-code, without the original \"functional style\".</p>\n</blockquote>\n\n<p>For the functional style there is a plan to add <a href=\"https://github.com/rust-lang/rust/issues/42986\" rel=\"nofollow noreferrer\">for_each</a> to iterators, so if you take an <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter_mut\" rel=\"nofollow noreferrer\">iter_mut</a> something equivalent could be achieved with far fewer heroics on the library or compiler side.</p>\n\n<p>And it would actually reflect the intent of doing something in place more directly instead of just doing some optimization magically which then could surprisingly break under slight modification.</p>\n"}, {"comments": [{"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1503090782, "post_id": 45755855, "comment_id": 78488790, "body": "Your post makes no argument whether any of the compiler stages could optimize those away | <i>TL;DR: no</i> - he asked whether there is an allocation."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1503096427, "post_id": 45755855, "comment_id": 78490407, "body": "@the8472 You already made a good general argument about the necessary optimization in your answer; I just showed the required steps that prove the complexity of the process, which makes it practically impossible (at this point). In TL;DR I&#39;m refeering to the question&#39;s title, though I agree - I&#39;ll make it more clear when I&#39;m on a PC."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1503096566, "post_id": 45755855, "comment_id": 78490441, "body": "Ah, it wasn&#39;t clear which part of the question you were trying to answer"}, {"owner": {"reputation": 6367, "user_id": 6914441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1", "display_name": "jferard", "link": "https://stackoverflow.com/users/6914441/jferard"}, "edited": false, "score": 0, "creation_date": 1503337521, "post_id": 45755855, "comment_id": 78563699, "body": "Thanks. +1 for the source."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 6, "last_activity_date": 1503140130, "last_edit_date": 1503140130, "creation_date": 1503056589, "answer_id": 45755855, "question_id": 45753923, "link": "https://stackoverflow.com/questions/45753923/can-a-vector-be-moved-and-modified-without-an-extra-allocation/45755855#45755855", "title": "Can a vector be moved and modified without an extra allocation?", "body": "<p>Let's see <a href=\"https://doc.rust-lang.org/stable/src/collections/vec.rs.html#1715-1734\" rel=\"nofollow noreferrer\">the source</a> of the implementation of <code>into_iter()</code> for <code>Vec&lt;T&gt;</code>:</p>\n\n<pre><code>fn into_iter(mut self) -&gt; IntoIter&lt;T&gt; {\n    unsafe {\n        let begin = self.as_mut_ptr();\n        assume(!begin.is_null());\n        let end = if mem::size_of::&lt;T&gt;() == 0 {\n            arith_offset(begin as *const i8, self.len() as isize) as *const T\n        } else {\n            begin.offset(self.len() as isize) as *const T\n        };\n        let cap = self.buf.cap();\n        mem::forget(self);\n        IntoIter {\n            buf: Shared::new(begin),\n            cap: cap,\n            ptr: begin,\n            end: end,\n        }\n    }\n}\n</code></pre>\n\n<p>Creating the <code>IntoIter</code> iterator incurs several extra allocations, but not for the elements of the vector; instead, the vector's underlying memory details are registered. How about <a href=\"https://doc.rust-lang.org/stable/src/core/iter/iterator.rs.html#479-483\" rel=\"nofollow noreferrer\">the code</a> behind <code>map()</code>?</p>\n\n<pre><code>fn map&lt;B, F&gt;(self, f: F) -&gt; Map&lt;Self, F&gt; where\n    Self: Sized, F: FnMut(Self::Item) -&gt; B,\n{\n    Map{iter: self, f: f}\n}\n</code></pre>\n\n<p>No extra vectors allocated here either. The last piece of the puzzle is <a href=\"https://doc.rust-lang.org/stable/src/core/iter/iterator.rs.html#1255-1257\" rel=\"nofollow noreferrer\"><code>collect()</code></a>:</p>\n\n<pre><code>fn collect&lt;B: FromIterator&lt;Self::Item&gt;&gt;(self) -&gt; B where Self: Sized {\n    FromIterator::from_iter(self)\n}\n</code></pre>\n\n<p>No answers here; what about <a href=\"https://doc.rust-lang.org/stable/src/collections/vec.rs.html#1689-1694\" rel=\"nofollow noreferrer\">the implementation</a> of <code>from_iter()</code> for <code>Vec&lt;T&gt;</code>?</p>\n\n<pre><code>impl&lt;T&gt; FromIterator&lt;T&gt; for Vec&lt;T&gt; {\n    #[inline]\n    fn from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; Vec&lt;T&gt; {\n        &lt;Self as SpecExtend&lt;T, I::IntoIter&gt;&gt;::from_iter(iter.into_iter())\n    }\n}\n</code></pre>\n\n<p>This is beginning to look like magic, but perhaps the related <a href=\"https://doc.rust-lang.org/stable/src/collections/vec.rs.html?search=#1773-1798\" rel=\"nofollow noreferrer\">SpecExtend code</a> will reveal what we're looking for:</p>\n\n<pre><code>impl&lt;T, I&gt; SpecExtend&lt;T, I&gt; for Vec&lt;T&gt;\n    where I: Iterator&lt;Item=T&gt;,\n{\n    default fn from_iter(mut iterator: I) -&gt; Self {\n        // Unroll the first iteration, as the vector is going to be\n        // expanded on this iteration in every case when the iterable is not\n        // empty, but the loop in extend_desugared() is not going to see the\n        // vector being full in the few subsequent loop iterations.\n        // So we get better branch prediction.\n        let mut vector = match iterator.next() {\n            None =&gt; return Vec::new(),\n            Some(element) =&gt; {\n                let (lower, _) = iterator.size_hint();\n                let mut vector = Vec::with_capacity(lower.saturating_add(1));\n                unsafe {\n                    ptr::write(vector.get_unchecked_mut(0), element);\n                    vector.set_len(1);\n                }\n                vector\n            }\n        };\n        &lt;Vec&lt;T&gt; as SpecExtend&lt;T, I&gt;&gt;::spec_extend(&amp;mut vector, iterator);\n        vector\n    }\n\n    default fn spec_extend(&amp;mut self, iter: I) {\n        self.extend_desugared(iter)\n    }\n}\n</code></pre>\n\n<p>In this code we can finally see the <code>Vec::new</code> and <code>Vec::with_capacity</code> methods called which allocate fresh space for the resulting vector.</p>\n\n<p><strong>TL;DR</strong>: no, it is not possible to move <em>and</em> modify a vector without an extra allocation.</p>\n"}], "owner": {"reputation": 6367, "user_id": 6914441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1", "display_name": "jferard", "link": "https://stackoverflow.com/users/6914441/jferard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 538, "favorite_count": 0, "accepted_answer_id": 45755855, "answer_count": 2, "score": 5, "last_activity_date": 1503140130, "creation_date": 1503050507, "last_edit_date": 1503073258, "question_id": 45753923, "link": "https://stackoverflow.com/questions/45753923/can-a-vector-be-moved-and-modified-without-an-extra-allocation", "title": "Can a vector be moved and modified without an extra allocation?", "body": "<p>Consider the following code:</p>\n\n<pre><code>let u: Vec&lt;u8&gt; = (64..74).collect();\nlet v: Vec&lt;u8&gt; = u.iter().map(|i| i + 1).collect();\n</code></pre>\n\n<p><code>u</code> was not moved, therefore <code>v</code> was inevitably newly allocated.</p>\n\n<p>But if I do the following:</p>\n\n<pre><code>let w: Vec&lt;u8&gt; = u.into_iter().map(|i| i + 1).collect();\n</code></pre>\n\n<p><code>u</code> was moved and <code>w</code> is the name of its transformation. Here is some pseudo-code representing what I mean:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>mark u as \"moved\"\nfor i = 0..10:\n    u[i] += 1\nw = u\n</code></pre>\n\n<p>There is (in my opinion) no need for a new allocation, since we map a type to itself. This wouldn't be the case for this code:</p>\n\n<pre><code>let t: Vec&lt;u8&gt; = (64..74).collect();\nlet s: String = t.into_iter().map(|i| i as char).collect();\n</code></pre>\n\n<p><strong>To summarize my question</strong></p>\n\n<p>Is there an allocation of a new <code>Vec</code> when we convert a <code>Vec</code> into an iterator and then map this iterator to an iterator <strong>on elements of the same type</strong> and then collect the result into a <code>Vec</code>?</p>\n\n<p>And if there is indeed an allocation, why?</p>\n\n<p>I tried to <code>--emit=mir</code>, but I wasn't able to find the answer. I'm using rustc 1.20 nightly (if that matters).</p>\n\n<p><a href=\"https://tio.run/##jZDNCsIwEITvPsXaU4oa/4qW@HfyCQQvIhpq1ECaSLKpB/XZa06iWLF73dn5ZtZ6h2V51JBzqUkMtwaEUQLBs7XIpj6dwwzIKKF0nMQ0M0qJDEk8eemKN52nEoUlMc35hdzlXbb6XzcXKzUq3STRjS0eURv8r0XxRrl@UjSa3X9Ut1tJg2mnA8JaYzfL3jAdbBl4J8AcITeFOEDBlRcM9n5fnesa7F/BsOabHFthMDoFGVbmB@4gO3NbqwXWb4E/Wrhg/yjLJw\" rel=\"nofollow noreferrer\" title=\"Rust \u2013 Try It Online\">If you want to play with code: Try it online!</a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 105, "user_id": 2110378, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d413edac8280c662c7815d7d8bb5fcb5?s=128&d=identicon&r=PG", "display_name": "henning", "link": "https://stackoverflow.com/users/2110378/henning"}, "is_accepted": false, "score": 0, "last_activity_date": 1503051964, "creation_date": 1503051964, "answer_id": 45754389, "question_id": 45753667, "link": "https://stackoverflow.com/questions/45753667/code-working-with-elided-lifetimes-not-with-explicit/45754389#45754389", "title": "Code working with elided lifetimes, not with explicit", "body": "<p>The infered code seems to be:</p>\n\n<pre><code>fn get&lt;F : for&lt;'inp&gt; Fn(&amp;'inp[u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1,2,3])\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/35592750/how-does-for-syntax-differ-from-a-regular-lifetime-bound\">Explanation</a></p>\n"}, {"comments": [{"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1503053385, "post_id": 45754744, "comment_id": 78466721, "body": "<i>&quot;So here foo() is generic over the type T. &quot;</i> - I think you dropped some context there"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1503054194, "post_id": 45754744, "comment_id": 78467236, "body": "@the8472 Thanks! :) I fixed it now"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1503054173, "last_edit_date": 1503054173, "creation_date": 1503052951, "answer_id": 45754744, "question_id": 45753667, "link": "https://stackoverflow.com/questions/45753667/code-working-with-elided-lifetimes-not-with-explicit/45754744#45754744", "title": "Code working with elided lifetimes, not with explicit", "body": "<p>Lifetimes in trait bounds are a bit special and the <code>Fn</code> family of traits has a special lifetime elision rule. We'll dive into that, but first, here it the correct explicitly annotated version:</p>\n\n<pre><code>fn get&lt;F: for&lt;'inp&gt; Fn(&amp;'inp [u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1, 2, 3])\n}\n</code></pre>\n\n<p>Oh gosh, what is this <code>for&lt;'inp&gt;</code> doing there? It's a so called <em>higher ranked trait bound</em> (HRTB) and it's used here to make <code>'inp</code> universally quantiefied in regards to <code>f</code>. In order to fully understand that, we need to understand a bit of theory.</p>\n\n<hr>\n\n<h3>Who has the choice?</h3>\n\n<p>Let's take a look at an easy example:</p>\n\n<pre><code>fn bar&lt;'a&gt;(x: &amp;'a u8) {}\n</code></pre>\n\n<p>Here, <code>bar()</code> is generic of the lifetime <code>'a</code>. The syntax above reads: \"choose any <code>'a</code> and there is a <code>bar()</code> that will work with <code>'a</code>\". This means that we can choose any <code>'a</code> we want, and <code>bar()</code> works! Who are \"we\"? \"We\" are the <em>caller</em> -- the one calling <code>bar</code>. This will be important later: the <em>caller</em> chooses the generic parameters. We can call <code>bar()</code> with a <code>&amp;'static u8</code> as well as with a reference that doesn't live as long. </p>\n\n<p>Now you might ask: are there situations where the <em>caller</em> doesn't choose the generic parameter, but someone else does? Yes, there are! Sadly, it's a bit more difficult to understand, because it doesn't occur too often in today's Rust code. But let's try:</p>\n\n<pre><code>trait Bar&lt;'a&gt; {\n    fn bar(&amp;self, x: &amp;'a u8);\n}\n</code></pre>\n\n<p>This is similar to the <code>bar()</code> function above, but now the lifetime parameter is defined on the trait, not the function. Let's use the trait:</p>\n\n<pre><code>fn use_bar&lt;'a, B: Bar&lt;'a&gt;&gt;(b: B) {\n    let local = 0u8;\n    b.bar(&amp;local);\n}\n</code></pre>\n\n<p>This doesn't compile, printing the same error as above. Why? The method <code>b.bar()</code> expects a reference of lifetime <code>'a</code>. But who chooses <code>'a</code> here? Exactly: the <em>caller</em> -- the <em>caller</em> <strong>of <code>use_bar()</code></strong>, not the caller of <code>bar()</code>! So the caller of <code>use_bar()</code> could choose the <code>'static</code> lifetime; in that case, it's easy to see that our <code>&amp;local</code> doesn't fulfill the lifetime requirements. </p>\n\n<p>Note that the <em>caller</em> of <code>use_bar()</code> chooses <code>'a</code> as well as <code>B</code>. Once <code>use_bar()</code> is instantiated, <code>B</code> is a fixed type and <code>B::bar()</code> works only for one specific lifetime. This means the caller of <code>bar()</code> can't choose the lifetime, but <code>bar()</code> itself chose it!</p>\n\n<p>What do we want instead? We want <code>use_bar()</code> to choose the lifetime of the <code>bar()</code> call. And we can do that with the <code>for&lt;&gt;</code> syntax:</p>\n\n<pre><code>fn use_bar&lt;B: for&lt;'a&gt; Bar&lt;'a&gt;&gt;(b: B) {\n    let local = 0u8;\n    b.bar(&amp;local);\n}\n</code></pre>\n\n<p>This works. What we say here is: \"for any lifetime parameter <code>'a</code>, <code>B</code> has to implement the trait <code>Bar&lt;'a&gt;</code>\". Instead of: \"there needs to exist a lifetime parameter <code>'a</code> for which <code>B</code> implements <code>Bar&lt;'a&gt;</code>\". It's all about who chooses which parameter.</p>\n\n<p>Let's use the real names for it:</p>\n\n<ul>\n<li>a generic parameter is <strong>universally quantified</strong> if the <em>caller</em> can choose it</li>\n<li>a generic parameter is <strong>existentially quantified</strong> if the <em>callee</em> can choose it</li>\n</ul>\n\n<h3>What does Rust do?</h3>\n\n<p>To return to your example:</p>\n\n<pre><code>fn get&lt;'inp, F: Fn(&amp;'inp [u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1, 2, 3])\n}\n</code></pre>\n\n<p>Here we have the same problem as above: the lifetime parameter of <code>f</code> is existentially quantified. The caller of <code>f</code> cannot choose the lifetime parameter. We can fix that with the <code>for&lt;&gt;</code> syntax as shown above.</p>\n\n<p>When you omit the lifetimes:</p>\n\n<pre><code>fn get&lt;F: Fn(&amp;[u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1, 2, 3])\n}\n</code></pre>\n\n<p>The Rust compiler will do something special for the <code>Fn</code> family of traits.  Your <code>F: Fn(&amp;[u8])</code> desugars to <code>F: for&lt;'a&gt; Fn&lt;(&amp;'a [u8],)&gt;</code>. If you use <code>Fn*</code> traits with parameters that involve lifetimes, those lifetimes are automatically <em>universally</em> quantified, because that's usually what you want with higher order functions.</p>\n"}], "owner": {"reputation": 105, "user_id": 2110378, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d413edac8280c662c7815d7d8bb5fcb5?s=128&d=identicon&r=PG", "display_name": "henning", "link": "https://stackoverflow.com/users/2110378/henning"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 2, "accepted_answer_id": 45754744, "answer_count": 2, "score": 3, "last_activity_date": 1503067473, "creation_date": 1503049805, "last_edit_date": 1503067473, "question_id": 45753667, "link": "https://stackoverflow.com/questions/45753667/code-working-with-elided-lifetimes-not-with-explicit", "title": "Code working with elided lifetimes, not with explicit", "body": "<p>The following code works fine:</p>\n\n<pre><code>fn get&lt;F: Fn(&amp;[u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1, 2, 3])\n}\n</code></pre>\n\n<p>However, when I add explicit lifetime information to it, it doesn't:</p>\n\n<pre><code>fn get&lt;'inp, F: Fn(&amp;'inp [u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n    f(&amp;[1, 2, 3])\n}\n</code></pre>\n\n<p>What lifetime does the compiler infer in the working code?</p>\n\n<p>I'm using Rust 1.18.0.</p>\n\n<p>The error message is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n --&gt; test.rs:4:8\n  |\n4 |     f(&amp;[1, 2, 3])\n  |        ^^^^^^^^^ does not live long enough\n5 | }\n  | - temporary value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'inp as defined on the body at 3:49...\n --&gt; test.rs:3:50\n  |\n3 |   fn get&lt;'inp, F: Fn(&amp;'inp [u8]) -&gt; u8&gt;(f: F) -&gt; u8 {\n  |  __________________________________________________^\n4 | |     f(&amp;[1, 2, 3])\n5 | | }\n  | |_^\n</code></pre>\n"}, {"tags": ["rust", "closures", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 8480618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a83427ad1e0fa01d44c2d02ab3389a?s=128&d=identicon&r=PG&f=1", "display_name": "hodasemi", "link": "https://stackoverflow.com/users/8480618/hodasemi"}, "edited": false, "score": 0, "creation_date": 1503036000, "post_id": 45745813, "comment_id": 78456110, "body": "Yea, thats a solution i also came up with. Is there another way like ensuring that clickable inside button is cleaned up when button is going to be dropped, with lifetimes? Anyways thanks for your effort!"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 61, "user_id": 8480618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a83427ad1e0fa01d44c2d02ab3389a?s=128&d=identicon&r=PG&f=1", "display_name": "hodasemi", "link": "https://stackoverflow.com/users/8480618/hodasemi"}, "edited": false, "score": 0, "creation_date": 1503037420, "post_id": 45745813, "comment_id": 78456763, "body": "Updated the answer."}, {"owner": {"reputation": 61, "user_id": 8480618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a83427ad1e0fa01d44c2d02ab3389a?s=128&d=identicon&r=PG&f=1", "display_name": "hodasemi", "link": "https://stackoverflow.com/users/8480618/hodasemi"}, "edited": false, "score": 0, "creation_date": 1503040122, "post_id": 45745813, "comment_id": 78458288, "body": "Thank you very much. Besides my callbacks are now monsters, because I have up to 4 Arc&#39;s where I have to do the same as with button."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 61, "user_id": 8480618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a83427ad1e0fa01d44c2d02ab3389a?s=128&d=identicon&r=PG&f=1", "display_name": "hodasemi", "link": "https://stackoverflow.com/users/8480618/hodasemi"}, "edited": false, "score": 0, "creation_date": 1503040391, "post_id": 45745813, "comment_id": 78458466, "body": "You could also consider making <code>Clickable</code> a trait, then implementing that trait for <code>Button</code> and such, then you&#39;d register that instead."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 4, "last_activity_date": 1503067435, "last_edit_date": 1503067435, "creation_date": 1503008769, "answer_id": 45745813, "question_id": 45745415, "link": "https://stackoverflow.com/questions/45745415/closure-may-outlive-the-current-function/45745813#45745813", "title": "Closure may outlive the current function", "body": "<p>Going off your initial code</p>\n\n<pre><code>pub fn new(context: Arc&lt;Context&gt;) -&gt; Arc&lt;Button&gt; {\n    let clickable = Clickable::new(context.clone());\n\n    let button = Arc::new(Button{\n        context: context,\n\n        clickable: clickable.clone(),\n    });\n\n    let tmp_callback = Box::new(|| {\n        button.do_stuff();\n    });\n    clickable.set_callback(Some(tmp_callback));\n\n    button\n}\n</code></pre>\n\n<p>First off, let's note the error you're getting</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    error[E0373]: closure may outlive the current function, but it borrows `button`, which is owned by the current function\n   --&gt; src/main.rs:101:37\n    |\n101 |         let tmp_callback = Box::new(|| {\n    |                                     ^^ may outlive borrowed value `button`\n102 |             button.do_stuff();\n    |             ------ `button` is borrowed here\n    |\nhelp: to force the closure to take ownership of `button` (and any other referenced variables), use the `move` keyword, as shown:\n    |         let tmp_callback = Box::new(move || {\n</code></pre>\n\n<p>Noting the <code>help</code> block at the bottom, you need to use a <code>move</code> closure, because when the <code>new</code> function ends, the <code>button</code> variable on the stack will go out of scope. The only way to avoid that is to move ownership of it to the callback itself. Thus you'd change</p>\n\n<pre><code>let tmp_callback = Box::new(|| {\n</code></pre>\n\n<p>to</p>\n\n<pre><code>let tmp_callback = Box::new(move || {\n</code></pre>\n\n<p>Now, you'd get a second error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    error[E0382]: use of moved value: `button`\n   --&gt; src/main.rs:107:9\n    |\n102 |         let tmp_callback = Box::new(move || {\n    |                                     ------- value moved (into closure) here\n...\n107 |         button\n    |         ^^^^^^ value used here after move\n    |\n    = note: move occurs because `button` has type `std::sync::Arc&lt;Button&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>And the error here may be a little clearer. You're trying to move ownership of the <code>button</code> value into the callback closure, but you <em>also</em> use it inside the body of the <code>new</code> function when you return it, and you can't have two different things trying to own the value.</p>\n\n<p>The solution to that is hopefully what you'd guess. You have to make a copy that you <em>can</em> take ownership of. You'll want to then change</p>\n\n<pre><code>let tmp_callback = Box::new(move || {\n    button.do_stuff();\n</code></pre>\n\n<p>to</p>\n\n<pre><code>let button_clone = button.clone();\nlet tmp_callback = Box::new(move || {\n    button_clone.do_stuff();\n</code></pre>\n\n<p>Now you've created a new <code>Button</code> object, and returned an <code>Arc</code> for the object itself, while also giving ownership of a second <code>Arc</code> to the callback itself.</p>\n\n<h3>Update</h3>\n\n<p>Given your comment, there is indeed an issue here of cyclic dependencies, since your <code>Clickable</code> object holds ownership of a reference to <code>Button</code>, while <code>Button</code> holds ownership of a reference to <code>Clickable</code>. The easiest way to fix this here would be to update that code a third time, from</p>\n\n<pre><code>let button_clone = button.clone();\nlet tmp_callback = Box::new(move || {\n    button_clone.do_stuff();\n</code></pre>\n\n<p>to </p>\n\n<pre><code>let button_weak = Arc::downgrade(&amp;button);\nlet tmp_callback = Box::new(move || {\n    if let Some(button) = button_weak.upgrade() {\n        button.do_stuff();\n    }\n});\n</code></pre>\n\n<p>so the <code>Clickable</code> will only hold a weak reference to the <code>Button</code>, and if the <code>Button</code> is no longer referenced, the callback will be a no-op.</p>\n\n<p>You'd also probably want to consider making <code>clickables</code> a list of <code>Weak</code> references instead of strong references, so you can remove items from it when the item they reference is removed.</p>\n"}], "owner": {"reputation": 61, "user_id": 8480618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a83427ad1e0fa01d44c2d02ab3389a?s=128&d=identicon&r=PG&f=1", "display_name": "hodasemi", "link": "https://stackoverflow.com/users/8480618/hodasemi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2343, "favorite_count": 1, "accepted_answer_id": 45745813, "answer_count": 1, "score": 5, "last_activity_date": 1503067435, "creation_date": 1503006432, "last_edit_date": 1503026498, "question_id": 45745415, "link": "https://stackoverflow.com/questions/45745415/closure-may-outlive-the-current-function", "title": "Closure may outlive the current function", "body": "<p>I am just starting to learn Rust. For this purpose I am rewriting my C++ project in Rust, but the biggest problems are lifetimes of closures and such. </p>\n\n<p>I created a absolute minimal scenario of my problem seen <a href=\"https://play.rust-lang.org/?gist=14ed33c7fe2dddca6d7e60ef15d9f502&amp;version=undefined\" rel=\"noreferrer\">here</a> and below:</p>\n\n<pre><code>use std::sync::Arc;\nuse std::cell::{RefCell, Cell};\n\nstruct Context {\n    handler: RefCell&lt;Option&lt;Arc&lt;Handler&gt;&gt;&gt;,\n}\n\nimpl Context {\n    pub fn new() -&gt; Arc&lt;Context&gt; {\n        let context = Arc::new(Context{\n            handler: RefCell::new(None),\n        });\n\n        let handler = Handler::new(context.clone());\n\n        (*context.handler.borrow_mut()) = Some(handler);\n\n        context\n    }\n\n    pub fn get_handler(&amp;self) -&gt; Arc&lt;Handler&gt; {\n        self.handler.borrow().as_ref().unwrap().clone()\n    }\n}\n\nstruct Handler {\n    context: Arc&lt;Context&gt;,\n\n    clickables: RefCell&lt;Vec&lt;Arc&lt;Clickable&gt;&gt;&gt;,\n}\n\nimpl Handler {\n    pub fn new(context: Arc&lt;Context&gt;) -&gt; Arc&lt;Handler&gt; {\n        Arc::new(Handler{\n            context: context,\n\n            clickables: RefCell::new(Vec::new()),\n        })\n    }\n\n    pub fn add_clickable(&amp;self, clickable: Arc&lt;Clickable&gt;) {\n        self.clickables.borrow_mut().push(clickable);\n    }\n\n    pub fn remove_clickable(&amp;self, clickable: Arc&lt;Clickable&gt;) {\n        // remove stuff ...\n    }\n}\n\nstruct Clickable {\n    context: Arc&lt;Context&gt;,\n\n    callback: RefCell&lt;Option&lt;Box&lt;Fn()&gt;&gt;&gt;,\n}\n\nimpl Clickable {\n    pub fn new(context: Arc&lt;Context&gt;) -&gt; Arc&lt;Clickable&gt; {\n        let clickable = Arc::new(Clickable{\n            context: context.clone(),\n\n            callback: RefCell::new(None),\n        });\n\n        context.get_handler().add_clickable(clickable.clone());\n\n        clickable\n    }\n\n    pub fn remove(clickable: Arc&lt;Clickable&gt;) {\n        clickable.context.get_handler().remove_clickable(clickable);\n    }\n\n    pub fn set_callback(&amp;self, callback: Option&lt;Box&lt;Fn()&gt;&gt;) {\n        (*self.callback.borrow_mut()) = callback;\n    }\n\n    pub fn click(&amp;self) {\n        match *self.callback.borrow() {\n            Some(ref callback) =&gt; (callback)(),\n            None =&gt; (),\n        }\n    }\n}\n\nstruct Button {\n    context: Arc&lt;Context&gt;,\n\n    clickable: Arc&lt;Clickable&gt;,\n}\n\nimpl Button {\n    pub fn new(context: Arc&lt;Context&gt;) -&gt; Arc&lt;Button&gt; {\n        let clickable = Clickable::new(context.clone());\n\n        let button = Arc::new(Button{\n            context: context,\n\n            clickable: clickable.clone(),\n        });\n\n        let tmp_callback = Box::new(|| {\n            button.do_stuff();\n        });\n        clickable.set_callback(Some(tmp_callback));\n\n        button\n    }\n\n    pub fn do_stuff(&amp;self) {\n        // doing crazy stuff\n        let mut i = 0;\n\n        for j in 0..100 {\n            i = j*i;\n        }\n    }\n\n    pub fn click(&amp;self) {\n        self.clickable.click();\n    }\n}\n\nimpl Drop for Button {\n    fn drop(&amp;mut self) {\n        Clickable::remove(self.clickable.clone());\n    }\n}\n\nfn main() {\n    let context = Context::new();\n\n    let button = Button::new(context.clone());\n\n    button.click();\n}\n</code></pre>\n\n<p>I just don't know how to pass references in closures. </p>\n\n<p>Another ugly thing is that my <code>Handler</code> and my <code>Context</code> need each other. Is there a nicer way to to create this dependency?</p>\n"}, {"tags": ["file-io", "rust", "newline"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 2, "creation_date": 1502999467, "post_id": 45742446, "comment_id": 78445053, "body": "How broad are you expecting the conversions to be? From all possible line-endings in-memory to the system line endings in the file? Are you hoping to do the opposite when reading the file? Rust doesn&#39;t have &quot;text mode&quot; files like C does, so it&#39;d be your responsibility to do it before writing the data or after reading it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1503001244, "post_id": 45742446, "comment_id": 78445947, "body": "<i>For example in Windows <code>&#39;\\n&#39;</code> is converted to <code>&quot;\\r\\n&quot;</code> during I/O.</i> And what if you want to write a &quot;Windows&quot; file from non-Windows, or vice-versa? Basing your line endings based on the <i>current</i> platform is simply too unreliable to be a good idea."}], "answers": [{"comments": [{"owner": {"reputation": 1750, "user_id": 1014841, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/ff251bd0806aa3e700db933d599dadd4?s=128&d=identicon&r=PG", "display_name": "Yves Dorfsman", "link": "https://stackoverflow.com/users/1014841/yves-dorfsman"}, "edited": false, "score": 0, "creation_date": 1566181496, "post_id": 45743710, "comment_id": 101562349, "body": "Are you saying all other apps in Windows now use &quot;\\n&quot; only to terminate files?"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1503000404, "last_edit_date": 1503000404, "creation_date": 1502998867, "answer_id": 45743710, "question_id": 45742446, "link": "https://stackoverflow.com/questions/45742446/end-of-line-conversion-during-input-output-for-text-files/45743710#45743710", "title": "End-of-line conversion during Input/Output for text files", "body": "<p>There is no such API in the standard library (there might be a crate for this, though). The simplest way to write lines to a file is with the <a href=\"https://doc.rust-lang.org/std/macro.writeln.html\" rel=\"nofollow noreferrer\"><code>writeln!</code></a> macro and it only uses <code>\\n</code> for newlines.</p>\n\n<p>It was probably considered (by the Rust developers) not useful enough because I'm pretty sure that nowadays <code>\\r\\n</code> is used only for Microsoft Notepad compatibility.</p>\n\n<p>There once was an <a href=\"https://github.com/rust-lang/rust/issues/19403\" rel=\"nofollow noreferrer\">issue</a> related to <code>write</code> not using <code>CRLF</code> on Windows, but it was concluded that:</p>\n\n<blockquote>\n  <p>the raw <code>io::File</code> will likely not handle it by default but would instead require a wrapper</p>\n</blockquote>\n\n<p>(note: since Rust 1.0 it is no longer <code>io::File</code>, but <code>fs::File</code>)</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 346, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1503000404, "creation_date": 1502994059, "last_edit_date": 1503000133, "question_id": 45742446, "link": "https://stackoverflow.com/questions/45742446/end-of-line-conversion-during-input-output-for-text-files", "title": "End-of-line conversion during Input/Output for text files", "body": "<p>How to write strings (<code>&amp;str</code> and <code>String</code>) containing newlines to text files?</p>\n\n<p>In <code>C</code> you can switch between writing text as is or converting <code>'\\n'</code> to proper end of line symbol for the OS via <code>fopen</code> flags, <code>\"w\"</code> or <code>\"wb\"</code>. For example in Windows <code>'\\n'</code> is converted to <code>\"\\r\\n\"</code> during I/O.</p>\n\n<p>How can I achieve this with Rust? I cannot find corresponding API in <code>std::fs::File</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1502983551, "post_id": 45731090, "comment_id": 78436036, "body": "Highly related if not a duplicate <a href=\"https://stackoverflow.com/q/29184358/155423\">Requiring implementation of Mul in generic function</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1, "user_id": 5639891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c52d11beae96f119b346e34bb6ae484?s=128&d=identicon&r=PG&f=1", "display_name": "MrEfrem", "link": "https://stackoverflow.com/users/5639891/mrefrem"}, "edited": false, "score": 0, "creation_date": 1502998520, "post_id": 45735139, "comment_id": 78444570, "body": "Oh, thank you very much -:). When I can more read about that constraints which you have used in <code>associated types</code> and function <code>difference</code>? I read official docs but that syntax there isn&#39;t appeared."}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "reply_to_user": {"reputation": 1, "user_id": 5639891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c52d11beae96f119b346e34bb6ae484?s=128&d=identicon&r=PG&f=1", "display_name": "MrEfrem", "link": "https://stackoverflow.com/users/5639891/mrefrem"}, "edited": false, "score": 0, "creation_date": 1503040233, "post_id": 45735139, "comment_id": 78458344, "body": "@MrEfrem: I figured it out based off the Rust docs, the compiler errors and a bit of trial and error :p See <a href=\"https://doc.rust-lang.org/std/ops/trait.Sub.html\" rel=\"nofollow noreferrer\"><code>Sub</code></a> and <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a>."}], "tags": [], "owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "is_accepted": false, "score": 2, "last_activity_date": 1502983411, "last_edit_date": 1502983411, "creation_date": 1502972906, "answer_id": 45735139, "question_id": 45731090, "link": "https://stackoverflow.com/questions/45731090/how-can-i-explain-to-the-compiler-that-a-generic-function-returns-data-which-can/45735139#45735139", "title": "How can I explain to the compiler that a generic function returns data which can be used in subtraction?", "body": "<p>This was a fun bit of type tetris to figure out :)</p>\n\n<p>Someone else may be able to weigh in on a better way to implement what you're trying to do, but I can at least explain why your code isn't compiling.</p>\n\n<p>There's four issues:</p>\n\n<ul>\n<li><p>Your implementation of <code>difference</code> is generic over all implementations of <code>Contains</code>, therefore it's not enough to just put a constraint on <code>Container</code>'s types - you need to put them on the trait itself as well.</p></li>\n<li><p>Because you're trying to subtract an object of type <code>Self::A</code> from an object of type <code>Self::B</code>, you need to specify that in the constraint - it defaults to being <code>Sub&lt;Self&gt;</code>.</p></li>\n<li><p>Rust won't implicitly convert the result of <code>difference</code> to an <code>i32</code> - you either need to be generic over the return value of <code>difference</code>, or add an explicit conversion (which will involve adding more type constraints). I did the former, as it seems more in keeping with what you're trying to achieve.</p></li>\n<li><p><code>first</code> and <code>last</code> try to move ownership of <code>self.0</code> and <code>self.1</code> out of the struct - you need to either have them return borrows (which will involve lifetime shenanigans), or restrict <code>Contains</code> to only allow <code>Copy</code> types.</p></li>\n</ul>\n\n<p>With those changes made, your code will look like this:</p>\n\n<pre><code>use std::ops::Sub;\n\nstruct Container&lt;A, B&gt;(A, B);\n\ntrait Contains {\n    type A: Copy + PartialEq;\n    type B: Copy + PartialEq + Sub&lt;Self::A&gt;;\n\n    fn contains(&amp;self, &amp;Self::A, &amp;Self::B) -&gt; bool;\n    fn first(&amp;self) -&gt; Self::A;\n    fn last(&amp;self) -&gt; Self::B;\n}\n\nimpl&lt;C, D&gt; Contains for Container&lt;C, D&gt;\nwhere\n    C: Copy + PartialEq,\n    D: Copy + PartialEq + Sub&lt;C&gt;,\n{\n    type A = C;\n    type B = D;\n\n    fn contains(&amp;self, number_1: &amp;Self::A, number_2: &amp;Self::B) -&gt; bool {\n        (&amp;self.0 == number_1) &amp;&amp; (&amp;self.1 == number_2)\n    }\n    fn first(&amp;self) -&gt; Self::A {\n        self.0\n    }\n    fn last(&amp;self) -&gt; Self::B {\n        self.1\n    }\n}\n\nfn difference&lt;C: Contains&gt;(\n    container: &amp;C,\n) -&gt; &lt;&lt;C as Contains&gt;::B as std::ops::Sub&lt;&lt;C as Contains&gt;::A&gt;&gt;::Output {\n    container.last() - container.first()\n}\n\nfn main() {\n    let number_1 = 3;\n    let number_2 = 10;\n\n    let container = Container(number_1, number_2);\n\n    println!(\n        \"Does container contain {} and {}: {}\",\n        &amp;number_1,\n        &amp;number_2,\n        container.contains(&amp;number_1, &amp;number_2)\n    );\n    println!(\"First number: {}\", container.first());\n    println!(\"Last number: {}\", container.last());\n\n    println!(\"The difference is: {}\", difference(&amp;container));\n}\n</code></pre>\n\n<p>Which compiles and runs fine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Does container contain 3 and 10: true\nFirst number: 3\nLast number: 10\nThe difference is: 7\n</code></pre>\n\n<p>I'd note that if <code>Contains</code> is <em>always</em> going to contain only numeric types, you'll probably be able to implement this far easier using the <a href=\"https://crates.io/crates/num\" rel=\"nofollow noreferrer\"><code>num</code> crate</a>, as shown in <a href=\"https://stackoverflow.com/questions/37296351/trait-for-numeric-functionality-in-rust\">Trait for numeric functionality in Rust</a>.</p>\n"}], "owner": {"reputation": 1, "user_id": 5639891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c52d11beae96f119b346e34bb6ae484?s=128&d=identicon&r=PG&f=1", "display_name": "MrEfrem", "link": "https://stackoverflow.com/users/5639891/mrefrem"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1502983411, "creation_date": 1502961370, "last_edit_date": 1502983063, "question_id": 45731090, "link": "https://stackoverflow.com/questions/45731090/how-can-i-explain-to-the-compiler-that-a-generic-function-returns-data-which-can", "title": "How can I explain to the compiler that a generic function returns data which can be used in subtraction?", "body": "<p>I get error if use a generic realization for a generic structure. How should I explain to the compiler that the <code>last</code> function returns data which can be used in subtraction operation?</p>\n\n<pre><code>use std::ops::Sub;\n\nstruct Container&lt;A, B&gt;(A, B);\n\ntrait Contains {\n    type A;\n    type B;\n\n    fn contains(&amp;self, &amp;Self::A, &amp;Self::B) -&gt; bool;\n    fn first(&amp;self) -&gt; Self::A;\n    fn last(&amp;self) -&gt; Self::B;\n}\n\nimpl&lt;C: PartialEq, D: PartialEq + Sub&gt; Contains for Container&lt;C, D&gt; {\n    type A = C;\n    type B = D;\n\n    fn contains(&amp;self, number_1: &amp;Self::A, number_2: &amp;Self::B) -&gt; bool {\n        (&amp;self.0 == number_1) &amp;&amp; (&amp;self.1 == number_2)\n    }\n    fn first(&amp;self) -&gt; Self::A {\n        self.0\n    }\n    fn last(&amp;self) -&gt; Self::B {\n        self.1\n    }\n}\n\nfn difference&lt;C: Contains&gt;(container: &amp;C) -&gt; i32 {\n    container.last() - container.first()\n}\n\nfn main() {\n    let number_1 = 3;\n    let number_2 = 10;\n\n    let container = Container(number_1, number_2);\n\n    println!(\"Does container contain {} and {}: {}\",\n             &amp;number_1,\n             &amp;number_2,\n             container.contains(&amp;number_1, &amp;number_2));\n    println!(\"First number: {}\", container.first());\n    println!(\"Last number: {}\", container.last());\n\n    println!(\"The difference is: {}\", difference(&amp;container));\n}\n</code></pre>\n\n<p>I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `-` cannot be applied to type `&lt;C as Contains&gt;::B`\n  --&gt; src/main.rs:30:5\n   |\n30 |     container.last() - container.first()\n   |     ^^^^^^^^^^^^^^^^\n   |\n   = note: an implementation of `std::ops::Sub` might be missing for `&lt;C as Contains&gt;::B`\n</code></pre>\n"}, {"tags": ["for-loop", "rust"], "answers": [{"comments": [{"owner": {"reputation": 376, "user_id": 7268884, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/pYfwn.png?s=128&g=1", "display_name": "twistezo", "link": "https://stackoverflow.com/users/7268884/twistezo"}, "edited": false, "score": 0, "creation_date": 1502958676, "post_id": 45730073, "comment_id": 78417826, "body": "Thanks @ljedrz I doesn&#39;t know that this simple function sort in this way. But what when I&#39;ll want to check value of next iteration in current iteration ?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 376, "user_id": 7268884, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/pYfwn.png?s=128&g=1", "display_name": "twistezo", "link": "https://stackoverflow.com/users/7268884/twistezo"}, "edited": false, "score": 1, "creation_date": 1502958902, "post_id": 45730073, "comment_id": 78417991, "body": "@twistezo <code>sort()</code> uses the <code>Ord</code> trait to sort the elements of a slice. <code>Ord</code> is also implemented for arrays and will compare lexicographical."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1502958365, "creation_date": 1502958365, "answer_id": 45730073, "question_id": 45729978, "link": "https://stackoverflow.com/questions/45729978/how-to-get-value-of-next-iteration-in-current-iteration-in-rust-for-loop/45730073#45730073", "title": "How to get value of next iteration in current iteration in Rust for loop?", "body": "<p>Well, the simplest solution would be to just do:</p>\n\n<pre><code>v.sort();\n</code></pre>\n\n<p>Which will only sort the outer vector. Otherwise, if you would like to implement it yourself, I would suggest looking at different <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm\" rel=\"nofollow noreferrer\">sorting algorithms</a>, as there are <strong>many</strong> possible ways of doing it.</p>\n"}, {"tags": [], "owner": {"reputation": 696, "user_id": 8159982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/vhr5o.jpg?s=128&g=1", "display_name": "lncr", "link": "https://stackoverflow.com/users/8159982/lncr"}, "is_accepted": true, "score": 3, "last_activity_date": 1502961383, "last_edit_date": 1502961383, "creation_date": 1502959736, "answer_id": 45730540, "question_id": 45729978, "link": "https://stackoverflow.com/questions/45729978/how-to-get-value-of-next-iteration-in-current-iteration-in-rust-for-loop/45730540#45730540", "title": "How to get value of next iteration in current iteration in Rust for loop?", "body": "<blockquote>\n<pre><code>temp_next_first = n+1[0]; // It's wrong, but something like this\ntemp_next_first = n.next()[0] // or this way ??\n</code></pre>\n</blockquote>\n\n<p>those 2 don't work because <code>n</code> is a simple <code>i32</code>, meaning that it does not know that it is part of <code>v</code>.</p>\n\n<hr>\n\n<p>In case you only need to look one iteration ahead <em>(at the next item)</em>, you could use a <a href=\"https://doc.rust-lang.org/std/iter/struct.Peekable.html\" rel=\"nofollow noreferrer\">peekable iterator</a>, but because you have to scan through the whole vec, this is not what you need here.</p>\n\n<hr>\n\n<p>As far as I understand your question you want to have a kind of chain where one the end of one piece is the same as the start of the next.</p>\n\n<pre><code>[4,3][3,7][7,5][5,9] // something like this.\n</code></pre>\n\n<p>I think that it is really complicated to actually do this in a rather quick way.\nOne way you could do this is the following.</p>\n\n<pre><code>fn order&lt;T: PartialEq&gt;(vec: &amp;mut Vec&lt;(T,T)&gt;) {\n    if vec.len() == 0 {\n        return;\n    }\n\n    let mut temp = vec![vec.remove(0)];\n\n    'outer: loop {\n        let mut next: Option&lt;usize&gt; = None;\n        'inner: for (i, item) in vec.iter().enumerate() {\n            if item.0 == temp.last().unwrap().1 {\n                next = Some(i);\n                break 'inner;\n            }\n        }\n\n        match next {\n            Some(pos) =&gt; temp.push(vec.remove(pos)),\n            None =&gt; break 'outer,\n        }\n    }\n    *vec = temp;\n}\n</code></pre>\n\n<p>Now you could call this function like this:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;(i32,i32)&gt; = vec![(4,5),(2,8),(5,7)];\n\n    order(&amp;mut v);\n\n    println!(\"{:?}\",v);\n}\n</code></pre>\n\n<p>This should print: <code>[(4, 5), (5, 7)]</code></p>\n\n<hr>\n\n<p>Let's look at the <code>order</code> function in <strong>a lot</strong> more detail:</p>\n\n<pre><code>if vec.is_empty() {\n    return;\n}\n</code></pre>\n\n<p>First we see if <code>vec</code> is empty, in this case we just exit the function.</p>\n\n<pre><code>let mut temp = vec![vec.remove(0)];\n</code></pre>\n\n<p>We create a new <code>Vec&lt;i32,i32&gt;</code> which contains the first element of the old vec, which we remove.</p>\n\n<pre><code>'outer: loop {\n    let mut next: Option&lt;usize&gt; = None;\n\n    /* snip */        \n\n    match next {\n        Some(pos) =&gt; temp.push(vec.remove(pos)),\n        None =&gt; break 'outer,\n    }\n}\n*vec = temp;\n</code></pre>\n\n<p>Now we create an <code>Option&lt;usize&gt;</code> called <code>next</code>, if this is zero at the end of the <code>'outer</code> loop, there was no fitting element inside of <code>vec</code> meaning that we end this function and set the <code>Vec</code> we got as input to <code>temp</code>.</p>\n\n<p>If <code>next</code> is <code>Some(value)</code>, it means that we found a fitting pair inside of <code>vec</code> which we then remove and <code>push</code> into <code>temp</code>. After this we just repeat start the loop from the beginning.</p>\n\n<pre><code>'inner: for (i, item) in vec.iter().enumerate() {\n    if item.0 == temp.last().unwrap().1 {\n        next = Some(i);\n        break 'inner;\n    }\n}\n</code></pre>\n\n<p>Here we <code>iterate</code> through <code>vec</code> and compare <code>item.0</code> to the last <code>element</code> or <code>temp</code>, in case these two are the same we have to somehow remove this <code>element</code> from <code>vec</code> and put it into <code>temp</code>. Sadly we can not mutate <code>vec</code> inside of <code>for</code>, because the <code>for</code>-loop has a reference to <code>vec</code>, meaning that we can't change <code>vec</code> inside of it. </p>\n\n<p>To circumvent this we simply call <code>enumerate()</code> on our <code>vec.iter()</code> this tells us the position of the <code>item</code> we want to remove. Now, when <code>if item.0 == temp.last().unwrap().1</code> is <code>true</code>, we set <code>next</code> to <code>Some(i)</code>(<code>i</code> is the position of <code>item</code>) and exit the <code>'inner</code> loop.</p>\n\n<p>This should explain the function in far more detail than it probably should, hope it helps somehow.</p>\n"}], "owner": {"reputation": 376, "user_id": 7268884, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/pYfwn.png?s=128&g=1", "display_name": "twistezo", "link": "https://stackoverflow.com/users/7268884/twistezo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3008, "favorite_count": 0, "accepted_answer_id": 45730540, "answer_count": 2, "score": 2, "last_activity_date": 1502982837, "creation_date": 1502958061, "last_edit_date": 1502982837, "question_id": 45729978, "link": "https://stackoverflow.com/questions/45729978/how-to-get-value-of-next-iteration-in-current-iteration-in-rust-for-loop", "title": "How to get value of next iteration in current iteration in Rust for loop?", "body": "<p>I have a vector:</p>\n\n<pre><code>let mut v: Vec&lt;Vec&lt;i32&gt;&gt; = Vec::new();\n// [[1, 2, 3], [7, 8, 9], [3, 4, 5], [12, 13, 14], [5, 6, 7]]`\n</code></pre>\n\n<p>I'm trying to sort it to:</p>\n\n<pre><code>// [[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [12, 13, 14]]\n</code></pre>\n\n<p>I have to reorganize this vector of vectors by the 'continuation' of each last element. The important thing is I can't change position of elements inside vectors. I can change positions of only whole vectors.</p>\n\n<p>How can I get the value of the next iteration in current iteration?</p>\n\n<pre><code>for n in v {\n    temp_current_first = n[0];  // OK\n    temp_current_last = n[n.len()-1];  // OK\n    temp_next_first = n+1[0]; // It's wrong, but something like this\n    temp_next_first = n.next()[0] // or this way ??\n}\n</code></pre>\n"}, {"tags": ["memory", "rust", "emscripten", "webassembly"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1502951768, "post_id": 45725975, "comment_id": 78413742, "body": "I&#39;m not familiar with the Javascript side of Wasm and neither very much with rust, but I&#39;m afraid there are not too many experts on both around here, either. Here are a few ideas that may get you on track: 1. Do you need to create the array in rust? It may be possible to pass a Javascript array as (mutable) reference to rust and modify it there. 2. You may find more information how to do this in C/C++, which may give you an idea how to do the same in rust."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1502983448, "post_id": 45730365, "comment_id": 78435946, "body": "&quot;and is too big to return to C&quot; \u2014 That isn&#39;t true and doesn&#39;t even really make sense. What is the size limit of &quot;returning to C&quot; and where is it documented?"}, {"owner": {"reputation": 41, "user_id": 5310822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8786821d375259490151a4465964345a?s=128&d=identicon&r=PG&f=1", "display_name": "Justin Haug", "link": "https://stackoverflow.com/users/5310822/justin-haug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1502988718, "post_id": 45730365, "comment_id": 78439327, "body": "@Shepmaster Wasm only supports returning certain integer data types, so returning ptr, length, capacity in a struct doesn&#39;t work."}, {"owner": {"reputation": 41, "user_id": 5310822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8786821d375259490151a4465964345a?s=128&d=identicon&r=PG&f=1", "display_name": "Justin Haug", "link": "https://stackoverflow.com/users/5310822/justin-haug"}, "edited": false, "score": 0, "creation_date": 1502992960, "post_id": 45730365, "comment_id": 78441644, "body": "Thanks for the response @sebk, I took what you said for my answer below, however I still need to make sure it is not leaking memory, although I am able to access it from JS."}, {"owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "edited": false, "score": 0, "creation_date": 1503027026, "post_id": 45730365, "comment_id": 78453315, "body": "The <code>Vec</code> type is a already allocated on the heap, so there is no need to use <code>Box</code>. The proper means is to:1) shrink the vector with <code>shrink_to_fit()</code>, 2) get the length of the vector, 3) create that pointer with <code>as_mut_ptr()</code>, and then 4) <code>forget()</code> the original <code>Vec</code>, and 5) pass a new structure that contains the pointer and it&#39;s length, which can be used to reconstruct it on the other end."}, {"owner": {"reputation": 11, "user_id": 8476821, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/30800c0f3b15a9d6b1c6d1ad4774d1da?s=128&d=identicon&r=PG&f=1", "display_name": "sebk", "link": "https://stackoverflow.com/users/8476821/sebk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503074344, "post_id": 45730365, "comment_id": 78480640, "body": "@Shepmaster C allows to return one register (size_t / usize). The usual solutions is to pass a pointer and then the return data is written to that pointer. This is possible with emscripten, but is trickier to set up (need to control the stack from JS)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1503074614, "post_id": 45730365, "comment_id": 78480763, "body": "@sebk it&#39;s definitely <b>not true</b> that C only allows you return a single register. <a href=\"https://gist.github.com/shepmaster/b50e423e58f7c6e71902983091cfe378\" rel=\"nofollow noreferrer\">a single example</a>."}], "tags": [], "owner": {"reputation": 11, "user_id": 8476821, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/30800c0f3b15a9d6b1c6d1ad4774d1da?s=128&d=identicon&r=PG&f=1", "display_name": "sebk", "link": "https://stackoverflow.com/users/8476821/sebk"}, "is_accepted": false, "score": 1, "last_activity_date": 1502983395, "last_edit_date": 1502983395, "creation_date": 1502959269, "answer_id": 45730365, "question_id": 45725975, "link": "https://stackoverflow.com/questions/45725975/getting-an-array-in-javascript-from-rust-compiled-to-emscripten/45730365#45730365", "title": "Getting an array in Javascript from Rust compiled to Emscripten", "body": "<p>The same rules as with writing Rust apply here. That means the function has to return an owned value; currently it returns a pointer to data that is dropped when the function returns.</p>\n\n<p>One would return <code>Vec&lt;u8&gt;</code> which consists of (ptr, length, capacity) and is too big to return to C.</p>\n\n<p>There are two similar solutions to this:</p>\n\n<ol>\n<li><p>return <code>Box&lt;Vec&lt;u8&gt;&gt;</code> and define another function that extracts the \npointer from it.</p></li>\n<li><p>define your own <code>Vec</code> that is accessible from C.</p></li>\n</ol>\n\n<p>I am using the latter <a href=\"https://gist.github.com/s3bk/53ed2b4d4e59b1abb1ee5746eeb4e87d\" rel=\"nofollow noreferrer\">here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 41, "user_id": 5310822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8786821d375259490151a4465964345a?s=128&d=identicon&r=PG&f=1", "display_name": "Justin Haug", "link": "https://stackoverflow.com/users/5310822/justin-haug"}, "is_accepted": true, "score": 0, "last_activity_date": 1502999328, "last_edit_date": 1502999328, "creation_date": 1502992886, "answer_id": 45742128, "question_id": 45725975, "link": "https://stackoverflow.com/questions/45725975/getting-an-array-in-javascript-from-rust-compiled-to-emscripten/45742128#45742128", "title": "Getting an array in Javascript from Rust compiled to Emscripten", "body": "<p>Alright, so after taking the ideas from @sebk (Thanks a ton for the pointers). <a href=\"https://gist.github.com/thomas-jeepe/ff938fe2eff616f7bbe4bd3dca91a550\" rel=\"nofollow noreferrer\">This is what I came up with.</a></p>\n\n<p>It actually works well, so I'll describe it quickly. We need a representation that we can access an array from javacript, so mainly we need a pointer and the length of the array (represented in the <code>JsVec</code>). In wasm you can only pass integers/floats, so we need to return a raw pointer, the <code>Box</code> has <code>into_raw</code> so we can return a raw pointer to our <code>JsVec</code> and get the information. In order to prevent Rust from dropping our vector, we need to forget about the vector, using <code>mem::forget</code>.</p>\n\n<p>In the javascript world it is as simple as accessing the data on the heap via the pointer and the <code>Module.HEAPU32</code> value. </p>\n\n<p>The next issue is the dropping of the vector, so we use the raw pointer and create a <code>Box</code> from it which gets automatically dropped, from my understanding it drops the <code>JsVec</code> object, but not the vec or the content. This is the main area where it could go wrong, so is this going to memory leak? Or will dropping the <code>JsVec</code> be sufficient. </p>\n\n<p>Thanks again for helping me out.</p>\n\n<p>Edit:</p>\n\n<p>Yay! I seem to have gotten it working (gist is updated). I took <a href=\"https://www.reddit.com/r/rust/comments/6ubscl/will_this_leak_memory/dlrjyl3/\" rel=\"nofollow noreferrer\">this reddit comment's advice</a> and constructed a vector from <code>JsBytes</code> (renamed) struct so as to make sure the vector itself is dropped!</p>\n\n<p>This works and the gist works in my browser.</p>\n"}], "owner": {"reputation": 41, "user_id": 5310822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8786821d375259490151a4465964345a?s=128&d=identicon&r=PG&f=1", "display_name": "Justin Haug", "link": "https://stackoverflow.com/users/5310822/justin-haug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1595, "favorite_count": 5, "accepted_answer_id": 45742128, "answer_count": 2, "score": 4, "last_activity_date": 1502999328, "creation_date": 1502939169, "last_edit_date": 1502983319, "question_id": 45725975, "link": "https://stackoverflow.com/questions/45725975/getting-an-array-in-javascript-from-rust-compiled-to-emscripten", "title": "Getting an array in Javascript from Rust compiled to Emscripten", "body": "<p>I want to generate a vector of bytes (<code>Vec&lt;u8&gt;</code> in Rust) and access it with JS as an <code>Array</code> or <code>Uint8Array</code> and send it to a WebSocket or to IndexedDB.</p>\n\n<p>I found <a href=\"https://stackoverflow.com/questions/44047230/how-can-i-pass-an-array-from-javascript-to-rust-that-has-been-compiled-with-emsc\">How can I pass an array from JavaScript to Rust that has been compiled with Emscripten?</a>, which is the exact opposite of what I would like to do, but very relevant. Other than that, I am aware of the array type in Emscripten, but I am not aware how to correctly use it.</p>\n\n<p>My best guess on how to get this working was to try returning the vector <code>as_mut_ptr</code>, and use the pointer on the <code>Module.HEAPU8</code>.</p>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>#[no_mangle]\npub fn bytes() -&gt; *mut u8 {\n    vec![1, 2, 3].as_mut_ptr()\n}\n\nfn main() {}\n</code></pre>\n\n<p>Part of <strong>index.html</strong></p>\n\n<pre><code>var Module = {\n    wasmBinaryFile: \"site.wasm\",\n    onRuntimeInitialized: main,\n};\nfunction main() {\n    let ptr = Module._bytes();\n    console.log(ptr);\n    console.log(Module.HEAPU8.slice(ptr, ptr + 10));\n    console.log(Module.HEAPU8.subarray(ptr, ptr + 100));\n    let arr = Module.cwrap('bytes', 'array', []);\n    console.log(arr());\n}\n</code></pre>\n\n<p>The results of the console ended up looking like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>5260296  site:11:13\nUint8Array [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]  site:12:13\nUint8Array [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90 more\u2026 ]  site:13:13\n5260296  site:15:13\n</code></pre>\n\n<p>The first issue is that both values represent empty arrays, and second the two separate calls are pointing to the same memory location. I have absolutely no idea how to access pointed to data on the heap, along with the length of the vector.</p>\n\n<p>The two pointers pointing to the same memory location could be because Rust drops the <code>Vec&lt;u8&gt;</code> write when it's lifetime ends, (end of the <code>bytes</code>) function.</p>\n\n<p>Sorry if I missed some basics of Wasm and Emscripten, I only built my first Wasm hello world today.</p>\n"}]