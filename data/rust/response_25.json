[{"tags": ["reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1435796969, "post_id": 31173664, "comment_id": 50355202, "body": "Thank you so much for this! Does this mean that in my data structure, I would need to wrap all the values I&#39;d like to change behind a Mutex or RwLock?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1435797815, "post_id": 31173664, "comment_id": 50355351, "body": "Yes. Additionally, if you go with <code>Arc</code>s, you&#39;ll have to wrap them in <code>Arc</code> as well."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1435817593, "post_id": 31173664, "comment_id": 50360281, "body": "@BenS: <code>Mutex</code> and <code>RwLock</code> if you use multi-threading, otherwise <code>Cell</code> and <code>RefCell</code> would be sufficient."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1435795914, "creation_date": 1435795914, "answer_id": 31173664, "question_id": 31173352, "link": "https://stackoverflow.com/questions/31173352/how-do-i-upgrade-a-reference-to-a-mutable-reference/31173664#31173664", "title": "How do I upgrade a reference to a mutable reference?", "body": "<p>First, here's the code:</p>\n\n<pre><code>use std::sync::{Arc, RwLock};\nuse std::thread;\nuse std::sync::atomic::{AtomicBool, Ordering};\n\nstruct Theatre { rows: Vec&lt;Row&gt; }\nstruct Row { seats: Vec&lt;Seat&gt; }\n\nstruct Seat {\n    number: i32,\n    booked: AtomicBool,\n}\n\nimpl Seat {\n    fn new(number: i32) -&gt; Seat {\n        Seat { number: number, booked: AtomicBool::new(false) }\n    }\n\n    fn book(&amp;self) {\n        self.booked.store(true, Ordering::Release);\n        println!(\"Booked seat: {:?}\", self.number);\n    }\n}\n\nimpl Theatre {\n    fn get_booking&lt;'t&gt;(&amp;'t self, number: i32) -&gt; Option&lt;Booking&lt;'t&gt;&gt; {\n        for row in self.rows.iter() {\n            for seat in row.seats.iter() {\n                if seat.number == number &amp;&amp; seat.booked.load(Ordering::Acquire) == false {\n                    return Some(Booking { seats: vec![ seat ] })\n                }\n            }\n        }\n\n        None\n    }\n}\n\nstruct Booking&lt;'t&gt; {\n    seats: Vec&lt;&amp;'t Seat&gt;\n}\n\nimpl&lt;'t&gt; Booking&lt;'t&gt; {\n    fn describe(&amp;self) {\n        let seats: Vec&lt;_&gt; = self.seats.iter().map(|s| s.number).collect();\n        println!(\"You want to book seats: {:?}\", seats);\n    }\n\n    fn run(&amp;self) {\n        for seat in self.seats.iter() {\n            seat.book();\n        }\n    }\n}\n\nfn main() {\n    // Build a theatre (with only one seat... small theatre)\n    let theatre = Theatre { rows: vec![ Row { seats: vec![ Seat::new(7) ] } ] };\n    let wrapper = Arc::new(RwLock::new(theatre));\n\n    // Try to book a seat in another thread\n    let thread = thread::spawn(move || {\n        let desired_seat_number = 7;\n\n        let t = wrapper.read().unwrap();\n        let booking = t.get_booking(desired_seat_number).expect(\"No such seat!\");\n\n        booking.describe();\n\n        booking.run();\n    });\n\n    thread.join().unwrap();\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/NPtbr5\" rel=\"nofollow\">View on playpen</a></p>\n\n<p>There are two important changes:</p>\n\n<ol>\n<li>The <code>booked</code> field was changed from <code>bool</code> to <code>AtomicBool</code>. The <a href=\"http://doc.rust-lang.org/stable/std/sync/atomic/index.html\" rel=\"nofollow\">atomic types</a> provide a <code>store</code> method that is available on immutable references. Therefore, we can make <code>Seat::book()</code> take <code>self</code> by immutable reference. If you have a more complex type that is not covered by the atomic types, you should instead use a <a href=\"http://doc.rust-lang.org/stable/std/sync/struct.Mutex.html\" rel=\"nofollow\"><code>Mutex</code></a> or a <a href=\"http://doc.rust-lang.org/stable/std/sync/struct.RwLock.html\" rel=\"nofollow\"><code>RwLock</code></a>.</li>\n<li>I removed the <code>&amp;mut Theatre</code> parameter on <code>Booking::run()</code>. If this is not acceptable, please leave a comment to explain why you need that reference.</li>\n</ol>\n\n<p>As you found, you cannot have both a read lock and a write lock active at the same time on a <code>RwLock</code>. However, a <code>Booking</code> cannot live longer than the read lock on the <code>Theatre</code>, because it contains references inside the <code>Theatre</code>. Once you release the read lock, you cannot guarantee that the references you obtained will remain valid when you acquired another lock later on. If that's a problem, consider using <code>Arc</code> instead of simple borrowed pointers (<code>&amp;</code>).</p>\n"}], "owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 558, "favorite_count": 0, "accepted_answer_id": 31173664, "answer_count": 1, "score": 4, "last_activity_date": 1499646475, "creation_date": 1435793681, "question_id": 31173352, "link": "https://stackoverflow.com/questions/31173352/how-do-i-upgrade-a-reference-to-a-mutable-reference", "title": "How do I upgrade a reference to a mutable reference?", "body": "<p>I have a program that revolves around one shared data structure, proposing changes to the data, and then applying these changes at a later stage. These proposed changes hold references to the core object.</p>\n\n<p>In C++ or another language, I would simply make the reference non-const, then mutate it when I need to. But Rust doesn't play well with this approach. (I asked about this in IRC earlier today, but sadly I'm still stuck.)</p>\n\n<p>To help, I made a distilled example for booking tickets in a theatre, where theatre is the data structure, the Bookings are proposed changes, and the <code>run</code> method would be applying them if I could figure out how to get it to work!</p>\n\n<p>Firstly, defining some data structures. A theatre has many rows, which have many seats each:</p>\n\n<pre><code>use std::sync::{Arc, RwLock};\nuse std::thread;\n\nstruct Theatre { rows: Vec&lt;Row&gt; }\nstruct Row { seats: Vec&lt;Seat&gt; }\n\nstruct Seat {\n    number: i32,\n    booked: bool,\n}\n\nimpl Seat {\n    fn new(number: i32) -&gt; Seat {\n        Seat { number: number, booked: false }\n    }\n\n    fn book(&amp;mut self) {\n        self.booked = true;\n    }\n}\n</code></pre>\n\n<p>Here, the <code>get_booking</code> method searches for a seat, returning a <code>Booking</code> with a reference to the seat it finds.</p>\n\n<pre><code>impl Theatre {\n    fn get_booking&lt;'t&gt;(&amp;'t self, number: i32) -&gt; Option&lt;Booking&lt;'t&gt;&gt; {\n        for row in self.rows.iter() {\n            for seat in row.seats.iter() {\n                if seat.number == number &amp;&amp; seat.booked == false {\n                    return Some(Booking { seats: vec![ seat ] })\n                }\n            }\n        }\n\n        None\n    }\n}\n</code></pre>\n\n<p>But this is where I get stuck. The <code>run</code> method has mutable access to the overall theatre (from its parameter), and it knows which seat to mutate (<code>self</code>). But since <code>self</code> isn't mutable, even though the theatre that contains it is, it can't be mutated.</p>\n\n<pre><code>struct Booking&lt;'t&gt; {\n    seats: Vec&lt;&amp;'t Seat&gt;\n}\n\nimpl&lt;'t&gt; Booking&lt;'t&gt; {\n    fn describe(&amp;self) {\n        let seats: Vec&lt;_&gt; = self.seats.iter().map(|s| s.number).collect();\n        println!(\"You want to book seats: {:?}\", seats);\n    }\n\n    fn run(&amp;self, _theatre: &amp;mut Theatre) {\n        let mut seat = ??????;\n        seat.book();\n    }\n}\n</code></pre>\n\n<p>Finally, a main method that would use it if it worked.</p>\n\n<pre><code>fn main() {\n    // Build a theatre (with only one seat... small theatre)\n    let theatre = Theatre { rows: vec![ Row { seats: vec![ Seat::new(7) ] } ] };\n    let wrapper = Arc::new(RwLock::new(theatre));\n\n    // Try to book a seat in another thread\n    let thread = thread::spawn(move || {\n        let desired_seat_number = 7;\n\n        let t = wrapper.read().unwrap();\n        let booking = t.get_booking(desired_seat_number).expect(\"No such seat!\");\n\n        booking.describe();\n\n        let mut tt = wrapper.write().unwrap();\n        booking.run(&amp;mut tt);  // this is never actually reached because we still have the read lock\n    });\n\n    thread.join().unwrap();\n}\n</code></pre>\n\n<p>What's annoying is that I know exactly why my current code doesn't work - I just can't figure out how Rust wants my program formatted instead. There are some things I <em>don't</em> want to do:</p>\n\n<ul>\n<li>The simplest solution is to have <code>Booking</code> hold an index to its seat, instead of a reference: in this case, with <code>row</code> and <code>seat</code> <code>usize</code> fields. However, although my theatre uses O(1) vectors, I'd also like to reference a value in the middle of a large tree, where having to iterate to find the value would be much more expensive. This would also mean that you couldn't, say, get the seat number (in the <code>describe</code> function) without having to pass in the entire Theatre.</li>\n<li>It would also be solved by having a <code>Booking</code> hold a mutable reference to the seat, which I could just then mutate as normal. However, this would mean I could only have one proposed change at a time: I couldn't, for example, have a list of bookings and apply them all at once, or have two bookings and only apply one.</li>\n</ul>\n\n<p>I feel like I'm very close to having something that Rust will accept, but don't quite know how to structure my program to accommodate it. So, any pointers? (pun intended)</p>\n"}, {"tags": ["rust", "nullable", "optional"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435825437, "post_id": 31172451, "comment_id": 50364573, "body": "do all the functions return the same option type? or do they change the type?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1435826024, "post_id": 31172451, "comment_id": 50364937, "body": "in case they are: here&#39;s a macro-free solution: <a href=\"http://is.gd/eItCTh\" rel=\"nofollow noreferrer\">is.gd/eItCTh</a> any other solutions require value generics or variadic generics or some trait like <a href=\"https://doc.rust-lang.org/nightly/core/array/trait.FixedSizeArray.html\" rel=\"nofollow noreferrer\">FixedSizeArray</a> just for tuples"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 10, "last_activity_date": 1547081816, "last_edit_date": 1547081816, "creation_date": 1435789442, "answer_id": 31172699, "question_id": 31172451, "link": "https://stackoverflow.com/questions/31172451/is-there-a-non-messy-way-to-chain-the-results-of-functions-that-return-option-va/31172699#31172699", "title": "Is there a non-messy way to chain the results of functions that return Option values?", "body": "<h1><a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1220-2017-11-22\" rel=\"noreferrer\">Rust 1.22</a></h1>\n\n<p>The <a href=\"https://stackoverflow.com/q/42917566/155423\">question mark operator</a> now supports <code>Option</code>, so you can write your function as</p>\n\n<pre><code>fn do_something(a: i32) -&gt; Option&lt;i32&gt; {\n    let b = f(a)?;\n    let c = g(b)?;\n    let d = h(c)?;\n    do_something_with(a, b, c, d) // wrap in Some(...) if this doesn't return an Option\n}\n</code></pre>\n\n<h1>Rust 1.0</h1>\n\n<p>The Rust standard library defines a <code>try!</code> macro (and, equivalently, the <code>?</code> operator, as of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1130-2016-11-10\" rel=\"noreferrer\">Rust 1.13</a>) that solves this problem for <code>Result</code>. The macro looks like this:</p>\n\n<pre><code>macro_rules! try {\n    ($expr:expr) =&gt; (match $expr {\n        $crate::result::Result::Ok(val) =&gt; val,\n        $crate::result::Result::Err(err) =&gt; {\n            return $crate::result::Result::Err($crate::convert::From::from(err))\n        }\n    })\n}\n</code></pre>\n\n<p>If the argument is <code>Err</code>, it returns from the function with that <code>Err</code> value. Otherwise, it evaluates to the value wrapped in <code>Ok</code>. The macro can only be used in a function that returns <code>Result</code>, because it returns the error it meets.</p>\n\n<p>We can make a similar macro for <code>Option</code>:</p>\n\n<pre><code>macro_rules! try_opt {\n    ($expr:expr) =&gt; (match $expr {\n        ::std::option::Option::Some(val) =&gt; val,\n        ::std::option::Option::None =&gt; return None\n    })\n}\n</code></pre>\n\n<p>You can then use this macro like this:</p>\n\n<pre><code>fn do_something(a: i32) -&gt; Option&lt;i32&gt; {\n    let b = try_opt!(f(a));\n    let c = try_opt!(g(b));\n    let d = try_opt!(h(c));\n    do_something_with(a, b, c, d) // wrap in Some(...) if this doesn't return an Option\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 6, "last_activity_date": 1435789520, "creation_date": 1435789520, "answer_id": 31172712, "question_id": 31172451, "link": "https://stackoverflow.com/questions/31172451/is-there-a-non-messy-way-to-chain-the-results-of-functions-that-return-option-va/31172712#31172712", "title": "Is there a non-messy way to chain the results of functions that return Option values?", "body": "<p>Inspired from the concept of <code>try!</code> for Result, let's wrap our own macro to early-return from the scope if the monad drops to None.</p>\n\n<pre><code>macro_rules! get(\n    ($e:expr) =&gt; (match $e { Some(e) =&gt; e, None =&gt; return None })\n);\n</code></pre>\n\n<p>(Stolen from <a href=\"https://www.reddit.com/r/rust/comments/23amxp/is_there_an_equivalent_to_the_try_macro_for_option/\" rel=\"noreferrer\">this reddit thread</a>)</p>\n\n<p>Now you can run your code linearly:</p>\n\n<pre><code>fn blah() -&gt; Option&lt;...&gt; { // ... is the return type of do_something_with()\n    let a = 123;\n    let b = get!(f(a));\n    let c = get!(g(b));\n    let d = get!(h(c));\n    do_something_with(a, b, c, d)\n}\n</code></pre>\n\n<p>(<a href=\"https://gist.github.com/anonymous/a3c8b998f1e96872994b\" rel=\"noreferrer\">runnable gist</a>)</p>\n"}], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3101, "favorite_count": 1, "accepted_answer_id": 31172699, "answer_count": 2, "score": 11, "last_activity_date": 1547081816, "creation_date": 1435788070, "question_id": 31172451, "link": "https://stackoverflow.com/questions/31172451/is-there-a-non-messy-way-to-chain-the-results-of-functions-that-return-option-va", "title": "Is there a non-messy way to chain the results of functions that return Option values?", "body": "<p>I have some code that looks like this:</p>\n\n<pre><code>f(a).and_then(|b| {\n    g(b).and_then(|c| {\n        h(c).map(|d| {\n            do_something_with(a, b, c, d)\n        })\n    })\n})\n</code></pre>\n\n<p>Where <code>f</code>, <code>g</code>, and <code>h</code> return <code>Option</code> values. I need to use all the intermediate values (<code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>) in the <code>do_something_with</code> calculation. The indentation is very deep. Is there a better way to do this? Ideally it would look something like this (which of course doesn't work):</p>\n\n<pre><code>try {\n    let b = f(a);\n    let c = g(b);\n    let d = h(c);\n    do_something_with(a, b, c, d)\n} rescue NonexistentValueException {\n    None\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435774950, "post_id": 31168589, "comment_id": 50345474, "body": "Precisely making/marking the moved-from variable as &#39;uninitialized&#39;, as it were.  As in, if I force a move from a <code>Copy</code> type, I make the source variable &#39;empty&#39; and unusable with the value that the target got from it. Hope I&#39;m getting this across correctly ^^&#39;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1435775049, "post_id": 31168589, "comment_id": 50345544, "body": "There&#39;s no benefit to leaving something as uninitialized, other than trying to open up holes in your program. I think you need to tell us <i>why</i> you want to do the things you want to do, as it doesn&#39;t make any sense. :-)"}, {"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435775274, "post_id": 31168589, "comment_id": 50345706, "body": "But uninit&#39;ed vars are already guarded against in Rust. I just want to sometimes say &quot;yeah, this type is <code>Copy</code>, but I really don&#39;t need this value in this variable anymore. This function takes an arg by val, just take it.&quot;, then, after calling the function or whatever, attempting to reuse the identifier without giving it another value errors at compile-time. That&#39;s it."}, {"owner": {"reputation": 7395, "user_id": 12386, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/d6bf42c0a4a007ad5fd75a01918d1945?s=128&d=identicon&r=PG", "display_name": "stu", "link": "https://stackoverflow.com/users/12386/stu"}, "edited": false, "score": 0, "creation_date": 1577805122, "post_id": 31168589, "comment_id": 105260370, "body": "yeah I&#39;m kinda with @Narfanar here. If there was no copy/clone implemented, rust would move by default. It should be possible to force that exact semantic even if there is an implementation of copy/clone. Seems very non-visible to not know what the compiler&#39;s going to do by looking at a line of code, because you have to magically know if the clone is implemented as to whether it will leave the original usable or not."}], "answers": [{"comments": [{"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435775874, "post_id": 31169083, "comment_id": 50346054, "body": "No, no. Sometimes I just want it to scream at me &quot;put a <i>new</i> value in here!&quot;. Certainly not trying to optimize; esp. given that I still don&#39;t get the technical difference between <code>Copy</code> and <code>!Copy</code> under-the-hood (i.e. &quot;everything is a memcpy anyway; just sometimes shallow and sometimes deep, but there&#39;s little intuition about it.&quot;)."}, {"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 3, "creation_date": 1435776289, "post_id": 31169083, "comment_id": 50346300, "body": "Right. An answer&#39;s an answer even if it&#39;s not to the asker&#39;s heart :/"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 1, "creation_date": 1435776408, "post_id": 31169083, "comment_id": 50346373, "body": "@Noein true, but chances are that you have a real question that prompted this question. I&#39;d like to avoid the <a href=\"http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a>."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 1, "creation_date": 1435780253, "post_id": 31169083, "comment_id": 50348553, "body": "Maybe the original question was just a reaction to &quot;Copy&quot; seeming like it would be a slow thing. If I copy a file it takes awhile, but if I move a file it&#39;s fast. So by trying to prevent copying I might be trying to go for a speed increase (though the answers and comments make it clear there is none to be had)"}, {"owner": {"reputation": 7395, "user_id": 12386, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/d6bf42c0a4a007ad5fd75a01918d1945?s=128&d=identicon&r=PG", "display_name": "stu", "link": "https://stackoverflow.com/users/12386/stu"}, "edited": false, "score": 0, "creation_date": 1577805364, "post_id": 31169083, "comment_id": 105260451, "body": "so perhaps you can explain how one is supposed to divine what&#39;s going on? I&#39;m a rust newbie and I thought the point was to be as clear and as exact as possible, to avoid pitfalls at runtime. From what you&#39;re saying, I can look at a line of code that does an assignment and have no idea if it&#39;s doing a copy and leaving the original intact or doing a move and making the original unusable. By having some syntactic marker, the author would be able to make it clear in the code that it was specifically being moved."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7395, "user_id": 12386, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/d6bf42c0a4a007ad5fd75a01918d1945?s=128&d=identicon&r=PG", "display_name": "stu", "link": "https://stackoverflow.com/users/12386/stu"}, "edited": false, "score": 0, "creation_date": 1577893198, "post_id": 31169083, "comment_id": 105276043, "body": "@stu One of the reasons that the <code>Copy</code> trait exists is because leaving something unusable doesn&#39;t make sense for certain types, such as plain integers or booleans. While it&#39;s true that you might not be able to look at a line and tell, the compiler will quickly provide an error stating that you are trying to use a moved non-<code>Copy</code> value, so you don&#39;t have to do any thinking yourself."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1435776295, "last_edit_date": 1435776295, "creation_date": 1435775696, "answer_id": 31169083, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/31169083#31169083", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p><strong>New Answer</strong></p>\n\n<blockquote>\n  <p>Sometimes I just want it to scream at me \"put a new value in here!\".</p>\n</blockquote>\n\n<p>Then the answer is \"no\". When moving a type that implements <code>Copy</code>, both the source and destination will always be valid. When moving a type that does not implement <code>Copy</code>, the source will never be valid and the destination will always be valid. There is no syntax or trait that means \"let me pick if this type that implements <code>Copy</code> acts as <code>Copy</code> at this time\".</p>\n\n<p><strong>Original Answer</strong></p>\n\n<blockquote>\n  <p>I just want to sometimes say \"yeah, this type is Copy, but I really don't need this value in this variable anymore. This function takes an arg by val, just take it.\"</p>\n</blockquote>\n\n<p>It sounds like you are trying to do the job of the optimizer by hand. Don't worry about that, the optimizer will do that for you. This has the benefit of not needing to worry about it.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 9, "last_activity_date": 1435778704, "creation_date": 1435778704, "answer_id": 31169964, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/31169964#31169964", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>Wrap the copyable type in another type that doesn't implement <code>Copy</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Noncopyable&lt;T&gt;(T);\n\nfn main() {\n    let v0 = Noncopyable(1);\n    let v1 = v0;\n    println!(\"{}\", v0.0); // error: use of moved value: `v0.0`\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435785031, "post_id": 31171431, "comment_id": 50351221, "body": "Huh, great answer! I think I get it now. Though <code>clone</code>, after a bit of playing around, now seems like the magical bit in all of this. I tried to impl it for a local type the same way it&#39;s impl&#39;d <a href=\"http://doc.rust-lang.org/src/core/clone.rs.html#63-67\" rel=\"nofollow noreferrer\">here</a> but it errors because I&#39;m trying to pass by value a non-copy type that I&#39;m only borrowing. So, where <i>could</i> the cloning be happening for any complex type?! (note: not a bug in my setup; <code>#[derive(...)]</code> works.)"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435785298, "post_id": 31171431, "comment_id": 50351371, "body": "That <code>Clone</code> implementation just redirects to <code>Copy</code>. If your type is not copyable, you&#39;re going to have to be a bit cleverer about it. <code>#[derive(clone)]</code> will <code>Clone</code> each struct member, for example."}, {"owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435785422, "post_id": 31171431, "comment_id": 50351429, "body": "But... Huh... <a href=\"http://is.gd/r0OCcl\" rel=\"nofollow noreferrer\">is.gd/r0OCcl</a> ?! It looks like <code>Copy</code> depends on <code>Clone</code>, if I&#39;m reading this correctly."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "edited": false, "score": 0, "creation_date": 1435785667, "post_id": 31171431, "comment_id": 50351553, "body": "@Noein <code>Copy</code> requires <code>Clone</code> because there&#39;s no reason to implement just <code>Copy</code>. If someone wants to accept <code>T: Clone</code>, it&#39;d be silly if they couldn&#39;t accept <code>Copy</code> types too. The compiler error is just to stop people forgetting."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 30, "last_activity_date": 1435817298, "last_edit_date": 1435817298, "creation_date": 1435783854, "answer_id": 31171431, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/31171431#31171431", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>I don't really understand your question, but you certainly seem confused. So I'll address what seems to be the root of this confusion:</p>\n\n<blockquote>\n  <p>The C++ notions of copy/move I think I get correctly, but this 'everything is a memcpy anyway' is, well, it hasn't been very intuitive any time I read it</p>\n</blockquote>\n\n<p>When thinking about Rust's move semantics, <strong>ignore C++</strong>. The C++ story is way more complicated than Rust's, which is remarkably simple. However, explaining Rust's semantics in terms of C++ is a mess.</p>\n\n<blockquote>\n  <p><strong>TL;DR:</strong> Copies <em>are</em> moves. Moves <em>are</em> copies. Only the type checker knows the difference. So when you want to \"force a move\" for a <code>Copy</code> type, you are asking for something you already have.</p>\n</blockquote>\n\n<p>So we have three semantics:</p>\n\n<ul>\n<li><code>let a = b</code> where <code>b</code> <strong>is not</strong> <code>Copy</code></li>\n<li><code>let a = b</code> where <code>b</code> <strong>is</strong> <code>Copy</code></li>\n<li><code>let a = b.clone()</code> where <code>b</code> is <code>Clone</code></li>\n</ul>\n\n<blockquote>\n  <p><strong>Note:</strong> There is no meaningful difference between assignment and initialization (like in C++) - assignment just first <code>drop</code>s the old value.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Note:</strong> Function call arguments work just like assignment. <code>f(b)</code> assigns <code>b</code> to the argument of <code>f</code>.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>First things first.</strong></p>\n\n<p>The <code>a = b</code> <em>always</em> performs a <code>memcpy</code>.</p>\n\n<p>This is true in <strong>all three cases</strong>.</p>\n\n<ul>\n<li>When you do <code>let a = b</code>, <code>b</code> is <code>memcpy</code>'d into <code>a</code>.</li>\n<li>When you do <code>let a = b.clone()</code>, the result of <code>b.clone()</code> is <code>memcpy</code>'d into <code>a</code>.</li>\n</ul>\n\n<hr>\n\n<p><strong>Moves</strong></p>\n\n<p>Imagine <code>b</code> was a <code>Vec</code>. A <code>Vec</code> looks like this:</p>\n\n<pre><code>{ &amp;mut data, length, capacity }\n</code></pre>\n\n<p>When you write <code>let a = b</code> you thus end up with:</p>\n\n<pre><code>b = { &amp;mut data, length, capacity }\na = { &amp;mut data, length, capacity }\n</code></pre>\n\n<p>This means that <code>a</code> and <code>b</code> both reference <code>&amp;mut data</code>, which means we have <em>aliased mutable data</em>.</p>\n\n<p>The type-system doesn't like this so says we can't use <code>b</code> again. Any access to <code>b</code> will fail at compile-time.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> <code>a</code> and <code>b</code> don't have to alias heap data to make using both a bad idea. For example, they could both be file handles - a copy would result in the file being closed twice.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Note:</strong> Moves do have extra semantics when destructors are involved, but the compiler won't let you write <code>Copy</code> on types with destructors anyway.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Copies</strong></p>\n\n<p>Imagine <code>b</code> was an <code>Option&lt;i32&gt;</code>. An <code>Option&lt;i32&gt;</code> looks like this:</p>\n\n<pre><code>{ is_valid, data }\n</code></pre>\n\n<p>When you write <code>let a = b</code> you thus end up with:</p>\n\n<pre><code>b = { is_valid, data }\na = { is_valid, data }\n</code></pre>\n\n<p>These are both usable simultaneously. To tell the type system that this is the case, one marks <code>Option&lt;i32&gt;</code> as <code>Copy</code>.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> Marking something copy doesn't change what the code does. It only allows more code. If you remove a <code>Copy</code> implementation, your code will either error or do <em>exactly</em> the same thing. In the same vein, marking a non-<code>Copy</code> type as <code>Copy</code> will not change any compiled code.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Clones</strong></p>\n\n<p>Imagine you want to copy a <code>Vec</code>, then. You implement <code>Clone</code>, which produces a <strong>new</strong> <code>Vec</code>, and do</p>\n\n<pre><code>let a = b.clone()\n</code></pre>\n\n<p>This performs two steps. We start with:</p>\n\n<pre><code>b = { &amp;mut data, length, capacity }\n</code></pre>\n\n<p>Running <code>b.clone()</code> gives us an additional rvalue temporary</p>\n\n<pre><code>b = { &amp;mut data, length, capacity }\n    { &amp;mut copy, length, capacity } // temporary\n</code></pre>\n\n<p>Running <code>let a = b.clone()</code> <code>memcpy</code>s this into <code>a</code>:</p>\n\n<pre><code>b = { &amp;mut data, length, capacity }\n    { &amp;mut copy, length, capacity } // temporary\na = { &amp;mut copy, length, capacity }\n</code></pre>\n\n<p>Further access of the temporary is thus prevented by the type system, since <code>Vec</code> is not <code>Copy</code>.</p>\n\n<hr>\n\n<p><strong>But what about efficiency?</strong></p>\n\n<p>One thing I skipped over so far is that moves and copies can be elided. Rust <em>guarantees</em> certain trivial moves and copies to be elided.</p>\n\n<p>Because the compiler (after lifetime checking) sees the same result in both cases, these are elided in exactly the same way.</p>\n"}, {"comments": [{"owner": {"reputation": 22686, "user_id": 3758484, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/pJmdo.jpg?s=128&g=1", "display_name": "johnbakers", "link": "https://stackoverflow.com/users/3758484/johnbakers"}, "edited": false, "score": 0, "creation_date": 1525661704, "post_id": 47323567, "comment_id": 87430106, "body": "It would seem to a Rust novice such as myself that when you say &quot;object&#39;s don&#39;t have a consistent address&quot; because of the runtime, this would be a lot less efficient by having extra allocations and copying happening to ensure only one binding owns the memory."}], "tags": [], "owner": {"reputation": 608, "user_id": 8225884, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZzuYo.png?s=128&g=1", "display_name": "\u70b8\u9c7c\u85af\u6761\u5fb7\u91cc\u514b", "link": "https://stackoverflow.com/users/8225884/%e7%82%b8%e9%b1%bc%e8%96%af%e6%9d%a1%e5%be%b7%e9%87%8c%e5%85%8b"}, "is_accepted": false, "score": 0, "last_activity_date": 1518200762, "last_edit_date": 1518200762, "creation_date": 1510816031, "answer_id": 47323567, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/47323567#47323567", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>At runtime, <em>copies</em> and <em>moves</em>, in Rust, have the same effect. However, at compile-time, in the case of a <em>move</em>, the variable which an object is <em>moved from</em> is marked as unusable, but not in the case of a <em>copy</em>.</p>\n\n<p>When you're using <code>Copy</code> types, you always want <em>value semantics</em>, and <em>object semantics</em> when not using <code>Copy</code> types.</p>\n\n<p>Objects, in Rust, don't have a consistent address: the addresses often change between moves because of the runtime behavior, i.e. they are owned by exactly one binding. This is very different from other languages!</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530065566, "post_id": 51053176, "comment_id": 89098153, "body": "<i>both have the same semantics except</i> \u2014 I disagree: if something implements <code>Copy</code>, then <code>Clone</code> should <b>always</b> delegate to the <code>Copy</code> implementation. There is no good reason to have <code>Clone</code> do something different from <code>Copy</code>."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530065819, "post_id": 51053176, "comment_id": 89098193, "body": "Emm... What about a <code>println!</code> invocation? This is what I said &quot;side-effects&quot;."}], "tags": [], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "is_accepted": false, "score": 0, "last_activity_date": 1530065492, "last_edit_date": 1530065492, "creation_date": 1530061415, "answer_id": 51053176, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/51053176#51053176", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>In Rust when you use (or move, in Rust's terms) a value that is <code>Copy</code>, the original value is still valid. If you want to simulate the case that like other non-copyable values, to invalidate after a specific use, you can do:</p>\n\n<pre><code>let v = 42i32;\n// ...\nlet m = v; \n// redefine v such that v is no longer a valid (initialized) variable afterwards\n// Unfortunately you have to write a type here. () is the easiest,\n// but can be used unintentionally.\nlet v: (); \n// If the ! type was stabilized, you can write\nlet v: !;\n// otherwise, you can define your own:\nenum NeverType {};\nlet v: NeverType;\n// ...\n</code></pre>\n\n<p>If you later change <code>v</code> to something that is not <code>Copy</code>, you don't have to change the code above to avoid using the moved value.</p>\n\n<p><strong>Correction on some misunderstanding on the question</strong></p>\n\n<ul>\n<li><p>The difference between <code>Clone</code> and <code>Copy</code> is NOT \"shallow copy\" and \"deep copy\" semantics. <code>Copy</code> is \"memcpy\" semantics and <code>Clone</code> is whatever the implementors like, that is the only difference. Although, by definition, things which require a \"deep copy\" are not able to implement <code>Copy</code>.</p></li>\n<li><p>When a type implements both <code>Copy</code> and <code>Clone</code>, it is expected that both have the same semantics except that <code>Clone</code> can have side effects. For a type that implements <code>Copy</code>, its <code>Clone</code> should not have \"deep copy\" semantics and the cloned result is expected to be the same as a copied result.</p></li>\n<li><p>As an attempt, if you want to use the closure to help, you probably wanted to <strong>run</strong> the closure, like <code>let new_id = (move || id)();</code>. If <code>id</code> is copy then <code>id</code> is still valid after the move, so this does not help, at all.</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "is_accepted": false, "score": 3, "last_activity_date": 1531209340, "last_edit_date": 1531209340, "creation_date": 1531209016, "answer_id": 51259824, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait/51259824#51259824", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>Moves and copies are basically just the same runtime operation under the covers. The compiler inserts code to make a bitwise copy from the first variable's address into the second variable's address. In the case of a move, the compiler also invalidates the first variable so that if it subsequently used it will be a compile error.</p>\n\n<p>Even so, I think there would be still be validity if Rust language allowed a program to say the assignment was an explicit move instead of a copy. It could catch bugs by preventing inadvertant references to the wrong instance. It might also generate more efficient code in some instances if the compiler knows you don't need two copies and could jiggle the bindings around to avoid the bitwise copy.</p>\n\n<p>e.g. if you could state a <code>= move</code> assignment or similar. </p>\n\n<pre><code>let coord = (99.9, 73.45);\nlet mut coord2 = move coord;\ncoord2.0 += 100.0;\nprintln!(\"coord2 = {:?}\", coord2);\nprintln!(\"coord = {:?}\", coord); // Error\n</code></pre>\n"}], "owner": {"reputation": 392, "user_id": 1280333, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/QtTmm.png?s=128&g=1", "display_name": "Narfanar", "link": "https://stackoverflow.com/users/1280333/narfanar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8520, "favorite_count": 4, "answer_count": 6, "score": 17, "last_activity_date": 1531209340, "creation_date": 1435773971, "last_edit_date": 1518199488, "question_id": 31168589, "link": "https://stackoverflow.com/questions/31168589/how-to-force-a-move-of-a-type-which-implements-the-copy-trait", "title": "How to force a move of a type which implements the Copy trait?", "body": "<p>A custom type by default is <em>moved</em> through default assignment. By implementing the <code>Copy</code> trait, I get \"shallow copy semantics\" through default assignment. I may also get \"deep copy semantics\" by implementing the <code>Clone</code> trait.</p>\n\n<p>Is there a way to force a <em>move</em> on a <code>Copy</code> type? </p>\n\n<p>I tried using the <code>move</code> keyword and a closure (<code>let new_id = move || id;</code>) but I get an error message. I'm not into closures yet, but, from seeing them here and there, I thought that that would have worked.</p>\n"}, {"tags": ["c", "visual-studio", "rust"], "comments": [{"owner": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 1, "creation_date": 1435758325, "post_id": 31162973, "comment_id": 50334720, "body": "I imagine it&#39;s theoretically possible; you&#39;d have to match the decorated function names, calling conventions, parameters, and return types. Why not create a dll and build a thunk layer in C? Probably will end up being more stable."}, {"owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "reply_to_user": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435758478, "post_id": 31162973, "comment_id": 50334851, "body": "I would rather stay away from DLLs for performance reasons..."}, {"owner": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435758704, "post_id": 31162973, "comment_id": 50335019, "body": "In my experience, they are fine one you&#39;ve called a function once and can cache the function pointer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435758748, "post_id": 31162973, "comment_id": 50335056, "body": "@Bathsheba: I lack the expertise with MVSC and in general the Windows way of things; on Linux the answer is a resounding yes because there Rust can match the C ABI (using <code>extern</code> function declarations). I naively thought that C on Windows was simple as well (contrary to C++), that is had a single calling convention, etc... otherwise as its a role of Rust to provide a C ABI, it will require some tweaking."}, {"owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "reply_to_user": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435759000, "post_id": 31162973, "comment_id": 50335258, "body": "@Bathsheba Do you have documentation on how this caching mechanism works? I always assumed that the cost of a DLL function call was roughly similar to the cost of a virtual function call."}, {"owner": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 1, "creation_date": 1435759686, "post_id": 31162973, "comment_id": 50335783, "body": "I use something on these lines: typedef jint (JNICALL *PFN_GET)(JavaVM **vmBuf, jsize bufLen, jsize *nVMs);                 static PFN_GET pfn = NULL;                 if (pfn == NULL){                     pfn = (PFN_GET)GetProcAddress(s_jni_library, &quot;JNI_GetCreatedJavaVMs&quot;);                 }"}, {"owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "reply_to_user": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435760261, "post_id": 31162973, "comment_id": 50336217, "body": "@Bathsheba Ah I see. That seems faster than a virtual function call, but still not as fast as a static function call. You can&#39;t inline and you have the overhead of the pointer check and the overhead of a function pointer call."}, {"owner": {"reputation": 219167, "user_id": 2380830, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5qiYa.jpg?s=128&g=1", "display_name": "Bathsheba", "link": "https://stackoverflow.com/users/2380830/bathsheba"}, "edited": false, "score": 0, "creation_date": 1435760700, "post_id": 31162973, "comment_id": 50336584, "body": "If performance is <i>that</i> critical then you&#39;ll have to force the static linkage. I&#39;ve never tried it but as I&#39;ve already said, I imagine it is possible, with some pain. Good luck!"}], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1435778817, "post_id": 31168439, "comment_id": 50347762, "body": "Be careful, Rust&#39;s <code>i32</code> is not necessarily equivalent to C&#39;s <code>int</code>."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435787516, "post_id": 31168439, "comment_id": 50352376, "body": "Use <code>libc::c_int</code> instead."}], "tags": [], "owner": {"reputation": 95, "user_id": 3064195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62d26b41c66113b1ab8599e5c5270603?s=128&d=identicon&r=PG&f=1", "display_name": "Eidolon", "link": "https://stackoverflow.com/users/3064195/eidolon"}, "is_accepted": true, "score": 2, "last_activity_date": 1436300152, "last_edit_date": 1436300152, "creation_date": 1435773429, "answer_id": 31168439, "question_id": 31162973, "link": "https://stackoverflow.com/questions/31162973/rust-and-c-compatibility-with-visual-studio/31168439#31168439", "title": "Rust and C compatibility with Visual Studio", "body": "<p>If you want to use only <code>rustc</code> to produce a static library, you will do this by specifying some attributes in your crate's <code>lib.rs</code> file, and marking exported functions as so:</p>\n\n<pre><code>#![crate_type = \"static_lib\"]\n#![crate_name = \"mylib\"]\n\nuse libc::c_int;\n\n#[no_mangle]\npub extern fn my_exported_func(num: c_int) -&gt; c_int {\n    num + 1\n}\n</code></pre>\n\n<p>Then simply invoke <code>rustc lib.rs</code>. This applies to all platforms that <code>rustc</code> supports.</p>\n\n<p>In a C/C++ header, add:</p>\n\n<pre><code>#pragma once\n\n// only use extern block if the header is put inside a C++ CU\nextern \"C\" {\n    int my_exported_func(int num);\n}\n</code></pre>\n\n<p>and link the output <code>.lib</code> or <code>.a</code> as necessary.</p>\n\n<p>For Cargo, you can specify the crate type and name in your <code>Cargo.toml</code>.</p>\n\n<p>Sources:</p>\n\n<ul>\n<li><a href=\"http://rustbyexample.com/attribute/crate.html\" rel=\"nofollow\">http://rustbyexample.com/attribute/crate.html</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/ffi.html\" rel=\"nofollow\">https://doc.rust-lang.org/book/ffi.html</a></li>\n</ul>\n"}], "owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 748, "favorite_count": 0, "accepted_answer_id": 31168439, "answer_count": 1, "score": 4, "last_activity_date": 1436300152, "creation_date": 1435757769, "question_id": 31162973, "link": "https://stackoverflow.com/questions/31162973/rust-and-c-compatibility-with-visual-studio", "title": "Rust and C compatibility with Visual Studio", "body": "<p>Is it possible to create a static library compiled with rustc and link it to an executable compiled with MSVC?</p>\n"}, {"tags": ["c++", "qt", "cmake", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435805845, "post_id": 31162438, "comment_id": 50357078, "body": "Are you able to use <code>cargo</code>? If so, I&#39;d suggest just having rules that call out to Cargo."}], "answers": [{"comments": [{"owner": {"reputation": 31108, "user_id": 350351, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG", "display_name": "Daenyth", "link": "https://stackoverflow.com/users/350351/daenyth"}, "edited": false, "score": 1, "creation_date": 1435841003, "post_id": 31175323, "comment_id": 50375164, "body": "Wow, what a comprehensive answer. Thanks a ton!"}, {"owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "reply_to_user": {"reputation": 31108, "user_id": 350351, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG", "display_name": "Daenyth", "link": "https://stackoverflow.com/users/350351/daenyth"}, "edited": false, "score": 1, "creation_date": 1435856498, "post_id": 31175323, "comment_id": 50386028, "body": "Yeah - no worries.  It was an interesting question and I wanted to see how it would work :)"}, {"owner": {"reputation": 3908, "user_id": 1398841, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/s8gQQ.png?s=128&g=1", "display_name": "phoenix", "link": "https://stackoverflow.com/users/1398841/phoenix"}, "edited": false, "score": 0, "creation_date": 1513633710, "post_id": 31175323, "comment_id": 82719494, "body": "If you are building on platforms other than Windows, you&#39;ll need to change the system link libraries <code>ws2_32 userenv advapi32</code> to something else. For example, on macOS you need: <code>m c System resolv</code>."}], "tags": [], "owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "is_accepted": true, "score": 62, "last_activity_date": 1435809738, "last_edit_date": 1435809738, "creation_date": 1435809263, "answer_id": 31175323, "question_id": 31162438, "link": "https://stackoverflow.com/questions/31162438/how-can-i-build-rust-code-with-a-c-qt-cmake-project/31175323#31175323", "title": "How can I build Rust code with a C++/Qt/CMake project?", "body": "<p>You can use the <a href=\"http://www.cmake.org/cmake/help/v3.3/module/ExternalProject.html\"><code>ExternalProject</code> module</a> for this.  It's designed to allow building of external dependencies - even ones which don't use CMake.  Here's a <a href=\"http://www.kitware.com/media/html/BuildingExternalProjectsWithCMake2.8.html\">useful article</a> on using it.</p>\n\n<p>So say you have your \"common-rust\" subdirectory and its Cargo.toml contains:</p>\n\n<pre><code>[package]\nname = \"rust_example\"\nversion = \"0.1.0\"\n\n[lib]\nname = \"rust_example\"\ncrate-type = [\"staticlib\"]\n</code></pre>\n\n<p>and it exposes a function <code>add</code> via its lib.rs:</p>\n\n<pre><code>#[no_mangle]\npub extern fn add(lhs: u32, rhs: u32) -&gt; u32 {\n    lhs + rhs\n}\n</code></pre>\n\n<p>Then your top-level CMakeLists.txt could look something like this:</p>\n\n<pre><code>add_executable(Example cpp/main.cpp)\n\n# Enable ExternalProject CMake module\ninclude(ExternalProject)\n\n# Set default ExternalProject root directory\nset_directory_properties(PROPERTIES EP_PREFIX ${CMAKE_BINARY_DIR}/Rust)\n\n# Add rust_example as a CMake target\nExternalProject_Add(\n    rust_example\n    DOWNLOAD_COMMAND \"\"\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND cargo build COMMAND cargo build --release\n    BINARY_DIR \"${CMAKE_SOURCE_DIR}/common-rust\"\n    INSTALL_COMMAND \"\"\n    LOG_BUILD ON)\n\n# Create dependency of Example on rust_example\nadd_dependencies(Example rust_example)\n\n# Specify Example's link libraries\ntarget_link_libraries(Example\n    debug \"${CMAKE_SOURCE_DIR}/common-rust/target/debug/librust_example.a\"\n    optimized \"${CMAKE_SOURCE_DIR}/common-rust/target/release/librust_example.a\"\n    ws2_32 userenv advapi32)\n\nset_target_properties(Example PROPERTIES CXX_STANDARD 11 CXX_STANDARD_REQUIRED ON)\n</code></pre>\n\n<p>When you build the Rust target as a <code>staticlib</code> it outputs which other libraries should be linked.  I've only tried this on Windows, hence <code>ws2_32</code>, <code>userenv</code>, and <code>advapi32</code> are linked.  This won't be cross-platform obviously, but you can handle that easily enough (e.g. set a variable to the list of dependencies appropriate to each platform inside an <code>if..else</code> block and append that in the <code>target_link_libraries</code> call).</p>\n\n<p>Also note that this depends on Cargo being available in the path.</p>\n\n<p>You should be good to go now.  The file \"cpp/main.cpp\" could contain something like:</p>\n\n<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n\nextern \"C\" {\n  uint32_t add(uint32_t lhs, uint32_t rhs);\n}\n\nint main() {\n  std::cout &lt;&lt; \"1300 + 14 == \" &lt;&lt; add(1300, 14) &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre>\n\n<p>Here's a link to a working <a href=\"https://gitlab.com/Fraser999/Rust-From-CXX/tree/master\">example project</a>.</p>\n"}], "owner": {"reputation": 31108, "user_id": 350351, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG", "display_name": "Daenyth", "link": "https://stackoverflow.com/users/350351/daenyth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7002, "favorite_count": 18, "accepted_answer_id": 31175323, "answer_count": 1, "score": 43, "last_activity_date": 1435809738, "creation_date": 1435756505, "last_edit_date": 1435805764, "question_id": 31162438, "link": "https://stackoverflow.com/questions/31162438/how-can-i-build-rust-code-with-a-c-qt-cmake-project", "title": "How can I build Rust code with a C++/Qt/CMake project?", "body": "<p>I have an existing C++/Qt <a href=\"http://github.com/Cockatrice/Cockatrice\">project</a> built with CMake. I'd like to start adding Rust code which I can invoke from inside the main C++ codebase.</p>\n\n<p>What's the right way to structure the project?</p>\n\n<p>Current project structure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>./CMakeLists.txt\n./subproject-foo/CMakeLists.txt\n./subproject-foo/src/...\n./subproject-bar/CmakeLists.txt\n./subproject-bar/src/...\n./common/CMakeLists.txt\n./common/src/...\n</code></pre>\n\n<p>I'd like to add a <code>common-rust/...</code> directory with similar structure.</p>\n\n<p>How can I incorporate this into the project?</p>\n"}, {"tags": ["string", "concatenation", "rust"], "comments": [{"owner": {"reputation": 4085, "user_id": 4185106, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/er5li.png?s=128&g=1", "display_name": "moffeltje", "link": "https://stackoverflow.com/users/4185106/moffeltje"}, "edited": false, "score": 0, "creation_date": 1435740998, "post_id": 31156768, "comment_id": 50322443, "body": "Ever heard of google? <a href=\"https://doc.rust-lang.org/book/strings.html#concatenation\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/strings.html#concatenation</a>"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 4085, "user_id": 4185106, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/er5li.png?s=128&g=1", "display_name": "moffeltje", "link": "https://stackoverflow.com/users/4185106/moffeltje"}, "edited": false, "score": 1, "creation_date": 1435741136, "post_id": 31156768, "comment_id": 50322536, "body": "Yes I tried googling but that did not come up. Also that isn&#39;t mentioned in the reference documentation for <code>String</code>."}, {"owner": {"reputation": 17155, "user_id": 1210760, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/hqnX9.png?s=128&g=1", "display_name": "Iswanto San", "link": "https://stackoverflow.com/users/1210760/iswanto-san"}, "edited": false, "score": 1, "creation_date": 1435741213, "post_id": 31156768, "comment_id": 50322597, "body": "You can try googling with spesific keyword like this : <code>string concatenation rust</code> . It works, trust me :))"}, {"owner": {"reputation": 4085, "user_id": 4185106, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/er5li.png?s=128&g=1", "display_name": "moffeltje", "link": "https://stackoverflow.com/users/4185106/moffeltje"}, "edited": false, "score": 0, "creation_date": 1435741324, "post_id": 31156768, "comment_id": 50322671, "body": "@Timmmm I don&#39;t know anything about rust but I just googled it and picked the most reliable source and BAM! there is the solution :-)"}], "answers": [{"comments": [{"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1435741087, "post_id": 31156846, "comment_id": 50322504, "body": "Ah yes, it was the automatic coersion from <code>String</code> to <code>&amp;str</code> using <code>&amp;</code> that I didn&#39;t know about. I was trying to use <code>as_str()</code> but it isn&#39;t available yet. Thanks! (Also might be worth mentioning <code>push_str()</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1435748893, "post_id": 31156846, "comment_id": 50327712, "body": "Note that <code>to_string</code> on <code>&amp;str</code>s is inefficient. Use <code>into</code> or <code>to_owned</code> instead."}], "tags": [], "owner": {"reputation": 17155, "user_id": 1210760, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/hqnX9.png?s=128&g=1", "display_name": "Iswanto San", "link": "https://stackoverflow.com/users/1210760/iswanto-san"}, "is_accepted": true, "score": 2, "last_activity_date": 1435741133, "last_edit_date": 1592644375, "creation_date": 1435740995, "answer_id": 31156846, "question_id": 31156768, "link": "https://stackoverflow.com/questions/31156768/how-to-append-a-string-to-another-string/31156846#31156846", "title": "How to append a String to another String?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/strings.html#concatenation\" rel=\"nofollow noreferrer\">here</a></p>\n<blockquote>\n<p>If you have a String, you can concatenate a &amp;str to the end of it:</p>\n<p><code>let hello = &quot;Hello &quot;.to_string(); let world = &quot;world!&quot;;</code></p>\n<p><code>let hello_world = hello + world;</code></p>\n<p>But if you have two Strings, you need an &amp;:</p>\n<p><code>let hello = &quot;Hello &quot;.to_string();</code></p>\n<p><code>let world = &quot;world!&quot;.to_string();</code></p>\n<p><code>let hello_world = hello + &amp;world;</code></p>\n</blockquote>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "closed_date": 1435753232, "accepted_answer_id": 31156846, "answer_count": 1, "score": 0, "last_activity_date": 1435741597, "creation_date": 1435740778, "last_edit_date": 1435741597, "question_id": 31156768, "link": "https://stackoverflow.com/questions/31156768/how-to-append-a-string-to-another-string", "closed_reason": "Duplicate", "title": "How to append a String to another String?", "body": "<p>If I have two <code>String</code>s, how do I append one to the other using stable Rust? It's a simple question but stackoverflow doesn't think I am verbose enough apparently. This is some extra text.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435730908, "post_id": 31153517, "comment_id": 50316691, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28595075/cannot-move-out-of-borrowed-content-when-borrowing-a-generic-type\">Cannot move out of borrowed content when borrowing a generic type</a>"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1435731811, "last_edit_date": 1495542125, "creation_date": 1435731811, "answer_id": 31153925, "question_id": 31153517, "link": "https://stackoverflow.com/questions/31153517/wrestling-with-borrow-checker/31153925#31153925", "title": "wrestling with borrow checker", "body": "<p>You have two problems:</p>\n\n<ul>\n<li><p>Cannot move out of borrowed context: see <a href=\"https://stackoverflow.com/questions/28595075/cannot-move-out-of-borrowed-content-when-borrowing-a-generic-type\">Cannot move out of borrowed content when borrowing a generic type</a> for an explanation.</p></li>\n<li><p>Cannot assign to immutable field: you only have a <code>&amp;Node&lt;T&gt;</code>; to modify the <code>Node</code> you need a <code>&amp;mut Node&lt;T&gt;</code>. <code>mut curr</code> in the pattern merely makes the <em>binding</em> mutable, meaning that you can assign a new value to <code>curr</code>. You can\u2019t, however, modify the contents of what <code>curr</code> refers to. Propagate the <code>&amp;</code>-to-<code>&amp;mut</code> conversion throughout the code and it\u2019ll work.</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 3, "last_activity_date": 1435848565, "last_edit_date": 1435848565, "creation_date": 1435757582, "answer_id": 31162901, "question_id": 31153517, "link": "https://stackoverflow.com/questions/31153517/wrestling-with-borrow-checker/31162901#31162901", "title": "wrestling with borrow checker", "body": "<p>Since you are new to Rust it might help to see how I would have written it:</p>\n\n<pre><code>struct Node&lt;T&gt; {\n    value: T,\n    left: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    right: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; {\n    fn new(x: T) -&gt; Node&lt;T&gt; {\n        Node { value: x, left: None, right: None }\n    }\n    fn boxed(x: T) -&gt; Box&lt;Node&lt;T&gt;&gt; {\n        Box::new(Node::new(x))\n    }\n}\n\nfn insert&lt;T: PartialOrd&gt;(root: &amp;mut Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;, new: Box&lt;Node&lt;T&gt;&gt;) {\n    if let Some(ref mut rbx) = *root {\n        if new.value &lt; rbx.value {\n            insert(&amp;mut rbx.left, new);\n        } else {\n            insert(&amp;mut rbx.right, new);\n        }\n    } else {\n        *root = Some(new);\n    }\n}\n\nfn main() {\n    let data = vec![6,1,2,3,4,5];\n    let mut root = None;\n    for val in data {\n        insert(&amp;mut root, Node::boxed(val));\n    }\n    println!(\"Root value: {}\", root.unwrap().value); \n}\n</code></pre>\n\n<p>I realize that this is more of an exercise but keep in mind that this kind of data structure should not grow beyond a certain tree depth since it might otherwise cause the stack to overflow when the nodes are recursivly deallocated.</p>\n"}], "owner": {"reputation": 1000, "user_id": 2976057, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f806a0bb679720c8c0844bbffef18b06?s=128&d=identicon&r=PG&f=1", "display_name": "degs", "link": "https://stackoverflow.com/users/2976057/degs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 170, "favorite_count": 0, "accepted_answer_id": 31153925, "answer_count": 2, "score": 3, "last_activity_date": 1435848565, "creation_date": 1435730151, "last_edit_date": 1435730843, "question_id": 31153517, "link": "https://stackoverflow.com/questions/31153517/wrestling-with-borrow-checker", "title": "wrestling with borrow checker", "body": "<p>I'm new to Rust. As a learning exercise I'm trying to make a basic binary tree. This is what I have so far:\n</p>\n\n<pre><code>fn main() {\n    let data = vec![6,1,2,3,4,5];\n\n    let mut root = Node::&lt;i32&gt; { value: data[0], left: None, right: None };\n\n    for val in data {\n        createAndInsert::&lt;i32&gt;(&amp;root, val);\n    }\n    println!(\"Root value: {}\", root.value); \n}\n\nfn createAndInsert&lt;T: PartialOrd&gt;(mut root: &amp;Node&lt;T&gt;, value: T) {\n    let mut n = Node::&lt;T&gt; { value: value, left: None, right: None };\n    insert::&lt;T&gt;(&amp;root, &amp;n);\n}\n\nfn insert&lt;T: PartialOrd&gt;(mut curr: &amp;Node&lt;T&gt;, new: &amp;Node&lt;T&gt;) {\n    if new.value &gt; curr.value {\n        match curr.right {\n            Some(ref n) =&gt; insert(n, new),\n            None =&gt; curr.right = Some(Box::new(*new))\n        }\n    } else {\n        match curr.left {\n            Some(ref n) =&gt; insert(n, new),\n            None =&gt; curr.left = Some(Box::new(*new))\n        }\n    }\n}\n\nstruct Node&lt;T: PartialOrd&gt; {\n    value: T,\n    left: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    right: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>The compiler errors I'm getting:</p>\n\n<pre><code>test.rs:21:48: 21:52 error: cannot move out of borrowed content\ntest.rs:21             None =&gt; curr.right = Some(Box::new(*new))\n                                                          ^~~~\ntest.rs:26:47: 26:51 error: cannot move out of borrowed content\ntest.rs:26             None =&gt; curr.left = Some(Box::new(*new))\n                                                         ^~~~\ntest.rs:21:21: 21:54 error: cannot assign to immutable field `curr.right`\ntest.rs:21             None =&gt; curr.right = Some(Box::new(*new))\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest.rs:26:21: 26:53 error: cannot assign to immutable field `curr.left`\ntest.rs:26             None =&gt; curr.left = Some(Box::new(*new))\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 4 previous errors\n</code></pre>\n\n<p>I've got myself tangled in all the refs and muts and &amp;'s and *'s and I'm not sure how to get out. Where am I going wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435719670, "post_id": 31151797, "comment_id": 50313479, "body": "This isn\u2019t how things are done in Rust, by convention; <code>ExpressionType</code> should typically not go in a module of its own, it should go straight in the <code>core</code> module. Then <code>core::ExpressionType::Integer</code>, <i>&amp;c.</i> In cases where there\u2019s quite a lot related to that, it might go in a module of its own, but even then it would typically only be exported under <code>core</code> directly (<code>pub enum ExpressionType</code>, <code>mod expression_type; pub use expression_type::ExpressionType;</code>). Also note that module names are snake_case by convention."}], "answers": [{"comments": [{"owner": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "edited": false, "score": 1, "creation_date": 1435719672, "post_id": 31151856, "comment_id": 50313481, "body": "Gosh, this error description is extremely confusing."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "edited": false, "score": 0, "creation_date": 1435719777, "post_id": 31151856, "comment_id": 50313503, "body": "@LOST: it is rather poor; I expect that the technical reason for it is roughly that it is only looking in the value space, where <code>ExpressionType</code> is in the type/module space, so it doesn\u2019t see it at all."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435731973, "post_id": 31151856, "comment_id": 50317200, "body": "@ChrisMorgan: Do you know of any bug report on this issue? I know there is already a bunch of bugs opened regarding improving error messages (such as when a method was not considered because some generic parameter constraint was not met), but I do not know any for this particular &quot;wrong space&quot; issue."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435732093, "post_id": 31151856, "comment_id": 50317262, "body": "@MatthieuM.: I do not know of any but I have not searched at all. (Also bear in mind that I can\u2019t remember the jargon for the concepts I refer to precisely, the terms I used are probably not correct.)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435733117, "post_id": 31151856, "comment_id": 50317801, "body": "@ChrisMorgan: wrt jargon: I have the same issue :/"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1435720073, "last_edit_date": 1435720073, "creation_date": 1435719537, "answer_id": 31151856, "question_id": 31151797, "link": "https://stackoverflow.com/questions/31151797/how-to-access-a-symbol-defined-in-nested-module/31151856#31151856", "title": "How to access a symbol defined in nested module?", "body": "<p>You need to write <code>ExpressionType::Integer</code> rather than <code>ExpressionType.Integer</code> (<code>::</code> instead of <code>.</code>). In the latter case, the compiler is looking for a value, such as a variable or constant, named <code>ExpressionType</code>.</p>\n"}], "owner": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 47, "favorite_count": 0, "accepted_answer_id": 31151856, "answer_count": 1, "score": 0, "last_activity_date": 1435720073, "creation_date": 1435719037, "last_edit_date": 1435719590, "question_id": 31151797, "link": "https://stackoverflow.com/questions/31151797/how-to-access-a-symbol-defined-in-nested-module", "title": "How to access a symbol defined in nested module?", "body": "<p>I am using rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src\n\u251c\u2500\u2500 main.rs\n\u2514\u2500\u2500 core\n    \u251c\u2500\u2500 mod.rs\n    \u2514\u2500\u2500 expressionType.rs\n</code></pre>\n\n<p>main.rs:</p>\n\n<pre><code>mod core;\nuse core::expressionType;\n\nfn main() {\n    let t = expressionType::ExpressionType.Integer;\n    println!(\"Hello, world!\")\n}\n</code></pre>\n\n<p>expressionType.rs:</p>\n\n<pre><code>pub enum ExpressionType {\n    Integer,\n    List(Box&lt;ExpressionType&gt;),\n    Function(Box&lt;ExpressionType&gt;, Box&lt;ExpressionType&gt;)\n}\n</code></pre>\n\n<p>mod.rs:</p>\n\n<pre><code>pub mod expressionType;\n</code></pre>\n\n<p>from src, when I try to do rustc main.rs, I get</p>\n\n<pre><code>main.rs:5:13: 5:43 error: unresolved name `expressionType::ExpressionType`\nmain.rs:5     let t = expressionType::ExpressionType.Integer;\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>I also tried core::expressionType::ExpressionType and expressionType.ExpressionType</p>\n\n<p>Am I missing something? Why can't I access enum from expressionType.rs</p>\n\n<p>UPD1: I also tried to add</p>\n\n<pre><code>pub use self::expressionType::ExpressionType;\n</code></pre>\n\n<p>to mod.rs, but after that in main.rs neither core::ExpressionType, nor expressionType::ExpressionType become available.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "is_accepted": false, "score": 1, "last_activity_date": 1435716503, "creation_date": 1435716503, "answer_id": 31151486, "question_id": 31151361, "link": "https://stackoverflow.com/questions/31151361/working-around-this-particular-moved-value/31151486#31151486", "title": "Working around this particular moved value?", "body": "<p>The helpful rust community at their IRC explained how using <code>.as_ref().unwrap</code> converts the <code>Option&lt;T&gt;</code> and gives you <code>Option&lt;&amp;T&gt;</code></p>\n"}], "owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 48, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1435716728, "creation_date": 1435715586, "last_edit_date": 1435716728, "question_id": 31151361, "link": "https://stackoverflow.com/questions/31151361/working-around-this-particular-moved-value", "title": "Working around this particular moved value?", "body": "<p>I have this IRC bot script that I was playing around with and I ran into a problem with the borrow checker but I can't seem to work around it:</p>\n\n<pre><code>extern crate irc;\n\nuse irc::client::prelude::*;\n\nfn main() {\n    let config = Config {\n        nickname: Some(format!(\"DwightSchrute\")),\n        alt_nicks: Some(vec![format!(\"bananas\"), format!(\"apples\")]),\n        server: Some(format!(\"irc.zerosec.net\")),\n        channels: Some(vec![format!(\"#main\")]),\n        .. Default::default()\n    };\n    let server = IrcServer::from_config(config.clone()).unwrap();                         //config used\n    server.identify().unwrap();\n    for message in server.iter() {\n            let message = message.unwrap(); // We'll just panic if there's an error.\n        print!(\"{}\", message.into_string());\n        if &amp;message.command[..] == \"PRIVMSG\" {\n            if let Some(msg) = message.suffix {\n                if msg.contains(\"DwightSchrute\") {\n                    server.send_privmsg(&amp;message.args[0], \"Want some of my beets salad?\").unwrap();\n                }\n                if msg.contains(\"!quit\") {\n                    server.send_privmsg(&amp;message.args[0], \"Off to the Schrute farm, goodbye intellectual inferiors\").unwrap();\n                                        server.send(Command::QUIT(None));\n                }\n                if msg.contains(\"ACTION yawns\") {\n                    server.send_action(&amp;(config.channels.unwrap()[0]),\"fooood\");         //desire to use config again\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is the with the <code>config</code> variable.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1435710162, "post_id": 31150562, "comment_id": 50311381, "body": "I&#39;m very new to rust so thanks for clearing those things up. So not passing a vector by reference will <b>move</b> the value? Not create a copy and pass that?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435710561, "post_id": 31150562, "comment_id": 50311471, "body": "Your second point is incorrect\u2014it\u2019s not <code>iter.clone()</code>, it\u2019s <code>iter.cloned()</code> which clones the values in the iterator, so for an <code>Iterator&lt;&amp;(String, usize)&gt;</code> it will clone the <code>&amp;(String, usize)</code> to <code>(String, usize)</code>, which is acceptable."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1435710591, "post_id": 31150562, "comment_id": 50311481, "body": "@SyntacticFructose: In rust there are types that implement the trait <code>Copy</code>. Those are considered trivially copiable, so a <code>let a = b;</code> or a function argumment will make a copy. Those that do not implement <code>Copy</code> will not be copied but moved. If the type can be non-trivially copied, then it will implement the <code>Clone</code> trait and you will have to explicitly call <code>clone()</code> to copy it."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435710761, "post_id": 31150562, "comment_id": 50311521, "body": "@ChrisMorgan: Oh, right, I didn&#39;t notice that. I&#39;ll correct the answer."}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 4, "last_activity_date": 1435710956, "last_edit_date": 1435710956, "creation_date": 1435709352, "answer_id": 31150562, "question_id": 31150468, "link": "https://stackoverflow.com/questions/31150468/use-of-moved-value-error-even-with-use-of-cloned/31150562#31150562", "title": "Use of moved value error even with use of cloned()", "body": "<p>The main problem is that you did not change the argument of the function to receive a pointer to the original vector, so it still reveives it as a moved value. So change this line:</p>\n\n<pre><code>fn get_names(v: Vec&lt;(String, usize)&gt;) -&gt; Vec&lt;String&gt;\n</code></pre>\n\n<p>into this one:</p>\n\n<pre><code>fn get_names(v: &amp;Vec&lt;(String, usize)&gt;) -&gt; Vec&lt;String&gt;\n</code></pre>\n\n<p>You'll have to change the call accordingly: <code>get_names(&amp;v);</code>.</p>\n\n<p>Additionally, instead of using <code>cloned()</code> in the iterator that clones the whole tuples, you might iterate through the pointers and clone just the strings. In this case will not make much difference, but if the object in the vector were more complex it might matter. Something like this:</p>\n\n<pre><code>fn get_names(v: &amp;Vec&lt;(String, usize)&gt;) -&gt; Vec&lt;String&gt; {\n    v.iter()\n        .map(|&amp;(ref name, _value)| name.clone())\n        .collect()\n}\n</code></pre>\n\n<p>Don't forget the <code>ref</code> into the lambda match expression, because you cannot take ownership of the borrowed members of <code>v</code>. And don't forget the <code>&amp;</code> because you are iterating a pointer, so you get pointers to the tuples.</p>\n\n<p>Also, note that you can use the original <code>get_names()</code> function without invalidating the vector. Just write <code>get_names(v.clone())</code>!</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 289, "favorite_count": 0, "accepted_answer_id": 31150562, "answer_count": 1, "score": 2, "last_activity_date": 1435735724, "creation_date": 1435708657, "last_edit_date": 1435735724, "question_id": 31150468, "link": "https://stackoverflow.com/questions/31150468/use-of-moved-value-error-even-with-use-of-cloned", "title": "Use of moved value error even with use of cloned()", "body": "<p>I'm trying to figure out why I'm receiving an error about a moved value for this code segment: </p>\n\n<pre><code>fn get_names(v: Vec&lt;(String, usize)&gt;) -&gt; Vec&lt;String&gt; {\n    v.iter().cloned()\n        .map(|(name, _value)| name)\n        .collect()\n}\n\nfn main() {\n    let v = vec!((\"Herman\".to_string(), 5));\n    println!(\"running\");\n    let names = get_names(v);\n\n    assert_eq!(names, [\"Herman\"]);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>I was reading <a href=\"http://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html\" rel=\"nofollow\">this</a> weekly rust article and noticed this code block </p>\n\n<pre><code>fn get_names(v: Vec&lt;(String, usize)&gt;) -&gt; Vec&lt;String&gt; {\n    v.into_iter()\n        .map(|(name, _score)| name)\n        .collect()\n}\n\nfn main() {\n    let v = vec!( (\"Herman\".to_string(), 5));\n    let names = get_names(v);\n\n    assert_eq!(names, [\"Herman\"]);\n}\n</code></pre>\n\n<p>The syntax makes sense to me, but why would someone want to move out a vector and invalidate <code>v</code> ? Why would you not just create a vector <code>names</code> and not steal from <code>v</code>? I attempted modifying the program to only copy the names but i'm getting the error:</p>\n\n<pre><code>src/main.rs:13:22: 13:23 error: use of moved value: `v`\nsrc/main.rs:13     println!(\"{:?}\", v);\n                                    ^\nnote: in expansion of format_args!\n&lt;std macros&gt;:2:25: 2:56 note: expansion site\n&lt;std macros&gt;:1:1: 2:62 note: in expansion of print!\n&lt;std macros&gt;:3:1: 3:54 note: expansion site\n&lt;std macros&gt;:1:1: 3:58 note: in expansion of println!\nsrc/main.rs:13:5: 13:25 note: expansion site\nsrc/main.rs:10:27: 10:28 note: `v` moved here because it has type `collections::vec::Vec&lt;(collections::string::String, usize)&gt;`, which is non-copyable\nsrc/main.rs:10     let names = get_names(v);\n                                         ^\nerror: aborting due to previous error\nCould not compile `tutorial`.\n</code></pre>\n"}, {"tags": ["keyboard", "rust", "keystroke"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435730714, "post_id": 31149330, "comment_id": 50316605, "body": "Probably not what you are looking for but... <i>like in C</i>. In short, I do not know of any portable Rust library, so you would have to either find a portable C library or find an OS-dependent way of doing it."}], "answers": [{"comments": [{"owner": {"reputation": 203, "user_id": 5046443, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8024f0c7314992a6350f1bd5ee6f81fb?s=128&d=identicon&r=PG", "display_name": "goopycs", "link": "https://stackoverflow.com/users/5046443/goopycs"}, "edited": false, "score": 0, "creation_date": 1435780668, "post_id": 31167563, "comment_id": 50348789, "body": "How to intercept keystroke <b>with</b> any libraries?"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 3, "last_activity_date": 1435770322, "creation_date": 1435770322, "answer_id": 31167563, "question_id": 31149330, "link": "https://stackoverflow.com/questions/31149330/how-to-intercept-keystroke/31167563#31167563", "title": "How to intercept keystroke?", "body": "<blockquote>\n  <p>without any libraries?</p>\n</blockquote>\n\n<p>There's nothing in the standard library to do this, no.</p>\n"}], "owner": {"reputation": 203, "user_id": 5046443, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8024f0c7314992a6350f1bd5ee6f81fb?s=128&d=identicon&r=PG", "display_name": "goopycs", "link": "https://stackoverflow.com/users/5046443/goopycs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 334, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1435770322, "creation_date": 1435701819, "last_edit_date": 1435730651, "question_id": 31149330, "link": "https://stackoverflow.com/questions/31149330/how-to-intercept-keystroke", "title": "How to intercept keystroke?", "body": "<p>How I can intercept keystroke in Rust without any libraries?<br>\nFor example: <code>press W</code> - print: <code>\"Press key 'W'\"</code>.</p>\n"}, {"tags": ["python", "multithreading", "rust", "ffi"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435701709, "post_id": 31149201, "comment_id": 50308750, "body": "What does the crash look like? I would not use .unwrap(), since a rust panic inside a call from Python is a <i>very bad idea</i>."}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435701903, "post_id": 31149201, "comment_id": 50308834, "body": "The crash I get in ipython is: <code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;assertion failed: size != 0&#39;, &#47;private&#47;tmp&#47;rust20150626-13301-uiklsd&#47;rustc-1.1.0&#47;src&#47;libco&zwnj;&#8203;re&#47;slice.rs:196 fatal runtime error: Could not unwind stack, error = 5 Illegal instruction: 4</code>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435702091, "post_id": 31149201, "comment_id": 50308898, "body": "Ok that assertion looks like you are passing <code>.chunks(0)</code> actually. Could it be as simple as that?"}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435702189, "post_id": 31149201, "comment_id": 50308931, "body": "I don&#39;t follow\u2026you mean am I passing it a zero-sized chunk?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435702259, "post_id": 31149201, "comment_id": 50308954, "body": "<code>.chunks(orig.len() &#47; NUMTHREADS as usize)</code>  \u2190 argument must not be zero"}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435702416, "post_id": 31149201, "comment_id": 50309009, "body": "Oh for god&#39;s sake. That&#39;s what it is. So I just need to guard for the possibility of input &lt; NUMTHREADS?"}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 1, "last_activity_date": 1435702964, "creation_date": 1435702964, "answer_id": 31149578, "question_id": 31149201, "link": "https://stackoverflow.com/questions/31149201/threaded-code-crashes-calling-ffi-process/31149578#31149578", "title": "Threaded code crashes calling FFI process", "body": "<p>From the error message it looks like you used a chunk size of <code>0</code> for some inputs. <code>[T]::chunks(size)</code> will assert that <code>size != 0</code>.</p>\n\n<p>If we want <code>NUMTHREADS</code> chunks, we could split it like this:</p>\n\n<pre><code>// Divide into NUMTHREADS chunks\nlet mut size = orig.len() / NUMTHREADS;\nif orig.len() % NUMTHREADS &gt; 0 { size += 1; }\n// If we want to avoid the case where orig.len() == 0, we need another adjustment:\nsize = std::cmp::max(1, size);\n</code></pre>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 31149578, "answer_count": 1, "score": 0, "last_activity_date": 1435702964, "creation_date": 1435701255, "last_edit_date": 1495542142, "question_id": 31149201, "link": "https://stackoverflow.com/questions/31149201/threaded-code-crashes-calling-ffi-process", "title": "Threaded code crashes calling FFI process", "body": "<p>I've converted a function to use threads (as per <a href=\"https://stackoverflow.com/a/31123137/416626\">this answer</a>). It behaves as expected in tests (that is, it returns identical values to the non-threaded version). However, calling it from Python using <code>ctypes</code> causes the calling process to crash.</p>\n\n<p>First, the working function:</p>\n\n<pre><code>#[no_mangle]\npub extern fn convert_vec(lon: Array, lat: Array) -&gt; Array {\n    // snip\n    // orig is a Vec&lt;(f32, f32)&gt;\n    // convert is a conversion function\n    let result: Vec&lt;(i32, i32)&gt; = orig.iter()\n        .map(|elem| convert(elem.0, elem.1))\n        .collect();\n    // convert back to vector of unsigned integer Tuples\n    let nvec = result.iter()\n        .map(|ints| Tuple { a: ints.0 as u32, b: ints.1 as u32 })\n        .collect();\n    Array::from_vec(nvec)\n}\n</code></pre>\n\n<p>And now the threaded version, which passes tests (using <code>cargo test</code>) but crashes when called from Python:</p>\n\n<pre><code>#[no_mangle]\npub extern fn convert_vec_threaded(lon: Array, lat: Array) -&gt; Array {\n    // snip\n    // orig is a Vec&lt;(f32, f32)&gt;\n    // convert is a conversion function\n    let mut guards: Vec&lt;JoinHandle&lt;Vec&lt;(i32, i32)&gt;&gt;&gt; = vec!();\n    // split into slices\n    for chunk in orig.chunks(orig.len() / NUMTHREADS as usize) {\n        let chunk = chunk.to_owned();\n        let g = thread::spawn(move || chunk\n            .into_iter()\n            .map(|elem| convert(elem.0, elem.1))\n            .collect());\n        guards.push(g);\n    }\n    let mut result: Vec&lt;(i32, i32)&gt; = Vec::with_capacity(orig.len());\n    for g in guards {\n        result.extend(g.join().unwrap().into_iter());\n    }\n    // convert back to vector of unsigned integer Tuples\n    let nvec = result.iter()\n        .map(|ints| Tuple { a: ints.0 as u32, b: ints.1 as u32 })\n        .collect();\n    Array::from_vec(nvec)\n}\n</code></pre>\n\n<p>The complete testable example is available <a href=\"https://github.com/urschrei/rust_bng\" rel=\"nofollow noreferrer\">here</a></p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 5, "creation_date": 1435676047, "post_id": 31141363, "comment_id": 50293938, "body": "You want to do this without inserting <code>dummy</code> into the map at any point? Just wondering."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435734126, "post_id": 31141363, "comment_id": 50318339, "body": "Exactly, although it is only a preference in my particular use case. Though I can imagine situations where you wouldn&#39;t want to insert <code>dummy</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1435677421, "last_edit_date": 1495542834, "creation_date": 1435677421, "answer_id": 31142207, "question_id": 31141363, "link": "https://stackoverflow.com/questions/31141363/default-mutable-value-from-hashmap/31142207#31142207", "title": "Default mutable value from HashMap", "body": "<p>If you want to add your <code>dummy</code> into the map, then this is a duplicate of <a href=\"https://stackoverflow.com/q/28249778/155423\">How to properly use HashMap::entry?</a> or <a href=\"https://stackoverflow.com/q/30851464/155423\">Want to add to HashMap using pattern match, get borrow mutable more than once at a time</a> (or any question about the <code>entry</code> API).</p>\n\n<p>If you don't want to add it, then your code is fine, you just need to follow the compiler error messages to fix it. You are trying to use a keyword as an identifier (<code>ref</code>), and you need to get a <em>mutable reference</em> to <code>dummy</code> (<code>&amp; mut dummy</code>):</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn foo() {\n    let mut map: HashMap&lt;&amp;str, Vec&lt;&amp;str&gt;&gt; = HashMap::new();\n\n    let mut dummy: Vec&lt;&amp;str&gt; = Vec::new();\n    let f = map.get_mut(\"whatever\").unwrap_or( &amp;mut dummy );\n}\n\nfn main() {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1435678176, "post_id": 31142381, "comment_id": 50295501, "body": "Using <a href=\"http://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert\" rel=\"nofollow noreferrer\"><code>or_insert</code></a> is the shorter version (<a href=\"http://is.gd/GQYapJ\" rel=\"nofollow noreferrer\">Example</a>)."}], "tags": [], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "is_accepted": true, "score": 13, "last_activity_date": 1435678229, "last_edit_date": 1435678229, "creation_date": 1435677903, "answer_id": 31142381, "question_id": 31141363, "link": "https://stackoverflow.com/questions/31141363/default-mutable-value-from-hashmap/31142381#31142381", "title": "Default mutable value from HashMap", "body": "<p>As mentioned by Shepmaster, here is an example of using the entry pattern. It seems verbose at first, but this avoids allocating an array you might not use unless you need it. I'm sure you could make a generic function around this to cut down on the chatter :)</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry::{Occupied, Vacant};\n\nfn foo() {\n    let mut map = HashMap::&lt;&amp;str, Vec&lt;&amp;str&gt;&gt;::new();\n    let mut result = match map.entry(\"whatever\") {\n       Vacant(entry) =&gt; entry.insert(Vec::new()),\n       Occupied(entry) =&gt; entry.into_mut(),\n    };\n\n    // Do the work\n    result.push(\"One thing\");\n    result.push(\"Then another\");\n}\n</code></pre>\n\n<p>This can also be shortened to <code>or_insert</code> as I just discovered!</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn foo() {\n    let mut map = HashMap::&lt;&amp;str, Vec&lt;&amp;str&gt;&gt;::new();\n    let mut result = map.entry(\"whatever\").or_insert(Vec::new());\n\n    // Do the work\n    result.push(\"One thing\");\n    result.push(\"Then another\");\n}\n</code></pre>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1356, "favorite_count": 1, "accepted_answer_id": 31142381, "answer_count": 2, "score": 9, "last_activity_date": 1435678229, "creation_date": 1435675218, "last_edit_date": 1435677063, "question_id": 31141363, "link": "https://stackoverflow.com/questions/31141363/default-mutable-value-from-hashmap", "title": "Default mutable value from HashMap", "body": "<p>Suppose I have a <code>HashMap</code> and I want to get a mutable reference to an entry, or if that entry does not exist I want a mutable reference to a new object, how can I do it? I've tried using <code>unwrap_or()</code>, something like this:</p>\n\n<pre><code>fn foo() {\n    let mut map: HashMap&lt;&amp;str, Vec&lt;&amp;str&gt;&gt; = HashMap::new();\n\n    let mut ref = map.get_mut(\"whatever\").unwrap_or( &amp;mut Vec::&lt;&amp;str&gt;::new() );\n\n    // Modify ref.\n}\n</code></pre>\n\n<p>But that doesn't work because the lifetime of the <code>Vec</code> isn't long enough. Is there any way to tell Rust that I want the returned <code>Vec</code> to have the same lifetime as <code>foo()</code>? I mean there is this obvious solution but I feel like there should be a better way:</p>\n\n<pre><code>fn foo() {\n    let mut map: HashMap&lt;&amp;str, Vec&lt;&amp;str&gt;&gt; = HashMap::new();\n\n    let mut dummy: Vec&lt;&amp;str&gt; = Vec::new();\n    let mut ref = map.get_mut(\"whatever\").unwrap_or( &amp;dummy );\n\n    // Modify ref.\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435664194, "post_id": 31137113, "comment_id": 50284814, "body": "It is a well known limitation that you cannot usefully yield iterator elements that borrow from the iterator itself. Standard solutions: 1) Split iterator&#39;s data from the iterator itself. 2) Use a custom <code>next()</code> method that is not tied to the iterator trait."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435664216, "post_id": 31137113, "comment_id": 50284824, "body": "This is a standard problem people experience\u2014the design of <code>Iterator</code> is for separate iterator objects, not to mutate the source object."}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435664327, "post_id": 31137113, "comment_id": 50284899, "body": "@ChrisMorgan But I dont mutate the source object! I only mutate the iterator object. I do not even have the source object."}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435664457, "post_id": 31137113, "comment_id": 50285003, "body": "@bluss If I move array out of the iterator, than, since iterator has to mutate it, I will need a mutable reference. Therefore, I cannot return an immutable reference to that array. And this is the problem ChrisMorgan has addressed, I think."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435665238, "post_id": 31137113, "comment_id": 50285496, "body": "@monnoroch: rather, you are mutating the source object and do not have an iterator object. When returning references, the source object is what you return references to the contents of."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1435711289, "post_id": 31137113, "comment_id": 50311623, "body": "If you accept a generic iterator, then you can expect, for a sufficiently-long iterator, <code>let foo = iterator.next(); let bar = iterator.next()</code> to work (needed for eg. <code>iterator.peek()</code>). Thus, multiple results must be able to be referenced at once. You can circumvent this with interior mutability, but that&#39;s not particularly user-friendly. I suggest using a different trait."}], "owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 64, "favorite_count": 0, "closed_date": 1435667002, "answer_count": 0, "score": 0, "last_activity_date": 1435664168, "creation_date": 1435663927, "last_edit_date": 1435664168, "question_id": 31137113, "link": "https://stackoverflow.com/questions/31137113/rust-lifetimes-again", "closed_reason": "Duplicate", "title": "Rust lifetimes again", "body": "<p>So here I wrote the iterator for generating permutations:</p>\n\n<pre><code>pub struct Permutations {\n    size: usize,\n    arr: Vec&lt;usize&gt;,\n}\n\nimpl Permutations {\n    pub fn new(size: usize) -&gt; Permutations {\n        Permutations{\n            size: size,\n            arr: (0..size).collect::&lt;Vec&lt;_&gt;&gt;(),\n        }\n    }\n}\n\nimpl Iterator for Permutations {\n    type Item = Vec&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // some complex code here\n        if ok { Some(self.arr.clone()) } else { None }\n    }\n}\n</code></pre>\n\n<p>Now, what I want is to not clone the vector each time, and return a constant reference. So I write:</p>\n\n<pre><code>impl Iterator for Permutations {\n    type Item = &amp;Vec&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // some complex code here\n        if ok { Some(self.arr.clone()) } else { None }\n    }\n}\n</code></pre>\n\n<p>And of course this does not compile, because I need to specify the lifetime. Ok, let's give it a try:</p>\n\n<pre><code>impl&lt;'a&gt; Iterator for Permutations {\n    type Item = &amp;'a Vec&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // some complex code here\n        if ok { Some(&amp;self.arr) } else { None }\n    }\n}\n</code></pre>\n\n<p>Now I get an error:</p>\n\n<pre><code>error: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n</code></pre>\n\n<p>So, I have no idea, what that means, but okay, I guess we need to bind that 'a lifetime to self somehow. After some poking around and fighting with hard-to-understand errors this came out:</p>\n\n<pre><code>use std::marker::PhantomData;\n\npub struct Permutations&lt;'a&gt; {\n    size: usize,\n    arr: Vec&lt;usize&gt;,\n    p: PhantomData&lt;&amp;'a Vec&lt;usize&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Permutations&lt;'a&gt; {\n    pub fn new(size: usize) -&gt; Permutations&lt;'a&gt; {\n        Permutations{\n            size: size,\n            arr: (0..size).collect::&lt;Vec&lt;_&gt;&gt;(),\n            p: PhantomData,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for Permutations&lt;'a&gt; {\n    type Item = &amp;'a Vec&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // some complex code here\n        if ok { Some(&amp;self.arr) } else { None }\n    }\n}\n</code></pre>\n\n<p>But again there's an error, though kinda understandable one:</p>\n\n<pre><code>error: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n    return Some(&amp;self.arr);\nhelp: consider using an explicit lifetime parameter as shown: fn next(&amp;'a mut self) -&gt; Option&lt;Self::Item&gt;\n</code></pre>\n\n<p>Okay! That is surprisingly actually useful! Let's add the explicit lifetime:</p>\n\n<pre><code>impl&lt;'a&gt; Iterator for Permutations&lt;'a&gt; {\n    type Item = &amp;'a Vec&lt;usize&gt;;\n\n    fn next(&amp;'a mut self) -&gt; Option&lt;Self::Item&gt; {\n        // some complex code here\n        if ok { Some(&amp;self.arr) } else { None }\n    }\n}\n</code></pre>\n\n<p>Bam! Just as I thought: not useful at all.</p>\n\n<pre><code>error: method `next` has an incompatible type for trait: expected bound lifetime parameter , found concrete lifetime\n</code></pre>\n\n<p>Sooo... yeah. How do I do this simpliest thing in the world?</p>\n"}, {"tags": ["rust", "capnproto"], "comments": [{"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 0, "creation_date": 1435652129, "post_id": 31132795, "comment_id": 50276890, "body": "Wouldn&#39;t simply creating a new copy do the trick? <code>T(x).swap(x);</code>"}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "reply_to_user": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 0, "creation_date": 1435652638, "post_id": 31132795, "comment_id": 50277202, "body": "I&#39;d imagine so.  I said that I&#39;m okay with doing that, as I must encrypt everything anyways.  I asked this question because it&#39;ll be slower to recopy than to garbage collect.  It might however be that no garbage collector exists but other fast tricks exist.  I donno."}, {"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "edited": false, "score": 1, "creation_date": 1435652702, "post_id": 31132795, "comment_id": 50277244, "body": "Could you please post the benchmarks that show that &quot;it&#39;ll be slower to recopy than to garbage collect&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435670293, "post_id": 31132795, "comment_id": 50289311, "body": "Questions should have <i>one question</i>. I see at least 3 different ones, including &quot;how do I use &lt;external library&gt;&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 0, "creation_date": 1435695808, "post_id": 31144395, "comment_id": 50305958, "body": "Wouldn&#39;t most mutations modify the data in place anyway, avoiding extra allocations/garbage?"}, {"owner": {"reputation": 30998, "user_id": 2686899, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/StqEe.jpg?s=128&g=1", "display_name": "Kenton Varda", "link": "https://stackoverflow.com/users/2686899/kenton-varda"}, "reply_to_user": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 0, "creation_date": 1435696523, "post_id": 31144395, "comment_id": 50306312, "body": "@aij If you&#39;re only modifying an integer (or other primitive), sure. But if you&#39;re replacing a string, or extending a list, or removing a sub-object, etc., then you have a problem."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1435742488, "post_id": 31144395, "comment_id": 50323493, "body": "Alright that&#39;s great.  I&#39;m completely happy moving the data since I must encrypt it anyways."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1436808485, "post_id": 31144395, "comment_id": 50756069, "body": "If I understand, Cap&#39;n Proto messages are a bunch of segments with the arena spanning the collection of segments, maybe managing the segmenting could provide a relatively painless hack for doing this."}, {"owner": {"reputation": 30998, "user_id": 2686899, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/StqEe.jpg?s=128&g=1", "display_name": "Kenton Varda", "link": "https://stackoverflow.com/users/2686899/kenton-varda"}, "reply_to_user": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1436823684, "post_id": 31144395, "comment_id": 50764266, "body": "@JeffBurdges You could fairly easily allocate a new segment for every object, but it won&#39;t perform as well. Cap&#39;n Proto optimizes for big segments, and the assumption that pointers don&#39;t usually cross segment boundaries. But with that said, this could be an interesting idea to explore as a way to trade off performance for ease of use."}], "tags": [], "owner": {"reputation": 30998, "user_id": 2686899, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/StqEe.jpg?s=128&g=1", "display_name": "Kenton Varda", "link": "https://stackoverflow.com/users/2686899/kenton-varda"}, "is_accepted": true, "score": 4, "last_activity_date": 1435684485, "creation_date": 1435684485, "answer_id": 31144395, "question_id": 31132795, "link": "https://stackoverflow.com/questions/31132795/mutable-state-with-capn-proto/31144395#31144395", "title": "Mutable state with Cap&#39;n proto", "body": "<p>The only way to reclaim wasted space is to copy the message into a new MessageBuilder. Only the \"used\" parts will be copied. This effectively is \"GC\" -- many of the best GC algorithms actually move data, which is what you'd be doing here.</p>\n\n<p>There is no practical way to implement non-moving GC of arena-allocated Cap'n Proto messages.</p>\n\n<p>I am considering extending the Cap'n Proto code generator in C++ to also generate a set of classes appropriate for representing the same data structures on the heap, such that you can modify the structure over time. Converting between the heap representation and the arena representation will require a copy, of course. But, this isn't yet implemented and I don't have any timeline. (The Rust implementation would likely get a similar update.)</p>\n"}], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 602, "favorite_count": 0, "accepted_answer_id": 31144395, "answer_count": 1, "score": 0, "last_activity_date": 1435684485, "creation_date": 1435651497, "last_edit_date": 1435670320, "question_id": 31132795, "link": "https://stackoverflow.com/questions/31132795/mutable-state-with-capn-proto", "title": "Mutable state with Cap&#39;n proto", "body": "<p>How should one use Cap'n Proto for an application's mutable state similar to how Protobuf gets used?  Is there a garbage collector?</p>\n\n<p>Kenton Varda confirmed in <a href=\"https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html\" rel=\"nofollow\">his comparison of Cap'n Proto, FlatBuffers, and SBE</a> that Cap'n Proto uses arena allocators internally to messages.  A single message would grow without bound if one edits it over an extended period, say due to being written to disk and reloaded.</p>\n\n<p>Are there any garbage collectors for Cap'n Proto to rearange the message and reclaim any wasted space?  Would a garbage collector be the optimal approach?  If not, or if not exists, then what is the recommended approach? </p>\n\n<p>I'm actually writing a Rust program that must only save encrypted data anyways.  I'm therefore okay with recopying the whole message structure, but I'm curious about the options more widely.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1435717500, "post_id": 31130408, "comment_id": 50313060, "body": "<i>How does one go about converting the body string into to correct kind of tendril that parse is expecting?</i> This is not a parse error; the parser is only concerned with syntax. Rather, this is a semantic error."}], "answers": [{"comments": [{"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 0, "creation_date": 1435644014, "post_id": 31130554, "comment_id": 50272752, "body": "Thanks Chris.  My cargo.toml file was pointing to &quot;<a href=\"https://github.com/kmcallister/tendril\" rel=\"nofollow noreferrer\">github.com/kmcallister/tendril</a>&quot; which seemed to be causing the problem.  I changed it to just [dependencies.tendril] and it was able to build."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 2, "creation_date": 1435645086, "post_id": 31130554, "comment_id": 50273191, "body": "@mpiccolo: yep, the git version versus the crates.io version. Note that <code>[dependencies]</code> <code>tendril = &quot;0.1&quot;</code> works too, being equivalent to <code>[dependencies.tendril]</code> <code>version = 0.1</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1435643544, "creation_date": 1435643544, "answer_id": 31130554, "question_id": 31130408, "link": "https://stackoverflow.com/questions/31130408/what-does-expected-struct-foo-found-a-different-struct-foo-mean/31130554#31130554", "title": "What does &quot;expected struct Foo, found a different struct Foo&quot; mean?", "body": "<p>This suggests that you\u2019ve got multiple versions of the <code>tendril</code> crate being compiled and you\u2019re trying accidentally to mix them. Make sure any things depending on <code>tendril</code> are depending on the same <code>tendril</code>.</p>\n"}], "owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 657, "favorite_count": 0, "accepted_answer_id": 31130554, "answer_count": 1, "score": 3, "last_activity_date": 1435670136, "creation_date": 1435642892, "last_edit_date": 1435670136, "question_id": 31130408, "link": "https://stackoverflow.com/questions/31130408/what-does-expected-struct-foo-found-a-different-struct-foo-mean", "title": "What does &quot;expected struct Foo, found a different struct Foo&quot; mean?", "body": "<p>I am trying to build an HTML web-scraper and am hitting a snag that I can't get past.</p>\n\n<pre><code>#![feature(libc)]\n#![feature(rustc_private)]\nextern crate libc;\n\nextern crate url;\nextern crate hyper;\nextern crate html5ever;\nextern crate serialize;\nextern crate html5ever_dom_sink;\n\n#[macro_use]\nextern crate tendril;\n\nuse tendril::{StrTendril, SliceExt};\nuse std::ffi::{CStr,CString};\nuse tendril::{ByteTendril, ReadExt};\nuse html5ever::{parse, one_input};\nuse html5ever_dom_sink::common::{Document, Doctype, Text, Comment, Element};\nuse html5ever_dom_sink::rcdom::{RcDom, Handle};\n\nuse hyper::Client;\nuse hyper::header::Connection;\nuse std::io::Read;\n\nfn get_page(url: &amp;str) -&gt; String {\n    let mut client = Client::new();\n    let mut res = client.get(url)\n       // set a header\n       .header(Connection::close())\n       // let 'er go!\n       .send().unwrap();\n\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body).unwrap();\n\n    body\n}\n\n#[no_mangle]\npub extern fn parse_page(url: *const libc::c_char) {\n  let url_cstr = unsafe { CStr::from_ptr(url) };  // &amp;std::ffi::c_str::CStr\n  let url_and_str = url_cstr.to_str().unwrap();  // &amp;str\n\n  let body = get_page(url_and_str);\n\n  let body_tendril = body.to_tendril();\n  let body_tendril = body_tendril.try_reinterpret().unwrap();\n\n  let dom: RcDom = parse(one_input(body_tendril), Default::default());\n\n\n  // let c_body = CString::new(body).unwrap();  // std::ffi::c_str::CString\n\n  // c_body.into_ptr()\n}\n</code></pre>\n\n<p>When I build this lib with <code>cargo</code> I am getting the error:</p>\n\n<pre><code>error: type mismatch resolving `&lt;core::option::IntoIter&lt;tendril::tendril::Tendril&lt;_&gt;&gt; as core::iter::Iterator&gt;::Item == tendril::tendril::Tendril&lt;tendril::fmt::UTF8&gt;`:\nexpected struct `tendril::tendril::Tendril`,\nfound a different struct `tendril::tendril::Tendril` \n</code></pre>\n\n<p>How does one go about converting the body string into to correct kind of tendril that parse is expecting?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 2, "creation_date": 1435623676, "post_id": 31127589, "comment_id": 50267501, "body": "Are destructors going to be called when you use <code>std::process::exit</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 4, "creation_date": 1435623882, "post_id": 31127589, "comment_id": 50267538, "body": "@WiSaGaN: \u201cNote that because this function never returns, and that it terminates the process, no destructors on the current stack or any other thread&#39;s stack will be run. If a clean shutdown is needed it is recommended to only call this function at a known point where there are no more destructors left to run.\u201d"}, {"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "edited": false, "score": 4, "creation_date": 1461165891, "post_id": 31127589, "comment_id": 61077608, "body": "Any reason why we can&#39;t simply return an error-code from main like usual?  <code>std::process::exit</code> seems rather cumbersome to use."}, {"owner": {"reputation": 8957, "user_id": 1073868, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/397bb6e2c9cc191a20143ca8566385c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/1073868/dan"}, "edited": false, "score": 0, "creation_date": 1471347273, "post_id": 31127589, "comment_id": 65300783, "body": "The note on destructors shouldn&#39;t matter too much as long as you&#39;re using <code>std::process::exit</code> in the main method instead of arbitrarily in the app due to guarantees rust makes about ownership. I foresee it becoming a bit trickier when multithreading comes into play though."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 7, "last_activity_date": 1435623460, "creation_date": 1435623460, "answer_id": 31127589, "question_id": 31127565, "link": "https://stackoverflow.com/questions/31127565/is-it-ok-to-return-in-main/31127589#31127589", "title": "Is it ok to return in main?", "body": "<p>It's perfectly fine at the language level to return early like this. In this case, you might also like the <a href=\"http://doc.rust-lang.org/std/process/fn.exit.html\"><code>std::process::exit</code></a> function, which also allows setting the return code of the process.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1387, "favorite_count": 1, "accepted_answer_id": 31127589, "answer_count": 1, "score": 3, "last_activity_date": 1435624870, "creation_date": 1435623297, "last_edit_date": 1435624870, "question_id": 31127565, "link": "https://stackoverflow.com/questions/31127565/is-it-ok-to-return-in-main", "title": "Is it ok to return in main?", "body": "<p>Since mains return type is an empty tuple <code>()</code>, is it considered a work-around to use <code>return;</code> in <code>fn main()</code> ? I'd like to end my program but don't want to <code>panic!</code> , I just want to calmly end. Is there a standard way to end main early? Or is this ok to do? I come from a C++ background where if you need to return early from a function which does not return any value, you <em>probably</em> shouldn't be using a <code>void</code> to begin with, so I'm wondering if this is the same case with no return type for <code>main()</code>?</p>\n\n<pre><code>fn main() {\n    // ...\n\n    // if no cline args display usage and end\n    if matches.free.is_empty() {\n        print_usage(&amp;program, options);\n        return;\n\n    // program continues\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435652120, "post_id": 31126366, "comment_id": 50276883, "body": "It appears you are out of luck :( A quick request to the authors might get it added ^^"}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435669284, "post_id": 31126366, "comment_id": 50288508, "body": "Ok, what&#39;s the best way how to contact authors, please?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435669402, "post_id": 31126366, "comment_id": 50288613, "body": "Open an issue on github, I would assume."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435669444, "post_id": 31126366, "comment_id": 50288641, "body": "Best idea, of course :) Thanks.."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435671791, "post_id": 31126366, "comment_id": 50290454, "body": "<a href=\"https://github.com/lifthrasiir/rust-chrono/issues/40\" rel=\"nofollow noreferrer\">github.com/lifthrasiir/rust-chrono/issues/40</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9784, "user_id": 227755, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/4a4377b8beefc590e722a17b7fa5da66?s=128&d=identicon&r=PG", "display_name": "nurettin", "link": "https://stackoverflow.com/users/227755/nurettin"}, "edited": false, "score": 3, "creation_date": 1468773529, "post_id": 31816287, "comment_id": 64253475, "body": "this is nice, you have to jump through hoops to get milliseconds in C++. I wish rust was 30 years old."}, {"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "edited": false, "score": 0, "creation_date": 1487058461, "post_id": 31816287, "comment_id": 71601291, "body": "As an aside, <code>&quot;%F %T&quot;</code> is a strftime shortcut for <code>&quot;%Y-%m-%d %H:%M:%S&quot;</code>. Also the description of <code>%D</code> is always worthy of a giggle. <a href=\"http://man7.org/linux/man-pages/man3/strftime.3.html\" rel=\"nofollow noreferrer\">man7.org/linux/man-pages/man3/strftime.3.html</a>"}], "tags": [], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "is_accepted": false, "score": 5, "last_activity_date": 1438711745, "creation_date": 1438711745, "answer_id": 31816287, "question_id": 31126366, "link": "https://stackoverflow.com/questions/31126366/how-to-parse-a-date-with-milliseconds/31816287#31816287", "title": "How to parse a date with milliseconds?", "body": "<pre><code>extern crate time;\n\nfn main() {\n    match time::strptime(\"2014-03-10 11:20:34.3454\",\n                         \"%Y-%m-%d %H:%M:%S.%f\")\n    {\n        Ok(v) =&gt; println!(\"{}\", time::strftime(\"%Y/%m/%d %H:%M:%S.%f\",\n                                               &amp;v).unwrap()),\n        Err(e) =&gt; println!(\"Error: {}\", e),\n    };\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>2014/03/10 11:20:34.345400000\n</code></pre>\n\n<p><code>strptime()</code> and <code>strftime()</code> are quite helpful when using time values. Plus, they tend to work in most languages so learning it once pays well over time.</p>\n"}], "owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2248, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1438711745, "creation_date": 1435615522, "last_edit_date": 1435618235, "question_id": 31126366, "link": "https://stackoverflow.com/questions/31126366/how-to-parse-a-date-with-milliseconds", "title": "How to parse a date with milliseconds?", "body": "<p>I have a date in the following format: <code>\"2014-03-10 11:20:34.3454\"</code>. How can I parse this date?</p>\n\n<p>The <a href=\"https://lifthrasiir.github.io/rust-chrono/chrono/\">chrono doc</a> mentions parsing year, month, ..., minutes and seconds. No milliseconds. Also when I look at <a href=\"https://github.com/ogham/rust-datetime/blob/master/src/format.rs\">rust-datetime</a> again - no milliseconds.</p>\n\n<p>On the other hand, I can create a <code>DateTime</code> like this <code>UTC.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10)</code>. So Rust knows milliseconds...</p>\n"}, {"tags": ["vector", "concatenation", "rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1435717145, "post_id": 31126048, "comment_id": 50312984, "body": "<code>- vecs.iter(): Iter&lt;T=Vec&lt;String&gt;, Item=Vec&lt;String&gt;&gt;</code>: this is incorrect. There is no associated type named <code>Item</code> on struct <code>Iter</code> (only traits may have associated types). <code>vecs.iter()</code> is of type <code>Iter&lt;Vec&lt;String&gt;&gt;</code>, but <a href=\"http://doc.rust-lang.org/stable/std/slice/struct.Iter.html#implementations\" rel=\"nofollow noreferrer\">this type implements <code>Iterator&lt;Item=&amp;Vec&lt;String&gt;&gt;</code></a> (note the <code>&amp;</code>). When you <code>flat_map</code> this, you turn <code>&amp;Vec&lt;String&gt;</code> into <code>&amp;String</code>."}], "answers": [{"comments": [{"owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435614908, "post_id": 31126176, "comment_id": 50264869, "body": "This gives me some errors: `     build.rs:104:9: 104:12 error: cannot borrow immutable local variable <code>acc</code> as mutable     build.rs:104         acc.extend(v); v                          ^~~     note: in expansion of closure expansion     build.rs:103:53: 105:6 note: expansion site     build.rs:104:24: 104:25 error: use of moved value: <code>v</code> [E0382]     build.rs:104         acc.extend(v); v`"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435614944, "post_id": 31126176, "comment_id": 50264881, "body": "maybe because I didn&#39;t test compile it until after I submitted, but then I fixed it"}, {"owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435615363, "post_id": 31126176, "comment_id": 50265053, "body": "How can I independently learn about vecs.concat()? It&#39;s not on the API page for std::vec::Vec. I mean how am I supposed to find it if looking at the API doesn&#39;t give any hints? Even now that I empirically know it&#39;s there I can&#39;t figure out where it is defined."}, {"owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435615789, "post_id": 31126176, "comment_id": 50265215, "body": "As to your solution with fold(), thank you. Still, what I&#39;m after is learning how to achieve the needed result independently, so I would really like to use my code as the starting point and see how it can be improved to only use one collect() rather than rewritten."}, {"owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435617605, "post_id": 31126176, "comment_id": 50265853, "body": "Well, this answers my main question, and I would really like to mark your answer as solution, but OTOH I also would like to get an answer to the meta-questions (how to figure out types by looking at the API). Perhaps my question is too broad?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435619585, "post_id": 31126176, "comment_id": 50266413, "body": "The remark on <code>x.into_iter()</code> not being the method you think might be important"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1435620234, "post_id": 31126176, "comment_id": 50266609, "body": "Instead of <code>flat_map(|x| x.into_iter())</code>, just do <code>flat_map(|x| x)</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435620597, "post_id": 31126176, "comment_id": 50266708, "body": "@kirillkh <code>concat</code> utilizes automatic dereferencing, so is actually a function on <code>*Vec&lt;T&gt;</code>, which is the slice <code>[T]</code>. <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.concat\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.slice.html#method.concat</a>"}, {"owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "edited": false, "score": 0, "creation_date": 1435642106, "post_id": 31126176, "comment_id": 50271972, "body": "Thanks Veedrac. How would you go about finding <code>concat</code> if you didn&#39;t know it was there? I even tried to Google it with no luck."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1435616815, "last_edit_date": 1435616815, "creation_date": 1435614615, "answer_id": 31126176, "question_id": 31126048, "link": "https://stackoverflow.com/questions/31126048/concatenate-a-vector-of-vectors-of-strings/31126176#31126176", "title": "Concatenate a vector of vectors of strings", "body": "<p>I'd think about: why do you use iter() on the outer vec but into_iter() on the inner vecs? Using <code>into_iter()</code> is actually crucial, so that we don't have to copy first the inner vectors, then the strings inside, we just receive ownership of them.</p>\n\n<p>We can actually write this just like a summation: concatenate the vectors two by two. Since we always reuse the allocation &amp; contents of the same accumulation vector, this operation is linear time.</p>\n\n<p>To minimize time spent growing and reallocating the vector, calculate the space needed up front.</p>\n\n<pre><code>fn concat_vecs(vecs: Vec&lt;Vec&lt;String&gt;&gt;) -&gt; Vec&lt;String&gt; {\n    let size = vecs.iter().fold(0, |a, b| a + b.len());\n    vecs.into_iter().fold(Vec::with_capacity(size), |mut acc, v| {\n        acc.extend(v); acc\n    })\n}\n</code></pre>\n\n<p>If you do want to clone all the contents, there's already a method for that, and you'd just use <code>vecs.concat() /* -&gt; Vec&lt;String&gt; */</code></p>\n\n<hr>\n\n<p>The approach with <code>.flat_map</code> is fine, but if you don't want to clone the strings again you have to use <code>.into_iter()</code> on all levels: (<code>x</code> is <code>Vec&lt;String&gt;</code>).</p>\n\n<p><code>vecs.into_iter().flat_map(|x| x.into_iter()).collect()</code></p>\n\n<p>If instead you want to clone each string you can use this: (Changed <code>.into_iter()</code> to <code>.iter()</code> since <code>x</code> here is a <code>&amp;Vec&lt;String&gt;</code> and both methods actually result in the same thing!)</p>\n\n<p><code>vecs.iter().flat_map(|x| x.iter().map(Clone::clone)).collect()</code></p>\n"}], "owner": {"reputation": 144, "user_id": 3646645, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/853ceee504eed53fdd87e8cfd916e9b5?s=128&d=identicon&r=PG&f=1", "display_name": "kirillkh", "link": "https://stackoverflow.com/users/3646645/kirillkh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2363, "favorite_count": 0, "accepted_answer_id": 31126176, "answer_count": 1, "score": 4, "last_activity_date": 1435649829, "creation_date": 1435614001, "last_edit_date": 1495540376, "question_id": 31126048, "link": "https://stackoverflow.com/questions/31126048/concatenate-a-vector-of-vectors-of-strings", "title": "Concatenate a vector of vectors of strings", "body": "<p>I'm trying to write a function that receives a vector of vectors of strings and returns all vectors concatenated together, i.e. it returns a vector of strings.</p>\n\n<p>The best I could do so far has been the following:</p>\n\n<pre><code>fn concat_vecs(vecs: Vec&lt;Vec&lt;String&gt;&gt;) -&gt; Vec&lt;String&gt; {\n    let vals : Vec&lt;&amp;String&gt; = vecs.iter().flat_map(|x| x.into_iter()).collect();\n    vals.into_iter().map(|v: &amp;String| v.to_owned()).collect()\n}\n</code></pre>\n\n<p>However, I'm not happy with this result, because it seems I should be able to get <code>Vec&lt;String&gt;</code> from the first <code>collect</code> call, but somehow I am not able to figure out how to do it.</p>\n\n<p>I am even more interested to figure out <em>why</em> exactly the return type of <code>collect</code> is <code>Vec&lt;&amp;String&gt;</code>. I tried to deduce this from the API documentation and the source code, but despite my best efforts, I couldn't even understand the signatures of functions.</p>\n\n<p>So let me try and trace the types of each expression:</p>\n\n<pre><code>- vecs.iter(): Iter&lt;T=Vec&lt;String&gt;, Item=Vec&lt;String&gt;&gt;\n- vecs.iter().flat_map(): FlatMap&lt;I=Iter&lt;Vec&lt;String&gt;&gt;, U=???, F=FnMut(Vec&lt;String&gt;) -&gt; U, Item=U&gt;\n- vecs.iter().flat_map().collect(): (B=??? : FromIterator&lt;U&gt;)\n- vals was declared as Vec&lt;&amp;String&gt;, therefore \n      vals == vecs.iter().flat_map().collect(): (B=Vec&lt;&amp;String&gt; : FromIterator&lt;U&gt;). Therefore U=&amp;String.\n</code></pre>\n\n<p>I'm assuming above that the type inferencer is able to figure out that <code>U=&amp;String</code> based on the type of <code>vals</code>. But if I give the expression the explicit types in the code, this compiles without error:</p>\n\n<pre><code>fn concat_vecs(vecs: Vec&lt;Vec&lt;String&gt;&gt;) -&gt; Vec&lt;String&gt; {\n    let a: Iter&lt;Vec&lt;String&gt;&gt; = vecs.iter();\n    let b: FlatMap&lt;Iter&lt;Vec&lt;String&gt;&gt;, Iter&lt;String&gt;, _&gt; = a.flat_map(|x| x.into_iter());\n    let c = b.collect();\n    print_type_of(&amp;c);\n    let vals : Vec&lt;&amp;String&gt; = c;\n    vals.into_iter().map(|v: &amp;String| v.to_owned()).collect()\n}\n</code></pre>\n\n<p>Clearly, <code>U=Iter&lt;String&gt;</code>... Please help me clear up this mess.</p>\n\n<p><strong>EDIT:</strong> thanks to bluss' hint, I was able to achieve one <code>collect</code> as follows:</p>\n\n<pre><code>fn concat_vecs(vecs: Vec&lt;Vec&lt;String&gt;&gt;) -&gt; Vec&lt;String&gt; {\n    vecs.into_iter().flat_map(|x| x.into_iter()).collect()\n}\n</code></pre>\n\n<p>My understanding is that by using <code>into_iter</code> I transfer ownership of <code>vecs</code> to <code>IntoIter</code> and further down the call chain, which allows me to avoid copying the data inside the lambda call and therefore - magically - the type system gives me <code>Vec&lt;String&gt;</code> where it used to always give me <code>Vec&lt;&amp;String&gt;</code> before. While it is certainly very cool to see how the high-level concept is reflected in the workings of the library, I wish I had any idea how this is achieved.</p>\n\n<p><strong>EDIT 2:</strong> After a laborious process of guesswork, looking at API docs and using <a href=\"https://stackoverflow.com/a/29168659/3646645\">this method</a> to decipher the types, I got them fully annotated (disregarding the lifetimes):</p>\n\n<pre><code>fn concat_vecs(vecs: Vec&lt;Vec&lt;String&gt;&gt;) -&gt; Vec&lt;String&gt; {\n    let a: Iter&lt;Vec&lt;String&gt;&gt; = vecs.iter();\n    let f : &amp;Fn(&amp;Vec&lt;String&gt;) -&gt; Iter&lt;String&gt; = &amp;|x: &amp;Vec&lt;String&gt;| x.into_iter();\n    let b: FlatMap&lt;Iter&lt;Vec&lt;String&gt;&gt;, Iter&lt;String&gt;, &amp;Fn(&amp;Vec&lt;String&gt;) -&gt; Iter&lt;String&gt;&gt; = a.flat_map(f);\n    let vals : Vec&lt;&amp;String&gt; = b.collect();\n    vals.into_iter().map(|v: &amp;String| v.to_owned()).collect()\n}\n</code></pre>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1435612891, "post_id": 31125287, "comment_id": 50263979, "body": "Do you have a <code>use std::net::tcp::TcpStream;</code> anywhere in your project?"}, {"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1435613204, "post_id": 31125287, "comment_id": 50264136, "body": "Not anywhere I know of. If I include that the compiler complains about conflicting <code>TcpStream</code> definitions."}], "answers": [{"tags": [], "owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "is_accepted": true, "score": 2, "last_activity_date": 1435700892, "creation_date": 1435700892, "answer_id": 31149119, "question_id": 31125287, "link": "https://stackoverflow.com/questions/31125287/importing-miotcptcpstream-but-get-stdnettcptcpstream/31149119#31149119", "title": "Importing mio::tcp::TcpStream but get std::net::tcp::TcpStream", "body": "<p>It turns out this is a problem with the published version of the <code>mio</code> package.</p>\n\n<p>Adding the following to <code>Cargo.toml</code> pulls down and uses the latest working version:</p>\n\n<pre><code>[dependencies.mio]\ngit = \"https://github.com/carllerche/mio.git\"\n</code></pre>\n"}], "owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 31149119, "answer_count": 1, "score": -3, "last_activity_date": 1435700892, "creation_date": 1435610861, "last_edit_date": 1435611347, "question_id": 31125287, "link": "https://stackoverflow.com/questions/31125287/importing-miotcptcpstream-but-get-stdnettcptcpstream", "title": "Importing mio::tcp::TcpStream but get std::net::tcp::TcpStream", "body": "<p>In trying to adapt an <a href=\"https://github.com/dpc/mioecho\" rel=\"nofollow\">example server</a>, not sure what to make of this behaviour where the <code>TcpStream</code> I'm asking for and the one I'm getting appear to be entirely different.</p>\n\n<p>Example struct definition:</p>\n\n<pre><code>use mio::tcp::TcpStream;\n\nstruct Connection {\n    socket: TcpStream\n}\n</code></pre>\n\n<p>Later there's a function defined for <code>Connection</code>:</p>\n\n<pre><code>fn writable(&amp;mut self, event_loop: &amp;mut EventLoop&lt;Server&gt;) -&gt; Result&lt;()&gt; {\n    loop {\n        let (len, res) = {\n            let buf = &amp;self.buffer.bytes();\n            let len = buf.len();\n            let res = self.socket.write_slice(buf);\n            (len, res)\n        };\n</code></pre>\n\n<p>An error on <code>write_slice</code> shows up with:</p>\n\n<pre><code>error: type `std::net::tcp::TcpStream` does not implement any method in scope named `write_slice`\n</code></pre>\n\n<p>Now <code>std::net::tcp::TcpStream</code> doesn't implement this, but the <a href=\"https://carllerche.github.io/mio/mio/tcp/struct.TcpStream.html\" rel=\"nofollow\"><code>mio::tcp::TcpStream</code></a> does. Why would one get substituted for the other?</p>\n\n<p>Setting this as an alias, <code>use mil::tcp::TcpStream as MioTcpStream</code> doesn't affect this either.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435612263, "post_id": 31125453, "comment_id": 50263700, "body": "I tried this now, and it works -- however, since we&#39;re modifying the files, vim is complaining each time I save (because &#39;the file has been modified&#39;!)"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435612813, "post_id": 31125453, "comment_id": 50263940, "body": "Ouch -- going down the quick-and-dirty road, try <code>:set autoread</code>"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435613507, "post_id": 31125453, "comment_id": 50264281, "body": "See edit: I propose to use <code>cargo clean</code> as an alternative."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435613668, "post_id": 31125453, "comment_id": 50264359, "body": "It might require a bit of extra work to make it work with <code>watch</code>, though."}, {"owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435676612, "post_id": 31125453, "comment_id": 50294376, "body": "This works, but I&#39;m having a few dependencies, including sdl2, so compile time is about 30 sec."}, {"owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "edited": false, "score": 0, "creation_date": 1435677485, "post_id": 31125453, "comment_id": 50295002, "body": "However, It did work pretty good to simply <code>touch</code> <i>one</i> file - the whole project is still compiled, and all errors show."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "edited": false, "score": 0, "creation_date": 1570908921, "post_id": 31125453, "comment_id": 103068396, "body": "I noticed that currently (using stable or nightly, on Windows), the first part of this answer is wrong. Touching does not bring back clippy diagnostics. Even changing contents such that previously reported line numbers are off, doesn&#39;t motivate clippy to repeat. Apparently it strongly adheres to &quot;Listen carefully, I shall say this only once&quot;. <code>cargo clean</code> is the only option."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 4, "last_activity_date": 1538573710, "last_edit_date": 1538573710, "creation_date": 1435611542, "answer_id": 31125453, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings/31125453#31125453", "title": "Is it possible to have Cargo always show warnings?", "body": "<p>Warnings only happen when Rust recompiles your files; however it caches as much as possible and if something hasn't changed it will happily skip an useless compile. There's currently no option in Cargo to force rebuild. </p>\n\n<p>A quick and dirty solution, but easy to setup, is to <code>touch</code> your source files so that Cargo believes they changed:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cd /path/to/project/root\n$ ls\nCargo.lock Cargo.toml src        target\n$ cargo build\n     Compiling abc v0.1.0 (file:///private/tmp/b/abc)\n  src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)] on by default\n  src/main.rs:2     let x: u8 = 123;\n                        ^\n$ cargo build\n$ touch $(find src)\n$ cargo build\n     Compiling abc v0.1.0 (file:///private/tmp/b/abc)\n  src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)] on by default\n  src/main.rs:2     let x: u8 = 123;\n                        ^\n</code></pre>\n\n<p>Another solution, maybe better, would be to clean off the <code>target</code> directory containing binary artifacts, with <code>cargo clean</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build\n   Compiling abc v0.1.0 (file:///private/tmp/b/abc)\nsrc/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)] on by default\nsrc/main.rs:2     let x: u8 = 123;\n                      ^\n$ cargo build\n$ cargo clean\n$ cargo build\n   Compiling abc v0.1.0 (file:///private/tmp/b/abc)\nsrc/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)] on by default\nsrc/main.rs:2     let x: u8 = 123;\n                      ^\n</code></pre>\n\n<p>It has the advantage of not triggering Vim \"file changed!\" warnings and is also runnable anywhere within the project dir, not just the root.</p>\n"}, {"tags": [], "owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "is_accepted": false, "score": 1, "last_activity_date": 1535477465, "last_edit_date": 1535477465, "creation_date": 1535477098, "answer_id": 52063377, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings/52063377#52063377", "title": "Is it possible to have Cargo always show warnings?", "body": "<p>This is another variant of the touch pattern described in mdups answer.</p>\n\n<p>Use this command to check for type errors and display all warnings every run, even when no code change has occurred:</p>\n\n<p><code>touch src/my_tra_la_la.rs &amp;&amp; clear &amp;&amp; clear &amp;&amp; cargo check</code></p>\n\n<p>The <code>clear &amp;&amp; clear &amp;&amp;</code> part is mostly irrelevant to this answer but it's a mandatory part of every build command for me, to avoid having the new output visually merge with output from the previous run.</p>\n\n<p>It requires two things, first <code>mod my_tra_la_la;</code> in <code>main.rs</code>, or in <code>lib.rs</code> if it's a library.</p>\n\n<p>The second part is optional but I think it's nice to add some documentation to this special source file, <code>src/my_tra_la_la.rs</code>:</p>\n\n<pre><code>//! The only purpose of this file is to act as a target for the `touch` command\n//! in order to force recompilation of this otherwise meaningless file and in\n//! turn to force rustc to display warnings, every time.\n//!\n//! touch src/my_tra_la_la.rs &amp;&amp; clear &amp;&amp; clear &amp;&amp; cargo check\n//!\n//! Mmm...my ding ding dong\n</code></pre>\n\n<p>The whole point of a dedicated touch file like this is to avoid the need to ever have it open in your code editor and avoid popups and warnings like \"file changed!\" while working.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1538573912, "last_edit_date": 1538573912, "creation_date": 1538573568, "answer_id": 52628219, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings/52628219#52628219", "title": "Is it possible to have Cargo always show warnings?", "body": "\n\n<p>A solution, albeit temporarily, was to <code>touch</code> a file I rarely edit. This way, I'm avoiding the <code>this file has been changed</code> problem, and also don't need to clean the whole project all the time.</p>\n\n<p>In addition, I managed to get colors in as well (cargo doesn't have a <code>--color</code> option), by not using <code>watch</code> at all, but by simply running the following script:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/sh\nwhile :\ndo\n    script -qc \"cargo build\" /dev/null &gt; .tmp\n    clear\n    cat .tmp\n    sleep 2 # or whatever\n    touch src/somefile.rs\ndone\n</code></pre>\n\n<p>The reason I'm writing and reading to <code>.tmp</code> is to make all the output appear at one (<code>rustc</code> outputs as it runs)</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1555009223, "post_id": 55636536, "comment_id": 97969725, "body": "<code>cargo check</code> does not solve this problem. Two back-to-back runs of <code>cargo check</code> (without changes to the source of the crate) will not report warnings on the second invocation."}, {"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "edited": false, "score": 0, "creation_date": 1588703034, "post_id": 55636536, "comment_id": 108999294, "body": "This was wrong when it was posted, but works now! The bug (or, whatever, undesired feature) has been fixed! <code>cargo check</code> and <code>cargo clippy</code> cache warnings :tada:"}], "tags": [], "owner": {"reputation": 405, "user_id": 3249609, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bc9d1f6c184f0f5466c90d65d04ba6e7?s=128&d=identicon&r=PG&f=1", "display_name": "rjloura", "link": "https://stackoverflow.com/users/3249609/rjloura"}, "is_accepted": false, "score": -3, "last_activity_date": 1554997783, "creation_date": 1554997783, "answer_id": 55636536, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings/55636536#55636536", "title": "Is it possible to have Cargo always show warnings?", "body": "<p>I've run into this before.  I use:</p>\n\n<pre><code>cargo check\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1576247183, "creation_date": 1576247183, "answer_id": 59324500, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings/59324500#59324500", "title": "Is it possible to have Cargo always show warnings?", "body": "<p>As of Rust 1.40, <a href=\"https://github.com/rust-lang/cargo/pull/7450\" rel=\"noreferrer\">Cargo will cache the compiler messages</a>. This means that even if the code doesn't need to be compiled again, the previous warnings will be printed out.</p>\n\n<h3>Rust 1.40</h3>\n\n<pre class=\"lang-none prettyprint-override\"><code>% cargo build\n   Compiling warnings v0.1.0 (/private/tmp/warnings)\nwarning: unused variable: `a`\n --&gt; src/main.rs:2:9\n  |\n2 |     let a = 42;\n  |         ^ help: consider prefixing with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 1.58s\n\n% cargo build\nwarning: unused variable: `a`\n --&gt; src/main.rs:2:9\n  |\n2 |     let a = 42;\n  |         ^ help: consider prefixing with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\n</code></pre>\n\n<h1>Rust 1.39</h1>\n\n<pre class=\"lang-none prettyprint-override\"><code>% cargo build\n   Compiling warnings v0.1.0 (/private/tmp/warnings)\nwarning: unused variable: `a`\n --&gt; src/main.rs:2:9\n  |\n2 |     let a = 42;\n  |         ^ help: consider prefixing with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n\n% cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\n</code></pre>\n"}], "owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3137, "favorite_count": 4, "accepted_answer_id": 31125453, "answer_count": 5, "score": 17, "last_activity_date": 1576247183, "creation_date": 1435610644, "last_edit_date": 1545382807, "question_id": 31125226, "link": "https://stackoverflow.com/questions/31125226/is-it-possible-to-have-cargo-always-show-warnings", "title": "Is it possible to have Cargo always show warnings?", "body": "<p>I'm using <code>watch</code> with <code>cargo</code>, in order to quickly see compile time errors. However, <code>cargo build</code> will only show errors when building the first time. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build\nCompiling clayman v0.0.1\nsrc/core_math/vector.rs:8:5: 13:6 warning: method is never used: `New`, #[warn(dead_code)] on by default\nsrc/core_math/vector.rs:8     pub fn New(x: i32, y: i32) -&gt; Vector {\nsrc/core_math/vector.rs:9         Vector {\nsrc/core_math/vector.rs:10             x: x,\nsrc/core_math/vector.rs:11             y: y\nsrc/core_math/vector.rs:12         }\nsrc/core_math/vector.rs:13     }\nsrc/core_math/vector.rs:8:5: 13:6 warning: method `New` should have a snake case name such as `new`, #[warn(non_snake_case)] on by default\nsrc/core_math/vector.rs:8     pub fn New(x: i32, y: i32) -&gt; Vector {\nsrc/core_math/vector.rs:9         Vector {\nsrc/core_math/vector.rs:10             x: x,\nsrc/core_math/vector.rs:11             y: y\nsrc/core_math/vector.rs:12         }\nsrc/core_math/vector.rs:13     }\nsrc/main.rs:28:9: 28:10 warning: unused variable: `v`, #[warn(unused_variables)] on by default\nsrc/main.rs:28     let v: vector::Vector;\n                   ^\n$ cargo build\n$\n</code></pre>\n\n<p>Which means I only get to see the warnings for a few seconds before <code>watch</code> gives me a clear screen. </p>\n\n<p>Is there any way to make <code>cargo build</code> always give me the warnings?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 1, "creation_date": 1435611994, "post_id": 31123882, "comment_id": 50263583, "body": "<code>MyEnum&lt;u32&gt;</code>  and <code>MyEnum&lt;String&gt;</code> are two different types, so their variants are not interchangable."}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1435615490, "post_id": 31123927, "comment_id": 50265108, "body": "This is exactly what you need to do. For large cases, you may be able to form a macro that helps."}], "tags": [], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "is_accepted": false, "score": 8, "last_activity_date": 1435605995, "creation_date": 1435605995, "answer_id": 31123927, "question_id": 31123882, "link": "https://stackoverflow.com/questions/31123882/how-to-map-a-parametrized-enum-from-a-generic-type-to-another/31123927#31123927", "title": "How to map a parametrized enum from a generic type to another?", "body": "<p>Well, this is actually an answer:</p>\n\n<pre><code>enum MyEnum&lt;T&gt; {\n    B,\n    C,\n    D(T),\n}\n\nfn trans(a: MyEnum&lt;u32&gt;) -&gt; MyEnum&lt;String&gt; {\n    match a {\n        MyEnum::D(i) =&gt; MyEnum::D(i.to_string()),\n        MyEnum::B =&gt; MyEnum::B,\n        MyEnum::C =&gt; MyEnum::C\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>But repeating all variants isn't acceptable when there's a lot of them..</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 10, "last_activity_date": 1588164565, "last_edit_date": 1588164565, "creation_date": 1435619287, "answer_id": 31127039, "question_id": 31123882, "link": "https://stackoverflow.com/questions/31123882/how-to-map-a-parametrized-enum-from-a-generic-type-to-another/31127039#31127039", "title": "How to map a parametrized enum from a generic type to another?", "body": "<p>I'd create a <code>map</code> method on your enum:</p>\n\n<pre><code>#[derive(Debug)]\nenum MyEnum&lt;T&gt; {\n    B,\n    C,\n    D(T),\n}\n\nimpl&lt;T&gt; MyEnum&lt;T&gt; {\n    fn map&lt;U&gt;(self, f: impl FnOnce(T) -&gt; U) -&gt; MyEnum&lt;U&gt; {\n        use MyEnum::*;\n\n        match self {\n            B =&gt; B,\n            C =&gt; C,\n            D(x) =&gt; D(f(x)),\n        }\n    }\n}\n\nfn main() {\n    let answer = MyEnum::D(42);\n    let answer2 = answer.map(|x| x.to_string());\n    println!(\"{:?}\", answer2);\n}\n</code></pre>\n\n<p>This is similar to existing <code>map</code> methods, such as <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.map\" rel=\"nofollow noreferrer\"><code>Option::map</code></a>.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1435650457, "creation_date": 1435650457, "answer_id": 31132505, "question_id": 31123882, "link": "https://stackoverflow.com/questions/31123882/how-to-map-a-parametrized-enum-from-a-generic-type-to-another/31132505#31132505", "title": "How to map a parametrized enum from a generic type to another?", "body": "<p>Some languages (like C++), use Duck Typing: if it quacks like a duck, it must be a duck, and therefore names matter. Rust does not.</p>\n\n<p>In Rust, names are just some display utility for us mere humans, the <code>B</code> in <code>MyEnum&lt;u32&gt;</code> and <code>MyEnum&lt;String&gt;</code> may happen to have the same visual representation, but they are completely different syntactic entities as far as the language is concerned.</p>\n\n<hr>\n\n<p>There are multiple ways to alleviate your pain, though:</p>\n\n<ul>\n<li>a code generation plugin or <code>build.rs</code> script can be used as well</li>\n<li>a macro can be used to automate the mapping</li>\n<li>a manual mapping can be done, it's a one shot effort after all</li>\n<li>the code can be restructured to separate type-dependent from type-independent variants</li>\n</ul>\n\n<p>I'll show-case the latter:</p>\n\n<pre><code>enum MyEnumImpl {\n    A,\n    B,\n    C,\n}\n\nenum MyEnum&lt;T&gt; {\n    Independent(MyEnumImpl),\n    Dependent(T),\n}\n</code></pre>\n\n<p>Obviously, the latter makes it much easier to manually map things.</p>\n"}, {"tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": true, "score": 2, "last_activity_date": 1435782523, "creation_date": 1435782523, "answer_id": 31171047, "question_id": 31123882, "link": "https://stackoverflow.com/questions/31123882/how-to-map-a-parametrized-enum-from-a-generic-type-to-another/31171047#31171047", "title": "How to map a parametrized enum from a generic type to another?", "body": "<pre><code>macro_rules! partial_enum {\n    ($name: ident, $some: ident, $($none: ident),+) =&gt; {\n        #[derive(Debug)]\n        enum $name&lt;T&gt; {\n            $some(T),\n            $($none),+\n        }\n        impl&lt;T&gt; $name&lt;T&gt; {\n            fn convert&lt;U&gt;(self) -&gt; Result&lt;$name&lt;U&gt;, T&gt; {\n                match self {\n                    $name::$some(x) =&gt; Err(x),\n                    $($name::$none =&gt; Ok($name::$none)),+\n                }\n            }\n        }\n    }\n}\npartial_enum!(MyEnum, D, B, C);\nfn trans(a: MyEnum&lt;u32&gt;) -&gt; MyEnum&lt;String&gt; {\n    let a_split: Result&lt;MyEnum&lt;String&gt;, u32&gt; = a.convert();\n    match a_split {\n        Ok(is_none) =&gt; is_none,\n        Err(not_none) =&gt; MyEnum::D(not_none.to_string()),\n    }\n}\nfn main() {\n    println!(\"{:?}\", trans(MyEnum::D(13)));\n}\n</code></pre>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7589, "favorite_count": 3, "accepted_answer_id": 31171047, "answer_count": 4, "score": 10, "last_activity_date": 1588164565, "creation_date": 1435605855, "last_edit_date": 1481052599, "question_id": 31123882, "link": "https://stackoverflow.com/questions/31123882/how-to-map-a-parametrized-enum-from-a-generic-type-to-another", "title": "How to map a parametrized enum from a generic type to another?", "body": "<p>If I have a type like <code>MyEnum&lt;T&gt;</code>, how can I map it in cases where not every variant is parameterized?</p>\n\n<p>For example, I'd like to convert from <code>MyEnum&lt;u32&gt;</code> to <code>MyEnum&lt;String&gt;</code>:</p>\n\n<pre><code>enum MyEnum&lt;T&gt; {\n    B,\n    C,\n    D(T),\n}\n\nfn trans(a: MyEnum&lt;u32&gt;) -&gt; MyEnum&lt;String&gt; {\n    match a {\n        MyEnum::D(i) =&gt; MyEnum::D(i.to_string()),\n        other_cases =&gt; other_cases,\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>This fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src/main.rs:8:9\n   |\n8  |         match a {\n   |         ^ expected struct `std::string::String`, found u32\n   |\n   = note: expected type `MyEnum&lt;std::string::String&gt;`\n   = note:    found type `MyEnum&lt;u32&gt;`\nnote: match arm with an incompatible type\n  --&gt; src/main.rs:10:28\n   |\n10 |             other_cases =&gt; other_cases,\n   |                            ^^^^^^^^^^^\n</code></pre>\n\n<p>Instead of the <code>other_cases =&gt; other_cases</code> line, I tried this, also without success:</p>\n\n<pre><code>other_cases =&gt; {\n    let o: MyEnum&lt;String&gt; = other_cases;\n    o\n}\n</code></pre>\n"}, {"tags": ["multithreading", "parallel-processing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521422297, "post_id": 31123137, "comment_id": 85709351, "body": "Would you mind if I updated this answer to use crossbeam or scoped_threadpool? Of course, you are welcome to update it yourself, if you&#39;d prefer."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521429659, "post_id": 31123137, "comment_id": 85710906, "body": "Sure, go ahead. Unfortunately, I don&#39;t think I have enough time to do it..."}, {"owner": {"reputation": 1158, "user_id": 4956078, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44600007f35ab98b7badbf1110df0687?s=128&d=identicon&r=PG&f=1", "display_name": "JMAA", "link": "https://stackoverflow.com/users/4956078/jmaa"}, "edited": false, "score": 0, "creation_date": 1534434890, "post_id": 31123137, "comment_id": 90713491, "body": "For people finding this now: <code>thread::scoped</code> has been removed <a href=\"https://stackoverflow.com/questions/31121250/consume-non-overlapping-vector-chunks-and-combine-results\" title=\"consume non overlapping vector chunks and combine results\">stackoverflow.com/questions/31121250/&hellip;</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1435603732, "last_edit_date": 1435603732, "creation_date": 1435603278, "answer_id": 31123137, "question_id": 31121250, "link": "https://stackoverflow.com/questions/31121250/consume-non-overlapping-vector-chunks-and-combine-results/31123137#31123137", "title": "Consume non-overlapping vector chunks, and combine results", "body": "<p>Well, this is an ideal application for the unstable <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"nofollow\"><code>thread::scoped()</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(scoped)]\nuse std::thread::{self, JoinGuard};\n\n// tunable\nconst NUMTHREADS: i32 = 4;\n\nfn f(val: i32) -&gt; i32 {\n    // expensive computation\n    let res = val + 1;\n    res\n}\n\nfn main() {\n    // choose an odd number of elements\n    let orig: Vec&lt;i32&gt; = (1..14).collect();\n\n    let mut guards: Vec&lt;JoinGuard&lt;Vec&lt;i32&gt;&gt;&gt; = vec!();\n\n    // split into slices\n    for chunk in orig.chunks(orig.len() / NUMTHREADS as usize) {\n        let g = thread::scoped(move || chunk.iter().cloned().map(f).collect());\n        guards.push(g);\n    };\n\n    // collect the results\n    let mut result: Vec&lt;i32&gt; = Vec::with_capacity(orig.len());\n    for g in guards {\n        result.extend(g.join().into_iter());\n    }\n\n    println!(\"Flattened result: {:?}\", result);\n}\n</code></pre>\n\n<p>It is unstable and won't likely be stabilized in this form because it has an inherent flaw (you can find more <a href=\"https://github.com/rust-lang/rust/issues/24292\" rel=\"nofollow\">here</a>). As far as I can see, <code>simple_parallel</code> is just an extension of this approach - it hides the fiddling with <code>JoinGuards</code> and also can be used in stable Rust (probably with some <code>unsafe</code>ty, I believe). It is not recommended for the general use, however, as its docs suggest.</p>\n\n<p>Of course, you can use <code>thread::spawn()</code>, but then you will need to clone each chunk so it could be moved into each thread:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::thread::{self, JoinHandle};\n\n// tunable\nconst NUMTHREADS: i32 = 4;\n\nfn f(val: i32) -&gt; i32 {\n    // expensive computation\n    let res = val + 1;\n    res\n}\n\nfn main() {\n    // choose an odd number of elements\n    let orig: Vec&lt;i32&gt; = (1..14).collect();\n\n    let mut guards: Vec&lt;JoinHandle&lt;Vec&lt;i32&gt;&gt;&gt; = vec!();\n\n    // split into slices\n    for chunk in orig.chunks(orig.len() / NUMTHREADS as usize) {\n        let chunk = chunk.to_owned();\n        let g = thread::spawn(move || chunk.into_iter().map(f).collect());\n        guards.push(g);\n    };\n\n    // collect the results\n    let mut result: Vec&lt;i32&gt; = Vec::with_capacity(orig.len());\n    for g in guards {\n        result.extend(g.join().unwrap().into_iter());\n    }\n\n    println!(\"Flattened result: {:?}\", result);\n}\n</code></pre>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 429, "favorite_count": 0, "accepted_answer_id": 31123137, "answer_count": 1, "score": 5, "last_activity_date": 1435603732, "creation_date": 1435596663, "last_edit_date": 1435602711, "question_id": 31121250, "link": "https://stackoverflow.com/questions/31121250/consume-non-overlapping-vector-chunks-and-combine-results", "title": "Consume non-overlapping vector chunks, and combine results", "body": "<p>I'm trying to speed up an expensive computation on a large vector by using threads. My function consumes a vector, computes a vector of new values (it doesn't aggregate, but input order has to be retained), and returns it. However, I'm struggling to figure out how to spawn threads, assign vector slices to each, and then collect and combine the results.</p>\n\n<pre><code>// tunable\nconst NUMTHREADS: i32 = 4;\n\nfn f(val: i32) -&gt; i32 {\n    // expensive computation\n    let res = val + 1;\n    res\n\n}\n\nfn main() {\n    // choose an odd number of elements\n    let orig = (1..14).collect::&lt;Vec&lt;i32&gt;&gt;();\n    let mut result: Vec&lt;Vec&lt;i32&gt;&gt; = vec!();\n    let mut flat: Vec&lt;i32&gt; = Vec::with_capacity(orig.len());\n    // split into slices\n    for chunk in orig.chunks(orig.len() / NUMTHREADS as usize) {\n        result.push(\n            chunk.iter().map(|&amp;digit|\n                f(digit)).collect()\n            );\n    };\n    // flatten result vector\n    for subvec in result.iter() {\n        for elem in subvec.iter() {\n            flat.push(elem.to_owned());\n        }\n    }\n    println!(\"Flattened result: {:?}\", flat);\n}\n</code></pre>\n\n<p>The threaded computation should be taking place between <code>for chunk\u2026</code> and <code>// flatten \u2026</code>, but I can't find many simple examples of spawning x threads, assigning chunks sequentially, and returning the newly-computed vector out of the thread and into a container so it can be flattened. Do I have to wrap <code>orig.chunks()</code> in an <code>Arc</code>, and manually grab each chunk in a loop? Do I have to pass <code>f</code> into each thread? Will I have to use a B-Tree to ensure that input and output order match? Can I just use <a href=\"http://huonw.github.io/simple_parallel/simple_parallel/index.html\" rel=\"nofollow\"><code>simple_parallel</code></a>?</p>\n"}, {"tags": ["rust", "mutability"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1435585712, "creation_date": 1435585712, "answer_id": 31117404, "question_id": 31117274, "link": "https://stackoverflow.com/questions/31117274/modifying-a-slice-of-strs/31117404#31117404", "title": "Modifying a slice of str&#39;s", "body": "<p><code>t</code> is of type <code>&amp;mut &amp;str</code>, a mutable pointer to a string slice. You wish to alter what the mutable reference points to, so you need to store a <code>&amp;str</code> in <code>*t</code>.</p>\n\n<pre><code>fn remove_prefix(v: &amp;mut [&amp;str], prefix: &amp;str) {\n    for t in v.iter_mut() {\n        *t = t.trim_left_matches(prefix);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 239, "favorite_count": 0, "accepted_answer_id": 31117404, "answer_count": 1, "score": 5, "last_activity_date": 1435618471, "creation_date": 1435585281, "last_edit_date": 1435618471, "question_id": 31117274, "link": "https://stackoverflow.com/questions/31117274/modifying-a-slice-of-strs", "title": "Modifying a slice of str&#39;s", "body": "<p>I have a <code>Vec&lt;&amp;str&gt;</code> and I want to remove a prefix from all of its elements. This is what I vaguely intend:</p>\n\n<pre><code>fn remove_prefix(v: &amp;mut [&amp;str], prefix: &amp;str) {\n    for t in v.iter_mut() {\n        t = t.trim_left_matches(prefix);\n    }\n}\n</code></pre>\n\n<p>However I can't seem to get all the <code>mut</code>'s in the right place. Or maybe it's a lifetime related thing? Can anyone give me a hint? Here is my current error:</p>\n\n<pre><code>makefile_to_qbs.rs:22:7: 22:34 error: mismatched types:\n expected `&amp;mut &amp;str`,\n    found `&amp;str`\n(values differ in mutability) [E0308]\nmakefile_to_qbs.rs:22           t = t.trim_left_matches(prefix);\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 4, "creation_date": 1435551927, "post_id": 31107736, "comment_id": 50230052, "body": "Ahh, that makes sense.  Seems analogous to <code>void</code>.  Thanks for the explanation!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 1, "creation_date": 1435566905, "post_id": 31107736, "comment_id": 50236184, "body": "@w.brian: It is indeed analogous to <code>void</code>, but <code>void</code> requires special cases to handle (especially in C++ where you can <code>return foo()</code> where <code>foo</code> returns <code>void</code> but cannot create a value of <code>void</code> type...), so in this sense <code>()</code> is just so much more streamlined."}, {"owner": {"reputation": 12066, "user_id": 3924118, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/abb01e1c2a8e3d9e1534dca14b19b3d8?s=128&d=identicon&r=PG&f=1", "display_name": "nbro", "link": "https://stackoverflow.com/users/3924118/nbro"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1543232787, "post_id": 31107736, "comment_id": 93830512, "body": "@MatthieuM. I think this answer is missing a little explanation: the definition of <code>Result</code>. Not everyone is familiar with <code>Result</code>, so your explanation &quot;if nothing goes wrong, there&#39;s no further value produced&quot; may not be understandable."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 38, "last_activity_date": 1543365776, "last_edit_date": 1543365776, "creation_date": 1435551720, "answer_id": 31107736, "question_id": 31107614, "link": "https://stackoverflow.com/questions/31107614/what-does-an-empty-set-of-parentheses-mean-when-used-in-a-generic-type-declarati/31107736#31107736", "title": "What does an empty set of parentheses mean when used in a generic type declaration?", "body": "<p><code>()</code> is an empty tuple, a simple zero-sized type (it uses no memory) with only one value possible, <code>()</code>. It\u2019s also known as the <em>unit type</em>. Its use in a return type of <code>Result&lt;(), E&gt;</code> means \u201cif nothing goes wrong, there\u2019s no further value produced\u201d. The semantics are what\u2019s important\u2014the call was OK.</p>\n\n<p><code>Result&lt;(), ()&gt;</code> would also make sense as a return type\u2014either something succeeded, or it failed, with nothing more to report in either case.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3009, "favorite_count": 3, "accepted_answer_id": 31107736, "answer_count": 1, "score": 32, "last_activity_date": 1543365776, "creation_date": 1435550743, "last_edit_date": 1518223827, "question_id": 31107614, "link": "https://stackoverflow.com/questions/31107614/what-does-an-empty-set-of-parentheses-mean-when-used-in-a-generic-type-declarati", "title": "What does an empty set of parentheses mean when used in a generic type declaration?", "body": "<p>The <code>Display</code> trait is defined as follows:</p>\n\n<pre><code>pub trait Display {\n    fn fmt(&amp;self, &amp;mut Formatter) -&gt; Result&lt;(), Error&gt;;\n}\n</code></pre>\n\n<p>The most mysterious thing to me is the empty set of parentheses, <code>()</code>, in the type declaration <code>Result&lt;(), Error&gt;</code>. What is it and its purpose?</p>\n"}, {"tags": ["multithreading", "concurrency", "rust"], "comments": [{"owner": {"reputation": 22874, "user_id": 3282056, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/IXonK.jpg?s=128&g=1", "display_name": "rcgldr", "link": "https://stackoverflow.com/users/3282056/rcgldr"}, "edited": false, "score": 3, "creation_date": 1435536729, "post_id": 31106081, "comment_id": 50227183, "body": "If the program is memory bound as opposed to CPU bound, then multiple threads will not help and may slow things down due to cache conflicts. Multiple threads are useful for CPU intensive computations, or as an alternative to asynchronous I/O to separate devices (where each thread performs conventional I/Os with wait to a device)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435538378, "post_id": 31106081, "comment_id": 50227444, "body": "It&#39;s actually quite unclear what you are asking. Your title is mentions <i>synchronization</i>, but then your body asks about making things happen <i>concurrently</i>. Inter-thread synchronization is a large topic, but you don&#39;t seem to be asking about that."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435566225, "post_id": 31106081, "comment_id": 50235830, "body": "@Shepmaster Yeah, it was confusing. Fixed now :)"}, {"owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "edited": false, "score": 0, "creation_date": 1435595049, "post_id": 31106081, "comment_id": 50254305, "body": "A threadpool may be what you want for your use case, but I am not sure if there is a working implementation of that for rust yet."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1435595570, "post_id": 31106081, "comment_id": 50254593, "body": "How many items are there, i.e., how long does each <code>some_item_worker</code> take? Spawning a thread and waiting for it to finish takes time. If each thread only does a very small amount of work, spawning tons of them can easily degrade performance."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435603384, "post_id": 31106081, "comment_id": 50258789, "body": "@delnan You&#39;re right. I think that&#39;s the problem here. After some fiddling around and timing the processes, I found that invoking the threads are just taking too much time for my iteration. So, I&#39;ve no choice but to abandon my goal :/"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1435644896, "post_id": 31106081, "comment_id": 50273116, "body": "That doesn&#39;t necessarily mean you can&#39;t parallelize at all, you just have to spawn fewer threads and give each thread more work to do."}], "answers": [{"comments": [{"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435569136, "post_id": 31106266, "comment_id": 50237381, "body": "I now understand that the threads are running concurrently. Also, I&#39;m sorry if it wasn&#39;t clear (I&#39;ve now improved the question). Some bad process had been consuming my memory while running the program. After a reboot, the problem got solved, but I&#39;m still worried about the timings. I mean, the threaded iteration seems to take an extra 200 ms. Can you please explain it? :)"}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435571426, "post_id": 31106266, "comment_id": 50238807, "body": "After some reading, I&#39;ve just realized that concurrency and parallelization are two separate <i>things</i>. And, in my case, it&#39;s parallelization that I need. So, is it gonna be complicated to run those threads in parallel? If so, you can just give me some hints for a head start. I don&#39;t have any problem in researching around :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1525311831, "last_edit_date": 1525311831, "creation_date": 1435538215, "answer_id": 31106266, "question_id": 31106081, "link": "https://stackoverflow.com/questions/31106081/how-should-i-spawn-threads-for-parallel-computation/31106266#31106266", "title": "How should I spawn threads for parallel computation?", "body": "<blockquote>\n  <p>I have a quad-core CPU, which means that I can run only up to 4 threads concurrently.</p>\n</blockquote>\n\n<p>Only 4 may be <em>running</em> concurrently, but you can certainly create more than 4...</p>\n\n<blockquote>\n  <p>whenever a thread ends, another thread begins, so that at any given time, 4 threads run concurrently (it was just a guess).</p>\n</blockquote>\n\n<p>Whenever you have a <em>guess</em>, you should create an experiment to figure out if your guess is correct. Here's one:</p>\n\n<pre><code>use std::{iter, thread, time::Duration};\n\nfn main() {\n    let items: Vec&lt;_&gt; = iter::repeat(0).take(500).collect();\n\n    let threads: Vec&lt;_&gt; = items\n        .into_iter()\n        .map(|_| {\n            thread::spawn(move || {\n                println!(\"Started!\");\n                thread::sleep(Duration::from_millis(500));\n                println!(\"Finished!\");\n            })\n        })\n        .collect();\n\n    for handle in threads {\n        handle.join().unwrap()\n    }\n}\n</code></pre>\n\n<p>If you run this, you will see that \"Started!\" is printed out 500 times, followed by 500 \"Finished!\"</p>\n\n<blockquote>\n  <p>Clearly, there's no parallel computing going on here</p>\n</blockquote>\n\n<p>Unfortunately, your question isn't fleshed out enough for us to tell why <em>your</em> time went up. In the example I've provided, it takes a little less than 600 ms, so it's clearly not happening in serial!</p>\n"}, {"tags": [], "owner": {"reputation": 1425, "user_id": 924537, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b0afb72850b8c8aac555cd22db86baa2?s=128&d=identicon&r=PG", "display_name": "Logan", "link": "https://stackoverflow.com/users/924537/logan"}, "is_accepted": false, "score": 0, "last_activity_date": 1525303431, "creation_date": 1525303431, "answer_id": 50144881, "question_id": 31106081, "link": "https://stackoverflow.com/questions/31106081/how-should-i-spawn-threads-for-parallel-computation/50144881#50144881", "title": "How should I spawn threads for parallel computation?", "body": "<p>Creating a thread has a cost. If the cost of the computation inside the thread is small enough, it'll be dwarfed by the cost of the threads or the inefficiencies caused by the threads.</p>\n\n<p>For example, spawning 10 million threads to double 10 million u8s will probably not be worth it. Vectorizing it would probably yield better performance.</p>\n\n<p>That said, you still might be able to get some improvement through parallelizing cheap tasks. But you want to use fewer threads through a thread pool w/ a small number of threads (so you have a (small) number of threads created at any given point, less CPU contention) or something more sophisticated (under the hood, the api is quite simple) like <a href=\"https://docs.rs/rayon/1.0.1/rayon/\" rel=\"nofollow noreferrer\">Rayon</a>.</p>\n\n<pre><code>// Notice `.par_iter()` turns it into a `parallel iterator`\nlet stuff: Vec&lt;u8&gt; = items.par_iter().map(|item| {\n    some_item_worker(&amp;item)\n}).collect();\n</code></pre>\n"}], "owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1187, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1525311967, "creation_date": 1435536481, "last_edit_date": 1525311967, "question_id": 31106081, "link": "https://stackoverflow.com/questions/31106081/how-should-i-spawn-threads-for-parallel-computation", "title": "How should I spawn threads for parallel computation?", "body": "<p>Today, I got into multi-threading. Since it's a new concept, I thought I could begin to learn by translating a simple iteration to a <em>parallelized</em> one. But, I think I got stuck before I even began.</p>\n\n<p>Initially, my loop looked something like this:</p>\n\n<pre><code>let stuff: Vec&lt;u8&gt; = items.into_iter().map(|item| {\n    some_item_worker(&amp;item)\n}).collect();\n</code></pre>\n\n<p>I had put a reasonably large amount of stuff into <code>items</code> and it took about 0.05 seconds to finish the computation. So, I was really excited to see the time reduction once I successfully implemented multi-threading!</p>\n\n<p>When I used threads, I got into trouble, probably due to my bad reasoning.</p>\n\n<pre><code>use std::thread;\n\nlet threads: Vec&lt;_&gt; = items.into_iter().map(|item| {\n    thread::spawn(move || {\n        some_item_worker(&amp;item)\n    })\n}).collect(); // yeah, this is followed by another iter() that unwraps the values\n</code></pre>\n\n<p>I have a quad-core CPU, which means that I can run only up to 4 threads concurrently. I guessed that it worked this way: once the iterator starts, threads are spawned. Whenever a thread ends, another thread begins, so that at any given time, 4 threads run concurrently.</p>\n\n<p>The result was that it took (after some re-runs) ~0.2 seconds to finish the same computation. Clearly, there's no parallel computing going on here. I don't know why the time increased by 4 times, but I'm sure that I've misunderstood something.</p>\n\n<p>Since this isn't the right way, how should I go about modifying the program so that the threads execute concurrently?</p>\n\n<h2>EDIT:</h2>\n\n<p>I'm sorry, I was wrong about that ~0.2 seconds. I woke up and tried it again, when I noticed that the usual iteration ran for 2 seconds. It turned out that some process had been consuming the memory wildly. When I rebooted my system and tried the threaded iteration again, it ran for about 0.07 seconds. Here are some timings for each run.</p>\n\n<p>Actual iteration (first one):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0.0553760528564 seconds\n0.0539519786835 seconds\n0.0564560890198 seconds\n</code></pre>\n\n<p>Threaded one:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0.0734670162201 seconds\n0.0727820396423 seconds\n0.0719120502472 seconds\n</code></pre>\n\n<p>I agree that the threads are indeed running concurrently, but it seems to consume another 20 ms to finish the job. My actual goal was to utilize my processor to run threads parallel and finish the job soon. Is this gonna be complicated? What should I do to make those threads run in parallel, not concurrent?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1435517057, "post_id": 31103364, "comment_id": 50221925, "body": "Why do you want to return a vec and a reference to that vec from the same function? It&#39;s trivial to take a reference to that vec after it has been returned."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1435518216, "post_id": 31103364, "comment_id": 50222310, "body": "Oh, I&#39;m not sure I choose the right title. I don&#39;t actually want to return <code>(Vec&lt;T&gt;, &amp;[T])</code>. The reference is embedded inside a data structure. I can, of course, first create the vector, then create the structure, like shown in the first and third examples -- but in some cases I want to create the two with a single statement."}], "answers": [{"comments": [{"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1435624138, "post_id": 31103472, "comment_id": 50267587, "body": "That&#39;s a neat trick, thanks. I ended up moving away from this design, it&#39;s simpler to have <code>Data</code> own its vector."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1435517253, "creation_date": 1435517253, "answer_id": 31103472, "question_id": 31103364, "link": "https://stackoverflow.com/questions/31103364/how-to-write-a-function-or-a-macro-to-create-a-vec-and-a-reference-to-it/31103472#31103472", "title": "How to write a function (or a macro) to create a Vec and a reference to it?", "body": "<p>Rust allows you to define multiple variables with the same name in the same block.</p>\n\n<pre><code>let a = vec![...];\nlet a = Data { vec: &amp;a, ... };\n</code></pre>\n\n<p>On the second line, the new <code>a</code> is not in scope yet, so you can still refer to the previous definition of <code>a</code>. However, on the following statements, you can no longer refer to the original <code>a</code> definition, since the second definition <em>shadows</em> the first one; nevertheless, the <code>Vec</code> remains alive until the end of the block, as usual.</p>\n\n<p>You can take advantage of this in your macro by only taking a single identifier and using it for both the <code>Vec</code> and the slice.</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 241, "favorite_count": 1, "accepted_answer_id": 31103472, "answer_count": 1, "score": 0, "last_activity_date": 1435517253, "creation_date": 1435516621, "question_id": 31103364, "link": "https://stackoverflow.com/questions/31103364/how-to-write-a-function-or-a-macro-to-create-a-vec-and-a-reference-to-it", "title": "How to write a function (or a macro) to create a Vec and a reference to it?", "body": "<p>So I have something like this:</p>\n\n<pre><code>let v = vec![...];\nlet s = Data { vec: &amp;v, ... };\n</code></pre>\n\n<p>Perhaps this is misguided, but the idea is that many data structures could share the same vector. But for the case where I don't want to share, it would be convenient to have something like this:</p>\n\n<pre><code>let (v, s) = make_data(...);\n</code></pre>\n\n<p>Apparently, unlike the first example, there is no way to connect the lifetime of v and s (correct me if I'm wrong). Anyway, I understand the borrow checker rejects this. So I end up doing:</p>\n\n<pre><code>let v = vec![];\nlet s = make_data(&amp;v, ...);\n</code></pre>\n\n<p>Now, perhaps, I could make one of those work:</p>\n\n<pre><code>let (v, s) = make_data!(...);\nlet s = make_data!(v, ...);\nlet s = make_data!(...);\n</code></pre>\n\n<p>The problem here is that thse macros would expand to something like <code>{ let v = vec![]; ... }</code> and <code>v</code>'s destructor will be run in the end of this block, but what I really want is to have it expand to something like the first example.</p>\n\n<p>Now, I can make this work:</p>\n\n<pre><code>make_data!(v, s, ...);\n</code></pre>\n\n<p>But it's odd. Is there any other way to solve this?</p>\n"}, {"tags": ["rust", "rust-macros", "rust-decl-macros"], "answers": [{"comments": [{"owner": {"reputation": 16564, "user_id": 1261399, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/679444399bbf92e3a5d3f16347809f3f?s=128&d=identicon&r=PG", "display_name": "Leo Correa", "link": "https://stackoverflow.com/users/1261399/leo-correa"}, "edited": false, "score": 7, "creation_date": 1435517802, "post_id": 31103377, "comment_id": 50222142, "body": "It&#39;d be good to see the bit of code that fixed it before and after."}, {"owner": {"reputation": 2655, "user_id": 184700, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/ffsUU.jpg?s=128&g=1", "display_name": "Jess Bowers", "link": "https://stackoverflow.com/users/184700/jess-bowers"}, "edited": false, "score": 1, "creation_date": 1519394918, "post_id": 31103377, "comment_id": 84905628, "body": "I also would like to see the code that solved this"}], "tags": [], "owner": {"reputation": 462, "user_id": 309345, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?s=128&d=identicon&r=PG", "display_name": "marcusklaas", "link": "https://stackoverflow.com/users/309345/marcusklaas"}, "is_accepted": false, "score": 10, "last_activity_date": 1435516660, "creation_date": 1435516660, "answer_id": 31103377, "question_id": 31103213, "link": "https://stackoverflow.com/questions/31103213/import-macro-from-parent-module/31103377#31103377", "title": "Import macro from parent module", "body": "<p>I figured it out! It is imported automatically, but I didn't realize that macros are imported in order!</p>\n\n<p>I imported the <code>submod</code> module before <code>macros</code>, so <code>my_macro</code> wasn't visible <em>yet</em>. By swapping the order, I got the expected behaviour.</p>\n"}], "owner": {"reputation": 462, "user_id": 309345, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?s=128&d=identicon&r=PG", "display_name": "marcusklaas", "link": "https://stackoverflow.com/users/309345/marcusklaas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2178, "favorite_count": 0, "closed_date": 1556405265, "answer_count": 1, "score": 10, "last_activity_date": 1551127624, "creation_date": 1435515621, "last_edit_date": 1551127624, "question_id": 31103213, "link": "https://stackoverflow.com/questions/31103213/import-macro-from-parent-module", "closed_reason": "Duplicate", "title": "Import macro from parent module", "body": "<p>I'm having trouble re-using macros within a crate.</p>\n\n<p>If a macro is defined in <code>./src/macros.rs</code>:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! my_macro {\n    ...\n}\n</code></pre>\n\n<p>and used in <code>./src/lib.rs</code>:</p>\n\n<pre><code>#[macro_use]\npub mod macros;\n</code></pre>\n\n<p>I can't see this macro in <code>./src/submod/lib.rs</code>:</p>\n\n<pre><code>my_macro!(...);\n</code></pre>\n\n<p>It yields the error message <code>error: macro undefined: 'my_macro!'</code>.</p>\n\n<p>Is there a way I can import this macro in this child module <code>submod</code>?</p>\n"}, {"tags": ["string", "bytearray", "rust", "trim"], "answers": [{"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 0, "last_activity_date": 1435510804, "last_edit_date": 1435510804, "creation_date": 1435509764, "answer_id": 31102221, "question_id": 31101915, "link": "https://stackoverflow.com/questions/31101915/how-to-implement-trim-for-vecu8/31102221#31102221", "title": "How to implement trim for Vec&lt;u8&gt;?", "body": "<p>All we have to do is find the index of the first non-whitespace character, one time counting forward from the start, and another time counting backwards from the end.</p>\n\n<pre><code>fn is_not_whitespace(e: &amp;u8) -&gt; bool {\n    *e != 0x20 &amp;&amp; *e != 0x09\n}\n\nfn main() {\n    let a: &amp;[u8] = b\"     fo o \";\n\n    // find the index of first non-whitespace char\n    let begin = a.iter()\n        .position(is_not_whitespace);\n\n    // find the index of the last non-whitespace char\n    let end = a.iter()\n        .rev()\n        .position(is_not_whitespace)\n        .map(|j| a.len() - j);\n\n    // build it\n    let vec = begin.and_then(|i| end.map(|j| a[i..j].iter().collect()))\n        .unwrap_or(Vec::new());\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "edited": false, "score": 0, "creation_date": 1435523924, "post_id": 31102496, "comment_id": 50224170, "body": "Using a trait and returning a slice is perfect."}, {"owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "edited": false, "score": 1, "creation_date": 1435592637, "post_id": 31102496, "comment_id": 50252885, "body": "I have a <a href=\"http://is.gd/Gqjlue\" rel=\"nofollow noreferrer\">slightly improved version</a> of your code, would you mind updating your answer?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1435607843, "last_edit_date": 1435607843, "creation_date": 1435511468, "answer_id": 31102496, "question_id": 31101915, "link": "https://stackoverflow.com/questions/31101915/how-to-implement-trim-for-vecu8/31102496#31102496", "title": "How to implement trim for Vec&lt;u8&gt;?", "body": "<p>Here's an implementation that returns a slice, rather than a new <code>Vec&lt;u8&gt;</code>, as <code>str::trim()</code> does. It's also implemented on <code>[u8]</code>, since that's more general than <code>Vec&lt;u8&gt;</code> (you can obtain a slice from a vector cheaply, but creating a vector from a slice is more costly, since it involves a heap allocation and a copy).</p>\n\n<pre><code>trait SliceExt {\n    fn trim(&amp;self) -&gt; &amp;Self;\n}\n\nimpl SliceExt for [u8] {\n    fn trim(&amp;self) -&gt; &amp;[u8] {\n        fn is_whitespace(c: &amp;u8) -&gt; bool {\n            *c == b'\\t' || *c == b' '\n        }\n\n        fn is_not_whitespace(c: &amp;u8) -&gt; bool {\n            !is_whitespace(c)\n        }\n\n        if let Some(first) = self.iter().position(is_not_whitespace) {\n            if let Some(last) = self.iter().rposition(is_not_whitespace) {\n                &amp;self[first..last + 1]\n            } else {\n                unreachable!();\n            }\n        } else {\n            &amp;[]\n        }\n    }\n}\n\nfn main() {\n    let a = b\"     fo o \";\n    let b = a.trim();\n    println!(\"{:?}\", b);\n}\n</code></pre>\n\n<p>If you really need a <code>Vec&lt;u8&gt;</code> after the <code>trim()</code>, you can just call <code>into()</code> on the slice to turn it into a <code>Vec&lt;u8&gt;</code>.</p>\n\n<pre><code>fn main() {\n    let a = b\"     fo o \";\n    let b: Vec&lt;u8&gt; = a.trim().into();\n    println!(\"{:?}\", b);\n}\n</code></pre>\n"}], "owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1801, "favorite_count": 0, "accepted_answer_id": 31102496, "answer_count": 2, "score": 4, "last_activity_date": 1435607843, "creation_date": 1435507883, "last_edit_date": 1435520738, "question_id": 31101915, "link": "https://stackoverflow.com/questions/31101915/how-to-implement-trim-for-vecu8", "title": "How to implement trim for Vec&lt;u8&gt;?", "body": "<p>Rust provides a trim method for strings: <a href=\"http://doc.rust-lang.org/stable/std/primitive.str.html#method.trim\" rel=\"nofollow\">str.trim()</a> removing leading and trailing whitespace. I want to have a method that does the same for bytestrings. It should take a <code>Vec&lt;u8&gt;</code> and remove leading and trailing whitespace (space, 0x20 and htab, 0x09).</p>\n\n<p>Writing a <code>trim_left()</code> is easy, you can just use an iterator with <code>skip_while()</code>: <a href=\"http://is.gd/jIHTTh\" rel=\"nofollow\">Rust Playground</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a: &amp;[u8] = b\"     fo o \";\n    let b: Vec&lt;u8&gt; = a.iter().map(|x| x.clone()).skip_while(|x| x == &amp;0x20 || x == &amp;0x09).collect();\n    println!(\"{:?}\", b);\n}\n</code></pre>\n\n<p>But to trim the right characters I would need to look ahead if no other letter is in the list after whitespace was found.</p>\n"}, {"tags": ["redis", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435498894, "post_id": 31100346, "comment_id": 50216198, "body": "Have you checked that the details are actually correct, the server is running, the connection details are in the format expected, <i>&amp;c.</i>? There\u2019s nowhere near enough information here at present."}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435500717, "post_id": 31100346, "comment_id": 50216736, "body": "@ChrisMorgan: I have edited the question to post the details.."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435503435, "post_id": 31100346, "comment_id": 50217613, "body": "I think that @ChrisMorgan is asking that you ensure that your connection information is the same between the command line usage and the code. Specifically, it seems that the database you are selecting (<code>&#47;2</code>) may not be correct. Please <a href=\"https://stackoverflow.com/posts/31100346/edit\">edit</a> your question to include how you are invoking the <code>redis-cli</code> command."}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435505835, "post_id": 31100346, "comment_id": 50218301, "body": "@Shepmaster I have edited the question to be more clearer. 127.0.0.1:6379 [2]&gt; doesn&#39;t it  denote that cli is connected to redis on DB 2?"}], "answers": [{"comments": [{"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435531171, "post_id": 31101555, "comment_id": 50226039, "body": "I have taken in the local copy of the library and made the changes whatever PR made and re-ran the application. Now I am able to get past the initial hurdle and now I have  <code>Response was of incompatible type</code> error and cause is a &quot;None&quot;. Any idea what am I missing?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435533458, "post_id": 31101555, "comment_id": 50226578, "body": "@harry not really; it sounds like another question :-) My only guess is that you&#39;ve said <code>HashSet&lt;i32&gt;</code> when your command line shows strings."}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435541989, "post_id": 31101555, "comment_id": 50228074, "body": "obviously I am dumb programmer :( . how could I have overlooked that blatant issue ... yeah that was the root cause. Thanks a lot."}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435542911, "post_id": 31101555, "comment_id": 50228277, "body": "i had one more question : the second approach by creating <code>redis::ConnectionInfo</code> struct  , I am getting : field <code>connection_info</code> of struct <code>redis::client::Client</code> is private; which is expected. is there any possibility in rust change the visibility of fields on the fly ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435543232, "post_id": 31101555, "comment_id": 50228332, "body": "<i>obviously I am dumb programmer</i> - nah, we all have to learn things at some point ^_^. <i>any possibility in rust change the visibility of fields on the fly</i> - nope, that would circumvent the reason of the visibility modifiers. Maybe that should be a separate bug report to the crate maintainer?"}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435544453, "post_id": 31101555, "comment_id": 50228584, "body": "probably the crate maintainer never expected; whomsoever using library; to instantiate connection_info directly from calling code. I am guessing  from the pain the author had taken in incorporating the parsing logic. anyways thanks a lot!!!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1435505756, "creation_date": 1435505756, "answer_id": 31101555, "question_id": 31100346, "link": "https://stackoverflow.com/questions/31100346/error-accessing-a-different-redis-database-using-redis-crate-invalid-database/31101555#31101555", "title": "Error accessing a different Redis database using redis crate : Invalid database number", "body": "<p>The error is <a href=\"https://github.com/mitsuhiko/redis-rs/blob/983887b6318b25bcf84caeb02a80902277c7551a/src/connection.rs#L85-L86\" rel=\"nofollow\">coming from inside the crate</a>:</p>\n\n<pre><code>path =&gt; path.parse::&lt;i64&gt;().unwrap_or(\n    fail!((ErrorKind::InvalidClientConfig, \"Invalid database number\"))),\n</code></pre>\n\n<p>Unfortunately, this is just a programming error. <code>unwrap_or</code> <strong>always</strong> evaluates the argument, which in this case is the <code>fail!</code> macro. It appears that this should be <code>unwrap_or_else</code>, which accepts a closure that is only run in the failure case.</p>\n\n<p>I've <a href=\"https://github.com/mitsuhiko/redis-rs/pull/51\" rel=\"nofollow\">submitted a PR</a> to fix the immediate issue. As a workaround, you can create a <code>redis::ConnectionInfo</code> struct directly and specify the database there.</p>\n"}], "owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 370, "favorite_count": 0, "accepted_answer_id": 31101555, "answer_count": 1, "score": 3, "last_activity_date": 1435505756, "creation_date": 1435497984, "last_edit_date": 1495539835, "question_id": 31100346, "link": "https://stackoverflow.com/questions/31100346/error-accessing-a-different-redis-database-using-redis-crate-invalid-database", "title": "Error accessing a different Redis database using redis crate : Invalid database number", "body": "<p>I am trying to access Redis using the crate <code>redis</code> (version 0.3.1). It throws <strong>invalid database</strong>.</p>\n\n<pre><code>extern crate redis;\n\nuse redis::*;\nuse std::string::String;\nuse std::collections::HashSet;\n\nfn main() {\n   if let Err(e) = read_meta_keys_redis(\"myset\".to_string()) {\n     println!(\"{}\", e.description());\n   }\n }\n\nfn read_meta_keys_redis(key: String) -&gt; redis::RedisResult&lt;()&gt; {\n  println!(\"22{}\", key);\n  let client = try!(redis::Client::open(\"redis://127.0.0.1:6379/2\"));\n\n  let con = try!(client.get_connection());\n  let mems: HashSet&lt;i32&gt; = try!(con.smembers(key));\n  for x in mems.iter() {\n      println!(\"op--&gt;{}\", x);\n  }\n  Ok(())\n}\n</code></pre>\n\n<p>my local <code>redis</code>: Issue the following commands on shell\n    <code>redis-cli\n     select 2 \n     sadd myset \"hello\"\n     sadd myset \"how are you\"</code></p>\n\n<pre><code>127.0.0.1:6379[2]&gt; smembers myset \n  1) \"hello\" 2) \"how are you\" \n127.0.0.1:6379[2]&gt;\n</code></pre>\n\n<p>Some background might be found in my earlier question <a href=\"https://stackoverflow.com/questions/31084967/silent-error-while-accessing-redis#\">Silent error while accessing Redis </a>.</p>\n"}, {"tags": ["unix", "signals", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1435504379, "post_id": 31100299, "comment_id": 50217875, "body": "This <a href=\"http://is.gd/AivmD3\" rel=\"nofollow noreferrer\">works for me</a> on OS X; I am unable to kill the program with control-C and it prints out &quot;handling&quot; instead. Do note that <code>signal::sigaction</code> returns a <code>Result</code> that you are ignoring, perhaps you want to add an <code>unwrap</code> call to check for errors."}], "answers": [{"tags": [], "owner": {"reputation": 305, "user_id": 1798668, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a3OyG.jpg?s=128&g=1", "display_name": "Nik Klassen", "link": "https://stackoverflow.com/users/1798668/nik-klassen"}, "is_accepted": true, "score": 1, "last_activity_date": 1435552017, "creation_date": 1435552017, "answer_id": 31107781, "question_id": 31100299, "link": "https://stackoverflow.com/questions/31100299/how-do-i-replace-the-default-sigint-handler-when-using-sigaction/31107781#31107781", "title": "How do I replace the default SIGINT handler when using sigaction?", "body": "<p>Are you using <code>cargo run</code> to run your program?  If so, it sounds like your program is handling the SIGINT signal and instead cargo is being killed.  Since cargo doesn't have any special handling it is being killed by the signal, thus ending your program. </p>\n"}], "owner": {"reputation": 43, "user_id": 3324520, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4cdc211307bf0df1992be267632e9e37?s=128&d=identicon&r=PG&f=1", "display_name": "user3324520", "link": "https://stackoverflow.com/users/3324520/user3324520"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 416, "favorite_count": 0, "accepted_answer_id": 31107781, "answer_count": 1, "score": 4, "last_activity_date": 1435552017, "creation_date": 1435497733, "last_edit_date": 1435503581, "question_id": 31100299, "link": "https://stackoverflow.com/questions/31100299/how-do-i-replace-the-default-sigint-handler-when-using-sigaction", "title": "How do I replace the default SIGINT handler when using sigaction?", "body": "<p>I've been playing with <code>sigaction</code> in the <code>nix-rust</code> crate to try and handle a SIGINT signal in my program and instead do nothing. While I've been able to handle the signal using:</p>\n\n<pre><code>let sig_action = signal::SigAction::new(\n    handle_signal,\n    signal::SockFlag::empty(),\n    signal::SigSet::empty()\n);\nunsafe { signal::sigaction(signal::SIGINT, &amp;sig_action); }\n</code></pre>\n\n<p>It seems no matter what I do in the <code>handle_signal</code> function, when it concludes, the SIGINT is still processed and the program exits. My handler does not replace the default functionality, rather it happens before it. What would the function have to do to instead prevent the interrupt from still causing the program to exit?</p>\n"}, {"tags": ["rust", "immutability", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 401, "user_id": 2954634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c64922eddb6e06a253c12e631e878d28?s=128&d=identicon&r=PG&f=1", "display_name": "Felix Schlitter", "link": "https://stackoverflow.com/users/2954634/felix-schlitter"}, "edited": false, "score": 1, "creation_date": 1435526023, "post_id": 31093918, "comment_id": 50224776, "body": "I see. But let&#39;s say that the function had some extra logic in it, e.g. it took an id and retrieved <code>qux</code> from a vec of Quxes, then I would need to add that logic everywhere. Maybe I need to resort to a macro? ... I know that the <code>HashMap</code> and <code>Vec</code> types have a <code>get_mut</code> method, maybe there&#39;s something to learn from their implementation, too. I will have to take another dive."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 401, "user_id": 2954634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c64922eddb6e06a253c12e631e878d28?s=128&d=identicon&r=PG&f=1", "display_name": "Felix Schlitter", "link": "https://stackoverflow.com/users/2954634/felix-schlitter"}, "edited": false, "score": 1, "creation_date": 1435526646, "post_id": 31093918, "comment_id": 50224950, "body": "@FelixSchlitter without a concrete example (probably another question) it would be hard to give any actionable advice. However, refactoring out a struct with the shared data and methods or accepting a closure have both been useful solutions to this type of problem for me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1435503948, "last_edit_date": 1435503948, "creation_date": 1435442143, "answer_id": 31093918, "question_id": 31093841, "link": "https://stackoverflow.com/questions/31093841/cannot-borrow-self-x-as-immutable-because-self-is-also-borrowed-as-mutable/31093918#31093918", "title": "cannot borrow `self.x` as immutable because `*self` is also borrowed as mutable", "body": "<p>In Rust, the compiler stops at the function call boundary when evaluating generic parameters, which includes generic lifetime parameters. In your case 1, you are calling a method:</p>\n\n<pre><code>fn get_qux(&amp;mut self) -&gt; &amp;mut Qux {\n    &amp;mut self.qux\n}\n</code></pre>\n\n<p>This function indicates that <em>all</em> of <code>self</code> will be borrowed mutably, and that the returned reference will live as long as <code>self</code> will. During this time, no other borrows (mutable or not) of self or it's components may be made.</p>\n\n<p>In your second case, you make up a completely new <code>Qux</code> that has no attachment to your struct whatsoever. It's not a really great example, because it has very different meaning. <strong>If this case works for you, you should do that</strong>. However, you won't be modifying the same thing as case 1.</p>\n\n<p>In the third case, you avoid the function call. That means that the compiler has a bit more information about what exactly is borrowed. Specifically, it can see that <code>self.qux</code> doesn't interact at all with <code>self.bars</code>, so there is no error.</p>\n\n<p>You can make your original example work by adding a new scope:</p>\n\n<pre><code>fn run(&amp;mut self) {\n    {\n        let mut qux = self.get_qux();\n        let qux_mut = &amp;mut qux;\n        qux_mut.baz = true;\n    }\n\n    for bar in &amp;self.bars {\n        println!(\"{:?}\", bar);\n    }\n}\n</code></pre>\n\n<p>Here, the artificial scope clearly defines where the mutable borrow ends. Once the borrow is over, other items are allowed to make new borrows.</p>\n\n<p>If you need to modify <code>qux</code> inside the loop, then you are required to follow the third pattern:</p>\n\n<pre><code>let mut qux = &amp;mut self.qux;\n\nfor bar in &amp;self.bars {\n    qux.baz = ! qux.baz;\n    println!(\"{:?}\", bar);\n}\n</code></pre>\n\n<p>Or the simpler:</p>\n\n<pre><code>for bar in &amp;self.bars {\n    self.qux.baz = ! self.qux.baz;\n    println!(\"{:?}\", bar);\n}\n</code></pre>\n\n<p>Many times, you can refactor your code to create new structs that have information and encapsulate a nice mutation boundary to make code like this.</p>\n"}], "owner": {"reputation": 401, "user_id": 2954634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c64922eddb6e06a253c12e631e878d28?s=128&d=identicon&r=PG&f=1", "display_name": "Felix Schlitter", "link": "https://stackoverflow.com/users/2954634/felix-schlitter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6743, "favorite_count": 2, "answer_count": 1, "score": 15, "last_activity_date": 1505738384, "creation_date": 1435441556, "last_edit_date": 1505738384, "question_id": 31093841, "link": "https://stackoverflow.com/questions/31093841/cannot-borrow-self-x-as-immutable-because-self-is-also-borrowed-as-mutable", "title": "cannot borrow `self.x` as immutable because `*self` is also borrowed as mutable", "body": "<p>First, let the code speak:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Bar;\n\n#[derive(Debug)]\nstruct Qux {\n    baz: bool\n}\n\n#[derive(Debug)]\nstruct Foo {\n    bars: Vec&lt;Bar&gt;,\n    qux: Qux,\n}\n\nimpl Foo {\n    fn get_qux(&amp;mut self) -&gt; &amp;mut Qux {\n        &amp;mut self.qux\n    }\n\n    fn run(&amp;mut self) {\n        // 1. Fails:\n        let mut qux = self.get_qux();\n\n        // 2. Works:\n        // let mut qux = &amp;mut Qux { baz: false };\n\n        // 3. Works:\n        // let mut qux = &amp;mut self.qux;\n\n        let qux_mut = &amp;mut qux;\n        qux_mut.baz = true;\n\n        for bar in &amp;self.bars {\n            println!(\"{:?}\", bar);\n        }\n    }\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let mut foo = Foo { bars: vec!(), qux: Qux { baz: false } };\n    foo.run();\n}\n</code></pre>\n\n<p>This errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `self.bars` as immutable because `*self` is also borrowed as mutable\n  --&gt; src/main.rs:33:21\n   |\n22 |         let mut qux = self.get_qux();\n   |                       ---- mutable borrow occurs here\n...\n33 |         for bar in &amp;self.bars {\n   |                     ^^^^^^^^^ immutable borrow occurs here\n...\n36 |     }\n   |     - mutable borrow ends here\n</code></pre>\n\n<p>If I uncomment either <code>2.</code> or <code>3.</code>, why does it compile just fine? The called function in <code>1.</code> doesn't do anything drastically different from <code>2.</code> or <code>3.</code>. So why is it then that <code>1.</code> fails to compile?</p>\n\n<p>Although there are <a href=\"https://stackoverflow.com/search?q=cannot%20borrow%20as%20immutable\">many similar titled questions</a>, I could not clearly identify this as a dupe (other than the error message being the same), possibly because of my lack of understanding of the ownership/borrowing system in Rust.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 3504, "user_id": 861306, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e7554bdaabd25dbf90752e4233b284f?s=128&d=identicon&r=PG", "display_name": "reinerp", "link": "https://stackoverflow.com/users/861306/reinerp"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435439346, "post_id": 31093330, "comment_id": 50203495, "body": "I don&#39;t see why the pointer becomes invalid. The pointer refers to heap-allocated data, and the heap allocation doesn&#39;t get deleted when moving the Box&lt;u32&gt;. I think this is also the difference from the potential duplicate: I&#39;m heap-allocating the data I want to maintain a reference to."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435439857, "post_id": 31093330, "comment_id": 50203633, "body": "Woops, you&#39;re totally right, the pointer stays valid, apologies."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435440175, "post_id": 31093330, "comment_id": 50203735, "body": "The answer stays the same, though; there is no way to provide an appropriate lifetime. It&#39;s a bit difficult to say without your real use case (as you say, the minimal example is... minimal). How about going with <code>Rc</code>? If you deal with vectors, how about indices instead of refs?"}, {"owner": {"reputation": 3504, "user_id": 861306, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e7554bdaabd25dbf90752e4233b284f?s=128&d=identicon&r=PG", "display_name": "reinerp", "link": "https://stackoverflow.com/users/861306/reinerp"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435440382, "post_id": 31093330, "comment_id": 50203774, "body": "Ok, good to know that I&#39;m not missing something. I&#39;m mostly experimenting so I don&#39;t have a clear use case. I was thinking about vectors, for which indices are ok except that I now pay the cost of both a bounds check and having to read both the base pointer and the index."}, {"owner": {"reputation": 3504, "user_id": 861306, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e7554bdaabd25dbf90752e4233b284f?s=128&d=identicon&r=PG", "display_name": "reinerp", "link": "https://stackoverflow.com/users/861306/reinerp"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435440422, "post_id": 31093330, "comment_id": 50203791, "body": "By the way, the answer &quot;no, it&#39;s not possible&quot; is fine by me. If you want to post that as a real answer I&#39;ll be happy to accept. Otherwise I can self-answer :)."}], "owner": {"reputation": 3504, "user_id": 861306, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e7554bdaabd25dbf90752e4233b284f?s=128&d=identicon&r=PG", "display_name": "reinerp", "link": "https://stackoverflow.com/users/861306/reinerp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 62, "favorite_count": 0, "closed_date": 1435440738, "answer_count": 0, "score": 3, "last_activity_date": 1435437994, "creation_date": 1435437994, "question_id": 31093330, "link": "https://stackoverflow.com/questions/31093330/what-lifetime-to-use-for-internal-field-references-in-structs", "closed_reason": "Duplicate", "title": "What lifetime to use for internal field references in structs?", "body": "<p>Consider the following Rust code, using raw pointers:</p>\n\n<pre><code>struct InteriorPointer {\n  element: Box&lt;u32&gt;,\n  element_ptr: *const u32,\n}\n\nfn mk_interior_pointer() -&gt; InteriorPointer {\n  let mut result = InteriorPointer{\n    element: Box::new(1u32),\n    element_ptr: std::ptr::null(),\n  };\n  result.element_ptr = &amp;*result.element as *const u32;\n  result\n}\n</code></pre>\n\n<p>(It's a bit silly in this minimal example, but you could imagine replacing <code>element</code> with a <code>Vec&lt;u32&gt;</code> and replacing <code>element_ptr</code> with a reference to the pointer to the largest element of the array.)</p>\n\n<p>How can I write this code in safe rust, i.e. using a reference instead of a raw pointer? Here's what I tried:</p>\n\n<pre><code>struct InteriorPointer {\n  element: Box&lt;u32&gt;,\n  element_ref: &amp;'static u32,\n  // I actually want to say something like \"&amp;'self u32\" or \n  // \"&amp;'lifetimeof(element) u32\" but I'm not allowed.\n}\n\nfn mk_interior_pointer() -&gt; InteriorPointer {\n  let mut result = InteriorPointer{\n    element: Box::new(1u32),\n    element_ref: &amp;dummy_element,\n  };\n  result.element_ref = &amp;*result.element;\n  result\n}\n\nstatic dummy_element: u32 = 5;\n</code></pre>\n\n<p>Unsurprisingly, this fails to compile:</p>\n\n<pre><code>src/lib.rs:11:25: 11:40 error: `*result.element` does not live long enough\nsrc/lib.rs:11   result.element_ref = &amp;*result.element;\n                                  ^~~~~~~~~~~~~~~\nnote: reference must be valid for the static lifetime...\nsrc/lib.rs:10:5: 13:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 10:4\n</code></pre>\n\n<p>Is there a way I can express the lifetime of <code>element_ref</code> correctly?</p>\n"}, {"tags": ["macros", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1435436865, "post_id": 31092732, "comment_id": 50202787, "body": "The absolute path was exactly what I was looking for. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1435433558, "creation_date": 1435433558, "answer_id": 31092732, "question_id": 31092336, "link": "https://stackoverflow.com/questions/31092336/proper-way-to-use-in-a-macro/31092732#31092732", "title": "Proper way to `use` in a macro", "body": "<p>You can either <code>use</code> the trait, or you can refer to it with the full path:</p>\n\n<pre><code>struct Something {\n    count: i8,\n}\n\nimpl std::fmt::Display for Something {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \"{}\", self.count)\n    }\n}\n</code></pre>\n\n<p>Note that inside a module, item paths are <em>relative</em>, so you either need to use some number of <code>super</code> or an absolute path (the better choice, in my opinion):</p>\n\n<pre><code>mod inner {\n    struct Something {\n        count: i8,\n    }\n\n    impl ::std::fmt::Display for Something {\n        fn fmt(&amp;self, f: &amp;mut ::std::fmt::Formatter) -&gt; ::std::fmt::Result {\n            write!(f, \"{}\", self.count)\n        }\n    }\n}\n</code></pre>\n\n<p>There's a middle ground where you <code>use</code> the module, but not the trait:</p>\n\n<pre><code>use std::fmt;\n\nimpl fmt::Display for Something {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.count)\n    }\n}\n</code></pre>\n\n<p>And if you are just worried about typing, you can <em>alias</em> the module, but it's my belief that making it too short makes it harder to understand:</p>\n\n<pre><code>use std::fmt as f;\n\nimpl f::Display for Something {\n    fn fmt(&amp;self, f: &amp;mut f::Formatter) -&gt; f::Result {\n        write!(f, \"{}\", self.count)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 31092732, "answer_count": 1, "score": 5, "last_activity_date": 1537485185, "creation_date": 1435431068, "last_edit_date": 1537485185, "question_id": 31092336, "link": "https://stackoverflow.com/questions/31092336/proper-way-to-use-in-a-macro", "title": "Proper way to `use` in a macro", "body": "<p>I'm trying to write a macro that needs to <code>use</code> a few items. This is suitable for one use per file, but it feels dirty to me. Is there a better way to reference the items directly, such as <code>impl std::ops::Add for $t</code> or something? Thanks!</p>\n\n<pre><code>#[macro_export]\nmacro_rules! implement_measurement {\n    ($($t:ty)*) =&gt; ($(\n        // TODO: Find a better way to reference these...\n        use std::ops::{Add,Sub,Div,Mul};\n        use std::cmp::{Eq, PartialEq};\n        use std::cmp::{PartialOrd, Ordering};\n\n        impl Add for $t {\n            type Output = Self;\n\n            fn add(self, rhs: Self) -&gt; Self {\n                Self::from_base_units(self.get_base_units() + rhs.get_base_units())\n            }\n        }\n\n        impl Sub for $t {\n            type Output = Self;\n\n            fn sub(self, rhs: Self) -&gt; Self {\n                Self::from_base_units(self.get_base_units() - rhs.get_base_units())\n            }\n        }\n\n        // ... others ...\n    ))\n}\n</code></pre>\n"}, {"tags": ["unit-testing", "macros", "rust", "documentation"], "comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435436940, "post_id": 31092230, "comment_id": 50202805, "body": "@Shepmaster I&#39;m not sure. I did see that other question but still couldn&#39;t get it to work. I think it might be a different issue?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435445666, "post_id": 31092230, "comment_id": 50205112, "body": "@jocull: you noted the <code>extern crate</code> business too? <code>use</code> has nothing to do with macros."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435587551, "post_id": 31092230, "comment_id": 50249329, "body": "I figured it out from the other question finally. I updated this question with my answer and marked it as a dupe. Thanks!"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 34, "favorite_count": 0, "closed_date": 1435587217, "answer_count": 0, "score": 1, "last_activity_date": 1520187943, "creation_date": 1435430457, "last_edit_date": 1520187943, "question_id": 31092230, "link": "https://stackoverflow.com/questions/31092230/using-custom-macros-in-doc-tests", "closed_reason": "Duplicate", "title": "Using custom macros in doc tests", "body": "<p>I'm trying to get a custom macro to work in a doc test for the given code, but it's failing to pick up the macro. I believe I've exported it properly, but I can't get the test to pick it up. Can anyone help? Thanks!</p>\n\n<p>In doc / module re-export...</p>\n\n<pre><code>/// The `Measurement` trait and the `implement_measurement!` macro\n/// provides a common way for various measurements to be implemented.\n///\n/// # Example\n/// ```\n/// #[macro_use] // &lt;-- Not sure this is correct / necessary...\n/// use measurements::measurement::*;\n/// \n/// struct Cubits {\n///     forearms: f64\n/// }\n/// \n/// impl Measurement for Cubits {\n///     fn get_base_units(&amp;self) -&gt; f64 {\n///         self.forearms\n///     }\n///     \n///     fn from_base_units(units: f64) -&gt; Self {\n///         Cubits { forearms: units }\n///     }\n/// }\n///\n/// // Invoke the macro to automatically implement Add, Sub, etc...\n/// implement_measurement! { Cubits }\n/// ```\n#[macro_use]\npub mod measurement;\n</code></pre>\n\n<p>In definition...</p>\n\n<pre><code>pub use std::ops::{Add,Sub,Div,Mul};\npub use std::cmp::{Eq, PartialEq};\npub use std::cmp::{PartialOrd, Ordering};\n\npub trait Measurement {\n    fn get_base_units(&amp;self) -&gt; f64;\n    fn from_base_units(units: f64) -&gt; Self;\n}\n\n#[macro_export]\nmacro_rules! implement_measurement {\n    ($($t:ty)*) =&gt; ($(\n        impl Add for $t {\n            type Output = Self;\n\n            fn add(self, rhs: Self) -&gt; Self {\n                Self::from_base_units(self.get_base_units() + rhs.get_base_units())\n            }\n        }\n\n    // ... others ...\n))\n</code></pre>\n\n<p>}</p>\n\n<h1>Update</h1>\n\n<p>This question did end up being a duplicate, but I feel a better example of how it was solved would help. Here are the changes that made my doc test work with a macro. As shown here, you must</p>\n\n<ol>\n<li>Add a <code>main</code> function. This does something to move your crate root.</li>\n<li>Reference the <code>extern crate</code> of your own module.</li>\n<li>Add a <code>#[macro_use]</code> tag to the crate reference. You can optionally choose which macros to import (<a href=\"http://doc.rust-lang.org/book/macros.html#scoping-and-macro-import/export\" rel=\"nofollow\">see the docs</a>).</li>\n</ol>\n\n<p>Code:</p>\n\n<pre><code>/// The `Measurement` trait and the `implement_measurement!` macro\n/// provides a common way for various measurements to be implemented.\n///\n/// # Example\n/// ```\n/// // Importing the `implement_measurement` macro from the external crate is important\n/// #[macro_use]\n/// extern crate measurements;\n/// \n/// use measurements::measurement::*;\n/// \n/// struct Cubits {\n///     forearms: f64\n/// }\n/// \n/// impl Measurement for Cubits {\n///     fn get_base_units(&amp;self) -&gt; f64 {\n///         self.forearms\n///     }\n///     \n///     fn from_base_units(units: f64) -&gt; Self {\n///         Cubits { forearms: units }\n///     }\n/// }\n///\n/// // Invoke the macro to automatically implement Add, Sub, etc...\n/// implement_measurement! { Cubits }\n///\n/// // The main function here is only included to make doc tests compile.\n/// // You should't need it in your own code.\n/// fn main() { }\n/// ```\n#[macro_use]\npub mod measurement;\n</code></pre>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1435429378, "post_id": 31091966, "comment_id": 50200525, "body": "<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0114-closures.md\" rel=\"nofollow noreferrer\">RFC 114</a> is more relevant to this change than RFC 231, but the details of RFC 114 are not current (for instance, <code>Fn</code> is now <code>FnMut</code> and <code>FnShare</code> is now <code>Fn</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435435532, "post_id": 31091966, "comment_id": 50202437, "body": "<i>explicitly mark them as deprecated</i> - or just ask the other answerer to update the answer ^_^. I did so, and it got updated in a few minutes. Now, should this question be marked as a duplicate?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435437990, "post_id": 31091966, "comment_id": 50203137, "body": "I didn&#39;t have SO in mind, but rather blog posts, where the content is not community-updatable. It may even be undesirable; for example Niko Matsakis&#39; blog posts are more about the thought process -- you would keep it as a historical reference rather than an up-to-date doc."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1435438158, "post_id": 31091966, "comment_id": 50203178, "body": "About the duplicate, feel free to mark it if you believe so; I personally don&#39;t agree, because really, this question is really not about closures but actually asking &quot;hey, is there really out-of-date information around here? what to do with it?&quot;, which is not addressed in the linked question."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 8, "last_activity_date": 1435429454, "last_edit_date": 1435429454, "creation_date": 1435429086, "answer_id": 31091966, "question_id": 31091846, "link": "https://stackoverflow.com/questions/31091846/cannot-pass-closure-as-parameter/31091966#31091966", "title": "Cannot pass closure as parameter", "body": "<p>Rust has been developed in the open from the beginning and the language has evolved a lot since then. The Stack Overflow article you're linking to is almost 1 year old, which in pre-1.0 Rust time is as long as a lifetime... (pun intended)</p>\n\n<p>The most straightforward answer would be: keep in mind that a lot of articles, blogs posts, SO answers... are not relevant anymore because the language changed. If you try a solution and it doesn't work, just find the newer syntax (as you did!) and move on.</p>\n\n<p>For this specific case, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0231-upvar-capture-inference.md\" rel=\"noreferrer\">this RFC</a> documents the change from <code>|...| -&gt; ...</code> to <code>Fn/FnMut/FnOnce(...) -&gt; ...</code>.</p>\n\n<p>By the way, there is a plan for a community effort to find outdated articles and explicitly mark them as deprecated, in order for this particular problem to be avoided. I can't find the link to it, though.</p>\n"}, {"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 16, "last_activity_date": 1484672160, "creation_date": 1484672160, "answer_id": 41702747, "question_id": 31091846, "link": "https://stackoverflow.com/questions/31091846/cannot-pass-closure-as-parameter/41702747#41702747", "title": "Cannot pass closure as parameter", "body": "<p>If anyone is interested in this question today, here's the syntax with generics:</p>\n\n<pre><code>fn foo&lt;F: Fn(i32) -&gt; i32&gt;(a: i32, f: F) -&gt; i32 {\n    f(a)\n}\n\nfn main() {\n    let bar = foo(5, |x| { x + 1 });\n    println!(\"{}\", bar);\n}\n</code></pre>\n\n<p>Or, using trait objects:</p>\n\n<pre><code>fn foo(a: i32, f: Box&lt;Fn(i32) -&gt; i32&gt;) -&gt; i32 {\n    f(a)\n}\n\nfn main() {\n    let bar = foo(5, Box::new(|x| { x + 1 }));\n    println!(\"{}\", bar);\n}\n</code></pre>\n\n<p>You should prefer the former.</p>\n"}], "owner": {"reputation": 958, "user_id": 2626742, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3376e8297d843faf775b3cee1a906f9a?s=128&d=identicon&r=PG", "display_name": "Cody", "link": "https://stackoverflow.com/users/2626742/cody"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3448, "favorite_count": 0, "closed_date": 1484672496, "accepted_answer_id": 31091966, "answer_count": 2, "score": 11, "last_activity_date": 1484672160, "creation_date": 1435428322, "last_edit_date": 1495540954, "question_id": 31091846, "link": "https://stackoverflow.com/questions/31091846/cannot-pass-closure-as-parameter", "closed_reason": "Duplicate", "title": "Cannot pass closure as parameter", "body": "<p>I'm learning Rust right now, and it seems I can't specify a closure as a function parameter. Here's what I have:</p>\n\n<pre><code>fn foo(a: i32, f: |i32| -&gt; i32) -&gt; i32 {\n    f(a)\n}\n\nfn main() {\n    let bar = foo(5, |x| { x + 1 });\n    println!(\"{}\", bar);\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre><code>foo.rs:1:19: 1:20 error: expected type, found `|`\nfoo.rs:1 fn foo(a: i32, f: |i32| -&gt; i32) -&gt; i32 {\n</code></pre>\n\n<p>Okay, so it didn't like the closure syntax. This is sort of annoying, because now I have to write this:</p>\n\n<pre><code>fn foo(a: i32, f: Box&lt;Fn(i32) -&gt; i32&gt;) -&gt; i32 {\n    f(a)\n}\n\nfn main() {\n    let bar = foo(5, Box::new(|x| { x + 1 }));\n    println!(\"{}\", bar);\n}\n</code></pre>\n\n<p>So what's going on? I've read in a few different <a href=\"https://stackoverflow.com/questions/25182565/anonymous-functions-as-parameters-in-rust\">places</a> that the first example is valid, so was this \"closure type parameter\" syntax removed, or am I just doing something wrong?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1435415805, "post_id": 31089768, "comment_id": 50196406, "body": "<code>unsafe fn foo&lt;&#39;a, T&gt;(x: T + &#39;a) -&gt; T + &#39;static</code> doesn\u2019t make sense\u2014it\u2019s not syntactically valid. What are you <i>actually</i> writing?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435417587, "post_id": 31089768, "comment_id": 50196884, "body": "It should take an input of some type with some lifetime constraint, and return an output of the same type with a global lifetime constraint. I&#39;ve tried to clarify the post, but if I knew the correct syntax for the signature, I wouldn&#39;t have a problem - I could just <code>mem::transmute</code>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1435432868, "post_id": 31089768, "comment_id": 50201646, "body": "Are you talking about things like <code>Box&lt;Any + &#39;static&gt;</code>? Those only make sense for trait objects. Or do you mean bounds such as <code>fn no_borrows&lt;T: &#39;static&gt;(x: T) -&gt; T { x }</code>?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 1, "creation_date": 1435434113, "post_id": 31089768, "comment_id": 50202018, "body": "More like the latter. I want to cast from a version of T with one lifetime to a version of T with a greater lifetime. (unsafely, of course)."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435445342, "post_id": 31089768, "comment_id": 50205044, "body": "@bfops: what you are describing now is simply not possible. A type satisfies a certain lifetime requirement, which is known statically. There can be no transmutation or such things between them. For the concept of your <code>T2</code> to exist, <code>T1</code> must be <code>&#39;static</code> already. What you seem to be trying to implement is flatly impossible and always will be."}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1435467688, "post_id": 31089768, "comment_id": 50208833, "body": "So it is impossible to implement <code>scoped</code> in terms of <code>spawn</code>, even using arbitrary amounts of <code>unsafe</code>? That seems strange. I feel like <code>unsafe</code> exists for the purpose of circumventing rusty constraints.."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1435485905, "post_id": 31089768, "comment_id": 50212502, "body": "It is possible to implement <code>scoped</code> using unsafe code. However, it is not possible to implement it in terms of <code>spawn</code>. You can take a look at the <a href=\"https://github.com/rust-lang/rust/blob/c1b8bd2d6fd4a00522635112d3f7b28501552a65/src/libstd/thread/mod.rs#L303\" rel=\"nofollow noreferrer\">source code</a> to see how this is done un the unstable <code>thread::spawn</code>."}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1435585834, "post_id": 31089768, "comment_id": 50248060, "body": "I mean, copy-pasting the code is obviously doable. But it seems kind of strange that it&#39;s not possible to even unsafely implement <code>scoped</code> in terms of spawn. The mechanics are basically the same, no? <code>unsafe</code> has generally been there for me when I wanted to use an abstraction potentially unsafely, and take on the responsibility of correctness myself. Implementing scoped this way doesn&#39;t seem fundamentally incorrect.. Am I missing something?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1478561279, "last_edit_date": 1478561279, "creation_date": 1478560889, "answer_id": 40476458, "question_id": 31089768, "link": "https://stackoverflow.com/questions/31089768/casting-away-lifetime-constraints/40476458#40476458", "title": "Casting away lifetime constraints?", "body": "<p>What you are describing now is simply not possible. A type satisfies a certain lifetime requirement, which is known statically. There can be no transmutation or such things between them. For the concept of your <code>T2</code> to exist, <code>T1</code> must be <code>'static</code> already. What you seem to be trying to implement is flatly impossible and always will be.</p>\n\n<p>It is possible to implement <code>scoped</code> using unsafe code, but it is not possible to implement it in terms of <code>thread::spawn</code>. You can take a look at the <a href=\"https://github.com/rust-lang/rust/blob/1.3.0/src/libstd/thread/mod.rs#L276-L284\" rel=\"nofollow noreferrer\">source code of <code>thread::scoped</code> in Rust 1.3.0</a> to see how this was done. Be aware that <code>thread::scoped</code> was removed because it had <a href=\"https://github.com/rust-lang/rust/issues/24292\" rel=\"nofollow noreferrer\">soundness issues</a>, so it isn't a perfect example to copy wholesale.</p>\n"}, {"comments": [{"owner": {"reputation": 18645, "user_id": 50385, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2faf0c72f6a7f65431e7df489878be24?s=128&d=identicon&r=PG", "display_name": "Joseph Garvin", "link": "https://stackoverflow.com/users/50385/joseph-garvin"}, "edited": false, "score": 0, "creation_date": 1617491139, "post_id": 52884507, "comment_id": 118320106, "body": "The answer is a few years old now is it still the best way?"}, {"owner": {"reputation": 175, "user_id": 2372803, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89339983d18fb9129fe86739e3f7c5e4?s=128&d=identicon&r=PG", "display_name": "nfrasser", "link": "https://stackoverflow.com/users/2372803/nfrasser"}, "reply_to_user": {"reputation": 18645, "user_id": 50385, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2faf0c72f6a7f65431e7df489878be24?s=128&d=identicon&r=PG", "display_name": "Joseph Garvin", "link": "https://stackoverflow.com/users/50385/joseph-garvin"}, "edited": false, "score": 1, "creation_date": 1617724635, "post_id": 52884507, "comment_id": 118382203, "body": "@JosephGarvin I haven&#39;t fully kept up with all the latest developments, but I don&#39;t know of any other way to do this. The latest 1.51.0 docs still provide this example: <a href=\"https://doc.rust-lang.org/1.51.0/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.51.0/std/mem/fn.transmute.html</a>"}], "tags": [], "owner": {"reputation": 175, "user_id": 2372803, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89339983d18fb9129fe86739e3f7c5e4?s=128&d=identicon&r=PG", "display_name": "nfrasser", "link": "https://stackoverflow.com/users/2372803/nfrasser"}, "is_accepted": false, "score": 8, "last_activity_date": 1539910818, "creation_date": 1539910818, "answer_id": 52884507, "question_id": 31089768, "link": "https://stackoverflow.com/questions/31089768/casting-away-lifetime-constraints/52884507#52884507", "title": "Casting away lifetime constraints?", "body": "<p>Although I had a similar problem, <strong>I do not recommend extending lifetime constraints</strong>. It's almost certain that a different approach is in order for situations where this comes up.</p>\n\n<p>That said, you can extend a lifetime in the latest Rust stable (1.29.0 as of this writing) via <a href=\"https://doc.rust-lang.org/1.29.0/std/mem/fn.transmute.html#examples\" rel=\"noreferrer\"><code>std::mem::transmute</code></a>. </p>\n\n<p>Example from the docs (with the caveat \"<strong>This is advanced, very unsafe Rust!</strong>\"):</p>\n\n<pre><code>struct R&lt;'a&gt;(&amp;'a i32);\nunsafe fn extend_lifetime&lt;'b&gt;(r: R&lt;'b&gt;) -&gt; R&lt;'static&gt; {\n    std::mem::transmute::&lt;R&lt;'b&gt;, R&lt;'static&gt;&gt;(r)\n}\n</code></pre>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1355, "favorite_count": 1, "answer_count": 2, "score": 5, "last_activity_date": 1539910818, "creation_date": 1435415072, "last_edit_date": 1435434181, "question_id": 31089768, "link": "https://stackoverflow.com/questions/31089768/casting-away-lifetime-constraints", "title": "Casting away lifetime constraints?", "body": "<p>I'm trying to write a Rust function that casts an input from one lifetime constraint to a same-typed output with a global lifetime constraint (conceptually something like <code>unsafe fn foo&lt;'a, T1, T2&gt;(x: T1) -&gt; T2 where T1: 'a, T2 = T1 + 'static</code>), but I can't quite figure out how to write it without adding indirection layers like <code>Box</code>. Any ideas?</p>\n\n<p>More generally, I'm trying to implement an unsafe <code>thread::scoped</code> in terms of <code>mem::transmute</code> and <code>thread::spawn</code>. <code>spawn</code> requires <code>'static</code> bounds on its <code>T</code> and <code>F</code> parameters, but <code>scoped</code> does/should not.</p>\n"}, {"tags": ["rust", "return-value"], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435398209, "post_id": 31086943, "comment_id": 50191692, "body": "I&#39;ve made test as you suggest. Actually from I started from this step. Any way. In case with ws: () = ... I receive error: <code>found struct </code>websocket::client::Client<code>) [E0308]</code> So next step is to set this struct as return type. &lt;code&gt; fn get_transport&lt;W: Write, R: Read&gt;(url: &amp;str) -&gt; websocket::client::Client {     let url = Url::parse(url).unwrap();     let request = Client::connect(url).unwrap();     let response = request.send().unwrap();     let mut ws = response.begin();     ws } &lt;/code&gt; Error:  src/lib.rs:36:51: 36:76 error: wrong number of type arguments: expected 3, found 0 [E0243]"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 1, "last_activity_date": 1435395292, "creation_date": 1435395292, "answer_id": 31086943, "question_id": 31086444, "link": "https://stackoverflow.com/questions/31086444/return-traits-from-function/31086943#31086943", "title": "Return Traits from function", "body": "<p>You want to replace <code>Write</code> and <code>Send</code> in the return type with concrete types.</p>\n\n<p>Try changing the line <code>let mut ws = response.begin();</code> to <code>let mut ws: () = response.begin()</code> and you will see an error message that will tell you what concrete types are being returned from the begin function.</p>\n"}, {"comments": [{"owner": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 1, "creation_date": 1435397783, "post_id": 31087038, "comment_id": 50191583, "body": "Yeah I see your point. Writer, Reader not Sized. But I do not fallow your point. How adding generics labels should help in this case? Also I&#39;ve try to add this changes to function and still have similar error. Maybe I should build sources in different fay?  Last error message (just in case): error: the trait <code>core::marker::Sized</code> is not implemented for the type <code>websocket::ws::sender::Sender&lt;W&gt;</code> [E0277]"}, {"owner": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435398576, "post_id": 31087038, "comment_id": 50191801, "body": "So... I still not fallow how it works in response.rs case? And how to make it work in my case."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435398682, "post_id": 31087038, "comment_id": 50191828, "body": "because in that case they use the <code>Sender</code> object instead of the trait."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435398708, "post_id": 31087038, "comment_id": 50191835, "body": "you can find it here: <a href=\"https://github.com/cyderize/rust-websocket/blob/master/src/client/sender.rs\" rel=\"nofollow noreferrer\">github.com/cyderize/rust-websocket/blob/master/src/client/&hellip;</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435398759, "post_id": 31087038, "comment_id": 50191840, "body": "and they implement <code>ws::Sender</code> for that <code>Sender</code> type"}, {"owner": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435444192, "post_id": 31087038, "comment_id": 50204783, "body": "Thank you for your help. You have bit clarify for me generics in Rust. Unfortunately I&#39;ve make mistake with import Sender and Reader. Project have struct and traits with same name.  Maybe you could point me to right text about Rust generics. Seems Rust generics much more deeper then I expect.   Also could you please check UPD1 and comment why I receiving error in case with Traits.  As I see in rust-websocket project sources method begin() returns Traits. Not clear for me why I could not return Sender with &lt;Write&gt; trait."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "edited": false, "score": 0, "creation_date": 1435471125, "post_id": 31087038, "comment_id": 50209329, "body": "When you use generics, the caller of the generic function decides what types to expect. Here you are forcing the type of the <code>W</code> and <code>R</code> generics. This is called specialization, and most likely not what you want. You can simply remove the generics and return the actual type <code>websocket::client::Client&lt;websocket::dataframe::DataFrame, websocket::client::sender::Sender&lt;websocket::stream::WebSock&zwnj;&#8203;etStream&gt;, websocket::client::receiver::Receiver&lt;websocket::stream::Web&zwnj;&#8203;SocketStream&gt;&gt;</code> which the error message is telling you"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1435398390, "last_edit_date": 1435398390, "creation_date": 1435396080, "answer_id": 31087038, "question_id": 31086444, "link": "https://stackoverflow.com/questions/31086444/return-traits-from-function/31087038#31087038", "title": "Return Traits from function", "body": "<p>Since any type may implment a trait, you can never know the size of an object by knowing just about the traits it implements. What you can do, is make your function generic over the types that implement Write and Read respectively. This way you can return the object, while not knowing what the actual type of the object is.</p>\n\n<pre><code>fn get_transport&lt;W: Write, R: Read, S: Sender&lt;W&gt;, RE: Receiver&lt;R&gt;&gt;(url: &amp;str) -&gt; Client&lt;DataFrame, S, RE&gt; {\n    let url = Url::parse(url).unwrap();\n    let request = Client::connect(url).unwrap();\n    let response = request.send().unwrap();\n    let mut ws = response.begin();\n\n    ws\n}\n</code></pre>\n\n<p>The reason why adding generics works, is because the generic labels point to the actual types, without knowing anything about the type except which traits they implement.</p>\n"}], "owner": {"reputation": 43, "user_id": 848416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ab53a7c4fcec187b3433bbc10303c0?s=128&d=identicon&r=PG&f=1", "display_name": "slavamnemonic", "link": "https://stackoverflow.com/users/848416/slavamnemonic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 671, "favorite_count": 0, "accepted_answer_id": 31087038, "answer_count": 2, "score": 4, "last_activity_date": 1435470959, "creation_date": 1435391572, "last_edit_date": 1435470959, "question_id": 31086444, "link": "https://stackoverflow.com/questions/31086444/return-traits-from-function", "title": "Return Traits from function", "body": "<p>I've take a look to rust lib: <a href=\"https://github.com/cyderize/rust-websocket/\" rel=\"nofollow\">https://github.com/cyderize/rust-websocket/</a>\nIn source file <a href=\"https://github.com/cyderize/rust-websocket/blob/master/src/client/response.rs\" rel=\"nofollow\">https://github.com/cyderize/rust-websocket/blob/master/src/client/response.rs</a>\nI seen method begin():</p>\n\n<pre><code>pub fn begin(self) -&gt; Client&lt;DataFrame, Sender&lt;W&gt;, Receiver&lt;R&gt;&gt; {\n    let (reader, writer) = self.into_inner();\n    let sender = Sender::new(writer);\n    let receiver = Receiver::new(reader);\n    Client::new(sender, receiver)\n}\n</code></pre>\n\n<p>So... I've decide to create some simple wrapper function:</p>\n\n<pre><code>fn get_transport(url: &amp;str)  -&gt;  Client&lt;DataFrame, Sender&lt;Write&gt;, Receiver&lt;Read&gt;&gt; {\n    let url = Url::parse(url).unwrap();\n    let request = Client::connect(url).unwrap();\n    let response = request.send().unwrap();\n    let mut ws = response.begin();\n\n    ws\n}\n</code></pre>\n\n<p>But unfortunately  I've got error result:</p>\n\n<pre><code>error: the trait `core::marker::Sized` is not implemented for the type `websocket::ws::sender::Sender&lt;std::io::Write&gt;` [E0277]\nsrc/lib.rs:36 fn get_transport(url: &amp;str)  -&gt;  Client&lt;DataFrame, Sender&lt;Write&gt;, Receiver&lt;Read&gt;&gt; {\n</code></pre>\n\n<p>Could some one please describe me why I could not return value in this way. What the difference with begin() method in the <code>response.rs</code>?\nHow should I return value in my case?</p>\n\n<p><strong>UPD1:</strong>\nAfter @ker recommendations I've have next code:</p>\n\n<pre><code>fn get_transport&lt;W: Write, R: Read, S: Sender&lt;W&gt;, RE: Receiver&lt;R&gt;&gt;(url: &amp;str) -&gt; Client&lt;DataFrame, S, RE&gt; {\n\n    let url = Url::parse(url).unwrap();\n    let request = Client::connect(url).unwrap();\n    let response = request.send().unwrap();\n    let mut ws = response.begin();\n\n    ws\n}\n</code></pre>\n\n<p>But next error received in next compilation:</p>\n\n<pre><code>src/lib.rs:45:5: 45:7 error: mismatched types:\n expected `websocket::client::Client&lt;websocket::dataframe::DataFrame, S, RE&gt;`,\n    found `websocket::client::Client&lt;websocket::dataframe::DataFrame, websocket::client::sender::Sender&lt;websocket::stream::WebSocketStream&gt;, websocket::client::receiver::Receiver&lt;websocket::stream::WebSocketStream&gt;&gt;`\n(expected type parameter,\n    found struct `websocket::client::sender::Sender`) [E0308]\nsrc/lib.rs:45     ws\n                  ^~\nsrc/lib.rs:45:5: 45:7 help: run `rustc --explain E0308` to see a detailed explanation\nerror: aborting due to previous error\n</code></pre>\n\n<p>Seems I'v use wrong Sender and wrong Receiver :\\\nAfter corrections to use section I've have got result code:</p>\n\n<pre><code>fn get_transport(url: &amp;str) -&gt; Client&lt;DataFrame, Sender&lt;WebSocketStream&gt;, Receiver&lt;WebSocketStream&gt;&gt; {\n    let url = Url::parse(url).unwrap();\n    let request = Client::connect(url).unwrap();\n    let response = request.send().unwrap();\n    let mut ws = response.begin();\n\n    ws\n}\n</code></pre>\n\n<p>Unfortunately  I could not found out why I could not use generics as result value. Like this:</p>\n\n<pre><code>fn get_transport&lt;R: Read, W: Write&gt;(url: &amp;str) -&gt; Client&lt;DataFrame, Sender&lt;W&gt;, Receiver&lt;R&gt;&gt;\n</code></pre>\n\n<p>In this caseI receive error message:</p>\n\n<pre><code>expected `websocket::client::Client&lt;websocket::dataframe::DataFrame, websocket::client::sender::Sender&lt;W&gt;, websocket::client::receiver::Receiver&lt;R&gt;&gt;`,\n    found `websocket::client::Client&lt;websocket::dataframe::DataFrame, websocket::client::sender::Sender&lt;websocket::stream::WebSocketStream&gt;, websocket::client::receiver::Receiver&lt;websocket::stream::WebSocketStream&gt;&gt;`\n(expected type parameter,\n    found enum `websocket::stream::WebSocketStream`) [E0308]\nsrc/lib.rs:45     ws\n                  ^~\n</code></pre>\n"}, {"tags": ["redis", "rust"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1435394513, "post_id": 31084967, "comment_id": 50190759, "body": "Have you checked for the value of the <code>RedisResult</code> returned by <code>read_meta_keys_redis</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435432929, "post_id": 31084967, "comment_id": 50201666, "body": "This was cross-posted to the <a href=\"https://www.reddit.com/r/rust/comments/3b9rg8/accessing_redis_from_rust/\" rel=\"nofollow noreferrer\">Rust subreddit</a>."}], "answers": [{"comments": [{"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435459912, "post_id": 31086921, "comment_id": 50207648, "body": "I assumed rust bubbled up the exception trace as java does. clearly I was wrong. Thanks."}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435460410, "post_id": 31086921, "comment_id": 50207719, "body": "I am able to get the error back.  but initial objective is still unmet . I am getting the error <b>Invalid database number</b>  my local redis client says 127.0.0.1:6379[2]&gt; smembers myset 1) &quot;hello&quot; 2) &quot;how are you&quot; 127.0.0.1:6379[2]&gt;"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435483641, "post_id": 31086921, "comment_id": 50211916, "body": "Maybe you could open a new question for that. I am not familiar with redis ;)"}, {"owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435501563, "post_id": 31086921, "comment_id": 50217012, "body": "I am from Java background, so assumed that exception gets bubbled up the execution trace. Thanks for correcting me"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "edited": false, "score": 0, "creation_date": 1435510906, "post_id": 31086921, "comment_id": 50219824, "body": "No problem ;)... If you are happy with the answer, you can mark it as answer so people can know that the question is solved."}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 5, "last_activity_date": 1435395535, "last_edit_date": 1435395535, "creation_date": 1435395108, "answer_id": 31086921, "question_id": 31084967, "link": "https://stackoverflow.com/questions/31084967/silent-error-while-accessing-redis/31086921#31086921", "title": "Silent error while accessing Redis", "body": "<h1>Short answer</h1>\n\n<p>The error is raised, but you are ignoring it.</p>\n\n<h1>Long anser</h1>\n\n<p>Non-fatal errors are usually propagated by returning a <code>Result</code>, so the caller can handle the error. Panics are mostly used for unrecoverable errors and will abort the current thread. In this case, the redis library uses the <code>RedisResult</code> type, which is an alias for <code>Result&lt;T, RedisError&gt;</code>.</p>\n\n<p>If you want to handle the error, you should do so by matching on the result type. Try changing your main function to the following:</p>\n\n<pre><code>fn main() {\n    if let Err(e) = read_meta_keys_redis(\"myset\".to_string()) {\n        println!(\"{}\", e.description());\n    }\n}\n</code></pre>\n\n<p>See also: <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\">Error Handling (The Rust Book)</a></p>\n"}], "owner": {"reputation": 290, "user_id": 3731154, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/add6d86ee1fc413feba633e3cd30f70e?s=128&d=identicon&r=PG&f=1", "display_name": "harry", "link": "https://stackoverflow.com/users/3731154/harry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 181, "favorite_count": 0, "accepted_answer_id": 31086921, "answer_count": 1, "score": 4, "last_activity_date": 1435424214, "creation_date": 1435377117, "last_edit_date": 1435424214, "question_id": 31084967, "link": "https://stackoverflow.com/questions/31084967/silent-error-while-accessing-redis", "title": "Silent error while accessing Redis", "body": "<p>I am a newbie with Rust. I am using the crate <code>redis = \"0.3.1\"</code> but the program simply exits without raising a panic. The only thing I am doing different is that the database is different.</p>\n\n<pre><code>extern crate redis;\n\nuse redis::*;\nuse std::string::String;\nuse std::collections::HashSet;\n\nfn main() {\n    read_meta_keys_redis(\"myset\".to_string());\n}\n\nfn read_meta_keys_redis(key: String) -&gt; redis::RedisResult&lt;()&gt; {\n    println!(\"22{}\", key);\n    let client = try!(redis::Client::open(\"redis://127.0.0.1:6379/2\"));\n\n    let con = try!(client.get_connection());\n    let mems: HashSet&lt;i32&gt; = try!(con.smembers(key));\n    for x in mems.iter() {\n        println!(\"op--&gt;{}\", x);\n    }\n    Ok(())\n}\n</code></pre>\n"}, {"tags": ["struct", "console", "rust", "println"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1435369855, "post_id": 31084328, "comment_id": 50186611, "body": "<code>for node in self.children</code> \u2192 <code>for node in &amp;self.children</code>. Also use <code>try!()</code> around each <code>write</code>. (welcome to format this into an answer.)"}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435385744, "post_id": 31084351, "comment_id": 50188936, "body": "Semantically this sort of output is far more likely to be suitable for <code>Debug</code> than <code>Display</code>, incidentally."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1435369767, "creation_date": 1435369767, "answer_id": 31084351, "question_id": 31084328, "link": "https://stackoverflow.com/questions/31084328/recursively-print-struct-in-fmtdisplay/31084351#31084351", "title": "Recursively print struct in `fmt::Display`", "body": "<p>It seems you are confusing <a href=\"http://doc.rust-lang.org/stable/std/fmt/trait.Display.html\" rel=\"nofollow\"><code>Display</code></a> and <a href=\"http://doc.rust-lang.org/stable/std/fmt/trait.Debug.html\" rel=\"nofollow\"><code>Debug</code></a>.</p>\n\n<p><code>{:?}</code> uses the <code>Debug</code> trait for formatting. You probably didn't implement <code>Debug</code> on your type, which is why you'd get an error. To use the <code>Display</code> trait, write <code>{}</code> in your format string.</p>\n\n<pre><code>write!(f, \"CHILDREN:\\n\\t {}\", node);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1435396709, "creation_date": 1435396709, "answer_id": 31087122, "question_id": 31084328, "link": "https://stackoverflow.com/questions/31084328/recursively-print-struct-in-fmtdisplay/31087122#31087122", "title": "Recursively print struct in `fmt::Display`", "body": "<p>There is a (somewhat hidden) feature of <code>Debug</code>, you can use the format specifier <code>{:#?}</code> to pretty-print your object (with indents and multiple lines). If you rewrite your struct's elements to have the same order as your requested output and derive the <code>Debug</code> trait</p>\n\n<pre><code>#[derive(Debug)]\npub struct Node&lt;'a&gt; {\n    pub start_tag: &amp;'a str,\n    pub content: String,\n    pub children: Vec&lt;Node&lt;'a&gt;&gt;,\n    pub end_tag: &amp;'a str,\n}\n</code></pre>\n\n<p>then your output can look like this:</p>\n\n<pre><code>Node {\n    start_tag: \"Hello\",\n    content: \"\",\n    children: [\n        Node {\n            start_tag: \"Foo\",\n            content: \"\",\n            children: [],\n            end_tag: \"Bar\"\n        }\n    ],\n    end_tag: \"World\"\n}\n</code></pre>\n\n<p>Try it out in the <a href=\"http://is.gd/36avQN\" rel=\"noreferrer\">PlayPen</a></p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1097, "favorite_count": 0, "accepted_answer_id": 31087122, "answer_count": 2, "score": 4, "last_activity_date": 1435396709, "creation_date": 1435369517, "last_edit_date": 1592644375, "question_id": 31084328, "link": "https://stackoverflow.com/questions/31084328/recursively-print-struct-in-fmtdisplay", "title": "Recursively print struct in `fmt::Display`", "body": "<p>I'm currently in the process of implementing <code>fmt::Display</code> for a struct so that it will print out to the console. However The struct has a field which is a <code>Vec</code> of it's type.</p>\n<h2>Struct</h2>\n<pre><code>pub struct Node&lt;'a&gt; {\n    pub start_tag: &amp;'a str,\n    pub end_tag: &amp;'a str,\n    pub content: String,\n    pub children: Vec&lt;Node&lt;'a&gt;&gt;,\n}\n</code></pre>\n<h2>Current fmt::Display (invalid)</h2>\n<pre><code>impl&lt;'a&gt; fmt::Display for Node&lt;'a&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, &quot;START TAG: {:?}&quot;, self.start_tag);\n        write!(f, &quot;CONTENT: {:?}&quot;, self.content);\n        for node in self.children {\n            write!(f, &quot;CHILDREN:\\n\\t {:?}&quot;, node);\n        }\n        write!(f, &quot;END TAG: {:?}&quot;, self.end_tag);\n    }\n}\n</code></pre>\n<h2>Desired Output</h2>\n<pre><code>START TAG: &quot;Hello&quot;\nCONTENT: &quot;&quot;\nCHILDREN:\n   PRINTS CHILDREN WITH INDENT\nEND TAG: &quot;World&quot;\n</code></pre>\n"}, {"tags": ["rust", "lifetime-scoping"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 5, "creation_date": 1435365655, "post_id": 31083979, "comment_id": 50186028, "body": "An even simpler example where lifetime elision fails is <code>fn pick_one(a: &amp;T, b: &amp;T) -&gt; &amp;T</code> (even if it always returns one of them unconditionally)."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 11, "last_activity_date": 1435365535, "creation_date": 1435365535, "answer_id": 31083979, "question_id": 31083746, "link": "https://stackoverflow.com/questions/31083746/when-do-i-need-to-specify-explicit-lifetimes-in-rust/31083979#31083979", "title": "When do I need to specify explicit lifetimes in Rust?", "body": "<p>Practically speaking, the #1 reason you'll have to write lifetime annotations is <em>because the compiler asks you so</em>. It will reject function signatures which are not covered by <a href=\"https://github.com/rust-lang/rfcs/blob/704f0060176418659698eb63642e2071b109e029/active/0000-lifetime-elision.md\">lifetime elision rules</a>. </p>\n\n<p>I assume you would like an simple example where lifetimes are mandatory. Imagine the following scenario:</p>\n\n<pre><code>struct Blah&lt;'a&gt; {\n    hoy: &amp;'a u8\n}\n\nfn want_a_hoy(blah: &amp;Blah) -&gt; &amp;u8 {\n    blah.hoy\n}\n</code></pre>\n\n<p>The intention is obvious, but the compiler doesn't handle it:</p>\n\n<pre><code>&lt;anon&gt;:7:35: 7:38 error: missing lifetime specifier [E0106]\n&lt;anon&gt;:7     fn want_a_hoy(blah: &amp;Blah) -&gt; &amp;u8 {\n                                           ^~~\n&lt;anon&gt;:7:35: 7:38 help: see the detailed explanation for E0106\n&lt;anon&gt;:7:35: 7:38 help: this function's return type contains a borrowed value, but \n                        the signature does not say which one of `blah`'s 2 elided \n                        lifetimes it is borrowed from\n</code></pre>\n\n<p>In this case, annotations solve the problem:</p>\n\n<pre><code>fn want_a_hoy&lt;'a, 'b&gt;(blah: &amp;'b Blah&lt;'a&gt;) -&gt; &amp;'a u8 {\n    blah.hoy\n}\n</code></pre>\n\n<p>Here you're specifying <code>'a</code> twice (on <code>Blah&lt;'a&gt;</code> and <code>&amp;'a</code>). This is the same lifetime! So what you're saying to the compiler here is: \"This function takes a reference to a blah containing an inner reference. I will return something which lives exactly as long as the inner reference of the blah.\" In this case, the signature gives a strong hint that you're likely to return something coming from the innards of the blah.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 781, "favorite_count": 2, "accepted_answer_id": 31083979, "answer_count": 1, "score": 13, "last_activity_date": 1437743357, "creation_date": 1435362946, "last_edit_date": 1437743357, "question_id": 31083746, "link": "https://stackoverflow.com/questions/31083746/when-do-i-need-to-specify-explicit-lifetimes-in-rust", "title": "When do I need to specify explicit lifetimes in Rust?", "body": "<p>If I have the two functions</p>\n\n<pre><code>// implicit\nfn foo(x: &amp;i32) {\n}\n\n// explicit\nfn bar&lt;'a&gt;(x: &amp;'a i32) {\n}\n</code></pre>\n\n<p>When would <code>foo</code> return an error and <code>bar</code> be the correct function header? I'm confused as to <strong>why</strong> I would explicitly declare a lifetime:</p>\n\n<blockquote>\n  <p>The 'a reads \u2018the lifetime a\u2019. Technically, every reference has some\n  lifetime associated with it, but the compiler lets you elide them in\n  common cases.</p>\n</blockquote>\n\n<p>I understand what a lifetime is, but what does explicitly specifying a lifetime <code>'a</code> <strong>do</strong> for me? For reference I'm using the <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html\" rel=\"noreferrer\">Rust book</a> as reading material</p>\n"}, {"tags": ["python", "memory-leaks", "rust", "ctypes", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436827112, "post_id": 31083223, "comment_id": 50765532, "body": "Note that in this case, there is <b>no</b> memory leak. Instead, it is a use-after-free error, which is usually much more destructive."}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435360362, "post_id": 31083443, "comment_id": 50184928, "body": "<code>CString</code> is represented as <code>Box&lt;[u8]&gt;</code>; <code>std::raw::Slice</code> (unstable) shows the representation of that type. Transmuting back and forth is likely to be the best way if you want to transfer ownership."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435360443, "post_id": 31083443, "comment_id": 50184949, "body": "@ChrisMorgan <code>CString</code> became a <code>Box&lt;[u8]&gt;</code> at the same time I added <code>into_ptr</code>; before that, it was a <code>Vec&lt;u8&gt;</code> ."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435360578, "post_id": 31083443, "comment_id": 50184983, "body": "@ChrisMorgan This is undocumented though, and unlike <code>struct Box&lt;T&gt;(*mut T)</code> it is not obvious that this will never change. Therefore I&#39;m weary to recommend it, especially since a stable <code>into_ptr</code>/<code>from_ptr</code> is probably only two releases away."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1435360612, "post_id": 31083443, "comment_id": 50184995, "body": "@Shepmaster: I see that commenting on it based on the <i>current</i> source code rather than the <i>stable</i> source code is a bad idea. Or rather, transmuting is hazardous. Ah well, at least <code>mem::transmute::&lt;CString, *const [u8]&gt;()</code> would fail to compile because of size mismatch."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435360834, "post_id": 31083443, "comment_id": 50185058, "body": "Regarding the <code>into_ptr</code>, I was using that for a while. But, I thought of switching to stable. Moreover, if you can see the docs (well, I have it locally), the <code>into_ptr</code> warns us - <i>&quot;The pointer must be returned to Rust and reconstituted using <code>from_ptr</code> to be properly deallocated. Specifically, one should not use the standard C free function to deallocate this string.&quot;</i> (This really confused me)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 1, "creation_date": 1435362554, "post_id": 31083443, "comment_id": 50185466, "body": "@Waffle&#39;sCrazyPeanut I&#39;d love to hear how I could make that documentation clearer. The important point is that <b>Rust</b> must be the thing that frees anything that Rust created."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435390748, "post_id": 31083443, "comment_id": 50189954, "body": "@Shepmaster: I understand it now. I got confused because I never thought that it&#39;d be so complicated to just destroy something (like I said, it&#39;s my first into systems programming). And, don&#39;t worry, the docs are very much clear enough :)"}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435391360, "post_id": 31083443, "comment_id": 50190101, "body": "@delnan Since freeing seems complicated for me in Python (at least for now), I&#39;ll go for Rust. You suggested that it&#39;s better if I go about defining another function that simply takes the pointer using <code>from_str</code> and drop it. It&#39;s nice, but before doing that, can you tell me whether this leak is dangerous (if I use the function often)?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 1, "creation_date": 1435394291, "post_id": 31083443, "comment_id": 50190704, "body": "@Waffle&#39;sCrazyPeanut it depends on how long your program will run and how often the function is going to be called. Each time you call the function, memory will be leaked (the amount depends on the length of your string). If you do it very often (and during enough time), you could run out of memory (which would result in a crash). This is not something you would like to have in a web server, for example."}, {"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1435394530, "post_id": 31083443, "comment_id": 50190761, "body": "@aochagavia: I get it. Then, it should better be fixed. Thanks :)"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 8, "last_activity_date": 1435360646, "last_edit_date": 1435360646, "creation_date": 1435360223, "answer_id": 31083443, "question_id": 31083223, "link": "https://stackoverflow.com/questions/31083223/how-to-stop-memory-leaks-when-using-as-ptr/31083443#31083443", "title": "How to stop memory leaks when using `as_ptr()`?", "body": "<p>Your Rust function <code>do_something</code> constructs a temporary <code>CString</code>, takes a pointer into it, and then <em>drops the <code>CString</code></em>. The <code>*const c_char</code> is invalid from the instant you return it. If you're on nightly, you probably want <code>CString#into_ptr</code> instead of <code>CString#as_ptr</code>, as the former consumes the <code>CString</code> without deallocating the memory. On stable, you can <code>mem::forget</code> the <code>CString</code>. Then you can worry about who is supposed to free it.</p>\n\n<p>Freeing from Python will be tricky or impossible, since Rust may use a different allocator. The best approach would be to expose a Rust function that takes a <code>c_char</code> pointer, constructs a <code>CString</code> for that pointer (rather than copying the data into a new allocation), and drops it. Unfortunately the middle part (creating the <code>CString</code>) seems impossible on stable for now: <code>CString::from_ptr</code> is unstable.</p>\n\n<p>A workaround would to pass (a pointer to) the <em>entire <code>CString</code></em> to Python and provide an accessor function to get the char pointer from it. You simply need to box the <code>CString</code> and transmute the box to a raw pointer. Then you can have another function that transmutes the pointer back to a box and lets it drop.</p>\n"}], "owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 578, "favorite_count": 0, "accepted_answer_id": 31083443, "answer_count": 1, "score": 8, "last_activity_date": 1435360646, "creation_date": 1435358850, "question_id": 31083223, "link": "https://stackoverflow.com/questions/31083223/how-to-stop-memory-leaks-when-using-as-ptr", "title": "How to stop memory leaks when using `as_ptr()`?", "body": "<p>Since it's my first time learning systems programming, I'm having a hard time wrapping my head around the rules. Now, I got confused about memory leaks. Let's consider an example. Say, Rust is throwing a pointer (to a string) which Python is gonna catch.</p>\n\n<p>In Rust, (I'm just sending the pointer of the <code>CString</code>)</p>\n\n<pre><code>use std::ffi::CString;\n\npub extern fn do_something() -&gt; *const c_char {\n    CString::new(some_string).unwrap().as_ptr()\n}\n</code></pre>\n\n<p>In Python, (I'm dereferencing the pointer)</p>\n\n<pre><code>def call_rust():\n    lib = ctypes.cdll.LoadLibrary(rustLib)\n    lib.do_something.restype = ctypes.c_void_p\n    c_pointer = lib.do_something()\n    some_string = ctypes.c_char_p(c_pointer).value\n</code></pre>\n\n<p>Now, my question is about freeing the memory. I thought it should be freed in Python, but then ownership pops in. Because, <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_ptr\"><code>as_ptr</code></a> seems to take an immutable reference. So, I got confused about whether I should free the memory in Rust or Python <em>(or both?)</em>. If it's gonna be Rust, then how should I go about freeing it when the control flow has landed back into Python?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 3, "last_activity_date": 1435355369, "creation_date": 1435355369, "answer_id": 31082684, "question_id": 31082179, "link": "https://stackoverflow.com/questions/31082179/is-there-a-way-to-implement-a-trait-on-top-of-another-trait/31082684#31082684", "title": "Is there a way to implement a trait on top of another trait?", "body": "<p>You cannot implement a trait for a trait, you implement a trait only for types.\nBut you can implement a trait for a generic type that implement a certain traits (trait bounds).\nSomething like this:</p>\n\n<pre><code>impl&lt;T : Measurement&gt; Add&lt;T&gt; for T {\n    type Output = T;\n\n    fn add(self, rhs: Self) -&gt; T {\n        let a = self.get_value();\n        let b = rhs.get_value();\n        T::from_value(a + b)\n    }\n}\n</code></pre>\n\n<p>Unfortunately you can do this only for traits defined in <strong>your</strong> crate (its called coherence), so you cannot do that for the std <code>Add</code> trait because it's defined in the std crate, not in yours.</p>\n\n<p>I think you might need to define some <strong>macros</strong> to do what you want to do.</p>\n"}, {"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1435355668, "post_id": 31082717, "comment_id": 50183693, "body": "This is the same place I was just arriving at. The <code>T: Measurement</code> syntax would be so nice, but I understand. Thanks for the link to macros, and if I&#39;m able to make a macro and share it via modules that would be best."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 9, "last_activity_date": 1435355814, "last_edit_date": 1435355814, "creation_date": 1435355535, "answer_id": 31082717, "question_id": 31082179, "link": "https://stackoverflow.com/questions/31082179/is-there-a-way-to-implement-a-trait-on-top-of-another-trait/31082717#31082717", "title": "Is there a way to implement a trait on top of another trait?", "body": "<p>The issue is not with Sized. The syntax you're looking for is:</p>\n\n<pre><code>impl&lt;T: Measurement&gt; Add for T { ... }\n</code></pre>\n\n<p>instead of:</p>\n\n<pre><code>impl Add for Measurement { ... }\n</code></pre>\n\n<p>Because the right-hand side of the <code>for</code> must be an object, not a trait, however a type parameter constrained to a trait (i.e. a <code>T</code> required to be <code>Measurement</code>) is valid.</p>\n\n<hr>\n\n<p>Now your code still won't compile. You will get the following:</p>\n\n<blockquote>\n  <p>error: type parameter <code>T</code> must be used as the type parameter for some\n  local type (e.g. <code>MyStruct&lt;T&gt;</code>); only traits defined in the current\n  crate can be implemented for a type parameter [E0210]</p>\n</blockquote>\n\n<p>The issue here is of a totally different kind. I'm not sure it's related to the question any more but I'll still explain what's going on. When you write an impl for <code>Add</code> to any <code>T</code> which is <code>Measurement</code>, you open the possibility that a type would already implement <code>Add</code> on its own, and would also implement <code>Measurement</code> elsewhere. Imagine if you wanted to implement <code>Measurement</code> on <code>u8</code> (which is silly but <em>possible</em>): which impl should Rust choose for <code>Add</code>? The original <code>std</code> impl or your <code>Measurement</code> impl? (<a href=\"https://github.com/rust-lang/rfcs/issues/493\" rel=\"noreferrer\">in-depth discussion about this issue</a>)</p>\n\n<p>Right now Rust plainly forbids an impl if it is not at least 1) your own trait or 2) your own type (where \"own\" formally means, in the crate you're writing your impl). This is why you can write <code>impl Add for Unit</code>: because you own <code>Unit</code>.</p>\n\n<p>The easiest solution would be to give up and implement Add independently for each type you're planning to make <code>Unit</code>. Say your crate defines <code>Inches</code> and <code>Centimeter</code>, each one would have its own <code>Add</code> impl. If the code is insultingly similar, and you feel you broke DRY, leverage <a href=\"https://doc.rust-lang.org/book/macros.html\" rel=\"noreferrer\">macros</a>. Here is <a href=\"http://doc.rust-lang.org/nightly/src/core/ops.rs.html#192\" rel=\"noreferrer\">how the <code>std</code> crate does it</a>:</p>\n\n<pre><code>macro_rules! add_impl {\n    ($($t:ty)*) =&gt; ($(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Add for $t {\n            type Output = $t;\n\n            #[inline]\n            fn add(self, other: $t) -&gt; $t { self + other }\n        }\n\n        forward_ref_binop! { impl Add, add for $t, $t }\n    )*)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1512681516, "creation_date": 1512681516, "answer_id": 47703964, "question_id": 31082179, "link": "https://stackoverflow.com/questions/31082179/is-there-a-way-to-implement-a-trait-on-top-of-another-trait/47703964#47703964", "title": "Is there a way to implement a trait on top of another trait?", "body": "<p>Here's a working version with macros, as suggested:</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Copy, Clone, Debug)]\nstruct Unit {\n    value: f64,\n}\n\nimpl Unit {\n    fn new(value: f64) -&gt; Unit {\n        Unit { value: value }\n    }\n}\n\ntrait Measurement: Sized {\n    fn get_value(&amp;self) -&gt; f64;\n    fn from_value(value: f64) -&gt; Self;\n}\n\nimpl Measurement for Unit {\n    fn get_value(&amp;self) -&gt; f64 {\n        self.value\n    }\n    fn from_value(value: f64) -&gt; Self {\n        Unit::new(value)\n    }\n}\n\nmacro_rules! add_impl {\n    ($($t:ty)*) =&gt; ($(\n        impl Add for $t {\n            type Output = $t;\n\n            fn add(self, other: $t) -&gt; $t {\n                let a = self.get_value();\n                let b = other.get_value();\n                let r = a + b;\n                Self::from_value(r)\n            }\n        }\n    )*)\n}\n\nadd_impl! { Unit }\n\nfn main() {\n    let a = Unit::new(1.5);\n    let b = Unit::new(2.0);\n    let c = a + b;\n\n    println!(\"{}\", c.get_value());\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3042, "favorite_count": 2, "closed_date": 1512681586, "accepted_answer_id": 31082717, "answer_count": 3, "score": 12, "last_activity_date": 1512681516, "creation_date": 1435352892, "last_edit_date": 1512681480, "question_id": 31082179, "link": "https://stackoverflow.com/questions/31082179/is-there-a-way-to-implement-a-trait-on-top-of-another-trait", "closed_reason": "Duplicate", "title": "Is there a way to implement a trait on top of another trait?", "body": "<p>I am trying to create a base trait that will implement other operator traits (<code>Add</code>, <code>Subtract</code>, <code>Multiply</code>, <code>Divide</code>, etc...) for me.</p>\n\n<p>This fails to compile, it looks like an issued with <code>Sized</code>, but even when <code>Measurement</code> is set to require <code>Sized</code> it does not work. Is this even possible?</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Copy, Clone, Debug)]\nstruct Unit {\n    value: f64,\n}\n\nimpl Unit {\n    fn new(value: f64) -&gt; Unit {\n        Unit { value: value }\n    }\n}\n\ntrait Measurement: Sized {\n    fn get_value(&amp;self) -&gt; f64;\n    fn from_value(value: f64) -&gt; Self;\n}\n\nimpl Measurement for Unit {\n    fn get_value(&amp;self) -&gt; f64 {\n        self.value\n    }\n    fn from_value(value: f64) -&gt; Self {\n        Unit::new(value)\n    }\n}\n\n// This explicit implementation works\n/*\nimpl Add for Unit {\n    type Output = Unit;\n\n    fn add(self, rhs: Unit) -&gt; Unit {\n        let a = self.get_value();\n        let b = rhs.get_value();\n        Unit::from_value(a + b)\n    }\n}\n*/\n\n// This trait implementation does not\nimpl Add for Measurement {\n    type Output = Self;\n\n    fn add(self, rhs: Self) -&gt; Self {\n        let a = self.get_value();\n        let b = rhs.get_value();\n        Self::from_value(a + b)\n    }\n}\n\nfn main() {\n    let a = Unit::new(1.5);\n    let b = Unit::new(2.0);\n    let c = a + b;\n\n    println!(\"{}\", c.get_value());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=01786eda225bda2caa17b06bb716fd02&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Measurement + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:42:6\n   |\n42 | impl Add for Measurement {\n   |      ^^^ `Measurement + 'static` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `Measurement + 'static`\n\nerror[E0038]: the trait `Measurement` cannot be made into an object\n  --&gt; src/main.rs:42:6\n   |\n42 | impl Add for Measurement {\n   |      ^^^ the trait `Measurement` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n\nerror[E0038]: the trait `Measurement` cannot be made into an object\n  --&gt; src/main.rs:43:5\n   |\n43 |     type Output = Self;\n   |     ^^^^^^^^^^^^^^^^^^^ the trait `Measurement` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n\nerror[E0038]: the trait `Measurement` cannot be made into an object\n  --&gt; src/main.rs:45:5\n   |\n45 |     fn add(self, rhs: Self) -&gt; Self {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Measurement` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1435354211, "post_id": 31082248, "comment_id": 50183183, "body": "My favorites are <code>unimplemented!()</code> and <code>unreachable!()</code>."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 14, "last_activity_date": 1435353209, "creation_date": 1435353209, "answer_id": 31082248, "question_id": 31082098, "link": "https://stackoverflow.com/questions/31082098/why-would-i-use-divergent-functions/31082248#31082248", "title": "Why would I use divergent functions?", "body": "<p>As you quoted from the book, Rust's <a href=\"https://en.wikipedia.org/wiki/Bottom_type\">bottom type</a> is used to specify functions that do not return. This includes:</p>\n\n<ul>\n<li><code>panic!()</code></li>\n<li>looping forever</li>\n<li>quitting the program (except returning from <code>main()</code>), such as <a href=\"https://doc.rust-lang.org/std/process/fn.exit.html\">exit()</a>, whose signature is <code>pub fn exit(code: i32) -&gt; !</code></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": true, "score": 42, "last_activity_date": 1485561940, "last_edit_date": 1485561940, "creation_date": 1435354281, "answer_id": 31082459, "question_id": 31082098, "link": "https://stackoverflow.com/questions/31082098/why-would-i-use-divergent-functions/31082459#31082459", "title": "Why would I use divergent functions?", "body": "<p>It has several uses. It can be used for functions which are designed to panic or exit the program. <code>panic!()</code> itself is one such function, but it can also be applied to functions which wrap <code>panic!()</code>, such as printing out more detailed error information and then panicking.</p>\n\n<p>It can also be used for functions that never return. If a function goes into an infinite loop, such as the main loop of a server, and thus never returns, it could be defined this way.</p>\n\n<p>Another possible use would be a wrapper around the Unix <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html\" rel=\"noreferrer\"><code>exec</code> family of functions</a>, in which the current process is replaced with the one being executed.</p>\n\n<p>It is useful to have such a type because it is compatible with all other types. In order to be type safe, Rust has to ensure that all branches of a <code>match</code> or <code>if</code> statement return the same type. But if there are some branches that are unreachable or indicate an error, you need some way to throw an error that will unify with the type returned by the other branches. Because <code>!</code> unifies with all types, it can be used in any such case.</p>\n\n<p>There is an <a href=\"https://github.com/canndrew/rfcs/blob/89e727e3b3da92295a7ab986b942de696d249091/text/0000-disjoins.md\" rel=\"noreferrer\">interesting RFC</a> (and <a href=\"https://github.com/rust-lang/rfcs/pull/1154\" rel=\"noreferrer\">discussion</a>) at the moment that argues (in part) for <a href=\"https://github.com/canndrew/rfcs/blob/89e727e3b3da92295a7ab986b942de696d249091/text/0000-disjoins.md#the--type\" rel=\"noreferrer\">expanding the places where <code>!</code> can be used</a>, arguing that it should be treated as a full fledged type like <code>()</code> is; <code>!</code> being a type with no values that unifies with all other types, while <code>()</code> being a distinct type with a single value. I'm not sure I agree with the full RFC, but the discussion of treating <code>!</code> as a full-fledged type is interesting and I think could be proposed separately from the rest of the RFC.</p>\n\n<p><strong>Update</strong>: Since I wrote the above, the part of the RFC about promoting <code>!</code> to a full fledged type was <a href=\"https://github.com/rust-lang/rfcs/pull/1216\" rel=\"noreferrer\">split into a separate RFC and merged</a>, and is <a href=\"https://github.com/rust-lang/rust/issues/35121\" rel=\"noreferrer\">in the process of being implemented</a> (currently available in nightly builds behind a feature gate). As a full-fledged type, it can be used in more contexts, such as in <code>Result&lt;T, !&gt;</code> indicating a result that can never fail, or <code>Result&lt;!, E&gt;</code> as one that can never succeed. These are useful in generic contexts; if you have some trait that requires a method to return a result, but for that particular implementation it can only possibly succeed, you don't need to fill in some dummy error type.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2740, "favorite_count": 1, "accepted_answer_id": 31082459, "answer_count": 2, "score": 31, "last_activity_date": 1507731204, "creation_date": 1435352541, "last_edit_date": 1507731204, "question_id": 31082098, "link": "https://stackoverflow.com/questions/31082098/why-would-i-use-divergent-functions", "title": "Why would I use divergent functions?", "body": "<p>Reading through the Rust book, I came across <a href=\"https://doc.rust-lang.org/stable/book/first-edition/functions.html#diverging-functions\" rel=\"noreferrer\">an interesting topic \u2014 divergent functions</a>:</p>\n\n<blockquote>\n  <p>Rust has some special syntax for \u2018diverging functions\u2019, which are\n  functions that do not return:</p>\n\n<pre><code>fn diverges() -&gt; ! {\n    panic!(\"This function never returns!\");\n}\n</code></pre>\n</blockquote>\n\n\n\n<blockquote>\n  <p>A diverging function can be used as any type:</p>\n\n<pre><code>let x: i32 = diverges();\nlet x: String = diverges();\n</code></pre>\n</blockquote>\n\n<p>What would be the use cases of a divergent function? The book says that </p>\n\n<blockquote>\n  <p><code>panic!()</code> causes the current thread of execution to crash with the\n  given message. Because this function will cause a crash, it will never\n  return, and so it has the type <code>!</code></p>\n</blockquote>\n\n<p>That makes sense, but I can't think of where else a divergent function would be of use and it seems <em>very</em> localized to just <code>panic!</code>. I know there must be some useful scenarios out there for why they introduced divergent functions. Where would I likely see divergent functions in Rust?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 8, "creation_date": 1435393890, "post_id": 31081673, "comment_id": 50190622, "body": "I opened an issue as you suggested. Here is the link if anyone is interested: <a href=\"https://github.com/rust-lang/cargo/issues/1759\" rel=\"nofollow noreferrer\">github.com/rust-lang/cargo/issues/1759</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1435350998, "last_edit_date": 1435350998, "creation_date": 1435350691, "answer_id": 31081673, "question_id": 31080757, "link": "https://stackoverflow.com/questions/31080757/copy-files-to-the-target-directory-after-build/31081673#31081673", "title": "Copy files to the target directory after build", "body": "<p>No, it doesn't.</p>\n\n<p>You can move files around with <a href=\"http://doc.crates.io/build-script.html\" rel=\"noreferrer\">build scripts</a>, but these are run before your crate is built because their sole purpose is to prepare the environment (e.g. compile C libraries and shims).</p>\n\n<p>If you think this is an important feature, you can open a feature request in Cargo <a href=\"https://github.com/rust-lang/cargo/issues\" rel=\"noreferrer\">issue tracker</a>.</p>\n\n<p>Alternatively, you can write a makefile or a shell script which would forward all arguments to cargo and then copy the directory manually:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/bash\n\nDIR=\"$(dirname \"$0\")\"\n\nif cargo \"$@\"; then\n    [ -d \"$DIR/target/debug\" ] &amp;&amp; cp -r \"$DIR/resources\" \"$DIR/target/debug/resources\"\n    [ -d \"$DIR/target/release\" ] &amp;&amp; cp -r \"$DIR/resources\" \"$DIR/target/release/resources\"\nfi\n</code></pre>\n\n<p>Now you can run cargo like</p>\n\n<pre><code>% ./make.sh build\n</code></pre>\n"}], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5950, "favorite_count": 1, "accepted_answer_id": 31081673, "answer_count": 1, "score": 13, "last_activity_date": 1435350998, "creation_date": 1435346843, "question_id": 31080757, "link": "https://stackoverflow.com/questions/31080757/copy-files-to-the-target-directory-after-build", "title": "Copy files to the target directory after build", "body": "<p>Let's assume I have a game with the following directory structure:</p>\n\n<pre><code>/src\n/resources\nCargo.toml\n</code></pre>\n\n<p>I would like <code>cargo build</code> to copy the files in the <code>resources</code> directory and paste them in the same directory as the executable file.</p>\n\n<p>I know it is possible to do this using a custom build script, but this seems to be a common case that deserves special treatment. So the question is: <strong>does cargo provide a standard way of copying files to the target directory (using just <code>Cargo.toml</code>)?</strong></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5487, "user_id": 66575, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/8aacdcef22abe926a91fe7d62a38d69f?s=128&d=identicon&r=PG", "display_name": "bedwyr", "link": "https://stackoverflow.com/users/66575/bedwyr"}, "reply_to_user": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1435337390, "post_id": 31078280, "comment_id": 50175227, "body": "@SyntacticFructose no problem :)"}, {"owner": {"reputation": 5020, "user_id": 75928, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9aed44354186b2c63ed8c857ab3a42f?s=128&d=identicon&r=PG", "display_name": "licorna", "link": "https://stackoverflow.com/users/75928/licorna"}, "edited": false, "score": 1, "creation_date": 1497735799, "post_id": 31078280, "comment_id": 76206046, "body": "I tried following the tutorial twice and found this error... twice. When I read this two year old question I felt very disappointed about rust doc being so wrong... I never checked the next paragraph of the tutorial!"}, {"owner": {"reputation": 538, "user_id": 1665886, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17e1ddc9e7284c08982437f63fcf0e2d?s=128&d=identicon&r=PG", "display_name": "CarlH", "link": "https://stackoverflow.com/users/1665886/carlh"}, "edited": false, "score": 0, "creation_date": 1533998391, "post_id": 31078280, "comment_id": 90557803, "body": "Not at all retarrded, this is a piss poor way to write a tutorial!  Encountered same thing after having to waste hours on the rust cargo bug that requires a reboot of the computer to recognize changes to the Cargo.toml file."}], "tags": [], "owner": {"reputation": 5487, "user_id": 66575, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/8aacdcef22abe926a91fe7d62a38d69f?s=128&d=identicon&r=PG", "display_name": "bedwyr", "link": "https://stackoverflow.com/users/66575/bedwyr"}, "is_accepted": true, "score": 16, "last_activity_date": 1435337294, "creation_date": 1435337294, "answer_id": 31078280, "question_id": 31078185, "link": "https://stackoverflow.com/questions/31078185/rust-book-guessing-game-mismatched-types/31078280#31078280", "title": "Rust book, guessing game mismatched types", "body": "<p>Nothing is wrong.  The tutorial actually explains why this won't compile:</p>\n\n<blockquote>\n  <p>I did mention that this won\u2019t quite work yet, though. Let\u2019s try it:\n  ...\n  Whew! This is a\n  big error. The core of it is that we have \u2018mismatched types\u2019. Rust has\n  a strong, static type system.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "is_accepted": false, "score": 3, "last_activity_date": 1435337705, "last_edit_date": 1435337705, "creation_date": 1435337311, "answer_id": 31078286, "question_id": 31078185, "link": "https://stackoverflow.com/questions/31078185/rust-book-guessing-game-mismatched-types/31078286#31078286", "title": "Rust book, guessing game mismatched types", "body": "<p>You are trying to compare string and integer. You need to cast user input to integer first.</p>\n\n<p>Add this line to your code and it should work:</p>\n\n<pre><code>let guess: u32 = guess.trim().parse().unwrap();\n</code></pre>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1017, "favorite_count": 0, "accepted_answer_id": 31078280, "answer_count": 2, "score": 10, "last_activity_date": 1435337705, "creation_date": 1435336934, "question_id": 31078185, "link": "https://stackoverflow.com/questions/31078185/rust-book-guessing-game-mismatched-types", "title": "Rust book, guessing game mismatched types", "body": "<p>I'm following the rust book tutorial for 1.1.0, but trying to run their code I'm getting an error .</p>\n\n<p>I have the following:</p>\n\n<pre><code>extern crate rand;\n\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&amp;mut guess)\n        .ok()\n        .expect(\"failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&amp;secret_number) {\n        Ordering::Less    =&gt; println!(\"Too small!\"),\n        Ordering::Greater =&gt; println!(\"Too big!\"),\n        Ordering::Equal   =&gt; println!(\"You win!\"),\n    }\n}\n</code></pre>\n\n<p>upon running this I get</p>\n\n<pre><code>src/main.rs:24:21: 24:35 error: mismatched types:\n expected `&amp;collections::string::String`,\n    found `&amp;_`\n(expected struct `collections::string::String`,\n    found integral variable) [E0308]\nsrc/main.rs:24     match guess.cmp(&amp;secret_number) {\n                                   ^~~~~~~~~~~~~~\nsrc/main.rs:24:21: 24:35 help: run `rustc --explain E0308` to see a detailed explanation\n</code></pre>\n\n<p>This code is directly copy pasted from the tutorial, what's wrong?</p>\n"}, {"tags": ["arrays", "vector", "printing", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1435336163, "post_id": 31077902, "comment_id": 50174557, "body": "have you seen <a href=\"http://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays\" title=\"how to print structs and arrays\">stackoverflow.com/questions/30253422/&hellip;</a> ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435348782, "post_id": 31077902, "comment_id": 50180815, "body": "Additionally, please read <a href=\"/help/how-to-ask\">How do I ask a good question?</a>. In this example, you should include <i>what you have already tried</i>. It would be even better to include a <a href=\"/help/mcve\">MCVE</a>. I&#39;d also <b>highly</b> recommend reading <a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>, which the team has spent a lot of time on."}, {"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1437478970, "post_id": 31077902, "comment_id": 51035333, "body": "thanks for the recommendations."}], "answers": [{"comments": [{"owner": {"reputation": 205, "user_id": 989058, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39c3640c237b37da7fc1a5f8bfedf2b6?s=128&d=identicon&r=PG", "display_name": "Qinto", "link": "https://stackoverflow.com/users/989058/qinto"}, "edited": false, "score": 1, "creation_date": 1592731994, "post_id": 31077990, "comment_id": 110524537, "body": "That works only for arrays up to 32 (&quot;arrays only have std trait implementations for lengths 0..=32&quot;). Is there an easy way to print content of longer arrays?"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 8, "last_activity_date": 1435336199, "creation_date": 1435336199, "answer_id": 31077990, "question_id": 31077902, "link": "https://stackoverflow.com/questions/31077902/how-to-print-an-array-and-a-vector/31077990#31077990", "title": "How to print an array and a vector?", "body": "<pre><code>println!(\"{:?}\", a_vector);\nprintln!(\"{:?}\", an_array);\n</code></pre>\n\n<p>The <code>{:?}</code> is used to print types that implement the Debug trait. A regular <code>{}</code> would use the Display trait which Vec and arrays don't implement.</p>\n"}], "owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1189, "favorite_count": 1, "accepted_answer_id": 31077990, "answer_count": 1, "score": 1, "last_activity_date": 1435348497, "creation_date": 1435335753, "last_edit_date": 1435348497, "question_id": 31077902, "link": "https://stackoverflow.com/questions/31077902/how-to-print-an-array-and-a-vector", "title": "How to print an array and a vector?", "body": "<p>I'm playing with Rust and I wonder how I can print an array and a vector.</p>\n\n<pre><code>let a_vector = vec![1, 2, 3, 4, 5];\nlet an_array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n</code></pre>\n\n<p>I want to print on the screen and the result should be something like:</p>\n\n<pre><code>[1, 2, 3, 4, 5]\n[\"a\", \"b\", \"c\", \"d\", \"e\"]\n</code></pre>\n\n<p>In python it is:</p>\n\n<pre><code>lst = [\"a\", \"b\", \"c\", \"d\", \"e\"]\nprint lst\n</code></pre>\n\n<p>and printing it would show:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\", \"e\"]\n</code></pre>\n"}, {"tags": ["string", "io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 5487, "user_id": 66575, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/8aacdcef22abe926a91fe7d62a38d69f?s=128&d=identicon&r=PG", "display_name": "bedwyr", "link": "https://stackoverflow.com/users/66575/bedwyr"}, "is_accepted": true, "score": 6, "last_activity_date": 1435330057, "creation_date": 1435330057, "answer_id": 31076148, "question_id": 31075786, "link": "https://stackoverflow.com/questions/31075786/how-to-read-a-string-from-keyboard-on-the-same-line-with-output/31076148#31076148", "title": "How to read a string from keyboard on the same line with output?", "body": "<p>Add a call to <code>stdout().flush()</code> to force the buffer to output before <code>read_line</code> is called:</p>\n\n<pre><code>fn main() {\n   print!(\"Input string: \"); \n   std::io::stdout().flush();\n   let mut string: String = String::new();\n   std::io::stdin().read_line(&amp;mut string);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 41, "user_id": 4009630, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3a146f868e26a71630890775398bc541?s=128&d=identicon&r=PG", "display_name": "rustomax", "link": "https://stackoverflow.com/users/4009630/rustomax"}, "is_accepted": false, "score": 0, "last_activity_date": 1456160656, "creation_date": 1456160656, "answer_id": 35559545, "question_id": 31075786, "link": "https://stackoverflow.com/questions/31075786/how-to-read-a-string-from-keyboard-on-the-same-line-with-output/35559545#35559545", "title": "How to read a string from keyboard on the same line with output?", "body": "<p>The accepted answer is correct: you need to call <code>stdout().flush()</code> before <code>read_line</code>. However the code won't compile on Rust 1.6.0. The following changes will make it compile. They also show how to use the resulting string:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::io;\n\nfn main() {\n    print!(\"Input string: \");\n    io::stdout().flush().ok().expect(\"Could not flush stdout\");\n    let mut string: String = String::new();\n    let _ = std::io::stdin().read_line(&amp;mut string);\n    println!(\"{}\", string.trim());\n}\n</code></pre>\n"}], "owner": {"reputation": 203, "user_id": 5046443, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8024f0c7314992a6350f1bd5ee6f81fb?s=128&d=identicon&r=PG", "display_name": "goopycs", "link": "https://stackoverflow.com/users/5046443/goopycs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 959, "favorite_count": 0, "closed_date": 1588726869, "accepted_answer_id": 31076148, "answer_count": 2, "score": 7, "last_activity_date": 1456160656, "creation_date": 1435328932, "last_edit_date": 1435331010, "question_id": 31075786, "link": "https://stackoverflow.com/questions/31075786/how-to-read-a-string-from-keyboard-on-the-same-line-with-output", "closed_reason": "Duplicate", "title": "How to read a string from keyboard on the same line with output?", "body": "<p>I'm reading a string like this:</p>\n\n<pre><code>print!(\"Input string: \"); \n\nlet string: String = String::new();\nstd::io::stdin().read_line(&amp;mut string);\n</code></pre>\n\n<p>When I launch the program I see:   </p>\n\n<pre><code>(write a string here)\nInput string:\n</code></pre>\n\n<p>But I need:</p>\n\n<pre><code>Input string: (write a string here)\n</code></pre>\n\n<p>How to implement this?</p>\n"}, {"tags": ["python", "rust", "ctypes", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "edited": false, "score": 0, "creation_date": 1435328487, "post_id": 31075375, "comment_id": 50169668, "body": "This is pretty awesome! I never got an idea that we could do something like <code>*const *const c_char</code>. Thanks for the quick answer :)"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1436381336, "post_id": 31075375, "comment_id": 50592547, "body": "note that <code>feature(libc)</code> can go away by using the libc crate from crates.io"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1435328203, "last_edit_date": 1435328203, "creation_date": 1435327734, "answer_id": 31075375, "question_id": 31074994, "link": "https://stackoverflow.com/questions/31074994/passing-a-list-of-strings-from-python-to-rust/31075375#31075375", "title": "Passing a list of strings from Python to Rust", "body": "<p>There is absolutely no difference with the case of array of numbers. C strings are zero-terminated arrays of bytes, so their representation in Rust will be <code>*const c_char</code>, which could then be converted to <code>&amp;CStr</code> which then can be used to obtain <code>&amp;[u8]</code> and then <code>&amp;str</code>.</p>\n\n<p>Python:</p>\n\n<p>\n\n<pre><code>import ctypes\n\nrustLib = \"libtest.dylib\"\n\ndef testRust():\n    lib = ctypes.cdll.LoadLibrary(rustLib)\n    list_to_send = ['blah', 'blah', 'blah', 'blah']\n    c_array = (ctypes.c_char_p * len(list_to_send))(*list_to_send)\n    lib.get_strings(c_array, len(list_to_send))\n\nif __name__==\"__main__\":\n    testRust()\n</code></pre>\n\n<p>Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(libc)]\nextern crate libc;\n\nuse std::slice;\nuse std::ffi::CStr;\nuse std::str;\nuse libc::{size_t, c_char};\n\n#[no_mangle]\npub extern fn get_strings(array: *const *const c_char, length: size_t) {\n    let values = unsafe { slice::from_raw_parts(array, length as usize) };\n    let strs: Vec&lt;&amp;str&gt; = values.iter()\n        .map(|&amp;p| unsafe { CStr::from_ptr(p) })  // iterator of &amp;CStr\n        .map(|cs| cs.to_bytes())                 // iterator of &amp;[u8]\n        .map(|bs| str::from_utf8(bs).unwrap())   // iterator of &amp;str\n        .collect();\n    println!(\"{:?}\", strs);\n}\n</code></pre>\n\n<p>Running:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>% rustc --crate-type=dylib test.rs\n% python test.py\n[\"blah\", \"blah\", \"blah\", \"blah\"]\n</code></pre>\n\n<p>And again, you should be careful with lifetimes and ensure that <code>Vec&lt;&amp;str&gt;</code> does not outlive the original value on the Python side.</p>\n"}], "owner": {"reputation": 507, "user_id": 2313792, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/803a9a5cfb06d9e5c2650c730c881faa?s=128&d=identicon&r=PG", "display_name": "Waffle&#39;s Crazy Peanut", "link": "https://stackoverflow.com/users/2313792/waffles-crazy-peanut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1207, "favorite_count": 3, "accepted_answer_id": 31075375, "answer_count": 1, "score": 12, "last_activity_date": 1435328203, "creation_date": 1435326674, "last_edit_date": 1495542264, "question_id": 31074994, "link": "https://stackoverflow.com/questions/31074994/passing-a-list-of-strings-from-python-to-rust", "title": "Passing a list of strings from Python to Rust", "body": "<p>I've been learning Rust for about two weeks now and today, I got into its FFI. I used Python to play with Rust, using ctypes and libc. I passed integers, strings and even learned to pass a list of integers (<a href=\"https://stackoverflow.com/a/30313295/2313792\">thanks to this wonderful answer</a>).</p>\n\n<p>Then, I tried to pass a list of strings (following the reasoning behind the that answer), but I failed, as I couldn't get a lead on it. In Python, I have something like this to pass the array of strings.</p>\n\n<pre><code>def testRust():\n    lib = ctypes.cdll.LoadLibrary(rustLib)\n    list_to_send = ['blah', 'blah', 'blah', 'blah']\n    c_array = (ctypes.c_char_p * len(list_to_send))()\n    lib.get_strings(c_array, len(list_to_send))\n</code></pre>\n\n<p>In Rust, I thought that there should be something (like a <code>STRING_RECEIVER</code>) to collect the incoming strings, but I can't find one.</p>\n\n<pre><code>#![feature(libc)]\nextern crate libc;\n\nuse std::slice;\nuse libc::{size_t, STRING_RECEIVER};\n\n#[no_mangle]\npub extern fn get_strings(array: *const STRING_RECEIVER, length: size_t) {\n    let values = unsafe { slice::from_raw_parts(array, length as usize) };\n    println!(\"{:?}\", values);\n}\n</code></pre>\n\n<p>Is there any alternative way to achieve this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1435317370, "post_id": 31071478, "comment_id": 50162235, "body": "Very interesting ... and really weird. But thanks a lot. I hope your solution gives a hint as to what is wrong here."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 7, "last_activity_date": 1435316398, "creation_date": 1435316398, "answer_id": 31071478, "question_id": 31070858, "link": "https://stackoverflow.com/questions/31070858/unresolved-name-inside-macro-despite-ident-designator/31071478#31071478", "title": "&#39;Unresolved name&#39; inside macro despite &#39;ident&#39; designator", "body": "<p>Ok, this one is weird.  First, here's what I found would work:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! do_your_thing {\n    ( $v:ident; $($e:expr),+ ) =&gt; {\n        let mut $v = {\n            let mut $v = 0;\n            $(\n                $v += $e;\n            )+\n            $v\n        };\n    };\n}\n\nfn main() {\n    do_your_thing!(i; 3, 3, 3);\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>The problem, near as I can tell, is that your original macro was producing a set of statements, and this was <em>somehow</em> confusing the compiler.  Wrapping those statements in a block appears to fix this.</p>\n\n<p>Of course, <em>then</em> the problem is that putting <code>let mut $v</code> into a scope makes it inaccessible to the following <code>println!</code>, so I also modified it to return the final value from the block, which is then assigned to a <em>new</em> <code>$v</code>.</p>\n\n<p>Honestly, I can't think of why your original code shouldn't have worked.  It <em>might</em> be a bug... or it might be yet another subtlety of <code>macro_rules!</code> that I haven't gotten a hold of yet.  It's hard to tell.  :)</p>\n"}], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 292, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1435342260, "creation_date": 1435314439, "last_edit_date": 1435342260, "question_id": 31070858, "link": "https://stackoverflow.com/questions/31070858/unresolved-name-inside-macro-despite-ident-designator", "title": "&#39;Unresolved name&#39; inside macro despite &#39;ident&#39; designator", "body": "<p>I'm playing around with the Rust macro system in order to learn more about how it works. I wrote a simple macro which takes an identifier and adds a list of numbers to it.</p>\n\n<pre><code>macro_rules! do_your_thing {\n    ( $v:ident; $($e:expr),+ ) =&gt; {\n        let mut $v = 0;\n        $(\n            $v += $e;\n        )+\n    };\n}\n\nfn main() {\n    do_your_thing!(i; 3, 3, 3);\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>If I run <a href=\"https://play.rust-lang.org/?gist=af1161154ff2756acb8b&amp;version=nightly\" rel=\"nofollow noreferrer\">this program</a>, the compiler will complain three times 'i' being an unresolved name for every repetition inside the macro for '$v += $e;'</p>\n\n<pre><code>&lt;anon&gt;:5:13: 5:15 error: unresolved name `i`\n&lt;anon&gt;:5             $v += $e;\n                     ^\n</code></pre>\n\n<p>I know that macros in Rust are hygienic. That is why I used the <code>ident</code> designator. Is it possible that there is an additional syntactic context for the repetition <code>$(...)+</code> ?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>After DK.'s answer I did a little digging and found the <code>hygiene</code> argument for the <code>--pretty</code> option. Basically, it annotates the syntax contexts after macro expansion happened. After running</p>\n\n<pre><code>rustc -Z unstable-options --pretty expanded,hygiene main.rs\n</code></pre>\n\n<p>on my initial program it gave me the following output</p>\n\n<pre><code>fn main /* 67#0 */() {\n    let mut i /* 68#4 */ = 0;\n    i /* 68#3 */ += 3;\n    i /* 68#3 */ += 3;\n    i /* 68#3 */ += 3;\n}\n</code></pre>\n\n<p>Running the same command on DK.'s modifications resulted in</p>\n\n<pre><code>fn main /* 67#0 */() {\n    let i /* 68#4 */ =\n        {\n            let mut i /* 68#5 */ = 0;\n            i /* 68#5 */ += 3;\n            i /* 68#5 */ += 3;\n            i /* 68#5 */ += 3;\n            i /* 68#5 */\n        };\n}\n</code></pre>\n\n<p>So, the $(...)+ inside the macro did in fact introduce a new syntax context in my original macro. However, wrapping it in a block, as DK did, somehow prevented that from happening. Instead a new syntax context was introduced for the whole block.</p>\n"}, {"tags": ["copy", "rust", "slice", "mutability"], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 6, "last_activity_date": 1435315727, "creation_date": 1435315727, "answer_id": 31071257, "question_id": 31070857, "link": "https://stackoverflow.com/questions/31070857/how-to-easily-copy-a-non-mut-u8-into-to-a-mut-u8/31071257#31071257", "title": "How to easily copy a non-mut &amp;[u8] into to a &amp;mut [u8]", "body": "<p>I would use <code>to_owned()</code>:</p>\n\n<pre><code>#[test]\nfn test_swap_bytes() {\n    let input: &amp;[u8] = b\"abcdef\";\n    let result: &amp;mut[u8] = &amp;mut input.to_owned();\n    do_something(result);\n    assert_eq!(b\"fedcba\", result);\n}\n</code></pre>\n\n<p>Evidently this creates a copy (through an intermediate <code>Vec</code>), since the input is immutable.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1435326098, "last_edit_date": 1435326098, "creation_date": 1435316194, "answer_id": 31071409, "question_id": 31070857, "link": "https://stackoverflow.com/questions/31070857/how-to-easily-copy-a-non-mut-u8-into-to-a-mut-u8/31071409#31071409", "title": "How to easily copy a non-mut &amp;[u8] into to a &amp;mut [u8]", "body": "<p>You can use the fact that a binary literal knows its size at compile-time. Therefor you can dereference it and store it on the stack. Any let binding can also be a mutable let binding.</p>\n\n<pre><code>let mut input: [u8; 6] = *b\"abcdef\";\n</code></pre>\n\n<p>See <a href=\"http://is.gd/vm1qCD\" rel=\"nofollow\">PlayPen</a> for a fully working example</p>\n\n<p>Note that there's no reason to specify the type, I just showed it for clarity.</p>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 0, "accepted_answer_id": 31071409, "answer_count": 2, "score": 4, "last_activity_date": 1435326098, "creation_date": 1435314438, "question_id": 31070857, "link": "https://stackoverflow.com/questions/31070857/how-to-easily-copy-a-non-mut-u8-into-to-a-mut-u8", "title": "How to easily copy a non-mut &amp;[u8] into to a &amp;mut [u8]", "body": "<p>I want to do some manipulations on a &amp;mut [u8].</p>\n\n<p>In my testing code I have:</p>\n\n<pre><code>#[test]\nfn test_swap_bytes() {\n    let input: &amp;[u8] = b\"abcdef\";\n    let result: &amp;mut[u8] = ?;\n    do_something(result);\n    assert_eq!(b\"fedcba\", result);\n}\n</code></pre>\n\n<p>How can I easily get a mutable u8 slice in this case? What should I put on the place of the question mark?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13419, "user_id": 1405588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/01a91a47db3526000ffa9247f95fff62?s=128&d=identicon&r=PG", "display_name": "o11c", "link": "https://stackoverflow.com/users/1405588/o11c"}, "edited": false, "score": 2, "creation_date": 1435302748, "post_id": 31067031, "comment_id": 50153751, "body": "I don&#39;t think <code>fun_name</code> should have any lifetime."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435303315, "post_id": 31067031, "comment_id": 50154049, "body": "your second snippet has no lifetimes at all, so it doesn&#39;t really qualify for &quot;similar&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1435303539, "post_id": 31067272, "comment_id": 50154180, "body": "Thank you! I tried to put <code>fn get_function&lt;&#39;b&gt;(&amp;&#39;b mut self, fun_name: &amp;&#39;b str) -&gt; Result&lt;Function&lt;&#39;b&gt;, Error&gt; {</code> but the error became even more strange. It seems <code>Function</code> can&#39;t have the same lifetime as <code>fun_name</code> in this method, but I don&#39;t really <i>understand</i> why."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1435303631, "post_id": 31067272, "comment_id": 50154239, "body": "i don&#39;t know why you would want to constrain the lifetime. Usually you try to free the lifetimes as much as possible, the compiler is constraining you enough."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1435303681, "post_id": 31067272, "comment_id": 50154280, "body": "Also I&#39;m guessing your <code>name</code> field&#39;s lifetime could be <code>&#39;static</code> instead of <code>&#39;a</code>. If that&#39;s not possible, there&#39;s a good chance you wanted that field to be a <code>String</code> instead. The same goes for the <code>HashMap</code>&#39;s key-type."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1435305960, "post_id": 31067272, "comment_id": 50155555, "body": "I wanted to allocate all such strings in a <code>TypedArena</code> and just have <code>&amp;str</code> references to it, but I think you&#39;re right. They can&#39;t be <code>&#39;static</code> though, because I want to generate the code using a compiler."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1506282271, "post_id": 31067272, "comment_id": 79745432, "body": "<i>Adding more lifetimes and giving each reference the minimal possible lifetime will <b>permit more programs</i></b> \u2014 that logic seems backwards; did you mean <i>less</i> programs?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1507102900, "post_id": 31067272, "comment_id": 80072731, "body": "Maybe I should remove that statement entirely. I meant that you can call the function from more contexts"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1524173247, "last_edit_date": 1524173247, "creation_date": 1435303223, "answer_id": 31067272, "question_id": 31067031, "link": "https://stackoverflow.com/questions/31067031/cannot-borrow-as-mutable-more-than-once-at-a-time-in-one-code-but-can-in-anoth/31067272#31067272", "title": "Cannot borrow as mutable more than once at a time in one code - but can in another very similar", "body": "<p>You have fallen into the lifetime-trap. Adding the same lifetime to more references will constrain your program more. Adding more lifetimes and giving each reference the minimal possible lifetime will permit more programs. As @o11c notes, removing the constraints to the <code>'a</code> lifetime will solve your issue.</p>\n\n<pre><code>impl&lt;'a&gt; Context&lt;'a&gt; {\n    fn get_function(&amp;mut self, fun_name: &amp;str) -&gt; Result&lt;Function&lt;'a&gt;, Error&gt; {\n        self.program\n            .get(fun_name)\n            .map(|f| *f)\n            .ok_or(Error::FunctionNotFound)\n    }\n\n    fn call(&amp;mut self, fun_name: &amp;str) -&gt; Result&lt;(), Error&gt; {\n        let fun = try!(self.get_function(fun_name));\n\n        self.call_stack.push(fun);\n\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>The reason this works is that Rust inserts new lifetimes, so in the compiler your function's signatures will look like this:</p>\n\n<pre><code>fn get_function&lt;'b&gt;(&amp;'b mut self, fun_name: &amp;'b str) -&gt; Result&lt;Function&lt;'a&gt;, Error&gt;\nfn call&lt;'b&gt;(&amp;'b mut self, fun_name: &amp;'b str) -&gt; Result&lt;(), Error&gt;\n</code></pre>\n\n<p>Always try to not use any lifetimes and let the compiler be smart. If that fails, don't spray lifetimes everywhere, think about where you want to pass ownership, and where you want to limit the lifetime of a reference.</p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 8, "last_activity_date": 1435303235, "creation_date": 1435303235, "answer_id": 31067276, "question_id": 31067031, "link": "https://stackoverflow.com/questions/31067031/cannot-borrow-as-mutable-more-than-once-at-a-time-in-one-code-but-can-in-anoth/31067276#31067276", "title": "Cannot borrow as mutable more than once at a time in one code - but can in another very similar", "body": "<p>You only need to remove unnecessary lifetime qualifiers in order for your code to compile:</p>\n\n<pre><code>fn get_function(&amp;mut self, fun_name: &amp;str) -&gt; Result&lt;Function&lt;'a&gt;, Error&gt; { ... }\n\nfn call(&amp;mut self, fun_name: &amp;str) -&gt; Result&lt;(), Error&gt; { ... }\n</code></pre>\n\n<p>Your problem was that you tied the lifetime of <code>&amp;mut self</code> and the lifetime of the value stored in it (<code>Function&lt;'a&gt;</code>), which is in most cases unnecessary. With this dependency which was present in <code>get_function()</code> definition, the compiler had to assume that the result of the call <code>self.get_function(...)</code> borrows <code>self</code>, and hence it prohibits you from borrowing it again.</p>\n\n<p>Lifetime on <code>&amp;str</code> argument is also unnecessary - it just limits the possible set of argument values for no reason. Your key can be a string with arbitrary lifetime, not just <code>'a</code>.</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3768, "favorite_count": 2, "accepted_answer_id": 31067272, "answer_count": 2, "score": 9, "last_activity_date": 1524173389, "creation_date": 1435302455, "last_edit_date": 1524173389, "question_id": 31067031, "link": "https://stackoverflow.com/questions/31067031/cannot-borrow-as-mutable-more-than-once-at-a-time-in-one-code-but-can-in-anoth", "title": "Cannot borrow as mutable more than once at a time in one code - but can in another very similar", "body": "<p>I've this snippet that doesn't pass the borrow checker:</p>\n\n<pre><code>use std::collections::HashMap;\n\nenum Error {\n    FunctionNotFound,\n}\n\n#[derive(Copy, Clone)]\nstruct Function&lt;'a&gt; {\n    name: &amp;'a str,\n    code: &amp;'a [u32],\n}\n\nstruct Context&lt;'a&gt; {\n    program: HashMap&lt;&amp;'a str, Function&lt;'a&gt;&gt;,\n    call_stack: Vec&lt;Function&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Context&lt;'a&gt; {\n    fn get_function(&amp;'a mut self, fun_name: &amp;'a str) -&gt; Result&lt;Function&lt;'a&gt;, Error&gt; {\n        self.program\n            .get(fun_name)\n            .map(|f| *f)\n            .ok_or(Error::FunctionNotFound)\n    }\n\n    fn call(&amp;'a mut self, fun_name: &amp;'a str) -&gt; Result&lt;(), Error&gt; {\n        let fun = try!(self.get_function(fun_name));\n\n        self.call_stack.push(fun);\n\n        Ok(())\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `self.call_stack` as mutable more than once at a time\n  --&gt; src/main.rs:29:9\n   |\n27 |         let fun = try!(self.get_function(fun_name));\n   |                        ---- first mutable borrow occurs here\n28 | \n29 |         self.call_stack.push(fun);\n   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n...\n32 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>My gut feeling is that the problem is tied to the fact that <code>HashMap</code> returns either <code>None</code> or a reference of the value inside the data structure. But I don't want that: my intention is that <code>self.get_function</code> should return either a byte copy of the stored value or an error (that's why I put <code>.map(|f| *f)</code>, and <code>Function</code> is <code>Copy</code>).</p>\n\n<p>Changing <code>&amp;'a mut self</code> to something else doesn't help.</p>\n\n<p>However, the following snippet, somewhat similar in spirit, is accepted:</p>\n\n<pre><code>#[derive(Debug)]\nenum Error {\n    StackUnderflow,\n}\n\nstruct Context {\n    stack: Vec&lt;u32&gt;,\n}\n\nimpl Context {\n    fn pop(&amp;mut self) -&gt; Result&lt;u32, Error&gt; {\n        self.stack.pop().ok_or(Error::StackUnderflow)\n    }\n\n    fn add(&amp;mut self) -&gt; Result&lt;(), Error&gt; {\n        let a = try!(self.pop());\n        let b = try!(self.pop());\n\n        self.stack.push(a + b);\n        Ok(())\n    }\n}\n\nfn main() {\n    let mut a = Context { stack: vec![1, 2] };\n    a.add().unwrap();\n    println!(\"{:?}\", a.stack);\n}\n</code></pre>\n\n<p>Now I'm confused. What is the problem with the first snippet? Why doesn't it happen in the second?</p>\n\n<p>The snippets are part of a larger piece of code. In order to provide more context, <a href=\"https://play.rust-lang.org/?gist=e2c360eb91f7e0e459e7&amp;version=stable\" rel=\"nofollow noreferrer\">this on the Rust Playground</a> shows a more complete example with the faulty code, and <a href=\"https://play.rust-lang.org/?gist=f6152f3411c1effed810&amp;version=stable\" rel=\"nofollow noreferrer\">this shows an earlier version without <code>HashMap</code></a>, which passes the borrow checker and runs normally.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1435268461, "post_id": 31061204, "comment_id": 50143044, "body": "Thanks dor your answer, but I don&#39;t understand why it does not compile with my trait <code>MarkParser</code> but would compile with the <code>Default</code> trait, what am I missing here?"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1435268639, "post_id": 31061204, "comment_id": 50143124, "body": "Oh I think I understand, would it work too if I add the <code>new</code> method in the <code>MarkParser</code> trait and use <code>new</code> instead of <code>default</code>?"}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1435268931, "post_id": 31061204, "comment_id": 50143255, "body": "<code>P::default()</code> returns an object of type <code>P</code>, that is the correct type expected by the compiler. <code>DefaultParser</code> is not <code>P</code>. They both implement the trait <code>MarkParser</code> but this is does&#39;t mean they are the same concrete type. You can add the <code>new</code> method or whatever you want, but it will have to return the correct type: <code>P</code> for parser and <code>R</code> for renderer."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1435272402, "post_id": 31061204, "comment_id": 50144624, "body": "Thank you for the answer, it helped a lot. I ended up doing it in a slightly differently way though (see my answer). For the lifetime problems, you are totally right it&#39;s probably a far better idea to return a String instead of a reference :)"}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 4, "last_activity_date": 1435269196, "last_edit_date": 1435269196, "creation_date": 1435268168, "answer_id": 31061204, "question_id": 31060851, "link": "https://stackoverflow.com/questions/31060851/generics-error-expected-type-parameter-found-struct/31061204#31061204", "title": "Generics Error: expected type parameter, found struct", "body": "<p>First error: you create a <code>Rustmark</code> object with the field <code>parser</code> of type <code>DefaultParser</code> and the field <code>renderer</code> of type <code>HTMLRenderer</code>, but the function is expected to return <code>Rustmark &lt;P, R&gt;</code>. In general P is not of type <code>DefaultParser</code> and R is not of type <code>HTMLRenderer</code>, so it will never compile. A good solution if you want have default values of the right type is to bound <code>P</code> and <code>R</code> to implement the <code>Default</code> <code>trait</code>, this way:</p>\n\n<pre><code>use std::default:Default;\n\nimpl &lt;P: MarkParser + Default, R: MarkRenderer + Default&gt; Rustmark &lt;P, R&gt; {\n    fn new() -&gt; Rustmark &lt;P, R&gt; {\n        Rustmark {\n            parser: P::default(),\n            renderer: R:default(),\n        }\n    }\n}\n</code></pre>\n\n<p>Second error: that main problem is that you return a reference of something that probably will die inside the <code>render</code>method (the <code>String</code> you allocate in the inner <code>render</code>method probably). The compiler is telling you that it doesn't know the lifetime of the object that is pointed by that reference, so it cannot guarantee that the reference is valid. You can specify a lifetime parameter but in your case probably the best solution is to return the <code>String</code> object itself, not a reference.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1435298596, "post_id": 31061973, "comment_id": 50151658, "body": "Note: if all you want is saving keystrokes (not typing <code>MarkParser + Default</code> everywhere) then you can have <code>trait MarkParser: Default { ... }</code> which both enforces that an object must implement <code>Default</code> to be allowed to implement <code>MarkParser</code> and thus, the other way around, than if you have a <code>MarkParser</code>, you can use its <code>default</code> function."}], "tags": [], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "is_accepted": false, "score": 4, "last_activity_date": 1435271775, "creation_date": 1435271775, "answer_id": 31061973, "question_id": 31060851, "link": "https://stackoverflow.com/questions/31060851/generics-error-expected-type-parameter-found-struct/31061973#31061973", "title": "Generics Error: expected type parameter, found struct", "body": "<p>Following the answer of <strong>Andrea P</strong> I looked up the <code>default</code> trait in std. Which is defined like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Default {\n    fn default() -&gt; Self;\n}\n</code></pre>\n\n<p>And what I ended up doing was not use the <code>default</code> trait but add a <em>constructor</em> <code>new</code> in my <code>MarkParser</code> and <code>MarkRenderer</code> traits like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait MarkParser {\n    fn new() -&gt; Self;\n    fn parse(&amp;self, input: &amp;str) -&gt; &amp;str;\n}\n</code></pre>\n\n<p>The key piece that I didn't know about was the <code>Self</code> keyword\nand in this way I can write my implementation like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl &lt;P: MarkParser, R: MarkRenderer&gt; Rustmark &lt;P, R&gt; {\n    fn new() -&gt; Rustmark &lt;P, R&gt; {\n        Rustmark {\n            parser: P::new(),\n            renderer: R::new(),\n        }\n    }\n\n    fn render(&amp;self, input: &amp;str) -&gt; &amp;str {\n        self.renderer.render(self.parser.parse(input))\n    }\n}\n</code></pre>\n\n<p>This is exactly the same thing as implementing the <code>Default</code> trait, except that I get to use <code>new</code> instead of <code>default</code> which I prefer <strong>and</strong> I don't have to add the <code>Default</code> trait to the <code>impl</code> of RustMark.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl &lt;P: MarkParser, R: MarkRenderer&gt; Rustmark &lt;P, R&gt; {\n</code></pre>\n\n<p>instead of</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl &lt;P: MarkParser + Default, R: MarkRenderer + Default&gt; Rustmark &lt;P, R&gt; {\n</code></pre>\n\n<p>Big thanks to Andrea P for pointing me in the right direction.</p>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3217, "favorite_count": 0, "accepted_answer_id": 31061204, "answer_count": 2, "score": 6, "last_activity_date": 1435272669, "creation_date": 1435266612, "last_edit_date": 1435272669, "question_id": 31060851, "link": "https://stackoverflow.com/questions/31060851/generics-error-expected-type-parameter-found-struct", "title": "Generics Error: expected type parameter, found struct", "body": "<p>I started a new project, where I want to be as modular as possible, by that I mean that I would like to be able to replace some parts with others in the future. This seems to be a perfect use for <code>traits</code>, at the moment I have this code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod parser;\nmod renderer;\nmod renderers;\n\nuse parser::MarkParser;\nuse renderer::MarkRenderer;\n\nstruct Rustmark &lt;P: MarkParser, R: MarkRenderer&gt; {\n    parser: P,\n    renderer: R,\n}\n\n\nimpl &lt;P: MarkParser, R: MarkRenderer&gt; Rustmark &lt;P, R&gt; {\n    fn new() -&gt; Rustmark &lt;P, R&gt; {\n        Rustmark {\n            parser: parser::DefaultParser::new(),\n            renderer: renderers::HTMLRenderer::new(),\n        }\n    }\n\n    fn render(&amp;self, input: &amp;str) -&gt; &amp;str {\n        self.renderer.render(self.parser.parse(input))\n    }\n}\n</code></pre>\n\n<p>But I get a couple of errors, mainly this one:</p>\n\n<blockquote>\n  <p><strong>error:</strong> mismatched types:\n   expected <code>Rustmark&lt;P, R&gt;</code>,\n      found <code>Rustmark&lt;parser::DefaultParser, renderers::html::HTMLRenderer&gt;</code>\n  (expected type parameter,\n      found struct <code>parser::DefaultParser</code>) [E0308]</p>\n</blockquote>\n\n<p>And a couple of lifetime errors like this one:</p>\n\n<blockquote>\n  <p><strong>error:</strong> cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements</p>\n  \n  <p><strong>help:</strong> consider using an explicit lifetime parameter as shown: <code>fn parse&lt;'a&gt;(&amp;'a self, input: &amp;'a str) -&gt; &amp;str</code></p>\n</blockquote>\n\n<p>I have tried multiple tweaks to make it work, but none of them seemed to appease the compiler. So I wanted to know if this is the right approach and what I could do to to make it work.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1435240411, "post_id": 31052232, "comment_id": 50125706, "body": "Note: <i>chars</i> return code-points, not necessarily what is graphically represented as a single character, hope that&#39;s alright with you,"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1435240593, "post_id": 31052232, "comment_id": 50125872, "body": "Note: I found the referenced <a href=\"https://doc.rust-lang.org/std/iter/struct.StepBy.html\" rel=\"nofollow noreferrer\">step_by</a> and it is only implemented for <code>Range</code> and <code>RangeFrom</code>."}], "answers": [{"comments": [{"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1435240634, "post_id": 31052417, "comment_id": 50125915, "body": "Thanks, was the syntax for step_by() changed to setp()?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1435243521, "post_id": 31052417, "comment_id": 50128380, "body": "<code>.step_by</code> is only for ranges. <code>.step()</code> is for all iterators (it might be slow because of this)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1435240475, "creation_date": 1435240475, "answer_id": 31052417, "question_id": 31052232, "link": "https://stackoverflow.com/questions/31052232/how-to-apply-step-when-iterating-over-string-characters/31052417#31052417", "title": "How to apply step when iterating over string characters?", "body": "<p>The simplest way would be to use the <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.step\" rel=\"nofollow\"><code>step</code> adaptor from the <code>itertools</code> crate</a>.  In this case, you could use <code>s1.chars().step(2)</code>.</p>\n\n<blockquote>\n  <p><em>Aside</em>: Your code <em>does not</em> iterate over \"characters\"; it iterates over <em>code points</em>.  It's quite likely that you want the <a href=\"https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.graphemes\" rel=\"nofollow\"><code>graphemes</code> method from the <code>unicode-segmentation</code> crate</a>.</p>\n</blockquote>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 97, "favorite_count": 0, "accepted_answer_id": 31052417, "answer_count": 1, "score": 0, "last_activity_date": 1435241627, "creation_date": 1435240047, "question_id": 31052232, "link": "https://stackoverflow.com/questions/31052232/how-to-apply-step-when-iterating-over-string-characters", "title": "How to apply step when iterating over string characters?", "body": "<p>Is there an easy way to apply a step during iteration? I have seen a reference to <code>step_by()</code> in the <a href=\"https://doc.rust-lang.org/stable/book/iterators.html\" rel=\"nofollow\">book</a> but I cant seem to get it to work.</p>\n\n<p>For example, to print every-other character of a string I can do this but is there an easier way?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s1 = \"whhaatt\".to_string();\n\nfor letter in s1.chars().enumerate() {\n    let (i, l) = letter;\n    if i % 2 == 0 {\n        println!(\"{:?}\", l );\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1435240582, "post_id": 31052335, "comment_id": 50125858, "body": "Just seen your comment. Yep that&#39;s changed back, but it leaves me with the original problem of being able to return a reference to the contained value in a simple way. It seems messy as it stands"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1435240699, "post_id": 31052335, "comment_id": 50125972, "body": "@Ronnie: I am sorry, I do not understand what you find &quot;messy&quot;. It is necessary to annotate the return of <code>singleton()</code> with <code>&#39;static</code>, but afterward you should not need it (lifetime elision should work on <code>vol_handle</code>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 1, "creation_date": 1435244814, "post_id": 31052335, "comment_id": 50129417, "body": "@Ronnie: I&#39;ve updated my answer to match, however in the future please avoid drastic changes to your question that invalidates existing answers, it is seen as rude and might lead to heavy head-scratching when future readers see a discrepancy between question and answer. Prefer asking a separate question if necessary."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1435244722, "last_edit_date": 1435244722, "creation_date": 1435240294, "answer_id": 31052335, "question_id": 31051980, "link": "https://stackoverflow.com/questions/31051980/acessing-data-from-a-global-struct-gives-error-borrowed-value-does-not-live-lo/31052335#31052335", "title": "Acessing data from a global struct, gives error &quot;borrowed value does not live long enough&quot;", "body": "<blockquote>\n  <p>It's single threaded so I'm not using Arc/Mutex.</p>\n</blockquote>\n\n<p>And that is, actually, the first issue.</p>\n\n<p><code>Arc</code> and <code>Mutex</code> provide <em>more</em> than just thread-safety, they also provide <em>shallow copies</em>, so that all <code>SingletonReader</code> share the same storage underneath, and therefore the lifetime of the storage is not linked to that of the <code>SingletonReader</code>.</p>\n\n<p>Thus, you should rather return a <code>&amp;'static</code> reference to <code>RefData</code>.</p>\n\n<pre><code>fn singleton() -&gt; &amp;'static RefData {\n    static mut g_RefData : *const RefData = 0 as *const RefData;\n    static G_ONCE : Once = ONCE_INIT;\n    unsafe {\n        G_ONCE.call_once(|| {\n            let mut ref_data = RefData { atm_vol : (BTreeMap::new()),\n                                         delta_vol : (BTreeMap::new()) };\n            ref_data.init();\n            g_RefData = mem::transmute(Box::new(ref_data));\n            });\n\n        &amp;*g_RefData\n   }\n}\n</code></pre>\n\n<p>And now, this implementation will work:</p>\n\n<pre><code>fn vol_handle(asset : &amp;str) -&gt; Option&lt;&amp;String&gt; {\n    RefData::singleton().atm_vol.get(asset)\n}\n</code></pre>\n\n<p>However, it is slightly skewed: lifetime inference makes it so that it is interpreted as:</p>\n\n<pre><code>fn vol_handle&lt;'a&gt;(asset : &amp;'a str) -&gt; Option&lt;&amp;'a String&gt; {\n    RefData::singleton().atm_vol.get(asset)\n}\n</code></pre>\n\n<p>Which is perhaps not what you wish for, as the lifetime of the <code>String</code> really is <code>'static</code> here, and therefore you should rather aim for:</p>\n\n<pre><code>fn vol_handle(asset : &amp;str) -&gt; Option&lt;&amp;'static String&gt; {\n    RefData::singleton().atm_vol.get(asset)\n}\n</code></pre>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "accepted_answer_id": 31052335, "answer_count": 1, "score": 0, "last_activity_date": 1435244722, "creation_date": 1435239415, "last_edit_date": 1495535203, "question_id": 31051980, "link": "https://stackoverflow.com/questions/31051980/acessing-data-from-a-global-struct-gives-error-borrowed-value-does-not-live-lo", "title": "Acessing data from a global struct, gives error &quot;borrowed value does not live long enough&quot;", "body": "<p>As per <a href=\"https://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">thread</a> I've had the need to create a global non-mutable singleton to store some static data.</p>\n\n<pre><code>#[derive(Clone)]\nstruct RefData {\n    atm_vol : BTreeMap&lt;String,String&gt;,\n    delta_vol : BTreeMap&lt;String,String&gt;\n}\n\nimpl RefData {\n    fn singleton() -&gt; RefData {\n        static mut g_RefData : *const RefData = 0 as *const RefData;\n        static G_ONCE : Once = ONCE_INIT;\n        unsafe {\n            G_ONCE.call_once(|| {\n                let mut ref_data = RefData { atm_vol : (BTreeMap::new()),\n                                             delta_vol : (BTreeMap::new()) };\n                ref_data.init();\n                g_RefData = mem::transmute(Box::new(ref_data));\n                });\n\n            (*g_RefData).clone()\n       }\n    }\n\n    fn init(&amp;mut self) {\n        self.atm_vol.insert(\"xcu\".to_string(),\"XCU_USD_VOL_DT\".to_string());\n        self.delta_vol.insert(\"xcu\".to_string(),\"XCU_USD_VOL_SKEW_M\".to_string());\n    }\n    // This doesn't work as singleton doesn't last long enough\n    fn vol_handle(asset : &amp;str) -&gt; Option&lt;&amp;String&gt; {\n        RefData::singleton().atm_vol.get(asset)\n    }\n}\n\n\n#[test]\nfn test_refdata() {\n    let t = RefData::vol_handle(\"xcu\");\n    println!(\"{:?}\",t);\n\n}\n</code></pre>\n\n<p>It's single threaded so I'm not using Arc/Mutex.</p>\n\n<p>How can I get RefData::singleton() to last long enough to return a reference to the value thats in the btreemap</p>\n"}, {"tags": ["string", "parsing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 13, "last_activity_date": 1464336782, "last_edit_date": 1464336782, "creation_date": 1435228452, "answer_id": 31047888, "question_id": 31046763, "link": "https://stackoverflow.com/questions/31046763/does-rust-have-anything-like-scanf/31047888#31047888", "title": "Does Rust have anything like scanf?", "body": "<p>You can use the <a href=\"https://crates.io/crates/text_io\" rel=\"noreferrer\"><code>text_io</code></a> crate for scanf-like input that mimicks the <code>print!</code> macro in syntax</p>\n\n<pre><code>#[macro_use] extern crate text_io;\n\nfn main() {\n    // note that the whitespace between the {} is relevant\n    // placing any characters there will ignore them but require\n    // the input to have them\n    let (s, i, j): (String, i32, f32);\n    scan!(\"{} {} {}\\n\", s, i, j);\n}\n</code></pre>\n\n<p>You can also split it into 3 commands each:</p>\n\n<pre><code>#[macro_use] extern crate text_io;\n\nfn main() {\n    let a: String = read!(\"{} \");\n    let b: i32 = read!(\"{} \");\n    let c: f32 = read!(\"{}\\n\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 18, "last_activity_date": 1435232293, "last_edit_date": 1435232293, "creation_date": 1435229014, "answer_id": 31048103, "question_id": 31046763, "link": "https://stackoverflow.com/questions/31046763/does-rust-have-anything-like-scanf/31048103#31048103", "title": "Does Rust have anything like scanf?", "body": "<p>The standard library doesn't provide this functionality. You could write your own with a macro.</p>\n\n<pre><code>macro_rules! scan {\n    ( $string:expr, $sep:expr, $( $x:ty ),+ ) =&gt; {{\n        let mut iter = $string.split($sep);\n        ($(iter.next().and_then(|word| word.parse::&lt;$x&gt;().ok()),)*)\n    }}\n}\n\nfn main() {\n    let output = scan!(\"2 false fox\", char::is_whitespace, u8, bool, String);\n    println!(\"{:?}\", output); // (Some(2), Some(false), Some(\"fox\"))\n}\n</code></pre>\n\n<p>The second input argument to the macro can be a &amp;str, char, or the appropriate closure / function. The specified types must implement the FromStr trait.</p>\n\n<p>Note that I put this together quickly so it hasn't been tested thoroughly. </p>\n"}, {"tags": [], "owner": {"reputation": 440, "user_id": 6422174, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wWX0V.jpg?s=128&g=1", "display_name": "Nestor Demeure", "link": "https://stackoverflow.com/users/6422174/nestor-demeure"}, "is_accepted": false, "score": 6, "last_activity_date": 1543943673, "creation_date": 1543943673, "answer_id": 53618255, "question_id": 31046763, "link": "https://stackoverflow.com/questions/31046763/does-rust-have-anything-like-scanf/53618255#53618255", "title": "Does Rust have anything like scanf?", "body": "<p>The <a href=\"https://crates.io/crates/scan_fmt/\" rel=\"noreferrer\">scan_fmt</a> crate offers another alternative. It supports simple patterns, returns its output in options and has a syntax that I find nicer to <a href=\"https://crates.io/crates/text_io\" rel=\"noreferrer\">text_io</a> :</p>\n\n<pre><code>#[macro_use] extern crate scan_fmt;\n\nfn main() {\n    let (s, i, j) = scan_fmt!(\"abce 2 2.5\", \"{} {d} {f}\\n\", String, i32, f32);\n    println!(\"{} {} {}\", s.unwrap(), i.unwrap(), j.unwrap());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "is_accepted": false, "score": 3, "last_activity_date": 1544896219, "last_edit_date": 1544896219, "creation_date": 1544895766, "answer_id": 53795695, "question_id": 31046763, "link": "https://stackoverflow.com/questions/31046763/does-rust-have-anything-like-scanf/53795695#53795695", "title": "Does Rust have anything like scanf?", "body": "<p>Unless you need to replicate the exact way that <code>scanf</code> parses things for some reason, I think the best answer in the majority of cases (and in the majority of languages) is \"just use <code>regex</code>.\" Here's a Rust example:</p>\n\n<pre><code>use regex::Regex;\nuse std::io::prelude::*;\n\nfn parse_line(s: &amp;str) -&gt; Option&lt;(String, i32, f32)&gt; {\n    let r = Regex::new(r\"(\\w+) (-?\\d+) (-?[0-9]*.?[0-9]*)\").unwrap();\n    let caps = r.captures(s)?;\n    let a = caps.get(1)?.as_str().to_string();\n    let b = caps.get(2)?.as_str().parse().ok()?;\n    let c = caps.get(3)?.as_str().parse().ok()?;\n    Some((a, b, c))\n}\n\nfn main() {\n    let stdin = std::io::stdin();\n    let stdin = stdin.lock();\n    for line in stdin.lines() {\n        println!(\"{:?}\", parse_line(&amp;line.unwrap()));\n    }\n}\n</code></pre>\n\n<p>Using regex does raise some immediate questions, especially around float parsing. Do you want to support negative numbers? Is a decimal point with no digits a valid float? Is exponential notation allowed? In a quick-and-dirty data parser, you'll probably just support whatever your data is doing. In a real application, this parser decision might become an important API detail of your app, so it could pay to be conservative at first.</p>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9391, "favorite_count": 4, "accepted_answer_id": 31048103, "answer_count": 4, "score": 23, "last_activity_date": 1544896219, "creation_date": 1435225543, "last_edit_date": 1464316728, "question_id": 31046763, "link": "https://stackoverflow.com/questions/31046763/does-rust-have-anything-like-scanf", "title": "Does Rust have anything like scanf?", "body": "<p>I need to parse a file with on each line</p>\n\n<pre><code>&lt;string&gt;&lt;space&gt;&lt;int&gt;&lt;space&gt;&lt;float&gt;\n</code></pre>\n\n<p>e.g. </p>\n\n<pre><code>abce 2 2.5\n</code></pre>\n\n<p>In C I would do: </p>\n\n<pre><code>scanf(\"%s%d%f\", &amp;s, &amp;i, &amp;f);\n</code></pre>\n\n<p>How can I do this easily and idiomatically in Rust?</p>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 3, "last_activity_date": 1435226829, "creation_date": 1435226829, "answer_id": 31047289, "question_id": 31046661, "link": "https://stackoverflow.com/questions/31046661/prevent-application-from-closing-before-all-threads-are-done/31047289#31047289", "title": "prevent application from closing before all threads are done", "body": "<p>The <code>spawn</code> function returns a <code>JoinHandle</code>. You can collect all the handles in a vector and call <code>join</code> on them:</p>\n\n<pre><code>extern crate time;\n\nuse std::thread;\n\nfn main() {\n\n    let start = time::get_time();\n    println!(\"Starting application\");\n    do_stuff();\n    println!(\"Total {:?}\", time::get_time() - start);\n}\n\nfn do_stuff() {\n    let handles: Vec&lt;_&gt; = (0..4).map(|i| {\n        thread::spawn(move || {\n            thread::sleep_ms(1);\n            println!(\"doing stuff {:?}\", i);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 1, "accepted_answer_id": 31047289, "answer_count": 1, "score": 3, "last_activity_date": 1435226829, "creation_date": 1435225233, "question_id": 31046661, "link": "https://stackoverflow.com/questions/31046661/prevent-application-from-closing-before-all-threads-are-done", "title": "prevent application from closing before all threads are done", "body": "<p>So this is what I've got:</p>\n\n<pre><code>extern crate time;\n\nuse std::thread;\n\nfn main() {\n\n    let start = time::get_time();\n    println!(\"Starting application\");\n    do_stuff();\n    println!(\"Total {:?}\", time::get_time() - start);\n\n}\n\nfn do_stuff() {\n\n    for i in 0..4i32 {\n        thread::spawn(move || {\n            thread::sleep_ms(1);\n            println!(\"doing stuff {:?}\", i);\n        });\n    }\n\n}\n</code></pre>\n\n<p>For some reason that I am not familiar with application doesn't wait for the threads in function <code>do_stuff()</code> to finish and closes. So this is the output I get:</p>\n\n<pre><code>Starting application\nTotal Duration { secs: 0, nanos: 808482 }\n</code></pre>\n\n<p>Instead of something like</p>\n\n<pre><code>Starting application\ndoing stuff 1\ndoing stuff 2\ndoing stuff 3\ndoing stuff 4\nTotal Duration { secs: 0, nanos: 808482 }\n</code></pre>\n\n<p>How do I make the application to wait for the threads to finish even when threads don't return anything?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1435223259, "creation_date": 1435223259, "answer_id": 31045884, "question_id": 31045637, "link": "https://stackoverflow.com/questions/31045637/re-using-a-range-for-iteration/31045884#31045884", "title": "Re-using a range for iteration", "body": "<p>The range type <code>Range</code> does not implement <code>Copy</code>. Therefor using a range in a for loop will consume it. If you want to create a copy of a range, you can use <code>.clone()</code>:</p>\n\n<pre><code>for i in smallr.clone() {\n    println!(\"value is {}\", i);\n}\n</code></pre>\n\n<p>Note that this might cause confusing behavior when used on a mutable range (which afaik is the reason why <code>Range</code> does not implement <code>Copy</code>). A range is also an iterator at the same time. If you only partially consume the iterator and then clone it, You get a clone of the partially consumed iterator.</p>\n\n<p>As an example of the pitfall:</p>\n\n<pre><code>fn main() {\n    let mut smallr = 0..10;\n\n    println!(\"first: {:?}\", smallr.next());\n    for i in smallr.clone() {\n        println!(\"value is {}\", i);\n    }\n}\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>first: Some(0)\nvalue is 1\nvalue is 2\nvalue is 3\nvalue is 4\nvalue is 5\nvalue is 6\nvalue is 7\nvalue is 8\nvalue is 9\n</code></pre>\n\n<p>which shows that the first value of the range is not part of the cloned iterator.</p>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 235, "favorite_count": 2, "accepted_answer_id": 31045884, "answer_count": 1, "score": 4, "last_activity_date": 1435223259, "creation_date": 1435222518, "question_id": 31045637, "link": "https://stackoverflow.com/questions/31045637/re-using-a-range-for-iteration", "title": "Re-using a range for iteration", "body": "<p>Im trying to understand how to use ranges with iterators. If I declare a range and use it with an iterator, is it possible to re-use that range with another iterator?\nFor example this does not compile:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let smallr = 0..10;\n    for i in smallr {\n        println!(\"value is {}\", i);\n    }\n\n    //let smallr = 0..15;  re-defining smallr will work!\n    let sum  = smallr.fold(0, |sum, x| sum + x);\n    println!(\"{}\", sum);\n}\n</code></pre>\n"}, {"tags": ["vector", "iterator", "rust", "mutable", "idioms"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448928970, "post_id": 31042076, "comment_id": 55776879, "body": "Questions like this may be better asked at Code Review, but please <a href=\"http://meta.codereview.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">read the guide</a> to know how to ask questions there."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435235897, "post_id": 31045927, "comment_id": 50122101, "body": "Of interest is that <code>zip</code> will stop whenever the shorter of the two iterators does, avoiding the possibility of walking off the end."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435240122, "post_id": 31045927, "comment_id": 50125448, "body": "Yes, it can be a subtle error. You might want to assert that the slices are of equal length."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 5, "last_activity_date": 1481680783, "last_edit_date": 1481680783, "creation_date": 1435223356, "answer_id": 31045927, "question_id": 31042076, "link": "https://stackoverflow.com/questions/31042076/idiomatic-rust-code-for-zipped-mutable-vector-iterator/31045927#31045927", "title": "Idiomatic Rust code for zipped mutable vector iterator", "body": "<p>You would use the <code>.zip()</code> iterator adaptor, for example like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn xor_in_place(l: &amp;mut [u8], r: &amp;[u8]) {\n    for (x, y) in l.iter_mut().zip(r) {\n        *x ^= *y;\n    }\n}\n</code></pre>\n\n<p>You could consider generalizing this XOR operation by either</p>\n\n<ol>\n<li>Accepting all element types that implement <code>BitXor</code>.</li>\n<li>Accepting generic <code>IntoIterator</code> arguments instead of just slices.</li>\n</ol>\n\n<p>Note that <code>zip</code> will stop whenever the shorter of the two iterators does.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448929092, "post_id": 34010309, "comment_id": 55776904, "body": "You may be interested in posting your full code over at Code Review, but please <a href=\"http://meta.codereview.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">read the guide</a> to know how to ask questions there. For example, there&#39;s never a reason to take <code>&amp;Vec&lt;T&gt;</code> (use <code>&amp;[T]</code> instead). Also, theres a non-idiomatic space after <code>a ^ b</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448929236, "post_id": 34010309, "comment_id": 55776944, "body": "Note that this solution also returns a new vector of the XORed results, but the original mutates in-place. I would use this solution, unless profiling indicated otherwise."}], "tags": [], "owner": {"reputation": 11, "user_id": 4279280, "user_type": "registered", "profile_image": "https://graph.facebook.com/572045259/picture?type=large", "display_name": "Phoebe Queen", "link": "https://stackoverflow.com/users/4279280/phoebe-queen"}, "is_accepted": false, "score": 1, "last_activity_date": 1448928051, "creation_date": 1448928051, "answer_id": 34010309, "question_id": 31042076, "link": "https://stackoverflow.com/questions/31042076/idiomatic-rust-code-for-zipped-mutable-vector-iterator/34010309#34010309", "title": "Idiomatic Rust code for zipped mutable vector iterator", "body": "<p>This was my solution. I believe it covers all the required cases for Matasano's xor (presuming for single character xor you use a single-byte key vector) and it seems relatively tidy and in keeping with the Rust tutorial.</p>\n\n<pre><code>pub fn xor(text: &amp;Vec&lt;u8&gt;, key: &amp;Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n    let key_iter = key.iter().cycle();\n    text.iter().zip(key_iter).map(|&amp;a, b)| a ^ b ).collect()\n}\n</code></pre>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2256, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1565390490, "creation_date": 1435210982, "last_edit_date": 1565390490, "question_id": 31042076, "link": "https://stackoverflow.com/questions/31042076/idiomatic-rust-code-for-zipped-mutable-vector-iterator", "title": "Idiomatic Rust code for zipped mutable vector iterator", "body": "<p>I am doing the <a href=\"https://cryptopals.com/\" rel=\"nofollow noreferrer\">Matasano crypto challenge</a> while trying to use Rust (in an idomatic way).</p>\n\n<p>The <a href=\"https://cryptopals.com/sets/1/challenges/2\" rel=\"nofollow noreferrer\">second assignment</a> is to xor two vectors. The code I have now is:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::hex::{FromHex,ToHex};\n\npub fn fixed_xor(l: &amp;str, r: &amp;str) -&gt; String {\n    let mut l = l.from_hex().unwrap();\n    let r = r.from_hex().unwrap();\n    for i in 0..l.len() {\n        l[i] ^= r[i];\n    }\n    return l.to_hex();\n}\n</code></pre>\n\n<p>This works, but it doesn't feel idiomatic code because of the range in the for-loop.</p>\n\n<p>Is it possible to zip <code>l</code> and <code>r</code> and get a mutable reference to the element from <code>l</code> and a non-mutable reference to the element from <code>r</code>?</p>\n\n<p>(Note, I don't check the length of the vectors. I know this would blow up in real life, but I would like to focus now on the for loop)</p>\n"}, {"tags": ["generics", "types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1435203089, "post_id": 31040034, "comment_id": 50104772, "body": "do you mean bound generics? because unbound generics is what I&#39;m trying to avoid. And can you elaborate on how monomorphisation works? I&#39;ve been googling around a bit but only found suggestions for implementations not what was actually used."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 1, "last_activity_date": 1435616335, "last_edit_date": 1435616335, "creation_date": 1435197916, "answer_id": 31040034, "question_id": 31039572, "link": "https://stackoverflow.com/questions/31039572/how-can-i-specify-a-type-when-i-assign-a-generic-function-to-a-variable/31040034#31040034", "title": "How can I specify a type when I assign a generic function to a variable", "body": "<p>Values cannot and never will be able to contain bound generics; the concept simply cannot be accomplished due to how monomorphisation works.</p>\n\n<p>Such a thing needs to be done with a wrapping function like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn read_u32_be&lt;R: Read&gt;(&amp;mut r: R) -&gt; byteorder::Result&lt;u32&gt; {\n    r.read_u32::&lt;BigEndian&gt;()\n}\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 0, "accepted_answer_id": 31040034, "answer_count": 1, "score": 0, "last_activity_date": 1435616335, "creation_date": 1435194266, "question_id": 31039572, "link": "https://stackoverflow.com/questions/31039572/how-can-i-specify-a-type-when-i-assign-a-generic-function-to-a-variable", "title": "How can I specify a type when I assign a generic function to a variable", "body": "<p>I'd like to do something conceptually like this:\n<code>let fun: fn(&amp;mut _) -&gt; Result&lt;u32&gt; = ReadBytesExt::read_u32::&lt;BigEndian&gt;;</code></p>\n\n<p>But that doesn't work as rust thinks I'm trying to call <code>ReadBytesExt::read_u32</code> with <code>BigEndian</code> as a type arg and no other arg. (I get a wrong number of args error).</p>\n\n<p>So what do I do, seems like something that rust's type system should allow, since I'm trying to be MORE specific.</p>\n"}]