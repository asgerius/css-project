[{"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1429727586, "post_id": 29805958, "comment_id": 47740029, "body": "Are you sure the peeker error has the same error message?"}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1429728128, "post_id": 29805958, "comment_id": 47740338, "body": "No, I must have confused that with something else."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1429728252, "post_id": 29805958, "comment_id": 47740412, "body": ".peekable() is an adaptor, so it tries to move out <code>self.src</code> and embed it in itself, giving you a new iterator. It doesn&#39;t look like this is what you want. You might even .clone() the Chars iterator instead if you want to look ahead."}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1429728355, "post_id": 29805958, "comment_id": 47740483, "body": "@user139873 The answer has been updated to reflect what actually happens. I apologize for that."}], "answers": [{"comments": [{"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429730802, "post_id": 29806953, "comment_id": 47742065, "body": "I&#39;m glad that I understood why the original wouldn&#39;t work. Although ins&#39;t consumption of a variable like with <code>peekable</code> consuming it&#39;s iterator that called the function kind of a weird side effect? It&#39;s not something I&#39;d ever expect (to call a random function and lose the variable I called from). That would not have been something I would have thought of. The <code>by_ref</code> mentioned though seems to be what I want. I want a living <code>Peekable</code> into my iterator so that I can consume and peek. The peeking is used to determine if the lexer will continue with the next character for the current token."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 1, "creation_date": 1429730964, "post_id": 29806953, "comment_id": 47742149, "body": "@BrandonBuck I wouldn&#39;t call it a <i>side effect</i> - you are simply moving the iterator by-value into another iterator. That&#39;s why the <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.peekable\" rel=\"nofollow noreferrer\">function signature</a> shows the argument as <code>self</code> not <code>&amp;self</code>. That&#39;s a strong benefit of Rust&#39;s ownership model, and you&#39;ll learn to love it for the performance and explicitness."}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429731034, "post_id": 29806953, "comment_id": 47742197, "body": "It&#39;s frustrating occasionally when I expect things to be safe that Rust doesn&#39;t see the same way."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 1, "creation_date": 1429731867, "post_id": 29806953, "comment_id": 47742764, "body": "@BrandonBuck I think maybe we are using different meanings of <i>safe</i>. Rust allows you give ownership of your iterator to the iterator adapter, and then prevents you from accidentally using it when you don&#39;t own it. It also allows you to hand out a reference to your owned value and ensures that <i>that</i> reference isn&#39;t used after it expires. There&#39;s no unsafety here!"}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429743273, "post_id": 29806953, "comment_id": 47748756, "body": "I&#39;m totally for the reference method. That&#39;s the exact functionality I was trying to duplicate. I guess my confusion is that calling a method does not imply to me that I&#39;m giving away ownership. If i passed the operator into a method, like <code>Peekable::new(iterator)</code> that ownership transfer is more intentional (on my side, as the consumer of the API). And by that I mean implicit ownership transfer (calling a method and losing ownership of the object that called the method) vs explicit (passing the object as an argument)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 1, "creation_date": 1429749726, "post_id": 29806953, "comment_id": 47750967, "body": "@BrandonBuck there&#39;s nothing <i>particularly</i> special about methods vs functions. If the way it looks bothers you, you can use Universal Function Call Syntax (UFCS) and <a href=\"http://is.gd/QlB0ty\" rel=\"nofollow noreferrer\">call it via <code>Iterator::peekable</code></a>. However, I think that the method version is going to be more common and idiomatic."}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429757247, "post_id": 29806953, "comment_id": 47753228, "body": "I suppose that is where my confusion was coming from. I didn&#39;t realize that <code>iterator.peekable()</code> was sugar for <code>Iterator::peekable(iterator)</code>, but it makes perfect sense. I think, IMHO, that the latter is more meaningful in demonstrating the outcome while the former lacks the communication of transferring ownership. This is more of an API design decision, by that I mean I would have made <code>peekable</code> take an iterator and not operate on self."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1429730433, "creation_date": 1429730433, "answer_id": 29806953, "question_id": 29805958, "link": "https://stackoverflow.com/questions/29805958/confusion-with-short-lived-lifetimed-values-that-on-the-surface-seem-perfectly/29806953#29806953", "title": "Confusion with short lived lifetimed values that (on the surface) seem perfectly safe", "body": "<p>Let's start with the second error.</p>\n\n<p>As mentioned in the comments, <code>Iterator::peekable</code> is an iterator adapter that <em>consumes</em> the iterator it is going to make peekable. A small reproduction:</p>\n\n<pre><code>let values = [1,2,3];\nlet mut iterator = values.iter();\niterator.peekable(); // Consumes `iterator`\niterator.next(); // Not available anymore!\n</code></pre>\n\n<p>You can use <code>Iterator::by_ref</code> to get a reference that can then itself be consumed. Note that the underlying iterator will still be advanced!</p>\n\n<pre><code>let values = [1,2,3];\nlet mut iterator = values.iter();\niterator.by_ref().peekable();\niterator.next();\n</code></pre>\n\n<p>In your case, you are trying to consume the value out of a borrowed struct (via <code>&amp;self</code>), which has the specific error <code>cannot move out of borrowed content</code>.</p>\n\n<hr>\n\n<p>Let's look at your original error:</p>\n\n<pre><code>let values = [1,2,3];\nlet next = values.iter().peekable().peek();\n</code></pre>\n\n<p>The problem here is that <code>peek</code> returns a <strong>reference</strong>. This makes sense, as we don't know if the item we are iterating over is <code>Copy</code>able. However, that reference has to have somewhere to live. That place to live is the <code>Peekable</code> iterator itself! <code>Peekable</code> allocates enough space to store the \"next\" element. When you call <code>peek</code>, it advances the underlying iterator, stores the value, then returns the reference. Check out the function signature for <code>peek</code> to see this captured in code:</p>\n\n<pre><code>fn peek(&amp;mut self) -&gt; Option&lt;&amp;I::Item&gt;\n</code></pre>\n\n<p>You can re-add the lifetimes to be explicit:</p>\n\n<pre><code>fn peek&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;&amp;'a I::Item&gt;\n</code></pre>\n\n<p>In the one-line version, you create and then <em>destroy</em> the <code>Peekable</code>, so there's nowhere for the value to live, so the reference dies in the same statement.</p>\n"}], "owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 120, "favorite_count": 0, "accepted_answer_id": 29806953, "answer_count": 1, "score": 2, "last_activity_date": 1429730433, "creation_date": 1429727174, "last_edit_date": 1495540679, "question_id": 29805958, "link": "https://stackoverflow.com/questions/29805958/confusion-with-short-lived-lifetimed-values-that-on-the-surface-seem-perfectly", "title": "Confusion with short lived lifetimed values that (on the surface) seem perfectly safe", "body": "<p>I'm having an issue writing a Lexical Analyzer in Rust where certain functions are starting to complain about simple snippets that would otherwise appear harmless. This is starting to become an annoyance as the error messages are not helping me pinpoint the cause of my problems and so this is the second time I'm reaching out on the same program in the same week (previous question <a href=\"https://stackoverflow.com/questions/29781331/why-cant-i-return-an-str-value-generated-from-a-string\">here</a>).</p>\n\n<p>I have read the book, I've understood everything I could from it. I've also watched/read numerous other articles and videos discussing lifetimes (both explicit and implicit) and for the most part the concept behind borrowing and moving make perfect sense, except in cases like the following:</p>\n\n<p>My lexer has a <code>next</code> function who's purpose is to peek ahead at the next character and return it.</p>\n\n<pre><code>struct Lexer&lt;'a&gt; {\n    src: str::Chars&lt;'a&gt;,\n    buf: String,\n    // ... not important\n}\n\nimpl&lt;'a&gt; Lexer&lt;'a&gt; {\n    // ... not relevant\n\n    // originally this -&gt; Option&lt;&amp;char&gt; which caused it's own slew of problems\n    // that I thought dereferencing the character would solve.\n    fn next(&amp;self) -&gt; Option&lt;char&gt; {\n        let res = self.src.peekable().peek();\n        // convert Option&lt;&amp;char&gt; to Option&lt;char&gt;\n        match res {\n            Some(ref c) =&gt; Some(*c.clone()),\n            None =&gt; None\n        }\n    }\n\n    // ... not relevant\n}\n</code></pre>\n\n<p>The error that I'm getting when doing this is:</p>\n\n<pre><code>error: borrowed value does not live long enough\n       let res = self.src.peekable().peek();\n                 ^~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>What I understand from this error is that the value from <code>peekable()</code> is not living long enough, which kind of makes sense to me. I'm only referencing the return in that line and calling another function which I imagine is returning a pointer to the character at the next location with the iterator. My naive solution to this was:</p>\n\n<pre><code>let mut peeker = self.src.peekable();\nlet res = peeker.peek();\n</code></pre>\n\n<p>If I implement this solution, I see a different error which also does not make sense to me:</p>\n\n<pre><code>error: cannot move out of borrowed content\n       let mut peeker = self.src.peekable();\n                        ^~~~\n</code></pre>\n\n<p>I'm not quite sure what's moving <code>self</code> out of a borrowed context here (I know it's borrowed from <code>&amp;self</code> but not sure what's moving it out of the borrowed context.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I proposed a question with details that were wildly inaccurate. The portion of the post that contained those details has been updated with actual facts - I mixed up two different situations where I had encountered a similar error (similar to me, at least).</p>\n"}, {"tags": ["notifications", "rust", "dbus", "freedesktop.org"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1429714033, "post_id": 29800616, "comment_id": 47730459, "body": "I guess <code>Array of [String]</code> is covered by <code>MessageItem::Array</code> enum variant, but I&#39;m not sure about <code>Dict</code>. There is <code>MessageItem::DictEntry</code>, but I can&#39;t say how it should be used."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429718775, "post_id": 29800616, "comment_id": 47734108, "body": "There is a <a href=\"http://diwic.github.io/dbus-rs-docs/dbus/enum.MessageItem.html#method.from_dict\" rel=\"nofollow noreferrer\"><code>from_dict</code></a>... perhaps <code>Dict</code> is represented as an array of key/value tuples, and <code>DictEntry</code> is just a single one..."}], "answers": [{"tags": [], "owner": {"reputation": 183, "user_id": 480957, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7ae1f5f70b37ac9fe79af75ae554f14b?s=128&d=identicon&r=PG", "display_name": "hoodie", "link": "https://stackoverflow.com/users/480957/hoodie"}, "is_accepted": true, "score": 2, "last_activity_date": 1432161941, "creation_date": 1432161941, "answer_id": 30361653, "question_id": 29800616, "link": "https://stackoverflow.com/questions/29800616/d-bus-desktop-notification-using-dbus-rs/30361653#30361653", "title": "D-Bus Desktop Notification using dbus-rs", "body": "<p>After a while I figured this out with @payload</p>\n\n<pre><code>    m.append_items(&amp;[\n                   MessageItem::Str(appname.to_string()),         // appname\n                   MessageItem::UInt32(0),                        // notification to update\n                   MessageItem::Str(icon.to_string()),            // icon\n                   MessageItem::Str(summary.to_string()),         // summary (title)\n                   MessageItem::Str(body.to_string()),            // body\n                   MessageItem::new_array(                        // actions\n                       vec!( MessageItem::Str(\"\".to_string()))),\n                   MessageItem::new_array(                        // hints\n                       vec!(\n                           MessageItem::DictEntry(\n                               Box::new(MessageItem::Str(\"\".to_string())),\n                               Box::new(MessageItem::Variant(\n                                       Box::new(MessageItem::Str(\"\".to_string()))\n                                       ))\n                           ),\n                       )\n                   ),\n                   MessageItem::Int32(9000),                       // timeout\n               ]);\n</code></pre>\n\n<p>My <a href=\"https://github.com/hoodie/notify-rs\" rel=\"nofollow\">little fun project</a> where I use this.</p>\n"}], "owner": {"reputation": 183, "user_id": 480957, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7ae1f5f70b37ac9fe79af75ae554f14b?s=128&d=identicon&r=PG", "display_name": "hoodie", "link": "https://stackoverflow.com/users/480957/hoodie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1015, "favorite_count": 0, "accepted_answer_id": 30361653, "answer_count": 1, "score": 6, "last_activity_date": 1432161941, "creation_date": 1429712631, "last_edit_date": 1429718586, "question_id": 29800616, "link": "https://stackoverflow.com/questions/29800616/d-bus-desktop-notification-using-dbus-rs", "title": "D-Bus Desktop Notification using dbus-rs", "body": "<p>I would like to send desktop notifications through D-BUS using <a href=\"https://crates.io/crates/dbus\" rel=\"noreferrer\">https://crates.io/crates/dbus</a>. </p>\n\n<p>My current approach is:</p>\n\n<pre><code>    let c = Connection::get_private(BusType::Session).unwrap();\n//let m = Message::new_method_call(\"org.freedesktop.DBus\", \"/\", \"org.freedesktop.DBus\", \"ListNames\").unwrap();\nlet mut m = Message::new_method_call(\n    \"org.freedesktop.Notifications\",\n    \"/org/freedesktop/Notifications\",\n    \"org.freedesktop.Notifications\",\n    \"Notify\"\n    ).unwrap();\nm.append_items(&amp;[\n       MessageItem::Str(\"appname\".to_string()),         // appname\n       MessageItem::UInt32(0),                          // notification to update\n       MessageItem::Str(\"icon\".to_string()),            // icon\n       MessageItem::Str(\"summary\".to_string()),         // summary (title)\n       MessageItem::Str(\"body\".to_string()),            // body\n       ???,                                             // actions\n       ???,                                             // hints\n       MessageItem::UInt32(9000),                       // timeout\n\n]);\n</code></pre>\n\n<p>I can't think of a meaningful way to satisfy the interface of the <code>Notify</code> method. According to D-Feet, it looks like this:</p>\n\n<pre><code>Notify(\n    String app_name,\n    UInt32 replaces_id,\n    String app_icon,\n    String summary,\n    String body,\n    Array of [String] actions,\n    Dict of {String, Variant} hints,\n    Int32\n)\n</code></pre>\n\n<p>Especially the <code>Array of [String]</code>, <code>Dict of {String, Variant}</code> puzzles me.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429710157, "post_id": 29799123, "comment_id": 47726988, "body": "I tried to improve your title from the overly generic <i>&quot;value and references&quot;</i>. Please feel free to update it to better suit your real question - note that there are no question marks anywhere in your post, so you haven&#39;t actually asked anything yet!"}, {"owner": {"reputation": 1958, "user_id": 33997, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/87e41d0d468ad56a3b07d9a6482fd6d5?s=128&d=identicon&r=PG", "display_name": "Hemant Kumar", "link": "https://stackoverflow.com/users/33997/hemant-kumar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429710473, "post_id": 29799123, "comment_id": 47727275, "body": "Thank you. I have edited my question to make it more pointed."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429710583, "post_id": 29799484, "comment_id": 47727376, "body": "@Shepmaster Now that you mention it, I&#39;ve only ever seen &quot;destructure&quot;. I thought I&#39;ve seen &quot;deconstructing&quot; too (which makes the dualism clearer) but I&#39;m not so sure anymore. I&#39;ll edit it."}, {"owner": {"reputation": 1958, "user_id": 33997, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/87e41d0d468ad56a3b07d9a6482fd6d5?s=128&d=identicon&r=PG", "display_name": "Hemant Kumar", "link": "https://stackoverflow.com/users/33997/hemant-kumar"}, "edited": false, "score": 0, "creation_date": 1429711053, "post_id": 29799484, "comment_id": 47727769, "body": "Perfect. I did guess that <code>%</code>  implicitly works  with references while comparison does not. I guess there should be a section in rust docs about this stuff. :-)"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 2, "last_activity_date": 1429710678, "last_edit_date": 1429710678, "creation_date": 1429710199, "answer_id": 29799484, "question_id": 29799123, "link": "https://stackoverflow.com/questions/29799123/value-and-references-when-providing-a-closure-to-iteratorfind/29799484#29799484", "title": "Value and references when providing a closure to Iterator::find", "body": "<p>Non-trivial patterns usually <em>destructure</em> something, i.e., break something into its components. This usually mirrors some <em>construction</em> syntax, so it looks very similar but is actually the inverse. This dualism applies to records, to tuples, to boxes (once those are properly implemented), and also to references:</p>\n\n<ul>\n<li>The <em>expression</em> <code>&amp;x</code> creates a reference to whatever <code>x</code> evaluates to. Here, the <code>&amp;</code> turns a value of type <code>T</code> into one of type <code>&amp;T</code>.</li>\n<li>The <em>pattern</em> <code>&amp;a</code>, on the other hand,  eliminates the reference, so <code>a</code> is bound to what is <em>behind</em> the reference (note that <code>a</code> could also be another, more complicated pattern). Here, the <code>&amp;</code> goes from a <code>&amp;T</code> value to a <code>T</code> value.</li>\n</ul>\n\n<p>The closures in your examples are all of of type <code>&amp;i32 -&gt; bool</code><sup>1</sup>. So they accept a reference to an integer, and you can either work with that reference (which you do in the first example, which works because arithmetic operators are overloaded for references too) or you can use the pattern <code>&amp;a</code>. In the latter case, <code>a</code> is a <code>i32</code> (compare the general explanation above, substitute <code>i32</code> for <code>T</code>), so of course you can't dereference it further.</p>\n\n<p><sup>1</sup> This is not actually a real type, but it's close enough for our purposes.</p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1429710717, "last_edit_date": 1429710717, "creation_date": 1429710266, "answer_id": 29799511, "question_id": 29799123, "link": "https://stackoverflow.com/questions/29799123/value-and-references-when-providing-a-closure-to-iteratorfind/29799511#29799511", "title": "Value and references when providing a closure to Iterator::find", "body": "<blockquote>\n  <p>but then I thought using &amp;a is like asking for reference of element from the range</p>\n</blockquote>\n\n<p><em>This</em> is the wrong part of your reasoning. Using <code>&amp;</code> in pattern does exactly the opposite - it implicitly dereferences the matched value:</p>\n\n<pre><code>let &amp;a = &amp;10;\n// a is 10, not &amp;10 or &amp;&amp;10\n</code></pre>\n\n<p>As you probably already know, <code>find()</code> accepts a closure which satisfies <code>FnMut(&amp;T) -&gt; bool</code>, that is, this closure accepts a reference to each element of the iterator, so if you write <code>(1..100).find(|a| ...)</code>, <code>a</code> will be of type <code>&amp;i32</code>.</p>\n\n<p><code>let x = (1..100).find(|a| a % 2 == 0)</code> works because arithmetic operators are overloaded to work on references, so you can apply <code>%</code> to a reference and it still would be able to compile.</p>\n\n<p>Comparison operators are not overloaded to handle references, and so you need to get an <code>i32</code> from <code>&amp;i32</code>. This could be done in two ways, first, like you already did:</p>\n\n<pre><code>let x = (1..100).find(|&amp;a| a &gt; 50)\n</code></pre>\n\n<p>Here we use <code>&amp;</code> patterns to implicitly dereference the function argument. It is equivalent to this one:</p>\n\n<pre><code>let x = (1..100).find(|a| { let a = *a; a &gt; 50 })\n</code></pre>\n\n<p>Another way would be to dereference the argument explicitly:</p>\n\n<pre><code>let x = (1..100).find(|a| *a &gt; 50)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1429710289, "creation_date": 1429710289, "answer_id": 29799530, "question_id": 29799123, "link": "https://stackoverflow.com/questions/29799123/value-and-references-when-providing-a-closure-to-iteratorfind/29799530#29799530", "title": "Value and references when providing a closure to Iterator::find", "body": "<blockquote>\n  <p>I thought using &amp;a is like asking for reference of element from the range</p>\n</blockquote>\n\n<p>Sometimes <code>&amp;</code> is used as an operator, and sometimes it is used as a pattern match. For the closure parameter (<code>|&amp;a|</code>), it is being used as a pattern match. This means that the variable <code>a</code> will be automatically dereferenced when it is used. It is also equivalent to do</p>\n\n<pre><code>let x = (1..100).find(|a| *a &gt; 50);\n</code></pre>\n"}], "owner": {"reputation": 1958, "user_id": 33997, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/87e41d0d468ad56a3b07d9a6482fd6d5?s=128&d=identicon&r=PG", "display_name": "Hemant Kumar", "link": "https://stackoverflow.com/users/33997/hemant-kumar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 29799511, "answer_count": 3, "score": 1, "last_activity_date": 1429710717, "creation_date": 1429709367, "last_edit_date": 1429710318, "question_id": 29799123, "link": "https://stackoverflow.com/questions/29799123/value-and-references-when-providing-a-closure-to-iteratorfind", "title": "Value and references when providing a closure to Iterator::find", "body": "<p>I have still quite a long way to go in learning Rust, but I find the way values and references are used to be inconsistent. This may be born from my own ignorance of the language.</p>\n\n<p>For example, this works:</p>\n\n<pre><code>let x = (1..100).find(|a| a % 2 == 0);\n</code></pre>\n\n<p>But <code>let x = (1..100).find(|a| a &gt; 50);</code> does not. I am not sure - why though? </p>\n\n<p>Using <code>let x = (1..100).find(|&amp;a| a &gt; 50);</code> fixes the error, but then I thought using <code>&amp;a</code> is like asking for reference of element from the range and hence following should work, but it does not:</p>\n\n<pre><code>let x = (1..100).find(|&amp;a| *a &gt; 50);\n</code></pre>\n\n<p>Again no idea why!</p>\n"}, {"tags": ["rust", "hyper"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1429703895, "post_id": 29793455, "comment_id": 47721704, "body": "There&#39;s also <code>std::borrow::Cow&lt;str&gt;</code>."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429750532, "post_id": 29793455, "comment_id": 47751192, "body": "So the issue is that later I need to convert to &amp;str for the vector being passed into the serialize function. if I use String in the Param, then I need to unwrap that for the vec! being passed into serialize, which requires a map() method on the Iterator at that point. Then the function on that map needs to do a move from the String to &amp;str: <code>fn map_str_string&lt;&#39;a&gt;(value: (&amp;&#39;static str, String)) -&gt; (&amp;&#39;static str, &amp;&#39;a str) {      let (k,v) = value;      return (k,&amp;v);  }</code>"}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429777549, "post_id": 29793455, "comment_id": 47762294, "body": "I&#39;m going to mark this as answered, but re-ask the interator conversation question. Thanks for your help."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429858684, "post_id": 29793455, "comment_id": 47807547, "body": "FYI, for the question around iterator (String,String) to (&amp;str, &amp;str) conversion  see: <a href=\"http://stackoverflow.com/questions/29818290/how-to-convert-an-iterator-on-a-tuple-of-string-string-to-an-iterator-of-st/29818920#29818920\" title=\"how to convert an iterator on a tuple of string string to an iterator of st\">stackoverflow.com/questions/29818290/&hellip;</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1429705905, "last_edit_date": 1429705905, "creation_date": 1429695438, "answer_id": 29793455, "question_id": 29792649, "link": "https://stackoverflow.com/questions/29792649/using-convertinto-with-enum-to-unwrap-and-convert-value/29793455#29793455", "title": "Using convert::Into with enum to unwrap and convert value", "body": "<p>It is not really clear why you can't do this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Param&lt;'a&gt; {\n   MyBool(bool),\n   MyLong(i64),\n   MyStr(&amp;'a str),\n}\n\nimpl&lt;'a&gt; Param&lt;'a&gt; {\n    fn into(self) -&gt; (&amp;'static str, String) {\n        match self {\n            Param::MyBool(b) =&gt; (\"my_bool\", b.to_string()),\n            Param::MyLong(i) =&gt; (\"my_long\", i.to_string()),\n            Param::MyStr(s) =&gt; (\"my_str\", s.into()),\n        }\n    }\n}\n</code></pre>\n\n<p>(<code>into()</code> for <code>&amp;str -&gt; String</code> conversion is slightly more efficient than <code>to_string()</code>)</p>\n\n<p>You can always get a <code>&amp;str</code> from <code>String</code>, e.g. with deref coercion or explicit slicing.</p>\n"}], "owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1407, "favorite_count": 0, "accepted_answer_id": 29793455, "answer_count": 1, "score": 2, "last_activity_date": 1429775800, "creation_date": 1429693471, "last_edit_date": 1429775800, "question_id": 29792649, "link": "https://stackoverflow.com/questions/29792649/using-convertinto-with-enum-to-unwrap-and-convert-value", "title": "Using convert::Into with enum to unwrap and convert value", "body": "<p>I'm starting to get comfortable with Rust, but there are still some things that are really tripping me up with lifetimes. In this particular case, what I want to do is have an enum which may have different types wrapped as a generic parameter class to create strongly typed query parameters in a URL, though the specific use case is irrelevant, and return a conversion of that wrapped value into an &amp;str. Here's an example of what I want to do:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Param&lt;'a&gt; {\n   MyBool(bool),\n   MyLong(i64),\n   MyStr(&amp;'a str),\n}\n\nimpl&lt;'a&gt; Param&lt;'a&gt; {\n    fn into(self) -&gt; (&amp;'static str, &amp;'a str) {\n        match self {\n            Param::MyBool(b) =&gt; (\"my_bool\", &amp;b.to_string()), // clearly wrong\n            Param::MyLong(i) =&gt; (\"my_long\", &amp;i.to_string()), // clearly wrong\n            Param::Value(s) =&gt; (\"my_str\", s),\n        }\n    }\n}\n</code></pre>\n\n<p>What I ended up doing is this to deal with the obvious lifetime issue (and yes, it's obvious to me why the lifetime isn't long enough for the into() function):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Param&lt;'a&gt; {\n   MyBool(&amp;'a str), // no more static typing :(\n   MyLong(&amp;'a str), // no more static typing :(\n   MyStr(&amp;'a str),\n}\n\nimpl&lt;'a&gt; Param&lt;'a&gt; {\n    fn into(self) -&gt; (&amp;'static str, &amp;'a str) {\n        match self {\n            Param::MyBool(b) =&gt; (\"my_bool\", b),\n            Param::MyLong(i) =&gt; (\"my_long\", i),\n            Param::Value(s) =&gt; (\"my_str\", s),\n        }\n    }\n}\n</code></pre>\n\n<p>This seems like an ugly workaround in a case where what I really want to do is guarantee the static typing of certain params, b/c now it's the constructor of the enum that's responsible for the proper type conversion. Curious if there is a way to do this... and yes, at some point I need &amp;str as that is a parameter elsewhere, specifically:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let body = url::form_urlencoded::serialize(\n               vec![Param::MyBool(&amp;true.to_string()).\n                       into()].\n                   into_iter());\n</code></pre>\n\n<p>I went through a whole bunch of things like trying to return String instead of <code>&amp;str</code> from <code>into()</code>, but that only caused conversion issues down the line with a <code>map()</code> of <code>String</code> -> <code>&amp;str</code>. Having the tuple correct from the start is the easiest thing, rather than fighting the compiler at every turn after that.</p>\n\n<p>-- update--</p>\n\n<p>Ok, so I went back to a <code>(String,String)</code> tuple in the <code>into()</code> function for the enum. It turns out that there is an \"owned\" version of the <code>url::form_urlencoded::serialize()</code> function which this is compatible with.</p>\n\n<pre><code>pub fn serialize_owned(pairs: &amp;[(String, String)]) -&gt; String\n</code></pre>\n\n<p>But, now I'm also trying to use the same pattern for the query string in the <code>hyper::URL</code>, specifically:</p>\n\n<pre><code>fn set_query_from_pairs&lt;'a, I&gt;(&amp;mut self, pairs: I) \n    where I: Iterator&lt;Item=(&amp;'a str, &amp;'a str)&gt;\n</code></pre>\n\n<p>and then I try to use <code>map()</code> on the iterator that I have from the (String,String) tuple: </p>\n\n<pre><code>params: Iterator&lt;Item=(String, String)&gt;\n\nurl.set_query_from_pairs(params.map(|x: (String, String)| -&gt; \n    (&amp;str, &amp;str) { let (ref k, ref v) = x; (k, v) } ));\n</code></pre>\n\n<p>But this gets error: <code>x.0</code> does not live long enough. Ref seems correct in this case, right? If I don't use ref, then it's k/v that don't live long enough. Is there something 'simple' that I'm missing in this?</p>\n"}, {"tags": ["rust", "coroutine"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1429689686, "post_id": 29791031, "comment_id": 47711302, "body": "A couple of other related things: <a href=\"https://crates.io/crates/threadpool\" rel=\"nofollow noreferrer\">threadpool</a>, <a href=\"https://github.com/carllerche/mio\" rel=\"nofollow noreferrer\">mio</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1429690672, "post_id": 29791031, "comment_id": 47711908, "body": "Seconding Chris&#39; comment: there is no one-size-fits-all when it comes to green-threading, so you have to choose your trade-off."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 22, "last_activity_date": 1429689634, "creation_date": 1429689634, "answer_id": 29791242, "question_id": 29791031, "link": "https://stackoverflow.com/questions/29791031/what-happened-to-libgreen/29791242#29791242", "title": "What happened to libgreen?", "body": "<p>You are correct that there's no lightweight tasking library in <code>std</code> (or the rest of the main distribution), that <code>green</code> doesn't compile and that <code>coroutine</code> doesn't seem to fully handle the threading aspect yet. I do not know of any other library in this space.</p>\n\n<p>As for what happened: the RFC linked to by that issue&mdash;<a href=\"https://github.com/rust-lang/rfcs/blob/0806be4f282144cfcd55b1d20284b43f87cbe1c6/text/0230-remove-runtime.md\">RFC 230</a>&mdash;is the canonical source of information. The summary is that it was found that the method by which green threading/IO was handled (<code>std</code> tried to abstract across both models, allowing them to be used interoperably automagically) was not worth the downsides. Now, <code>std</code> aims to just provide a minimum base-line of useful support: for IO/threading, that means \"thin\", safe wrappers for operating system functionality.</p>\n"}, {"comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1429719736, "post_id": 29799263, "comment_id": 47734812, "body": "Also &quot;<i>one of the reasons we were comfortable removing libgreen is that you can write your own libraries to do different kinds of IO</i>&quot; (same link). Like with C++, (green) threading might be implemented as a library first."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 5, "creation_date": 1429800766, "post_id": 29799263, "comment_id": 47780391, "body": "I left some comments on that post, I think this is an incomplete perspective."}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "reply_to_user": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1453848794, "post_id": 29799263, "comment_id": 57777771, "body": "@SteveKlabnik your comments on that post were very helpful to read. Neat to come back and see that this is how they got there :)"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 0, "creation_date": 1453848826, "post_id": 29799263, "comment_id": 57777795, "body": "Thanks @JackO&#39;Connor !"}, {"owner": {"reputation": 3227, "user_id": 249199, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0878f26eba467efc1d90fc6959b9b531?s=128&d=identicon&r=PG", "display_name": "Zac B", "link": "https://stackoverflow.com/users/249199/zac-b"}, "edited": false, "score": 0, "creation_date": 1508187663, "post_id": 29799263, "comment_id": 80503880, "body": "&quot;disadvantages of Erlang&quot; such as what?  I don&#39;t program in or know Erlang; I am just curious and not looking to start a language argument."}, {"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "reply_to_user": {"reputation": 3227, "user_id": 249199, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0878f26eba467efc1d90fc6959b9b531?s=128&d=identicon&r=PG", "display_name": "Zac B", "link": "https://stackoverflow.com/users/249199/zac-b"}, "edited": false, "score": 0, "creation_date": 1508189529, "post_id": 29799263, "comment_id": 80504711, "body": "@ZacB Neither do I"}], "tags": [], "owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "is_accepted": false, "score": 18, "last_activity_date": 1536157774, "last_edit_date": 1536157774, "creation_date": 1429709674, "answer_id": 29799263, "question_id": 29791031, "link": "https://stackoverflow.com/questions/29791031/what-happened-to-libgreen/29799263#29799263", "title": "What happened to libgreen?", "body": "<p>Read this <a href=\"https://aturon.github.io/blog/2016/08/11/futures/\" rel=\"noreferrer\">https://aturon.github.io/blog/2016/08/11/futures/</a> and also:</p>\n\n<p><a href=\"https://plus.google.com/+nialldouglas/posts/AXFJRSM8u2t\" rel=\"noreferrer\">Steve Klabnik's response</a> in the comments:</p>\n\n<blockquote>\n  <p>In the beginning, Rust had only green threads. Eventually, it was\n  decided that a systems language without systems threads is... strange.\n  So we needed to add them. Why not add choice? Since the interfaces\n  could be the same, why not abstract over them, and you could just\n  choose which one you wanted?</p>\n  \n  <p>At the same time, the problems with green threads by default were\n  becoming issues. Segmented stacks cause slow C interop. You need a\n  runtime to manage them, etc. Furthermore, the overall abstraction was\n  causing an unacceptable cost. The green threads weren't very green.\n  Plus, with the need to actually release someday looming, decisions\n  needed to be made regarding tradeoffs. And since Rust is supposed to\n  be a systems language, having 1:1 threads and basically no runtime\n  makes more sense than N:M threads and a runtime. . So libgreen was\n  removed, the interface was re-done to be 1:1 thread centric.</p>\n  \n  <hr>\n  \n  <p>The 'release someday looming' is a big part of it. We want to be\n  really stable with Rust, and with all the things to do to actually\n  ship a 1.0, we didn't want to crystallize an interface we weren't\n  happy with. Heck, we pulled out a lot of libraries that are even less\n  important for similar reasons, like rand. Engineering is all about\n  tradeoffs, and we decided to choose minimalism.</p>\n  \n  <blockquote>\n    <p>mio is a non starter for us, as are most of the other async i/o frameworks for Rust, because we need Windows and besides we don't want\n    to get locked into an expensive to replace library which may get\n    orphaned.</p>\n  </blockquote>\n  \n  <p>Totally understood here, especially in the general case. In the\n  specific case, mio is going to either have Windows support, or a\n  windows-specific version of mio is going to be released, with a\n  higher-level package providing the features for all platforms. And in\n  this case, it's maintained by one of the people who's currently using\n  Rust heavily in production, so it's not likely to go away anytime\n  soon. But, unless you're actively involved, it's hard to know things\n  like that, which is, of itself an issue.</p>\n  \n  <p>One of the reasons we were comfortable removing libgreen is that you\n  can write your own libraries to do different kinds of IO. 1.0 is a\n  strong core that we feel good about stabilizing forever, not the final\n  bit. Libraries like <a href=\"https://github.com/carllerche/mio\" rel=\"noreferrer\">https://github.com/carllerche/mio</a> can test out\n  different ways of handling things like async IO, and, when they're\n  mature enough, we can always pull them back in the standard library if\n  need be. But in the meantime, it's just one line to your Cargo.toml to\n  add them in.</p>\n</blockquote>\n\n<p>And such <a href=\"https://www.reddit.com/r/rust/comments/3c35mq/where_can_i_find_the_old_native_coroutine_mn/\" rel=\"noreferrer\">text from reddit</a>:</p>\n\n<blockquote>\n  <p>Unfortunately they ended up canning the greenlet support because\n  theirs were slower than kernel threads which in turn demonstrates\n  someone didn\u2019t understand how to get a language compiler to generate\n  stackless coroutines effectively (not surprising, the number of\n  engineers wired the right way is not many in this world, but see\n  <a href=\"http://www.reddit.com/r/rust/comments/2l0a4b/do_rust_web_servers_use_libuv_through_libgreen_or/\" rel=\"noreferrer\">http://www.reddit.com/r/rust/comments/2l0a4b/do_rust_web_servers_use_libuv_through_libgreen_or/</a>\n  for more detail). And they canned the async i/o because libuv is\n  \u201cslow\u201d (which it is only because it is single threaded only, plus\n  forces a malloc + free per async operation as the buffers must last\n  until completion occurs, plus it enforces a penalty over synchronous\n  i/o see\n  <a href=\"http://blog.kazuhooku.com/2014/09/the-reasons-why-i-stopped-using-libuv.html\" rel=\"noreferrer\">http://blog.kazuhooku.com/2014/09/the-reasons-why-i-stopped-using-libuv.html</a>),\n  which was a real shame - they should have taken the opportunity to\n  replace libuv with something better (hint: ASIO + AFIO, and yes I know\n  they are both C++, but Rust could do with much better C++ interop than\n  the presently none it currently has) instead of canning\n  always-async-everything in what could have been an amazing step up\n  from C++ with most of the benefits of Erlang without the disadvantages\n  of Erlang.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 9, "last_activity_date": 1520262680, "creation_date": 1520262680, "answer_id": 49113515, "question_id": 29791031, "link": "https://stackoverflow.com/questions/29791031/what-happened-to-libgreen/49113515#49113515", "title": "What happened to libgreen?", "body": "<p>For newcomers, there is now <a href=\"https://crates.io/crates/may\" rel=\"noreferrer\"><code>may</code></a>, a crate that implements green threads similar to goroutines.</p>\n"}], "owner": {"reputation": 1734, "user_id": 1565238, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/cd5ac413e588dd1a030e00f1dea143ee?s=128&d=identicon&r=PG", "display_name": "Aleksander Alekseev", "link": "https://stackoverflow.com/users/1565238/aleksander-alekseev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14161, "favorite_count": 9, "accepted_answer_id": 29791242, "answer_count": 3, "score": 28, "last_activity_date": 1536157774, "creation_date": 1429688960, "last_edit_date": 1429708935, "question_id": 29791031, "link": "https://stackoverflow.com/questions/29791031/what-happened-to-libgreen", "title": "What happened to libgreen?", "body": "<p>As far as I understand libgreen <a href=\"https://github.com/rust-lang/rust/issues/17325\">is not a part of Rust standard library</a> anymore. Also I can't find a separate libgreen package. There are a few alternatives - <a href=\"https://github.com/rustcc/coroutine-rs\">coroutine</a>, which does not provide actual green threads for now, and <a href=\"https://github.com/alexcrichton/green-rs\">green-rs</a>, which is broken. Do I right understand that for now there is no lightweight Go-like processes in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429709099, "post_id": 29789877, "comment_id": 47726111, "body": "For future searchers, note that this error has nothing to do with generics or parameterized types \u2014 &quot;Can not implement trait from another crate for type from another crate&quot; would suffice. A <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a> would have helped the OP reduce the problem to the core issue."}], "answers": [{"comments": [{"owner": {"reputation": 63, "user_id": 4814060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e52223e374bf4e0ca47c6fa10b02205b?s=128&d=identicon&r=PG&f=1", "display_name": "pavlov-dmitry", "link": "https://stackoverflow.com/users/4814060/pavlov-dmitry"}, "edited": false, "score": 0, "creation_date": 1429687733, "post_id": 29790091, "comment_id": 47710073, "body": "With all your solutions, I can not use try! macro from std with MyResult."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 63, "user_id": 4814060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e52223e374bf4e0ca47c6fa10b02205b?s=128&d=identicon&r=PG&f=1", "display_name": "pavlov-dmitry", "link": "https://stackoverflow.com/users/4814060/pavlov-dmitry"}, "edited": false, "score": 0, "creation_date": 1429688712, "post_id": 29790091, "comment_id": 47710722, "body": "Yes. What problem are you trying to solve by implementing <code>Display</code> for <code>MyResult</code>, is the <code>Debug</code> implementation insufficient? (I&#39;ve added another solution.)"}, {"owner": {"reputation": 63, "user_id": 4814060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e52223e374bf4e0ca47c6fa10b02205b?s=128&d=identicon&r=PG&f=1", "display_name": "pavlov-dmitry", "link": "https://stackoverflow.com/users/4814060/pavlov-dmitry"}, "edited": false, "score": 0, "creation_date": 1429689710, "post_id": 29790091, "comment_id": 47711316, "body": "<code>Display</code> is only for example. I wanted to know that this is not a bug in the compiler.  I&#39;ll use one of the solutions to fix my real code. Thank you for your help."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 10, "last_activity_date": 1429689930, "last_edit_date": 1429689930, "creation_date": 1429686160, "answer_id": 29790091, "question_id": 29789877, "link": "https://stackoverflow.com/questions/29789877/can-not-implement-trait-from-another-crate-for-generic-type-from-another-crate-p/29790091#29790091", "title": "Can not implement trait from another crate for generic type from another crate parameterized with local type", "body": "<p>There's no direct way to solve this for a pure alias like <code>type</code>.</p>\n\n<p>The code is the same as</p>\n\n<pre><code>impl Display for Result&lt;MyLocalType, String&gt;\n</code></pre>\n\n<p>and the compiler can't ensure that there will be no conflicting implementations in other crates (aka, can't ensure that the implementation is 'coherent'). Being able to do it is definitely useful sometimes, but it was unfortunately a bug that the compiler accepted it before.</p>\n\n<p>Solutions include:</p>\n\n<ul>\n<li>defining a proper wrapper type for <code>Result</code>, e.g. <code>struct MyResult(Result&lt;MyLocalType, String&gt;);</code>,</li>\n<li>defining your own enum: <code>enum MyResult { Ok(MyType), Err(String) }</code>,</li>\n<li>define a wrapper type, but only use it when printing, i.e. write <code>println!(\"{}\", Wrapper(r));</code> instead of <code>println!(\"{}\", r);</code>.</li>\n</ul>\n\n<p>Both of these make <code>MyResult</code> a local type, and so the <code>impl</code> then should be legal.</p>\n"}], "owner": {"reputation": 63, "user_id": 4814060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e52223e374bf4e0ca47c6fa10b02205b?s=128&d=identicon&r=PG&f=1", "display_name": "pavlov-dmitry", "link": "https://stackoverflow.com/users/4814060/pavlov-dmitry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3107, "favorite_count": 2, "accepted_answer_id": 29790091, "answer_count": 1, "score": 6, "last_activity_date": 1429708993, "creation_date": 1429685533, "last_edit_date": 1429708993, "question_id": 29789877, "link": "https://stackoverflow.com/questions/29789877/can-not-implement-trait-from-another-crate-for-generic-type-from-another-crate-p", "title": "Can not implement trait from another crate for generic type from another crate parameterized with local type", "body": "<p>This test code (<a href=\"http://is.gd/oX7GWN\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>use std::fmt::{Display, Formatter, Error};\n\nstruct MyLocalType;\n\ntype MyResult = Result&lt;MyLocalType, String&gt;;\n\nimpl Display for MyResult {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result&lt;(), Error&gt; {\n        f.write_str(\"some test string\")\n    }\n}\n\nfn main() { \n    let r: MyResult = Ok(MyLocalType); \n    println!(\"{}\" , r); \n}\n</code></pre>\n\n<p>Produces this error message:</p>\n\n<pre><code>&lt;anon&gt;:7:1: 11:2 error: the impl does not reference any types defined in this crate; only traits defined in the current crate can be implemented for arbitrary types [E0117]\n&lt;anon&gt;:7 impl Display for MyResult {\n&lt;anon&gt;:8     fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result&lt;(), Error&gt; {\n&lt;anon&gt;:9         f.write_str(\"some test string\")\n&lt;anon&gt;:10     }\n&lt;anon&gt;:11 }\n</code></pre>\n\n<p>This code successfully compiled in the January version of Rust; how can I implement it now?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1429657473, "post_id": 29784502, "comment_id": 47699303, "body": "A point on standard terminology: <code>Vec&lt;T&gt;</code>: vector; <code>[T]</code>: slice; <code>[T; N]</code>: array."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1429657644, "post_id": 29784502, "comment_id": 47699357, "body": "To go from a slice (or an array as a slice) to a <code>Vec</code>, use <a href=\"http://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>From</code></a>: <code>let z: Vec&lt;_&gt; = From::from(&amp;array[..])</code>"}, {"owner": {"reputation": 48909, "user_id": 1445334, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/185bc1a9b6a36d8f065bdb9a1de74f90?s=128&d=identicon&r=PG", "display_name": "dirvine", "link": "https://stackoverflow.com/users/1445334/dirvine"}, "edited": false, "score": 0, "creation_date": 1429659268, "post_id": 29784502, "comment_id": 47699910, "body": "Thanks both of you for the input. much appreciated."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 11, "last_activity_date": 1429657420, "creation_date": 1429657420, "answer_id": 29784723, "question_id": 29784502, "link": "https://stackoverflow.com/questions/29784502/convert-vectors-to-arrays-and-back/29784723#29784723", "title": "Convert vectors to arrays and back", "body": "<p>The code seems fine to me, although there's a very important safety thing to note: there can be no panics while <code>arr</code> isn't fully initialised. Running destructors on uninitialised memory could easily lead be undefined behaviour, and, in particular, this means that <code>into_iter</code> and the <code>next</code> method of it should never panic (I believe it is impossible for the <code>enumerate</code> and <code>mem::*</code> parts of the iterator to panic given the constraints of the code).</p>\n\n<p>That said, one can express the <code>replace</code>/<code>forget</code> idiom with a single function: <a href=\"http://doc.rust-lang.org/nightly/std/ptr/fn.write.html\"><code>std::ptr::write</code></a>.</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>for (idx, element) in $container.into_iter().enumerate() {\n    ptr::write(&amp;mut arr[idx], element);\n}\n</code></pre>\n\n<p>Although, I would write it as:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for (place, element) in arr.iter_mut().zip($container.into_iter()) {\n    ptr::write(place, element);\n}\n</code></pre>\n\n<p>Similarly, one can apply some iterator goodness to the <code>u8</code> specialised versions:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn array_to_vec(arr: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n     arr.iter().cloned().collect()\n}\nfn vector_as_u8_4_array(vector: Vec&lt;u8&gt;) -&gt; [u8;4] {\n    let mut arr = [0u8;4];\n    for (place, element) in arr.iter_mut().zip(vector.iter()) {\n        *place = *element;\n    }\n    arr\n}\n</code></pre>\n\n<p>Although the first is probably better written as <a href=\"http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.to_vec\"><code>arr.to_vec()</code></a>, and the second as</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut arr = [0u8; 4];\nstd::slice::bytes::copy_memory(&amp;vector, &amp;mut arr);\narr\n</code></pre>\n\n<p>Although <a href=\"http://doc.rust-lang.org/nightly/std/slice/bytes/fn.copy_memory.html\">that function</a> is unstable currently, and hence only usable on nightly.</p>\n"}], "owner": {"reputation": 48909, "user_id": 1445334, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/185bc1a9b6a36d8f065bdb9a1de74f90?s=128&d=identicon&r=PG", "display_name": "dirvine", "link": "https://stackoverflow.com/users/1445334/dirvine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 20133, "favorite_count": 0, "closed_date": 1429658760, "accepted_answer_id": 29784723, "answer_count": 1, "score": 13, "last_activity_date": 1429657730, "creation_date": 1429656241, "last_edit_date": 1429657730, "question_id": 29784502, "link": "https://stackoverflow.com/questions/29784502/convert-vectors-to-arrays-and-back", "closed_reason": "Duplicate", "title": "Convert vectors to arrays and back", "body": "<p>I am attempting to figure the most Rust-like way of converting from a vector to array and back. These macros will work and can even be made generic with some unsafe blocks, but it all feels very un-Rust like.</p>\n\n<p>I would appreciate any input and hold no punches, I think this code is far from nice or optimal. I have only played with Rust for a few weeks now and chasing releases and docs so really appreciate help.</p>\n\n<pre><code>macro_rules! convert_u8vec_to_array {\n    ($container:ident, $size:expr) =&gt; {{\n    if $container.len() != $size {\n            None\n    } else {\n        use std::mem;\n        let mut arr : [_; $size] = unsafe { mem::uninitialized() };\n        for element in $container.into_iter().enumerate() {\n            let old_val = mem::replace(&amp;mut arr[element.0],element.1);\n            unsafe { mem::forget(old_val) };\n        }\n        Some(arr)\n        }\n    }};\n}\n\nfn array_to_vec(arr: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n     let mut vector = Vec::new();\n     for i in arr.iter() {\n         vector.push(*i);\n     }\n     vector\n}\n\nfn vector_as_u8_4_array(vector: Vec&lt;u8&gt;) -&gt; [u8;4] {\n    let mut arr = [0u8;4];\n    for i in (0..4) {\n        arr[i] = vector[i];\n    }\n    arr\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1429657792, "post_id": 29781331, "comment_id": 47699413, "body": "<code>description</code> is supposed to be a description of the error not going into details; <code>fmt::Display</code> is supposed to be there to augment it with details as desired."}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1429672709, "post_id": 29781331, "comment_id": 47703787, "body": "@ChrisMorgan I&#39;m coming from Go as the most recent language I played with and I mistakenly assumed the description method was similar to Go&#39;s Error method. Thanks for the info!"}], "answers": [{"comments": [{"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429647247, "post_id": 29782049, "comment_id": 47694382, "body": "I think the second option will suit me best. Which leads me to ask a semi-related question - are <code>String</code> and <code>&amp;str</code> interchangeable? Or, I suppose <code>String</code> and <code>str</code> in this case, other wise you&#39;d be returning a borrowed <code>&amp;str</code>. I have a poor understanding of the exact difference between <code>String</code> and <code>&amp;str</code> other than when they occur (such as, I know the type of string literals and when building strings more complex than simple formatting I use <code>String</code>) and when to (slightly) choose between them."}, {"owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "reply_to_user": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429648383, "post_id": 29782049, "comment_id": 47694983, "body": "They are not interchangeable. A <code>String</code> owns its UTF-8 bytes, whereas a <code>&amp;str</code> merely points to UTF-8 bytes borrowed from somewhere. <code>String</code> and <code>&amp;str</code> are analogous to <code>Vec&lt;T&gt;</code> and <code>&amp;[T]</code>. You can borrow a <code>String</code> to obtain a <code>&amp;str</code>. In that case, the borrowed slice cannot outlive the owning <code>String</code>. There is <a href=\"http://doc.rust-lang.org/1.0.0-beta.2/book/strings.html\" rel=\"nofollow noreferrer\">a chapter about strings in the book</a>, which may be useful."}, {"owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "edited": false, "score": 0, "creation_date": 1429648585, "post_id": 29782049, "comment_id": 47695097, "body": "I&#39;ve been through the book, what you said makes more sense than what I recall. Perhaps I just hadn&#39;t gotten enough of an understanding of the language to grasp that section. Thanks for info, it&#39;s been a great help."}, {"owner": {"reputation": 5338, "user_id": 4594973, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/USV9e.jpg?s=128&g=1", "display_name": "code_dredd", "link": "https://stackoverflow.com/users/4594973/code-dredd"}, "edited": false, "score": 0, "creation_date": 1567365640, "post_id": 29782049, "comment_id": 101935047, "body": "In your example you show a few notations. What&#39;s the semantic difference between <code>&amp;&#39;a</code> and <code>&amp;&#39;static</code>? I get that <code>&amp;&#39;static</code> is a lifetime that lasts for the lifetime of the whole program, but I&#39;m not sure what <code>&amp;&#39;a</code> means. What other <code>&amp;&#39;&lt;something&gt;</code> are available, if any?"}, {"owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "edited": false, "score": 2, "creation_date": 1567414000, "post_id": 29782049, "comment_id": 101944444, "body": "The <code>&#39;a</code> comes from the <code>&lt;&#39;a&gt;</code> lifetime parameter. In addition to type parameters, methods in Rust can have lifetime parameters. So <code>fn description&lt;&#39;a&gt;(&amp;&#39;a self) -&gt; &amp;&#39;a str</code> means: for every lifetime <code>&#39;a</code>, if you lend out <code>self</code> for <code>&#39;a</code>, you get back a <code>&amp;str</code> that is valid for <code>&#39;a</code>."}], "tags": [], "owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "is_accepted": true, "score": 20, "last_activity_date": 1429646666, "creation_date": 1429646666, "answer_id": 29782049, "question_id": 29781331, "link": "https://stackoverflow.com/questions/29781331/why-cant-i-return-an-str-value-generated-from-a-string/29782049#29782049", "title": "Why can&#39;t I return an &amp;str value generated from a String?", "body": "<p>First, let\u2019s take a look at what lifetime is actually expected. There is an implicit lifetime in the signature of <code>description</code>:</p>\n\n<pre><code>fn description(&amp;self) -&gt; &amp;str\n// Can be rewritten as\nfn description&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a str\n</code></pre>\n\n<p>The returned pointer must be valid for at least as long as <code>self</code>. Now consider <code>s</code>. It will hold a <code>String</code>, an owned string, and it goes out of scope at the end of the function. It would be invalid to return <code>&amp;s</code>, because <code>s</code> is gone when the function returns. <code>trim</code> returns a string slice that borrows <code>s</code>, but the slice is again only valid for as long as <code>s</code> is.</p>\n\n<p>You need to return a string slice that outlives the method call, so this rules out anything on the stack. If you were free to choose the return type, a solution would be to move the string out of the function. For that an owned string would be required, and then the return type would be <code>String</code>, not <code>&amp;str</code>. Unfortunately, you are not free to choose the return type here.</p>\n\n<p>To return a string slice that outlives the method call, I see two options:</p>\n\n<ol>\n<li><p>Use a <code>&amp;'static</code> string slice. This will certainly outlive the call, but it requires that the string be known at compile time. String literals have type <code>&amp;'static str</code>. This is a suitable option if the description does not contain any dynamic data.</p></li>\n<li><p>Store an owned string in <code>LexicalError</code> itself. This ensures that you can return a pointer to it that is valid for the entire lifetime of <code>self</code>. You can add a field <code>desc: String</code> to <code>LexicalError</code> and do the formatting when the error is constructed. Then the method would be implemented as</p>\n\n<pre><code>fn description(&amp;self) -&gt; &amp;str {\n    &amp;self.desc\n}\n</code></pre>\n\n<p>For re-use, you can make <code>Display</code> write the same string.</p></li>\n</ol>\n\n<p>According to the <a href=\"http://doc.rust-lang.org/std/error/index.html\">documentation of <code>Error</code></a>, <code>Display</code> may be used to provide additional detail. If you wish to include dynamic data in the error, then <code>Display</code> is a great place to format it, but you can omit it for <code>description</code>. This would allow the first approach to be used.</p>\n"}], "owner": {"reputation": 6966, "user_id": 445322, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1d76639525a17531e9275fdf49e28c20?s=128&d=identicon&r=PG", "display_name": "Brandon Buck", "link": "https://stackoverflow.com/users/445322/brandon-buck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3411, "favorite_count": 1, "accepted_answer_id": 29782049, "answer_count": 1, "score": 16, "last_activity_date": 1429649124, "creation_date": 1429644245, "last_edit_date": 1429649124, "question_id": 29781331, "link": "https://stackoverflow.com/questions/29781331/why-cant-i-return-an-str-value-generated-from-a-string", "title": "Why can&#39;t I return an &amp;str value generated from a String?", "body": "<p>I'm having some trouble trying to grasp why I can't return an <code>&amp;str</code> value generated from a <code>String</code> (goodness, when will <code>as_str</code> be ready?) and I'm doing something wrong. I get this idea because nothing that I do makes the value live long enough to use.</p>\n\n<p>I'm trying to implement <code>error::Error</code> for a custom struct:</p>\n\n<pre><code>impl error::Error for LexicalError {\n    fn description(&amp;self) -&gt; &amp;str {\n        let s = format!(\"{}\", self);\n\n        // s doesn't live long enough to do this, I've tried \n        // cloning s and using that, but still the clone doesn't\n        // live long enough.\n        s.trim()\n    }\n\n    fn cause(&amp;self) -&gt; Option&lt;&amp;error::Error&gt; {\n        None\n    }\n}\n</code></pre>\n\n<p>(for the complete snippet, here is the <a href=\"http://is.gd/i9OM9L\" rel=\"noreferrer\">playpen</a>)</p>\n\n<p>I can't figure out how to return an &amp;str from <code>description</code>, I'd like to reuse the <code>Display</code> logic, unless of course I'm completely misunderstanding what <code>description</code> should be returning (perhaps the short description of the issue). Either, I get the same issue with the return of <code>format!(...)</code> which is a variable I can't seem to get to live long enough to be useful to me.</p>\n"}, {"tags": ["windows", "gcc", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 2026, "user_id": 4992, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b4deb57b49feda333618069ca1cfb390?s=128&d=identicon&r=PG", "display_name": "Claes Mogren", "link": "https://stackoverflow.com/users/4992/claes-mogren"}, "edited": false, "score": 0, "creation_date": 1429614389, "post_id": 29770276, "comment_id": 47671336, "body": "Do you have gcc on the path? It asks &quot;is <code>gcc</code> not installed?&quot;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429626497, "post_id": 29770276, "comment_id": 47680550, "body": "<i>Stack Overflow does not allow me to post images yet</i> \u2014 that&#39;s a good thing; you <b>shouldn&#39;t</b> post images of text! Text is searchable and far easier to read! However, you may want to double check the output. It looks like some lines are duplicates. Perhaps something went wrong when copying?"}, {"owner": {"reputation": 47, "user_id": 3058768, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KvdZC.jpg?s=128&g=1", "display_name": "J2RGEZ", "link": "https://stackoverflow.com/users/3058768/j2rgez"}, "edited": false, "score": 0, "creation_date": 1429627812, "post_id": 29770276, "comment_id": 47681570, "body": "No, it is not duplicate I think, look at the output here: <a href=\"http://es.tinypic.com/r/2r5t3dg/8\" rel=\"nofollow noreferrer\">es.tinypic.com/r/2r5t3dg/8</a>"}], "answers": [{"comments": [{"owner": {"reputation": 47, "user_id": 3058768, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KvdZC.jpg?s=128&g=1", "display_name": "J2RGEZ", "link": "https://stackoverflow.com/users/3058768/j2rgez"}, "edited": false, "score": 0, "creation_date": 1429628539, "post_id": 29771591, "comment_id": 47682196, "body": "It is called &quot;gcc&quot; on &quot;C:\\MinGW\\bin&quot;, so I&#39;m not sure where is the problem. I have been programming on C for a while and It works, so I think that is not the problem."}, {"owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "reply_to_user": {"reputation": 47, "user_id": 3058768, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KvdZC.jpg?s=128&g=1", "display_name": "J2RGEZ", "link": "https://stackoverflow.com/users/3058768/j2rgez"}, "edited": false, "score": 0, "creation_date": 1429634704, "post_id": 29771591, "comment_id": 47686776, "body": "If you run <code>where gcc</code> in a <code>cmd</code> prompt, does it print <code>C:\\MinGW\\bin\\gcc.exe</code>?"}, {"owner": {"reputation": 47, "user_id": 3058768, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KvdZC.jpg?s=128&g=1", "display_name": "J2RGEZ", "link": "https://stackoverflow.com/users/3058768/j2rgez"}, "edited": false, "score": 0, "creation_date": 1429644270, "post_id": 29771591, "comment_id": 47692689, "body": "The problem was gcc at the end and I installed win-build to this. Thank you!"}], "tags": [], "owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "is_accepted": true, "score": 3, "last_activity_date": 1429617454, "creation_date": 1429617454, "answer_id": 29771591, "question_id": 29770276, "link": "https://stackoverflow.com/questions/29770276/unable-to-compile-the-nn-library-is-gcc-not-installed/29771591#29771591", "title": "Unable to compile the nn library - is gcc not installed?", "body": "<p>The crate you are trying to compile (<code>time</code>, a dependency of <code>nn</code>) includes a custom build script to compile non-Rust code. This requires GCC, which appears to be unavailable, and compilation fails. Crates that consist of Rust code only will compile fine.</p>\n\n<p>The binaries installed by MinGW sometimes have different names than <code>gcc</code>, so even if they are installed and in your <code>PATH</code>, there might not be a binary called <code>gcc</code>. I am using <code>gcc</code> from the <a href=\"http://sourceforge.net/projects/mingwbuilds/\" rel=\"nofollow\">MinGW-builds project</a>, which does provide a <code>gcc</code> executable.</p>\n"}], "owner": {"reputation": 47, "user_id": 3058768, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/KvdZC.jpg?s=128&g=1", "display_name": "J2RGEZ", "link": "https://stackoverflow.com/users/3058768/j2rgez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 385, "favorite_count": 1, "accepted_answer_id": 29771591, "answer_count": 1, "score": 2, "last_activity_date": 1429626439, "creation_date": 1429613911, "last_edit_date": 1429626439, "question_id": 29770276, "link": "https://stackoverflow.com/questions/29770276/unable-to-compile-the-nn-library-is-gcc-not-installed", "title": "Unable to compile the nn library - is gcc not installed?", "body": "<p>I am trying to make a neuronal network project using <a href=\"https://crates.io/crates/nn\" rel=\"nofollow\">nn</a> and I think I am using it correctly.</p>\n\n<p>My problem started when I tried to compile with <code>cargo</code>. I don't know if this is a Windows problem or what, but my friend can compile perfectly with the same OS. Here's the error I get on both of my computers:</p>\n\n<pre><code>C:\\Users\\juanr_000\\Desktop\\red_neuronal&gt;cargo run\n\nCompiling time v0.1.24 \nfailed to run custom build command for `time v0.1.24`\n\nProcess didn't exit successfully: C:\\Users\\juanr_000\\Desktop\\red_neuronal\\target\\debug\\build\\time-72cc226455b1c02b\\build-script-build` (exit code: 101)\n\n--- stdout\nTARGET = Some(\"i686-pc-windows-gnu\")\n\nCARGO_MANIFEST_DIR = Some(\"C:\\\\Users\\\\juanr_000\\\\.cargo\\\\registry\\\\src\\\\github.com-1285ae84e5963aae\\\\time-0.1.24\")\n\nOUT_DIR = Some(\"C:\\\\Users\\\\juanr_000\\\\Desktop\\\\red_neuronal\\\\target\\\\debug\\\\build\\\\time-72cc226455b1c02b\\\\out\")\n\nTARGET = Some(\"i686-pc-windows-gnu\")\nOPT_LEVEL = Some(\"0\")\nPROFILE = Some(\"debug\")\ndebug 0\nTARGET = Some(\"i686-pc-windows-gnu\")\n\nHOST = Some(\"i686-pc-windows-gnu\")\n\nCC_i686-pc-windows-gnu = None\n\nCC_i686_pc_windows_gnu = None\n\nHOST_CC = None\n\nCC = None\n\nTARGET = Some(\"i686-pc-windows-gnu\")\n\nHOST = Some(\"i686-pc-windows-gnu\")\n\nCFLAGS_i686-pc-windows-gnu = None\n\nCFLAGS_i686_pc_windows_gnu = None\n\nHOST_CFLAGS = None\n\nCFLAGS = None\n\nTARGET = Some(\"i686-pc-windows-gnu\")\n\nHOST = Some(\"i686-pc-windows-gnu\")\n\nCC_i686-pc-windows-gnu = None\n\nCC_i686_pc_windows_gnu = None\n\nHOST_CC = None\n\nCC = None\n\nrunning: \"gcc\" \"-O0\" \"-c\" \"-ffunction-sections\" \"-fdata-sections\" \"-mwin32\" \"-m32\" \"C:\\Users\\juanr_000\\.cargo\\registry\\src\\github.com-1285ae84e5963aae\\time0.1.24\\src/time_helpers.c\" \"-o\" \"C:\\Users\\juanr_000\\Desktop\\red_neuronal\\target\\debug\\build\\time-72cc226455b1c02b\\out\\src\\time_helpers.o\" \n\nfailed to execute command: El sistema no puede encontrar el archivo especificado\n.\n(os error 2)\nis `gcc` not installed?\n\n--- stderr\nthread '&lt;main&gt;' panicked at 'explicit panic', C:\\Users\\juanr_000\\.cargo\\registry\\src\\github.com-1285ae84e5963aae\\gcc-0.3.4\\src\\lib.rs:380\n</code></pre>\n\n<p>I changed the <code>Cargo.toml</code>, and I think other packages downloaded and installed correctly. It could be a gcc problem, but I have an up-to-date mingw installed and in my path.</p>\n\n<p>Sorry for that pasted \"code\", Stack Overflow does not allow me to post images yet. Sorry for my English too!</p>\n"}, {"tags": ["windows", "console", "rust"], "answers": [{"comments": [{"owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "edited": false, "score": 0, "creation_date": 1429609411, "post_id": 29764309, "comment_id": 47667740, "body": "Thank you for such helpful answer. I will wait for several hours for other answers and accept your if nothing better does not emerge :)"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "edited": false, "score": 1, "creation_date": 1429614681, "post_id": 29764309, "comment_id": 47671510, "body": "Sure, I&#39;ll be happy to learn of a batter solution even if it takes three years."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1429674079, "post_id": 29764309, "comment_id": 47704100, "body": "@ArtemGr <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms683175%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\"><code>GetConsoleWindow</code></a> returns a handle to the console window."}, {"owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1429711086, "post_id": 29764309, "comment_id": 47727791, "body": "@FrancisGagn&#233; and ArtemGr you both rock! I&#39;ve tried the later solution with GetConsoleWindow - it works as expected. Waiting for the option to disable creation of console window at all..."}, {"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 0, "creation_date": 1430290553, "post_id": 29764309, "comment_id": 47994489, "body": "If you launch the program from cmd or powershell, then calling GetConsoleWindow() and ShowWindow(SW_HIDE) make the console window disappear (but not exit). Perhaps it is better to call FreeConsole() instead."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 0, "creation_date": 1430456791, "post_id": 29764309, "comment_id": 48083158, "body": "@yonran Nice catch. Isn&#39;t always the right thing to do, though, so I mention both."}, {"owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "edited": false, "score": 0, "creation_date": 1450357576, "post_id": 29764309, "comment_id": 56411835, "body": "I&#39;ve found a solution. Check my answer below."}, {"owner": {"reputation": 349, "user_id": 6336988, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4af92b77ea977b9f3eb75cbbe009138e?s=128&d=identicon&r=PG&f=1", "display_name": "NyxMC", "link": "https://stackoverflow.com/users/6336988/nyxmc"}, "edited": false, "score": 4, "creation_date": 1535419221, "post_id": 29764309, "comment_id": 91048435, "body": "This seems to completely disable console output so that running the executable from a command line doesn&#39;t yield in any output. I used <code>#![cfg_attr(not(debug_assertions), windows_subsystem = &quot;windows&quot;)]</code> to only disable the console when compiling with <code>--release</code>"}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 37, "last_activity_date": 1600890593, "last_edit_date": 1600890593, "creation_date": 1429596926, "answer_id": 29764309, "question_id": 29763647, "link": "https://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window/29764309#29764309", "title": "How to make a program that does not display the console window?", "body": "<p><a href=\"https://blog.rust-lang.org/2017/06/08/Rust-1.18.html\" rel=\"noreferrer\">Rust 1.18</a> introduced a Windows Subsystem attribute. Turn off the console with:</p>\n<pre><code>#![windows_subsystem = &quot;windows&quot;]\n</code></pre>\n<hr />\n<p>The Rust binaries are linked with the GCC toolchain. To start a program without spawning a command line window, you need to <a href=\"https://gcc.gnu.org/ml/gcc-help/2004-01/msg00225.html\" rel=\"noreferrer\">pass the <code>-mwindows</code> option to the linker</a>.</p>\n<p>Cargo <a href=\"https://github.com/rust-lang/cargo/issues/595\" rel=\"noreferrer\">has a <code>cargo rustc</code> mode</a> which can be used to pass extra flags to <code>rustc</code>. Before that was introduced, <a href=\"https://github.com/rust-lang/cargo/issues/544\" rel=\"noreferrer\">there was no known way to pass an option to the compiler with Cargo</a>.</p>\n<p>In these cases, one workaround is to hide the window after it has been created:</p>\n<pre><code>fn hide_console_window() {\n    use std::ptr;\n    use winapi::um::wincon::GetConsoleWindow;\n    use winapi::um::winuser::{ShowWindow, SW_HIDE};\n\n    let window = unsafe {GetConsoleWindow()};\n    // https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow\n    if window != ptr::null_mut() {\n        unsafe {\n            ShowWindow(window, SW_HIDE);\n        }\n    }\n}\n</code></pre>\n<p>You'll need the following in your Cargo.toml to compile it:</p>\n<pre><code>[dependencies]\nwinapi = {version = &quot;0.3&quot;, features = [&quot;wincon&quot;, &quot;winuser&quot;]}\n</code></pre>\n<p>To make running it from an existing console or IDE possible:</p>\n<pre><code>fn hide_console_window() {\n    unsafe { winapi::um::wincon::FreeConsole() };\n}\n</code></pre>\n<p>This second method doesn't work for me because I'm starting my application from a batch file. You see, the batch still owns the console so it keeps its appearance on the screen.</p>\n"}, {"comments": [{"owner": {"reputation": 1407, "user_id": 4930992, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/108ce448671bef8443fcd64efb3012fa?s=128&d=identicon&r=PG&f=1", "display_name": "Christopher Armstrong", "link": "https://stackoverflow.com/users/4930992/christopher-armstrong"}, "edited": false, "score": 0, "creation_date": 1481357338, "post_id": 34335140, "comment_id": 69353578, "body": "This answer only applies if you are using GCC, not the MSVC toolchain. Please see GhotiPhud&#39;s answer below if you&#39;re using the MSVC toolchain."}], "tags": [], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "is_accepted": false, "score": 8, "last_activity_date": 1481990646, "last_edit_date": 1481990646, "creation_date": 1450356927, "answer_id": 34335140, "question_id": 29763647, "link": "https://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window/34335140#34335140", "title": "How to make a program that does not display the console window?", "body": "<p>After some time I've found a perfect answer!\nCargo now has very useful subcommand - <code>rustc</code>.</p>\n\n<p>The full build command is like this:</p>\n\n<pre><code>cargo rustc -- -Clink-args=\"-Wl,--subsystem,windows\"\n</code></pre>\n\n<p>Now we can build debug builds with regular <code>cargo build</code>, and when we need to make a final build we can use this command:</p>\n\n<pre><code>cargo rustc --release -- -Clink-args=\"-Wl,--subsystem,windows\"\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 786, "user_id": 600743, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/db4de988638e785cf3cd568f05214433?s=128&d=identicon&r=PG", "display_name": "GhotiPhud", "link": "https://stackoverflow.com/users/600743/ghotiphud"}, "is_accepted": false, "score": 10, "last_activity_date": 1471893570, "creation_date": 1471893570, "answer_id": 39087185, "question_id": 29763647, "link": "https://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window/39087185#39087185", "title": "How to make a program that does not display the console window?", "body": "<p>Adding to Roman Quick's answer if you're using the MSVC toolchain you'll want to pass MSVC linker args instead.</p>\n\n<pre><code>cargo rustc --release -- -Clink-args=\"/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478354905, "post_id": 40424622, "comment_id": 68125348, "body": "This is already mentioned in the <a href=\"http://stackoverflow.com/a/29764309/155423\">top answer</a>."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478357836, "post_id": 40424622, "comment_id": 68126198, "body": "Ah! I missed it"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 12, "last_activity_date": 1478268047, "creation_date": 1478268047, "answer_id": 40424622, "question_id": 29763647, "link": "https://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window/40424622#40424622", "title": "How to make a program that does not display the console window?", "body": "<p>Soon, <a href=\"https://github.com/rust-lang/rust/pull/37501\" rel=\"noreferrer\">https://github.com/rust-lang/rust/pull/37501</a> will land, which is an implementation of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1665-windows-subsystem.md\" rel=\"noreferrer\">RFC 1665</a> and the correct answer will be</p>\n\n<pre><code>#![windows_subsystem = \"windows\"]\n</code></pre>\n\n<p>in your crate root.</p>\n"}], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8553, "favorite_count": 12, "accepted_answer_id": 29764309, "answer_count": 4, "score": 28, "last_activity_date": 1600890593, "creation_date": 1429594016, "last_edit_date": 1429626019, "question_id": 29763647, "link": "https://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window", "title": "How to make a program that does not display the console window?", "body": "<p>I'm trying to develop a program that uses the sdl2 library. It works perfectly so far, but when I run the program I get two windows - the sdl2 window and the console window.</p>\n\n<p>How can I hide or not create the console window? Maybe there is some sort of <code>WinMain</code>?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429625616, "post_id": 29762297, "comment_id": 47679785, "body": "Unfortunately it seems the <code>skip</code> call doesn&#39;t optimise quite so well when the <code>skip</code> amount isn&#39;t a constant. :("}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1429587234, "last_edit_date": 1429587234, "creation_date": 1429586378, "answer_id": 29762297, "question_id": 29762162, "link": "https://stackoverflow.com/questions/29762162/can-a-slice-iterator-be-advanced-more-than-one-element-in-constant-time/29762297#29762297", "title": "Can a slice iterator be advanced more than one element in constant time?", "body": "<p>There is nothing that makes this possible in the library, but sometimes the unstable <a href=\"http://doc.rust-lang.org/std/iter/trait.RandomAccessIterator.html#tymethod.idx\" rel=\"nofollow\"><code>RandomAccessIterator.idx</code></a> trait method may do what you want.</p>\n\n<p>Examining the assembly code produced indicates that the compiler can optimise at least some skips from O(n) down to O(1). As a trivial example, given <code>x: &amp;[u32]</code>, <code>*x.iter().skip(5).next().unwrap()</code> and <code>x[5]</code> produce the same assembly code. I\u2019m not sure how thorough it will be in optimising skips, but it will definitely not be shabby. That\u2019s one of the nice ideas of optimising compilers: such specialisations as you seek can be implemented in the compiler rather than in the code, which will normally help you to avoid missing an optimisation where it can be done, but (because they\u2019re not perfect) can occasionally cause a missed optimisation which you expect to happen.</p>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1429719135, "post_id": 29775139, "comment_id": 47734381, "body": "I compiled &amp; tested that Skip optimization a bit back but then I realized <code>IteratorExt</code> was going to happen, so I never sumitted it. We are now back with Iterator and it&#39;s possible again.."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 6, "last_activity_date": 1429670603, "last_edit_date": 1429670603, "creation_date": 1429626533, "answer_id": 29775139, "question_id": 29762162, "link": "https://stackoverflow.com/questions/29762162/can-a-slice-iterator-be-advanced-more-than-one-element-in-constant-time/29775139#29775139", "title": "Can a slice iterator be advanced more than one element in constant time?", "body": "<p>There's no fast-forward built-in to <code>std</code> yet.</p>\n\n<p>As Chris demonstrates, it can be implemented with <code>skip</code> and this sometimes optimises to O(1). Unfortunately, the optimisation doesn't always happen, my experimentation found that a function like</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn foo(xs: &amp;[u32], x: usize) -&gt; u32 {\n    *xs.iter().skip(x).next().unwrap()\n}\n</code></pre>\n\n<p>optimises (opt-level 3) to</p>\n\n<pre class=\"lang-asm prettyprint-override\"><code>.LBB6_2:\n    pushq   %rax\n.Ltmp10:\n    .cfi_def_cfa_offset 16\n    movq    (%rdi), %rdx\n    movq    8(%rdi), %rdi\n    xorl    %eax, %eax\n    testq   %rdi, %rdi\n    movq    %rdx, %rcx\n    je  .LBB6_4\n    leaq    4(%rdx), %rcx\n    movq    %rdx, %rax\n.LBB6_4:\n    testq   %rsi, %rsi\n    je  .LBB6_9\n    leaq    (%rdx,%rdi,4), %rdx\n    .align  16, 0x90\n.LBB6_6:\n    testq   %rax, %rax\n    je  .LBB6_12\n    decq    %rsi\n    cmpq    %rdx, %rcx\n    movq    %rdx, %rdi\n    movl    $0, %eax\n    je  .LBB6_8\n    leaq    4(%rcx), %rdi\n    movq    %rcx, %rax\n.LBB6_8:\n    testq   %rsi, %rsi\n    movq    %rdi, %rcx\n    jne .LBB6_6\n.LBB6_9:\n    testq   %rax, %rax\n    je  .LBB6_12\n    movl    (%rax), %eax\n    popq    %rdx\n    retq\n.LBB6_12:\n    movq    _ZN6option15Option$LT$T$GT$6unwrap14_MSG_FILE_LINE20ha41302a4e895de223qFE@GOTPCREL(%rip), %rdi\n    callq   _ZN9panicking5panic20h90c2ad20c9dac62bKRCE@PLT\n</code></pre>\n\n<p>Of particular note is the <code>.LBB6_6:</code> ... <code>jne   .LBB6_6</code> sequence: it's a loop.</p>\n\n<p>Fortunately there's a at least one way out of this, and it has an additional useful property: it doesn't require changing the type, and so can be used directly in place.</p>\n\n<p>The slice iterator can be converted back into the slice it represents with <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html#method.as_slice\" rel=\"nofollow\"><code>as_slice</code></a>: <code>Iter&lt;T&gt;</code> and <code>&amp;[T]</code> are actually isomorphic, they differ mainly because for optimisations reasons. Once we have the slice, we can slice and dice it to obtain a shorter region of memory, and then create an iterator over only those elements. The lifetimes all work out, and we're left with exactly the same type just without a few elements.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::slice::Iter;\nuse std::cmp;\n\npub fn skip(iter: &amp;mut Iter&lt;u32&gt;, x: usize) {\n    let s = iter.as_slice();\n    *iter = s[cmp::min(x, s.len())..].iter();\n}\n</code></pre>\n\n<p>Used like <code>skip(&amp;mut some_iter, 10)</code>.</p>\n\n<p>The <code>min</code> call is to replicate the behaviour of <code>Iterator::skip</code> and to avoid panics (skipping more elements than the iterator contains will just result in the 'return' value being empty).</p>\n\n<p>To see it in practice, consider <code>foo</code> converted to use the new <code>skip</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn foo(xs: &amp;[u32], x: usize) -&gt; u32 {\n    let mut iter = xs.iter();\n    skip(&amp;mut iter, x);\n    *iter.next().unwrap()\n}\n</code></pre>\n\n<p>It optimises to:</p>\n\n<pre class=\"lang-asm prettyprint-override\"><code>.LBB7_2:\n    pushq   %rax\n.Ltmp12:\n    .cfi_def_cfa_offset 16\n    movq    8(%rdi), %rax\n    cmpq    %rsi, %rax\n    cmovbq  %rax, %rsi\n    cmpq    %rax, %rsi\n    je  .LBB7_4\n    movq    (%rdi), %rax\n    movl    (%rax,%rsi,4), %eax\n    popq    %rdx\n    retq\n.LBB7_4:\n    movq    _ZN6option15Option$LT$T$GT$6unwrap14_MSG_FILE_LINE20ha41302a4e895de223qFE@GOTPCREL(%rip), %rdi\n    callq   _ZN9panicking5panic20h90c2ad20c9dac62bKRCE@PLT\n</code></pre>\n\n<p>Notably, no loops. It's not <em>quite</em> as short as the <code>xs[x]</code> implementation (asm below, for reference), but it's pretty close (2 extra instructions).</p>\n\n<pre class=\"lang-asm prettyprint-override\"><code>.LBB5_2:\n    pushq   %rax\n.Ltmp8:\n    .cfi_def_cfa_offset 16\n    movq    8(%rdi), %rdx\n    cmpq    %rsi, %rdx\n    jbe .LBB5_4\n    movq    (%rdi), %rax\n    movl    (%rax,%rsi,4), %eax\n    popq    %rdx\n    retq\n.LBB5_4:\n    leaq    panic_bounds_check_loc1464(%rip), %rdi\n    callq   _ZN9panicking18panic_bounds_check20h5ef74c98f9f69401jSCE@PLT\n</code></pre>\n\n<p>(In fact, I'd almost consider the difference an LLVM bug: it seems like it could do much a better job with the two <code>cmp</code>s and a <code>cmovbq</code>.)</p>\n\n<p>It is nice that it optimises pretty well, but, as the problem with the <code>Iterator::skip</code> method demonstrates, this can't be relied on. However, the <code>as_slice</code> approach is O(1) regardless of optimisation level.</p>\n\n<hr>\n\n<p>I suspect <code>slice::Iter</code> could override the <code>skip</code> method to do a fast-forward, and then return <code>Skip { iter: self, n: 0 }</code>, thus guaranteeing that <code>skip</code> on <code>Iter</code> is actually efficient. But this (like the above) feels like a bit of a hack, <em>and</em>, still causes the type to change so can't be used in-place.</p>\n"}], "owner": {"reputation": 961, "user_id": 1007956, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/080676ab98801245890060fe3b82ef80?s=128&d=identicon&r=PG", "display_name": "Nicholas Bishop", "link": "https://stackoverflow.com/users/1007956/nicholas-bishop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 439, "favorite_count": 0, "accepted_answer_id": 29775139, "answer_count": 2, "score": 2, "last_activity_date": 1429670603, "creation_date": 1429585516, "last_edit_date": 1429626116, "question_id": 29762162, "link": "https://stackoverflow.com/questions/29762162/can-a-slice-iterator-be-advanced-more-than-one-element-in-constant-time", "title": "Can a slice iterator be advanced more than one element in constant time?", "body": "<p>Some example code: (<a href=\"http://is.gd/uxtlNa\" rel=\"nofollow\">playpen</a>)</p>\n\n<pre><code>let data = [0, 1, 2, 3, 4];\nlet mut iter = data.iter();\nprintln!(\"{}\", iter.next().unwrap());\nprintln!(\"{}\", iter.skip(3).next().unwrap());\n</code></pre>\n\n<p>This prints 0 and 4, as expected.</p>\n\n<p>I'm curious if the <code>skip</code> operation is constant-time for the slice iterator? Grepping in the source I only found <a href=\"https://github.com/rust-lang/rust/blob/1.0.0-beta/src/libcore/iter.rs#L377\" rel=\"nofollow\">this implementation for <code>skip</code></a>, which leads down to the Skip struct's <a href=\"https://github.com/rust-lang/rust/blob/1.0.0-beta/src/libcore/iter.rs#L2010\" rel=\"nofollow\">Iterator implementation</a>.</p>\n\n<p>That appears to be a generic O(n) skip, and I can't see any specialization for pointer-based iterators that could just do pointer arithmetic.</p>\n\n<p>Am I missing something about the implementation of <code>skip</code>? Or is there some other way to do this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 25, "last_activity_date": 1582286624, "last_edit_date": 1582286624, "creation_date": 1429575742, "answer_id": 29760740, "question_id": 29760668, "link": "https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators/29760740#29760740", "title": "Conditionally iterate over one of several possible iterators", "body": "<p>The most straightforward solution is to use a <em>trait object</em>:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let mut a;\n    let mut b;\n\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    let iter: &amp;mut dyn Iterator&lt;Item = i64&gt; = match x {\n        None =&gt; {\n            a = 1..5;\n            &amp;mut a\n        }\n        Some(x) =&gt; {\n            b = iter::repeat(x).take(5);\n            &amp;mut b\n        }\n    };\n\n    for i in iter {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>The main downside for this solution is that you have to allocate stack space for each concrete type you have. This also means variables for each type. A good thing is that only the used type needs to be initialized.</p>\n\n<p>The same idea but requiring heap allocation is to use <em>boxed trait objects</em>:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    let iter: Box&lt;dyn Iterator&lt;Item = i64&gt;&gt; = match x {\n        None =&gt; Box::new(1..5),\n        Some(x) =&gt; Box::new(iter::repeat(x).take(5)),\n    };\n\n    for i in iter {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>This is mostly useful when you want to <a href=\"https://stackoverflow.com/q/27535289/155423\">return the iterator from a function</a>. The stack space taken is a single pointer, and only the needed heap space will be allocated.</p>\n\n<p>You can also <a href=\"https://stackoverflow.com/a/50204370/155423\">use an enum for each possible concrete iterator</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 17989, "user_id": 365102, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/e3139989e6548e7deac2cd45253d60df?s=128&d=identicon&r=PG", "display_name": "Mateen Ulhaq", "link": "https://stackoverflow.com/users/365102/mateen-ulhaq"}, "edited": false, "score": 0, "creation_date": 1557630080, "post_id": 50204370, "comment_id": 98827527, "body": "I like Shep&#39;s other answer below since it generalizes to more than just 2 iterators."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17989, "user_id": 365102, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/e3139989e6548e7deac2cd45253d60df?s=128&d=identicon&r=PG", "display_name": "Mateen Ulhaq", "link": "https://stackoverflow.com/users/365102/mateen-ulhaq"}, "edited": false, "score": 3, "creation_date": 1557630221, "post_id": 50204370, "comment_id": 98827550, "body": "@MateenUlhaq you can make an <code>Either&lt;Either&lt;A, B&gt;, C&gt;</code>, etc."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 19, "last_activity_date": 1525640419, "last_edit_date": 1525640419, "creation_date": 1525639561, "answer_id": 50204370, "question_id": 29760668, "link": "https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators/50204370#50204370", "title": "Conditionally iterate over one of several possible iterators", "body": "<p>The <a href=\"https://crates.io/crates/either\" rel=\"noreferrer\">either crate</a> provides the <a href=\"https://docs.rs/either/1.5.0/either/enum.Either.html\" rel=\"noreferrer\"><code>Either</code></a> type. If both halves of <code>Either</code> are iterators, then so is the <code>Either</code>:</p>\n\n<pre><code>extern crate either;\n\nuse either::Either;\nuse std::iter;\n\nfn main() {\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    let iter = match x {\n        None =&gt; Either::Left(1..5),\n        Some(x) =&gt; Either::Right(iter::repeat(x).take(5)),\n    };\n\n    for i in iter {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Like <a href=\"https://stackoverflow.com/a/29760740/155423\">a previous answer</a>, this still takes stack space for each concrete type you have. However, you don't need individual variables for each concrete value. </p>\n\n<p>This type can also be <a href=\"https://stackoverflow.com/q/27535289/155423\">returned from a function</a>, unlike the trait object references. Compared to boxed trait objects, it will always use a fixed size on the stack, regardless of which concrete type was chosen.</p>\n\n<p>You'll find this type (or semantic equivalent) in other places as well, such as <a href=\"https://docs.rs/futures/0.2.1/futures/future/enum.Either.html\" rel=\"noreferrer\"><code>futures::Either</code></a></p>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1578721613, "post_id": 52064434, "comment_id": 105539954, "body": "<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=1c2165f28db26919ef157bbe19603cbb\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ?"}], "tags": [], "owner": {"reputation": 1786, "user_id": 1209714, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f9e4181f2951ca8f21ed5c541686367?s=128&d=identicon&r=PG", "display_name": "Niko Matsakis", "link": "https://stackoverflow.com/users/1209714/niko-matsakis"}, "is_accepted": false, "score": 12, "last_activity_date": 1535481847, "creation_date": 1535481847, "answer_id": 52064434, "question_id": 29760668, "link": "https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators/52064434#52064434", "title": "Conditionally iterate over one of several possible iterators", "body": "<p>Personally, rather than use <code>Either</code>, I often prefer to create a series of <code>Option&lt;Iterator&gt;</code> values that get chained together. Something like this:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=383380d045de10db472ab2408fecb671&amp;version=nightly&amp;mode=debug&amp;edition=2015\" rel=\"noreferrer\">playground</a></p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    for i in pick(x) {\n        println!(\"{}\", i);\n    }\n}\n\nfn pick(opt_x: Option&lt;i64&gt;) -&gt; impl Iterator&lt;Item = i64&gt; {\n    let iter_a = if let None = opt_x {\n        Some(1..5)  \n    } else {\n        None\n    };\n\n    let iter_b = if let Some(x) = opt_x {\n        Some(iter::repeat(x).take(5))\n    } else {\n        None\n    };\n\n    iter_a.into_iter().flatten().chain(iter_b.into_iter().flatten())\n}\n</code></pre>\n\n<p>It's a bit less obvious than using <code>Either</code>, but it avoids another crate, and sometimes it works out quite elegantly. </p>\n"}, {"comments": [{"owner": {"reputation": 17989, "user_id": 365102, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/e3139989e6548e7deac2cd45253d60df?s=128&d=identicon&r=PG", "display_name": "Mateen Ulhaq", "link": "https://stackoverflow.com/users/365102/mateen-ulhaq"}, "edited": false, "score": 0, "creation_date": 1557625067, "post_id": 54728634, "comment_id": 98826980, "body": "There are more <code>mut</code>s in this version than @Niko&#39;s, but I suppose it doesn&#39;t really matter. :)"}], "tags": [], "owner": {"reputation": 505, "user_id": 4731971, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e60ab9e7a02af85398cc7b7da4dafe9?s=128&d=identicon&r=PG", "display_name": "lucatrv", "link": "https://stackoverflow.com/users/4731971/lucatrv"}, "is_accepted": false, "score": 9, "last_activity_date": 1550361868, "last_edit_date": 1550361868, "creation_date": 1550359241, "answer_id": 54728634, "question_id": 29760668, "link": "https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators/54728634#54728634", "title": "Conditionally iterate over one of several possible iterators", "body": "<p>Here is a variation of @Niko's brilliant solution using a single <code>match</code> expression instead of several <code>if let</code> expressions, which may be more convenient when dealing with more conditional cases:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter;\n\nfn main() {\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    for i in pick(x) {\n        println!(\"{}\", i);\n    }\n}\n\nfn pick(opt_x: Option&lt;i64&gt;) -&gt; impl Iterator&lt;Item = i64&gt; {\n    let mut iter_a = None;\n    let mut iter_b = None;\n\n    match opt_x {\n        None =&gt; iter_a = Some(1..5),\n        Some(x) =&gt; iter_b = Some(iter::repeat(x).take(5)),\n    }\n\n    iter_a.into_iter().flatten().chain(iter_b.into_iter().flatten())\n}\n</code></pre>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3200, "favorite_count": 8, "accepted_answer_id": 29760740, "answer_count": 4, "score": 21, "last_activity_date": 1582286624, "creation_date": 1429575296, "last_edit_date": 1525639814, "question_id": 29760668, "link": "https://stackoverflow.com/questions/29760668/conditionally-iterate-over-one-of-several-possible-iterators", "title": "Conditionally iterate over one of several possible iterators", "body": "<p>I'm trying to switch behavior based on an <code>Option</code> input to a function. The idea is to iterate based on whether or not a given <code>Option</code> is present. Here's a minimal, if silly, example:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let x: Option&lt;i64&gt; = None;\n\n    // Repeat x 5 times if present, otherwise count from 1 to 5\n    for i in match x {\n        None =&gt; 1..5,\n        Some(x) =&gt; iter::repeat(x).take(5),\n    } {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src/main.rs:7:14\n   |\n7  |       for i in match x {\n   |  ______________^\n8  | |         None =&gt; 1..5,\n9  | |         Some(x) =&gt; iter::repeat(x).take(5),\n   | |                    ----------------------- match arm with an incompatible type\n10 | |     } {\n   | |_____^ expected struct `std::ops::Range`, found struct `std::iter::Take`\n   |\n   = note: expected type `std::ops::Range&lt;{integer}&gt;`\n              found type `std::iter::Take&lt;std::iter::Repeat&lt;i64&gt;&gt;`\n</code></pre>\n\n<p>This makes perfect sense, of course, but I'd really like to choose my iterator based on a condition, since the code in the for-loop is non-trivial and copy-pasting all of that just to change iterator selection would be pretty ugly and unmaintainable.</p>\n\n<p>I tried using <code>as Iterator&lt;Item = i64&gt;</code> on both arms, but that gives me an error about unsized types because it's a trait object. Is there an easy way to go about this?</p>\n\n<p>I could, of course, use <code>.collect()</code> since they return the same type and iterate over that vector. Which is a good quick fix, but for large lists seems a bit excessive.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429549490, "post_id": 29753296, "comment_id": 47640151, "body": "It is not clear what you want. What type is your input, and what type do you want as output? Perhaps you could add a bit of example code? I&#39;m not sure what meaning you are ascribing to &quot;converse&quot;, but <code>u32</code> <b>is</b> an integer type. Did you mean a <i>signed integer</i>?"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1429550117, "post_id": 29753296, "comment_id": 47640547, "body": "The question is super unclear, but I interpret the &quot;converse&quot; in this context to be &quot;how do I convert a <code>char</code> to a <code>u32</code>.&quot; For that, see: <a href=\"http://doc.rust-lang.org/std/primitive.char.html#method.to_digit\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.char.html#method.to_digit</a>"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429554515, "post_id": 29753296, "comment_id": 47643290, "body": "@Shepmaster based on this question: <a href=\"http://stackoverflow.com/questions/29751590/why-is-numone-needed-for-iterating-over-a-range\" title=\"why is numone needed for iterating over a range\">stackoverflow.com/questions/29751590/&hellip;</a> I think the OP is looking for a way to convert <code>char</code> into a numerical value for code point, so he can iterate over it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 3, "creation_date": 1429554741, "post_id": 29753296, "comment_id": 47643444, "body": "@DanielFath that may be so, but questions should stand alone. Future people with similar questions shouldn&#39;t need to read through an unknown amount of the OPs previous questions to understand if it is asking the question they are interested."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429567212, "post_id": 29753296, "comment_id": 47650650, "body": "I&#39;m not disagreeing @Shepmaster,  I just think we should give OP chance to change his message. I agree it was unclear."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429567373, "post_id": 29753296, "comment_id": 47650710, "body": "@DanielFath absolutely! Now we play the waiting game for the OP. ^_^"}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 10, "last_activity_date": 1429569663, "creation_date": 1429569663, "answer_id": 29759714, "question_id": 29753296, "link": "https://stackoverflow.com/questions/29753296/where-is-the-from-char-function-for-integer-types/29759714#29759714", "title": "Where is the from_char() function for integer types?", "body": "<p>The inverses are:</p>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_digit\"><code>to_digit</code></a> for <code>from_digit</code>: <code>c.to_digit(12)</code></li>\n<li>an <code>as u32</code> cast for <code>from_u32</code>: <code>c as u32</code></li>\n</ul>\n\n<p>The latter is the one you want if you want the Unicode codepoint of the <code>char</code>.</p>\n"}], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3993, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1429619273, "creation_date": 1429547189, "last_edit_date": 1429619273, "question_id": 29753296, "link": "https://stackoverflow.com/questions/29753296/where-is-the-from-char-function-for-integer-types", "title": "Where is the from_char() function for integer types?", "body": "<p>The char type has <a href=\"http://doc.rust-lang.org/nightly/core/char/fn.from_digit.html\" rel=\"noreferrer\"><code>from_digit()</code></a> and <a href=\"http://doc.rust-lang.org/nightly/core/char/fn.from_u32.html\" rel=\"noreferrer\"><code>from_u32()</code></a> for getting a char from a digit or from a <code>u32</code>, but where are the converse functions for the integer types (all of them)?</p>\n\n<p>i.e. I expected to see some uN::from_{char|digit}() and iN::from_{char|digit}() functions (where N is 8, 16, 32, 64 or size) for symmetry but apparently they do not exist.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "edited": false, "score": 0, "creation_date": 1429543796, "post_id": 29751864, "comment_id": 47636304, "body": "+1 for your explanation but the solution looks rather kludgey. Aren&#39;t Unicode characters ordered by code points? Does rust have some function which can be used to get the next Unicode character after the current one?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429554723, "post_id": 29751864, "comment_id": 47643430, "body": "You cannot implement a trait you do not own for a type you do not own. You have to own at least one of them."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429555332, "post_id": 29751864, "comment_id": 47643810, "body": "@Shepmaster Oh, right, I forgot about Coherence rules. Well you could write a wrapper <code>UnicodeRange((1..2))</code> or implement a trait on a Range that returns an iterator <code>(&#39;a&#39;..&#39;z&#39;).unicode_iter()</code>. It would look goofy, but it might work."}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 3, "last_activity_date": 1429544723, "last_edit_date": 1429544723, "creation_date": 1429543063, "answer_id": 29751864, "question_id": 29751590, "link": "https://stackoverflow.com/questions/29751590/why-is-numone-needed-for-iterating-over-a-range/29751864#29751864", "title": "Why is num::One needed for iterating over a range?", "body": "<p>Well, you need <code>Step</code> to denote that the structure can be stepped over in both directions.</p>\n\n<pre><code>  /// Objects that can be stepped over in both directions.\n  ///\n  /// The `steps_between` function provides a way to efficiently compare\n  /// two `Step` objects.\n  pub trait Step: PartialOrd \n</code></pre>\n\n<p><code>One</code> on the other hand is used to retrieve a value from mutable iterator, while simultaneously incrementing it:</p>\n\n<pre><code>  #[inline]\n  fn next(&amp;mut self) -&gt; Option&lt;A&gt; {\n      if self.start &lt; self.end {\n          let mut n = &amp;self.start + &amp;A::one();\n          mem::swap(&amp;mut n, &amp;mut self.start);\n          Some(n)\n      } else {\n          None\n      }\n  }\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/src/core/iter.rs.html#2738-2747\" rel=\"nofollow\">Source</a></p>\n\n<hr>\n\n<p>What you could do is make your range a <code>u8</code> and then convert it back to <code>char</code>, like this:</p>\n\n<pre><code>fn main() {\n    for c in (b'a'..b'z'+1) {\n        println!(\" {:?}\", c as char);\n    }\n}\n</code></pre>\n\n<p>Note: That range are <strong>exclusive</strong> so ('a'..'z') is actually ('a', 'b', ... 'y'). Or in math notation <code>[a,z)</code> ;) . </p>\n\n<p>That's why I add <code>b'z'+1</code> instead of <code>b'z'</code>. </p>\n\n<p>Note: u8 is valid, only because the characters are ASCII.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 7, "last_activity_date": 1429667420, "last_edit_date": 1429667420, "creation_date": 1429573208, "answer_id": 29760357, "question_id": 29751590, "link": "https://stackoverflow.com/questions/29751590/why-is-numone-needed-for-iterating-over-a-range/29760357#29760357", "title": "Why is num::One needed for iterating over a range?", "body": "<p>The <code>x..y</code> syntax is sugar for <a href=\"http://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"noreferrer\"><code>std::ops::Range { start: x, end: y }</code></a>. This type (<code>Range&lt;A&gt;</code>) is iterable due to the implementation of <code>Iterator</code> for it, specifically, from that page:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;A&gt; Iterator for Range&lt;A&gt;\n   where A: One + Step,\n         &amp;'a A: Add&lt;&amp;'a A&gt;,\n         &amp;'a A::Output == A {\n    type Item = A;\n</code></pre>\n\n<p>This is saying that <code>Range&lt;A&gt;</code> can behave as an iterator over <code>A</code>s if the type <code>A</code> implements <code>One</code> and <code>Step</code>, and can be added in the right way.</p>\n\n<p>In this case, <a href=\"http://doc.rust-lang.org/nightly/std/primitive.char.html\" rel=\"noreferrer\"><code>char</code></a> satisfies none of those: it is semantically nonsense for <code>char</code> to have <code>One</code> or be addable, and it doesn't implement <code>Step</code> either.</p>\n\n<p>That said, since <code>char</code> doesn't implement those traits (and hence <code>Range&lt;char&gt;</code> doesn't behave like an iterator via that <code>impl</code>), it should be possible to have a manual impl:</p>\n\n<pre><code>impl Iterator for Range&lt;char&gt; {\n    type Item = char;\n</code></pre>\n\n<p>which would allow <code>for x in 'a'..'z'</code> to work.</p>\n\n<p>However, this probably isn't semantically what we want: the <code>..</code> range doesn't include the last element, which would be suprising for characters, one would have to write <code>'a'..'{'</code> to get the letters A through Z. There's been proposals for inclusive-range syntax, e.g. one example is <code>'a'...'z'</code> (more dots == more elements), and I would imagine that there would be an <code>Iterator</code> implementation for this type with <code>char</code>s.</p>\n\n<p>As others have demonstrated, for ASCII characters one can use byte literals, and more generally, one can cast characters to <code>u32</code>s:</p>\n\n<pre><code>for i in ('\u00e0' as u32)..('\u00e6' as u32) + 1 {\n    let c = std::char::from_u32(i).unwrap();\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<p>Which gives:</p>\n\n<pre><code>\u00e0\n\u00e1\n\u00e2\n\u00e3\n\u00e4\n\u00e5\n\u00e6\n</code></pre>\n\n<p>NB. this approach isn't perfect, it will crash if the range crosses the <a href=\"https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\" rel=\"noreferrer\">surrogate</a> range, 0xD800-0xDFFF.</p>\n\n<p>I just published a crate, <a href=\"http://huonw.github.io/char-iter/char_iter/index.html\" rel=\"noreferrer\"><code>char-iter</code></a>, which handles the latter correctly and behaves like one would expect. Once added (via cargo), it can be used like:</p>\n\n<pre><code>extern crate char_iter;\n// ...\n\nfor c in char_iter::new('a', 'z') {\n    // ...\n}\nfor c in char_iter::new('\u00e0', '\u00e6') {\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 872, "favorite_count": 1, "answer_count": 2, "score": 2, "last_activity_date": 1429667420, "creation_date": 1429542375, "last_edit_date": 1429542984, "question_id": 29751590, "link": "https://stackoverflow.com/questions/29751590/why-is-numone-needed-for-iterating-over-a-range", "title": "Why is num::One needed for iterating over a range?", "body": "<p>Why does the following for loop with a char range fail to compile?</p>\n\n<pre><code>fn main() {\n    for c in 'a'..'z' {\n        println!(\"{}\", c);\n    }\n}\n</code></pre>\n\n<p>Error...</p>\n\n<pre><code>main.rs:11:5: 14:2 error: the trait `core::num::One` is not implemented for the type `char` [E0277]\nmain.rs:11     for c in 'a'..'z' {\nmain.rs:12         println!(\"{}\", c);\nmain.rs:13     }\nmain.rs:14 }\nmain.rs:11:5: 14:2 error: the trait `core::iter::Step` is not implemented for the type `char` [E0277]\nmain.rs:11     for c in 'a'..'z' {\nmain.rs:12         println!(\"{}\", c);\nmain.rs:13     }\nmain.rs:14 }\n</code></pre>\n\n<p>Why do you even need <code>core::num::One</code> for a iterating over a range?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429530091, "post_id": 29745134, "comment_id": 47625937, "body": "As far as I know, the only way to implement the original form is with (a limited form of) higher-kinded types, allowing something like <code>trait TrustedVal { type SignedContent&lt;&#39;a&gt;: Encodable; fn get_sign_content(&amp;&#39;a self) -&gt; Self::SignedContent&lt;&#39;a&gt;; }</code>, <code>impl TrustedVal for RSAPeer { type SignedContent&lt;&#39;a&gt; = TrustedPeerToSignEnc&lt;&#39;a&gt;; ...</code>. Unfortunately, this feature doesn&#39;t exist now/yet."}, {"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429530509, "post_id": 29745134, "comment_id": 47626228, "body": "Indeed that was the original intent."}], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429528451, "post_id": 29745347, "comment_id": 47624771, "body": "Unfortunately the code is wrong, at least, the compiler mishandles it, and allows memory unsafety to occur. I suspect it is supposed to be illegal: <a href=\"https://github.com/rust-lang/rust/issues/24622\" rel=\"nofollow noreferrer\">#24622</a>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429528750, "post_id": 29745347, "comment_id": 47624985, "body": "That&#39;s sad, but I can&#39;t point out something that&#39;s wrong in the code. It should indicate the correct kind of borrowing relation between self and the return value."}, {"owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "edited": false, "score": 0, "creation_date": 1429528796, "post_id": 29745347, "comment_id": 47625019, "body": "Thanks, that was my first attempt, but it has to much impact over my other traits (at least without the nifty syntax). For instance for at Key Value storage trait which  uses TrustedVal and with the additional param, I needed to add the lifetime to the store trait (and so on of other traits) :  <a href=\"http://is.gd/EPat2Q\" rel=\"nofollow noreferrer\">is.gd/EPat2Q</a> . But with the &quot;nifty syntax&quot; I indead could remove the additional parameter in my trait : <a href=\"http://is.gd/jGO9Zy\" rel=\"nofollow noreferrer\">is.gd/jGO9Zy</a> . I wonder if there is some documentation about this syntax or some similar one allowing me to avoid propagating lifetime to trait such as TrustedPeer in <a href=\"http://is.gd/AIoLLW\" rel=\"nofollow noreferrer\">is.gd/AIoLLW</a>"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429529940, "post_id": 29745347, "comment_id": 47625826, "body": "@user139873, right, the code in the answer doesn&#39;t inherently have memory unsafety, but it is very easy to trigger with any generic code that uses the trait. It&#39;s not clear to me that this is a case of &quot;should&quot;, since there&#39;s no direct connection between the lifetime of the associated type and the lifetime in the trait, and it&#39;s not obvious to me if we want to implicitly impose <code>&#39;a: Self::SignedContent</code> (i.e. that <code>SignedContent</code> is valid for at <i>most</i> <code>&#39;a</code>)."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 2, "last_activity_date": 1429527291, "last_edit_date": 1429527291, "creation_date": 1429525688, "answer_id": 29745347, "question_id": 29745134, "link": "https://stackoverflow.com/questions/29745134/unconstrained-lifetime-on-nightly-design-advice-needed/29745347#29745347", "title": "Unconstrained lifetime on nightly, design advice needed", "body": "<p>One way to fix it is to make the lifetime parameter a parameter on the trait. This works well especially when you only have one method in the trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait TrustedVal&lt;'a&gt; {\n  type SignedContent : Encodable ;\n  fn get_sign_content(&amp;'a self) -&gt; Self::SignedContent;\n}\n\nimpl&lt;'a&gt; TrustedVal&lt;'a&gt; for RSAPeer\n{\n  type SignedContent = TrustedPeerToSignEnc&lt;'a&gt;;\n\n  fn get_sign_content(&amp;'a self) -&gt; TrustedPeerToSignEnc&lt;'a&gt; {\n    TrustedPeerToSignEnc {\n      version : 0,\n      name : &amp;self.name,\n    }\n  }\n}\n</code></pre>\n\n<p>to use such a trait as a bound you may have to use this nifty syntax:</p>\n\n<pre><code>where T: for&lt;'a&gt; TrustedVal&lt;'a&gt;\n</code></pre>\n"}], "owner": {"reputation": 238, "user_id": 4737839, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/38e2332cf448b64ced7498653324adcd?s=128&d=identicon&r=PG&f=1", "display_name": "cheme", "link": "https://stackoverflow.com/users/4737839/cheme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 343, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1429527298, "creation_date": 1429525087, "last_edit_date": 1429527298, "question_id": 29745134, "link": "https://stackoverflow.com/questions/29745134/unconstrained-lifetime-on-nightly-design-advice-needed", "title": "Unconstrained lifetime on nightly, design advice needed", "body": "<p>I am a bit stuck on some code, <a href=\"http://is.gd/OMvnN7\" rel=\"nofollow\">http://is.gd/OMvnN7</a> : a bug fix on nightly makes it invalid (for good reason : <a href=\"https://github.com/rust-lang/rust/pull/24461\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/24461</a>), but I don't see any alternative to make my code run.</p>\n\n<p>The point is my associated type 'SignedContent' got an associated lifetime most of the time, but I do not want to bind this lifetime to its parent trait (the impact on existing code is likely to be that every traits using this traits (a lot) will need an additional lifetime parameter which does not look too practical).</p>\n\n<p>I may end switching to a 'get_sign_content' returning a <code>Vec&lt;u8&gt;</code> directly, but I really prefer to return an encodable struct.</p>\n\n<p>The only thing missing is the expressiveness for saying my associated type lifetime bound is the same as its parent, Something like that (invalid)</p>\n\n<pre><code>impl TrustedVal for RSAPeer\n{\n    type SignedContent = TrustedPeerToSignEnc&lt;'Self::lifetime&gt;;\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>impl&lt;'a&gt; TrustedVal for RSAPeer where RSAPeer : 'a\n{\n    type SignedContent = TrustedPeerToSignEnc&lt;'a&gt;;\n</code></pre>\n\n<p>I also consider (this is valid)</p>\n\n<pre><code>impl&lt;'a&gt; TrustedVal for &amp;'a RSAPeer\n{\n    type SignedContent = TrustedPeerToSignEnc&lt;'a&gt;;\n</code></pre>\n\n<p>but it becomes really awkward with some other code. Any ideas on the right way to design this ?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1429512383, "post_id": 29740792, "comment_id": 47614933, "body": "Thanks a lot for the quick reply... But what is the use of a short-lived type? Can the compiler do any performance optimizations on it?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 1, "creation_date": 1429513142, "post_id": 29740792, "comment_id": 47615357, "body": "The use is actually then a type lifetime is tied to an other. For example an iterator&#39;s lifetime is tied to the lifetime of the object you iterate over, and this is reflected on its type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1429522361, "post_id": 29740792, "comment_id": 47620812, "body": "@JohnFrancis: Another example of short-lived type: a reference to a variable in your function =&gt; the variable is short-lived (it will be destroyed at the end of the function) and therefore references to its value account for this (to prevent you from referencing this variable once it no longer is)."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1429524555, "post_id": 29740792, "comment_id": 47622292, "body": "@MatthieuM. I know about the short-lived values/references... I was asking about a &quot;data type definition&quot; itself being short-lived? In the above example, T is a type, not a value/reference."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 2, "creation_date": 1429530191, "post_id": 29740792, "comment_id": 47626018, "body": "@JohnFrancis: Ah! The type itself is not short-lived (types exist or not), I would think this is a short-hand (!) for &quot;types referencing short-lived variables&quot;."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1429538013, "post_id": 29740792, "comment_id": 47631921, "body": "@MatthieuM. Are you sure about that? Because I highly doubt that Rust developers would use a short-hand and make error messages confusing (they really care about error messages). Besides, writing <code>where T: Animal + &#39;static</code> does not mean that the argument <code>animal: T</code> should have static lifetime (I&#39;ve checked that). And Levan&#39;s explanation makes more sense to me."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 2, "creation_date": 1429540382, "post_id": 29740792, "comment_id": 47633635, "body": "@JohnFrancis: I am afraid I did not explain myself clearly. I was attempting to paraphrase Levans&#39; explanation. By type referencing short-lived variables I meant types that potentially contain a non <code>&#39;static</code> reference to another type (such as <code>struct Foo&lt;&#39;a&gt; { data: &amp;&#39;a str }</code>)."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1429558179, "post_id": 29740792, "comment_id": 47645647, "body": "@MatthieuM. So... What <code>T: Animal + &#39;static</code> means is that if &quot;<code>T</code> contains a reference, then it is having <i>at least</i> <code>&#39;static</code> lifetime&quot;. Is that correct? Or is there another way to read it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1429596429, "post_id": 29740792, "comment_id": 47659962, "body": "@JohnFrancis: You nailed it exactly!"}, {"owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "edited": false, "score": 0, "creation_date": 1557358994, "post_id": 29740792, "comment_id": 98742009, "body": "I know this is an old post, but I&#39;m still confused: what reference variable?  I just don&#39;t see one in this example.  Everything looks highly concrete."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "edited": false, "score": 2, "creation_date": 1561536527, "post_id": 29740792, "comment_id": 100091950, "body": "@ElfSternberg In the example provided, there&#39;s no use of references, but compiler also considers the case where <code>T</code> could potentially be a type of objects holding references that are short-lived. You could consider <code>ShortLivedBee</code> in the above example to be defined as <code>struct ShortLivedBee&lt;&#39;a&gt; { myref: &amp;&#39;a int }</code> and an object of it holding a reference to an int living in a stack frame. This cannot be passed to <code>new_rc_animal</code> as I defined it in the question, because there the return type is implicitly <code>Rc&lt;Box&lt;Animal + &#39;static&gt;&gt;</code>."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 34, "last_activity_date": 1429511863, "creation_date": 1429511863, "answer_id": 29740792, "question_id": 29740488, "link": "https://stackoverflow.com/questions/29740488/parameter-type-may-not-live-long-enough/29740792#29740792", "title": "Parameter type may not live long enough?", "body": "<p>There are actually plenty of types that can \"not live long enough\": all the ones that have a lifetime parameter.</p>\n\n<p>If I were to introduce this type:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct ShortLivedBee&lt;'a&gt;;\nimpl&lt;'a&gt; Animal for ShortLivedBee&lt;'a&gt; {}\n</code></pre>\n\n<p><code>ShortLivedBee</code> is not valid for any lifetime, but only the ones that are valid for <code>'a</code> as well.</p>\n\n<p>So in your case with the bound</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>where T: Animal + 'static\n</code></pre>\n\n<p>the only <code>ShortLivedBee</code> I could feed into your function is <code>ShortLivedBee&lt;'static&gt;</code>.</p>\n\n<p>What causes this is that when creating a <code>Box&lt;Animal&gt;</code>, you are creating a trait object, which need to have an associated lifetime. If you do not specify it, it defaults to <code>'static</code>. So the type you defined is actually:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type RcAnimal = Rc&lt;Box&lt;Animal + 'static&gt;&gt;;\n</code></pre>\n\n<p>That's why your function require that a <code>'static</code> bound is added to <code>T</code>: <strong>It is not possible to store a <code>ShortLivedBee&lt;'a&gt;</code> in a <code>Box&lt;Animal + 'static&gt;</code> unless <code>'a = 'static</code>.</strong></p>\n\n<hr>\n\n<p>An other approach would be to add a lifetime annotation to your <code>RcAnimal</code>, like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type RcAnimal&lt;'a&gt; = Rc&lt;Box&lt;Animal + 'a&gt;&gt;;\n</code></pre>\n\n<p>And change your function to explicit the lifetime relations:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn new_rc_animal&lt;'a, T&gt;(animal: T) -&gt; RcAnimal&lt;'a&gt;\n        where T: Animal + 'a { \n    Rc::new(Box::new(animal) as Box&lt;Animal&gt;)\n}\n</code></pre>\n"}], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12613, "favorite_count": 1, "accepted_answer_id": 29740792, "answer_count": 1, "score": 30, "last_activity_date": 1588240720, "creation_date": 1429510617, "last_edit_date": 1588240720, "question_id": 29740488, "link": "https://stackoverflow.com/questions/29740488/parameter-type-may-not-live-long-enough", "title": "Parameter type may not live long enough?", "body": "<p>The following code segment gives me an error:</p>\n\n<pre><code>use std::rc::Rc;\n\n// Definition of Cat, Dog, and Animal (see the last code block)\n// ...\n\ntype RcAnimal = Rc&lt;Box&lt;Animal&gt;&gt;;\nfn new_rc_animal&lt;T&gt;(animal: T) -&gt; RcAnimal\nwhere\n    T: Animal /* + 'static */ // works fine if uncommented\n{\n    Rc::new(Box::new(animal) as Box&lt;Animal&gt;)\n}\n\nfn main() {\n    let dog: RcAnimal = new_rc_animal(Dog);\n    let cat: RcAnimal = new_rc_animal(Cat);\n    let mut v: Vec&lt;RcAnimal&gt; = Vec::new();\n    v.push(cat.clone());\n    v.push(dog.clone());\n    for animal in v.iter() {\n        println!(\"{}\", (**animal).make_sound());\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `T` may not live long enough\n --&gt; src/main.rs:8:13\n  |\n4 | fn new_rc_animal&lt;T&gt;(animal: T) -&gt; RcAnimal\n  |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n...\n8 |     Rc::new(Box::new(animal) as Box&lt;Animal&gt;)\n  |             ^^^^^^^^^^^^^^^^\n  |\nnote: ...so that the type `T` will meet its required lifetime bounds\n --&gt; src/main.rs:8:13\n  |\n8 |     Rc::new(Box::new(animal) as Box&lt;Animal&gt;)\n  |             ^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>but this compiles fine:</p>\n\n<pre><code>use std::rc::Rc;\n\n// Definition of Cat, Dog, and Animal (see the last code block)\n// ...\n\nfn new_rc_animal&lt;T&gt;(animal: T) -&gt; Rc&lt;Box&lt;T&gt;&gt;\nwhere\n    T: Animal,\n{\n    Rc::new(Box::new(animal))\n}\n\nfn main() {\n    let dog = new_rc_animal(Dog);\n    let cat = new_rc_animal(Cat);\n}\n</code></pre>\n\n<p>What is the cause of the error? The only real difference seems to be the use of operator <code>as</code>. How can a <em>type</em> not live long enough? (<a href=\"https://play.rust-lang.org/?gist=ed3b70d7b845c9ee13982ae6de01577d&amp;version=beta\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre><code>// Definition of Cat, Dog, and Animal\ntrait Animal {\n    fn make_sound(&amp;self) -&gt; String;\n}\n\nstruct Cat;\nimpl Animal for Cat {\n    fn make_sound(&amp;self) -&gt; String {\n        \"meow\".to_string()\n    }\n}\n\nstruct Dog;\nimpl Animal for Dog {\n    fn make_sound(&amp;self) -&gt; String {\n        \"woof\".to_string()\n    }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Addendum</strong></p>\n\n<p>Just to clarify, I had two questions:</p>\n\n<ol>\n<li>Why doesn't this work? ... which is addressed in the accepted answer.</li>\n<li>How can a <em>type</em>, as opposed to a value or reference, be shortlived? ... which was addressed in the comments. Spoiler: a <em>type</em> simply exists since it's a compile-time concept.</li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "is_accepted": true, "score": 7, "last_activity_date": 1429480001, "last_edit_date": 1429480001, "creation_date": 1429479652, "answer_id": 29736226, "question_id": 29736078, "link": "https://stackoverflow.com/questions/29736078/borrow-checker-is-not-happy-when-conditionally-popping-elements-from-binary-heap/29736226#29736226", "title": "Borrow checker is not happy when conditionally popping elements from binary heap", "body": "<p>The error message is quite descriptive:</p>\n\n<pre><code>&lt;anon&gt;:8:13: 8:18 error: cannot borrow `queue` as mutable because it is also borrowed as immutable\n&lt;anon&gt;:8             queue.pop();\n                     ^~~~~\n&lt;anon&gt;:5:21: 5:26 note: previous borrow of `queue` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `queue` until the borrow ends\n&lt;anon&gt;:5         let entry = queue.peek().unwrap();\n                             ^~~~~\n&lt;anon&gt;:10:6: 10:6 note: previous borrow ends here\n&lt;anon&gt;:4     while !queue.is_empty() {\n...\n&lt;anon&gt;:10     }\n              ^\n</code></pre>\n\n<p>The problem is that this borrows <code>queue</code>:</p>\n\n<pre><code>let entry = queue.peek().unwrap();\n</code></pre>\n\n<p><code>peek()</code> returns an <code>Option&lt;&amp;T&gt;</code>, that is, an option with a reference to a value of type <code>T</code>. The borrow is valid for as long as <code>entry</code> is alive, which is until the end of the function. It points to something that is stored inside the heap, so it borrows the heap immutably. In other words, as long as <code>entry</code> is alive (until the end of the function), the heap is immutably borrowed.</p>\n\n<p><code>queue.pop()</code> borrows the heap mutably, so, by the time you get to that, the heap is immutably borrowed AND you attempt to mutably borrow it at the same time.</p>\n\n<p>The borrow checker rules state that you can't borrow something mutably and immutably simultaneously, so you have a problem.</p>\n\n<p>To fix it, find a way to avoid borrowing twice at the same time. For example, you could do this instead:</p>\n\n<pre><code>fn check_the_queue(mut queue: BinaryHeap&lt;i32&gt;) {\n    while !queue.is_empty() {\n        if *queue.peek().unwrap() &lt;= 0 {\n            queue.pop();\n        } \n    }\n}\n</code></pre>\n\n<p>That is, just drop the variable <code>entry</code>. This works because by the time you reach <code>queue.pop()</code>, there are no other borrows active, and the borrow checker is happy :)</p>\n\n<p>Lifetimes and borrowing rules may be hard to grok at first, but the steep learning curve pays off over time.</p>\n"}], "owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 29736226, "answer_count": 1, "score": 5, "last_activity_date": 1429480001, "creation_date": 1429478836, "question_id": 29736078, "link": "https://stackoverflow.com/questions/29736078/borrow-checker-is-not-happy-when-conditionally-popping-elements-from-binary-heap", "title": "Borrow checker is not happy when conditionally popping elements from binary heap", "body": "<p>I'm trying to write a simple function which would pop elements from the BinaryHeap satisfying a certain condition. The function looks like this:</p>\n\n<pre><code>fn check_the_queue(mut queue: BinaryHeap&lt;i32&gt;) {\nwhile !queue.is_empty() {\n    let entry = queue.peek().unwrap();\n    if *entry &lt;= 0 {\n        queue.pop();\n    } \n}\n</code></pre>\n\n<p>When compiling the borrow checker starts complaining:</p>\n\n<pre><code>src/main.rs:52:13: 52:18 error: cannot borrow `queue` as mutable because it is also borrowed as immutable\n</code></pre>\n\n<p>How can I go around this problem and make the borrow checker happy?</p>\n"}, {"tags": ["loops", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1429459523, "post_id": 29732184, "comment_id": 47597716, "body": "It seems like a design choice for Rust, they could have done <code>impl Mul&lt;f64&gt; for isize</code> and visa versa, but simple casting is more clear."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1429460802, "post_id": 29732184, "comment_id": 47598230, "body": "@user25064 to do that, the output type would have to be decided - should multiplying a integer by a floating point number produce a floating point number or an integer? And is that a good choice for every Rust program?"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1429467650, "post_id": 29732184, "comment_id": 47600992, "body": "I believe that many languages &quot;upgrade&quot; int to float when taking the product."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1429459122, "creation_date": 1429459122, "answer_id": 29732184, "question_id": 29732140, "link": "https://stackoverflow.com/questions/29732140/how-to-specify-types-during-for-in-loop/29732184#29732184", "title": "How to specify types during for-in loop?", "body": "<p>When an integral variable isn't otherwise constrained, it will fall back to <code>i32</code>. The problem is that you have both an unconstrained integer and floating-point number, so it's not clear how to multiply them (hence the error). Since you have to cast them to multiply anyway, I'd just cast the loop variable in the print statement:</p>\n\n<pre><code>fn main() {\n    for i in 0..10 {\n        println!(\"{}\", (i as f64) * 0.5); \n    }\n}\n</code></pre>\n\n<p>I don't know if it's possible to actually specify the type of the loop variable. In cases like that, I've just made sure the range is clearly defined:</p>\n\n<pre><code>fn main() {\n    for i in 0..10_u16 {\n        println!(\"{}\", i * 0.5); \n    }\n}\n</code></pre>\n\n<p>however, this still has the same error (but with a bit more detail):</p>\n\n<pre><code>&lt;anon&gt;:3:24: 3:31 error: the trait `core::ops::Mul&lt;_&gt;` is not implemented for the type `u16` [E0277]\n&lt;anon&gt;:3         println!(\"{}\", i * 0.5); \n                                ^~~~~~~\n</code></pre>\n\n<p>As I alluded to earlier, you can't implicitly multiply integers and floating-point numbers. You have to decide what you want it to mean.</p>\n"}], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3053, "favorite_count": 2, "closed_date": 1453310898, "accepted_answer_id": 29732184, "answer_count": 1, "score": 3, "last_activity_date": 1429459122, "creation_date": 1429458857, "last_edit_date": 1429459107, "question_id": 29732140, "link": "https://stackoverflow.com/questions/29732140/how-to-specify-types-during-for-in-loop", "closed_reason": "Duplicate", "title": "How to specify types during for-in loop?", "body": "<p>See this super simple <a href=\"http://is.gd/fCtGhz\" rel=\"nofollow\">playpen</a> </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    for i in 0..10 {\n        println!(\"{}\", i*0.5); \n    }\n}\n</code></pre>\n\n<p>The result of compilation on Rust 1.0-beta.2 is \"error: the trait <code>core::ops::Mul&lt;_&gt;</code> is not implemented for the type <code>_</code>\"</p>\n\n<p>I think that I need to specify the type of <code>i</code> somehow but I am struggling to find the documentation on how to do so.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1429449831, "post_id": 29730318, "comment_id": 47594312, "body": "Well, keep in mind that in Rust, you must know the size of what you&#39;re returning during compile time. What exactly is size of <code>&lt;T:Storage&gt;</code> during compile time?"}], "answers": [{"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1429455718, "post_id": 29731108, "comment_id": 47596319, "body": "Thank you so much! I&#39;m wondering what the difference between <code>pub struct DataVolume&lt;T: Storage&gt; {...}</code> vs <code>pub struct DataVolume&lt;T&gt; where T: Storage {...}</code> is... Is the first usage deprecated version of the second?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 2, "creation_date": 1429455850, "post_id": 29731108, "comment_id": 47596362, "body": "@JohnFrancis they are <i>basically</i> the same, but <code>where</code> did come second. I prefer the <code>where</code> form because it gets all ugly and twisted trying to cram it all in <code>&lt;&gt;</code>. The only difference I know of is that the first form allows usage of <code>?Sized</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1429453333, "creation_date": 1429453333, "answer_id": 29731108, "question_id": 29730318, "link": "https://stackoverflow.com/questions/29730318/incompatible-type-for-trait-when-implementing-the-trait-using-generics/29731108#29731108", "title": "Incompatible type for trait when implementing the trait using generics", "body": "<p>Your trait definition says:</p>\n\n<pre><code>fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;Storage&gt;&gt;\n</code></pre>\n\n<p>but your implementation is</p>\n\n<pre><code>fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt;\n</code></pre>\n\n<p>As the compiler is telling you - these are not compatible. The trait definition says that you will be returning an <em>unsized type</em> (which may or may not be possible, depending). The implementation says you are returning a <em>specific</em> type, but one that will be determined at compile time.</p>\n\n<p>Let's pick the generic solution, as the compiler will <em>monomorphize</em> (generate specialized code for) each type you use. This can be faster but involve code bloat. Change your trait to:</p>\n\n<pre><code>pub trait Storable&lt;T&gt;\n    where T: Storage\n{\n    fn get_nblocks(&amp;self) -&gt; usize;\n    fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt;;\n}\n</code></pre>\n\n<p>The whole program will then look like (<a href=\"http://is.gd/usVurY\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\npub enum StorageType {\n    // ...\n}\n\npub trait Storable&lt;T&gt;\n    where T: Storage\n{\n    fn get_nblocks(&amp;self) -&gt; usize;\n    fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt;;\n}\n\npub trait Storage {\n    fn store(&amp;mut self, data: &amp;Storable&lt;Self&gt;);\n    fn get_type(&amp;self) -&gt; &amp;StorageType;\n}\n\npub struct DataVolume&lt;T&gt;\n    where T: Storage\n{\n    nblocks: usize,\n    storage: Rc&lt;RefCell&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; DataVolume&lt;T&gt;\n    where T: Storage\n{\n    pub fn new(nblocks: usize, storage: Rc&lt;RefCell&lt;T&gt;&gt;) -&gt; DataVolume&lt;T&gt; {\n        let this = DataVolume { nblocks: nblocks, storage: storage.clone() };\n        storage.borrow_mut().store(&amp;this);\n        this\n    }\n}\n\nimpl&lt;T&gt; Storable&lt;T&gt; for DataVolume&lt;T&gt;\n    where T: Storage\n{\n    fn get_nblocks(&amp;self) -&gt; usize {\n        self.nblocks\n    }\n    fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt; {\n        self.storage.clone()\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 29731108, "answer_count": 1, "score": 0, "last_activity_date": 1429495723, "creation_date": 1429449132, "last_edit_date": 1429495723, "question_id": 29730318, "link": "https://stackoverflow.com/questions/29730318/incompatible-type-for-trait-when-implementing-the-trait-using-generics", "title": "Incompatible type for trait when implementing the trait using generics", "body": "<p>Compiling the following code:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\npub enum StorageType {\n    // ...\n}\n\npub trait Storable {\n    fn get_nblocks(&amp;self) -&gt; usize;\n    fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;Storage&gt;&gt;;\n}\n\npub trait Storage {\n    fn store(&amp;mut self, data: &amp;Storable);\n    fn get_type(&amp;self) -&gt; &amp;StorageType;\n}\n\npub struct DataVolume&lt;T: Storage&gt; {\n    nblocks: usize,\n    storage: Rc&lt;RefCell&lt;T&gt;&gt;,\n}\nimpl&lt;T: Storage&gt; DataVolume&lt;T&gt; {\n    pub fn new(nblocks: usize, storage: Rc&lt;RefCell&lt;T&gt;&gt;) -&gt; DataVolume&lt;T&gt; {\n        let this = DataVolume { nblocks: nblocks, storage: storage.clone() };\n        storage.borrow_mut().store(&amp;this);\n        this\n    }\n}\nimpl&lt;T: Storage&gt; Storable for DataVolume&lt;T&gt; {\n    fn get_nblocks(&amp;self) -&gt; usize {\n        self.nblocks\n    }\n    fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt; {\n        self.storage.clone()\n    }\n}\n</code></pre>\n\n<p>gives me:</p>\n\n<pre><code>src/store.rs:37:5: 39:6 error: method `get_storage` has an incompatible type\n for trait: expected trait store::Storage, found type parameter [E0053]\nsrc/store.rs:37     fn get_storage(&amp;self) -&gt; Rc&lt;RefCell&lt;T&gt;&gt; {\nsrc/store.rs:38         self.storage.clone()\nsrc/store.rs:39     }\nerror: aborting due to previous error\n</code></pre>\n\n<p>I tried many things, and this is what I thought would finally be correct...\nIs my design of data structures itself wrong in the Rust world?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 11, "creation_date": 1429430621, "post_id": 29726730, "comment_id": 47588524, "body": "You cannot. The whole idea of private things is that they cannot be used outside of the module they are defined."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429442321, "post_id": 29726730, "comment_id": 47591780, "body": "Why do you need the <code>AsInner</code> trait?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1429453602, "post_id": 29726730, "comment_id": 47595550, "body": "I agree with @DanielFath - now that this question has been answered with resounding certainty, perhaps you should ask another question and try to avoid <a href=\"http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">the XY problem</a> (if applicable)."}, {"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "edited": false, "score": 1, "creation_date": 1429472730, "post_id": 29726730, "comment_id": 47602999, "body": "I was trying to convert an <code>Ipv4Addr</code> to an int, I thought I could read the underlying <code>in_addr</code>. But it seems using the octets is a better idea. Thanks for replying everyone."}], "answers": [{"comments": [{"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "edited": false, "score": 0, "creation_date": 1429472798, "post_id": 29731005, "comment_id": 47603031, "body": "Thanks, I added some explanation about what I&#39;m trying to do."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1429452822, "creation_date": 1429452822, "answer_id": 29731005, "question_id": 29726730, "link": "https://stackoverflow.com/questions/29726730/how-do-i-use-a-private-trait-from-another-module/29731005#29731005", "title": "How do I use a private trait from another module?", "body": "<p>Vladimir Matveev said it best:</p>\n\n<blockquote>\n  <p>You cannot. The whole idea of private things is that they cannot be used outside of the module they are defined.</p>\n</blockquote>\n"}], "owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 519, "favorite_count": 0, "accepted_answer_id": 29731005, "answer_count": 1, "score": 0, "last_activity_date": 1429472775, "creation_date": 1429426211, "last_edit_date": 1429472775, "question_id": 29726730, "link": "https://stackoverflow.com/questions/29726730/how-do-i-use-a-private-trait-from-another-module", "title": "How do I use a private trait from another module?", "body": "<p>I am trying to run the following snippet:</p>\n\n<pre><code>use std::net::Ipv4Addr;\nuse std::ffi::CString;\nuse std::sys_common::AsInner;\n\nfn main() {\n    let ip: Ipv4Addr = Ipv4Addr::new(127,0,0,1);\n    println!(\"{}\", ip.as_inner().s_addr);\n}\n</code></pre>\n\n<p>This fails with</p>\n\n<pre><code>test.rs:3:5: 3:29 error: trait `AsInner` is private\ntest.rs:3 use std::sys_common::AsInner;\n              ^~~~~~~~~~~~~~~~~~~~~~~~\ntest.rs:7:20: 7:33 error: source trait is private\ntest.rs:7     println!(\"{}\", ip.as_inner().s_addr);\n                             ^~~~~~~~~~~~~\nnote: in expansion of format_args!\n&lt;std macros&gt;:2:25: 2:56 note: expansion site\n&lt;std macros&gt;:1:1: 2:62 note: in expansion of print!\n&lt;std macros&gt;:3:1: 3:54 note: expansion site\n&lt;std macros&gt;:1:1: 3:58 note: in expansion of println!\ntest.rs:7:5: 7:42 note: expansion site\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I do see that the <code>AsInner</code> trait is private in <a href=\"http://doc.rust-lang.org/nightly/src/std/net/ip.rs.html#238\" rel=\"nofollow\">http://doc.rust-lang.org/nightly/src/std/net/ip.rs.html#238</a>\nHow do I use the trait?</p>\n\n<p>Edit:\nI was trying to convert an Ipv4Addr to an int, I thought I could read the underlying in_addr. But it seems using the octets is a better idea.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429383155, "post_id": 29720886, "comment_id": 47577369, "body": "<code>Vec.push</code> adds referenced elements to a <code>Vector</code>, allocating resources inside <code>Vector</code>."}], "answers": [{"comments": [{"owner": {"reputation": 888, "user_id": 1122242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c94e800354854bafd803f7ff56239e0?s=128&d=identicon&r=PG", "display_name": "moveaway00", "link": "https://stackoverflow.com/users/1122242/moveaway00"}, "edited": false, "score": 1, "creation_date": 1429413961, "post_id": 29722619, "comment_id": 47585097, "body": "If you can ensure ASCII, you should probably be using <code>Vec&lt;u8&gt;</code> and <code>&amp;[u8]</code> anyway."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429447262, "post_id": 29722619, "comment_id": 47593400, "body": "Pedantically, ensuring ASCII should be done with something like the types provided by <a href=\"https://crates.io/crates/ascii\" rel=\"nofollow noreferrer\"><code>ascii</code></a>: <code>u8</code> isn&#39;t right as (e.g.) 0x80 is a valid byte but not valid ASCII."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429454349, "post_id": 29722619, "comment_id": 47595796, "body": "@huon-dbaupp I agree the crate is a better choice, and I&#39;ve updated my post. However, I <i>did</i> take care to <code>assert!((b as u8) &lt; 128)</code> to avoid non-ASCII bytes in my simple newtype ^_^."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 888, "user_id": 1122242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c94e800354854bafd803f7ff56239e0?s=128&d=identicon&r=PG", "display_name": "moveaway00", "link": "https://stackoverflow.com/users/1122242/moveaway00"}, "edited": false, "score": 0, "creation_date": 1429493801, "post_id": 29722619, "comment_id": 47609114, "body": "I was more addressing @moveaway00. :) (Should&#39;ve @&#39;d)"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429988264, "post_id": 29722619, "comment_id": 47863877, "body": "<a href=\"http://is.gd/OEGCSL\" rel=\"nofollow noreferrer\">This is what I came up with</a> after being heavily informed by your answer. I would love to get some feedback on it. I&#39;m a little concerned about the casts, and I&#39;m not family with all the ramifications of using <code>unwrap</code>, but in general it seems to be frowned upon."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1430014086, "last_edit_date": 1495540837, "creation_date": 1429389725, "answer_id": 29722619, "question_id": 29720886, "link": "https://stackoverflow.com/questions/29720886/functional-way-to-split-string-into-offset-substrings/29722619#29722619", "title": "Functional way to split string into offset substrings", "body": "<p>You really want the <a href=\"http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.windows\" rel=\"nofollow noreferrer\"><code>windows</code></a> iterator, but that only exists for slices, not strings (see note below). Since you have ASCII data, we can create a type that enforces that constraint and then uses some unsafe code. We the programmer can guarantee that the unsafe code <em>is</em> safe <strong>because we are ensuring the data is only ASCII</strong>.</p>\n\n<p>As huon-dbaupp <a href=\"https://stackoverflow.com/users/1256624/huon-dbaupp\">points out</a>, you should try to use the <a href=\"https://crates.io/crates/ascii\" rel=\"nofollow noreferrer\">ascii crate</a>. It doesn't seem to have <code>windows</code> right now, but you have my permission to submit the following code (properly adapted) to that crate, if you like. ^_^</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::slice;\nuse std::str;\n\nstruct AsciiString {\n    bytes: Vec&lt;u8&gt;,\n}\n\nimpl AsciiString {\n    fn new(s: &amp;str) -&gt; AsciiString {\n        for b in s.bytes() {\n            assert!((b as u8) &lt; 128);\n        }\n        AsciiString { bytes: s.bytes().collect() }\n    }\n\n    fn windows(&amp;self, n: usize) -&gt; Windows {\n        Windows { iter: self.bytes.windows(n) }\n    }\n}\n\nstruct Windows&lt;'a&gt; {\n    iter: slice::Windows&lt;'a, u8&gt;,\n}\n\nimpl&lt;'a&gt; Iterator for Windows&lt;'a&gt; {\n    type Item = &amp;'a str;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a str&gt; {\n        self.iter.next().map(|bytes| {\n            unsafe { str::from_utf8_unchecked(bytes) }\n        })\n    }\n}\n\nfn main() {\n    let ascii = AsciiString::new(\"ABCDEF\");\n    for i in ascii.windows(3) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>I'm really surprised that the slices.push(&amp;s[i..(i+n)]) above even compiles. Is it just returning pointers to various locations of the input?</p>\n</blockquote>\n\n<p>This is a tricky one, but it makes sense once you understand it (isn't that always the case?)</p>\n\n<p>When you use the <a href=\"http://doc.rust-lang.org/nightly/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code></a> trait, note that it is implemented for <code>str</code>, not <code>&amp;str</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn index(&amp;'a self, index: Idx) -&gt; &amp;'a Self::Output;\n\nimpl Index&lt;Range&lt;usize&gt;&gt; for str { ... }\n</code></pre>\n\n<p>That means that the index returns a value <em>with the same lifetime as the input</em>. In this case, you start with a <code>&amp;'foo str</code> and end up with a <code>&amp;'foo str</code>. Conceptually, yes, a <code>&amp;str</code> is a pointer to a chunk of memory and a length. When you slice it, you are just adjusting the pointer and the length, but the underlying storage will still live for the same lifetime.</p>\n\n<h2>Standard warning about splitting strings</h2>\n\n<p>Be aware of issues with bytes / characters / code points / graphemes whenever you start splitting strings. With anything more complicated than ASCII characters, one character is <strong>not</strong> one byte and string slicing operates <strong>on bytes</strong>! There is also the concept of Unicode code points, but multiple Unicode characters may combine to form what a human thinks of as a single character. This stuff is <strong>non-trivial</strong>.</p>\n"}, {"tags": [], "owner": {"reputation": 538, "user_id": 1031252, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8397aac7eb335001671afc40caa1a3b1?s=128&d=identicon&r=PG", "display_name": "KOlegA", "link": "https://stackoverflow.com/users/1031252/kolega"}, "is_accepted": false, "score": 4, "last_activity_date": 1434540473, "creation_date": 1434540473, "answer_id": 30890221, "question_id": 29720886, "link": "https://stackoverflow.com/questions/29720886/functional-way-to-split-string-into-offset-substrings/30890221#30890221", "title": "Functional way to split string into offset substrings", "body": "<pre><code>fn offset_slices(s: &amp;str, n: usize) -&gt; Vec&lt;&amp;str&gt; {\n    (0 .. s.len() - n + 1).map(|i| &amp;s[i .. i + n]).collect()\n}\n</code></pre>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1735, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1434540473, "creation_date": 1429380142, "question_id": 29720886, "link": "https://stackoverflow.com/questions/29720886/functional-way-to-split-string-into-offset-substrings", "title": "Functional way to split string into offset substrings", "body": "<p>I'm on <code>rustc 1.0.0-beta (9854143cb 2015-04-02) (built 2015-04-02)</code></p>\n\n<p>My goal is to split a string of length <code>n</code> into <code>n-k+1</code> offset substrings of length <code>k</code>. What I mean by that is if you have a string:</p>\n\n<p><code>ABCDEF</code></p>\n\n<p>I'm trying to obtain a vector/iterator that contains offset substrings of arbitrary length <code>k</code>. For example, <code>k=3</code> would yield</p>\n\n<pre><code>ABC\n BCD\n  CDE\n   DEF\n</code></pre>\n\n<p>And <code>k=2</code> would yield:</p>\n\n<pre><code>AB\n BC\n  CD\n   DE\n    EF\n</code></pre>\n\n<p>Note that the whitespace is only included above to align the substrings to show how they are related. The output vector would only include <code>AB</code>,<code>BC</code>, <code>CD</code>, etc. Also, it's ok to only support ASCII, although I would prefer a safer more generic solution.</p>\n\n<p>As painful as it is to look at, the following procedural code seems to work:</p>\n\n<pre><code>fn offset_slices(s: &amp;str, n: usize) -&gt; Vec&lt;&amp;str&gt; {\n    let mut slices: Vec&lt;&amp;str&gt; = Vec::new();\n    for (i,_) in s.chars().enumerate() {\n        if i &gt; s.len() - n {\n            break;\n        }\n        slices.push(&amp;s[i..(i+n)]);\n    }\n    slices\n}\n</code></pre>\n\n<p>But it's nasty and I would prefer a more functional solution. I spent a couple hours trying to figure out a way, and learned a lot in the process, but I'm stumped on this one.</p>\n\n<p>Any ideas?</p>\n\n<p>PS - I'm really surprised that the <code>slices.push(&amp;s[i..(i+n)])</code> above even compiles. Is it just returning pointers to various locations of the input?</p>\n"}, {"tags": ["closures", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "edited": false, "score": 0, "creation_date": 1429367098, "post_id": 29715275, "comment_id": 47571612, "body": "Thank you. Do you know where I can learn more about bound vs concrete lifetimes? I found a post on reddit, but it didn&#39;t help me much."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1429348510, "creation_date": 1429348510, "answer_id": 29715275, "question_id": 29714934, "link": "https://stackoverflow.com/questions/29714934/how-can-i-specify-a-lifetime-for-closure-arguments/29715275#29715275", "title": "How can I specify a lifetime for closure arguments?", "body": "<p>Your implementation <code>impl&lt;F&gt; OptionalFirst for F where F: Fn(&amp;[usize]) -&gt; &amp;[usize]</code> is expecting a <em>bound</em> lifetime parameter, for the constraint <code>F: Fn(&amp;[usize]) -&gt; &amp;[usize]</code> is, expanded to full form: <code>F: for&lt;'a&gt; Fn(&amp;'a [usize]) -&gt; &amp;'a [usize]</code>.</p>\n\n<p>That is, at the time you call the function, it will determine what values to select for the lifetime (they are generics).</p>\n\n<p>A closure, however, cannot have any bound lifetime parameters; they are by stuck using <em>concrete</em> lifetime parameters. They lack the facility to wire output lifetimes to input lifetimes generically as you want: they are by very design concrete and not generic. I haven\u2019t thought about this in great depth, but it <em>might</em> be possible to counteract this for generic lifetime parameters; it is not, however, something that is implemented as far as I am aware.</p>\n\n<p>If you want something like this, try using a function rather than a closure. When you\u2019re not using any of the environment there\u2019s no benefit to using closures beyond the typically lower verbosity.</p>\n\n<p>Here\u2019s what you end up with:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn bc(x: &amp;[usize]) -&gt; &amp;[usize] {\n    if x.len() != 0 {\n        &amp;x[..1]\n    } else {\n        &amp;x[..0]\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/NK46iT\" rel=\"nofollow\">Playpen</a></p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 0, "last_activity_date": 1429442019, "creation_date": 1429442019, "answer_id": 29729084, "question_id": 29714934, "link": "https://stackoverflow.com/questions/29714934/how-can-i-specify-a-lifetime-for-closure-arguments/29729084#29729084", "title": "How can I specify a lifetime for closure arguments?", "body": "<p>You can create a closure with bound lifetime parameters, you just have to get the compiler to infer that type correctly. It can be done like this:</p>\n\n<pre><code>fn main() {\n    let bc: Box&lt;Fn(&amp;[usize]) -&gt; &amp;[usize]&gt; = Box::new(\n        |x| {\n            if x.len() != 0 {\n                &amp;x[..1]\n            }\n            else {\n                &amp;x[..0]\n            }\n        });\n\n    let a: [usize; 3] = [1, 2, 3];\n    let b: &amp;[usize] = bc(&amp;a);\n    println!(\"{:?}\", b);\n}\n</code></pre>\n\n<p>However, what I don't know is how to cast it further into <code>Box&lt;OptionalFirst&gt;</code>.</p>\n"}], "owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 759, "favorite_count": 0, "accepted_answer_id": 29715275, "answer_count": 2, "score": 0, "last_activity_date": 1429442019, "creation_date": 1429346614, "last_edit_date": 1429346994, "question_id": 29714934, "link": "https://stackoverflow.com/questions/29714934/how-can-i-specify-a-lifetime-for-closure-arguments", "title": "How can I specify a lifetime for closure arguments?", "body": "<p>Playpen link: <a href=\"http://is.gd/EpX6lM\" rel=\"nofollow\">http://is.gd/EpX6lM</a></p>\n\n<p>I have a closure that takes a slice and returns a subslice of it. Compiling the following code on rust-1.0.0-beta-2 fails:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait OptionalFirst {\n    fn optional_first&lt;'a&gt;(&amp;self, x: &amp;'a [usize]) -&gt; &amp;'a [usize];\n}\n\nimpl&lt;F&gt; OptionalFirst for F where F: Fn(&amp;[usize]) -&gt; &amp;[usize] {\n    fn optional_first&lt;'a&gt;(&amp;self, x: &amp;'a [usize]) -&gt; &amp;'a [usize] {\n        (*self)(x)\n    }\n}\n\nfn main() {\n    let bc: Box&lt;OptionalFirst&gt; = Box::new(\n        |x: &amp;[usize]| -&gt; &amp;[usize] {\n            if x.len() != 0 {\n                &amp;x[..1]\n            }\n            else {\n                &amp;x[..0]\n            }\n        }) as Box&lt;OptionalFirst&gt;;\n\n    let a: [usize; 3] = [1, 2, 3];\n    let b: &amp;[usize] = bc.optional_first(&amp;a);\n    println!(\"{:?}\", b);\n}\n</code></pre>\n\n<p>I know how to define a lifetime in a closure's type (using <code>for &lt;'a&gt;</code>), but I don't know how to specify it in the closure's implementation.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 0, "creation_date": 1429328587, "post_id": 29711687, "comment_id": 47560683, "body": "Separating the loops and using indexing doesn\u2019t seem to have worked."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 0, "creation_date": 1429358916, "post_id": 29711687, "comment_id": 47568712, "body": "@yonran, you misinterpretered slightly: I wasn&#39;t suggesting to do two separate loops, but you are correct that my original suggestion doesn&#39;t solve the fundamental issue. I&#39;ve now been able to test properly, and edited in a new version that does work."}, {"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 1, "creation_date": 1429370125, "post_id": 29711687, "comment_id": 47572724, "body": "Thanks. Do you know why <code>for child in root.children.iter_mut()</code> borrows <code>root.children</code> forever if there is a <code>return</code> inside, but is fine when you use a local variable instead?"}, {"owner": {"reputation": 44207, "user_id": 141719, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5026f7977fda423dc990cc74b2ad4c9d?s=128&d=identicon&r=PG&f=1", "display_name": "HighCommander4", "link": "https://stackoverflow.com/users/141719/highcommander4"}, "edited": false, "score": 0, "creation_date": 1504636531, "post_id": 29711687, "comment_id": 79083004, "body": "This formulation is not correct. Consider the simple linear tree 1 -- 2 -- 3 -- 4 as input (where 1 is the root, and each node has just one child). <code>find_parent_mut(root, 4)</code> will return the <code>2</code> node for this tree, when the correct result would be the <code>3</code> node. Basically, this function will never return a result more than one level deep in the tree."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 3, "last_activity_date": 1429358815, "last_edit_date": 1429358815, "creation_date": 1429318846, "answer_id": 29711687, "question_id": 29711348, "link": "https://stackoverflow.com/questions/29711348/multiple-mutable-borrows-during-a-depth-first-tree-search/29711687#29711687", "title": "Multiple mutable borrows during a depth-first tree search", "body": "<p>One can do this in a single pass by doing the search, recording some data from it, and then computing the return value efficiently outside the loop:</p>\n\n<pre><code>let mut found = Err(());\nfor (i, child) in root.children.iter_mut().enumerate() {\n    if child.id == id {\n        found = Ok(None);\n        break;\n    }  else find_parent_mut(child, id).is_some() {\n        found = Ok(Some(i));\n        break;\n    }\n}\nmatch found {\n    Ok(Some(i)) =&gt; Some(&amp;mut root.children[i]),\n    Ok(None) =&gt; Some(root),\n    Err(()) =&gt; None,\n}\n</code></pre>\n\n<p>This avoids the issues caused by conditionally returning mutable variables (which is the problems you and my answer below were meeting) by completely avoiding returns inside the inner loop.</p>\n\n<hr>\n\n<p>Old/incorrect answer:</p>\n\n<p>I'm unable to test my suggestions right now, but I believe the best way to solve this is to return <code>root</code> outside the loop.</p>\n\n<pre><code>for child in &amp;mut root.children {\n    if child.id == id {\n        found = true;\n        break\n    } ...\n}\nif found {\n    Some(root)\n} else {\n    None\n}\n</code></pre>\n\n<p>This (hopefully) ensures that <code>root</code> isn't borrowed via <code>children</code> when it is being manipulated.</p>\n\n<p>However I suspect the early return inside the main loop may interfere, in which case one might just have to fall back to integers and indexing:</p>\n\n<pre><code>for i in 0..root.children.len() {\n    if root.children[i].id == id {\n        return Some(root)\n    ...\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1429358412, "post_id": 29713710, "comment_id": 47568550, "body": "NB. this unfortunately does two loops over the array."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 3, "last_activity_date": 1429338016, "creation_date": 1429338016, "answer_id": 29713710, "question_id": 29711348, "link": "https://stackoverflow.com/questions/29711348/multiple-mutable-borrows-during-a-depth-first-tree-search/29713710#29713710", "title": "Multiple mutable borrows during a depth-first tree search", "body": "<p>I managed to have it working this way:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn find_parent_mut&lt;'a&gt;(root: &amp;'a mut TreeNode, id: i32)\n        -&gt; Option&lt;&amp;'a mut TreeNode&gt; {\n    if root.children.iter().any(|child| {child.id == id}) {\n        return Some(root); \n    }\n    for child in &amp;mut root.children {\n        match find_parent_mut(child, id) {\n            Some(result) =&gt; return Some(result),\n            None =&gt; {}\n        }\n    }\n    None\n}\n</code></pre>\n\n<p>First in you second attempt, you wrote <code>for child in root.children</code> instead of the <code>for child in &amp;mut root.children</code> (note the missing <code>&amp;mut</code>),which caused root.children to be consumed by the loop instead of just iterated over, hence the <code>cannot move out of borrowed content</code> error.</p>\n\n<p>I also folded it in a more iterator-ich way, using the <a href=\"http://doc.rust-lang.org/core/iter/trait.Iterator.html#method.any\" rel=\"nofollow\"><code>any(..)</code></a> function.</p>\n\n<p>For the second loop, I'm not exactly sure what was going on, by apparently binding the references to variables was confusing the borrow-checker. I removed any temporary variable, and now it compiles.</p>\n"}], "owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 561, "favorite_count": 1, "accepted_answer_id": 29713710, "answer_count": 2, "score": 4, "last_activity_date": 1483405428, "creation_date": 1429315606, "last_edit_date": 1495535435, "question_id": 29711348, "link": "https://stackoverflow.com/questions/29711348/multiple-mutable-borrows-during-a-depth-first-tree-search", "title": "Multiple mutable borrows during a depth-first tree search", "body": "<p>How would one restructure this function that does a depth-first search and returns the parent of the matching node?</p>\n\n<p>I know that variations of this problem have come up very often (e.g. <a href=\"https://stackoverflow.com/questions/26563762/multiple-mutable-borrows-when-generating-a-tree-structure-with-a-recursive-funct\">Multiple mutable borrows when generating a tree structure with a recursive function in Rust</a>, <a href=\"http://www.reddit.com/r/rust/comments/2wggjb/mutable_borrow_not_ending_where_expected/\" rel=\"nofollow noreferrer\">Mut borrow not ending where expected</a>), but I still can\u2019t figure out how to modify it to work. I have tried variations using slices, <code>std::mem::drop</code>, and adding lifetime parameters <code>where 'a: 'b</code> but I still haven\u2019t figured out write it without conditionally mutably borrowing a variable in one branch and then using the variable in another branch.</p>\n\n<pre><code>#[derive(Clone, Debug)]\nstruct TreeNode {\n    id: i32,\n    children: Vec&lt;TreeNode&gt;,\n}\n\n// Returns a mutable reference to the parent of the node that matches the given id.\nfn find_parent_mut&lt;'a&gt;(root: &amp;'a mut TreeNode, id: i32) -&gt; Option&lt;&amp;'a mut TreeNode&gt; {\n    for child in root.children.iter_mut() {\n        if child.id == id {\n            return Some(root);\n        } else {\n            let descendent_result = find_parent_mut(child, id);\n            if descendent_result.is_some() {\n                return descendent_result;\n            }\n        }\n    }\n    None\n}\n\nfn main() {\n    let mut tree = TreeNode {\n        id: 1,\n        children: vec![TreeNode {\n                           id: 2,\n                           children: vec![TreeNode {\n                                              id: 3,\n                                              children: vec![],\n                                          }],\n                       }],\n    };\n    let a: Option&lt;&amp;mut TreeNode&gt; = find_parent_mut(&amp;mut tree, 3);\n    assert_eq!(a.unwrap().id, 2);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*root` as mutable more than once at a time\n  --&gt; src/main.rs:11:25\n   |\n9  |     for child in root.children.iter_mut() {\n   |                  ------------- first mutable borrow occurs here\n10 |         if child.id == id {\n11 |             return Some(root);\n   |                         ^^^^ second mutable borrow occurs here\n...\n20 | }\n   | - first borrow ends here\n</code></pre>\n\n<p>Here it is with @huon\u2019s suggestions and continued compiler errors:</p>\n\n<pre><code>fn find_parent_mut&lt;'a&gt;(root: &amp;'a mut TreeNode, id: i32) -&gt; Option&lt;&amp;'a mut TreeNode&gt; {\n    for child in root.children {\n        if child.id == id {\n            return Some(root);\n        }\n    }\n    for i in 0..root.children.len() {\n        let child: &amp;'a mut TreeNode = &amp;mut root.children[i];\n        let descendent_result = find_parent_mut(child, id);\n        if descendent_result.is_some() {\n            return descendent_result;\n        }\n    }\n    None\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/main.rs:9:18\n  |\n9 |     for child in root.children {\n  |                  ^^^^ cannot move out of borrowed content\n\nerror[E0499]: cannot borrow `root.children` as mutable more than once at a time\n  --&gt; src/main.rs:15:44\n   |\n15 |         let child: &amp;'a mut TreeNode = &amp;mut root.children[i];\n   |                                            ^^^^^^^^^^^^^\n   |                                            |\n   |                                            second mutable borrow occurs here\n   |                                            first mutable borrow occurs here\n...\n22 | }\n   | - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 1, "creation_date": 1429313622, "post_id": 29711017, "comment_id": 47557760, "body": "It does only take one argument, it looks like you meant <code>IpAddr::V4(a) =&gt; IpNetwork::V4(Ipv4Network::new(a, prefix))</code>"}, {"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "reply_to_user": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1429314694, "post_id": 29711017, "comment_id": 47558010, "body": "Thanks, my bad. Please make this an answer, I can accept that."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 2, "last_activity_date": 1429314867, "creation_date": 1429314867, "answer_id": 29711259, "question_id": 29711017, "link": "https://stackoverflow.com/questions/29711017/error-while-instantiating-an-enum-in-rust/29711259#29711259", "title": "Error while instantiating an enum in rust", "body": "<p>The variants are of the form <code>V4(Ipv4Network)</code>, so you should be passing an <code>Ipv4Network</code> such as <code>Ipv4Network::new(a, prefix)</code>:</p>\n\n<pre><code>IpAddr::V4(a) =&gt; IpNetwork::V4(Ipv4Network::new(a, prefix)),\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 1, "last_activity_date": 1429364204, "last_edit_date": 1429364204, "creation_date": 1429354486, "answer_id": 29716274, "question_id": 29711017, "link": "https://stackoverflow.com/questions/29711017/error-while-instantiating-an-enum-in-rust/29716274#29716274", "title": "Error while instantiating an enum in rust", "body": "<p>There are two errors in your code:</p>\n\n<p>First error is that you e.g. construct <code>IpNetwork::V4</code> by passing a tuple of address and a prefix. If you look at how you defined <code>IpNetwork</code>:</p>\n\n<pre><code>// A network\npub enum IpNetwork {\n   V4(Ipv4Network),\n   V6(Ipv6Network),\n}\n</code></pre>\n\n<p>You need to supply <code>IpNetwork::V4</code> with <code>struct Ipv4Network</code> and not just the tuple of <code>(a, prefix)</code>. Same goes for <code>IpNetwork::V6</code>. With these adjustment your match brace becomes:</p>\n\n<pre><code>pub fn new(ip: IpAddr, prefix: u8) -&gt; IpNetwork {\n    match ip {\n        IpAddr::V4(a) =&gt; IpNetwork::V4(Ipv4Network::new(a, prefix)),\n        IpAddr::V6(a) =&gt; IpNetwork::V6(Ipv6Network::new(a, prefix)),\n    }\n}\n</code></pre>\n\n<p>Second error is in main method. You are constructing <code>Ipv4Addr</code> and trying to pass it to <code>IpNetwork</code> as a parameter. While <code>IpNetwork</code> only accepts <code>IpAddr</code>. So you'll missing this part:</p>\n\n<pre><code>let addr = IpAddr::V4(ip);\nlet cidr = IpNetwork::new(addr, 24);\n</code></pre>\n\n<p>Here is <a href=\"http://is.gd/rxMqZ3\" rel=\"nofollow\">playpen link</a> to solution that fails on unstable parameters. </p>\n\n<p>For this snippet to work you'll need to make a crate and add <code>#![feature(ip_addr)]</code> for it to pass compiler checks. <code>IpAddr</code> and variants are apparently being reworked.</p>\n"}], "owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 29716274, "answer_count": 2, "score": 0, "last_activity_date": 1429364204, "creation_date": 1429313072, "question_id": 29711017, "link": "https://stackoverflow.com/questions/29711017/error-while-instantiating-an-enum-in-rust", "title": "Error while instantiating an enum in rust", "body": "<p>I am trying to do this:</p>\n\n<pre><code>use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\n// A network\npub enum IpNetwork {\n    V4(Ipv4Network),\n    V6(Ipv6Network),\n}\n\npub struct Ipv4Network {\n    addr: Ipv4Addr,\n    prefix: u8,\n}\n\npub struct Ipv6Network {\n    addr: Ipv6Addr,\n    prefix: u8,\n}\n\nimpl Ipv4Network {\n    fn new(addr: Ipv4Addr, prefix: u8) -&gt; Ipv4Network {\n        Ipv4Network { addr:addr, prefix:prefix }\n    }\n}\n\nimpl Ipv6Network {\n    fn new(addr: Ipv6Addr, prefix: u8) -&gt; Ipv6Network {\n        Ipv6Network { addr:addr, prefix:prefix }\n    }\n}\n\nimpl IpNetwork {\n    pub fn new(ip: IpAddr, prefix: u8) -&gt; IpNetwork {\n        match ip {\n            IpAddr::V4(a) =&gt; IpNetwork::V4(a, prefix),\n            IpAddr::V6(a) =&gt; IpNetwork::V6(a, prefix),\n        }\n    }\n}\n\nfn main() {\n    let ip = Ipv4Addr::new(77, 88, 21, 11);\n    let cidr = IpNetwork::new(ip, 24);\n}\n</code></pre>\n\n<p>And this gives me:</p>\n\n<pre><code>src/lib.rs:34:30: 34:54 error: this function takes 1 parameter but 2 parameters were supplied [E0061]\nsrc/lib.rs:34             IpAddr::V4(a) =&gt; IpNetwork::V4(a, prefix),\n                                           ^~~~~~~~~~~~~~~~~~~~~~~~\nsrc/lib.rs:35:30: 35:54 error: this function takes 1 parameter but 2 parameters were supplied [E0061]\nsrc/lib.rs:35             IpAddr::V6(a) =&gt; IpNetwork::V6(a, prefix),\n                                           ^~~~~~~~~~~~~~~~~~~~~~~~\nsrc/lib.rs:42:31: 42:33 error: mismatched types:\n expected `std::net::ip::IpAddr`,\n    found `std::net::ip::Ipv4Addr`\n(expected enum `std::net::ip::IpAddr`,\n    found struct `std::net::ip::Ipv4Addr`) [E0308]\nsrc/lib.rs:42     let cidr = IpNetwork::new(ip, 24);\n                                            ^~\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Why does rust think the constructor takes one argument?</p>\n"}, {"tags": ["stack", "rust", "inline-assembly"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1429312890, "post_id": 29709781, "comment_id": 47557528, "body": "What exactly is your question? Why do to manipulate the stack in this way, and why do you think anything should continue to work afterwards?"}, {"owner": {"reputation": 13, "user_id": 4802873, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45dd9d8700ae806cfb560a25fafefb21?s=128&d=identicon&r=PG&f=1", "display_name": "James", "link": "https://stackoverflow.com/users/4802873/james"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429375274, "post_id": 29709781, "comment_id": 47574562, "body": "I&#39;ve edited the question to make it clearer what I&#39;m asking. It&#39;s a learning exercise. Everything <i>should</i> work as before; the only thing that should fail is accessing local variables defined before the stack changed."}], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 4802873, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45dd9d8700ae806cfb560a25fafefb21?s=128&d=identicon&r=PG&f=1", "display_name": "James", "link": "https://stackoverflow.com/users/4802873/james"}, "edited": false, "score": 0, "creation_date": 1429736443, "post_id": 29723191, "comment_id": 47745585, "body": "Thanks for finding out where the program is crashing! I tried debugging the executable using visual studio but could not understand what was happening. Would it be possible to modify <code>%gs:0x330</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13, "user_id": 4802873, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45dd9d8700ae806cfb560a25fafefb21?s=128&d=identicon&r=PG&f=1", "display_name": "James", "link": "https://stackoverflow.com/users/4802873/james"}, "edited": false, "score": 0, "creation_date": 1429737683, "post_id": 29723191, "comment_id": 47746265, "body": "@James I honestly don&#39;t know, but my guess would be &quot;not without changing the Rust compiler&quot;. The comment from the source seems to indicate that this is a core part of the code generation."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1429393260, "creation_date": 1429393260, "answer_id": 29723191, "question_id": 29709781, "link": "https://stackoverflow.com/questions/29709781/calling-a-function-crashes-when-the-stack-pointer-is-changed-with-inline-assembl/29723191#29723191", "title": "Calling a function crashes when the stack pointer is changed with inline assembly", "body": "<p>Debugging the program with rust-lldb on x86_64 on OS X yields 300K stack traces, repeating these lines over and over:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>frame #299995: 0x00000001000063c4 a`rt::util::report_overflow::he556d9d2b8eebb88VbI + 36\nframe #299996: 0x0000000100006395 a`rust_stack_exhausted + 37\nframe #299997: 0x000000010000157f a`__morestack + 13\n</code></pre>\n\n<p><code>morestack</code> is assembly for each platform, like <a href=\"https://github.com/rust-lang/rust/blob/a81ce5f991148b3c701c6b4276cdcafe366cd8f4/src/rt/arch/i386/morestack.S\" rel=\"nofollow\"><code>i386</code></a> and <a href=\"https://github.com/rust-lang/rust/blob/a81ce5f991148b3c701c6b4276cdcafe366cd8f4/src/rt/arch/x86_64/morestack.S\" rel=\"nofollow\"><code>x86_64</code></a> \u2014 the i386 variant has more description that I think you will want to read carefully. This piece stuck out to me:</p>\n\n<blockquote>\n  <p>Each Rust function contains an LLVM-generated prologue that compares the stack space required for the current function to the space remaining in the current stack segment, maintained in a platform-specific TLS slot.</p>\n</blockquote>\n\n<p>Here's the first instructions of the <code>foo</code> method:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>a`foo::h5f80496ac1ee3d43zaa:\n   0x1000013e0:  cmpq   %gs:0x330, %rsp\n   0x1000013e9:  ja     0x100001405               ; foo::h5f80496ac1ee3d43zaa + 37\n   0x1000013eb:  movabsq $0x48, %r10\n   0x1000013f5:  movabsq $0x0, %r11\n-&gt; 0x1000013ff:  callq  0x100001572               ; __morestack\n</code></pre>\n\n<p>As you can see, I am about to call into <code>__morestack</code>, so the comparison check failed.</p>\n\n<p>I believe that this indicates that <strong>you cannot manipulate the stack pointer</strong> and attempt to call any Rust functions.</p>\n\n<p>As a side note, let's look at your <code>get_sp</code> assembly:</p>\n\n<pre><code>movq %rsp, $0\n</code></pre>\n\n<p>Doing a check check for <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_201.html\" rel=\"nofollow\">the semantics of <code>movq</code></a>:</p>\n\n<blockquote>\n  <p>Copies a quadword from the source operand (second operand) to the destination operand (first operand).</p>\n</blockquote>\n\n<p>That seems to indicate that your assembly is <em>backwards</em>, in addition to all the other problems.</p>\n"}], "owner": {"reputation": 13, "user_id": 4802873, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45dd9d8700ae806cfb560a25fafefb21?s=128&d=identicon&r=PG&f=1", "display_name": "James", "link": "https://stackoverflow.com/users/4802873/james"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 0, "accepted_answer_id": 29723191, "answer_count": 1, "score": -1, "last_activity_date": 1429393321, "creation_date": 1429306572, "last_edit_date": 1429393321, "question_id": 29709781, "link": "https://stackoverflow.com/questions/29709781/calling-a-function-crashes-when-the-stack-pointer-is-changed-with-inline-assembl", "title": "Calling a function crashes when the stack pointer is changed with inline assembly", "body": "<p>I have written some code that changes the current stack used by modifying the stack pointer in inline assembly. Although I can call functions and create local variables, calls to <code>println!</code> and some functions from <code>std::rt</code> result in the application terminating abnormally with signal 4 (illegal instruction) in <a href=\"http://is.gd/nirKJm\" rel=\"nofollow\">the playpen</a>. How should I improve the code to prevent crashes?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(asm, box_syntax)]\n\n#[allow(unused_assignments)]\n#[inline(always)]\nunsafe fn get_sp() -&gt; usize {\n    let mut result = 0usize;\n    asm!(\"\n        movq %rsp, $0\n        \"\n        :\"=r\"(result):::\"volatile\"\n    );\n    result\n}\n\n#[inline(always)]\nunsafe fn set_sp(value: usize) {\n    asm!(\"\n        movq $0, %rsp\n        \"\n        ::\"r\"(value)::\"volatile\"\n    );\n}\n\n#[inline(never)]\nunsafe fn foo() {\n    println!(\"Hello World!\");\n}\n\nfn main() {\n    unsafe {\n        let mut stack = box [0usize; 500];\n        let len = stack.len();\n        stack[len-1] = get_sp();\n        set_sp(std::mem::transmute(stack.as_ptr().offset((len as isize)-1)));\n        foo();\n        asm!(\"\n            movq (%rsp), %rsp\n            \"\n            ::::\"volatile\"\n        );\n    }\n}\n</code></pre>\n"}, {"tags": ["pointers", "rust"], "answers": [{"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 1, "last_activity_date": 1429305111, "last_edit_date": 1429305111, "creation_date": 1429291784, "answer_id": 29705816, "question_id": 29705268, "link": "https://stackoverflow.com/questions/29705268/reference-to-a-vector-still-prints-as-a-vector/29705816#29705816", "title": "Reference to a vector still prints as a vector?", "body": "<p>The magic is AFAIK in the formatter rather than the compiler. See for example:</p>\n\n<pre><code>fn take_val&lt;T&gt;(a:Vec&lt;T&gt; ) {}\nfn take_ref&lt;T&gt;(b:&amp;Vec&lt;T&gt;) {}\n\nfn main() {\n    let v = vec![1, 2, 3];\n    take_val(&amp;v);\n    take_ref(&amp;v);\n\n}\n</code></pre>\n\n<p>Fails with following error:</p>\n\n<pre><code>&lt;anon&gt;:6:14: 6:16 error: mismatched types:\n expected `collections::vec::Vec&lt;_&gt;`,\n    found `&amp;collections::vec::Vec&lt;_&gt;`\n(expected struct `collections::vec::Vec`,\n    found &amp;-ptr) [E0308]\n&lt;anon&gt;:6     take_val(&amp;v);\n</code></pre>\n\n<p>Which suggests this is due to formatter not wanting to show difference between a reference and a value. In older versions of Rust a <code>&amp;v</code> would have been shown as <code>&amp;[1, 2, 3]</code>, if my memory serves me correct.</p>\n\n<p><code>&amp;</code> has special meaning in Rust. It's not just a reference, it's a note that the value is borrowed to one or more functions/methods. </p>\n"}, {"comments": [{"owner": {"reputation": 1887, "user_id": 748876, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/0c5471ef371da37dc67677acad9ecc29?s=128&d=identicon&r=PG", "display_name": "speg", "link": "https://stackoverflow.com/users/748876/speg"}, "edited": false, "score": 0, "creation_date": 1429293668, "post_id": 29706013, "comment_id": 47548269, "body": "Thanks. I read the section on iterators and saw that the <code>for i in &amp;v</code> is giving me i as a reference to each element of v. The for loop is doing the magic of figuring out I want references to each element of the iterable \u2013 as opposed to trying to iterate through a pointer. Is that correct?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1887, "user_id": 748876, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/0c5471ef371da37dc67677acad9ecc29?s=128&d=identicon&r=PG", "display_name": "speg", "link": "https://stackoverflow.com/users/748876/speg"}, "edited": false, "score": 0, "creation_date": 1429294197, "post_id": 29706013, "comment_id": 47548581, "body": "@speg I added a part about that. Basically, <code>for i in foo</code> uses <code>IntoIterator</code>, and there&#39;s an implementation of that trait for <code>&amp;Vec&lt;T&gt;</code> that delegates to <code>Vec::iter</code>. <code>Vec::iter</code> returns an iterator that yields references to each item in the vector."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1429295775, "last_edit_date": 1429295775, "creation_date": 1429292435, "answer_id": 29706013, "question_id": 29705268, "link": "https://stackoverflow.com/questions/29705268/reference-to-a-vector-still-prints-as-a-vector/29706013#29706013", "title": "Reference to a vector still prints as a vector?", "body": "<blockquote>\n  <p>What is the point of the &amp;?</p>\n</blockquote>\n\n<p>The <code>&amp;</code> takes the reference of an object, as you surmised. However, there's a <a href=\"https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src/libcore/fmt/mod.rs#L783-L796\" rel=\"nofollow\"><code>Debug</code> implementation for references to <code>Debug</code> types</a> that just prints out the referred-to object. This is done because Rust tends to prefer value equality over reference equality:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, T: ?Sized + $tr&gt; $tr for &amp;'a T {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result { $tr::fmt(&amp;**self, f) }\n}\n</code></pre>\n\n<p>If you'd like to print the memory address, you can use <code>{:p}</code>:</p>\n\n<pre><code>let v = vec![1,2,3];\nprintln!(\"{:p}\", &amp;v);\n</code></pre>\n\n<blockquote>\n  <p>it looks like they are looping through a reference</p>\n</blockquote>\n\n<p>The <code>for i in foo</code> syntax sugar calls <code>into_iterator</code> on <code>foo</code>, and there's an <a href=\"https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src/libcollections/vec.rs#L1520-L1528\" rel=\"nofollow\">implementation of <code>IntoIterator</code> for <code>&amp;Vec</code></a> that returns an iterator of references to items in the iterator:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn into_iter(self) -&gt; slice::Iter&lt;'a, T&gt; {\n    self.iter()\n}\n</code></pre>\n"}], "owner": {"reputation": 1887, "user_id": 748876, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/0c5471ef371da37dc67677acad9ecc29?s=128&d=identicon&r=PG", "display_name": "speg", "link": "https://stackoverflow.com/users/748876/speg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 29706013, "answer_count": 2, "score": 2, "last_activity_date": 1429305111, "creation_date": 1429289922, "last_edit_date": 1429295712, "question_id": 29705268, "link": "https://stackoverflow.com/questions/29705268/reference-to-a-vector-still-prints-as-a-vector", "title": "Reference to a vector still prints as a vector?", "body": "<p>Silly n00b trying to learn a bit about Rust. Here is my program:</p>\n\n<pre><code>fn main() {\n    let v = vec![1, 2, 3];\n    println!(\"{:?}\", v);\n    println!(\"{:?}\", &amp;v);\n}\n</code></pre>\n\n<p>Produced the output:</p>\n\n<pre><code>[1, 2, 3]\n[1, 2, 3]\n</code></pre>\n\n<p>What is the point of the <code>&amp;</code>? I was half expecting it to print a memory address.</p>\n\n<p>I was originally thrown by this in the <a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20let%20vec%20%3D%20vec!%5B1%2C%202%2C%203%5D%3B%0A%20%20%20%20%0A%20%20%20%20for%20x%20in%20%26vec%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%7D\" rel=\"nofollow\">intro</a> where it looks like they are looping <em>through</em> a reference. My guess is that Rust does some magic and detects it is a memory address of a vector?</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1485390816, "last_edit_date": 1485390816, "creation_date": 1429260886, "answer_id": 29694597, "question_id": 29693421, "link": "https://stackoverflow.com/questions/29693421/how-can-i-create-c-blocks-when-using-ffi/29694597#29694597", "title": "How can I create &quot;C Blocks&quot; when using FFI?", "body": "<p><strong>Short, probably helpful answer</strong>: there's the <a href=\"https://crates.io/crates/block\" rel=\"nofollow noreferrer\"><code>block</code></a> crate, which looks like it might do the job.</p>\n\n<p><strong>Short, unhelpful answer</strong>: Insofar as I am aware, Rust doesn't have any support for Apple's block extension.  There is no equivalent Rust type, assuming you want to call an API that expects a block.</p>\n\n<p><strong>Longer, marginally less unhelpful answer</strong>: From what I can gather from <a href=\"http://clang.llvm.org/docs/Block-ABI-Apple.html\" rel=\"nofollow noreferrer\">some Clang documentation on the Apple Block ABI</a>, <code>void(^)(void)</code> would be the same size as a regular pointer.</p>\n\n<p>As such, my advice is as follows: treat blocks as opaque, pointer-sized values.  To invoke one, write a function in C which calls it for you.</p>\n\n<p>The following is untested (I don't have a Mac), but should at least get you going in the right direction.  Also, I'm marking this community wiki so anyone who <em>can</em> test it can fix it if need-be.</p>\n\n<p>In Rust:</p>\n\n<pre><code>// These are the \"raw\" representations involved.  I'm not using std::raw\n// because that's not yet stabilised.\n#[deriving(Copy, Clone)]\nstruct AppleBlock(*const ());\n\n#[deriving(Copy, Clone)]\nstruct RustClosure(*const(), *const());\n\n// Functions that we need to be written in C:\nextern \"C\" {\n    fn rust_closure_to_block(closure_blob: RustClosure) -&gt; AppleBlock;\n    fn block_release(block_blob: AppleBlock);\n}\n\n// The function that the C code will need.  Note that this is *specific* to\n// FnMut() closures.  If you wanted to generalise this, you could write a\n// generic version and pass a pointer to that to `rust_closure_to_block`.\nextern \"C\" fn call_rust_closure(closure_blob: RustClosure) {\n    let closure_ref: &amp;FnMut() = unsafe { mem::transmute(closure_blob) };\n    closure_ref();\n}\n\n// This is what you call in order to *temporarily* turn a closure into a\n// block.  So, you'd use it as:\n//\n//     with_closure_as_block(\n//         || do_stuff(),\n//         |block| CFRunLoopPerformBlock(fl, mode, block)\n//     );\nfn with_closure_as_block&lt;C, B, R&gt;(closure: C, body: B) -&gt; R\nwhere C: FnMut(), B: FnOnce(block_blob) -&gt; R {\n    let closure_ref: &amp;FnMut() = &amp;closure;\n    let closure_blob: RustClosure = unsafe { mem::transmute(closure_ref) };\n    let block_blob = unsafe { rust_closure_to_block(closure_blob) };\n    let r = body(block_blob);\n    unsafe { block_release(block_blob) };\n    r\n}\n</code></pre>\n\n<p>In C:</p>\n\n<pre><code>typedef struct AppleBlock {\n    void *ptr;\n} AppleBlock;\n\ntypedef struct RustClosure {\n    void *ptr;\n    void *vt;\n} RustClosure;\n\nvoid call_rust_closure(RustClosure closure_blob);\n\nAppleBlock rust_closure_to_block(RustClosure closure_blob) {\n    return (AppleBlock)Block_copy(^() {\n        call_rust_closure(closure_blob);\n    });\n}\n\n// I'm not using Block_release directly because I don't know if or how\n// blocks change name mangling or calling.  You might be able to just\n// use Block_release directly from Rust.\nvoid block_release(AppleBlock block) {\n    Block_release((void (^)(void))block);\n}\n</code></pre>\n"}], "owner": {"reputation": 244, "user_id": 1115807, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1aef30263cfdd40cfce2da7c364e3c2?s=128&d=identicon&r=PG", "display_name": "Nozama", "link": "https://stackoverflow.com/users/1115807/nozama"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 0, "accepted_answer_id": 29694597, "answer_count": 1, "score": 6, "last_activity_date": 1485396669, "creation_date": 1429257248, "last_edit_date": 1485396669, "question_id": 29693421, "link": "https://stackoverflow.com/questions/29693421/how-can-i-create-c-blocks-when-using-ffi", "title": "How can I create &quot;C Blocks&quot; when using FFI?", "body": "<p>I'm working with the <code>CoreFoundation</code> framework on OS X, but I don't know how to map this function in Rust:</p>\n\n<pre><code>void CFRunLoopPerformBlock(CFRunLoopRef fl, CFTypeRef mode, void (^block)(void));\n</code></pre>\n\n<p>The last parameter is <code>void(^block)(void)</code> \u2014 how can I create arguments of this type?</p>\n"}, {"tags": ["pattern-matching", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429235923, "post_id": 29688753, "comment_id": 47514884, "body": "I would rewrite <code>match self { &amp;mut Container(ref a) =&gt; \u2026 }</code> as <code>let a = &amp;self.0; \u2026</code>, myself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1429236010, "post_id": 29688753, "comment_id": 47514917, "body": "@ChrisMorgan yeah, so would I. It is a conceit to use pattern matching, without adding an enum or another nested layer, in an attempt to keep the example small."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429236128, "post_id": 29688753, "comment_id": 47514948, "body": "(Prevailing style is also in such cases <code>match *self { Container(ref a) =&gt; \u2026 }</code>, to take out any references in the match subject rather than the branch patterns.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1429236272, "post_id": 29688753, "comment_id": 47514985, "body": "@ChrisMorgan good catch, that was leftover from my trials on the playpen!"}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429237342, "post_id": 29689140, "comment_id": 47515315, "body": "I\u2019ve had my fair share of disagreements with the Rust compiler on what I should and shouldn\u2019t be allowed to do. Arguing with rustc gets a bit annoying, because I never win the argument. If I think about it long enough, I can <i>always</i> find a reason why what I wanted to do was wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429237438, "post_id": 29689140, "comment_id": 47515337, "body": "I&#39;m not mad at the compiler at all, and I fully agree with the reasoning. In my ideal case, I would have liked a way to bind a variable on the left hand side of the match arm, and somehow have the binding &quot;go out of scope&quot; before the match body starts. That would have allowed me to call my method in the match guard, but still mutate one level up from the bound variable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429796808, "post_id": 29689140, "comment_id": 47777127, "body": "I don&#39;t suppose you have a cleaner solution than my current workaround?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429826635, "post_id": 29689140, "comment_id": 47797103, "body": "No, \u2019fraid not while we still use lexical borrows."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1558142527, "last_edit_date": 1558142527, "creation_date": 1429237205, "answer_id": 29689140, "question_id": 29688753, "link": "https://stackoverflow.com/questions/29688753/how-can-i-bind-a-variable-in-a-match-arm-when-matching-on-a-mutable-reference/29689140#29689140", "title": "How can I bind a variable in a match arm when matching on a mutable reference?", "body": "<p>When <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes are enabled</a>, your original code works as-is.</p>\n\n<h1>Before Non-Lexical Lifetimes</h1>\n\n<p>In the name of safety, Rust forbids various classes of things, even though a specific case of them might work. This is one such case, and what you are trying to do is not and never will be possible.</p>\n\n<p>You have created a reference to the contents of <code>self</code>, but then you call <code>self.update()</code> which wants a mutable reference to <code>self</code>. A language <em>could</em> effectively inline <code>update</code> and thus determine that it\u2019s safe to keep that reference alive, but it\u2019s easy to demonstrate that the basic concept won\u2019t always work with this example of badness that the Rust compiler saves you from:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct A(u8);\n\nstruct Container(A);\n\nimpl Container {\n    fn update(&amp;mut self) {\n        self.0 = A(0);\n    }\n\n    fn do_a_thing(&amp;mut self) {\n        let a = &amp;self.0;\n        let before = a.0;\n        self.update();\n        assert_eq!(before, a.0);\n    }\n}\n\nfn main() {\n    Container(A(1)).do_a_thing();\n    // Panic: 1 != 0\n}\n</code></pre>\n\n<p>If this were allowed to compile, it would panic because the target of <code>a</code>, despite its being an immutable reference, changed underneath you, something it clearly must not be allowed to do.</p>\n\n<p>The happy-go-lucky mentality of C++ templates are an example of trying something which might or might not work; it\u2019s quite possible with them that a change deep in the internals of a function might break its users so that they no longer compile. Rust has decided not to go down that path, and so treats each method as a strong isolation barrier. No changes to the body of a function will ever cause code outside the method to stop compiling.</p>\n\n<p>You cannot have any references, mutable or otherwise, to anything inside <code>self</code> while you call a <code>&amp;mut self</code>-requesting method on <code>self</code>.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1891, "favorite_count": 0, "accepted_answer_id": 29689140, "answer_count": 1, "score": 6, "last_activity_date": 1558142553, "creation_date": 1429234680, "last_edit_date": 1558142553, "question_id": 29688753, "link": "https://stackoverflow.com/questions/29688753/how-can-i-bind-a-variable-in-a-match-arm-when-matching-on-a-mutable-reference", "title": "How can I bind a variable in a match arm when matching on a mutable reference?", "body": "<p>I am <code>match</code>ing on a struct and would like to use a match guard. However, the struct is mutable, and binding variables on the left side of the match arm seems to cause a separate borrow. This then triggers compilation errors, since you can't have a second borrow (mutable or immutable) while the mutable borrow is outstanding.</p>\n\n<pre><code>struct A(u8);\n\nimpl A {\n    fn is_awesome(&amp;self) -&gt; bool { true }\n}\n\nstruct Container(A);\n\nimpl Container {\n    fn update(&amp;mut self) {}\n\n    fn do_a_thing(&amp;mut self) {\n        match *self {\n            Container(ref a) if a.is_awesome() =&gt; self.update(),\n            _ =&gt; {},\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as mutable because `self.0` is also borrowed as immutable\n  --&gt; src/main.rs:14:51\n   |\n14 |             Container(ref a) if a.is_awesome() =&gt; self.update(),\n   |                       -----                       ^^^^ mutable borrow occurs here\n   |                       |\n   |                       immutable borrow occurs here\n15 |             _ =&gt; {},\n16 |         }\n   |         - immutable borrow ends here\n</code></pre>\n\n<p>My current workaround is to duplicate the logic to compute the match guard <em>before</em> my match, then I can just use the boolean as my match guard. This is not satisfying for the obvious code duplication issues:</p>\n\n<pre><code>fn do_a_thing(&amp;mut self) {\n    let awesome = match *self {\n        Container(ref a) =&gt; a.is_awesome(),\n    };\n\n    match *self {\n        Container(..) if awesome =&gt; self.update(),\n        _ =&gt; {},\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1429215839, "post_id": 29682881, "comment_id": 47507411, "body": "<code>let y: [u32; 10] = [initfn(),initfn(),initfn(),initfn(),initfn(),initfn(),initf&zwnj;&#8203;n(),initfn(),initfn(&zwnj;&#8203;),initfn()];</code>."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1429360404, "post_id": 29682881, "comment_id": 47569219, "body": "<code>let x: Cow&lt;[u32]&gt; = Cow::from_iter ((0..10) .map (|idx| idx * 2))</code> looked promising, but it uses a Vec under covers."}], "owner": {"reputation": 51, "user_id": 4797867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0fd4974279fc36953ce40c1fb5e86ab4?s=128&d=identicon&r=PG&f=1", "display_name": "oddcowboy", "link": "https://stackoverflow.com/users/4797867/oddcowboy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 681, "favorite_count": 0, "closed_date": 1429503739, "answer_count": 0, "score": 5, "last_activity_date": 1563900681, "creation_date": 1429208125, "last_edit_date": 1429213097, "question_id": 29682881, "link": "https://stackoverflow.com/questions/29682881/initialize-an-array-with-a-closure", "closed_reason": "Duplicate", "title": "Initialize an array with a closure", "body": "<p>How to initialize an array such that each element is different programmatically (not manually specifying all the elements)?</p>\n\n<p>It seems like there should be some way to do so via closure, for example:</p>\n\n<pre><code>fn main() {\n    let x: [u32; 10] = [0; 10];\n    println!(\"{:?}\", x);\n\n    let mut count = 0;\n    let mut initfn = || { let tmp = count; count += 1; tmp };\n\n    // What I want below is a non-copying array comprehension -- one\n    // which runs initfn() 10 times...  Is there such a thing?  Maybe\n    // using iterators?\n    let y: [u32; 10] = [initfn(); 10];\n    println!(\"{:?}\", y);\n\n    // The goal is to avoid the following because my real use case\n    // does not allow default values for the array elements...\n    let mut z: [usize; 10] = [0; 10];\n    for i in 0..10 {\n        z[i] = i;\n    }\n}\n</code></pre>\n\n<p><strong>update:</strong>  Can this be done without using \"unsafe\"?</p>\n\n<p>There is a macro-based <a href=\"https://www.reddit.com/r/rust/comments/29ymbx/a_macro_to_fill_a_fixed_length_array/cipwee1\" rel=\"noreferrer\">answer by erikt</a> from more than a year ago which looks promising, but relies on iterative anti-quote expansion by the macro system that does not seem to exist...   Has the language changed to make this possible now?</p>\n"}, {"tags": ["reference", "rust", "mutable"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 33, "last_activity_date": 1429182849, "last_edit_date": 1429182849, "creation_date": 1429182488, "answer_id": 29672875, "question_id": 29672373, "link": "https://stackoverflow.com/questions/29672373/what-is-difference-between-mut-a-t-and-a-mut-t/29672875#29672875", "title": "What is difference between `mut a: &amp;T` and `a: &amp;mut T`?", "body": "<p>Function parameters and let bindings in Rust are proper patterns, like those at the left of <code>=&gt;</code> in match (except that let and parameter patterns must be <em>irrefutable</em>, that is, they must always match). <code>mut a</code> is just a part of pattern syntax and it means that <code>a</code> is a mutable binding. <code>&amp;mut T</code>/<code>&amp;T</code>, on the other hand, is a type - mutable or immutable reference.</p>\n\n<p>There are four possible combinations of <code>mut</code> in references and patterns:</p>\n\n<pre><code>    a: &amp;T      // immutable binding of immutable reference\nmut a: &amp;T      // mutable binding of immutable reference\n    a: &amp;mut T  // immutable binding of mutable reference\nmut a: &amp;mut T  // mutable binding of mutable reference\n</code></pre>\n\n<p>The first variant is absolutely immutable (without taking internal mutability of <code>Cell</code> and such into account) - you can neither change what <code>a</code> points to nor the object it currently references.</p>\n\n<p>The second variant allows you to change <code>a</code> to point somewhere else but it doesn't allow you to change the object it points to.</p>\n\n<p>The third variant does not allow to change <code>a</code> to point to something else but it allows mutating the value it references.</p>\n\n<p>And the last variant allows both changing <code>a</code> to reference something else and mutating the value this reference is currently pointing at.</p>\n\n<p>Taking the above into account you can see where <code>mut a: &amp;T</code> can be used. For example, you can write a search of a part of a string in a loop for the further usage like this:</p>\n\n<pre><code>let mut s: &amp;str = source;\nloop {\n    // ... whatever\n    s = &amp;source[i..j];\n}\n// use the found s here\n</code></pre>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1327, "favorite_count": 8, "closed_date": 1429182747, "accepted_answer_id": 29672875, "answer_count": 1, "score": 9, "last_activity_date": 1429182849, "creation_date": 1429181123, "last_edit_date": 1429182468, "question_id": 29672373, "link": "https://stackoverflow.com/questions/29672373/what-is-difference-between-mut-a-t-and-a-mut-t", "closed_reason": "Duplicate", "title": "What is difference between `mut a: &amp;T` and `a: &amp;mut T`?", "body": "<p>Could someone explain what is the difference between these two and when is <code>mut a: &amp;T</code> most often used?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429180030, "post_id": 29671900, "comment_id": 47481620, "body": "There is no need for copy, you can swap values of <code>c</code> and <code>a</code>."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429180095, "post_id": 29671900, "comment_id": 47481668, "body": "I&#39;m talking about copying <i>the reference</i> not the vector."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429180399, "post_id": 29671900, "comment_id": 47481860, "body": "Ah, ok. But didn&#39;t OP wanted <code>ver_ref</code> to be mutated?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1429180604, "post_id": 29671900, "comment_id": 47482007, "body": "<code>mut a: &amp;Vec&lt;i32&gt;</code> and <code>a: &amp;mut Vec&lt;i32&gt;</code> are two very different things, and the OP was using the first one."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1429180803, "post_id": 29671900, "comment_id": 47482162, "body": "I assumed <code>mut a : &amp;Vec&lt;i32&gt;</code> was an error. Does it have some special semantic different than <code>a: &amp;Vec&lt;i32&gt;</code>?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1429180883, "post_id": 29671900, "comment_id": 47482213, "body": "Yes: it allows you to mutate the reference: change the object it points to."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 2, "last_activity_date": 1429179852, "creation_date": 1429179852, "answer_id": 29671900, "question_id": 29671076, "link": "https://stackoverflow.com/questions/29671076/why-cant-i-make-a-reference-to-memory-inside-if/29671900#29671900", "title": "Why can&#39;t I make a reference to memory inside &quot;if&quot;?", "body": "<p>The rules of lifetime in rust are quite (very) strict: if you have a reference to an object, this object must live longer than the reference, <strong>in both direction</strong>.</p>\n\n<p>This means the reference must be created <strong>after the object</strong>.</p>\n\n<p>In your case, <code>a</code> exists before <code>c</code>, so the assignment <code>a = &amp;c</code> is invalid. A simple fix can be to create a copy of the reference after <code>c</code> is created and work on this copy:</p>\n\n<pre><code>fn foo(vec_ref: &amp;Vec&lt;i32&gt;){\n\n    let mut c: Vec&lt;i32&gt;;\n    let mut a = vec_ref\n\n    if a[0] == 0 {\n        c = vec![1; 3];\n        a = &amp;c;\n    }\n    println!(\"{:?}\",a);\n}\n</code></pre>\n\n<p>or in a more rusty way:</p>\n\n<pre><code>fn foo(vec_ref: &amp;Vec&lt;i32&gt;){\n\n    let mut c: Vec&lt;i32&gt;;\n    let a = if vec_ref[0] == 0 {\n        c = vec![1; 3];\n        &amp;c\n    } else {\n        vec_ref\n    };\n    println!(\"{:?}\",a);\n}\n</code></pre>\n"}], "owner": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 29671900, "answer_count": 1, "score": 0, "last_activity_date": 1429196076, "creation_date": 1429177676, "last_edit_date": 1429196076, "question_id": 29671076, "link": "https://stackoverflow.com/questions/29671076/why-cant-i-make-a-reference-to-memory-inside-if", "title": "Why can&#39;t I make a reference to memory inside &quot;if&quot;?", "body": "<p>I could make a copy of this vector, but that will take time and memory.\nI could write another <code>println</code>, but this is just an example \u2014 instead of <code>println</code> there may be several loops \u2014 and it will take space and complicate the code. I could perform the conversion in <code>main</code> and write two versions of the function call, but changing the reference is much easier.</p>\n\n<pre><code>fn foo(mut a: &amp;Vec&lt;i32&gt;) {\n    let mut c: Vec&lt;i32&gt;;\n\n    if a[0] == 0 {\n        c = vec![1; 3];\n        a = &amp;c;\n    }\n\n    println!(\"{:?}\", a);\n}\n\nfn main() {\n    let a: Vec&lt;i32&gt; = vec![0; 3];\n    foo(&amp;a);\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>main.rs:9:14: 9:15 error: `c` does not live long enough\nmain.rs:9         a = &amp;c;\n                       ^\n</code></pre>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1429199367, "post_id": 29670983, "comment_id": 47496852, "body": "there used to be a Timer in std but now it&#39;s deprecated. You can take a look at this crate for a replacement: <a href=\"https://github.com/PeterReid/timer\" rel=\"nofollow noreferrer\">github.com/PeterReid/timer</a> . periodic_ms should work more or less like time.Tick"}], "answers": [{"comments": [{"owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "edited": false, "score": 0, "creation_date": 1429801767, "post_id": 29696124, "comment_id": 47781338, "body": "hi, thanks for that!, it worked well. I guess ill be using this, thank you again."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1429264884, "creation_date": 1429264884, "answer_id": 29696124, "question_id": 29670983, "link": "https://stackoverflow.com/questions/29670983/what-is-the-equivalent-of-gos-range-time-tick/29696124#29696124", "title": "What is the equivalent of Go&#39;s range time.Tick?", "body": "<p>Rust threads are OS threads, they use OS scheduler and so you can emulate this with <code>thread::sleep_ms</code>:</p>\n\n<pre><code>use std::thread;\n\nfn start_getting_weather() {\n    let mut loop_counter = 0;\n    loop {\n        loop_counter += 1;\n        println!(\"counter: {}\", loop_counter);\n        main_weather_getter();\n        thread::sleep_ms(delay);\n    }\n}\n\nthread::spawn(move || start_getting_weather());\n</code></pre>\n"}], "owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 29696124, "answer_count": 1, "score": 1, "last_activity_date": 1429264884, "creation_date": 1429177476, "last_edit_date": 1429189797, "question_id": 29670983, "link": "https://stackoverflow.com/questions/29670983/what-is-the-equivalent-of-gos-range-time-tick", "title": "What is the equivalent of Go&#39;s range time.Tick?", "body": "<p>I'm new to and studying Rust currently, coming from Go. How do I implement something like long concurrent polling? </p>\n\n<pre class=\"lang-go prettyprint-override\"><code>// StartGettingWeather initialize weather getter and setter\nfunc StartGettingWeather() {\n\n    // start looping\n    for i := range time.Tick(time.Second * time.Duration(delay)) {\n        _ = i\n        loopCounter++\n        fmt.Println(time.Now().Format(time.RFC850), \" counter: \", loopCounter)\n        mainWeatherGetter()\n    }\n}\n</code></pre>\n\n<p>and I will call this func as <code>go StartGettingWeather()</code></p>\n"}, {"tags": ["string", "iterator", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1429175845, "post_id": 29670170, "comment_id": 47478599, "body": "There is <code>.chunks()</code> but it is only available for slices, not general iterators."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1429176451, "post_id": 29670170, "comment_id": 47479044, "body": "That would be perfect if it were available for <code>&amp;str</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429190142, "post_id": 29670170, "comment_id": 47489316, "body": "What behavior do you want when the string is not evenly dividable into <code>N</code> characters? Your current code panicks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429190262, "post_id": 29670170, "comment_id": 47489436, "body": "Also, <b>please</b> be aware of issues with bytes / characters / graphemes <i>whenever</i> you start splitting strings."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429212732, "post_id": 29670170, "comment_id": 47505462, "body": "@Shepmaster in my use case, either returning <code>None</code> or truncating the end would work. And yeah good points about bytes vs chars. Again, for my use case it works since I&#39;m dealing with DNA sequence data but in general what I&#39;m doing above is not unicode safe."}], "answers": [{"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429213265, "post_id": 29671614, "comment_id": 47505794, "body": "This seems like the shortest way to accomplish my goal. As stated above I&#39;m dealing with genomic sequence data, which is plain ASCII. I&#39;m going to accept the other answer since it&#39;s more general, but I really like this."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429257453, "post_id": 29671614, "comment_id": 47523273, "body": "Can you explain what the <code>&lt;Item=&amp;&#39;a str&gt;+&#39;a</code> syntax does here? Also, why do you have to wrap the Iterator in a Box?"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429258722, "post_id": 29671614, "comment_id": 47524089, "body": "Ok I understand why you wrapped the iterator in a Box (<a href=\"http://stackoverflow.com/q/27535289/943814\">this link</a>). Still wondering about the other though."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 1, "creation_date": 1429261993, "post_id": 29671614, "comment_id": 47526236, "body": "@anders, yeah, I wrapped the iterator in a box because there is a <code>map</code> with a closure (though it could be written with a static function instead, so this is more for simplicity than of necessity). <code>Box&lt;Iterator&lt;Item=&amp;&#39;a str&gt;+&#39;a&gt;</code> describes a type of a boxed trait object created out of a value which implements <code>Iterator&lt;Item=&amp;&#39;a str&gt;</code> and which has lifetime at least <code>&#39;a</code> (the <code>+&#39;a</code> part). The <code>&lt;Item=&amp;&#39;a str&gt;</code> syntax is the way to specify the desired associated type in a trait (here, the type of iterator items)."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1429179129, "creation_date": 1429179129, "answer_id": 29671614, "question_id": 29670170, "link": "https://stackoverflow.com/questions/29670170/iterate-over-a-string-n-elements-at-a-time/29671614#29671614", "title": "Iterate over a string, n elements at a time", "body": "<p><code>chunks()</code> is not available for <code>&amp;str</code> because it is not really well-defined on strings - do you want chunks with length in bytes, or characters, or grapheme clusters? If you know in advance that your string is in ASCII you can use the following code:</p>\n\n<pre><code>use std::str;\n\nfn main() {\n    let string = \"AAABBBCCC\";\n    for chunk in str_chunks(string, 3) {\n        println!(\"{}\", chunk);\n    }\n}\n\nfn str_chunks&lt;'a&gt;(s: &amp;'a str, n: usize) -&gt; Box&lt;Iterator&lt;Item=&amp;'a str&gt;+'a&gt; {\n    Box::new(s.as_bytes().chunks(n).map(|c| str::from_utf8(c).unwrap()))\n}\n</code></pre>\n\n<p>However, it will break immediately if your strings have non-ASCII characters inside them. I'm pretty sure that it is possible to implement an iterator which splits a string into chunks of code points or grapheme clusters - it is just there is no such thing in the standard library now.</p>\n"}, {"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429213124, "post_id": 29672443, "comment_id": 47505697, "body": "I like this, but the plain function is more concise."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429270690, "post_id": 29672443, "comment_id": 47532213, "body": "that it is, but my version also is zero-copy ;)"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1429181326, "creation_date": 1429181326, "answer_id": 29672443, "question_id": 29670170, "link": "https://stackoverflow.com/questions/29670170/iterate-over-a-string-n-elements-at-a-time/29672443#29672443", "title": "Iterate over a string, n elements at a time", "body": "<p>You can always implement your own iterator. Of course that still requires quite some code, but it's not at the location where you are working with the string. Therefor your loop stays readable.</p>\n\n<pre><code>#![feature(collections)]\n\nstruct StringChunks&lt;'a&gt; {\n    s: &amp;'a str,\n    step: usize,\n    n: usize,\n}\n\nimpl&lt;'a&gt; StringChunks&lt;'a&gt; {\n    fn new(s: &amp;'a str, step: usize) -&gt; StringChunks&lt;'a&gt; {\n        StringChunks {\n            s: s,\n            step: step,\n            n: s.chars().count(),\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for StringChunks&lt;'a&gt; {\n    type Item = &amp;'a str;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a str&gt; {\n        if self.step &gt; self.n {\n            return None;\n        }\n        let ret = self.s.slice_chars(0, self.step);\n        self.s = self.s.slice_chars(self.step, self.n);\n        self.n -= self.step;\n        Some(ret)\n    }\n}\n\nfn main() {\n    let string = \"AAABBBCCC\";\n    for s in StringChunks::new(string, 3) {\n        println!(\"{}\", s);\n    }\n}\n</code></pre>\n\n<p>Note that this splits after <code>n</code> unicode chars. So graphemes or similar might end up split up.</p>\n"}, {"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429213509, "post_id": 29676109, "comment_id": 47505944, "body": "I really like that this is safe across bytes/chars/graphemes. It doesn&#39;t really matter for my use case but in general this seems like the most complete solution."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1429266527, "post_id": 29676109, "comment_id": 47529340, "body": "how is this safe across graphemes?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1429268971, "post_id": 29676109, "comment_id": 47531040, "body": "@ker I think @anders means the <i>algorithm</i> is safe. To actually make it so, you&#39;d have to swap <code>graphemes</code> instead of <code>chars</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1519060544, "last_edit_date": 1519060544, "creation_date": 1429190682, "answer_id": 29676109, "question_id": 29670170, "link": "https://stackoverflow.com/questions/29670170/iterate-over-a-string-n-elements-at-a-time/29676109#29676109", "title": "Iterate over a string, n elements at a time", "body": "<p>I would use a combination of <code>Peekable</code> and <code>Take</code>:</p>\n\n<pre><code>fn main() {\n    let string = \"AAABBBCCC\";\n    let mut z = string.chars().peekable();\n    while z.peek().is_some() {\n        let chunk: String = z.by_ref().take(3).collect();\n        println!(\"{}\", chunk);\n    }\n}\n</code></pre>\n\n<p>In other cases, <a href=\"https://docs.rs/itertools/0.7.6/itertools/trait.Itertools.html#method.chunks\" rel=\"nofollow noreferrer\"><code>Itertools::chunks</code></a> might do the trick:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\n\nfn main() {\n    let string = \"AAABBBCCC\";\n    for chunk in &amp;string.chars().chunks(3) {\n        for c in chunk {\n            print!(\"{}\", c);\n        }\n        println!();\n    }\n}\n</code></pre>\n\n<h2>Standard warning about splitting strings</h2>\n\n<p>Be aware of issues with bytes / characters / code points / graphemes whenever you start splitting strings. With anything more complicated than ASCII characters, one character is <strong>not</strong> one byte and string slicing operates <strong>on bytes</strong>! There is also the concept of Unicode code points, but multiple Unicode characters may combine to form what a human thinks of as a single character. This stuff is <strong>non-trivial</strong>.</p>\n\n<p>If you actually just have ASCII data, it may be worth it to store it as such, perhaps in a <code>Vec&lt;u8&gt;</code>. At the very least, I'd create a newtype that wraps a <code>&amp;str</code> and only exposes ASCII-safe method and validates that it is ASCII when created.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3519, "favorite_count": 0, "accepted_answer_id": 29676109, "answer_count": 3, "score": 5, "last_activity_date": 1519060544, "creation_date": 1429175367, "last_edit_date": 1429190725, "question_id": 29670170, "link": "https://stackoverflow.com/questions/29670170/iterate-over-a-string-n-elements-at-a-time", "title": "Iterate over a string, n elements at a time", "body": "<p>I'm trying to iterate over a string, but iterating in slices of length <code>n</code> instead of iterator over every character. The following code accomplishes this manually, but is there a more functional way to do this?</p>\n\n<pre><code>fn main() {\n    let string = \"AAABBBCCC\";\n    let offset = 3;\n    for (i, _) in string.chars().enumerate() {\n        if i % offset == 0 {\n            println!(\"{}\", &amp;string[i..(i+offset)]);\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1429174623, "post_id": 29669741, "comment_id": 47477802, "body": "I like. Accepting for now unless someone has something from <code>std</code>"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1476161635, "post_id": 29669741, "comment_id": 67220614, "body": "Can you unzip one of these and get a tuple of collections?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1476178946, "post_id": 29669741, "comment_id": 67227877, "body": "Yes, see .unzip() on <code>Iterator</code> (only covers the pair case, though)."}, {"owner": {"reputation": 337, "user_id": 3476100, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006033431491/picture?type=large", "display_name": "GChamon", "link": "https://stackoverflow.com/users/3476100/gchamon"}, "edited": false, "score": 1, "creation_date": 1592324818, "post_id": 29669741, "comment_id": 110382822, "body": "the problem is that you need to know the number of arguments beforehand. In python you could just <code>zip(*list_of_tuples)</code> and get the result with an arbitrarily long list"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 48, "last_activity_date": 1567453600, "last_edit_date": 1567453600, "creation_date": 1429174226, "answer_id": 29669741, "question_id": 29669287, "link": "https://stackoverflow.com/questions/29669287/how-can-i-zip-more-than-two-iterators/29669741#29669741", "title": "How can I zip more than two iterators?", "body": "<p>You can use the <code>izip!()</code> macro from the crate <a href=\"https://crates.io/crates/itertools\" rel=\"noreferrer\">itertools</a>, which implements this for arbitrary many iterators:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use itertools::izip;\n\nfn main() {\n\n    let a = [1, 2, 3];\n    let b = [4, 5, 6];\n    let c = [7, 8, 9];\n\n    // izip!() accepts iterators and/or values with IntoIterator.\n    for (x, y, z) in izip!(&amp;a, &amp;b, &amp;c) {\n\n    }\n}\n</code></pre>\n\n<p>You would have to add a dependency on itertools in Cargo.toml, use whatever version is the latest. Example:</p>\n\n<pre><code>[dependencies]\nitertools = \"0.8\"\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4874, "user_id": 10392256, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-AW7Hl1mMbAo/AAAAAAAAAAI/AAAAAAAAAD0/bfECoQpKQ3M/photo.jpg?sz=128", "display_name": "han solo", "link": "https://stackoverflow.com/users/10392256/han-solo"}, "is_accepted": false, "score": 4, "last_activity_date": 1590479008, "creation_date": 1590479008, "answer_id": 62016977, "question_id": 29669287, "link": "https://stackoverflow.com/questions/29669287/how-can-i-zip-more-than-two-iterators/62016977#62016977", "title": "How can I zip more than two iterators?", "body": "<p>You could also create a macro using the <code>.zip</code> provided like,</p>\n\n<pre><code>$ cat z.rs\nmacro_rules! zip {\n    ($x: expr) =&gt; ($x);\n    ($x: expr, $($y: expr), +) =&gt; (\n        $x.iter().zip(\n            zip!($($y), +))\n    )\n}\n\n\nfn main() {\n    let x = vec![1,2,3];\n    let y = vec![4,5,6];\n    let z = vec![7,8,9];\n\n    let zipped = zip!(x, y, z);\n    println!(\"{:?}\", zipped);\n    for (a, (b, c)) in zipped {\n        println!(\"{} {} {}\", a, b, c);\n    }\n}\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre><code>$ rustc z.rs &amp;&amp; ./z\nZip { a: Iter([1, 2, 3]), b: Zip { a: Iter([4, 5, 6, 67]), b: IntoIter([7, 8, 9]), index: 0, len: 0 }, index: 0, len: 0 }\n1 4 7\n2 5 8\n3 6 9\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1592327412, "post_id": 62413283, "comment_id": 110384145, "body": "This doesn&#39;t <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\" rel=\"nofollow noreferrer\">zip</a> an iterator, so it doesn&#39;t seem like an answer to this question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1592327425, "post_id": 62413283, "comment_id": 110384152, "body": "<a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec), or Box (&amp;Box) as a function argument?</a>"}, {"owner": {"reputation": 337, "user_id": 3476100, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006033431491/picture?type=large", "display_name": "GChamon", "link": "https://stackoverflow.com/users/3476100/gchamon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1592342486, "post_id": 62413283, "comment_id": 110391127, "body": "Rust doesn&#39;t support variable arguments, Vec here is just serving as a package. But it is mapping N vectors of size M to M vectors of size N, in which the first element of each comes from the first vector, the second from the second and so on. How could I generalize this to all classes of iterators in rust, instead of using vectors? Also, thanks for taking the time to refer to that reference, I learned something new"}, {"owner": {"reputation": 337, "user_id": 3476100, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006033431491/picture?type=large", "display_name": "GChamon", "link": "https://stackoverflow.com/users/3476100/gchamon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1592343835, "post_id": 62413283, "comment_id": 110391634, "body": "If I could easily build generators it would be better to construct the function, but <code>yield</code> is still experimental."}, {"owner": {"reputation": 1964, "user_id": 2097, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d86e1e03facd4470a84e97ccbcaf6353?s=128&d=identicon&r=PG", "display_name": "BlackShift", "link": "https://stackoverflow.com/users/2097/blackshift"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1608150788, "post_id": 62413283, "comment_id": 115498317, "body": "@Shepmaster it is an answer to how to translate this Python code to rust: <code>list(zip(*[[1,2,3],[4,5,6],[7,8,9]]))</code>. So while it doesn&#39;t actually use zip, it does what people like me expect zip to do. It therefore is a useful answer to some interpretations of the question."}], "tags": [], "owner": {"reputation": 337, "user_id": 3476100, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006033431491/picture?type=large", "display_name": "GChamon", "link": "https://stackoverflow.com/users/3476100/gchamon"}, "is_accepted": false, "score": 1, "last_activity_date": 1592327474, "last_edit_date": 1592327474, "creation_date": 1592325033, "answer_id": 62413283, "question_id": 29669287, "link": "https://stackoverflow.com/questions/29669287/how-can-i-zip-more-than-two-iterators/62413283#62413283", "title": "How can I zip more than two iterators?", "body": "<p>I wanted to be able to do this to an arbitrarily long vector, so I had to implement this by hand:</p>\n\n<pre><code>fn transpose_records&lt;T: Clone&gt;(records: &amp;Vec&lt;Vec&lt;T&gt;&gt;) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {\n    let mut transposed: Vec&lt;Vec&lt;T&gt;&gt; = vec![Vec::new(); records[0].len()];\n\n    for record in records {\n        for (index, element) in record.iter().enumerate() {\n            transposed[index].push(element.clone());\n        }\n    }\n\n    transposed\n}\n</code></pre>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11907, "favorite_count": 6, "accepted_answer_id": 29669741, "answer_count": 3, "score": 31, "last_activity_date": 1599061259, "creation_date": 1429172856, "last_edit_date": 1521380584, "question_id": 29669287, "link": "https://stackoverflow.com/questions/29669287/how-can-i-zip-more-than-two-iterators", "title": "How can I zip more than two iterators?", "body": "<p>Is there a more direct and readable way to accomplish the following:</p>\n\n<pre><code>fn main() {\n    let a = [1, 2, 3];\n    let b = [4, 5, 6];\n    let c = [7, 8, 9];\n    let iter = a.iter()\n        .zip(b.iter())\n        .zip(c.iter())\n        .map(|((x, y), z)| (x, y, z));\n}\n</code></pre>\n\n<p>That is, how can I build an iterator from n iterables which yields n-tuples?</p>\n"}]